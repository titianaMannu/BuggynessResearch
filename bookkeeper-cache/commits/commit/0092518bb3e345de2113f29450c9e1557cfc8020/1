{"sha":"0092518bb3e345de2113f29450c9e1557cfc8020","node_id":"MDY6Q29tbWl0MTU3NTk1NjowMDkyNTE4YmIzZTM0NWRlMjExM2YyOTQ1MGM5ZTE1NTdjZmM4MDIw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-30T15:20:55Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-30T15:20:55Z"},"message":"BOOKKEEPER-331: Let hedwig support returning message seq id for publish requests. (Mridul via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1367117 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bf209490456c8fb1a14dd6bab236b3f77ae582b1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bf209490456c8fb1a14dd6bab236b3f77ae582b1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0092518bb3e345de2113f29450c9e1557cfc8020","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0092518bb3e345de2113f29450c9e1557cfc8020","html_url":"https://github.com/apache/bookkeeper/commit/0092518bb3e345de2113f29450c9e1557cfc8020","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0092518bb3e345de2113f29450c9e1557cfc8020/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"46a2663a842c6d256c73fba1bd12eb70559c115e","url":"https://api.github.com/repos/apache/bookkeeper/commits/46a2663a842c6d256c73fba1bd12eb70559c115e","html_url":"https://github.com/apache/bookkeeper/commit/46a2663a842c6d256c73fba1bd12eb70559c115e"}],"stats":{"total":1898,"additions":1638,"deletions":260},"files":[{"sha":"107fd1665c6cf0273deed9f56ec54d2fe9f724bb","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -72,6 +72,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-329: provide stop scripts for hub server (sijie via ivank)\n \n+        BOOKKEEPER-331: Let hedwig support returning message seq id for publish requests. (Mridul via sijie)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"627ddbb719651434d067bf171f8cbd8d26360cb4","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -20,6 +20,7 @@\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.exceptions.PubSubException.CouldNotConnectException;\n import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.util.Callback;\n \n@@ -40,8 +41,10 @@\n      *             If we are not able to connect to the server host\n      * @throws ServiceDownException\n      *             If we are unable to publish the message to the topic.\n+     * @return The PubSubProtocol.PublishResponse of the publish ... can be used to pick seq-id.\n      */\n-    public void publish(ByteString topic, Message msg) throws CouldNotConnectException, ServiceDownException;\n+    public PubSubProtocol.PublishResponse publish(ByteString topic, Message msg)\n+        throws CouldNotConnectException, ServiceDownException;\n \n     /**\n      * Publishes a message asynchronously on the given topic.\n@@ -60,4 +63,26 @@\n      */\n     public void asyncPublish(ByteString topic, Message msg, Callback<Void> callback, Object context);\n \n+\n+  /**\n+   * Publishes a message asynchronously on the given topic.\n+   * This method, unlike {@link #asyncPublish(ByteString, PubSubProtocol.Message, Callback, Object)},\n+   * allows for the callback to retrieve {@link PubSubProtocol.PublishResponse} which was returned by the server.\n+   *\n+   *\n+   *\n+   * @param topic\n+   *            Topic name to publish on\n+   * @param msg\n+   *            Message object to serialize and publish\n+   * @param callback\n+   *            Callback to invoke when the publish to the server has actually\n+   *            gone through. This will have to deal with error conditions on\n+   *            the async publish request.\n+   * @param context\n+   *            Calling context that the Callback needs since this is done\n+   *            asynchronously.\n+   */\n+    public void asyncPublishWithResponse(ByteString topic, Message msg,\n+                                         Callback<PubSubProtocol.PublishResponse> callback, Object context);\n }"},{"sha":"ce7469e4ed7ce7cbcb1adc5fa18100e25fd96ffa","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -20,6 +20,7 @@\n import java.util.List;\n \n import com.google.protobuf.ByteString;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n@@ -47,9 +48,11 @@\n     public final OperationType operationType;\n     // Options for the subscription\n     public final SubscriptionOptions options;\n+\n     // These two variables are not final since we might override them\n     // in the case of a Subscribe reconnect.\n-    public Callback<Void> callback;\n+    private Callback<PubSubProtocol.ResponseBody> callback;\n+\n     public Object context;\n \n     // Member variables used after object has been constructed.\n@@ -83,7 +86,8 @@\n     // Constructor for all types of PubSub request data to send to the server\n     public PubSubData(final ByteString topic, final Message msg, final ByteString subscriberId,\n                       final OperationType operationType, final SubscriptionOptions options,\n-                      final Callback<Void> callback, final Object context) {\n+                      final Callback<PubSubProtocol.ResponseBody> callback,\n+                      final Object context) {\n         this.topic = topic;\n         this.msg = msg;\n         this.subscriberId = subscriberId;\n@@ -93,6 +97,20 @@ public PubSubData(final ByteString topic, final Message msg, final ByteString su\n         this.context = context;\n     }\n \n+    public void setCallback(Callback<PubSubProtocol.ResponseBody> callback) {\n+        this.callback = callback;\n+    }\n+\n+    public Callback<?> getCallback() {\n+        return callback;\n+    }\n+\n+    public void operationFinishedToCallback(Object context, PubSubProtocol.ResponseBody response){\n+\n+        callback.operationFinished(context, response);\n+    }\n+\n+\n     // Clear all of the stored servers we've contacted or attempted to in this\n     // request.\n     public void clearServersList() {"},{"sha":"25a1ec08b0e856dcf57fc34a310c4d8705d4fa9d","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -17,6 +17,7 @@\n  */\n package org.apache.hedwig.client.handlers;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -30,30 +31,33 @@\n  * async calls synchronous.\n  *\n  */\n-public class PubSubCallback implements Callback<Void> {\n+public class PubSubCallback implements Callback<PubSubProtocol.ResponseBody> {\n \n     private static Logger logger = LoggerFactory.getLogger(PubSubCallback.class);\n \n     // Private member variables\n-    private PubSubData pubSubData;\n+    private final PubSubData pubSubData;\n     // Boolean indicator to see if the sync PubSub call was successful or not.\n     private boolean isCallSuccessful;\n     // For sync callbacks, we'd like to know what the PubSubException is thrown\n     // on failure. This is so we can have a handle to the exception and rethrow\n     // it later.\n     private PubSubException failureException;\n \n+    private PubSubProtocol.ResponseBody responseBody;\n+\n     // Constructor\n     public PubSubCallback(PubSubData pubSubData) {\n         this.pubSubData = pubSubData;\n     }\n \n-    public void operationFinished(Object ctx, Void resultOfOperation) {\n+    public void operationFinished(Object ctx, PubSubProtocol.ResponseBody resultOfOperation) {\n         if (logger.isDebugEnabled())\n             logger.debug(\"PubSub call succeeded for pubSubData: \" + pubSubData);\n         // Wake up the main sync PubSub thread that is waiting for us to\n         // complete.\n         synchronized (pubSubData) {\n+            this.responseBody = resultOfOperation;\n             isCallSuccessful = true;\n             pubSubData.isDone = true;\n             pubSubData.notify();\n@@ -85,4 +89,8 @@ public PubSubException getFailureException() {\n         return failureException;\n     }\n \n+\n+    public PubSubProtocol.ResponseBody getResponseBody() {\n+        return responseBody;\n+    }\n }"},{"sha":"d83078e330b48362da1dda90d8098e893fda1df3","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -17,6 +17,7 @@\n  */\n package org.apache.hedwig.client.handlers;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n@@ -46,12 +47,13 @@ public void handlePublishResponse(PubSubResponse response, PubSubData pubSubData\n         case SUCCESS:\n             // Response was success so invoke the callback's operationFinished\n             // method.\n-            pubSubData.callback.operationFinished(pubSubData.context, null);\n+            pubSubData.operationFinishedToCallback(pubSubData.context,\n+                response.hasResponseBody() ? response.getResponseBody() : null);\n             break;\n         case SERVICE_DOWN:\n             // Response was service down failure so just invoke the callback's\n             // operationFailed method.\n-            pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n                                                     \"Server responded with a SERVICE_DOWN status\"));\n             break;\n         case NOT_RESPONSIBLE_FOR_TOPIC:\n@@ -63,8 +65,9 @@ public void handlePublishResponse(PubSubResponse response, PubSubData pubSubData\n             // Consider all other status codes as errors, operation failed\n             // cases.\n             logger.error(\"Unexpected error response from server for PubSubResponse: \" + response);\n-            pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n-                                                    \"Server responded with a status code of: \" + response.getStatusCode()));\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n+                                                    \"Server responded with a status code of: \" +\n+                                                        response.getStatusCode()));\n             break;\n         }\n     }"},{"sha":"c16aba4abd31a75111011b84de29361f400d2937","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -19,6 +19,7 @@\n \n import java.util.TimerTask;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -41,7 +42,7 @@\n  * callback will be the hook for this.\n  *\n  */\n-public class SubscribeReconnectCallback implements Callback<Void> {\n+public class SubscribeReconnectCallback implements Callback<PubSubProtocol.ResponseBody> {\n \n     private static Logger logger = LoggerFactory.getLogger(SubscribeReconnectCallback.class);\n \n@@ -71,7 +72,7 @@ public void run() {\n         }\n     }\n \n-    public void operationFinished(Object ctx, Void resultOfOperation) {\n+    public void operationFinished(Object ctx, PubSubProtocol.ResponseBody resultOfOperation) {\n         if (logger.isDebugEnabled())\n             logger.debug(\"Subscribe reconnect succeeded for origSubData: \" + origSubData);\n         // Now we want to restart delivery for the subscription channel only"},{"sha":"211e1bff59d72fb355f6d6a222c66f121ddfe124","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -23,6 +23,7 @@\n import java.util.Queue;\n import java.util.Set;\n \n+import org.jboss.netty.channel.ChannelFuture;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n@@ -89,7 +90,7 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n         // If this was not a successful response to the Subscribe request, we\n         // won't be using the Netty Channel created so just close it.\n         if (!response.getStatusCode().equals(StatusCode.SUCCESS)) {\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n             channel.close();\n         }\n \n@@ -131,19 +132,20 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n             }\n             // Response was success so invoke the callback's operationFinished\n             // method.\n-            pubSubData.callback.operationFinished(pubSubData.context, null);\n+            pubSubData.getCallback().operationFinished(pubSubData.context, null);\n             break;\n         case CLIENT_ALREADY_SUBSCRIBED:\n             // For Subscribe requests, the server says that the client is\n             // already subscribed to it.\n-            pubSubData.callback.operationFailed(pubSubData.context, new ClientAlreadySubscribedException(\n-                                                    \"Client is already subscribed for topic: \" + pubSubData.topic.toStringUtf8() + \", subscriberId: \"\n-                                                    + pubSubData.subscriberId.toStringUtf8()));\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ClientAlreadySubscribedException(\n+                                                    \"Client is already subscribed for topic: \" +\n+                                                        pubSubData.topic.toStringUtf8() + \", subscriberId: \" +\n+                                                        pubSubData.subscriberId.toStringUtf8()));\n             break;\n         case SERVICE_DOWN:\n             // Response was service down failure so just invoke the callback's\n             // operationFailed method.\n-            pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n                                                     \"Server responded with a SERVICE_DOWN status\"));\n             break;\n         case NOT_RESPONSIBLE_FOR_TOPIC:\n@@ -155,8 +157,9 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n             // Consider all other status codes as errors, operation failed\n             // cases.\n             logger.error(\"Unexpected error response from server for PubSubResponse: \" + response);\n-            pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n-                                                    \"Server responded with a status code of: \" + response.getStatusCode()));\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n+                                                    \"Server responded with a status code of: \" +\n+                                                        response.getStatusCode()));\n             break;\n         }\n     }"},{"sha":"f77417fa05ce32b5a66ec73837b25fe908b48864","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -51,19 +51,20 @@ public void handleUnsubscribeResponse(PubSubResponse response, PubSubData pubSub\n             responseHandler.getSubscriber().closeSubscription(pubSubData.topic, pubSubData.subscriberId);\n             // Response was success so invoke the callback's operationFinished\n             // method.\n-            pubSubData.callback.operationFinished(pubSubData.context, null);\n+            pubSubData.getCallback().operationFinished(pubSubData.context, null);\n             break;\n         case CLIENT_NOT_SUBSCRIBED:\n             // For Unsubscribe requests, the server says that the client was\n             // never subscribed to the topic.\n-            pubSubData.callback.operationFailed(pubSubData.context, new ClientNotSubscribedException(\n-                                                    \"Client was never subscribed to topic: \" + pubSubData.topic.toStringUtf8() + \", subscriberId: \"\n-                                                    + pubSubData.subscriberId.toStringUtf8()));\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ClientNotSubscribedException(\n+                                                    \"Client was never subscribed to topic: \" +\n+                                                        pubSubData.topic.toStringUtf8() + \", subscriberId: \" +\n+                                                        pubSubData.subscriberId.toStringUtf8()));\n             break;\n         case SERVICE_DOWN:\n             // Response was service down failure so just invoke the callback's\n             // operationFailed method.\n-            pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n                                                     \"Server responded with a SERVICE_DOWN status\"));\n             break;\n         case NOT_RESPONSIBLE_FOR_TOPIC:\n@@ -75,8 +76,9 @@ public void handleUnsubscribeResponse(PubSubResponse response, PubSubData pubSub\n             // Consider all other status codes as errors, operation failed\n             // cases.\n             logger.error(\"Unexpected error response from server for PubSubResponse: \" + response);\n-            pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n-                                                    \"Server responded with a status code of: \" + response.getStatusCode()));\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n+                                                    \"Server responded with a status code of: \" +\n+                                                        response.getStatusCode()));\n             break;\n         }\n     }"},{"sha":"4e217082ae511421c0696c5d36306b73d842d009","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -75,7 +75,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 // We've already tried to connect to this host before so just\n                 // invoke the operationFailed callback.\n                 logger.error(\"Error connecting to host more than once so just invoke the operationFailed callback!\");\n-                pubSubData.callback.operationFailed(pubSubData.context, new CouldNotConnectException(\n+                pubSubData.getCallback().operationFailed(pubSubData.context, new CouldNotConnectException(\n                                                         \"Could not connect to host: \" + host));\n             } else {\n                 if (logger.isDebugEnabled())"},{"sha":"a111c8e5d6a039470ef0af1a2a4328f5b19be54d","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -201,8 +201,8 @@ private void checkPubSubDataToTimeOut(PubSubData pubSubData, ResponseHandler res\n                 // operationFailed method.\n                 logger.error(\"Current PubSubRequest has timed out for pubSubData: \" + pubSubData);\n                 responseHandler.txn2PubSubData.remove(pubSubData.txnId);\n-                pubSubData.callback.operationFailed(pubSubData.context, new UncertainStateException(\n-                                                        \"Server ack response never received so PubSubRequest has timed out!\"));\n+                pubSubData.getCallback().operationFailed(pubSubData.context,\n+                    new UncertainStateException(\"Server ack response never received so PubSubRequest has timed out!\"));\n             }\n         }\n     }"},{"sha":"efba3fb9d4e6122636d2a087a100a7ee59dba7bf","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","status":"modified","additions":45,"deletions":5,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -21,6 +21,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n@@ -67,13 +68,15 @@ protected HedwigPublisher(HedwigClientImpl client) {\n         this.cfg = client.getConfiguration();\n     }\n \n-    public void publish(ByteString topic, Message msg) throws CouldNotConnectException, ServiceDownException {\n+    public PubSubProtocol.PublishResponse publish(ByteString topic, Message msg)\n+        throws CouldNotConnectException, ServiceDownException {\n+\n         if (logger.isDebugEnabled())\n             logger.debug(\"Calling a sync publish for topic: \" + topic.toStringUtf8() + \", msg: \" + msg);\n         PubSubData pubSubData = new PubSubData(topic, msg, null, OperationType.PUBLISH, null, null, null);\n         synchronized (pubSubData) {\n             PubSubCallback pubSubCallback = new PubSubCallback(pubSubData);\n-            asyncPublish(topic, msg, pubSubCallback, null);\n+            asyncPublishWithResponseImpl(topic, msg, pubSubCallback, null);\n             try {\n                 while (!pubSubData.isDone)\n                     pubSubData.wait();\n@@ -105,10 +108,27 @@ else if (failureException instanceof CouldNotConnectException) {\n                     throw new ServiceDownException(\"Server ack response to publish request is not successful\");\n                 }\n             }\n+\n+            PubSubProtocol.ResponseBody respBody = pubSubCallback.getResponseBody();\n+            if (null == respBody) return null;\n+            return respBody.hasPublishResponse() ? respBody.getPublishResponse() : null;\n         }\n     }\n \n-    public void asyncPublish(ByteString topic, Message msg, Callback<Void> callback, Object context) {\n+    public void asyncPublish(ByteString topic, Message msg, final Callback<Void> callback, Object context) {\n+        asyncPublishWithResponseImpl(topic, msg,\n+            new VoidCallbackAdapter<PubSubProtocol.ResponseBody>(callback), context);\n+    }\n+\n+    public void asyncPublishWithResponse(ByteString topic, Message msg,\n+                                         Callback<PubSubProtocol.PublishResponse> _callback, Object context) {\n+        // adapt the callback.\n+        asyncPublishWithResponseImpl(topic, msg, new PublishResponseCallbackAdapter(_callback), context);\n+    }\n+\n+    private void asyncPublishWithResponseImpl(ByteString topic, Message msg,\n+                                              Callback<PubSubProtocol.ResponseBody> callback, Object context) {\n+\n         if (logger.isDebugEnabled())\n             logger.debug(\"Calling an async publish for topic: \" + topic.toStringUtf8() + \", msg: \" + msg);\n         // Check if we already have a Channel connection set up to the server\n@@ -219,7 +239,7 @@ protected synchronized void storeHost2ChannelMapping(Channel channel) {\n             // topic. Close these redundant channels as they won't be used.\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Channel mapping to host: \" + host + \" already exists so no need to store it.\");\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n             channel.close();\n         }\n     }\n@@ -236,9 +256,29 @@ void close() {\n             closed = true;\n         }\n         for (Channel channel : host2Channel.values()) {\n-            client.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n             channel.close().awaitUninterruptibly();\n         }\n         host2Channel.clear();\n     }\n+\n+    private static class PublishResponseCallbackAdapter implements Callback<PubSubProtocol.ResponseBody>{\n+\n+        private final Callback<PubSubProtocol.PublishResponse> delegate;\n+\n+        private PublishResponseCallbackAdapter(Callback<PubSubProtocol.PublishResponse> delegate) {\n+            this.delegate = delegate;\n+        }\n+\n+        @Override\n+        public void operationFinished(Object ctx, PubSubProtocol.ResponseBody resultOfOperation) {\n+            if (null == resultOfOperation) delegate.operationFinished(ctx, null);\n+            else delegate.operationFinished(ctx, resultOfOperation.getPublishResponse());\n+        }\n+\n+        @Override\n+        public void operationFailed(Object ctx, PubSubException exception) {\n+            delegate.operationFailed(ctx, exception);\n+        }\n+    }\n }"},{"sha":"e4eca0d6bccd056feae2e9a36e47eb7e8ee32835","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -22,6 +22,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n@@ -151,7 +152,8 @@ else if (failureException instanceof ServiceDownException)\n     // Subscribe or Unsubscribe requests. This is for code reuse since these two\n     // flows are very similar. The assumption is that the input OperationType is\n     // either SUBSCRIBE or UNSUBSCRIBE.\n-    private void asyncSubUnsub(ByteString topic, ByteString subscriberId, Callback<Void> callback, Object context,\n+    private void asyncSubUnsub(ByteString topic, ByteString subscriberId,\n+                               Callback<PubSubProtocol.ResponseBody> callback, Object context,\n                                OperationType operationType, SubscriptionOptions options) {\n         if (logger.isDebugEnabled()) {\n             StringBuilder debugMsg = new StringBuilder().append(\"Calling a async subUnsub request for topic: \")\n@@ -252,7 +254,8 @@ protected void asyncSubscribe(ByteString topic, ByteString subscriberId,\n                                          \"SubscriberId passed is not valid: \" + subscriberId.toStringUtf8() + \", isHub: \" + isHub)));\n             return;\n         }\n-        asyncSubUnsub(topic, subscriberId, callback, context, OperationType.SUBSCRIBE, options);\n+        asyncSubUnsub(topic, subscriberId, new VoidCallbackAdapter<PubSubProtocol.ResponseBody>(callback),\n+            context, OperationType.SUBSCRIBE, options);\n     }\n \n     public void unsubscribe(ByteString topic, ByteString subscriberId) throws CouldNotConnectException,\n@@ -288,11 +291,19 @@ protected void unsubscribe(ByteString topic, ByteString subscriberId, boolean is\n \n     public void asyncUnsubscribe(final ByteString topic, final ByteString subscriberId, final Callback<Void> callback,\n                                  final Object context) {\n-        asyncUnsubscribe(topic, subscriberId, callback, context, false);\n+        doAsyncUnsubscribe(topic, subscriberId,\n+            new VoidCallbackAdapter<PubSubProtocol.ResponseBody>(callback), context, false);\n     }\n \n     protected void asyncUnsubscribe(final ByteString topic, final ByteString subscriberId,\n                                     final Callback<Void> callback, final Object context, boolean isHub) {\n+        doAsyncUnsubscribe(topic, subscriberId,\n+            new VoidCallbackAdapter<PubSubProtocol.ResponseBody>(callback), context, isHub);\n+    }\n+\n+    private void doAsyncUnsubscribe(final ByteString topic, final ByteString subscriberId,\n+                                    final Callback<PubSubProtocol.ResponseBody> callback,\n+                                    final Object context, boolean isHub) {\n         // Validate that the format of the subscriberId is valid either as a\n         // local or hub subscriber.\n         if (!isValidSubscriberId(subscriberId, isHub)) {\n@@ -302,9 +313,9 @@ protected void asyncUnsubscribe(final ByteString topic, final ByteString subscri\n         }\n         // Asynchronously close the subscription. On the callback to that\n         // operation once it completes, post the async unsubscribe request.\n-        asyncCloseSubscription(topic, subscriberId, new Callback<Void>() {\n+        doAsyncCloseSubscription(topic, subscriberId, new Callback<PubSubProtocol.ResponseBody>() {\n             @Override\n-            public void operationFinished(Object ctx, Void resultOfOperation) {\n+            public void operationFinished(Object ctx, PubSubProtocol.ResponseBody resultOfOperation) {\n                 asyncSubUnsub(topic, subscriberId, callback, context, OperationType.UNSUBSCRIBE, null);\n             }\n \n@@ -463,7 +474,6 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 }\n             }\n         });\n-\n     }\n \n     public boolean hasSubscription(ByteString topic, ByteString subscriberId) throws CouldNotConnectException,\n@@ -596,7 +606,7 @@ public void closeSubscription(ByteString topic, ByteString subscriberId) throws\n         PubSubData pubSubData = new PubSubData(topic, null, subscriberId, null, null, null, null);\n         synchronized (pubSubData) {\n             PubSubCallback pubSubCallback = new PubSubCallback(pubSubData);\n-            asyncCloseSubscription(topic, subscriberId, pubSubCallback, null);\n+            doAsyncCloseSubscription(topic, subscriberId, pubSubCallback, null);\n             try {\n                 while (!pubSubData.isDone)\n                     pubSubData.wait();\n@@ -613,6 +623,12 @@ public void closeSubscription(ByteString topic, ByteString subscriberId) throws\n \n     public void asyncCloseSubscription(final ByteString topic, final ByteString subscriberId,\n                                        final Callback<Void> callback, final Object context) {\n+        doAsyncCloseSubscription(topic, subscriberId,\n+            new VoidCallbackAdapter<PubSubProtocol.ResponseBody> (callback), context);\n+    }\n+\n+    private void doAsyncCloseSubscription(final ByteString topic, final ByteString subscriberId,\n+                                       final Callback<PubSubProtocol.ResponseBody> callback, final Object context) {\n         if (logger.isDebugEnabled())\n             logger.debug(\"Closing subscription asynchronously for topic: \" + topic.toStringUtf8() + \", subscriberId: \"\n                          + subscriberId.toStringUtf8());\n@@ -622,7 +638,7 @@ public void asyncCloseSubscription(final ByteString topic, final ByteString subs\n             Channel channel = topicSubscriber2Channel.get(topicSubscriber);\n             topicSubscriber2Channel.remove(topicSubscriber);\n             // Close the subscribe channel asynchronously.\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n             ChannelFuture future = channel.close();\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n@@ -676,7 +692,7 @@ void close() {\n \n         // Close all of the open Channels.\n         for (Channel channel : topicSubscriber2Channel.values()) {\n-            client.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n             channel.close().awaitUninterruptibly();\n         }\n         topicSubscriber2Channel.clear();"},{"sha":"2b0780782de799f2cd1d6cbb382b95dc94584c4a","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -64,7 +64,7 @@\n     // Boolean indicating if we closed the channel this ResponseHandler is\n     // attached to explicitly or not. If so, we do not need to do the\n     // channel disconnected logic here.\n-    public boolean channelClosedExplicitly = false;\n+    private boolean channelClosedExplicitly = false;\n \n     private final HedwigClientImpl client;\n     private final HedwigPublisher pub;\n@@ -197,7 +197,7 @@ public void handleRedirectResponse(PubSubResponse response, PubSubData pubSubDat\n             // Invoke the operationFailed callback and just return.\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Exceeded the number of server redirects (\" + curNumServerRedirects + \") so error out.\");\n-            pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n                                                     new TooManyServerRedirectsException(\"Already reached max number of redirects: \"\n                                                             + curNumServerRedirects)));\n             return;\n@@ -234,7 +234,7 @@ public void handleRedirectResponse(PubSubResponse response, PubSubData pubSubDat\n         if (pubSubData.triedServers.contains(ByteString.copyFromUtf8(HedwigSocketAddress.sockAddrStr(redirectedHost)))) {\n             logger.error(\"We've already sent this PubSubRequest before to redirectedHost: \" + redirectedHost\n                          + \", pubSubData: \" + pubSubData);\n-            pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n                                                     new ServerRedirectLoopException(\"Already made the request before to redirected host: \"\n                                                             + redirectedHost)));\n             return;\n@@ -318,7 +318,7 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n             // hook so after the subscribe reconnect has completed, delivery for\n             // that topic subscriber should also be restarted (if it was that\n             // case before the channel disconnect).\n-            origSubData.callback = new SubscribeReconnectCallback(origSubData, client);\n+            origSubData.setCallback(new SubscribeReconnectCallback(origSubData, client));\n             origSubData.context = null;\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Disconnected subscribe channel so reconnect with origSubData: \" + origSubData);\n@@ -335,7 +335,7 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Channel disconnected so invoking the operationFailed callback for pubSubData: \"\n                              + pubSubData);\n-            pubSubData.callback.operationFailed(pubSubData.context, new UncertainStateException(\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new UncertainStateException(\n                                                     \"Server ack response never received before server connection disconnected!\"));\n         }\n         txn2PubSubData.clear();\n@@ -357,6 +357,11 @@ public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) thr\n         }\n     }\n \n+    public void handleChannelClosedExplicitly(){\n+        // TODO: BOOKKEEPER-350 : Handle consume buffering, etc here - in a different patch\n+        channelClosedExplicitly = true;\n+    }\n+\n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) {\n         logger.error(\"Exception caught on client channel\", e.getCause());"},{"sha":"99de77f5b9eeba17c8a86f907526bd5a60619b70","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -0,0 +1,25 @@\n+package org.apache.hedwig.client.netty;\n+\n+import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.util.Callback;\n+\n+/**\n+ * Adapts from Callback&lt;T> to Callback&lt;Void>. (Ignores the &lt;T> parameter).\n+ */\n+public class VoidCallbackAdapter<T> implements Callback<T> {\n+    private final Callback<Void> delegate;\n+\n+    public VoidCallbackAdapter(Callback<Void> delegate){\n+        this.delegate = delegate;\n+    }\n+\n+    @Override\n+    public void operationFinished(Object ctx, T resultOfOperation) {\n+        delegate.operationFinished(ctx, null);\n+    }\n+\n+    @Override\n+    public void operationFailed(Object ctx, PubSubException exception) {\n+        delegate.operationFailed(ctx, exception);\n+    }\n+}"},{"sha":"b644e114c60cdf66efb09c4dba5acb84ebab7ca9","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -77,7 +77,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 // We've already tried to write to this server previously and\n                 // failed, so invoke the operationFailed callback.\n                 logger.error(\"Error writing to host more than once so just invoke the operationFailed callback!\");\n-                pubSubData.callback.operationFailed(pubSubData.context, new ServiceDownException(\n+                pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n                                                         \"Error while writing message to server: \" + hostString));\n             } else {\n                 if (logger.isDebugEnabled())"},{"sha":"168f603e70a1c3618639b1257a95e57c3362f25b","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","status":"modified","additions":1242,"deletions":180,"changes":1422,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -6555,6 +6555,11 @@ public Builder clearSubscriberId() {\n     // optional bytes subscriberId = 7;\n     boolean hasSubscriberId();\n     com.google.protobuf.ByteString getSubscriberId();\n+    \n+    // optional .Hedwig.ResponseBody responseBody = 8;\n+    boolean hasResponseBody();\n+    org.apache.hedwig.protocol.PubSubProtocol.ResponseBody getResponseBody();\n+    org.apache.hedwig.protocol.PubSubProtocol.ResponseBodyOrBuilder getResponseBodyOrBuilder();\n   }\n   public static final class PubSubResponse extends\n       com.google.protobuf.GeneratedMessage\n@@ -6680,6 +6685,19 @@ public boolean hasSubscriberId() {\n       return subscriberId_;\n     }\n     \n+    // optional .Hedwig.ResponseBody responseBody = 8;\n+    public static final int RESPONSEBODY_FIELD_NUMBER = 8;\n+    private org.apache.hedwig.protocol.PubSubProtocol.ResponseBody responseBody_;\n+    public boolean hasResponseBody() {\n+      return ((bitField0_ & 0x00000080) == 0x00000080);\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.ResponseBody getResponseBody() {\n+      return responseBody_;\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.ResponseBodyOrBuilder getResponseBodyOrBuilder() {\n+      return responseBody_;\n+    }\n+    \n     private void initFields() {\n       protocolVersion_ = org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion.VERSION_ONE;\n       statusCode_ = org.apache.hedwig.protocol.PubSubProtocol.StatusCode.SUCCESS;\n@@ -6688,6 +6706,7 @@ private void initFields() {\n       message_ = org.apache.hedwig.protocol.PubSubProtocol.Message.getDefaultInstance();\n       topic_ = com.google.protobuf.ByteString.EMPTY;\n       subscriberId_ = com.google.protobuf.ByteString.EMPTY;\n+      responseBody_ = org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.getDefaultInstance();\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -6712,6 +6731,12 @@ public final boolean isInitialized() {\n           return false;\n         }\n       }\n+      if (hasResponseBody()) {\n+        if (!getResponseBody().isInitialized()) {\n+          memoizedIsInitialized = 0;\n+          return false;\n+        }\n+      }\n       memoizedIsInitialized = 1;\n       return true;\n     }\n@@ -6740,6 +6765,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n       if (((bitField0_ & 0x00000040) == 0x00000040)) {\n         output.writeBytes(7, subscriberId_);\n       }\n+      if (((bitField0_ & 0x00000080) == 0x00000080)) {\n+        output.writeMessage(8, responseBody_);\n+      }\n       getUnknownFields().writeTo(output);\n     }\n     \n@@ -6777,6 +6805,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeBytesSize(7, subscriberId_);\n       }\n+      if (((bitField0_ & 0x00000080) == 0x00000080)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeMessageSize(8, responseBody_);\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -6894,6 +6926,7 @@ private Builder(BuilderParent parent) {\n       private void maybeForceBuilderInitialization() {\n         if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n           getMessageFieldBuilder();\n+          getResponseBodyFieldBuilder();\n         }\n       }\n       private static Builder create() {\n@@ -6920,6 +6953,12 @@ public Builder clear() {\n         bitField0_ = (bitField0_ & ~0x00000020);\n         subscriberId_ = com.google.protobuf.ByteString.EMPTY;\n         bitField0_ = (bitField0_ & ~0x00000040);\n+        if (responseBodyBuilder_ == null) {\n+          responseBody_ = org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.getDefaultInstance();\n+        } else {\n+          responseBodyBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000080);\n         return this;\n       }\n       \n@@ -6990,6 +7029,14 @@ public Builder clone() {\n           to_bitField0_ |= 0x00000040;\n         }\n         result.subscriberId_ = subscriberId_;\n+        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {\n+          to_bitField0_ |= 0x00000080;\n+        }\n+        if (responseBodyBuilder_ == null) {\n+          result.responseBody_ = responseBody_;\n+        } else {\n+          result.responseBody_ = responseBodyBuilder_.build();\n+        }\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -7027,6 +7074,9 @@ public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.PubSubRespons\n         if (other.hasSubscriberId()) {\n           setSubscriberId(other.getSubscriberId());\n         }\n+        if (other.hasResponseBody()) {\n+          mergeResponseBody(other.getResponseBody());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -7050,6 +7100,12 @@ public final boolean isInitialized() {\n             return false;\n           }\n         }\n+        if (hasResponseBody()) {\n+          if (!getResponseBody().isInitialized()) {\n+            \n+            return false;\n+          }\n+        }\n         return true;\n       }\n       \n@@ -7127,6 +7183,15 @@ public Builder mergeFrom(\n               subscriberId_ = input.readBytes();\n               break;\n             }\n+            case 66: {\n+              org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder subBuilder = org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.newBuilder();\n+              if (hasResponseBody()) {\n+                subBuilder.mergeFrom(getResponseBody());\n+              }\n+              input.readMessage(subBuilder, extensionRegistry);\n+              setResponseBody(subBuilder.buildPartial());\n+              break;\n+            }\n           }\n         }\n       }\n@@ -7169,222 +7234,1188 @@ public Builder setStatusCode(org.apache.hedwig.protocol.PubSubProtocol.StatusCod\n         if (value == null) {\n           throw new NullPointerException();\n         }\n-        bitField0_ |= 0x00000002;\n-        statusCode_ = value;\n-        onChanged();\n+        bitField0_ |= 0x00000002;\n+        statusCode_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearStatusCode() {\n+        bitField0_ = (bitField0_ & ~0x00000002);\n+        statusCode_ = org.apache.hedwig.protocol.PubSubProtocol.StatusCode.SUCCESS;\n+        onChanged();\n+        return this;\n+      }\n+      \n+      // required uint64 txnId = 3;\n+      private long txnId_ ;\n+      public boolean hasTxnId() {\n+        return ((bitField0_ & 0x00000004) == 0x00000004);\n+      }\n+      public long getTxnId() {\n+        return txnId_;\n+      }\n+      public Builder setTxnId(long value) {\n+        bitField0_ |= 0x00000004;\n+        txnId_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearTxnId() {\n+        bitField0_ = (bitField0_ & ~0x00000004);\n+        txnId_ = 0L;\n+        onChanged();\n+        return this;\n+      }\n+      \n+      // optional string statusMsg = 4;\n+      private java.lang.Object statusMsg_ = \"\";\n+      public boolean hasStatusMsg() {\n+        return ((bitField0_ & 0x00000008) == 0x00000008);\n+      }\n+      public String getStatusMsg() {\n+        java.lang.Object ref = statusMsg_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          statusMsg_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setStatusMsg(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000008;\n+        statusMsg_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearStatusMsg() {\n+        bitField0_ = (bitField0_ & ~0x00000008);\n+        statusMsg_ = getDefaultInstance().getStatusMsg();\n+        onChanged();\n+        return this;\n+      }\n+      void setStatusMsg(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000008;\n+        statusMsg_ = value;\n+        onChanged();\n+      }\n+      \n+      // optional .Hedwig.Message message = 5;\n+      private org.apache.hedwig.protocol.PubSubProtocol.Message message_ = org.apache.hedwig.protocol.PubSubProtocol.Message.getDefaultInstance();\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.Message, org.apache.hedwig.protocol.PubSubProtocol.Message.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageOrBuilder> messageBuilder_;\n+      public boolean hasMessage() {\n+        return ((bitField0_ & 0x00000010) == 0x00000010);\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.Message getMessage() {\n+        if (messageBuilder_ == null) {\n+          return message_;\n+        } else {\n+          return messageBuilder_.getMessage();\n+        }\n+      }\n+      public Builder setMessage(org.apache.hedwig.protocol.PubSubProtocol.Message value) {\n+        if (messageBuilder_ == null) {\n+          if (value == null) {\n+            throw new NullPointerException();\n+          }\n+          message_ = value;\n+          onChanged();\n+        } else {\n+          messageBuilder_.setMessage(value);\n+        }\n+        bitField0_ |= 0x00000010;\n+        return this;\n+      }\n+      public Builder setMessage(\n+          org.apache.hedwig.protocol.PubSubProtocol.Message.Builder builderForValue) {\n+        if (messageBuilder_ == null) {\n+          message_ = builderForValue.build();\n+          onChanged();\n+        } else {\n+          messageBuilder_.setMessage(builderForValue.build());\n+        }\n+        bitField0_ |= 0x00000010;\n+        return this;\n+      }\n+      public Builder mergeMessage(org.apache.hedwig.protocol.PubSubProtocol.Message value) {\n+        if (messageBuilder_ == null) {\n+          if (((bitField0_ & 0x00000010) == 0x00000010) &&\n+              message_ != org.apache.hedwig.protocol.PubSubProtocol.Message.getDefaultInstance()) {\n+            message_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.Message.newBuilder(message_).mergeFrom(value).buildPartial();\n+          } else {\n+            message_ = value;\n+          }\n+          onChanged();\n+        } else {\n+          messageBuilder_.mergeFrom(value);\n+        }\n+        bitField0_ |= 0x00000010;\n+        return this;\n+      }\n+      public Builder clearMessage() {\n+        if (messageBuilder_ == null) {\n+          message_ = org.apache.hedwig.protocol.PubSubProtocol.Message.getDefaultInstance();\n+          onChanged();\n+        } else {\n+          messageBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000010);\n+        return this;\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.Message.Builder getMessageBuilder() {\n+        bitField0_ |= 0x00000010;\n+        onChanged();\n+        return getMessageFieldBuilder().getBuilder();\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageOrBuilder getMessageOrBuilder() {\n+        if (messageBuilder_ != null) {\n+          return messageBuilder_.getMessageOrBuilder();\n+        } else {\n+          return message_;\n+        }\n+      }\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.Message, org.apache.hedwig.protocol.PubSubProtocol.Message.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageOrBuilder> \n+          getMessageFieldBuilder() {\n+        if (messageBuilder_ == null) {\n+          messageBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.Message, org.apache.hedwig.protocol.PubSubProtocol.Message.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageOrBuilder>(\n+                  message_,\n+                  getParentForChildren(),\n+                  isClean());\n+          message_ = null;\n+        }\n+        return messageBuilder_;\n+      }\n+      \n+      // optional bytes topic = 6;\n+      private com.google.protobuf.ByteString topic_ = com.google.protobuf.ByteString.EMPTY;\n+      public boolean hasTopic() {\n+        return ((bitField0_ & 0x00000020) == 0x00000020);\n+      }\n+      public com.google.protobuf.ByteString getTopic() {\n+        return topic_;\n+      }\n+      public Builder setTopic(com.google.protobuf.ByteString value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000020;\n+        topic_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearTopic() {\n+        bitField0_ = (bitField0_ & ~0x00000020);\n+        topic_ = getDefaultInstance().getTopic();\n+        onChanged();\n+        return this;\n+      }\n+      \n+      // optional bytes subscriberId = 7;\n+      private com.google.protobuf.ByteString subscriberId_ = com.google.protobuf.ByteString.EMPTY;\n+      public boolean hasSubscriberId() {\n+        return ((bitField0_ & 0x00000040) == 0x00000040);\n+      }\n+      public com.google.protobuf.ByteString getSubscriberId() {\n+        return subscriberId_;\n+      }\n+      public Builder setSubscriberId(com.google.protobuf.ByteString value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000040;\n+        subscriberId_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearSubscriberId() {\n+        bitField0_ = (bitField0_ & ~0x00000040);\n+        subscriberId_ = getDefaultInstance().getSubscriberId();\n+        onChanged();\n+        return this;\n+      }\n+      \n+      // optional .Hedwig.ResponseBody responseBody = 8;\n+      private org.apache.hedwig.protocol.PubSubProtocol.ResponseBody responseBody_ = org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.getDefaultInstance();\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.ResponseBody, org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder, org.apache.hedwig.protocol.PubSubProtocol.ResponseBodyOrBuilder> responseBodyBuilder_;\n+      public boolean hasResponseBody() {\n+        return ((bitField0_ & 0x00000080) == 0x00000080);\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.ResponseBody getResponseBody() {\n+        if (responseBodyBuilder_ == null) {\n+          return responseBody_;\n+        } else {\n+          return responseBodyBuilder_.getMessage();\n+        }\n+      }\n+      public Builder setResponseBody(org.apache.hedwig.protocol.PubSubProtocol.ResponseBody value) {\n+        if (responseBodyBuilder_ == null) {\n+          if (value == null) {\n+            throw new NullPointerException();\n+          }\n+          responseBody_ = value;\n+          onChanged();\n+        } else {\n+          responseBodyBuilder_.setMessage(value);\n+        }\n+        bitField0_ |= 0x00000080;\n+        return this;\n+      }\n+      public Builder setResponseBody(\n+          org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder builderForValue) {\n+        if (responseBodyBuilder_ == null) {\n+          responseBody_ = builderForValue.build();\n+          onChanged();\n+        } else {\n+          responseBodyBuilder_.setMessage(builderForValue.build());\n+        }\n+        bitField0_ |= 0x00000080;\n+        return this;\n+      }\n+      public Builder mergeResponseBody(org.apache.hedwig.protocol.PubSubProtocol.ResponseBody value) {\n+        if (responseBodyBuilder_ == null) {\n+          if (((bitField0_ & 0x00000080) == 0x00000080) &&\n+              responseBody_ != org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.getDefaultInstance()) {\n+            responseBody_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.newBuilder(responseBody_).mergeFrom(value).buildPartial();\n+          } else {\n+            responseBody_ = value;\n+          }\n+          onChanged();\n+        } else {\n+          responseBodyBuilder_.mergeFrom(value);\n+        }\n+        bitField0_ |= 0x00000080;\n+        return this;\n+      }\n+      public Builder clearResponseBody() {\n+        if (responseBodyBuilder_ == null) {\n+          responseBody_ = org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.getDefaultInstance();\n+          onChanged();\n+        } else {\n+          responseBodyBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000080);\n+        return this;\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder getResponseBodyBuilder() {\n+        bitField0_ |= 0x00000080;\n+        onChanged();\n+        return getResponseBodyFieldBuilder().getBuilder();\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.ResponseBodyOrBuilder getResponseBodyOrBuilder() {\n+        if (responseBodyBuilder_ != null) {\n+          return responseBodyBuilder_.getMessageOrBuilder();\n+        } else {\n+          return responseBody_;\n+        }\n+      }\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.ResponseBody, org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder, org.apache.hedwig.protocol.PubSubProtocol.ResponseBodyOrBuilder> \n+          getResponseBodyFieldBuilder() {\n+        if (responseBodyBuilder_ == null) {\n+          responseBodyBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.ResponseBody, org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder, org.apache.hedwig.protocol.PubSubProtocol.ResponseBodyOrBuilder>(\n+                  responseBody_,\n+                  getParentForChildren(),\n+                  isClean());\n+          responseBody_ = null;\n+        }\n+        return responseBodyBuilder_;\n+      }\n+      \n+      // @@protoc_insertion_point(builder_scope:Hedwig.PubSubResponse)\n+    }\n+    \n+    static {\n+      defaultInstance = new PubSubResponse(true);\n+      defaultInstance.initFields();\n+    }\n+    \n+    // @@protoc_insertion_point(class_scope:Hedwig.PubSubResponse)\n+  }\n+  \n+  public interface PublishResponseOrBuilder\n+      extends com.google.protobuf.MessageOrBuilder {\n+    \n+    // required .Hedwig.MessageSeqId publishedMsgId = 1;\n+    boolean hasPublishedMsgId();\n+    org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId getPublishedMsgId();\n+    org.apache.hedwig.protocol.PubSubProtocol.MessageSeqIdOrBuilder getPublishedMsgIdOrBuilder();\n+  }\n+  public static final class PublishResponse extends\n+      com.google.protobuf.GeneratedMessage\n+      implements PublishResponseOrBuilder {\n+    // Use PublishResponse.newBuilder() to construct.\n+    private PublishResponse(Builder builder) {\n+      super(builder);\n+    }\n+    private PublishResponse(boolean noInit) {}\n+    \n+    private static final PublishResponse defaultInstance;\n+    public static PublishResponse getDefaultInstance() {\n+      return defaultInstance;\n+    }\n+    \n+    public PublishResponse getDefaultInstanceForType() {\n+      return defaultInstance;\n+    }\n+    \n+    public static final com.google.protobuf.Descriptors.Descriptor\n+        getDescriptor() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_PublishResponse_descriptor;\n+    }\n+    \n+    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+        internalGetFieldAccessorTable() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_PublishResponse_fieldAccessorTable;\n+    }\n+    \n+    private int bitField0_;\n+    // required .Hedwig.MessageSeqId publishedMsgId = 1;\n+    public static final int PUBLISHEDMSGID_FIELD_NUMBER = 1;\n+    private org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId publishedMsgId_;\n+    public boolean hasPublishedMsgId() {\n+      return ((bitField0_ & 0x00000001) == 0x00000001);\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId getPublishedMsgId() {\n+      return publishedMsgId_;\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.MessageSeqIdOrBuilder getPublishedMsgIdOrBuilder() {\n+      return publishedMsgId_;\n+    }\n+    \n+    private void initFields() {\n+      publishedMsgId_ = org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.getDefaultInstance();\n+    }\n+    private byte memoizedIsInitialized = -1;\n+    public final boolean isInitialized() {\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      if (!hasPublishedMsgId()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!getPublishedMsgId().isInitialized()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      memoizedIsInitialized = 1;\n+      return true;\n+    }\n+    \n+    public void writeTo(com.google.protobuf.CodedOutputStream output)\n+                        throws java.io.IOException {\n+      getSerializedSize();\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        output.writeMessage(1, publishedMsgId_);\n+      }\n+      getUnknownFields().writeTo(output);\n+    }\n+    \n+    private int memoizedSerializedSize = -1;\n+    public int getSerializedSize() {\n+      int size = memoizedSerializedSize;\n+      if (size != -1) return size;\n+    \n+      size = 0;\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeMessageSize(1, publishedMsgId_);\n+      }\n+      size += getUnknownFields().getSerializedSize();\n+      memoizedSerializedSize = size;\n+      return size;\n+    }\n+    \n+    private static final long serialVersionUID = 0L;\n+    @java.lang.Override\n+    protected java.lang.Object writeReplace()\n+        throws java.io.ObjectStreamException {\n+      return super.writeReplace();\n+    }\n+    \n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseFrom(\n+        com.google.protobuf.ByteString data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseFrom(\n+        com.google.protobuf.ByteString data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseFrom(byte[] data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseFrom(\n+        byte[] data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseDelimitedFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseDelimitedFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseFrom(\n+        com.google.protobuf.CodedInputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.PublishResponse parseFrom(\n+        com.google.protobuf.CodedInputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    \n+    public static Builder newBuilder() { return Builder.create(); }\n+    public Builder newBuilderForType() { return newBuilder(); }\n+    public static Builder newBuilder(org.apache.hedwig.protocol.PubSubProtocol.PublishResponse prototype) {\n+      return newBuilder().mergeFrom(prototype);\n+    }\n+    public Builder toBuilder() { return newBuilder(this); }\n+    \n+    @java.lang.Override\n+    protected Builder newBuilderForType(\n+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n+      Builder builder = new Builder(parent);\n+      return builder;\n+    }\n+    public static final class Builder extends\n+        com.google.protobuf.GeneratedMessage.Builder<Builder>\n+       implements org.apache.hedwig.protocol.PubSubProtocol.PublishResponseOrBuilder {\n+      public static final com.google.protobuf.Descriptors.Descriptor\n+          getDescriptor() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_PublishResponse_descriptor;\n+      }\n+      \n+      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+          internalGetFieldAccessorTable() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_PublishResponse_fieldAccessorTable;\n+      }\n+      \n+      // Construct using org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.newBuilder()\n+      private Builder() {\n+        maybeForceBuilderInitialization();\n+      }\n+      \n+      private Builder(BuilderParent parent) {\n+        super(parent);\n+        maybeForceBuilderInitialization();\n+      }\n+      private void maybeForceBuilderInitialization() {\n+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n+          getPublishedMsgIdFieldBuilder();\n+        }\n+      }\n+      private static Builder create() {\n+        return new Builder();\n+      }\n+      \n+      public Builder clear() {\n+        super.clear();\n+        if (publishedMsgIdBuilder_ == null) {\n+          publishedMsgId_ = org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.getDefaultInstance();\n+        } else {\n+          publishedMsgIdBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        return this;\n+      }\n+      \n+      public Builder clone() {\n+        return create().mergeFrom(buildPartial());\n+      }\n+      \n+      public com.google.protobuf.Descriptors.Descriptor\n+          getDescriptorForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDescriptor();\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.PublishResponse getDefaultInstanceForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDefaultInstance();\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.PublishResponse build() {\n+        org.apache.hedwig.protocol.PubSubProtocol.PublishResponse result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(result);\n+        }\n+        return result;\n+      }\n+      \n+      private org.apache.hedwig.protocol.PubSubProtocol.PublishResponse buildParsed()\n+          throws com.google.protobuf.InvalidProtocolBufferException {\n+        org.apache.hedwig.protocol.PubSubProtocol.PublishResponse result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(\n+            result).asInvalidProtocolBufferException();\n+        }\n+        return result;\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.PublishResponse buildPartial() {\n+        org.apache.hedwig.protocol.PubSubProtocol.PublishResponse result = new org.apache.hedwig.protocol.PubSubProtocol.PublishResponse(this);\n+        int from_bitField0_ = bitField0_;\n+        int to_bitField0_ = 0;\n+        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n+          to_bitField0_ |= 0x00000001;\n+        }\n+        if (publishedMsgIdBuilder_ == null) {\n+          result.publishedMsgId_ = publishedMsgId_;\n+        } else {\n+          result.publishedMsgId_ = publishedMsgIdBuilder_.build();\n+        }\n+        result.bitField0_ = to_bitField0_;\n+        onBuilt();\n+        return result;\n+      }\n+      \n+      public Builder mergeFrom(com.google.protobuf.Message other) {\n+        if (other instanceof org.apache.hedwig.protocol.PubSubProtocol.PublishResponse) {\n+          return mergeFrom((org.apache.hedwig.protocol.PubSubProtocol.PublishResponse)other);\n+        } else {\n+          super.mergeFrom(other);\n+          return this;\n+        }\n+      }\n+      \n+      public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.PublishResponse other) {\n+        if (other == org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDefaultInstance()) return this;\n+        if (other.hasPublishedMsgId()) {\n+          mergePublishedMsgId(other.getPublishedMsgId());\n+        }\n+        this.mergeUnknownFields(other.getUnknownFields());\n+        return this;\n+      }\n+      \n+      public final boolean isInitialized() {\n+        if (!hasPublishedMsgId()) {\n+          \n+          return false;\n+        }\n+        if (!getPublishedMsgId().isInitialized()) {\n+          \n+          return false;\n+        }\n+        return true;\n+      }\n+      \n+      public Builder mergeFrom(\n+          com.google.protobuf.CodedInputStream input,\n+          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+          throws java.io.IOException {\n+        com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n+          com.google.protobuf.UnknownFieldSet.newBuilder(\n+            this.getUnknownFields());\n+        while (true) {\n+          int tag = input.readTag();\n+          switch (tag) {\n+            case 0:\n+              this.setUnknownFields(unknownFields.build());\n+              onChanged();\n+              return this;\n+            default: {\n+              if (!parseUnknownField(input, unknownFields,\n+                                     extensionRegistry, tag)) {\n+                this.setUnknownFields(unknownFields.build());\n+                onChanged();\n+                return this;\n+              }\n+              break;\n+            }\n+            case 10: {\n+              org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.Builder subBuilder = org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.newBuilder();\n+              if (hasPublishedMsgId()) {\n+                subBuilder.mergeFrom(getPublishedMsgId());\n+              }\n+              input.readMessage(subBuilder, extensionRegistry);\n+              setPublishedMsgId(subBuilder.buildPartial());\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      \n+      private int bitField0_;\n+      \n+      // required .Hedwig.MessageSeqId publishedMsgId = 1;\n+      private org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId publishedMsgId_ = org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.getDefaultInstance();\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId, org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageSeqIdOrBuilder> publishedMsgIdBuilder_;\n+      public boolean hasPublishedMsgId() {\n+        return ((bitField0_ & 0x00000001) == 0x00000001);\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId getPublishedMsgId() {\n+        if (publishedMsgIdBuilder_ == null) {\n+          return publishedMsgId_;\n+        } else {\n+          return publishedMsgIdBuilder_.getMessage();\n+        }\n+      }\n+      public Builder setPublishedMsgId(org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId value) {\n+        if (publishedMsgIdBuilder_ == null) {\n+          if (value == null) {\n+            throw new NullPointerException();\n+          }\n+          publishedMsgId_ = value;\n+          onChanged();\n+        } else {\n+          publishedMsgIdBuilder_.setMessage(value);\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder setPublishedMsgId(\n+          org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.Builder builderForValue) {\n+        if (publishedMsgIdBuilder_ == null) {\n+          publishedMsgId_ = builderForValue.build();\n+          onChanged();\n+        } else {\n+          publishedMsgIdBuilder_.setMessage(builderForValue.build());\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder mergePublishedMsgId(org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId value) {\n+        if (publishedMsgIdBuilder_ == null) {\n+          if (((bitField0_ & 0x00000001) == 0x00000001) &&\n+              publishedMsgId_ != org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.getDefaultInstance()) {\n+            publishedMsgId_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.newBuilder(publishedMsgId_).mergeFrom(value).buildPartial();\n+          } else {\n+            publishedMsgId_ = value;\n+          }\n+          onChanged();\n+        } else {\n+          publishedMsgIdBuilder_.mergeFrom(value);\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder clearPublishedMsgId() {\n+        if (publishedMsgIdBuilder_ == null) {\n+          publishedMsgId_ = org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.getDefaultInstance();\n+          onChanged();\n+        } else {\n+          publishedMsgIdBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        return this;\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.Builder getPublishedMsgIdBuilder() {\n+        bitField0_ |= 0x00000001;\n+        onChanged();\n+        return getPublishedMsgIdFieldBuilder().getBuilder();\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageSeqIdOrBuilder getPublishedMsgIdOrBuilder() {\n+        if (publishedMsgIdBuilder_ != null) {\n+          return publishedMsgIdBuilder_.getMessageOrBuilder();\n+        } else {\n+          return publishedMsgId_;\n+        }\n+      }\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId, org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageSeqIdOrBuilder> \n+          getPublishedMsgIdFieldBuilder() {\n+        if (publishedMsgIdBuilder_ == null) {\n+          publishedMsgIdBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId, org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageSeqIdOrBuilder>(\n+                  publishedMsgId_,\n+                  getParentForChildren(),\n+                  isClean());\n+          publishedMsgId_ = null;\n+        }\n+        return publishedMsgIdBuilder_;\n+      }\n+      \n+      // @@protoc_insertion_point(builder_scope:Hedwig.PublishResponse)\n+    }\n+    \n+    static {\n+      defaultInstance = new PublishResponse(true);\n+      defaultInstance.initFields();\n+    }\n+    \n+    // @@protoc_insertion_point(class_scope:Hedwig.PublishResponse)\n+  }\n+  \n+  public interface ResponseBodyOrBuilder\n+      extends com.google.protobuf.MessageOrBuilder {\n+    \n+    // optional .Hedwig.PublishResponse publishResponse = 1;\n+    boolean hasPublishResponse();\n+    org.apache.hedwig.protocol.PubSubProtocol.PublishResponse getPublishResponse();\n+    org.apache.hedwig.protocol.PubSubProtocol.PublishResponseOrBuilder getPublishResponseOrBuilder();\n+  }\n+  public static final class ResponseBody extends\n+      com.google.protobuf.GeneratedMessage\n+      implements ResponseBodyOrBuilder {\n+    // Use ResponseBody.newBuilder() to construct.\n+    private ResponseBody(Builder builder) {\n+      super(builder);\n+    }\n+    private ResponseBody(boolean noInit) {}\n+    \n+    private static final ResponseBody defaultInstance;\n+    public static ResponseBody getDefaultInstance() {\n+      return defaultInstance;\n+    }\n+    \n+    public ResponseBody getDefaultInstanceForType() {\n+      return defaultInstance;\n+    }\n+    \n+    public static final com.google.protobuf.Descriptors.Descriptor\n+        getDescriptor() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_ResponseBody_descriptor;\n+    }\n+    \n+    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+        internalGetFieldAccessorTable() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_ResponseBody_fieldAccessorTable;\n+    }\n+    \n+    private int bitField0_;\n+    // optional .Hedwig.PublishResponse publishResponse = 1;\n+    public static final int PUBLISHRESPONSE_FIELD_NUMBER = 1;\n+    private org.apache.hedwig.protocol.PubSubProtocol.PublishResponse publishResponse_;\n+    public boolean hasPublishResponse() {\n+      return ((bitField0_ & 0x00000001) == 0x00000001);\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.PublishResponse getPublishResponse() {\n+      return publishResponse_;\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.PublishResponseOrBuilder getPublishResponseOrBuilder() {\n+      return publishResponse_;\n+    }\n+    \n+    private void initFields() {\n+      publishResponse_ = org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDefaultInstance();\n+    }\n+    private byte memoizedIsInitialized = -1;\n+    public final boolean isInitialized() {\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      if (hasPublishResponse()) {\n+        if (!getPublishResponse().isInitialized()) {\n+          memoizedIsInitialized = 0;\n+          return false;\n+        }\n+      }\n+      memoizedIsInitialized = 1;\n+      return true;\n+    }\n+    \n+    public void writeTo(com.google.protobuf.CodedOutputStream output)\n+                        throws java.io.IOException {\n+      getSerializedSize();\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        output.writeMessage(1, publishResponse_);\n+      }\n+      getUnknownFields().writeTo(output);\n+    }\n+    \n+    private int memoizedSerializedSize = -1;\n+    public int getSerializedSize() {\n+      int size = memoizedSerializedSize;\n+      if (size != -1) return size;\n+    \n+      size = 0;\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeMessageSize(1, publishResponse_);\n+      }\n+      size += getUnknownFields().getSerializedSize();\n+      memoizedSerializedSize = size;\n+      return size;\n+    }\n+    \n+    private static final long serialVersionUID = 0L;\n+    @java.lang.Override\n+    protected java.lang.Object writeReplace()\n+        throws java.io.ObjectStreamException {\n+      return super.writeReplace();\n+    }\n+    \n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseFrom(\n+        com.google.protobuf.ByteString data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseFrom(\n+        com.google.protobuf.ByteString data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseFrom(byte[] data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseFrom(\n+        byte[] data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseDelimitedFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseDelimitedFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseFrom(\n+        com.google.protobuf.CodedInputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.ResponseBody parseFrom(\n+        com.google.protobuf.CodedInputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    \n+    public static Builder newBuilder() { return Builder.create(); }\n+    public Builder newBuilderForType() { return newBuilder(); }\n+    public static Builder newBuilder(org.apache.hedwig.protocol.PubSubProtocol.ResponseBody prototype) {\n+      return newBuilder().mergeFrom(prototype);\n+    }\n+    public Builder toBuilder() { return newBuilder(this); }\n+    \n+    @java.lang.Override\n+    protected Builder newBuilderForType(\n+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n+      Builder builder = new Builder(parent);\n+      return builder;\n+    }\n+    public static final class Builder extends\n+        com.google.protobuf.GeneratedMessage.Builder<Builder>\n+       implements org.apache.hedwig.protocol.PubSubProtocol.ResponseBodyOrBuilder {\n+      public static final com.google.protobuf.Descriptors.Descriptor\n+          getDescriptor() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_ResponseBody_descriptor;\n+      }\n+      \n+      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+          internalGetFieldAccessorTable() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_ResponseBody_fieldAccessorTable;\n+      }\n+      \n+      // Construct using org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.newBuilder()\n+      private Builder() {\n+        maybeForceBuilderInitialization();\n+      }\n+      \n+      private Builder(BuilderParent parent) {\n+        super(parent);\n+        maybeForceBuilderInitialization();\n+      }\n+      private void maybeForceBuilderInitialization() {\n+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n+          getPublishResponseFieldBuilder();\n+        }\n+      }\n+      private static Builder create() {\n+        return new Builder();\n+      }\n+      \n+      public Builder clear() {\n+        super.clear();\n+        if (publishResponseBuilder_ == null) {\n+          publishResponse_ = org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDefaultInstance();\n+        } else {\n+          publishResponseBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000001);\n         return this;\n       }\n-      public Builder clearStatusCode() {\n-        bitField0_ = (bitField0_ & ~0x00000002);\n-        statusCode_ = org.apache.hedwig.protocol.PubSubProtocol.StatusCode.SUCCESS;\n-        onChanged();\n-        return this;\n+      \n+      public Builder clone() {\n+        return create().mergeFrom(buildPartial());\n       }\n       \n-      // required uint64 txnId = 3;\n-      private long txnId_ ;\n-      public boolean hasTxnId() {\n-        return ((bitField0_ & 0x00000004) == 0x00000004);\n+      public com.google.protobuf.Descriptors.Descriptor\n+          getDescriptorForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.getDescriptor();\n       }\n-      public long getTxnId() {\n-        return txnId_;\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.ResponseBody getDefaultInstanceForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.getDefaultInstance();\n       }\n-      public Builder setTxnId(long value) {\n-        bitField0_ |= 0x00000004;\n-        txnId_ = value;\n-        onChanged();\n-        return this;\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.ResponseBody build() {\n+        org.apache.hedwig.protocol.PubSubProtocol.ResponseBody result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(result);\n+        }\n+        return result;\n       }\n-      public Builder clearTxnId() {\n-        bitField0_ = (bitField0_ & ~0x00000004);\n-        txnId_ = 0L;\n-        onChanged();\n-        return this;\n+      \n+      private org.apache.hedwig.protocol.PubSubProtocol.ResponseBody buildParsed()\n+          throws com.google.protobuf.InvalidProtocolBufferException {\n+        org.apache.hedwig.protocol.PubSubProtocol.ResponseBody result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(\n+            result).asInvalidProtocolBufferException();\n+        }\n+        return result;\n       }\n       \n-      // optional string statusMsg = 4;\n-      private java.lang.Object statusMsg_ = \"\";\n-      public boolean hasStatusMsg() {\n-        return ((bitField0_ & 0x00000008) == 0x00000008);\n+      public org.apache.hedwig.protocol.PubSubProtocol.ResponseBody buildPartial() {\n+        org.apache.hedwig.protocol.PubSubProtocol.ResponseBody result = new org.apache.hedwig.protocol.PubSubProtocol.ResponseBody(this);\n+        int from_bitField0_ = bitField0_;\n+        int to_bitField0_ = 0;\n+        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n+          to_bitField0_ |= 0x00000001;\n+        }\n+        if (publishResponseBuilder_ == null) {\n+          result.publishResponse_ = publishResponse_;\n+        } else {\n+          result.publishResponse_ = publishResponseBuilder_.build();\n+        }\n+        result.bitField0_ = to_bitField0_;\n+        onBuilt();\n+        return result;\n       }\n-      public String getStatusMsg() {\n-        java.lang.Object ref = statusMsg_;\n-        if (!(ref instanceof String)) {\n-          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n-          statusMsg_ = s;\n-          return s;\n+      \n+      public Builder mergeFrom(com.google.protobuf.Message other) {\n+        if (other instanceof org.apache.hedwig.protocol.PubSubProtocol.ResponseBody) {\n+          return mergeFrom((org.apache.hedwig.protocol.PubSubProtocol.ResponseBody)other);\n         } else {\n-          return (String) ref;\n+          super.mergeFrom(other);\n+          return this;\n         }\n       }\n-      public Builder setStatusMsg(String value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000008;\n-        statusMsg_ = value;\n-        onChanged();\n+      \n+      public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.ResponseBody other) {\n+        if (other == org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.getDefaultInstance()) return this;\n+        if (other.hasPublishResponse()) {\n+          mergePublishResponse(other.getPublishResponse());\n+        }\n+        this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n-      public Builder clearStatusMsg() {\n-        bitField0_ = (bitField0_ & ~0x00000008);\n-        statusMsg_ = getDefaultInstance().getStatusMsg();\n-        onChanged();\n-        return this;\n+      \n+      public final boolean isInitialized() {\n+        if (hasPublishResponse()) {\n+          if (!getPublishResponse().isInitialized()) {\n+            \n+            return false;\n+          }\n+        }\n+        return true;\n       }\n-      void setStatusMsg(com.google.protobuf.ByteString value) {\n-        bitField0_ |= 0x00000008;\n-        statusMsg_ = value;\n-        onChanged();\n+      \n+      public Builder mergeFrom(\n+          com.google.protobuf.CodedInputStream input,\n+          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+          throws java.io.IOException {\n+        com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n+          com.google.protobuf.UnknownFieldSet.newBuilder(\n+            this.getUnknownFields());\n+        while (true) {\n+          int tag = input.readTag();\n+          switch (tag) {\n+            case 0:\n+              this.setUnknownFields(unknownFields.build());\n+              onChanged();\n+              return this;\n+            default: {\n+              if (!parseUnknownField(input, unknownFields,\n+                                     extensionRegistry, tag)) {\n+                this.setUnknownFields(unknownFields.build());\n+                onChanged();\n+                return this;\n+              }\n+              break;\n+            }\n+            case 10: {\n+              org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder subBuilder = org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.newBuilder();\n+              if (hasPublishResponse()) {\n+                subBuilder.mergeFrom(getPublishResponse());\n+              }\n+              input.readMessage(subBuilder, extensionRegistry);\n+              setPublishResponse(subBuilder.buildPartial());\n+              break;\n+            }\n+          }\n+        }\n       }\n       \n-      // optional .Hedwig.Message message = 5;\n-      private org.apache.hedwig.protocol.PubSubProtocol.Message message_ = org.apache.hedwig.protocol.PubSubProtocol.Message.getDefaultInstance();\n+      private int bitField0_;\n+      \n+      // optional .Hedwig.PublishResponse publishResponse = 1;\n+      private org.apache.hedwig.protocol.PubSubProtocol.PublishResponse publishResponse_ = org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDefaultInstance();\n       private com.google.protobuf.SingleFieldBuilder<\n-          org.apache.hedwig.protocol.PubSubProtocol.Message, org.apache.hedwig.protocol.PubSubProtocol.Message.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageOrBuilder> messageBuilder_;\n-      public boolean hasMessage() {\n-        return ((bitField0_ & 0x00000010) == 0x00000010);\n+          org.apache.hedwig.protocol.PubSubProtocol.PublishResponse, org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder, org.apache.hedwig.protocol.PubSubProtocol.PublishResponseOrBuilder> publishResponseBuilder_;\n+      public boolean hasPublishResponse() {\n+        return ((bitField0_ & 0x00000001) == 0x00000001);\n       }\n-      public org.apache.hedwig.protocol.PubSubProtocol.Message getMessage() {\n-        if (messageBuilder_ == null) {\n-          return message_;\n+      public org.apache.hedwig.protocol.PubSubProtocol.PublishResponse getPublishResponse() {\n+        if (publishResponseBuilder_ == null) {\n+          return publishResponse_;\n         } else {\n-          return messageBuilder_.getMessage();\n+          return publishResponseBuilder_.getMessage();\n         }\n       }\n-      public Builder setMessage(org.apache.hedwig.protocol.PubSubProtocol.Message value) {\n-        if (messageBuilder_ == null) {\n+      public Builder setPublishResponse(org.apache.hedwig.protocol.PubSubProtocol.PublishResponse value) {\n+        if (publishResponseBuilder_ == null) {\n           if (value == null) {\n             throw new NullPointerException();\n           }\n-          message_ = value;\n+          publishResponse_ = value;\n           onChanged();\n         } else {\n-          messageBuilder_.setMessage(value);\n+          publishResponseBuilder_.setMessage(value);\n         }\n-        bitField0_ |= 0x00000010;\n+        bitField0_ |= 0x00000001;\n         return this;\n       }\n-      public Builder setMessage(\n-          org.apache.hedwig.protocol.PubSubProtocol.Message.Builder builderForValue) {\n-        if (messageBuilder_ == null) {\n-          message_ = builderForValue.build();\n+      public Builder setPublishResponse(\n+          org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder builderForValue) {\n+        if (publishResponseBuilder_ == null) {\n+          publishResponse_ = builderForValue.build();\n           onChanged();\n         } else {\n-          messageBuilder_.setMessage(builderForValue.build());\n+          publishResponseBuilder_.setMessage(builderForValue.build());\n         }\n-        bitField0_ |= 0x00000010;\n+        bitField0_ |= 0x00000001;\n         return this;\n       }\n-      public Builder mergeMessage(org.apache.hedwig.protocol.PubSubProtocol.Message value) {\n-        if (messageBuilder_ == null) {\n-          if (((bitField0_ & 0x00000010) == 0x00000010) &&\n-              message_ != org.apache.hedwig.protocol.PubSubProtocol.Message.getDefaultInstance()) {\n-            message_ =\n-              org.apache.hedwig.protocol.PubSubProtocol.Message.newBuilder(message_).mergeFrom(value).buildPartial();\n+      public Builder mergePublishResponse(org.apache.hedwig.protocol.PubSubProtocol.PublishResponse value) {\n+        if (publishResponseBuilder_ == null) {\n+          if (((bitField0_ & 0x00000001) == 0x00000001) &&\n+              publishResponse_ != org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDefaultInstance()) {\n+            publishResponse_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.newBuilder(publishResponse_).mergeFrom(value).buildPartial();\n           } else {\n-            message_ = value;\n+            publishResponse_ = value;\n           }\n           onChanged();\n         } else {\n-          messageBuilder_.mergeFrom(value);\n+          publishResponseBuilder_.mergeFrom(value);\n         }\n-        bitField0_ |= 0x00000010;\n+        bitField0_ |= 0x00000001;\n         return this;\n       }\n-      public Builder clearMessage() {\n-        if (messageBuilder_ == null) {\n-          message_ = org.apache.hedwig.protocol.PubSubProtocol.Message.getDefaultInstance();\n+      public Builder clearPublishResponse() {\n+        if (publishResponseBuilder_ == null) {\n+          publishResponse_ = org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDefaultInstance();\n           onChanged();\n         } else {\n-          messageBuilder_.clear();\n+          publishResponseBuilder_.clear();\n         }\n-        bitField0_ = (bitField0_ & ~0x00000010);\n+        bitField0_ = (bitField0_ & ~0x00000001);\n         return this;\n       }\n-      public org.apache.hedwig.protocol.PubSubProtocol.Message.Builder getMessageBuilder() {\n-        bitField0_ |= 0x00000010;\n+      public org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder getPublishResponseBuilder() {\n+        bitField0_ |= 0x00000001;\n         onChanged();\n-        return getMessageFieldBuilder().getBuilder();\n+        return getPublishResponseFieldBuilder().getBuilder();\n       }\n-      public org.apache.hedwig.protocol.PubSubProtocol.MessageOrBuilder getMessageOrBuilder() {\n-        if (messageBuilder_ != null) {\n-          return messageBuilder_.getMessageOrBuilder();\n+      public org.apache.hedwig.protocol.PubSubProtocol.PublishResponseOrBuilder getPublishResponseOrBuilder() {\n+        if (publishResponseBuilder_ != null) {\n+          return publishResponseBuilder_.getMessageOrBuilder();\n         } else {\n-          return message_;\n+          return publishResponse_;\n         }\n       }\n       private com.google.protobuf.SingleFieldBuilder<\n-          org.apache.hedwig.protocol.PubSubProtocol.Message, org.apache.hedwig.protocol.PubSubProtocol.Message.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageOrBuilder> \n-          getMessageFieldBuilder() {\n-        if (messageBuilder_ == null) {\n-          messageBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n-              org.apache.hedwig.protocol.PubSubProtocol.Message, org.apache.hedwig.protocol.PubSubProtocol.Message.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageOrBuilder>(\n-                  message_,\n+          org.apache.hedwig.protocol.PubSubProtocol.PublishResponse, org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder, org.apache.hedwig.protocol.PubSubProtocol.PublishResponseOrBuilder> \n+          getPublishResponseFieldBuilder() {\n+        if (publishResponseBuilder_ == null) {\n+          publishResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.PublishResponse, org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder, org.apache.hedwig.protocol.PubSubProtocol.PublishResponseOrBuilder>(\n+                  publishResponse_,\n                   getParentForChildren(),\n                   isClean());\n-          message_ = null;\n+          publishResponse_ = null;\n         }\n-        return messageBuilder_;\n-      }\n-      \n-      // optional bytes topic = 6;\n-      private com.google.protobuf.ByteString topic_ = com.google.protobuf.ByteString.EMPTY;\n-      public boolean hasTopic() {\n-        return ((bitField0_ & 0x00000020) == 0x00000020);\n-      }\n-      public com.google.protobuf.ByteString getTopic() {\n-        return topic_;\n-      }\n-      public Builder setTopic(com.google.protobuf.ByteString value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000020;\n-        topic_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearTopic() {\n-        bitField0_ = (bitField0_ & ~0x00000020);\n-        topic_ = getDefaultInstance().getTopic();\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional bytes subscriberId = 7;\n-      private com.google.protobuf.ByteString subscriberId_ = com.google.protobuf.ByteString.EMPTY;\n-      public boolean hasSubscriberId() {\n-        return ((bitField0_ & 0x00000040) == 0x00000040);\n-      }\n-      public com.google.protobuf.ByteString getSubscriberId() {\n-        return subscriberId_;\n-      }\n-      public Builder setSubscriberId(com.google.protobuf.ByteString value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000040;\n-        subscriberId_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearSubscriberId() {\n-        bitField0_ = (bitField0_ & ~0x00000040);\n-        subscriberId_ = getDefaultInstance().getSubscriberId();\n-        onChanged();\n-        return this;\n+        return publishResponseBuilder_;\n       }\n       \n-      // @@protoc_insertion_point(builder_scope:Hedwig.PubSubResponse)\n+      // @@protoc_insertion_point(builder_scope:Hedwig.ResponseBody)\n     }\n     \n     static {\n-      defaultInstance = new PubSubResponse(true);\n+      defaultInstance = new ResponseBody(true);\n       defaultInstance.initFields();\n     }\n     \n-    // @@protoc_insertion_point(class_scope:Hedwig.PubSubResponse)\n+    // @@protoc_insertion_point(class_scope:Hedwig.ResponseBody)\n   }\n   \n   public interface SubscriptionStateOrBuilder\n@@ -9456,6 +10487,16 @@ public Builder clearManagerVersion() {\n   private static\n     com.google.protobuf.GeneratedMessage.FieldAccessorTable\n       internal_static_Hedwig_PubSubResponse_fieldAccessorTable;\n+  private static com.google.protobuf.Descriptors.Descriptor\n+    internal_static_Hedwig_PublishResponse_descriptor;\n+  private static\n+    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+      internal_static_Hedwig_PublishResponse_fieldAccessorTable;\n+  private static com.google.protobuf.Descriptors.Descriptor\n+    internal_static_Hedwig_ResponseBody_descriptor;\n+  private static\n+    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+      internal_static_Hedwig_ResponseBody_fieldAccessorTable;\n   private static com.google.protobuf.Descriptors.Descriptor\n     internal_static_Hedwig_SubscriptionState_descriptor;\n   private static\n@@ -9520,34 +10561,39 @@ public Builder clearManagerVersion() {\n       \"nsubscribeRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\\"\" +\n       \"+\\n\\023StopDeliveryRequest\\022\\024\\n\\014subscriberId\\030\\002\" +\n       \" \\002(\\014\\\",\\n\\024StartDeliveryRequest\\022\\024\\n\\014subscrib\" +\n-      \"erId\\030\\002 \\002(\\014\\\"\\323\\001\\n\\016PubSubResponse\\0220\\n\\017protoco\" +\n+      \"erId\\030\\002 \\002(\\014\\\"\\377\\001\\n\\016PubSubResponse\\0220\\n\\017protoco\" +\n       \"lVersion\\030\\001 \\002(\\0162\\027.Hedwig.ProtocolVersion\\022\" +\n       \"&\\n\\nstatusCode\\030\\002 \\002(\\0162\\022.Hedwig.StatusCode\\022\" +\n       \"\\r\\n\\005txnId\\030\\003 \\002(\\004\\022\\021\\n\\tstatusMsg\\030\\004 \\001(\\t\\022 \\n\\007mes\" +\n       \"sage\\030\\005 \\001(\\0132\\017.Hedwig.Message\\022\\r\\n\\005topic\\030\\006 \\001\",\n-      \"(\\014\\022\\024\\n\\014subscriberId\\030\\007 \\001(\\014\\\"N\\n\\021Subscription\" +\n-      \"State\\022#\\n\\005msgId\\030\\001 \\002(\\0132\\024.Hedwig.MessageSeq\" +\n-      \"Id\\022\\024\\n\\014messageBound\\030\\002 \\001(\\r\\\"O\\n\\013LedgerRange\\022\" +\n-      \"\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020endSeqIdIncluded\\030\\002 \" +\n-      \"\\001(\\0132\\024.Hedwig.MessageSeqId\\\"3\\n\\014LedgerRange\" +\n-      \"s\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.Hedwig.LedgerRange\\\":\" +\n-      \"\\n\\013ManagerMeta\\022\\023\\n\\013managerImpl\\030\\002 \\002(\\t\\022\\026\\n\\016ma\" +\n-      \"nagerVersion\\030\\003 \\002(\\r*\\\"\\n\\017ProtocolVersion\\022\\017\\n\" +\n-      \"\\013VERSION_ONE\\020\\001*p\\n\\rOperationType\\022\\013\\n\\007PUBLI\" +\n-      \"SH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\\022\\013\\n\\007CONSUME\\020\\002\\022\\017\\n\\013UNSU\",\n-      \"BSCRIBE\\020\\003\\022\\022\\n\\016START_DELIVERY\\020\\004\\022\\021\\n\\rSTOP_DE\" +\n-      \"LIVERY\\020\\005*\\260\\003\\n\\nStatusCode\\022\\013\\n\\007SUCCESS\\020\\000\\022\\026\\n\\021\" +\n-      \"MALFORMED_REQUEST\\020\\221\\003\\022\\022\\n\\rNO_SUCH_TOPIC\\020\\222\\003\" +\n-      \"\\022\\036\\n\\031CLIENT_ALREADY_SUBSCRIBED\\020\\223\\003\\022\\032\\n\\025CLIE\" +\n-      \"NT_NOT_SUBSCRIBED\\020\\224\\003\\022\\026\\n\\021COULD_NOT_CONNEC\" +\n-      \"T\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\\226\\003\\022\\036\\n\\031NOT_RESPONSIBLE\" +\n-      \"_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SERVICE_DOWN\\020\\366\\003\\022\\024\\n\\017UNCE\" +\n-      \"RTAIN_STATE\\020\\367\\003\\022\\020\\n\\013BAD_VERSION\\020\\210\\004\\022\\036\\n\\031NO_T\" +\n-      \"OPIC_PERSISTENCE_INFO\\020\\211\\004\\022\\\"\\n\\035TOPIC_PERSIS\" +\n-      \"TENCE_INFO_EXISTS\\020\\212\\004\\022\\032\\n\\025NO_SUBSCRIPTION_\",\n-      \"STATE\\020\\213\\004\\022\\036\\n\\031SUBSCRIPTION_STATE_EXISTS\\020\\214\\004\" +\n-      \"\\022\\031\\n\\024UNEXPECTED_CONDITION\\020\\330\\004\\022\\016\\n\\tCOMPOSITE\" +\n-      \"\\020\\274\\005B\\036\\n\\032org.apache.hedwig.protocolH\\001\"\n+      \"(\\014\\022\\024\\n\\014subscriberId\\030\\007 \\001(\\014\\022*\\n\\014responseBody\" +\n+      \"\\030\\010 \\001(\\0132\\024.Hedwig.ResponseBody\\\"?\\n\\017PublishR\" +\n+      \"esponse\\022,\\n\\016publishedMsgId\\030\\001 \\002(\\0132\\024.Hedwig\" +\n+      \".MessageSeqId\\\"@\\n\\014ResponseBody\\0220\\n\\017publish\" +\n+      \"Response\\030\\001 \\001(\\0132\\027.Hedwig.PublishResponse\\\"\" +\n+      \"N\\n\\021SubscriptionState\\022#\\n\\005msgId\\030\\001 \\002(\\0132\\024.He\" +\n+      \"dwig.MessageSeqId\\022\\024\\n\\014messageBound\\030\\002 \\001(\\r\\\"\" +\n+      \"O\\n\\013LedgerRange\\022\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020endS\" +\n+      \"eqIdIncluded\\030\\002 \\001(\\0132\\024.Hedwig.MessageSeqId\" +\n+      \"\\\"3\\n\\014LedgerRanges\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.Hedwi\",\n+      \"g.LedgerRange\\\":\\n\\013ManagerMeta\\022\\023\\n\\013managerI\" +\n+      \"mpl\\030\\002 \\002(\\t\\022\\026\\n\\016managerVersion\\030\\003 \\002(\\r*\\\"\\n\\017Pro\" +\n+      \"tocolVersion\\022\\017\\n\\013VERSION_ONE\\020\\001*p\\n\\rOperati\" +\n+      \"onType\\022\\013\\n\\007PUBLISH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\\022\\013\\n\\007CO\" +\n+      \"NSUME\\020\\002\\022\\017\\n\\013UNSUBSCRIBE\\020\\003\\022\\022\\n\\016START_DELIVE\" +\n+      \"RY\\020\\004\\022\\021\\n\\rSTOP_DELIVERY\\020\\005*\\260\\003\\n\\nStatusCode\\022\\013\" +\n+      \"\\n\\007SUCCESS\\020\\000\\022\\026\\n\\021MALFORMED_REQUEST\\020\\221\\003\\022\\022\\n\\rN\" +\n+      \"O_SUCH_TOPIC\\020\\222\\003\\022\\036\\n\\031CLIENT_ALREADY_SUBSCR\" +\n+      \"IBED\\020\\223\\003\\022\\032\\n\\025CLIENT_NOT_SUBSCRIBED\\020\\224\\003\\022\\026\\n\\021C\" +\n+      \"OULD_NOT_CONNECT\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\\226\\003\\022\\036\\n\\031\",\n+      \"NOT_RESPONSIBLE_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SERVICE_\" +\n+      \"DOWN\\020\\366\\003\\022\\024\\n\\017UNCERTAIN_STATE\\020\\367\\003\\022\\020\\n\\013BAD_VER\" +\n+      \"SION\\020\\210\\004\\022\\036\\n\\031NO_TOPIC_PERSISTENCE_INFO\\020\\211\\004\\022\" +\n+      \"\\\"\\n\\035TOPIC_PERSISTENCE_INFO_EXISTS\\020\\212\\004\\022\\032\\n\\025N\" +\n+      \"O_SUBSCRIPTION_STATE\\020\\213\\004\\022\\036\\n\\031SUBSCRIPTION_\" +\n+      \"STATE_EXISTS\\020\\214\\004\\022\\031\\n\\024UNEXPECTED_CONDITION\\020\" +\n+      \"\\330\\004\\022\\016\\n\\tCOMPOSITE\\020\\274\\005B\\036\\n\\032org.apache.hedwig.\" +\n+      \"protocolH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n@@ -9647,35 +10693,51 @@ public Builder clearManagerVersion() {\n           internal_static_Hedwig_PubSubResponse_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_PubSubResponse_descriptor,\n-              new java.lang.String[] { \"ProtocolVersion\", \"StatusCode\", \"TxnId\", \"StatusMsg\", \"Message\", \"Topic\", \"SubscriberId\", },\n+              new java.lang.String[] { \"ProtocolVersion\", \"StatusCode\", \"TxnId\", \"StatusMsg\", \"Message\", \"Topic\", \"SubscriberId\", \"ResponseBody\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse.Builder.class);\n-          internal_static_Hedwig_SubscriptionState_descriptor =\n+          internal_static_Hedwig_PublishResponse_descriptor =\n             getDescriptor().getMessageTypes().get(12);\n+          internal_static_Hedwig_PublishResponse_fieldAccessorTable = new\n+            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n+              internal_static_Hedwig_PublishResponse_descriptor,\n+              new java.lang.String[] { \"PublishedMsgId\", },\n+              org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.class,\n+              org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder.class);\n+          internal_static_Hedwig_ResponseBody_descriptor =\n+            getDescriptor().getMessageTypes().get(13);\n+          internal_static_Hedwig_ResponseBody_fieldAccessorTable = new\n+            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n+              internal_static_Hedwig_ResponseBody_descriptor,\n+              new java.lang.String[] { \"PublishResponse\", },\n+              org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.class,\n+              org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder.class);\n+          internal_static_Hedwig_SubscriptionState_descriptor =\n+            getDescriptor().getMessageTypes().get(14);\n           internal_static_Hedwig_SubscriptionState_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionState_descriptor,\n               new java.lang.String[] { \"MsgId\", \"MessageBound\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState.Builder.class);\n           internal_static_Hedwig_LedgerRange_descriptor =\n-            getDescriptor().getMessageTypes().get(13);\n+            getDescriptor().getMessageTypes().get(15);\n           internal_static_Hedwig_LedgerRange_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_LedgerRange_descriptor,\n               new java.lang.String[] { \"LedgerId\", \"EndSeqIdIncluded\", },\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRange.class,\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRange.Builder.class);\n           internal_static_Hedwig_LedgerRanges_descriptor =\n-            getDescriptor().getMessageTypes().get(14);\n+            getDescriptor().getMessageTypes().get(16);\n           internal_static_Hedwig_LedgerRanges_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_LedgerRanges_descriptor,\n               new java.lang.String[] { \"Ranges\", },\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges.class,\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges.Builder.class);\n           internal_static_Hedwig_ManagerMeta_descriptor =\n-            getDescriptor().getMessageTypes().get(15);\n+            getDescriptor().getMessageTypes().get(17);\n           internal_static_Hedwig_ManagerMeta_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_ManagerMeta_descriptor,"},{"sha":"b45d4bc14c296f431cbb75321f7d34121d7991fd","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -27,7 +27,7 @@\n     /**\n      * Change here if bumping up the version number that the server sends back\n      */\n-    protected final static ProtocolVersion serverVersion = ProtocolVersion.VERSION_ONE;\n+    public final static ProtocolVersion serverVersion = ProtocolVersion.VERSION_ONE;\n \n     static PubSubResponse.Builder getBasicBuilder(StatusCode status) {\n         return PubSubResponse.newBuilder().setProtocolVersion(serverVersion).setStatusCode(status);"},{"sha":"904bc0eb49cee2403a88bf3468f7f86a7ad73977","filename":"hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -138,6 +138,18 @@ message PubSubResponse{\n     optional Message message = 5;\n     optional bytes topic = 6;\n     optional bytes subscriberId = 7;\n+\n+    // the following fields are sent by other requests\n+    optional ResponseBody responseBody = 8;\n+}\n+\n+message PublishResponse {\n+    // If the request was a publish request, this was the message Id of the published message.\n+    required MessageSeqId publishedMsgId = 1;\n+}\n+\n+message ResponseBody {\n+    optional PublishResponse publishResponse = 1;\n }\n \n "},{"sha":"587f904f1d00375b73fe1b22fc1b395cb44f017a","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -17,6 +17,7 @@\n  */\n package org.apache.hedwig.server.handlers;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.jboss.netty.channel.Channel;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.exceptions.PubSubException;\n@@ -58,21 +59,32 @@ public void handleRequestAtOwner(final PubSubRequest request, final Channel chan\n \n         final long requestTime = MathUtils.now();\n         PersistRequest persistRequest = new PersistRequest(request.getTopic(), msgToSerialize,\n-        new Callback<Long>() {\n+        new Callback<PubSubProtocol.MessageSeqId>() {\n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n                 channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));\n                 pubStats.incrementFailedOps();\n             }\n \n             @Override\n-            public void operationFinished(Object ctx, Long resultOfOperation) {\n-                channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n+            public void operationFinished(Object ctx, PubSubProtocol.MessageSeqId resultOfOperation) {\n+                channel.write(getSuccessResponse(request.getTxnId(), resultOfOperation));\n                 pubStats.updateLatency(MathUtils.now() - requestTime);\n             }\n         }, null);\n \n         persistenceMgr.persistMessage(persistRequest);\n     }\n \n+    private static PubSubProtocol.PubSubResponse getSuccessResponse(long txnId, PubSubProtocol.MessageSeqId publishedMessageSeqId) {\n+        if (null == publishedMessageSeqId) {\n+            return PubSubResponseUtils.getSuccessResponse(txnId);\n+        }\n+        PubSubProtocol.PublishResponse publishResponse = PubSubProtocol.PublishResponse.newBuilder().setPublishedMsgId(publishedMessageSeqId).build();\n+        PubSubProtocol.ResponseBody responseBody = PubSubProtocol.ResponseBody.newBuilder().setPublishResponse(publishResponse).build();\n+        return PubSubProtocol.PubSubResponse.newBuilder().\n+            setProtocolVersion(PubSubResponseUtils.serverVersion).\n+            setStatusCode(PubSubProtocol.StatusCode.SUCCESS).setTxnId(txnId).\n+            setResponseBody(responseBody).build();\n+    }\n }"},{"sha":"873fecd4fcf3aa88a8d0410958f3390ba0ee4241","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -473,13 +473,13 @@ public void runInternal() {\n             final TopicInfo topicInfo = topicInfos.get(topic);\n \n             if (topicInfo == null) {\n-                request.callback.operationFailed(request.ctx,\n+                request.getCallback().operationFailed(request.ctx,\n                                                  new PubSubException.ServerNotResponsibleForTopicException(\"\"));\n                 return;\n             }\n \n             if (topicInfo.doRelease.get()) {\n-                request.callback.operationFailed(request.ctx, new PubSubException.ServiceDownException(\n+                request.getCallback().operationFailed(request.ctx, new PubSubException.ServiceDownException(\n                     \"The ownership of the topic is releasing due to unrecoverable issue.\"));\n                 return;\n             }\n@@ -496,6 +496,8 @@ public void runInternal() {\n             topicInfo.lastSeqIdPushed = builder.build();\n             Message msgToSerialize = Message.newBuilder(request.message).setMsgId(topicInfo.lastSeqIdPushed).build();\n \n+            final MessageSeqId responseSeqId = msgToSerialize.getMsgId();\n+\n             topicInfo.currentLedgerRange.handle.asyncAddEntry(msgToSerialize.toByteArray(),\n             new SafeAsynBKCallback.AddCallback() {\n                 @Override\n@@ -522,7 +524,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n                                 }\n                             }, null);\n                         }\n-                        request.callback.operationFailed(ctx, new PubSubException.ServiceDownException(bke));\n+                        request.getCallback().operationFailed(ctx, new PubSubException.ServiceDownException(bke));\n                         return;\n                     }\n \n@@ -536,7 +538,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n                     }\n \n                     topicInfo.lastEntryIdAckedInCurrentLedger = entryId;\n-                    request.callback.operationFinished(ctx, localSeqId);\n+                    request.getCallback().operationFinished(ctx, responseSeqId);\n                 }\n             }, request.ctx);\n "},{"sha":"16b7b7d387c48bd487dff708a674ad47dbc08dfa","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -210,7 +210,7 @@ public void persistMessage(PersistRequest request) {\n \n         Connection conn = threadLocalConnection.get();\n \n-        Callback<Long> callback = request.getCallback();\n+        Callback<MessageSeqId> callback = request.getCallback();\n         Object ctx = request.getCtx();\n         ByteString topic = request.getTopic();\n         Message message = request.getMessage();\n@@ -259,7 +259,7 @@ public void persistMessage(PersistRequest request) {\n                 return;\n             }\n         }\n-        callback.operationFinished(ctx, seqId);\n+        callback.operationFinished(ctx, MessageIdUtils.mergeLocalSeqId(message, seqId).getMsgId());\n     }\n \n     /*"},{"sha":"d137fe6731c049d151b5142fbf94d44e1a3326a3","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/PersistRequest.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -18,6 +18,7 @@\n package org.apache.hedwig.server.persistence;\n \n import com.google.protobuf.ByteString;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.util.Callback;\n \n@@ -29,10 +30,10 @@\n public class PersistRequest {\n     ByteString topic;\n     Message message;\n-    Callback<Long> callback;\n+    private Callback<PubSubProtocol.MessageSeqId> callback;\n     Object ctx;\n \n-    public PersistRequest(ByteString topic, Message message, Callback<Long> callback, Object ctx) {\n+    public PersistRequest(ByteString topic, Message message, Callback<PubSubProtocol.MessageSeqId> callback, Object ctx) {\n         this.topic = topic;\n         this.message = message;\n         this.callback = callback;\n@@ -47,7 +48,7 @@ public Message getMessage() {\n         return message;\n     }\n \n-    public Callback<Long> getCallback() {\n+    public Callback<PubSubProtocol.MessageSeqId> getCallback() {\n         return callback;\n     }\n "},{"sha":"0e5fd08187571c200cddbbfa2c4d43dcb49070c9","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -31,6 +31,7 @@\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingQueue;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -170,15 +171,15 @@ public void persistMessage(PersistRequest request) {\n      * the request queue to be handled serially by the cache maintainer thread.\n      *\n      */\n-    public class PersistCallback implements Callback<Long> {\n+    public class PersistCallback implements Callback<PubSubProtocol.MessageSeqId> {\n \n         /**\n          * In case there is a failure in persisting, just pass it to the\n          * original callback\n          */\n         public void operationFailed(Object ctx, PubSubException exception) {\n             PersistRequest originalRequest = (PersistRequest) ctx;\n-            Callback<Long> originalCallback = originalRequest.getCallback();\n+            Callback<PubSubProtocol.MessageSeqId> originalCallback = originalRequest.getCallback();\n             Object originalContext = originalRequest.getCtx();\n             originalCallback.operationFailed(originalContext, exception);\n         }\n@@ -188,7 +189,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n          * success, and then opportunistically treat the message as if it just\n          * came in through a scan\n          */\n-        public void operationFinished(Object ctx, Long resultOfOperation) {\n+        public void operationFinished(Object ctx, PubSubProtocol.MessageSeqId resultOfOperation) {\n             PersistRequest originalRequest = (PersistRequest) ctx;\n \n             // Lets call the original callback first so that the publisher can\n@@ -198,11 +199,11 @@ public void operationFinished(Object ctx, Long resultOfOperation) {\n             // Original message that was persisted didn't have the local seq-id.\n             // Lets add that in\n             Message messageWithLocalSeqId = MessageIdUtils.mergeLocalSeqId(originalRequest.getMessage(),\n-                                            resultOfOperation);\n+                                            resultOfOperation.getLocalComponent());\n \n             // Now enqueue a request to add this newly persisted message to our\n             // cache\n-            CacheKey cacheKey = new CacheKey(originalRequest.getTopic(), resultOfOperation);\n+            CacheKey cacheKey = new CacheKey(originalRequest.getTopic(), resultOfOperation.getLocalComponent());\n \n             enqueueWithoutFailure(new ScanResponse(cacheKey, messageWithLocalSeqId));\n         }"},{"sha":"838eca0c110fb8f861ff580d96f36408081f4c76","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -209,9 +209,9 @@ public void deliver(final ByteString topic, ByteString subscriberId, Message msg\n                                             msg.getSrcRegion()).setSeqId(\n                                             msg.getMsgId().getLocalComponent())));\n                             }\n-                            pm.persistMessage(new PersistRequest(topic, msg, new Callback<Long>() {\n+                            pm.persistMessage(new PersistRequest(topic, msg, new Callback<MessageSeqId>() {\n                                 @Override\n-                                public void operationFinished(Object ctx, Long resultOfOperation) {\n+                                public void operationFinished(Object ctx, MessageSeqId resultOfOperation) {\n                                     if (LOGGER.isDebugEnabled())\n                                         LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] cross-region recv-fwd succeeded for topic \"\n                                                      + topic.toStringUtf8());"},{"sha":"2297c56f3e35f033bb275628609fb2ed8f76e8bf","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","status":"modified","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -17,7 +17,12 @@\n  */\n package org.apache.hedwig.client;\n \n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.junit.After;\n import org.junit.Before;\n@@ -32,6 +37,8 @@\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.PublishResponse;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.server.PubSubServerStandAloneTestBase;\n import org.apache.hedwig.util.Callback;\n@@ -119,13 +126,141 @@ public void testSyncPublish() throws Exception {\n         assertTrue(publishSuccess);\n     }\n \n+    @Test\n+    public void testSyncPublishWithResponse() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"testSyncPublishWithResponse\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysubid\");\n+\n+        final String prefix = \"SyncMessage-\";\n+        final int numMessages = 30;\n+\n+        final Map<String, MessageSeqId> publishedMsgs =\n+            new HashMap<String, MessageSeqId>();\n+\n+        final AtomicInteger numReceived = new AtomicInteger(0);\n+        final CountDownLatch receiveLatch = new CountDownLatch(1);\n+        final Map<String, MessageSeqId> receivedMsgs =\n+            new HashMap<String, MessageSeqId>();\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.startDelivery(topic, subid, new MessageHandler() {\n+            synchronized public void deliver(ByteString topic, ByteString subscriberId,\n+                                             Message msg, Callback<Void> callback,\n+                                             Object context) {\n+                String str = msg.getBody().toStringUtf8();\n+                receivedMsgs.put(str, msg.getMsgId()); \n+                if (numMessages == numReceived.incrementAndGet()) {\n+                    receiveLatch.countDown();\n+                }\n+                callback.operationFinished(context, null);\n+            }\n+        });\n+\n+        for (int i=0; i<numMessages; i++) {\n+            String str = prefix + i;\n+            ByteString data = ByteString.copyFromUtf8(str);\n+            Message msg = Message.newBuilder().setBody(data).build();\n+            PublishResponse response = publisher.publish(topic, msg);\n+            assertNotNull(response);\n+            publishedMsgs.put(str, response.getPublishedMsgId());\n+        }\n+\n+        assertTrue(\"Timed out waiting on callback for messages.\",\n+                   receiveLatch.await(30, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected \" + numMessages + \" messages.\",\n+                     numMessages, numReceived.get());\n+        assertEquals(\"Should be expected \" + numMessages + \" messages in map.\",\n+                     numMessages, receivedMsgs.size());\n+\n+        for (int i=0; i<numMessages; i++) {\n+            final String str = prefix + i;\n+            MessageSeqId pubId = publishedMsgs.get(str);\n+            MessageSeqId revId = receivedMsgs.get(str);\n+            assertTrue(\"Doesn't receive same message seq id for \" + str,\n+                       pubId.equals(revId));\n+        }\n+    }\n+\n     @Test\n     public void testAsyncPublish() throws Exception {\n         publisher.asyncPublish(ByteString.copyFromUtf8(\"myAsyncTopic\"), Message.newBuilder().setBody(\n                                    ByteString.copyFromUtf8(\"Hello Async World!\")).build(), new TestCallback(), null);\n         assertTrue(queue.take());\n     }\n \n+    @Test\n+    public void testAsyncPublishWithResponse() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"testAsyncPublishWithResponse\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysubid\");\n+\n+        final String prefix = \"AsyncMessage-\";\n+        final int numMessages = 30;\n+\n+        final AtomicInteger numPublished = new AtomicInteger(0);\n+        final CountDownLatch publishLatch = new CountDownLatch(1);\n+        final Map<String, MessageSeqId> publishedMsgs =\n+            new HashMap<String, MessageSeqId>();\n+\n+        final AtomicInteger numReceived = new AtomicInteger(0);\n+        final CountDownLatch receiveLatch = new CountDownLatch(1);\n+        final Map<String, MessageSeqId> receivedMsgs =\n+            new HashMap<String, MessageSeqId>();\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.startDelivery(topic, subid, new MessageHandler() {\n+            synchronized public void deliver(ByteString topic, ByteString subscriberId,\n+                                             Message msg, Callback<Void> callback,\n+                                             Object context) {\n+                String str = msg.getBody().toStringUtf8();\n+                receivedMsgs.put(str, msg.getMsgId()); \n+                if (numMessages == numReceived.incrementAndGet()) {\n+                    receiveLatch.countDown();\n+                }\n+                callback.operationFinished(context, null);\n+            }\n+        });\n+\n+        for (int i=0; i<numMessages; i++) {\n+            final String str = prefix + i;\n+            ByteString data = ByteString.copyFromUtf8(str);\n+            Message msg = Message.newBuilder().setBody(data).build();\n+            publisher.asyncPublishWithResponse(topic, msg, new Callback<PublishResponse>() {\n+                @Override\n+                public void operationFinished(Object ctx, PublishResponse response) {\n+                    publishedMsgs.put(str, response.getPublishedMsgId());\n+                    if (numMessages == numPublished.incrementAndGet()) {\n+                        publishLatch.countDown();\n+                    }\n+                }\n+                @Override\n+                public void operationFailed(Object ctx, final PubSubException exception) {\n+                    publishLatch.countDown();\n+                }\n+            }, null);\n+        }\n+        assertTrue(\"Timed out waiting on callback for publish requests.\",\n+                   publishLatch.await(10, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected \" + numMessages + \" publishes.\",\n+                     numMessages, numPublished.get());\n+        assertEquals(\"Should be expected \" + numMessages + \" publishe responses.\",\n+                     numMessages, publishedMsgs.size());\n+\n+        assertTrue(\"Timed out waiting on callback for messages.\",\n+                   receiveLatch.await(30, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected \" + numMessages + \" messages.\",\n+                     numMessages, numReceived.get());\n+        assertEquals(\"Should be expected \" + numMessages + \" messages in map.\",\n+                     numMessages, receivedMsgs.size());\n+\n+        for (int i=0; i<numMessages; i++) {\n+            final String str = prefix + i;\n+            MessageSeqId pubId = publishedMsgs.get(str);\n+            MessageSeqId revId = receivedMsgs.get(str);\n+            assertTrue(\"Doesn't receive same message seq id for \" + str,\n+                       pubId.equals(revId));\n+        }\n+    }\n+\n     @Test\n     public void testMultipleAsyncPublish() throws Exception {\n         ByteString topic1 = ByteString.copyFromUtf8(\"myFirstTopic\");"},{"sha":"ebfe8e801894713e7de31e5f1917ce92f4e02538","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/StubPersistenceManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/StubPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/StubPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/StubPersistenceManager.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -73,12 +73,13 @@ public long getSeqIdAfterSkipping(ByteString topic, long seqId, int skipAmount)\n \n     public void persistMessage(PersistRequest request) {\n         if (failure) {\n-            request.callback.operationFailed(request.getCtx(), exception);\n+            request.getCallback().operationFailed(request.getCtx(), exception);\n             return;\n         }\n \n         MapMethods.addToMultiMap(messages, request.getTopic(), request.getMessage(), ArrayListMessageFactory.instance);\n-        request.callback.operationFinished(request.getCtx(), (long) messages.get(request.getTopic()).size());\n+        request.getCallback().operationFinished(request.getCtx(), MessageIdUtils.mergeLocalSeqId(request.getMessage(),\n+                (long) messages.get(request.getTopic()).size()).getMsgId());\n     }\n \n     public void scanSingleMessage(ScanRequest request) {"},{"sha":"b18a5efe0f745f9c46a17db727d0b727872b0a8e","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -30,6 +30,7 @@\n \n import org.apache.hedwig.HelperMethods;\n import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.meta.MetadataManagerFactory;\n@@ -178,7 +179,7 @@ public void testScanMessagesOnTwoLedgers() throws Exception {\n         }\n     }\n \n-    class TestCallback implements Callback<Long> {\n+    class TestCallback implements Callback<PubSubProtocol.MessageSeqId> {\n \n         @Override\n         @SuppressWarnings(\"unchecked\")\n@@ -193,7 +194,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n \n         @Override\n         @SuppressWarnings(\"unchecked\")\n-        public void operationFinished(Object ctx, Long resultOfOperation) {\n+        public void operationFinished(Object ctx, PubSubProtocol.MessageSeqId resultOfOperation) {\n             LinkedBlockingQueue<Boolean> statusQueue = (LinkedBlockingQueue<Boolean>) ctx;\n             try {\n                 statusQueue.put(true);"},{"sha":"eac141c9e13fee29eed85036805f7cf6c1249509","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -25,6 +25,7 @@\n import junit.framework.TestCase;\n \n import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -107,9 +108,9 @@ public void testNonEmptyDirtyLedger() throws Exception {\n             assertNull(ConcurrencyUtils.take(stubCallback.queue).right());\n             assertEquals(numPrevLedgers, bkpm.topicInfos.get(topic).ledgerRanges.size());\n \n-            StubCallback<Long> persistCallback = new StubCallback<Long>();\n+            StubCallback<PubSubProtocol.MessageSeqId> persistCallback = new StubCallback<PubSubProtocol.MessageSeqId>();\n             bkpm.persistMessage(new PersistRequest(topic, messages.get(index), persistCallback, null));\n-            assertEquals(new Long(index + 1), ConcurrencyUtils.take(persistCallback.queue).left());\n+            assertEquals(index + 1, ConcurrencyUtils.take(persistCallback.queue).left().getLocalComponent());\n \n             // once in every 10 times, give up ledger\n             if (r.nextInt(10) == 9) {"},{"sha":"c053ae401c5c524531bfdb1f6f7a407d083d3a95","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -25,6 +25,7 @@\n \n import junit.framework.TestCase;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.junit.Test;\n@@ -45,14 +46,14 @@\n \n     RuntimeException failureException;\n \n-    class TestCallback implements Callback<Long> {\n+    class TestCallback implements Callback<PubSubProtocol.MessageSeqId> {\n \n         public void operationFailed(Object ctx, PubSubException exception) {\n             throw (failureException = new RuntimeException(exception));\n         }\n \n         @SuppressWarnings(\"unchecked\")\n-        public void operationFinished(Object ctx, Long resultOfOperation) {\n+        public void operationFinished(Object ctx, PubSubProtocol.MessageSeqId resultOfOperation) {\n             LinkedBlockingQueue<Boolean> statusQueue = (LinkedBlockingQueue<Boolean>) ctx;\n             try {\n                 statusQueue.put(true);"},{"sha":"e5b7c3b06663de38821ef4b7965330cd5e3ca58e","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/0092518bb3e345de2113f29450c9e1557cfc8020/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java?ref=0092518bb3e345de2113f29450c9e1557cfc8020","patch":"@@ -21,6 +21,7 @@\n \n import java.util.List;\n \n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -91,7 +92,7 @@ public void tearDown() throws Exception {\n \n     @Test\n     public void testPersistMessage() throws Exception {\n-        StubCallback<Long> callback = new StubCallback<Long>();\n+        StubCallback<PubSubProtocol.MessageSeqId> callback = new StubCallback<PubSubProtocol.MessageSeqId>();\n         PersistRequest request = new PersistRequest(topic, messages.get(0), callback, null);\n \n         stubPersistenceManager.failure = true;\n@@ -107,7 +108,7 @@ public void testPersistMessage() throws Exception {\n     }\n \n     private void persistMessage(Message msg) throws Exception {\n-        StubCallback<Long> callback = new StubCallback<Long>();\n+        StubCallback<PubSubProtocol.MessageSeqId> callback = new StubCallback<PubSubProtocol.MessageSeqId>();\n         PersistRequest request = new PersistRequest(topic, msg, callback, null);\n         cacheBasedPersistenceManager.persistMessage(request);\n         assertNotNull(ConcurrencyUtils.take(callback.queue).left());"}]}

