{"sha":"00f25f5622e69f063202f7bd46f09ad1d708983d","node_id":"MDY6Q29tbWl0MTU3NTk1NjowMGYyNWY1NjIyZTY5ZjA2MzIwMmY3YmQ0NmYwOWFkMWQ3MDg5ODNk","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-07-07T14:37:50Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-07-07T14:37:50Z"},"message":"BOOKKEEPER-5: Issue with Netty in BookKeeper (fpj and ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1143850 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"153b5521210ecc1a9bbd3c9f88e915b967195b41","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/153b5521210ecc1a9bbd3c9f88e915b967195b41"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/00f25f5622e69f063202f7bd46f09ad1d708983d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/00f25f5622e69f063202f7bd46f09ad1d708983d","html_url":"https://github.com/apache/bookkeeper/commit/00f25f5622e69f063202f7bd46f09ad1d708983d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/00f25f5622e69f063202f7bd46f09ad1d708983d/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"d20cb28943e80c1d39cca5916f459651e29dd573","url":"https://api.github.com/repos/apache/bookkeeper/commits/d20cb28943e80c1d39cca5916f459651e29dd573","html_url":"https://github.com/apache/bookkeeper/commit/d20cb28943e80c1d39cca5916f459651e29dd573"}],"stats":{"total":64,"additions":59,"deletions":5},"files":[{"sha":"0b18f31ee86e5e0b808d664fc40c9f1d2f4af692","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/00f25f5622e69f063202f7bd46f09ad1d708983d/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/00f25f5622e69f063202f7bd46f09ad1d708983d/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=00f25f5622e69f063202f7bd46f09ad1d708983d","patch":"@@ -15,3 +15,5 @@ BUGFIXES:\n   BOOKKEEPER-19: BookKeeper doesn't support more than 2Gig of memory (ivan via fpj)\n \n   BOOKEEPER-22: Exception in LedgerCache causes addEntry request to fail (fpj via fpj)\n+\n+  BOOKEEPER-5: Issue with Netty in BookKeeper (fpj and ivank via fpj)"},{"sha":"6287ae04cec19b6ce71e4e5f1bd45371c9ed9cf8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/00f25f5622e69f063202f7bd46f09ad1d708983d/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/00f25f5622e69f063202f7bd46f09ad1d708983d/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=00f25f5622e69f063202f7bd46f09ad1d708983d","patch":"@@ -64,6 +64,8 @@ public PerChannelBookieClient lookupClient(InetSocketAddress addr) {\n             PerChannelBookieClient prevChannel = channels.putIfAbsent(addr, channel);\n             if (prevChannel != null) {\n                 channel = prevChannel;\n+            } else {\n+                channel.connect();\n             }\n         }\n "},{"sha":"946f87fdf6375b847f712552c9e2cff22329a624","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/00f25f5622e69f063202f7bd46f09ad1d708983d/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/00f25f5622e69f063202f7bd46f09ad1d708983d/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=00f25f5622e69f063202f7bd46f09ad1d708983d","patch":"@@ -92,11 +92,9 @@ public PerChannelBookieClient(OrderedSafeExecutor executor, ClientSocketChannelF\n         this.executor = executor;\n         this.totalBytesOutstanding = totalBytesOutstanding;\n         this.channelFactory = channelFactory;\n-        connect(channelFactory);\n     }\n \n-    void connect(ChannelFactory channelFactory) {\n-\n+    void connect() {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Connecting to bookie: \" + addr);\n \n@@ -178,7 +176,7 @@ void connectIfNeededAndDoOp(GenericCallback<Void> op) {\n                     pendingOps.add(op);\n \n                     if (!connectionAttemptInProgress) {\n-                        connect(channelFactory);\n+                        connect();\n                     }\n \n                 }\n@@ -282,7 +280,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n \n     public void close() {\n         if (channel != null) {\n-            channel.close();\n+            channel.close().awaitUninterruptibly();\n         }\n     }\n "},{"sha":"70498aa53f89588f6f7f46e70f8d99d6f1395e51","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/00f25f5622e69f063202f7bd46f09ad1d708983d/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/00f25f5622e69f063202f7bd46f09ad1d708983d/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=00f25f5622e69f063202f7bd46f09ad1d708983d","patch":"@@ -662,6 +662,58 @@ public void testReadWriteAsyncLength() throws IOException {\n         }\n     }\n     \n+    @Test\n+    public void testShutdown() throws IOException {\n+        try {\n+            int numLedgers = 10000;\n+            Long throttle = (((Double) Math.max(1.0, ((double) 10000/numLedgers))).longValue());\n+            System.setProperty(\"throttle\", throttle.toString());\n+            bkc = new BookKeeper(\"127.0.0.1\");\n+            LedgerHandle[] lhArray = new LedgerHandle[numLedgers];\n+            for(int i = 0; i < numLedgers; i++){\n+                lhArray[i] = bkc.createLedger(3, 2, BookKeeper.DigestType.CRC32, new byte[] {'a', 'b'});\n+                LOG.debug(\"Ledger handle: \" + lhArray[i].getId());\n+            }\n+            LOG.info(\"Done creating ledgers.\");\n+            Random r = new Random();\n+            \n+            for (int i = 0; i < numEntriesToWrite; i++) {\n+                ByteBuffer entry = ByteBuffer.allocate(4);\n+                entry.putInt(rng.nextInt(maxInt));\n+                entry.position(0);\n+\n+                entries.add(entry.array());\n+                entriesSize.add(entry.array().length);\n+                \n+                int nextLh = r.nextInt(numLedgers);\n+                lhArray[nextLh].asyncAddEntry(entry.array(), this, sync);\n+            }\n+\n+            // wait for all entries to be acknowledged\n+            synchronized (sync) {\n+                while (sync.counter < numEntriesToWrite) {\n+                    LOG.debug(\"Entries counter = \" + sync.counter);\n+                    sync.wait();\n+                }\n+            }\n+            \n+            LOG.debug(\"*** WRITE COMPLETE ***\");\n+            // close ledger\n+            for(int i = 0; i < lhArray.length; i++){\n+                lhArray[i].close();\n+            }\n+        } catch (KeeperException e) {\n+            LOG.error(\"Test failed\", e);\n+            fail(\"Test failed due to ZooKeeper exception\");\n+        } catch (BKException e) {\n+            LOG.error(\"Test failed\", e);\n+            fail(\"Test failed due to BookKeeper exception\");\n+        } catch (InterruptedException e) {\n+            LOG.error(\"Test failed\", e);\n+            fail(\"Test failed due to interruption\");\n+        }\n+    }\n+    \n     \n     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n         if(rc != BKException.Code.OK) fail(\"Return code is not OK: \" + rc);"}]}

