{"sha":"03a90ca3303f62f9dce202abb803563ba8d2d66b","node_id":"MDY6Q29tbWl0MTU3NTk1NjowM2E5MGNhMzMwM2Y2MmY5ZGNlMjAyYWJiODAzNTYzYmE4ZDJkNjZi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-06T13:13:16Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-06T13:13:16Z"},"message":"BOOKKEEPER-744: Run the auditor bookie check periodically (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1592739 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aab47b53ffca8ea1a6b7162cdbe2d01854aaf6ea","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/aab47b53ffca8ea1a6b7162cdbe2d01854aaf6ea"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/03a90ca3303f62f9dce202abb803563ba8d2d66b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/03a90ca3303f62f9dce202abb803563ba8d2d66b","html_url":"https://github.com/apache/bookkeeper/commit/03a90ca3303f62f9dce202abb803563ba8d2d66b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/03a90ca3303f62f9dce202abb803563ba8d2d66b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2990e397896f16d4720da46fdd6cddb046bd12c6","url":"https://api.github.com/repos/apache/bookkeeper/commits/2990e397896f16d4720da46fdd6cddb046bd12c6","html_url":"https://github.com/apache/bookkeeper/commit/2990e397896f16d4720da46fdd6cddb046bd12c6"}],"stats":{"total":223,"additions":220,"deletions":3},"files":[{"sha":"601abed3c73cc6c5c746a95c2ea41a052c224503","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/03a90ca3303f62f9dce202abb803563ba8d2d66b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/03a90ca3303f62f9dce202abb803563ba8d2d66b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=03a90ca3303f62f9dce202abb803563ba8d2d66b","patch":"@@ -24,6 +24,8 @@ Release 4.2.3 - 2013-12-04\n \n         BOOKKEEPER-743: Periodic ledger check running too often as doc doesn't match implementation. (ivank)\n \n+        BOOKKEEPER-744: Run the auditor bookie check periodically (ivank)\n+\n Release 4.2.2 - 2013-10-02\n \n   Backward compatible changes:"},{"sha":"06df37c9bc627a712149b31f35d5d6a4c06c3c40","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/conf/bk_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/conf/bk_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bk_server.conf?ref=03a90ca3303f62f9dce202abb803563ba8d2d66b","patch":"@@ -213,3 +213,12 @@ zkTimeout=10000\n # Note that periodic checking will put extra load on the cluster, so it should\n # not be run more frequently than once a day.\n #auditorPeriodicCheckInterval=604800\n+\n+# The interval between auditor bookie checks.\n+# The auditor bookie check, checks ledger metadata to see which bookies should\n+# contain entries for each ledger. If a bookie which should contain entries is\n+# unavailable, then the ledger containing that entry is marked for recovery.\n+# Setting this to 0 disabled the periodic check. Bookie checks will still\n+# run when a bookie fails.\n+# The interval is specified in seconds.\n+#auditorPeriodicBookieCheckInterval=84600"},{"sha":"d14990516ee87e0037c9d180cba9d7c09a1ff749","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=03a90ca3303f62f9dce202abb803563ba8d2d66b","patch":"@@ -70,6 +70,7 @@\n     protected final static String DISK_USAGE_THRESHOLD = \"diskUsageThreshold\";\n     protected final static String DISK_CHECK_INTERVAL = \"diskCheckInterval\";\n     protected final static String AUDITOR_PERIODIC_CHECK_INTERVAL = \"auditorPeriodicCheckInterval\";\n+    protected final static String AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL = \"auditorPeriodicBookieCheckInterval\";\n     protected final static String AUTO_RECOVERY_DAEMON_ENABLED = \"autoRecoveryDaemonEnabled\";\n \n     /**\n@@ -735,6 +736,29 @@ public long getAuditorPeriodicCheckInterval() {\n         return getLong(AUDITOR_PERIODIC_CHECK_INTERVAL, 604800);\n     }\n \n+    /**\n+     * Set the interval between auditor bookie checks.\n+     * The auditor bookie check, checks ledger metadata to see which bookies\n+     * contain entries for each ledger. If a bookie which should contain entries\n+     * is unavailable, then the ledger containing that entry is marked for recovery.\n+     * Setting this to 0 disabled the periodic check. Bookie checks will still\n+     * run when a bookie fails.\n+     *\n+     * @param interval The period in seconds.\n+     */\n+    public void setAuditorPeriodicBookieCheckInterval(long interval) {\n+        setProperty(AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL, interval);\n+    }\n+\n+    /**\n+     * Get the interval between auditor bookie check runs.\n+     * @see #setAuditorPeriodicBookieCheckInterval(long)\n+     * @return the interval between bookie check runs, in seconds. Default is 84600 (= 1 day)\n+     */\n+    public long getAuditorPeriodicBookieCheckInterval() {\n+        return getLong(AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL, 84600);\n+    }\n+\n     /**\n      * Sets that whether the auto-recovery service can start along with Bookie\n      * server itself or not"},{"sha":"2fe43401c6a9316b86e51e6592bb54661bd5e934","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=03a90ca3303f62f9dce202abb803563ba8d2d66b","patch":"@@ -203,8 +203,10 @@ public void start() {\n             }\n \n             long interval = conf.getAuditorPeriodicCheckInterval();\n+\n             if (interval > 0) {\n-                LOG.info(\"Periodic checking enabled\");\n+                LOG.info(\"Auditor periodic ledger checking enabled\"\n+                         + \" 'auditorPeriodicCheckInterval' {} seconds\", interval);\n                 executor.scheduleAtFixedRate(new Runnable() {\n                         public void run() {\n                             LOG.info(\"Running periodic check\");\n@@ -237,7 +239,7 @@ public void run() {\n                 LOG.info(\"Periodic checking disabled\");\n             }\n \n-            executor.submit(new Runnable() {\n+            Runnable bookieCheck = new Runnable() {\n                     public void run() {\n                         try {\n                             knownBookies = getAvailableBookies();\n@@ -257,7 +259,17 @@ public void run() {\n                             submitShutdownTask();\n                         }\n                     }\n-                });\n+                };\n+\n+            long bookieCheckInterval = conf.getAuditorPeriodicBookieCheckInterval();\n+            if (bookieCheckInterval == 0) {\n+                LOG.info(\"Auditor periodic bookie checking disabled, running once check now anyhow\");\n+                executor.submit(bookieCheck);\n+            } else {\n+                LOG.info(\"Auditor periodic bookie checking enabled\"\n+                         + \" 'auditorPeriodicBookieCheckInterval' {} seconds\", bookieCheckInterval);\n+                executor.scheduleAtFixedRate(bookieCheck, 0, bookieCheckInterval, TimeUnit.SECONDS);\n+            }\n         }\n     }\n "},{"sha":"be89e7c82af53fe900220bbaf19d53994318678b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/bookkeeper/blob/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java?ref=03a90ca3303f62f9dce202abb803563ba8d2d66b","patch":"@@ -0,0 +1,127 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.test.TestCallbacks;\n+\n+import java.util.List;\n+import java.net.InetSocketAddress;\n+\n+import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.LedgerHandleAdapter;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+\n+import org.apache.bookkeeper.util.ZkUtils;\n+\n+import org.apache.zookeeper.ZooKeeper;\n+import org.junit.Before;\n+import org.junit.After;\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This test verifies that the period check on the auditor\n+ * will pick up on missing data in the client\n+ */\n+public class AuditorPeriodicBookieCheckTest extends BookKeeperClusterTestCase {\n+    private final static Logger LOG = LoggerFactory\n+            .getLogger(AuditorPeriodicBookieCheckTest.class);\n+\n+    private AuditorElector auditorElector = null;\n+    private ZooKeeper auditorZookeeper = null;\n+\n+    private final static int CHECK_INTERVAL = 1; // run every second\n+\n+    public AuditorPeriodicBookieCheckTest() {\n+        super(3);\n+        baseConf.setPageLimit(1); // to make it easy to push ledger out of cache\n+        baseConf.setAllowLoopback(true);\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        ServerConfiguration conf = new ServerConfiguration(bsConfs.get(0));\n+        conf.setAllowLoopback(true);\n+        conf.setAuditorPeriodicBookieCheckInterval(CHECK_INTERVAL);\n+        String addr = StringUtils.addrToString(bs.get(0).getLocalAddress());\n+\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n+        auditorZookeeper = ZkUtils.createConnectedZookeeperClient(\n+                zkUtil.getZooKeeperConnectString(), w);\n+\n+        auditorElector = new AuditorElector(addr, conf, auditorZookeeper);\n+        auditorElector.start();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        auditorElector.shutdown();\n+        auditorZookeeper.close();\n+\n+        super.tearDown();\n+    }\n+\n+    /**\n+     * Test that the periodic bookie checker works\n+     */\n+    @Test(timeout=30000)\n+    public void testPeriodicBookieCheckInterval() throws Exception {\n+        LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bsConfs.get(0), zkc);\n+        LedgerManager ledgerManager = mFactory.newLedgerManager();\n+        final LedgerUnderreplicationManager underReplicationManager = mFactory.newLedgerUnderreplicationManager();\n+        final int numLedgers = 1;\n+\n+        LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"passwd\".getBytes());\n+        LedgerMetadata md = LedgerHandleAdapter.getLedgerMetadata(lh);\n+\n+        List<InetSocketAddress> ensemble = md.getEnsembles().get(0L);\n+        ensemble.set(0, new InetSocketAddress(\"1.1.1.1\", 1000));\n+\n+        TestCallbacks.GenericCallbackFuture<Void> cb = new TestCallbacks.GenericCallbackFuture<Void>();\n+        ledgerManager.writeLedgerMetadata(lh.getId(), md, cb);\n+        cb.get();\n+\n+        long underReplicatedLedger = -1;\n+        for (int i = 0; i < 10; i++) {\n+            underReplicatedLedger = underReplicationManager.pollLedgerToRereplicate();\n+            if (underReplicatedLedger != -1) {\n+                break;\n+            }\n+            Thread.sleep(CHECK_INTERVAL*1000);\n+        }\n+        assertEquals(\"Ledger should be under replicated\", lh.getId(), underReplicatedLedger);\n+    }\n+}"},{"sha":"428e550e1e307d6dc9f2556b2507f474c7334847","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/03a90ca3303f62f9dce202abb803563ba8d2d66b/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java?ref=03a90ca3303f62f9dce202abb803563ba8d2d66b","patch":"@@ -0,0 +1,43 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.test;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import com.google.common.util.concurrent.AbstractFuture;\n+\n+/**\n+ * Callbacks implemented with SettableFuture, to be used in tests\n+ */\n+public class TestCallbacks {\n+    public static class GenericCallbackFuture<T>\n+        extends AbstractFuture<T> implements GenericCallback<T> {\n+        @Override\n+        public void operationComplete(int rc, T value) {\n+            if (rc != BKException.Code.OK) {\n+                setException(BKException.create(rc));\n+            } else {\n+                set(value);\n+            }\n+        }\n+    }\n+}\n+"}]}

