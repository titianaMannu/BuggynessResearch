{"sha":"0658723fdbcfeceddc983b770d78b01602a64f06","node_id":"MDY6Q29tbWl0MTU3NTk1NjowNjU4NzIzZmRiY2ZlY2VkZGM5ODNiNzcwZDc4YjAxNjAyYTY0ZjA2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-31T17:16:07Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-31T17:16:07Z"},"message":"BOOKKEEPER-434: [Hedwig CPP Client] Delay resolving default host until necessary. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1404255 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8ccb02660ec5fcce93b1e1dc30017d942961a0f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a8ccb02660ec5fcce93b1e1dc30017d942961a0f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0658723fdbcfeceddc983b770d78b01602a64f06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0658723fdbcfeceddc983b770d78b01602a64f06","html_url":"https://github.com/apache/bookkeeper/commit/0658723fdbcfeceddc983b770d78b01602a64f06","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0658723fdbcfeceddc983b770d78b01602a64f06/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"fb28dd140d1c0f6b3737f840b9d62da36713d820","url":"https://api.github.com/repos/apache/bookkeeper/commits/fb28dd140d1c0f6b3737f840b9d62da36713d820","html_url":"https://github.com/apache/bookkeeper/commit/fb28dd140d1c0f6b3737f840b9d62da36713d820"}],"stats":{"total":110,"additions":87,"deletions":23},"files":[{"sha":"4fc692579ee4cebf2304eb43337e30be8411c2a7","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0658723fdbcfeceddc983b770d78b01602a64f06/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/0658723fdbcfeceddc983b770d78b01602a64f06/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=0658723fdbcfeceddc983b770d78b01602a64f06","patch":"@@ -120,6 +120,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-427: TestConcurrentTopicAcquisition hangs every so often (ivank)\n \n+        BOOKKEEPER-434: [Hedwig CPP Client] Delay resolving default host until necessary. (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)"},{"sha":"15a6109dd9fdb289609dad25aa8ad88fa1d34653","filename":"hedwig-client/src/main/cpp/lib/clientimpl.cpp","status":"modified","additions":40,"deletions":20,"changes":60,"blob_url":"https://github.com/apache/bookkeeper/blob/0658723fdbcfeceddc983b770d78b01602a64f06/hedwig-client/src/main/cpp/lib/clientimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/0658723fdbcfeceddc983b770d78b01602a64f06/hedwig-client/src/main/cpp/lib/clientimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.cpp?ref=0658723fdbcfeceddc983b770d78b01602a64f06","patch":"@@ -119,15 +119,22 @@ void ResponseHandler::redirectRequest(const PubSubResponsePtr& response,\n \n   HostAddress h;\n   bool redirectToDefaultHost = true;\n-  if (response->has_statusmsg()) {\n-    try {\n-      h = HostAddress::fromString(response->statusmsg());\n-      redirectToDefaultHost = false;\n-    } catch (std::exception& e) {\n+  try {\n+    if (response->has_statusmsg()) {\n+      try {\n+        h = HostAddress::fromString(response->statusmsg());\n+        redirectToDefaultHost = false;\n+      } catch (std::exception& e) {\n+        h = channelManager->getDefaultHost();\n+      }\n+    } else {\n       h = channelManager->getDefaultHost();\n     }\n-  } else {\n-    h = channelManager->getDefaultHost();\n+  } catch (std::exception& e) {\n+    LOG4CXX_ERROR(logger, \"Failed to retrieve redirected host of request \" << *data\n+                          << \" : \" << e.what());\n+    data->getCallback()->operationFailed(InvalidRedirectException());\n+    return;\n   }\n   if (data->hasTriedServer(h)) {\n     LOG4CXX_ERROR(logger, \"We've been told to try request [\" << data->getTxnId() << \"] with [\" \n@@ -330,15 +337,15 @@ DuplexChannelManagerPtr DuplexChannelManager::create(const Configuration& conf)\n }\n \n DuplexChannelManager::DuplexChannelManager(const Configuration& conf)\n-  : dispatcher(new EventDispatcher(conf)), conf(conf), closed(false), counterobj() {\n+  : dispatcher(new EventDispatcher(conf)), conf(conf), closed(false), counterobj(),\n+    defaultHostAddress(conf.get(Configuration::DEFAULT_SERVER,\n+                                DEFAULT_SERVER_DEFAULT_VAL)) {\n   sslEnabled = conf.getBool(Configuration::SSL_ENABLED, DEFAULT_SSL_ENABLED); \n-  defaultHost = HostAddress::fromString(conf.get(Configuration::DEFAULT_SERVER,\n-                                                 DEFAULT_SERVER_DEFAULT_VAL));\n   if (sslEnabled) {\n     sslCtxFactory = SSLContextFactoryPtr(new SSLContextFactory(conf));\n   }\n   LOG4CXX_DEBUG(logger, \"Created DuplexChannelManager \" << this << \" with default server \"\n-                        << defaultHost);\n+                        << defaultHostAddress);\n }\n \n DuplexChannelManager::~DuplexChannelManager() {\n@@ -362,7 +369,13 @@ void DuplexChannelManager::submitOp(const PubSubDataPtr& op) {\n   switch (op->getType()) {\n   case PUBLISH:\n   case UNSUBSCRIBE:\n-    channel = getNonSubscriptionChannel(op->getTopic());  \n+    try {\n+      channel = getNonSubscriptionChannel(op->getTopic());  \n+    } catch (std::exception& e) {\n+      LOG4CXX_ERROR(logger, \"Failed to submit request \" << *op << \" : \" << e.what());\n+      op->getCallback()->operationFailed(e);\n+      return;\n+    }\n     break;\n   default:\n     TopicSubscriber ts(op->getTopic(), op->getSubscriberId());\n@@ -418,14 +431,21 @@ void DuplexChannelManager::submitOpThruChannel(const PubSubDataPtr& op,\n // Submit a pub/sub request to default server\n void DuplexChannelManager::submitOpToDefaultServer(const PubSubDataPtr& op) {\n   DuplexChannelPtr channel;\n-  switch (op->getType()) {\n-  case PUBLISH:\n-  case UNSUBSCRIBE:\n-    channel = createNonSubscriptionChannel(defaultHost);\n-    break;\n-  default:\n-    channel = createSubscriptionChannel(defaultHost);\n-    break;\n+  try {\n+    switch (op->getType()) {\n+    case PUBLISH:\n+    case UNSUBSCRIBE:\n+      channel = createNonSubscriptionChannel(getDefaultHost());\n+      break;\n+    default:\n+      channel = createSubscriptionChannel(getDefaultHost());\n+      break;\n+    }\n+  } catch (std::exception& e) {\n+    LOG4CXX_ERROR(logger, \"Failed to create channel to default host \" << defaultHostAddress\n+                          << \" for request \" << op << \" : \" << e.what());\n+    op->getCallback()->operationFailed(e);\n+    return;\n   }\n   OperationCallbackPtr connectCallback(new DefaultServerConnectCallback(shared_from_this(),\n                                                                         channel, op));"},{"sha":"fd7915ccd53bec12dc5f03e38f61f5f9d6e03bb0","filename":"hedwig-client/src/main/cpp/lib/clientimpl.h","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/0658723fdbcfeceddc983b770d78b01602a64f06/hedwig-client/src/main/cpp/lib/clientimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/0658723fdbcfeceddc983b770d78b01602a64f06/hedwig-client/src/main/cpp/lib/clientimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.h?ref=0658723fdbcfeceddc983b770d78b01602a64f06","patch":"@@ -270,7 +270,9 @@ namespace Hedwig {\n     long nextTxnId();\n \n     // return default host\n-    inline const HostAddress& getDefaultHost() { return defaultHost; }\n+    inline const HostAddress getDefaultHost() {\n+      return HostAddress::fromString(defaultHostAddress);\n+    }\n \n     // set the owner host of a topic\n     void setHostForTopic(const std::string& topic, const HostAddress& host);\n@@ -402,8 +404,7 @@ namespace Hedwig {\n     // counter used for generating transaction ids\n     ClientTxnCounter counterobj;\n \n-    // default host\n-    HostAddress defaultHost;\n+    std::string defaultHostAddress;\n \n     // non-subscription channels\n     std::tr1::unordered_map<HostAddress, DuplexChannelPtr, HostAddressHash > host2channel;"},{"sha":"46b146ab8950fd80675d9d2224a4fbefa5545cfc","filename":"hedwig-client/src/main/cpp/test/publishtest.cpp","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/0658723fdbcfeceddc983b770d78b01602a64f06/hedwig-client/src/main/cpp/test/publishtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/0658723fdbcfeceddc983b770d78b01602a64f06/hedwig-client/src/main/cpp/test/publishtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/publishtest.cpp?ref=0658723fdbcfeceddc983b770d78b01602a64f06","patch":"@@ -156,6 +156,44 @@ TEST(PublishTest, testMultipleAsyncPublish) {\n   delete client;\n   delete conf;\n }\n+\n+class UnresolvedDefaultHostCallback : public Hedwig::OperationCallback {\n+public:\n+  UnresolvedDefaultHostCallback(SimpleWaitCondition* cond) : cond(cond) {}\n+\n+  virtual void operationComplete() {\n+    cond->setSuccess(false);\n+    cond->notify();\n+  }\n+\n+  virtual void operationFailed(const std::exception& exception) {\n+    LOG4CXX_ERROR(logger, \"Failed with exception : \" << exception.what());\n+    cond->setSuccess(exception.what() == Hedwig::HostResolutionException().what());\n+    cond->notify();\n+  }\n+\n+private:\n+  SimpleWaitCondition *cond;\n+};\n+\n+TEST(PublishTest, testPublishWithUnresolvedDefaultHost) {\n+  std::string invalidHost(\"\");\n+  Hedwig::Configuration* conf = new TestServerConfiguration(invalidHost);\n+  \n+  SimpleWaitCondition* cond = new SimpleWaitCondition();\n+  Hedwig::Client* client = new Hedwig::Client(*conf);\n+  Hedwig::Publisher& pub = client->getPublisher();\n+  Hedwig::OperationCallbackPtr testcb(new UnresolvedDefaultHostCallback(cond));\n+\n+  pub.asyncPublish(\"testTopic\", \"testPublishWithUnresolvedDefaultHost\", testcb);\n+  \n+  cond->wait();\n+  ASSERT_TRUE(cond->wasSuccess());\n+  \n+  delete cond;\n+  delete client;\n+  delete conf;\n+}\n   /*  void simplePublish() {\n     LOG4CXX_DEBUG(logger, \">>> simplePublish\");\n     SimpleWaitCondition* cond = new SimpleWaitCondition();"},{"sha":"05514bc2ba43f893940abb33da016fe197c83784","filename":"hedwig-client/src/main/cpp/test/util.h","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/0658723fdbcfeceddc983b770d78b01602a64f06/hedwig-client/src/main/cpp/test/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/0658723fdbcfeceddc983b770d78b01602a64f06/hedwig-client/src/main/cpp/test/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/util.h?ref=0658723fdbcfeceddc983b770d78b01602a64f06","patch":"@@ -142,6 +142,9 @@ class TestServerConfiguration : public Hedwig::Configuration {\n   TestServerConfiguration() : address(\"localhost:4081:9877\"),\n                               syncTimeout(10000), numThreads(2) {}\n \n+  TestServerConfiguration(std::string& defaultServer) :\n+    address(defaultServer), syncTimeout(10000), numThreads(2) {}\n+\n   TestServerConfiguration(int syncTimeout, int numThreads = 2)\n     : address(\"localhost:4081:9877\"), syncTimeout(syncTimeout), numThreads(numThreads) {}\n   "}]}

