{"sha":"06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","node_id":"MDY6Q29tbWl0MTU3NTk1NjowNmY4ZjkzMDc4NmFkNWM3NzFiOGYwNmVjNWQ2ZmU0YWY1YWQzYzg5","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-28T12:25:41Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-28T12:25:41Z"},"message":"BOOKKEEPER-376: LedgerManagers should consider 'underreplication' node as a special Znode (Uma via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1378103 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06f5e7a11bc5ca40d37fd7334f780fa96eb9ec84","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/06f5e7a11bc5ca40d37fd7334f780fa96eb9ec84"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","html_url":"https://github.com/apache/bookkeeper/commit/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af","url":"https://api.github.com/repos/apache/bookkeeper/commits/cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af","html_url":"https://github.com/apache/bookkeeper/commit/cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af"}],"stats":{"total":47,"additions":21,"deletions":26},"files":[{"sha":"46283f4f379811b509f4670aadaa35cc07222ea0","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","patch":"@@ -68,6 +68,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-337: Add entry fails with MetadataVersionException when last ensemble has morethan one bookie failures (rakeshr via ivank)\n \n+        BOOKKEEPER-376: LedgerManagers should consider 'underreplication' node as a special Znode (Uma via sijie)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"2f32a3f2efba78eda6572cb3cac33389c018faa5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.meta;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n import java.util.HashSet;\n@@ -357,8 +356,10 @@ public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n      */\n     protected boolean isSpecialZnode(String znode) {\n         if (AVAILABLE_NODE.equals(znode)\n-            || COOKIES_NODE.equals(znode)\n-            || LedgerLayout.LAYOUT_ZNODE.equals(znode)) {\n+                || COOKIES_NODE.equals(znode)\n+                || LedgerLayout.LAYOUT_ZNODE.equals(znode)\n+                || ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE\n+                        .equals(znode)) {\n             return true;\n         }\n         return false;"},{"sha":"8fde64e4129308035ab5f92949cd3537aae4afd2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java?ref=06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","patch":"@@ -23,17 +23,11 @@\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooDefs.Ids;\n-import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.ZooKeeper;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.apache.commons.configuration.ConfigurationException;\n-\n-import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.bookkeeper.meta.FlatLedgerManager;\n-\n /**\n  * This class encapsulates ledger layout information that is persistently stored\n  * in zookeeper. It provides parsing and serialization methods of such information."},{"sha":"3e274a20311d1f5c7b8ae7ebad0dc9236ccdde21","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","patch":"@@ -64,7 +64,7 @@\n public class ZkLedgerUnderreplicationManager implements LedgerUnderreplicationManager {\n     static final Logger LOG = LoggerFactory.getLogger(ZkLedgerUnderreplicationManager.class);\n     static final Charset UTF8 = Charset.forName(\"UTF-8\");\n-\n+    public static final String UNDER_REPLICATION_NODE = \"underreplication\";\n     static final String LAYOUT=\"BASIC\";\n     static final int LAYOUT_VERSION=1;\n \n@@ -92,8 +92,9 @@\n \n     public ZkLedgerUnderreplicationManager(AbstractConfiguration conf, ZooKeeper zkc)\n             throws KeeperException, InterruptedException, ReplicationException.CompatibilityException {\n-        basePath = conf.getZkLedgersRootPath() + \"/underreplication\";\n-        layoutZNode = basePath + \"/LAYOUT\";\n+        basePath = conf.getZkLedgersRootPath() + '/'\n+                + ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE;\n+        layoutZNode = basePath + '/' + LedgerLayout.LAYOUT_ZNODE;\n         urLedgerPath = basePath + \"/ledgers\";\n         urLockPath = basePath + \"/locks\";\n "},{"sha":"45b4b399f76ce4f156fba5bf1fcf493e39b3e89b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -43,6 +43,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n@@ -88,7 +89,8 @@ public void setupZooKeeper() throws Exception {\n         zkc2 = zkUtil.getNewZooKeeperClient();\n         lmf1 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc1);\n         lmf2 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc2);\n-        basePath = conf.getZkLedgersRootPath() + \"/underreplication\";\n+        basePath = conf.getZkLedgersRootPath() + '/'\n+                + ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE;\n         urLedgerPath = basePath + \"/ledgers\";\n     }\n "},{"sha":"271517b9eef1bd07123d7b09b450333d8976db74","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","patch":"@@ -35,6 +35,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n@@ -50,6 +51,7 @@\n \n     private static Logger LOG = LoggerFactory\n             .getLogger(TestReplicationWorker.class);\n+    private String basePath = \"\";\n \n     public TestReplicationWorker(String ledgerManagerFactory) {\n         super(3);\n@@ -58,6 +60,9 @@ public TestReplicationWorker(String ledgerManagerFactory) {\n         // set ledger manager name\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n+        basePath = baseClientConf.getZkLedgersRootPath() + '/'\n+                + ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE\n+                + \"/ledgers\";\n     }\n \n     /**\n@@ -101,8 +106,6 @@ public void testRWShouldReplicateFragmentsToTargetBookie() throws Exception {\n \n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n-            String basePath = baseClientConf.getZkLedgersRootPath()\n-                    + \"/underreplication/ledgers\";\n \n             while (isLedgerInUnderReplication(lh.getId(), basePath)) {\n                 Thread.sleep(100);\n@@ -156,8 +159,6 @@ public void testRWShouldRetryUntilThereAreEnoughBksAvailableForReplication()\n         try {\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n-            String basePath = baseClientConf.getZkLedgersRootPath()\n-                    + \"/underreplication/ledgers\";\n             int counter = 100;\n             while (counter-- > 0) {\n                 assertTrue(\"Expecting that replication should not complete\",\n@@ -225,8 +226,6 @@ public void test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplicatio\n         try {\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n-            String basePath = baseClientConf.getZkLedgersRootPath()\n-                    + \"/underreplication/ledgers\";\n             int counter = 10;\n             while (counter-- > 0) {\n                 assertTrue(\"Expecting that replication should not complete\",\n@@ -286,8 +285,6 @@ public void testRWShouldCleanTheLedgerFromUnderReplicationIfLedgerAlreadyDeleted\n             // Also mark ledger as in UnderReplication\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n-            String basePath = baseClientConf.getZkLedgersRootPath()\n-                    + \"/underreplication/ledgers\";\n             while (isLedgerInUnderReplication(lh.getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n@@ -357,8 +354,6 @@ public void testMultipleLedgerReplicationWithReplicationWorker()\n                     replicaToKillFromFirstLedger.toString());\n             underReplicationManager.markLedgerUnderreplicated(lh2.getId(),\n                     replicaToKillFromSecondLedger.toString());\n-            String basePath = baseClientConf.getZkLedgersRootPath()\n-                    + \"/underreplication/ledgers\";\n \n             while (isLedgerInUnderReplication(lh1.getId(), basePath)) {\n                 Thread.sleep(100);\n@@ -405,7 +400,7 @@ private boolean isLedgerInUnderReplication(long id, String basePath)\n                 isMatched = true;\n                 break;\n             } else {\n-                String path = basePath + \"/\" + child;\n+                String path = basePath + '/' + child;\n                 if (zkc.getChildren(path, false).size() > 0) {\n                     isMatched = isLedgerInUnderReplication(id, path);\n                 }"}]}

