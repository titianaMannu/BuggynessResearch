{"sha":"0975f069d90748eb43fcec7622d3961b0446ea28","node_id":"MDY6Q29tbWl0MTU3NTk1NjowOTc1ZjA2OWQ5MDc0OGViNDNmY2VjNzYyMmQzOTYxYjA0NDZlYTI4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-12-22T17:35:48Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-12-22T17:35:48Z"},"message":"BOOKKEEPER-133: Hub server should update subscription state to zookeeper when losing topic or shutting down (Sijie Gou via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1222365 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be4b1c194d6d82acfe62272e905cf5b3e1a05b65","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/be4b1c194d6d82acfe62272e905cf5b3e1a05b65"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0975f069d90748eb43fcec7622d3961b0446ea28","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0975f069d90748eb43fcec7622d3961b0446ea28","html_url":"https://github.com/apache/bookkeeper/commit/0975f069d90748eb43fcec7622d3961b0446ea28","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0975f069d90748eb43fcec7622d3961b0446ea28/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"8f755ed13f193ad6491fdca1794d834f3d3d4dcc","url":"https://api.github.com/repos/apache/bookkeeper/commits/8f755ed13f193ad6491fdca1794d834f3d3d4dcc","html_url":"https://github.com/apache/bookkeeper/commit/8f755ed13f193ad6491fdca1794d834f3d3d4dcc"}],"stats":{"total":494,"additions":454,"deletions":40},"files":[{"sha":"4226a1060e4c687fd4d705b0d11a743a168b2c5f","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -20,6 +20,8 @@ Trunk (unreleased changes)\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)\n \n+        BOOKKEEPER-133: Hub server should update subscription state to zookeeper when losing topic or shutting down (Sijie Gou via ivank)\n+\n     IMPROVEMENTS:\n \n Release 4.0.0 - 2011-11-30"},{"sha":"7ac6d43ccdbb386ff1ff81abb45ab01ee5c2968b","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -26,4 +26,9 @@ public void startServingSubscription(ByteString topic, ByteString subscriberId,\n                                          DeliveryEndPoint endPoint, MessageFilter filter, boolean isHubSubscriber);\n \n     public void stopServingSubscriber(ByteString topic, ByteString subscriberId);\n+\n+    /**\n+     * Stop delivery manager\n+     */\n+    public void stop();\n }"},{"sha":"27e31043b5456080d4c4739843cd981b75d39a8a","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":15,"deletions":23,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -69,7 +69,6 @@\n import org.apache.hedwig.server.regions.HedwigHubClientFactory;\n import org.apache.hedwig.server.regions.RegionManager;\n import org.apache.hedwig.server.ssl.SslServerContextFactory;\n-import org.apache.hedwig.server.subscriptions.AbstractSubscriptionManager;\n import org.apache.hedwig.server.subscriptions.InMemorySubscriptionManager;\n import org.apache.hedwig.server.subscriptions.SubscriptionManager;\n import org.apache.hedwig.server.subscriptions.ZkSubscriptionManager;\n@@ -218,39 +217,32 @@ protected void initializeNetty(SslServerContextFactory sslFactory, Map<Operation\n     public void shutdown() {\n         // TODO: tell bk to close logs\n \n+        // Stop topic manager first since it is core of Hub server\n+        tm.stop();\n+\n+        // Stop the RegionManager.\n+        rm.stop();\n+\n+        // Stop the DeliveryManager and ReadAheadCache threads (if\n+        // applicable).\n+        dm.stop();\n+\n+        // Stop the SubscriptionManager if needed.\n+        sm.stop();\n+\n         // Shutdown the ZooKeeper and BookKeeper clients only if we are\n         // not in stand-alone mode.\n         try {\n-            if (zk != null)\n-                zk.close();\n             if (bk != null)\n                 bk.close();\n+            if (zk != null)\n+                zk.close();\n         } catch (InterruptedException e) {\n             logger.error(\"Error while closing ZooKeeper client!\");\n         } catch (BKException bke) {\n             logger.error(\"Error while closing BookKeeper client\");\n         }\n \n-        // Stop the RegionManager.\n-        rm.stop();\n-\n-        // Stop the DeliveryManager and ReadAheadCache threads (if\n-        // applicable).\n-        // TODO: It'd be cleaner and more general to modify the interfaces to\n-        // include a stop method. If the specific implementation starts threads,\n-        // then the stop method should take care of that clean up.\n-        if (pm instanceof ReadAheadCache) {\n-            ((ReadAheadCache) pm).stop();\n-        }\n-        if (dm instanceof FIFODeliveryManager) {\n-            ((FIFODeliveryManager) dm).stop();\n-        }\n-\n-        // Stop the SubscriptionManager if needed.\n-        if (sm instanceof AbstractSubscriptionManager) {\n-            ((AbstractSubscriptionManager) sm).stop();\n-        }\n-\n         // Close and release the Netty channels and resources\n         allChannels.close().awaitUninterruptibly();\n         serverChannelFactory.releaseExternalResources();"},{"sha":"714a631013fbd9059c9bd4bdb0b70e2a3a6ca911","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","status":"modified","additions":98,"deletions":6,"changes":104,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -19,9 +19,11 @@\n \n import java.util.ArrayList;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Timer;\n import java.util.TimerTask;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.atomic.AtomicInteger;\n \n@@ -43,6 +45,7 @@\n import org.apache.hedwig.server.topics.TopicOwnershipChangeListener;\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.CallbackUtils;\n+import org.apache.hedwig.util.ConcurrencyUtils;\n \n public abstract class AbstractSubscriptionManager implements SubscriptionManager, TopicOwnershipChangeListener {\n \n@@ -66,6 +69,18 @@\n     // for all subscribers to the topic.\n     private final ConcurrentHashMap<ByteString, Long> topic2MinConsumedMessagesMap = new ConcurrentHashMap<ByteString, Long>();\n \n+    Callback<Void> noopCallback = new NoopCallback<Void>();\n+\n+    class NoopCallback<T> implements Callback<T> {\n+        @Override\n+        public void operationFailed(Object ctx, PubSubException exception) {\n+            logger.warn(\"Exception found in AbstractSubscriptionManager : \", exception);\n+        }\n+\n+        public void operationFinished(Object ctx, T resultOfOperation) {\n+        };\n+    }\n+\n     public AbstractSubscriptionManager(ServerConfiguration cfg, TopicManager tm, PersistenceManager pm,\n                                        ScheduledExecutorService scheduler) {\n         this.cfg = cfg;\n@@ -212,17 +227,73 @@ public void acquiredTopic(final ByteString topic, final Callback<Void> callback,\n         queuer.pushAndMaybeRun(topic, new AcquireOp(topic, callback, ctx));\n     }\n \n+    class ReleaseOp extends TopicOpQueuer.AsynchronousOp<Void> {\n+\n+        public ReleaseOp(final ByteString topic, final Callback<Void> cb, Object ctx) {\n+            queuer.super(topic, cb, ctx);\n+        }\n+\n+        @Override\n+        public void run() {\n+            Callback<Void> finalCb = new Callback<Void>() {\n+                @Override\n+                public void operationFinished(Object ctx, Void resultOfOperation) {\n+                    finish();\n+                }\n+\n+                @Override\n+                public void operationFailed(Object ctx,\n+                        PubSubException exception) {\n+                    logger.warn(\"Error when releasing topic : \" + topic.toStringUtf8(), exception);\n+                    finish();\n+                }\n+\n+                private void finish() {\n+                    topic2LocalCounts.remove(topic);\n+                    // Since we decrement local count when some of remote subscriptions failed,\n+                    // while we don't unsubscribe those succeed subscriptions. so we can't depends\n+                    // on local count, just try to notify unsubscribe.\n+                    notifyUnsubcribe(topic);\n+                    cb.operationFinished(ctx, null);\n+                }\n+            };\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Try to update subscription states when losing topic \" + topic.toStringUtf8());\n+            }\n+            updateSubscriptionStates(topic, finalCb, ctx, true);\n+        }\n+    }\n+\n+    void updateSubscriptionStates(ByteString topic, Callback<Void> finalCb, Object ctx, boolean removeTopic) {\n+        // Try to update subscription states of a specified topic\n+        Map<ByteString, InMemorySubscriptionState> states;\n+        if (removeTopic) {\n+            states = top2sub2seq.remove(topic);\n+        } else {\n+            states = top2sub2seq.get(topic);\n+        }\n+        if (null == states) {\n+            finalCb.operationFinished(ctx, null);\n+        } else {\n+            Callback<Void> mcb = CallbackUtils.multiCallback(states.size(), finalCb, ctx);\n+            for (Entry<ByteString, InMemorySubscriptionState> entry : states.entrySet()) {\n+                InMemorySubscriptionState memState = entry.getValue();\n+                if (memState.setLastConsumeSeqIdImmediately()) {\n+                    updateSubscriptionState(topic, entry.getKey(), memState.getSubscriptionState(),\n+                                            mcb, ctx);\n+                } else {\n+                    mcb.operationFinished(ctx, null);\n+                }\n+            }\n+        }\n+    }\n+\n     /**\n      * Remove the local mapping.\n      */\n     @Override\n     public void lostTopic(ByteString topic) {\n-        top2sub2seq.remove(topic);\n-        topic2LocalCounts.remove(topic);\n-        // Since we decrement local count when some of remote subscriptions failed,\n-        // while we don't unsubscribe those succeed subscriptions. so we can't depends\n-        // on local count, just try to notify unsubscribe.\n-        notifyUnsubcribe(topic);\n+        queuer.pushAndMaybeRun(topic, new ReleaseOp(topic, noopCallback, null));\n     }\n \n     private void notifyUnsubcribe(ByteString topic) {\n@@ -464,6 +535,27 @@ public void addListener(SubscriptionEventListener listener) {\n      */\n     public void stop() {\n         timer.cancel();\n+        try {\n+            final LinkedBlockingQueue<Boolean> queue = new LinkedBlockingQueue<Boolean>();\n+            // update dirty subscriptions\n+            for (ByteString topic : top2sub2seq.keySet()) {\n+                Callback<Void> finalCb = new Callback<Void>() {\n+                    @Override\n+                    public void operationFinished(Object ctx, Void resultOfOperation) {\n+                        ConcurrencyUtils.put(queue, true);\n+                    }\n+                    @Override\n+                    public void operationFailed(Object ctx,\n+                            PubSubException exception) {\n+                        ConcurrencyUtils.put(queue, false);\n+                    }\n+                };\n+                updateSubscriptionStates(topic, finalCb, null, false);\n+                queue.take();\n+            }\n+        } catch (InterruptedException ie) {\n+            logger.warn(\"Error during updating subscription states : \", ie);\n+        }\n     }\n \n     protected abstract void createSubscriptionState(final ByteString topic, ByteString subscriberId,"},{"sha":"b04863de58b7a2f225620fdde68ff2139208eb81","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -51,12 +51,33 @@ public MessageSeqId getLastConsumeSeqId() {\n      *         otherwise\n      */\n     public boolean setLastConsumeSeqId(MessageSeqId lastConsumeSeqId, int consumeInterval) {\n-        this.lastConsumeSeqId = lastConsumeSeqId;\n+        long interval = lastConsumeSeqId.getLocalComponent() - subscriptionState.getMsgId().getLocalComponent();\n+        if (interval <= 0) {\n+            return false;\n+        }\n \n-        if (lastConsumeSeqId.getLocalComponent() - subscriptionState.getMsgId().getLocalComponent() < consumeInterval) {\n+        // set consume seq id when it is larger\n+        this.lastConsumeSeqId = lastConsumeSeqId;\n+        if (interval < consumeInterval) {\n             return false;\n         }\n \n+        // subscription state will be updated, marked it as clean\n+        subscriptionState = SubscriptionState.newBuilder(subscriptionState).setMsgId(lastConsumeSeqId).build();\n+        return true;\n+    }\n+\n+    /**\n+     * Set lastConsumeSeqId Immediately\n+     *\n+     * @return true if the resulting structure needs to be persisted, false otherwise\n+     */\n+    public boolean setLastConsumeSeqIdImmediately() {\n+        long interval = lastConsumeSeqId.getLocalComponent() - subscriptionState.getMsgId().getLocalComponent();\n+        // no need to set\n+        if (interval <= 0) {\n+            return false;\n+        }\n         subscriptionState = SubscriptionState.newBuilder(subscriptionState).setMsgId(lastConsumeSeqId).build();\n         return true;\n     }"},{"sha":"33271a96f3206bc3793fc6b566869787df55ff52","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -101,4 +101,8 @@ public void setConsumeSeqIdForSubscriber(ByteString topic, ByteString subscriber\n      */\n     public void addListener(SubscriptionEventListener listener);\n \n+    /**\n+     * Stop Subscription Manager\n+     */\n+    public void stop();\n }"},{"sha":"9353b7f2cdbd41639228232940aa1508f6094f9b","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -194,4 +194,8 @@ protected abstract void realGetOwner(ByteString topic, boolean shouldClaim,\n      */\n     protected abstract void postReleaseCleanup(ByteString topic, Callback<Void> cb, Object ctx);\n \n+    @Override\n+    public void stop() {\n+        // do nothing now\n+    }\n }"},{"sha":"b4254488c6051fc096a2022f8af020aecc724d39","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -72,4 +72,9 @@ public void getOwner(ByteString topic, boolean shouldClaim,\n      */\n     public void releaseTopic(ByteString topic, Callback<Void> cb, Object ctx);\n \n+    /**\n+     * Stop topic manager\n+     */\n+    public void stop();\n+\n }"},{"sha":"24fcb788ea1f243e93c63d3add30dd573f55e75c","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -49,4 +49,9 @@ protected void postReleaseCleanup(ByteString topic, Callback<Void> cb, Object ct\n         // No cleanup to do\n         cb.operationFinished(ctx, null);\n     }\n+\n+    @Override\n+    public void stop() {\n+        // do nothing\n+    }\n }"},{"sha":"5fbcbc4b75fe6e6c76cd98758a3ac4f4f5203795","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -170,6 +170,10 @@ public void safeProcessResult(int rc, String path, Object ctx) {\n         }, null);\n     }\n \n+    void unregisterWithZookeeper() throws InterruptedException, KeeperException {\n+        zk.delete(ephemeralNodePath, -1);\n+    }\n+\n     String hubPath(ByteString topic) {\n         return cfg.getZkTopicPath(new StringBuilder(), topic).append(\"/hub\").toString();\n     }\n@@ -426,4 +430,17 @@ public void safeProcessResult(int rc, String path, Object ctx) {\n         }, ctx);\n     }\n \n+    @Override\n+    public void stop() {\n+        // we just unregister it with zookeeper to make it unavailable from hub servers list\n+        try {\n+            unregisterWithZookeeper();\n+        } catch (InterruptedException e) {\n+            logger.error(\"Error unregistering hub server :\", e);\n+        } catch (KeeperException e) {\n+            logger.error(\"Error unregistering hub server :\", e);\n+        }\n+        super.stop();\n+    }\n+\n }"},{"sha":"6d91167bc9c5afed51c4648550b1110aa5e1d2b1","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -54,6 +54,14 @@\n     protected int initialSSLServerPort = 9876;\n     protected List<PubSubServer> serversList;\n \n+    public HedwigHubTestBase() {\n+        this(1);\n+    }\n+\n+    protected HedwigHubTestBase(int numServers) {\n+        this.numServers = numServers;\n+    }\n+\n     // Default child class of the ServerConfiguration to be used here.\n     // Extending classes can define their own (possibly extending from this) and\n     // override the getServerConfiguration method below to return their own\n@@ -105,28 +113,36 @@ protected ServerConfiguration getServerConfiguration(int serverPort, int sslServ\n         return new HubServerConfiguration(serverPort, sslServerPort);\n     }\n \n+    protected void startHubServers() throws Exception {\n+        // Now create the PubSubServer Hubs\n+        serversList = new LinkedList<PubSubServer>();\n+        for (int i = 0; i < numServers; i++) {\n+            serversList.add(new PubSubServer(getServerConfiguration(initialServerPort + i, initialSSLServerPort + i)));\n+        }\n+    }\n+    protected void stopHubServers() throws Exception {\n+        // Shutdown all of the PubSubServers\n+        for (PubSubServer server : serversList) {\n+            server.shutdown();\n+        }\n+        serversList.clear();\n+    }\n+\n     @Override\n     @Before\n     public void setUp() throws Exception {\n         logger.info(\"STARTING \" + getName());\n         bktb = new BookKeeperTestBase(numBookies);\n         bktb.setUp();\n-        // Now create the PubSubServer Hubs\n-        serversList = new LinkedList<PubSubServer>();\n-        for (int i = 0; i < numServers; i++) {\n-            serversList.add(new PubSubServer(getServerConfiguration(initialServerPort + i, initialSSLServerPort + i)));\n-        }\n+        startHubServers();\n         logger.info(\"HedwigHub test setup finished\");\n     }\n \n     @Override\n     @After\n     public void tearDown() throws Exception {\n         logger.info(\"tearDown starting\");\n-        // Shutdown all of the PubSubServers\n-        for (PubSubServer server : serversList) {\n-            server.shutdown();\n-        }\n+        stopHubServers();\n         bktb.tearDown();\n         logger.info(\"FINISHED \" + getName());\n     }"},{"sha":"fdc308d61648cb4102cc1570563632afbc912015","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -62,4 +62,9 @@ public void startServingSubscription(ByteString topic, ByteString subscriberId,\n     public void stopServingSubscriber(ByteString topic, ByteString subscriberId) {\n         lastRequest.add(new TopicSubscriber(topic, subscriberId));\n     }\n+\n+    @Override\n+    public void stop() {\n+        // do nothing now\n+    }\n }"},{"sha":"d21eef3e45f106f2df3263e2fcbcadc2223d85e1","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","status":"added","additions":246,"deletions":0,"changes":246,"blob_url":"https://github.com/apache/bookkeeper/blob/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","raw_url":"https://github.com/apache/bookkeeper/raw/0975f069d90748eb43fcec7622d3961b0446ea28/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java?ref=0975f069d90748eb43fcec7622d3961b0446ea28","patch":"@@ -0,0 +1,246 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server.subscriptions;\n+\n+import java.util.concurrent.SynchronousQueue;\n+\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.MessageHandler;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.server.HedwigHubTestBase;\n+import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.util.Callback;\n+import org.apache.hedwig.util.ConcurrencyUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.protobuf.ByteString;\n+\n+public class TestUpdateSubscriptionState extends HedwigHubTestBase {\n+\n+    private static final int RETENTION_SECS_VALUE = 100;\n+\n+    // Client side variables\n+    protected HedwigClient client;\n+    protected Publisher publisher;\n+    protected Subscriber subscriber;\n+\n+    // SynchronousQueues to verify async calls\n+    private final SynchronousQueue<Boolean> queue = new SynchronousQueue<Boolean>();\n+\n+    // Test implementation of subscriber's message handler\n+    class OrderCheckingMessageHandler implements MessageHandler {\n+\n+        ByteString topic;\n+        ByteString subscriberId;\n+        int startMsgId;\n+        int numMsgs;\n+        int endMsgId;\n+        boolean inOrder = true;\n+\n+        OrderCheckingMessageHandler(ByteString topic, ByteString subscriberId,\n+                                    int startMsgId, int numMsgs) {\n+            this.topic = topic;\n+            this.subscriberId = subscriberId;\n+            this.startMsgId = startMsgId;\n+            this.numMsgs = numMsgs;\n+            this.endMsgId = startMsgId + numMsgs - 1;\n+        }\n+\n+        @Override\n+        public void deliver(ByteString thisTopic, ByteString thisSubscriberId,\n+                            Message msg, Callback<Void> callback, Object context) {\n+            if (!topic.equals(thisTopic) ||\n+                !subscriberId.equals(thisSubscriberId)) {\n+                return;\n+            }\n+            // check order\n+            int msgId = Integer.parseInt(msg.getBody().toStringUtf8());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Received message : \" + msgId);\n+            }\n+\n+            if (inOrder) {\n+                if (startMsgId != msgId) {\n+                    logger.error(\"Expected message \" + startMsgId + \", but received message \" + msgId);\n+                    inOrder = false;\n+                } else {\n+                    ++startMsgId;\n+                }\n+            }\n+            callback.operationFinished(context, null);\n+            if (msgId == endMsgId) {\n+                new Thread(new Runnable() {\n+                    @Override\n+                    public void run() {\n+                        if (logger.isDebugEnabled()) {\n+                            logger.debug(\"Deliver finished!\");\n+                        }\n+                        ConcurrencyUtils.put(queue, true);\n+                    }\n+                }).start();\n+            }\n+        }\n+\n+        public boolean isInOrder() {\n+            return inOrder;\n+        }\n+    }\n+\n+    public TestUpdateSubscriptionState() {\n+        super(1);\n+    }\n+\n+    protected class NewHubServerConfiguration extends HubServerConfiguration {\n+\n+        public NewHubServerConfiguration(int serverPort, int sslServerPort) {\n+            super(serverPort, sslServerPort);\n+        }\n+\n+        @Override\n+        public int getRetentionSecs() {\n+            return RETENTION_SECS_VALUE;\n+        }\n+\n+    }\n+\n+    @Override\n+    protected ServerConfiguration getServerConfiguration(int serverPort, int sslServerPort) {\n+        return new NewHubServerConfiguration(serverPort, sslServerPort);\n+    }\n+\n+    protected class TestClientConfiguration extends ClientConfiguration {\n+        @Override\n+        public boolean isAutoSendConsumeMessageEnabled() {\n+            return true;\n+        }\n+    }\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        client = new HedwigClient(new TestClientConfiguration());\n+        publisher = client.getPublisher();\n+        subscriber = client.getSubscriber();\n+    }\n+\n+    @Override\n+    @After\n+    public void tearDown() throws Exception {\n+        client.close();\n+        super.tearDown();\n+    }\n+\n+    @Test\n+    public void testConsumeWhenTopicRelease() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestConsumeWhenTopicRelease\");\n+        ByteString subId = ByteString.copyFromUtf8(\"mysub\");\n+\n+        int startMsgId = 0;\n+        int numMsgs = 10;\n+        // subscriber in client\n+        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        // start delivery\n+        OrderCheckingMessageHandler ocm = new OrderCheckingMessageHandler(\n+                topic, subId, startMsgId, numMsgs);\n+        subscriber.startDelivery(topic, subId, ocm);\n+        for (int i=0; i<numMsgs; i++) {\n+            Message msg = Message.newBuilder().setBody(\n+                    ByteString.copyFromUtf8(Integer.toString(startMsgId + i))).build();\n+            publisher.publish(topic, msg);\n+        }\n+        logger.info(\"Publish finished.\");\n+        queue.take();\n+        logger.info(\"Deliver finished.\");\n+        // check messages received in order\n+        assertTrue(ocm.isInOrder());\n+\n+        // wait for retention secs\n+        Thread.sleep((RETENTION_SECS_VALUE + 2) * 1000);\n+\n+        subscriber.stopDelivery(topic, subId);\n+        subscriber.closeSubscription(topic, subId);\n+\n+        startMsgId = 20;\n+        // reconnect it again\n+        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        ocm = new OrderCheckingMessageHandler(topic, subId, startMsgId, numMsgs);\n+        subscriber.startDelivery(topic, subId, ocm);\n+        for (int i=0; i<numMsgs; i++) {\n+            Message msg = Message.newBuilder().setBody(\n+                    ByteString.copyFromUtf8(Integer.toString(startMsgId + i))).build();\n+            publisher.publish(topic, msg);\n+        }\n+        queue.take();\n+        // check messages received in order\n+        assertTrue(ocm.isInOrder());\n+    }\n+\n+    @Test\n+    public void testConsumeWhenHubShutdown() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestConsumeWhenHubShutdown\");\n+        ByteString subId = ByteString.copyFromUtf8(\"mysub\");\n+\n+        int startMsgId = 0;\n+        int numMsgs = 10;\n+        // subscriber in client\n+        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        // start delivery\n+        OrderCheckingMessageHandler ocm = new OrderCheckingMessageHandler(\n+                topic, subId, startMsgId, numMsgs);\n+        subscriber.startDelivery(topic, subId, ocm);\n+        for (int i=0; i<numMsgs; i++) {\n+            Message msg = Message.newBuilder().setBody(\n+                    ByteString.copyFromUtf8(Integer.toString(startMsgId + i))).build();\n+            publisher.publish(topic, msg);\n+        }\n+        logger.info(\"Publish finished.\");\n+        queue.take();\n+        logger.info(\"Deliver finished.\");\n+        // check messages received in order\n+        assertTrue(ocm.isInOrder());\n+        // make sure consume request sent to hub server before shut down\n+        Thread.sleep(2000);\n+        subscriber.stopDelivery(topic, subId);\n+        subscriber.closeSubscription(topic, subId);\n+\n+        stopHubServers();\n+        Thread.sleep(1000);\n+        startHubServers();\n+\n+        startMsgId = 20;\n+        // reconnect it again\n+        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        ocm = new OrderCheckingMessageHandler(topic, subId, startMsgId, numMsgs);\n+        subscriber.startDelivery(topic, subId, ocm);\n+        for (int i=0; i<numMsgs; i++) {\n+            Message msg = Message.newBuilder().setBody(\n+                    ByteString.copyFromUtf8(Integer.toString(startMsgId + i))).build();\n+            publisher.publish(topic, msg);\n+        }\n+        queue.take();\n+        // check messages received in order\n+        assertTrue(ocm.isInOrder());\n+    }\n+}"}]}

