{"sha":"09d831847120bc316fadfaaf4b881670b6445e64","node_id":"MDY6Q29tbWl0MTU3NTk1NjowOWQ4MzE4NDcxMjBiYzMxNmZhZGZhYWY0Yjg4MTY3MGI2NDQ1ZTY0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-21T13:54:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-21T13:54:44Z"},"message":"BOOKKEEPER-632: AutoRecovery should consider read only bookies (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1516162 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0cabae669cfd7a6713886349423e53f3ffeaf310","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0cabae669cfd7a6713886349423e53f3ffeaf310"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/09d831847120bc316fadfaaf4b881670b6445e64","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/09d831847120bc316fadfaaf4b881670b6445e64","html_url":"https://github.com/apache/bookkeeper/commit/09d831847120bc316fadfaaf4b881670b6445e64","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/09d831847120bc316fadfaaf4b881670b6445e64/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f2f583a2c288187a0b6249a4a0e04262b185c94","url":"https://api.github.com/repos/apache/bookkeeper/commits/7f2f583a2c288187a0b6249a4a0e04262b185c94","html_url":"https://github.com/apache/bookkeeper/commit/7f2f583a2c288187a0b6249a4a0e04262b185c94"}],"stats":{"total":292,"additions":254,"deletions":38},"files":[{"sha":"5d1e3f26167a3869e42e8d7f0fbe5433f92c1de4","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -64,6 +64,8 @@ Release 4.2.2 - Unreleased\n \n         BOOKKEEPER-660: Logs too noisy on NIOServerFactory when client drops a connection (mmerli via ivank)\n \n+        BOOKKEEPER-632: AutoRecovery should consider read only bookies (vinay via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank)"},{"sha":"b971658e9a591b82e39017caddf5fc68d9a34ff2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -22,6 +22,7 @@\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n+import java.util.Collection;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.HashSet;\n@@ -156,6 +157,37 @@ public void close() throws InterruptedException, BKException {\n         zk.close();\n     }\n \n+    /**\n+     * Get a list of the available bookies.\n+     *\n+     * @return a collection of bookie addresses\n+     */\n+    public Collection<InetSocketAddress> getAvailableBookies()\n+            throws BKException {\n+        return bkc.bookieWatcher.getBookies();\n+    }\n+\n+    /**\n+     * Get a list of readonly bookies\n+     *\n+     * @return a collection of bookie addresses\n+     */\n+    public Collection<InetSocketAddress> getReadOnlyBookies() {\n+        return bkc.bookieWatcher.getReadOnlyBookies();\n+    }\n+\n+    /**\n+     * Notify when the available list of bookies changes.\n+     * This is a one-shot notification. To receive subsequent notifications\n+     * the listener must be registered again.\n+     *\n+     * @param listener the listener to notify\n+     */\n+    public void notifyBookiesChanged(final BookiesListener listener)\n+            throws BKException {\n+        bkc.bookieWatcher.notifyBookiesChanged(listener);\n+    }\n+\n     /**\n      * Open a ledger as an administrator. This means that no digest password\n      * checks are done. Otherwise, the call is identical to BookKeeper#asyncOpenLedger"},{"sha":"2477fe86c22ed5078b14d1e677847cf8a251958c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -22,6 +22,7 @@\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -44,6 +45,7 @@\n import org.apache.zookeeper.AsyncCallback.ChildrenCallback;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.KeeperException.NodeExistsException;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n /**\n@@ -84,6 +86,46 @@ public BookieWatcher(ClientConfiguration conf,\n         readOnlyBookieWatcher = new ReadOnlyBookieWatcher(conf, bk);\n     }\n \n+    void notifyBookiesChanged(final BookiesListener listener) throws BKException {\n+        try {\n+            bk.getZkHandle().getChildren(this.bookieRegistrationPath,\n+                    new Watcher() {\n+                        public void process(WatchedEvent event) {\n+                            // listen children changed event from ZooKeeper\n+                            if (event.getType() == EventType.NodeChildrenChanged) {\n+                                listener.availableBookiesChanged();\n+                            }\n+                        }\n+                    });\n+        } catch (KeeperException ke) {\n+            logger.error(\"Error registering watcher with zookeeper\", ke);\n+            throw new BKException.ZKException();\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            logger.error(\"Interrupted registering watcher with zookeeper\", ie);\n+            throw new BKException.BKInterruptedException();\n+        }\n+    }\n+\n+    public Collection<InetSocketAddress> getBookies() throws BKException {\n+        try {\n+            List<String> children = bk.getZkHandle().getChildren(this.bookieRegistrationPath, false);\n+            children.remove(BookKeeperConstants.READONLY);\n+            return convertToBookieAddresses(children);\n+        } catch (KeeperException ke) {\n+            logger.error(\"Failed to get bookie list : \", ke);\n+            throw new BKException.ZKException();\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            logger.error(\"Interrupted reading bookie list\", ie);\n+            throw new BKException.BKInterruptedException();\n+        }\n+    }\n+\n+    Collection<InetSocketAddress> getReadOnlyBookies() {\n+        return new HashSet<InetSocketAddress>(readOnlyBookieWatcher.getReadOnlyBookies());\n+    }\n+\n     public void readBookies() {\n         readBookies(this);\n     }"},{"sha":"2f125fb166cae2717c404a90f16d12842e2b7138","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -0,0 +1,27 @@\n+package org.apache.bookkeeper.client;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+/**\n+ * Listener for the the available bookies changes.\n+ */\n+public interface BookiesListener {\n+    void availableBookiesChanged();\n+}"},{"sha":"62ffb771ae0262b6002936d0952528e4ee7a2e3d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":33,"deletions":16,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -44,6 +44,7 @@\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerChecker;\n import org.apache.bookkeeper.client.LedgerFragment;\n+import org.apache.bookkeeper.client.BookiesListener;\n import org.apache.bookkeeper.util.StringUtils;\n \n import org.apache.bookkeeper.util.ZkUtils;\n@@ -66,7 +67,6 @@\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.AsyncCallback;\n-import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -78,10 +78,11 @@\n  * re-replication activities by keeping all the corresponding ledgers of the\n  * failed bookie as underreplicated znode in zk.\n  */\n-public class Auditor implements Watcher {\n+public class Auditor implements BookiesListener {\n     private static final Logger LOG = LoggerFactory.getLogger(Auditor.class);\n     private final ServerConfiguration conf;\n-    private final ZooKeeper zkc;\n+    private BookKeeper bkc;\n+    private BookKeeperAdmin admin;\n     private BookieLedgerIndexer bookieLedgerIndexer;\n     private LedgerManager ledgerManager;\n     private LedgerUnderreplicationManager ledgerUnderreplicationManager;\n@@ -91,7 +92,6 @@\n     public Auditor(final String bookieIdentifier, ServerConfiguration conf,\n                    ZooKeeper zkc) throws UnavailableException {\n         this.conf = conf;\n-        this.zkc = zkc;\n         initialize(conf, zkc);\n \n         executor = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n@@ -115,6 +115,9 @@ private void initialize(ServerConfiguration conf, ZooKeeper zkc)\n             this.ledgerUnderreplicationManager = ledgerManagerFactory\n                     .newLedgerUnderreplicationManager();\n \n+            this.bkc = new BookKeeper(new ClientConfiguration(conf), zkc);\n+            this.admin = new BookKeeperAdmin(bkc);\n+\n         } catch (CompatibilityException ce) {\n             throw new UnavailableException(\n                     \"CompatibilityException while initializing Auditor\", ce);\n@@ -173,6 +176,8 @@ public void run() {\n                                 Map<String, Set<Long>> ledgerDetails = generateBookie2LedgersIndex();\n                                 handleLostBookies(lostBookies, ledgerDetails);\n                             }\n+                        } catch (BKException bke) {\n+                            LOG.error(\"Exception getting bookie list\", bke);\n                         } catch (KeeperException ke) {\n                             LOG.error(\"Exception while watching available bookies\", ke);\n                         } catch (InterruptedException ie) {\n@@ -237,6 +242,9 @@ public void run() {\n                         try {\n                             knownBookies = getAvailableBookies();\n                             auditingBookies(knownBookies);\n+                        } catch (BKException bke) {\n+                            LOG.error(\"Exception getting bookie list\", bke);\n+                            submitShutdownTask();\n                         } catch (KeeperException ke) {\n                             LOG.error(\"Exception while watching available bookies\", ke);\n                             submitShutdownTask();\n@@ -261,10 +269,21 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n             cb.await();\n         }\n     }\n-    \n-    private List<String> getAvailableBookies() throws KeeperException,\n-            InterruptedException {\n-        return zkc.getChildren(conf.getZkAvailableBookiesPath(), this);\n+\n+    private List<String> getAvailableBookies() throws BKException {\n+        // Get the available bookies, also watch for further changes\n+        // Watching on only available bookies is sufficient, as changes in readonly bookies also changes in available\n+        // bookies\n+        admin.notifyBookiesChanged(this);\n+        Collection<InetSocketAddress> availableBkAddresses = admin.getAvailableBookies();\n+        Collection<InetSocketAddress> readOnlyBkAddresses = admin.getReadOnlyBookies();\n+        availableBkAddresses.addAll(readOnlyBkAddresses);\n+\n+        List<String> availableBookies = new ArrayList<String>();\n+        for (InetSocketAddress addr : availableBkAddresses) {\n+            availableBookies.add(StringUtils.addrToString(addr));\n+        }\n+        return availableBookies;\n     }\n \n     private void auditingBookies(List<String> availableBookies)\n@@ -469,14 +488,8 @@ public void processResult(int rc, String s, Object obj) {\n     }\n \n     @Override\n-    public void process(WatchedEvent event) {\n-        // listen children changed event from ZooKeeper\n-        if (event.getState() == KeeperState.Disconnected\n-                || event.getState() == KeeperState.Expired) {\n-            submitShutdownTask();\n-        } else if (event.getType() == EventType.NodeChildrenChanged) {\n-            submitAuditTask();\n-        }\n+    public void availableBookiesChanged() {\n+        submitAuditTask();\n     }\n \n     /**\n@@ -491,9 +504,13 @@ public void shutdown() {\n                 LOG.warn(\"Executor not shutting down, interrupting\");\n                 executor.shutdownNow();\n             }\n+            admin.close();\n+            bkc.close();\n         } catch (InterruptedException ie) {\n             Thread.currentThread().interrupt();\n             LOG.warn(\"Interrupted while shutting down auditor bookie\", ie);\n+        } catch (BKException bke) {\n+            LOG.warn(\"Exception while shutting down auditor bookie\", bke);\n         }\n     }\n "},{"sha":"55c57af95c1cb671a88a5383acaee4a0d2b55062","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -163,8 +163,7 @@ private void createElectorPath() throws UnavailableException {\n     private class ElectionWatcher implements Watcher {\n         @Override\n         public void process(WatchedEvent event) {\n-            if (event.getState() == KeeperState.Disconnected\n-                || event.getState() == KeeperState.Expired) {\n+            if (event.getState() == KeeperState.Expired) {\n                 LOG.error(\"Lost ZK connection, shutting down\");\n                 submitShutdownTask();\n             } else if (event.getType() == EventType.NodeDeleted) {"},{"sha":"43b4f6358d8ea474018d19e2f4f4eb7d327678c8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -53,7 +53,7 @@\n             .getLogger(AutoRecoveryMain.class);\n \n     private ServerConfiguration conf;\n-    private ZooKeeper zk;\n+    ZooKeeper zk;\n     AuditorElector auditorElector;\n     ReplicationWorker replicationWorker;\n     private AutoRecoveryDeathWatcher deathWatcher;"},{"sha":"1ac4be8e28c6130d1a69c250078dc52639a74503","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -189,6 +189,9 @@ private void rereplicate() throws InterruptedException, BKException,\n             } catch (BKException.BKLedgerRecoveryException e) {\n                 LOG.warn(\"BKLedgerRecoveryException \"\n                         + \"while replicating the fragment\", e);\n+                if (admin.getReadOnlyBookies().contains(targetBookie)) {\n+                    throw new BKException.BKWriteOnReadOnlyBookieException();\n+                }\n             }\n         }\n "},{"sha":"89294bd40a6db7ba02c667895bdd1ef9a3866d57","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"modified","additions":0,"deletions":19,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -207,25 +207,6 @@ public void testRestartAuditorBookieAfterCrashing() throws Exception {\n                 .getPort());\n     }\n \n-    /**\n-     * Test that, if an auditor looses its ZK connection/session\n-     * it will shutdown.\n-     */\n-    @Test(timeout=60000)\n-    public void testAuditorZKSessionLoss() throws Exception {\n-        stopZKCluster();\n-        for (AuditorElector e : auditorElectors.values()) {\n-            for (int i = 0; i < 10; i++) { // give it 10 seconds to shutdown\n-                if (!e.isRunning()) {\n-                    break;\n-                }\n-\n-                Thread.sleep(1000);\n-            }\n-            assertFalse(\"AuditorElector should have shutdown\", e.isRunning());\n-        }\n-    }\n-\n     private void startAuditorElector(String addr) throws Exception {\n         ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n         ZooKeeper zk = ZkUtils.createConnectedZookeeperClient("},{"sha":"c15759cd5d25d5956b8d772b2504a8686ef8ab8d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -300,6 +300,29 @@ public void testDuplicateEnDisableAutoRecovery() throws Exception {\n         }\n     }\n \n+    /**\n+     * Test Auditor should consider Readonly bookie as available bookie. Should not publish ur ledgers for\n+     * readonly bookies.\n+     */\n+    @Test(timeout = 20000)\n+    public void testReadOnlyBookieExclusionFromURLedgersCheck() throws Exception {\n+        LedgerHandle lh = createAndAddEntriesToLedger();\n+        ledgerList.add(lh.getId());\n+        LOG.debug(\"Created following ledgers : \" + ledgerList);\n+\n+        int count = ledgerList.size();\n+        final CountDownLatch underReplicaLatch = registerUrLedgerWatcher(count);\n+\n+        ServerConfiguration bookieConf = bsConfs.get(2);\n+        BookieServer bk = bs.get(2);\n+        bookieConf.setReadOnlyModeEnabled(true);\n+        bk.getBookie().transitionToReadOnlyMode();\n+\n+        // grace period for publishing the bk-ledger\n+        LOG.debug(\"Waiting for Auditor to finish ledger check.\");\n+        assertFalse(\"latch should not have completed\", underReplicaLatch.await(5, TimeUnit.SECONDS));\n+    }\n+\n     private CountDownLatch registerUrLedgerWatcher(int count)\n             throws KeeperException, InterruptedException {\n         final CountDownLatch underReplicaLatch = new CountDownLatch(count);"},{"sha":"d71e49571ac045a2f8aea09115c9ca2ebeaddf56","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -20,8 +20,11 @@\n  */\n package org.apache.bookkeeper.replication;\n \n+import java.util.concurrent.CountDownLatch;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n \n+import org.junit.Test;\n+\n /*\n  * Test the AuditorPeer\n  */\n@@ -34,6 +37,7 @@ public AutoRecoveryMainTest() {\n     /*\n      * test the startup of the auditorElector and RW.\n      */\n+    @Test(timeout=60000)\n     public void testStartup() throws Exception {\n         AutoRecoveryMain main = new AutoRecoveryMain(bsConfs.get(0));\n         try {\n@@ -51,6 +55,7 @@ public void testStartup() throws Exception {\n     /*\n      * Test the shutdown of all daemons\n      */\n+    @Test(timeout=60000)\n     public void testShutdown() throws Exception {\n         AutoRecoveryMain main = new AutoRecoveryMain(bsConfs.get(0));\n         main.start();\n@@ -66,4 +71,38 @@ public void testShutdown() throws Exception {\n         assertFalse(\"Replication worker should not be running\",\n                 main.replicationWorker.isRunning());\n     }\n+\n+    /**\n+     * Test that, if an autorecovery looses its ZK connection/session\n+     * it will shutdown.\n+     */\n+    @Test(timeout=60000)\n+    public void testAutoRecoverySessionLoss() throws Exception {\n+        AutoRecoveryMain main1 = new AutoRecoveryMain(bsConfs.get(0));\n+        AutoRecoveryMain main2 = new AutoRecoveryMain(bsConfs.get(1));\n+        main1.start();\n+        main2.start();\n+        Thread.sleep(500);\n+        assertTrue(\"AuditorElectors should be running\",\n+                main1.auditorElector.isRunning() && main2.auditorElector.isRunning());\n+        assertTrue(\"Replication workers should be running\",\n+                main1.replicationWorker.isRunning() && main2.replicationWorker.isRunning());\n+\n+        zkUtil.expireSession(main1.zk);\n+        zkUtil.expireSession(main2.zk);\n+\n+        for (int i = 0; i < 10; i++) { // give it 10 seconds to shutdown\n+            if (!main1.auditorElector.isRunning()\n+                && !main2.auditorElector.isRunning()\n+                && !main1.replicationWorker.isRunning()\n+                && !main2.replicationWorker.isRunning()) {\n+                break;\n+            }\n+            Thread.sleep(1000);\n+        }\n+        assertFalse(\"Elector1 should have shutdown\", main1.auditorElector.isRunning());\n+        assertFalse(\"Elector2 should have shutdown\", main2.auditorElector.isRunning());\n+        assertFalse(\"RW1 should have shutdown\", main1.replicationWorker.isRunning());\n+        assertFalse(\"RW2 should have shutdown\", main2.replicationWorker.isRunning());\n+    }\n }"},{"sha":"450f871fe8173123295e40b116d523d8b850d2b0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -35,6 +35,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n@@ -493,6 +494,46 @@ public void testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsNotUR()\n \n     }\n \n+    /**\n+     * Test that if the local bookie turns out to be readonly, then no point in running RW. So RW should shutdown.\n+     */\n+    @Test(timeout = 20000)\n+    public void testRWShutdownOnLocalBookieReadonlyTransition() throws Exception {\n+        LedgerHandle lh = bkc.createLedger(3, 3, BookKeeper.DigestType.CRC32, TESTPASSWD);\n+\n+        for (int i = 0; i < 10; i++) {\n+            lh.addEntry(data);\n+        }\n+        InetSocketAddress replicaToKill = LedgerHandleAdapter.getLedgerMetadata(lh).getEnsembles().get(0L).get(0);\n+\n+        LOG.info(\"Killing Bookie\", replicaToKill);\n+        killBookie(replicaToKill);\n+\n+        int newBkPort = startNewBookie();\n+        for (int i = 0; i < 10; i++) {\n+            lh.addEntry(data);\n+        }\n+\n+        InetSocketAddress newBkAddr = new InetSocketAddress(InetAddress.getLocalHost().getHostAddress(), newBkPort);\n+        LOG.info(\"New Bookie addr :\" + newBkAddr);\n+\n+        ReplicationWorker rw = new ReplicationWorker(zkc, baseConf, newBkAddr);\n+\n+        rw.start();\n+        try {\n+            BookieServer newBk = bs.get(bs.size() - 1);\n+            bsConfs.get(bsConfs.size() - 1).setReadOnlyModeEnabled(true);\n+            newBk.getBookie().transitionToReadOnlyMode();\n+            underReplicationManager.markLedgerUnderreplicated(lh.getId(), replicaToKill.toString());\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh.getId(), basePath) && rw.isRunning()) {\n+                Thread.sleep(100);\n+            }\n+            assertFalse(\"RW should shutdown if the bookie is readonly\", rw.isRunning());\n+        } finally {\n+            rw.shutdown();\n+        }\n+    }\n+\n     /**\n      * Test that the replication worker will shutdown if it lose its zookeeper session\n      */"},{"sha":"3bd931203672132739ff9fb5bdc1cd9b216da315","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/09d831847120bc316fadfaaf4b881670b6445e64/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=09d831847120bc316fadfaaf4b881670b6445e64","patch":"@@ -126,6 +126,16 @@ public void run() {\n         throw new IOException(\"ZooKeeper thread not found\");\n     }\n \n+    public void expireSession(ZooKeeper zk) throws Exception {\n+        long id = zk.getSessionId();\n+        byte[] password = zk.getSessionPasswd();\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n+        ZooKeeper zk2 = new ZooKeeper(getZooKeeperConnectString(),\n+                zk.getSessionTimeout(), w, id, password);\n+        w.waitForConnection();\n+        zk2.close();\n+    }\n+\n     public void killServer() throws Exception {\n         if (zkc != null) {\n             zkc.close();"}]}

