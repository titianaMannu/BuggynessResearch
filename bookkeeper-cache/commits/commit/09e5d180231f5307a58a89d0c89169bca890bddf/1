{"sha":"09e5d180231f5307a58a89d0c89169bca890bddf","node_id":"MDY6Q29tbWl0MTU3NTk1NjowOWU1ZDE4MDIzMWY1MzA3YTU4YTg5ZDBjODkxNjliY2E4OTBiZGRm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-05T12:45:33Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-05T12:45:33Z"},"message":"BOOKKEEPER-294: Not able to start the bookkeeper before the ZK session timeout. (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1357581 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35b343de7bc3b89b509b91343ee83302333765e1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/35b343de7bc3b89b509b91343ee83302333765e1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/09e5d180231f5307a58a89d0c89169bca890bddf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/09e5d180231f5307a58a89d0c89169bca890bddf","html_url":"https://github.com/apache/bookkeeper/commit/09e5d180231f5307a58a89d0c89169bca890bddf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/09e5d180231f5307a58a89d0c89169bca890bddf/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"db71147d9df0ad9efa697275e934330d21c99a88","url":"https://api.github.com/repos/apache/bookkeeper/commits/db71147d9df0ad9efa697275e934330d21c99a88","html_url":"https://github.com/apache/bookkeeper/commit/db71147d9df0ad9efa697275e934330d21c99a88"}],"stats":{"total":340,"additions":323,"deletions":17},"files":[{"sha":"a606b40ed9bb6da814adbbb21b18650e820e0e80","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/09e5d180231f5307a58a89d0c89169bca890bddf/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/09e5d180231f5307a58a89d0c89169bca890bddf/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=09e5d180231f5307a58a89d0c89169bca890bddf","patch":"@@ -36,6 +36,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-296: It's better provide stop script for bookie (nijel via sijie)\n \n+        BOOKKEEPER-294: Not able to start the bookkeeper before the ZK session timeout. (rakeshr via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"636d72a434efe61af7316f4558c26f1acb9e180a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":57,"deletions":12,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/09e5d180231f5307a58a89d0c89169bca890bddf/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/09e5d180231f5307a58a89d0c89169bca890bddf/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=09e5d180231f5307a58a89d0c89169bca890bddf","patch":"@@ -34,6 +34,8 @@\n import java.util.Map;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.bookkeeper.meta.ActiveLedgerManager;\n@@ -52,6 +54,7 @@\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n \n /**\n  * Implements a bookie.\n@@ -361,12 +364,9 @@ public Bookie(ServerConfiguration conf)\n         handles = new HandleFactoryImpl(ledgerStorage);\n         // instantiate the journal\n         journal = new Journal(conf);\n-\n-        // replay journals\n-        readJournal();\n     }\n \n-    private void readJournal() throws IOException, BookieException {\n+    void readJournal() throws IOException, BookieException {\n         journal.replay(new JournalScanner() {\n             @Override\n             public void process(int journalVersion, long offset, ByteBuffer recBuff) throws IOException {\n@@ -408,6 +408,16 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n     synchronized public void start() {\n         setDaemon(true);\n         LOG.debug(\"I'm starting a bookie with journal directory \" + journalDirectory.getName());\n+        // replay journals\n+        try {\n+            readJournal();\n+        } catch (IOException ioe) {\n+            LOG.error(\"Exception while replaying journals, shutting down\", ioe);\n+            shutdown(ExitCode.BOOKIE_EXCEPTION);\n+        } catch (BookieException be) {\n+            LOG.error(\"Exception while replaying journals, shutting down\", be);\n+            shutdown(ExitCode.BOOKIE_EXCEPTION);\n+        }\n         // start bookie thread\n         super.start();\n \n@@ -488,21 +498,56 @@ private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf) throws IO\n     /**\n      * Register as an available bookie\n      */\n-    private void registerBookie(int port) throws IOException {\n+    protected void registerBookie(int port) throws IOException {\n         if (null == zk) {\n             // zookeeper instance is null, means not register itself to zk\n             return;\n         }\n-        // Create the ZK ephemeral node for this Bookie.\n-        try {\n-            zk.create(this.bookieRegistrationPath + InetAddress.getLocalHost().getHostAddress() + \":\" + port, new byte[0],\n-                      Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n-        } catch (Exception e) {\n-            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\", e);\n+        // ZK ephemeral node for this Bookie.\n+        String zkBookieRegPath = this.bookieRegistrationPath\n+                + InetAddress.getLocalHost().getHostAddress() + \":\" + port;\n+        final CountDownLatch prevNodeLatch = new CountDownLatch(1);\n+        try{\n+            Watcher zkPrevRegNodewatcher = new Watcher() {\n+                @Override\n+                public void process(WatchedEvent event) {\n+                    // Check for prev znode deletion. Connection expiration is\n+                    // not handling, since bookie has logic to shutdown.\n+                    if (EventType.NodeDeleted == event.getType()) {\n+                        prevNodeLatch.countDown();\n+                    }\n+                }\n+            };\n+            if (null != zk.exists(zkBookieRegPath, zkPrevRegNodewatcher)) {\n+                LOG.info(\"Previous bookie registration znode: \"\n+                        + zkBookieRegPath\n+                        + \" exists, so waiting zk sessiontimeout: \"\n+                        + conf.getZkTimeout() + \"ms for znode deletion\");\n+                // waiting for the previous bookie reg znode deletion\n+                if (!prevNodeLatch.await(conf.getZkTimeout(),\n+                        TimeUnit.MILLISECONDS)) {\n+                    throw new KeeperException.NodeExistsException(\n+                            zkBookieRegPath);\n+                }\n+            }\n+\n+            // Create the ZK ephemeral node for this Bookie.\n+            zk.create(zkBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                    CreateMode.EPHEMERAL);\n+        } catch (KeeperException ke) {\n+            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\",\n+                    ke);\n+            // Throw an IOException back up. This will cause the Bookie\n+            // constructor to error out. Alternatively, we could do a System\n+            // exit here as this is a fatal error.\n+            throw new IOException(ke);\n+        } catch (InterruptedException ie) {\n+            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\",\n+                    ie);\n             // Throw an IOException back up. This will cause the Bookie\n             // constructor to error out. Alternatively, we could do a System\n             // exit here as this is a fatal error.\n-            throw new IOException(e);\n+            throw new IOException(ie);\n         }\n     }\n "},{"sha":"194bcaa991570f54ac121f000487c363fb03738c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/09e5d180231f5307a58a89d0c89169bca890bddf/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/09e5d180231f5307a58a89d0c89169bca890bddf/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=09e5d180231f5307a58a89d0c89169bca890bddf","patch":"@@ -29,8 +29,6 @@\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n \n-import javax.management.JMException;\n-\n import org.apache.zookeeper.KeeperException;\n \n import org.apache.bookkeeper.bookie.Bookie;\n@@ -83,9 +81,10 @@ protected Bookie newBookie(ServerConfiguration conf)\n     }\n \n     public void start() throws IOException {\n+        nioServerFactory = new NIOServerFactory(conf, this);\n+\n         this.bookie.start();\n \n-        nioServerFactory = new NIOServerFactory(conf, this);\n         nioServerFactory.start();\n         running = true;\n         deathWatcher = new DeathWatcher(conf);"},{"sha":"5bbb5221949fd1e607a6f153a1448da7d0a5b8f9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"added","additions":257,"deletions":0,"changes":257,"blob_url":"https://github.com/apache/bookkeeper/blob/09e5d180231f5307a58a89d0c89169bca890bddf/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/09e5d180231f5307a58a89d0c89169bca890bddf/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=09e5d180231f5307a58a89d0c89169bca890bddf","patch":"@@ -0,0 +1,257 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import static org.junit.Assert.fail;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.BindException;\n+import java.net.InetAddress;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.Stat;\n+import org.apache.zookeeper.KeeperException;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Testing bookie initialization cases\n+ */\n+public class BookieInitializationTest {\n+    private static final Logger LOG = LoggerFactory\n+            .getLogger(BookieInitializationTest.class);\n+    ZooKeeperUtil zkutil;\n+    ZooKeeper zkc = null;\n+    ZooKeeper newzk = null;\n+\n+    @Before\n+    public void setupZooKeeper() throws Exception {\n+        zkutil = new ZooKeeperUtil();\n+        zkutil.startServer();\n+        zkc = zkutil.getZooKeeperClient();\n+    }\n+\n+    @After\n+    public void tearDownZooKeeper() throws Exception {\n+        if (newzk != null) {\n+            newzk.close();\n+        }\n+        zkutil.killServer();\n+    }\n+\n+    private static class MockBookie extends Bookie {\n+        MockBookie(ServerConfiguration conf) throws IOException,\n+                KeeperException, InterruptedException, BookieException {\n+            super(conf);\n+        }\n+\n+        void testRegisterBookie(int port) throws IOException {\n+            super.registerBookie(port);\n+        }\n+    }\n+\n+    /**\n+     * Verify the bookie reg. Restarting bookie server will wait for the session\n+     * timeout when previous reg node exists in zk. On zNode delete event,\n+     * should continue startup\n+     */\n+    @Test\n+    public void testBookieRegistration() throws Exception {\n+        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+\n+        final ServerConfiguration conf = new ServerConfiguration()\n+                .setZkServers(null).setJournalDirName(tmpDir.getPath())\n+                .setLedgerDirNames(new String[] { tmpDir.getPath() });\n+\n+        final String bkRegPath = conf.getZkAvailableBookiesPath() + \"/\"\n+                + InetAddress.getLocalHost().getHostAddress() + \":\"\n+                + conf.getBookiePort();\n+\n+        MockBookie b = new MockBookie(conf);\n+        b.zk = zkc;\n+        b.testRegisterBookie(conf.getBookiePort());\n+        Stat bkRegNode1 = zkc.exists(bkRegPath, false);\n+        Assert.assertNotNull(\"Bookie registration node doesn't exists!\",\n+                bkRegNode1);\n+\n+        // simulating bookie restart, on restart bookie will create new\n+        // zkclient and doing the registration.\n+        createNewZKClient();\n+        b.zk = newzk;\n+\n+        // deleting the znode, so that the bookie registration should\n+        // continue successfully on NodeDeleted event\n+        new Thread() {\n+            @Override\n+            public void run() {\n+                try {\n+                    Thread.sleep(conf.getZkTimeout() / 3);\n+                    zkc.delete(bkRegPath, -1);\n+                } catch (Exception e) {\n+                    // Not handling, since the testRegisterBookie will fail\n+                    LOG.error(\"Failed to delete the znode :\" + bkRegPath, e);\n+                }\n+            }\n+        }.start();\n+        try {\n+            b.testRegisterBookie(conf.getBookiePort());\n+        } catch (IOException e) {\n+            Throwable t = e.getCause();\n+            if (t instanceof KeeperException) {\n+                KeeperException ke = (KeeperException) t;\n+                Assert.assertTrue(\"ErrorCode:\" + ke.code()\n+                        + \", Registration node exists\",\n+                        ke.code() != KeeperException.Code.NODEEXISTS);\n+            }\n+            throw e;\n+        }\n+\n+        // verify ephemeral owner of the bkReg znode\n+        Stat bkRegNode2 = newzk.exists(bkRegPath, false);\n+        Assert.assertNotNull(\"Bookie registration has been failed\", bkRegNode2);\n+        Assert.assertTrue(\"Bookie is referring to old registration znode:\"\n+                + bkRegNode1 + \", New ZNode:\" + bkRegNode2, bkRegNode1\n+                .getEphemeralOwner() != bkRegNode2.getEphemeralOwner());\n+    }\n+\n+    /**\n+     * Verify the bookie registration, it should throw\n+     * KeeperException.NodeExistsException if the znode still exists even after\n+     * the zk session timeout.\n+     */\n+    @Test\n+    public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n+        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+\n+        ServerConfiguration conf = new ServerConfiguration().setZkServers(null)\n+                .setJournalDirName(tmpDir.getPath()).setLedgerDirNames(\n+                        new String[] { tmpDir.getPath() });\n+\n+        String bkRegPath = conf.getZkAvailableBookiesPath() + \"/\"\n+                + InetAddress.getLocalHost().getHostAddress() + \":\"\n+                + conf.getBookiePort();\n+\n+        MockBookie b = new MockBookie(conf);\n+        b.zk = zkc;\n+        b.testRegisterBookie(conf.getBookiePort());\n+        Stat bkRegNode1 = zkc.exists(bkRegPath, false);\n+        Assert.assertNotNull(\"Bookie registration node doesn't exists!\",\n+                bkRegNode1);\n+\n+        // simulating bookie restart, on restart bookie will create new\n+        // zkclient and doing the registration.\n+        createNewZKClient();\n+        b.zk = newzk;\n+        try {\n+            b.testRegisterBookie(conf.getBookiePort());\n+            fail(\"Should throw NodeExistsException as the znode is not getting expired\");\n+        } catch (IOException e) {\n+            Throwable t = e.getCause();\n+            if (t instanceof KeeperException) {\n+                KeeperException ke = (KeeperException) t;\n+                Assert.assertTrue(\"ErrorCode:\" + ke.code()\n+                        + \", Registration node doesn't exists\",\n+                        ke.code() == KeeperException.Code.NODEEXISTS);\n+\n+                // verify ephemeral owner of the bkReg znode\n+                Stat bkRegNode2 = newzk.exists(bkRegPath, false);\n+                Assert.assertNotNull(\"Bookie registration has been failed\",\n+                        bkRegNode2);\n+                Assert.assertTrue(\n+                        \"Bookie wrongly registered. Old registration znode:\"\n+                                + bkRegNode1 + \", New znode:\" + bkRegNode2,\n+                        bkRegNode1.getEphemeralOwner() == bkRegNode2\n+                                .getEphemeralOwner());\n+                return;\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    /**\n+     * Verify duplicate bookie server startup. Should throw\n+     * java.net.BindException if already BK server is running\n+     */\n+    @Test\n+    public void testDuplicateBookieServerStartup() throws Exception {\n+        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+\n+        ServerConfiguration conf = new ServerConfiguration();\n+        int port = 12555;\n+        conf.setZkServers(null).setBookiePort(port).setJournalDirName(\n+                tmpDir.getPath()).setLedgerDirNames(\n+                new String[] { tmpDir.getPath() });\n+        BookieServer bs1 = new BookieServer(conf);\n+        bs1.start();\n+\n+        // starting bk server with same conf\n+        try {\n+            BookieServer bs2 = new BookieServer(conf);\n+            bs2.start();\n+            fail(\"Should throw BindException, as the bk server is already running!\");\n+        } catch (BindException be) {\n+            Assert.assertTrue(\"BKServer allowed duplicate startups!\", be\n+                    .getMessage().contains(\"Address already in use\"));\n+        }\n+    }\n+\n+    private void createNewZKClient() throws Exception {\n+        // create a zookeeper client\n+        LOG.debug(\"Instantiate ZK Client\");\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        newzk = new ZooKeeper(zkutil.getZooKeeperConnectString(), 10000,\n+                new Watcher() {\n+                    @Override\n+                    public void process(WatchedEvent event) {\n+                        // handle session disconnects and expires\n+                        if (event.getState().equals(\n+                                Watcher.Event.KeeperState.SyncConnected)) {\n+                            latch.countDown();\n+                        }\n+                    }\n+                });\n+        if (!latch.await(10000, TimeUnit.MILLISECONDS)) {\n+            newzk.close();\n+            fail(\"Could not connect to zookeeper server\");\n+        }\n+    }\n+}"},{"sha":"c8e4154bcda42c9c4dafb2fd048a93a7f80947fa","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/09e5d180231f5307a58a89d0c89169bca890bddf/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/09e5d180231f5307a58a89d0c89169bca890bddf/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=09e5d180231f5307a58a89d0c89169bca890bddf","patch":"@@ -397,6 +397,7 @@ public void testTruncatedInLenJournal() throws Exception {\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n \n         Bookie b = new Bookie(conf);\n+        b.readJournal();\n \n         b.readEntry(1, 99);\n \n@@ -444,6 +445,7 @@ public void testTruncatedInEntryJournal() throws Exception {\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n \n         Bookie b = new Bookie(conf);\n+        b.readJournal();\n         b.readEntry(1, 99);\n \n         // still able to read last entry, but it's junk\n@@ -511,12 +513,13 @@ private void testPartialFileInfoPreV3Journal(boolean truncateMasterKey)\n         if (truncateMasterKey) {\n             try {\n                 Bookie b = new Bookie(conf);\n+                b.readJournal();\n                 fail(\"Should not reach here!\");\n             } catch (IOException ie) {\n             }\n         } else {\n             Bookie b = new Bookie(conf);\n-\n+            b.readJournal();\n             b.readEntry(1, 100);\n             try {\n                 b.readEntry(1, 101);\n@@ -570,7 +573,7 @@ private void testPartialFileInfoPostV3Journal(boolean truncateMasterKey)\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n \n         Bookie b = new Bookie(conf);\n-\n+        b.readJournal();\n         b.readEntry(1, 100);\n         try {\n             b.readEntry(1, 101);"}]}

