{"sha":"0cd4be8fde5206d956addd29cbad0391ceca1716","node_id":"MDY6Q29tbWl0MTU3NTk1NjowY2Q0YmU4ZmRlNTIwNmQ5NTZhZGRkMjljYmFkMDM5MWNlY2ExNzE2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:35:18Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:35:18Z"},"message":"BOOKKEEPER-633: ConcurrentModificationException in RackawareEnsemblePlacementPolicy when a bookie is removed from available list (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1496706 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c0782473dae9508d9737ce86db8b61d5079614d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4c0782473dae9508d9737ce86db8b61d5079614d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0cd4be8fde5206d956addd29cbad0391ceca1716","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0cd4be8fde5206d956addd29cbad0391ceca1716","html_url":"https://github.com/apache/bookkeeper/commit/0cd4be8fde5206d956addd29cbad0391ceca1716","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0cd4be8fde5206d956addd29cbad0391ceca1716/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"119e2034303b45478123a0fa62c1c48925b201c1","url":"https://api.github.com/repos/apache/bookkeeper/commits/119e2034303b45478123a0fa62c1c48925b201c1","html_url":"https://github.com/apache/bookkeeper/commit/119e2034303b45478123a0fa62c1c48925b201c1"}],"stats":{"total":36,"additions":32,"deletions":4},"files":[{"sha":"b8a522be62610f9899940a9e88c374e9b0575d24","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0cd4be8fde5206d956addd29cbad0391ceca1716/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/0cd4be8fde5206d956addd29cbad0391ceca1716/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=0cd4be8fde5206d956addd29cbad0391ceca1716","patch":"@@ -60,6 +60,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-623: LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry. (vinay via sijie)\n \n+        BOOKKEEPER-633: ConcurrentModificationException in RackawareEnsemblePlacementPolicy when a bookie is removed from available list (vinay via sijie)\n+\n       hedwig-client:\n \n         BOOKKEEPER-598: Fails to compile - RESUBSCRIBE_EXCEPTION conflict (Matthew Farrellee via sijie)"},{"sha":"d939c82cc61b1a061e8f0e83e55a398f14559bae","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/0cd4be8fde5206d956addd29cbad0391ceca1716/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/0cd4be8fde5206d956addd29cbad0391ceca1716/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java?ref=0cd4be8fde5206d956addd29cbad0391ceca1716","patch":"@@ -43,6 +43,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n \n /**\n@@ -362,14 +363,14 @@ private String resolveNetworkLocation(InetSocketAddress addr) {\n             Set<InetSocketAddress> readOnlyBookies) {\n         rwLock.writeLock().lock();\n         try {\n-            Set<InetSocketAddress> joinedBookies, leftBookies, deadBookies;\n+            ImmutableSet<InetSocketAddress> joinedBookies, leftBookies, deadBookies;\n             Set<InetSocketAddress> oldBookieSet = knownBookies.keySet();\n             // left bookies : bookies in known bookies, but not in new writable bookie cluster.\n-            leftBookies = Sets.difference(oldBookieSet, writableBookies);\n+            leftBookies = Sets.difference(oldBookieSet, writableBookies).immutableCopy();\n             // joined bookies : bookies in new writable bookie cluster, but not in known bookies\n-            joinedBookies = Sets.difference(writableBookies, oldBookieSet);\n+            joinedBookies = Sets.difference(writableBookies, oldBookieSet).immutableCopy();\n             // dead bookies.\n-            deadBookies = Sets.difference(leftBookies, readOnlyBookies);\n+            deadBookies = Sets.difference(leftBookies, readOnlyBookies).immutableCopy();\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\n                         \"Cluster changed : left bookies are {}, joined bookies are {}, while dead bookies are {}.\","},{"sha":"b9292ff2fe2204f3640c993614b30cffc7bc65af","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/0cd4be8fde5206d956addd29cbad0391ceca1716/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/0cd4be8fde5206d956addd29cbad0391ceca1716/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java?ref=0cd4be8fde5206d956addd29cbad0391ceca1716","patch":"@@ -236,6 +236,31 @@ public void testNewEnsembleWithEnoughRacks() throws Exception {\n         }\n     }\n \n+    /**\n+     * Test for BOOKKEEPER-633\n+     */\n+    @Test\n+    public void testRemoveBookieFromCluster() {\n+        InetSocketAddress addr1 = new InetSocketAddress(\"127.0.0.1\", 3181);\n+        InetSocketAddress addr2 = new InetSocketAddress(\"127.0.0.2\", 3181);\n+        InetSocketAddress addr3 = new InetSocketAddress(\"127.0.0.3\", 3181);\n+        InetSocketAddress addr4 = new InetSocketAddress(\"127.0.0.4\", 3181);\n+        // update dns mapping\n+        StaticDNSResolver.addNodeToRack(addr1.getAddress().getHostAddress(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr2.getAddress().getHostAddress(), \"/r2\");\n+        StaticDNSResolver.addNodeToRack(addr3.getAddress().getHostAddress(), \"/r2\");\n+        StaticDNSResolver.addNodeToRack(addr4.getAddress().getHostAddress(), \"/r3\");\n+        // Update cluster\n+        Set<InetSocketAddress> addrs = new HashSet<InetSocketAddress>();\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        addrs.add(addr3);\n+        addrs.add(addr4);\n+        repp.onClusterChanged(addrs, new HashSet<InetSocketAddress>());\n+        addrs.remove(addr1);\n+        repp.onClusterChanged(addrs, new HashSet<InetSocketAddress>());\n+    }\n+\n     private int getNumCoveredWriteQuorums(ArrayList<InetSocketAddress> ensemble, int writeQuorumSize)\n             throws Exception {\n         int ensembleSize = ensemble.size();"}]}

