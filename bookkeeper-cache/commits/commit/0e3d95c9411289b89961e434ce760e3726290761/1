{"sha":"0e3d95c9411289b89961e434ce760e3726290761","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZTNkOTVjOTQxMTI4OWI4OTk2MWU0MzRjZTc2MGUzNzI2MjkwNzYx","commit":{"author":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2014-12-10T18:43:24Z"},"committer":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2014-12-10T18:43:24Z"},"message":"BOOKKEEPER-814: clean up temp files that generated by test cases. (zhaijia via ivank)","tree":{"sha":"05768d7014b80df4256e071c36c649040bb0f57c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/05768d7014b80df4256e071c36c649040bb0f57c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0e3d95c9411289b89961e434ce760e3726290761","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0e3d95c9411289b89961e434ce760e3726290761","html_url":"https://github.com/apache/bookkeeper/commit/0e3d95c9411289b89961e434ce760e3726290761","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0e3d95c9411289b89961e434ce760e3726290761/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e79f8736a7dfc2c7191455e4e88b85a85f0472bf","url":"https://api.github.com/repos/apache/bookkeeper/commits/e79f8736a7dfc2c7191455e4e88b85a85f0472bf","html_url":"https://github.com/apache/bookkeeper/commit/e79f8736a7dfc2c7191455e4e88b85a85f0472bf"}],"stats":{"total":778,"additions":426,"deletions":352},"files":[{"sha":"910b1edec7f41a54e2fab3d015e24a15129c237b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -26,6 +26,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-795: Race condition causes writes to hang if ledger is fenced (sijie via ivank)\n \n+      BOOKKEEPER-814: clean up temp files that generated by test cases. (zhaijia via ivank)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-800: Expose whether a ledger is closed or not (ivank)"},{"sha":"0ecbf571e22959d9c696087d4db0d75ad83aa5b5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -20,10 +20,12 @@\n  */\n package org.apache.bookkeeper.util;\n \n+import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.channels.WritableByteChannel;\n \n+import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n \n /**\n@@ -101,4 +103,44 @@ public static void writeFully(WritableByteChannel bc, ByteBuffer buf)\n             bc.write(buf);\n         } while (buf.remaining() > 0);\n     }\n+\n+\n+    /**\n+     * Create a temp directory with given <i>prefix</i> and <i>suffix</i>.\n+     *\n+     * @param prefix\n+     *          prefix of the directory name\n+     * @param suffix\n+     *          suffix of the directory name\n+     * @return directory created\n+     * @throws IOException\n+     */\n+    public static File createTempDir(String prefix, String suffix)\n+            throws IOException {\n+        File tmpDir = File.createTempFile(prefix, suffix);\n+        if (!tmpDir.delete()) {\n+            throw new IOException(\"Couldn't delete directory \" + tmpDir);\n+        }\n+        if (!tmpDir.mkdir()) {\n+            throw new IOException(\"Couldn't create directory \" + tmpDir);\n+        }\n+        return tmpDir;\n+    }\n+\n+    /**\n+     * Create a temp directory with given <i>prefix</i> and <i>suffix</i>.\n+     *\n+     * @param prefix\n+     *          prefix of the directory name\n+     * @param suffix\n+     *          suffix of the directory name\n+     * @return directory created\n+     * @throws IOException\n+     */\n+    public static File createTempFileAndDeleteOnExit(String prefix, String suffix)\n+            throws IOException {\n+        File tmpDir = File.createTempFile(prefix, suffix);\n+        tmpDir.deleteOnExit();\n+        return tmpDir;\n+    }\n }"},{"sha":"0937bb5f8b7dbdecc0c5445002a21c5f6aeffd79","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":48,"deletions":9,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -27,7 +27,10 @@\n import java.net.Socket;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n@@ -86,10 +89,7 @@ private void runZookeeper(int maxCC) throws IOException {\n         LOG.info(\"Starting ZK server\");\n         //ServerStats.registerAsConcrete();\n         //ClientBase.setupTestEnv();\n-        ZkTmpDir = File.createTempFile(\"zookeeper\", \"test\");\n-        if (!ZkTmpDir.delete() || !ZkTmpDir.mkdir()) {\n-            throw new IOException(\"Couldn't create zk directory \" + ZkTmpDir);\n-        }\n+        ZkTmpDir = IOUtils.createTempDir(\"zookeeper\", \"localbookkeeper\");\n \n         try {\n             zks = new ZooKeeperServer(ZkTmpDir, ZkTmpDir, ZooKeeperDefaultPort);\n@@ -126,8 +126,42 @@ private void initializeZookeper() throws IOException {\n         }\n     }\n \n-    private void runBookies(ServerConfiguration baseConf) throws IOException,\n-            KeeperException, InterruptedException, BookieException,\n+    private static void cleanupDirectories(List<File> dirs) throws IOException {\n+        for (File dir : dirs) {\n+            FileUtils.deleteDirectory(dir);\n+        }\n+    }\n+\n+    private List<File> runBookies(ServerConfiguration baseConf, String dirSuffix)\n+            throws IOException, KeeperException, InterruptedException, BookieException,\n+            UnavailableException, CompatibilityException {\n+        List<File> tempDirs = new ArrayList<File>();\n+        try {\n+            runBookies(baseConf, tempDirs, dirSuffix);\n+            return tempDirs;\n+        } catch (IOException ioe) {\n+            cleanupDirectories(tempDirs);\n+            throw ioe;\n+        } catch (KeeperException ke) {\n+            cleanupDirectories(tempDirs);\n+            throw ke;\n+        } catch (InterruptedException ie) {\n+            cleanupDirectories(tempDirs);\n+            throw ie;\n+        } catch (BookieException be) {\n+            cleanupDirectories(tempDirs);\n+            throw be;\n+        } catch (UnavailableException ue) {\n+            cleanupDirectories(tempDirs);\n+            throw ue;\n+        } catch (CompatibilityException ce) {\n+            cleanupDirectories(tempDirs);\n+            throw ce;\n+        }\n+    }\n+\n+    private void runBookies(ServerConfiguration baseConf, List<File> tempDirs, String dirSuffix)\n+            throws IOException, KeeperException, InterruptedException, BookieException,\n             UnavailableException, CompatibilityException {\n         LOG.info(\"Starting Bookie(s)\");\n         // Create Bookie Servers (B1, B2, B3)\n@@ -179,9 +213,14 @@ public static void main(String[] args) throws IOException, KeeperException,\n \n         lb.runZookeeper(1000);\n         lb.initializeZookeper();\n-        lb.runBookies(conf);\n-        while (true) {\n-            Thread.sleep(5000);\n+        List<File> tmpDirs = lb.runBookies(conf, \"test\");\n+        try {\n+            while (true) {\n+                Thread.sleep(5000);\n+            }\n+        } catch (InterruptedException ie) {\n+            cleanupDirectories(tmpDirs);\n+            throw ie;\n         }\n     }\n "},{"sha":"8da9eb44467bbdebfd39755ed2c8280ad7c8cd2f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":48,"deletions":76,"changes":124,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -39,42 +39,38 @@\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n+import org.apache.bookkeeper.util.IOUtils;\n import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.KeeperException;\n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * Testing bookie initialization cases\n  */\n-public class BookieInitializationTest {\n+public class BookieInitializationTest extends BookKeeperClusterTestCase {\n     private static final Logger LOG = LoggerFactory\n             .getLogger(BookieInitializationTest.class);\n-    ZooKeeperUtil zkutil;\n-    ZooKeeper zkc = null;\n-    ZooKeeper newzk = null;\n \n-    @Before\n-    public void setupZooKeeper() throws Exception {\n-        zkutil = new ZooKeeperUtil();\n-        zkutil.startServer();\n-        zkc = zkutil.getZooKeeperClient();\n+    ZooKeeper newzk = null;\n+    \n+    public BookieInitializationTest() {\n+        super(0);\n     }\n \n-    @After\n-    public void tearDownZooKeeper() throws Exception {\n-        if (newzk != null) {\n+    @Override\n+    public void tearDown() throws Exception {\n+        if (null != newzk) {\n             newzk.close();\n         }\n-        zkutil.killServer();\n+        super.tearDown();\n     }\n \n     private static class MockBookie extends Bookie {\n@@ -94,9 +90,7 @@ void testRegisterBookie(ServerConfiguration conf) throws IOException {\n      */\n     @Test(timeout = 20000)\n     public void testExitCodeZK_REG_FAIL() throws Exception {\n-        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bookie\", \"test\");\n \n         final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(null).setJournalDirName(tmpDir.getPath())\n@@ -122,9 +116,7 @@ protected Bookie newBookie(ServerConfiguration conf)\n \n     @Test(timeout = 20000)\n     public void testBookieRegistrationWithSameZooKeeperClient() throws Exception {\n-        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bookie\", \"test\");\n \n         final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(null).setJournalDirName(tmpDir.getPath())\n@@ -153,9 +145,7 @@ public void testBookieRegistrationWithSameZooKeeperClient() throws Exception {\n      */\n     @Test(timeout = 20000)\n     public void testBookieRegistration() throws Exception {\n-        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bookie\", \"test\");\n \n         final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(null).setJournalDirName(tmpDir.getPath())\n@@ -219,9 +209,7 @@ public void run() {\n      */\n     @Test(timeout = 30000)\n     public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n-        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bookie\", \"test\");\n \n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration().setZkServers(null)\n                 .setJournalDirName(tmpDir.getPath()).setLedgerDirNames(\n@@ -274,9 +262,7 @@ public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n      */\n     @Test(timeout = 20000)\n     public void testDuplicateBookieServerStartup() throws Exception {\n-        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bookie\", \"test\");\n \n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         int port = 12555;\n@@ -304,24 +290,20 @@ public void testDuplicateBookieServerStartup() throws Exception {\n      */\n     @Test(timeout = 20000)\n     public void testStartBookieWithoutZKServer() throws Exception {\n-        zkutil.killServer();\n+        zkUtil.killServer();\n \n-        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bookie\", \"test\");\n \n         final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n                 .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n                 .setLedgerDirNames(new String[] { tmpDir.getPath() });\n         try {\n             new Bookie(conf);\n             fail(\"Should throw ConnectionLossException as ZKServer is not running!\");\n         } catch (KeeperException.ConnectionLossException e) {\n             // expected behaviour\n-        } finally {\n-            FileUtils.deleteDirectory(tmpDir);\n-        }\n+        } \n     }\n \n     /**\n@@ -330,87 +312,77 @@ public void testStartBookieWithoutZKServer() throws Exception {\n      */\n     @Test(timeout = 20000)\n     public void testStartBookieWithoutZKInitialized() throws Exception {\n-        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bookie\", \"test\");\n         final String ZK_ROOT = \"/ledgers2\";\n \n         final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n             .setLedgerDirNames(new String[] { tmpDir.getPath() });\n         conf.setZkLedgersRootPath(ZK_ROOT);\n         try {\n-            try {\n-                new Bookie(conf);\n-                fail(\"Should throw NoNodeException\");\n-            } catch (Exception e) {\n-                // shouldn't be able to start\n-            }\n-            ClientConfiguration clientConf = new ClientConfiguration();\n-            clientConf.setZkServers(zkutil.getZooKeeperConnectString());\n-            clientConf.setZkLedgersRootPath(ZK_ROOT);\n-            BookKeeperAdmin.format(clientConf, false, false);\n-\n-            Bookie b = new Bookie(conf);\n-            b.shutdown();\n-        } finally {\n-            FileUtils.deleteDirectory(tmpDir);\n+            new Bookie(conf);\n+            fail(\"Should throw NoNodeException\");\n+        } catch (Exception e) {\n+            // shouldn't be able to start\n         }\n+        ClientConfiguration clientConf = new ClientConfiguration();\n+        clientConf.setZkServers(zkUtil.getZooKeeperConnectString());\n+        clientConf.setZkLedgersRootPath(ZK_ROOT);\n+        BookKeeperAdmin.format(clientConf, false, false);\n+\n+        Bookie b = new Bookie(conf);\n+        b.shutdown();\n     }\n \n     /**\n      * Check disk full. Expected to throw NoWritableLedgerDirException\n      * during bookie initialisation.\n      */\n-    @Test(timeout = 30000, expected = NoWritableLedgerDirException.class)\n+    @Test(timeout = 30000)\n     public void testWithDiskFull() throws Exception {\n-        File tempDir = File.createTempFile(\"DiskCheck\", \"test\");\n-        tempDir.delete();\n-        tempDir.mkdir();\n-        long usableSpace = tempDir.getUsableSpace();\n-        long totalSpace = tempDir.getTotalSpace();\n+        File tmpDir = createTempDir(\"DiskCheck\", \"test\");\n+        long usableSpace = tmpDir.getUsableSpace();\n+        long totalSpace = tmpDir.getTotalSpace();\n         final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n-                .setZkTimeout(5000).setJournalDirName(tempDir.getPath())\n-                .setLedgerDirNames(new String[] { tempDir.getPath() });\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n+                .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n+                .setLedgerDirNames(new String[] { tmpDir.getPath() });\n         conf.setDiskUsageThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.05f);\n         conf.setDiskUsageWarnThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.25f);\n         try {\n             new Bookie(conf);\n-        } finally {\n-            FileUtils.deleteDirectory(tempDir);\n+        } catch (Exception e) {\n+            // expected\n         }\n     }\n \n     /**\n      * Check disk error for file. Expected to throw DiskErrorException.\n      */\n-    @Test(timeout = 30000, expected = DiskErrorException.class)\n+    @Test(timeout = 30000)\n     public void testWithDiskError() throws Exception {\n-        File parent = File.createTempFile(\"DiskCheck\", \"test\");\n-        parent.delete();\n-        parent.mkdir();\n+        File parent = createTempDir(\"DiskCheck\", \"test\");\n         File child = File.createTempFile(\"DiskCheck\", \"test\", parent);\n         final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n                 .setZkTimeout(5000).setJournalDirName(child.getPath())\n                 .setLedgerDirNames(new String[] { child.getPath() });\n         try {\n             // LedgerDirsManager#init() is used in Bookie instantiation.\n             // Simulating disk errors by directly calling #init\n             LedgerDirsManager ldm = new LedgerDirsManager(conf, conf.getLedgerDirs());\n             ldm.init();\n-        } finally {\n-            FileUtils.deleteDirectory(parent);\n+        } catch (Exception e) {\n+            // expected\n         }\n     }\n \n     private void createNewZKClient() throws Exception {\n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");\n         final CountDownLatch latch = new CountDownLatch(1);\n-        newzk = new ZooKeeper(zkutil.getZooKeeperConnectString(), 10000,\n+        newzk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), 10000,\n                 new Watcher() {\n                     @Override\n                     public void process(WatchedEvent event) {"},{"sha":"9baa4e73cb50bf3c1ee76b55a3abfcbb7d85064a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":44,"deletions":68,"changes":112,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -29,6 +29,8 @@\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Arrays;\n import java.util.Random;\n \n@@ -38,16 +40,34 @@\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.ZeroBuffer;\n+import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.junit.Test;\n+import org.junit.After;\n import static org.junit.Assert.*;\n \n public class BookieJournalTest {\n     private final static Logger LOG = LoggerFactory.getLogger(BookieJournalTest.class);\n \n     final Random r = new Random(System.currentTimeMillis());\n \n+    final List<File> tempDirs = new ArrayList<File>();\n+\n+    File createTempDir(String prefix, String suffix) throws IOException {\n+        File dir = IOUtils.createTempDir(prefix, suffix);\n+        tempDirs.add(dir);\n+        return dir;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        for (File dir : tempDirs) {\n+            FileUtils.deleteDirectory(dir);\n+        }\n+        tempDirs.clear();\n+    }\n+\n     private void writeIndexFileForLedger(File indexDir, long ledgerId,\n                                          byte[] masterKey)\n             throws Exception {\n@@ -312,14 +332,10 @@ private JournalChannel writeV5Journal(File journalDir, int numEntries, byte[] ma\n      */\n     @Test(timeout=60000)\n     public void testPreV2Journal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 100);\n@@ -346,14 +362,10 @@ public void testPreV2Journal() throws Exception {\n \n     @Test\n     public void testV4Journal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         writeV4Journal(Bookie.getCurrentDirectory(journalDir), 100, \"testPasswd\".getBytes());\n@@ -380,16 +392,12 @@ public void testV4Journal() throws Exception {\n \n     @Test\n     public void testV5Journal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n-\n+        \n         writeV5Journal(Bookie.getCurrentDirectory(journalDir), 2 * JournalChannel.SECTOR_SIZE,\n                 \"testV5Journal\".getBytes());\n \n@@ -422,14 +430,10 @@ public void testV5Journal() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testAllJunkJournal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         writeJunkJournal(Bookie.getCurrentDirectory(journalDir));\n@@ -460,14 +464,10 @@ public void testAllJunkJournal() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testEmptyJournal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n@@ -486,14 +486,10 @@ public void testEmptyJournal() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testHeaderOnlyJournal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         writeV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n@@ -512,14 +508,10 @@ public void testHeaderOnlyJournal() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testJunkEndedJournal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         JournalChannel jc = writeV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n@@ -551,14 +543,10 @@ public void testJunkEndedJournal() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testTruncatedInLenJournal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         JournalChannel jc = writeV2Journal(\n@@ -599,14 +587,10 @@ public void testTruncatedInLenJournal() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testTruncatedInEntryJournal() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         JournalChannel jc = writeV2Journal(\n@@ -672,15 +656,11 @@ public void testPartialFileInfoPreV3Journal2() throws Exception {\n      */\n     private void testPartialFileInfoPreV3Journal(boolean truncateMasterKey)\n         throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n-        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 100);\n         writePartialIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir),\n@@ -732,14 +712,10 @@ public void testPartialFileInfoPostV3Journal2() throws Exception {\n      */\n     private void testPartialFileInfoPostV3Journal(boolean truncateMasterKey)\n         throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         byte[] masterKey = \"testPasswd\".getBytes();"},{"sha":"956595e168b9bc6c0a7d1811c68f6347d6d72f39","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -369,9 +369,7 @@ public void testCompactionSafety() throws Exception {\n         final Set<Long> ledgers = Collections.newSetFromMap(new ConcurrentHashMap<Long, Boolean>());\n         LedgerManager manager = getLedgerManager(ledgers);\n \n-        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bkTest\", \".dir\");\n         File curDir = Bookie.getCurrentDirectory(tmpDir);\n         Bookie.checkDirectoryStructure(curDir);\n         conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n@@ -520,9 +518,7 @@ public boolean hasNext() throws IOException {\n     public void testWhenNoLogsToCompact() throws Exception {\n         tearDown(); // I dont want the test infrastructure\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n-        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bkTest\", \".dir\");\n         File curDir = Bookie.getCurrentDirectory(tmpDir);\n         Bookie.checkDirectoryStructure(curDir);\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });"},{"sha":"9497c29f0fbc9ed71e83e8571e949906ebc8106d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":49,"deletions":46,"changes":95,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -21,6 +21,10 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.test.PortManager;\n+import org.apache.bookkeeper.util.IOUtils;\n+\n import static org.apache.bookkeeper.bookie.UpgradeTest.newV1JournalDirectory;\n import static org.apache.bookkeeper.bookie.UpgradeTest.newV1LedgerDirectory;\n import static org.apache.bookkeeper.bookie.UpgradeTest.newV2JournalDirectory;\n@@ -38,44 +42,28 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.meta.ZkVersion;\n-import org.apache.bookkeeper.test.PortManager;\n-import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.commons.io.FileUtils;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.Test;\n \n-public class CookieTest {\n-    ZooKeeperUtil zkutil;\n-    ZooKeeper zkc = null;\n+public class CookieTest extends BookKeeperClusterTestCase {\n     final int bookiePort = PortManager.nextFreePort();\n \n-    @Before\n-    public void setupZooKeeper() throws Exception {\n-        zkutil = new ZooKeeperUtil();\n-        zkutil.startServer();\n-        zkc = zkutil.getZooKeeperClient();\n-    }\n-\n-    @After\n-    public void tearDownZooKeeper() throws Exception {\n-        zkutil.killServer();\n+    public CookieTest() {\n+        super(0);\n     }\n \n-    private static String newDirectory() throws IOException {\n+    private String newDirectory() throws IOException {\n         return newDirectory(true);\n     }\n \n-    private static String newDirectory(boolean createCurDir) throws IOException {\n-        File d = File.createTempFile(\"bookie\", \"tmpdir\");\n-        d.delete();\n-        d.mkdirs();\n+    private String newDirectory(boolean createCurDir) throws IOException {\n+        File d = IOUtils.createTempDir(\"cookie\", \"tmpdir\");\n         if (createCurDir) {\n             new File(d, \"current\").mkdirs();\n         }\n+        tmpDirs.add(d);\n         return d.getPath();\n     }\n \n@@ -85,7 +73,7 @@ private static String newDirectory(boolean createCurDir) throws IOException {\n     @Test(timeout=60000)\n     public void testCleanStart() throws Exception {\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory(false))\n             .setLedgerDirNames(new String[] { newDirectory(false) })\n             .setBookiePort(bookiePort);\n@@ -114,7 +102,7 @@ public void testBadJournalCookie() throws Exception {\n         String journalDir = newDirectory();\n         String ledgerDir = newDirectory();\n         ServerConfiguration conf2 = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n             .setBookiePort(bookiePort);\n@@ -142,7 +130,7 @@ public void testDirectoryMissing() throws Exception {\n             newDirectory(), newDirectory(), newDirectory() };\n         String journalDir = newDirectory();\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(ledgerDirs)\n             .setBookiePort(bookiePort);\n@@ -183,7 +171,7 @@ public void testDirectoryAdded() throws Exception {\n         String ledgerDir0 = newDirectory();\n         String journalDir = newDirectory();\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir0 })\n             .setBookiePort(bookiePort);\n@@ -215,7 +203,7 @@ public void testDirectoryCleared() throws Exception {\n         String ledgerDir0 = newDirectory();\n         String journalDir = newDirectory();\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir0 , newDirectory() })\n             .setBookiePort(bookiePort);\n@@ -240,7 +228,7 @@ public void testDirectoryCleared() throws Exception {\n     @Test(timeout=60000)\n     public void testBookiePortChanged() throws Exception {\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n             .setBookiePort(bookiePort);\n@@ -266,7 +254,7 @@ public void testBookiePortChanged() throws Exception {\n     @Test(timeout=60000)\n     public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n             .setBookiePort(bookiePort);\n@@ -275,7 +263,7 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n         b.shutdown();\n \n         conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n             .setBookiePort(bookiePort);\n@@ -293,14 +281,14 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n     @Test(timeout=60000)\n     public void testVerifyCookieWithFormat() throws Exception {\n         ClientConfiguration adminConf = new ClientConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString());\n+            .setZkServers(zkUtil.getZooKeeperConnectString());\n \n         adminConf.setProperty(\"bookkeeper.format\", true);\n         // Format the BK Metadata and generate INSTANCEID\n         BookKeeperAdmin.format(adminConf, false, true);\n \n         ServerConfiguration bookieConf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n                 .setJournalDirName(newDirectory(false))\n                 .setLedgerDirNames(new String[] { newDirectory(false) })\n                 .setBookiePort(bookiePort);\n@@ -330,10 +318,15 @@ public void testVerifyCookieWithFormat() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testV2data() throws Exception {\n+        File journalDir = newV2JournalDirectory();\n+        tmpDirs.add(journalDir);\n+        File ledgerDir = newV2LedgerDirectory();\n+        tmpDirs.add(ledgerDir);\n+\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n-            .setJournalDirName(newV2JournalDirectory())\n-            .setLedgerDirNames(new String[] { newV2LedgerDirectory() })\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir.getPath())\n+            .setLedgerDirNames(new String[] { ledgerDir.getPath() })\n             .setBookiePort(bookiePort);\n         try {\n             Bookie b = new Bookie(conf);\n@@ -350,10 +343,15 @@ public void testV2data() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testV1data() throws Exception {\n+        File journalDir = newV1JournalDirectory();\n+        tmpDirs.add(journalDir);\n+        File ledgerDir = newV1LedgerDirectory();\n+        tmpDirs.add(ledgerDir);\n+\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n-            .setJournalDirName(newV1JournalDirectory())\n-            .setLedgerDirNames(new String[] { newV1LedgerDirectory() })\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir.getPath())\n+            .setLedgerDirNames(new String[]{ledgerDir.getPath()})\n             .setBookiePort(bookiePort);\n         try {\n             Bookie b = new Bookie(conf);\n@@ -374,7 +372,7 @@ public void testRestartWithHostNameAsBookieID() throws Exception {\n                 newDirectory() };\n         String journalDir = newDirectory();\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n                 .setJournalDirName(journalDir).setLedgerDirNames(ledgerDirs)\n                 .setBookiePort(bookiePort);\n         Bookie b = new Bookie(conf); // should work fine\n@@ -398,7 +396,7 @@ public void testRestartWithIpAddressAsBookieID() throws Exception {\n                 newDirectory() };\n         String journalDir = newDirectory();\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n                 .setJournalDirName(journalDir).setLedgerDirNames(ledgerDirs)\n                 .setBookiePort(bookiePort);\n         conf.setUseHostNameAsBookieID(true);\n@@ -419,10 +417,15 @@ public void testRestartWithIpAddressAsBookieID() throws Exception {\n      */\n     @Test(timeout = 60000)\n     public void testV2dataWithHostNameAsBookieID() throws Exception {\n+        File journalDir = newV2JournalDirectory();\n+        tmpDirs.add(journalDir);\n+        File ledgerDir = newV2LedgerDirectory();\n+        tmpDirs.add(ledgerDir);\n+\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n-                .setJournalDirName(newV2JournalDirectory())\n-                .setLedgerDirNames(new String[] { newV2LedgerDirectory() })\n+                .setZkServers(zkUtil.getZooKeeperConnectString())\n+                .setJournalDirName(journalDir.getPath())\n+                .setLedgerDirNames(new String[] { ledgerDir.getPath() })\n                 .setBookiePort(bookiePort);\n         try {\n             conf.setUseHostNameAsBookieID(true);\n@@ -443,7 +446,7 @@ public void testWriteToZooKeeper() throws Exception {\n         String[] ledgerDirs = new String[] { newDirectory(), newDirectory(), newDirectory() };\n         String journalDir = newDirectory();\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString()).setJournalDirName(journalDir)\n+                .setZkServers(zkUtil.getZooKeeperConnectString()).setJournalDirName(journalDir)\n                 .setLedgerDirNames(ledgerDirs).setBookiePort(bookiePort);\n         Bookie b = new Bookie(conf); // should work fine\n         b.start();\n@@ -470,7 +473,7 @@ public void testDeleteFromZooKeeper() throws Exception {\n         String[] ledgerDirs = new String[] { newDirectory(), newDirectory(), newDirectory() };\n         String journalDir = newDirectory();\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString()).setJournalDirName(journalDir)\n+                .setZkServers(zkUtil.getZooKeeperConnectString()).setJournalDirName(journalDir)\n                 .setLedgerDirNames(ledgerDirs).setBookiePort(bookiePort);\n         Bookie b = new Bookie(conf); // should work fine\n         b.start();"},{"sha":"488f4bfd8c191cd4519dd0f890aa999cbaded8d5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":23,"deletions":19,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -25,14 +25,17 @@\n import java.io.IOException;\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.bookkeeper.bookie.GarbageCollectorThread.EntryLogMetadata;\n import org.apache.bookkeeper.bookie.GarbageCollectorThread.ExtractionScanner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.util.IOUtils;\n+import org.apache.commons.io.FileUtils;\n import org.junit.After;\n import org.junit.Assert;\n-import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -42,15 +45,25 @@\n public class EntryLogTest {\n     private final static Logger LOG = LoggerFactory.getLogger(EntryLogTest.class);\n \n-    @Before\n-    public void setUp() throws Exception {\n+    final List<File> tempDirs = new ArrayList<File>();\n+\n+    File createTempDir(String prefix, String suffix) throws IOException {\n+        File dir = IOUtils.createTempDir(prefix, suffix);\n+        tempDirs.add(dir);\n+        return dir;\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        for (File dir : tempDirs) {\n+            FileUtils.deleteDirectory(dir);\n+        }\n+        tempDirs.clear();\n     }\n \n     @Test(timeout=60000)\n     public void testCorruptEntryLog() throws Exception {\n-        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bkTest\", \".dir\");\n         File curDir = Bookie.getCurrentDirectory(tmpDir);\n         Bookie.checkDirectoryStructure(curDir);\n \n@@ -100,9 +113,7 @@ private ByteBuffer generateEntry(long ledger, long entry) {\n \n     @Test(timeout=60000)\n     public void testMissingLogId() throws Exception {\n-        File tmpDir = File.createTempFile(\"entryLogTest\", \".dir\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"entryLogTest\", \".dir\");\n         File curDir = Bookie.getCurrentDirectory(tmpDir);\n         Bookie.checkDirectoryStructure(curDir);\n \n@@ -165,8 +176,7 @@ public void testMissingLogId() throws Exception {\n     /** Test that EntryLogger Should fail with FNFE, if entry logger directories does not exist*/\n     public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n             throws Exception {\n-        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n-        tmpDir.delete();\n+        File tmpDir = createTempDir(\"bkTest\", \".dir\");\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n         EntryLogger entryLogger = null;\n@@ -188,10 +198,8 @@ public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n      */\n     @Test(timeout=60000)\n     public void testAddEntryFailureOnDiskFull() throws Exception {\n-        File ledgerDir1 = File.createTempFile(\"bkTest\", \".dir\");\n-        ledgerDir1.delete();\n-        File ledgerDir2 = File.createTempFile(\"bkTest\", \".dir\");\n-        ledgerDir2.delete();\n+        File ledgerDir1 = createTempDir(\"bkTest\", \".dir\");\n+        File ledgerDir2 = createTempDir(\"bkTest\", \".dir\");\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(),\n                 ledgerDir2.getAbsolutePath() });\n@@ -216,8 +224,4 @@ public void testAddEntryFailureOnDiskFull() throws Exception {\n         Assert.assertTrue(0 == generateEntry(3, 1).compareTo(ledgerStorage.getEntry(3, 1)));\n     }\n \n-    @After\n-    public void tearDown() throws Exception {\n-    }\n-\n }"},{"sha":"19b6bcb91f5c370b15ef62c5eb550ec43417e3f5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":20,"deletions":16,"changes":36,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -31,8 +31,11 @@\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.SnapshotMap;\n+import org.apache.bookkeeper.util.IOUtils;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n@@ -57,16 +60,14 @@\n     ServerConfiguration conf;\n     File txnDir, ledgerDir;\n \n+    private final List<File> tempDirs = new ArrayList<File>();\n+\n     private Bookie bookie;\n \n     @Before\n     public void setUp() throws Exception {\n-        txnDir = File.createTempFile(\"ledgercache\", \"txn\");\n-        txnDir.delete();\n-        txnDir.mkdir();\n-        ledgerDir = File.createTempFile(\"ledgercache\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        txnDir = IOUtils.createTempDir(\"ledgercache\", \"txn\");\n+        ledgerDir = IOUtils.createTempDir(\"ledgercache\", \"ledger\");\n         // create current dir\n         new File(ledgerDir, BookKeeperConstants.CURRENT_DIR).mkdir();\n \n@@ -92,6 +93,15 @@ public void tearDown() throws Exception {\n         ledgerManagerFactory.uninitialize();\n         FileUtils.deleteDirectory(txnDir);\n         FileUtils.deleteDirectory(ledgerDir);\n+        for (File dir : tempDirs) {\n+            FileUtils.deleteDirectory(dir);\n+        }\n+    }\n+\n+    File createTempDir(String prefix, String suffix) throws IOException {\n+        File dir = IOUtils.createTempDir(prefix, suffix);\n+        tempDirs.add(dir);\n+        return dir;\n     }\n \n     private void newLedgerCache() throws IOException {\n@@ -251,10 +261,8 @@ public void testPageEviction() throws Exception {\n      */\n     @Test(timeout=30000)\n     public void testLedgerCacheFlushFailureOnDiskFull() throws Exception {\n-        File ledgerDir1 = File.createTempFile(\"bkTest\", \".dir\");\n-        ledgerDir1.delete();\n-        File ledgerDir2 = File.createTempFile(\"bkTest\", \".dir\");\n-        ledgerDir2.delete();\n+        File ledgerDir1 = createTempDir(\"bkTest\", \".dir\");\n+        File ledgerDir2 = createTempDir(\"bkTest\", \".dir\");\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(), ledgerDir2.getAbsolutePath() });\n \n@@ -301,14 +309,10 @@ public void testLedgerCacheFlushFailureOnDiskFull() throws Exception {\n     @Test(timeout=30000)\n     public void testIndexPageEvictionWriteOrder() throws Exception {\n         final int numLedgers = 10;\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()"},{"sha":"416062d1bd9bcd3af7e710f66376f2561ad5d41f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":23,"deletions":3,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -21,11 +21,17 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.io.FileUtils;\n \n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.util.IOUtils;\n import org.junit.Before;\n+import org.junit.After;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -39,11 +45,17 @@\n     File curDir;\n     LedgerDirsManager dirsManager;\n \n+    final List<File> tempDirs = new ArrayList<File>();\n+\n+    File createTempDir(String prefix, String suffix) throws IOException {\n+        File dir = IOUtils.createTempDir(prefix, suffix);\n+        tempDirs.add(dir);\n+        return dir;\n+    }\n+\n     @Before\n     public void setUp() throws Exception {\n-        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = createTempDir(\"bkTest\", \".dir\");\n         curDir = Bookie.getCurrentDirectory(tmpDir);\n         Bookie.checkDirectoryStructure(curDir);\n \n@@ -53,6 +65,14 @@ public void setUp() throws Exception {\n         dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n     }\n \n+    @After\n+    public void tearDown() throws Exception {\n+        for (File dir : tempDirs) {\n+            FileUtils.deleteDirectory(dir);\n+        }\n+        tempDirs.clear();\n+    }\n+\n     @Test(timeout=60000)\n     public void testPickWritableDirExclusive() throws Exception {\n         try {"},{"sha":"84af7a7557ad5f621b5ae4d49c3f0275a870c2eb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":39,"deletions":48,"changes":87,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -39,31 +39,19 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.test.PortManager;\n-import org.apache.bookkeeper.test.ZooKeeperUtil;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.junit.After;\n-import org.junit.Before;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.IOUtils;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class UpgradeTest {\n+public class UpgradeTest extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(FileInfo.class);\n \n-    ZooKeeperUtil zkutil;\n-    ZooKeeper zkc = null;\n     final static int bookiePort = PortManager.nextFreePort();\n \n-    @Before\n-    public void setupZooKeeper() throws Exception {\n-        zkutil = new ZooKeeperUtil();\n-        zkutil.startServer();\n-        zkc = zkutil.getZooKeeperClient();\n-    }\n-\n-    @After\n-    public void tearDownZooKeeper() throws Exception {\n-        zkutil.killServer();\n+    public UpgradeTest() {\n+        super(0);\n     }\n \n     static void writeLedgerDir(File dir,\n@@ -115,23 +103,19 @@ static JournalChannel writeJournal(File journalDir, int numEntries, byte[] maste\n         return jc;\n     }\n \n-    static String newV1JournalDirectory() throws Exception {\n-        File d = File.createTempFile(\"bookie\", \"tmpdir\");\n-        d.delete();\n-        d.mkdirs();\n+    static File newV1JournalDirectory() throws Exception {\n+        File d = IOUtils.createTempDir(\"bookie\", \"tmpdir\");\n         writeJournal(d, 100, \"foobar\".getBytes()).close();\n-        return d.getPath();\n+        return d;\n     }\n-\n-    static String newV1LedgerDirectory() throws Exception {\n-        File d = File.createTempFile(\"bookie\", \"tmpdir\");\n-        d.delete();\n-        d.mkdirs();\n+              \n+    static File newV1LedgerDirectory() throws Exception {\n+        File d = IOUtils.createTempDir(\"bookie\", \"tmpdir\");\n         writeLedgerDir(d, \"foobar\".getBytes());\n-        return d.getPath();\n+        return d;\n     }\n \n-    static void createVersion2File(String dir) throws Exception {\n+    static void createVersion2File(File dir) throws Exception {\n         File versionFile = new File(dir, \"VERSION\");\n \n         FileOutputStream fos = new FileOutputStream(versionFile);\n@@ -147,14 +131,14 @@ static void createVersion2File(String dir) throws Exception {\n         }\n     }\n \n-    static String newV2JournalDirectory() throws Exception {\n-        String d = newV1JournalDirectory();\n+    static File newV2JournalDirectory() throws Exception {\n+        File d = newV1JournalDirectory();\n         createVersion2File(d);\n         return d;\n     }\n \n-    static String newV2LedgerDirectory() throws Exception {\n-        String d = newV1LedgerDirectory();\n+    static File newV2LedgerDirectory() throws Exception {\n+        File d = newV1LedgerDirectory();\n         createVersion2File(d);\n         return d;\n     }\n@@ -199,28 +183,35 @@ private static void testUpgradeProceedure(String zkServers, String journalDir, S\n \n     @Test(timeout=60000)\n     public void testUpgradeV1toCurrent() throws Exception {\n-        String journalDir = newV1JournalDirectory();\n-        String ledgerDir = newV1LedgerDirectory();\n-        testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n+        File journalDir = newV1JournalDirectory();\n+        tmpDirs.add(journalDir);\n+        File ledgerDir = newV1LedgerDirectory();\n+        tmpDirs.add(ledgerDir);\n+        testUpgradeProceedure(zkUtil.getZooKeeperConnectString(), journalDir.getPath(), ledgerDir.getPath());\n     }\n \n     @Test(timeout=60000)\n     public void testUpgradeV2toCurrent() throws Exception {\n-        String journalDir = newV2JournalDirectory();\n-        String ledgerDir = newV2LedgerDirectory();\n-        testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n+        File journalDir = newV2JournalDirectory();\n+        tmpDirs.add(journalDir);\n+        File ledgerDir = newV2LedgerDirectory();\n+        tmpDirs.add(ledgerDir);\n+        testUpgradeProceedure(zkUtil.getZooKeeperConnectString(), journalDir.getPath(), ledgerDir.getPath());\n     }\n \n     @Test(timeout=60000)\n     public void testUpgradeCurrent() throws Exception {\n-        String journalDir = newV2JournalDirectory();\n-        String ledgerDir = newV2LedgerDirectory();\n-        testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n+        File journalDir = newV2JournalDirectory();\n+        tmpDirs.add(journalDir);\n+        File ledgerDir = newV2LedgerDirectory();\n+        tmpDirs.add(ledgerDir);\n+        testUpgradeProceedure(zkUtil.getZooKeeperConnectString(), journalDir.getPath(), ledgerDir.getPath());\n+\n         // Upgrade again\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n-            .setZkServers(zkutil.getZooKeeperConnectString())\n-            .setJournalDirName(journalDir)\n-            .setLedgerDirNames(new String[] { ledgerDir })\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir.getPath())\n+            .setLedgerDirNames(new String[] { ledgerDir.getPath() })\n             .setBookiePort(bookiePort);\n         FileSystemUpgrade.upgrade(conf); // should work fine with current directory\n         Bookie b = new Bookie(conf);\n@@ -233,8 +224,8 @@ public void testCommandLine() throws Exception {\n         PrintStream origerr = System.err;\n         PrintStream origout = System.out;\n \n-        File output = File.createTempFile(\"bookie\", \"stdout\");\n-        File erroutput = File.createTempFile(\"bookie\", \"stderr\");\n+        File output = IOUtils.createTempFileAndDeleteOnExit(\"bookie\", \"stdout\");\n+        File erroutput = IOUtils.createTempFileAndDeleteOnExit(\"bookie\", \"stderr\");\n         System.setOut(new PrintStream(output));\n         System.setErr(new PrintStream(erroutput));\n         try {\n@@ -247,7 +238,7 @@ public void testCommandLine() throws Exception {\n                 assertTrue(\"Wrong exception \" + iae.getMessage(),\n                            iae.getMessage().contains(\"without configuration\"));\n             }\n-            File f = File.createTempFile(\"bookie\", \"tmpconf\");\n+            File f = IOUtils.createTempFileAndDeleteOnExit(\"bookie\", \"tmpconf\");\n             try {\n                 // test without upgrade op\n                 FileSystemUpgrade.main(new String[] { \"--conf\", f.getPath() });"},{"sha":"b8020c65a3edcc3a147b0b676ace9269268c3061","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -160,7 +160,6 @@ public void testShutdown() throws Exception {\n         int indexOfDownBookie = bs.indexOf(auditor);\n         bs.remove(indexOfDownBookie);\n         bsConfs.remove(indexOfDownBookie);\n-        tmpDirs.remove(indexOfDownBookie);\n         List<String> children = zkc.getChildren(electionPath, false);\n         for (String child : children) {\n             byte[] data = zkc.getData(electionPath + '/' + child, false, null);\n@@ -188,7 +187,6 @@ public void testRestartAuditorBookieAfterCrashing() throws Exception {\n                 .get(indexOfDownBookie);\n         bs.remove(indexOfDownBookie);\n         bsConfs.remove(indexOfDownBookie);\n-        tmpDirs.remove(indexOfDownBookie);\n         auditorElectors.remove(addr);\n         startBookie(serverConfiguration);\n         // starting corresponding auditor elector"},{"sha":"fbb79b0bb6c93bd44110df842eca931db178129c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -46,6 +46,7 @@\n import org.apache.bookkeeper.replication.Auditor;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.util.IOUtils;\n import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n@@ -108,9 +109,17 @@ public void tearDown() throws Exception {\n         stopBKCluster();\n         // stop zookeeper service\n         stopZKCluster();\n+        // cleanup temp dirs\n+        cleanupTempDirs();\n         LOG.info(\"Tearing down test {}\", getClass());\n     }\n \n+    protected File createTempDir(String prefix, String suffix) throws IOException {\n+        File dir = IOUtils.createTempDir(prefix, suffix);\n+        tmpDirs.add(dir);\n+        return dir;\n+    }\n+\n     /**\n      * Start zookeeper cluster\n      *\n@@ -169,16 +178,16 @@ protected void stopBKCluster() throws Exception {\n             }\n         }\n         bs.clear();\n+    }\n+\n+    protected void cleanupTempDirs() throws Exception {\n         for (File f : tmpDirs) {\n             FileUtils.deleteDirectory(f);\n         }\n     }\n \n     protected ServerConfiguration newServerConfiguration() throws Exception {\n-        File f = File.createTempFile(\"bookie\", \"test\");\n-        tmpDirs.add(f);\n-        f.delete();\n-        f.mkdir();\n+        File f = createTempDir(\"bookie\", \"test\");\n \n         int port = PortManager.nextFreePort();\n         return newServerConfiguration(port, zkUtil.getZooKeeperConnectString(),"},{"sha":"285cf7162427f667e4c325e1affe933cdf1fd97a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -37,6 +37,7 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+import org.apache.bookkeeper.util.IOUtils;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n@@ -60,10 +61,7 @@\n \n     @Before\n     public void setUp() throws Exception {\n-        tmpDir = File.createTempFile(\"bookie\", \"test\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n-\n+        tmpDir = IOUtils.createTempDir(\"bookieClient\", \"test\");\n         // Since this test does not rely on the BookKeeper client needing to\n         // know via ZooKeeper which Bookies are available, okay, so pass in null\n         // for the zkServers input parameter when constructing the BookieServer."},{"sha":"a3bd4d677f596d20f49bb41ef2c49481d6026dc9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -31,6 +31,7 @@\n import java.util.HashSet;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.util.IOUtils;\n \n public class BookieZKExpireTest extends BookKeeperClusterTestCase {\n \n@@ -46,9 +47,7 @@ public BookieZKExpireTest() {\n     public void testBookieServerZKExpireBehaviour() throws Exception {\n         BookieServer server = null;\n         try {\n-            File f = File.createTempFile(\"bookieserver\", \"test\");\n-            f.delete();\n-            f.mkdir();\n+            File f = createTempDir(\"bookieserver\", \"test\");\n \n             HashSet<Thread> threadset = new HashSet<Thread>();\n             int threadCount = Thread.activeCount();"},{"sha":"94319df6dbeb7f3f47aa073c12f19cd29f3e537f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -26,6 +26,8 @@\n import java.nio.ByteBuffer;\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n@@ -52,6 +54,14 @@\n     int recvTimeout = 10000;\n     Semaphore throttle;\n     ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n+    final List<File> tempDirs = new ArrayList<File>();\n+\n+    private File createTempDir(String prefix, String suffix, File parent) throws IOException {\n+        File dir = File.createTempFile(prefix, suffix, parent);\n+        dir.delete();\n+        tempDirs.add(dir);\n+        return dir;\n+    }\n \n     @Before\n     public void setUp() throws Exception {\n@@ -63,11 +73,10 @@ public void setUp() throws Exception {\n         if (ledgerDirName != null) {\n             ledgerDir = new File(ledgerDirName);\n         }\n-        File tmpFile = File.createTempFile(\"book\", \".txn\", txnDir);\n-        tmpFile.delete();\n+        File tmpFile = createTempDir(\"book\", \".txn\", txnDir);\n         txnDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n         txnDir.mkdirs();\n-        tmpFile = File.createTempFile(\"book\", \".ledger\", ledgerDir);\n+        tmpFile = createTempDir(\"book\", \".ledger\", ledgerDir);\n         ledgerDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n         ledgerDir.mkdirs();\n "},{"sha":"771a8a173230a7b504e5e2794aa3242df5d85139","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -30,6 +30,7 @@\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.util.IOUtils;\n import org.junit.Test;\n \n import static org.junit.Assert.*;\n@@ -227,10 +228,8 @@ private void startNewBookieWithMultipleLedgerDirs(int numOfLedgerDirs)\n \n         File[] ledgerDirs = new File[numOfLedgerDirs];\n         for (int i = 0; i < numOfLedgerDirs; i++) {\n-            File dir = File.createTempFile(\"bookie\", \"test\");\n+            File dir = createTempDir(\"bookie\", \"test\");\n             tmpDirs.add(dir);\n-            dir.delete();\n-            dir.mkdir();\n             ledgerDirs[i] = dir;\n         }\n "},{"sha":"55641303317ecdd338ddc7c7e51e382af6ce88a3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":28,"deletions":30,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -24,17 +24,22 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.io.IOException;\n import java.io.File;\n import java.net.InetAddress;\n import java.util.Arrays;\n import java.util.Enumeration;\n+import java.util.ArrayList;\n+import java.util.List;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.FileSystemUpgrade;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.util.IOUtils;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -54,6 +59,15 @@ static void waitUp(int port) throws Exception {\n             Thread.sleep(500);\n         }\n     }\n+\n+    final List<File> tempDirs = new ArrayList<File>();\n+\n+    File createTempDir(String prefix, String suffix) throws IOException {\n+        File dir = IOUtils.createTempDir(prefix, suffix);\n+        tempDirs.add(dir);\n+        return dir;\n+    }\n+\n     @Before\n     public void startZooKeeperServer() throws Exception {\n         zkUtil.startServer();\n@@ -62,6 +76,10 @@ public void startZooKeeperServer() throws Exception {\n     @After\n     public void stopZooKeeperServer() throws Exception {\n         zkUtil.killServer();\n+        for (File dir : tempDirs) {\n+            FileUtils.deleteDirectory(dir);\n+        }\n+        tempDirs.clear();\n     }\n \n     /**\n@@ -459,12 +477,8 @@ void close() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testOldCookieAccessingNewCluster() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n \n         int port = PortManager.nextFreePort();\n \n@@ -517,12 +531,8 @@ public void testOldCookieAccessingNewCluster() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testCompat400() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n \n         int port = PortManager.nextFreePort();\n         // start server, upgrade\n@@ -605,12 +615,8 @@ public void testCompat400() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testCompat410() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n \n         int port = PortManager.nextFreePort();\n         // start server, upgrade\n@@ -727,12 +733,8 @@ public void testCompat410() throws Exception {\n      */\n     @Test(timeout = 60000)\n     public void testCompatReads() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n \n         int port = PortManager.nextFreePort();\n         // start server, upgrade\n@@ -781,12 +783,8 @@ public void testCompatReads() throws Exception {\n      */\n     @Test(timeout = 60000)\n     public void testCompatWrites() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n+        File journalDir = createTempDir(\"bookie\", \"journal\");\n+        File ledgerDir = createTempDir(\"bookie\", \"ledger\");\n \n         int port = PortManager.nextFreePort();\n         // start server, upgrade"},{"sha":"769abbc65ae4b0ab9314c06cc6f49f975e06ef93","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -26,6 +26,7 @@\n \n import java.net.InetSocketAddress;\n \n+import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n@@ -76,9 +77,7 @@ public void startServer() throws Exception {\n         LOG.debug(\"Running ZK server\");\n         // ServerStats.registerAsConcrete();\n         ClientBase.setupTestEnv();\n-        ZkTmpDir = File.createTempFile(\"zookeeper\", \"test\");\n-        ZkTmpDir.delete();\n-        ZkTmpDir.mkdir();\n+        ZkTmpDir = IOUtils.createTempDir(\"zookeeper\", \"test\");\n \n         // start the server and client.\n         restartServer();"},{"sha":"ac1cb9f8b32c404a092c32cbf2490fb5448e731e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/0e3d95c9411289b89961e434ce760e3726290761/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java?ref=0e3d95c9411289b89961e434ce760e3726290761","patch":"@@ -21,10 +21,14 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n import org.apache.bookkeeper.util.DiskChecker.DiskWarnThresholdException;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -36,17 +40,33 @@\n \n     DiskChecker diskChecker;\n \n+    final List<File> tempDirs = new ArrayList<File>();\n+\n     @Before\n     public void setup() {\n         diskChecker = new DiskChecker(0.95f, 0.95f);\n     }\n \n+    @After\n+    public void tearDown() throws Exception {\n+        for (File dir : tempDirs) {\n+            FileUtils.deleteDirectory(dir);\n+        }\n+        tempDirs.clear();\n+    }\n+\n+    File createTempDir(String prefix, String suffix) throws IOException {\n+        File dir = IOUtils.createTempDir(prefix, suffix);\n+        tempDirs.add(dir);\n+        return dir;\n+    }\n+\n     /**\n      * Check the disk full\n      */\n     @Test(expected = DiskOutOfSpaceException.class)\n     public void testCheckDiskFull() throws IOException {\n-        File file = File.createTempFile(\"DiskCheck\", \"test\");\n+        File file = createTempDir(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n         float threshold =\n@@ -57,7 +77,7 @@ public void testCheckDiskFull() throws IOException {\n \n     @Test(expected = DiskWarnThresholdException.class)\n     public void testDiskWarnThresholdException() throws IOException {\n-        File file = File.createTempFile(\"DiskCheck\", \"test\");\n+        File file = createTempDir(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n         float diskSpaceThreshold =\n@@ -74,7 +94,7 @@ public void testDiskWarnThresholdException() throws IOException {\n      */\n     @Test(timeout = 30000, expected = DiskOutOfSpaceException.class)\n     public void testCheckDiskFullOnNonExistFile() throws IOException {\n-        File file = File.createTempFile(\"DiskCheck\", \"test\");\n+        File file = createTempDir(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n         float threshold = (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;\n@@ -88,9 +108,7 @@ public void testCheckDiskFullOnNonExistFile() throws IOException {\n      */\n     @Test(timeout = 30000, expected = DiskErrorException.class)\n     public void testCheckDiskErrorForFile() throws Exception {\n-        File parent = File.createTempFile(\"DiskCheck\", \"test\");\n-        parent.delete();\n-        parent.mkdir();\n+        File parent = createTempDir(\"DiskCheck\", \"test\");\n         File child = File.createTempFile(\"DiskCheck\", \"test\", parent);\n         diskChecker.checkDir(child);\n     }\n@@ -100,9 +118,7 @@ public void testCheckDiskErrorForFile() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testCheckDiskErrorForDir() throws Exception {\n-        File parent = File.createTempFile(\"DiskCheck\", \"test\");\n-        parent.delete();\n-        parent.mkdir();\n+        File parent = createTempDir(\"DiskCheck\", \"test\");\n         File child = File.createTempFile(\"DiskCheck\", \"test\", parent);\n         child.delete();\n         child.mkdir();"}]}

