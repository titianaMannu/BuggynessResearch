{"sha":"0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZWVlOWU1Y2Q0YjViM2FmZmQ5MzBhNzM2YTNjYzJkNjhhOGRhOTc2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T05:04:33Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T05:04:33Z"},"message":"BOOKKEEPER-300: Create Bookie format command (Vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1381870 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"247d71acb4f794d90590293c9898adb16843f447","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/247d71acb4f794d90590293c9898adb16843f447"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","html_url":"https://github.com/apache/bookkeeper/commit/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"64fa78224ed46189032a616f00e1755fd71d93e2","url":"https://api.github.com/repos/apache/bookkeeper/commits/64fa78224ed46189032a616f00e1755fd71d93e2","html_url":"https://github.com/apache/bookkeeper/commit/64fa78224ed46189032a616f00e1755fd71d93e2"}],"stats":{"total":1609,"additions":1483,"deletions":126},"files":[{"sha":"7ab5a99b80499a50c424c00c4b1345c5cc744867","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -122,6 +122,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-272: Provide automatic mechanism to know bookie failures (rakeshr via ivank)\n \n+        BOOKKEEPER-300: Create Bookie format command (Vinay via sijie)\n+\n       hedwig-server:\n \n         BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)"},{"sha":"5f719af82feda52f6e4f2f5d22e2360b28963e2c","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -80,7 +80,7 @@ where command is one of:\n     bookie              Run a bookie server\n     localbookie <n>     Run a test ensemble of <n> bookies locally\n     upgrade             Upgrade bookie filesystem\n-    shell               Run admin shell to read/check bookie files\n+    shell               Run shell for admin commands\n     help                This help message\n \n or command is the full name of a class with a defined main() method."},{"sha":"62e747ebe86b591914a5d9995364d97988ba9c39","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":95,"deletions":0,"changes":95,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -46,7 +46,9 @@\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n@@ -63,6 +65,8 @@\n  */\n \n public class Bookie extends Thread {\n+    public static final String INSTANCEID = \"INSTANCEID\";\n+\n     static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n \n     final File journalDirectory;\n@@ -274,8 +278,12 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n             return;\n         }\n         try {\n+            String instanceId = getInstanceId(zk);\n             boolean newEnv = false;\n             Cookie masterCookie = Cookie.generateCookie(conf);\n+            if (null != instanceId) {\n+                masterCookie.setInstanceId(instanceId);\n+            }\n             try {\n                 Cookie zkCookie = Cookie.readFromZooKeeper(zk, conf);\n                 masterCookie.verify(zkCookie);\n@@ -332,6 +340,19 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n         }\n     }\n \n+    private String getInstanceId(ZooKeeper zk) throws KeeperException,\n+            InterruptedException {\n+        String instanceId = null;\n+        try {\n+            byte[] data = zk.getData(conf.getZkLedgersRootPath() + \"/\"\n+                    + INSTANCEID, false, null);\n+            instanceId = new String(data);\n+        } catch (KeeperException.NoNodeException e) {\n+            LOG.warn(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n+        }\n+        return instanceId;\n+    }\n+\n     public static File getCurrentDirectory(File dir) {\n         return new File(dir, CURRENT_DIR);\n     }\n@@ -792,6 +813,80 @@ synchronized public void waitZero() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Format the bookie server data\n+     * \n+     * @param conf\n+     *            ServerConfiguration\n+     * @param isInteractive\n+     *            Whether format should ask prompt for confirmation if old data\n+     *            exists or not.\n+     * @param force\n+     *            If non interactive and force is true, then old data will be\n+     *            removed without confirm prompt.\n+     * @return Returns true if the format is success else returns false\n+     */\n+    public static boolean format(ServerConfiguration conf,\n+            boolean isInteractive, boolean force) {\n+        File journalDir = conf.getJournalDir();\n+        if (journalDir.exists() && journalDir.isDirectory()\n+                && journalDir.list().length != 0) {\n+            try {\n+                boolean confirm = false;\n+                if (!isInteractive) {\n+                    // If non interactive and force is set, then delete old\n+                    // data.\n+                    if (force) {\n+                        confirm = true;\n+                    } else {\n+                        confirm = false;\n+                    }\n+                } else {\n+                    confirm = IOUtils\n+                            .confirmPrompt(\"Are you sure to format Bookie data..?\");\n+                }\n+\n+                if (!confirm) {\n+                    LOG.error(\"Bookie format aborted!!\");\n+                    return false;\n+                }\n+            } catch (IOException e) {\n+                LOG.error(\"Error during bookie format\", e);\n+                return false;\n+            }\n+        }\n+        if (!cleanDir(journalDir)) {\n+            LOG.error(\"Formatting journal directory failed\");\n+            return false;\n+        }\n+\n+        File[] ledgerDirs = conf.getLedgerDirs();\n+        for (File dir : ledgerDirs) {\n+            if (!cleanDir(dir)) {\n+                LOG.error(\"Formatting ledger directory \" + dir + \" failed\");\n+                return false;\n+            }\n+        }\n+        LOG.info(\"Bookie format completed successfully\");\n+        return true;\n+    }\n+\n+    private static boolean cleanDir(File dir) {\n+        if (dir.exists()) {\n+            for (File child : dir.listFiles()) {\n+                boolean delete = FileUtils.deleteQuietly(child);\n+                if (!delete) {\n+                    LOG.error(\"Not able to delete \" + child);\n+                    return false;\n+                }\n+            }\n+        } else if (!dir.mkdirs()) {\n+            LOG.error(\"Not able to create the directory \" + dir);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n     /**\n      * @param args\n      * @throws IOException"},{"sha":"f2bbc2fc21f0eb64b1440de9dcfaee12f902f06c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -126,7 +126,11 @@ public LedgerFencedException() {\n \n     public static class InvalidCookieException extends BookieException {\n         public InvalidCookieException() {\n-            this(null);\n+            this(\"\");\n+        }\n+\n+        public InvalidCookieException(String reason) {\n+            super(Code.InvalidCookieException, reason);\n         }\n \n         public InvalidCookieException(Throwable cause) {"},{"sha":"2a39834694d6f6d062148c6c7ee0b6011cc13a30","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":169,"deletions":1,"changes":170,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.net.InetSocketAddress;\n import java.nio.ByteBuffer;\n import java.util.Formatter;\n import java.util.HashMap;\n@@ -29,13 +30,17 @@\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.Journal.LastLogMark;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.Tool;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.cli.BasicParser;\n+import org.apache.commons.cli.MissingArgumentException;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n@@ -45,14 +50,17 @@\n import org.slf4j.LoggerFactory;\n \n /**\n- * Bookie Shell to read/check bookie files.\n+ * Bookie Shell is to provide utilities for users to administer a bookkeeper cluster.\n  */\n public class BookieShell implements Tool {\n \n     static final Logger LOG = LoggerFactory.getLogger(BookieShell.class);\n \n     static final String ENTRY_FORMATTER_CLASS = \"entryFormatterClass\";\n \n+    static final String CMD_METAFORMAT = \"metaformat\";\n+    static final String CMD_BOOKIEFORMAT = \"bookieformat\";\n+    static final String CMD_RECOVER = \"recover\";\n     static final String CMD_LEDGER = \"ledger\";\n     static final String CMD_READLOG = \"readlog\";\n     static final String CMD_READJOURNAL = \"readjournal\";\n@@ -108,6 +116,160 @@ public void printUsage() {\n         }\n     }\n \n+    /**\n+     * Format the bookkeeper metadata present in zookeeper\n+     */\n+    class MetaFormatCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        MetaFormatCmd() {\n+            super(CMD_METAFORMAT);\n+            opts.addOption(\"n\", \"nonInteractive\", false,\n+                    \"Whether to confirm if old data exists..?\");\n+            opts.addOption(\"f\", \"force\", false,\n+                    \"If [nonInteractive] is specified, then whether\"\n+                            + \" to force delete the old data without prompt.\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Format bookkeeper metadata in zookeeper\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"metaformat [-nonInteractive] [-force]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            boolean interactive = (!cmdLine.hasOption(\"n\"));\n+            boolean force = cmdLine.hasOption(\"f\");\n+\n+            ClientConfiguration adminConf = new ClientConfiguration(bkConf);\n+            boolean result = BookKeeperAdmin.format(adminConf, interactive,\n+                    force);\n+            return (result) ? 0 : 1;\n+        }\n+    }\n+\n+    /**\n+     * Formats the local data present in current bookie server\n+     */\n+    class BookieFormatCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public BookieFormatCmd() {\n+            super(CMD_BOOKIEFORMAT);\n+            opts.addOption(\"n\", \"nonInteractive\", false,\n+                    \"Whether to confirm if old data exists..?\");\n+            opts.addOption(\"f\", \"force\", false,\n+                    \"If [nonInteractive] is specified, then whether\"\n+                            + \" to force delete the old data without prompt..?\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Format the current server contents\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"bookieformat [-nonInteractive] [-force]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            boolean interactive = (!cmdLine.hasOption(\"n\"));\n+            boolean force = cmdLine.hasOption(\"f\");\n+\n+            ServerConfiguration conf = new ServerConfiguration(bkConf);\n+            boolean result = Bookie.format(conf, interactive, force);\n+            return (result) ? 0 : 1;\n+        }\n+    }\n+\n+    /**\n+     * Recover command for ledger data recovery for failed bookie\n+     */\n+    class RecoverCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public RecoverCmd() {\n+            super(CMD_RECOVER);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Recover the ledger data for failed bookie\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"recover <bookieSrc> [bookieDest]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] args = cmdLine.getArgs();\n+            if (args.length < 1) {\n+                throw new MissingArgumentException(\n+                        \"'bookieSrc' argument required\");\n+            }\n+\n+            ClientConfiguration adminConf = new ClientConfiguration(bkConf);\n+            BookKeeperAdmin admin = new BookKeeperAdmin(adminConf);\n+            try {\n+                return bkRecovery(admin, args);\n+            } finally {\n+                if (null != admin) {\n+                    admin.close();\n+                }\n+            }\n+        }\n+\n+        private int bkRecovery(BookKeeperAdmin bkAdmin, String[] args)\n+                throws InterruptedException, BKException {\n+            final String bookieSrcString[] = args[0].split(\":\");\n+            if (bookieSrcString.length != 2) {\n+                System.err.println(\"BookieSrc inputted has invalid format\"\n+                        + \"(host:port expected): \" + args[0]);\n+                return -1;\n+            }\n+            final InetSocketAddress bookieSrc = new InetSocketAddress(\n+                    bookieSrcString[0], Integer.parseInt(bookieSrcString[1]));\n+            InetSocketAddress bookieDest = null;\n+            if (args.length >= 2) {\n+                final String bookieDestString[] = args[1].split(\":\");\n+                if (bookieDestString.length < 2) {\n+                    System.err.println(\"BookieDest inputted has invalid format\"\n+                            + \"(host:port expected): \" + args[1]);\n+                    return -1;\n+                }\n+                bookieDest = new InetSocketAddress(bookieDestString[0],\n+                        Integer.parseInt(bookieDestString[1]));\n+            }\n+\n+            bkAdmin.recoverBookieData(bookieSrc, bookieDest);\n+            return 0;\n+        }\n+    }\n+\n     /**\n      * Ledger Command Handles ledger related operations\n      */\n@@ -334,6 +496,9 @@ public void printUsage() {\n     final Map<String, Command> commands;\n     {\n         commands = new HashMap<String, Command>();\n+        commands.put(CMD_METAFORMAT, new MetaFormatCmd());\n+        commands.put(CMD_BOOKIEFORMAT, new BookieFormatCmd());\n+        commands.put(CMD_RECOVER, new RecoverCmd());\n         commands.put(CMD_LEDGER, new LedgerCmd());\n         commands.put(CMD_READLOG, new ReadLogCmd());\n         commands.put(CMD_READJOURNAL, new ReadJournalCmd());\n@@ -355,6 +520,9 @@ public void setConf(Configuration conf) throws Exception {\n     private static void printShellUsage() {\n         System.err.println(\"Usage: BookieShell [-conf configuration] <command>\");\n         System.err.println();\n+        System.err.println(\"       metaformat   [-nonInteractive] [-force]\");\n+        System.err.println(\"       bookieformat [-nonInteractive] [-force]\");\n+        System.err.println(\"       recover      <bookieSrc> [bookieDest]\");\n         System.err.println(\"       ledger      [-meta] <ledger_id>\");\n         System.err.println(\"       readlog     [-msg] <entry_log_id|entry_log_file_name>\");\n         System.err.println(\"       readjournal [-msg] <journal_id|journal_file_name>\");"},{"sha":"36a7af4865d0a4032f0e6e6ba843426171213c87","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":88,"deletions":27,"changes":115,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -20,29 +20,33 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import java.io.BufferedReader;\n+import java.io.EOFException;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.FileReader;\n import java.io.OutputStreamWriter;\n import java.io.BufferedWriter;\n import java.io.IOException;\n-import java.util.Scanner;\n+import java.io.StringReader;\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n-import java.nio.ByteBuffer;\n-\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.DataFormats.CookieFormat;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.protobuf.TextFormat;\n+\n /**\n  * When a bookie starts for the first time it generates  a cookie, and stores\n  * the cookie in zookeeper as well as in the each of the local filesystem\n@@ -59,30 +63,57 @@\n class Cookie {\n     static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n \n-    static final int CURRENT_COOKIE_LAYOUT_VERSION = 3;\n+    static final int CURRENT_COOKIE_LAYOUT_VERSION = 4;\n     static final String COOKIE_NODE = \"cookies\";\n     static final String VERSION_FILENAME = \"VERSION\";\n     private int layoutVersion = 0;\n     private String bookieHost = null;\n     private String journalDir = null;\n     private String ledgerDirs = null;\n     private int znodeVersion = -1;\n+    private String instanceId = null;\n \n     private Cookie() {\n     }\n \n-    public void verify(Cookie c)\n-            throws BookieException.InvalidCookieException {\n-        if (!(c.layoutVersion == layoutVersion\n-              && c.layoutVersion >= 3\n-              && c.bookieHost.equals(bookieHost)\n-              && c.journalDir.equals(journalDir)\n-              && c.ledgerDirs.equals(ledgerDirs))) {\n-            throw new BookieException.InvalidCookieException();\n+    public void verify(Cookie c) throws BookieException.InvalidCookieException {\n+        String errMsg;\n+        if (c.layoutVersion < 3 && c.layoutVersion != layoutVersion) {\n+            errMsg = \"Cookie is of too old version \" + c.layoutVersion;\n+            LOG.error(errMsg);\n+            throw new BookieException.InvalidCookieException(errMsg);\n+        } else if (!(c.layoutVersion >= 3 && c.bookieHost.equals(bookieHost)\n+                && c.journalDir.equals(journalDir) && c.ledgerDirs\n+                    .equals(ledgerDirs))) {\n+            errMsg = \"Cookie [\" + this + \"] is not matching with [\" + c + \"]\";\n+            throw new BookieException.InvalidCookieException(errMsg);\n+        } else if ((instanceId == null && c.instanceId != null)\n+                || (instanceId != null && !instanceId.equals(c.instanceId))) {\n+            // instanceId should be same in both cookies\n+            errMsg = \"instanceId \" + instanceId\n+                    + \" is not matching with \" + c.instanceId;\n+            throw new BookieException.InvalidCookieException(errMsg);\n         }\n     }\n \n     public String toString() {\n+        if (layoutVersion <= 3) {\n+            return toStringVersion3();\n+        }\n+        CookieFormat.Builder builder = CookieFormat.newBuilder();\n+        builder.setBookieHost(bookieHost);\n+        builder.setJournalDir(journalDir);\n+        builder.setLedgerDirs(ledgerDirs);\n+        if (null != instanceId) {\n+            builder.setInstanceId(instanceId);\n+        }\n+        StringBuilder b = new StringBuilder();\n+        b.append(CURRENT_COOKIE_LAYOUT_VERSION).append(\"\\n\");\n+        b.append(TextFormat.printToString(builder.build()));\n+        return b.toString();\n+    }\n+\n+    private String toStringVersion3() {\n         StringBuilder b = new StringBuilder();\n         b.append(CURRENT_COOKIE_LAYOUT_VERSION).append(\"\\n\")\n             .append(bookieHost).append(\"\\n\")\n@@ -91,19 +122,34 @@ public String toString() {\n         return b.toString();\n     }\n \n-    private static Cookie parse(Scanner s) throws IOException {\n-        Cookie c  = new Cookie();\n-        if (!s.hasNextInt()) {\n-            throw new IOException(\"Invalid string, cannot parse cookie.\");\n+    private static Cookie parse(BufferedReader reader) throws IOException {\n+        Cookie c = new Cookie();\n+        String line = reader.readLine();\n+        if (null == line) {\n+            throw new EOFException(\"Exception in parsing cookie\");\n         }\n-        c.layoutVersion = s.nextInt();\n-        if (c.layoutVersion >= 3) {\n-            s.nextLine();\n-            c.bookieHost = s.nextLine();\n-            c.journalDir = s.nextLine();\n-            c.ledgerDirs = s.nextLine();\n+        try {\n+            c.layoutVersion = Integer.parseInt(line.trim());\n+        } catch (NumberFormatException e) {\n+            throw new IOException(\"Invalid string '\" + line.trim()\n+                    + \"', cannot parse cookie.\");\n+        }\n+        if (c.layoutVersion == 3) {\n+            c.bookieHost = reader.readLine();\n+            c.journalDir = reader.readLine();\n+            c.ledgerDirs = reader.readLine();\n+        } else if (c.layoutVersion >= 4) {\n+            CookieFormat.Builder builder = CookieFormat.newBuilder();\n+            TextFormat.merge(reader, builder);\n+            CookieFormat data = builder.build();\n+            c.bookieHost = data.getBookieHost();\n+            c.journalDir = data.getJournalDir();\n+            c.ledgerDirs = data.getLedgerDirs();\n+            // Since InstanceId is optional\n+            if (null != data.getInstanceId() && !data.getInstanceId().isEmpty()) {\n+                c.instanceId = data.getInstanceId();\n+            }\n         }\n-        s.close();\n         return c;\n     }\n \n@@ -178,14 +224,29 @@ static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n \n         Stat stat = zk.exists(zkPath, false);\n         byte[] data = zk.getData(zkPath, false, stat);\n-        Cookie c = parse(new Scanner(new String(data)));\n-        c.znodeVersion = stat.getVersion();\n-        return c;\n+        BufferedReader reader = new BufferedReader(new StringReader(new String(\n+                data)));\n+        try {\n+            Cookie c = parse(reader);\n+            c.znodeVersion = stat.getVersion();\n+            return c;\n+        } finally {\n+            reader.close();\n+        }\n     }\n \n     static Cookie readFromDirectory(File directory) throws IOException {\n         File versionFile = new File(directory, VERSION_FILENAME);\n-        return parse(new Scanner(versionFile));\n+        BufferedReader reader = new BufferedReader(new FileReader(versionFile));\n+        try {\n+            return parse(reader);\n+        } finally {\n+            reader.close();\n+        }\n+    }\n+\n+    public void setInstanceId(String instanceId) {\n+        this.instanceId = instanceId;\n     }\n \n     private static String getZkPath(ServerConfiguration conf)"},{"sha":"7fbfd21dc3b783e82ebc9bb5c02c4c777232a0bf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":101,"deletions":18,"changes":119,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -28,20 +28,23 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Random;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n+import java.util.UUID;\n \n+import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.AsyncCallback.RecoverCallback;\n import org.apache.bookkeeper.client.BookKeeper.SyncOpenCallback;\n import org.apache.bookkeeper.client.LedgerFragmentReplicator.SingleFragmentCallback;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.util.IOUtils;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.AsyncCallback;\n+import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.ZKUtil;\n+import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.KeeperException.Code;\n import org.slf4j.Logger;\n@@ -115,20 +118,8 @@ public BookKeeperAdmin(String zkServers) throws IOException, InterruptedExceptio\n      */\n     public BookKeeperAdmin(ClientConfiguration conf) throws IOException, InterruptedException, KeeperException {\n         // Create the ZooKeeper client instance\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {\n-            @Override\n-            public void process(WatchedEvent event) {\n-                latch.countDown();\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Process: \" + event.getType() + \" \" + event.getPath());\n-                }\n-            }\n-        });\n-        if (!latch.await(conf.getZkTimeout(), TimeUnit.MILLISECONDS)\n-            || !zk.getState().isConnected()) {\n-            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n-        }\n+        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(),\n+                conf.getZkTimeout());\n         // Create the bookie path\n         bookiesPath = conf.getZkAvailableBookiesPath();\n         // Create the BookKeeper client instance\n@@ -690,4 +681,96 @@ public void processResult(int rc, String s, Object obj) {\n             sync.dec();\n         }\n     }\n+\n+    /**\n+     * Format the BookKeeper metadata in zookeeper\n+     * \n+     * @param isInteractive\n+     *            Whether format should ask prompt for confirmation if old data\n+     *            exists or not.\n+     * @param force\n+     *            If non interactive and force is true, then old data will be\n+     *            removed without prompt.\n+     * @return Returns true if format succeeds else false.\n+     */\n+    public static boolean format(ClientConfiguration conf,\n+            boolean isInteractive, boolean force) throws Exception {\n+\n+        ZooKeeper zkc = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(),\n+                conf.getZkTimeout());\n+        BookKeeper bkc = null;\n+        try {\n+            boolean ledgerRootExists = null != zkc.exists(\n+                    conf.getZkLedgersRootPath(), false);\n+            boolean availableNodeExists = null != zkc.exists(\n+                    conf.getZkAvailableBookiesPath(), false);\n+\n+            // Create ledgers root node if not exists\n+            if (!ledgerRootExists) {\n+                zkc.create(conf.getZkLedgersRootPath(), \"\".getBytes(),\n+                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            }\n+            // create available bookies node if not exists\n+            if (!availableNodeExists) {\n+                zkc.create(conf.getZkAvailableBookiesPath(), \"\".getBytes(),\n+                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            }\n+\n+            // If old data was there then confirm with admin.\n+            if (ledgerRootExists) {\n+                boolean confirm = false;\n+                if (!isInteractive) {\n+                    // If non interactive and force is set, then delete old\n+                    // data.\n+                    if (force) {\n+                        confirm = true;\n+                    } else {\n+                        confirm = false;\n+                    }\n+                } else {\n+                    // Confirm with the admin.\n+                    confirm = IOUtils\n+                            .confirmPrompt(\"Are you sure to format bookkeeper metadata ?\");\n+                }\n+                if (!confirm) {\n+                    LOG.error(\"BookKeeper metadata Format aborted!!\");\n+                    return false;\n+                }\n+            }\n+            bkc = new BookKeeper(conf, zkc);\n+            // Format all ledger metadata layout\n+            bkc.ledgerManagerFactory.format(conf, zkc);\n+\n+            // Clear the cookies\n+            try {\n+                ZKUtil.deleteRecursive(zkc, conf.getZkLedgersRootPath()\n+                        + \"/cookies\");\n+            } catch (KeeperException.NoNodeException e) {\n+                LOG.debug(\"cookies node not exists in zookeeper to delete\");\n+            }\n+\n+            // Clear the INSTANCEID\n+            try {\n+                zkc.delete(conf.getZkLedgersRootPath() + \"/\" + Bookie.INSTANCEID, -1);\n+            } catch (KeeperException.NoNodeException e) {\n+                LOG.debug(\"INSTANCEID not exists in zookeeper to delete\");\n+            }\n+\n+            // create INSTANCEID\n+            String instanceId = UUID.randomUUID().toString();\n+            zkc.create(conf.getZkLedgersRootPath() + \"/\" + Bookie.INSTANCEID,\n+                    instanceId.getBytes(), Ids.OPEN_ACL_UNSAFE,\n+                    CreateMode.PERSISTENT);\n+\n+            LOG.info(\"Successfully formatted BookKeeper metadata\");\n+        } finally {\n+            if (null != bkc) {\n+                bkc.close();\n+            }\n+            if (null != zkc) {\n+                zkc.close();\n+            }\n+        }\n+        return true;\n+    }\n }"},{"sha":"2a3c2caaf8f290f7f880cb9ea0163c74b069d631","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -23,6 +23,7 @@\n import java.util.Set;\n import java.util.Map;\n \n+import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.BKException;\n@@ -358,6 +359,7 @@ protected boolean isSpecialZnode(String znode) {\n         if (AVAILABLE_NODE.equals(znode)\n                 || COOKIES_NODE.equals(znode)\n                 || LedgerLayout.LAYOUT_ZNODE.equals(znode)\n+                || Bookie.INSTANCEID.equals(znode)\n                 || ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE\n                         .equals(znode)) {\n             return true;"},{"sha":"329e0a7ffb22cc323cb0e93785f3a82cf1c250ba","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -19,8 +19,10 @@\n  */\n \n import java.io.IOException;\n+import java.util.List;\n \n import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZKUtil;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.zookeeper.ZooKeeper;\n@@ -76,4 +78,20 @@ public LedgerUnderreplicationManager newLedgerUnderreplicationManager()\n             throws KeeperException, InterruptedException, ReplicationException.CompatibilityException {\n         return new ZkLedgerUnderreplicationManager(conf, zk);\n     }\n+\n+    @Override\n+    public void format(AbstractConfiguration conf, ZooKeeper zk)\n+            throws InterruptedException, KeeperException, IOException {\n+        FlatLedgerManager ledgerManager = (FlatLedgerManager) newLedgerManager();\n+        String ledgersRootPath = conf.getZkLedgersRootPath();\n+        List<String> children = zk.getChildren(ledgersRootPath, false);\n+        for (String child : children) {\n+            if (ledgerManager.isSpecialZnode(child)) {\n+                continue;\n+            }\n+            ZKUtil.deleteRecursive(zk, ledgersRootPath + \"/\" + child);\n+        }\n+        // Delete and recreate the LAYOUT information.\n+        super.format(conf, zk);\n+    }\n }"},{"sha":"c86b88462ff05bc008629ce60733e7d8bdafbed7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -19,8 +19,10 @@\n  */\n \n import java.io.IOException;\n+import java.util.List;\n \n import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZKUtil;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.zookeeper.ZooKeeper;\n@@ -76,4 +78,21 @@ public LedgerUnderreplicationManager newLedgerUnderreplicationManager()\n             throws KeeperException, InterruptedException, ReplicationException.CompatibilityException{\n         return new ZkLedgerUnderreplicationManager(conf, zk);\n     }\n+\n+    @Override\n+    public void format(AbstractConfiguration conf, ZooKeeper zk)\n+            throws InterruptedException, KeeperException, IOException {\n+        HierarchicalLedgerManager ledgerManager = (HierarchicalLedgerManager) newLedgerManager();\n+        String ledgersRootPath = conf.getZkLedgersRootPath();\n+        List<String> children = zk.getChildren(ledgersRootPath, false);\n+        for (String child : children) {\n+            if (!HierarchicalLedgerManager.IDGEN_ZNODE.equals(child)\n+                    && ledgerManager.isSpecialZnode(child)) {\n+                continue;\n+            }\n+            ZKUtil.deleteRecursive(zk, ledgersRootPath + \"/\" + child);\n+        }\n+        // Delete and recreate the LAYOUT information.\n+        super.format(conf, zk);\n+    }\n }"},{"sha":"99b872067e1bad65f25d6a6e12fa40eb80100167","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -146,6 +146,15 @@ public void store(final ZooKeeper zk, String ledgersRoot)\n                   Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n     }\n \n+    /**\n+     * Delete the LAYOUT from zookeeper\n+     */\n+    public void delete(final ZooKeeper zk, String ledgersRoot)\n+            throws KeeperException, InterruptedException {\n+        String ledgersLayout = ledgersRoot + \"/\" + LAYOUT_ZNODE;\n+        zk.delete(ledgersLayout, -1);\n+    }\n+\n     /**\n      * Generates a byte array based on the LedgerLayout object.\n      *"},{"sha":"a7fc247cae92a9e36698af9fa531ea14fcb6643e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","status":"modified","additions":77,"deletions":38,"changes":115,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -26,6 +26,7 @@\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.util.ReflectionUtils;\n+import org.apache.commons.configuration.ConfigurationException;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n \n@@ -130,40 +131,9 @@ public static LedgerManagerFactory newLedgerManagerFactory(\n         // compatible with the existing layout\n         LedgerLayout layout = LedgerLayout.readLayout(zk, ledgerRootPath);\n         if (layout == null) { // no existing layout\n-            // use default ledger manager factory if no one provided\n-            if (factoryClass == null) {\n-                // for backward compatibility, check manager type\n-                String lmType = conf.getLedgerManagerType();\n-                if (lmType == null) {\n-                    factoryClass = FlatLedgerManagerFactory.class;\n-                } else {\n-                    if (FlatLedgerManagerFactory.NAME.equals(lmType)) {\n-                        factoryClass = FlatLedgerManagerFactory.class;\n-                    } else if (HierarchicalLedgerManagerFactory.NAME.equals(lmType)) {\n-                        factoryClass = HierarchicalLedgerManagerFactory.class;\n-                    } else {\n-                        throw new IOException(\"Unknown ledger manager type: \" + lmType);\n-                    }\n-                }\n-            }\n-\n-            try {\n-                lmFactory = ReflectionUtils.newInstance(factoryClass);\n-            } catch (Throwable t) {\n-                throw new IOException(\"Fail to instantiate ledger manager factory class : \" + factoryClass, t);\n-            }\n-            layout = new LedgerLayout(factoryClass.getName(), lmFactory.getCurrentVersion());\n-            try {\n-                layout.store(zk, ledgerRootPath);\n-            } catch (KeeperException.NodeExistsException nee) {\n-                LedgerLayout layout2 = LedgerLayout.readLayout(zk, ledgerRootPath);\n-                if (!layout2.equals(layout)) {\n-                    throw new IOException(\"Contention writing to layout to zookeeper, \"\n-                            + \" other layout \" + layout2 + \" is incompatible with our \"\n-                            + \"layout \" + layout);\n-                }\n-            }\n-            return lmFactory.initialize(conf, zk, lmFactory.getCurrentVersion());\n+            lmFactory = createNewLMFactory(conf, zk, factoryClass);\n+            return lmFactory\n+                    .initialize(conf, zk, lmFactory.getCurrentVersion());\n         }\n         LOG.debug(\"read ledger layout {}\", layout);\n \n@@ -208,12 +178,81 @@ public static LedgerManagerFactory newLedgerManagerFactory(\n             }\n         }\n         // instantiate a factory\n+        lmFactory = ReflectionUtils.newInstance(factoryClass);\n+        return lmFactory.initialize(conf, zk, layout.getManagerVersion());\n+    }\n+\n+    /**\n+     * Creates the new layout and stores in zookeeper and returns the\n+     * LedgerManagerFactory instance.\n+     */\n+    private static LedgerManagerFactory createNewLMFactory(\n+            final AbstractConfiguration conf, final ZooKeeper zk,\n+            Class<? extends LedgerManagerFactory> factoryClass)\n+            throws IOException, KeeperException, InterruptedException {\n+\n+        String ledgerRootPath = conf.getZkLedgersRootPath();\n+        LedgerManagerFactory lmFactory;\n+        LedgerLayout layout;\n+        // use default ledger manager factory if no one provided\n+        if (factoryClass == null) {\n+            // for backward compatibility, check manager type\n+            String lmType = conf.getLedgerManagerType();\n+            if (lmType == null) {\n+                factoryClass = FlatLedgerManagerFactory.class;\n+            } else {\n+                if (FlatLedgerManagerFactory.NAME.equals(lmType)) {\n+                    factoryClass = FlatLedgerManagerFactory.class;\n+                } else if (HierarchicalLedgerManagerFactory.NAME.equals(lmType)) {\n+                    factoryClass = HierarchicalLedgerManagerFactory.class;\n+                } else {\n+                    throw new IOException(\"Unknown ledger manager type: \"\n+                            + lmType);\n+                }\n+            }\n+        }\n+\n+        lmFactory = ReflectionUtils.newInstance(factoryClass);\n+\n+        layout = new LedgerLayout(factoryClass.getName(),\n+                lmFactory.getCurrentVersion());\n         try {\n-            lmFactory = ReflectionUtils.newInstance(factoryClass);\n-        } catch (Throwable t) {\n-            throw new IOException(\"Fail to instantiate ledger manager factory class : \" + factoryClass, t);\n+            layout.store(zk, ledgerRootPath);\n+        } catch (KeeperException.NodeExistsException nee) {\n+            LedgerLayout layout2 = LedgerLayout.readLayout(zk, ledgerRootPath);\n+            if (!layout2.equals(layout)) {\n+                throw new IOException(\n+                        \"Contention writing to layout to zookeeper, \"\n+                                + \" other layout \" + layout2\n+                                + \" is incompatible with our \" + \"layout \"\n+                                + layout);\n+            }\n         }\n-        return lmFactory.initialize(conf, zk, layout.getManagerVersion());\n+        return lmFactory;\n     }\n \n+    /**\n+     * Format the ledger metadata for LedgerManager\n+     * \n+     * @param conf\n+     *            Configuration instance\n+     * @param zk\n+     *            Zookeeper instance\n+     */\n+    public void format(final AbstractConfiguration conf, final ZooKeeper zk)\n+            throws InterruptedException, KeeperException, IOException {\n+        \n+        Class<? extends LedgerManagerFactory> factoryClass;\n+        try {\n+            factoryClass = conf.getLedgerManagerFactoryClass();\n+        } catch (ConfigurationException e) {\n+            throw new IOException(\"Failed to get ledger manager factory class from configuration : \", e);\n+        }\n+       \n+        LedgerLayout layout = LedgerLayout.readLayout(zk,\n+                conf.getZkLedgersRootPath());\n+        layout.delete(zk, conf.getZkLedgersRootPath());\n+        // Create new layout information again.        \n+        createNewLMFactory(conf, zk, factoryClass);\n+    }\n }"},{"sha":"981392e8eb1e4beeb875c45faac5c5974232ee9d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","status":"modified","additions":698,"deletions":1,"changes":699,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -2461,6 +2461,687 @@ void addReplica(com.google.protobuf.ByteString value) {\n     // @@protoc_insertion_point(class_scope:UnderreplicatedLedgerFormat)\n   }\n   \n+  public interface CookieFormatOrBuilder\n+      extends com.google.protobuf.MessageOrBuilder {\n+    \n+    // required string bookieHost = 1;\n+    boolean hasBookieHost();\n+    String getBookieHost();\n+    \n+    // required string journalDir = 2;\n+    boolean hasJournalDir();\n+    String getJournalDir();\n+    \n+    // required string ledgerDirs = 3;\n+    boolean hasLedgerDirs();\n+    String getLedgerDirs();\n+    \n+    // optional string instanceId = 4;\n+    boolean hasInstanceId();\n+    String getInstanceId();\n+  }\n+  public static final class CookieFormat extends\n+      com.google.protobuf.GeneratedMessage\n+      implements CookieFormatOrBuilder {\n+    // Use CookieFormat.newBuilder() to construct.\n+    private CookieFormat(Builder builder) {\n+      super(builder);\n+    }\n+    private CookieFormat(boolean noInit) {}\n+    \n+    private static final CookieFormat defaultInstance;\n+    public static CookieFormat getDefaultInstance() {\n+      return defaultInstance;\n+    }\n+    \n+    public CookieFormat getDefaultInstanceForType() {\n+      return defaultInstance;\n+    }\n+    \n+    public static final com.google.protobuf.Descriptors.Descriptor\n+        getDescriptor() {\n+      return org.apache.bookkeeper.proto.DataFormats.internal_static_CookieFormat_descriptor;\n+    }\n+    \n+    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+        internalGetFieldAccessorTable() {\n+      return org.apache.bookkeeper.proto.DataFormats.internal_static_CookieFormat_fieldAccessorTable;\n+    }\n+    \n+    private int bitField0_;\n+    // required string bookieHost = 1;\n+    public static final int BOOKIEHOST_FIELD_NUMBER = 1;\n+    private java.lang.Object bookieHost_;\n+    public boolean hasBookieHost() {\n+      return ((bitField0_ & 0x00000001) == 0x00000001);\n+    }\n+    public String getBookieHost() {\n+      java.lang.Object ref = bookieHost_;\n+      if (ref instanceof String) {\n+        return (String) ref;\n+      } else {\n+        com.google.protobuf.ByteString bs = \n+            (com.google.protobuf.ByteString) ref;\n+        String s = bs.toStringUtf8();\n+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n+          bookieHost_ = s;\n+        }\n+        return s;\n+      }\n+    }\n+    private com.google.protobuf.ByteString getBookieHostBytes() {\n+      java.lang.Object ref = bookieHost_;\n+      if (ref instanceof String) {\n+        com.google.protobuf.ByteString b = \n+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n+        bookieHost_ = b;\n+        return b;\n+      } else {\n+        return (com.google.protobuf.ByteString) ref;\n+      }\n+    }\n+    \n+    // required string journalDir = 2;\n+    public static final int JOURNALDIR_FIELD_NUMBER = 2;\n+    private java.lang.Object journalDir_;\n+    public boolean hasJournalDir() {\n+      return ((bitField0_ & 0x00000002) == 0x00000002);\n+    }\n+    public String getJournalDir() {\n+      java.lang.Object ref = journalDir_;\n+      if (ref instanceof String) {\n+        return (String) ref;\n+      } else {\n+        com.google.protobuf.ByteString bs = \n+            (com.google.protobuf.ByteString) ref;\n+        String s = bs.toStringUtf8();\n+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n+          journalDir_ = s;\n+        }\n+        return s;\n+      }\n+    }\n+    private com.google.protobuf.ByteString getJournalDirBytes() {\n+      java.lang.Object ref = journalDir_;\n+      if (ref instanceof String) {\n+        com.google.protobuf.ByteString b = \n+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n+        journalDir_ = b;\n+        return b;\n+      } else {\n+        return (com.google.protobuf.ByteString) ref;\n+      }\n+    }\n+    \n+    // required string ledgerDirs = 3;\n+    public static final int LEDGERDIRS_FIELD_NUMBER = 3;\n+    private java.lang.Object ledgerDirs_;\n+    public boolean hasLedgerDirs() {\n+      return ((bitField0_ & 0x00000004) == 0x00000004);\n+    }\n+    public String getLedgerDirs() {\n+      java.lang.Object ref = ledgerDirs_;\n+      if (ref instanceof String) {\n+        return (String) ref;\n+      } else {\n+        com.google.protobuf.ByteString bs = \n+            (com.google.protobuf.ByteString) ref;\n+        String s = bs.toStringUtf8();\n+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n+          ledgerDirs_ = s;\n+        }\n+        return s;\n+      }\n+    }\n+    private com.google.protobuf.ByteString getLedgerDirsBytes() {\n+      java.lang.Object ref = ledgerDirs_;\n+      if (ref instanceof String) {\n+        com.google.protobuf.ByteString b = \n+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n+        ledgerDirs_ = b;\n+        return b;\n+      } else {\n+        return (com.google.protobuf.ByteString) ref;\n+      }\n+    }\n+    \n+    // optional string instanceId = 4;\n+    public static final int INSTANCEID_FIELD_NUMBER = 4;\n+    private java.lang.Object instanceId_;\n+    public boolean hasInstanceId() {\n+      return ((bitField0_ & 0x00000008) == 0x00000008);\n+    }\n+    public String getInstanceId() {\n+      java.lang.Object ref = instanceId_;\n+      if (ref instanceof String) {\n+        return (String) ref;\n+      } else {\n+        com.google.protobuf.ByteString bs = \n+            (com.google.protobuf.ByteString) ref;\n+        String s = bs.toStringUtf8();\n+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n+          instanceId_ = s;\n+        }\n+        return s;\n+      }\n+    }\n+    private com.google.protobuf.ByteString getInstanceIdBytes() {\n+      java.lang.Object ref = instanceId_;\n+      if (ref instanceof String) {\n+        com.google.protobuf.ByteString b = \n+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n+        instanceId_ = b;\n+        return b;\n+      } else {\n+        return (com.google.protobuf.ByteString) ref;\n+      }\n+    }\n+    \n+    private void initFields() {\n+      bookieHost_ = \"\";\n+      journalDir_ = \"\";\n+      ledgerDirs_ = \"\";\n+      instanceId_ = \"\";\n+    }\n+    private byte memoizedIsInitialized = -1;\n+    public final boolean isInitialized() {\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      if (!hasBookieHost()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasJournalDir()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      if (!hasLedgerDirs()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      memoizedIsInitialized = 1;\n+      return true;\n+    }\n+    \n+    public void writeTo(com.google.protobuf.CodedOutputStream output)\n+                        throws java.io.IOException {\n+      getSerializedSize();\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        output.writeBytes(1, getBookieHostBytes());\n+      }\n+      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n+        output.writeBytes(2, getJournalDirBytes());\n+      }\n+      if (((bitField0_ & 0x00000004) == 0x00000004)) {\n+        output.writeBytes(3, getLedgerDirsBytes());\n+      }\n+      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n+        output.writeBytes(4, getInstanceIdBytes());\n+      }\n+      getUnknownFields().writeTo(output);\n+    }\n+    \n+    private int memoizedSerializedSize = -1;\n+    public int getSerializedSize() {\n+      int size = memoizedSerializedSize;\n+      if (size != -1) return size;\n+    \n+      size = 0;\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(1, getBookieHostBytes());\n+      }\n+      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(2, getJournalDirBytes());\n+      }\n+      if (((bitField0_ & 0x00000004) == 0x00000004)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(3, getLedgerDirsBytes());\n+      }\n+      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(4, getInstanceIdBytes());\n+      }\n+      size += getUnknownFields().getSerializedSize();\n+      memoizedSerializedSize = size;\n+      return size;\n+    }\n+    \n+    private static final long serialVersionUID = 0L;\n+    @java.lang.Override\n+    protected java.lang.Object writeReplace()\n+        throws java.io.ObjectStreamException {\n+      return super.writeReplace();\n+    }\n+    \n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseFrom(\n+        com.google.protobuf.ByteString data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseFrom(\n+        com.google.protobuf.ByteString data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseFrom(byte[] data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseFrom(\n+        byte[] data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseDelimitedFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseDelimitedFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseFrom(\n+        com.google.protobuf.CodedInputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.CookieFormat parseFrom(\n+        com.google.protobuf.CodedInputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    \n+    public static Builder newBuilder() { return Builder.create(); }\n+    public Builder newBuilderForType() { return newBuilder(); }\n+    public static Builder newBuilder(org.apache.bookkeeper.proto.DataFormats.CookieFormat prototype) {\n+      return newBuilder().mergeFrom(prototype);\n+    }\n+    public Builder toBuilder() { return newBuilder(this); }\n+    \n+    @java.lang.Override\n+    protected Builder newBuilderForType(\n+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n+      Builder builder = new Builder(parent);\n+      return builder;\n+    }\n+    public static final class Builder extends\n+        com.google.protobuf.GeneratedMessage.Builder<Builder>\n+       implements org.apache.bookkeeper.proto.DataFormats.CookieFormatOrBuilder {\n+      public static final com.google.protobuf.Descriptors.Descriptor\n+          getDescriptor() {\n+        return org.apache.bookkeeper.proto.DataFormats.internal_static_CookieFormat_descriptor;\n+      }\n+      \n+      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+          internalGetFieldAccessorTable() {\n+        return org.apache.bookkeeper.proto.DataFormats.internal_static_CookieFormat_fieldAccessorTable;\n+      }\n+      \n+      // Construct using org.apache.bookkeeper.proto.DataFormats.CookieFormat.newBuilder()\n+      private Builder() {\n+        maybeForceBuilderInitialization();\n+      }\n+      \n+      private Builder(BuilderParent parent) {\n+        super(parent);\n+        maybeForceBuilderInitialization();\n+      }\n+      private void maybeForceBuilderInitialization() {\n+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n+        }\n+      }\n+      private static Builder create() {\n+        return new Builder();\n+      }\n+      \n+      public Builder clear() {\n+        super.clear();\n+        bookieHost_ = \"\";\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        journalDir_ = \"\";\n+        bitField0_ = (bitField0_ & ~0x00000002);\n+        ledgerDirs_ = \"\";\n+        bitField0_ = (bitField0_ & ~0x00000004);\n+        instanceId_ = \"\";\n+        bitField0_ = (bitField0_ & ~0x00000008);\n+        return this;\n+      }\n+      \n+      public Builder clone() {\n+        return create().mergeFrom(buildPartial());\n+      }\n+      \n+      public com.google.protobuf.Descriptors.Descriptor\n+          getDescriptorForType() {\n+        return org.apache.bookkeeper.proto.DataFormats.CookieFormat.getDescriptor();\n+      }\n+      \n+      public org.apache.bookkeeper.proto.DataFormats.CookieFormat getDefaultInstanceForType() {\n+        return org.apache.bookkeeper.proto.DataFormats.CookieFormat.getDefaultInstance();\n+      }\n+      \n+      public org.apache.bookkeeper.proto.DataFormats.CookieFormat build() {\n+        org.apache.bookkeeper.proto.DataFormats.CookieFormat result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(result);\n+        }\n+        return result;\n+      }\n+      \n+      private org.apache.bookkeeper.proto.DataFormats.CookieFormat buildParsed()\n+          throws com.google.protobuf.InvalidProtocolBufferException {\n+        org.apache.bookkeeper.proto.DataFormats.CookieFormat result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(\n+            result).asInvalidProtocolBufferException();\n+        }\n+        return result;\n+      }\n+      \n+      public org.apache.bookkeeper.proto.DataFormats.CookieFormat buildPartial() {\n+        org.apache.bookkeeper.proto.DataFormats.CookieFormat result = new org.apache.bookkeeper.proto.DataFormats.CookieFormat(this);\n+        int from_bitField0_ = bitField0_;\n+        int to_bitField0_ = 0;\n+        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n+          to_bitField0_ |= 0x00000001;\n+        }\n+        result.bookieHost_ = bookieHost_;\n+        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {\n+          to_bitField0_ |= 0x00000002;\n+        }\n+        result.journalDir_ = journalDir_;\n+        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {\n+          to_bitField0_ |= 0x00000004;\n+        }\n+        result.ledgerDirs_ = ledgerDirs_;\n+        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {\n+          to_bitField0_ |= 0x00000008;\n+        }\n+        result.instanceId_ = instanceId_;\n+        result.bitField0_ = to_bitField0_;\n+        onBuilt();\n+        return result;\n+      }\n+      \n+      public Builder mergeFrom(com.google.protobuf.Message other) {\n+        if (other instanceof org.apache.bookkeeper.proto.DataFormats.CookieFormat) {\n+          return mergeFrom((org.apache.bookkeeper.proto.DataFormats.CookieFormat)other);\n+        } else {\n+          super.mergeFrom(other);\n+          return this;\n+        }\n+      }\n+      \n+      public Builder mergeFrom(org.apache.bookkeeper.proto.DataFormats.CookieFormat other) {\n+        if (other == org.apache.bookkeeper.proto.DataFormats.CookieFormat.getDefaultInstance()) return this;\n+        if (other.hasBookieHost()) {\n+          setBookieHost(other.getBookieHost());\n+        }\n+        if (other.hasJournalDir()) {\n+          setJournalDir(other.getJournalDir());\n+        }\n+        if (other.hasLedgerDirs()) {\n+          setLedgerDirs(other.getLedgerDirs());\n+        }\n+        if (other.hasInstanceId()) {\n+          setInstanceId(other.getInstanceId());\n+        }\n+        this.mergeUnknownFields(other.getUnknownFields());\n+        return this;\n+      }\n+      \n+      public final boolean isInitialized() {\n+        if (!hasBookieHost()) {\n+          \n+          return false;\n+        }\n+        if (!hasJournalDir()) {\n+          \n+          return false;\n+        }\n+        if (!hasLedgerDirs()) {\n+          \n+          return false;\n+        }\n+        return true;\n+      }\n+      \n+      public Builder mergeFrom(\n+          com.google.protobuf.CodedInputStream input,\n+          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+          throws java.io.IOException {\n+        com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n+          com.google.protobuf.UnknownFieldSet.newBuilder(\n+            this.getUnknownFields());\n+        while (true) {\n+          int tag = input.readTag();\n+          switch (tag) {\n+            case 0:\n+              this.setUnknownFields(unknownFields.build());\n+              onChanged();\n+              return this;\n+            default: {\n+              if (!parseUnknownField(input, unknownFields,\n+                                     extensionRegistry, tag)) {\n+                this.setUnknownFields(unknownFields.build());\n+                onChanged();\n+                return this;\n+              }\n+              break;\n+            }\n+            case 10: {\n+              bitField0_ |= 0x00000001;\n+              bookieHost_ = input.readBytes();\n+              break;\n+            }\n+            case 18: {\n+              bitField0_ |= 0x00000002;\n+              journalDir_ = input.readBytes();\n+              break;\n+            }\n+            case 26: {\n+              bitField0_ |= 0x00000004;\n+              ledgerDirs_ = input.readBytes();\n+              break;\n+            }\n+            case 34: {\n+              bitField0_ |= 0x00000008;\n+              instanceId_ = input.readBytes();\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      \n+      private int bitField0_;\n+      \n+      // required string bookieHost = 1;\n+      private java.lang.Object bookieHost_ = \"\";\n+      public boolean hasBookieHost() {\n+        return ((bitField0_ & 0x00000001) == 0x00000001);\n+      }\n+      public String getBookieHost() {\n+        java.lang.Object ref = bookieHost_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          bookieHost_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setBookieHost(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000001;\n+        bookieHost_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearBookieHost() {\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        bookieHost_ = getDefaultInstance().getBookieHost();\n+        onChanged();\n+        return this;\n+      }\n+      void setBookieHost(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000001;\n+        bookieHost_ = value;\n+        onChanged();\n+      }\n+      \n+      // required string journalDir = 2;\n+      private java.lang.Object journalDir_ = \"\";\n+      public boolean hasJournalDir() {\n+        return ((bitField0_ & 0x00000002) == 0x00000002);\n+      }\n+      public String getJournalDir() {\n+        java.lang.Object ref = journalDir_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          journalDir_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setJournalDir(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000002;\n+        journalDir_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearJournalDir() {\n+        bitField0_ = (bitField0_ & ~0x00000002);\n+        journalDir_ = getDefaultInstance().getJournalDir();\n+        onChanged();\n+        return this;\n+      }\n+      void setJournalDir(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000002;\n+        journalDir_ = value;\n+        onChanged();\n+      }\n+      \n+      // required string ledgerDirs = 3;\n+      private java.lang.Object ledgerDirs_ = \"\";\n+      public boolean hasLedgerDirs() {\n+        return ((bitField0_ & 0x00000004) == 0x00000004);\n+      }\n+      public String getLedgerDirs() {\n+        java.lang.Object ref = ledgerDirs_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          ledgerDirs_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setLedgerDirs(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000004;\n+        ledgerDirs_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearLedgerDirs() {\n+        bitField0_ = (bitField0_ & ~0x00000004);\n+        ledgerDirs_ = getDefaultInstance().getLedgerDirs();\n+        onChanged();\n+        return this;\n+      }\n+      void setLedgerDirs(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000004;\n+        ledgerDirs_ = value;\n+        onChanged();\n+      }\n+      \n+      // optional string instanceId = 4;\n+      private java.lang.Object instanceId_ = \"\";\n+      public boolean hasInstanceId() {\n+        return ((bitField0_ & 0x00000008) == 0x00000008);\n+      }\n+      public String getInstanceId() {\n+        java.lang.Object ref = instanceId_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          instanceId_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setInstanceId(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000008;\n+        instanceId_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearInstanceId() {\n+        bitField0_ = (bitField0_ & ~0x00000008);\n+        instanceId_ = getDefaultInstance().getInstanceId();\n+        onChanged();\n+        return this;\n+      }\n+      void setInstanceId(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000008;\n+        instanceId_ = value;\n+        onChanged();\n+      }\n+      \n+      // @@protoc_insertion_point(builder_scope:CookieFormat)\n+    }\n+    \n+    static {\n+      defaultInstance = new CookieFormat(true);\n+      defaultInstance.initFields();\n+    }\n+    \n+    // @@protoc_insertion_point(class_scope:CookieFormat)\n+  }\n+  \n   private static com.google.protobuf.Descriptors.Descriptor\n     internal_static_LedgerMetadataFormat_descriptor;\n   private static\n@@ -2481,6 +3162,11 @@ void addReplica(com.google.protobuf.ByteString value) {\n   private static\n     com.google.protobuf.GeneratedMessage.FieldAccessorTable\n       internal_static_UnderreplicatedLedgerFormat_fieldAccessorTable;\n+  private static com.google.protobuf.Descriptors.Descriptor\n+    internal_static_CookieFormat_descriptor;\n+  private static\n+    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+      internal_static_CookieFormat_fieldAccessorTable;\n   \n   public static com.google.protobuf.Descriptors.FileDescriptor\n       getDescriptor() {\n@@ -2504,7 +3190,10 @@ void addReplica(com.google.protobuf.ByteString value) {\n       \"\\n\\004HMAC\\020\\002\\\"@\\n\\037LedgerRereplicationLayoutFor\" +\n       \"mat\\022\\014\\n\\004type\\030\\001 \\002(\\t\\022\\017\\n\\007version\\030\\002 \\002(\\005\\\".\\n\\033Un\" +\n       \"derreplicatedLedgerFormat\\022\\017\\n\\007replica\\030\\001 \\003\" +\n-      \"(\\tB\\037\\n\\033org.apache.bookkeeper.protoH\\001\"\n+      \"(\\t\\\"^\\n\\014CookieFormat\\022\\022\\n\\nbookieHost\\030\\001 \\002(\\t\\022\\022\" +\n+      \"\\n\\njournalDir\\030\\002 \\002(\\t\\022\\022\\n\\nledgerDirs\\030\\003 \\002(\\t\\022\\022\" +\n+      \"\\n\\ninstanceId\\030\\004 \\001(\\tB\\037\\n\\033org.apache.bookkee\" +\n+      \"per.protoH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n@@ -2543,6 +3232,14 @@ void addReplica(com.google.protobuf.ByteString value) {\n               new java.lang.String[] { \"Replica\", },\n               org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat.class,\n               org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat.Builder.class);\n+          internal_static_CookieFormat_descriptor =\n+            getDescriptor().getMessageTypes().get(3);\n+          internal_static_CookieFormat_fieldAccessorTable = new\n+            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n+              internal_static_CookieFormat_descriptor,\n+              new java.lang.String[] { \"BookieHost\", \"JournalDir\", \"LedgerDirs\", \"InstanceId\", },\n+              org.apache.bookkeeper.proto.DataFormats.CookieFormat.class,\n+              org.apache.bookkeeper.proto.DataFormats.CookieFormat.Builder.class);\n           return null;\n         }\n       };"},{"sha":"03b4a6b21721928700551c6997cdf9b083f8fd0e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -52,4 +52,37 @@ public static void close(Logger log, java.io.Closeable... closeables) {\n         }\n     }\n \n+    /**\n+     * Confirm prompt for the console operations.\n+     * \n+     * @param prompt\n+     *            Prompt message to be displayed on console\n+     * @return Returns true if confirmed as 'Y', returns false if confirmed as\n+     *         'N'\n+     * @throws IOException\n+     */\n+    public static boolean confirmPrompt(String prompt) throws IOException {\n+        while (true) {\n+            System.out.print(prompt + \" (Y or N) \");\n+            StringBuilder responseBuilder = new StringBuilder();\n+            while (true) {\n+                int c = System.in.read();\n+                if (c == -1 || c == '\\r' || c == '\\n') {\n+                    break;\n+                }\n+                responseBuilder.append((char) c);\n+            }\n+\n+            String response = responseBuilder.toString();\n+            if (response.equalsIgnoreCase(\"y\")\n+                    || response.equalsIgnoreCase(\"yes\")) {\n+                return true;\n+            } else if (response.equalsIgnoreCase(\"n\")\n+                    || response.equalsIgnoreCase(\"no\")) {\n+                return false;\n+            }\n+            System.out.println(\"Invalid input: \" + response);\n+            // else ask them again\n+        }\n+    }\n }"},{"sha":"fa7c8b57df18146d23539632cdaa9a0ed385331b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -22,19 +22,30 @@\n package org.apache.bookkeeper.util;\n \n import java.io.File;\n+import java.io.IOException;\n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.AsyncCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.AsyncCallback.StringCallback;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.ZooKeeper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Provided utilites for zookeeper access, etc.\n  */\n public class ZkUtils {\n+    private static final Logger LOG = LoggerFactory.getLogger(ZkUtils.class);\n \n     /**\n      * Create zookeeper path recursively\n@@ -91,4 +102,42 @@ public void processResult(int rc, String path, Object ctx, String name) {\n \n     }\n \n+    /**\n+     * Get new ZooKeeper client. Waits till the connection is complete. If\n+     * connection is not successful within timeout, then throws back exception.\n+     * \n+     * @param servers\n+     *            ZK servers connection string.\n+     * @param timeout\n+     *            Session timeout.\n+     */\n+    public static ZooKeeper createConnectedZookeeperClient(String servers, int timeout)\n+            throws IOException, InterruptedException, KeeperException {\n+        if (servers == null || servers.isEmpty()) {\n+            throw new IllegalArgumentException(\"servers cannot be empty\");\n+        }\n+        final CountDownLatch zkConnectLatch = new CountDownLatch(1);\n+        Watcher connectWatcher = new Watcher() {\n+\n+            @Override\n+            public void process(WatchedEvent event) {\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Process: \" + event.getType() + \" \"\n+                            + event.getPath());\n+                }\n+                if (event.getType().equals(EventType.None)\n+                        && event.getState() == KeeperState.SyncConnected) {\n+                    if (zkConnectLatch.getCount() > 0) {\n+                        zkConnectLatch.countDown();\n+                    }\n+                }\n+            }\n+        };\n+        final ZooKeeper newZk = new ZooKeeper(servers, timeout, connectWatcher);\n+        if (!zkConnectLatch.await(timeout, TimeUnit.MILLISECONDS)\n+                || !newZk.getState().isConnected()) {\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n+        return newZk;\n+    }\n }"},{"sha":"9aefaca9d96dbe0f7c8ce252ca46b58b7579858e","filename":"bookkeeper-server/src/main/proto/DataFormats.proto","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/proto/DataFormats.proto","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/main/proto/DataFormats.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/proto/DataFormats.proto?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -55,4 +55,14 @@ message LedgerRereplicationLayoutFormat {\n  \n message UnderreplicatedLedgerFormat {\n     repeated string replica = 1;\n-}\n\\ No newline at end of file\n+}\n+\n+/**\n+* Cookie format for storing cookie information\n+*/\n+message CookieFormat {\n+    required string bookieHost = 1;\n+    required string journalDir = 2;\n+    required string ledgerDirs = 3;\n+    optional string instanceId = 4;\n+}"},{"sha":"f2f20cb7644cfde9dcda33ecd6d77c2bc77294be","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":37,"deletions":7,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -22,14 +22,12 @@\n package org.apache.bookkeeper.bookie;\n \n import org.apache.commons.io.FileUtils;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.zookeeper.ZooKeeper;\n \n-import java.io.FileOutputStream;\n-import java.io.BufferedWriter;\n-import java.io.OutputStreamWriter;\n-\n import java.io.File;\n import java.io.IOException;\n \n@@ -40,9 +38,6 @@\n \n import static org.apache.bookkeeper.bookie.UpgradeTest.*;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n public class CookieTest {\n     ZooKeeperUtil zkutil;\n     ZooKeeper zkc = null;\n@@ -279,6 +274,41 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n         }\n     }\n \n+    /*\n+     * Test Cookie verification with format.\n+     */\n+    @Test\n+    public void testVerifyCookieWithFormat() throws Exception {\n+        ClientConfiguration adminConf = new ClientConfiguration();\n+        adminConf.setProperty(\"bookkeeper.format\", true);\n+        // Format the BK Metadata and generate INSTANCEID\n+        BookKeeperAdmin.format(adminConf, false, true);\n+\n+        ServerConfiguration bookieConf = new ServerConfiguration()\n+                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setJournalDirName(newDirectory(false))\n+                .setLedgerDirNames(new String[] { newDirectory(false) })\n+                .setBookiePort(3181);\n+        // Bookie should start successfully for fresh env.\n+        new Bookie(bookieConf);\n+\n+        // Format metadata one more time.\n+        BookKeeperAdmin.format(adminConf, false, true);\n+        try {\n+            new Bookie(bookieConf);\n+            fail(\"Bookie should not start with previous instance id.\");\n+        } catch (BookieException.InvalidCookieException e) {\n+            assertTrue(\n+                    \"Bookie startup should fail because of invalid instance id\",\n+                    e.getMessage().contains(\"instanceId\"));\n+        }\n+\n+        // Now format the Bookie and restart.\n+        Bookie.format(bookieConf, false, true);\n+        // After bookie format bookie should be able to start again.\n+        new Bookie(bookieConf);\n+    }\n+\n     /**\n      * Test that if a bookie is started with directories with\n      * version 2 data, that it will fail to start (it needs upgrade)"},{"sha":"4ad7a71ea0633169ed05df63dd985651bf4dafa8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -48,6 +48,7 @@\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.After;\n@@ -85,8 +86,10 @@ public void setupZooKeeper() throws Exception {\n \n         executor = Executors.newCachedThreadPool();\n \n-        zkc1 = zkUtil.getNewZooKeeperClient();\n-        zkc2 = zkUtil.getNewZooKeeperClient();\n+        zkc1 = ZkUtils.createConnectedZookeeperClient(\n+                zkUtil.getZooKeeperConnectString(), 10000);\n+        zkc2 = ZkUtils.createConnectedZookeeperClient(\n+                zkUtil.getZooKeeperConnectString(), 10000);\n         lmf1 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc1);\n         lmf2 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc2);\n         basePath = conf.getZkLedgersRootPath() + '/'"},{"sha":"6d26f6b2510455c1fb2377cfd3ec4e6800b13d27","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -37,6 +37,7 @@\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.Test;\n@@ -225,7 +226,8 @@ public void test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplicatio\n         InetSocketAddress newBkAddr2 = new InetSocketAddress(InetAddress\n                 .getLocalHost().getHostAddress(), startNewBookie2);\n         LOG.info(\"New Bookie addr :\" + newBkAddr2);\n-        ZooKeeper zkc1 = zkUtil.getNewZooKeeperClient();\n+        ZooKeeper zkc1 = ZkUtils.createConnectedZookeeperClient(\n+                zkUtil.getZooKeeperConnectString(), 10000);\n         ReplicationWorker rw2 = new ReplicationWorker(zkc1, baseClientConf,\n                 newBkAddr2);\n         rw1.start();"},{"sha":"5502df7392de5cb4d7f151a5b0095f4492b10db4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -34,7 +34,11 @@\n import org.junit.After;\n import static org.junit.Assert.*;\n \n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.FileSystemUpgrade;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n \n public class TestBackwardCompat {\n     static Logger LOG = LoggerFactory.getLogger(TestBackwardCompat.class);\n@@ -351,6 +355,60 @@ void close() throws Exception {\n         }\n     }\n \n+    /*\n+     * Test old cookie accessing the new version formatted cluster.\n+     */\n+    @Test\n+    public void testOldCookieAccessingNewCluster() throws Exception {\n+        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n+        journalDir.delete();\n+        journalDir.mkdir();\n+        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+\n+        int port = nextPort++;\n+\n+        // start old server\n+        Server410 s410 = new Server410(journalDir, ledgerDir, port);\n+        s410.start();\n+\n+        Ledger410 l410 = Ledger410.newLedger();\n+        l410.write100();\n+        l410.getId();\n+        l410.close();\n+        s410.stop();\n+\n+        // Format the metadata using current version\n+        ServerCurrent currentServer = new ServerCurrent(journalDir, ledgerDir,\n+                port);\n+        BookKeeperAdmin.format(new ClientConfiguration(currentServer.conf),\n+                false, true);\n+        // start the current version server with old version cookie\n+        try {\n+            currentServer.start();\n+            fail(\"Bookie should not start with old cookie\");\n+        } catch (BookieException e) {\n+            assertTrue(\"Old Cookie should not be able to access\", e\n+                    .getMessage().contains(\"instanceId\"));\n+        } finally {\n+            currentServer.stop();\n+        }\n+\n+        // Format the bookie also and restart\n+        assertTrue(\"Format should be success\",\n+                Bookie.format(currentServer.conf, false, true));\n+        try {\n+            currentServer = null;\n+            currentServer = new ServerCurrent(journalDir, ledgerDir, port);\n+            currentServer.start();\n+        } finally {\n+            if (null != currentServer) {\n+                currentServer.stop();\n+            }\n+        }\n+    }\n+\n     /**\n      * Test compatability between version 4.0.0 and the current version.\n      * Incompatabilities are:"},{"sha":"29b0c8ef6d4fe6d58e4fec1c453ecba05bd68189","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":3,"deletions":28,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","patch":"@@ -26,17 +26,11 @@\n \n import java.net.InetSocketAddress;\n \n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.commons.io.FileUtils;\n \n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-\n import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n \n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n@@ -72,25 +66,6 @@ public ZooKeeper getZooKeeperClient() {\n         return zkc;\n     }\n \n-    public ZooKeeper getNewZooKeeperClient() throws Exception {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        ZooKeeper zkc = new ZooKeeper(getZooKeeperConnectString(), 10000,\n-                new Watcher() {\n-                    @Override\n-                    public void process(WatchedEvent event) {\n-                        // handle session disconnects and expires\n-                        if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {\n-                            latch.countDown();\n-                        }\n-                    }\n-                });\n-        if (!latch.await(10000, TimeUnit.MILLISECONDS)) {\n-            zkc.close();\n-            fail(\"Could not connect to zookeeper server\");\n-        }\n-        return zkc;\n-    }\n-\n     public String getZooKeeperConnectString() {\n         return connectString;\n     }\n@@ -115,8 +90,8 @@ public void startServer() throws Exception {\n \n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        zkc = getNewZooKeeperClient();\n+        zkc = ZkUtils.createConnectedZookeeperClient(\n+                getZooKeeperConnectString(), 10000);\n \n         // initialize the zk client with values\n         zkc.create(\"/ledgers\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"}]}

