{"sha":"0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZjcyNGU1Y2EyM2UwZGUyZWI3ZmVlODI4OGIyZDNiOTE1M2MyM2Iy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-07T06:37:46Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-07T06:37:46Z"},"message":" svn merge -c 1346253,1346258,1346328,1346343,1346976 https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.1 \n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.1.0@1347417 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb08088361df5c92f9b5e812ec7297c5690ba390","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cb08088361df5c92f9b5e812ec7297c5690ba390"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","html_url":"https://github.com/apache/bookkeeper/commit/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"6003081fa686b1e1a2fd37b49f43b5ff5c552d8f","url":"https://api.github.com/repos/apache/bookkeeper/commits/6003081fa686b1e1a2fd37b49f43b5ff5c552d8f","html_url":"https://github.com/apache/bookkeeper/commit/6003081fa686b1e1a2fd37b49f43b5ff5c552d8f"},{"sha":"c4f3b36fd9186377ea894c72af5c10743c0a7fa0","url":"https://api.github.com/repos/apache/bookkeeper/commits/c4f3b36fd9186377ea894c72af5c10743c0a7fa0","html_url":"https://github.com/apache/bookkeeper/commit/c4f3b36fd9186377ea894c72af5c10743c0a7fa0"}],"stats":{"total":384,"additions":276,"deletions":108},"files":[{"sha":"95f69255add2105bfac65bc972326c2a77f01d09","filename":"CHANGES.txt","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -120,6 +120,14 @@ Release 4.1.0 - 2012-05-31\n \n         BOOKKEEPER-273: LedgerHandle.deleteLedger() should be idempotent (Matteo Merli via ivank)\n \n+        BOOKKEEPER-281: BKClient is failing when zkclient connection delays (ivank via sijie)\n+\n+        BOOKKEEPER-279: LocalBookKeeper is failing intermittently due to zkclient connection establishment delay (Rakesh R via sijie)\n+\n+        BOOKKEEPER-286: Compilation warning (ivank via sijie)\n+\n+        BOOKKEEPER-287: NoSuchElementException in LedgerCacheImpl (sijie)\n+\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)\n@@ -146,6 +154,8 @@ Release 4.1.0 - 2012-05-31\n \n         BOOKKEEPER-146: TestConcurrentTopicAcquisition sometimes hangs (ivank)\n \n+        BOOKKEEPER-285: TestZkSubscriptionManager quits due to NPE, so other tests are not run in hedwig server. (sijie)\n+\n       bookkeeper-benchmark/\n \t\n \tBOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj)"},{"sha":"c0b8121ae6a9709dc942b6b5a40b1a3e65588f35","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":30,"deletions":16,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -176,7 +176,7 @@ private LedgerEntryPage grabLedgerEntryPage(long ledger, long pageEntry) throws\n             }   \n         } catch (IOException ie) {\n             // if we grab a clean page, but failed to update the page\n-            // we are exhuasting the count of ledger entry pages.\n+            // we are exhausting the count of ledger entry pages.\n             // since this page will be never used, so we need to decrement\n             // page count of ledger cache.\n             lep.releasePage();\n@@ -317,7 +317,7 @@ public void flushLedger(boolean doAll) throws IOException {\n                 if (!doAll) {\n                     break;\n                 }\n-                // Yeild. if we are doing all the ledgers we don't want to block other flushes that\n+                // Yield. if we are doing all the ledgers we don't want to block other flushes that\n                 // need to happen\n                 try {\n                     dirtyLedgers.wait(1);\n@@ -449,22 +449,22 @@ private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOExceptio\n         if (entry % entriesPerPage != 0) {\n             throw new IllegalArgumentException(entry + \" is not a multiple of \" + entriesPerPage);\n         }\n-        synchronized(this) {\n-            if (pageCount  < pageLimit) {\n-                // let's see if we can allocate something\n-                LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n-                lep.setLedger(ledger);\n-                lep.setFirstEntry(entry);\n+        outerLoop:\n+        while(true) {\n+            synchronized(this) {\n+                if (pageCount  < pageLimit) {\n+                    // let's see if we can allocate something\n+                    LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n+                    lep.setLedger(ledger);\n+                    lep.setFirstEntry(entry);\n \n-                // note, this will not block since it is a new page\n-                lep.usePage();\n-                pageCount++;\n-                return lep;\n+                    // note, this will not block since it is a new page\n+                    lep.usePage();\n+                    pageCount++;\n+                    return lep;\n+                }\n             }\n-        }\n \n-        outerLoop:\n-        while(true) {\n             synchronized(cleanLedgers) {\n                 if (cleanLedgers.isEmpty()) {\n                     flushLedger(false);\n@@ -475,6 +475,14 @@ private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOExceptio\n                     }\n                 }\n                 synchronized(this) {\n+                    // if ledgers deleted between checking pageCount and putting\n+                    // ledgers into cleanLedgers list, the cleanLedgers list would be empty.\n+                    // so give it a chance to go back to check pageCount again because\n+                    // deleteLedger would decrement pageCount to return the number of pages\n+                    // occupied by deleted ledgers.\n+                    if (cleanLedgers.isEmpty()) {\n+                        continue outerLoop;\n+                    }\n                     Long cleanLedger = cleanLedgers.getFirst();\n                     Map<Long, LedgerEntryPage> map = pages.get(cleanLedger);\n                     while (map == null || map.isEmpty()) {\n@@ -610,7 +618,13 @@ public void deleteLedger(long ledgerId) throws IOException {\n \n         // remove pages first to avoid page flushed when deleting file info\n         synchronized(this) {\n-            pages.remove(ledgerId);\n+            Map<Long, LedgerEntryPage> lpages = pages.remove(ledgerId);\n+            if (null != lpages) {\n+                pageCount -= lpages.size();\n+                if (pageCount < 0) {\n+                    LOG.error(\"Page count of ledger cache has been decremented to be less than zero.\");\n+                }\n+            }\n         }\n         // Delete the ledger's index file and close the FileInfo\n         FileInfo fi = null;"},{"sha":"fd879ed8feb3596d99bb1d1890b64b6255650d22","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":31,"deletions":67,"changes":98,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -119,27 +119,35 @@ public BookKeeper(String servers) throws IOException, InterruptedException,\n      * @throws InterruptedException\n      * @throws KeeperException\n      */\n-    public BookKeeper(ClientConfiguration conf)\n+    public BookKeeper(final ClientConfiguration conf)\n             throws IOException, InterruptedException, KeeperException {\n         this.conf = conf;\n+\n+        final CountDownLatch zkConnectLatch = new CountDownLatch(1);\n         this.zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(),\n                 new Watcher() {\n                     @Override\n                     public void process(WatchedEvent event) {\n-                        if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {\n-                            connectLatch.countDown();\n-                        }\n+                        // countdown the latch on all events, even if we haven't\n+                        // successfully connected.\n+                        zkConnectLatch.countDown();\n+\n                         // TODO: handle session disconnects and expires\n                         LOG.debug(\"Process: {} {}\", event.getType(), event.getPath());\n                     }\n                 });\n+        if (!zkConnectLatch.await(conf.getZkTimeout(), TimeUnit.MILLISECONDS)\n+            || !zk.getState().isConnected()) {\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n+\n         this.channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                                 Executors.newCachedThreadPool());\n-        bookieWatcher = new BookieWatcher(conf, this);\n-        bookieWatcher.readBookiesBlocking();\n         mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        // initialize ledger meta manager\n+        bookieWatcher = new BookieWatcher(conf, this);\n+        bookieWatcher.readBookiesBlocking();\n+\n         ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n \n         ownChannelFactory = true;\n@@ -176,49 +184,33 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n      *          {@link ClientConfiguration}\n      * @param zk\n      *          Zookeeper client instance connected to the zookeeper with which\n-     *          the bookies have registered\n+     *          the bookies have registered. The ZooKeeper client must be connected\n+     *          before it is passed to BookKeeper. Otherwise a KeeperException is thrown.\n      * @param channelFactory\n      *          A factory that will be used to create connections to the bookies\n      * @throws IOException\n      * @throws InterruptedException\n-     * @throws KeeperException\n+     * @throws KeeperException if the passed zk handle is not connected\n      */\n     public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFactory channelFactory)\n             throws IOException, InterruptedException, KeeperException {\n         if (zk == null || channelFactory == null) {\n             throw new NullPointerException();\n         }\n+        if (!zk.getState().isConnected()) {\n+            LOG.error(\"Unconnected zookeeper handle passed to bookkeeper\");\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n         this.conf = conf;\n         this.zk = zk;\n         this.channelFactory = channelFactory;\n-        bookieWatcher = new BookieWatcher(conf, this);\n-        bookieWatcher.readBookiesBlocking();\n+\n         mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        // initialize ledger meta manager\n-        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n-    }\n+        bookieWatcher = new BookieWatcher(conf, this);\n+        bookieWatcher.readBookiesBlocking();\n \n-    void withZKConnected(final ZKConnectCallback cb) {\n-        if (ownZKHandle) {\n-            mainWorkerPool.submit(new SafeRunnable() {\n-                    @Override\n-                    public void safeRun() {\n-                        try {\n-                            if (!connectLatch.await(zkConnectTimeoutMs, TimeUnit.MILLISECONDS)) {\n-                                cb.connectionFailed(BKException.Code.ZKException);\n-                            } else {\n-                                cb.connected();\n-                            }\n-                        } catch (InterruptedException ie) {\n-                            // someone trying to kill the process\n-                            cb.connectionFailed(BKException.Code.InterruptedException);\n-                        }\n-                    }\n-                });\n-        } else {\n-            cb.connected();\n-        }\n+        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n     }\n \n     LedgerManager getLedgerManager() {\n@@ -278,15 +270,8 @@ BookieClient getBookieClient() {\n      */\n     public void asyncCreateLedger(final int ensSize, final int qSize, final DigestType digestType,\n                                   final byte[] passwd, final CreateCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerCreateOp(BookKeeper.this, ensSize, qSize, digestType, passwd, cb, ctx)\n-                        .initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.createComplete(code, null, ctx);\n-                }\n-            });\n+        new LedgerCreateOp(BookKeeper.this, ensSize, qSize, digestType, passwd, cb, ctx)\n+            .initiate();\n     }\n \n \n@@ -370,14 +355,7 @@ public LedgerHandle createLedger(int ensSize, int qSize,\n      */\n     public void asyncOpenLedger(final long lId, final DigestType digestType, final byte passwd[],\n                                 final OpenCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.openComplete(code, null, ctx);\n-                }\n-            });\n+        new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n     }\n \n     /**\n@@ -409,14 +387,7 @@ public void connectionFailed(int code) {\n      */\n     public void asyncOpenLedgerNoRecovery(final long lId, final DigestType digestType, final byte passwd[],\n                                           final OpenCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.openComplete(code, null, ctx);\n-                }\n-            });\n+        new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n     }\n \n \n@@ -502,14 +473,7 @@ public LedgerHandle openLedgerNoRecovery(long lId, DigestType digestType, byte p\n      *            optional control object\n      */\n     public void asyncDeleteLedger(final long lId, final DeleteCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.deleteComplete(code, ctx);\n-                }\n-            });\n+        new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n     }\n \n "},{"sha":"8423de9b38d8845e9d2a07c1884ccb0ff9e12f4d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -30,6 +30,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Random;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n@@ -127,18 +129,25 @@ public BookKeeperAdmin(String zkServers) throws IOException, InterruptedExceptio\n      */\n     public BookKeeperAdmin(ClientConfiguration conf) throws IOException, InterruptedException, KeeperException {\n         // Create the ZooKeeper client instance\n+        final CountDownLatch latch = new CountDownLatch(1);\n         zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {\n             @Override\n             public void process(WatchedEvent event) {\n+                latch.countDown();\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Process: \" + event.getType() + \" \" + event.getPath());\n                 }\n             }\n         });\n+        if (!latch.await(conf.getZkTimeout(), TimeUnit.MILLISECONDS)\n+            || !zk.getState().isConnected()) {\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n         // Create the bookie path\n         bookiesPath = conf.getZkAvailableBookiesPath();\n         // Create the BookKeeper client instance\n-        bkc = new BookKeeper(conf);\n+        bkc = new BookKeeper(conf, zk);\n+\n         DIGEST_TYPE = conf.getBookieRecoveryDigestType();\n         PASSWD = conf.getBookieRecoveryPasswd();\n     }"},{"sha":"7ce7ee1a163968a4446262d859d7f808483564b2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -115,10 +115,10 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n             newBookieAddrs.add(bookieAddr);\n         }\n \n-        HashSet<InetSocketAddress> deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n-        deadBookies.removeAll(newBookieAddrs);\n-\n+        final HashSet<InetSocketAddress> deadBookies;\n         synchronized (this) {\n+            deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n+            deadBookies.removeAll(newBookieAddrs);\n             knownBookies = newBookieAddrs;\n         }\n "},{"sha":"f6dc07bad939a3e33d9f1b02f5d7dd1e253160bb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":33,"deletions":14,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -26,23 +26,20 @@\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.Socket;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.server.NIOServerCnxnFactory;\n import org.apache.zookeeper.server.ZooKeeperServer;\n@@ -68,6 +65,7 @@ public LocalBookKeeper(int numberOfBookies) {\n     ZooKeeperServer zks;\n     ZooKeeper zkc;\n     int ZooKeeperDefaultPort = 2181;\n+    static int zkSessionTimeOut = 5000;\n     File ZkTmpDir;\n \n     //BookKeeper variables\n@@ -104,11 +102,14 @@ private void runZookeeper(int maxCC) throws IOException {\n         LOG.debug(\"ZooKeeper server up: \" + b);\n     }\n \n-    private void initializeZookeper() {\n+    private void initializeZookeper() throws IOException {\n         LOG.info(\"Instantiate ZK Client\");\n         //initialize the zk client with values\n         try {\n-            zkc = new ZooKeeper(\"127.0.0.1\", ZooKeeperDefaultPort, new emptyWatcher());\n+            ZKConnectionWatcher zkConnectionWatcher = new ZKConnectionWatcher();\n+            zkc = new ZooKeeper(HOSTPORT, zkSessionTimeOut,\n+                    zkConnectionWatcher);\n+            zkConnectionWatcher.waitForConnection();\n             zkc.create(\"/ledgers\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             zkc.create(\"/ledgers/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             // No need to create an entry for each requested bookie anymore as the\n@@ -119,9 +120,6 @@ private void initializeZookeper() {\n         } catch (InterruptedException e) {\n             // TODO Auto-generated catch block\n             LOG.error(\"Interrupted while creating znodes\", e);\n-        } catch (IOException e) {\n-            // TODO Auto-generated catch block\n-            LOG.error(\"Exception while creating znodes\", e);\n         }\n     }\n     private void runBookies(ServerConfiguration baseConf) \n@@ -184,9 +182,30 @@ private static void usage() {\n         System.err.println(\"Usage: LocalBookKeeper number-of-bookies\");\n     }\n \n-    /*\tUser for testing purposes, void */\n-    static class emptyWatcher implements Watcher {\n-        public void process(WatchedEvent event) {}\n+    /* Watching SyncConnected event from ZooKeeper */\n+    static class ZKConnectionWatcher implements Watcher {\n+        private CountDownLatch clientConnectLatch = new CountDownLatch(1);\n+\n+        @Override\n+        public void process(WatchedEvent event) {\n+            if (event.getState() == KeeperState.SyncConnected) {\n+                clientConnectLatch.countDown();\n+            }\n+        }\n+\n+        // Waiting for the SyncConnected event from the ZooKeeper server\n+        public void waitForConnection() throws IOException {\n+            try {\n+                if (!clientConnectLatch.await(zkSessionTimeOut,\n+                        TimeUnit.MILLISECONDS)) {\n+                    throw new IOException(\n+                            \"Couldn't connect to zookeeper server\");\n+                }\n+            } catch (InterruptedException e) {\n+                throw new IOException(\n+                        \"Interrupted when connecting to zookeeper server\", e);\n+            }\n+        }\n     }\n \n     public static boolean waitForServerUp(String hp, long timeout) {"},{"sha":"3720bb886dbff1baf433ab8ff0320dde7c182dc1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -125,6 +125,41 @@ public void testLedgerEviction() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testDeleteLedger() throws Exception {\n+        int numEntries = 10;\n+        // limit open files & pages\n+        conf.setOpenFileLimit(999).setPageLimit(2)\n+            .setPageSize(8 * numEntries);\n+        // create ledger cache\n+        newLedgerCache();\n+        try {\n+            int numLedgers = 2;\n+            byte[] masterKey = \"blah\".getBytes();\n+            for (int i=1; i<=numLedgers; i++) {\n+                ledgerCache.setMasterKey((long)i, masterKey);\n+                for (int j=0; j<numEntries; j++) {\n+                    ledgerCache.putEntryOffset(i, j, i*numEntries + j);\n+                }\n+            }\n+            // ledger cache is exhausted\n+            // delete ledgers\n+            for (int i=1; i<=numLedgers; i++) {\n+                ledgerCache.deleteLedger((long)i);\n+            }\n+            // create num ledgers to add entries\n+            for (int i=numLedgers+1; i<=2*numLedgers; i++) {\n+                ledgerCache.setMasterKey((long)i, masterKey);\n+                for (int j=0; j<numEntries; j++) {\n+                    ledgerCache.putEntryOffset(i, j, i*numEntries + j);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Got Exception.\", e);\n+            fail(\"Failed to add entry.\");\n+        }\n+    }\n+\n     @Test\n     public void testPageEviction() throws Exception {\n         int numLedgers = 10;"},{"sha":"1f46e1cf2e2e0d6926c15c24aaa8f51f856a0813","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -0,0 +1,88 @@\n+package org.apache.bookkeeper.client;\n+\n+/*\n+*\n+* Licensed to the Apache Software Foundation (ASF) under one\n+* or more contributor license agreements.  See the NOTICE file\n+* distributed with this work for additional information\n+* regarding copyright ownership.  The ASF licenses this file\n+* to you under the Apache License, Version 2.0 (the\n+* \"License\"); you may not use this file except in compliance\n+* with the License.  You may obtain a copy of the License at\n+*\n+*   http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*\n+*/\n+\n+import java.util.Enumeration;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.KeeperException;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests of the main BookKeeper client\n+ */\n+public class BookKeeperTest extends BookKeeperClusterTestCase {\n+    public BookKeeperTest() {\n+        super(4);\n+    }\n+\n+    @Test\n+    public void testConstructionZkDelay() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setZkTimeout(20000);\n+\n+        CountDownLatch l = new CountDownLatch(1);\n+        zkUtil.sleepServer(5, l);\n+        l.await();\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        bkc.createLedger(DigestType.CRC32, \"testPasswd\".getBytes()).close();\n+        bkc.close();\n+    }\n+\n+    @Test\n+    public void testConstructionNotConnectedExplicitZk() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setZkTimeout(20000);\n+\n+        CountDownLatch l = new CountDownLatch(1);\n+        zkUtil.sleepServer(5, l);\n+        l.await();\n+\n+        ZooKeeper zk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), 10000,\n+                            new Watcher() {\n+                                @Override\n+                                public void process(WatchedEvent event) {\n+                                }\n+                            });\n+        assertFalse(\"ZK shouldn't have connected yet\", zk.getState().isConnected());\n+        try {\n+            BookKeeper bkc = new BookKeeper(conf, zk);\n+            fail(\"Shouldn't be able to construct with unconnected zk\");\n+        } catch (KeeperException.ConnectionLossException cle) {\n+            // correct behaviour\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"eed9905dee872829e2987d640e7d8025689851bd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -88,7 +88,7 @@ public void addComplete(int rc, LedgerHandle lh,\n                         completed.set(true);\n                     }\n                 }, null);\n-        Thread.sleep((baseClientConf.getReadTimeout()*2)*1000);\n+        Thread.sleep((baseClientConf.getReadTimeout()*3)*1000);\n         Assert.assertTrue(\"Write request did not finish\", completed.get());\n \n         Set<InetSocketAddress> afterSet = new HashSet<InetSocketAddress>();"},{"sha":"905ab6dead6526afe63225cb5402c55a555cfa5c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -22,6 +22,8 @@\n package org.apache.bookkeeper.test;\n \n import java.io.File;\n+import java.io.IOException;\n+\n import java.net.InetSocketAddress;\n \n import org.apache.commons.io.FileUtils;\n@@ -115,6 +117,31 @@ public void process(WatchedEvent event) {\n         zkc.create(\"/ledgers/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n     }\n \n+    public void sleepServer(final int seconds, final CountDownLatch l)\n+            throws InterruptedException, IOException {\n+        Thread[] allthreads = new Thread[Thread.activeCount()];\n+        Thread.enumerate(allthreads);\n+        for (final Thread t : allthreads) {\n+            if (t.getName().contains(\"SyncThread:0\")) {\n+                Thread sleeper = new Thread() {\n+                    public void run() {\n+                        try {\n+                            t.suspend();\n+                            l.countDown();\n+                            Thread.sleep(seconds*1000);\n+                            t.resume();\n+                        } catch (Exception e) {\n+                            LOG.error(\"Error suspending thread\", e);\n+                        }\n+                    }\n+                };\n+                sleeper.start();\n+                return;\n+            }\n+        }\n+        throw new IOException(\"ZooKeeper thread not found\");\n+    }\n+\n     public void killServer() throws Exception {\n         if (zkc != null) {\n             zkc.close();"},{"sha":"9558acf7b50ee5ca05984d2f25e0e57a8dcbe74f","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestZkSubscriptionManager.java?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -31,6 +31,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.topics.TrivialOwnAllTopicManager;\n+import org.apache.hedwig.server.persistence.LocalDBPersistenceManager;\n import org.apache.hedwig.util.ConcurrencyUtils;\n import org.apache.hedwig.util.Either;\n import org.apache.hedwig.util.Callback;\n@@ -50,7 +51,8 @@ public void setUp() throws Exception {\n         super.setUp();\n         cfg = new ServerConfiguration();\n         final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n-        sm = new ZkSubscriptionManager(zk, new TrivialOwnAllTopicManager(cfg, scheduler), null, cfg, scheduler);\n+        sm = new ZkSubscriptionManager(zk, new TrivialOwnAllTopicManager(cfg, scheduler),\n+                                       LocalDBPersistenceManager.instance(), cfg, scheduler);\n         msgIdCallback = new Callback<MessageSeqId>() {\n             @Override\n             public void operationFailed(Object ctx, final PubSubException exception) {"},{"sha":"8ff14874c7d626f5ceea96b9efb427adbf543768","filename":"pom.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","patch":"@@ -44,6 +44,11 @@\n   <url>http://zookeeper.apache.org/bookkeeper</url>\n   <build>\n     <plugins>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>findbugs-maven-plugin</artifactId>\n+        <version>2.3.2</version>\n+      </plugin>\n       <plugin>\n         <artifactId>maven-compiler-plugin</artifactId>\n         <version>2.3.2</version>\n@@ -121,11 +126,6 @@\n         <artifactId>maven-jxr-plugin</artifactId>\n         <version>2.1</version>\n       </plugin>\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>findbugs-maven-plugin</artifactId>\n-        <version>2.1</version>\n-      </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-pmd-plugin</artifactId>"}]}

