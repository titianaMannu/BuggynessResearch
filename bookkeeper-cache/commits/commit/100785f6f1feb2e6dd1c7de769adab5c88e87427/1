{"sha":"100785f6f1feb2e6dd1c7de769adab5c88e87427","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMDA3ODVmNmYxZmViMmU2ZGQxYzdkZTc2OWFkYWI1Yzg4ZTg3NDI3","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-01T14:04:29Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-01T14:04:29Z"},"message":"BOOKKEEPER-485: TestFencing hung (ivank via fpj)\n\n--THIS line, and those below, will be ignored--\n\nM    CHANGES.txt\nA    bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java\nM    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416000 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d92dcb7e14497f159d5d5ee44cfc78d8f0b932fe","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d92dcb7e14497f159d5d5ee44cfc78d8f0b932fe"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/100785f6f1feb2e6dd1c7de769adab5c88e87427","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/100785f6f1feb2e6dd1c7de769adab5c88e87427","html_url":"https://github.com/apache/bookkeeper/commit/100785f6f1feb2e6dd1c7de769adab5c88e87427","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/100785f6f1feb2e6dd1c7de769adab5c88e87427/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"e14983cbea5238a75a45bff4f23a8e431a5892f0","url":"https://api.github.com/repos/apache/bookkeeper/commits/e14983cbea5238a75a45bff4f23a8e431a5892f0","html_url":"https://github.com/apache/bookkeeper/commit/e14983cbea5238a75a45bff4f23a8e431a5892f0"}],"stats":{"total":95,"additions":93,"deletions":2},"files":[{"sha":"6d72b774dc9808bceca85bfd9783622b1105de5c","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/100785f6f1feb2e6dd1c7de769adab5c88e87427/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/100785f6f1feb2e6dd1c7de769adab5c88e87427/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=100785f6f1feb2e6dd1c7de769adab5c88e87427","patch":"@@ -110,6 +110,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-477: In ReadOnlyBookieTest, we should wait for the bookie to die before asserting on it (ivank via fpj)\n \n+\tBOOKKEEPER-485: TestFencing hung (ivank via fpj)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"e25d500b15cdca26f8ea4a83bb2efffd2705645c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/100785f6f1feb2e6dd1c7de769adab5c88e87427/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/100785f6f1feb2e6dd1c7de769adab5c88e87427/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=100785f6f1feb2e6dd1c7de769adab5c88e87427","patch":"@@ -115,7 +115,7 @@ public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor exec\n     }\n \n     private void connect() {\n-        LOG.debug(\"Connecting to bookie: {}\", addr);\n+        LOG.info(\"Connecting to bookie: {}\", addr);\n \n         // Set up the ClientBootStrap so we can create a new Channel connection\n         // to the bookie.\n@@ -134,11 +134,16 @@ public void operationComplete(ChannelFuture future) throws Exception {\n \n                 synchronized (PerChannelBookieClient.this) {\n \n-                    if (future.isSuccess()) {\n+                    if (future.isSuccess() && state == ConnectionState.CONNECTING) {\n                         LOG.info(\"Successfully connected to bookie: \" + addr);\n                         rc = BKException.Code.OK;\n                         channel = future.getChannel();\n                         state = ConnectionState.CONNECTED;\n+                    } else if (future.isSuccess() && state == ConnectionState.DISCONNECTED) {\n+                        LOG.error(\"Closed before connection completed, clean up: \" + addr);\n+                        future.getChannel().close();\n+                        rc = BKException.Code.BookieHandleNotAvailableException;\n+                        channel = null;\n                     } else {\n                         LOG.error(\"Could not connect to bookie: \" + addr);\n                         rc = BKException.Code.BookieHandleNotAvailableException;\n@@ -334,6 +339,9 @@ public void operationComplete(ChannelFuture future) throws Exception {\n     }\n \n     public void close() {\n+        synchronized (this) {\n+            state = ConnectionState.DISCONNECTED;\n+        }\n         if (channel != null) {\n             channel.close().awaitUninterruptibly();\n         }"},{"sha":"b0c8cfbb31bd116a187641b5390eeb991805f49d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/bookkeeper/blob/100785f6f1feb2e6dd1c7de769adab5c88e87427/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/100785f6f1feb2e6dd1c7de769adab5c88e87427/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java?ref=100785f6f1feb2e6dd1c7de769adab5c88e87427","patch":"@@ -0,0 +1,81 @@\n+package org.apache.bookkeeper.proto;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+import org.junit.*;\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+\n+import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n+import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests for PerChannelBookieClient. Historically, this class has\n+ * had a few race conditions, so this is what these tests focus on.\n+ */\n+public class TestPerChannelBookieClient extends BookKeeperClusterTestCase {\n+    static Logger LOG = LoggerFactory.getLogger(TestPerChannelBookieClient.class);\n+\n+    public TestPerChannelBookieClient() {\n+        super(1);\n+    }\n+\n+    /**\n+     * Test that a race does not exist between connection completion\n+     * and client closure. If a race does exist, this test will simply\n+     * hang at releaseExternalResources() as it is uninterruptible.\n+     * This specific race was found in\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-485}.\n+     */\n+    @Test(timeout=60000)\n+    public void testConnectCloseRace() {\n+        ClientSocketChannelFactory channelFactory\n+            = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n+                                                Executors.newCachedThreadPool());\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+\n+        InetSocketAddress addr = getBookie(0);\n+        AtomicLong bytesOutstanding = new AtomicLong(0);\n+        for (int i = 0; i < 1000; i++) {\n+            PerChannelBookieClient client = new PerChannelBookieClient(executor, channelFactory,\n+                                                                       addr, bytesOutstanding);\n+            client.connectIfNeededAndDoOp(new GenericCallback<Void>() {\n+                    @Override\n+                    public void operationComplete(int rc, Void result) {\n+                        // do nothing, we don't care about doing anything with the connection,\n+                        // we just want to trigger it connecting.\n+                    }\n+                });\n+            client.close();\n+        }\n+        channelFactory.releaseExternalResources();\n+        executor.shutdown();\n+    }\n+}\n\\ No newline at end of file"}]}

