{"sha":"119e2034303b45478123a0fa62c1c48925b201c1","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMTllMjAzNDMwM2I0NTQ3ODEyM2EwZmE2MmMxYzQ4OTI1YjIwMWMx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:27:04Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:27:04Z"},"message":"BOOKKEEPER-623: LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry. (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1496705 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"086c6c3ce462566657f9e10a94ead731c50cc569","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/086c6c3ce462566657f9e10a94ead731c50cc569"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/119e2034303b45478123a0fa62c1c48925b201c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/119e2034303b45478123a0fa62c1c48925b201c1","html_url":"https://github.com/apache/bookkeeper/commit/119e2034303b45478123a0fa62c1c48925b201c1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/119e2034303b45478123a0fa62c1c48925b201c1/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"01cccee0298f3e0f9d32acc550ed94a7c9fafdfd","url":"https://api.github.com/repos/apache/bookkeeper/commits/01cccee0298f3e0f9d32acc550ed94a7c9fafdfd","html_url":"https://github.com/apache/bookkeeper/commit/01cccee0298f3e0f9d32acc550ed94a7c9fafdfd"}],"stats":{"total":50,"additions":45,"deletions":5},"files":[{"sha":"e1ccbd9785ee8825995f21829fb3acfca35ecbaf","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/119e2034303b45478123a0fa62c1c48925b201c1/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/119e2034303b45478123a0fa62c1c48925b201c1/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=119e2034303b45478123a0fa62c1c48925b201c1","patch":"@@ -58,6 +58,8 @@ Trunk (unreleased changes)\n \t\n \tBOOKKEEPER-626: BOOKIE_EXTRA_OPTS are added twice (vinay via fpj)\n \n+        BOOKKEEPER-623: LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry. (vinay via sijie)\n+\n       hedwig-client:\n \n         BOOKKEEPER-598: Fails to compile - RESUBSCRIBE_EXCEPTION conflict (Matthew Farrellee via sijie)"},{"sha":"368eac1c279ee66cc6abe23caed76bcfd200fc32","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/119e2034303b45478123a0fa62c1c48925b201c1/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/119e2034303b45478123a0fa62c1c48925b201c1/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java?ref=119e2034303b45478123a0fa62c1c48925b201c1","patch":"@@ -204,9 +204,7 @@ public void checkLedger(LedgerHandle lh,\n          * NoSuchEntry we can assume it was never written. If they respond with anything\n          * else, we must assume the entry has been written, so we run the check.\n          */\n-        if (curEntryId != null\n-            && !(lh.getLastAddConfirmed() == LedgerHandle.INVALID_ENTRY_ID\n-                 && lh.getLedgerMetadata().isClosed())) {\n+        if (curEntryId != null && !(lh.getLedgerMetadata().isClosed() && lh.getLastAddConfirmed() < curEntryId)) {\n             long lastEntry = lh.getLastAddConfirmed();\n \n             if (lastEntry < curEntryId) {"},{"sha":"45ac0e4847f783c41d846aace0ac82e5516bd89d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"modified","additions":42,"deletions":2,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/119e2034303b45478123a0fa62c1c48925b201c1/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/119e2034303b45478123a0fa62c1c48925b201c1/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=119e2034303b45478123a0fa62c1c48925b201c1","patch":"@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.nio.ByteBuffer;\n+import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n@@ -29,6 +30,7 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Test;\n@@ -57,12 +59,50 @@ public LedgerCloseTest() {\n     @Test(timeout = 60000)\n     public void testLedgerCloseDuringUnrecoverableErrors() throws Exception {\n         int numEntries = 3;\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n+        verifyMetadataConsistency(numEntries, lh);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testLedgerCheckerShouldnotSelectInvalidLastFragments() throws Exception {\n+        int numEntries = 10;\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n+        // Add some entries before bookie failures\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry(\"data\".getBytes());\n+        }\n+        numEntries = 4; // add n*ensemleSize+1 entries async after bookies\n+                        // failed.\n+        verifyMetadataConsistency(numEntries, lh);\n+\n+        LedgerChecker checker = new LedgerChecker(bkc);\n+        CheckerCallback cb = new CheckerCallback();\n+        checker.checkLedger(lh, cb);\n+        Set<LedgerFragment> result = cb.waitAndGetResult();\n+        assertEquals(\"No fragments should be selected\", 0, result.size());\n+    }\n+\n+    class CheckerCallback implements GenericCallback<Set<LedgerFragment>> {\n+        private Set<LedgerFragment> result = null;\n+        private CountDownLatch latch = new CountDownLatch(1);\n+\n+        public void operationComplete(int rc, Set<LedgerFragment> result) {\n+            this.result = result;\n+            latch.countDown();\n+        }\n+\n+        Set<LedgerFragment> waitAndGetResult() throws InterruptedException {\n+            latch.await();\n+            return result;\n+        }\n+    }\n+\n+    private void verifyMetadataConsistency(int numEntries, LedgerHandle lh)\n+            throws Exception {\n         final CountDownLatch addDoneLatch = new CountDownLatch(1);\n         final CountDownLatch deadIOLatch = new CountDownLatch(1);\n         final CountDownLatch recoverDoneLatch = new CountDownLatch(1);\n         final CountDownLatch failedLatch = new CountDownLatch(1);\n-\n-        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n         // kill first bookie to replace with a unauthorize bookie\n         InetSocketAddress bookie = lh.getLedgerMetadata().currentEnsemble.get(0);\n         ServerConfiguration conf = killBookie(bookie);"}]}

