{"sha":"12daded8c22edc11363ec4eddfbba670e66ee9ad","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMmRhZGVkOGMyMmVkYzExMzYzZWM0ZWRkZmJiYTY3MGU2NmVlOWFk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T12:30:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T12:30:54Z"},"message":"BOOKKEEPER-715: bookie: delay dropping journal cached pages (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1575246 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"174d506138d4b8ba0545c595e09c6f02ea954eab","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/174d506138d4b8ba0545c595e09c6f02ea954eab"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/12daded8c22edc11363ec4eddfbba670e66ee9ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/12daded8c22edc11363ec4eddfbba670e66ee9ad","html_url":"https://github.com/apache/bookkeeper/commit/12daded8c22edc11363ec4eddfbba670e66ee9ad","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/12daded8c22edc11363ec4eddfbba670e66ee9ad/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"261bb8f671dc233d3b604b3355bb20d82edac539","url":"https://api.github.com/repos/apache/bookkeeper/commits/261bb8f671dc233d3b604b3355bb20d82edac539","html_url":"https://github.com/apache/bookkeeper/commit/261bb8f671dc233d3b604b3355bb20d82edac539"}],"stats":{"total":84,"additions":42,"deletions":42},"files":[{"sha":"dd3094532e070a06d4111464177ce17249a3e555","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/12daded8c22edc11363ec4eddfbba670e66ee9ad/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/12daded8c22edc11363ec4eddfbba670e66ee9ad/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=12daded8c22edc11363ec4eddfbba670e66ee9ad","patch":"@@ -170,6 +170,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-717: journal should look forward to group time-out entries (sijie via ivank)\n \n+        BOOKKEEPER-715: bookie: delay dropping journal cached pages (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"8b582633835d728d842e35e3f618726f25195d2f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":23,"deletions":12,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/12daded8c22edc11363ec4eddfbba670e66ee9ad/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/12daded8c22edc11363ec4eddfbba670e66ee9ad/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=12daded8c22edc11363ec4eddfbba670e66ee9ad","patch":"@@ -45,6 +45,7 @@\n     private final static Logger LOG = LoggerFactory.getLogger(JournalChannel.class);\n \n     final RandomAccessFile randomAccessFile;\n+    final int fd;\n     final FileChannel fc;\n     final BufferedChannel bc;\n     final int formatVersion;\n@@ -53,6 +54,7 @@\n     final byte[] MAGIC_WORD = \"BKLG\".getBytes(UTF_8);\n \n     private final static int START_OF_FILE = -12345;\n+    private static long CACHE_DROP_LAG_BYTES = 8 * 1024 * 1024;\n \n     int HEADER_SIZE = 8; // 4byte magic word, 4 byte version\n     int MIN_COMPAT_JOURNAL_FORMAT_VERSION = 1;\n@@ -62,8 +64,8 @@\n     private boolean fRemoveFromPageCache;\n     public final static ByteBuffer zeros = ByteBuffer.allocate(512);\n \n-    // The position of the file channel's last force write.\n-    private long lastForceWritePosition = 0;\n+    // The position of the file channel's last drop position\n+    private long lastDropPosition = 0L;\n \n     // Mostly used by tests\n     JournalChannel(File journalDirectory, long logId) throws IOException {\n@@ -159,10 +161,8 @@\n             } catch (IOException e) {\n                 LOG.error(\"Bookie journal file can seek to position :\", e);\n             }\n-\n-            // Anything we read has been force written\n-            lastForceWritePosition = fc.position();\n         }\n+        this.fd = NativeIO.getSysFileDescriptor(randomAccessFile.getFD());\n     }\n \n     int getFormatVersion() {\n@@ -198,14 +198,25 @@ public void forceWrite(boolean forceMetadata) throws IOException {\n             LOG.debug(\"Journal ForceWrite\");\n         }\n         long newForceWritePosition = bc.forceWrite(forceMetadata);\n-        if (newForceWritePosition > lastForceWritePosition) {\n-            if (fRemoveFromPageCache) {\n-                NativeIO.bestEffortRemoveFromPageCache(randomAccessFile.getFD(),\n-                    lastForceWritePosition, (int)(newForceWritePosition - lastForceWritePosition));\n-            }\n-            synchronized (this) {\n-                lastForceWritePosition = newForceWritePosition;\n+        //\n+        // For POSIX_FADV_DONTNEED, we want to drop from the beginning\n+        // of the file to a position prior to the current position.\n+        //\n+        // The CACHE_DROP_LAG_BYTES is to prevent dropping a page that will\n+        // be appended again, which would introduce random seeking on journal\n+        // device.\n+        //\n+        // <======== drop ==========>\n+        //                           <-----------LAG------------>\n+        // +------------------------+---------------------------O\n+        // lastDropPosition     newDropPos             lastForceWritePosition\n+        //\n+        if (fRemoveFromPageCache) {\n+            long newDropPos = newForceWritePosition - CACHE_DROP_LAG_BYTES;\n+            if (lastDropPosition < newDropPos) {\n+                NativeIO.bestEffortRemoveFromPageCache(fd, lastDropPosition, newDropPos - lastDropPosition);\n             }\n+            this.lastDropPosition = newDropPos;\n         }\n     }\n }"},{"sha":"24488425b97048ef98335605e73d481cc9dda3e2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","status":"modified","additions":17,"deletions":30,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/12daded8c22edc11363ec4eddfbba670e66ee9ad/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","raw_url":"https://github.com/apache/bookkeeper/raw/12daded8c22edc11363ec4eddfbba670e66ee9ad/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java?ref=12daded8c22edc11363ec4eddfbba670e66ee9ad","patch":"@@ -30,12 +30,11 @@\n \n     private static final int POSIX_FADV_DONTNEED = 4; /* fadvise.h */\n \n-    private static boolean initializationAttempted = false;\n     private static boolean initialized = false;\n+    private static boolean fadvisePossible = true;\n \n-    private static void onDemandInitialization() {\n+    static {\n         try {\n-            initializationAttempted = true;\n             Native.register(\"c\");\n             initialized = true;\n         } catch (NoClassDefFoundError e) {\n@@ -48,7 +47,7 @@ private static void onDemandInitialization() {\n     }\n \n     // fadvice\n-    public static native int posix_fadvise(int fd, long offset, int len, int flag) throws LastErrorException;\n+    public static native int posix_fadvise(int fd, long offset, long len, int flag) throws LastErrorException;\n \n     private NativeIO() {}\n \n@@ -72,8 +71,7 @@ private static Field getFieldByReflection(Class cls, String fieldName) {\n      * @param descriptor - FileDescriptor object to get fd from\n      * @return file descriptor, -1 or error\n      */\n-    private static int getSysFileDescriptor(FileDescriptor descriptor) {\n-        // field would not be null due to 'assert false' in getFieldByReflection\n+    public static int getSysFileDescriptor(FileDescriptor descriptor) {\n         Field field = getFieldByReflection(descriptor.getClass(), \"fd\");\n         try {\n             return field.getInt(descriptor);\n@@ -88,44 +86,33 @@ private static int getSysFileDescriptor(FileDescriptor descriptor) {\n      * Remove pages from the file system page cache when they wont\n      * be accessed again\n      *\n-     * @param fileDescriptor     The file descriptor of the source file.\n+     * @param fd     The file descriptor of the source file.\n      * @param offset The offset within the file.\n      * @param len    The length to be flushed.\n      *\n      * @throws nothing => Best effort\n      */\n \n-    public static void bestEffortRemoveFromPageCache(FileDescriptor fileDescriptor, long offset, int len) {\n-        if (!initializationAttempted) {\n-            onDemandInitialization();\n-        }\n-\n-        if (!initialized) {\n-            return;\n-        }\n-\n-        int sysFileDesc = getSysFileDescriptor(fileDescriptor);\n-\n-        if (sysFileDesc < 0) {\n+    public static void bestEffortRemoveFromPageCache(int fd, long offset, long len) {\n+        if (!initialized || !fadvisePossible || fd < 0) {\n             return;\n         }\n-\n         try {\n-            if (System.getProperty(\"os.name\").toLowerCase().contains(\"linux\")) {\n-                posix_fadvise(sysFileDesc, offset, len, POSIX_FADV_DONTNEED);\n-            } else {\n-                LOG.debug(\"posix_fadvise skipped on file descriptor {}, offset {}\", fileDescriptor, offset);\n-            }\n-        } catch (UnsatisfiedLinkError e) {\n+            posix_fadvise(fd, offset, len, POSIX_FADV_DONTNEED);\n+        } catch (UnsupportedOperationException uoe) {\n+            LOG.warn(\"posix_fadvise is not supported : \", uoe);\n+            fadvisePossible = false;\n+        } catch (UnsatisfiedLinkError ule) {\n             // if JNA is unavailable just skipping Direct I/O\n             // instance of this class will act like normal RandomAccessFile\n-            LOG.warn(\"Unsatisfied Link error: posix_fadvise failed on file descriptor {}, offset {}\",\n-                fileDescriptor, offset);\n+            LOG.warn(\"Unsatisfied Link error: posix_fadvise failed on file descriptor {}, offset {} : \",\n+                    new Object[] { fd, offset, ule });\n+            fadvisePossible = false;\n         } catch (Exception e) {\n             // This is best effort anyway so lets just log that there was an\n             // exception and forget\n-            LOG.warn(\"Unknown exception: posix_fadvise failed on file descriptor {}, offset {}\",\n-                fileDescriptor, offset);\n+            LOG.warn(\"Unknown exception: posix_fadvise failed on file descriptor {}, offset {} : \",\n+                    new Object[] { fd, offset, e });\n         }\n     }\n "}]}

