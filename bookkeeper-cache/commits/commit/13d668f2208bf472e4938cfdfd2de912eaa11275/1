{"sha":"13d668f2208bf472e4938cfdfd2de912eaa11275","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxM2Q2NjhmMjIwOGJmNDcyZTQ5MzhjZmRmZDJkZTkxMmVhYTExMjc1","commit":{"author":{"name":"eolivelli","email":"eolivelli@gmail.com","date":"2017-01-31T01:14:22Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-01-31T01:14:22Z"},"message":"BOOKKEEPER-959: ClientAuthProvider and BookieAuthProvider Public API used Protobuf Shaded classes\n\nThis fix removes the explicit usage of protobuf from ClientAuthProvider and BookieAuthProvider API, since protobuf library is shaded and relocated on the distributed public version of BookKeeper\n\nAuthor: eolivelli <eolivelli@gmail.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #67 from eolivelli/BOOKKEEPER-959","tree":{"sha":"2fa02bf21dc1841cf5ee5c30087d60dfa24bae55","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2fa02bf21dc1841cf5ee5c30087d60dfa24bae55"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/13d668f2208bf472e4938cfdfd2de912eaa11275","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/13d668f2208bf472e4938cfdfd2de912eaa11275","html_url":"https://github.com/apache/bookkeeper/commit/13d668f2208bf472e4938cfdfd2de912eaa11275","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/13d668f2208bf472e4938cfdfd2de912eaa11275/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"26b09abb4202362ca37d6944ce75eb2a3309dc3c","url":"https://api.github.com/repos/apache/bookkeeper/commits/26b09abb4202362ca37d6944ce75eb2a3309dc3c","html_url":"https://github.com/apache/bookkeeper/commit/26b09abb4202362ca37d6944ce75eb2a3309dc3c"}],"stats":{"total":1618,"additions":1115,"deletions":503},"files":[{"sha":"25de77af0dd2b7112d43799710e508ce9f146f6e","filename":"bookkeeper-server/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -279,7 +279,6 @@\n             <!-- exclude generated file //-->\n             <exclude>**/DataFormats.java</exclude>\n             <exclude>**/BookkeeperProtocol.java</exclude>\n-            <exclude>**/TestDataFormats.java</exclude>\n           </excludes>\n         </configuration>\n       </plugin>\n@@ -346,10 +345,6 @@\n                       <arg value=\"--java_out=src/main/java\" />\n                       <arg value=\"src/main/proto/BookkeeperProtocol.proto\" />\n                     </exec>\n-                    <exec executable=\"protoc\" failonerror=\"true\">\n-                      <arg value=\"--java_out=src/test/java\" />\n-                      <arg value=\"src/test/proto/TestDataFormats.proto\" />\n-                    </exec>\n                   </target>\n                 </configuration>\n                 <goals>"},{"sha":"200420a182ea7a940872550b9e0d7e6ceadc1c67","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthCallbacks.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthCallbacks.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -0,0 +1,28 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.auth;\n+\n+/**\n+ * Callbacks for AuthProviders\n+ */\n+public abstract class AuthCallbacks {\n+\n+    public interface GenericCallback<T> {\n+\n+        void operationComplete(int rc, T result);\n+    }\n+}"},{"sha":"72549037fc74cdea0134086a48530e04a991e30f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthProviderFactoryFactory.java","status":"modified","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthProviderFactoryFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthProviderFactoryFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthProviderFactoryFactory.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -21,40 +21,34 @@\n package org.apache.bookkeeper.auth;\n \n import java.io.IOException;\n-import java.net.InetSocketAddress;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage;\n import org.apache.bookkeeper.util.ReflectionUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n-import com.google.protobuf.ExtensionRegistry;\n-\n+import org.apache.bookkeeper.client.ClientConnectionPeer;\n+import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n \n \n public class AuthProviderFactoryFactory {\n     static Logger LOG = LoggerFactory.getLogger(AuthProviderFactoryFactory.class);\n \n-    public static BookieAuthProvider.Factory newBookieAuthProviderFactory(ServerConfiguration conf,\n-                                                                          ExtensionRegistry registry) throws IOException {\n+    public static BookieAuthProvider.Factory newBookieAuthProviderFactory(ServerConfiguration conf) throws IOException {\n         String factoryClassName = conf.getBookieAuthProviderFactoryClass();\n \n         if (factoryClassName == null || factoryClassName.length() == 0) {\n-            return new NullBookieAuthProviderFactory();\n+            return new AuthenticationDisabledAuthProviderFactory();\n         }\n \n         BookieAuthProvider.Factory factory = ReflectionUtils.newInstance(factoryClassName,\n                                                                          BookieAuthProvider.Factory.class);\n-        factory.init(conf, registry);\n+        factory.init(conf);\n         return factory;\n     }\n \n-    public static ClientAuthProvider.Factory newClientAuthProviderFactory(ClientConfiguration conf,\n-                                                                          ExtensionRegistry registry) throws IOException {\n+    public static ClientAuthProvider.Factory newClientAuthProviderFactory(ClientConfiguration conf) throws IOException {\n         String factoryClassName = conf.getClientAuthProviderFactoryClass();\n \n         if (factoryClassName == null || factoryClassName.length() == 0) {\n@@ -63,47 +57,53 @@\n \n         ClientAuthProvider.Factory factory = ReflectionUtils.newInstance(factoryClassName,\n                                                                          ClientAuthProvider.Factory.class);\n-        factory.init(conf, registry);\n+        factory.init(conf);\n         return factory;\n     }\n \n-    private final static String nullPluginName = \"NULLPlugin\";\n+    public final static String authenticationDisabledPluginName = \"AuthDisabledPlugin\";\n \n-    private static class NullBookieAuthProviderFactory implements BookieAuthProvider.Factory {\n+    private static class AuthenticationDisabledAuthProviderFactory implements BookieAuthProvider.Factory {\n         @Override\n         public String getPluginName() {\n-            return nullPluginName;\n+            return authenticationDisabledPluginName;\n         }\n \n         @Override\n-        public void init(ServerConfiguration conf, ExtensionRegistry registry) {}\n+        public void init(ServerConfiguration conf) {}\n \n         @Override\n-        public BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                              GenericCallback<Void> completeCb) {\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              AuthCallbacks.GenericCallback<Void> completeCb) {\n             completeCb.operationComplete(BKException.Code.OK, null);\n             return new BookieAuthProvider() {\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {}\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                    // any request of authentication for clients is going to be answered with a standard response\n+                    // the client will d\n+                    addr.setAuthorizedId(BookKeeperPrincipal.ANONYMOUS);\n+                    cb.operationComplete(BKException.Code.OK, AuthToken.NULL);\n+                }\n             };\n         }\n     }\n \n     private static class NullClientAuthProviderFactory implements ClientAuthProvider.Factory {\n         @Override\n         public String getPluginName() {\n-            return nullPluginName;\n+            return authenticationDisabledPluginName;\n         }\n \n         @Override\n-        public void init(ClientConfiguration conf, ExtensionRegistry registry) {}\n+        public void init(ClientConfiguration conf) {}\n \n         @Override\n-        public ClientAuthProvider newProvider(InetSocketAddress addr,\n-                                              GenericCallback<Void> completeCb) {\n+        public ClientAuthProvider newProvider(ClientConnectionPeer addr,\n+                                              AuthCallbacks.GenericCallback<Void> completeCb) {\n+            addr.setAuthorizedId(BookKeeperPrincipal.ANONYMOUS);\n             completeCb.operationComplete(BKException.Code.OK, null);\n             return new ClientAuthProvider() {\n-                public void init(GenericCallback<AuthMessage> cb) {}\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {}\n+                public void init(AuthCallbacks.GenericCallback<AuthToken> cb) {}\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {}\n             };\n         }\n     }"},{"sha":"f4d0fab753f80c9f1d0f55cbb567a9db97d6995a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthToken.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthToken.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthToken.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/AuthToken.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -0,0 +1,44 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.auth;\n+\n+/**\n+ * A generic payload for Authentication Messages\n+ */\n+public class AuthToken {\n+\n+    public static final AuthToken NULL = wrap(new byte[0]);\n+\n+    private final byte[] data;\n+\n+    private AuthToken(byte[] data) {\n+        this.data = data;\n+    }\n+\n+    public static AuthToken wrap(byte[] data) {\n+        return new AuthToken(data);\n+    }\n+\n+    public byte[] getData() {\n+        return data;\n+    }\n+\n+}"},{"sha":"7f6e5821ced4a45cfb8550604f8945c336a02d13","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookKeeperPrincipal.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookKeeperPrincipal.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookKeeperPrincipal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookKeeperPrincipal.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -0,0 +1,72 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.auth;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A Principal is the user bound to the connection\n+ */\n+public class BookKeeperPrincipal {\n+\n+    private final String name;\n+\n+    public static final BookKeeperPrincipal ANONYMOUS = new BookKeeperPrincipal(\"ANONYMOUS\");\n+\n+    public BookKeeperPrincipal(String name) {\n+        this.name = name;\n+    }\n+\n+    public final String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"BookKeeperPrincipal{\" + name + '}';\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        int hash = 7;\n+        hash = 31 * hash + Objects.hashCode(this.name);\n+        return hash;\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final BookKeeperPrincipal other = (BookKeeperPrincipal) obj;\n+        if (!Objects.equals(this.name, other.name)) {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+}"},{"sha":"84577c73e80de7a94c242fb3479d4d2adedbf36f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookieAuthProvider.java","status":"modified","additions":16,"deletions":10,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookieAuthProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookieAuthProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/BookieAuthProvider.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -21,13 +21,10 @@\n package org.apache.bookkeeper.auth;\n \n import java.io.IOException;\n-import java.net.InetSocketAddress;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage;\n-\n-import com.google.protobuf.ExtensionRegistry;\n+import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n \n /**\n  * Bookie authentication provider interface.\n@@ -43,8 +40,7 @@\n          * payload, so that the server can decode auth messages\n          * it receives from the client.\n          */\n-        void init(ServerConfiguration conf,\n-                  ExtensionRegistry registry) throws IOException;\n+        void init(ServerConfiguration conf) throws IOException;\n \n         /**\n          * Create a new instance of a bookie auth provider.\n@@ -58,19 +54,24 @@ void init(ServerConfiguration conf,\n          * error code should be passed.\n          * If authentication fails, the server will close the\n          * connection.\n-         * @param addr the address of the client being authenticated\n+         * @param connection an handle to the connection\n          * @param completeCb callback to be notified when authentication\n          *                   is complete.\n          */\n-        BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                       GenericCallback<Void> completeCb);\n+        BookieAuthProvider newProvider(BookieConnectionPeer connection,\n+                                       AuthCallbacks.GenericCallback<Void> completeCb);\n \n         /**\n          * Get Auth provider plugin name.\n          * Used as a sanity check to ensure that the bookie and the client.\n          * are using the same auth provider.\n          */\n         String getPluginName();\n+\n+        /**\n+        * Release resources\n+        */\n+        default void close() {}\n     }\n \n     /**\n@@ -79,5 +80,10 @@ BookieAuthProvider newProvider(InetSocketAddress addr,\n      * to send to the client, cb should not be called, and completeCb\n      * must be called instead.\n      */\n-    void process(AuthMessage m, GenericCallback<AuthMessage> cb);\n+    void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb);\n+\n+    /**\n+     * Release resources\n+     */\n+    default void close() {}\n }"},{"sha":"b24b1b47c0cf2a9ecb1da897b74693fb44adc2e5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/ClientAuthProvider.java","status":"modified","additions":17,"deletions":12,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/ClientAuthProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/ClientAuthProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/auth/ClientAuthProvider.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -21,13 +21,9 @@\n package org.apache.bookkeeper.auth;\n \n import java.io.IOException;\n-import java.net.InetSocketAddress;\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage;\n-\n-import com.google.protobuf.ExtensionRegistry;\n+import org.apache.bookkeeper.client.ClientConnectionPeer;\n \n /**\n  * Client authentication provider interface.\n@@ -43,8 +39,7 @@\n          * payload, so that the client can decode auth messages\n          * it receives from the server.\n          */\n-        void init(ClientConfiguration conf,\n-                  ExtensionRegistry registry) throws IOException;\n+        void init(ClientConfiguration conf) throws IOException;\n \n         /**\n          * Create a new instance of a client auth provider.\n@@ -56,19 +51,24 @@ void init(ClientConfiguration conf,\n          * If the authentication was successful, BKException.Code.OK\n          * should be passed as the return code. Otherwise, another\n          * error code should be passed.\n-         * @param addr the address of the socket being authenticated\n+         * @param connection an handle to the connection\n          * @param completeCb callback to be notified when authentication\n          *                   is complete.\n          */\n-        ClientAuthProvider newProvider(InetSocketAddress addr,\n-                                       GenericCallback<Void> completeCb);\n+        ClientAuthProvider newProvider(ClientConnectionPeer connection,\n+                                       AuthCallbacks.GenericCallback<Void> completeCb);\n \n         /**\n          * Get Auth provider plugin name.\n          * Used as a sanity check to ensure that the bookie and the client.\n          * are using the same auth provider.\n          */\n         String getPluginName();\n+\n+        /**\n+        * Release resources\n+        */\n+        default void close() {}\n     }\n \n     /**\n@@ -77,13 +77,18 @@ ClientAuthProvider newProvider(InetSocketAddress addr,\n      * cb may not be called if authentication is not requires. In\n      * this case, completeCb should be called.\n      */\n-    void init(GenericCallback<AuthMessage> cb);\n+    void init(AuthCallbacks.GenericCallback<AuthToken> cb);\n \n     /**\n      * Process a response from the server. cb will receive the next\n      * message to be sent to the server. If there are no more messages\n      * to send to the server, cb should not be called, and completeCb\n      * must be called instead.\n      */\n-    void process(AuthMessage m, GenericCallback<AuthMessage> cb);\n+    void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb);\n+\n+    /**\n+     * Release resources\n+     */\n+    default void close() {}\n }"},{"sha":"f7b917d9b28603e40e1ae83d4414f7af71db9bef","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieConnectionPeer.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieConnectionPeer.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieConnectionPeer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieConnectionPeer.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -0,0 +1,30 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import org.apache.bookkeeper.proto.ConnectionPeer;\n+\n+/**\n+ * Represents the connection to a BookKeeper client, from the Bookie side \n+ */\n+public interface BookieConnectionPeer extends ConnectionPeer {\n+\n+}"},{"sha":"322cba9d3835c269824528e23464a9e5c4675bdb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ClientConnectionPeer.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ClientConnectionPeer.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ClientConnectionPeer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ClientConnectionPeer.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -0,0 +1,30 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import org.apache.bookkeeper.proto.ConnectionPeer;\n+\n+/**\n+ * Represents the connection to a Bookie, from the client side\n+ */\n+public interface ClientConnectionPeer extends ConnectionPeer {\n+\n+}"},{"sha":"7df41fc842634a06b74f5415c9a4588927de8ed0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -18,6 +18,7 @@\n package org.apache.bookkeeper.conf;\n \n import java.net.URL;\n+import static org.apache.bookkeeper.conf.ClientConfiguration.CLIENT_AUTH_PROVIDER_FACTORY_CLASS;\n \n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.Configuration;\n@@ -66,6 +67,9 @@\n     protected final static String METASTORE_IMPL_CLASS = \"metastoreImplClass\";\n     protected final static String METASTORE_MAX_ENTRIES_PER_SCAN = \"metastoreMaxEntriesPerScan\";\n \n+    // Client auth provider factory class name. It must be configured on Bookies to for the Auditor\n+    protected final static String CLIENT_AUTH_PROVIDER_FACTORY_CLASS = \"clientAuthProviderFactoryClass\";\n+\n     protected AbstractConfiguration() {\n         super();\n         if (READ_SYSTEM_PROPERTIES) {\n@@ -256,4 +260,28 @@ public Feature getFeature(String configProperty, Feature defaultValue) {\n             return (Feature)getProperty(configProperty);\n         }\n     }\n+\n+    /**\n+     * Set the client authentication provider factory class name.\n+     * If this is not set, no authentication will be used\n+     *\n+     * @param factoryClass\n+     *          the client authentication provider factory class name\n+     * @return client configuration\n+     */\n+    public AbstractConfiguration setClientAuthProviderFactoryClass(\n+            String factoryClass) {\n+        setProperty(CLIENT_AUTH_PROVIDER_FACTORY_CLASS, factoryClass);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the client authentication provider factory class name. If this returns null, no authentication will take\n+     * place.\n+     *\n+     * @return the client authentication provider factory class name or null.\n+     */\n+    public String getClientAuthProviderFactoryClass() {\n+        return getString(CLIENT_AUTH_PROVIDER_FACTORY_CLASS, null);\n+    }\n }"},{"sha":"7353c3f8631afe172c260e04944fd89fdc0bb642","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":31,"deletions":14,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -25,6 +25,7 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.EnsemblePlacementPolicy;\n import org.apache.bookkeeper.client.RackawareEnsemblePlacementPolicy;\n+import org.apache.bookkeeper.replication.Auditor;\n import org.apache.bookkeeper.util.ReflectionUtils;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.lang.StringUtils;\n@@ -86,8 +87,18 @@\n     protected final static String ENABLE_TASK_EXECUTION_STATS = \"enableTaskExecutionStats\";\n     protected final static String TASK_EXECUTION_WARN_TIME_MICROS = \"taskExecutionWarnTimeMicros\";\n \n-    // Client auth provider factory class name\n-    protected final static String CLIENT_AUTH_PROVIDER_FACTORY_CLASS = \"clientAuthProviderFactoryClass\";\n+    // Role of the client\n+    protected final static String CLIENT_ROLE = \"clientRole\";\n+\n+    /**\n+     * This client will act as a standard client\n+     */\n+    public final static String CLIENT_ROLE_STANDARD = \"standard\";\n+\n+    /**\n+     * This client will act as a system client, like the {@link Auditor}\n+     */\n+    public final static String CLIENT_ROLE_SYSTEM = \"system\";\n \n     /**\n      * Construct a default client-side configuration\n@@ -896,26 +907,32 @@ public ClientConfiguration setBookieQuarantineTime(int quarantineTime, TimeUnit\n     }\n \n     /**\n-     * Set the client authentication provider factory class name.\n-     * If this is not set, no authentication will be used\n+     * Set the client role\n      *\n-     * @param factoryClass\n-     *          the client authentication provider factory class name\n+     * @param role defines how the client will act\n      * @return client configuration\n      */\n-    public ClientConfiguration setClientAuthProviderFactoryClass(\n-            String factoryClass) {\n-        setProperty(CLIENT_AUTH_PROVIDER_FACTORY_CLASS, factoryClass);\n+    public ClientConfiguration setClientRole(String role) {\n+        if (role == null) {\n+            throw new NullPointerException();\n+        }\n+        switch (role) {\n+            case CLIENT_ROLE_STANDARD:\n+            case CLIENT_ROLE_SYSTEM:\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"invalid role \"+role);\n+        }\n+        setProperty(CLIENT_ROLE, role);\n         return this;\n     }\n \n     /**\n-     * Get the client authentication provider factory class name. If this returns null, no authentication will take\n-     * place.\n+     * Get the role of the client\n      *\n-     * @return the client authentication provider factory class name or null.\n+     * @return the type of client\n      */\n-    public String getClientAuthProviderFactoryClass() {\n-        return getString(CLIENT_AUTH_PROVIDER_FACTORY_CLASS, null);\n+    public String getClientRole() {\n+        return getString(CLIENT_ROLE, CLIENT_ROLE_STANDARD);\n     }\n }"},{"sha":"75dced5152806bd46037db11a9a9f6f4000afd16","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java","status":"modified","additions":91,"deletions":48,"changes":139,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -20,13 +20,15 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import com.google.protobuf.ByteString;\n import java.io.IOException;\n-import java.net.Inet4Address;\n-import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.bookkeeper.auth.AuthCallbacks;\n+import org.apache.bookkeeper.auth.AuthProviderFactoryFactory;\n+import org.apache.bookkeeper.auth.AuthToken;\n \n import org.apache.bookkeeper.auth.BookieAuthProvider;\n import org.apache.bookkeeper.auth.ClientAuthProvider;\n@@ -39,41 +41,41 @@\n import org.jboss.netty.channel.DefaultExceptionEvent;\n import org.jboss.netty.channel.MessageEvent;\n import org.jboss.netty.channel.SimpleChannelHandler;\n-import org.jboss.netty.channel.local.LocalChannel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.bookkeeper.client.ClientConnectionPeer;\n+import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n \n class AuthHandler {\n     static final Logger LOG = LoggerFactory.getLogger(AuthHandler.class);\n \n     static class ServerSideHandler extends SimpleChannelHandler {\n         volatile boolean authenticated = false;\n         final BookieAuthProvider.Factory authProviderFactory;\n+        final BookieConnectionPeer connectionPeer;\n         BookieAuthProvider authProvider;\n \n-        ServerSideHandler(BookieAuthProvider.Factory authProviderFactory) {\n+        ServerSideHandler(BookieConnectionPeer connectionPeer, BookieAuthProvider.Factory authProviderFactory) {\n             this.authProviderFactory = authProviderFactory;\n+            this.connectionPeer = connectionPeer;\n             authProvider = null;\n         }\n \n         @Override\n         public void channelOpen(ChannelHandlerContext ctx,\n                                 ChannelStateEvent e) throws Exception {\n-            LOG.info(\"Channel open {}\", ctx.getChannel());\n-            SocketAddress remote  = ctx.getChannel().getRemoteAddress();\n-            if (remote instanceof InetSocketAddress) {\n-                authProvider = authProviderFactory.newProvider((InetSocketAddress)remote,\n-                        new AuthHandshakeCompleteCallback());\n-            } else if (ctx.getChannel() instanceof LocalChannel) {\n-                authProvider = authProviderFactory.newProvider(new InetSocketAddress(Inet4Address.getLocalHost(), 0),\n-                        new AuthHandshakeCompleteCallback());\n-            } else {\n-                LOG.error(\"Unknown channel ({}) or socket type {} for {}\",\n-                        new Object[] { ctx.getChannel(), remote != null ? remote.getClass() : null, remote });\n-            }\n+            authProvider = authProviderFactory.newProvider(connectionPeer, new AuthHandshakeCompleteCallback());\n             super.channelOpen(ctx, e);\n         }\n \n+        @Override\n+        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {\n+            if (authProvider != null) {\n+                authProvider.close();\n+            }\n+            super.channelClosed(ctx, e);\n+        }\n+\n         @Override\n         public void messageReceived(ChannelHandlerContext ctx,\n                                     MessageEvent e)\n@@ -94,7 +96,11 @@ public void messageReceived(ChannelHandlerContext ctx,\n                 BookieProtocol.AuthRequest req = (BookieProtocol.AuthRequest)event;\n                 assert (req.getOpCode() == BookieProtocol.AUTH);\n                 if (checkAuthPlugin(req.getAuthMessage(), ctx.getChannel())) {\n-                    authProvider.process(req.getAuthMessage(),\n+                    byte[] payload = req\n+                        .getAuthMessage()\n+                        .getPayload()\n+                        .toByteArray();\n+                    authProvider.process(AuthToken.wrap(payload),\n                                 new AuthResponseCallbackLegacy(req, ctx.getChannel()));\n                 } else {\n                     ctx.getChannel().close();\n@@ -119,8 +125,12 @@ public void messageReceived(ChannelHandlerContext ctx,\n                 if (req.getHeader().getOperation() == BookkeeperProtocol.OperationType.AUTH\n                         && req.hasAuthRequest()\n                         && checkAuthPlugin(req.getAuthRequest(), ctx.getChannel())) {\n-                    authProvider.process(req.getAuthRequest(),\n-                                         new AuthResponseCallback(req, ctx.getChannel()));\n+                    byte[] payload = req\n+                        .getAuthRequest()\n+                        .getPayload()\n+                        .toByteArray();\n+                    authProvider.process(AuthToken.wrap(payload),\n+                                         new AuthResponseCallback(req, ctx.getChannel(), authProviderFactory.getPluginName()));\n                 } else {\n                     BookkeeperProtocol.Response.Builder builder\n                         = BookkeeperProtocol.Response.newBuilder()\n@@ -146,7 +156,7 @@ private boolean checkAuthPlugin(AuthMessage am, final Channel src) {\n             return true;\n         }\n \n-        static class AuthResponseCallbackLegacy implements GenericCallback<AuthMessage> {\n+        static class AuthResponseCallbackLegacy implements AuthCallbacks.GenericCallback<AuthToken> {\n             final BookieProtocol.AuthRequest req;\n             final Channel channel;\n \n@@ -155,27 +165,35 @@ private boolean checkAuthPlugin(AuthMessage am, final Channel src) {\n                 this.channel = channel;\n             }\n \n-            public void operationComplete(int rc, AuthMessage newam) {\n+            public void operationComplete(int rc, AuthToken newam) {\n                 if (rc != BKException.Code.OK) {\n                     LOG.error(\"Error processing auth message, closing connection\");\n                     channel.close();\n                     return;\n                 }\n+                AuthMessage message =\n+                    AuthMessage\n+                        .newBuilder()\n+                        .setAuthPluginName(req.authMessage.getAuthPluginName())\n+                        .setPayload(ByteString.copyFrom(newam.getData()))\n+                        .build();\n                 channel.write(new BookieProtocol.AuthResponse(req.getProtocolVersion(),\n-                                                              newam));\n+                                                              message));\n             }\n         }\n \n-        static class AuthResponseCallback implements GenericCallback<AuthMessage> {\n+        static class AuthResponseCallback implements AuthCallbacks.GenericCallback<AuthToken> {\n             final BookkeeperProtocol.Request req;\n             final Channel channel;\n+            final String pluginName;\n \n-            AuthResponseCallback(BookkeeperProtocol.Request req, Channel channel) {\n+            AuthResponseCallback(BookkeeperProtocol.Request req, Channel channel, String pluginName) {\n                 this.req = req;\n                 this.channel = channel;\n+                this.pluginName = pluginName;\n             }\n \n-            public void operationComplete(int rc, AuthMessage newam) {\n+            public void operationComplete(int rc, AuthToken newam) {\n                 BookkeeperProtocol.Response.Builder builder\n                     = BookkeeperProtocol.Response.newBuilder()\n                     .setHeader(req.getHeader());\n@@ -188,18 +206,25 @@ public void operationComplete(int rc, AuthMessage newam) {\n                     channel.close();\n                     return;\n                 } else {\n+                    AuthMessage message =\n+                        AuthMessage\n+                            .newBuilder()\n+                            .setAuthPluginName(pluginName)\n+                            .setPayload(ByteString.copyFrom(newam.getData()))\n+                            .build();\n                     builder.setStatus(BookkeeperProtocol.StatusCode.EOK)\n-                        .setAuthResponse(newam);\n+                        .setAuthResponse(message);\n                     channel.write(builder.build());\n                 }\n             }\n         }\n \n-        class AuthHandshakeCompleteCallback implements GenericCallback<Void> {\n+        class AuthHandshakeCompleteCallback implements AuthCallbacks.GenericCallback<Void> {\n             @Override\n             public void operationComplete(int rc, Void v) {\n                 if (rc == BKException.Code.OK) {\n                     authenticated = true;\n+                    LOG.info(\"Authentication success on server side\");\n                 } else {\n                     LOG.debug(\"Authentication failed on server side\");\n                 }\n@@ -211,36 +236,36 @@ public void operationComplete(int rc, Void v) {\n         volatile boolean authenticated = false;\n         final ClientAuthProvider.Factory authProviderFactory;\n         ClientAuthProvider authProvider;\n-        AtomicLong transactionIdGenerator;\n-        Queue<MessageEvent> waitingForAuth = new ConcurrentLinkedQueue<MessageEvent>();\n+        final AtomicLong transactionIdGenerator;\n+        final Queue<MessageEvent> waitingForAuth = new ConcurrentLinkedQueue<MessageEvent>();\n+        final ClientConnectionPeer connectionPeer;\n \n         ClientSideHandler(ClientAuthProvider.Factory authProviderFactory,\n-                          AtomicLong transactionIdGenerator) {\n+                          AtomicLong transactionIdGenerator,\n+                          ClientConnectionPeer connectionPeer) {\n             this.authProviderFactory = authProviderFactory;\n             this.transactionIdGenerator = transactionIdGenerator;\n+            this.connectionPeer = connectionPeer;\n             authProvider = null;\n         }\n \n         @Override\n         public void channelConnected(ChannelHandlerContext ctx,\n                                      ChannelStateEvent e)\n                 throws Exception {\n-            SocketAddress remote  = ctx.getChannel().getRemoteAddress();\n-            if (remote instanceof InetSocketAddress) {\n-                authProvider = authProviderFactory.newProvider((InetSocketAddress)remote,\n-                        new AuthHandshakeCompleteCallback(ctx));\n-            } else if (ctx.getChannel() instanceof LocalChannel) {\n-                authProvider = authProviderFactory.newProvider(new InetSocketAddress(Inet4Address.getLocalHost(), 0),\n+            authProvider = authProviderFactory.newProvider(connectionPeer,\n                         new AuthHandshakeCompleteCallback(ctx));\n-            } else {\n-                LOG.error(\"Unknown channel ({}) or socket type {} for {}\",\n-                        new Object[] { ctx.getChannel(), remote != null ? remote.getClass() : null, remote });\n-            }\n+            authProvider.init(new AuthRequestCallback(ctx, authProviderFactory.getPluginName()));\n+\n+            super.channelConnected(ctx, e);\n+        }\n \n+        @Override\n+        public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {\n             if (authProvider != null) {\n-                authProvider.init(new AuthRequestCallback(ctx));\n+                authProvider.close();\n             }\n-            super.channelConnected(ctx, e);\n+            super.channelClosed(ctx, e);\n         }\n \n         @Override\n@@ -261,7 +286,18 @@ public void messageReceived(ChannelHandlerContext ctx,\n                     } else {\n                         assert (resp.hasAuthResponse());\n                         BookkeeperProtocol.AuthMessage am = resp.getAuthResponse();\n-                        authProvider.process(am, new AuthRequestCallback(ctx));\n+                        if (AuthProviderFactoryFactory.authenticationDisabledPluginName.equals(am.getAuthPluginName())){\n+                            SocketAddress remote  = ctx.getChannel().getRemoteAddress();\n+                            LOG.info(\"Authentication is not enabled.\"\n+                                + \"Considering this client {0} authenticated\", remote);\n+                            AuthHandshakeCompleteCallback authHandshakeCompleteCallback\n+                                = new AuthHandshakeCompleteCallback(ctx);\n+                            authHandshakeCompleteCallback.operationComplete(BKException.Code.OK, null);\n+                            return;\n+                        }\n+                        byte[] payload = am.getPayload().toByteArray();\n+                        authProvider.process(AuthToken.wrap(payload), new AuthRequestCallback(ctx,\n+                            authProviderFactory.getPluginName()));\n                     }\n                 } else {\n                     // else just drop the message,\n@@ -301,20 +337,27 @@ void authenticationError(ChannelHandlerContext ctx, int errorCode) {\n                                              \"Auth failed with error \" + errorCode)));\n         }\n \n-        class AuthRequestCallback implements GenericCallback<AuthMessage> {\n+        class AuthRequestCallback implements AuthCallbacks.GenericCallback<AuthToken> {\n             Channel channel;\n             ChannelHandlerContext ctx;\n+            String pluginName;\n \n-            AuthRequestCallback(ChannelHandlerContext ctx) {\n+            AuthRequestCallback(ChannelHandlerContext ctx, String pluginName) {\n                 this.channel = ctx.getChannel();\n                 this.ctx = ctx;\n+                this.pluginName = pluginName;\n             }\n \n-            public void operationComplete(int rc, AuthMessage newam) {\n+            public void operationComplete(int rc, AuthToken newam) {\n                 if (rc != BKException.Code.OK) {\n                     authenticationError(ctx, rc);\n                     return;\n                 }\n+                AuthMessage message = AuthMessage\n+                    .newBuilder()\n+                    .setAuthPluginName(pluginName)\n+                    .setPayload(ByteString.copyFrom(newam.getData()))\n+                    .build();\n \n                 BookkeeperProtocol.BKPacketHeader header\n                     = BookkeeperProtocol.BKPacketHeader.newBuilder()\n@@ -324,13 +367,13 @@ public void operationComplete(int rc, AuthMessage newam) {\n                 BookkeeperProtocol.Request.Builder builder\n                     = BookkeeperProtocol.Request.newBuilder()\n                     .setHeader(header)\n-                    .setAuthRequest(newam);\n+                    .setAuthRequest(message);\n \n                 channel.write(builder.build());\n             }\n         }\n \n-        class AuthHandshakeCompleteCallback implements GenericCallback<Void> {\n+        class AuthHandshakeCompleteCallback implements AuthCallbacks.GenericCallback<Void> {\n             ChannelHandlerContext ctx;\n             AuthHandshakeCompleteCallback(ChannelHandlerContext ctx) {\n                 this.ctx = ctx;"},{"sha":"9b0865ae99a9f4dd494756ad746ef7a555880f59","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -98,7 +98,7 @@ public BookieClient(ClientConfiguration conf, ClientSocketChannelFactory channel\n         this.closeLock = new ReentrantReadWriteLock();\n \n         this.registry = ExtensionRegistry.newInstance();\n-        this.authProviderFactory = AuthProviderFactoryFactory.newClientAuthProviderFactory(conf, registry);\n+        this.authProviderFactory = AuthProviderFactoryFactory.newClientAuthProviderFactory(conf);\n \n         this.statsLogger = statsLogger;\n         this.numConnectionsPerBookie = conf.getNumChannelsPerBookie();\n@@ -295,6 +295,7 @@ public void close() {\n                 pool.close(true);\n             }\n             channels.clear();\n+            authProviderFactory.close();\n         } finally {\n             closeLock.writeLock().unlock();\n         }"},{"sha":"924c88733b5ac9201bc2290ca04a797e3304bd5e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","status":"modified","additions":73,"deletions":7,"changes":80,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieNettyServer.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -44,13 +44,19 @@\n import org.slf4j.LoggerFactory;\n import com.google.protobuf.ExtensionRegistry;\n import com.google.common.annotations.VisibleForTesting;\n+import java.net.SocketAddress;\n import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n+import org.apache.bookkeeper.auth.BookKeeperPrincipal;\n+import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n \n /**\n  * Netty server for serving bookie requests\n  */\n class BookieNettyServer {\n+\n     private final static Logger LOG = LoggerFactory.getLogger(BookieNettyServer.class);\n \n     final static int maxMessageSize = 0xfffff;\n@@ -67,12 +73,12 @@\n     final BookieProtoEncoding.RequestDecoder requestDecoder;\n \n     BookieNettyServer(ServerConfiguration conf, RequestProcessor processor)\n-            throws IOException, KeeperException, InterruptedException, BookieException {\n+        throws IOException, KeeperException, InterruptedException, BookieException {\n         this.conf = conf;\n         this.requestProcessor = processor;\n \n         ExtensionRegistry registry = ExtensionRegistry.newInstance();\n-        authProviderFactory = AuthProviderFactoryFactory.newBookieAuthProviderFactory(conf, registry);\n+        authProviderFactory = AuthProviderFactoryFactory.newBookieAuthProviderFactory(conf);\n \n         responseEncoder = new BookieProtoEncoding.ResponseEncoder(registry);\n         requestDecoder = new BookieProtoEncoding.RequestDecoder(registry);\n@@ -130,6 +136,64 @@ void shutdown() {\n         for (ChannelManager channel : channels) {\n             channel.close();\n         }\n+        authProviderFactory.close();\n+    }\n+\n+    class BookieSideConnectionPeerContextHandler extends SimpleChannelHandler {\n+\n+        final BookieConnectionPeer connectionPeer;\n+        volatile Channel channel;\n+        volatile BookKeeperPrincipal authorizedId = BookKeeperPrincipal.ANONYMOUS;\n+\n+        public BookieSideConnectionPeerContextHandler() {\n+            this.connectionPeer = new BookieConnectionPeer() {\n+                @Override\n+                public SocketAddress getRemoteAddr() {\n+                    Channel c = channel;\n+                    if (c != null) {\n+                        return c.getRemoteAddress();\n+                    } else {\n+                        return null;\n+                    }\n+                }\n+\n+                @Override\n+                public Collection<Object> getProtocolPrincipals() {\n+                    return Collections.emptyList();\n+                }\n+\n+                @Override\n+                public void disconnect() {\n+                    Channel c = channel;\n+                    if (c != null) {\n+                        c.close();\n+                    }\n+                    LOG.info(\"authplugin disconnected channel {}\", channel);\n+                }\n+\n+                @Override\n+                public BookKeeperPrincipal getAuthorizedId() {\n+                    return authorizedId;\n+                }\n+\n+                @Override\n+                public void setAuthorizedId(BookKeeperPrincipal principal) {\n+                    LOG.info(\"connection {} authenticated as {}\", channel, principal);\n+                    authorizedId = principal;\n+                }\n+\n+            };\n+        }\n+\n+        public BookieConnectionPeer getConnectionPeer() {\n+            return connectionPeer;\n+        }\n+\n+        @Override\n+        public void channelBound(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {\n+            channel = ctx.getChannel();\n+        }\n+\n     }\n \n     class BookiePipelineFactory implements ChannelPipelineFactory {\n@@ -140,21 +204,23 @@ public ChannelPipeline getPipeline() throws Exception {\n                     suspensionLock.wait();\n                 }\n             }\n+            BookieSideConnectionPeerContextHandler contextHandler = new BookieSideConnectionPeerContextHandler();\n             ChannelPipeline pipeline = Channels.pipeline();\n             pipeline.addLast(\"lengthbaseddecoder\",\n-                    new LengthFieldBasedFrameDecoder(maxMessageSize, 0, 4, 0, 4));\n+                new LengthFieldBasedFrameDecoder(maxMessageSize, 0, 4, 0, 4));\n             pipeline.addLast(\"lengthprepender\", new LengthFieldPrepender(4));\n \n             pipeline.addLast(\"bookieProtoDecoder\", requestDecoder);\n             pipeline.addLast(\"bookieProtoEncoder\", responseEncoder);\n             pipeline.addLast(\"bookieAuthHandler\",\n-                    new AuthHandler.ServerSideHandler(authProviderFactory));\n+                new AuthHandler.ServerSideHandler(contextHandler.getConnectionPeer(), authProviderFactory));\n \n             SimpleChannelHandler requestHandler = isRunning.get()\n-                    ? new BookieRequestHandler(conf, requestProcessor, allChannels)\n-                    : new RejectRequestHandler();\n+                ? new BookieRequestHandler(conf, requestProcessor, allChannels)\n+                : new RejectRequestHandler();\n \n             pipeline.addLast(\"bookieRequestHandler\", requestHandler);\n+            pipeline.addLast(\"contextHandler\", contextHandler);\n             return pipeline;\n         }\n     }\n@@ -198,7 +264,7 @@ public boolean equals(Object o) {\n             }\n             CleanupChannelGroup other = (CleanupChannelGroup) o;\n             return other.closed.get() == closed.get()\n-                    && super.equals(other);\n+                && super.equals(other);\n         }\n \n         @Override"},{"sha":"7b227fa8a4065ea3e826913bbd5427fe97d76940","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestProcessor.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -20,6 +20,13 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import com.google.protobuf.ByteString;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import org.apache.bookkeeper.auth.AuthProviderFactoryFactory;\n+import org.apache.bookkeeper.auth.AuthToken;\n+\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.processor.RequestProcessor;\n@@ -115,6 +122,19 @@ public void processRequest(Object msg, Channel c) {\n                 case READ_ENTRY:\n                     processReadRequestV3(r, c);\n                     break;\n+                case AUTH:\n+                    LOG.info(\"Ignoring auth operation from client {}\",c.getRemoteAddress());\n+                    BookkeeperProtocol.AuthMessage message = BookkeeperProtocol.AuthMessage\n+                        .newBuilder()\n+                        .setAuthPluginName(AuthProviderFactoryFactory.authenticationDisabledPluginName)\n+                        .setPayload(ByteString.copyFrom(AuthToken.NULL.getData()))\n+                        .build();\n+                    BookkeeperProtocol.Response.Builder authResponse =\n+                            BookkeeperProtocol.Response.newBuilder().setHeader(r.getHeader())\n+                            .setStatus(BookkeeperProtocol.StatusCode.EOK)\n+                            .setAuthResponse(message);\n+                    c.write(authResponse.build());\n+                    break;\n                 default:\n                     LOG.info(\"Unknown operation type {}\", header.getOperation());\n                     BookkeeperProtocol.Response.Builder response ="},{"sha":"5fedfff80835147badbff0fe33955692be5ad07f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java","status":"modified","additions":99,"deletions":39,"changes":138,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperProtocol.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -6386,8 +6386,7 @@ public Builder clearEntryId() {\n \n   public interface AuthMessageOrBuilder extends\n       // @@protoc_insertion_point(interface_extends:AuthMessage)\n-      com.google.protobuf.GeneratedMessage.\n-          ExtendableMessageOrBuilder<AuthMessage> {\n+      com.google.protobuf.MessageOrBuilder {\n \n     /**\n      * <code>required string authPluginName = 1;</code>\n@@ -6402,23 +6401,25 @@ public Builder clearEntryId() {\n      */\n     com.google.protobuf.ByteString\n         getAuthPluginNameBytes();\n+\n+    /**\n+     * <code>required bytes payload = 2;</code>\n+     */\n+    boolean hasPayload();\n+    /**\n+     * <code>required bytes payload = 2;</code>\n+     */\n+    com.google.protobuf.ByteString getPayload();\n   }\n   /**\n    * Protobuf type {@code AuthMessage}\n-   *\n-   * <pre>\n-   **\n-   * Extendible message which auth mechanisms\n-   * can use to carry their payload.\n-   * </pre>\n    */\n   public static final class AuthMessage extends\n-      com.google.protobuf.GeneratedMessage.ExtendableMessage<\n-        AuthMessage> implements\n+      com.google.protobuf.GeneratedMessage implements\n       // @@protoc_insertion_point(message_implements:AuthMessage)\n       AuthMessageOrBuilder {\n     // Use AuthMessage.newBuilder() to construct.\n-    private AuthMessage(com.google.protobuf.GeneratedMessage.ExtendableBuilder<org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage, ?> builder) {\n+    private AuthMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {\n       super(builder);\n       this.unknownFields = builder.getUnknownFields();\n     }\n@@ -6468,6 +6469,11 @@ private AuthMessage(\n               authPluginName_ = bs;\n               break;\n             }\n+            case 18: {\n+              bitField0_ |= 0x00000002;\n+              payload_ = input.readBytes();\n+              break;\n+            }\n           }\n         }\n       } catch (com.google.protobuf.InvalidProtocolBufferException e) {\n@@ -6550,8 +6556,24 @@ public boolean hasAuthPluginName() {\n       }\n     }\n \n+    public static final int PAYLOAD_FIELD_NUMBER = 2;\n+    private com.google.protobuf.ByteString payload_;\n+    /**\n+     * <code>required bytes payload = 2;</code>\n+     */\n+    public boolean hasPayload() {\n+      return ((bitField0_ & 0x00000002) == 0x00000002);\n+    }\n+    /**\n+     * <code>required bytes payload = 2;</code>\n+     */\n+    public com.google.protobuf.ByteString getPayload() {\n+      return payload_;\n+    }\n+\n     private void initFields() {\n       authPluginName_ = \"\";\n+      payload_ = com.google.protobuf.ByteString.EMPTY;\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -6563,7 +6585,7 @@ public final boolean isInitialized() {\n         memoizedIsInitialized = 0;\n         return false;\n       }\n-      if (!extensionsAreInitialized()) {\n+      if (!hasPayload()) {\n         memoizedIsInitialized = 0;\n         return false;\n       }\n@@ -6574,13 +6596,12 @@ public final boolean isInitialized() {\n     public void writeTo(com.google.protobuf.CodedOutputStream output)\n                         throws java.io.IOException {\n       getSerializedSize();\n-      com.google.protobuf.GeneratedMessage\n-        .ExtendableMessage<org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage>.ExtensionWriter extensionWriter =\n-          newExtensionWriter();\n       if (((bitField0_ & 0x00000001) == 0x00000001)) {\n         output.writeBytes(1, getAuthPluginNameBytes());\n       }\n-      extensionWriter.writeUntil(536870912, output);\n+      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n+        output.writeBytes(2, payload_);\n+      }\n       getUnknownFields().writeTo(output);\n     }\n \n@@ -6594,7 +6615,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeBytesSize(1, getAuthPluginNameBytes());\n       }\n-      size += extensionsSerializedSize();\n+      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(2, payload_);\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -6675,16 +6699,9 @@ protected Builder newBuilderForType(\n     }\n     /**\n      * Protobuf type {@code AuthMessage}\n-     *\n-     * <pre>\n-     **\n-     * Extendible message which auth mechanisms\n-     * can use to carry their payload.\n-     * </pre>\n      */\n     public static final class Builder extends\n-        com.google.protobuf.GeneratedMessage.ExtendableBuilder<\n-          org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage, Builder> implements\n+        com.google.protobuf.GeneratedMessage.Builder<Builder> implements\n         // @@protoc_insertion_point(builder_implements:AuthMessage)\n         org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessageOrBuilder {\n       public static final com.google.protobuf.Descriptors.Descriptor\n@@ -6721,6 +6738,8 @@ public Builder clear() {\n         super.clear();\n         authPluginName_ = \"\";\n         bitField0_ = (bitField0_ & ~0x00000001);\n+        payload_ = com.google.protobuf.ByteString.EMPTY;\n+        bitField0_ = (bitField0_ & ~0x00000002);\n         return this;\n       }\n \n@@ -6753,6 +6772,10 @@ public Builder clone() {\n           to_bitField0_ |= 0x00000001;\n         }\n         result.authPluginName_ = authPluginName_;\n+        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {\n+          to_bitField0_ |= 0x00000002;\n+        }\n+        result.payload_ = payload_;\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -6774,7 +6797,9 @@ public Builder mergeFrom(org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMess\n           authPluginName_ = other.authPluginName_;\n           onChanged();\n         }\n-        this.mergeExtensionFields(other);\n+        if (other.hasPayload()) {\n+          setPayload(other.getPayload());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -6784,7 +6809,7 @@ public final boolean isInitialized() {\n           \n           return false;\n         }\n-        if (!extensionsAreInitialized()) {\n+        if (!hasPayload()) {\n           \n           return false;\n         }\n@@ -6886,6 +6911,41 @@ public Builder setAuthPluginNameBytes(\n         return this;\n       }\n \n+      private com.google.protobuf.ByteString payload_ = com.google.protobuf.ByteString.EMPTY;\n+      /**\n+       * <code>required bytes payload = 2;</code>\n+       */\n+      public boolean hasPayload() {\n+        return ((bitField0_ & 0x00000002) == 0x00000002);\n+      }\n+      /**\n+       * <code>required bytes payload = 2;</code>\n+       */\n+      public com.google.protobuf.ByteString getPayload() {\n+        return payload_;\n+      }\n+      /**\n+       * <code>required bytes payload = 2;</code>\n+       */\n+      public Builder setPayload(com.google.protobuf.ByteString value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000002;\n+        payload_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      /**\n+       * <code>required bytes payload = 2;</code>\n+       */\n+      public Builder clearPayload() {\n+        bitField0_ = (bitField0_ & ~0x00000002);\n+        payload_ = getDefaultInstance().getPayload();\n+        onChanged();\n+        return this;\n+      }\n+\n       // @@protoc_insertion_point(builder_scope:AuthMessage)\n     }\n \n@@ -6968,17 +7028,17 @@ public Builder setAuthPluginNameBytes(\n       \"\\022\\033\\n\\006status\\030\\001 \\002(\\0162\\013.StatusCode\\022\\020\\n\\010ledgerI\",\n       \"d\\030\\002 \\002(\\003\\022\\017\\n\\007entryId\\030\\003 \\002(\\003\\022\\014\\n\\004body\\030\\004 \\001(\\014\\\"M\" +\n       \"\\n\\013AddResponse\\022\\033\\n\\006status\\030\\001 \\002(\\0162\\013.StatusCo\" +\n-      \"de\\022\\020\\n\\010ledgerId\\030\\002 \\002(\\003\\022\\017\\n\\007entryId\\030\\003 \\002(\\003\\\"0\\n\" +\n-      \"\\013AuthMessage\\022\\026\\n\\016authPluginName\\030\\001 \\002(\\t*\\t\\010\\350\" +\n-      \"\\007\\020\\200\\200\\200\\200\\002*F\\n\\017ProtocolVersion\\022\\017\\n\\013VERSION_ON\" +\n-      \"E\\020\\001\\022\\017\\n\\013VERSION_TWO\\020\\002\\022\\021\\n\\rVERSION_THREE\\020\\003*\" +\n-      \"\\206\\001\\n\\nStatusCode\\022\\007\\n\\003EOK\\020\\000\\022\\016\\n\\tENOLEDGER\\020\\222\\003\\022\" +\n-      \"\\r\\n\\010ENOENTRY\\020\\223\\003\\022\\014\\n\\007EBADREQ\\020\\224\\003\\022\\010\\n\\003EIO\\020\\365\\003\\022\\010\" +\n-      \"\\n\\003EUA\\020\\366\\003\\022\\020\\n\\013EBADVERSION\\020\\367\\003\\022\\014\\n\\007EFENCED\\020\\370\\003\" +\n-      \"\\022\\016\\n\\tEREADONLY\\020\\371\\003*c\\n\\rOperationType\\022\\016\\n\\nREA\",\n-      \"D_ENTRY\\020\\001\\022\\r\\n\\tADD_ENTRY\\020\\002\\022\\024\\n\\020RANGE_READ_E\" +\n-      \"NTRY\\020\\003\\022\\023\\n\\017RANGE_ADD_ENTRY\\020\\004\\022\\010\\n\\004AUTH\\020\\005B\\037\\n\" +\n-      \"\\033org.apache.bookkeeper.protoH\\001\"\n+      \"de\\022\\020\\n\\010ledgerId\\030\\002 \\002(\\003\\022\\017\\n\\007entryId\\030\\003 \\002(\\003\\\"6\\n\" +\n+      \"\\013AuthMessage\\022\\026\\n\\016authPluginName\\030\\001 \\002(\\t\\022\\017\\n\\007\" +\n+      \"payload\\030\\002 \\002(\\014*F\\n\\017ProtocolVersion\\022\\017\\n\\013VERS\" +\n+      \"ION_ONE\\020\\001\\022\\017\\n\\013VERSION_TWO\\020\\002\\022\\021\\n\\rVERSION_TH\" +\n+      \"REE\\020\\003*\\206\\001\\n\\nStatusCode\\022\\007\\n\\003EOK\\020\\000\\022\\016\\n\\tENOLEDG\" +\n+      \"ER\\020\\222\\003\\022\\r\\n\\010ENOENTRY\\020\\223\\003\\022\\014\\n\\007EBADREQ\\020\\224\\003\\022\\010\\n\\003EI\" +\n+      \"O\\020\\365\\003\\022\\010\\n\\003EUA\\020\\366\\003\\022\\020\\n\\013EBADVERSION\\020\\367\\003\\022\\014\\n\\007EFEN\" +\n+      \"CED\\020\\370\\003\\022\\016\\n\\tEREADONLY\\020\\371\\003*c\\n\\rOperationType\\022\",\n+      \"\\016\\n\\nREAD_ENTRY\\020\\001\\022\\r\\n\\tADD_ENTRY\\020\\002\\022\\024\\n\\020RANGE_\" +\n+      \"READ_ENTRY\\020\\003\\022\\023\\n\\017RANGE_ADD_ENTRY\\020\\004\\022\\010\\n\\004AUT\" +\n+      \"H\\020\\005B\\037\\n\\033org.apache.bookkeeper.protoH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n         new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {\n@@ -7039,7 +7099,7 @@ public Builder setAuthPluginNameBytes(\n     internal_static_AuthMessage_fieldAccessorTable = new\n       com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n         internal_static_AuthMessage_descriptor,\n-        new java.lang.String[] { \"AuthPluginName\", });\n+        new java.lang.String[] { \"AuthPluginName\", \"Payload\", });\n   }\n \n   // @@protoc_insertion_point(outer_class_scope)"},{"sha":"11a1eb50f8029074bd3ba9c02d14939e666cc20e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ConnectionPeer.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ConnectionPeer.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ConnectionPeer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ConnectionPeer.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -0,0 +1,63 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.proto;\n+\n+import java.net.SocketAddress;\n+import java.util.Collection;\n+import org.apache.bookkeeper.auth.BookKeeperPrincipal;\n+\n+/**\n+ * Represents the connection to a BookKeeper client, from the Bookie side \n+ */\n+public interface ConnectionPeer {\n+\n+    /**\n+     * Address from which originated the connection\n+     * @return\n+     */\n+    public SocketAddress getRemoteAddr();\n+\n+    /**\n+     * Additional principals bound to the connection, like TLS certificates\n+     * @return\n+     */\n+    public Collection<Object> getProtocolPrincipals();\n+\n+    /**\n+     * Utility function to be used from AuthProviders to drop the connection\n+     */\n+    public void disconnect();\n+\n+    /**\n+     * Returns the user which is bound to the connection\n+     * @return the principal or null if no auth takes place\n+     * or the auth plugin did not call {@link #setAuthorizedId(org.apache.bookkeeper.auth.BookKeeperPrincipal)}\n+     * @see  #setAuthorizedId(org.apache.bookkeeper.auth.BookKeeperPrincipal)\n+     */\n+    public BookKeeperPrincipal getAuthorizedId();\n+\n+    /**\n+     * Assign a principal to the current connection\n+     * @param principal the id of the user\n+     * @see #getAuthorizedId()\n+     */\n+    public void setAuthorizedId(BookKeeperPrincipal principal);\n+}"},{"sha":"a4fb761c28abca784e39845553b9e5aced3eef60","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":46,"deletions":2,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -67,7 +67,6 @@\n import org.jboss.netty.channel.MessageEvent;\n import org.jboss.netty.channel.SimpleChannelHandler;\n import org.jboss.netty.channel.local.DefaultLocalClientChannelFactory;\n-import org.jboss.netty.channel.local.LocalAddress;\n import org.jboss.netty.channel.local.LocalClientChannelFactory;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.handler.codec.frame.CorruptedFrameException;\n@@ -85,7 +84,10 @@\n import com.google.protobuf.ByteString;\n import com.google.protobuf.ExtensionRegistry;\n import java.net.SocketAddress;\n+import java.util.Collection;\n+import org.apache.bookkeeper.auth.BookKeeperPrincipal;\n import org.jboss.netty.channel.ChannelFactory;\n+import org.apache.bookkeeper.client.ClientConnectionPeer;\n \n /**\n  * This class manages all details of connection to a particular bookie. It also\n@@ -131,6 +133,8 @@\n     private volatile Queue<GenericCallback<PerChannelBookieClient>> pendingOps =\n             new ArrayDeque<GenericCallback<PerChannelBookieClient>>();\n     volatile Channel channel = null;\n+    private final ClientConnectionPeer connectionPeer;\n+    private volatile BookKeeperPrincipal authorizedId = BookKeeperPrincipal.ANONYMOUS;\n \n     enum ConnectionState {\n         DISCONNECTED, CONNECTING, CONNECTED, CLOSED\n@@ -192,6 +196,45 @@ public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor exec\n         addTimeoutOpLogger = statsLogger.getOpStatsLogger(BookKeeperClientStats.CHANNEL_TIMEOUT_ADD);\n \n         this.pcbcPool = pcbcPool;\n+\n+        this.connectionPeer = new ClientConnectionPeer() {\n+\n+            @Override\n+            public SocketAddress getRemoteAddr() {\n+                Channel c = channel;\n+                if (c != null) {\n+                    return c.getRemoteAddress();\n+                } else {\n+                    return null;\n+                }\n+            }\n+\n+            @Override\n+            public Collection<Object> getProtocolPrincipals() {\n+                return Collections.emptyList();\n+            }\n+\n+            @Override\n+            public void disconnect() {\n+                Channel c = channel;\n+                if (c != null) {\n+                    c.close();\n+                }\n+                LOG.info(\"authplugin disconnected channel {}\", channel);\n+            }\n+\n+            @Override\n+            public void setAuthorizedId(BookKeeperPrincipal principal) {\n+                authorizedId = principal;\n+                LOG.info(\"connection {} authenticated as {}\", channel, principal);\n+            }\n+\n+            @Override\n+            public BookKeeperPrincipal getAuthorizedId() {\n+                return authorizedId;\n+            }\n+\n+        };\n     }\n \n     private void completeOperation(GenericCallback<PerChannelBookieClient> op, int rc) {\n@@ -687,7 +730,8 @@ public ChannelPipeline getPipeline() throws Exception {\n         pipeline.addLast(\"lengthprepender\", new LengthFieldPrepender(4));\n         pipeline.addLast(\"bookieProtoEncoder\", new BookieProtoEncoding.RequestEncoder(extRegistry));\n         pipeline.addLast(\"bookieProtoDecoder\", new BookieProtoEncoding.ResponseDecoder(extRegistry));\n-        pipeline.addLast(\"authHandler\", new AuthHandler.ClientSideHandler(authProviderFactory, txnIdGenerator));\n+        pipeline.addLast(\"authHandler\", new AuthHandler.ClientSideHandler(authProviderFactory, txnIdGenerator,\n+            connectionPeer));\n         pipeline.addLast(\"mainhandler\", this);\n         return pipeline;\n     }"},{"sha":"037987b5e1090d813cf65cd42b1d48f1a2b5fe8c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -145,7 +145,10 @@ private void initialize(ServerConfiguration conf, ZooKeeper zkc)\n             this.ledgerUnderreplicationManager = ledgerManagerFactory\n                     .newLedgerUnderreplicationManager();\n \n-            this.bkc = new BookKeeper(new ClientConfiguration(conf), zkc);\n+            ClientConfiguration clientConfiguration = new ClientConfiguration(conf);\n+            clientConfiguration.setClientRole(ClientConfiguration.CLIENT_ROLE_SYSTEM);\n+            LOG.info(\"AuthProvider used by the Auditor is \"+clientConfiguration.getClientAuthProviderFactoryClass());\n+            this.bkc = new BookKeeper(clientConfiguration, zkc);\n             this.admin = new BookKeeperAdmin(bkc, statsLogger);\n         } catch (CompatibilityException ce) {\n             throw new UnavailableException("},{"sha":"aabf80b51df6cf80f2e43894ce907c0320a8c7f5","filename":"bookkeeper-server/src/main/proto/BookkeeperProtocol.proto","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/proto/BookkeeperProtocol.proto","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/proto/BookkeeperProtocol.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/proto/BookkeeperProtocol.proto?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -124,11 +124,7 @@ message AddResponse {\n     required int64 entryId = 3;\n }\n \n-/**\n- * Extendible message which auth mechanisms\n- * can use to carry their payload.\n- */\n message AuthMessage {\n     required string authPluginName = 1;\n-    extensions 1000 to max;\n+    required bytes payload = 2;\n }\n\\ No newline at end of file"},{"sha":"e8dad26c99744806788048aeb1474c8a213cc0f5","filename":"bookkeeper-server/src/main/resources/findbugsExclude.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/resources/findbugsExclude.xml","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/main/resources/findbugsExclude.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/resources/findbugsExclude.xml?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -37,6 +37,11 @@\n     <Method name=\"getBuffer\" />\n     <Bug pattern=\"EI_EXPOSE_REP\" />\n   </Match>\n+  <Match>\n+    <Class name=\"org.apache.bookkeeper.auth.AuthToken\" />\n+    <Method name=\"getData\" />\n+    <Bug pattern=\"EI_EXPOSE_REP\" />\n+  </Match>\n   <And>\n     <Bug category=\"MT_CORRECTNESS\"/>\n     <Class name=\"~org.apache.bookkeeper.util.collections\\.[^.]+\"/>"},{"sha":"f499ad32df306ce946f44c9278a2d5646dfec3bc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java","status":"modified","additions":256,"deletions":125,"changes":381,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/auth/TestAuth.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -20,10 +20,9 @@\n  */\n package org.apache.bookkeeper.auth;\n \n-import java.net.InetSocketAddress;\n+import java.io.IOException;\n import java.util.Arrays;\n import java.util.Enumeration;\n-import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n \n@@ -36,25 +35,28 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage;\n-import org.apache.bookkeeper.proto.TestDataFormats;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import static org.junit.Assert.*;\n \n import org.junit.Test;\n+import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.client.ClientConnectionPeer;\n+import org.apache.bookkeeper.bookie.BookieConnectionPeer;\n \n-import com.google.protobuf.ExtensionRegistry;\n \n public class TestAuth extends BookKeeperClusterTestCase {\n     static final Logger LOG = LoggerFactory.getLogger(TestAuth.class);\n     public static final String TEST_AUTH_PROVIDER_PLUGIN_NAME = \"TestAuthProviderPlugin\";\n     private static final byte[] PASSWD = \"testPasswd\".getBytes();\n     private static final byte[] ENTRY = \"TestEntry\".getBytes();\n \n+    private static final byte[] SUCCESS_RESPONSE = {1};\n+    private static final byte[] FAILURE_RESPONSE = {2};\n+    private static final byte[] PAYLOAD_MESSAGE = {3};\n+\n     public TestAuth() {\n         super(0); // start them later when auth providers are configured\n     }\n@@ -127,6 +129,44 @@ public void testSingleMessageAuth() throws Exception {\n         assertEquals(\"Should have entry\", 1, entryCount(ledgerId.get(), bookieConf, clientConf));\n     }\n     \n+    @Test(timeout=30000)\n+    public void testCloseMethodCalledOnAuthProvider() throws Exception {\n+        ServerConfiguration bookieConf = newServerConfiguration();\n+        bookieConf.setBookieAuthProviderFactoryClass(\n+                LogCloseCallsBookieAuthProviderFactory.class.getName());\n+\n+        ClientConfiguration clientConf = newClientConfiguration();\n+        clientConf.setClientAuthProviderFactoryClass(\n+                LogCloseCallsClientAuthProviderFactory.class.getName());\n+\n+        startAndStoreBookie(bookieConf);\n+\n+        AtomicLong ledgerId = new AtomicLong(-1);\n+        connectAndWriteToBookie(clientConf, ledgerId); // should succeed\n+\n+        assertFalse(ledgerId.get() == -1);\n+        assertEquals(\"Should have entry\", 1, entryCount(ledgerId.get(), bookieConf, clientConf));\n+\n+        for (BookieServer bks : bs) {\n+            bks.shutdown();\n+        }\n+\n+        assertEquals(LogCloseCallsBookieAuthProviderFactory.initCountersOnConnections.get(),\n+            LogCloseCallsBookieAuthProviderFactory.closeCountersOnConnections.get());\n+        assertTrue(LogCloseCallsBookieAuthProviderFactory.initCountersOnConnections.get() > 0);\n+\n+        assertEquals(1, LogCloseCallsBookieAuthProviderFactory.initCountersOnFactory.get());\n+        assertEquals(1, LogCloseCallsBookieAuthProviderFactory.closeCountersOnFactory.get());\n+\n+        assertEquals(LogCloseCallsClientAuthProviderFactory.initCountersOnConnections.get(),\n+            LogCloseCallsClientAuthProviderFactory.closeCountersOnConnections.get());\n+        assertTrue(LogCloseCallsClientAuthProviderFactory.initCountersOnConnections.get() > 0);\n+\n+        assertEquals(1, LogCloseCallsClientAuthProviderFactory.initCountersOnFactory.get());\n+        assertEquals(1, LogCloseCallsClientAuthProviderFactory.closeCountersOnFactory.get());\n+\n+    }\n+\n     /**\n      * Test that when the bookie provider sends a failure message\n      * the client will not be able to write\n@@ -354,6 +394,50 @@ public void testCrashType2DuringAuth() throws Exception {\n         assertEquals(\"Shouldn't have entry\", 0, entryCount(ledgerId.get(), bookieConf, clientConf));\n     }\n \n+    /**\n+     * Client will try to perform authentication but bookies are not configured\n+     */\n+    @Test(timeout=30000)\n+    public void testClientWithAuthAndBookieWithDisabledAuth() throws Exception {\n+        ServerConfiguration bookieConf = newServerConfiguration();\n+        assertNull(bookieConf.getBookieAuthProviderFactoryClass());\n+\n+        ClientConfiguration clientConf = newClientConfiguration();\n+        clientConf.setClientAuthProviderFactoryClass(\n+                SendUntilCompleteClientAuthProviderFactory.class.getName());\n+\n+        startAndStoreBookie(bookieConf);\n+\n+        AtomicLong ledgerId = new AtomicLong(-1);\n+        connectAndWriteToBookie(clientConf, ledgerId); // should succeed\n+\n+        assertFalse(ledgerId.get() == -1);\n+        assertEquals(\"Should have entry\", 1, entryCount(ledgerId.get(), bookieConf, clientConf));\n+    }\n+\n+    /**\n+     * The plugin will drop the connection from the bookie side\n+     */\n+    @Test(timeout=30000)\n+    public void testDropConnectionFromBookieAuthPlugin() throws Exception {\n+        ServerConfiguration bookieConf = newServerConfiguration();\n+        bookieConf.setBookieAuthProviderFactoryClass(\n+                DropConnectionBookieAuthProviderFactory.class.getName());\n+\n+        ClientConfiguration clientConf = newClientConfiguration();\n+        clientConf.setClientAuthProviderFactoryClass(\n+                SendUntilCompleteClientAuthProviderFactory.class.getName());\n+\n+        startAndStoreBookie(bookieConf);\n+\n+        AtomicLong ledgerId = new AtomicLong(-1);\n+        try {\n+            connectAndWriteToBookie(clientConf, ledgerId); // should fail\n+            fail();\n+        } catch (BKNotEnoughBookiesException error){\n+        }\n+    }\n+\n     BookieServer startAndStoreBookie(ServerConfiguration conf) throws Exception {\n         bsConfs.add(conf);\n         BookieServer s = startBookie(conf);\n@@ -369,24 +453,84 @@ public String getPluginName() {\n         }\n \n         @Override\n-        public void init(ServerConfiguration conf, ExtensionRegistry registry) {\n-            TestDataFormats.registerAllExtensions(registry);\n+        public void init(ServerConfiguration conf) {\n         }\n \n         @Override\n-        public BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                              final GenericCallback<Void> completeCb) {\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              final AuthCallbacks.GenericCallback<Void> completeCb) {\n             return new BookieAuthProvider() {\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                    addr.setAuthorizedId(new BookKeeperPrincipal(\"test-principal\"));\n+                    cb.operationComplete(BKException.Code.OK, AuthToken.wrap(SUCCESS_RESPONSE));\n+                    completeCb.operationComplete(BKException.Code.OK, null);\n+                }\n+            };\n+        }\n+    }\n+\n+    private static class LogCloseCallsBookieAuthProviderFactory implements BookieAuthProvider.Factory {\n \n-                    AuthMessage.Builder builder\n-                        = AuthMessage.newBuilder()\n-                        .setAuthPluginName(getPluginName());\n-                    builder.setExtension(TestDataFormats.messageType, \n-                            TestDataFormats.AuthMessageType.SUCCESS_RESPONSE);\n+        private static AtomicInteger closeCountersOnFactory = new AtomicInteger();\n+        private static AtomicInteger closeCountersOnConnections = new AtomicInteger();\n+        private static AtomicInteger initCountersOnFactory = new AtomicInteger();\n+        private static AtomicInteger initCountersOnConnections = new AtomicInteger();\n+\n+        @Override\n+        public void init(ServerConfiguration conf) throws IOException {\n+            initCountersOnFactory.incrementAndGet();\n+        }\n+\n+        @Override\n+        public void close() {\n+            closeCountersOnFactory.incrementAndGet();\n+        }\n \n-                    cb.operationComplete(BKException.Code.OK, builder.build());\n+        @Override\n+        public BookieAuthProvider newProvider(BookieConnectionPeer connection, AuthCallbacks.GenericCallback<Void> completeCb) {\n+            return new BookieAuthProvider() {\n+\n+                {\n                     completeCb.operationComplete(BKException.Code.OK, null);\n+                    initCountersOnConnections.incrementAndGet();\n+                }\n+\n+                @Override\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+\n+                }\n+\n+                @Override\n+                public void close() {\n+                    closeCountersOnConnections.incrementAndGet();\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public String getPluginName() {\n+            return TEST_AUTH_PROVIDER_PLUGIN_NAME;\n+        }\n+\n+    }\n+\n+    public static class DropConnectionBookieAuthProviderFactory\n+        implements BookieAuthProvider.Factory {\n+        @Override\n+        public String getPluginName() {\n+            return TEST_AUTH_PROVIDER_PLUGIN_NAME;\n+        }\n+\n+        @Override\n+        public void init(ServerConfiguration conf) {\n+        }\n+\n+        @Override\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              final AuthCallbacks.GenericCallback<Void> completeCb) {\n+            return new BookieAuthProvider() {\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                    addr.disconnect();\n                 }\n             };\n         }\n@@ -400,70 +544,96 @@ public String getPluginName() {\n         }\n \n         @Override\n-        public void init(ServerConfiguration conf, ExtensionRegistry registry) {\n-            TestDataFormats.registerAllExtensions(registry);\n+        public void init(ServerConfiguration conf) {\n         }\n \n         @Override\n-        public BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                              final GenericCallback<Void> completeCb) {\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              final AuthCallbacks.GenericCallback<Void> completeCb) {\n             return new BookieAuthProvider() {\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {\n-                    AuthMessage.Builder builder\n-                        = AuthMessage.newBuilder()\n-                        .setAuthPluginName(getPluginName());\n-                    builder.setExtension(TestDataFormats.messageType, \n-                            TestDataFormats.AuthMessageType.FAILURE_RESPONSE);\n-\n-                    cb.operationComplete(BKException.Code.OK, builder.build());\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                    addr.setAuthorizedId(new BookKeeperPrincipal(\"test-principal\"));\n+                    cb.operationComplete(BKException.Code.OK, AuthToken.wrap(FAILURE_RESPONSE));\n                     completeCb.operationComplete(\n                             BKException.Code.UnauthorizedAccessException, null);\n                 }\n             };\n         }\n     }\n \n+    private static class LogCloseCallsClientAuthProviderFactory implements ClientAuthProvider.Factory {\n+\n+        private static AtomicInteger initCountersOnFactory = new AtomicInteger();\n+        private static AtomicInteger initCountersOnConnections = new AtomicInteger();\n+        private static AtomicInteger closeCountersOnFactory = new AtomicInteger();\n+        private static AtomicInteger closeCountersOnConnections = new AtomicInteger();\n+\n+        @Override\n+        public void init(ClientConfiguration conf) throws IOException {\n+            initCountersOnFactory.incrementAndGet();\n+        }\n+\n+        @Override\n+        public ClientAuthProvider newProvider(ClientConnectionPeer connection, AuthCallbacks.GenericCallback<Void> completeCb) {\n+            return new ClientAuthProvider() {\n+\n+                @Override\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                }\n+\n+                @Override\n+                public void close() {\n+                    closeCountersOnConnections.incrementAndGet();\n+                }\n+\n+                @Override\n+                public void init(AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                    initCountersOnConnections.incrementAndGet();\n+                    completeCb.operationComplete(BKException.Code.OK, null);\n+                }\n+            };\n+        }\n+\n+        @Override\n+        public String getPluginName() {\n+            return TEST_AUTH_PROVIDER_PLUGIN_NAME;\n+        }\n+\n+        @Override\n+        public void close() {\n+            closeCountersOnFactory.incrementAndGet();\n+        }\n+\n+    }\n+\n     private static class SendUntilCompleteClientAuthProviderFactory\n         implements ClientAuthProvider.Factory {\n-        \n+\n         @Override\n         public String getPluginName() {\n             return TEST_AUTH_PROVIDER_PLUGIN_NAME;\n         }\n \n         @Override\n-        public void init(ClientConfiguration conf, ExtensionRegistry registry) {\n-            TestDataFormats.registerAllExtensions(registry);\n+        public void init(ClientConfiguration conf) {\n         }\n \n         @Override\n-        public ClientAuthProvider newProvider(InetSocketAddress addr,\n-                final GenericCallback<Void> completeCb) {\n-            AuthMessage.Builder builder\n-                = AuthMessage.newBuilder()\n-                .setAuthPluginName(getPluginName());\n-            builder.setExtension(TestDataFormats.messageType, \n-                                 TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n-            final AuthMessage message = builder.build();\n-\n+        public ClientAuthProvider newProvider(ClientConnectionPeer addr,\n+                final AuthCallbacks.GenericCallback<Void> completeCb) {\n             return new ClientAuthProvider() {\n-                public void init(GenericCallback<AuthMessage> cb) {\n-                    cb.operationComplete(BKException.Code.OK, message);\n+                public void init(AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                    cb.operationComplete(BKException.Code.OK, AuthToken.wrap(PAYLOAD_MESSAGE));\n                 }\n-\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {\n-                    if (m.hasExtension(TestDataFormats.messageType)) {\n-                        TestDataFormats.AuthMessageType type\n-                            = m.getExtension(TestDataFormats.messageType);\n-                        if (type == TestDataFormats.AuthMessageType.SUCCESS_RESPONSE) {\n-                            completeCb.operationComplete(BKException.Code.OK, null);\n-                        } else if (type == TestDataFormats.AuthMessageType.FAILURE_RESPONSE) {\n-                            completeCb.operationComplete(BKException.Code.UnauthorizedAccessException, null);\n-                        } else {\n-                            cb.operationComplete(BKException.Code.OK, message);\n-                        }\n-                    } else {\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                    byte[] type = m.getData();\n+                    if (Arrays.equals(type,SUCCESS_RESPONSE)) {\n+                        addr.setAuthorizedId(new BookKeeperPrincipal(\"test-client-principal\"));\n+                        completeCb.operationComplete(BKException.Code.OK, null);\n+                    } else if (Arrays.equals(type,FAILURE_RESPONSE)) {\n                         completeCb.operationComplete(BKException.Code.UnauthorizedAccessException, null);\n+                    } else {\n+                        cb.operationComplete(BKException.Code.OK, AuthToken.wrap(PAYLOAD_MESSAGE));\n                     }\n                 }\n             };\n@@ -480,29 +650,20 @@ public String getPluginName() {\n         }\n \n         @Override\n-        public void init(ServerConfiguration conf, ExtensionRegistry registry) {\n-            TestDataFormats.registerAllExtensions(registry);\n+        public void init(ServerConfiguration conf) {\n         }\n \n         @Override\n-        public BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                              final GenericCallback<Void> completeCb) {\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              final AuthCallbacks.GenericCallback<Void> completeCb) {\n             return new BookieAuthProvider() {\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {\n-                    AuthMessage.Builder builder\n-                        = AuthMessage.newBuilder()\n-                        .setAuthPluginName(getPluginName());\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n                     if (numMessages.incrementAndGet() == 3) {\n-                        builder.setExtension(TestDataFormats.messageType, \n-                                TestDataFormats.AuthMessageType.SUCCESS_RESPONSE);\n-\n-                        cb.operationComplete(BKException.Code.OK, builder.build());\n+                        addr.setAuthorizedId(new BookKeeperPrincipal(\"test-principal\"));\n+                        cb.operationComplete(BKException.Code.OK, AuthToken.wrap(SUCCESS_RESPONSE));\n                         completeCb.operationComplete(BKException.Code.OK, null);\n                     } else {\n-                        builder.setExtension(TestDataFormats.messageType, \n-                                TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n-\n-                        cb.operationComplete(BKException.Code.OK, builder.build());\n+                        cb.operationComplete(BKException.Code.OK, AuthToken.wrap(PAYLOAD_MESSAGE));\n                     }\n                 }\n             };\n@@ -519,30 +680,21 @@ public String getPluginName() {\n         }\n \n         @Override\n-        public void init(ServerConfiguration conf, ExtensionRegistry registry) {\n-            TestDataFormats.registerAllExtensions(registry);\n+        public void init(ServerConfiguration conf) {\n         }\n \n         @Override\n-        public BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                              final GenericCallback<Void> completeCb) {\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              final AuthCallbacks.GenericCallback<Void> completeCb) {\n             return new BookieAuthProvider() {\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {\n-                    AuthMessage.Builder builder\n-                        = AuthMessage.newBuilder()\n-                        .setAuthPluginName(getPluginName());\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n                     if (numMessages.incrementAndGet() == 3) {\n-                        builder.setExtension(TestDataFormats.messageType, \n-                                TestDataFormats.AuthMessageType.FAILURE_RESPONSE);\n-\n-                        cb.operationComplete(BKException.Code.OK, builder.build());\n+                        addr.setAuthorizedId(new BookKeeperPrincipal(\"test-principal\"));\n+                        cb.operationComplete(BKException.Code.OK, AuthToken.wrap(FAILURE_RESPONSE));\n                         completeCb.operationComplete(BKException.Code.UnauthorizedAccessException,\n                                                      null);\n                     } else {\n-                        builder.setExtension(TestDataFormats.messageType, \n-                                TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n-\n-                        cb.operationComplete(BKException.Code.OK, builder.build());\n+                        cb.operationComplete(BKException.Code.OK, AuthToken.wrap(PAYLOAD_MESSAGE));\n                     }\n                 }\n             };\n@@ -559,25 +711,19 @@ public String getPluginName() {\n         }\n \n         @Override\n-        public void init(ServerConfiguration conf, ExtensionRegistry registry) {\n-            TestDataFormats.registerAllExtensions(registry);\n+        public void init(ServerConfiguration conf) {\n         }\n \n         @Override\n-        public BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                              final GenericCallback<Void> completeCb) {\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              final AuthCallbacks.GenericCallback<Void> completeCb) {\n             return new BookieAuthProvider() {\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {\n-                    AuthMessage.Builder builder\n-                        = AuthMessage.newBuilder()\n-                        .setAuthPluginName(getPluginName());\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n                     if (numMessages.incrementAndGet() == 3) {\n                         throw new RuntimeException(\"Do bad things to the bookie\");\n                     } else {\n-                        builder.setExtension(TestDataFormats.messageType, \n-                                TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n-\n-                        cb.operationComplete(BKException.Code.OK, builder.build());\n+                        addr.setAuthorizedId(new BookKeeperPrincipal(\"test-principal\"));\n+                        cb.operationComplete(BKException.Code.OK, AuthToken.wrap(PAYLOAD_MESSAGE));\n                     }\n                 }\n             };\n@@ -595,25 +741,18 @@ public String getPluginName() {\n         }\n \n         @Override\n-        public void init(ServerConfiguration conf, ExtensionRegistry registry) {\n-            TestDataFormats.registerAllExtensions(registry);\n+        public void init(ServerConfiguration conf) {\n         }\n \n         @Override\n-        public BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                              final GenericCallback<Void> completeCb) {\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              final AuthCallbacks.GenericCallback<Void> completeCb) {\n             return new BookieAuthProvider() {\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {\n-                    AuthMessage.Builder builder\n-                        = AuthMessage.newBuilder()\n-                        .setAuthPluginName(getPluginName());\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n                     if (numMessages.incrementAndGet() != 3) {\n-                        builder.setExtension(TestDataFormats.messageType,\n-                                TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n-                        cb.operationComplete(BKException.Code.OK, builder.build());\n+                        cb.operationComplete(BKException.Code.OK, AuthToken.wrap(PAYLOAD_MESSAGE));\n                         return;\n                     }\n-\n                     crashType2bookieInstance.suspendProcessing();\n                 }\n             };\n@@ -628,23 +767,15 @@ public String getPluginName() {\n         }\n \n         @Override\n-        public void init(ServerConfiguration conf, ExtensionRegistry registry) {\n-            TestDataFormats.registerAllExtensions(registry);\n+        public void init(ServerConfiguration conf) {\n         }\n \n         @Override\n-        public BookieAuthProvider newProvider(InetSocketAddress addr,\n-                                              final GenericCallback<Void> completeCb) {\n+        public BookieAuthProvider newProvider(BookieConnectionPeer addr,\n+                                              final AuthCallbacks.GenericCallback<Void> completeCb) {\n             return new BookieAuthProvider() {\n-                public void process(AuthMessage m, GenericCallback<AuthMessage> cb) {\n-\n-                    AuthMessage.Builder builder\n-                        = AuthMessage.newBuilder()\n-                        .setAuthPluginName(getPluginName());\n-                    builder.setExtension(TestDataFormats.messageType, \n-                            TestDataFormats.AuthMessageType.FAILURE_RESPONSE);\n-\n-                    cb.operationComplete(BKException.Code.OK, builder.build());\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                    cb.operationComplete(BKException.Code.OK, AuthToken.wrap(FAILURE_RESPONSE));\n                     completeCb.operationComplete(BKException.Code.OK, null);\n                 }\n             };"},{"sha":"0a9bdc458a80b952a780cc15dcd45ed0c9e152da","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBackwardCompatCMS42.java","status":"modified","additions":21,"deletions":24,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBackwardCompatCMS42.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBackwardCompatCMS42.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBackwardCompatCMS42.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -20,8 +20,8 @@\n  */\n package org.apache.bookkeeper.proto;\n \n+import com.google.protobuf.ByteString;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -32,8 +32,6 @@\n import org.apache.bookkeeper.auth.ClientAuthProvider;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.proto.PerChannelBookieClient;\n-import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.auth.TestAuth;\n import org.jboss.netty.bootstrap.ClientBootstrap;\n@@ -59,6 +57,10 @@\n public class TestBackwardCompatCMS42 extends BookKeeperClusterTestCase {\n     static final Logger LOG = LoggerFactory.getLogger(TestBackwardCompatCMS42.class);\n \n+    private static final byte[] SUCCESS_RESPONSE = {1};\n+    private static final byte[] FAILURE_RESPONSE = {2};\n+    private static final byte[] PAYLOAD_MESSAGE = {3};\n+\n     ExtensionRegistry extRegistry = ExtensionRegistry.newInstance();\n     ClientAuthProvider.Factory authProvider;\n     ClientSocketChannelFactory channelFactory\n@@ -69,10 +71,8 @@\n \n     public TestBackwardCompatCMS42() throws Exception {\n         super(0);\n-\n-        TestDataFormats.registerAllExtensions(extRegistry);\n         authProvider = AuthProviderFactoryFactory.newClientAuthProviderFactory(\n-                new ClientConfiguration(), extRegistry);\n+                new ClientConfiguration());\n     }\n \n     @Test(timeout=60000)\n@@ -84,8 +84,7 @@ public void testAuthSingleMessage() throws Exception {\n \n         AuthMessage.Builder builder = AuthMessage.newBuilder()\n             .setAuthPluginName(TestAuth.TEST_AUTH_PROVIDER_PLUGIN_NAME);\n-        builder.setExtension(TestDataFormats.messageType,\n-                             TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n+        builder.setPayload(ByteString.copyFrom(PAYLOAD_MESSAGE));\n         final AuthMessage authMessage = builder.build();\n \n         CompatClient42 client = newCompatClient(bookie1.getLocalAddress());\n@@ -107,8 +106,7 @@ public void testAuthMultiMessage() throws Exception {\n \n         AuthMessage.Builder builder = AuthMessage.newBuilder()\n             .setAuthPluginName(TestAuth.TEST_AUTH_PROVIDER_PLUGIN_NAME);\n-        builder.setExtension(TestDataFormats.messageType,\n-                             TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n+        builder.setPayload(ByteString.copyFrom(PAYLOAD_MESSAGE));\n         final AuthMessage authMessage = builder.build();\n         CompatClient42 client = newCompatClient(bookie1.getLocalAddress());\n \n@@ -120,14 +118,14 @@ public void testAuthMultiMessage() throws Exception {\n             AuthResponse authResponse = (AuthResponse)response;\n             assertEquals(\"Should have succeeded\",\n                          response.getErrorCode(), BookieProtocol.EOK);\n-            TestDataFormats.AuthMessageType type = authResponse.getAuthMessage()\n-                .getExtension(TestDataFormats.messageType);\n+            byte[] type = authResponse.getAuthMessage()\n+                .getPayload().toByteArray();\n             if (i == 2) {\n-                assertEquals(\"Should succeed after 3\",\n-                             type, TestDataFormats.AuthMessageType.SUCCESS_RESPONSE);\n+                assertArrayEquals(\"Should succeed after 3\",\n+                             type, SUCCESS_RESPONSE);\n             } else {\n-                assertEquals(\"Should be payload\", type,\n-                             TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n+                assertArrayEquals(\"Should be payload\", type,\n+                             PAYLOAD_MESSAGE);\n             }\n         }\n     }\n@@ -141,8 +139,7 @@ public void testAuthFail() throws Exception {\n \n         AuthMessage.Builder builder = AuthMessage.newBuilder()\n             .setAuthPluginName(TestAuth.TEST_AUTH_PROVIDER_PLUGIN_NAME);\n-        builder.setExtension(TestDataFormats.messageType,\n-                             TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n+        builder.setPayload(ByteString.copyFrom(PAYLOAD_MESSAGE));\n         final AuthMessage authMessage = builder.build();\n         CompatClient42 client = newCompatClient(bookie1.getLocalAddress());\n \n@@ -154,14 +151,14 @@ public void testAuthFail() throws Exception {\n             AuthResponse authResponse = (AuthResponse)response;\n             assertEquals(\"Should have succeeded\",\n                          response.getErrorCode(), BookieProtocol.EOK);\n-            TestDataFormats.AuthMessageType type = authResponse.getAuthMessage()\n-                .getExtension(TestDataFormats.messageType);\n+            byte[] type = authResponse.getAuthMessage()\n+                .getPayload().toByteArray();\n             if (i == 2) {\n-                assertEquals(\"Should fail after 3\",\n-                             type, TestDataFormats.AuthMessageType.FAILURE_RESPONSE);\n+                assertArrayEquals(\"Should fail after 3\",\n+                             type, FAILURE_RESPONSE);\n             } else {\n-                assertEquals(\"Should be payload\", type,\n-                             TestDataFormats.AuthMessageType.PAYLOAD_MESSAGE);\n+                assertArrayEquals(\"Should be payload\", type,\n+                             PAYLOAD_MESSAGE);\n             }\n \n         }"},{"sha":"84e1a77533d8ac099630cb68cfdf02b1677a6216","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDataFormats.java","status":"removed","additions":0,"deletions":149,"changes":149,"blob_url":"https://github.com/apache/bookkeeper/blob/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDataFormats.java","raw_url":"https://github.com/apache/bookkeeper/raw/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDataFormats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDataFormats.java?ref=26b09abb4202362ca37d6944ce75eb2a3309dc3c","patch":"@@ -1,149 +0,0 @@\n-// Generated by the protocol buffer compiler.  DO NOT EDIT!\n-// source: src/test/proto/TestDataFormats.proto\n-\n-package org.apache.bookkeeper.proto;\n-\n-public final class TestDataFormats {\n-  private TestDataFormats() {}\n-  public static void registerAllExtensions(\n-      com.google.protobuf.ExtensionRegistry registry) {\n-    registry.add(org.apache.bookkeeper.proto.TestDataFormats.messageType);\n-  }\n-  /**\n-   * Protobuf enum {@code AuthMessageType}\n-   */\n-  public enum AuthMessageType\n-      implements com.google.protobuf.ProtocolMessageEnum {\n-    /**\n-     * <code>SUCCESS_RESPONSE = 1;</code>\n-     */\n-    SUCCESS_RESPONSE(0, 1),\n-    /**\n-     * <code>FAILURE_RESPONSE = 2;</code>\n-     */\n-    FAILURE_RESPONSE(1, 2),\n-    /**\n-     * <code>PAYLOAD_MESSAGE = 3;</code>\n-     */\n-    PAYLOAD_MESSAGE(2, 3),\n-    ;\n-\n-    /**\n-     * <code>SUCCESS_RESPONSE = 1;</code>\n-     */\n-    public static final int SUCCESS_RESPONSE_VALUE = 1;\n-    /**\n-     * <code>FAILURE_RESPONSE = 2;</code>\n-     */\n-    public static final int FAILURE_RESPONSE_VALUE = 2;\n-    /**\n-     * <code>PAYLOAD_MESSAGE = 3;</code>\n-     */\n-    public static final int PAYLOAD_MESSAGE_VALUE = 3;\n-\n-\n-    public final int getNumber() { return value; }\n-\n-    public static AuthMessageType valueOf(int value) {\n-      switch (value) {\n-        case 1: return SUCCESS_RESPONSE;\n-        case 2: return FAILURE_RESPONSE;\n-        case 3: return PAYLOAD_MESSAGE;\n-        default: return null;\n-      }\n-    }\n-\n-    public static com.google.protobuf.Internal.EnumLiteMap<AuthMessageType>\n-        internalGetValueMap() {\n-      return internalValueMap;\n-    }\n-    private static com.google.protobuf.Internal.EnumLiteMap<AuthMessageType>\n-        internalValueMap =\n-          new com.google.protobuf.Internal.EnumLiteMap<AuthMessageType>() {\n-            public AuthMessageType findValueByNumber(int number) {\n-              return AuthMessageType.valueOf(number);\n-            }\n-          };\n-\n-    public final com.google.protobuf.Descriptors.EnumValueDescriptor\n-        getValueDescriptor() {\n-      return getDescriptor().getValues().get(index);\n-    }\n-    public final com.google.protobuf.Descriptors.EnumDescriptor\n-        getDescriptorForType() {\n-      return getDescriptor();\n-    }\n-    public static final com.google.protobuf.Descriptors.EnumDescriptor\n-        getDescriptor() {\n-      return org.apache.bookkeeper.proto.TestDataFormats.getDescriptor().getEnumTypes().get(0);\n-    }\n-\n-    private static final AuthMessageType[] VALUES = values();\n-\n-    public static AuthMessageType valueOf(\n-        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {\n-      if (desc.getType() != getDescriptor()) {\n-        throw new java.lang.IllegalArgumentException(\n-          \"EnumValueDescriptor is not for this type.\");\n-      }\n-      return VALUES[desc.getIndex()];\n-    }\n-\n-    private final int index;\n-    private final int value;\n-\n-    private AuthMessageType(int index, int value) {\n-      this.index = index;\n-      this.value = value;\n-    }\n-\n-    // @@protoc_insertion_point(enum_scope:AuthMessageType)\n-  }\n-\n-  public static final int MESSAGETYPE_FIELD_NUMBER = 1000;\n-  /**\n-   * <code>extend .AuthMessage { ... }</code>\n-   */\n-  public static final\n-    com.google.protobuf.GeneratedMessage.GeneratedExtension<\n-      org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage,\n-      org.apache.bookkeeper.proto.TestDataFormats.AuthMessageType> messageType = com.google.protobuf.GeneratedMessage\n-          .newFileScopedGeneratedExtension(\n-        org.apache.bookkeeper.proto.TestDataFormats.AuthMessageType.class,\n-        null);\n-\n-  public static com.google.protobuf.Descriptors.FileDescriptor\n-      getDescriptor() {\n-    return descriptor;\n-  }\n-  private static com.google.protobuf.Descriptors.FileDescriptor\n-      descriptor;\n-  static {\n-    java.lang.String[] descriptorData = {\n-      \"\\n$src/test/proto/TestDataFormats.proto\\032\\'\" +\n-      \"src/main/proto/BookkeeperProtocol.proto*\" +\n-      \"R\\n\\017AuthMessageType\\022\\024\\n\\020SUCCESS_RESPONSE\\020\\001\" +\n-      \"\\022\\024\\n\\020FAILURE_RESPONSE\\020\\002\\022\\023\\n\\017PAYLOAD_MESSAG\" +\n-      \"E\\020\\003:4\\n\\013messageType\\022\\014.AuthMessage\\030\\350\\007 \\001(\\0162\" +\n-      \"\\020.AuthMessageTypeB\\037\\n\\033org.apache.bookkeep\" +\n-      \"er.protoH\\001\"\n-    };\n-    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n-        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {\n-          public com.google.protobuf.ExtensionRegistry assignDescriptors(\n-              com.google.protobuf.Descriptors.FileDescriptor root) {\n-            descriptor = root;\n-            return null;\n-          }\n-        };\n-    com.google.protobuf.Descriptors.FileDescriptor\n-      .internalBuildGeneratedFileFrom(descriptorData,\n-        new com.google.protobuf.Descriptors.FileDescriptor[] {\n-          org.apache.bookkeeper.proto.BookkeeperProtocol.getDescriptor(),\n-        }, assigner);\n-    messageType.internalInit(descriptor.getExtensions().get(0));\n-    org.apache.bookkeeper.proto.BookkeeperProtocol.getDescriptor();\n-  }\n-\n-  // @@protoc_insertion_point(outer_class_scope)\n-}"},{"sha":"2095b6687710463a845347104c90a507ee18a377","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -65,7 +65,7 @@\n     public TestPerChannelBookieClient() throws Exception {\n         super(1);\n         authProvider = AuthProviderFactoryFactory.newClientAuthProviderFactory(\n-                new ClientConfiguration(), extRegistry);\n+                new ClientConfiguration());\n     }\n \n "},{"sha":"470aefeecbf47e065e394359a50d41545a7f2752","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuthAutoRecoveryTest.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/bookkeeper/blob/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuthAutoRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/13d668f2208bf472e4938cfdfd2de912eaa11275/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuthAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuthAutoRecoveryTest.java?ref=13d668f2208bf472e4938cfdfd2de912eaa11275","patch":"@@ -0,0 +1,111 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import org.apache.bookkeeper.auth.AuthCallbacks;\n+import org.apache.bookkeeper.auth.AuthToken;\n+import org.apache.bookkeeper.auth.ClientAuthProvider;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.*;\n+import org.apache.bookkeeper.client.ClientConnectionPeer;\n+\n+/**\n+ * This test verifies the auditor bookie scenarios from the auth point-of-view\n+ */\n+public class AuthAutoRecoveryTest extends BookKeeperClusterTestCase {\n+\n+    private final static Logger LOG = LoggerFactory\n+        .getLogger(AuthAutoRecoveryTest.class);\n+\n+    public static final String TEST_AUTH_PROVIDER_PLUGIN_NAME = \"TestAuthProviderPlugin\";\n+\n+    private static String clientSideRole;\n+\n+    private static class AuditorClientAuthInterceptorFactory\n+        implements ClientAuthProvider.Factory {\n+\n+        @Override\n+        public String getPluginName() {\n+            return TEST_AUTH_PROVIDER_PLUGIN_NAME;\n+        }\n+\n+        @Override\n+        public void init(ClientConfiguration conf) {\n+            clientSideRole = conf.getClientRole();\n+        }\n+\n+        @Override\n+        public ClientAuthProvider newProvider(ClientConnectionPeer addr,\n+            final AuthCallbacks.GenericCallback<Void> completeCb) {\n+            return new ClientAuthProvider() {\n+                public void init(AuthCallbacks.GenericCallback<AuthToken> cb) {\n+\n+                    completeCb.operationComplete(BKException.Code.OK, null);\n+                }\n+\n+                public void process(AuthToken m, AuthCallbacks.GenericCallback<AuthToken> cb) {\n+                }\n+            };\n+        }\n+    }\n+\n+    protected ServerConfiguration newServerConfiguration() throws Exception {\n+        ServerConfiguration conf = super.newServerConfiguration();\n+        conf.setClientAuthProviderFactoryClass(AuditorClientAuthInterceptorFactory.class.getName());\n+        return conf;\n+    }\n+\n+    public AuthAutoRecoveryTest() {\n+        super(6);\n+    }\n+\n+    /*\n+     * test the client role of the auditor\n+     */\n+    @Test(timeout = 60000)\n+    public void testAuthClientRole() throws Exception {\n+        ServerConfiguration config = bsConfs.get(0);\n+        assertEquals(AuditorClientAuthInterceptorFactory.class.getName(), config.getClientAuthProviderFactoryClass());\n+        AutoRecoveryMain main = new AutoRecoveryMain(config);\n+        try {\n+            main.start();\n+            Thread.sleep(500);\n+            assertTrue(\"AuditorElector should be running\",\n+                main.auditorElector.isRunning());\n+            assertTrue(\"Replication worker should be running\",\n+                main.replicationWorker.isRunning());\n+        } finally {\n+            main.shutdown();\n+        }\n+        assertEquals(ClientConfiguration.CLIENT_ROLE_SYSTEM, clientSideRole);\n+    }\n+\n+}"},{"sha":"be149ed7d553bb8c66ed19af614cb19e4571cf73","filename":"bookkeeper-server/src/test/proto/TestDataFormats.proto","status":"removed","additions":0,"deletions":34,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server/src/test/proto/TestDataFormats.proto","raw_url":"https://github.com/apache/bookkeeper/raw/26b09abb4202362ca37d6944ce75eb2a3309dc3c/bookkeeper-server/src/test/proto/TestDataFormats.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/proto/TestDataFormats.proto?ref=26b09abb4202362ca37d6944ce75eb2a3309dc3c","patch":"@@ -1,34 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-option java_package = \"org.apache.bookkeeper.proto\";\n-option optimize_for = SPEED;\n-\n-import \"src/main/proto/BookkeeperProtocol.proto\";\n-\n-enum AuthMessageType {\n-    SUCCESS_RESPONSE = 1;\n-    FAILURE_RESPONSE = 2;\n-    PAYLOAD_MESSAGE = 3;\n-}\n-\n-/**\n- *\n- */\n-extend AuthMessage {\n-    optional AuthMessageType messageType = 1000;\n-}"}]}

