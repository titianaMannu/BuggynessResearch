{"sha":"151c50dbe992efcaf0fa831dbf829b792b8bb925","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxNTFjNTBkYmU5OTJlZmNhZjBmYTgzMWRiZjgyOWI3OTJiOGJiOTI1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-23T16:46:05Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-23T16:46:05Z"},"message":"BOOKKEEPER-750. Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1597124 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c8bb61438abab86d0884383c865f5ae451490aa0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c8bb61438abab86d0884383c865f5ae451490aa0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/151c50dbe992efcaf0fa831dbf829b792b8bb925","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/151c50dbe992efcaf0fa831dbf829b792b8bb925","html_url":"https://github.com/apache/bookkeeper/commit/151c50dbe992efcaf0fa831dbf829b792b8bb925","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/151c50dbe992efcaf0fa831dbf829b792b8bb925/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"e3594b50f93b881f8ded9fe26c9ae2f875e054ea","url":"https://api.github.com/repos/apache/bookkeeper/commits/e3594b50f93b881f8ded9fe26c9ae2f875e054ea","html_url":"https://github.com/apache/bookkeeper/commit/e3594b50f93b881f8ded9fe26c9ae2f875e054ea"}],"stats":{"total":26,"additions":18,"deletions":8},"files":[{"sha":"d0d02401131472e233c64a0eb0a639473319648a","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/151c50dbe992efcaf0fa831dbf829b792b8bb925/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/151c50dbe992efcaf0fa831dbf829b792b8bb925/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=151c50dbe992efcaf0fa831dbf829b792b8bb925","patch":"@@ -189,6 +189,8 @@ Trunk (unreleased changes)\n         BOOKKEEPER-629: Support hostname based ledger metadata to help users to change IP with existing installation (rakeshr via ivank)\n \n \tBOOKKEEPER-755: Incorrect number of seconds specified in a day (Joseph Redfern via fpj)\n+\t\n+\tBOOKKEEPER-750: Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank via fpj)\n \n       hedwig-server:\n "},{"sha":"6787c918b2216528b2341048d6de505d4f70a911","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/151c50dbe992efcaf0fa831dbf829b792b8bb925/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/151c50dbe992efcaf0fa831dbf829b792b8bb925/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=151c50dbe992efcaf0fa831dbf829b792b8bb925","patch":"@@ -81,10 +81,13 @@\n     private LedgerUnderreplicationManager ledgerUnderreplicationManager;\n     private final ScheduledExecutorService executor;\n     private List<String> knownBookies = new ArrayList<String>();\n+    private final String bookieIdentifier;\n \n     public Auditor(final String bookieIdentifier, ServerConfiguration conf,\n                    ZooKeeper zkc) throws UnavailableException {\n         this.conf = conf;\n+        this.bookieIdentifier = bookieIdentifier;\n+\n         initialize(conf, zkc);\n \n         executor = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n@@ -186,7 +189,7 @@ public void run() {\n     }\n \n     public void start() {\n-        LOG.info(\"I'm starting as Auditor Bookie\");\n+        LOG.info(\"Im starting as Auditor Bookie. ID: {}\", bookieIdentifier);\n         // on startup watching available bookie and based on the\n         // available bookies determining the bookie failures.\n         synchronized (this) {"},{"sha":"6d73eebb5df4d3120b7f2100037ae2bdbcc20807","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/151c50dbe992efcaf0fa831dbf829b792b8bb925/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/151c50dbe992efcaf0fa831dbf829b792b8bb925/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java?ref=151c50dbe992efcaf0fa831dbf829b792b8bb925","patch":"@@ -361,7 +361,7 @@ public void testEmptyLedgerLosesQuorumEventually() throws Exception {\n                  LedgerHandleAdapter.getLedgerMetadata(lh).getEnsembles().get(0L));\n         killBookie(replicaToKill);\n \n-        getAuditor().submitAuditTask().get(); // ensure auditor runs\n+        getAuditor(10, TimeUnit.SECONDS).submitAuditTask().get(); // ensure auditor runs\n \n         assertTrue(\"Should be marked as underreplicated\", latch.await(5, TimeUnit.SECONDS));\n         latch = new CountDownLatch(1);\n@@ -376,7 +376,7 @@ public void testEmptyLedgerLosesQuorumEventually() throws Exception {\n                  LedgerHandleAdapter.getLedgerMetadata(lh).getEnsembles().get(0L));\n         killBookie(replicaToKill);\n \n-        getAuditor().submitAuditTask().get(); // ensure auditor runs\n+        getAuditor(10, TimeUnit.SECONDS).submitAuditTask().get(); // ensure auditor runs\n \n         assertTrue(\"Should be marked as underreplicated\", latch.await(5, TimeUnit.SECONDS));\n         latch = new CountDownLatch(1);"},{"sha":"b40d17e2c46944ed432418f02576aa67871493ba","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/151c50dbe992efcaf0fa831dbf829b792b8bb925/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/151c50dbe992efcaf0fa831dbf829b792b8bb925/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=151c50dbe992efcaf0fa831dbf829b792b8bb925","patch":"@@ -30,6 +30,7 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import junit.framework.TestCase;\n \n@@ -540,12 +541,16 @@ public void stopReplicationService() throws Exception{\n         }\n     }\n \n-    public Auditor getAuditor() throws Exception {\n-        for (AutoRecoveryMain p : autoRecoveryProcesses.values()) {\n-            Auditor a = p.getAuditor();\n-            if (a != null) {\n-                return a;\n+    public Auditor getAuditor(int timeout, TimeUnit unit) throws Exception {\n+        final long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, unit);\n+        while (System.nanoTime() < timeoutAt) {\n+            for (AutoRecoveryMain p : autoRecoveryProcesses.values()) {\n+                Auditor a = p.getAuditor();\n+                if (a != null) {\n+                    return a;\n+                }\n             }\n+            Thread.sleep(100);\n         }\n         throw new Exception(\"No auditor found\");\n     }"}]}

