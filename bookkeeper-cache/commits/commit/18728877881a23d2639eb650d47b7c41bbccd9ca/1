{"sha":"18728877881a23d2639eb650d47b7c41bbccd9ca","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxODcyODg3Nzg4MWEyM2QyNjM5ZWI2NTBkNDdiN2M0MWJiY2NkOWNh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-19T10:58:16Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-19T10:58:16Z"},"message":"BOOKKEEPER-292: Test backward compatibility automatically between versions. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1351651 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ebce91f456b85095eb887de4ca2b43b861d83efc","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ebce91f456b85095eb887de4ca2b43b861d83efc"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/18728877881a23d2639eb650d47b7c41bbccd9ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/18728877881a23d2639eb650d47b7c41bbccd9ca","html_url":"https://github.com/apache/bookkeeper/commit/18728877881a23d2639eb650d47b7c41bbccd9ca","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/18728877881a23d2639eb650d47b7c41bbccd9ca/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"297eb745440443eea1a8217c89299abf8d18fc3f","url":"https://api.github.com/repos/apache/bookkeeper/commits/297eb745440443eea1a8217c89299abf8d18fc3f","html_url":"https://github.com/apache/bookkeeper/commit/297eb745440443eea1a8217c89299abf8d18fc3f"}],"stats":{"total":739,"additions":739,"deletions":0},"files":[{"sha":"25e12299893a8d9b9c530f2f41be9a0ed1d1a210","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/18728877881a23d2639eb650d47b7c41bbccd9ca/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/18728877881a23d2639eb650d47b7c41bbccd9ca/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=18728877881a23d2639eb650d47b7c41bbccd9ca","patch":"@@ -16,6 +16,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-298: We run with preferIPv4Stack in the scripts but not in the tests (ivank)\n \n+      BOOKKEEPER-292: Test backward compatibility automatically between versions. (ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)"},{"sha":"6ad020fcabd37c0dd7e80410e82de7f42ff1b121","filename":"bookkeeper-server/pom.xml","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/18728877881a23d2639eb650d47b7c41bbccd9ca/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/18728877881a23d2639eb650d47b7c41bbccd9ca/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=18728877881a23d2639eb650d47b7c41bbccd9ca","patch":"@@ -116,6 +116,18 @@\n \t</exclusion>\n       </exclusions>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server-compat400</artifactId>\n+      <version>4.0.0</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server-compat410</artifactId>\n+      <version>4.1.0</version>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n   <build>\n     <plugins>"},{"sha":"4db2e8dc758b6c59cee6de422f26863d337f98bc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"added","additions":506,"deletions":0,"changes":506,"blob_url":"https://github.com/apache/bookkeeper/blob/18728877881a23d2639eb650d47b7c41bbccd9ca/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/18728877881a23d2639eb650d47b7c41bbccd9ca/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=18728877881a23d2639eb650d47b7c41bbccd9ca","patch":"@@ -0,0 +1,506 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.test;\n+\n+import java.io.File;\n+\n+import java.util.Enumeration;\n+import java.util.Arrays;\n+import java.net.InetAddress;\n+\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+import static org.junit.Assert.*;\n+\n+import org.apache.bookkeeper.bookie.FileSystemUpgrade;\n+\n+public class TestBackwardCompat {\n+    private static ZooKeeperUtil zkUtil = new ZooKeeperUtil();;\n+    private static int nextPort = 3181;\n+    private static byte[] ENTRY_DATA = \"ThisIsAnEntry\".getBytes();\n+\n+    static void waitUp(int port) throws Exception {\n+        while(zkUtil.getZooKeeperClient().exists(\n+                      \"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port,\n+                      false) == null) {\n+            Thread.sleep(500);\n+        }\n+    }\n+    @Before\n+    public void startZooKeeperServer() throws Exception {\n+        zkUtil.startServer();\n+    }\n+\n+    @After\n+    public void stopZooKeeperServer() throws Exception {\n+        zkUtil.killServer();\n+    }\n+\n+    /**\n+     * Version 4.0.0 classes\n+     */\n+    static class Server400 {\n+        org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration conf;\n+        org.apache.bk_v4_0_0.bookkeeper.proto.BookieServer server = null;\n+\n+        Server400(File journalDir, File ledgerDir, int port) throws Exception {\n+            conf = new org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration();\n+            conf.setBookiePort(port);\n+            conf.setZkServers(zkUtil.getZooKeeperConnectString());\n+            conf.setJournalDirName(journalDir.getPath());\n+            conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+        }\n+\n+        void start() throws Exception {\n+            server = new org.apache.bk_v4_0_0.bookkeeper.proto.BookieServer(conf);\n+            server.start();\n+            waitUp(conf.getBookiePort());\n+        }\n+\n+        org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration getConf() {\n+            return conf;\n+        }\n+\n+        void stop() throws Exception {\n+            if (server != null) {\n+                server.shutdown();\n+            }\n+        }\n+    }\n+\n+    static class Ledger400 {\n+        org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper bk;\n+        org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle lh;\n+\n+        private Ledger400(org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper bk,\n+                          org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle lh) {\n+            this.bk = bk;\n+            this.lh = lh;\n+        }\n+\n+        static Ledger400 newLedger() throws Exception {\n+            org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper newbk\n+                = new org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n+            org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle newlh\n+                = newbk.createLedger(1, 1,\n+                                  org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n+                                  \"foobar\".getBytes());\n+            return new Ledger400(newbk, newlh);\n+        }\n+\n+        static Ledger400 openLedger(long id) throws Exception {\n+            org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper newbk\n+                = new org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n+            org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle newlh\n+                = newbk.openLedger(id,\n+                                org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n+                                \"foobar\".getBytes());\n+            return new Ledger400(newbk, newlh);\n+        }\n+\n+        long getId() {\n+            return lh.getId();\n+        }\n+\n+        void write100() throws Exception {\n+            for (int i = 0; i < 100; i++) {\n+                lh.addEntry(ENTRY_DATA);\n+            }\n+        }\n+\n+        long readAll() throws Exception {\n+            long count = 0;\n+            Enumeration<org.apache.bk_v4_0_0.bookkeeper.client.LedgerEntry> entries\n+                = lh.readEntries(0, lh.getLastAddConfirmed());\n+            while (entries.hasMoreElements()) {\n+                assertTrue(\"entry data doesn't match\",\n+                           Arrays.equals(entries.nextElement().getEntry(), ENTRY_DATA));\n+                count++;\n+            }\n+            return count;\n+        }\n+\n+        void close() throws Exception {\n+            if (lh != null) {\n+                lh.close();\n+            }\n+            if (bk != null) {\n+                bk.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Version 4.1.0 classes\n+     */\n+    static class Server410 {\n+        org.apache.bk_v4_1_0.bookkeeper.conf.ServerConfiguration conf;\n+        org.apache.bk_v4_1_0.bookkeeper.proto.BookieServer server = null;\n+\n+        Server410(File journalDir, File ledgerDir, int port) throws Exception {\n+            conf = new org.apache.bk_v4_1_0.bookkeeper.conf.ServerConfiguration();\n+            conf.setBookiePort(port);\n+            conf.setZkServers(zkUtil.getZooKeeperConnectString());\n+            conf.setJournalDirName(journalDir.getPath());\n+            conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+        }\n+\n+        void start() throws Exception {\n+            server = new org.apache.bk_v4_1_0.bookkeeper.proto.BookieServer(conf);\n+            server.start();\n+            waitUp(conf.getBookiePort());\n+        }\n+\n+        org.apache.bk_v4_1_0.bookkeeper.conf.ServerConfiguration getConf() {\n+            return conf;\n+        }\n+\n+        void stop() throws Exception {\n+            if (server != null) {\n+                server.shutdown();\n+            }\n+        }\n+    }\n+\n+    static class Ledger410 {\n+        org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper bk;\n+        org.apache.bk_v4_1_0.bookkeeper.client.LedgerHandle lh;\n+\n+        private Ledger410(org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper bk,\n+                          org.apache.bk_v4_1_0.bookkeeper.client.LedgerHandle lh) {\n+            this.bk = bk;\n+            this.lh = lh;\n+        }\n+\n+        static Ledger410 newLedger() throws Exception {\n+            org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper newbk\n+                = new org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n+            org.apache.bk_v4_1_0.bookkeeper.client.LedgerHandle newlh\n+                = newbk.createLedger(1, 1,\n+                                  org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n+                                  \"foobar\".getBytes());\n+            return new Ledger410(newbk, newlh);\n+        }\n+\n+        static Ledger410 openLedger(long id) throws Exception {\n+            org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper newbk\n+                = new org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n+            org.apache.bk_v4_1_0.bookkeeper.client.LedgerHandle newlh\n+                = newbk.openLedger(id,\n+                                org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n+                                \"foobar\".getBytes());\n+            return new Ledger410(newbk, newlh);\n+        }\n+\n+        long getId() {\n+            return lh.getId();\n+        }\n+\n+        void write100() throws Exception {\n+            for (int i = 0; i < 100; i++) {\n+                lh.addEntry(ENTRY_DATA);\n+            }\n+        }\n+\n+        long readAll() throws Exception {\n+            long count = 0;\n+            Enumeration<org.apache.bk_v4_1_0.bookkeeper.client.LedgerEntry> entries\n+                = lh.readEntries(0, lh.getLastAddConfirmed());\n+            while (entries.hasMoreElements()) {\n+                assertTrue(\"entry data doesn't match\",\n+                           Arrays.equals(entries.nextElement().getEntry(), ENTRY_DATA));\n+                count++;\n+            }\n+            return count;\n+        }\n+\n+        void close() throws Exception {\n+            if (lh != null) {\n+                lh.close();\n+            }\n+            if (bk != null) {\n+                bk.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Current verion classes\n+     */\n+    static class ServerCurrent {\n+        org.apache.bookkeeper.conf.ServerConfiguration conf;\n+        org.apache.bookkeeper.proto.BookieServer server = null;\n+\n+        ServerCurrent(File journalDir, File ledgerDir, int port) throws Exception {\n+            conf = new org.apache.bookkeeper.conf.ServerConfiguration();\n+            conf.setBookiePort(port);\n+            conf.setZkServers(zkUtil.getZooKeeperConnectString());\n+            conf.setJournalDirName(journalDir.getPath());\n+            conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+        }\n+\n+        void start() throws Exception {\n+            server = new org.apache.bookkeeper.proto.BookieServer(conf);\n+            server.start();\n+            waitUp(conf.getBookiePort());\n+        }\n+\n+        org.apache.bookkeeper.conf.ServerConfiguration getConf() {\n+            return conf;\n+        }\n+\n+        void stop() throws Exception {\n+            if (server != null) {\n+                server.shutdown();\n+            }\n+        }\n+    }\n+\n+    static class LedgerCurrent {\n+        org.apache.bookkeeper.client.BookKeeper bk;\n+        org.apache.bookkeeper.client.LedgerHandle lh;\n+\n+        private LedgerCurrent(org.apache.bookkeeper.client.BookKeeper bk,\n+                              org.apache.bookkeeper.client.LedgerHandle lh) {\n+            this.bk = bk;\n+            this.lh = lh;\n+        }\n+\n+        static LedgerCurrent newLedger() throws Exception {\n+            org.apache.bookkeeper.client.BookKeeper newbk\n+                = new org.apache.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n+            org.apache.bookkeeper.client.LedgerHandle newlh\n+                = newbk.createLedger(1, 1,\n+                                     org.apache.bookkeeper.client.BookKeeper.DigestType.CRC32,\n+                                     \"foobar\".getBytes());\n+            return new LedgerCurrent(newbk, newlh);\n+        }\n+\n+        static LedgerCurrent openLedger(long id) throws Exception {\n+            org.apache.bookkeeper.client.BookKeeper newbk\n+                = new org.apache.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n+            org.apache.bookkeeper.client.LedgerHandle newlh\n+                = newbk.openLedger(id,\n+                                org.apache.bookkeeper.client.BookKeeper.DigestType.CRC32,\n+                                \"foobar\".getBytes());\n+            return new LedgerCurrent(newbk, newlh);\n+        }\n+\n+        long getId() {\n+            return lh.getId();\n+        }\n+\n+        void write100() throws Exception {\n+            for (int i = 0; i < 100; i++) {\n+                lh.addEntry(ENTRY_DATA);\n+            }\n+        }\n+\n+        long readAll() throws Exception {\n+            long count = 0;\n+            Enumeration<org.apache.bookkeeper.client.LedgerEntry> entries\n+                = lh.readEntries(0, lh.getLastAddConfirmed());\n+            while (entries.hasMoreElements()) {\n+                assertTrue(\"entry data doesn't match\",\n+                           Arrays.equals(entries.nextElement().getEntry(), ENTRY_DATA));\n+                count++;\n+            }\n+            return count;\n+        }\n+\n+        void close() throws Exception {\n+            if (lh != null) {\n+                lh.close();\n+            }\n+            if (bk != null) {\n+                bk.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test compatability between version 4.0.0 and the current version.\n+     * Incompatabilities are:\n+     *  - Current client will not be able to talk to 4.0.0 server.\n+     *  - 4.0.0 client will not be able to fence ledgers on current server.\n+     *  - Current server won't start with 4.0.0 server directories without upgrade.\n+     */\n+    @Test\n+    public void testCompat400() throws Exception {\n+        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n+        journalDir.delete();\n+        journalDir.mkdir();\n+        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+\n+        int port = nextPort++;\n+        // start server, upgrade\n+        Server400 s400 = new Server400(journalDir, ledgerDir, port);\n+        s400.start();\n+\n+        Ledger400 l400 = Ledger400.newLedger();\n+        l400.write100();\n+        long oldLedgerId = l400.getId();\n+        l400.close();\n+\n+        // Check that current client isn't able to write to old server\n+        LedgerCurrent lcur = LedgerCurrent.newLedger();\n+        try {\n+            lcur.write100();\n+            fail(\"Current shouldn't be able to write to 4.0.0 server\");\n+        } catch (Exception e) {\n+        }\n+        lcur.close();\n+\n+        s400.stop();\n+\n+        // Start the current server, will require a filesystem upgrade\n+        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port);\n+        try {\n+            scur.start();\n+            fail(\"Shouldn't be able to start without directory upgrade\");\n+        } catch (Exception e) {\n+        }\n+        FileSystemUpgrade.upgrade(scur.getConf());\n+\n+        scur.start();\n+\n+        // check that old client can read its old ledgers on new server\n+        l400 = Ledger400.openLedger(oldLedgerId);\n+        assertEquals(100, l400.readAll());\n+        l400.close();\n+\n+        // check that old client can create ledgers on new server\n+        l400 = Ledger400.newLedger();\n+        l400.write100();\n+        l400.close();\n+\n+        // check that current client can read old ledger\n+        lcur = LedgerCurrent.openLedger(oldLedgerId);\n+        assertEquals(100, lcur.readAll());\n+        lcur.close();\n+\n+        // check that old client can read current client's ledgers\n+        lcur = LedgerCurrent.openLedger(oldLedgerId);\n+        assertEquals(100, lcur.readAll());\n+        lcur.close();\n+\n+        // check that old client can not fence a current client\n+        // due to lack of password\n+        lcur = LedgerCurrent.newLedger();\n+        lcur.write100();\n+        long fenceLedgerId = lcur.getId();\n+        try {\n+            l400 = Ledger400.openLedger(fenceLedgerId);\n+            fail(\"Shouldn't be able to open ledger\");\n+        } catch (Exception e) {\n+            // correct behaviour\n+        }\n+        lcur.write100();\n+        try {\n+            // Unfortunately, as the 4.0.0 client doesn't know that it should\n+            // be checking for a password. It puts the ledger metadata in recover\n+            // mode. This means we're not able to close, as our metadata znode is\n+            // out of date\n+            lcur.close();\n+\n+            fail(\"Shouldn't be able to close cleanly\");\n+        } catch (Exception e) {\n+        }\n+        lcur = LedgerCurrent.openLedger(fenceLedgerId);\n+        assertEquals(200, lcur.readAll());\n+        lcur.close();\n+\n+        scur.stop();\n+    }\n+\n+    /**\n+     * Test compatability between version 4.1.0 and the current version.\n+     * Should be 100% compatible.\n+     */\n+    @Test\n+    public void testCompat410() throws Exception {\n+        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n+        journalDir.delete();\n+        journalDir.mkdir();\n+        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+\n+        int port = nextPort++;\n+        // start server, upgrade\n+        Server410 s410 = new Server410(journalDir, ledgerDir, port);\n+        s410.start();\n+\n+        Ledger410 l410 = Ledger410.newLedger();\n+        l410.write100();\n+        long oldLedgerId = l410.getId();\n+        l410.close();\n+\n+        // Check that current client can to write to old server\n+        LedgerCurrent lcur = LedgerCurrent.newLedger();\n+        lcur.write100();\n+        lcur.close();\n+\n+        s410.stop();\n+\n+        // Start the current server, will not require a filesystem upgrade\n+        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port);\n+        scur.start();\n+\n+        // check that old client can read its old ledgers on new server\n+        l410 = Ledger410.openLedger(oldLedgerId);\n+        assertEquals(100, l410.readAll());\n+        l410.close();\n+\n+        // check that old client can create ledgers on new server\n+        l410 = Ledger410.newLedger();\n+        l410.write100();\n+        l410.close();\n+\n+        // check that current client can read old ledger\n+        lcur = LedgerCurrent.openLedger(oldLedgerId);\n+        assertEquals(100, lcur.readAll());\n+        lcur.close();\n+\n+        // check that old client can read current client's ledgers\n+        lcur = LedgerCurrent.openLedger(oldLedgerId);\n+        assertEquals(100, lcur.readAll());\n+        lcur.close();\n+\n+        // check that old client can fence a current client\n+        // due to lack of password\n+        lcur = LedgerCurrent.newLedger();\n+        lcur.write100();\n+        long fenceLedgerId = lcur.getId();\n+        l410 = Ledger410.openLedger(fenceLedgerId);\n+        try {\n+            lcur.write100();\n+            fail(\"Fencing should have prevented this write\");\n+        } catch (Exception e) {\n+        }\n+        assertEquals(100, l410.readAll());\n+\n+        scur.stop();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"487306e1e480c044cffd3e275c3564d7dc290337","filename":"compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/18728877881a23d2639eb650d47b7c41bbccd9ca/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/18728877881a23d2639eb650d47b7c41bbccd9ca/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml?ref=18728877881a23d2639eb650d47b7c41bbccd9ca","patch":"@@ -0,0 +1,84 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>compat-deps</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.2.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.apache.bookkeeper</groupId>\n+  <artifactId>bookkeeper-server-compat400</artifactId>\n+  <version>4.0.0</version>\n+  <name>bookkeeper-server-compat400</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server</artifactId>\n+      <version>4.0.0</version>\n+    </dependency>\n+  </dependencies>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>1.5</version>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <createDependencyReducedPom>false</createDependencyReducedPom>\n+              <artifactSet>\n+                <includes>\n+                  <include>org.apache.*:*</include>\n+                  <include>org.jboss.*:*</include>\n+                  <include>commons-*:*</include>\n+                </includes>\n+                <excludes>\n+                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n+                </excludes>\n+              </artifactSet>\n+              <relocations>\n+                <relocation>\n+                  <pattern>org.apache</pattern>\n+                  <shadedPattern>org.apache.bk_v4_0_0</shadedPattern>\n+                  <excludes>\n+                    <exclude>org.apache.log4j</exclude>\n+                  </excludes>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.jboss</pattern>\n+                  <shadedPattern>org.jboss.bk_v4_0_0</shadedPattern>\n+                </relocation>\n+              </relocations>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n\\ No newline at end of file"},{"sha":"5c21d15f67f9419e1520715efc5f1cb90dd56f83","filename":"compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/bookkeeper/blob/18728877881a23d2639eb650d47b7c41bbccd9ca/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/18728877881a23d2639eb650d47b7c41bbccd9ca/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml?ref=18728877881a23d2639eb650d47b7c41bbccd9ca","patch":"@@ -0,0 +1,93 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>compat-deps</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.2.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.apache.bookkeeper</groupId>\n+  <artifactId>bookkeeper-server-compat410</artifactId>\n+  <version>4.1.0</version>\n+  <name>bookkeeper-server-compat410</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server</artifactId>\n+      <version>4.1.0</version>\n+    </dependency>\n+  </dependencies>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>1.5</version>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <createDependencyReducedPom>false</createDependencyReducedPom>\n+              <artifactSet>\n+                <includes>\n+                  <include>org.apache.*:*</include>\n+                  <include>org.jboss.*:*</include>\n+                  <include>commons-*:*</include>\n+                </includes>\n+                <excludes>\n+                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n+                </excludes>\n+              </artifactSet>\n+              <relocations>\n+                <relocation>\n+                  <pattern>org.apache.commons</pattern>\n+                  <shadedPattern>org.apache.bk_v4_1_0.commons</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.bookkeeper</pattern>\n+                  <shadedPattern>org.apache.bk_v4_1_0.bookkeeper</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.zookeeper</pattern>\n+                  <shadedPattern>org.apache.bk_v4_1_0.bookkeeper</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.jute</pattern>\n+                  <shadedPattern>org.apache.bk_v4_1_0.jute</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.jboss</pattern>\n+                  <shadedPattern>org.jboss.bk_v4_1_0</shadedPattern>\n+                </relocation>\n+              </relocations>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>\n\\ No newline at end of file"},{"sha":"248852e0905e95bb8f1f1a06f18bc1f5246cc5ef","filename":"compat-deps/pom.xml","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/18728877881a23d2639eb650d47b7c41bbccd9ca/compat-deps/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/18728877881a23d2639eb650d47b7c41bbccd9ca/compat-deps/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/pom.xml?ref=18728877881a23d2639eb650d47b7c41bbccd9ca","patch":"@@ -0,0 +1,41 @@\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n+                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>bookkeeper</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.2.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.apache.bookkeeper</groupId>\n+  <version>4.2.0-SNAPSHOT</version>\n+  <artifactId>compat-deps</artifactId>\n+  <packaging>pom</packaging>\n+  <name>compability dependencies</name>\n+  <modules>\n+    <module>bookkeeper-server-compat-4.0.0</module>\n+    <module>bookkeeper-server-compat-4.1.0</module>\n+  </modules>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+  </properties>\n+</project>\n\\ No newline at end of file"},{"sha":"9cea6ae65b952e243c47876fc31270edff9f902f","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/18728877881a23d2639eb650d47b7c41bbccd9ca/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/18728877881a23d2639eb650d47b7c41bbccd9ca/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=18728877881a23d2639eb650d47b7c41bbccd9ca","patch":"@@ -31,6 +31,7 @@\n   <packaging>pom</packaging>\n   <name>bookkeeper</name>\n   <modules>\n+    <module>compat-deps</module>\n     <module>hedwig-client</module>\n     <module>hedwig-server</module>\n     <module>hedwig-protocol</module>"}]}

