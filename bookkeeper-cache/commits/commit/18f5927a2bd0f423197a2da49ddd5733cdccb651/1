{"sha":"18f5927a2bd0f423197a2da49ddd5733cdccb651","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxOGY1OTI3YTJiZDBmNDIzMTk3YTJkYTQ5ZGRkNTczM2NkY2NiNjUx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-04T13:44:08Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-04T13:44:08Z"},"message":"BOOKKEEPER-320: Let hedwig cpp client could publish messages using Message object instead of string. (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1357264 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"87f14c924434e07b9f90bd769defa8c42f077856","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/87f14c924434e07b9f90bd769defa8c42f077856"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/18f5927a2bd0f423197a2da49ddd5733cdccb651","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/18f5927a2bd0f423197a2da49ddd5733cdccb651","html_url":"https://github.com/apache/bookkeeper/commit/18f5927a2bd0f423197a2da49ddd5733cdccb651","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/18f5927a2bd0f423197a2da49ddd5733cdccb651/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2","url":"https://api.github.com/repos/apache/bookkeeper/commits/de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2","html_url":"https://github.com/apache/bookkeeper/commit/de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2"}],"stats":{"total":62,"additions":53,"deletions":9},"files":[{"sha":"c36a9efea9347c0a98e4716f84ae4b6d3d34b348","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/18f5927a2bd0f423197a2da49ddd5733cdccb651/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/18f5927a2bd0f423197a2da49ddd5733cdccb651/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=18f5927a2bd0f423197a2da49ddd5733cdccb651","patch":"@@ -34,6 +34,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)\n \n+        BOOKKEEPER-320: Let hedwig cpp client could publish messages using Message object instead of string. (jiannan via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)"},{"sha":"b5f413eeb66a8873fb6ce70481e4f8980347213a","filename":"hedwig-client/src/main/cpp/inc/hedwig/publish.h","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/inc/hedwig/publish.h","raw_url":"https://github.com/apache/bookkeeper/raw/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/inc/hedwig/publish.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/publish.h?ref=18f5927a2bd0f423197a2da49ddd5733cdccb651","patch":"@@ -40,6 +40,8 @@ namespace Hedwig {\n     */\n     virtual void publish(const std::string& topic, const std::string& message) = 0;\n     \n+    virtual void publish(const std::string& topic, const Message& message) = 0;\n+\n     /** \n \tAsynchronously publish message for topic. \n \t\n@@ -54,6 +56,8 @@ namespace Hedwig {\n     */\n     virtual void asyncPublish(const std::string& topic, const std::string& message, const OperationCallbackPtr& callback) = 0;\n     \n+    virtual void asyncPublish(const std::string& topic, const Message& message, const OperationCallbackPtr& callback) = 0;\n+\n     virtual ~Publisher() {}\n   };\n };"},{"sha":"5e8d6bea7a67ad9a8fd929baf7a45521d161e0ec","filename":"hedwig-client/src/main/cpp/lib/data.cpp","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/lib/data.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/lib/data.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.cpp?ref=18f5927a2bd0f423197a2da49ddd5733cdccb651","patch":"@@ -28,12 +28,12 @@ static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n \n using namespace Hedwig;\n \n-PubSubDataPtr PubSubData::forPublishRequest(long txnid, const std::string& topic, const std::string& body, const OperationCallbackPtr& callback) {\n+PubSubDataPtr PubSubData::forPublishRequest(long txnid, const std::string& topic, const Message& body, const OperationCallbackPtr& callback) {\n   PubSubDataPtr ptr(new PubSubData());\n   ptr->type = PUBLISH;\n   ptr->txnid = txnid;\n   ptr->topic = topic;\n-  ptr->body = body;\n+  ptr->body.CopyFrom(body);\n   ptr->callback = callback;\n   return ptr;\n }\n@@ -87,7 +87,7 @@ const std::string& PubSubData::getTopic() const {\n   return topic;\n }\n \n-const std::string& PubSubData::getBody() const {\n+const Message& PubSubData::getBody() const {\n   return body;\n }\n \n@@ -110,7 +110,7 @@ const PubSubRequestPtr PubSubData::getRequest() {\n \n     Hedwig::PublishRequest* pubreq = request->mutable_publishrequest();\n     Hedwig::Message* msg = pubreq->mutable_msg();\n-    msg->set_body(body);\n+    msg->CopyFrom(body);\n   } else if (type == SUBSCRIBE) {\n     LOG4CXX_DEBUG(logger, \"Creating subscribe request\");\n "},{"sha":"6455c1382280420ce556b76d4403944beb28a0fc","filename":"hedwig-client/src/main/cpp/lib/data.h","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/lib/data.h","raw_url":"https://github.com/apache/bookkeeper/raw/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/lib/data.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.h?ref=18f5927a2bd0f423197a2da49ddd5733cdccb651","patch":"@@ -61,7 +61,7 @@ namespace Hedwig {\n   class PubSubData {\n   public:\n     // to be used for publish\n-    static PubSubDataPtr forPublishRequest(long txnid, const std::string& topic, const std::string& body, const OperationCallbackPtr& callback);\n+    static PubSubDataPtr forPublishRequest(long txnid, const std::string& topic, const Message& body, const OperationCallbackPtr& callback);\n     static PubSubDataPtr forSubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic,\n \t\t\t\t\t     const OperationCallbackPtr& callback, const SubscriptionOptions& options);\n     static PubSubDataPtr forUnsubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic, const OperationCallbackPtr& callback);\n@@ -73,7 +73,7 @@ namespace Hedwig {\n     long getTxnId() const;\n     const std::string& getSubscriberId() const;\n     const std::string& getTopic() const;\n-    const std::string& getBody() const;\n+    const Message& getBody() const;\n     const MessageSeqId getMessageSeqId() const;\n \n     void setShouldClaim(bool shouldClaim);\n@@ -95,7 +95,7 @@ namespace Hedwig {\n     long txnid;\n     std::string subscriberid;\n     std::string topic;\n-    std::string body;\n+    Message body;\n     bool shouldClaim;\n     int messageBound;\n     OperationCallbackPtr callback;"},{"sha":"a0557a47a35e0dc07d9aac5f64ee84a9fa6de6d5","filename":"hedwig-client/src/main/cpp/lib/publisherimpl.cpp","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/publisherimpl.cpp?ref=18f5927a2bd0f423197a2da49ddd5733cdccb651","patch":"@@ -44,7 +44,7 @@ PublisherImpl::PublisherImpl(const ClientImplPtr& client)\n   : client(client) {\n }\n \n-void PublisherImpl::publish(const std::string& topic, const std::string& message) {\n+void PublisherImpl::publish(const std::string& topic, const Message& message) {\n   SyncOperationCallback* cb = new SyncOperationCallback(client->getConfiguration().getInt(Configuration::SYNC_REQUEST_TIMEOUT, \n \t\t\t\t\t\t\t\t\t\t\t  DEFAULT_SYNC_REQUEST_TIMEOUT));\n   OperationCallbackPtr callback(cb);\n@@ -54,14 +54,26 @@ void PublisherImpl::publish(const std::string& topic, const std::string& message\n   cb->throwExceptionIfNeeded();  \n }\n \n-void PublisherImpl::asyncPublish(const std::string& topic, const std::string& message, const OperationCallbackPtr& callback) {\n+void PublisherImpl::publish(const std::string& topic, const std::string& message) {\n+  Message msg;\n+  msg.set_body(message);\n+  publish(topic, msg);\n+}\n+\n+void PublisherImpl::asyncPublish(const std::string& topic, const Message& message, const OperationCallbackPtr& callback) {\n   // use release after callback to release the channel after the callback is called\n   PubSubDataPtr data = PubSubData::forPublishRequest(client->counter().next(), topic, message, callback);\n   \n   DuplexChannelPtr channel = client->getChannel(topic);\n   doPublish(channel, data);\n }\n \n+void PublisherImpl::asyncPublish(const std::string& topic, const std::string& message, const OperationCallbackPtr& callback) {\n+  Message msg;\n+  msg.set_body(message);\n+  asyncPublish(topic, msg, callback);\n+}\n+\n void PublisherImpl::doPublish(const DuplexChannelPtr& channel, const PubSubDataPtr& data) {\n   channel->storeTransaction(data);\n   "},{"sha":"2913fee9db76b339f0eddd7e1e3aeaf0a5728b4a","filename":"hedwig-client/src/main/cpp/lib/publisherimpl.h","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/lib/publisherimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/lib/publisherimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/publisherimpl.h?ref=18f5927a2bd0f423197a2da49ddd5733cdccb651","patch":"@@ -39,7 +39,10 @@ namespace Hedwig {\n     PublisherImpl(const ClientImplPtr& client);\n \n     void publish(const std::string& topic, const std::string& message);\n+    void publish(const std::string& topic, const Message& message);\n+\n     void asyncPublish(const std::string& topic, const std::string& message, const OperationCallbackPtr& callback);\n+    void asyncPublish(const std::string& topic, const Message& message, const OperationCallbackPtr& callback);\n     \n     void messageHandler(const PubSubResponsePtr& m, const PubSubDataPtr& txn);\n "},{"sha":"725cf70213b7e5b626e379bae10825fef7be296a","filename":"hedwig-client/src/main/cpp/test/publishtest.cpp","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/test/publishtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/18f5927a2bd0f423197a2da49ddd5733cdccb651/hedwig-client/src/main/cpp/test/publishtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/publishtest.cpp?ref=18f5927a2bd0f423197a2da49ddd5733cdccb651","patch":"@@ -42,6 +42,7 @@ class PublishTestSuite : public CppUnit::TestFixture {\n   CPPUNIT_TEST_SUITE( PublishTestSuite );\n   CPPUNIT_TEST(testSyncPublish);\n   CPPUNIT_TEST(testAsyncPublish);\n+  CPPUNIT_TEST(testPublishByMessage);\n   CPPUNIT_TEST(testMultipleAsyncPublish);\n   //  CPPUNIT_TEST(simplePublish);\n   //CPPUNIT_TEST(simplePublishAndSubscribe);\n@@ -63,6 +64,28 @@ class PublishTestSuite : public CppUnit::TestFixture {\n   {\n   }\n \n+  void testPublishByMessage() {\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n+    Hedwig::Client* client = new Hedwig::Client(*conf);\n+    Hedwig::Publisher& pub = client->getPublisher();\n+\n+    Hedwig::Message syncMsg;\n+    syncMsg.set_body(\"sync publish by Message\");\n+    pub.publish(\"testTopic\", syncMsg);\n+\n+    SimpleWaitCondition* cond = new SimpleWaitCondition();\n+    Hedwig::OperationCallbackPtr testcb(new TestCallback(cond));\n+    Hedwig::Message asyncMsg;\n+    asyncMsg.set_body(\"async publish by Message\");\n+    pub.asyncPublish(\"testTopic\", asyncMsg, testcb);\n+    cond->wait();\n+    CPPUNIT_ASSERT(cond->wasSuccess());\n+    delete cond;\n+\n+    delete client;\n+    delete conf;\n+  }\n+\n   void testSyncPublish() {\n     Hedwig::Configuration* conf = new TestServerConfiguration();\n     "}]}

