{"sha":"19b821c63b91293960041bca7b031614a109a7b8","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxOWI4MjFjNjNiOTEyOTM5NjAwNDFiY2E3YjAzMTYxNGExMDlhN2I4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-09T12:04:45Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-09T12:04:45Z"},"message":"BOOKKEEPER-629: Support hostname based ledger metadata to help users to change IP with existing installation (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1593518 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8bba00d437cf64434f54ebea8b1508c6da8176f3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8bba00d437cf64434f54ebea8b1508c6da8176f3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/19b821c63b91293960041bca7b031614a109a7b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/19b821c63b91293960041bca7b031614a109a7b8","html_url":"https://github.com/apache/bookkeeper/commit/19b821c63b91293960041bca7b031614a109a7b8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/19b821c63b91293960041bca7b031614a109a7b8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e824ac2691f4e86ac5ced675cd3ffb66f00e059a","url":"https://api.github.com/repos/apache/bookkeeper/commits/e824ac2691f4e86ac5ced675cd3ffb66f00e059a","html_url":"https://github.com/apache/bookkeeper/commit/e824ac2691f4e86ac5ced675cd3ffb66f00e059a"}],"stats":{"total":459,"additions":443,"deletions":16},"files":[{"sha":"5605870112d1ed5c0abeca033953fa03446a1107","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -186,6 +186,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-744: Run the auditor bookie check periodically (ivank)\n \n+        BOOKKEEPER-629: Support hostname based ledger metadata to help users to change IP with existing installation (rakeshr via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"383719b95b31be973bb6636c9dd056cdf32938de","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/conf/bk_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/conf/bk_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bk_server.conf?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -266,3 +266,9 @@ zkTimeout=10000\n \n # The number of bytes used as capacity for the write buffer. Default is 64KB.\n # writeBufferSizeBytes=65536\n+\n+# Whether the bookie should use its hostname to register with the\n+# co-ordination service(eg: zookeeper service).\n+# When false, bookie will use its ipaddress for the registration.\n+# Defaults to false.\n+#useHostNameAsBookieID=false"},{"sha":"89db6e0dfc22bbb932793a269efddf18c0589453","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":24,"deletions":9,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -287,8 +287,22 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n             return;\n         }\n         try {\n-            String instanceId = getInstanceId(zk);\n             boolean newEnv = false;\n+            List<File> missedCookieDirs = new ArrayList<File>();\n+            Cookie journalCookie = null;\n+            // try to read cookie from journal directory. \n+            try {\n+                journalCookie = Cookie.readFromDirectory(journalDirectory);\n+                if (journalCookie.isBookieHostCreatedFromIp()) {\n+                    conf.setUseHostNameAsBookieID(false);\n+                } else {\n+                    conf.setUseHostNameAsBookieID(true);\n+                }\n+            } catch (FileNotFoundException fnf) {\n+                newEnv = true;\n+                missedCookieDirs.add(journalDirectory);\n+            }\n+            String instanceId = getInstanceId(zk);\n             Cookie masterCookie = Cookie.generateCookie(conf);\n             if (null != instanceId) {\n                 masterCookie.setInstanceId(instanceId);\n@@ -297,17 +311,14 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n                 Cookie zkCookie = Cookie.readFromZooKeeper(zk, conf);\n                 masterCookie.verify(zkCookie);\n             } catch (KeeperException.NoNodeException nne) {\n-                newEnv = true;\n+                // can occur in cases:\n+                // 1) new environment or \n+                // 2) done only metadata format and started bookie server.\n             }\n-            List<File> missedCookieDirs = new ArrayList<File>();\n             checkDirectoryStructure(journalDirectory);\n \n-            // try to read cookie from journal directory\n-            try {\n-                Cookie journalCookie = Cookie.readFromDirectory(journalDirectory);\n+            if(!newEnv){\n                 journalCookie.verify(masterCookie);\n-            } catch (FileNotFoundException fnf) {\n-                missedCookieDirs.add(journalDirectory);\n             }\n             for (File dir : allLedgerDirs) {\n                 checkDirectoryStructure(dir);\n@@ -359,8 +370,12 @@ public static BookieSocketAddress getBookieAddress(ServerConfiguration conf)\n             iface = \"default\";\n         }\n         InetSocketAddress inetAddr = new InetSocketAddress(DNS.getDefaultHost(iface), conf.getBookiePort());\n+        String hostAddress = inetAddr.getAddress().getHostAddress();\n+        if (conf.getUseHostNameAsBookieID()) {\n+            hostAddress = inetAddr.getAddress().getCanonicalHostName();\n+        }\n         BookieSocketAddress addr =\n-            new BookieSocketAddress(inetAddr.getAddress().getHostAddress(), conf.getBookiePort());\n+                new BookieSocketAddress(hostAddress, conf.getBookiePort());\n         if (addr.getSocketAddress().getAddress().isLoopbackAddress()\n             && !conf.getAllowLoopback()) {\n             throw new UnknownHostException(\"Trying to listen on loopback address, \""},{"sha":"95591c7c1155833180986438410c70667d5317fa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -32,6 +32,7 @@\n import java.io.InputStreamReader;\n import java.io.OutputStreamWriter;\n import java.io.StringReader;\n+import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -256,4 +257,29 @@ private static String getZkPath(ServerConfiguration conf)\n                 + BookKeeperConstants.COOKIE_NODE;\n         return bookieCookiePath + \"/\" + Bookie.getBookieAddress(conf);\n     }\n+\n+    /**\n+     * Check whether the 'bookieHost' was created using a hostname or an IP\n+     * address. Represent as 'hostname/IPaddress' if the InetSocketAddress was\n+     * created using hostname. Represent as '/IPaddress' if the\n+     * InetSocketAddress was created using an IPaddress\n+     * \n+     * @return true if the 'bookieHost' was created using an IP address, false\n+     *         if the 'bookieHost' was created using a hostname\n+     */\n+    public boolean isBookieHostCreatedFromIp() throws IOException {\n+        String parts[] = bookieHost.split(\":\");\n+        if (parts.length != 2) {\n+            throw new IOException(bookieHost + \" does not have the form host:port\");\n+        }\n+        int port;\n+        try {\n+            port = Integer.parseInt(parts[1]);\n+        } catch (NumberFormatException e) {\n+            throw new IOException(bookieHost + \" does not have the form host:port\");\n+        }\n+\n+        InetSocketAddress addr = new InetSocketAddress(parts[0], port);\n+        return addr.toString().startsWith(\"/\");\n+    }\n }"},{"sha":"05279b3bafd393ebbd7df680e91324103ffd7dad","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -95,6 +95,9 @@\n \n     protected final static String READ_BUFFER_SIZE = \"readBufferSizeBytes\";\n     protected final static String WRITE_BUFFER_SIZE = \"writeBufferSizeBytes\";\n+    // Whether the bookie should use its hostname or ipaddress for the\n+    // registration.\n+    protected final static String USE_HOST_NAME_AS_BOOKIE_ID = \"useHostNameAsBookieID\";\n \n     protected final static String SORTED_LEDGER_STORAGE_ENABLED = \"sortedLedgerStorageEnabled\";\n     protected final static String SKIP_LIST_SIZE_LIMIT = \"skipListSizeLimit\";\n@@ -1298,4 +1301,28 @@ public void validate() throws ConfigurationException {\n             throw new ConfigurationException(\"Invalid preallocation size : \" + getJournalPreAllocSizeMB() + \" MB\");\n         }\n     }\n+\n+    /**\n+     * Get whether bookie is using hostname for registration and in ledger\n+     * metadata. Defaults to false.\n+     * \n+     * @return true, then bookie will be registered with its hostname and\n+     *         hostname will be used in ledger metadata. Otherwise bookie will\n+     *         use its ipaddress\n+     */\n+    public boolean getUseHostNameAsBookieID() {\n+        return getBoolean(USE_HOST_NAME_AS_BOOKIE_ID, false);\n+    }\n+\n+    /**\n+     * Configure the bookie to use its hostname to register with the\n+     * co-ordination service(eg: zookeeper) and in ledger metadata\n+     * \n+     * @see #getUseHostNameAsBookieID\n+     * @param useHostName\n+     *            whether to use hostname for registration and in ledgermetadata\n+     */\n+    public void setUseHostNameAsBookieID(boolean useHostName) {\n+        setProperty(USE_HOST_NAME_AS_BOOKIE_ID, useHostName);\n+    }\n }"},{"sha":"2e51e504ee7a1213de5060c0313ff127f7f04a20","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -356,4 +356,75 @@ public void testV1data() throws Exception {\n             assertTrue(\"wrong exception\", ice.getCause().getMessage().contains(\"upgrade needed\"));\n         }\n     }\n+\n+    /**\n+     * Test restart bookie with useHostNameAsBookieID=true, which had cookie generated\n+     * with ipaddress.\n+     */\n+    @Test(timeout = 60000)\n+    public void testRestartWithHostNameAsBookieID() throws Exception {\n+        String[] ledgerDirs = new String[] { newDirectory(), newDirectory(),\n+                newDirectory() };\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = new ServerConfiguration()\n+                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setJournalDirName(journalDir).setLedgerDirNames(ledgerDirs)\n+                .setBookiePort(bookiePort);\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+\n+        conf.setUseHostNameAsBookieID(true);\n+        b = new Bookie(conf);\n+        b.start();\n+        assertTrue(\"Fails to recognize bookie which was started with IPAddr as ID\", !conf.getUseHostNameAsBookieID());\n+        b.shutdown();\n+    }\n+\n+    /**\n+     * Test restart bookie with useHostNameAsBookieID=false, which had cookie generated\n+     * with hostname.\n+     */\n+    @Test(timeout = 60000)\n+    public void testRestartWithIpAddressAsBookieID() throws Exception {\n+        String[] ledgerDirs = new String[] { newDirectory(), newDirectory(),\n+                newDirectory() };\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = new ServerConfiguration()\n+                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setJournalDirName(journalDir).setLedgerDirNames(ledgerDirs)\n+                .setBookiePort(bookiePort);\n+        conf.setUseHostNameAsBookieID(true);\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+\n+        conf.setUseHostNameAsBookieID(false);\n+        b = new Bookie(conf);\n+        b.start();\n+        assertTrue(\"Fails to recognize bookie which was started with HostName as ID\", conf.getUseHostNameAsBookieID());\n+        b.shutdown();\n+    }\n+\n+    /**\n+     * Test old version bookie starts with the cookies generated by new version\n+     * (with useHostNameAsBookieID=true)\n+     */\n+    @Test(timeout = 60000)\n+    public void testV2dataWithHostNameAsBookieID() throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration()\n+                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setJournalDirName(newV2JournalDirectory())\n+                .setLedgerDirNames(new String[] { newV2LedgerDirectory() })\n+                .setBookiePort(bookiePort);\n+        try {\n+            conf.setUseHostNameAsBookieID(true);\n+            new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+            assertTrue(\"wrong exception\",\n+                    ice.getCause().getMessage().contains(\"upgrade needed\"));\n+        }\n+    }\n }"},{"sha":"3b66da80c23f333f42dfba7440899b5dcfbffde3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","status":"modified","additions":162,"deletions":0,"changes":162,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -28,8 +28,10 @@\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.LedgerHandleAdapter;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n@@ -387,6 +389,165 @@ public void testEmptyLedgerLosesQuorumEventually() throws Exception {\n         bkc.openLedger(lh.getId(), DigestType.CRC32, PASSWD);\n     }\n \n+    /**\n+     * Test verifies bookie recovery, the host (recorded via ipaddress in\n+     * ledgermetadata)\n+     */\n+    @Test(timeout = 90000)\n+    public void testLedgerMetadataContainsIpAddressAsBookieID()\n+            throws Exception {\n+        stopBKCluster();\n+        bkc = new BookKeeperTestClient(baseClientConf);\n+        // start bookie with useHostNameAsBookieID=false, as old bookie\n+        ServerConfiguration serverConf1 = newServerConfiguration();\n+        // start 2 more bookies with useHostNameAsBookieID=true\n+        ServerConfiguration serverConf2 = newServerConfiguration();\n+        serverConf2.setUseHostNameAsBookieID(true);\n+        ServerConfiguration serverConf3 = newServerConfiguration();\n+        serverConf3.setUseHostNameAsBookieID(true);\n+        bsConfs.add(serverConf1);\n+        bsConfs.add(serverConf2);\n+        bsConfs.add(serverConf3);\n+        bs.add(startBookie(serverConf1));\n+        bs.add(startBookie(serverConf2));\n+        bs.add(startBookie(serverConf3));\n+\n+        List<LedgerHandle> listOfLedgerHandle = createLedgersAndAddEntries(1, 5);\n+        LedgerHandle lh = listOfLedgerHandle.get(0);\n+        int ledgerReplicaIndex = 0;\n+        final SortedMap<Long, ArrayList<BookieSocketAddress>> ensembles = LedgerHandleAdapter\n+                .getLedgerMetadata(lh).getEnsembles();\n+        final ArrayList<BookieSocketAddress> bkAddresses = ensembles.get(0L);\n+        BookieSocketAddress replicaToKillAddr = bkAddresses.get(0);\n+        for (BookieSocketAddress bookieSocketAddress : bkAddresses) {\n+            if(!isCreatedFromIp(bookieSocketAddress)){\n+                replicaToKillAddr = bookieSocketAddress;\n+                LOG.info(\"Kill bookie which has registered using hostname\");\n+                break;\n+            }\n+        }\n+\n+        final String urLedgerZNode = getUrLedgerZNode(lh);\n+        ledgerReplicaIndex = getReplicaIndexInLedger(lh, replicaToKillAddr);\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+        assertNull(\"UrLedger already exists!\",\n+                watchUrLedgerNode(urLedgerZNode, latch));\n+\n+        LOG.info(\"Killing Bookie :\" + replicaToKillAddr);\n+        killBookie(replicaToKillAddr);\n+\n+        // waiting to publish urLedger znode by Auditor\n+        latch.await();\n+        latch = new CountDownLatch(1);\n+        LOG.info(\"Watching on urLedgerPath:\" + urLedgerZNode\n+                + \" to know the status of rereplication process\");\n+        assertNotNull(\"UrLedger doesn't exists!\",\n+                watchUrLedgerNode(urLedgerZNode, latch));\n+\n+        // starting the replication service, so that he will be able to act as\n+        // target bookie\n+        ServerConfiguration serverConf = newServerConfiguration();\n+        serverConf.setUseHostNameAsBookieID(false);\n+        bsConfs.add(serverConf);\n+        bs.add(startBookie(serverConf));\n+\n+        int newBookieIndex = bs.size() - 1;\n+        BookieServer newBookieServer = bs.get(newBookieIndex);\n+\n+        LOG.debug(\"Waiting to finish the replication of failed bookie : \"\n+                + replicaToKillAddr);\n+        latch.await();\n+\n+        // grace period to update the urledger metadata in zookeeper\n+        LOG.info(\"Waiting to update the urledger metadata in zookeeper\");\n+\n+        verifyLedgerEnsembleMetadataAfterReplication(newBookieServer,\n+                listOfLedgerHandle.get(0), ledgerReplicaIndex);\n+\n+    }\n+\n+    /**\n+     * Test verifies bookie recovery, the host (recorded via useHostName in\n+     * ledgermetadata)\n+     */\n+    @Test(timeout = 90000)\n+    public void testLedgerMetadataContainsHostNameAsBookieID()\n+            throws Exception {\n+        stopBKCluster();\n+\n+        bkc = new BookKeeperTestClient(baseClientConf);\n+        // start bookie with useHostNameAsBookieID=false, as old bookie\n+        ServerConfiguration serverConf1 = newServerConfiguration();\n+        // start 2 more bookies with useHostNameAsBookieID=true\n+        ServerConfiguration serverConf2 = newServerConfiguration();\n+        serverConf2.setUseHostNameAsBookieID(true);\n+        ServerConfiguration serverConf3 = newServerConfiguration();\n+        serverConf3.setUseHostNameAsBookieID(true);\n+        bsConfs.add(serverConf1);\n+        bsConfs.add(serverConf2);\n+        bsConfs.add(serverConf3);\n+        bs.add(startBookie(serverConf1));\n+        bs.add(startBookie(serverConf2));\n+        bs.add(startBookie(serverConf3));\n+\n+        List<LedgerHandle> listOfLedgerHandle = createLedgersAndAddEntries(1, 5);\n+        LedgerHandle lh = listOfLedgerHandle.get(0);\n+        int ledgerReplicaIndex = 0;\n+        final SortedMap<Long, ArrayList<BookieSocketAddress>> ensembles = LedgerHandleAdapter\n+                .getLedgerMetadata(lh).getEnsembles();\n+        final ArrayList<BookieSocketAddress> bkAddresses = ensembles.get(0L);\n+        BookieSocketAddress replicaToKillAddr = bkAddresses.get(0);\n+        for (BookieSocketAddress bookieSocketAddress : bkAddresses) {\n+            if (isCreatedFromIp(bookieSocketAddress)) {\n+                replicaToKillAddr = bookieSocketAddress;\n+                LOG.info(\"Kill bookie which has registered using ipaddress\");\n+                break;\n+            }\n+        }\n+\n+        final String urLedgerZNode = getUrLedgerZNode(lh);\n+        ledgerReplicaIndex = getReplicaIndexInLedger(lh, replicaToKillAddr);\n+\n+        CountDownLatch latch = new CountDownLatch(1);\n+        assertNull(\"UrLedger already exists!\",\n+                watchUrLedgerNode(urLedgerZNode, latch));\n+\n+        LOG.info(\"Killing Bookie :\" + replicaToKillAddr);\n+        killBookie(replicaToKillAddr);\n+\n+        // waiting to publish urLedger znode by Auditor\n+        latch.await();\n+        latch = new CountDownLatch(1);\n+        LOG.info(\"Watching on urLedgerPath:\" + urLedgerZNode\n+                + \" to know the status of rereplication process\");\n+        assertNotNull(\"UrLedger doesn't exists!\",\n+                watchUrLedgerNode(urLedgerZNode, latch));\n+\n+        // creates new bkclient\n+        bkc = new BookKeeperTestClient(baseClientConf);\n+        // starting the replication service, so that he will be able to act as\n+        // target bookie\n+        ServerConfiguration serverConf = newServerConfiguration();\n+        serverConf.setUseHostNameAsBookieID(true);\n+        bsConfs.add(serverConf);\n+        bs.add(startBookie(serverConf));\n+\n+        int newBookieIndex = bs.size() - 1;\n+        BookieServer newBookieServer = bs.get(newBookieIndex);\n+\n+        LOG.debug(\"Waiting to finish the replication of failed bookie : \"\n+                + replicaToKillAddr);\n+        latch.await();\n+\n+        // grace period to update the urledger metadata in zookeeper\n+        LOG.info(\"Waiting to update the urledger metadata in zookeeper\");\n+\n+        verifyLedgerEnsembleMetadataAfterReplication(newBookieServer,\n+                listOfLedgerHandle.get(0), ledgerReplicaIndex);\n+\n+    }\n+\n     private int getReplicaIndexInLedger(LedgerHandle lh,\n  BookieSocketAddress replicaToKill) {\n         SortedMap<Long, ArrayList<BookieSocketAddress>> ensembles = LedgerHandleAdapter\n@@ -413,6 +574,7 @@ private void verifyLedgerEnsembleMetadataAfterReplication(\n         assertEquals(\"Rereplication has been failed and ledgerReplicaIndex :\"\n                 + ledgerReplicaIndex, newBookieServer.getLocalAddress(),\n                 inetSocketAddress);\n+        openLedger.close();\n     }\n \n     private void closeLedgers(List<LedgerHandle> listOfLedgerHandle)"},{"sha":"4197a06488196b95c5e3721fe3c1ffd9de257a99","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":27,"deletions":2,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -405,7 +405,12 @@ protected BookieServer startBookie(ServerConfiguration conf)\n         server.start();\n \n         int port = conf.getBookiePort();\n-        while(bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null) {\n+        String host = InetAddress.getLocalHost().getHostAddress();\n+        if (conf.getUseHostNameAsBookieID()) {\n+            host = InetAddress.getLocalHost().getCanonicalHostName();\n+        }\n+        while (bkc.getZkHandle().exists(\n+                \"/ledgers/available/\" + host + \":\" + port, false) == null) {\n             Thread.sleep(500);\n         }\n \n@@ -437,7 +442,12 @@ protected Bookie newBookie(ServerConfiguration conf) {\n         server.start();\n \n         int port = conf.getBookiePort();\n-        while(bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null) {\n+        String host = InetAddress.getLocalHost().getHostAddress();\n+        if (conf.getUseHostNameAsBookieID()) {\n+            host = InetAddress.getLocalHost().getCanonicalHostName();\n+        }\n+        while (bkc.getZkHandle().exists(\n+                \"/ledgers/available/\" + host + \":\" + port, false) == null) {\n             Thread.sleep(500);\n         }\n \n@@ -539,4 +549,19 @@ public Auditor getAuditor() throws Exception {\n         }\n         throw new Exception(\"No auditor found\");\n     }\n+\n+    /**\n+     * Check whether the InetSocketAddress was created using a hostname or an IP\n+     * address. Represent as 'hostname/IPaddress' if the InetSocketAddress was\n+     * created using hostname. Represent as '/IPaddress' if the\n+     * InetSocketAddress was created using an IPaddress\n+     * \n+     * @param addr\n+     *            inetaddress\n+     * @return true if the address was created using an IP address, false if the\n+     *         address was created using a hostname\n+     */\n+    public static boolean isCreatedFromIp(BookieSocketAddress addr) {\n+        return addr.getSocketAddress().toString().startsWith(\"/\");\n+    }\n }"},{"sha":"457d34157ea9d5372f5754c4f8e0ce0be93fd7de","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":98,"deletions":5,"changes":103,"blob_url":"https://github.com/apache/bookkeeper/blob/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/19b821c63b91293960041bca7b031614a109a7b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=19b821c63b91293960041bca7b031614a109a7b8","patch":"@@ -265,12 +265,14 @@ void close() throws Exception {\n         org.apache.bookkeeper.conf.ServerConfiguration conf;\n         org.apache.bookkeeper.proto.BookieServer server = null;\n \n-        ServerCurrent(File journalDir, File ledgerDir, int port) throws Exception {\n+        ServerCurrent(File journalDir, File ledgerDir, int port,\n+                boolean useHostNameAsBookieID) throws Exception {\n             conf = TestBKConfiguration.newServerConfiguration();\n             conf.setBookiePort(port);\n             conf.setZkServers(zkUtil.getZooKeeperConnectString());\n             conf.setJournalDirName(journalDir.getPath());\n             conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+            conf.setUseHostNameAsBookieID(useHostNameAsBookieID);\n         }\n \n         void start() throws Exception {\n@@ -381,7 +383,7 @@ public void testOldCookieAccessingNewCluster() throws Exception {\n \n         // Format the metadata using current version\n         ServerCurrent currentServer = new ServerCurrent(journalDir, ledgerDir,\n-                port);\n+                port, false);\n         BookKeeperAdmin.format(new ClientConfiguration(currentServer.conf),\n                 false, true);\n         // start the current version server with old version cookie\n@@ -400,7 +402,7 @@ public void testOldCookieAccessingNewCluster() throws Exception {\n                 Bookie.format(currentServer.conf, false, true));\n         try {\n             currentServer = null;\n-            currentServer = new ServerCurrent(journalDir, ledgerDir, port);\n+            currentServer = new ServerCurrent(journalDir, ledgerDir, port, false);\n             currentServer.start();\n         } finally {\n             if (null != currentServer) {\n@@ -447,7 +449,7 @@ public void testCompat400() throws Exception {\n         s400.stop();\n \n         // Start the current server, will require a filesystem upgrade\n-        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port);\n+        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port, false);\n         try {\n             scur.start();\n             fail(\"Shouldn't be able to start without directory upgrade\");\n@@ -531,7 +533,7 @@ public void testCompat410() throws Exception {\n         s410.stop();\n \n         // Start the current server, will not require a filesystem upgrade\n-        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port);\n+        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port, false);\n         scur.start();\n \n         // check that old client can read its old ledgers on new server\n@@ -615,4 +617,95 @@ public void testCompat410() throws Exception {\n \n         scur.stop();\n     }\n+\n+    /**\n+     * Test compatability between version 4.1.0 and the current version. - 4.1.0\n+     * server restarts with useHostNameAsBookieID=true. Read ledgers with old\n+     * and new clients\n+     */\n+    @Test(timeout = 60000)\n+    public void testCompat410ReadLedgerOnRestartedServer() throws Exception {\n+        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n+        journalDir.delete();\n+        journalDir.mkdir();\n+        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+\n+        int port = PortManager.nextFreePort();\n+        // start server, upgrade\n+        Server410 s410 = new Server410(journalDir, ledgerDir, port);\n+        s410.start();\n+\n+        Ledger410 l410 = Ledger410.newLedger();\n+        l410.write100();\n+        long oldLedgerId = l410.getId();\n+        l410.close();\n+\n+        // Check that current client can to write to old server\n+        LedgerCurrent lcur = LedgerCurrent.newLedger();\n+        lcur.write100();\n+        lcur.close();\n+\n+        s410.stop();\n+\n+        // Start the current server, will not require a filesystem upgrade\n+        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port,\n+                true);\n+        scur.start();\n+\n+        // check that old client can read its old ledgers on new server\n+        l410 = Ledger410.openLedger(oldLedgerId);\n+        assertEquals(100, l410.readAll());\n+        l410.close();\n+\n+        // Check that current client can read old ledgers on new server\n+        final LedgerCurrent curledger = LedgerCurrent.openLedger(lcur.getId());\n+        assertEquals(\"Failed to read entries!\", 100, curledger.readAll());\n+        curledger.close();\n+    }\n+\n+    /**\n+     * Test compatability between version 4.1.0 and the current version. - 4.1.0\n+     * server restarts with useHostNameAsBookieID=true. Write ledgers with old\n+     * and new clients\n+     */\n+    @Test(timeout = 60000)\n+    public void testCompat410WriteLedgerOnRestartedServer() throws Exception {\n+        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n+        journalDir.delete();\n+        journalDir.mkdir();\n+        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+\n+        int port = PortManager.nextFreePort();\n+        // start server, upgrade\n+        Server410 s410 = new Server410(journalDir, ledgerDir, port);\n+        s410.start();\n+        s410.stop();\n+\n+        // Start the current server, will not require a filesystem upgrade\n+        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port,\n+                true);\n+        scur.start();\n+\n+        // Check that current client can to write to server\n+        LedgerCurrent lcur = LedgerCurrent.newLedger();\n+        lcur.write100();\n+        lcur.close();\n+        final LedgerCurrent curledger = LedgerCurrent.openLedger(lcur.getId());\n+        assertEquals(\"Failed to read entries!\", 100, curledger.readAll());\n+\n+        // Check that current client can write to server\n+        Ledger410 l410 = Ledger410.newLedger();\n+        l410.write100();\n+        long oldLedgerId = l410.getId();\n+        l410.close();\n+\n+        // check that new client can read old ledgers on new server\n+        LedgerCurrent oldledger = LedgerCurrent.openLedger(oldLedgerId);\n+        assertEquals(\"Failed to read entries!\", 100, oldledger.readAll());\n+        oldledger.close();\n+    }\n }"}]}

