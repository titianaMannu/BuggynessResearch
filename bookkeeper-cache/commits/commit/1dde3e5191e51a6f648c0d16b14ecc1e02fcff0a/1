{"sha":"1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxZGRlM2U1MTkxZTUxYTZmNjQ4YzBkMTZiMTRlY2MxZTAyZmNmZjBh","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-05-26T17:16:45Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-05-26T17:16:45Z"},"message":"BOOKKEEPER-258: CompactionTest failed (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1342933 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4608596a0ad764637060c91115ea41a85a3fefd5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4608596a0ad764637060c91115ea41a85a3fefd5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","html_url":"https://github.com/apache/bookkeeper/commit/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"a1eac18799ddc640bd42e6c038a31e1e26769056","url":"https://api.github.com/repos/apache/bookkeeper/commits/a1eac18799ddc640bd42e6c038a31e1e26769056","html_url":"https://github.com/apache/bookkeeper/commit/a1eac18799ddc640bd42e6c038a31e1e26769056"}],"stats":{"total":69,"additions":62,"deletions":7},"files":[{"sha":"de16b1beea0db6a760b91b6dfa6a31a99a5bda95","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","patch":"@@ -116,6 +116,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-266: Review versioning documentation (ivank)\n \n+        BOOKKEEPER-258: CompactionTest failed (ivank via sijie)\n+\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)"},{"sha":"b4c35b8e6b986c3359170e9fbf6d45e14c7b85e3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","patch":"@@ -59,7 +59,7 @@\n     BookKeeper bk;\n     ScheduledExecutorService scheduler;\n \n-    Set<InetSocketAddress> knownBookies = new HashSet<InetSocketAddress>();\n+    HashSet<InetSocketAddress> knownBookies = new HashSet<InetSocketAddress>();\n \n     SafeRunnable reReadTask = new SafeRunnable() {\n         @Override\n@@ -103,7 +103,7 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n         }\n \n         // Read the bookie addresses into a set for efficient lookup\n-        Set<InetSocketAddress> newBookieAddrs = new HashSet<InetSocketAddress>();\n+        HashSet<InetSocketAddress> newBookieAddrs = new HashSet<InetSocketAddress>();\n         for (String bookieAddrString : children) {\n             InetSocketAddress bookieAddr;\n             try {\n@@ -115,9 +115,16 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n             newBookieAddrs.add(bookieAddr);\n         }\n \n+        HashSet<InetSocketAddress> deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n+        deadBookies.removeAll(newBookieAddrs);\n+\n         synchronized (this) {\n             knownBookies = newBookieAddrs;\n         }\n+\n+        if (bk.getBookieClient() != null) {\n+            bk.getBookieClient().closeClients(deadBookies);\n+        }\n     }\n \n     /**"},{"sha":"f45809de75788fafd85ccd096095ff9046130b26","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","patch":"@@ -21,6 +21,8 @@\n  *\n  */\n \n+import java.util.Set;\n+import java.util.HashSet;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -32,6 +34,8 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+import org.apache.bookkeeper.util.SafeRunnable;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n@@ -75,6 +79,28 @@ public PerChannelBookieClient lookupClient(InetSocketAddress addr) {\n         return channel;\n     }\n \n+    public void closeClients(Set<InetSocketAddress> addrs) {\n+        final HashSet<PerChannelBookieClient> clients = new HashSet<PerChannelBookieClient>();\n+        for (InetSocketAddress a : addrs) {\n+            PerChannelBookieClient c = channels.get(a);\n+            if (c != null) {\n+                clients.add(c);\n+            }\n+        }\n+\n+        if (clients.size() == 0) {\n+            return;\n+        }\n+        executor.submit(new SafeRunnable() {\n+                @Override\n+                public void safeRun() {\n+                    for (PerChannelBookieClient c : clients) {\n+                        c.close();\n+                    }\n+                }\n+            });\n+    }\n+\n     public void addEntry(final InetSocketAddress addr, final long ledgerId, final byte[] masterKey, final long entryId,\n             final ChannelBuffer toSend, final WriteCallback cb, final Object ctx, final int options) {\n         final PerChannelBookieClient client = lookupClient(addr);"},{"sha":"36ddcf053d11586babb4c0b4961a2e52dc83607f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":24,"deletions":4,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","patch":"@@ -468,10 +468,19 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws\n             return;\n         }\n         if (t instanceof ReadTimeoutException) {\n-            ctx.getChannel().disconnect();\n+            for (CompletionKey key : addCompletions.keySet()) {\n+                if (key.shouldTimeout()) {\n+                    errorOutAddKey(key);\n+                }\n+            }\n+            for (CompletionKey key : readCompletions.keySet()) {\n+                if (key.shouldTimeout()) {\n+                    errorOutReadKey(key);\n+                }\n+            }\n             return;\n         }\n- \n+\n         if (t instanceof IOException) {\n             // these are thrown when a bookie fails, logging them just pollutes\n             // the logs (the failure is logged from the listeners on the write\n@@ -641,15 +650,22 @@ public AddCompletion(WriteCallback cb, long size, Object ctx) {\n             this.ctx = ctx;\n         }\n     }\n-    \n+\n+    // visable for testing\n+    CompletionKey newCompletionKey(long ledgerId, long entryId) {\n+        return new CompletionKey(ledgerId, entryId);\n+    }\n+\n     // visable for testing\n-    static class CompletionKey {\n+    class CompletionKey {\n         long ledgerId;\n         long entryId;\n+        final long timeoutAt;\n \n         CompletionKey(long ledgerId, long entryId) {\n             this.ledgerId = ledgerId;\n             this.entryId = entryId;\n+            this.timeoutAt = System.currentTimeMillis() + (conf.getReadTimeout()*1000);\n         }\n \n         @Override\n@@ -669,6 +685,10 @@ public int hashCode() {\n         public String toString() {\n             return String.format(\"LedgerEntry(%d, %d)\", ledgerId, entryId);\n         }\n+\n+        public boolean shouldTimeout() {\n+            return this.timeoutAt <= System.currentTimeMillis();\n+        }\n     }\n \n }"},{"sha":"2dcad980f2da2aa46be1b1ce071f1996f9dfc880","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","raw_url":"https://github.com/apache/bookkeeper/raw/1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java?ref=1dde3e5191e51a6f648c0d16b14ecc1e02fcff0a","patch":"@@ -80,7 +80,7 @@ public void readEntryComplete(int rc, long ledgerId, long entryId, ChannelBuffer\n                     readLatch.countDown();\n                 }\n             };\n-        bc.readCompletions.put(new PerChannelBookieClient.CompletionKey(1, 1), \n+        bc.readCompletions.put(bc.newCompletionKey(1, 1),\n                                new PerChannelBookieClient.ReadCompletion(cb, this));\n         \n         int totalHeaderSize = 4 // for the length of the packet"}]}

