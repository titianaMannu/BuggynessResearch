{"sha":"22509a7a2c8acbd5cce182529169fc0057e55b0d","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyMjUwOWE3YTJjOGFjYmQ1Y2NlMTgyNTI5MTY5ZmMwMDU3ZTU1YjBk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-29T10:30:32Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-29T10:30:32Z"},"message":"BOOKKEEPER-663: HierarchicalLedgerManager iterator is missing some ranges and the last ledger in the range (mmerli via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1507997 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"821c7d41d5b45bdb665e8cc08665776be4179e03","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/821c7d41d5b45bdb665e8cc08665776be4179e03"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/22509a7a2c8acbd5cce182529169fc0057e55b0d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/22509a7a2c8acbd5cce182529169fc0057e55b0d","html_url":"https://github.com/apache/bookkeeper/commit/22509a7a2c8acbd5cce182529169fc0057e55b0d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/22509a7a2c8acbd5cce182529169fc0057e55b0d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d3328c5a78137de5416f3d8bc1f269f2ac648e6b","url":"https://api.github.com/repos/apache/bookkeeper/commits/d3328c5a78137de5416f3d8bc1f269f2ac648e6b","html_url":"https://github.com/apache/bookkeeper/commit/d3328c5a78137de5416f3d8bc1f269f2ac648e6b"}],"stats":{"total":96,"additions":70,"deletions":26},"files":[{"sha":"3bbcdef1f87e6f81cdabeacdb4f90464383929bc","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/22509a7a2c8acbd5cce182529169fc0057e55b0d/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/22509a7a2c8acbd5cce182529169fc0057e55b0d/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=22509a7a2c8acbd5cce182529169fc0057e55b0d","patch":"@@ -82,6 +82,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-642: Bookie returns incorrect exitcode, ExitCode.ZK_REG_FAIL is getting overridden (Rakesh via ivank)\n \n+        BOOKKEEPER-663: HierarchicalLedgerManager iterator is missing some ranges and the last ledger in the range (mmerli via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"de722e1a54b752edd8a29d16f3eb3816def13a9f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/22509a7a2c8acbd5cce182529169fc0057e55b0d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/22509a7a2c8acbd5cce182529169fc0057e55b0d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=22509a7a2c8acbd5cce182529169fc0057e55b0d","patch":"@@ -18,32 +18,30 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n-import java.util.TreeSet;\n-import java.util.SortedSet;\n import java.util.List;\n+import java.util.NavigableSet;\n import java.util.Set;\n+import java.util.TreeSet;\n \n-import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n-import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.util.ZkUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n+import org.apache.bookkeeper.versioning.Version;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.AsyncCallback.DataCallback;\n-import org.apache.zookeeper.AsyncCallback.VoidCallback;\n import org.apache.zookeeper.AsyncCallback.StatCallback;\n+import org.apache.zookeeper.AsyncCallback.VoidCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Abstract ledger manager based on zookeeper, which provides common methods such as query zk nodes.\n@@ -276,8 +274,8 @@ protected boolean isSpecialZnode(String znode) {\n      *          the prefix path of the ledger nodes\n      * @return ledger id hash set\n      */\n-    protected SortedSet<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n-        SortedSet<Long> zkActiveLedgers = new TreeSet<Long>();\n+    protected NavigableSet<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n+        NavigableSet<Long> zkActiveLedgers = new TreeSet<Long>();\n         for (String ledgerNode : ledgerNodes) {\n             if (isSpecialZnode(ledgerNode)) {\n                 continue;"},{"sha":"7d8b9f163cf7867ec4d08743acbbdd4e38e2844b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/22509a7a2c8acbd5cce182529169fc0057e55b0d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/22509a7a2c8acbd5cce182529169fc0057e55b0d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=22509a7a2c8acbd5cce182529169fc0057e55b0d","patch":"@@ -19,13 +19,14 @@\n  */\n \n import java.io.IOException;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.NavigableSet;\n import java.util.NoSuchElementException;\n-import java.util.SortedSet;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n@@ -40,7 +41,6 @@\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -402,6 +402,7 @@ private boolean nextL1Node() throws KeeperException, InterruptedException {\n                     continue;\n                 }\n                 List<String> l2Nodes = zk.getChildren(ledgerRootPath + \"/\" + curL1Nodes, null);\n+                Collections.sort(l2Nodes);\n                 l2NodesIter = l2Nodes.iterator();\n                 if (!l2NodesIter.hasNext()) {\n                     l2NodesIter = null;\n@@ -420,6 +421,8 @@ synchronized private void preload() throws IOException {\n                         hasMoreElements = nextL1Node();\n                     } else if (l2NodesIter == null || !l2NodesIter.hasNext()) {\n                         hasMoreElements = nextL1Node();\n+                    } else {\n+                        hasMoreElements = true;\n                     }\n                 } catch (KeeperException ke) {\n                     throw new IOException(\"Error preloading next range\", ke);\n@@ -475,13 +478,14 @@ LedgerRange getLedgerRangeByLevel(final String level1, final String level2)\n             } catch (InterruptedException e) {\n                 throw new IOException(\"Error when get child nodes from zk\", e);\n             }\n-            SortedSet<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n+            NavigableSet<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"All active ledgers from ZK for hash node \"\n                           + level1 + \"/\" + level2 + \" : \" + zkActiveLedgers);\n             }\n-            return new LedgerRange(zkActiveLedgers.subSet(getStartLedgerIdByLevel(level1, level2),\n-                                                          getEndLedgerIdByLevel(level1, level2)));\n+\n+            return new LedgerRange(zkActiveLedgers.subSet(getStartLedgerIdByLevel(level1, level2), true,\n+                                                          getEndLedgerIdByLevel(level1, level2), true));\n         }\n     }\n }"},{"sha":"125452d8ae87076fedf6895bd71eef8ea8175d90","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":46,"deletions":6,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/22509a7a2c8acbd5cce182529169fc0057e55b0d/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/22509a7a2c8acbd5cce182529169fc0057e55b0d/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java?ref=22509a7a2c8acbd5cce182529169fc0057e55b0d","patch":"@@ -23,30 +23,31 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.List;\n import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n import java.util.Random;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeSet;\n-import java.util.Queue;\n-import java.util.LinkedList;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.bookie.GarbageCollector;\n import org.apache.bookkeeper.bookie.ScanAndCompareGarbageCollector;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.versioning.Version;\n+import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.junit.Test;\n-\n /**\n  * Test garbage collection ledgers in ledger manager\n  */\n@@ -229,4 +230,43 @@ public void clean(long ledgerId) {\n         assertNotNull(\"Should have cleaned something\", cleaned.peek());\n         assertEquals(\"Should have cleaned first ledger\" + first, (long)first, (long)cleaned.poll());\n     }\n+\n+    @Test(timeout=60000)\n+    public void testGcLedgersNotLast() throws Exception {\n+        final SortedSet<Long> createdLedgers = Collections.synchronizedSortedSet(new TreeSet<Long>());\n+        final List<Long> cleaned = new ArrayList<Long>();\n+\n+        // Create enough ledgers to span over 4 ranges in the hierarchical ledger manager implementation\n+        final int numLedgers = 30001;\n+\n+        createLedgers(numLedgers, createdLedgers);\n+\n+        final GarbageCollector garbageCollector =\n+                new ScanAndCompareGarbageCollector(getLedgerManager(), activeLedgers);\n+        GarbageCollector.GarbageCleaner cleaner = new GarbageCollector.GarbageCleaner() {\n+                @Override\n+                public void clean(long ledgerId) {\n+                    LOG.info(\"Cleaned {}\", ledgerId);\n+                    cleaned.add(ledgerId);\n+                }\n+            };\n+\n+        SortedSet<Long> scannedLedgers = new TreeSet<Long>();\n+        LedgerRangeIterator iterator = getLedgerManager().getLedgerRanges();\n+        while (iterator.hasNext()) {\n+            LedgerRange ledgerRange = iterator.next();\n+            scannedLedgers.addAll(ledgerRange.getLedgers());\n+        }\n+\n+        assertEquals(createdLedgers, scannedLedgers);\n+\n+        garbageCollector.gc(cleaner);\n+        assertTrue(\"Should have cleaned nothing\", cleaned.isEmpty());\n+\n+        long first = createdLedgers.first();\n+        removeLedger(first);\n+        garbageCollector.gc(cleaner);\n+        assertEquals(\"Should have cleaned something\", 1, cleaned.size());\n+        assertEquals(\"Should have cleaned first ledger\" + first, (long)first, (long)cleaned.get(0));\n+    }\n }"}]}

