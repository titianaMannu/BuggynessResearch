{"sha":"235bc1fec4d60567d113202b44f6fb4c1616d1ce","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyMzViYzFmZWM0ZDYwNTY3ZDExMzIwMmI0NGY2ZmI0YzE2MTZkMWNl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-03-31T07:31:54Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-03-31T07:31:54Z"},"message":"BOOKKEEPER-198: replaying entries of deleted ledgers would exhaust ledger cache. (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1307732 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eff98c8549f9a2db3397f72b40e32b45c8955369","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/eff98c8549f9a2db3397f72b40e32b45c8955369"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/235bc1fec4d60567d113202b44f6fb4c1616d1ce","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/235bc1fec4d60567d113202b44f6fb4c1616d1ce","html_url":"https://github.com/apache/bookkeeper/commit/235bc1fec4d60567d113202b44f6fb4c1616d1ce","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/235bc1fec4d60567d113202b44f6fb4c1616d1ce/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"30c68b0bebff1e0a012dd81e8f05ebbf83b4ff5f","url":"https://api.github.com/repos/apache/bookkeeper/commits/30c68b0bebff1e0a012dd81e8f05ebbf83b4ff5f","html_url":"https://github.com/apache/bookkeeper/commit/30c68b0bebff1e0a012dd81e8f05ebbf83b4ff5f"}],"stats":{"total":99,"additions":86,"deletions":13},"files":[{"sha":"0968b4d3cdc9a780fb5e9234aa90441cadaf11d4","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/235bc1fec4d60567d113202b44f6fb4c1616d1ce/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/235bc1fec4d60567d113202b44f6fb4c1616d1ce/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=235bc1fec4d60567d113202b44f6fb4c1616d1ce","patch":"@@ -72,6 +72,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-193: Ledger is garbage collected by mistake. (sijie, ivank via sijie)\n \n+        BOOKKEEPER-198: replaying entries of deleted ledgers would exhaust ledger cache. (sijie)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"17c70f193ef6096dd9dc8ffe1d9593385b4ca580","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":36,"deletions":13,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/235bc1fec4d60567d113202b44f6fb4c1616d1ce/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/235bc1fec4d60567d113202b44f6fb4c1616d1ce/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=235bc1fec4d60567d113202b44f6fb4c1616d1ce","patch":"@@ -153,6 +153,40 @@ synchronized private LedgerEntryPage getLedgerEntryPage(Long ledger, Long firstE\n         }\n     }\n \n+    /** \n+     * Grab ledger entry page whose first entry is <code>pageEntry</code>.\n+     *\n+     * If the page doesn't existed before, we allocate a memory page.\n+     * Otherwise, we grab a clean page and read it from disk.\n+     *\n+     * @param ledger\n+     *          Ledger Id\n+     * @param pageEntry\n+     *          Start entry of this entry page.\n+     */\n+    private LedgerEntryPage grabLedgerEntryPage(long ledger, long pageEntry) throws IOException {\n+        LedgerEntryPage lep = grabCleanPage(ledger, pageEntry);\n+        try {\n+            // should update page before we put it into table\n+            // otherwise we would put an empty page in it\n+            updatePage(lep);\n+            synchronized(this) {\n+                putIntoTable(pages, lep);\n+            }   \n+        } catch (IOException ie) {\n+            // if we grab a clean page, but failed to update the page\n+            // we are exhuasting the count of ledger entry pages.\n+            // since this page will be never used, so we need to decrement\n+            // page count of ledger cache.\n+            lep.releasePage();\n+            synchronized (this) {\n+                --pageCount;\n+            }\n+            throw ie; \n+        }   \n+        return lep;\n+    }\n+\n     @Override\n     public void putEntryOffset(long ledger, long entry, long offset) throws IOException {\n         int offsetInPage = (int) (entry % entriesPerPage);\n@@ -161,12 +195,7 @@ public void putEntryOffset(long ledger, long entry, long offset) throws IOExcept\n         long pageEntry = entry-offsetInPage;\n         LedgerEntryPage lep = getLedgerEntryPage(ledger, pageEntry, false);\n         if (lep == null) {\n-            // find a free page\n-            lep = grabCleanPage(ledger, pageEntry);\n-            updatePage(lep);\n-            synchronized(this) {\n-                putIntoTable(pages, lep);\n-            }\n+            lep = grabLedgerEntryPage(ledger, pageEntry); \n         }\n         if (lep != null) {\n             lep.setOffset(offset, offsetInPage*8);\n@@ -184,13 +213,7 @@ public long getEntryOffset(long ledger, long entry) throws IOException {\n         LedgerEntryPage lep = getLedgerEntryPage(ledger, pageEntry, false);\n         try {\n             if (lep == null) {\n-                lep = grabCleanPage(ledger, pageEntry);\n-                // should update page before we put it into table\n-                // otherwise we would put an empty page in it\n-                updatePage(lep);\n-                synchronized(this) {\n-                    putIntoTable(pages, lep);\n-                }\n+                lep = grabLedgerEntryPage(ledger, pageEntry);\n             }\n             return lep.getOffset(offsetInPage*8);\n         } finally {"},{"sha":"52cf5146b142fb4fa5c934313256821d4aa70695","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/235bc1fec4d60567d113202b44f6fb4c1616d1ce/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/235bc1fec4d60567d113202b44f6fb4c1616d1ce/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=235bc1fec4d60567d113202b44f6fb4c1616d1ce","patch":"@@ -24,6 +24,7 @@\n import java.io.File;\n import java.io.IOException;\n \n+import org.apache.bookkeeper.bookie.Bookie.NoLedgerException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n@@ -124,4 +125,51 @@ public void testLedgerEviction() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testPageEviction() throws Exception {\n+        int numLedgers = 10;\n+        byte[] masterKey = \"blah\".getBytes();\n+        // limit page count\n+        conf.setOpenFileLimit(999999).setPageLimit(3);\n+        // create ledger cache\n+        newLedgerCache();\n+        try {\n+            // create serveral ledgers\n+            for (int i=1; i<=numLedgers; i++) {\n+                ledgerCache.setMasterKey((long)i, masterKey);\n+                ledgerCache.putEntryOffset(i, 0, i*8);\n+                ledgerCache.putEntryOffset(i, 1, i*8);\n+            }\n+\n+            // flush all first to clean previous dirty ledgers\n+            ledgerCache.flushLedger(true);\n+            // flush all \n+            ledgerCache.flushLedger(true);\n+\n+            // delete serveral ledgers\n+            for (int i=1; i<=numLedgers/2; i++) {\n+                ledgerCache.deleteLedger(i);\n+            }\n+\n+            // bookie restarts\n+            newLedgerCache();\n+\n+            // simulate replaying journals to add entries again\n+            for (int i=1; i<=numLedgers; i++) {\n+                try {\n+                    ledgerCache.putEntryOffset(i, 1, i*8);\n+                } catch (NoLedgerException nsle) {\n+                    if (i<=numLedgers/2) {\n+                        // it is ok\n+                    } else {\n+                        LOG.error(\"Error put entry offset : \", nsle);\n+                        fail(\"Should not reach here.\");\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Got Exception.\", e);\n+            fail(\"Failed to add entry.\");\n+        }\n+    }\n }"}]}

