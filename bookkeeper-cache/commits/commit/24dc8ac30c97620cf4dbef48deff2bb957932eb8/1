{"sha":"24dc8ac30c97620cf4dbef48deff2bb957932eb8","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNGRjOGFjMzBjOTc2MjBjZjRkYmVmNDhkZWZmMmJiOTU3OTMyZWI4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-22T05:35:46Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-22T05:35:46Z"},"message":"BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1534498 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6108a2b0546199dbdae765c9d6f03ef47a294ddc","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6108a2b0546199dbdae765c9d6f03ef47a294ddc"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/24dc8ac30c97620cf4dbef48deff2bb957932eb8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/24dc8ac30c97620cf4dbef48deff2bb957932eb8","html_url":"https://github.com/apache/bookkeeper/commit/24dc8ac30c97620cf4dbef48deff2bb957932eb8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/24dc8ac30c97620cf4dbef48deff2bb957932eb8/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"33ea58027b0a3ba160f7ac19d20568709f453f4d","url":"https://api.github.com/repos/apache/bookkeeper/commits/33ea58027b0a3ba160f7ac19d20568709f453f4d","html_url":"https://github.com/apache/bookkeeper/commit/33ea58027b0a3ba160f7ac19d20568709f453f4d"}],"stats":{"total":31,"additions":25,"deletions":6},"files":[{"sha":"bc3f0f0908bfa78dd6be5a286617f9eee6226e9e","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/24dc8ac30c97620cf4dbef48deff2bb957932eb8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/24dc8ac30c97620cf4dbef48deff2bb957932eb8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=24dc8ac30c97620cf4dbef48deff2bb957932eb8","patch":"@@ -112,6 +112,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n \n+        BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"eb7d3b394117f74f2202c4821ace636a313f9aec","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":23,"deletions":6,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/24dc8ac30c97620cf4dbef48deff2bb957932eb8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dc8ac30c97620cf4dbef48deff2bb957932eb8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=24dc8ac30c97620cf4dbef48deff2bb957932eb8","patch":"@@ -238,15 +238,20 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n         final int entrySize = toSend.readableBytes();\n         final CompletionKey completionKey = new CompletionKey(ledgerId, entryId);\n         addCompletions.put(completionKey, new AddCompletion(cb, entrySize, ctx));\n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutAddKey(completionKey);\n+            return;\n+        }\n         try {\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n-                                                            + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+                                                            + \" bookie: \" + c.getRemoteAddress() + \" entry length: \" + entrySize);\n                         }\n                         // totalBytesOutstanding.addAndGet(entrySize);\n                     } else {\n@@ -270,15 +275,21 @@ public void readEntryAndFenceLedger(final long ledgerId, byte[] masterKey,\n                 BookieProtocol.CURRENT_PROTOCOL_VERSION, ledgerId, entryId,\n                 BookieProtocol.FLAG_DO_FENCING, masterKey);\n \n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutReadKey(key);\n+            return;\n+        }\n+\n         try {\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                     @Override\n                     public void operationComplete(ChannelFuture future) throws Exception {\n                         if (future.isSuccess()) {\n                             if (LOG.isDebugEnabled()) {\n                                 LOG.debug(\"Successfully wrote request {} to {}\",\n-                                          r, channel.getRemoteAddress());\n+                                          r, c.getRemoteAddress());\n                             }\n                         } else {\n                             errorOutReadKey(key);\n@@ -299,15 +310,21 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n                 BookieProtocol.CURRENT_PROTOCOL_VERSION, ledgerId, entryId,\n                 BookieProtocol.FLAG_NONE);\n \n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutReadKey(key);\n+            return;\n+        }\n+\n         try{\n-            ChannelFuture future = channel.write(r);\n+            ChannelFuture future = c.write(r);\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"Successfully wrote request {} to {}\",\n-                                      r, channel.getRemoteAddress());\n+                                      r, c.getRemoteAddress());\n                         }\n                     } else {\n                         errorOutReadKey(key);"}]}

