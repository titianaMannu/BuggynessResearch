{"sha":"24dffb3fdde8ef863660af8dec1b54e22c334f8b","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNGRmZmIzZmRkZThlZjg2MzY2MGFmOGRlYzFiNTRlMjJjMzM0Zjhi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T16:02:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T16:02:47Z"},"message":"BOOKKEEPER-472: Provide an option to start Autorecovery along with Bookie Servers (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1432966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c20da01dafe5aad92558bdcc39bb0e04e275f48d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c20da01dafe5aad92558bdcc39bb0e04e275f48d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/24dffb3fdde8ef863660af8dec1b54e22c334f8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/24dffb3fdde8ef863660af8dec1b54e22c334f8b","html_url":"https://github.com/apache/bookkeeper/commit/24dffb3fdde8ef863660af8dec1b54e22c334f8b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/24dffb3fdde8ef863660af8dec1b54e22c334f8b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0b5d2e933e3d80e47b6ddfde143f3391e4992b1d","url":"https://api.github.com/repos/apache/bookkeeper/commits/0b5d2e933e3d80e47b6ddfde143f3391e4992b1d","html_url":"https://github.com/apache/bookkeeper/commit/0b5d2e933e3d80e47b6ddfde143f3391e4992b1d"}],"stats":{"total":331,"additions":274,"deletions":57},"files":[{"sha":"241b1bf7a94762e5ffdc85644edbeead75aba417","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -320,6 +320,8 @@ Release 4.2.0 - 2013-01-14\n \n         BOOKKEEPER-293: Periodic checking of ledger replication status (ivank)\n \n+        BOOKKEEPER-472: Provide an option to start Autorecovery along with Bookie Servers (umamahesh via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)"},{"sha":"c400786fbdbaa6ba10f3696038f4b4f9bb070268","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -64,6 +64,7 @@\n     protected final static String DISK_USAGE_THRESHOLD = \"diskUsageThreshold\";\n     protected final static String DISK_CHECK_INTERVAL = \"diskCheckInterval\";\n     protected final static String AUDITOR_PERIODIC_CHECK_INTERVAL = \"auditorPeriodicCheckInterval\";\n+    protected final static String AUTO_RECOVERY_DAEMON_ENABLED = \"autoRecoveryDaemonEnabled\";\n \n     /**\n      * Construct a default configuration object\n@@ -666,4 +667,28 @@ public void setAuditorPeriodicCheckInterval(long interval) {\n     public long getAuditorPeriodicCheckInterval() {\n         return getLong(AUDITOR_PERIODIC_CHECK_INTERVAL, 86400);\n     }\n+\n+    /**\n+     * Sets that whether the auto-recovery service can start along with Bookie\n+     * server itself or not\n+     *\n+     * @param enabled\n+     *            - true if need to start auto-recovery service. Otherwise\n+     *            false.\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setAutoRecoveryDaemonEnabled(boolean enabled) {\n+        setProperty(AUTO_RECOVERY_DAEMON_ENABLED, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Get whether the Bookie itself can start auto-recovery service also or not\n+     *\n+     * @return true - if Bookie should start auto-recovery service along with\n+     *         it. false otherwise.\n+     */\n+    public boolean isAutoRecoveryDaemonEnabled() {\n+        return getBoolean(AUTO_RECOVERY_DAEMON_ENABLED, false);\n+    }\n }"},{"sha":"da18b6c9100e0f3cfabd00c0960582334f69045b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":38,"deletions":5,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -39,6 +39,9 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n+import org.apache.bookkeeper.replication.AutoRecoveryMain;\n+import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.util.MathUtils;\n \n import com.google.common.annotations.VisibleForTesting;\n@@ -73,12 +76,18 @@\n     final BKStats bkStats = BKStats.getInstance();\n     final boolean isStatsEnabled;\n     protected BookieServerBean jmxBkServerBean;\n+    private AutoRecoveryMain autoRecoveryMain = null;\n+    private boolean isAutoRecoveryDaemonEnabled;\n \n-    public BookieServer(ServerConfiguration conf) \n-            throws IOException, KeeperException, InterruptedException, BookieException {\n+    public BookieServer(ServerConfiguration conf) throws IOException,\n+            KeeperException, InterruptedException, BookieException,\n+            UnavailableException, CompatibilityException {\n         this.conf = conf;\n         this.bookie = newBookie(conf);\n-\n+        isAutoRecoveryDaemonEnabled = conf.isAutoRecoveryDaemonEnabled();\n+        if (isAutoRecoveryDaemonEnabled) {\n+            this.autoRecoveryMain = new AutoRecoveryMain(conf);\n+        }\n         isStatsEnabled = conf.isStatisticsEnabled();\n     }\n \n@@ -87,10 +96,13 @@ protected Bookie newBookie(ServerConfiguration conf)\n         return new Bookie(conf);\n     }\n \n-    public void start() throws IOException {\n+    public void start() throws IOException, UnavailableException {\n         nioServerFactory = new NIOServerFactory(conf, this);\n \n         this.bookie.start();\n+        if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n+            this.autoRecoveryMain.start();\n+        }\n \n         nioServerFactory.start();\n         running = true;\n@@ -136,6 +148,9 @@ public synchronized void shutdown() {\n         }\n         nioServerFactory.shutdown();\n         exitCode = bookie.shutdown();\n+        if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n+            this.autoRecoveryMain.shutdown();\n+        }\n         running = false;\n \n         // unregister JMX\n@@ -179,6 +194,16 @@ public boolean isBookieRunning() {\n         return bookie.isRunning();\n     }\n \n+    /**\n+     * Whether auto-recovery service running with Bookie?\n+     *\n+     * @return true if auto-recovery service is running, otherwise return false\n+     */\n+    public boolean isAutoRecoveryRunning() {\n+        return this.autoRecoveryMain != null\n+                && this.autoRecoveryMain.isAutoRecoveryRunning();\n+    }\n+\n     /**\n      * Whether nio server is running?\n      *\n@@ -216,7 +241,9 @@ public void run() {\n                 } catch (InterruptedException ie) {\n                     // do nothing\n                 }\n-                if (!isBookieRunning() || !isNioServerRunning()) {\n+                if (!isBookieRunning()\n+                        || !isNioServerRunning()\n+                        || (isAutoRecoveryDaemonEnabled && !isAutoRecoveryRunning())) {\n                     shutdown();\n                     break;\n                 }\n@@ -227,6 +254,8 @@ public void run() {\n     static final Options bkOpts = new Options();\n     static {\n         bkOpts.addOption(\"c\", \"conf\", true, \"Configuration for Bookie Server\");\n+        bkOpts.addOption(\"withAutoRecovery\", false,\n+                \"Start Autorecovery service Bookie server\");\n         bkOpts.addOption(\"h\", \"help\", false, \"Print help message\");\n     }\n \n@@ -275,6 +304,10 @@ private static ServerConfiguration parseArgs(String[] args)\n                 return conf;\n             }\n \n+            if (cmdLine.hasOption(\"withAutoRecovery\")) {\n+                conf.setAutoRecoveryDaemonEnabled(true);\n+            }\n+\n             if (leftArgs.length < 4) {\n                 throw new IllegalArgumentException();\n             }"},{"sha":"a6222a0ae8777c56f8384d301d81299810f35943","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -59,6 +59,7 @@\n     private AutoRecoveryDeathWatcher deathWatcher;\n     private int exitCode;\n     private volatile boolean shuttingDown = false;\n+    private volatile boolean running = false;\n \n     public AutoRecoveryMain(ServerConfiguration conf) throws IOException,\n             InterruptedException, KeeperException, UnavailableException,\n@@ -92,6 +93,7 @@ public void start() throws UnavailableException {\n         auditorElector.start();\n         replicationWorker.start();\n         deathWatcher.start();\n+        running = true;\n     }\n \n     /*\n@@ -113,6 +115,7 @@ private void shutdown(int exitCode) {\n             return;\n         }\n         shuttingDown = true;\n+        running = false;\n         this.exitCode = exitCode;\n         try {\n             deathWatcher.interrupt();\n@@ -137,6 +140,11 @@ private int getExitCode() {\n         return exitCode;\n     }\n \n+    /** Is auto-recovery service running? */\n+    public boolean isAutoRecoveryRunning() {\n+        return running;\n+    }\n+\n     /*\n      * DeathWatcher for AutoRecovery daemons.\n      */"},{"sha":"d3b523c6f95f1a0ca98dcac9bd6d088a930dc48c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -31,6 +31,8 @@\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n@@ -121,8 +123,10 @@ private void initializeZookeper() throws IOException {\n             LOG.error(\"Interrupted while creating znodes\", e);\n         }\n     }\n-    private void runBookies(ServerConfiguration baseConf) \n-            throws IOException, KeeperException, InterruptedException, BookieException {\n+\n+    private void runBookies(ServerConfiguration baseConf) throws IOException,\n+            KeeperException, InterruptedException, BookieException,\n+            UnavailableException, CompatibilityException {\n         LOG.info(\"Starting Bookie(s)\");\n         // Create Bookie Servers (B1, B2, B3)\n \n@@ -149,8 +153,9 @@ private void runBookies(ServerConfiguration baseConf)\n         }\n     }\n \n-    public static void main(String[] args)\n-            throws IOException, KeeperException, InterruptedException, BookieException {\n+    public static void main(String[] args) throws IOException, KeeperException,\n+            InterruptedException, BookieException, UnavailableException,\n+            CompatibilityException {\n         if(args.length < 1) {\n             usage();\n             System.exit(-1);"},{"sha":"f8dc1c801af4f462653eae052c2d6badbb6d5af3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -0,0 +1,59 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import java.util.List;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+/** Utility class for replication tests */\n+public class ReplicationTestUtil {\n+\n+    /** Checks whether ledger is in under-replication */\n+    static boolean isLedgerInUnderReplication(ZooKeeper zkc, long id,\n+            String basePath) throws KeeperException, InterruptedException {\n+        List<String> children;\n+        try {\n+            children = zkc.getChildren(basePath, true);\n+        } catch (KeeperException.NoNodeException nne) {\n+            return false;\n+        }\n+\n+        boolean isMatched = false;\n+        for (String child : children) {\n+            if (child.startsWith(\"urL\") && child.contains(String.valueOf(id))) {\n+                isMatched = true;\n+                break;\n+            } else {\n+                String path = basePath + '/' + child;\n+                try {\n+                    if (zkc.getChildren(path, false).size() > 0) {\n+                        isMatched = isLedgerInUnderReplication(zkc, id, path);\n+                    }\n+                } catch (KeeperException.NoNodeException nne) {\n+                    return false;\n+                }\n+            }\n+\n+        }\n+        return isMatched;\n+    }\n+}"},{"sha":"ba04c306c2f1b80aa516827a4571da47920d67fb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -0,0 +1,99 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.Set;\n+import java.util.Map.Entry;\n+\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerEntry;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.LedgerHandleAdapter;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.junit.Test;\n+\n+public class TestAutoRecoveryAlongWithBookieServers extends\n+        BookKeeperClusterTestCase {\n+\n+    private String basePath = \"\";\n+\n+    public TestAutoRecoveryAlongWithBookieServers() {\n+        super(3);\n+        baseConf.setAutoRecoveryDaemonEnabled(true);\n+        basePath = baseClientConf.getZkLedgersRootPath() + '/'\n+                + BookKeeperConstants.UNDER_REPLICATION_NODE\n+                + BookKeeperConstants.DEFAULT_ZK_LEDGERS_ROOT_PATH;\n+    }\n+\n+    /** Tests that the auto recovery service along with Bookie servers itself */\n+    @Test(timeout = 60000)\n+    public void testAutoRecoveryAlongWithBookieServers() throws Exception {\n+        LedgerHandle lh = bkc.createLedger(3, 3, BookKeeper.DigestType.CRC32,\n+                \"testpasswd\".getBytes());\n+        byte[] testData = \"testBuiltAutoRecovery\".getBytes();\n+\n+        for (int i = 0; i < 10; i++) {\n+            lh.addEntry(testData);\n+        }\n+        lh.close();\n+        InetSocketAddress replicaToKill = LedgerHandleAdapter\n+                .getLedgerMetadata(lh).getEnsembles().get(0L).get(0);\n+\n+        killBookie(replicaToKill);\n+\n+        int startNewBookie = startNewBookie();\n+        InetSocketAddress newBkAddr = new InetSocketAddress(InetAddress\n+                .getLocalHost().getHostAddress(), startNewBookie);\n+\n+        while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh.getId(),\n+                basePath)) {\n+            Thread.sleep(100);\n+        }\n+\n+        // Killing all bookies except newly replicated bookie\n+        Set<Entry<Long, ArrayList<InetSocketAddress>>> entrySet = LedgerHandleAdapter\n+                .getLedgerMetadata(lh).getEnsembles().entrySet();\n+        for (Entry<Long, ArrayList<InetSocketAddress>> entry : entrySet) {\n+            ArrayList<InetSocketAddress> bookies = entry.getValue();\n+            for (InetSocketAddress bookie : bookies) {\n+                if (bookie.equals(newBkAddr)) {\n+                    continue;\n+                }\n+                killBookie(bookie);\n+            }\n+        }\n+\n+        // Should be able to read the entries from 0-9\n+        LedgerHandle lhs = bkc.openLedgerNoRecovery(lh.getId(),\n+                BookKeeper.DigestType.CRC32, \"testpasswd\".getBytes());\n+        Enumeration<LedgerEntry> entries = lhs.readEntries(0, 9);\n+        assertTrue(\"Should have the elements\", entries.hasMoreElements());\n+        while (entries.hasMoreElements()) {\n+            LedgerEntry entry = entries.nextElement();\n+            assertEquals(\"testBuiltAutoRecovery\", new String(entry.getEntry()));\n+        }\n+    }\n+}"},{"sha":"a9010268816a3f202ce0f2c92fa35c899ae762b1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":20,"deletions":42,"changes":62,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -23,7 +23,6 @@\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.Enumeration;\n-import java.util.List;\n import java.util.Set;\n import java.util.Map.Entry;\n \n@@ -40,7 +39,6 @@\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n-import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -130,7 +128,8 @@ public void testRWShouldReplicateFragmentsToTargetBookie() throws Exception {\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n \n-            while (isLedgerInUnderReplication(lh.getId(), basePath)) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh\n+                    .getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n \n@@ -177,13 +176,15 @@ public void testRWShouldRetryUntilThereAreEnoughBksAvailableForReplication()\n             int counter = 100;\n             while (counter-- > 0) {\n                 assertTrue(\"Expecting that replication should not complete\",\n-                        isLedgerInUnderReplication(lh.getId(), basePath));\n+                        ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh\n+                                .getId(), basePath));\n                 Thread.sleep(100);\n             }\n             // restart killed bookie\n             bs.add(startBookie(killedBookieConfig));\n             bsConfs.add(killedBookieConfig);\n-            while (isLedgerInUnderReplication(lh.getId(), basePath)) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh\n+                    .getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n             // Should be able to read the entries from 0-9\n@@ -239,13 +240,15 @@ public void test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplicatio\n             int counter = 10;\n             while (counter-- > 0) {\n                 assertTrue(\"Expecting that replication should not complete\",\n-                        isLedgerInUnderReplication(lh.getId(), basePath));\n+                        ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh\n+                                .getId(), basePath));\n                 Thread.sleep(100);\n             }\n             // restart killed bookie\n             bs.add(startBookie(killedBookieConfig));\n             bsConfs.add(killedBookieConfig);\n-            while (isLedgerInUnderReplication(lh.getId(), basePath)) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh\n+                    .getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n             // Should be able to read the entries from 0-9\n@@ -288,7 +291,8 @@ public void testRWShouldCleanTheLedgerFromUnderReplicationIfLedgerAlreadyDeleted\n             // Also mark ledger as in UnderReplication\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n-            while (isLedgerInUnderReplication(lh.getId(), basePath)) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh\n+                    .getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n         } finally {\n@@ -348,11 +352,13 @@ public void testMultipleLedgerReplicationWithReplicationWorker()\n             underReplicationManager.markLedgerUnderreplicated(lh2.getId(),\n                     replicaToKillFromSecondLedger.toString());\n \n-            while (isLedgerInUnderReplication(lh1.getId(), basePath)) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh1\n+                    .getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n \n-            while (isLedgerInUnderReplication(lh2.getId(), basePath)) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh2\n+                    .getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n \n@@ -403,8 +409,8 @@ public void testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsUR()\n \n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n-            while (isLedgerInUnderReplication(lh.getId(),\n-                    basePath)) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh\n+                    .getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n             killAllBookies(lh, newBkAddr);\n@@ -465,7 +471,8 @@ public void testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsNotUR()\n \n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n-            while (isLedgerInUnderReplication(lh.getId(), basePath)) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh\n+                    .getId(), basePath)) {\n                 Thread.sleep(100);\n             }\n \n@@ -535,35 +542,6 @@ private void killAllBookies(LedgerHandle lh, InetSocketAddress excludeBK)\n         }\n     }\n \n-    private boolean isLedgerInUnderReplication(long id, String basePath)\n-            throws KeeperException, InterruptedException {\n-        List<String> children;\n-        try {\n-            children = zkc.getChildren(basePath, true);\n-        } catch (KeeperException.NoNodeException nne) {\n-            return false;\n-        }\n-\n-        boolean isMatched = false;\n-        for (String child : children) {\n-            if (child.startsWith(\"urL\") && child.contains(String.valueOf(id))) {\n-                isMatched = true;\n-                break;\n-            } else {\n-                String path = basePath + '/' + child;\n-                try {\n-                    if (zkc.getChildren(path, false).size() > 0) {\n-                        isMatched = isLedgerInUnderReplication(id, path);\n-                    }\n-                } catch (KeeperException.NoNodeException nne) {\n-                    return false;\n-                }\n-            }\n-\n-        }\n-        return isMatched;\n-    }\n-\n     private void verifyRecoveredLedgers(LedgerHandle lh, long startEntryId,\n             long endEntryId) throws BKException, InterruptedException {\n         LedgerHandle lhs = bkc.openLedgerNoRecovery(lh.getId(),"},{"sha":"deb97414b66ca03a1e4bea13dde2e85510777c05","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -337,7 +337,8 @@ public void run() {\n      * @throws BookieException\n      */\n     public void restartBookies()\n-            throws InterruptedException, IOException, KeeperException, BookieException {\n+            throws InterruptedException, IOException, KeeperException,\n+            BookieException, UnavailableException, CompatibilityException {\n         restartBookies(null);\n     }\n \n@@ -353,7 +354,8 @@ public void restartBookies()\n      * @throws BookieException\n      */\n     public void restartBookies(ServerConfiguration newConf)\n-        throws InterruptedException, IOException, KeeperException, BookieException {\n+            throws InterruptedException, IOException, KeeperException,\n+            BookieException, UnavailableException, CompatibilityException {\n         // shut down bookie server\n         for (BookieServer server : bs) {\n             server.shutdown();\n@@ -382,7 +384,8 @@ public void restartBookies(ServerConfiguration newConf)\n      * @throws IOException\n      */\n     public int startNewBookie()\n-            throws IOException, InterruptedException, KeeperException, BookieException {\n+            throws IOException, InterruptedException, KeeperException,\n+            BookieException, UnavailableException, CompatibilityException {\n         ServerConfiguration conf = newServerConfiguration();\n         bsConfs.add(conf);\n         bs.add(startBookie(conf));\n@@ -400,7 +403,7 @@ public int startNewBookie()\n      */\n     protected BookieServer startBookie(ServerConfiguration conf)\n             throws IOException, InterruptedException, KeeperException,\n-            BookieException {\n+            BookieException, UnavailableException, CompatibilityException {\n         BookieServer server = new BookieServer(conf);\n         server.start();\n \n@@ -427,7 +430,8 @@ protected BookieServer startBookie(ServerConfiguration conf)\n      * recovery for this bookie, if isAutoRecoveryEnabled is true.\n      */\n     protected BookieServer startBookie(ServerConfiguration conf, final Bookie b)\n-            throws IOException, InterruptedException, KeeperException, BookieException {\n+            throws IOException, InterruptedException, KeeperException,\n+            BookieException, UnavailableException, CompatibilityException {\n         BookieServer server = new BookieServer(conf) {\n             @Override\n             protected Bookie newBookie(ServerConfiguration conf) {"},{"sha":"11487c88b056de0ff6b0a04a505957416978dd69","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/24dffb3fdde8ef863660af8dec1b54e22c334f8b/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/24dffb3fdde8ef863660af8dec1b54e22c334f8b/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=24dffb3fdde8ef863660af8dec1b54e22c334f8b","patch":"@@ -25,6 +25,8 @@\n import java.util.List;\n import java.util.Random;\n \n+import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.test.PortManager;\n \n import org.apache.bookkeeper.bookie.Bookie;\n@@ -78,7 +80,9 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n \n     class TestBookieServer extends BookieServer {\n         public TestBookieServer(ServerConfiguration conf)\n-            throws IOException, KeeperException, InterruptedException, BookieException {\n+            throws IOException,\n+                KeeperException, InterruptedException, BookieException,\n+                UnavailableException, CompatibilityException {\n             super(conf);\n         }\n "}]}

