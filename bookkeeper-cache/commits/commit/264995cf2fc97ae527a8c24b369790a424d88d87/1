{"sha":"264995cf2fc97ae527a8c24b369790a424d88d87","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNjQ5OTVjZjJmYzk3YWU1MjdhOGMyNGIzNjk3OTBhNDI0ZDg4ZDg3","commit":{"author":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2014-12-12T11:14:32Z"},"committer":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2014-12-12T11:14:32Z"},"message":"BOOKKEEPER-803: Guide for making a replicated log out of ledgers (ivank)","tree":{"sha":"5d2b27a22277d2084fe0bcaf59ec496a41e06df9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5d2b27a22277d2084fe0bcaf59ec496a41e06df9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/264995cf2fc97ae527a8c24b369790a424d88d87","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/264995cf2fc97ae527a8c24b369790a424d88d87","html_url":"https://github.com/apache/bookkeeper/commit/264995cf2fc97ae527a8c24b369790a424d88d87","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/264995cf2fc97ae527a8c24b369790a424d88d87/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"91b80f6c8d538fd9c16b30907c95d93ee90af04a","url":"https://api.github.com/repos/apache/bookkeeper/commits/91b80f6c8d538fd9c16b30907c95d93ee90af04a","html_url":"https://github.com/apache/bookkeeper/commit/91b80f6c8d538fd9c16b30907c95d93ee90af04a"}],"stats":{"total":58,"additions":58,"deletions":0},"files":[{"sha":"a3eca3e8da2f290dd738871aad6139210ae2bb27","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/264995cf2fc97ae527a8c24b369790a424d88d87/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/264995cf2fc97ae527a8c24b369790a424d88d87/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=264995cf2fc97ae527a8c24b369790a424d88d87","patch":"@@ -40,6 +40,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-801: Bookkeeper client tutorial (ivank)\n \n+      BOOKKEEPER-803: Guide for making a replicated log out of ledgers (ivank)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"016fac7616f41be41b1c576063e40620eb72b48a","filename":"doc/bookkeeperLedgers2Logs.textile","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/apache/bookkeeper/blob/264995cf2fc97ae527a8c24b369790a424d88d87/doc/bookkeeperLedgers2Logs.textile","raw_url":"https://github.com/apache/bookkeeper/raw/264995cf2fc97ae527a8c24b369790a424d88d87/doc/bookkeeperLedgers2Logs.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperLedgers2Logs.textile?ref=264995cf2fc97ae527a8c24b369790a424d88d87","patch":"@@ -0,0 +1,56 @@\n+Title:     From Ledgers to Logs\n+Notice:    Licensed to the Apache Software Foundation (ASF) under one\n+           or more contributor license agreements.  See the NOTICE file\n+           distributed with this work for additional information\n+           regarding copyright ownership.  The ASF licenses this file\n+           to you under the Apache License, Version 2.0 (the\n+           \"License\"); you may not use this file except in compliance\n+           with the License.  You may obtain a copy of the License at\n+           .\n+             http://www.apache.org/licenses/LICENSE-2.0\n+           .\n+           Unless required by applicable law or agreed to in writing,\n+           software distributed under the License is distributed on an\n+           \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+           KIND, either express or implied.  See the License for the\n+           specific language governing permissions and limitations\n+           under the License.\n+\n+This documents describes the bookkeeper replication protocol, and the guarantees it gives. It assumes you have a general idea about leader election and log replication and how you can use these in your system. If not, have a look at the bookkeeper \"tutorial\":https://github.com/ivankelly/bookkeeper-tutorial first.\n+\n+h1. Ledgers to Logs\n+\n+Bookkeeper provides a primitive, ledgers, which can be used to build a replicated log for your system. All guarantees provided by bookkeeper are on ledgers. You can learn about the guarantees of ledgers \"here\":./bookkeeperProtocol.html. Guarantees on the whole log can be built using the ledger guarantees and any consistent datastore with a compare-and-swap(CAS) primitive. In this case, we describe a log using zookeeper as the datastore, but others could theoretically be used. \n+\n+A log in bookkeeper is built from a number of ledgers, with a fixed order. A ledger represents a single segment of the log. A ledger could be the whole period that one node was the leader, or there could be multiple ledgers for a single period of leadership. However, there can only ever been one leader that adds entries to a single ledger. Ledgers cannot be reopened for writing once they have been closed/recovered.\n+\n+It's important to note that bookkeeper doesn't provide leader election. You must use a system like Zookeeper for this.\n+\n+In many cases, leader election is really leader suggestion. Multiple nodes could think that they are leader at any one time. It is the job of the log to guarantee that only one can write changes to the system.\n+\n+h3. Opening a log\n+\n+Once a node thinks it is leader for a particular log, it must take the following steps.\n+\n+# read the list of ledgers for the log\n+# fence the last 2 ledgers[1] in the list\n+# create a new ledger\n+# add the new ledger to the ledger list\n+# write the new ledger list back to the datastore using a CAS operation.\n+\n+The fencing in step 2 and the compare-and-swap operation in step 5 prevents two nodes thinking they have leadership at any one time. Ledger fencing is described in \"Bookkeeper Protocol\":./bookkeeperProtocol.html. The compare-and-swap operation will fail if the list of ledgers has changed between reading it and writing back the new list. When the CAS operation fails, the leader must start at step 1 again. Even better, they should check that they are in fact still the leader with the system that is providing leader election. The protocol will work correctly without this step, though it will be able to make very little progress if two nodes think they are leader and are duelling for the log. \n+\n+The node must not serve any writes until step 5 completes successfully.\n+\n+h3. Rolling ledgers\n+\n+The leader may wish to close the current ledger and open a new one every so often. Ledgers can only be deleted as a whole. If you don't roll the log, you won't be able to clean up old entries in the log without a leader change. By closing the current ledger and adding a new one, the leader allows the log to be truncated whenever that data is no longer needed. The steps for rolling the log is similar to those for creating a new ledger.  \n+\n+# create a new ledger\n+# add the new ledger to the ledger list\n+# write the new ledger list to the datastore using CAS\n+# close the previous ledger\n+\n+By deferring the closing of the previous ledger until step 4, we can continue writing to the log while we perform metadata update operations to add the new ledger. This is safe as long as you fence the last _2_ ledgers when acquiring leadership.\n+\n+fn1. We fence 2 ledgers, as the write may be writing to the penultimate, while adding the last ledger to the ledger list."}]}

