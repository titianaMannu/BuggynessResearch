{"sha":"267ed95a2ae2ef1a8f6a3166b217d86a28166391","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNjdlZDk1YTJhZTJlZjFhOGY2YTMxNjZiMjE3ZDg2YTI4MTY2Mzkx","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-06-06T15:49:38Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-06-06T15:49:38Z"},"message":"BOOKKEEPER-22: Exception in LedgerCache causes addEntry request to fail (fpj via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1132682 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9c70be55c77cd3202672611a6699ef358ccbc619","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9c70be55c77cd3202672611a6699ef358ccbc619"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/267ed95a2ae2ef1a8f6a3166b217d86a28166391","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/267ed95a2ae2ef1a8f6a3166b217d86a28166391","html_url":"https://github.com/apache/bookkeeper/commit/267ed95a2ae2ef1a8f6a3166b217d86a28166391","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/267ed95a2ae2ef1a8f6a3166b217d86a28166391/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"266b1c2744a35b9379ba5e7023322a2450b91090","url":"https://api.github.com/repos/apache/bookkeeper/commits/266b1c2744a35b9379ba5e7023322a2450b91090","html_url":"https://github.com/apache/bookkeeper/commit/266b1c2744a35b9379ba5e7023322a2450b91090"}],"stats":{"total":142,"additions":137,"deletions":5},"files":[{"sha":"3e4ee026d9549343cc6579ebaed3f2da6a3e40dd","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/267ed95a2ae2ef1a8f6a3166b217d86a28166391/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/267ed95a2ae2ef1a8f6a3166b217d86a28166391/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=267ed95a2ae2ef1a8f6a3166b217d86a28166391","patch":"@@ -13,3 +13,5 @@ BUGFIXES:\n   BOOKKEEPER-1: Static variable makes tests fail (fpj via ivank)\n \n   BOOKKEEPER-19: BookKeeper doesn't support more than 2Gig of memory (ivan via fpj)\n+\n+  BOOKEEPER-22: Exception in LedgerCache causes addEntry request to fail (fpj via fpj)"},{"sha":"347581feb889bcef8eff53bfa5df8988d9ad656b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/267ed95a2ae2ef1a8f6a3166b217d86a28166391/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/267ed95a2ae2ef1a8f6a3166b217d86a28166391/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java?ref=267ed95a2ae2ef1a8f6a3166b217d86a28166391","patch":"@@ -423,7 +423,7 @@ private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOExceptio\n                     Iterator<Map.Entry<Long, LedgerEntryPage>> it = map.entrySet().iterator();\n                     LedgerEntryPage lep = it.next().getValue();\n                     while((lep.inUse() || !lep.isClean())) {\n-                        if (it.hasNext()) {\n+                        if (!it.hasNext()) {\n                             continue outerLoop;\n                         }\n                         lep = it.next().getValue();"},{"sha":"7ae6410ec163a47a08928b0b1e28832bd0eaaa1f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/267ed95a2ae2ef1a8f6a3166b217d86a28166391/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/267ed95a2ae2ef1a8f6a3166b217d86a28166391/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java?ref=267ed95a2ae2ef1a8f6a3166b217d86a28166391","patch":"@@ -25,7 +25,7 @@\n import javax.crypto.Mac;\n import javax.crypto.spec.SecretKeySpec;\n \n-class MacDigestManager extends DigestManager {\n+public class MacDigestManager extends DigestManager {\n     public static String DIGEST_ALGORITHM = \"SHA-1\";\n     public static String KEY_ALGORITHM = \"HmacSHA1\";\n     Mac mac;"},{"sha":"c34395facfc615fd149a5805da62fcb476ba4760","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/267ed95a2ae2ef1a8f6a3166b217d86a28166391/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/267ed95a2ae2ef1a8f6a3166b217d86a28166391/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=267ed95a2ae2ef1a8f6a3166b217d86a28166391","patch":"@@ -120,12 +120,11 @@ public void run() {\n                 }\n                 selected.clear();\n             } catch (Exception e) {\n-                LOG.warn(e);\n+                LOG.warn(\"Exception in server socket loop: \" + ss.socket().getInetAddress(), e);\n             }\n         }\n-        LOG.debug(\"NIOServerCnxn factory exitedloop.\");\n+        LOG.info(\"NIOServerCnxn factory exitedloop.\");\n         clear();\n-        // System.exit(0);\n     }\n \n     /**"},{"sha":"857e499b3478a82287d856207a4ffa5583684fc3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCacheTest.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/apache/bookkeeper/blob/267ed95a2ae2ef1a8f6a3166b217d86a28166391/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/267ed95a2ae2ef1a8f6a3166b217d86a28166391/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCacheTest.java?ref=267ed95a2ae2ef1a8f6a3166b217d86a28166391","patch":"@@ -0,0 +1,131 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.security.GeneralSecurityException;\n+\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.bookie.LedgerEntryPage;\n+import org.apache.bookkeeper.client.MacDigestManager;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.log4j.Logger;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests writing to concurrent ledgers\n+ */\n+public class LedgerCacheTest extends TestCase {\n+    static Logger LOG = Logger.getLogger(LedgerCacheTest.class);\n+    \n+    Bookie bookie;\n+    File txnDir, ledgerDir;\n+    \n+    class TestWriteCallback implements WriteCallback {\n+        public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx){\n+            LOG.info(\"Added entry: \" + rc + \", \" + ledgerId + \", \" + entryId + \", \" + addr);\n+        }\n+    }\n+    \n+    \n+    @Override\n+    @Before\n+    public void setUp() throws IOException {\n+        String txnDirName = System.getProperty(\"txnDir\");\n+        if (txnDirName != null) {\n+            txnDir = new File(txnDirName);\n+        }\n+        String ledgerDirName = System.getProperty(\"ledgerDir\");\n+        if (ledgerDirName != null) {\n+            ledgerDir = new File(ledgerDirName);\n+        }\n+        File tmpFile = File.createTempFile(\"book\", \".txn\", txnDir);\n+        tmpFile.delete();\n+        txnDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n+        txnDir.mkdirs();\n+        tmpFile = File.createTempFile(\"book\", \".ledger\", ledgerDir);\n+        ledgerDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n+        ledgerDir.mkdirs();\n+        \n+        \n+        bookie = new Bookie(5000, null, txnDir, new File[] {ledgerDir});   \n+    }\n+    \n+    \n+    @Override\n+    @After\n+    public void tearDown() {\n+        try {\n+            bookie.shutdown();\n+            recursiveDelete(txnDir);\n+            recursiveDelete(ledgerDir);\n+        } catch (InterruptedException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    /**\n+     * Recursively deletes a directory. This is a duplication of BookieClientTest.\n+     * \n+     * @param dir\n+     */\n+    private static void recursiveDelete(File dir) {\n+        File children[] = dir.listFiles();\n+        if (children != null) {\n+            for (File child : children) {\n+                recursiveDelete(child);\n+            }\n+        }\n+        dir.delete();\n+    }\n+    \n+    @Test\n+    public void testAddEntryException() \n+    throws GeneralSecurityException, BookieException {\n+        /*\n+         * Populate ledger cache\n+         */\n+        try{\n+            byte[] masterKey = \"blah\".getBytes();\n+            for( int i = 0; i < 30000; i++){\n+                MacDigestManager dm = new MacDigestManager(i, masterKey);\n+                ByteBuffer entry = dm.computeDigestAndPackageForSending(0, 0, 10, \"0123456789\".getBytes()).toByteBuffer();\n+                bookie.addEntry(entry, new TestWriteCallback(), null, masterKey);\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"Got IOException.\", e);\n+            fail(\"Failed to add entry.\");\n+        }\n+    }\n+    \n+}\n\\ No newline at end of file"}]}

