{"sha":"268bdb8c6b5f642967329a99ec1dce5ba0af46d7","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNjhiZGI4YzZiNWY2NDI5NjczMjlhOTllYzFkY2U1YmEwYWY0NmQ3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-05-04T18:11:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-05-04T18:11:43Z"},"message":"BOOKKEEPER-228: Fix the bugs in BK benchmark (umamaheswararao via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1334107 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3c75fe54ee0597f8cfbda31a21de13dd6002eac1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3c75fe54ee0597f8cfbda31a21de13dd6002eac1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/268bdb8c6b5f642967329a99ec1dce5ba0af46d7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/268bdb8c6b5f642967329a99ec1dce5ba0af46d7","html_url":"https://github.com/apache/bookkeeper/commit/268bdb8c6b5f642967329a99ec1dce5ba0af46d7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/268bdb8c6b5f642967329a99ec1dce5ba0af46d7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6d50e72732aa741d3a620c4b3ec04593c68f1b62","url":"https://api.github.com/repos/apache/bookkeeper/commits/6d50e72732aa741d3a620c4b3ec04593c68f1b62","html_url":"https://github.com/apache/bookkeeper/commit/6d50e72732aa741d3a620c4b3ec04593c68f1b62"}],"stats":{"total":69,"additions":34,"deletions":35},"files":[{"sha":"fb13a39ffcf4751195afdb78f618a9263efa748b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/268bdb8c6b5f642967329a99ec1dce5ba0af46d7/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/268bdb8c6b5f642967329a99ec1dce5ba0af46d7/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=268bdb8c6b5f642967329a99ec1dce5ba0af46d7","patch":"@@ -114,6 +114,8 @@ Trunk (unreleased changes)\n \t\n \tBOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj)\n \n+        BOOKKEEPER-228: Fix the bugs in BK benchmark (umamaheswararao via ivank)\n+\n     IMPROVEMENTS:\n \n       bookkeeper-server/"},{"sha":"005f26823777cc2101550128a5967bf3acdec236","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":21,"deletions":25,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/268bdb8c6b5f642967329a99ec1dce5ba0af46d7/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/268bdb8c6b5f642967329a99ec1dce5ba0af46d7/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java?ref=268bdb8c6b5f642967329a99ec1dce5ba0af46d7","patch":"@@ -20,7 +20,6 @@\n package org.apache.bookkeeper.benchmark;\n \n import java.io.BufferedOutputStream;\n-import java.io.DataInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n@@ -34,12 +33,16 @@\n import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n@@ -48,14 +51,8 @@\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n-\n-import org.apache.commons.cli.HelpFormatter;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.Options;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.PosixParser;\n-import org.apache.commons.cli.ParseException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class BenchThroughputLatency implements AddCallback, Runnable {\n     static Logger LOG = LoggerFactory.getLogger(BenchThroughputLatency.class);\n@@ -70,22 +67,20 @@\n     int numberOfLedgers = 1;\n     final String servers;\n \n-    class Context {\n+    static class Context {\n         long localStartTime;\n-        long globalStartTime;\n         long id;\n \n         Context(long id, long time){\n             this.id = id;\n-            this.localStartTime = this.globalStartTime = time;\n+            this.localStartTime = time;\n         }\n     }\n \n     public BenchThroughputLatency(int ensemble, int qSize, byte[] passwd,\n                                   int throttle, int numberOfLedgers, String servers) \n             throws KeeperException, IOException, InterruptedException {\n         this.sem = new Semaphore(throttle);\n-        this.pace = pace;\n         this.throttle = throttle;\n \n         ClientConfiguration conf = new ClientConfiguration();\n@@ -148,7 +143,6 @@ public void run() {\n         LOG.info(\"Running...\");\n         long start = previous = System.currentTimeMillis();\n \n-        byte messageCount = 0;\n         int sent = 0;\n \n         Thread reporter = new Thread() {\n@@ -193,24 +187,29 @@ public void run() {\n         LOG.info(\"Sent: \"  + sent);\n         try {\n             synchronized (this) {\n-                while(this.counter.get() > 0)\n-                    Thread.sleep(1000);\n+                while (this.counter.get() > 0) {\n+                    waitFor(1000);\n+                }\n             }\n         } catch(InterruptedException e) {\n             LOG.error(\"Interrupted while waiting\", e);\n         }\n         synchronized(this) {\n             duration = System.currentTimeMillis() - start;\n         }\n-        throughput = sent*1000/duration;\n+        throughput = sent*1000/getDuration();\n \n         reporter.interrupt();\n         try {\n             reporter.join();\n         } catch (InterruptedException ie) {\n             // ignore\n         }\n-        LOG.info(\"Finished processing in ms: \" + duration + \" tp = \" + throughput);\n+        LOG.info(\"Finished processing in ms: \" + getDuration() + \" tp = \" + throughput);\n+    }\n+\n+    private void waitFor(int waitTime) throws InterruptedException {\n+        Thread.sleep(waitTime);\n     }\n \n     long throughput = -1;\n@@ -291,11 +290,8 @@ public static void main(String[] args)\n         byte data[] = new byte[entrysize];\n         Arrays.fill(data, (byte)'x');\n \n-        while(lastWarmUpTP < (throughput = warmUp(servers, data, ledgers, ensemble, quorum, passwd, throttle))) {\n+        if(lastWarmUpTP < (throughput = warmUp(servers, data, ledgers, ensemble, quorum, passwd, throttle))) {\n             LOG.info(\"Warmup tp: \" + throughput);\n-            lastWarmUpTP = throughput;\n-            // we will just run once, so lets break\n-            break;\n         }\n         LOG.info(\"Warmup phase finished\");\n "},{"sha":"ad86df81cf86c13de8f9fe8aaf085c25e462d140","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/268bdb8c6b5f642967329a99ec1dce5ba0af46d7/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/268bdb8c6b5f642967329a99ec1dce5ba0af46d7/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java?ref=268bdb8c6b5f642967329a99ec1dce5ba0af46d7","patch":"@@ -1,4 +1,3 @@\n-package org.apache.bookkeeper.benchmark;\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -19,7 +18,7 @@\n  * under the License.\n  *\n  */\n-\n+package org.apache.bookkeeper.benchmark;\n \n import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n@@ -173,8 +172,9 @@ void writeSameEntryBatch(byte[] data, int times) throws InterruptedException {\n         }\n         LOG.debug(\"Finished \" + times + \" async writes in ms: \" + (System.currentTimeMillis() - start));\n         synchronized (map) {\n-            if(map.size() != 0)\n-                map.wait();\n+            while (map.size() != 0) {\n+                map.wait(100);\n+            }\n         }\n         LOG.debug(\"Finished processing in ms: \" + (System.currentTimeMillis() - start));\n \n@@ -194,15 +194,16 @@ void writeConsecutiveEntriesBatch(int times) throws InterruptedException {\n         }\n         LOG.debug(\"Finished \" + times + \" async writes in ms: \" + (System.currentTimeMillis() - start));\n         synchronized (map) {\n-            if(map.size() != 0)\n-                map.wait();\n+            while (map.size() != 0) {\n+                map.wait(100);\n+            }\n         }\n         LOG.debug(\"Finished processing writes (ms): \" + (System.currentTimeMillis() - start));\n \n-        Integer mon = Integer.valueOf(0);\n-        synchronized(mon) {\n-            lh.asyncReadEntries(1, times - 1, this, mon);\n-            mon.wait();\n+        Object syncObj = new Object();\n+        synchronized(syncObj) {\n+            lh.asyncReadEntries(1, times - 1, this, syncObj);\n+            syncObj.wait();\n         }\n         LOG.error(\"Ended computation\");\n     }"}]}

