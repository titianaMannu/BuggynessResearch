{"sha":"26913eb63e74a23785bb7f2583e3bb15b1031ecf","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNjkxM2ViNjNlNzRhMjM3ODViYjdmMjU4M2UzYmIxNWIxMDMxZWNm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-09T10:29:09Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-09T10:29:09Z"},"message":"BOOKKEEPER-679: Bookie should exit with non-zero if NIOServer crashes with Error (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1521028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdca928cf2621ac7bbf0be070a6b044b08d0a950","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fdca928cf2621ac7bbf0be070a6b044b08d0a950"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/26913eb63e74a23785bb7f2583e3bb15b1031ecf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/26913eb63e74a23785bb7f2583e3bb15b1031ecf","html_url":"https://github.com/apache/bookkeeper/commit/26913eb63e74a23785bb7f2583e3bb15b1031ecf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/26913eb63e74a23785bb7f2583e3bb15b1031ecf/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"07d53822b1781aa64d99009276fda3995aab8759","url":"https://api.github.com/repos/apache/bookkeeper/commits/07d53822b1781aa64d99009276fda3995aab8759","html_url":"https://github.com/apache/bookkeeper/commit/07d53822b1781aa64d99009276fda3995aab8759"}],"stats":{"total":72,"additions":68,"deletions":4},"files":[{"sha":"dae016145e6cea0ecb2cbdc26ab6d09ba5af666f","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/26913eb63e74a23785bb7f2583e3bb15b1031ecf/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/26913eb63e74a23785bb7f2583e3bb15b1031ecf/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=26913eb63e74a23785bb7f2583e3bb15b1031ecf","patch":"@@ -72,6 +72,8 @@ Release 4.2.2 - Unreleased\n \n         BOOKKEEPER-664: Compaction increases latency on journal writes (ivank & sijie via ivank)\n \n+        BOOKKEEPER-679: Bookie should exit with non-zero if NIOServer crashes with Error (ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank)"},{"sha":"846cfefb9e68836bb582473dce1e9cb30527d8b2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/26913eb63e74a23785bb7f2583e3bb15b1031ecf/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/26913eb63e74a23785bb7f2583e3bb15b1031ecf/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=26913eb63e74a23785bb7f2583e3bb15b1031ecf","patch":"@@ -70,8 +70,6 @@\n     DeathWatcher deathWatcher;\n     static Logger LOG = LoggerFactory.getLogger(BookieServer.class);\n \n-    int exitCode = ExitCode.OK;\n-\n     // operation stats\n     final BKStats bkStats = BKStats.getInstance();\n     final boolean isStatsEnabled;\n@@ -102,7 +100,6 @@ public void start() throws IOException, UnavailableException {\n         this.bookie.start();\n         // fail fast, when bookie startup is not successful\n         if (!this.bookie.isRunning()) {\n-            exitCode = bookie.getExitCode();\n             return;\n         }\n         if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n@@ -153,7 +150,8 @@ public synchronized void shutdown() {\n             return;\n         }\n         nioServerFactory.shutdown();\n-        exitCode = bookie.shutdown();\n+        bookie.shutdown();\n+\n         if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n             this.autoRecoveryMain.shutdown();\n         }\n@@ -224,6 +222,12 @@ public void join() throws InterruptedException {\n     }\n \n     public int getExitCode() {\n+        int exitCode = bookie.getExitCode();\n+        if (exitCode == ExitCode.OK) {\n+            if (nioServerFactory.hasCrashed()) {\n+                return ExitCode.SERVER_EXCEPTION;\n+            }\n+        }\n         return exitCode;\n     }\n "},{"sha":"1dd719163ba0a7cbf09a0d6b691d280c32827c1b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/26913eb63e74a23785bb7f2583e3bb15b1031ecf/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/26913eb63e74a23785bb7f2583e3bb15b1031ecf/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=26913eb63e74a23785bb7f2583e3bb15b1031ecf","patch":"@@ -33,6 +33,7 @@\n import java.util.Iterator;\n import java.util.Set;\n import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -77,6 +78,7 @@\n \n     ServerConfiguration conf;\n \n+    private AtomicBoolean crashed = new AtomicBoolean(false);\n     private Object suspensionLock = new Object();\n     private boolean suspended = false;\n \n@@ -111,6 +113,10 @@ public boolean isRunning() {\n         return !ss.socket().isClosed() && isAlive();\n     }\n \n+    boolean hasCrashed() {\n+        return crashed.get();\n+    }\n+\n     /**\n      * Stop nio server from processing requests. (for testing)\n      */\n@@ -166,6 +172,7 @@ public void run() {\n                 LOG.warn(\"Exception in server socket loop: \" + ss.socket().getInetAddress(), e);\n             } catch (Throwable e) {\n                 LOG.error(\"Error in server socket loop: \" + ss.socket().getInetAddress(), e);\n+                crashed.set(true);\n                 break;\n             }\n         }"},{"sha":"6f641b6872a197191bef339f503195c0c5b216c2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/26913eb63e74a23785bb7f2583e3bb15b1031ecf/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/26913eb63e74a23785bb7f2583e3bb15b1031ecf/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java?ref=26913eb63e74a23785bb7f2583e3bb15b1031ecf","patch":"@@ -25,7 +25,19 @@\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+\n+import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+\n+import java.io.IOException;\n+import org.apache.zookeeper.KeeperException;\n+\n+import java.nio.ByteBuffer;\n import org.junit.Test;\n+import org.junit.Assert;\n \n public class BookieShutdownTest extends BookKeeperClusterTestCase {\n \n@@ -68,4 +80,43 @@ synchronized int shutdown(int exitCode) {\n         latch.countDown();\n         shutdownComplete.await(5000, TimeUnit.MILLISECONDS);\n     }\n+\n+    /**\n+     * Test whether bookieserver returns the correct error code when it crashes.\n+     */\n+    @Test(timeout=60000)\n+    public void testBookieServerThreadError() throws Exception {\n+        ServerConfiguration conf = bsConfs.get(0);\n+        killBookie(0);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final CountDownLatch shutdownComplete = new CountDownLatch(1);\n+        // simulating ZooKeeper exception by assigning a closed zk client to bk\n+        BookieServer bkServer = new BookieServer(conf) {\n+            protected Bookie newBookie(ServerConfiguration conf)\n+                    throws IOException, KeeperException, InterruptedException,\n+                    BookieException {\n+                return new Bookie(conf) {\n+                    @Override\n+                    public void addEntry(ByteBuffer entry, WriteCallback cb,\n+                                         Object ctx, byte[] masterKey)\n+                            throws IOException, BookieException {\n+                        throw new OutOfMemoryError();\n+                    }\n+                };\n+            }\n+        };\n+        bkServer.start();\n+\n+        LedgerHandle lh = bkc.createLedger(1, 1, BookKeeper.DigestType.CRC32, \"passwd\".getBytes());\n+        lh.asyncAddEntry(\"test\".getBytes(), new AddCallback() {\n+                @Override\n+                public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                    // dont care, only trying to trigger OOM\n+                }\n+            }, null);\n+        bkServer.join();\n+        Assert.assertFalse(\"Should have died\", bkServer.isRunning());\n+        Assert.assertEquals(\"Should have died with server exception code\",\n+                            ExitCode.SERVER_EXCEPTION, bkServer.getExitCode());\n+    }\n }"}]}

