{"sha":"2a24be666a861b1f6eece25a9cde42459b5b32a2","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyYTI0YmU2NjZhODYxYjFmNmVlY2UyNWE5Y2RlNDI0NTliNWIzMmEy","commit":{"author":{"name":"lamber-ken","email":"lamberken@apache.org","date":"2020-06-08T12:18:01Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2020-06-08T12:18:01Z"},"message":"[BUG] Fix avoid invoke init drivers repeatedly\n\n### Motivation\r\n\r\nstatic code blocks are always invoked when the class is initialized, when client connect to bookkeeper server, output repeat init log\r\n\r\n```\r\n2020-06-04 10:10:24,751 INFO  org.apache.bookkeeper.meta.MetadataDrivers                    - BookKeeper metadata driver manager initialized\r\n2020-06-04 10:10:24,753 INFO  org.apache.bookkeeper.meta.MetadataDrivers                    - BookKeeper metadata driver manager initialized\r\n2020-06-04 10:10:24,753 INFO  org.apache.bookkeeper.meta.MetadataDrivers                    - BookKeeper metadata driver manager initialized\r\n```\r\n\r\n### Changes\r\n\r\nRemove redundant initialization code.\n\nReviewers: Jia Zhai <zhaijia@apache.org>, Matteo Minardi <minardi.matteo@hotmail.it>, Enrico Olivelli <eolivelli@gmail.com>\n\nThis closes #2356 from lamber-ken/bk-init-repeat","tree":{"sha":"ef4ae5cf4dfade6b826b0831b1d581f71df00428","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ef4ae5cf4dfade6b826b0831b1d581f71df00428"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2a24be666a861b1f6eece25a9cde42459b5b32a2","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3ix5CRBK7hj4Ov3rIwAAdHIIAG8uc2+sMwgUyO7PpoNQdq86\nn/tiPM4QGI0wXXwrLVD4rm2SQutAvfsV1wcGfNO3Pq/t4fmrzZ19Wdvd4/Z8uwoI\nH3LW9xUj+JyKnEUZkYpHVarIScI/QJONhZ1hEiIiXQjW5IGmK8cX8CfGyjgYziQA\na5nD9n3ztiYsj+hFn3x/j8OOJt4RMggTuNesLcUVmnnyxSJinBVDWUwXO+C3t8V6\nHVfYqVGQFhpKyN6UvI91/qpz5kdiiiRKWgNVoEEeA4hD8Me0MRr9DoIH8EBaOANL\nvkNWvfpP2szAM7dYrgSOZEY8QTkJdGzfIbhyOrfcx0q0WcGtES0lI1C6QFRREpE=\n=0eaw\n-----END PGP SIGNATURE-----\n","payload":"tree ef4ae5cf4dfade6b826b0831b1d581f71df00428\nparent a9e604525f4a784133d23666e94d16f101749197\nauthor lamber-ken <lamberken@apache.org> 1591618681 +0800\ncommitter GitHub <noreply@github.com> 1591618681 +0200\n\n[BUG] Fix avoid invoke init drivers repeatedly\n\n### Motivation\r\n\r\nstatic code blocks are always invoked when the class is initialized, when client connect to bookkeeper server, output repeat init log\r\n\r\n```\r\n2020-06-04 10:10:24,751 INFO  org.apache.bookkeeper.meta.MetadataDrivers                    - BookKeeper metadata driver manager initialized\r\n2020-06-04 10:10:24,753 INFO  org.apache.bookkeeper.meta.MetadataDrivers                    - BookKeeper metadata driver manager initialized\r\n2020-06-04 10:10:24,753 INFO  org.apache.bookkeeper.meta.MetadataDrivers                    - BookKeeper metadata driver manager initialized\r\n```\r\n\r\n### Changes\r\n\r\nRemove redundant initialization code.\n\nReviewers: Jia Zhai <zhaijia@apache.org>, Matteo Minardi <minardi.matteo@hotmail.it>, Enrico Olivelli <eolivelli@gmail.com>\n\nThis closes #2356 from lamber-ken/bk-init-repeat"}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2a24be666a861b1f6eece25a9cde42459b5b32a2","html_url":"https://github.com/apache/bookkeeper/commit/2a24be666a861b1f6eece25a9cde42459b5b32a2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2a24be666a861b1f6eece25a9cde42459b5b32a2/comments","author":{"login":"lamberken","id":20113411,"node_id":"MDQ6VXNlcjIwMTEzNDEx","avatar_url":"https://avatars.githubusercontent.com/u/20113411?v=4","gravatar_id":"","url":"https://api.github.com/users/lamberken","html_url":"https://github.com/lamberken","followers_url":"https://api.github.com/users/lamberken/followers","following_url":"https://api.github.com/users/lamberken/following{/other_user}","gists_url":"https://api.github.com/users/lamberken/gists{/gist_id}","starred_url":"https://api.github.com/users/lamberken/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/lamberken/subscriptions","organizations_url":"https://api.github.com/users/lamberken/orgs","repos_url":"https://api.github.com/users/lamberken/repos","events_url":"https://api.github.com/users/lamberken/events{/privacy}","received_events_url":"https://api.github.com/users/lamberken/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"a9e604525f4a784133d23666e94d16f101749197","url":"https://api.github.com/repos/apache/bookkeeper/commits/a9e604525f4a784133d23666e94d16f101749197","html_url":"https://github.com/apache/bookkeeper/commit/a9e604525f4a784133d23666e94d16f101749197"}],"stats":{"total":25,"additions":1,"deletions":24},"files":[{"sha":"90dad34141e41a000b28cf741de00fee8d60914a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MetadataDrivers.java","status":"modified","additions":1,"deletions":24,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/2a24be666a861b1f6eece25a9cde42459b5b32a2/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MetadataDrivers.java","raw_url":"https://github.com/apache/bookkeeper/raw/2a24be666a861b1f6eece25a9cde42459b5b32a2/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MetadataDrivers.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MetadataDrivers.java?ref=2a24be666a861b1f6eece25a9cde42459b5b32a2","patch":"@@ -91,27 +91,18 @@\n     private static final ConcurrentMap<String, MetadataClientDriverInfo> clientDrivers;\n     @Getter(AccessLevel.PACKAGE)\n     private static final ConcurrentMap<String, MetadataBookieDriverInfo> bookieDrivers;\n-    private static boolean initialized = false;\n \n     static {\n         clientDrivers = new ConcurrentHashMap<>();\n         bookieDrivers = new ConcurrentHashMap<>();\n-        initialize();\n-    }\n-\n-    static void initialize() {\n-        if (initialized) {\n-            return;\n-        }\n         loadInitialDrivers();\n-        initialized = true;\n-        log.info(\"BookKeeper metadata driver manager initialized\");\n     }\n \n     @VisibleForTesting\n     static void loadInitialDrivers() {\n         loadInitialClientDrivers();\n         loadInitialBookieDrivers();\n+        log.info(\"BookKeeper metadata driver manager initialized\");\n     }\n \n     private static void loadInitialClientDrivers() {\n@@ -183,10 +174,6 @@ public static void registerClientDriver(String metadataBackendScheme,\n     public static void registerClientDriver(String metadataBackendScheme,\n                                             Class<? extends MetadataClientDriver> driver,\n                                             boolean allowOverride) {\n-        if (!initialized) {\n-            initialize();\n-        }\n-\n         String scheme = metadataBackendScheme.toLowerCase();\n         MetadataClientDriverInfo oldDriverInfo = clientDrivers.get(scheme);\n         if (null != oldDriverInfo && !allowOverride) {\n@@ -218,10 +205,6 @@ public static void registerBookieDriver(String metadataBackendScheme,\n     public static void registerBookieDriver(String metadataBackendScheme,\n                                             Class<? extends MetadataBookieDriver> driver,\n                                             boolean allowOverride) {\n-        if (!initialized) {\n-            initialize();\n-        }\n-\n         String scheme = metadataBackendScheme.toLowerCase();\n         MetadataBookieDriverInfo oldDriverInfo = bookieDrivers.get(scheme);\n         if (null != oldDriverInfo && !allowOverride) {\n@@ -247,9 +230,6 @@ public static void registerBookieDriver(String metadataBackendScheme,\n      */\n     public static MetadataClientDriver getClientDriver(String scheme) {\n         checkNotNull(scheme, \"Client Driver Scheme is null\");\n-        if (!initialized) {\n-            initialize();\n-        }\n         MetadataClientDriverInfo driverInfo = clientDrivers.get(scheme.toLowerCase());\n         if (null == driverInfo) {\n             throw new IllegalArgumentException(\"Unknown backend \" + scheme);\n@@ -287,9 +267,6 @@ public static MetadataClientDriver getClientDriver(URI uri) {\n      */\n     public static MetadataBookieDriver getBookieDriver(String scheme) {\n         checkNotNull(scheme, \"Bookie Driver Scheme is null\");\n-        if (!initialized) {\n-            initialize();\n-        }\n         MetadataBookieDriverInfo driverInfo = bookieDrivers.get(scheme.toLowerCase());\n         if (null == driverInfo) {\n             throw new IllegalArgumentException(\"Unknown backend \" + scheme);"}]}

