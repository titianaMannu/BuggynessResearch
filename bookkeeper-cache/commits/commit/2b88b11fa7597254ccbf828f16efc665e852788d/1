{"sha":"2b88b11fa7597254ccbf828f16efc665e852788d","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyYjg4YjExZmE3NTk3MjU0Y2NiZjgyOGYxNmVmYzY2NWU4NTI3ODhk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-12-06T06:38:44Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-12-06T06:38:44Z"},"message":"BOOKKEEPER-804: Client program is not terminated when using openLedgerNoRecovery (ivank via sijie)","tree":{"sha":"2f24ef83e5954bb382d204b71e44b65f756d4f8c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2f24ef83e5954bb382d204b71e44b65f756d4f8c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2b88b11fa7597254ccbf828f16efc665e852788d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2b88b11fa7597254ccbf828f16efc665e852788d","html_url":"https://github.com/apache/bookkeeper/commit/2b88b11fa7597254ccbf828f16efc665e852788d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2b88b11fa7597254ccbf828f16efc665e852788d/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"492997b1e6fe73426dda799a6eaf228329a9342f","url":"https://api.github.com/repos/apache/bookkeeper/commits/492997b1e6fe73426dda799a6eaf228329a9342f","html_url":"https://github.com/apache/bookkeeper/commit/492997b1e6fe73426dda799a6eaf228329a9342f"}],"stats":{"total":62,"additions":61,"deletions":1},"files":[{"sha":"a5ad3415a20530f2db01ce6b13fb70a07f43a2dd","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2b88b11fa7597254ccbf828f16efc665e852788d/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/2b88b11fa7597254ccbf828f16efc665e852788d/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=2b88b11fa7597254ccbf828f16efc665e852788d","patch":"@@ -22,6 +22,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-809: Wrong metric on LedgerDeleteOp and LedgerOpenOp (Charles Xie via sijie)\n \n+      BOOKKEEPER-804: Client program is not terminated when using openLedgerNoRecovery (ivank via sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-800: Expose whether a ledger is closed or not (ivank)"},{"sha":"f3f680d81f13f4cec9f771e117ccb489efd65c16","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/2b88b11fa7597254ccbf828f16efc665e852788d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/2b88b11fa7597254ccbf828f16efc665e852788d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=2b88b11fa7597254ccbf828f16efc665e852788d","patch":"@@ -134,7 +134,6 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         this.conf = conf;\n         this.zk = zk;\n         this.ledgerRootPath = conf.getZkLedgersRootPath();\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n         ThreadFactoryBuilder tfb = new ThreadFactoryBuilder().setNameFormat(\n                 \"ZkLedgerManagerScheduler-%d\");\n         this.scheduler = Executors"},{"sha":"a7fbcf500ff1f8f5cb48d08b116913a1162b7e97","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/2b88b11fa7597254ccbf828f16efc665e852788d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/2b88b11fa7597254ccbf828f16efc665e852788d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/CleanupLedgerManager.java?ref=2b88b11fa7597254ccbf828f16efc665e852788d","patch":"@@ -222,5 +222,6 @@ public void close() throws IOException {\n                 callback.operationComplete(BKException.Code.ClientClosedException, null);\n             }\n         }\n+        underlying.close();\n     }\n }"},{"sha":"13ccfe5f6be6fd37de62a2d17412a0d3b8e112b3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/2b88b11fa7597254ccbf828f16efc665e852788d/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/2b88b11fa7597254ccbf828f16efc665e852788d/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java?ref=2b88b11fa7597254ccbf828f16efc665e852788d","patch":"@@ -37,6 +37,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.SettableFuture;\n+\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.Enumeration;\n@@ -522,6 +524,62 @@ public void testBookKeeperAdmin() throws Exception {\n         }\n     }\n \n+    /**\n+     * Test that the bookkeeper client doesn't leave any threads hanging around.\n+     * See {@link https://issues.apache.org/jira/browse/BOOKKEEPER-804}\n+     */\n+    @Test(timeout = 60000)\n+    public void testBookKeeperCloseThreads() throws Exception {\n+        ThreadGroup group = new ThreadGroup(\"test-group\");\n+        final SettableFuture<Void> future = SettableFuture.<Void>create();\n+\n+        Thread t = new Thread(group, \"TestThread\") {\n+                @Override\n+                public void run() {\n+                    try {\n+                        BookKeeper bk = new BookKeeper(baseClientConf);\n+                        // 9 is a ledger id of an existing ledger\n+                        LedgerHandle lh = bk.createLedger(BookKeeper.DigestType.CRC32, \"passwd\".getBytes());\n+                        lh.addEntry(\"foobar\".getBytes());\n+                        lh.close();\n+                        long id = lh.getId();\n+                        // 9 is a ledger id of an existing ledger\n+                        lh = bk.openLedgerNoRecovery(id, BookKeeper.DigestType.CRC32, \"passwd\".getBytes());\n+                        Enumeration<LedgerEntry> entries = lh.readEntries(0, 0);\n+\n+                        lh.close();\n+                        bk.close();\n+                        future.set(null);\n+                    } catch (InterruptedException ie) {\n+                        Thread.currentThread().interrupt();\n+                        future.setException(ie);\n+                    } catch (Exception e) {\n+                        future.setException(e);\n+                    }\n+                }\n+            };\n+        t.start();\n+\n+        future.get();\n+        t.join();\n+\n+        // check in a loop for 10 seconds\n+        // because sometimes it takes a while to threads to go away\n+        for (int i = 0; i < 10; i++) {\n+            if (group.activeCount() > 0) {\n+                Thread[] threads = new Thread[group.activeCount()];\n+                group.enumerate(threads);\n+                for (Thread leftover : threads) {\n+                    LOG.error(\"Leftover thread after {} secs: {}\", i, leftover);\n+                }\n+                Thread.sleep(1000);\n+            } else {\n+                break;\n+            }\n+        }\n+        assertEquals(\"Should be no threads left in group\", 0, group.activeCount());\n+    }\n+\n     private LedgerHandle createLedgerWithEntries(BookKeeper bk, int numOfEntries)\n             throws Exception {\n         LedgerHandle lh = bk"}]}

