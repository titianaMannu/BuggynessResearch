{"sha":"2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyYzcyMzZjZjMzOWEyZGUzY2YzZmJjMGFhYThjZDg4Y2M0Mzk4Y2Ew","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T14:18:39Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T14:18:39Z"},"message":"BOOKKEEPER-424: Bookie start is failing intermittently when zkclient connection delays (rakeshr via ivank) [missing files]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402159 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdbdd11dbcf007a65d8a335d441c19415bd4fad8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bdbdd11dbcf007a65d8a335d441c19415bd4fad8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","html_url":"https://github.com/apache/bookkeeper/commit/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","url":"https://api.github.com/repos/apache/bookkeeper/commits/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","html_url":"https://github.com/apache/bookkeeper/commit/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4"}],"stats":{"total":94,"additions":94,"deletions":0},"files":[{"sha":"dbe7f7aa24a2b3aca825d32c3658a541487e5a35","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/bookkeeper/blob/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java?ref=2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","patch":"@@ -0,0 +1,94 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.zookeeper;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Watcher for receiving zookeeper server connection events.\n+ */\n+public class ZooKeeperWatcherBase implements Watcher {\n+    private static final Logger LOG = LoggerFactory\n+            .getLogger(ZooKeeperWatcherBase.class);\n+\n+    private final int zkSessionTimeOut;\n+    private CountDownLatch clientConnectLatch = new CountDownLatch(1);\n+\n+    public ZooKeeperWatcherBase(int zkSessionTimeOut) {\n+        this.zkSessionTimeOut = zkSessionTimeOut;\n+    }\n+\n+    @Override\n+    public void process(WatchedEvent event) {\n+        // If event type is NONE, this is a connection status change\n+        if (event.getType() != EventType.None) {\n+            LOG.debug(\"Recieved event: {}, path: {} from ZooKeeper server\",\n+                    event.getType(), event.getPath());\n+            return;\n+        }\n+\n+        LOG.debug(\"Recieved {} from ZooKeeper server\", event.getState());\n+        // TODO: Needs to handle AuthFailed, SaslAuthenticated events\n+        switch (event.getState()) {\n+        case SyncConnected:\n+            clientConnectLatch.countDown();\n+            break;\n+        case Disconnected:\n+            LOG.debug(\"Ignoring Disconnected event from ZooKeeper server\");\n+            break;\n+        case Expired:\n+            LOG.error(\"ZooKeeper client connection to the \"\n+                    + \"ZooKeeper server has expired!\");\n+            break;\n+        }\n+    }\n+\n+    /**\n+     * Waiting for the SyncConnected event from the ZooKeeper server\n+     * \n+     * @throws KeeperException\n+     *             when there is no connection\n+     * @throws InterruptedException\n+     *             interrupted while waiting for connection\n+     */\n+    public void waitForConnection() throws KeeperException,\n+            InterruptedException {\n+        if (!clientConnectLatch.await(zkSessionTimeOut, TimeUnit.MILLISECONDS)) {\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n+    }\n+\n+    /**\n+     * Return zookeeper session time out\n+     */\n+    public int getZkSessionTimeOut() {\n+        return zkSessionTimeOut;\n+    }\n+\n+}"}]}

