{"sha":"2d630bbd594de7a79afbf227ed41f84484a527f5","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZDYzMGJiZDU5NGRlN2E3OWFmYmYyMjdlZDQxZjg0NDg0YTUyN2Y1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-29T14:29:22Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-29T14:29:22Z"},"message":"BOOKKEEPER-773: Provide admin tool to rename bookie identifier in Cookies (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1628193 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a202b0ee67ea0809efbbe3a6f78c58b86b3ca2e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4a202b0ee67ea0809efbbe3a6f78c58b86b3ca2e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2d630bbd594de7a79afbf227ed41f84484a527f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2d630bbd594de7a79afbf227ed41f84484a527f5","html_url":"https://github.com/apache/bookkeeper/commit/2d630bbd594de7a79afbf227ed41f84484a527f5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2d630bbd594de7a79afbf227ed41f84484a527f5/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"479cb452d43785c88c729934e079d5ca4939ba90","url":"https://api.github.com/repos/apache/bookkeeper/commits/479cb452d43785c88c729934e079d5ca4939ba90","html_url":"https://github.com/apache/bookkeeper/commit/479cb452d43785c88c729934e079d5ca4939ba90"}],"stats":{"total":376,"additions":369,"deletions":7},"files":[{"sha":"b17dce53980432d161044e7ff1a12a0d35fa7e85","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2d630bbd594de7a79afbf227ed41f84484a527f5/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/2d630bbd594de7a79afbf227ed41f84484a527f5/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=2d630bbd594de7a79afbf227ed41f84484a527f5","patch":"@@ -238,6 +238,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-787: Modify Cookie by removing 'znodeVersion' state/field (rakeshr via ivank)\n \n+        BOOKKEEPER-773: Provide admin tool to rename bookie identifier in Cookies (rakeshr via ivank)\n+\n       bookkeeper-benchmark:\n \n         BOOKKEEPER-768: fix typo 'seconds' to milliseconds in benchmark output (jialin via sijie)"},{"sha":"a9af846e642c302d9a1eddfac5ddeba85556e2db","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":140,"deletions":6,"changes":146,"blob_url":"https://github.com/apache/bookkeeper/blob/2d630bbd594de7a79afbf227ed41f84484a527f5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/2d630bbd594de7a79afbf227ed41f84484a527f5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=2d630bbd594de7a79afbf227ed41f84484a527f5","patch":"@@ -33,6 +33,7 @@\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.replication.AuditorElector;\n+import org.apache.bookkeeper.bookie.BookieException.InvalidCookieException;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.client.BKException;\n@@ -51,11 +52,10 @@\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.Tool;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n \n-import org.apache.bookkeeper.util.EntryFormatter;\n-import org.apache.bookkeeper.util.Tool;\n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n \n import com.google.common.util.concurrent.AbstractFuture;\n@@ -70,9 +70,8 @@\n import org.apache.commons.cli.MissingArgumentException;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n-import org.apache.commons.configuration.CompositeConfiguration;\n-import org.apache.commons.configuration.Configuration;\n-import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -100,6 +99,7 @@\n     static final String CMD_LASTMARK = \"lastmark\";\n     static final String CMD_AUTORECOVERY = \"autorecovery\";\n     static final String CMD_LISTBOOKIES = \"listbookies\";\n+    static final String CMD_UPDATECOOKIE = \"updatecookie\";\n     static final String CMD_HELP = \"help\";\n \n     final ServerConfiguration bkConf = new ServerConfiguration();\n@@ -1013,6 +1013,139 @@ int runCmd(CommandLine cmdLine) throws Exception {\n         }\n     }\n \n+    /**\n+     * Update cookie command\n+     */\n+    class UpdateCookieCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        UpdateCookieCmd() {\n+            super(CMD_UPDATECOOKIE);\n+            opts.addOption(\"b\", \"bookieId\", true, \"Bookie Id\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Update bookie id in cookie\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"updatecookie -bookieId <hostname|ip>\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            final String bookieId = cmdLine.getOptionValue(\"bookieId\");\n+            if (StringUtils.isBlank(bookieId)) {\n+                LOG.error(\"Invalid argument list!\");\n+                this.printUsage();\n+                return -1;\n+            }\n+            if (!StringUtils.equals(bookieId, \"hostname\") && !StringUtils.equals(bookieId, \"ip\")) {\n+                LOG.error(\"Invalid option value:\" + bookieId);\n+                this.printUsage();\n+                return -1;\n+            }\n+            boolean useHostName = getOptionalValue(bookieId, \"hostname\");\n+            if (!bkConf.getUseHostNameAsBookieID() && useHostName) {\n+                LOG.error(\"Expects configuration useHostNameAsBookieID=true as the option value passed is 'hostname'\");\n+                return -1;\n+            } else if (bkConf.getUseHostNameAsBookieID() && !useHostName) {\n+                LOG.error(\"Expects configuration useHostNameAsBookieID=false as the option value passed is 'ip'\");\n+                return -1;\n+            }\n+            return updateBookieIdInCookie(bookieId, useHostName);\n+        }\n+\n+        private int updateBookieIdInCookie(final String bookieId, final boolean useHostname) throws IOException,\n+                InterruptedException {\n+            ZooKeeper zk = null;\n+            ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+            try {\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                ServerConfiguration conf = new ServerConfiguration(bkConf);\n+                String newBookieId = Bookie.getBookieAddress(conf).toString();\n+                // read oldcookie\n+                Versioned<Cookie> oldCookie = null;\n+                try {\n+                    conf.setUseHostNameAsBookieID(!useHostname);\n+                    oldCookie = Cookie.readFromZooKeeper(zk, conf);\n+                } catch (KeeperException.NoNodeException nne) {\n+                    LOG.error(\"Either cookie already updated with UseHostNameAsBookieID={} or no cookie exists!\",\n+                            useHostname, nne);\n+                    return -1;\n+                }\n+                Cookie newCookie = Cookie.newBuilder(oldCookie.getValue()).setBookieHost(newBookieId).build();\n+                boolean hasCookieUpdatedInDirs = verifyCookie(newCookie, journalDirectory);\n+                for (File dir : ledgerDirectories) {\n+                    hasCookieUpdatedInDirs &= verifyCookie(newCookie, dir);\n+                }\n+\n+                if (hasCookieUpdatedInDirs) {\n+                    try {\n+                        conf.setUseHostNameAsBookieID(useHostname);\n+                        Cookie.readFromZooKeeper(zk, conf);\n+                        // since newcookie exists, just do cleanup of oldcookie and return\n+                        conf.setUseHostNameAsBookieID(!useHostname);\n+                        oldCookie.getValue().deleteFromZooKeeper(zk, conf, oldCookie.getVersion());\n+                        return 0;\n+                    } catch (KeeperException.NoNodeException nne) {\n+                        LOG.debug(\"Ignoring, cookie will be written to zookeeper\");\n+                    }\n+                } else {\n+                    // writes newcookie to local dirs\n+                    newCookie.writeToDirectory(journalDirectory);\n+                    LOG.info(\"Updated cookie file present in journalDirectory {}\", journalDirectory);\n+                    for (File dir : ledgerDirectories) {\n+                        newCookie.writeToDirectory(dir);\n+                    }\n+                    LOG.info(\"Updated cookie file present in ledgerDirectories {}\", ledgerDirectories);\n+                }\n+                // writes newcookie to zookeeper\n+                conf.setUseHostNameAsBookieID(useHostname);\n+                newCookie.writeToZooKeeper(zk, conf, Version.NEW);\n+\n+                // delete oldcookie\n+                conf.setUseHostNameAsBookieID(!useHostname);\n+                oldCookie.getValue().deleteFromZooKeeper(zk, conf, oldCookie.getVersion());\n+            } catch (KeeperException ke) {\n+                LOG.error(\"KeeperException during cookie updation!\", ke);\n+                return -1;\n+            } catch (IOException ioe) {\n+                LOG.error(\"IOException during cookie updation!\", ioe);\n+                return -1;\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+            return 0;\n+        }\n+\n+        private boolean getOptionalValue(String optValue, String optName) {\n+            if (StringUtils.equals(optValue, optName)) {\n+                return true;\n+            }\n+            return false;\n+        }\n+\n+        private boolean verifyCookie(Cookie oldCookie, File dir) throws IOException {\n+            try {\n+                Cookie cookie = Cookie.readFromDirectory(dir);\n+                cookie.verify(oldCookie);\n+            } catch (InvalidCookieException e) {\n+                return false;\n+            }\n+            return true;\n+        }\n+    }\n+\n     final Map<String, MyCommand> commands = new HashMap<String, MyCommand>();\n     {\n         commands.put(CMD_METAFORMAT, new MetaFormatCmd());\n@@ -1029,6 +1162,7 @@ int runCmd(CommandLine cmdLine) throws Exception {\n         commands.put(CMD_LASTMARK, new LastMarkCmd());\n         commands.put(CMD_AUTORECOVERY, new AutoRecoveryCmd());\n         commands.put(CMD_LISTBOOKIES, new ListBookiesCmd());\n+        commands.put(CMD_UPDATECOOKIE, new UpdateCookieCmd());\n         commands.put(CMD_HELP, new HelpCmd());\n     }\n "},{"sha":"9e77029e46622b0611a896b48375f6279b14d73a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/2d630bbd594de7a79afbf227ed41f84484a527f5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/2d630bbd594de7a79afbf227ed41f84484a527f5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=2d630bbd594de7a79afbf227ed41f84484a527f5","patch":"@@ -322,7 +322,17 @@ static Cookie readFromDirectory(File directory) throws IOException {\n         }\n     }\n \n-    private static String getZkPath(ServerConfiguration conf)\n+    /**\n+     * Returns cookie path in zookeeper\n+     *\n+     * @param conf\n+     *            configuration\n+     *          \n+     * @return cookie zk path\n+     *\n+     * @throws UnknownHostException\n+     */\n+    static String getZkPath(ServerConfiguration conf)\n             throws UnknownHostException {\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n                 + BookKeeperConstants.COOKIE_NODE;"},{"sha":"5eaf224a42e67bd1cba0e14365a95d6b10609522","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java","status":"added","additions":216,"deletions":0,"changes":216,"blob_url":"https://github.com/apache/bookkeeper/blob/2d630bbd594de7a79afbf227ed41f84484a527f5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/2d630bbd594de7a79afbf227ed41f84484a527f5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpdateCookieCmdTest.java?ref=2d630bbd594de7a79afbf227ed41f84484a527f5","patch":"@@ -0,0 +1,216 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.util.List;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.zookeeper.KeeperException;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This tests 'updatecookie' shell command\n+ */\n+public class UpdateCookieCmdTest extends BookKeeperClusterTestCase {\n+\n+    private final static Logger LOG = LoggerFactory.getLogger(UpdateCookieCmdTest.class);\n+\n+    public UpdateCookieCmdTest() {\n+        super(1);\n+    }\n+\n+    /**\n+     * updatecookie to hostname\n+     */\n+    @Test\n+    public void testUpdateCookieIpAddressToHostname() throws Exception {\n+        updateCookie(\"-bookieId\", \"hostname\", true);\n+    }\n+\n+    /**\n+     * updatecookie to ipaddress\n+     */\n+    @Test\n+    public void testUpdateCookieHostnameToIpAddress() throws Exception {\n+        updateCookie(\"-bookieId\", \"hostname\", true);\n+\n+        updateCookie(\"-b\", \"ip\", false);\n+\n+        // start bookie to ensure everything works fine\n+        ServerConfiguration conf = bsConfs.get(0);\n+        BookieServer restartBookie = startBookie(conf);\n+        restartBookie.shutdown();\n+    }\n+\n+    /**\n+     * updatecookie to invalid bookie id\n+     */\n+    @Test\n+    public void testUpdateCookieWithInvalidOption() throws Exception {\n+        String[] argv = new String[] { \"updatecookie\", \"-b\", \"invalidBookieID\" };\n+        final ServerConfiguration conf = bsConfs.get(0);\n+        updateCookie(argv, -1, conf);\n+\n+        argv = new String[] { \"updatecookie\", \"-b\" };\n+        updateCookie(argv, -1, conf);\n+\n+        argv = new String[] { \"updatecookie\" };\n+        updateCookie(argv, -1, conf);\n+\n+        // conf not updated\n+        argv = new String[] { \"updatecookie\", \"-b\", \"hostname\" };\n+        conf.setUseHostNameAsBookieID(false);\n+        updateCookie(argv, -1, conf);\n+\n+        argv = new String[] { \"updatecookie\", \"-b\", \"ip\" };\n+        conf.setUseHostNameAsBookieID(true);\n+        updateCookie(argv, -1, conf);\n+    }\n+\n+    /**\n+     * During first updatecookie it successfully created the hostname cookie but\n+     * it fails to delete the old ipaddress cookie. Here user will issue\n+     * updatecookie again, now it should be able to delete the old cookie\n+     * gracefully.\n+     */\n+    @Test\n+    public void testWhenBothIPaddressAndHostNameCookiesExists() throws Exception {\n+        updateCookie(\"-b\", \"hostname\", true);\n+\n+        // creates cookie with ipaddress\n+        ServerConfiguration conf = bsConfs.get(0);\n+        conf.setUseHostNameAsBookieID(true); // sets to hostname\n+        Cookie cookie = Cookie.readFromZooKeeper(zkc, conf).getValue();\n+        Cookie.Builder cookieBuilder = Cookie.newBuilder(cookie);\n+        conf.setUseHostNameAsBookieID(false); // sets to hostname\n+        final String newBookieHost = Bookie.getBookieAddress(conf).toString();\n+        cookieBuilder.setBookieHost(newBookieHost);\n+        cookieBuilder.build().writeToZooKeeper(zkc, conf, Version.NEW);\n+        verifyCookieInZooKeeper(conf, 2);\n+\n+        // again issue hostname cmd\n+        BookieShell bkShell = new BookieShell();\n+        conf.setUseHostNameAsBookieID(true); // sets to hostname\n+        bkShell.setConf(conf);\n+        String[] argv = new String[] { \"updatecookie\", \"-b\", \"hostname\" };\n+        Assert.assertEquals(\"Failed to return the error code!\", 0, bkShell.run(argv));\n+\n+        conf.setUseHostNameAsBookieID(true);\n+        cookie = Cookie.readFromZooKeeper(zkc, conf).getValue();\n+        Assert.assertFalse(\"Cookie has created with IP!\", cookie.isBookieHostCreatedFromIp());\n+        // ensure the old cookie is deleted\n+        verifyCookieInZooKeeper(conf, 1);\n+    }\n+\n+    /**\n+     * updatecookie to hostname\n+     */\n+    @Test\n+    public void testDuplicateUpdateCookieIpAddress() throws Exception {\n+        String[] argv = new String[] { \"updatecookie\", \"-b\", \"ip\" };\n+        final ServerConfiguration conf = bsConfs.get(0);\n+        conf.setUseHostNameAsBookieID(true);\n+        updateCookie(argv, -1, conf);\n+    }\n+\n+    @Test\n+    public void testWhenNoCookieExists() throws Exception {\n+        ServerConfiguration conf = bsConfs.get(0);\n+        BookieServer bks = bs.get(0);\n+        bks.shutdown();\n+\n+        String zkCookiePath = Cookie.getZkPath(conf);\n+        Assert.assertNotNull(\"Cookie path doesn't still exists!\", zkc.exists(zkCookiePath, false));\n+        zkc.delete(zkCookiePath, -1);\n+        Assert.assertNull(\"Cookie path still exists!\", zkc.exists(zkCookiePath, false));\n+\n+        BookieShell bkShell = new BookieShell();\n+        conf.setUseHostNameAsBookieID(true);\n+        bkShell.setConf(conf);\n+        String[] argv = new String[] { \"updatecookie\", \"-b\", \"hostname\" };\n+        Assert.assertEquals(\"Failed to return the error code!\", -1, bkShell.run(argv));\n+    }\n+\n+    private void verifyCookieInZooKeeper(ServerConfiguration conf, int expectedCount) throws KeeperException,\n+            InterruptedException {\n+        List<String> cookies;\n+        String bookieCookiePath1 = conf.getZkLedgersRootPath() + \"/\" + BookKeeperConstants.COOKIE_NODE;\n+        cookies = zkc.getChildren(bookieCookiePath1, false);\n+        Assert.assertEquals(\"Wrongly updated the cookie!\", expectedCount, cookies.size());\n+    }\n+\n+    private void updateCookie(String option, String optionVal, boolean useHostNameAsBookieID) throws Exception {\n+        ServerConfiguration conf = bsConfs.get(0);\n+        BookieServer bks = bs.get(0);\n+        bks.shutdown();\n+\n+        conf.setUseHostNameAsBookieID(!useHostNameAsBookieID);\n+        Cookie cookie = Cookie.readFromZooKeeper(zkc, conf).getValue();\n+        final boolean previousBookieID = cookie.isBookieHostCreatedFromIp();\n+        Assert.assertEquals(\"Wrong cookie!\", useHostNameAsBookieID, previousBookieID);\n+\n+        LOG.info(\"Perform updatecookie command\");\n+        ServerConfiguration newconf = new ServerConfiguration(conf);\n+        newconf.setUseHostNameAsBookieID(useHostNameAsBookieID);\n+        BookieShell bkShell = new BookieShell();\n+        bkShell.setConf(newconf);\n+        String[] argv = new String[] { \"updatecookie\", option, optionVal };\n+        Assert.assertEquals(\"Failed to return exit code!\", 0, bkShell.run(argv));\n+\n+        newconf.setUseHostNameAsBookieID(useHostNameAsBookieID);\n+        cookie = Cookie.readFromZooKeeper(zkc, newconf).getValue();\n+        Assert.assertEquals(\"Wrongly updated cookie!\", previousBookieID, !cookie.isBookieHostCreatedFromIp());\n+        Assert.assertEquals(\"Wrongly updated cookie!\", useHostNameAsBookieID, !cookie.isBookieHostCreatedFromIp());\n+        verifyCookieInZooKeeper(newconf, 1);\n+\n+        File journalDir = Bookie.getCurrentDirectory(conf.getJournalDir());\n+        Cookie jCookie = Cookie.readFromDirectory(journalDir);\n+        jCookie.verify(cookie);\n+        File[] ledgerDir = Bookie.getCurrentDirectories(conf.getLedgerDirs());\n+        for (File dir : ledgerDir) {\n+            Cookie lCookie = Cookie.readFromDirectory(dir);\n+            lCookie.verify(cookie);\n+        }\n+    }\n+\n+    private void updateCookie(String[] argv, int exitCode, ServerConfiguration conf) throws KeeperException,\n+            InterruptedException, IOException, UnknownHostException, Exception {\n+        BookieServer bks = bs.get(0);\n+        bks.shutdown();\n+\n+        LOG.info(\"Perform updatecookie command\");\n+        BookieShell bkShell = new BookieShell();\n+        bkShell.setConf(conf);\n+\n+        Assert.assertEquals(\"Failed to return exit code!\", exitCode, bkShell.run(argv));\n+    }\n+}"}]}

