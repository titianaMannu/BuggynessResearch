{"sha":"2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZWEyZmQwOWYyYmJiZWExOGUxODNjOGFmOGU4MmU4MWVlZTlmZTc5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-08T17:58:18Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-08T17:58:18Z"},"message":"BOOKKEEPER-107: memory leak in HostAddress of hedwig c++ client (Sijie Guo via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1199368 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4c07339166b093a5568d55604b7abf46e5b6e4d8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4c07339166b093a5568d55604b7abf46e5b6e4d8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","html_url":"https://github.com/apache/bookkeeper/commit/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","url":"https://api.github.com/repos/apache/bookkeeper/commits/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","html_url":"https://github.com/apache/bookkeeper/commit/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2"}],"stats":{"total":42,"additions":27,"deletions":15},"files":[{"sha":"22c74480406431f6d5ac14a56368a40ce92ef8df","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","patch":"@@ -80,6 +80,8 @@ BUGFIXES:\n \n   BOOKKEEPER-71: hedwig c++ client does not build . (ivank)\n \n+  BOOKKEEPER-107: memory leak in HostAddress of hedwig c++ client (Sijie Guo via ivank)\n+\n IMPROVEMENTS:\n \n  BOOKKEEPER-28: Create useful startup scripts for bookkeeper and hedwig (ivank)"},{"sha":"ce3e57b0213418d67da209562b383aaaa184cd1a","filename":"hedwig-client/src/main/cpp/lib/clientimpl.cpp","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/hedwig-client/src/main/cpp/lib/clientimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/hedwig-client/src/main/cpp/lib/clientimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.cpp?ref=2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","patch":"@@ -216,6 +216,7 @@ void ClientImpl::Destroy() {\n ClientImpl::ClientImpl(const Configuration& conf) \n   : conf(conf), publisher(NULL), subscriber(NULL), counterobj(), shuttingDownFlag(false)\n {\n+  defaultHost = HostAddress::fromString(conf.get(Configuration::DEFAULT_SERVER, DEFAULT_SERVER_DEFAULT_VAL));\n }\n \n Subscriber& ClientImpl::getSubscriber() {\n@@ -294,9 +295,13 @@ ClientImpl::~ClientImpl() {\n DuplexChannelPtr ClientImpl::createChannel(const std::string& topic, const ChannelHandlerPtr& handler) {\n   // get the host address\n   // create a channel to the host\n-  HostAddress addr = topic2host[topic];\n+  HostAddress addr;\n+  {\n+    boost::lock_guard<boost::shared_mutex> lock(topic2host_lock);\n+    addr = topic2host[topic];\n+  }\n   if (addr.isNullHost()) {\n-    addr = HostAddress::fromString(conf.get(Configuration::DEFAULT_SERVER, DEFAULT_SERVER_DEFAULT_VAL));\n+    addr = defaultHost;\n     setHostForTopic(topic, addr);\n   }\n \n@@ -316,9 +321,13 @@ DuplexChannelPtr ClientImpl::createChannel(const std::string& topic, const Chann\n }\n \n DuplexChannelPtr ClientImpl::getChannel(const std::string& topic) {\n-  HostAddress addr = topic2host[topic];\n+  HostAddress addr;\n+  {\n+    boost::lock_guard<boost::shared_mutex> lock(topic2host_lock);\n+    addr = topic2host[topic];\n+  }\n   if (addr.isNullHost()) {\n-    addr = HostAddress::fromString(conf.get(Configuration::DEFAULT_SERVER, DEFAULT_SERVER_DEFAULT_VAL));\n+    addr = defaultHost;\n     setHostForTopic(topic, addr);\n   }  \n   DuplexChannelPtr channel = host2channel[addr];"},{"sha":"28940132d841e96aabaf153cf0c53021874c89bd","filename":"hedwig-client/src/main/cpp/lib/clientimpl.h","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/hedwig-client/src/main/cpp/lib/clientimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/hedwig-client/src/main/cpp/lib/clientimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.h?ref=2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","patch":"@@ -139,6 +139,7 @@ namespace Hedwig {\n     typedef std::tr1::unordered_multimap<HostAddress, std::string, HostAddressHash > Host2TopicsMap;\n     Host2TopicsMap host2topics;\n     boost::shared_mutex host2topics_lock;\n+    HostAddress defaultHost;\n \n     std::tr1::unordered_map<HostAddress, DuplexChannelPtr, HostAddressHash > host2channel;\n     boost::shared_mutex host2channel_lock;"},{"sha":"3ef9759fa61966fc0d8b5c80413270a8d5c6b551","filename":"hedwig-client/src/main/cpp/lib/util.cpp","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/hedwig-client/src/main/cpp/lib/util.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/hedwig-client/src/main/cpp/lib/util.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/util.cpp?ref=2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","patch":"@@ -40,7 +40,6 @@ const int DEFAULT_PORT = 4080;\n const int DEFAULT_SSL_PORT = 9876;\n \n HostAddress::HostAddress() : initialised(false), address_str() {\n-  memset(&socket_addr, 0, sizeof(struct sockaddr_in));\n }\n \n HostAddress::~HostAddress() {\n@@ -63,18 +62,13 @@ const std::string& HostAddress::getAddressString() const {\n }\n    \n uint32_t HostAddress::ip() const {\n-  return ntohl(socket_addr.sin_addr.s_addr);;\n+  return host_ip;\n }\n \n uint16_t HostAddress::port() const {\n-  return ntohs(socket_addr.sin_port);\n-}\n-\n-const struct sockaddr_in& HostAddress::socketAddress() const {\n-  return socket_addr;\n+  return host_port;\n }\n \n-\n void HostAddress::parse_string() {\n   char* url = strdup(address_str.c_str());\n \n@@ -127,12 +121,18 @@ void HostAddress::parse_string() {\n   }\n \n   sockaddr_in* sa_ptr = (sockaddr_in*)addr->ai_addr;\n+\n+  struct sockaddr_in socket_addr;\n+  memset(&socket_addr, 0, sizeof(struct sockaddr_in));\n   socket_addr = *sa_ptr;\n   socket_addr.sin_port = htons(port); \n   //socket_addr.sin_family = AF_INET;\n \n+  host_ip = ntohl(socket_addr.sin_addr.s_addr);\n+  host_port = ntohs(socket_addr.sin_port);\n+\n+  freeaddrinfo(addr);\n   free((void*)url);\n-  free((void*)addr);\n }\n \n HostAddress HostAddress::fromString(std::string str) {"},{"sha":"759d528f0f1ce51e9afaad71ccabf7cbf260a3e5","filename":"hedwig-client/src/main/cpp/lib/util.h","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/hedwig-client/src/main/cpp/lib/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79/hedwig-client/src/main/cpp/lib/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/util.h?ref=2ea2fd09f2bbbea18e183c8af8e82e81eee9fe79","patch":"@@ -53,7 +53,6 @@ namespace Hedwig {\n     const std::string& getAddressString() const;\n     uint32_t ip() const;\n     uint16_t port() const;\n-    const sockaddr_in& socketAddress() const;\n \n     static HostAddress fromString(std::string host);\n \n@@ -63,7 +62,8 @@ namespace Hedwig {\n     \n     bool initialised;\n     std::string address_str;\n-    struct sockaddr_in socket_addr;\n+    uint32_t host_ip;\n+    uint16_t host_port;\n   };\n \n   /**"}]}

