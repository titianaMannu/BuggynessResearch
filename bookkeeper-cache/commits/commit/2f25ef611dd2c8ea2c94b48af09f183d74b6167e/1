{"sha":"2f25ef611dd2c8ea2c94b48af09f183d74b6167e","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZjI1ZWY2MTFkZDJjOGVhMmM5NGI0OGFmMDlmMTgzZDc0YjYxNjdl","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-04-20T17:18:36Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-04-20T17:18:36Z"},"message":"BOOKKEEPER-173: Uncontrolled number of threads in bookkeeper (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1328452 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"caea203aa7cd47fb5368c63d6d58ae61c6b8dfcf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/caea203aa7cd47fb5368c63d6d58ae61c6b8dfcf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2f25ef611dd2c8ea2c94b48af09f183d74b6167e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2f25ef611dd2c8ea2c94b48af09f183d74b6167e","html_url":"https://github.com/apache/bookkeeper/commit/2f25ef611dd2c8ea2c94b48af09f183d74b6167e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"57a62a1c3ce151e1354a2a4ed212e9e8965928bf","url":"https://api.github.com/repos/apache/bookkeeper/commits/57a62a1c3ce151e1354a2a4ed212e9e8965928bf","html_url":"https://github.com/apache/bookkeeper/commit/57a62a1c3ce151e1354a2a4ed212e9e8965928bf"}],"stats":{"total":125,"additions":100,"deletions":25},"files":[{"sha":"fe122a0573d82787ad7cc9f848f7d679d5bc44f1","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=2f25ef611dd2c8ea2c94b48af09f183d74b6167e","patch":"@@ -134,6 +134,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-218: Provide journal manager to manage journal related operations (sijie)\n \n+\tBOOKKEEPER-173: Uncontrolled number of threads in bookkeeper (sijie via fpj)\n+\n       hedwig-server/\n \n         BOOKKEEPER-77: Add a console client for hedwig (Sijie Guo via ivank)"},{"sha":"5c14caf1211cd9a5c773c364221f4bc51b850229","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=2f25ef611dd2c8ea2c94b48af09f183d74b6167e","patch":"@@ -78,10 +78,9 @@\n     final BookieClient bookieClient;\n     final BookieWatcher bookieWatcher;\n \n-    OrderedSafeExecutor callbackWorker = new OrderedSafeExecutor(Runtime\n-            .getRuntime().availableProcessors());\n-    final OrderedSafeExecutor mainWorkerPool = new OrderedSafeExecutor(Runtime\n-            .getRuntime().availableProcessors());\n+    // used to call bookkeeper op in callback\n+    final OrderedSafeExecutor callbackWorker;\n+    final OrderedSafeExecutor mainWorkerPool;\n \n     // Ledger manager responsible for how to store ledger meta data\n     final LedgerManager ledgerManager;\n@@ -140,6 +139,8 @@ public void process(WatchedEvent event) {\n                                                                 Executors.newCachedThreadPool());\n         bookieWatcher = new BookieWatcher(this);\n         bookieWatcher.readBookiesBlocking();\n+        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n+        callbackWorker = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n         // initialize ledger meta manager\n         ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n@@ -195,6 +196,8 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFac\n         this.channelFactory = channelFactory;\n         bookieWatcher = new BookieWatcher(this);\n         bookieWatcher.readBookiesBlocking();\n+        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n+        callbackWorker = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n         // initialize ledger meta manager\n         ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);"},{"sha":"85a776fea17439e74f350435fd9c3e1282e88dd2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=2f25ef611dd2c8ea2c94b48af09f183d74b6167e","patch":"@@ -40,6 +40,9 @@\n     protected final static String CLIENT_TCP_NODELAY = \"clientTcpNoDelay\";\n     protected final static String READ_TIMEOUT = \"readTimeout\";\n \n+    // Number Woker Threads\n+    protected final static String NUM_WORKER_THREADS = \"numWorkerThreads\";\n+\n     /**\n      * Construct a default client-side configuration\n      */\n@@ -235,4 +238,31 @@ public ClientConfiguration setReadTimeout(int timeout) {\n         setProperty(READ_TIMEOUT, Integer.toString(timeout));\n         return this;\n     }\n+\n+    /**\n+     * Get the number of worker threads. This is the number of\n+     * worker threads used by bookkeeper client to submit operations.\n+     *\n+     * @return the number of worker threads\n+     */\n+    public int getNumWorkerThreads() {\n+        return getInt(NUM_WORKER_THREADS, Runtime.getRuntime().availableProcessors());\n+    }\n+\n+    /**\n+     * Set the number of worker threads.\n+     *\n+     * <p>\n+     * NOTE: setting the number of worker threads after BookKeeper object is constructed\n+     * will not take any effect on the number of threads in the pool.\n+     * </p>\n+     *\n+     * @see #getNumWorkerThreads()\n+     * @param numThreads number of worker threads used for bookkeeper\n+     * @return client configuration\n+     */\n+    public ClientConfiguration setNumWorkerThreads(int numThreads) {\n+        setProperty(NUM_WORKER_THREADS, numThreads);\n+        return this;\n+    }\n }"},{"sha":"8ab3177888942d12799c79ea598d67f1ac29d596","filename":"doc/bookieConfigParams.textile","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/doc/bookieConfigParams.textile","raw_url":"https://github.com/apache/bookkeeper/raw/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/doc/bookieConfigParams.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookieConfigParams.textile?ref=2f25ef611dd2c8ea2c94b48af09f183d74b6167e","patch":"@@ -0,0 +1,46 @@\n+Title:        Bookie Configuration Parameters\n+Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License. You may\n+        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n+        .        \n+        Unless required by applicable law or agreed to in writing,\n+        software distributed under the License is distributed on an \"AS IS\"\n+        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+        implied. See the License for the specific language governing permissions\n+        and limitations under the License.\n+        .\n+\n+h1. Bookie Configuration Parameters\n+\n+This page contains detailed information about configuration parameters used for configuring a bookie server. There is an example in \"bookkeeper-server/conf/bk_server.conf\". \n+\n+h3. General parameters\n+\n+| @zkServers@ | A list of one of more servers on which zookeeper is running. The server list can be comma separated values, e.g., zk1:2181,zk2:2181,zk3:2181 |\n+| @zkTimeout@ | ZooKeeper client session timeout in milliseconds. Bookie server will exit if it received SESSION_EXPIRED because it was partitioned off from ZooKeeper for more than the session timeout JVM garbage collection, disk I/O will cause SESSION_EXPIRED. Increment this value could help avoiding this issue. The default value is 10,000. |\n+| @bookiePort@        |Port that bookie server listens on. The default value is 3181.|\n+| @journalDir@        | Directory Bookkeeper outputs its write ahead log, ideally in a dedicated device. The default value is \"/tmp/bk-txn\". |\n+| @ledgerDirs@        | Directory Bookkeeper outputs ledger snapshots could define multiple directories to store snapshots, comma separated. For example: /tmp/bk1-data,/tmp/bk2-data. Ideally ledger dirs and journal dir are each in a differet device, which reduce the contention between random i/o and sequential write. It is possible to run with a single disk,  but performance will be significantly lower.|\n+| @logSizeLimit@      | Maximum file size of entry logger, in bytes. A new entry log file will be created when the old one reaches the file size limitation. The default value is 2GB. |\n+| @journalMaxSizeMB@  |  Maximum file size of journal file, in mega bytes. A new journal file will be created when the old one reaches the file size limitation. The default value is 2kB. |\n+| @journalMaxBackups@ |  Max number of old journal file to keep. Keeping a number of old journal files might help data recovery in some special cases. The default value is 5. |\n+| @gcWaitTime@        | Interval to trigger next garbage collection, in milliseconds. Since garbage collection is running in the background, running the garbage collector too frequently hurts performance. It is best to set its value high enough if there is sufficient disk capacity.|\n+| @flushInterval@ | Interval to flush ledger index pages to disk, in milliseconds. Flushing index files will introduce random disk I/O. Consequently, it is important to have journal dir and ledger dirs each on different devices. However,  if it necessary to have journal dir and ledger dirs on the same device, one option is to increment the flush interval to get higher performance. Upon a failure, the bookie will take longer to recover. |\n+| @bookieDeathWatchInterval@ | Interval to check whether a bookie is dead or not, in milliseconds. |\n+\n+h3. NIO server settings\n+\n+| @serverTcpNoDelay@ | This settings is used to enabled/disabled Nagle's algorithm, which is a means of improving the efficiency of TCP/IP networks by reducing the number of packets that need to be sent over the network. If you are sending many small messages, such that more than one can fit in a single IP packet, setting server.tcpnodelay to false to enable Nagle algorithm can provide better performance. Default value is true. |\n+\n+h3. Ledger cache settings\n+\n+| @openFileLimit@ | Maximum number of ledger index files that can be opened in a bookie. If the number of ledger index files reaches this limit, the bookie starts to flush some ledger indexes from memory to disk. If flushing happens too frequently, then performance is affected. You can tune this number to improve performance according. |\n+| @pageSize@ | Size of an index page in ledger cache, in bytes. A larger index page can improve performance when writing page to disk, which is efficient when you have small number of ledgers and these ledgers have a similar number of entries. With a large number of ledgers and a few entries per ledger, a smaller index page would improves memory usage. |\n+| @pageLimit@ | Maximum number of index pages to store in the ledger cache. If the number of index pages reaches this limit, bookie server starts to flush ledger indexes from memory to disk. Incrementing this value is an option when flushing becomes frequent. It is important to make sure, though, that pageLimit*pageSize is not more than JVM max memory limit; otherwise it will raise an OutOfMemoryException. In general, incrementing pageLimit, using smaller index page would gain better performance in the case of a large number of ledgers with few entries per ledger. If pageLimit is -1, a bookie uses 1/3 of the JVM memory to compute the maximum number of index pages. |\n+\n+h3. Ledger manager settings\n+\n+| @ledgerManagerType@ | What kind of ledger manager is used to manage how ledgers are stored, managed and garbage collected. See \"BookKeeper Internals\":./bookkeeperInternals.html for detailed info. Default is flat. |\n+| @zkLedgersRootPath@ | Root zookeeper path to store ledger metadata. Default is /ledgers. |\n+\n+"},{"sha":"e8844810e0b26866cabe16059d65f11d9d5c2acd","filename":"doc/bookkeeperConfig.textile","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/doc/bookkeeperConfig.textile","raw_url":"https://github.com/apache/bookkeeper/raw/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/doc/bookkeeperConfig.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperConfig.textile?ref=2f25ef611dd2c8ea2c94b48af09f183d74b6167e","patch":"@@ -41,7 +41,7 @@ The important parameters are:\n * @journalDir@, Path for Log Device (stores bookie write-ahead log); \n * @ledgerDir@, Path for Ledger Device (stores ledger entries); \n \n-p. Ideally, @journalDir@ and @ledgerDir@ are each in a different device. See \"BookKeeper Configuration Parameters\":./bookkeeperConfigParams.html for a full list of configuration parameters.\n+p. Ideally, @journalDir@ and @ledgerDir@ are each in a different device. See \"Bookie Configuration Parameters\":./bookieConfigParams.html for a full list of configuration parameters.\n \n h3. Upgrading\n "},{"sha":"eb76ca4cc2a49c7aa23d596322c555200b812caa","filename":"doc/bookkeeperConfigParams.textile","status":"modified","additions":12,"deletions":19,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/doc/bookkeeperConfigParams.textile","raw_url":"https://github.com/apache/bookkeeper/raw/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/doc/bookkeeperConfigParams.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperConfigParams.textile?ref=2f25ef611dd2c8ea2c94b48af09f183d74b6167e","patch":"@@ -12,35 +12,28 @@ Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n \n h1. BookKeeper Configuration Parameters\n \n-This page contains detailed information about configuration parameters used for configuring a BookKeeper bookie. There is an example in \"bookkeeper-server/conf/bk_server.conf\". \n+This page contains detailed information about configuration parameters used for configuring a BookKeeper client.\n \n h3. General parameters\n \n | @zkServers@ | A list of one of more servers on which zookeeper is running. The server list can be comma separated values, e.g., zk1:2181,zk2:2181,zk3:2181 |\n-| @zkTimeout@ | ZooKeeper client session timeout in milliseconds. Bookie server will exit if it received SESSION_EXPIRED because it was partitioned off from ZooKeeper for more than the session timeout JVM garbage collection, disk I/O will cause SESSION_EXPIRED. Increment this value could help avoiding this issue. The default value is 10,000. |\n-| @bookiePort@        |Port that bookie server listens on. The default value is 3181.|\n-| @journalDir@        | Directory Bookkeeper outputs its write ahead log, ideally in a dedicated device. The default value is \"/tmp/bk-txn\". |\n-| @ledgerDirs@        | Directory Bookkeeper outputs ledger snapshots could define multiple directories to store snapshots, comma separated. For example: /tmp/bk1-data,/tmp/bk2-data. Ideally ledger dirs and journal dir are each in a differet device, which reduce the contention between random i/o and sequential write. It is possible to run with a single disk,  but performance will be significantly lower.|\n-| @logSizeLimit@      | Maximum file size of entry logger, in bytes. A new entry log file will be created when the old one reaches the file size limitation. The default value is 2GB. |\n-| @journalMaxSizeMB@  |  Maximum file size of journal file, in mega bytes. A new journal file will be created when the old one reaches the file size limitation. The default value is 2kB. |\n-| @journalMaxBackups@ |  Max number of old journal file to keep. Keeping a number of old journal files might help data recovery in some special cases. The default value is 5. |\n-| @gcWaitTime@        | Interval to trigger next garbage collection, in milliseconds. Since garbage collection is running in the background, running the garbage collector too frequently hurts performance. It is best to set its value high enough if there is sufficient disk capacity.|\n-| @flushInterval@ | Interval to flush ledger index pages to disk, in milliseconds. Flushing index files will introduce random disk I/O. Consequently, it is important to have journal dir and ledger dirs each on different devices. However,  if it necessary to have journal dir and ledger dirs on the same device, one option is to increment the flush interval to get higher performance. Upon a failure, the bookie will take longer to recover. |\n-| @bookieDeathWatchInterval@ | Interval to check whether a bookie is dead or not, in milliseconds. |\n+| @zkTimeout@ | ZooKeeper client session timeout in milliseconds. The default value is 10,000. |\n+| @throttle@ | A throttle value is used to prevent running out of memory when producing too many requests than the capability of bookie servers can handle. The default is 5,000. |\n+| @readTimeout@ | This is the number of seconds bookkeeper client wait without hearing a response from a bookie before client consider it failed. The default is 5 seconds. |\n+| @numWorkerThreads@ | This is the number of worker threads used by bookkeeper client to submit operations. The default value is the number of available processors. |\n \n h3. NIO server settings\n \n-| @serverTcpNoDelay@ | This settings is used to enabled/disabled Nagle's algorithm, which is a means of improving the efficiency of TCP/IP networks by reducing the number of packets that need to be sent over the network. If you are sending many small messages, such that more than one can fit in a single IP packet, setting server.tcpnodelay to false to enable Nagle algorithm can provide better performance. Default value is true. |\n-\n-h3. Ledger cache settings\n-\n-| @openFileLimit@ | Maximum number of ledger index files that can be opened in a bookie. If the number of ledger index files reaches this limit, the bookie starts to flush some ledger indexes from memory to disk. If flushing happens too frequently, then performance is affected. You can tune this number to improve performance according. |\n-| @pageSize@ | Size of an index page in ledger cache, in bytes. A larger index page can improve performance when writing page to disk, which is efficient when you have small number of ledgers and these ledgers have a similar number of entries. With a large number of ledgers and a few entries per ledger, a smaller index page would improves memory usage. |\n-| @pageLimit@ | Maximum number of index pages to store in the ledger cache. If the number of index pages reaches this limit, bookie server starts to flush ledger indexes from memory to disk. Incrementing this value is an option when flushing becomes frequent. It is important to make sure, though, that pageLimit*pageSize is not more than JVM max memory limit; otherwise it will raise an OutOfMemoryException. In general, incrementing pageLimit, using smaller index page would gain better performance in the case of a large number of ledgers with few entries per ledger. If pageLimit is -1, a bookie uses 1/3 of the JVM memory to compute the maximum number of index pages. |\n+| @clientTcpNoDelay@ | This settings is used to enabled/disabled Nagle's algorithm, which is a means of improving the efficiency of TCP/IP networks by reducing the number of packets that need to be sent over the network. If you are sending many small messages, such that more than one can fit in a single IP packet, setting server.tcpnodelay to false to enable Nagle algorithm can provide better performance. Default value is true. |\n \n h3. Ledger manager settings\n \n-| @ledgerManagerType@ | What kind of ledger manager is used to manage how ledgers are stored, managed and garbage collected. See \"BookKeeper Internals\":./bookkeeperInternals.html for detailed info. Default is flat. |\n+| @ledgerManagerType@ | This parameter determines the type of ledger manager used to manage how ledgers are stored, manipulated, and garbage collected. See \"BookKeeper Internals\":./bookkeeperInternals.html for detailed info. Default value is flat. |\n | @zkLedgersRootPath@ | Root zookeeper path to store ledger metadata. Default is /ledgers. |\n \n+h3. Bookie recovery settings\n+\n+Currently bookie recovery tool needs a digest type and passwd to open ledgers to do recovery. Currently, bookkeeper assumes that all ledgers were created with the same DigestType and Password. In the future, it needs to know for each ledger, what was the DigestType and Password used to create it before opening it.\n \n+| @digestType@ | Digest type used to open ledgers from bookkie recovery tool. |\n+| @passwd@ | Password used to open ledgers from bookie recovery tool. |"},{"sha":"7fefe112702df2889d1ba824805b0ca5248c5f2a","filename":"doc/index.textile","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/doc/index.textile","raw_url":"https://github.com/apache/bookkeeper/raw/2f25ef611dd2c8ea2c94b48af09f183d74b6167e/doc/index.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/index.textile?ref=2f25ef611dd2c8ea2c94b48af09f183d74b6167e","patch":"@@ -22,7 +22,8 @@ h1. Apache BookKeeper documentation\n * \"Getting started\":./bookkeeperStarted.html\n * \"Programmer's Guide\":./bookkeeperProgrammer.html\n * \"Admin Guide\":./bookkeeperConfig.html\n-* \"Bookie Server Configuration Parameters\":./bookkeeperConfigParams.html\n+* \"Bookie Server Configuration Parameters\":./bookieConfigParams.html\n+* \"BookKeeper Configuration Parameters\":./bookkeeperConfigParams.html\n * \"BookKeeper Internals\":./bookkeeperInternals.html\n * \"Bookie Recovery\":./bookieRecovery.html\n * \"Using BookKeeper stream library\":./bookkeeperStream.html"}]}

