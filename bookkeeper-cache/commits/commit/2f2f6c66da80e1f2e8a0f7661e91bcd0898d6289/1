{"sha":"2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZjJmNmM2NmRhODBlMWYyZThhMGY3NjYxZTkxYmNkMDg5OGQ2Mjg5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-10-18T08:42:46Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-10-18T08:42:46Z"},"message":"BOOKKEEPER-68: Conditional setData (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1185532 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"11a0a214990a841b48a6190901d7b3228a85a20c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/11a0a214990a841b48a6190901d7b3228a85a20c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","html_url":"https://github.com/apache/bookkeeper/commit/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c980c700d1313911903df3d4c3d48cf8da441827","url":"https://api.github.com/repos/apache/bookkeeper/commits/c980c700d1313911903df3d4c3d48cf8da441827","html_url":"https://github.com/apache/bookkeeper/commit/c980c700d1313911903df3d4c3d48cf8da441827"}],"stats":{"total":210,"additions":192,"deletions":18},"files":[{"sha":"52dcc08f7031c4c833b4c37a7d26c777b611990b","filename":"CHANGES.txt","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -39,6 +39,8 @@ BUGFIXES:\n   BOOKKEEPER-57: NullPointException at bookie.zk@EntryLogger (xulei via ivank)\n \n   BOOKKEEPER-59: Race condition in netty code allocates and orphans resources (BK-5 revisited) (ivank via fpj)\n+  \n+  BOOKKEEPER-68: Conditional setData (fpj via ivank)\n \n  hedwig-server/\n \n@@ -54,14 +56,14 @@ BUGFIXES:\n \n IMPROVEMENTS:\n \n- BOOKKEEPER-65: fix dependencies on incompatible versions of netty (mmorel via ivank)\n-\n  BOOKKEEPER-28: Create useful startup scripts for bookkeeper and hedwig (ivank)\n \n  BOOKKEEPER-26: Indentation is all messed up in the BookKeeper code (ivank via fpj)\n \n  BOOKKEEPER-41: Generation of packages for distribution (ivank via fpj)\n \n+ BOOKKEEPER-65: fix dependencies on incompatible versions of netty (mmorel via ivank)\n+\n  hedwig-client/\n \n   BOOKKEEPER-44: Reuse publish channel to default server to avoid too many connect requests to default server when lots of producers came in same time (Sijie Guo via breed)"},{"sha":"56b7a8c928988037a13542385eb3f6875204f6d2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -161,6 +161,7 @@ public void processResult(int rc, String path, Object ctx, String name) {\n      * @see org.apache.zookeeper.AsyncCallback.StatCallback#processResult(int, String, Object, Stat)\n      */\n     public void processResult(int rc, String path, Object ctx, Stat stat) {\n+        metadata.znodeVersion = stat.getVersion();\n         cb.createComplete(rc, lh, this.ctx);\n     }\n "},{"sha":"959df737e0c12d5b851f47188a2081585cbd888a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":18,"deletions":3,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -192,21 +192,30 @@ public DistributionSchedule getDistributionSchedule() {\n     }\n \n     public void writeLedgerConfig(StatCallback callback, Object ctx) {\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Writing metadata to ZooKeeper: \" + this.ledgerId + \", \" + metadata.getZnodeVersion());\n+        }\n+        \n         bk.getZkHandle().setData(StringUtils.getLedgerNodePath(ledgerId),\n-                                 metadata.serialize(), -1, callback, ctx);\n+                                 metadata.serialize(), metadata.getZnodeVersion(), \n+                                 callback, ctx);\n     }\n \n     /**\n      * Close this ledger synchronously.\n      *\n      */\n-    public void close() throws InterruptedException {\n+    public void close() \n+            throws InterruptedException, BKException {\n         SyncCounter counter = new SyncCounter();\n         counter.inc();\n \n         asyncClose(this, counter);\n \n         counter.block(0);\n+        if (counter.getrc() != BKException.Code.OK) {\n+            throw BKException.create(counter.getrc());\n+        }\n     }\n \n     /**\n@@ -254,9 +263,11 @@ public void safeRun() {\n                     public void processResult(int rc, String path, Object subctx,\n                     Stat stat) {\n                         if (rc != KeeperException.Code.OK.intValue()) {\n+                            LOG.warn(\"Conditional write failed: \" + KeeperException.Code.get(rc));\n                             cb.closeComplete(BKException.Code.ZKException, LedgerHandle.this,\n                                              ctx);\n                         } else {\n+                            metadata.updateZnodeStatus(stat);\n                             cb.closeComplete(BKException.Code.OK, LedgerHandle.this, ctx);\n                         }\n                     }\n@@ -542,7 +553,7 @@ void handleBookieFailure(InetSocketAddress addr, final int bookieIndex) {\n \n         writeLedgerConfig(new StatCallback() {\n             @Override\n-            public void processResult(final int rc, String path, Object ctx, Stat stat) {\n+            public void processResult(final int rc, String path, Object ctx, final Stat stat) {\n \n                 bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {\n                     @Override\n@@ -555,6 +566,7 @@ public void safeRun() {\n                             return;\n                         }\n \n+                        metadata.updateZnodeStatus(stat);\n                         for (PendingAddOp pendingAddOp : pendingAddOps) {\n                             pendingAddOp.unsetSuccessAndSendWriteRequest(bookieIndex);\n                         }\n@@ -581,6 +593,9 @@ void recover(GenericCallback<Void> cb) {\n \n         @Override\n         public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n+            if (rc != KeeperException.Code.OK.intValue()) {\n+                LOG.warn(\"Close failed: \" + BKException.getMessage(rc));\n+            }\n             // noop\n         }\n     }"},{"sha":"0c3a9700e6069354ddeda448e5fc8bf9f5c90a11","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":31,"deletions":3,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -26,6 +26,7 @@\n import java.util.TreeMap;\n \n import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.zookeeper.data.Stat;\n import org.apache.log4j.Logger;\n \n /**\n@@ -49,7 +50,8 @@\n     long close;\n     private SortedMap<Long, ArrayList<InetSocketAddress>> ensembles = new TreeMap<Long, ArrayList<InetSocketAddress>>();\n     ArrayList<InetSocketAddress> currentEnsemble;\n-\n+    volatile int znodeVersion = -1;\n+    \n     public LedgerMetadata(int ensembleSize, int quorumSize) {\n         this.ensembleSize = ensembleSize;\n         this.quorumSize = quorumSize;\n@@ -155,22 +157,30 @@ long getNextEnsembleChange(long entryId) {\n      *             if the given byte[] cannot be parsed\n      */\n \n-    static LedgerMetadata parseConfig(byte[] bytes) throws IOException {\n+    static LedgerMetadata parseConfig(byte[] bytes, int version) throws IOException {\n \n         LedgerMetadata lc = new LedgerMetadata();\n         String config = new String(bytes);\n \n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Parsing Config: \" + config);\n         }\n-\n+        \n         String lines[] = config.split(lSplitter);\n \n         if (lines.length < 2) {\n             throw new IOException(\"Quorum size or ensemble size absent from config: \" + config);\n         }\n \n         try {\n+            /*\n+             * Updating the znode version\n+             */\n+            lc.znodeVersion = version;\n+            \n+            /*\n+             * Updating metadata info\n+             */\n             lc.quorumSize = new Integer(lines[0]);\n             lc.ensembleSize = new Integer(lines[1]);\n             lc.length = new Long(lines[2]);\n@@ -194,5 +204,23 @@ static LedgerMetadata parseConfig(byte[] bytes) throws IOException {\n         }\n         return lc;\n     }\n+    \n \n+    /**\n+     * Updates the status of this metadata in ZooKeeper.\n+     * \n+     * @param stat\n+     */\n+    public void updateZnodeStatus(Stat stat) {\n+        this.znodeVersion = stat.getVersion();\n+    }\n+    \n+    /**\n+     * Returns the last znode version.\n+     * \n+     * @return int znode version\n+     */\n+    public int getZnodeVersion() {\n+        return this.znodeVersion;\n+    }\n }"},{"sha":"07da4f74dd115f3ac570bc5a155e39ca8d31f893","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -103,7 +103,7 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n \n         LedgerMetadata metadata;\n         try {\n-            metadata = LedgerMetadata.parseConfig(data);\n+            metadata = LedgerMetadata.parseConfig(data, stat.getVersion());\n         } catch (IOException e) {\n             LOG.error(\"Could not parse ledger metadata for ledger: \" + ledgerId, e);\n             cb.openComplete(BKException.Code.ZKException, null, this.ctx);"},{"sha":"7465c52412fbe691d6ffc0f1d1099851b5a2aae1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":17,"deletions":8,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -21,12 +21,15 @@\n import java.util.Enumeration;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n import org.apache.bookkeeper.client.LedgerHandle.NoopCloseCallback;\n import org.apache.bookkeeper.client.DigestManager.RecoveryData;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+\n+import org.apache.zookeeper.KeeperException;\n import org.apache.log4j.Logger;\n import org.jboss.netty.buffer.ChannelBuffer;\n \n@@ -143,14 +146,20 @@ public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n         }\n \n         if (rc == BKException.Code.NoSuchEntryException || rc == BKException.Code.NoSuchLedgerExistsException) {\n-            lh.asyncClose(NoopCloseCallback.instance, null);\n-            // we don't need to wait for the close to complete. Since we mark\n-            // the\n-            // ledger closed in memory, the application wont be able to add to\n-            // it\n-\n-            cb.operationComplete(BKException.Code.OK, null);\n-            LOG.debug(\"After closing length is: \" + lh.getLength());\n+            lh.asyncClose(new CloseCallback() {\n+                @Override\n+                public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n+                    if (rc != KeeperException.Code.OK.intValue()) {\n+                        LOG.warn(\"Close failed: \" + BKException.getMessage(rc));\n+                        cb.operationComplete(BKException.Code.ZKException, null);\n+                    } else {\n+                        cb.operationComplete(BKException.Code.OK, null);\n+                        LOG.debug(\"After closing length is: \" + lh.getLength()); \n+                    }\n+                } \n+                \n+            }, null);\n+            \n             return;\n         }\n "},{"sha":"94e444c2082a23808b4256ecc71eb3956437cf7a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -544,13 +544,15 @@ public void processResult(int rc, String path, Object ctx) {\n                             ensemble.remove(deadBookieIndex);\n                             ensemble.add(deadBookieIndex, newBookie);\n                         }\n+                        \n                         lh.writeLedgerConfig(new AsyncCallback.StatCallback() {\n                             @Override\n                             public void processResult(int rc, String path, Object ctx, Stat stat) {\n                                 if (rc != Code.OK.intValue()) {\n                                     LOG.error(\"ZK error updating ledger config metadata for ledgerId: \" + lh.getId(),\n                                               KeeperException.create(KeeperException.Code.get(rc), path));\n                                 } else {\n+                                    lh.getLedgerMetadata().updateZnodeStatus(stat);\n                                     LOG.info(\"Updated ZK for ledgerId: (\" + lh.getId()\n                                              + \") to point ledger fragments from old dead bookie: (\" + bookieSrc\n                                              + \") to new bookie: (\" + newBookie + \")\");"},{"sha":"6614bc5a7d79e77ae913a17683eae81c8d8379ab","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -38,6 +38,7 @@\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.BKException;\n import org.apache.log4j.Logger;\n import org.junit.Before;\n import org.junit.Test;\n@@ -105,7 +106,7 @@ LedgerHandle getLh() {\n     }\n \n     @Test\n-    public void testAsyncCreateClose() throws IOException {\n+    public void testAsyncCreateClose() throws IOException, BKException {\n         try {\n \n             ControlObj ctx = new ControlObj();"},{"sha":"0b04a913cb04d2910cbde2fef6f9e78877ccb5a2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/bookkeeper/blob/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java?ref=2f2f6c66da80e1f2e8a0f7661e91bcd0898d6289","patch":"@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Random;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.client.BookKeeperTestClient;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.zookeeper.KeeperException;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import junit.framework.TestCase;\n+import org.apache.log4j.Logger;\n+\n+/**\n+ * Tests conditional set of the ledger metadata znode.\n+ */\n+public class ConditionalSetTest extends BaseTestCase {\n+    static Logger LOG = Logger.getLogger(ConditionalSetTest.class);\n+\n+    byte[] entry;\n+    DigestType digestType;\n+    BookKeeper bkcReader;\n+\n+    public ConditionalSetTest(DigestType digestType) {\n+        super(3);\n+        this.digestType = digestType;\n+    }\n+\n+    @Override\n+    @Before\n+    public void setUp() throws IOException, Exception {\n+        super.setUp();\n+        entry = new byte[10]; // initialize the entries list\n+        this.bkcReader = new BookKeeperTestClient(\"127.0.0.1\");\n+    }\n+\n+    /**\n+     * Opens a ledger before the ledger writer, which triggers ledger recovery.\n+     * When the ledger writer tries to close the ledger, the close operation\n+     * should fail.\n+     * \n+     * \n+     * @throws IOException\n+     * @throws InterruptedException\n+     * @throws BKException\n+     * @throws KeeperException\n+     */\n+\n+    @Test\n+    public void testConditionalSet() throws IOException, InterruptedException,\n+                                    BKException, KeeperException {\n+        LedgerHandle lhWrite = bkc.createLedger(digestType, new byte[] { 'a',\n+                'b' });\n+        long ledgerId = lhWrite.getId();\n+        LOG.debug(\"Ledger ID: \" + lhWrite.getId());\n+        for (int i = 0; i < 10; i++) {\n+            LOG.debug(\"Adding entry: \" + i);\n+            lhWrite.addEntry(entry);\n+        }\n+\n+        /*\n+         * Open a ledger for reading, which triggers recovery, since the ledger\n+         * is still open.\n+         */\n+        LOG.debug(\"Instantiating new bookkeeper client.\");\n+        LedgerHandle lhRead = bkcReader.openLedger(lhWrite.getId(), digestType,\n+                                        new byte[] { 'a', 'b' });\n+        LOG.debug(\"Opened the ledger already\");\n+\n+        /*\n+         * Writer tries to close the ledger, and if should fail.\n+         */\n+        try{\n+            lhWrite.close();\n+            fail(\"Should have received an exception when trying to close the ledger.\");\n+        } catch (BKException e) {\n+            /*\n+             * Correctly failed to close the ledger\n+             */\n+        }\n+    }\n+}\n\\ No newline at end of file"}]}

