{"sha":"2f71beb5e4b06691d4fd6c2601b78632236b3533","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZjcxYmViNWU0YjA2NjkxZDRmZDZjMjYwMWI3ODYzMjIzNmIzNTMz","commit":{"author":{"name":"eolivelli","email":"eolivelli@gmail.com","date":"2016-07-14T21:02:33Z"},"committer":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-07-14T21:02:33Z"},"message":"BOOKKEEPER-940: Fix findbugs warnings after bumping to java 8\n\nAuthor: eolivelli <eolivelli@gmail.com>\n\nReviewers: Matteo Merli <mmerli@apache.org>, Sijie Guo <sijie@apache.org>\n\nCloses #55 from eolivelli/BOOKKEEPER-940","tree":{"sha":"942bcd0bf39497232f54b6fec22a012fc4311c4f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/942bcd0bf39497232f54b6fec22a012fc4311c4f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2f71beb5e4b06691d4fd6c2601b78632236b3533","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2f71beb5e4b06691d4fd6c2601b78632236b3533","html_url":"https://github.com/apache/bookkeeper/commit/2f71beb5e4b06691d4fd6c2601b78632236b3533","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2f71beb5e4b06691d4fd6c2601b78632236b3533/comments","author":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"committer":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"parents":[{"sha":"2506c98f8cc474d538df84ca30d229fbe0470e29","url":"https://api.github.com/repos/apache/bookkeeper/commits/2506c98f8cc474d538df84ca30d229fbe0470e29","html_url":"https://github.com/apache/bookkeeper/commit/2506c98f8cc474d538df84ca30d229fbe0470e29"}],"stats":{"total":170,"additions":101,"deletions":69},"files":[{"sha":"94ffd021309dde89e3d48b6f4b8393a58f86eb9d","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -133,8 +133,8 @@ public static void main(String[] args)\n         }\n \n         String addr = cmd.getOptionValue(\"host\");\n-        int port = Integer.valueOf(cmd.getOptionValue(\"port\", \"3181\"));\n-        int size = Integer.valueOf(cmd.getOptionValue(\"size\", \"1024\"));\n+        int port = Integer.parseInt(cmd.getOptionValue(\"port\", \"3181\"));\n+        int size = Integer.parseInt(cmd.getOptionValue(\"size\", \"1024\"));\n         String servers = cmd.getOptionValue(\"zookeeper\", \"localhost:2181\");\n \n "},{"sha":"f04960a2347b3be7ee5f612ab3efd158e4062733","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -58,8 +58,8 @@ public int compare(String o1, String o2) {\n                 Matcher m1 = LEDGER_PATTERN.matcher(o1);\n                 Matcher m2 = LEDGER_PATTERN.matcher(o2);\n                 if (m1.find() && m2.find()) {\n-                    return Integer.valueOf(m1.group(1))\n-                        - Integer.valueOf(m2.group(1));\n+                    return Integer.parseInt(m1.group(1))\n+                        - Integer.parseInt(m2.group(1));\n                 } else {\n                     return o1.compareTo(o2);\n                 }\n@@ -164,7 +164,7 @@ public static void main(String[] args) throws Exception {\n \n         final String servers = cmd.getOptionValue(\"zookeeper\", \"localhost:2181\");\n         final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes(UTF_8);\n-        final int sockTimeout = Integer.valueOf(cmd.getOptionValue(\"sockettimeout\", \"5\"));\n+        final int sockTimeout = Integer.parseInt(cmd.getOptionValue(\"sockettimeout\", \"5\"));\n         if (cmd.hasOption(\"ledger\") && cmd.hasOption(\"listen\")) {\n             LOG.error(\"Cannot used -ledger and -listen together\");\n             usage(options);\n@@ -174,9 +174,9 @@ public static void main(String[] args) throws Exception {\n         final AtomicInteger ledger = new AtomicInteger(0);\n         final AtomicInteger numLedgers = new AtomicInteger(0);\n         if (cmd.hasOption(\"ledger\")) {\n-            ledger.set(Integer.valueOf(cmd.getOptionValue(\"ledger\")));\n+            ledger.set(Integer.parseInt(cmd.getOptionValue(\"ledger\")));\n         } else if (cmd.hasOption(\"listen\")) {\n-            numLedgers.set(Integer.valueOf(cmd.getOptionValue(\"listen\")));\n+            numLedgers.set(Integer.parseInt(cmd.getOptionValue(\"listen\")));\n         } else {\n             LOG.error(\"You must use -ledger or -listen\");\n             usage(options);"},{"sha":"b12194434e80a8ec6d588310a948c57755f6db36","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -260,21 +260,21 @@ public static void main(String[] args)\n             System.exit(-1);\n         }\n \n-        long runningTime = Long.valueOf(cmd.getOptionValue(\"time\", \"60\"));\n+        long runningTime = Long.parseLong(cmd.getOptionValue(\"time\", \"60\"));\n         String servers = cmd.getOptionValue(\"zookeeper\", \"localhost:2181\");\n-        int entrysize = Integer.valueOf(cmd.getOptionValue(\"entrysize\", \"1024\"));\n+        int entrysize = Integer.parseInt(cmd.getOptionValue(\"entrysize\", \"1024\"));\n \n-        int ledgers = Integer.valueOf(cmd.getOptionValue(\"ledgers\", \"1\"));\n-        int ensemble = Integer.valueOf(cmd.getOptionValue(\"ensemble\", \"3\"));\n-        int quorum = Integer.valueOf(cmd.getOptionValue(\"quorum\", \"2\"));\n+        int ledgers = Integer.parseInt(cmd.getOptionValue(\"ledgers\", \"1\"));\n+        int ensemble = Integer.parseInt(cmd.getOptionValue(\"ensemble\", \"3\"));\n+        int quorum = Integer.parseInt(cmd.getOptionValue(\"quorum\", \"2\"));\n         int ackQuorum = quorum;\n         if (cmd.hasOption(\"ackQuorum\")) {\n-            ackQuorum = Integer.valueOf(cmd.getOptionValue(\"ackQuorum\"));\n+            ackQuorum = Integer.parseInt(cmd.getOptionValue(\"ackQuorum\"));\n         }\n-        int throttle = Integer.valueOf(cmd.getOptionValue(\"throttle\", \"10000\"));\n-        int sendLimit = Integer.valueOf(cmd.getOptionValue(\"sendlimit\", \"20000000\"));\n+        int throttle = Integer.parseInt(cmd.getOptionValue(\"throttle\", \"10000\"));\n+        int sendLimit = Integer.parseInt(cmd.getOptionValue(\"sendlimit\", \"20000000\"));\n \n-        final int sockTimeout = Integer.valueOf(cmd.getOptionValue(\"sockettimeout\", \"5\"));\n+        final int sockTimeout = Integer.parseInt(cmd.getOptionValue(\"sockettimeout\", \"5\"));\n \n         String coordinationZnode = cmd.getOptionValue(\"coordnode\");\n         final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes(UTF_8);\n@@ -283,7 +283,7 @@ public static void main(String[] args)\n \n         Timer timeouter = new Timer();\n         if (cmd.hasOption(\"timeout\")) {\n-            final long timeout = Long.valueOf(cmd.getOptionValue(\"timeout\", \"360\")) * 1000;\n+            final long timeout = Long.parseLong(cmd.getOptionValue(\"timeout\", \"360\")) * 1000;\n \n             timeouter.schedule(new TimerTask() {\n                     public void run() {"},{"sha":"a974553c233a96b847b3ac7c4310c6f9780d9b32","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -97,9 +97,9 @@ public static void main(String[] args) throws ParseException {\n             System.exit(-1);\n         }\n \n-        int length = Integer.valueOf(cmd.getOptionValue(\"length\", \"1024\"));\n+        int length = Integer.parseInt(cmd.getOptionValue(\"length\", \"1024\"));\n         String target = cmd.getOptionValue(\"target\", \"fs\");\n-        long runfor = Long.valueOf(cmd.getOptionValue(\"runfor\", \"60\")) * 1000;\n+        long runfor = Long.parseLong(cmd.getOptionValue(\"runfor\", \"60\")) * 1000;\n \n         StringBuilder sb = new StringBuilder();\n         while(length-- > 0) {\n@@ -108,7 +108,7 @@ public static void main(String[] args) throws ParseException {\n \n         Timer timeouter = new Timer();\n         if (cmd.hasOption(\"timeout\")) {\n-            final long timeout = Long.valueOf(cmd.getOptionValue(\"timeout\", \"360\")) * 1000;\n+            final long timeout = Long.parseLong(cmd.getOptionValue(\"timeout\", \"360\")) * 1000;\n \n             timeouter.schedule(new TimerTask() {\n                     public void run() {\n@@ -120,17 +120,17 @@ public void run() {\n \n         BookKeeper bkc = null;\n         try {\n-            int numFiles = Integer.valueOf(cmd.getOptionValue(\"numconcurrent\", \"1\"));\n+            int numFiles = Integer.parseInt(cmd.getOptionValue(\"numconcurrent\", \"1\"));\n             int numThreads = Math.min(numFiles, 1000);\n             byte[] data = sb.toString().getBytes(UTF_8);\n             long runid = System.currentTimeMillis();\n             List<Callable<Long>> clients = new ArrayList<Callable<Long>>();\n \n             if (target.equals(\"bk\")) {\n                 String zkservers = cmd.getOptionValue(\"zkservers\", \"localhost:2181\");\n-                int bkensemble = Integer.valueOf(cmd.getOptionValue(\"bkensemble\", \"3\"));\n-                int bkquorum = Integer.valueOf(cmd.getOptionValue(\"bkquorum\", \"2\"));\n-                int bkthrottle = Integer.valueOf(cmd.getOptionValue(\"bkthrottle\", \"10000\"));\n+                int bkensemble = Integer.parseInt(cmd.getOptionValue(\"bkensemble\", \"3\"));\n+                int bkquorum = Integer.parseInt(cmd.getOptionValue(\"bkquorum\", \"2\"));\n+                int bkthrottle = Integer.parseInt(cmd.getOptionValue(\"bkthrottle\", \"10000\"));\n \n                 ClientConfiguration conf = new ClientConfiguration();\n                 conf.setThrottleValue(bkthrottle);"},{"sha":"178f2bb3fdad6e2a87f09b3612f932822c298376","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -1344,8 +1344,9 @@ synchronized public void waitZero() throws InterruptedException {\n     public static boolean format(ServerConfiguration conf,\n             boolean isInteractive, boolean force) {\n         File journalDir = conf.getJournalDir();\n-        if (journalDir.exists() && journalDir.isDirectory()\n-                && journalDir.list().length != 0) {\n+        String[] journalDirFiles =\n+                journalDir.exists() && journalDir.isDirectory() ? journalDir.list() : null;\n+        if (journalDirFiles != null && journalDirFiles.length != 0) {\n             try {\n                 boolean confirm = false;\n                 if (!isInteractive) {\n@@ -1400,11 +1401,14 @@ public static boolean format(ServerConfiguration conf,\n \n     private static boolean cleanDir(File dir) {\n         if (dir.exists()) {\n-            for (File child : dir.listFiles()) {\n-                boolean delete = FileUtils.deleteQuietly(child);\n-                if (!delete) {\n-                    LOG.error(\"Not able to delete \" + child);\n-                    return false;\n+            File[] files = dir.listFiles();\n+            if (files != null) {\n+                for (File child : files) {\n+                    boolean delete = FileUtils.deleteQuietly(child);\n+                    if (!delete) {\n+                        LOG.error(\"Not able to delete \" + child);\n+                        return false;\n+                    }\n                 }\n             }\n         } else if (!dir.mkdirs()) {"},{"sha":"ecd0e0a829fcf272032e0016f0c8ccd53453c7d3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -651,12 +651,14 @@ public boolean accept(File file) {\n             }\n         });\n         List<Long> logs = new ArrayList<Long>();\n-        for (File lf : logFiles) {\n-            String idString = lf.getName().split(\"\\\\.\")[0];\n-            try {\n-                long lid = Long.parseLong(idString, 16);\n-                logs.add(lid);\n-            } catch (NumberFormatException nfe) {\n+        if (logFiles != null) {\n+            for (File lf : logFiles) {\n+                String idString = lf.getName().split(\"\\\\.\")[0];\n+                try {\n+                    long lid = Long.parseLong(idString, 16);\n+                    logs.add(lid);\n+                } catch (NumberFormatException nfe) {\n+                }\n             }\n         }\n         // no log file found in this directory"},{"sha":"177270e82078598132c09d7f8c1717684dd514bf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":17,"deletions":11,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -70,9 +70,11 @@ private boolean containsIndexFiles(File dir, String name) {\n                     File d = new File(dir, name);\n                     if (d.isDirectory()) {\n                         String[] files = d.list();\n-                        for (String f : files) {\n-                            if (containsIndexFiles(d, f)) {\n-                                return true;\n+                        if (files != null) {\n+                            for (String f : files) {\n+                                if (containsIndexFiles(d, f)) {\n+                                    return true;\n+                                }\n                             }\n                         }\n                     }\n@@ -107,7 +109,7 @@ private static int detectPreviousVersion(File directory) throws IOException {\n         String[] files = directory.list(BOOKIE_FILES_FILTER);\n         File v2versionFile = new File(directory,\n                 BookKeeperConstants.VERSION_FILENAME);\n-        if (files.length == 0 && !v2versionFile.exists()) { // no old data, so we're ok\n+        if ((files == null || files.length == 0) && !v2versionFile.exists()) { // no old data, so we're ok\n             return Cookie.CURRENT_COOKIE_LAYOUT_VERSION;\n         }\n \n@@ -149,7 +151,9 @@ private static ZooKeeper newZookeeper(final ServerConfiguration conf)\n \n     private static void linkIndexDirectories(File srcPath, File targetPath) throws IOException {\n         String[] files = srcPath.list();\n-\n+        if (files == null) {\n+            return;\n+        }\n         for (String f : files) {\n             if (f.endsWith(\".idx\")) { // this is an index dir, create the links\n                 if (!targetPath.mkdirs()) {\n@@ -257,12 +261,14 @@ public static void finalizeUpgrade(ServerConfiguration conf)\n                         }\n                     }\n                     File[] files = d.listFiles(BOOKIE_FILES_FILTER);\n-                    for (File f : files) {\n-                        if (f.isDirectory()) {\n-                            FileUtils.deleteDirectory(f);\n-                        } else{\n-                            if (!f.delete()) {\n-                                LOG.warn(\"Could not delete {}\", f);\n+                    if (files != null) {\n+                        for (File f : files) {\n+                            if (f.isDirectory()) {\n+                                FileUtils.deleteDirectory(f);\n+                            } else{\n+                                if (!f.delete()) {\n+                                    LOG.warn(\"Could not delete {}\", f);\n+                                }\n                             }\n                         }\n                     }"},{"sha":"36b73490ffcfd88219fba97004f08dd8ee0e8eac","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -376,8 +376,9 @@ private void doGcLedgers() {\n      */\n     private void doGcEntryLogs() {\n         // Loop through all of the entry logs and remove the non-active ledgers.\n-        for (Long entryLogId : entryLogMetaMap.keySet()) {\n-            EntryLogMetadata meta = entryLogMetaMap.get(entryLogId);\n+        for (Map.Entry<Long,EntryLogMetadata> entry :  entryLogMetaMap.entrySet()) {\n+            long entryLogId = entry.getKey();\n+            EntryLogMetadata meta = entry.getValue();\n             for (Long entryLogLedger : meta.getLedgersMap().keySet()) {\n                 // Remove the entry log ledger from the set if it isn't active.\n                 try {"},{"sha":"8988985ec97ab8462d855af8fd1a8265c50f6844","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":15,"deletions":3,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -189,11 +189,23 @@ private void getActiveLedgers() throws IOException {\n         // grandParent directory. We'll have to go two levels deep into these\n         // directories to find the index files.\n         for (File ledgerDirectory : ledgerDirsManager.getAllLedgerDirs()) {\n-            for (File grandParent : ledgerDirectory.listFiles()) {\n+            File[] grandParents = ledgerDirectory.listFiles();\n+            if (grandParents == null) {\n+                continue;\n+            }\n+            for (File grandParent : grandParents) {\n                 if (grandParent.isDirectory()) {\n-                    for (File parent : grandParent.listFiles()) {\n+                    File[] parents = grandParent.listFiles();\n+                    if (parents == null) {\n+                        continue;\n+                    }\n+                    for (File parent : parents) {\n                         if (parent.isDirectory()) {\n-                            for (File index : parent.listFiles()) {\n+                            File[] indexFiles = parent.listFiles();\n+                            if (indexFiles == null) {\n+                                continue;\n+                            }\n+                            for (File index : indexFiles) {\n                                 if (!index.isFile()\n                                         || (!index.getName().endsWith(IDX) && !index.getName().endsWith(RLOC))) {\n                                     continue;"},{"sha":"eaf66d9eee93b09f690a2006de6481c35d069c97","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -75,6 +75,9 @@\n      */\n     private static List<Long> listJournalIds(File journalDir, JournalIdFilter filter) {\n         File logFiles[] = journalDir.listFiles();\n+        if (logFiles == null || logFiles.length == 0) {\n+            return Collections.emptyList();\n+        }\n         List<Long> logs = new ArrayList<Long>();\n         for(File f: logFiles) {\n             String name = f.getName();"},{"sha":"1ad17fd8f278fb30f880a686d3e8fc87d8134d1b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -406,6 +406,9 @@ public boolean hasNext() {\n \n         @Override\n         public LedgerEntry next() {\n+            if (lastEntryId > -1 && nextEntryId > lastEntryId) {\n+                throw new NoSuchElementException();\n+            }\n             ++nextEntryId;\n             LedgerEntry entry = currentEntry;\n             currentEntry = null;"},{"sha":"f539186ece99f520b015b9af88091b579a1eedc0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -298,8 +298,8 @@ void setCustomMetadata(Map<String, byte[]> customMetadata) {\n \n         if (customMetadata != null) {\n             LedgerMetadataFormat.cMetadataMapEntry.Builder cMetadataBuilder = LedgerMetadataFormat.cMetadataMapEntry.newBuilder();\n-            for (String key : customMetadata.keySet()) {\n-                cMetadataBuilder.setKey(key).setValue(ByteString.copyFrom(customMetadata.get(key)));\n+            for (Map.Entry<String,byte[]> entry : customMetadata.entrySet()) {\n+                cMetadataBuilder.setKey(entry.getKey()).setValue(ByteString.copyFrom(entry.getValue()));\n                 builder.addCustomMetadata(cMetadataBuilder.build());\n             }\n         }\n@@ -371,7 +371,7 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version, Optional\n         }\n         if (versionLine.startsWith(VERSION_KEY)) {\n             String parts[] = versionLine.split(tSplitter);\n-            lc.metadataFormatVersion = new Integer(parts[1]);\n+            lc.metadataFormatVersion = Integer.parseInt(parts[1]);\n         } else {\n             // if no version is set, take it to be version 1\n             // as the parsing is the same as what we had before\n@@ -440,16 +440,16 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version, Optional\n     static LedgerMetadata parseVersion1Config(LedgerMetadata lc,\n                                               BufferedReader reader) throws IOException {\n         try {\n-            lc.writeQuorumSize = lc.ackQuorumSize = new Integer(reader.readLine());\n-            lc.ensembleSize = new Integer(reader.readLine());\n-            lc.length = new Long(reader.readLine());\n+            lc.writeQuorumSize = lc.ackQuorumSize = Integer.parseInt(reader.readLine());\n+            lc.ensembleSize = Integer.parseInt(reader.readLine());\n+            lc.length = Long.parseLong(reader.readLine());\n \n             String line = reader.readLine();\n             while (line != null) {\n                 String parts[] = line.split(tSplitter);\n \n                 if (parts[1].equals(closed)) {\n-                    Long l = new Long(parts[0]);\n+                    Long l = Long.parseLong(parts[0]);\n                     if (l == IN_RECOVERY) {\n                         lc.state = LedgerMetadataFormat.State.IN_RECOVERY;\n                     } else {\n@@ -465,7 +465,7 @@ static LedgerMetadata parseVersion1Config(LedgerMetadata lc,\n                 for (int j = 1; j < parts.length; j++) {\n                     addrs.add(new BookieSocketAddress(parts[j]));\n                 }\n-                lc.addEnsemble(new Long(parts[0]), addrs);\n+                lc.addEnsemble(Long.parseLong(parts[0]), addrs);\n                 line = reader.readLine();\n             }\n         } catch (NumberFormatException e) {"},{"sha":"313f1c1fc88963af41d116a762b7f3f14a89e3bb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -190,7 +190,7 @@ private static LedgerLayout parseLayout(byte[] bytes) throws IOException {\n         String lines[] = layout.split(lSplitter);\n \n         try {\n-            int layoutFormatVersion = new Integer(lines[0]);\n+            int layoutFormatVersion = Integer.parseInt(lines[0]);\n             if (LAYOUT_FORMAT_VERSION < layoutFormatVersion ||\n                 LAYOUT_MIN_COMPAT_VERSION > layoutFormatVersion) {\n                 throw new IOException(\"Metadata version not compatible. Expected \" \n@@ -208,7 +208,7 @@ private static LedgerLayout parseLayout(byte[] bytes) throws IOException {\n             // ledger manager factory class\n             String managerFactoryCls = parts[0];\n             // ledger manager version\n-            int managerVersion = new Integer(parts[1]);\n+            int managerVersion = Integer.parseInt(parts[1]);\n             return new LedgerLayout(managerFactoryCls, managerVersion, layoutFormatVersion);\n         } catch (NumberFormatException e) {\n             throw new IOException(\"Could not parse layout '\" + layout + \"'\", e);"},{"sha":"e307b2c06096847c0d88352a6acc1fcda58ef612","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -196,7 +196,7 @@ private void checkLayout()\n     private long getLedgerId(String path) throws NumberFormatException {\n         Matcher m = idExtractionPattern.matcher(path);\n         if (m.find()) {\n-            return Long.valueOf(m.group(1));\n+            return Long.parseLong(m.group(1));\n         } else {\n             throw new NumberFormatException(\"Couldn't find ledgerid in path\");\n         }"},{"sha":"cfc728b7532c2c62fe91ff8e84095db035bf3c97","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -17,7 +17,7 @@\n  */\n package org.apache.bookkeeper.metastore;\n \n-import java.util.HashSet;\n+import java.util.Collections;\n import java.util.Set;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n@@ -27,7 +27,7 @@\n     // select all fields when reading or scanning entries\n     public static final Set<String> ALL_FIELDS = null;\n     // select non fields to return when reading/scanning entries\n-    public static final Set<String> NON_FIELDS = new HashSet<String>();\n+    public static final Set<String> NON_FIELDS = Collections.emptySet();\n \n     /**\n      * Get table name."},{"sha":"ef89245615b9503bba5c5aee3e8540235ca31194","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -106,8 +106,9 @@ public boolean equals(Object o) {\n         if (fields.size() != other.fields.size()) {\n             return false;\n         }\n-        for (String f : fields.keySet()) {\n-            byte[] v1 = fields.get(f);\n+        for (Map.Entry<String,byte[]> entry : fields.entrySet()) {\n+            String f = entry.getKey();\n+            byte[] v1 = entry.getValue();\n             byte[] v2 = other.fields.get(f);\n             if (0 != comparator.compare(v1, v2)) {\n                 return false;"},{"sha":"6d8f8f1b81c71b1acbcd05532ab168b33e036a3d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/2f71beb5e4b06691d4fd6c2601b78632236b3533/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=2f71beb5e4b06691d4fd6c2601b78632236b3533","patch":"@@ -325,7 +325,7 @@ public static BookieSocketAddress getCurrentAuditor(ServerConfiguration conf, Zo\n         AuditorVoteFormat v = builder.build();\n         String[] parts = v.getBookieId().split(\":\");\n         return new BookieSocketAddress(parts[0],\n-                                       Integer.valueOf(parts[1]));\n+                                       Integer.parseInt(parts[1]));\n     }\n \n     /**"}]}

