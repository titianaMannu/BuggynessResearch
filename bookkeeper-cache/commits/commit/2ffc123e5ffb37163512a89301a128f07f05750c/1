{"sha":"2ffc123e5ffb37163512a89301a128f07f05750c","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZmZjMTIzZTVmZmIzNzE2MzUxMmE4OTMwMWExMjhmMDdmMDU3NTBj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T15:14:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T15:14:13Z"},"message":"BOOKKEEPER-334: client-side message filter for java client. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1380268 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e6c55dd307843ed3eb88b3fb60f6b30fa667d67","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2e6c55dd307843ed3eb88b3fb60f6b30fa667d67"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2ffc123e5ffb37163512a89301a128f07f05750c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2ffc123e5ffb37163512a89301a128f07f05750c","html_url":"https://github.com/apache/bookkeeper/commit/2ffc123e5ffb37163512a89301a128f07f05750c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2ffc123e5ffb37163512a89301a128f07f05750c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","url":"https://api.github.com/repos/apache/bookkeeper/commits/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","html_url":"https://github.com/apache/bookkeeper/commit/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c"}],"stats":{"total":1267,"additions":1136,"deletions":131},"files":[{"sha":"91c29783caee4f39e8dda7dd5df9459d7ab5e9b1","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -134,6 +134,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)\n \n+        BOOKKEEPER-334: client-side message filter for java client. (sijie via ivank)\n+\n Release 4.1.0 - 2012-06-07\n \n   Non-backward compatible changes:"},{"sha":"880fff787ca278b8adb971ee3f7d3186af7b92a0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","status":"modified","additions":35,"deletions":1,"changes":36,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -26,6 +26,7 @@\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.exceptions.PubSubException.CouldNotConnectException;\n import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n+import org.apache.hedwig.filter.ClientMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n@@ -118,7 +119,7 @@ public void subscribe(ByteString topic, ByteString subscriberId, SubscriptionOpt\n      * <p>Subscribe to the given topic asynchronously for the inputted subscriberId.</p>\n      *\n      * <p>SubscriptionOptions contains parameters for how the hub should make the subscription.\n-     * The two options are the createorattach mode and message bound.</p>\n+     * The options includes createorattach mode, message bound and message filter.</p>\n      *\n      * <p>The createorattach mode defines whether the subscription should create a new subscription, or\n      * just attach to a preexisting subscription. If it tries to create the subscription, and the\n@@ -131,6 +132,14 @@ public void subscribe(ByteString topic, ByteString subscriberId, SubscriptionOpt\n      * message bound, the message bound for all other subscriptions on that topic will effectively be\n      * infinite as the messages have to be stored for the first subscription in any case. </p>\n      *\n+     * <p>The message filter defines a {@link org.apache.hedwig.filter.ServerMessageFilter}\n+     * run in hub server to filter messages delivered to the subscription. The server message\n+     * filter should be placed in the classpath of hub server before using it.</p>\n+     *\n+     * All these subscription options would be stored as SubscriptionPreferences in metadata\n+     * manager. The next time subscriber attached with difference options, the new options would\n+     * overwrite the old options.\n+     *\n      * Usage is as follows:\n      * <pre>\n      * {@code\n@@ -270,6 +279,31 @@ public boolean hasSubscription(ByteString topic, ByteString subscriberId) throws\n     public void startDelivery(ByteString topic, ByteString subscriberId, MessageHandler messageHandler)\n             throws ClientNotSubscribedException, AlreadyStartDeliveryException;\n \n+    /**\n+     * Begin delivery of messages from the server to us for this topic and\n+     * subscriberId.\n+     *\n+     * Only the messages passed <code>messageFilter</code> could be delivered to\n+     * <code>messageHandler</code>.\n+     *\n+     * @param topic\n+     *            Topic name of the subscription\n+     * @param subscriberId\n+     *            ID of the subscriber\n+     * @param messageHandler\n+     *            Message Handler that will consume the subscribed messages\n+     * @throws ClientNotSubscribedException\n+     *             If the client is not currently subscribed to the topic\n+     * @throws AlreadyStartDeliveryException\n+     *             If someone started delivery a message handler before stopping existed one.\n+     * @throws NullPointerException\n+     *             If either <code>messageHandler</code> or <code>messageFilter</code> is null.\n+     */\n+    public void startDeliveryWithFilter(ByteString topic, ByteString subscriberId,\n+                                        MessageHandler messageHandler,\n+                                        ClientMessageFilter messageFilter)\n+            throws ClientNotSubscribedException, AlreadyStartDeliveryException;\n+\n     /**\n      * Stop delivery of messages for this topic and subscriberId.\n      *"},{"sha":"e89f90f5bdcab4051319515a8e98bed61bd80798","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -39,7 +39,11 @@\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n+import org.apache.hedwig.protocol.PubSubProtocol.ResponseBody;\n import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n+import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n \n public class SubscribeResponseHandler {\n \n@@ -117,12 +121,28 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n                 // Subscribe request.\n                 origSubData = pubSubData;\n \n+                SubscriptionPreferences preferences = null;\n+                if (response.hasResponseBody()) {\n+                    ResponseBody respBody = response.getResponseBody();\n+                    if (respBody.hasSubscribeResponse()) {\n+                        SubscribeResponse resp = respBody.getSubscribeResponse();\n+                        if (resp.hasPreferences()) {\n+                            preferences = resp.getPreferences();\n+                            if (logger.isDebugEnabled()) {\n+                                logger.debug(\"Receive subscription preferences for (topic:\" + pubSubData.topic.toStringUtf8()\n+                                           + \", subscriber:\" + pubSubData.subscriberId.toStringUtf8() + \") :\"\n+                                           + SubscriptionStateUtils.toString(preferences));\n+                            }\n+                        }\n+                    }\n+                }\n+\n                 // Store the mapping for the TopicSubscriber to the Channel.\n                 // This is so we can control the starting and stopping of\n                 // message deliveries from the server on that Channel. Store\n                 // this only on a successful ack response from the server.\n                 TopicSubscriber topicSubscriber = new TopicSubscriber(pubSubData.topic, pubSubData.subscriberId);\n-                responseHandler.getSubscriber().setChannelForTopic(topicSubscriber, channel);\n+                responseHandler.getSubscriber().setChannelAndPreferencesForTopic(topicSubscriber, channel, preferences);\n                 // Lazily create the Set (from a concurrent hashmap) to keep track\n                 // of outstanding Messages to be consumed by the client app. At this\n                 // stage, delivery for that topic hasn't started yet so creation of"},{"sha":"a97bab9e469f934d2a223bd81b50726aab1b5219","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.client.netty;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.apache.hedwig.client.api.MessageHandler;\n+import org.apache.hedwig.filter.ClientMessageFilter;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.util.Callback;\n+\n+/**\n+ * Handlers used by a subscription.\n+ */\n+class FilterableMessageHandler implements MessageHandler {\n+\n+    MessageHandler msgHandler;\n+    ClientMessageFilter  msgFilter;\n+\n+    public FilterableMessageHandler(MessageHandler msgHandler,\n+                                    ClientMessageFilter msgFilter) {\n+        this.msgHandler = msgHandler;\n+        this.msgFilter = msgFilter;\n+    }\n+\n+    public boolean hasMessageHandler() {\n+        return null != msgHandler;\n+    }\n+\n+    public MessageHandler getMessageHandler() {\n+        return msgHandler;\n+    }\n+\n+    public boolean hasMessageFilter() {\n+        return null != msgFilter;\n+    }\n+\n+    public ClientMessageFilter getMessageFilter() {\n+        return msgFilter;\n+    }\n+\n+    @Override\n+    public void deliver(ByteString topic, ByteString subscriberId, Message msg,\n+                        Callback<Void> callback, Object context) {\n+        boolean deliver = true;\n+        if (hasMessageFilter()) {\n+            deliver = msgFilter.testMessage(msg);\n+        }\n+        if (deliver) {\n+            msgHandler.deliver(topic, subscriberId, msg, callback, context);\n+        } else {\n+            callback.operationFinished(context, null);\n+        }\n+    }\n+}"},{"sha":"6d1ce1c54e16f047e95eaaa428275e413103185d","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":37,"deletions":3,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -41,6 +41,7 @@\n import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;\n import org.apache.hedwig.client.handlers.PubSubCallback;\n+import org.apache.hedwig.filter.ClientMessageFilter;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ClientAlreadySubscribedException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n@@ -73,6 +74,8 @@\n     // it. We can also get the ResponseHandler tied to the Channel via the\n     // Channel Pipeline.\n     protected final ConcurrentMap<TopicSubscriber, Channel> topicSubscriber2Channel = new ConcurrentHashMap<TopicSubscriber, Channel>();\n+    protected final ConcurrentMap<TopicSubscriber, SubscriptionPreferences> topicSubscriber2Preferences =\n+        new ConcurrentHashMap<TopicSubscriber, SubscriptionPreferences>();\n \n     // Concurrent Map to store Message handler for each topic + sub id combination.\n     // Store it here instead of in SubscriberResponseHandler as we don't want to lose the handler\n@@ -543,6 +546,30 @@ public void startDelivery(final ByteString topic, final ByteString subscriberId,\n         startDelivery(topic, subscriberId, messageHandler, false);\n     }\n \n+    public void startDeliveryWithFilter(final ByteString topic, final ByteString subscriberId,\n+                                        MessageHandler messageHandler,\n+                                        ClientMessageFilter messageFilter)\n+            throws ClientNotSubscribedException, AlreadyStartDeliveryException {\n+        if (null == messageHandler || null == messageFilter) {\n+            throw new NullPointerException(\"Null message handler or message filter is provided.\");\n+        }\n+        TopicSubscriber topicSubscriber = new TopicSubscriber(topic, subscriberId);\n+        SubscriptionPreferences preferences = topicSubscriber2Preferences.get(topicSubscriber);\n+        if (null == preferences) {\n+            throw new ClientNotSubscribedException(\"No subscription preferences found to filter messages for topic: \"\n+                    + topic.toStringUtf8() + \", subscriberId: \" + subscriberId.toStringUtf8());\n+        }\n+        // pass subscription preferences to message filter\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Start delivering messages with filter on topic: \" + topic.toStringUtf8()\n+                         + \", subscriberId: \" + subscriberId.toStringUtf8() + \", preferences: \"\n+                         + SubscriptionStateUtils.toString(preferences));\n+        }\n+        messageFilter.setSubscriptionPreferences(topic, subscriberId, preferences);\n+        messageHandler = new FilterableMessageHandler(messageHandler, messageFilter);\n+        startDelivery(topic, subscriberId, messageHandler, false);\n+    }\n+\n     public void restartDelivery(final ByteString topic, final ByteString subscriberId)\n         throws ClientNotSubscribedException, AlreadyStartDeliveryException {\n         startDelivery(topic, subscriberId, null, true);\n@@ -743,7 +770,8 @@ public Channel getChannelForTopic(TopicSubscriber topic) {\n         return topicSubscriber2Channel.get(topic);\n     }\n \n-    public void setChannelForTopic(TopicSubscriber topic, Channel channel) {\n+    public void setChannelAndPreferencesForTopic(TopicSubscriber topic, Channel channel,\n+                                                 SubscriptionPreferences preferences) {\n         synchronized (closeLock) {\n             if (closed) {\n                 channel.close();\n@@ -753,11 +781,17 @@ public void setChannelForTopic(TopicSubscriber topic, Channel channel) {\n             if (oldc != null) {\n                 channel.close();\n             }\n+            if (null != preferences) {\n+                topicSubscriber2Preferences.put(topic, preferences);\n+            }\n         }\n     }\n \n-    public void removeChannelForTopic(TopicSubscriber topic) {\n-        topicSubscriber2Channel.remove(topic);\n+    public void removeTopicSubscriber(TopicSubscriber topic) {\n+        synchronized (topic) {\n+            topicSubscriber2Preferences.remove(topic);\n+            topicSubscriber2Channel.remove(topic);\n+        }\n     }\n \n     void close() {"},{"sha":"96ef0d97d9ed34287e33f534878e9b583848d412","filename":"hedwig-client/src/main/java/org/apache/hedwig/filter/ClientMessageFilter.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/filter/ClientMessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/filter/ClientMessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/filter/ClientMessageFilter.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -0,0 +1,24 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.filter;\n+\n+/**\n+ * Message Filter running in client-side.\n+ */\n+public interface ClientMessageFilter extends MessageFilterBase {\n+}"},{"sha":"e654038b4498c85cd21b438053265aea58856ad0","filename":"hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilterBase.java","status":"renamed","additions":3,"deletions":23,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilterBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilterBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilterBase.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -17,31 +17,11 @@\n  */\n package org.apache.hedwig.filter;\n \n-import java.io.IOException;\n-\n import com.google.protobuf.ByteString;\n-import org.apache.commons.configuration.Configuration;\n-import org.apache.commons.configuration.ConfigurationException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n \n-public interface MessageFilter {\n-\n-    /**\n-     * Initialize the message filter.\n-     *\n-     * @param conf\n-     *          Configuration Object. An <i>MessageFilter</i> might read settings from it.\n-     * @return message filter\n-     * @throws IOException when failed to initialize message filter\n-     */\n-    public MessageFilter initialize(Configuration conf)\n-    throws ConfigurationException, IOException;\n-\n-    /**\n-     * Uninitialize the message filter.\n-     */\n-    public void uninitialize();\n+public interface MessageFilterBase {\n \n     /**\n      * Set subscription preferences.\n@@ -57,8 +37,8 @@ public MessageFilter initialize(Configuration conf)\n      *          Subscription Preferences.\n      * @return message filter\n      */\n-    public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n-                                                    SubscriptionPreferences preferences);\n+    public MessageFilterBase setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                                                        SubscriptionPreferences preferences);\n \n     /**\n      * Tests whether a particular message passes the filter or not","previous_filename":"hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilter.java"},{"sha":"6b473ad6e7642df67a472daa417f990fbcd6b770","filename":"hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -24,19 +24,19 @@\n import com.google.protobuf.ByteString;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.hedwig.filter.MessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n \n /**\n  * A filter filters messages in pipeline.\n  */\n-public class PipelineFilter extends LinkedList<MessageFilter> implements MessageFilter {\n+public class PipelineFilter extends LinkedList<ServerMessageFilter>\n+implements ServerMessageFilter {\n \n     @Override\n-    public MessageFilter initialize(Configuration conf)\n+    public ServerMessageFilter initialize(Configuration conf)\n     throws ConfigurationException, IOException {\n-        for (MessageFilter filter : this) {\n+        for (ServerMessageFilter filter : this) {\n             filter.initialize(conf);\n         }\n         return this;\n@@ -45,23 +45,23 @@ public MessageFilter initialize(Configuration conf)\n     @Override\n     public void uninitialize() {\n         while (!isEmpty()) {\n-            MessageFilter filter = removeLast();\n+            ServerMessageFilter filter = removeLast();\n             filter.uninitialize();\n         }\n     }\n \n     @Override\n-    public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n-                                                    SubscriptionPreferences preferences) {\n-        for (MessageFilter filter : this) {\n+    public MessageFilterBase setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                                                        SubscriptionPreferences preferences) {\n+        for (ServerMessageFilter filter : this) {\n             filter.setSubscriptionPreferences(topic, subscriberId, preferences);\n         }\n         return this;\n     }\n \n     @Override\n     public boolean testMessage(Message message) {\n-        for (MessageFilter filter : this) {\n+        for (ServerMessageFilter filter : this) {\n             if (!filter.testMessage(message)) {\n                 return false;\n             }"},{"sha":"f4c22488675a95fc1d0a9b54f5f710fb7696860c","filename":"hedwig-client/src/main/java/org/apache/hedwig/filter/ServerMessageFilter.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/filter/ServerMessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-client/src/main/java/org/apache/hedwig/filter/ServerMessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/filter/ServerMessageFilter.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.filter;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+\n+/**\n+ * Message Filter running in server-side. Hub server uses reflection to\n+ * instantiate a message filter to filter messages.\n+ */\n+public interface ServerMessageFilter extends MessageFilterBase {\n+\n+    /**\n+     * Initialize the message filter.\n+     *\n+     * @param conf\n+     *          Configuration Object. An <i>MessageFilter</i> might read settings from it.\n+     * @return message filter\n+     * @throws IOException when failed to initialize message filter\n+     */\n+    public ServerMessageFilter initialize(Configuration conf)\n+    throws ConfigurationException, IOException;\n+\n+    /**\n+     * Uninitialize the message filter.\n+     */\n+    public void uninitialize();\n+\n+}"},{"sha":"723eb262c905009663149e459bf39ecd094d4a8f","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","status":"modified","additions":624,"deletions":41,"changes":665,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -10593,13 +10593,442 @@ public Builder clearPublishedMsgId() {\n     // @@protoc_insertion_point(class_scope:Hedwig.PublishResponse)\n   }\n   \n+  public interface SubscribeResponseOrBuilder\n+      extends com.google.protobuf.MessageOrBuilder {\n+    \n+    // optional .Hedwig.SubscriptionPreferences preferences = 2;\n+    boolean hasPreferences();\n+    org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences getPreferences();\n+    org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferencesOrBuilder getPreferencesOrBuilder();\n+  }\n+  public static final class SubscribeResponse extends\n+      com.google.protobuf.GeneratedMessage\n+      implements SubscribeResponseOrBuilder {\n+    // Use SubscribeResponse.newBuilder() to construct.\n+    private SubscribeResponse(Builder builder) {\n+      super(builder);\n+    }\n+    private SubscribeResponse(boolean noInit) {}\n+    \n+    private static final SubscribeResponse defaultInstance;\n+    public static SubscribeResponse getDefaultInstance() {\n+      return defaultInstance;\n+    }\n+    \n+    public SubscribeResponse getDefaultInstanceForType() {\n+      return defaultInstance;\n+    }\n+    \n+    public static final com.google.protobuf.Descriptors.Descriptor\n+        getDescriptor() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_SubscribeResponse_descriptor;\n+    }\n+    \n+    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+        internalGetFieldAccessorTable() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_SubscribeResponse_fieldAccessorTable;\n+    }\n+    \n+    private int bitField0_;\n+    // optional .Hedwig.SubscriptionPreferences preferences = 2;\n+    public static final int PREFERENCES_FIELD_NUMBER = 2;\n+    private org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences preferences_;\n+    public boolean hasPreferences() {\n+      return ((bitField0_ & 0x00000001) == 0x00000001);\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences getPreferences() {\n+      return preferences_;\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferencesOrBuilder getPreferencesOrBuilder() {\n+      return preferences_;\n+    }\n+    \n+    private void initFields() {\n+      preferences_ = org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.getDefaultInstance();\n+    }\n+    private byte memoizedIsInitialized = -1;\n+    public final boolean isInitialized() {\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      memoizedIsInitialized = 1;\n+      return true;\n+    }\n+    \n+    public void writeTo(com.google.protobuf.CodedOutputStream output)\n+                        throws java.io.IOException {\n+      getSerializedSize();\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        output.writeMessage(2, preferences_);\n+      }\n+      getUnknownFields().writeTo(output);\n+    }\n+    \n+    private int memoizedSerializedSize = -1;\n+    public int getSerializedSize() {\n+      int size = memoizedSerializedSize;\n+      if (size != -1) return size;\n+    \n+      size = 0;\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeMessageSize(2, preferences_);\n+      }\n+      size += getUnknownFields().getSerializedSize();\n+      memoizedSerializedSize = size;\n+      return size;\n+    }\n+    \n+    private static final long serialVersionUID = 0L;\n+    @java.lang.Override\n+    protected java.lang.Object writeReplace()\n+        throws java.io.ObjectStreamException {\n+      return super.writeReplace();\n+    }\n+    \n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseFrom(\n+        com.google.protobuf.ByteString data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseFrom(\n+        com.google.protobuf.ByteString data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseFrom(byte[] data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseFrom(\n+        byte[] data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseDelimitedFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseDelimitedFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseFrom(\n+        com.google.protobuf.CodedInputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse parseFrom(\n+        com.google.protobuf.CodedInputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    \n+    public static Builder newBuilder() { return Builder.create(); }\n+    public Builder newBuilderForType() { return newBuilder(); }\n+    public static Builder newBuilder(org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse prototype) {\n+      return newBuilder().mergeFrom(prototype);\n+    }\n+    public Builder toBuilder() { return newBuilder(this); }\n+    \n+    @java.lang.Override\n+    protected Builder newBuilderForType(\n+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n+      Builder builder = new Builder(parent);\n+      return builder;\n+    }\n+    public static final class Builder extends\n+        com.google.protobuf.GeneratedMessage.Builder<Builder>\n+       implements org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponseOrBuilder {\n+      public static final com.google.protobuf.Descriptors.Descriptor\n+          getDescriptor() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_SubscribeResponse_descriptor;\n+      }\n+      \n+      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+          internalGetFieldAccessorTable() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_SubscribeResponse_fieldAccessorTable;\n+      }\n+      \n+      // Construct using org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.newBuilder()\n+      private Builder() {\n+        maybeForceBuilderInitialization();\n+      }\n+      \n+      private Builder(BuilderParent parent) {\n+        super(parent);\n+        maybeForceBuilderInitialization();\n+      }\n+      private void maybeForceBuilderInitialization() {\n+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n+          getPreferencesFieldBuilder();\n+        }\n+      }\n+      private static Builder create() {\n+        return new Builder();\n+      }\n+      \n+      public Builder clear() {\n+        super.clear();\n+        if (preferencesBuilder_ == null) {\n+          preferences_ = org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.getDefaultInstance();\n+        } else {\n+          preferencesBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        return this;\n+      }\n+      \n+      public Builder clone() {\n+        return create().mergeFrom(buildPartial());\n+      }\n+      \n+      public com.google.protobuf.Descriptors.Descriptor\n+          getDescriptorForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.getDescriptor();\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse getDefaultInstanceForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.getDefaultInstance();\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse build() {\n+        org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(result);\n+        }\n+        return result;\n+      }\n+      \n+      private org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse buildParsed()\n+          throws com.google.protobuf.InvalidProtocolBufferException {\n+        org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(\n+            result).asInvalidProtocolBufferException();\n+        }\n+        return result;\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse buildPartial() {\n+        org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse result = new org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse(this);\n+        int from_bitField0_ = bitField0_;\n+        int to_bitField0_ = 0;\n+        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n+          to_bitField0_ |= 0x00000001;\n+        }\n+        if (preferencesBuilder_ == null) {\n+          result.preferences_ = preferences_;\n+        } else {\n+          result.preferences_ = preferencesBuilder_.build();\n+        }\n+        result.bitField0_ = to_bitField0_;\n+        onBuilt();\n+        return result;\n+      }\n+      \n+      public Builder mergeFrom(com.google.protobuf.Message other) {\n+        if (other instanceof org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse) {\n+          return mergeFrom((org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse)other);\n+        } else {\n+          super.mergeFrom(other);\n+          return this;\n+        }\n+      }\n+      \n+      public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse other) {\n+        if (other == org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.getDefaultInstance()) return this;\n+        if (other.hasPreferences()) {\n+          mergePreferences(other.getPreferences());\n+        }\n+        this.mergeUnknownFields(other.getUnknownFields());\n+        return this;\n+      }\n+      \n+      public final boolean isInitialized() {\n+        return true;\n+      }\n+      \n+      public Builder mergeFrom(\n+          com.google.protobuf.CodedInputStream input,\n+          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+          throws java.io.IOException {\n+        com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n+          com.google.protobuf.UnknownFieldSet.newBuilder(\n+            this.getUnknownFields());\n+        while (true) {\n+          int tag = input.readTag();\n+          switch (tag) {\n+            case 0:\n+              this.setUnknownFields(unknownFields.build());\n+              onChanged();\n+              return this;\n+            default: {\n+              if (!parseUnknownField(input, unknownFields,\n+                                     extensionRegistry, tag)) {\n+                this.setUnknownFields(unknownFields.build());\n+                onChanged();\n+                return this;\n+              }\n+              break;\n+            }\n+            case 18: {\n+              org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.Builder subBuilder = org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.newBuilder();\n+              if (hasPreferences()) {\n+                subBuilder.mergeFrom(getPreferences());\n+              }\n+              input.readMessage(subBuilder, extensionRegistry);\n+              setPreferences(subBuilder.buildPartial());\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      \n+      private int bitField0_;\n+      \n+      // optional .Hedwig.SubscriptionPreferences preferences = 2;\n+      private org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences preferences_ = org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.getDefaultInstance();\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences, org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.Builder, org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferencesOrBuilder> preferencesBuilder_;\n+      public boolean hasPreferences() {\n+        return ((bitField0_ & 0x00000001) == 0x00000001);\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences getPreferences() {\n+        if (preferencesBuilder_ == null) {\n+          return preferences_;\n+        } else {\n+          return preferencesBuilder_.getMessage();\n+        }\n+      }\n+      public Builder setPreferences(org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences value) {\n+        if (preferencesBuilder_ == null) {\n+          if (value == null) {\n+            throw new NullPointerException();\n+          }\n+          preferences_ = value;\n+          onChanged();\n+        } else {\n+          preferencesBuilder_.setMessage(value);\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder setPreferences(\n+          org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.Builder builderForValue) {\n+        if (preferencesBuilder_ == null) {\n+          preferences_ = builderForValue.build();\n+          onChanged();\n+        } else {\n+          preferencesBuilder_.setMessage(builderForValue.build());\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder mergePreferences(org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences value) {\n+        if (preferencesBuilder_ == null) {\n+          if (((bitField0_ & 0x00000001) == 0x00000001) &&\n+              preferences_ != org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.getDefaultInstance()) {\n+            preferences_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.newBuilder(preferences_).mergeFrom(value).buildPartial();\n+          } else {\n+            preferences_ = value;\n+          }\n+          onChanged();\n+        } else {\n+          preferencesBuilder_.mergeFrom(value);\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder clearPreferences() {\n+        if (preferencesBuilder_ == null) {\n+          preferences_ = org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.getDefaultInstance();\n+          onChanged();\n+        } else {\n+          preferencesBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        return this;\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.Builder getPreferencesBuilder() {\n+        bitField0_ |= 0x00000001;\n+        onChanged();\n+        return getPreferencesFieldBuilder().getBuilder();\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferencesOrBuilder getPreferencesOrBuilder() {\n+        if (preferencesBuilder_ != null) {\n+          return preferencesBuilder_.getMessageOrBuilder();\n+        } else {\n+          return preferences_;\n+        }\n+      }\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences, org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.Builder, org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferencesOrBuilder> \n+          getPreferencesFieldBuilder() {\n+        if (preferencesBuilder_ == null) {\n+          preferencesBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences, org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.Builder, org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferencesOrBuilder>(\n+                  preferences_,\n+                  getParentForChildren(),\n+                  isClean());\n+          preferences_ = null;\n+        }\n+        return preferencesBuilder_;\n+      }\n+      \n+      // @@protoc_insertion_point(builder_scope:Hedwig.SubscribeResponse)\n+    }\n+    \n+    static {\n+      defaultInstance = new SubscribeResponse(true);\n+      defaultInstance.initFields();\n+    }\n+    \n+    // @@protoc_insertion_point(class_scope:Hedwig.SubscribeResponse)\n+  }\n+  \n   public interface ResponseBodyOrBuilder\n       extends com.google.protobuf.MessageOrBuilder {\n     \n     // optional .Hedwig.PublishResponse publishResponse = 1;\n     boolean hasPublishResponse();\n     org.apache.hedwig.protocol.PubSubProtocol.PublishResponse getPublishResponse();\n     org.apache.hedwig.protocol.PubSubProtocol.PublishResponseOrBuilder getPublishResponseOrBuilder();\n+    \n+    // optional .Hedwig.SubscribeResponse subscribeResponse = 2;\n+    boolean hasSubscribeResponse();\n+    org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse getSubscribeResponse();\n+    org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponseOrBuilder getSubscribeResponseOrBuilder();\n   }\n   public static final class ResponseBody extends\n       com.google.protobuf.GeneratedMessage\n@@ -10643,8 +11072,22 @@ public boolean hasPublishResponse() {\n       return publishResponse_;\n     }\n     \n+    // optional .Hedwig.SubscribeResponse subscribeResponse = 2;\n+    public static final int SUBSCRIBERESPONSE_FIELD_NUMBER = 2;\n+    private org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse subscribeResponse_;\n+    public boolean hasSubscribeResponse() {\n+      return ((bitField0_ & 0x00000002) == 0x00000002);\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse getSubscribeResponse() {\n+      return subscribeResponse_;\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponseOrBuilder getSubscribeResponseOrBuilder() {\n+      return subscribeResponse_;\n+    }\n+    \n     private void initFields() {\n       publishResponse_ = org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.getDefaultInstance();\n+      subscribeResponse_ = org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.getDefaultInstance();\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -10667,6 +11110,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n       if (((bitField0_ & 0x00000001) == 0x00000001)) {\n         output.writeMessage(1, publishResponse_);\n       }\n+      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n+        output.writeMessage(2, subscribeResponse_);\n+      }\n       getUnknownFields().writeTo(output);\n     }\n     \n@@ -10680,6 +11126,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeMessageSize(1, publishResponse_);\n       }\n+      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeMessageSize(2, subscribeResponse_);\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -10797,6 +11247,7 @@ private Builder(BuilderParent parent) {\n       private void maybeForceBuilderInitialization() {\n         if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n           getPublishResponseFieldBuilder();\n+          getSubscribeResponseFieldBuilder();\n         }\n       }\n       private static Builder create() {\n@@ -10811,6 +11262,12 @@ public Builder clear() {\n           publishResponseBuilder_.clear();\n         }\n         bitField0_ = (bitField0_ & ~0x00000001);\n+        if (subscribeResponseBuilder_ == null) {\n+          subscribeResponse_ = org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.getDefaultInstance();\n+        } else {\n+          subscribeResponseBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000002);\n         return this;\n       }\n       \n@@ -10857,6 +11314,14 @@ public Builder clone() {\n         } else {\n           result.publishResponse_ = publishResponseBuilder_.build();\n         }\n+        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {\n+          to_bitField0_ |= 0x00000002;\n+        }\n+        if (subscribeResponseBuilder_ == null) {\n+          result.subscribeResponse_ = subscribeResponse_;\n+        } else {\n+          result.subscribeResponse_ = subscribeResponseBuilder_.build();\n+        }\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -10876,6 +11341,9 @@ public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.ResponseBody\n         if (other.hasPublishResponse()) {\n           mergePublishResponse(other.getPublishResponse());\n         }\n+        if (other.hasSubscribeResponse()) {\n+          mergeSubscribeResponse(other.getSubscribeResponse());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -10922,6 +11390,15 @@ public Builder mergeFrom(\n               setPublishResponse(subBuilder.buildPartial());\n               break;\n             }\n+            case 18: {\n+              org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.Builder subBuilder = org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.newBuilder();\n+              if (hasSubscribeResponse()) {\n+                subBuilder.mergeFrom(getSubscribeResponse());\n+              }\n+              input.readMessage(subBuilder, extensionRegistry);\n+              setSubscribeResponse(subBuilder.buildPartial());\n+              break;\n+            }\n           }\n         }\n       }\n@@ -11018,6 +11495,96 @@ public Builder clearPublishResponse() {\n         return publishResponseBuilder_;\n       }\n       \n+      // optional .Hedwig.SubscribeResponse subscribeResponse = 2;\n+      private org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse subscribeResponse_ = org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.getDefaultInstance();\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse, org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.Builder, org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponseOrBuilder> subscribeResponseBuilder_;\n+      public boolean hasSubscribeResponse() {\n+        return ((bitField0_ & 0x00000002) == 0x00000002);\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse getSubscribeResponse() {\n+        if (subscribeResponseBuilder_ == null) {\n+          return subscribeResponse_;\n+        } else {\n+          return subscribeResponseBuilder_.getMessage();\n+        }\n+      }\n+      public Builder setSubscribeResponse(org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse value) {\n+        if (subscribeResponseBuilder_ == null) {\n+          if (value == null) {\n+            throw new NullPointerException();\n+          }\n+          subscribeResponse_ = value;\n+          onChanged();\n+        } else {\n+          subscribeResponseBuilder_.setMessage(value);\n+        }\n+        bitField0_ |= 0x00000002;\n+        return this;\n+      }\n+      public Builder setSubscribeResponse(\n+          org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.Builder builderForValue) {\n+        if (subscribeResponseBuilder_ == null) {\n+          subscribeResponse_ = builderForValue.build();\n+          onChanged();\n+        } else {\n+          subscribeResponseBuilder_.setMessage(builderForValue.build());\n+        }\n+        bitField0_ |= 0x00000002;\n+        return this;\n+      }\n+      public Builder mergeSubscribeResponse(org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse value) {\n+        if (subscribeResponseBuilder_ == null) {\n+          if (((bitField0_ & 0x00000002) == 0x00000002) &&\n+              subscribeResponse_ != org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.getDefaultInstance()) {\n+            subscribeResponse_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.newBuilder(subscribeResponse_).mergeFrom(value).buildPartial();\n+          } else {\n+            subscribeResponse_ = value;\n+          }\n+          onChanged();\n+        } else {\n+          subscribeResponseBuilder_.mergeFrom(value);\n+        }\n+        bitField0_ |= 0x00000002;\n+        return this;\n+      }\n+      public Builder clearSubscribeResponse() {\n+        if (subscribeResponseBuilder_ == null) {\n+          subscribeResponse_ = org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.getDefaultInstance();\n+          onChanged();\n+        } else {\n+          subscribeResponseBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000002);\n+        return this;\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.Builder getSubscribeResponseBuilder() {\n+        bitField0_ |= 0x00000002;\n+        onChanged();\n+        return getSubscribeResponseFieldBuilder().getBuilder();\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponseOrBuilder getSubscribeResponseOrBuilder() {\n+        if (subscribeResponseBuilder_ != null) {\n+          return subscribeResponseBuilder_.getMessageOrBuilder();\n+        } else {\n+          return subscribeResponse_;\n+        }\n+      }\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse, org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.Builder, org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponseOrBuilder> \n+          getSubscribeResponseFieldBuilder() {\n+        if (subscribeResponseBuilder_ == null) {\n+          subscribeResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse, org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.Builder, org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponseOrBuilder>(\n+                  subscribeResponse_,\n+                  getParentForChildren(),\n+                  isClean());\n+          subscribeResponse_ = null;\n+        }\n+        return subscribeResponseBuilder_;\n+      }\n+      \n       // @@protoc_insertion_point(builder_scope:Hedwig.ResponseBody)\n     }\n     \n@@ -14496,6 +15063,11 @@ public Builder clearNumTopics() {\n   private static\n     com.google.protobuf.GeneratedMessage.FieldAccessorTable\n       internal_static_Hedwig_PublishResponse_fieldAccessorTable;\n+  private static com.google.protobuf.Descriptors.Descriptor\n+    internal_static_Hedwig_SubscribeResponse_descriptor;\n+  private static\n+    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+      internal_static_Hedwig_SubscribeResponse_fieldAccessorTable;\n   private static com.google.protobuf.Descriptors.Descriptor\n     internal_static_Hedwig_ResponseBody_descriptor;\n   private static\n@@ -14598,38 +15170,41 @@ public Builder clearNumTopics() {\n       \"\\014\\022\\024\\n\\014subscriberId\\030\\007 \\001(\\014\\022*\\n\\014responseBody\\030\" +\n       \"\\010 \\001(\\0132\\024.Hedwig.ResponseBody\\\"?\\n\\017PublishRe\" +\n       \"sponse\\022,\\n\\016publishedMsgId\\030\\001 \\002(\\0132\\024.Hedwig.\" +\n-      \"MessageSeqId\\\"@\\n\\014ResponseBody\\0220\\n\\017publishR\" +\n-      \"esponse\\030\\001 \\001(\\0132\\027.Hedwig.PublishResponse\\\"N\" +\n-      \"\\n\\021SubscriptionState\\022#\\n\\005msgId\\030\\001 \\002(\\0132\\024.Hed\" +\n-      \"wig.MessageSeqId\\022\\024\\n\\014messageBound\\030\\002 \\001(\\r\\\"r\" +\n-      \"\\n\\020SubscriptionData\\022(\\n\\005state\\030\\001 \\001(\\0132\\031.Hedw\" +\n-      \"ig.SubscriptionState\\0224\\n\\013preferences\\030\\002 \\001(\" +\n-      \"\\0132\\037.Hedwig.SubscriptionPreferences\\\"O\\n\\013Le\",\n-      \"dgerRange\\022\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020endSeqIdI\" +\n-      \"ncluded\\030\\002 \\001(\\0132\\024.Hedwig.MessageSeqId\\\"3\\n\\014L\" +\n-      \"edgerRanges\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.Hedwig.Led\" +\n-      \"gerRange\\\":\\n\\013ManagerMeta\\022\\023\\n\\013managerImpl\\030\\002\" +\n-      \" \\002(\\t\\022\\026\\n\\016managerVersion\\030\\003 \\002(\\r\\\".\\n\\013HubInfoD\" +\n-      \"ata\\022\\020\\n\\010hostname\\030\\002 \\002(\\t\\022\\r\\n\\005czxid\\030\\003 \\002(\\004\\\" \\n\\013\" +\n-      \"HubLoadData\\022\\021\\n\\tnumTopics\\030\\002 \\002(\\004*\\\"\\n\\017Protoc\" +\n-      \"olVersion\\022\\017\\n\\013VERSION_ONE\\020\\001*p\\n\\rOperationT\" +\n-      \"ype\\022\\013\\n\\007PUBLISH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\\022\\013\\n\\007CONSU\" +\n-      \"ME\\020\\002\\022\\017\\n\\013UNSUBSCRIBE\\020\\003\\022\\022\\n\\016START_DELIVERY\\020\",\n-      \"\\004\\022\\021\\n\\rSTOP_DELIVERY\\020\\005*\\205\\004\\n\\nStatusCode\\022\\013\\n\\007S\" +\n-      \"UCCESS\\020\\000\\022\\026\\n\\021MALFORMED_REQUEST\\020\\221\\003\\022\\022\\n\\rNO_S\" +\n-      \"UCH_TOPIC\\020\\222\\003\\022\\036\\n\\031CLIENT_ALREADY_SUBSCRIBE\" +\n-      \"D\\020\\223\\003\\022\\032\\n\\025CLIENT_NOT_SUBSCRIBED\\020\\224\\003\\022\\026\\n\\021COUL\" +\n-      \"D_NOT_CONNECT\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\\226\\003\\022\\036\\n\\031NOT\" +\n-      \"_RESPONSIBLE_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SERVICE_DOW\" +\n-      \"N\\020\\366\\003\\022\\024\\n\\017UNCERTAIN_STATE\\020\\367\\003\\022\\033\\n\\026INVALID_ME\" +\n-      \"SSAGE_FILTER\\020\\370\\003\\022\\020\\n\\013BAD_VERSION\\020\\210\\004\\022\\036\\n\\031NO_\" +\n-      \"TOPIC_PERSISTENCE_INFO\\020\\211\\004\\022\\\"\\n\\035TOPIC_PERSI\" +\n-      \"STENCE_INFO_EXISTS\\020\\212\\004\\022\\032\\n\\025NO_SUBSCRIPTION\",\n-      \"_STATE\\020\\213\\004\\022\\036\\n\\031SUBSCRIPTION_STATE_EXISTS\\020\\214\" +\n-      \"\\004\\022\\030\\n\\023NO_TOPIC_OWNER_INFO\\020\\215\\004\\022\\034\\n\\027TOPIC_OWN\" +\n-      \"ER_INFO_EXISTS\\020\\216\\004\\022\\031\\n\\024UNEXPECTED_CONDITIO\" +\n-      \"N\\020\\330\\004\\022\\016\\n\\tCOMPOSITE\\020\\274\\005B\\036\\n\\032org.apache.hedwi\" +\n-      \"g.protocolH\\001\"\n+      \"MessageSeqId\\\"I\\n\\021SubscribeResponse\\0224\\n\\013pre\" +\n+      \"ferences\\030\\002 \\001(\\0132\\037.Hedwig.SubscriptionPref\" +\n+      \"erences\\\"v\\n\\014ResponseBody\\0220\\n\\017publishRespon\" +\n+      \"se\\030\\001 \\001(\\0132\\027.Hedwig.PublishResponse\\0224\\n\\021sub\" +\n+      \"scribeResponse\\030\\002 \\001(\\0132\\031.Hedwig.SubscribeR\" +\n+      \"esponse\\\"N\\n\\021SubscriptionState\\022#\\n\\005msgId\\030\\001 \" +\n+      \"\\002(\\0132\\024.Hedwig.MessageSeqId\\022\\024\\n\\014messageBoun\",\n+      \"d\\030\\002 \\001(\\r\\\"r\\n\\020SubscriptionData\\022(\\n\\005state\\030\\001 \\001\" +\n+      \"(\\0132\\031.Hedwig.SubscriptionState\\0224\\n\\013prefere\" +\n+      \"nces\\030\\002 \\001(\\0132\\037.Hedwig.SubscriptionPreferen\" +\n+      \"ces\\\"O\\n\\013LedgerRange\\022\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020\" +\n+      \"endSeqIdIncluded\\030\\002 \\001(\\0132\\024.Hedwig.MessageS\" +\n+      \"eqId\\\"3\\n\\014LedgerRanges\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.H\" +\n+      \"edwig.LedgerRange\\\":\\n\\013ManagerMeta\\022\\023\\n\\013mana\" +\n+      \"gerImpl\\030\\002 \\002(\\t\\022\\026\\n\\016managerVersion\\030\\003 \\002(\\r\\\".\\n\" +\n+      \"\\013HubInfoData\\022\\020\\n\\010hostname\\030\\002 \\002(\\t\\022\\r\\n\\005czxid\\030\" +\n+      \"\\003 \\002(\\004\\\" \\n\\013HubLoadData\\022\\021\\n\\tnumTopics\\030\\002 \\002(\\004*\",\n+      \"\\\"\\n\\017ProtocolVersion\\022\\017\\n\\013VERSION_ONE\\020\\001*p\\n\\rO\" +\n+      \"perationType\\022\\013\\n\\007PUBLISH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\" +\n+      \"\\022\\013\\n\\007CONSUME\\020\\002\\022\\017\\n\\013UNSUBSCRIBE\\020\\003\\022\\022\\n\\016START_\" +\n+      \"DELIVERY\\020\\004\\022\\021\\n\\rSTOP_DELIVERY\\020\\005*\\205\\004\\n\\nStatus\" +\n+      \"Code\\022\\013\\n\\007SUCCESS\\020\\000\\022\\026\\n\\021MALFORMED_REQUEST\\020\\221\" +\n+      \"\\003\\022\\022\\n\\rNO_SUCH_TOPIC\\020\\222\\003\\022\\036\\n\\031CLIENT_ALREADY_\" +\n+      \"SUBSCRIBED\\020\\223\\003\\022\\032\\n\\025CLIENT_NOT_SUBSCRIBED\\020\\224\" +\n+      \"\\003\\022\\026\\n\\021COULD_NOT_CONNECT\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\" +\n+      \"\\226\\003\\022\\036\\n\\031NOT_RESPONSIBLE_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SE\" +\n+      \"RVICE_DOWN\\020\\366\\003\\022\\024\\n\\017UNCERTAIN_STATE\\020\\367\\003\\022\\033\\n\\026I\",\n+      \"NVALID_MESSAGE_FILTER\\020\\370\\003\\022\\020\\n\\013BAD_VERSION\\020\" +\n+      \"\\210\\004\\022\\036\\n\\031NO_TOPIC_PERSISTENCE_INFO\\020\\211\\004\\022\\\"\\n\\035TO\" +\n+      \"PIC_PERSISTENCE_INFO_EXISTS\\020\\212\\004\\022\\032\\n\\025NO_SUB\" +\n+      \"SCRIPTION_STATE\\020\\213\\004\\022\\036\\n\\031SUBSCRIPTION_STATE\" +\n+      \"_EXISTS\\020\\214\\004\\022\\030\\n\\023NO_TOPIC_OWNER_INFO\\020\\215\\004\\022\\034\\n\\027\" +\n+      \"TOPIC_OWNER_INFO_EXISTS\\020\\216\\004\\022\\031\\n\\024UNEXPECTED\" +\n+      \"_CONDITION\\020\\330\\004\\022\\016\\n\\tCOMPOSITE\\020\\274\\005B\\036\\n\\032org.apa\" +\n+      \"che.hedwig.protocolH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n@@ -14772,64 +15347,72 @@ public Builder clearNumTopics() {\n               new java.lang.String[] { \"PublishedMsgId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder.class);\n-          internal_static_Hedwig_ResponseBody_descriptor =\n+          internal_static_Hedwig_SubscribeResponse_descriptor =\n             getDescriptor().getMessageTypes().get(16);\n+          internal_static_Hedwig_SubscribeResponse_fieldAccessorTable = new\n+            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n+              internal_static_Hedwig_SubscribeResponse_descriptor,\n+              new java.lang.String[] { \"Preferences\", },\n+              org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.class,\n+              org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.Builder.class);\n+          internal_static_Hedwig_ResponseBody_descriptor =\n+            getDescriptor().getMessageTypes().get(17);\n           internal_static_Hedwig_ResponseBody_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_ResponseBody_descriptor,\n-              new java.lang.String[] { \"PublishResponse\", },\n+              new java.lang.String[] { \"PublishResponse\", \"SubscribeResponse\", },\n               org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.class,\n               org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder.class);\n           internal_static_Hedwig_SubscriptionState_descriptor =\n-            getDescriptor().getMessageTypes().get(17);\n+            getDescriptor().getMessageTypes().get(18);\n           internal_static_Hedwig_SubscriptionState_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionState_descriptor,\n               new java.lang.String[] { \"MsgId\", \"MessageBound\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState.Builder.class);\n           internal_static_Hedwig_SubscriptionData_descriptor =\n-            getDescriptor().getMessageTypes().get(18);\n+            getDescriptor().getMessageTypes().get(19);\n           internal_static_Hedwig_SubscriptionData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionData_descriptor,\n               new java.lang.String[] { \"State\", \"Preferences\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData.Builder.class);\n           internal_static_Hedwig_LedgerRange_descriptor =\n-            getDescriptor().getMessageTypes().get(19);\n+            getDescriptor().getMessageTypes().get(20);\n           internal_static_Hedwig_LedgerRange_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_LedgerRange_descriptor,\n               new java.lang.String[] { \"LedgerId\", \"EndSeqIdIncluded\", },\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRange.class,\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRange.Builder.class);\n           internal_static_Hedwig_LedgerRanges_descriptor =\n-            getDescriptor().getMessageTypes().get(20);\n+            getDescriptor().getMessageTypes().get(21);\n           internal_static_Hedwig_LedgerRanges_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_LedgerRanges_descriptor,\n               new java.lang.String[] { \"Ranges\", },\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges.class,\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges.Builder.class);\n           internal_static_Hedwig_ManagerMeta_descriptor =\n-            getDescriptor().getMessageTypes().get(21);\n+            getDescriptor().getMessageTypes().get(22);\n           internal_static_Hedwig_ManagerMeta_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_ManagerMeta_descriptor,\n               new java.lang.String[] { \"ManagerImpl\", \"ManagerVersion\", },\n               org.apache.hedwig.protocol.PubSubProtocol.ManagerMeta.class,\n               org.apache.hedwig.protocol.PubSubProtocol.ManagerMeta.Builder.class);\n           internal_static_Hedwig_HubInfoData_descriptor =\n-            getDescriptor().getMessageTypes().get(22);\n+            getDescriptor().getMessageTypes().get(23);\n           internal_static_Hedwig_HubInfoData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_HubInfoData_descriptor,\n               new java.lang.String[] { \"Hostname\", \"Czxid\", },\n               org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.class,\n               org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.class);\n           internal_static_Hedwig_HubLoadData_descriptor =\n-            getDescriptor().getMessageTypes().get(23);\n+            getDescriptor().getMessageTypes().get(24);\n           internal_static_Hedwig_HubLoadData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_HubLoadData_descriptor,"},{"sha":"af69043ed7e85f3a832c2be943746c8d21b880d7","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -20,6 +20,7 @@\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n+import org.apache.hedwig.protocol.PubSubProtocol.ResponseBody;\n import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n \n public class PubSubResponseUtils {\n@@ -37,7 +38,13 @@ public static PubSubResponse getSuccessResponse(long txnId) {\n         return getBasicBuilder(StatusCode.SUCCESS).setTxnId(txnId).build();\n     }\n \n+    public static PubSubResponse getSuccessResponse(long txnId, ResponseBody respBody) {\n+        return getBasicBuilder(StatusCode.SUCCESS).setTxnId(txnId)\n+               .setResponseBody(respBody).build();\n+    }\n+\n     public static PubSubResponse getResponseForException(PubSubException e, long txnId) {\n         return getBasicBuilder(e.getCode()).setStatusMsg(e.getMessage()).setTxnId(txnId).build();\n     }\n+\n }"},{"sha":"7645c5ee380cdd758495aadb5e56253de97cb01f","filename":"hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -193,8 +193,13 @@ message PublishResponse {\n     required MessageSeqId publishedMsgId = 1;\n }\n \n+message SubscribeResponse {\n+    optional SubscriptionPreferences preferences = 2;\n+}\n+\n message ResponseBody {\n     optional PublishResponse publishResponse = 1;\n+    optional SubscribeResponse subscribeResponse = 2;\n }\n \n "},{"sha":"1359a07990ed76ccece078e4f6c93fc1e4fafff8","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -19,13 +19,13 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n-import org.apache.hedwig.filter.MessageFilter;\n+import org.apache.hedwig.filter.ServerMessageFilter;\n \n public interface DeliveryManager {\n     public void start();\n \n     public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, MessageFilter filter);\n+                                         DeliveryEndPoint endPoint, ServerMessageFilter filter);\n \n     public void stopServingSubscriber(ByteString topic, ByteString subscriberId);\n "},{"sha":"b9125cae3245b39d5cb1670c8de99d98c548b806","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -36,7 +36,7 @@\n \n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.data.TopicSubscriber;\n-import org.apache.hedwig.filter.MessageFilter;\n+import org.apache.hedwig.filter.ServerMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;\n@@ -137,7 +137,7 @@ protected void enqueueWithoutFailure(DeliveryManagerRequest request) {\n      *            subscriber\n      */\n     public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, MessageFilter filter) {\n+                                         DeliveryEndPoint endPoint, ServerMessageFilter filter) {\n \n         ActiveSubscriberState subscriber = new ActiveSubscriberState(topic, subscriberId, seqIdToStartFrom\n                 .getLocalComponent() - 1, endPoint, filter);\n@@ -299,13 +299,13 @@ protected void addDeliveryPtr(ActiveSubscriberState subscriber, Long seqId) {\n         long lastScanErrorTime = -1;\n         long localSeqIdDeliveringNow;\n         long lastSeqIdCommunicatedExternally;\n-        MessageFilter filter;\n+        ServerMessageFilter filter;\n         // TODO make use of these variables\n \n         final static int SEQ_ID_SLACK = 10;\n \n         public ActiveSubscriberState(ByteString topic, ByteString subscriberId, long lastLocalSeqIdDelivered,\n-                                     DeliveryEndPoint deliveryEndPoint, MessageFilter filter) {\n+                                     DeliveryEndPoint deliveryEndPoint, ServerMessageFilter filter) {\n             this.topic = topic;\n             this.subscriberId = subscriberId;\n             this.lastLocalSeqIdDelivered = lastLocalSeqIdDelivered;\n@@ -316,6 +316,8 @@ public ActiveSubscriberState(ByteString topic, ByteString subscriberId, long las\n         public void setNotConnected() {\n             this.connected = false;\n             deliveryEndPoint.close();\n+            // uninitialize filter\n+            this.filter.uninitialize();\n         }\n \n         public ByteString getTopic() {"},{"sha":"1ad9ce12f9682a74d14455259ebe2e914fbe106e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -31,12 +31,14 @@\n import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;\n-import org.apache.hedwig.filter.MessageFilter;\n import org.apache.hedwig.filter.PipelineFilter;\n+import org.apache.hedwig.filter.ServerMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.ResponseBody;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData;\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n@@ -164,7 +166,7 @@ public void operationFinished(Object ctx, SubscriptionData subData) {\n                     if (subData.hasPreferences() &&\n                         subData.getPreferences().hasMessageFilter()) {\n                         String messageFilterName = subData.getPreferences().getMessageFilter();\n-                        filter.addLast(ReflectionUtils.newInstance(messageFilterName, MessageFilter.class));\n+                        filter.addLast(ReflectionUtils.newInstance(messageFilterName, ServerMessageFilter.class));\n                     }\n                     // initialize the filter\n                     filter.initialize(cfg.getConf());\n@@ -194,7 +196,14 @@ public void operationFinished(Object ctx, SubscriptionData subData) {\n                 // First write success and then tell the delivery manager,\n                 // otherwise the first message might go out before the response\n                 // to the subscribe\n-                channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n+                SubscribeResponse.Builder subRespBuilder = SubscribeResponse.newBuilder()\n+                    .setPreferences(subData.getPreferences());\n+                ResponseBody respBody = ResponseBody.newBuilder()\n+                    .setSubscribeResponse(subRespBuilder).build();\n+                channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId(), respBody));\n+                logger.info(\"Subscribe request (\" + request.getTxnId() + \") for (topic:\" + topic.toStringUtf8()\n+                          + \", subscriber:\" + subscriberId.toStringUtf8() + \") from channel \" + channel.getRemoteAddress()\n+                          + \" succeed - its subscription data is \" + SubscriptionStateUtils.toString(subData));\n                 subStats.updateLatency(MathUtils.now() - requestTime);\n \n                 // want to start 1 ahead of the consume ptr"},{"sha":"389ccc9d5ba972f6cf0b9c167f6baf2cc4cc95be","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -22,19 +22,20 @@\n import com.google.protobuf.ByteString;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.hedwig.filter.MessageFilter;\n+import org.apache.hedwig.filter.MessageFilterBase;\n+import org.apache.hedwig.filter.ServerMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n \n-public class AllToAllTopologyFilter implements MessageFilter {\n+public class AllToAllTopologyFilter implements ServerMessageFilter {\n \n     ByteString subscriberRegion;\n     boolean isHubSubscriber;\n \n     @Override\n-    public MessageFilter initialize(Configuration conf)\n+    public ServerMessageFilter initialize(Configuration conf)\n     throws ConfigurationException, IOException {\n         String region = conf.getString(ServerConfiguration.REGION, \"standalone\");\n         if (null == region) {\n@@ -50,8 +51,8 @@ public void uninitialize() {\n     }\n \n     @Override\n-    public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n-                                                    SubscriptionPreferences preferences) {\n+    public MessageFilterBase setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                                                        SubscriptionPreferences preferences) {\n         isHubSubscriber = SubscriptionStateUtils.isHubSubscriber(subscriberId);\n         return this;\n     }"},{"sha":"eb21ebce66790ed6efb441344c4498bd5922354d","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -19,6 +19,7 @@\n \n import java.net.InetAddress;\n import java.io.File;\n+import java.io.IOException;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n@@ -33,6 +34,8 @@\n import static org.junit.Assert.*;\n \n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -658,6 +661,78 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n             subscriber.closeSubscription(topic, subid);\n         }\n \n+        void receiveNumModM(final ByteString topic, final ByteString subid,\n+                            final int start, final int num, final int M) throws Exception {\n+            org.apache.hedwig.filter.ServerMessageFilter filter =\n+                new org.apache.hedwig.filter.ServerMessageFilter() {\n+\n+                @Override\n+                public org.apache.hedwig.filter.ServerMessageFilter\n+                    initialize(Configuration conf) {\n+                    // do nothing\n+                    return this;\n+                }\n+\n+                @Override\n+                public void uninitialize() {\n+                    // do nothing;\n+                }\n+\n+                @Override\n+                public org.apache.hedwig.filter.MessageFilterBase\n+                    setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                    org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences preferences) {\n+                    // do nothing;\n+                    return this;\n+                }\n+\n+                @Override\n+                public boolean testMessage(org.apache.hedwig.protocol.PubSubProtocol.Message msg) {\n+                    int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+                    return 0 == value % M;\n+                }\n+            };\n+            filter.initialize(conf.getConf());\n+\n+            subscriber.subscribe(topic, subid, org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.ATTACH);\n+            final int base = start + M - start % M;\n+            final AtomicInteger expected = new AtomicInteger(base);\n+            final CountDownLatch latch = new CountDownLatch(1);\n+            subscriber.startDeliveryWithFilter(topic, subid, new org.apache.hedwig.client.api.MessageHandler() {\n+                synchronized public void deliver(ByteString topic, ByteString subscriberId,\n+                                                 org.apache.hedwig.protocol.PubSubProtocol.Message msg,\n+                                                 org.apache.hedwig.util.Callback<Void> callback, Object context) {\n+                    try {\n+                        int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+                        // duplicated messages received, ignore them\n+                        if (value > start) {\n+                            if (value == expected.get()) {\n+                                expected.addAndGet(M);\n+                            } else {\n+                                logger.error(\"Did not receive expected value, expected {}, got {}\",\n+                                             expected.get(), value);\n+                                expected.set(0);\n+                                latch.countDown();\n+                            }\n+                            if (expected.get() == (base + num * M)) {\n+                                latch.countDown();\n+                            }\n+                        }\n+                        callback.operationFinished(context, null);\n+                    } catch (Exception e) {\n+                        logger.error(\"Received bad message\", e);\n+                        latch.countDown();\n+                    }\n+                }\n+            }, (org.apache.hedwig.filter.ClientMessageFilter) filter);\n+            assertTrue(\"Timed out waiting for messages mod \" + M + \" expected is \" + expected.get(),\n+                       latch.await(10, TimeUnit.SECONDS));\n+            assertEquals(\"Should be expected message with \" + (base + num * M), (base + num*M), expected.get());\n+            subscriber.stopDelivery(topic, subid);\n+            filter.uninitialize();\n+            subscriber.closeSubscription(topic, subid);\n+        }\n+\n         void subscribe(ByteString topic, ByteString subscriberId) throws Exception {\n             org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions options =\n                 org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.newBuilder()\n@@ -918,4 +993,40 @@ public void testUpdateMessageBoundCompat410() throws Exception {\n         bkccur.stop();\n     }\n \n+    /**\n+     * Test compatability between version 4.1.0 and the current version.\n+     *\n+     * A current client running message filter would fail on 4.1.0 hub servers.\n+     */\n+    @Test\n+    public void testClientMessageFilterCompat410() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestUpdateMessageBoundCompat410\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        // start bookkeeper\n+        BookKeeperCluster410 bkc410 = new BookKeeperCluster410(3);\n+        bkc410.start();\n+\n+        // start hub server 410\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        s410.start();\n+\n+        ClientCurrent ccur = new ClientCurrent();\n+        ccur.subscribe(topic, subid);\n+        ccur.closeSubscription(topic, subid);\n+\n+        ccur.publishInts(topic, 0, 100);\n+        try {\n+            ccur.receiveNumModM(topic, subid, 0, 50, 2);\n+            fail(\"client-side filter could not run on 4.1.0 hub server\");\n+        } catch (Exception e) {\n+            logger.info(\"Should fail to run client-side message filter on 4.1.0 hub server.\", e);\n+            ccur.closeSubscription(topic, subid);\n+        }\n+\n+        // stop 410 server\n+        s410.stop();\n+        // stop bookkeeper cluster\n+        bkc410.stop();\n+    }\n }"},{"sha":"f35b586b3dffd848c27f7351c429860c70436d12","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -22,7 +22,7 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.data.TopicSubscriber;\n-import org.apache.hedwig.filter.MessageFilter;\n+import org.apache.hedwig.filter.ServerMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n \n public class StubDeliveryManager implements DeliveryManager {\n@@ -32,10 +32,10 @@\n         public ByteString subscriberId;\n         public MessageSeqId seqIdToStartFrom;\n         public DeliveryEndPoint endPoint;\n-        public MessageFilter filter;\n+        public ServerMessageFilter filter;\n \n         public StartServingRequest(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                   DeliveryEndPoint endPoint, MessageFilter filter) {\n+                                   DeliveryEndPoint endPoint, ServerMessageFilter filter) {\n             this.topic = topic;\n             this.subscriberId = subscriberId;\n             this.seqIdToStartFrom = seqIdToStartFrom;\n@@ -49,7 +49,7 @@ public StartServingRequest(ByteString topic, ByteString subscriberId, MessageSeq\n \n     @Override\n     public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, MessageFilter filter) {\n+                                         DeliveryEndPoint endPoint, ServerMessageFilter filter) {\n         lastRequest.add(new StartServingRequest(topic, subscriberId, seqIdToStartFrom, endPoint, filter));\n     }\n "},{"sha":"ae46be2db555abf9cdf105d4698e111604f6ea82","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","status":"modified","additions":111,"deletions":35,"changes":146,"blob_url":"https://github.com/apache/bookkeeper/blob/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/2ffc123e5ffb37163512a89301a128f07f05750c/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java?ref=2ffc123e5ffb37163512a89301a128f07f05750c","patch":"@@ -28,6 +28,7 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.util.ReflectionUtils;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.hedwig.client.HedwigClient;\n@@ -47,26 +48,29 @@\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.filter.MessageFilter;\n+import org.apache.hedwig.filter.ClientMessageFilter;\n+import org.apache.hedwig.filter.MessageFilterBase;\n+import org.apache.hedwig.filter.ServerMessageFilter;\n import org.apache.hedwig.util.Callback;\n \n import org.apache.hedwig.server.HedwigHubTestBase;\n \n public class TestMessageFilter extends HedwigHubTestBase {\n \n     // Client side variables\n+    protected ClientConfiguration conf;\n     protected HedwigClient client;\n     protected Publisher publisher;\n     protected Subscriber subscriber;\n \n     static final String OPT_MOD = \"MOD\";\n \n-    static class ModMessageFilter implements MessageFilter {\n+    static class ModMessageFilter implements ServerMessageFilter, ClientMessageFilter {\n \n         int mod;\n \n         @Override\n-        public MessageFilter initialize(Configuration conf) {\n+        public ServerMessageFilter initialize(Configuration conf) {\n             // do nothing\n             return this;\n         }\n@@ -77,8 +81,9 @@ public void uninitialize() {\n         }\n \n         @Override\n-        public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n-                                                        SubscriptionPreferences preferences) {\n+        public MessageFilterBase setSubscriptionPreferences(ByteString topic,\n+                                                            ByteString subscriberId,\n+                                                            SubscriptionPreferences preferences) {\n             Map<String, ByteString> userOptions = SubscriptionStateUtils.buildUserOptions(preferences);\n             ByteString modValue = userOptions.get(OPT_MOD);\n             if (null == modValue) {\n@@ -96,10 +101,10 @@ public boolean testMessage(Message msg) {\n         }\n     }\n \n-    static class HeaderMessageFilter implements MessageFilter {\n+    static class HeaderMessageFilter implements ServerMessageFilter, ClientMessageFilter {\n         int mod;\n         @Override\n-        public MessageFilter initialize(Configuration conf) {\n+        public ServerMessageFilter initialize(Configuration conf) {\n             // do nothing\n             return this;\n         }\n@@ -110,8 +115,9 @@ public void uninitialize() {\n         }\n \n         @Override\n-        public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n-                                                        SubscriptionPreferences preferences) {\n+        public MessageFilterBase setSubscriptionPreferences(ByteString topic,\n+                                                            ByteString subscriberId,\n+                                                            SubscriptionPreferences preferences) {\n             // do nothing now\n             return this;\n         }\n@@ -146,12 +152,13 @@ public void setUp() throws Exception {\n         numServers = 1;\n         super.setUp();\n \n-        client = new HedwigClient(new ClientConfiguration() {\n+        conf = new ClientConfiguration() {\n             @Override\n             public boolean isAutoSendConsumeMessageEnabled() {\n                 return false;\n             }\n-        });\n+        };\n+        client = new HedwigClient(conf);\n         publisher = client.getPublisher();\n         subscriber = client.getSubscriber();\n     }\n@@ -177,26 +184,29 @@ private void publishNums(ByteString topic, int start, int num, int M) throws Exc\n     }\n \n     private void receiveNumModM(final ByteString topic, final ByteString subid,\n-                                final String filterClassName,\n+                                final String filterClassName, final ClientMessageFilter filter,\n                                 final int start, final int num, final int M,\n                                 final boolean consume)\n     throws Exception {\n         PubSubProtocol.Map userOptions = PubSubProtocol.Map.newBuilder()\n             .addEntries(PubSubProtocol.Map.Entry.newBuilder().setKey(OPT_MOD)\n                         .setValue(ByteString.copyFromUtf8(String.valueOf(M)))).build();\n-        SubscriptionOptions options = SubscriptionOptions.newBuilder()\n+        SubscriptionOptions.Builder optionsBuilder = SubscriptionOptions.newBuilder()\n             .setCreateOrAttach(CreateOrAttach.ATTACH)\n-            .setMessageFilter(filterClassName)\n-            .setOptions(userOptions).build();\n-        subscriber.subscribe(topic, subid, options);\n+            .setOptions(userOptions);\n+        if (null != filterClassName) {\n+            optionsBuilder.setMessageFilter(filterClassName);\n+        }\n+        subscriber.subscribe(topic, subid, optionsBuilder.build());\n \n         final int base = start + M - start % M;\n \n         final AtomicInteger expected = new AtomicInteger(base);\n         final CountDownLatch latch = new CountDownLatch(1);\n-        subscriber.startDelivery(topic, subid, new MessageHandler() {\n+        MessageHandler msgHandler = new MessageHandler() {\n             synchronized public void deliver(ByteString topic, ByteString subscriberId,\n-                                             Message msg, Callback<Void> callback, Object context) {\n+                                             Message msg, Callback<Void> callback,\n+                                             Object context) {\n                 try {\n                     int value = Integer.valueOf(msg.getBody().toStringUtf8());\n                     // duplicated messages received, ignore them\n@@ -222,7 +232,12 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n                     latch.countDown();\n                 }\n             }\n-        });\n+        };\n+        if (null != filter) {\n+            subscriber.startDeliveryWithFilter(topic, subid, msgHandler, filter);\n+        } else {\n+            subscriber.startDelivery(topic, subid, msgHandler);\n+        }\n         assertTrue(\"Timed out waiting for messages mod \" + M + \" expected is \" + expected.get(),\n                    latch.await(10, TimeUnit.SECONDS));\n         assertEquals(\"Should be expected message with \" + (base + num * M), (base + num*M), expected.get());\n@@ -231,18 +246,18 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n     }\n \n     @Test\n-    public void testMessageFilter() throws Exception {\n+    public void testServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n         subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n         subscriber.closeSubscription(topic, subid);\n         publishNums(topic, 0, 100, 2);\n-        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 50, 2, true);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 0, 50, 2, true);\n     }\n \n     @Test\n-    public void testInvalidMessageFilter() throws Exception {\n+    public void testInvalidServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestInvalidMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n@@ -268,38 +283,38 @@ public void testChangeSubscriptionPreferences() throws Exception {\n         subscriber.closeSubscription(topic, subid);\n \n         publishNums(topic, 0, 100, 2);\n-        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 50, 2, false);\n-        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 25, 4, false);\n-        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 33, 3, true);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 0, 50, 2, false);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 0, 25, 4, false);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 0, 33, 3, true);\n \n         // change mod to receive numbers mod 5\n         publishNums(topic, 100, 100, 5);\n-        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 100, 20, 5, true);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 100, 20, 5, true);\n \n         // change mod to receive numbers mod 7\n         publishNums(topic, 200, 100, 7);\n-        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 200, 14, 7, true);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 200, 14, 7, true);\n     }\n \n     @Test\n-    public void testChangeMessageFilter() throws Exception {\n+    public void testChangeServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n         subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n         subscriber.closeSubscription(topic, subid);\n \n         publishNums(topic, 0, 100, 3);\n-        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 50, 2, false);\n-        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 25, 4, false);\n-        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), 0, 33, 3, true);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 0, 50, 2, false);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 0, 25, 4, false);\n+        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), null, 0, 33, 3, true);\n \n         publishNums(topic, 200, 100, 7);\n-        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), 200, 14, 7, true);\n+        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), null, 200, 14, 7, true);\n     }\n \n     @Test\n-    public void testFixMessageFilter() throws Exception {\n+    public void testFixInvalidServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestFixMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n@@ -308,13 +323,74 @@ public void testFixMessageFilter() throws Exception {\n \n         publishNums(topic, 0, 100, 3);\n         try {\n-            receiveNumModM(topic, subid, \"Invalid_Message_Filter\", 0, 33, 3, true);\n+            receiveNumModM(topic, subid, \"Invalid_Message_Filter\", null, 0, 33, 3, true);\n             // coun't reach here\n             fail(\"Should fail subscribe with invalid message filter\");\n         } catch (Exception pse) {\n             assertTrue(\"Should respond with INVALID_MESSAGE_FILTER\",\n                        pse.getMessage().contains(\"INVALID_MESSAGE_FILTER\"));\n         }\n-        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), 0, 33, 3, true);\n+        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), null, 0, 33, 3, true);\n+    }\n+\n+    @Test\n+    public void testNullClientMessageFilter() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestNullClientMessageFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        try {\n+            subscriber.startDeliveryWithFilter(topic, subid, null, new ModMessageFilter());\n+            fail(\"Should fail start delivery with filter using null message handler.\");\n+        } catch (NullPointerException npe) {\n+        }\n+\n+        try {\n+            subscriber.startDeliveryWithFilter(topic, subid, new MessageHandler() {\n+                public void deliver(ByteString topic, ByteString subscriberId,\n+                                    Message msg, Callback<Void> callback, Object context) {\n+                    // do nothing\n+                }\n+            }, null);\n+            fail(\"Should fail start delivery with filter using null message filter.\");\n+        } catch (NullPointerException npe) {\n+        }\n+    }\n+\n+    @Test\n+    public void testClientSideMessageFilter() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestClientMessageFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.closeSubscription(topic, subid);\n+        publishNums(topic, 0, 100, 2);\n+        receiveNumModM(topic, subid, null, new ModMessageFilter(), 0, 50, 2, true);\n+    }\n+\n+    @Test\n+    public void testChangeSubscriptionPreferencesForClientFilter() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestChangeSubscriptionPreferencesForClientFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.closeSubscription(topic, subid);\n+\n+        publishNums(topic, 0, 100, 2);\n+        receiveNumModM(topic, subid, null, new ModMessageFilter(), 0, 50, 2, false);\n+        receiveNumModM(topic, subid, null, new ModMessageFilter(), 0, 25, 4, false);\n+        receiveNumModM(topic, subid, null, new ModMessageFilter(), 0, 33, 3, true);\n+    }\n+\n+    @Test\n+    public void testChangeClientSideMessageFilter() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestChangeClientSideMessageFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.closeSubscription(topic, subid);\n+\n+        publishNums(topic, 0, 100, 3);\n+        receiveNumModM(topic, subid, null, new ModMessageFilter(), 0, 50, 2, false);\n+        receiveNumModM(topic, subid, null, new HeaderMessageFilter(), 0, 33, 3, true);\n     }\n }"}]}

