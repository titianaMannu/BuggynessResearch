{"sha":"33ea58027b0a3ba160f7ac19d20568709f453f4d","node_id":"MDY6Q29tbWl0MTU3NTk1NjozM2VhNTgwMjdiMGEzYmExNjBmN2FjMTlkMjA1Njg3MDlmNDUzZjRk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T16:32:27Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T16:32:27Z"},"message":"BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531970 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"43f82fad414259c4ccb0ccb90a4696475c8b6f23","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/43f82fad414259c4ccb0ccb90a4696475c8b6f23"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/33ea58027b0a3ba160f7ac19d20568709f453f4d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/33ea58027b0a3ba160f7ac19d20568709f453f4d","html_url":"https://github.com/apache/bookkeeper/commit/33ea58027b0a3ba160f7ac19d20568709f453f4d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/33ea58027b0a3ba160f7ac19d20568709f453f4d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"a3575c3ebcb323a53d7a193488453aa44557c97a","url":"https://api.github.com/repos/apache/bookkeeper/commits/a3575c3ebcb323a53d7a193488453aa44557c97a","html_url":"https://github.com/apache/bookkeeper/commit/a3575c3ebcb323a53d7a193488453aa44557c97a"}],"stats":{"total":42,"additions":38,"deletions":4},"files":[{"sha":"3c84fde5eeba24878046f7473094426cba88293b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/33ea58027b0a3ba160f7ac19d20568709f453f4d/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/33ea58027b0a3ba160f7ac19d20568709f453f4d/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=33ea58027b0a3ba160f7ac19d20568709f453f4d","patch":"@@ -110,6 +110,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-676: Make add asynchrounous in ledger recovery (aniruddha via ivank)\n \n+        BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"0ebb5f7b24b646503b79fd2e3e3bee2ed6fd7ccc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/33ea58027b0a3ba160f7ac19d20568709f453f4d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/33ea58027b0a3ba160f7ac19d20568709f453f4d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=33ea58027b0a3ba160f7ac19d20568709f453f4d","patch":"@@ -258,13 +258,14 @@ public void safeRun() {\n                     prevLastEntryId = metadata.getLastEntryId();\n                     prevLength = metadata.getLength();\n \n+                    // error out pending adds first\n+                    errorOutPendingAdds(rc);\n+\n                     // synchronized on LedgerHandle.this to ensure that \n                     // lastAddPushed can not be updated after the metadata \n                     // is closed. \n                     metadata.setLength(length);\n-\n                     metadata.close(lastAddConfirmed);\n-                    errorOutPendingAdds(rc);\n                     lastAddPushed = lastAddConfirmed;\n                 }\n \n@@ -510,7 +511,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n                 public void safeRun() {\n                     ChannelBuffer toSend = macManager.computeDigestAndPackageForSending(\n                                                entryId, lastAddConfirmed, currentLength, data, offset, length);\n-                    op.initiate(toSend);\n+                    op.initiate(toSend, length);\n                 }\n             });\n         } catch (RuntimeException e) {\n@@ -631,6 +632,7 @@ void handleUnrecoverableErrorDuringAdd(int rc) {\n     void errorOutPendingAdds(int rc) {\n         PendingAddOp pendingAddOp;\n         while ((pendingAddOp = pendingAddOps.poll()) != null) {\n+            addToLength(-pendingAddOp.entryLength);\n             pendingAddOp.submitCallback(rc);\n         }\n     }"},{"sha":"ecca60cf726dd552e95545134e060299c54302ec","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/33ea58027b0a3ba160f7ac19d20568709f453f4d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/33ea58027b0a3ba160f7ac19d20568709f453f4d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=33ea58027b0a3ba160f7ac19d20568709f453f4d","patch":"@@ -43,6 +43,7 @@\n     AddCallback cb;\n     Object ctx;\n     long entryId;\n+    int entryLength;\n     Set<Integer> writeSet;\n \n     DistributionSchedule.AckSet ackSet;\n@@ -121,8 +122,9 @@ void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n         sendWriteRequest(bookieIndex);\n     }\n \n-    void initiate(ChannelBuffer toSend) {\n+    void initiate(ChannelBuffer toSend, int entryLength) {\n         this.toSend = toSend;\n+        this.entryLength = entryLength;\n         for (int bookieIndex : writeSet) {\n             sendWriteRequest(bookieIndex);\n         }"},{"sha":"c6a35504c3c40f2b01b8f8a37720245ce4fe59a4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/33ea58027b0a3ba160f7ac19d20568709f453f4d/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/33ea58027b0a3ba160f7ac19d20568709f453f4d/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=33ea58027b0a3ba160f7ac19d20568709f453f4d","patch":"@@ -23,6 +23,7 @@\n import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n@@ -56,6 +57,33 @@ public LedgerCloseTest() {\n         baseConf.setGcWaitTime(999999);\n     }\n \n+    @Test(timeout = 60000)\n+    public void testLedgerCloseWithConsistentLength() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration();\n+        conf.setZkServers(zkUtil.getZooKeeperConnectString()).setReadTimeout(1);\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        LedgerHandle lh = bkc.createLedger(6, 3, DigestType.CRC32, new byte[] {});\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        stopBKCluster();\n+        final AtomicInteger i = new AtomicInteger(0xdeadbeef);\n+        AsyncCallback.AddCallback cb = new AsyncCallback.AddCallback() {\n+            @Override\n+            public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                i.set(rc);\n+                latch.countDown();\n+            }\n+        };\n+        lh.asyncAddEntry(\"Test Entry\".getBytes(), cb, null);\n+        latch.await();\n+        assertEquals(i.get(), BKException.Code.NotEnoughBookiesException);\n+        assertEquals(0, lh.getLength());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, lh.getLastAddConfirmed());\n+        LedgerHandle newLh = bkc.openLedger(lh.getId(), DigestType.CRC32, new byte[] {});\n+        assertEquals(0, newLh.getLength());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, newLh.getLastAddConfirmed());\n+    }\n+\n     @Test(timeout = 60000)\n     public void testLedgerCloseDuringUnrecoverableErrors() throws Exception {\n         int numEntries = 3;"}]}

