{"sha":"34c260bfc7db379351fa8807897603b9a9b9012b","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNGMyNjBiZmM3ZGIzNzkzNTFmYTg4MDc4OTc2MDNiOWE5YjkwMTJi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-06T06:39:36Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-06T06:39:36Z"},"message":"BOOKKEEPER-701: Improve exception handling of Bookkeeper threads (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1548385 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"956efc2d5d517e160feaab3b2d2ff95f3c474229","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/956efc2d5d517e160feaab3b2d2ff95f3c474229"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/34c260bfc7db379351fa8807897603b9a9b9012b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/34c260bfc7db379351fa8807897603b9a9b9012b","html_url":"https://github.com/apache/bookkeeper/commit/34c260bfc7db379351fa8807897603b9a9b9012b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/34c260bfc7db379351fa8807897603b9a9b9012b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"42185c2e3d9e6d85b095842ac051f3a3c4a4d22f","url":"https://api.github.com/repos/apache/bookkeeper/commits/42185c2e3d9e6d85b095842ac051f3a3c4a4d22f","html_url":"https://github.com/apache/bookkeeper/commit/42185c2e3d9e6d85b095842ac051f3a3c4a4d22f"}],"stats":{"total":196,"additions":169,"deletions":27},"files":[{"sha":"e0893bef61ff8947e2f5dd2e11819af6e9b6e233","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -200,6 +200,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-699: Codahale metrics implementation of stats API (ivank via sijie)\n \n+      BOOKKEEPER-701: Improve exception handling of Bookkeeper threads (rakesh via sijie)\n+\n     NEW FEATURE:\n \n       BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)"},{"sha":"fe3e845c7916710c65973c8156498c777eee12b6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -31,10 +31,7 @@\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CountDownLatch;\n@@ -51,7 +48,6 @@\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n@@ -79,7 +75,7 @@\n  *\n  */\n \n-public class Bookie extends BookieThread {\n+public class Bookie extends BookieCriticalThread {\n \n     private final static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n \n@@ -835,11 +831,12 @@ void triggerBookieShutdown(final int exitCode) {\n         }\n         LOG.info(\"Triggering shutdown of Bookie-{} with exitCode {}\",\n                  conf.getBookiePort(), exitCode);\n-        new Thread(\"BookieShutdownTrigger\") {\n+        BookieThread th = new BookieThread(\"BookieShutdownTrigger\") {\n             public void run() {\n                 Bookie.this.shutdown(exitCode);\n             }\n-        }.start();\n+        };\n+        th.start();\n     }\n \n     // provided a public shutdown method for other caller"},{"sha":"53116611c9cc1528e97c224aaa8d541f07416fd4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieCriticalThread.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieCriticalThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieCriticalThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieCriticalThread.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Thread is marked as critical and will exit, when there is an uncaught\n+ * exception occurred in thread.\n+ */\n+public class BookieCriticalThread extends BookieThread {\n+    private static final Logger LOG = LoggerFactory\n+            .getLogger(BookieCriticalThread.class);\n+\n+    public BookieCriticalThread(String name) {\n+        super(name);\n+    }\n+\n+    public BookieCriticalThread(Runnable thread, String name) {\n+        super(thread, name);\n+    }\n+\n+    @Override\n+    protected void handleException(Thread t, Throwable e) {\n+        LOG.error(\"Uncaught exception in thread {} and is exiting!\",\n+                t.getName(), e);\n+        Runtime.getRuntime().exit(ExitCode.BOOKIE_EXCEPTION);\n+    }\n+}"},{"sha":"8fddc3f677a8e0fd9a682926f78fd9fe69c2428f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","status":"modified","additions":21,"deletions":11,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -25,21 +25,31 @@\n * Any common handing that we require for all bookie threads\n * should be implemented here\n */\n-public class BookieThread extends Thread {\n+public class BookieThread extends Thread implements\n+        Thread.UncaughtExceptionHandler {\n \n-    private static class BookieUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {\n-        static Logger logger = LoggerFactory.getLogger(BookieUncaughtExceptionHandler.class);\n-\n-        @Override\n-        public void uncaughtException(Thread t, Throwable e) {\n-            logger.error(\"Uncaught exception in thread \" + t.getName(), e);\n-            Runtime.getRuntime().exit(1);\n-        }\n+    private static final Logger LOG = LoggerFactory\n+            .getLogger(BookieThread.class);\n \n+    @Override\n+    public void uncaughtException(Thread t, Throwable e) {\n+        handleException(t, e);\n     }\n \n-    public BookieThread (String name) {\n+    public BookieThread(String name) {\n         super(name);\n-        setUncaughtExceptionHandler(new BookieUncaughtExceptionHandler());\n+        setUncaughtExceptionHandler(this);\n+    }\n+\n+    public BookieThread(Runnable thread, String name) {\n+        super(thread, name);\n+        setUncaughtExceptionHandler(this);\n+    }\n+\n+    /**\n+     * Handles uncaught exception occurred in thread\n+     */\n+    protected void handleException(Thread t, Throwable e) {\n+        LOG.error(\"Uncaught exception in thread {}\", t.getName(), e);\n     }\n }"},{"sha":"c60f9b3e71c51ee465820341c9a76ed5ec42aa09","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -47,7 +47,7 @@\n  * This is the garbage collector thread that runs in the background to\n  * remove any entry log files that no longer contains any active ledger.\n  */\n-public class GarbageCollectorThread extends Thread {\n+public class GarbageCollectorThread extends BookieThread {\n     private static final Logger LOG = LoggerFactory.getLogger(GarbageCollectorThread.class);\n     private static final int SECOND = 1000;\n "},{"sha":"a80dfaba5e48061cc36aa9a9174cdb1362b78f3b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -47,7 +47,7 @@\n /**\n  * Provide journal related management.\n  */\n-class Journal extends BookieThread implements CheckpointSource {\n+class Journal extends BookieCriticalThread implements CheckpointSource {\n \n     private final static Logger LOG = LoggerFactory.getLogger(Journal.class);\n \n@@ -286,7 +286,7 @@ public void callback() {\n         }\n     }\n \n-    private class ForceWriteRequest implements Runnable {\n+    private class ForceWriteRequest extends BookieCriticalThread {\n         private final JournalChannel logFile;\n         private final LinkedList<QueueEntry> forceWriteWaiters;\n         private boolean shouldClose;\n@@ -300,6 +300,7 @@ private ForceWriteRequest(JournalChannel logFile,\n                           LinkedList<QueueEntry> forceWriteWaiters,\n                           boolean shouldClose,\n                           boolean isMarker) {\n+            super(\"ForceWriteRequestThread\");\n             this.forceWriteWaiters = forceWriteWaiters;\n             this.logFile = logFile;\n             this.logId = logId;\n@@ -357,7 +358,7 @@ public void closeFileIfNecessary() {\n      * ForceWriteThread is a background thread which makes the journal durable periodically\n      *\n      */\n-    private class ForceWriteThread extends BookieThread {\n+    private class ForceWriteThread extends BookieCriticalThread {\n         volatile boolean running = true;\n         // This holds the queue entries that should be notified after a\n         // successful force write"},{"sha":"4e8a8bede7ccde62614e490956336e99d0c311ce","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -186,7 +186,7 @@ public void shutdown() {\n     /**\n      * Thread to monitor the disk space periodically.\n      */\n-    private class LedgerDirsMonitor extends Thread {\n+    private class LedgerDirsMonitor extends BookieThread {\n         private final int interval;\n \n         public LedgerDirsMonitor(int interval) {"},{"sha":"2633035254c9c1c9433ada28489bda36eef0415b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -29,6 +29,7 @@\n import org.apache.zookeeper.KeeperException;\n \n import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieCriticalThread;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.ExitCode;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -205,7 +206,7 @@ public int getExitCode() {\n     /**\n      * A thread to watch whether bookie & nioserver is still alive\n      */\n-    private class DeathWatcher extends Thread {\n+    private class DeathWatcher extends BookieCriticalThread {\n \n         private final int watchInterval;\n "},{"sha":"9f09928afdac20a1df00091037313030d2a51271","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -25,6 +25,7 @@\n import java.net.MalformedURLException;\n \n import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieCriticalThread;\n import org.apache.bookkeeper.bookie.ExitCode;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n@@ -149,7 +150,7 @@ public boolean isAutoRecoveryRunning() {\n     /*\n      * DeathWatcher for AutoRecovery daemons.\n      */\n-    private static class AutoRecoveryDeathWatcher extends Thread {\n+    private static class AutoRecoveryDeathWatcher extends BookieCriticalThread {\n         private int watchInterval;\n         private AutoRecoveryMain autoRecoveryMain;\n "},{"sha":"a55be924b1ced57c29800d85cce60feaf6636e63","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -27,6 +27,7 @@\n import java.util.TimerTask;\n import java.util.concurrent.CountDownLatch;\n \n+import org.apache.bookkeeper.bookie.BookieThread;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n@@ -94,7 +95,7 @@ public ReplicationWorker(final ZooKeeper zkc,\n         this.bkc = new BookKeeper(new ClientConfiguration(conf), zkc);\n         this.admin = new BookKeeperAdmin(bkc);\n         this.ledgerChecker = new LedgerChecker(bkc);\n-        this.workerThread = new Thread(this, \"ReplicationWorker\");\n+        this.workerThread = new BookieThread(this, \"ReplicationWorker\");\n         this.openLedgerRereplicationGracePeriod = conf\n                 .getOpenLedgerRereplicationGracePeriod();\n         this.pendingReplicationTimer = new Timer(\"PendingReplicationTimer\");\n@@ -322,7 +323,7 @@ public void shutdown() {\n      * Gives the running status of ReplicationWorker\n      */\n     boolean isRunning() {\n-        return workerRunning;\n+        return workerRunning && workerThread.isAlive();\n     }\n \n     private boolean isTargetBookieExistsInFragmentEnsemble(LedgerHandle lh,"},{"sha":"dfcbcf42eb3a818ee7b35bab23c30225c816cc3a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieThreadTest.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieThreadTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/34c260bfc7db379351fa8807897603b9a9b9012b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieThreadTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieThreadTest.java?ref=34c260bfc7db379351fa8807897603b9a9b9012b","patch":"@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * Testing bookie thread cases\n+ */\n+public class BookieThreadTest {\n+\n+    private CountDownLatch runningLatch = new CountDownLatch(1);\n+\n+    public class MyThread extends BookieThread {\n+\n+        public MyThread(String threadName) {\n+            super(threadName);\n+        }\n+\n+        public void run() {\n+            throw new Error();\n+        }\n+\n+        @Override\n+        protected void handleException(Thread t, Throwable e) {\n+            Assert.assertEquals(\"Unknown thread!\", this, t);\n+            runningLatch.countDown();\n+        }\n+    }\n+\n+    public class MyCriticalThread extends BookieCriticalThread {\n+\n+        public MyCriticalThread(String threadName) {\n+            super(threadName);\n+        }\n+\n+        public void run() {\n+            throw new Error();\n+        }\n+\n+        @Override\n+        protected void handleException(Thread t, Throwable e) {\n+            Assert.assertEquals(\"Unknown thread!\", this, t);\n+            runningLatch.countDown();\n+        }\n+    }\n+\n+    /**\n+     * Test verifies uncaught exception handling of BookieThread\n+     */\n+    @Test(timeout = 30000)\n+    public void testUncaughtException() throws Exception {\n+        MyThread myThread = new MyThread(\"Test-Thread\");\n+        myThread.start();\n+        Assert.assertTrue(\"Uncaught exception is not properly handled.\",\n+                runningLatch.await(10000, TimeUnit.MILLISECONDS));\n+\n+        runningLatch = new CountDownLatch(1);\n+        MyCriticalThread myCriticalThread = new MyCriticalThread(\n+                \"Test-Critical-Thread\");\n+        myCriticalThread.start();\n+        Assert.assertTrue(\"Uncaught exception is not properly handled.\",\n+                runningLatch.await(10000, TimeUnit.MILLISECONDS));\n+    }\n+}"}]}

