{"sha":"366d393f2e58acdd5494da4ae60513c3ae5730c4","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNjZkMzkzZjJlNThhY2RkNTQ5NGRhNGFlNjA1MTNjM2FlNTczMGM0","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-04T21:15:47Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-04T21:15:47Z"},"message":"BOOKKEEPER-475: BookieRecoveryTest#testSyncBookieRecoveryToRandomBookiesCheckForDupes() iterates too much (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1417190 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7812bc5fe8860774a2d0d56392aaf54b2fd3e75c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7812bc5fe8860774a2d0d56392aaf54b2fd3e75c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/366d393f2e58acdd5494da4ae60513c3ae5730c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/366d393f2e58acdd5494da4ae60513c3ae5730c4","html_url":"https://github.com/apache/bookkeeper/commit/366d393f2e58acdd5494da4ae60513c3ae5730c4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/366d393f2e58acdd5494da4ae60513c3ae5730c4/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f67e765c73890a2f838ec8f5d43b814ce42c84b","url":"https://api.github.com/repos/apache/bookkeeper/commits/7f67e765c73890a2f838ec8f5d43b814ce42c84b","html_url":"https://github.com/apache/bookkeeper/commit/7f67e765c73890a2f838ec8f5d43b814ce42c84b"}],"stats":{"total":65,"additions":34,"deletions":31},"files":[{"sha":"fc75f0c5c56a7062bfa00ac6286d853819536329","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/366d393f2e58acdd5494da4ae60513c3ae5730c4/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/366d393f2e58acdd5494da4ae60513c3ae5730c4/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=366d393f2e58acdd5494da4ae60513c3ae5730c4","patch":"@@ -122,6 +122,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-347: Provide mechanism to detect r-o bookie by the bookie clients (Vinay via ivank)\n \n+\tBOOKKEEPER-475: BookieRecoveryTest#testSyncBookieRecoveryToRandomBookiesCheckForDupes() iterates too much (ivank via fpj)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"69c0af15aacb27870826e1ee2214e5ba25caefa9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":32,"deletions":31,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/366d393f2e58acdd5494da4ae60513c3ae5730c4/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/366d393f2e58acdd5494da4ae60513c3ae5730c4/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=366d393f2e58acdd5494da4ae60513c3ae5730c4","patch":"@@ -720,43 +720,44 @@ public void testAsyncBookieRecoveryToRandomBookiesNotEnoughBookies() throws Exce\n     @Test\n     public void testSyncBookieRecoveryToRandomBookiesCheckForDupes() throws Exception {\n         Random r = new Random();\n-        for (int i = 0; i < 10; i++) {\n-            // Create the ledgers\n-            int numLedgers = 3;\n-            List<LedgerHandle> lhs = createLedgers(numLedgers, numBookies, 2);\n \n-            // Write the entries for the ledgers with dummy values.\n-            int numMsgs = 100;\n-            writeEntriestoLedgers(numMsgs, 0, lhs);\n+        // Create the ledgers\n+        int numLedgers = 3;\n+        List<LedgerHandle> lhs = createLedgers(numLedgers, numBookies, 2);\n+\n+        // Write the entries for the ledgers with dummy values.\n+        int numMsgs = 10;\n+        writeEntriestoLedgers(numMsgs, 0, lhs);\n \n-            // Shutdown the first bookie server\n-            LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n-            int removeIndex = r.nextInt(bs.size());\n-            InetSocketAddress bookieSrc = bs.get(removeIndex).getLocalAddress();\n-            bs.get(removeIndex).shutdown();\n-            bs.remove(removeIndex);\n+        // Shutdown the first bookie server\n+        LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n+        int removeIndex = r.nextInt(bs.size());\n+        InetSocketAddress bookieSrc = bs.get(removeIndex).getLocalAddress();\n+        bs.get(removeIndex).shutdown();\n+        bs.remove(removeIndex);\n \n-            // Startup three new bookie servers\n-            startNewBookie();\n+        // Startup new bookie server\n+        startNewBookie();\n \n-            // Write some more entries for the ledgers so a new ensemble will be\n-            // created for them.\n-            writeEntriestoLedgers(numMsgs, numMsgs, lhs);\n+        // Write some more entries for the ledgers so a new ensemble will be\n+        // created for them.\n+        writeEntriestoLedgers(numMsgs, numMsgs, lhs);\n \n-            // Call the async recover bookie method.\n-            LOG.info(\"Now recover the data on the killed bookie (\" + bookieSrc\n-                     + \") and replicate it to a random available one\");\n-            // Initiate the sync object\n-            sync.value = false;\n-            bkAdmin.recoverBookieData(bookieSrc, null);\n-            assertFalse(\"Dupes exist in ensembles\", findDupesInEnsembles(lhs));\n+        // Call the async recover bookie method.\n+        LOG.info(\"Now recover the data on the killed bookie (\" + bookieSrc\n+                 + \") and replicate it to a random available one\");\n+        // Initiate the sync object\n+        sync.value = false;\n+        bkAdmin.recoverBookieData(bookieSrc, null);\n \n-            // Write some more entries to ensure fencing hasn't broken stuff\n-            writeEntriestoLedgers(numMsgs, numMsgs*2, lhs);\n-            for (LedgerHandle lh : lhs) {\n-                assertTrue(\"Not fully replicated\", verifyFullyReplicated(lh, numMsgs*3));\n-                lh.close();\n-            }\n+        assertFalse(\"Dupes exist in ensembles\", findDupesInEnsembles(lhs));\n+\n+        // Write some more entries to ensure fencing hasn't broken stuff\n+        writeEntriestoLedgers(numMsgs, numMsgs*2, lhs);\n+\n+        for (LedgerHandle lh : lhs) {\n+            assertTrue(\"Not fully replicated\", verifyFullyReplicated(lh, numMsgs*3));\n+            lh.close();\n         }\n     }\n "}]}

