{"sha":"373325ee5631d20fad06c735fc1c7248ba12301b","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNzMzMjVlZTU2MzFkMjBmYWQwNmM3MzVmYzFjNzI0OGJhMTIzMDFi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-22T15:15:09Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-22T15:15:09Z"},"message":"BOOKKEEPER-649: Race condition in sync ZKUtils.createFullPathOptimistic() (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1516482 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cf5af84a61d4bb28d026650c53ddab97bee9fd8c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cf5af84a61d4bb28d026650c53ddab97bee9fd8c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/373325ee5631d20fad06c735fc1c7248ba12301b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/373325ee5631d20fad06c735fc1c7248ba12301b","html_url":"https://github.com/apache/bookkeeper/commit/373325ee5631d20fad06c735fc1c7248ba12301b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/373325ee5631d20fad06c735fc1c7248ba12301b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"09d831847120bc316fadfaaf4b881670b6445e64","url":"https://api.github.com/repos/apache/bookkeeper/commits/09d831847120bc316fadfaaf4b881670b6445e64","html_url":"https://github.com/apache/bookkeeper/commit/09d831847120bc316fadfaaf4b881670b6445e64"}],"stats":{"total":112,"additions":63,"deletions":49},"files":[{"sha":"427b55fb1e0ccf3ba7dd8df9634d33d2c090021b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/373325ee5631d20fad06c735fc1c7248ba12301b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/373325ee5631d20fad06c735fc1c7248ba12301b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=373325ee5631d20fad06c735fc1c7248ba12301b","patch":"@@ -66,6 +66,8 @@ Release 4.2.2 - Unreleased\n \n         BOOKKEEPER-632: AutoRecovery should consider read only bookies (vinay via ivank)\n \n+        BOOKKEEPER-649: Race condition in sync ZKUtils.createFullPathOptimistic() (ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank)"},{"sha":"bc5c2498dee4f34aa5500bd90a3cd8c5647f8bc7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=373325ee5631d20fad06c735fc1c7248ba12301b","patch":"@@ -93,7 +93,7 @@ public void processResult(int rc, String path, Object ctx,\n                 }\n             }\n         };\n-        ZkUtils.createFullPathOptimistic(zk, ledgerPrefix, metadata.serialize(),\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPrefix, metadata.serialize(),\n             Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL, scb, null);\n     }\n "},{"sha":"c7f6d530feb474a094d83839269d33eabc41e8d7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=373325ee5631d20fad06c735fc1c7248ba12301b","patch":"@@ -102,7 +102,7 @@ public void close() {\n \n     @Override\n     public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n-        ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n             CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx, final String idPathName) {\n@@ -140,7 +140,7 @@ public void processResult(int rc, String path,\n                         }\n                     }\n                 };\n-                ZkUtils.createFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n+                ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, scb, null);\n                 // delete the znode for id generation\n                 scheduler.submit(new Runnable() {"},{"sha":"a5f54d51a544e0ff553aecb71edb4223d4b351ed","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=373325ee5631d20fad06c735fc1c7248ba12301b","patch":"@@ -216,7 +216,7 @@ public void close() {\n \n         @Override\n         public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n-            ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+            ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                     CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n                         @Override\n                         public void processResult(int rc, String path, Object ctx, final String idPathName) {"},{"sha":"951989c2f364e6574fbab5b8087e8fb4dea04fee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=373325ee5631d20fad06c735fc1c7248ba12301b","patch":"@@ -42,7 +42,6 @@\n import com.google.common.base.Joiner;\n import static com.google.common.base.Charsets.UTF_8;\n \n-import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n import java.util.concurrent.CountDownLatch;\n@@ -198,7 +197,7 @@ public static String getParentZnodePath(String base, long ledgerId) {\n         String subdir2 = String.format(\"%04x\", ledgerId >> 32 & 0xffff);\n         String subdir3 = String.format(\"%04x\", ledgerId >> 16 & 0xffff);\n         String subdir4 = String.format(\"%04x\", ledgerId & 0xffff);\n-        \n+\n         return String.format(\"%s/%s/%s/%s/%s\",\n                              base, subdir1, subdir2, subdir3, subdir4);\n     }\n@@ -430,7 +429,7 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n             cb.await();\n         }\n     }\n-    \n+\n     @Override\n     public void releaseUnderreplicatedLedger(long ledgerId) throws ReplicationException.UnavailableException {\n         LOG.debug(\"releaseLedger(ledgerId={})\", ledgerId);\n@@ -473,9 +472,8 @@ public void disableLedgerReplication()\n             throws ReplicationException.UnavailableException {\n         LOG.debug(\"disableLedegerReplication()\");\n         try {\n-            ZkUtils.createFullPathOptimistic(zkc, basePath + '/'\n-                    + BookKeeperConstants.DISABLE_NODE, \"\".getBytes(),\n-                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            String znode = basePath + '/' + BookKeeperConstants.DISABLE_NODE;\n+            zkc.create(znode, \"\".getBytes(UTF_8), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             LOG.info(\"Auto ledger re-replication is disabled!\");\n         } catch (KeeperException.NodeExistsException ke) {\n             LOG.warn(\"AutoRecovery is already disabled!\", ke);"},{"sha":"9608240c70c01ac7ab1805f7aa1ee999cbc76a4c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":53,"deletions":39,"changes":92,"blob_url":"https://github.com/apache/bookkeeper/blob/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/373325ee5631d20fad06c735fc1c7248ba12301b/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java?ref=373325ee5631d20fad06c735fc1c7248ba12301b","patch":"@@ -25,6 +25,9 @@\n import java.io.IOException;\n import java.util.List;\n \n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.CreateMode;\n@@ -42,8 +45,11 @@\n  */\n public class ZkUtils {\n     private static final Logger LOG = LoggerFactory.getLogger(ZkUtils.class);\n+\n     /**\n-     * Create zookeeper path recursively\n+     * Asynchronously create zookeeper path recursively and optimistically.\n+     *\n+     * @see #createFullPathOptimistic(ZooKeeper,String,byte[],List<ACL>,CreateMode)\n      *\n      * @param zk\n      *          Zookeeper client\n@@ -60,7 +66,7 @@\n      * @param ctx\n      *          Context object\n      */\n-    public static void createFullPathOptimistic(\n+    public static void asyncCreateFullPathOptimistic(\n         final ZooKeeper zk, final String originalPath, final byte[] data,\n         final List<ACL> acl, final CreateMode createMode,\n         final AsyncCallback.StringCallback callback, final Object ctx) {\n@@ -77,24 +83,66 @@ public void processResult(int rc, String path, Object ctx, String name) {\n                 // Since I got a nonode, it means that my parents don't exist\n                 // create mode is persistent since ephemeral nodes can't be\n                 // parents\n-                createFullPathOptimistic(zk, new File(originalPath).getParent().replace(\"\\\\\", \"/\"), new byte[0], acl,\n+                String parent = new File(originalPath).getParent().replace(\"\\\\\", \"/\");\n+                asyncCreateFullPathOptimistic(zk, parent, new byte[0], acl,\n                         CreateMode.PERSISTENT, new StringCallback() {\n \n                             @Override\n                             public void processResult(int rc, String path, Object ctx, String name) {\n                                 if (rc == Code.OK.intValue() || rc == Code.NODEEXISTS.intValue()) {\n                                     // succeeded in creating the parent, now\n                                     // create the original path\n-                                    createFullPathOptimistic(zk, originalPath, data, acl, createMode, callback,\n-                                            ctx);\n+                                    asyncCreateFullPathOptimistic(zk, originalPath, data,\n+                                            acl, createMode, callback, ctx);\n                                 } else {\n                                     callback.processResult(rc, path, ctx, name);\n                                 }\n                             }\n                         }, ctx);\n             }\n         }, ctx);\n+    }\n \n+    /**\n+     * Create zookeeper path recursively and optimistically. This method can throw\n+     * any of the KeeperExceptions which can be thrown by ZooKeeper#create.\n+     * KeeperException.NodeExistsException will only be thrown if the full path specified\n+     * by _path_ already exists. The existence of any parent znodes is not an error\n+     * condition.\n+     *\n+     * @param zkc\n+     *            - ZK instance\n+     * @param path\n+     *            - znode path\n+     * @param data\n+     *            - znode data\n+     * @param acl\n+     *            - Acl of the zk path\n+     * @param createMode\n+     *            - Create mode of zk path\n+     * @throws KeeperException\n+     *             if the server returns a non-zero error code, or invalid ACL\n+     * @throws InterruptedException\n+     *             if the transaction is interrupted\n+     */\n+    public static void createFullPathOptimistic(ZooKeeper zkc, String path,\n+            byte[] data, final List<ACL> acl, final CreateMode createMode)\n+            throws KeeperException, InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicInteger rc = new AtomicInteger(Code.OK.intValue());\n+        asyncCreateFullPathOptimistic(zkc, path, data, acl, createMode,\n+                                      new StringCallback() {\n+                                          @Override\n+                                          public void processResult(int rc2, String path,\n+                                                                    Object ctx, String name) {\n+                                              rc.set(rc2);\n+                                              latch.countDown();\n+                                          }\n+                                      }, null);\n+        latch.await();\n+        if (rc.get() != Code.OK.intValue()) {\n+            throw KeeperException.create(Code.get(rc.get()));\n+        }\n     }\n \n     private static class GetChildrenCtx {\n@@ -206,38 +254,4 @@ public static ZooKeeper createConnectedZookeeperClient(String servers,\n         }\n         return newZk;\n     }\n-\n-    /**\n-     * Utility to create the complete znode path synchronously\n-     * \n-     * @param zkc\n-     *            - ZK instance\n-     * @param path\n-     *            - znode path\n-     * @param data\n-     *            - znode data\n-     * @param acl\n-     *            - Acl of the zk path\n-     * @param createMode\n-     *            - Create mode of zk path\n-     * @throws KeeperException\n-     *             if the server returns a non-zero error code, or invalid ACL\n-     * @throws InterruptedException\n-     *             if the transaction is interrupted\n-     */\n-    public static void createFullPathOptimistic(ZooKeeper zkc, String path,\n-            byte[] data, final List<ACL> acl, final CreateMode createMode)\n-            throws KeeperException, InterruptedException {\n-        try {\n-            zkc.create(path, data, acl, createMode);\n-        } catch (KeeperException.NoNodeException nne) {\n-            int lastSlash = path.lastIndexOf('/');\n-            if (lastSlash <= 0) {\n-                throw nne;\n-            }\n-            String parent = path.substring(0, lastSlash);\n-            createFullPathOptimistic(zkc, parent, new byte[0], acl, createMode);\n-            zkc.create(path, data, acl, createMode);\n-        }\n-    }\n }"}]}

