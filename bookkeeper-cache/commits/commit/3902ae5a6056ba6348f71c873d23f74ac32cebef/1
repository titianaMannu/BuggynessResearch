{"sha":"3902ae5a6056ba6348f71c873d23f74ac32cebef","node_id":"MDY6Q29tbWl0MTU3NTk1NjozOTAyYWU1YTYwNTZiYTYzNDhmNzFjODczZDIzZjc0YWMzMmNlYmVm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-02-09T07:59:47Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-02-09T07:59:47Z"},"message":"BOOKKEEPER-556: BookieServerMXBean#getServerState makes no sense (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1444340 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e5af0c627e633535f2cf20a0e596644714d10f0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5e5af0c627e633535f2cf20a0e596644714d10f0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3902ae5a6056ba6348f71c873d23f74ac32cebef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3902ae5a6056ba6348f71c873d23f74ac32cebef","html_url":"https://github.com/apache/bookkeeper/commit/3902ae5a6056ba6348f71c873d23f74ac32cebef","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3902ae5a6056ba6348f71c873d23f74ac32cebef/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"f060c0d2745b47314562bc94ecb5f525e2addb07","url":"https://api.github.com/repos/apache/bookkeeper/commits/f060c0d2745b47314562bc94ecb5f525e2addb07","html_url":"https://github.com/apache/bookkeeper/commit/f060c0d2745b47314562bc94ecb5f525e2addb07"}],"stats":{"total":61,"additions":2,"deletions":59},"files":[{"sha":"34c49adf3920e32e42af54e279b190165d9789f1","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3902ae5a6056ba6348f71c873d23f74ac32cebef/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3902ae5a6056ba6348f71c873d23f74ac32cebef/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3902ae5a6056ba6348f71c873d23f74ac32cebef","patch":"@@ -20,6 +20,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-312: Implementation of JMS provider (mridul via ivank)\n \n+      BOOKKEEPER-556: BookieServerMXBean#getServerState makes no sense (ivank via sijie)\n+\n Release 4.2.0 - 2013-01-14\n \n   Non-backward compatible changes:"},{"sha":"1119af43c3426121ea231e610830379a636e9013","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3902ae5a6056ba6348f71c873d23f74ac32cebef/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/3902ae5a6056ba6348f71c873d23f74ac32cebef/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java?ref=3902ae5a6056ba6348f71c873d23f74ac32cebef","patch":"@@ -74,11 +74,6 @@ public OpStatData getReadStats() {\n         return bks.bkStats.getOpStats(BKStats.STATS_READ).toOpStatData();\n     }\n \n-    @Override\n-    public String getServerState() {\n-        return bks.nioServerFactory.stats.getServerState();\n-    }\n-\n     @Override\n     public String getServerPort() {\n         try {"},{"sha":"054309fc5ed33861bbb2a7f220d65ae258ea622c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3902ae5a6056ba6348f71c873d23f74ac32cebef/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/3902ae5a6056ba6348f71c873d23f74ac32cebef/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java?ref=3902ae5a6056ba6348f71c873d23f74ac32cebef","patch":"@@ -45,11 +45,6 @@\n      */\n     public OpStatData getReadStats();\n \n-    /**\n-     * @return server state\n-     */\n-    public String getServerState();\n-\n     /**\n      * @return server port\n      */"},{"sha":"4920bb9dcddda46db9abf625219c7661740ae890","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","status":"modified","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/3902ae5a6056ba6348f71c873d23f74ac32cebef/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/3902ae5a6056ba6348f71c873d23f74ac32cebef/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java?ref=3902ae5a6056ba6348f71c873d23f74ac32cebef","patch":"@@ -25,32 +25,10 @@\n     private long totalLatency = 0;\n     private long count = 0;\n \n-    public interface Provider {\n-        public long getOutstandingRequests();\n-\n-        public long getLastProcessedZxid();\n-    }\n-\n-    private Provider provider = null;\n-    private Object mutex = new Object();\n-\n     static public ServerStats getInstance() {\n         return instance;\n     }\n \n-    static public void registerAsConcrete() {\n-        setInstance(new ServerStats());\n-    }\n-\n-    static synchronized public void unregister() {\n-        instance = null;\n-    }\n-\n-    static synchronized protected void setInstance(ServerStats newInstance) {\n-        assert instance == null;\n-        instance = newInstance;\n-    }\n-\n     protected ServerStats() {\n     }\n \n@@ -69,17 +47,6 @@ synchronized public long getMaxLatency() {\n         return maxLatency;\n     }\n \n-    public long getOutstandingRequests() {\n-        synchronized (mutex) {\n-            return (provider != null) ? provider.getOutstandingRequests() : -1;\n-        }\n-    }\n-\n-    public long getLastProcessedZxid() {\n-        synchronized (mutex) {\n-            return (provider != null) ? provider.getLastProcessedZxid() : -1;\n-        }\n-    }\n \n     synchronized public long getPacketsReceived() {\n         return packetsReceived;\n@@ -89,31 +56,15 @@ synchronized public long getPacketsSent() {\n         return packetsSent;\n     }\n \n-    public String getServerState() {\n-        return \"standalone\";\n-    }\n-\n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n         sb.append(\"Latency min/avg/max: \" + getMinLatency() + \"/\" + getAvgLatency() + \"/\" + getMaxLatency() + \"\\n\");\n         sb.append(\"Received: \" + getPacketsReceived() + \"\\n\");\n         sb.append(\"Sent: \" + getPacketsSent() + \"\\n\");\n-        if (provider != null) {\n-            sb.append(\"Outstanding: \" + getOutstandingRequests() + \"\\n\");\n-            sb.append(\"Zxid: 0x\" + Long.toHexString(getLastProcessedZxid()) + \"\\n\");\n-        }\n-        sb.append(\"Mode: \" + getServerState() + \"\\n\");\n         return sb.toString();\n     }\n \n-    // mutators\n-    public void setStatsProvider(Provider zk) {\n-        synchronized (mutex) {\n-            provider = zk;\n-        }\n-    }\n-\n     synchronized void updateLatency(long requestCreateTime) {\n         long latency = MathUtils.now() - requestCreateTime;\n         totalLatency += latency;"}]}

