{"sha":"3969ff71a1865b5b8c32b60ac529999c6de71ab8","node_id":"MDY6Q29tbWl0MTU3NTk1NjozOTY5ZmY3MWExODY1YjViOGMzMmI2MGFjNTI5OTk5YzZkZTcxYWI4","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-11-17T10:16:32Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-11-17T10:16:32Z"},"message":"BOOKKEEPER-91: Bookkeeper and hedwig clients should not use log4j directly (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1203138 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0d70dd7f982582e6245b11ccbe958f8625e57478","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0d70dd7f982582e6245b11ccbe958f8625e57478"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3969ff71a1865b5b8c32b60ac529999c6de71ab8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3969ff71a1865b5b8c32b60ac529999c6de71ab8","html_url":"https://github.com/apache/bookkeeper/commit/3969ff71a1865b5b8c32b60ac529999c6de71ab8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3969ff71a1865b5b8c32b60ac529999c6de71ab8/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"304bf8fe61bd545072d09c7089d8b92fc3c2f1d3","url":"https://api.github.com/repos/apache/bookkeeper/commits/304bf8fe61bd545072d09c7089d8b92fc3c2f1d3","html_url":"https://github.com/apache/bookkeeper/commit/304bf8fe61bd545072d09c7089d8b92fc3c2f1d3"}],"stats":{"total":734,"additions":486,"deletions":248},"files":[{"sha":"11c35b409392604192e6bd8ec7f142281ca7f302","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -72,6 +72,8 @@ BUGFIXES:\n \n   BOOKKEEPER-81: disk space of garbage collected entry logger files isn't reclaimed util process quit (Sijie Guo via fpj)\n \n+  BOOKKEEPER-91: Bookkeeper and hedwig clients should not use log4j directly (ivank via fpj)\n+\n  hedwig-server/\n \n   BOOKKEEPER-43: NullPointException when releasing topic (Sijie Guo via breed)"},{"sha":"089600ca841f4c445e321a1c493d61bb0d3785fa","filename":"bookkeeper-benchmark/pom.xml","status":"modified","additions":39,"deletions":5,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-benchmark/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-benchmark/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/pom.xml?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,11 +22,15 @@\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-    \t<groupId>log4j</groupId>\n-    \t<artifactId>log4j</artifactId>\n-    \t<version>1.2.14</version>\n-    \t<type>jar</type>\n-    \t<scope>compile</scope>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+      <version>1.6.4</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <version>1.6.4</version>\n+      <scope>test</scope>\n     </dependency>\n     <dependency>\n     \t<groupId>org.apache.zookeeper</groupId>\n@@ -55,5 +59,35 @@\n       <type>jar</type>\n       <scope>compile</scope>\n     </dependency>\n+    <!--\n+\tAnnoying dependency we need to include because\n+\tzookeeper uses log4j and so we transatively do, but\n+\tlog4j has some dependencies which aren't in the \n+\tdefault maven repositories\n+    //-->\n+    <dependency>\n+      <groupId>log4j</groupId>\n+      <artifactId>log4j</artifactId>\n+      <version>1.2.15</version>\n+      <scope>provided</scope>\n+      <exclusions>\n+\t<exclusion>\n+\t  <groupId>javax.mail</groupId>\n+\t  <artifactId>mail</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>javax.jms</groupId>\n+\t  <artifactId>jms</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jdmk</groupId>\n+\t  <artifactId>jmxtools</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jmx</groupId>\n+\t  <artifactId>jmxri</artifactId>\n+\t</exclusion>\n+      </exclusions>\n+    </dependency>\n   </dependencies>\n </project>"},{"sha":"71196123da48b151f3bf8b1fb33a4656f1977238","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -27,13 +27,14 @@\n \n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n import org.apache.zookeeper.KeeperException;\n \n public class MySqlClient {\n-    static Logger LOG = Logger.getLogger(MySqlClient.class);\n+    static Logger LOG = LoggerFactory.getLogger(MySqlClient.class);\n \n     BookKeeper x;\n     LedgerHandle lh;"},{"sha":"08892ae70ab85bb43b483e83c7823d60b0cf7b4b","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -34,7 +34,8 @@\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.zookeeper.KeeperException;\n \n@@ -46,7 +47,7 @@\n \n public class TestClient\n     implements AddCallback, ReadCallback {\n-    private static final Logger LOG = Logger.getLogger(TestClient.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(TestClient.class);\n \n     BookKeeper x;\n     LedgerHandle lh;\n@@ -146,7 +147,7 @@ public static void main(String[] args) {\n                 //c.writeConsecutiveEntriesBatch(Integer.parseInt(args[0]));\n                 c.closeHandle();\n             } catch (Exception e) {\n-                LOG.error(e);\n+                LOG.error(\"Exception occurred\", e);\n             } \n             break;\n         case 1:\n@@ -155,7 +156,7 @@ public static void main(String[] args) {\n                 TestClient c = new TestClient(new FileOutputStream(args[2]));\n                 c.writeSameEntryBatchFS(sb.toString().getBytes(), Integer.parseInt(args[3]));\n             } catch(FileNotFoundException e) {\n-                LOG.error(e);\n+                LOG.error(\"File not found\", e);\n             }\n             break;\n         case 2:\n@@ -219,7 +220,7 @@ void writeSameEntryBatchFS(byte[] data, int times) {\n             fStream.close();\n             System.out.println(\"Finished processing writes (ms): \" + (System.currentTimeMillis() - start));\n         } catch(IOException e) {\n-            LOG.error(e);\n+            LOG.error(\"IOException occurred\", e);\n         }\n     }\n "},{"sha":"fc44898ca590a48d9416f75c9c456df8cc253230","filename":"bookkeeper-server/pom.xml","status":"modified","additions":39,"deletions":5,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,11 +22,15 @@\n       <scope>test</scope>\n     </dependency>\n     <dependency>\n-    \t<groupId>log4j</groupId>\n-    \t<artifactId>log4j</artifactId>\n-    \t<version>1.2.14</version>\n-    \t<type>jar</type>\n-    \t<scope>compile</scope>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+      <version>1.6.4</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <version>1.6.4</version>\n+      <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n@@ -46,6 +50,36 @@\n       <version>3.2.4.Final</version>\n       <scope>compile</scope>\n     </dependency>\n+    <!--\n+\tAnnoying dependency we need to include because\n+\tzookeeper uses log4j and so we transatively do, but\n+\tlog4j has some dependencies which aren't in the \n+\tdefault maven repositories\n+    //-->\n+    <dependency>\n+      <groupId>log4j</groupId>\n+      <artifactId>log4j</artifactId>\n+      <version>1.2.15</version>\n+      <scope>provided</scope>\n+      <exclusions>\n+\t<exclusion>\n+\t  <groupId>javax.mail</groupId>\n+\t  <artifactId>mail</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>javax.jms</groupId>\n+\t  <artifactId>jms</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jdmk</groupId>\n+\t  <artifactId>jmxtools</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jmx</groupId>\n+\t  <artifactId>jmxri</artifactId>\n+\t</exclusion>\n+      </exclusions>\n+    </dependency>\n   </dependencies>\n   <build>\n     <plugins>"},{"sha":"e8740a34f2ddbcc0a3b62f193ffcddc8b2565378","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -46,7 +46,8 @@\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -62,7 +63,7 @@\n \n public class Bookie extends Thread {\n     HashMap<Long, LedgerDescriptor> ledgers = new HashMap<Long, LedgerDescriptor>();\n-    static Logger LOG = Logger.getLogger(Bookie.class);\n+    static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n     final static long MB = 1024 * 1024L;\n     // max journal file size\n     final static long MAX_JOURNAL_SIZE = Long.getLong(\"journal_max_size_mb\", 2 * 1024) * MB;\n@@ -379,7 +380,7 @@ private void instantiateZookeeperClient(int port, String zkServers) throws IOExc\n             zk.create(BOOKIE_REGISTRATION_PATH + InetAddress.getLocalHost().getHostAddress() + \":\" + port, new byte[0],\n                       Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n         } catch (Exception e) {\n-            LOG.fatal(\"ZK exception registering ephemeral Znode for Bookie!\", e);\n+            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\", e);\n             // Throw an IOException back up. This will cause the Bookie\n             // constructor to error out. Alternatively, we could do a System\n             // exit here as this is a fatal error.\n@@ -804,7 +805,7 @@ public void run() {\n                 qe = null;\n             }\n         } catch (Exception e) {\n-            LOG.fatal(\"Bookie thread exiting\", e);\n+            LOG.error(\"Bookie thread exiting\", e);\n         }\n     }\n \n@@ -819,7 +820,7 @@ private FileChannel openChannel(long logId, long position) throws FileNotFoundEx\n         try {\n             logFile.position(position);\n         } catch (IOException e) {\n-            LOG.fatal(\"Bookie journal file can seek to position :\", e);\n+            LOG.error(\"Bookie journal file can seek to position :\", e);\n         }\n         return logFile;\n     }"},{"sha":"8f77d9069b87cedf10cb9f1638bf535980bb3f50","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -40,7 +40,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n@@ -53,7 +54,7 @@\n  * identified by a long.\n  */\n public class EntryLogger {\n-    private static final Logger LOG = Logger.getLogger(EntryLogger.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(EntryLogger.class);\n     private File dirs[];\n     // This is a handle to the Bookie parent instance. We need this to get\n     // access to the LedgerCache as well as the ZooKeeper client handle.\n@@ -179,7 +180,7 @@ public void processResult(int rc, String path, Object ctx) {\n                                 String parts[] = ledgerNode.split(LEDGER_NODE_PREFIX);\n                                 allActiveLedgers.add(Long.parseLong(parts[parts.length - 1]));\n                             } catch (NumberFormatException e) {\n-                                LOG.fatal(\"Error extracting ledgerId from ZK ledger node: \" + ledgerNode);\n+                                LOG.error(\"Error extracting ledgerId from ZK ledger node: \" + ledgerNode);\n                                 // This is a pretty bad error as it indicates a ledger node in ZK\n                                 // has an incorrect format. For now just continue and consider\n                                 // this as a non-existent ledger.\n@@ -495,7 +496,7 @@ public void shutdown() throws InterruptedException {\n             flush();\n         } catch (IOException ie) {\n             // we have no idea how to avoid io exception during shutting down, so just ignore it\n-            LOG.fatal(\"Error flush entry log during shutting down, which may cause entry log corrupted.\", ie);\n+            LOG.error(\"Error flush entry log during shutting down, which may cause entry log corrupted.\", ie);\n         }\n     }\n "},{"sha":"fa713c8018c82cbb37ee3459f5c7de451ec6d560","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -27,7 +27,8 @@\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This is the file handle for a ledger's index file that maps entry ids to location.\n@@ -47,7 +48,7 @@\n  * </p>\n  */\n class FileInfo {\n-    static Logger LOG = Logger.getLogger(FileInfo.class);\n+    static Logger LOG = LoggerFactory.getLogger(FileInfo.class);\n \n     static final int NO_MASTER_KEY = -1;\n "},{"sha":"3e6d3f13635b9dc4a7b7a853b9132afa50562ecf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -36,15 +36,16 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This class maps a ledger entry number into a location (entrylogid, offset) in\n  * an entry log file. It does user level caching to more efficiently manage disk\n  * head scheduling.\n  */\n public class LedgerCache {\n-    private final static Logger LOG = Logger.getLogger(LedgerDescriptor.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n \n     final File ledgerDirectories[];\n "},{"sha":"8d4d288f95bf4a90121467566f435862e45fc187","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -24,7 +24,8 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n \n@@ -34,7 +35,7 @@\n  *\n  */\n public class LedgerDescriptor {\n-    final static Logger LOG = Logger.getLogger(LedgerDescriptor.class);\n+    final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n     LedgerCache ledgerCache;\n     LedgerDescriptor(long ledgerId, EntryLogger entryLogger, LedgerCache ledgerCache) {\n         this.ledgerId = ledgerId;"},{"sha":"c3690a3d785996e830fcdf884644da283b3714dc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -33,7 +33,8 @@\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -56,7 +57,7 @@\n \n public class BookKeeper {\n \n-    static final Logger LOG = Logger.getLogger(BookKeeper.class);\n+    static final Logger LOG = LoggerFactory.getLogger(BookKeeper.class);\n \n     ZooKeeper zk = null;\n     // whether the zk handle is one we created, or is owned by whoever"},{"sha":"8a503f9a7ad692cc8d2c6cfc0ea835c492c21f6d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -21,7 +21,8 @@\n  *\n  */\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n@@ -41,7 +42,8 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.proto.BookieProtocol;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n@@ -55,7 +57,7 @@\n  * Admin client for BookKeeper clusters\n  */\n public class BookKeeperAdmin {\n-    private static Logger LOG = Logger.getLogger(BookKeeperAdmin.class);\n+    private static Logger LOG = LoggerFactory.getLogger(BookKeeperAdmin.class);\n \n     static final String COLON = \":\";\n "},{"sha":"05c92b3a100bc8d2d28cd5218e20fff8b78a0df2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -32,7 +32,8 @@\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.bookkeeper.util.StringUtils;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -47,7 +48,7 @@\n  *\n  */\n class BookieWatcher implements Watcher, ChildrenCallback {\n-    static final Logger logger = Logger.getLogger(BookieWatcher.class);\n+    static final Logger logger = LoggerFactory.getLogger(BookieWatcher.class);\n \n     public static final String BOOKIE_REGISTRATION_PATH = \"/ledgers/available\";\n     static final Set<InetSocketAddress> EMPTY_SET = new HashSet<InetSocketAddress>();"},{"sha":"ae375ecfa6dd7fdea7ff661568f9207b389d8ba2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -23,7 +23,8 @@\n \n import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBufferInputStream;\n import org.jboss.netty.buffer.ChannelBuffers;\n@@ -36,7 +37,7 @@\n  */\n \n abstract class DigestManager {\n-    static final Logger logger = Logger.getLogger(DigestManager.class);\n+    static final Logger logger = LoggerFactory.getLogger(DigestManager.class);\n \n     static final int METADATA_LENGTH = 32;\n "},{"sha":"79be7a5acc2eef62f6a5cba4b4432ac4aad19606","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -29,7 +29,8 @@\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.util.StringUtils;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.AsyncCallback.StatCallback;\n@@ -43,7 +44,7 @@\n  */\n class LedgerCreateOp implements StringCallback, StatCallback {\n \n-    static final Logger LOG = Logger.getLogger(LedgerCreateOp.class);\n+    static final Logger LOG = LoggerFactory.getLogger(LedgerCreateOp.class);\n \n     CreateCallback cb;\n     LedgerMetadata metadata;"},{"sha":"d26be4b45e0f031aac186f28fe571713b5b1687a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -23,7 +23,8 @@\n \n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.util.StringUtils;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.AsyncCallback.VoidCallback;\n \n /**\n@@ -32,7 +33,7 @@\n  */\n class LedgerDeleteOp implements VoidCallback {\n \n-    static final Logger LOG = Logger.getLogger(LedgerDeleteOp.class);\n+    static final Logger LOG = LoggerFactory.getLogger(LedgerDeleteOp.class);\n \n     BookKeeper bk;\n     long ledgerId;"},{"sha":"1f4547ef8f32b146a3e5f27ae2fa03904a7f324a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -24,7 +24,8 @@\n import java.io.IOException;\n import java.io.InputStream;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBufferInputStream;\n \n /**\n@@ -34,7 +35,7 @@\n  */\n \n public class LedgerEntry {\n-    Logger LOG = Logger.getLogger(LedgerEntry.class);\n+    Logger LOG = LoggerFactory.getLogger(LedgerEntry.class);\n \n     long ledgerId;\n     long entryId;\n@@ -72,7 +73,7 @@ public long getLength() {\n             // The channelbufferinput stream doesnt really throw the\n             // ioexceptions, it just has to be in the signature because\n             // InputStream says so. Hence this code, should never be reached.\n-            LOG.fatal(\"Unexpected IOException while reading from channel buffer\", e);\n+            LOG.error(\"Unexpected IOException while reading from channel buffer\", e);\n             return new byte[0];\n         }\n     }"},{"sha":"93b876a701b67873891179e8da642c2ace2aead3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -41,7 +41,8 @@\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.bookkeeper.util.StringUtils;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.AsyncCallback.StatCallback;\n@@ -54,7 +55,7 @@\n  * write operations to a ledger.\n  */\n public class LedgerHandle {\n-    final static Logger LOG = Logger.getLogger(LedgerHandle.class);\n+    final static Logger LOG = LoggerFactory.getLogger(LedgerHandle.class);\n     final static long LAST_ADD_CONFIRMED = -1;\n \n     final byte[] ledgerKey;"},{"sha":"63e95c06053f1c5d6be08110f9335dcd64fe4a66","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -27,15 +27,16 @@\n \n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.zookeeper.data.Stat;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This class encapsulates all the ledger metadata that is persistently stored\n  * in zookeeper. It provides parsing and serialization methods of such metadata.\n  *\n  */\n public class LedgerMetadata {\n-    static final Logger LOG = Logger.getLogger(LedgerMetadata.class);\n+    static final Logger LOG = LoggerFactory.getLogger(LedgerMetadata.class);\n \n     private static final String closed = \"CLOSED\";\n     private static final String lSplitter = \"\\n\";"},{"sha":"30cb9ce682b7e76f47952f769f027b099f95b46b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -27,7 +27,8 @@\n import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.util.StringUtils;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.AsyncCallback.DataCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -38,7 +39,7 @@\n  *\n  */\n class LedgerOpenOp implements DataCallback {\n-    static final Logger LOG = Logger.getLogger(LedgerOpenOp.class);\n+    static final Logger LOG = LoggerFactory.getLogger(LedgerOpenOp.class);\n \n     final BookKeeper bk;\n     final long ledgerId;"},{"sha":"4625bbbf89f45b4d925aecc14b1a3d2fdffd4710","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -31,7 +31,8 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n \n import org.apache.zookeeper.KeeperException;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n@@ -43,7 +44,7 @@\n  *\n  */\n class LedgerRecoveryOp implements ReadEntryCallback, ReadCallback, AddCallback {\n-    static final Logger LOG = Logger.getLogger(LedgerRecoveryOp.class);\n+    static final Logger LOG = LoggerFactory.getLogger(LedgerRecoveryOp.class);\n     LedgerHandle lh;\n     int numResponsesPending;\n     boolean proceedingWithRecovery = false;"},{"sha":"7aad7512cd54ab8573553d02827b31bf18cd2bee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,7 +22,8 @@\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.proto.BookieProtocol;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n@@ -35,7 +36,7 @@\n  *\n  */\n class PendingAddOp implements WriteCallback {\n-    final static Logger LOG = Logger.getLogger(PendingAddOp.class);\n+    final static Logger LOG = LoggerFactory.getLogger(PendingAddOp.class);\n \n     ChannelBuffer toSend;\n     AddCallback cb;"},{"sha":"29070ebd807f4970378a8e8585f4b993d61ab080","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -32,7 +32,8 @@\n import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBufferInputStream;\n \n@@ -47,7 +48,7 @@\n  */\n \n class PendingReadOp implements Enumeration<LedgerEntry>, ReadEntryCallback {\n-    Logger LOG = Logger.getLogger(PendingReadOp.class);\n+    Logger LOG = LoggerFactory.getLogger(PendingReadOp.class);\n \n     Queue<LedgerEntry> seq;\n     ReadCallback cb;"},{"sha":"43e999dc993d8f38d9ea0595858b724211bab2af","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,15 +22,16 @@\n import org.apache.bookkeeper.client.DigestManager.RecoveryData;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n import org.apache.bookkeeper.proto.BookieProtocol;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n  * This class encapsulated the read last confirmed operation.\n  *\n  */\n class ReadLastConfirmedOp implements ReadEntryCallback {\n-    static final Logger LOG = Logger.getLogger(LedgerRecoveryOp.class);\n+    static final Logger LOG = LoggerFactory.getLogger(LedgerRecoveryOp.class);\n     LedgerHandle lh;\n     Object ctx;\n     int numResponsesPending;"},{"sha":"0a03bc6d47dd9ea7fd1f5f1dd6582d60b665659b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -31,7 +31,8 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n@@ -42,7 +43,7 @@\n  *\n  */\n public class BookieClient {\n-    static final Logger LOG = Logger.getLogger(BookieClient.class);\n+    static final Logger LOG = LoggerFactory.getLogger(BookieClient.class);\n \n     // This is global state that should be across all BookieClients\n     AtomicLong totalBytesOutstanding = new AtomicLong();"},{"sha":"ca79e65056f7a58bc60263740bc7e227c4843251","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -32,7 +32,8 @@\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Implements the server-side part of the BookKeeper protocol.\n@@ -44,7 +45,7 @@\n     private volatile boolean running = false;\n     Bookie bookie;\n     DeathWatcher deathWatcher;\n-    static Logger LOG = Logger.getLogger(BookieServer.class);\n+    static Logger LOG = LoggerFactory.getLogger(BookieServer.class);\n \n     public BookieServer(int port, String zkServers, File journalDirectory, File ledgerDirectories[]) throws IOException {\n         this.port = port;"},{"sha":"11b0a98ee6bf4f1bf7fa17674114ecdde69bd420","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -34,7 +34,8 @@\n import java.util.Set;\n import java.util.concurrent.LinkedBlockingQueue;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This class handles communication with clients using NIO. There is one Cnxn\n@@ -48,7 +49,7 @@\n \n     ServerStats stats = new ServerStats();\n \n-    Logger LOG = Logger.getLogger(NIOServerFactory.class);\n+    Logger LOG = LoggerFactory.getLogger(NIOServerFactory.class);\n \n     ServerSocketChannel ss;\n "},{"sha":"b50fbd3b6121a9239b60f06e94234a1a850aa4ad","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -33,7 +33,8 @@\n import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.SafeRunnable;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.bootstrap.ClientBootstrap;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n@@ -64,7 +65,7 @@\n @ChannelPipelineCoverage(\"one\")\n public class PerChannelBookieClient extends SimpleChannelHandler implements ChannelPipelineFactory {\n \n-    static final Logger LOG = Logger.getLogger(PerChannelBookieClient.class);\n+    static final Logger LOG = LoggerFactory.getLogger(PerChannelBookieClient.class);\n \n     static final long maxMemory = Runtime.getRuntime().maxMemory() / 5;\n     public static int MAX_FRAME_LENGTH = 2 * 1024 * 1024; // 2M\n@@ -409,7 +410,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws\n             return;\n         }\n \n-        LOG.fatal(\"Unexpected exception caught by bookie client channel handler\", t);\n+        LOG.error(\"Unexpected exception caught by bookie client channel handler\", t);\n         // Since we are a library, cant terminate App here, can we?\n     }\n "},{"sha":"8a9f6c295b20e5b4377e4a605ca79e9c8b3eba6d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerInputStream.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -28,10 +28,11 @@\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class LedgerInputStream extends InputStream {\n-    Logger LOG = Logger.getLogger(LedgerInputStream.class);\n+    Logger LOG = LoggerFactory.getLogger(LedgerInputStream.class);\n     private LedgerHandle lh;\n     private ByteBuffer bytebuff;\n     byte[] bbytes;"},{"sha":"967d27235659b912817ba62986ab1ba7d987bbd9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/streaming/LedgerOutputStream.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -26,7 +26,8 @@\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * this class provides a streaming api to get an output stream from a ledger\n@@ -35,7 +36,7 @@\n  * out the entry to the ledger.\n  */\n public class LedgerOutputStream extends OutputStream {\n-    Logger LOG = Logger.getLogger(LedgerOutputStream.class);\n+    Logger LOG = LoggerFactory.getLogger(LedgerOutputStream.class);\n     private LedgerHandle lh;\n     private ByteBuffer bytebuff;\n     byte[] bbytes;"},{"sha":"e5eea006f3a9fafdd112deb7fff2381babd634fc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -28,14 +28,15 @@\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.client.BKException;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Provides Admin Tools to manage the BookKeeper cluster.\n  *\n  */\n public class BookKeeperTools {\n-    private static Logger LOG = Logger.getLogger(BookKeeperTools.class);\n+    private static Logger LOG = LoggerFactory.getLogger(BookKeeperTools.class);\n \n     /**\n      * Main method so we can invoke the bookie recovery via command line."},{"sha":"a030c6d28359fb45db25d1d9d38ecefd47b2ba6f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -28,10 +28,14 @@\n import java.net.Socket;\n \n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.log4j.ConsoleAppender;\n-import org.apache.log4j.Level;\n-import org.apache.log4j.Logger;\n-import org.apache.log4j.PatternLayout;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n@@ -42,16 +46,12 @@\n import org.apache.zookeeper.server.ZooKeeperServer;\n \n public class LocalBookKeeper {\n-    protected static final Logger LOG = Logger.getLogger(LocalBookKeeper.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(LocalBookKeeper.class);\n     public static final int CONNECTION_TIMEOUT = 30000;\n \n-    ConsoleAppender ca;\n     int numberOfBookies;\n \n     public LocalBookKeeper() {\n-        ca = new ConsoleAppender(new PatternLayout());\n-        LOG.addAppender(ca);\n-        LOG.setLevel(Level.INFO);\n         numberOfBookies = 3;\n     }\n \n@@ -93,7 +93,7 @@ private void runZookeeper(int maxCC) throws IOException {\n             serverFactory.startup(zks);\n         } catch (Exception e) {\n             // TODO Auto-generated catch block\n-            LOG.fatal(\"Exception while instantiating ZooKeeper\", e);\n+            LOG.error(\"Exception while instantiating ZooKeeper\", e);\n         }\n \n         boolean b = waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT);\n@@ -111,13 +111,13 @@ private void initializeZookeper() {\n             // BookieServers will register themselves with ZooKeeper on startup.\n         } catch (KeeperException e) {\n             // TODO Auto-generated catch block\n-            LOG.fatal(\"Exception while creating znodes\", e);\n+            LOG.error(\"Exception while creating znodes\", e);\n         } catch (InterruptedException e) {\n             // TODO Auto-generated catch block\n-            LOG.fatal(\"Interrupted while creating znodes\", e);\n+            LOG.error(\"Interrupted while creating znodes\", e);\n         } catch (IOException e) {\n             // TODO Auto-generated catch block\n-            LOG.fatal(\"Exception while creating znodes\", e);\n+            LOG.error(\"Exception while creating znodes\", e);\n         }\n     }\n     private void runBookies() throws IOException {"},{"sha":"b3b5d368ca1c4d4bd3073c29ccd28d9a69e174c1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SafeRunnable.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SafeRunnable.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SafeRunnable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SafeRunnable.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -18,18 +18,19 @@\n  * limitations under the License.\n  */\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public abstract class SafeRunnable implements Runnable {\n \n-    static final Logger logger = Logger.getLogger(SafeRunnable.class);\n+    static final Logger logger = LoggerFactory.getLogger(SafeRunnable.class);\n \n     @Override\n     public void run() {\n         try {\n             safeRun();\n         } catch(Throwable t) {\n-            logger.fatal(\"Unexpected throwable caught \", t);\n+            logger.error(\"Unexpected throwable caught \", t);\n         }\n     }\n "},{"sha":"23507436aaa000b8b47e3facc535446440158692","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -30,7 +30,8 @@\n import org.apache.bookkeeper.client.BKException.Code;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;"},{"sha":"e5beb8b204c487fab260ab2936eb32b30fdf2b99","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -49,8 +49,9 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n-import org.apache.log4j.Logger;\n import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.WatchedEvent;\n@@ -63,7 +64,7 @@\n  * This class tests the bookie recovery admin functionality.\n  */\n public class BookieRecoveryTest extends BaseTestCase {\n-    static Logger LOG = Logger.getLogger(BookieRecoveryTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(BookieRecoveryTest.class);\n \n     // Object used for synchronizing async method calls\n     class SyncObject {"},{"sha":"0d42fd67f527da06eb3c6ca1d683b1c55e0ef259","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -38,15 +38,16 @@\n import org.junit.Before;\n import org.junit.Test;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import junit.framework.TestCase;\n \n /**\n  * Tests writing to concurrent ledgers\n  */\n public class LedgerCacheTest extends TestCase {\n-    static Logger LOG = Logger.getLogger(LedgerCacheTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(LedgerCacheTest.class);\n \n     Bookie bookie;\n     File txnDir, ledgerDir;"},{"sha":"d7f153ae86e4a6123a3c4abd54d5ba90d10c1037","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -39,7 +39,8 @@\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runners.Parameterized.Parameters;\n@@ -52,7 +53,7 @@\n  */\n public class AsyncLedgerOpsTest extends BaseTestCase implements AddCallback, ReadCallback, CreateCallback,\n     CloseCallback, OpenCallback {\n-    static Logger LOG = Logger.getLogger(BookieClientTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(BookieClientTest.class);\n \n     DigestType digestType;\n \n@@ -190,7 +191,7 @@ public void testAsyncCreateClose() throws IOException, BKException {\n             assertTrue(\"Checking number of read entries\", i == numEntriesToWrite);\n             lh.close();\n         } catch (InterruptedException e) {\n-            LOG.error(e);\n+            LOG.error(\"Interrupted\", e);\n             fail(\"InterruptedException\");\n         } // catch (NoSuchAlgorithmException e) {\n         // e.printStackTrace();"},{"sha":"f1152d2592c495809ea365c1c8d5a948fec1ad66","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -32,7 +32,8 @@\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -51,7 +52,7 @@\n \n @RunWith(Parameterized.class)\n public abstract class BaseTestCase extends TestCase {\n-    static final Logger LOG = Logger.getLogger(BaseTestCase.class);\n+    static final Logger LOG = LoggerFactory.getLogger(BaseTestCase.class);\n     // ZooKeeper related variables\n     protected static final String HOSTPORT = \"127.0.0.1:2181\";\n     protected static Integer ZooKeeperDefaultPort = 2181;"},{"sha":"953f5c99168f73496efc9af9224d9f711ddbe4c2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -39,12 +39,13 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import junit.framework.TestCase;\n \n public class BookieClientTest extends TestCase {\n-    static Logger LOG = Logger.getLogger(BookieClientTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(BookieClientTest.class);\n     BookieServer bs;\n     File tmpDir;\n     public int port = 13645;"},{"sha":"d65dfb559b4f91723a8670c7d7faac66f8ff1984","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -37,7 +37,8 @@\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -56,7 +57,7 @@\n     // Depending on the taste, select the amount of logging\n     // by decommenting one of the two lines below\n     // static Logger LOG = Logger.getRootLogger();\n-    static Logger LOG = Logger.getLogger(BookieFailureTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(BookieFailureTest.class);\n \n     byte[] ledgerPassword = \"aaa\".getBytes();\n     LedgerHandle lh, lh2;"},{"sha":"d8845399b83abc1266213e3179055c53417191cf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -46,7 +46,8 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.streaming.LedgerInputStream;\n import org.apache.bookkeeper.streaming.LedgerOutputStream;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -67,7 +68,7 @@\n     // Depending on the taste, select the amount of logging\n     // by decommenting one of the two lines below\n     // static Logger LOG = Logger.getRootLogger();\n-    static Logger LOG = Logger.getLogger(BookieReadWriteTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(BookieReadWriteTest.class);\n \n     byte[] ledgerPassword = \"aaa\".getBytes();\n     LedgerHandle lh, lh2;"},{"sha":"e28d32c43c80ae48f8a1d93e0b0925c23e3ccedb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -24,7 +24,8 @@\n import org.junit.*;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This unit test tests closing ledgers sequentially. It creates 4 ledgers, then\n@@ -33,7 +34,7 @@\n  */\n \n public class CloseTest extends BaseTestCase {\n-    static Logger LOG = Logger.getLogger(CloseTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(CloseTest.class);\n     DigestType digestType;\n \n     public CloseTest(DigestType digestType) {"},{"sha":"fba1c029840fae809fdaa12030617396eb57bacc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -36,13 +36,14 @@\n import org.junit.Test;\n \n import junit.framework.TestCase;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Tests writing to concurrent ledgers\n  */\n public class ConcurrentLedgerTest extends TestCase {\n-    static Logger LOG = Logger.getLogger(ConcurrentLedgerTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(ConcurrentLedgerTest.class);\n \n     Bookie bookie;\n     File txnDir, ledgerDir;"},{"sha":"5fe148a87cd6cffcc2e467a4575bd698a11305c1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -43,13 +43,14 @@\n import org.junit.Test;\n \n import junit.framework.TestCase;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Tests conditional set of the ledger metadata znode.\n  */\n public class ConditionalSetTest extends BaseTestCase {\n-    static Logger LOG = Logger.getLogger(ConditionalSetTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(ConditionalSetTest.class);\n \n     byte[] entry;\n     DigestType digestType;\n@@ -113,4 +114,4 @@ public void testConditionalSet() throws IOException, InterruptedException,\n              */\n         }\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"b25ec7f60fceaebc6926101ea883dde219a66d74","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -26,7 +26,8 @@\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -35,7 +36,7 @@\n  * client and the server side.\n  */\n public class LedgerDeleteTest extends BaseTestCase {\n-    static Logger LOG = Logger.getLogger(LedgerDeleteTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(LedgerDeleteTest.class);\n     DigestType digestType;\n \n     public LedgerDeleteTest(DigestType digestType) {"},{"sha":"7e10a9e86347a2bff0ca76b22b1eb83d8ca0c9fc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -25,15 +25,16 @@\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This unit test tests ledger recovery.\n  *\n  */\n \n public class LedgerRecoveryTest extends BaseTestCase {\n-    static Logger LOG = Logger.getLogger(LedgerRecoveryTest.class);\n+    static Logger LOG = LoggerFactory.getLogger(LedgerRecoveryTest.class);\n \n     DigestType digestType;\n "},{"sha":"49c0d0690992a7bcad460f7b1108f4b347be24a0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -31,7 +31,8 @@\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffers;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n@@ -44,7 +45,7 @@\n  */\n \n class LoopbackClient implements WriteCallback {\n-    Logger LOG = Logger.getLogger(LoopbackClient.class);\n+    Logger LOG = LoggerFactory.getLogger(LoopbackClient.class);\n     BookieClient client;\n     static int recvTimeout = 2000;\n     long begin = 0;"},{"sha":"cf94d7de60a451da045457e37565ad6de8d0eaa5","filename":"hedwig-client/pom.xml","status":"modified","additions":39,"deletions":4,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/pom.xml?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -45,10 +45,15 @@\n       <scope>compile</scope>\n     </dependency>\n     <dependency>\n-      <groupId>log4j</groupId>\n-      <artifactId>log4j</artifactId>\n-      <version>1.2.14</version>\n-      <scope>compile</scope>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+      <version>1.6.4</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <version>1.6.4</version>\n+      <scope>test</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.jboss.netty</groupId>\n@@ -74,5 +79,35 @@\n     \t<type>jar</type>\n     \t<scope>compile</scope>\n     </dependency>\n+    <!--\n+\tAnnoying dependency we need to include because\n+\tzookeeper uses log4j and so we transatively do, but\n+\tlog4j has some dependencies which aren't in the \n+\tdefault maven repositories\n+    //-->\n+    <dependency>\n+      <groupId>log4j</groupId>\n+      <artifactId>log4j</artifactId>\n+      <version>1.2.15</version>\n+      <scope>provided</scope>\n+      <exclusions>\n+\t<exclusion>\n+\t  <groupId>javax.mail</groupId>\n+\t  <artifactId>mail</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>javax.jms</groupId>\n+\t  <artifactId>jms</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jdmk</groupId>\n+\t  <artifactId>jmxtools</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jmx</groupId>\n+\t  <artifactId>jmxri</artifactId>\n+\t</exclusion>\n+      </exclusions>\n+    </dependency>\n   </dependencies>\n </project>"},{"sha":"71284d3590405095619aa7bf85bf0c552eb551eb","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -21,7 +21,8 @@\n import java.util.Map;\n import java.util.concurrent.Callable;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.api.MessageHandler;\n@@ -35,7 +36,7 @@\n import org.apache.hedwig.util.Callback;\n \n public class BenchmarkSubscriber extends BenchmarkWorker implements Callable<Void> {\n-    static final Logger logger = Logger.getLogger(BenchmarkSubscriber.class);\n+    static final Logger logger = LoggerFactory.getLogger(BenchmarkSubscriber.class);\n     Subscriber subscriber;\n     ByteString subId;\n "},{"sha":"77a09d03d05d288c418675ddbf89d2b39358bcdf","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,13 +22,14 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.util.Callback;\n \n public class BenchmarkUtils {\n-    static final Logger logger = Logger.getLogger(BenchmarkUtils.class);\n+    static final Logger logger = LoggerFactory.getLogger(BenchmarkUtils.class);\n \n     public static double calcTp(final int count, long startTime) {\n         return 1000. * count / (System.currentTimeMillis() - startTime);"},{"sha":"365d20e5997179d25919e44c9e9dae7fb1569a2b","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -21,7 +21,8 @@\n import java.util.concurrent.Callable;\n \n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.logging.InternalLoggerFactory;\n import org.jboss.netty.logging.Log4JLoggerFactory;\n \n@@ -32,7 +33,7 @@\n import org.apache.hedwig.client.netty.HedwigSubscriber;\n \n public class HedwigBenchmark implements Callable<Void> {\n-    protected static final Logger logger = Logger.getLogger(HedwigBenchmark.class);\n+    protected static final Logger logger = LoggerFactory.getLogger(HedwigBenchmark.class);\n \n     static final String TOPIC_PREFIX = \"topic\";\n "},{"sha":"66e049fcab75464e6925c9997850514e8f43621c","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -20,13 +20,14 @@\n import java.net.InetSocketAddress;\n \n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.hedwig.conf.AbstractConfiguration;\n import org.apache.hedwig.util.HedwigSocketAddress;\n \n public class ClientConfiguration extends AbstractConfiguration {\n-    Logger logger = Logger.getLogger(ClientConfiguration.class);\n+    Logger logger = LoggerFactory.getLogger(ClientConfiguration.class);\n \n     // Protected member variables for configuration parameter names\n     protected static final String DEFAULT_SERVER_HOST = \"default_server_host\";"},{"sha":"05bd7106b7533ec59c9dfbbeb97a8d33342a02b8","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -19,7 +19,8 @@\n \n import java.util.TimerTask;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n \n import org.apache.hedwig.client.data.MessageConsumeData;\n@@ -39,7 +40,7 @@\n  */\n public class MessageConsumeCallback implements Callback<Void> {\n \n-    private static Logger logger = Logger.getLogger(MessageConsumeCallback.class);\n+    private static Logger logger = LoggerFactory.getLogger(MessageConsumeCallback.class);\n \n     private final HedwigClient client;\n "},{"sha":"4ec566371c46fe42e76271aaf93a9ef1541781dc","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -17,7 +17,8 @@\n  */\n package org.apache.hedwig.client.handlers;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.hedwig.client.data.PubSubData;\n import org.apache.hedwig.exceptions.PubSubException;\n@@ -31,7 +32,7 @@\n  */\n public class PubSubCallback implements Callback<Void> {\n \n-    private static Logger logger = Logger.getLogger(PubSubCallback.class);\n+    private static Logger logger = LoggerFactory.getLogger(PubSubCallback.class);\n \n     // Private member variables\n     private PubSubData pubSubData;"},{"sha":"352b595cb2a7ffc970f012e9f5269c2499edf4b4","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -17,7 +17,8 @@\n  */\n package org.apache.hedwig.client.handlers;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n \n import org.apache.hedwig.client.data.PubSubData;\n@@ -28,7 +29,7 @@\n \n public class PublishResponseHandler {\n \n-    private static Logger logger = Logger.getLogger(PublishResponseHandler.class);\n+    private static Logger logger = LoggerFactory.getLogger(PublishResponseHandler.class);\n \n     private final ResponseHandler responseHandler;\n "},{"sha":"54468ce314d58a6d93e41e773dbfe8e61ac678d9","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -19,7 +19,8 @@\n \n import java.util.TimerTask;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n@@ -40,7 +41,7 @@\n  */\n public class SubscribeReconnectCallback implements Callback<Void> {\n \n-    private static Logger logger = Logger.getLogger(SubscribeReconnectCallback.class);\n+    private static Logger logger = LoggerFactory.getLogger(SubscribeReconnectCallback.class);\n \n     // Private member variables\n     private final PubSubData origSubData;"},{"sha":"f410b4aa70957107a94341dfdf99af05ba58e65a","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,7 +22,8 @@\n import java.util.Queue;\n import java.util.Set;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n \n import org.apache.hedwig.client.api.MessageHandler;\n@@ -40,7 +41,7 @@\n \n public class SubscribeResponseHandler {\n \n-    private static Logger logger = Logger.getLogger(SubscribeResponseHandler.class);\n+    private static Logger logger = LoggerFactory.getLogger(SubscribeResponseHandler.class);\n \n     private final ResponseHandler responseHandler;\n "},{"sha":"5b888e91b450fb99c66f52a32d9248876f39b47b","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -17,7 +17,8 @@\n  */\n package org.apache.hedwig.client.handlers;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n \n import org.apache.hedwig.client.data.PubSubData;\n@@ -29,7 +30,7 @@\n \n public class UnsubscribeResponseHandler {\n \n-    private static Logger logger = Logger.getLogger(UnsubscribeResponseHandler.class);\n+    private static Logger logger = LoggerFactory.getLogger(UnsubscribeResponseHandler.class);\n \n     private final ResponseHandler responseHandler;\n "},{"sha":"fdfc932ad4712eb627547f251b2f81fd4c1e9aa9","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -20,7 +20,8 @@\n import java.net.InetSocketAddress;\n import java.util.LinkedList;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.ChannelFuture;\n import org.jboss.netty.channel.ChannelFutureListener;\n \n@@ -33,7 +34,7 @@\n \n public class ConnectCallback implements ChannelFutureListener {\n \n-    private static Logger logger = Logger.getLogger(ConnectCallback.class);\n+    private static Logger logger = LoggerFactory.getLogger(ConnectCallback.class);\n \n     // Private member variables\n     private PubSubData pubSubData;"},{"sha":"445e09e037b4f2aed2f734128fbca45fd15889a6","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClient.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -27,7 +27,8 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicLong;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.bootstrap.ClientBootstrap;\n import org.jboss.netty.channel.Channel;\n import org.jboss.netty.channel.ChannelFactory;\n@@ -48,7 +49,7 @@\n  */\n public class HedwigClient {\n \n-    private static final Logger logger = Logger.getLogger(HedwigClient.class);\n+    private static final Logger logger = LoggerFactory.getLogger(HedwigClient.class);\n \n     // Global counter used for generating unique transaction ID's for\n     // publish and subscribe requests"},{"sha":"c4549d01fd1503a3cc9c4be26d10792c4fe71b99","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -21,7 +21,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n import org.jboss.netty.channel.ChannelFuture;\n \n@@ -46,7 +47,7 @@\n  */\n public class HedwigPublisher implements Publisher {\n \n-    private static Logger logger = Logger.getLogger(HedwigPublisher.class);\n+    private static Logger logger = LoggerFactory.getLogger(HedwigPublisher.class);\n \n     // Concurrent Map to store the mappings for a given Host (Hostname:Port) to\n     // the Channel that has been established for it previously. This channel"},{"sha":"10570e3c36d89fcc28e7cc661e2277474ab7b0b6","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,7 +22,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n import org.jboss.netty.channel.ChannelFuture;\n import org.jboss.netty.channel.ChannelFutureListener;\n@@ -57,7 +58,7 @@\n  */\n public class HedwigSubscriber implements Subscriber {\n \n-    private static Logger logger = Logger.getLogger(HedwigSubscriber.class);\n+    private static Logger logger = LoggerFactory.getLogger(HedwigSubscriber.class);\n \n     // Concurrent Map to store the cached Channel connections on the client side\n     // to a server host for a given Topic + SubscriberId combination. For each"},{"sha":"0291dcee0e5549c81a7b256ce56f11fda392c492","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,7 +22,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n import org.jboss.netty.channel.ChannelHandlerContext;\n import org.jboss.netty.channel.ChannelPipelineCoverage;\n@@ -51,7 +52,7 @@\n @ChannelPipelineCoverage(\"all\")\n public class ResponseHandler extends SimpleChannelHandler {\n \n-    private static Logger logger = Logger.getLogger(ResponseHandler.class);\n+    private static Logger logger = LoggerFactory.getLogger(ResponseHandler.class);\n \n     // Concurrent Map to store for each async PubSub request, the txn ID\n     // and the corresponding PubSub call's data which stores the VoidCallback to"},{"sha":"89c78f59fb343c4327f86daff8f378e2b39af707","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -20,7 +20,8 @@\n import java.net.InetSocketAddress;\n import java.util.LinkedList;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.ChannelFuture;\n import org.jboss.netty.channel.ChannelFutureListener;\n \n@@ -32,7 +33,7 @@\n \n public class WriteCallback implements ChannelFutureListener {\n \n-    private static Logger logger = Logger.getLogger(WriteCallback.class);\n+    private static Logger logger = LoggerFactory.getLogger(WriteCallback.class);\n \n     // Private member variables\n     private PubSubData pubSubData;"},{"sha":"42187c4db2371446f9440782dd6b8e01d7949955","filename":"hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java","status":"modified","additions":14,"deletions":16,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -20,8 +20,8 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.log4j.Level;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.CompositeException;\n@@ -42,8 +42,6 @@\n      * @param ctx\n      * @param logger\n      *            May be null.\n-     * @param level\n-     *            Required iff logger != null.\n      * @param successMsg\n      *            If not null, then this is logged on success.\n      * @param failureMsg\n@@ -56,7 +54,7 @@\n      * @return\n      */\n     public static Callback<Void> multiCallback(final int expected, final Callback<Void> cb, final Object ctx,\n-            final Logger logger, final Level level, final Object successMsg, final Object failureMsg,\n+            final Logger logger, final String successMsg, final String failureMsg,\n             Runnable eagerErrorHandler) {\n         if (expected == 0) {\n             cb.operationFinished(ctx, null);\n@@ -80,15 +78,15 @@ private void tick() {\n                 @Override\n                 public void operationFailed(Object ctx, PubSubException exception) {\n                     if (logger != null && failureMsg != null)\n-                        logger.log(level, failureMsg, exception);\n+                        logger.error(failureMsg, exception);\n                     exceptions.add(exception);\n                     tick();\n                 }\n \n                 @Override\n                 public void operationFinished(Object ctx, Void resultOfOperation) {\n                     if (logger != null && successMsg != null)\n-                        logger.log(level, successMsg);\n+                        logger.info(successMsg);\n                     tick();\n                 }\n \n@@ -101,15 +99,15 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n      * then fail the final callback with a composite exception.\n      */\n     public static Callback<Void> multiCallback(int expected, Callback<Void> cb, Object ctx) {\n-        return multiCallback(expected, cb, ctx, null, null, null, null, null);\n+        return multiCallback(expected, cb, ctx, null, null, null, null);\n     }\n \n     /**\n      * A callback that waits for all of a number of events to fire. If any fail,\n      * then fail the final callback with a composite exception.\n      */\n-    public static Callback<Void> multiCallback(int expected, Callback<Void> cb, Object ctx, Runnable eagerErrorHandler) {\n-        return multiCallback(expected, cb, ctx, null, null, null, null, eagerErrorHandler);\n+    public static Callback<Void> multinCallback(int expected, Callback<Void> cb, Object ctx, Runnable eagerErrorHandler) {\n+        return multiCallback(expected, cb, ctx, null, null, null, eagerErrorHandler);\n     }\n \n     private static Callback<Void> nop = new Callback<Void>() {\n@@ -134,20 +132,20 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n     /**\n      * Logs what happened before continuing the callback chain.\n      */\n-    public static <T> Callback<T> logger(final Logger logger, final Level successLevel, final Level failureLevel, final Object successMsg,\n-                                         final Object failureMsg, final Callback<T> cont) {\n+    public static <T> Callback<T> logger(final Logger logger, final String successMsg,\n+                                         final String failureMsg, final Callback<T> cont) {\n         return new Callback<T>() {\n \n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n-                logger.log(failureLevel, failureMsg, exception);\n+                logger.error(failureMsg, exception);\n                 if (cont != null)\n                     cont.operationFailed(ctx, exception);\n             }\n \n             @Override\n             public void operationFinished(Object ctx, T resultOfOperation) {\n-                logger.log(successLevel, successMsg);\n+                logger.info(successMsg);\n                 if (cont != null)\n                     cont.operationFinished(ctx, resultOfOperation);\n             }\n@@ -158,8 +156,8 @@ public void operationFinished(Object ctx, T resultOfOperation) {\n     /**\n      * Logs what happened (no continuation).\n      */\n-    public static Callback<Void> logger(Logger logger, Level successLevel, Level failureLevel, Object successMsg, Object failureMsg) {\n-        return logger(logger, successLevel, failureLevel, successMsg, failureMsg, nop());\n+    public static Callback<Void> logger(Logger logger, String successMsg, String failureMsg) {\n+        return logger(logger, successMsg, failureMsg, nop());\n     }\n \n     /**"},{"sha":"ad79b468154c54d4171b68c54877eca4b2148592","filename":"hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/util/FileUtils.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,12 +22,13 @@\n import java.util.LinkedList;\n import java.util.List;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class FileUtils {\n \n     static DirDeleterThred dirDeleterThread;\n-    static Logger log = Logger.getLogger(FileUtils.class);\n+    static Logger log = LoggerFactory.getLogger(FileUtils.class);\n \n     static {\n         dirDeleterThread = new DirDeleterThred();"},{"sha":"d4e4dd3a818734984afeeb80a276665129779ed3","filename":"hedwig-server/pom.xml","status":"modified","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/pom.xml?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -37,6 +37,17 @@\n       <version>4.8.1</version>\n       <scope>compile</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+      <version>1.6.4</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <version>1.6.4</version>\n+      <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.bookkeeper</groupId>\n       <artifactId>hedwig-client</artifactId>\n@@ -69,6 +80,36 @@\n       <scope>compile</scope>\n       <type>jar</type>\n     </dependency>\n+    <!--\n+\tAnnoying dependency we need to include because\n+\tzookeeper uses log4j and so we transatively do, but\n+\tlog4j has some dependencies which aren't in the \n+\tdefault maven repositories\n+    //-->\n+    <dependency>\n+      <groupId>log4j</groupId>\n+      <artifactId>log4j</artifactId>\n+      <version>1.2.15</version>\n+      <scope>provided</scope>\n+      <exclusions>\n+\t<exclusion>\n+\t  <groupId>javax.mail</groupId>\n+\t  <artifactId>mail</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>javax.jms</groupId>\n+\t  <artifactId>jms</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jdmk</groupId>\n+\t  <artifactId>jmxtools</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jmx</groupId>\n+\t  <artifactId>jmxri</artifactId>\n+\t</exclusion>\n+      </exclusions>\n+    </dependency>\n   </dependencies>\n   <build>\n     <plugins>"},{"sha":"bb260617e42934beb56531e78671661b0c0a50c8","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,13 +22,14 @@\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.hedwig.util.ConcurrencyUtils;\n \n public abstract class AbstractBenchmark {\n \n-    static final Logger logger = Logger.getLogger(AbstractBenchmark.class);\n+    static final Logger logger = LoggerFactory.getLogger(AbstractBenchmark.class);\n \n     AtomicLong totalLatency = new AtomicLong();\n     LinkedBlockingQueue<Boolean> doneSignalQueue = new LinkedBlockingQueue<Boolean>();"},{"sha":"c8c27c9e753033e701a26b9d6635ba614af7f334","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -23,7 +23,8 @@\n import java.util.concurrent.Semaphore;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookieClient;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.jboss.netty.buffer.ChannelBuffer;\n@@ -33,7 +34,7 @@\n \n public class BookieBenchmark extends AbstractBenchmark {\n \n-    static final Logger logger = Logger.getLogger(BookkeeperBenchmark.class);\n+    static final Logger logger = LoggerFactory.getLogger(BookkeeperBenchmark.class);\n \n     BookieClient bkc;\n     InetSocketAddress addr;"},{"sha":"001d38ec4340b4e3b62b1de3223b2527393d5861","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -24,11 +24,12 @@\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class BookkeeperBenchmark extends AbstractBenchmark {\n \n-    static final Logger logger = Logger.getLogger(BookkeeperBenchmark.class);\n+    static final Logger logger = LoggerFactory.getLogger(BookkeeperBenchmark.class);\n \n     BookKeeper bk;\n     LedgerHandle[] lh;"},{"sha":"bc680f9e13d3a3079d29151718c9441660a8c3ee","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -20,7 +20,8 @@\n import java.net.InetSocketAddress;\n import java.util.concurrent.Executors;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.bootstrap.ServerBootstrap;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.channel.ChannelHandlerContext;\n@@ -40,7 +41,7 @@\n @ChannelPipelineCoverage(\"all\")\n public class FakeBookie extends SimpleChannelHandler implements\n     ChannelPipelineFactory {\n-    static final Logger logger = Logger.getLogger(FakeBookie.class);\n+    static final Logger logger = LoggerFactory.getLogger(FakeBookie.class);\n     ServerSocketChannelFactory serverChannelFactory = new NioServerSocketChannelFactory(\n         Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n "},{"sha":"ae8f439813266a74cb111998a224fd69b43788ac","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -17,14 +17,15 @@\n  */\n package org.apache.hedwig.server.common;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class TerminateJVMExceptionHandler implements Thread.UncaughtExceptionHandler {\n-    static Logger logger = Logger.getLogger(TerminateJVMExceptionHandler.class);\n+    static Logger logger = LoggerFactory.getLogger(TerminateJVMExceptionHandler.class);\n \n     @Override\n     public void uncaughtException(Thread t, Throwable e) {\n-        logger.fatal(\"Uncaught exception in thread \" + t.getName(), e);\n+        logger.error(\"Uncaught exception in thread \" + t.getName(), e);\n         System.exit(1);\n     }\n "},{"sha":"2c9af4d3cd816597fb65f38ffaa740c01951276e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -29,7 +29,8 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.data.TopicSubscriber;\n@@ -49,7 +50,7 @@\n \n public class FIFODeliveryManager implements Runnable, DeliveryManager {\n \n-    protected static final Logger logger = Logger.getLogger(FIFODeliveryManager.class);\n+    protected static final Logger logger = LoggerFactory.getLogger(FIFODeliveryManager.class);\n \n     protected interface DeliveryManagerRequest {\n         public void performRequest();"},{"sha":"f3b108a1452c5fafdccb8f2b292fd529ba0414c6","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -19,7 +19,8 @@\n \n import java.util.concurrent.ConcurrentHashMap;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n import org.jboss.netty.channel.ChannelFutureListener;\n \n@@ -43,7 +44,7 @@\n import org.apache.hedwig.util.Callback;\n \n public class SubscribeHandler extends BaseHandler implements ChannelDisconnectListener {\n-    static Logger logger = Logger.getLogger(SubscribeHandler.class);\n+    static Logger logger = LoggerFactory.getLogger(SubscribeHandler.class);\n \n     private DeliveryManager deliveryMgr;\n     private PersistenceManager persistenceMgr;"},{"sha":"9041dba1d7401d9d5afc2bb46840be39103ddf71","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -33,7 +33,8 @@\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -80,7 +81,7 @@\n \n public class PubSubServer {\n \n-    static Logger logger = Logger.getLogger(PubSubServer.class);\n+    static Logger logger = LoggerFactory.getLogger(PubSubServer.class);\n \n     // Netty related variables\n     ServerSocketChannelFactory serverChannelFactory;\n@@ -157,7 +158,7 @@ public void process(WatchedEvent event) {\n             });\n             // wait until connection is effective\n             if (!signalZkReady.await(conf.getZkTimeout()*2, TimeUnit.MILLISECONDS)) {\n-                logger.fatal(\"Could not establish connection with ZooKeeper after zk_timeout*2 = \" +\n+                logger.error(\"Could not establish connection with ZooKeeper after zk_timeout*2 = \" +\n                              conf.getZkTimeout()*2 + \" ms. (Default value for zk_timeout is 2000).\");\n                 throw new Exception(\"Could not establish connection with ZooKeeper after zk_timeout*2 = \" +\n                                     conf.getZkTimeout()*2 + \" ms. (Default value for zk_timeout is 2000).\");\n@@ -343,7 +344,7 @@ public PubSubServer(ServerConfiguration conf) throws Exception {\n      *            : code to exit with\n      */\n     public static void errorMsgAndExit(String msg, Throwable t, int rc) {\n-        logger.fatal(msg, t);\n+        logger.error(msg, t);\n         System.err.println(msg);\n         System.exit(rc);\n     }"},{"sha":"2f896d284bc35624cb0c7b3d7f64480c67f40899","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -20,7 +20,8 @@\n import java.io.IOException;\n import java.util.Map;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n import org.jboss.netty.channel.ChannelFuture;\n import org.jboss.netty.channel.ChannelFutureListener;\n@@ -45,7 +46,7 @@\n \n @ChannelPipelineCoverage(\"all\")\n public class UmbrellaHandler extends SimpleChannelHandler {\n-    static Logger logger = Logger.getLogger(UmbrellaHandler.class);\n+    static Logger logger = LoggerFactory.getLogger(UmbrellaHandler.class);\n \n     private Map<OperationType, Handler> handlers;\n     private ChannelGroup allChannels;"},{"sha":"b76023cd0a9794df5c37209aff80fc3780c69c94","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -30,7 +30,8 @@\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooDefs;\n@@ -71,7 +72,7 @@\n  */\n \n public class BookkeeperPersistenceManager implements PersistenceManagerWithRangeScan, TopicOwnershipChangeListener {\n-    static Logger logger = Logger.getLogger(BookkeeperPersistenceManager.class);\n+    static Logger logger = LoggerFactory.getLogger(BookkeeperPersistenceManager.class);\n     static byte[] passwd = \"sillysecret\".getBytes();\n     private BookKeeper bk;\n     private ZooKeeper zk;\n@@ -391,7 +392,7 @@ public void safeAddComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n                                      + (localSeqId - topicInfo.currentLedgerRange.startSeqIdIncluded)\n                                      + \" but it instead assigned entry-id: \" + entryId + \" topic: \"\n                                      + topic.toStringUtf8() + \"ledger: \" + lh.getId();\n-                        logger.fatal(msg);\n+                        logger.error(msg);\n                         throw new UnexpectedError(msg);\n                     }\n \n@@ -482,7 +483,7 @@ void processTopicLedgersNodeData(byte[] data, int version) {\n                 ranges = LedgerRanges.parseFrom(data);\n             } catch (InvalidProtocolBufferException e) {\n                 String msg = \"Ledger ranges for topic:\" + topic.toStringUtf8() + \" could not be deserialized\";\n-                logger.fatal(msg, e);\n+                logger.error(msg, e);\n                 cb.operationFailed(ctx, new PubSubException.UnexpectedConditionException(msg));\n                 return;\n             }\n@@ -507,7 +508,7 @@ void processTopicLedgersNodeData(byte[] data, int version) {\n                 if (lrIterator.hasNext()) {\n                     String msg = \"Ledger-id: \" + range.getLedgerId() + \" for topic: \" + topic.toStringUtf8()\n                                  + \" is not the last one but still does not have an end seq-id\";\n-                    logger.fatal(msg);\n+                    logger.error(msg);\n                     cb.operationFailed(ctx, new PubSubException.UnexpectedConditionException(msg));\n                     return;\n                 }"},{"sha":"f829611dc4670bb460ec7a700c81afe7a1907d29","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -20,7 +20,8 @@\n import java.util.LinkedList;\n import java.util.Queue;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.server.common.UnexpectedError;\n@@ -32,7 +33,7 @@\n  */\n public class CacheValue {\n \n-    static Logger logger = Logger.getLogger(ReadAheadCache.class);\n+    static Logger logger = LoggerFactory.getLogger(ReadAheadCache.class);\n \n     Queue<ScanCallbackWithContext> callbacks = new LinkedList<ScanCallbackWithContext>();\n     Message message;"},{"sha":"02ec60706f65b45e5d9b06d63152ed7620c24df1","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -30,7 +30,8 @@\n \n import javax.sql.rowset.serial.SerialBlob;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n@@ -43,7 +44,7 @@\n import org.apache.hedwig.util.FileUtils;\n \n public class LocalDBPersistenceManager implements PersistenceManagerWithRangeScan {\n-    static Logger logger = Logger.getLogger(LocalDBPersistenceManager.class);\n+    static Logger logger = LoggerFactory.getLogger(LocalDBPersistenceManager.class);\n \n     static String connectionURL;\n "},{"sha":"02615218d0e0c7effa4865ae5332cb5c9d192934","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -31,7 +31,8 @@\n import java.util.concurrent.BlockingQueue;\n import java.util.concurrent.LinkedBlockingQueue;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.exceptions.PubSubException;\n@@ -45,7 +46,7 @@\n \n public class ReadAheadCache implements PersistenceManager, Runnable {\n \n-    static Logger logger = Logger.getLogger(ReadAheadCache.class);\n+    static Logger logger = LoggerFactory.getLogger(ReadAheadCache.class);\n \n     protected interface CacheRequest {\n         public void performRequest();"},{"sha":"a58a33a67e0351854d950d8ac14d0b8b8977b3b5","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -26,7 +26,8 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.LinkedBlockingQueue;\n import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.bootstrap.ServerBootstrap;\n import org.jboss.netty.channel.group.ChannelGroup;\n import org.jboss.netty.channel.group.DefaultChannelGroup;\n@@ -44,7 +45,7 @@\n import org.apache.hedwig.server.netty.UmbrellaHandler;\n \n public class HedwigProxy {\n-    static final Logger logger = Logger.getLogger(HedwigProxy.class);\n+    static final Logger logger = LoggerFactory.getLogger(HedwigProxy.class);\n \n     HedwigClient client;\n     ServerSocketChannelFactory serverSocketChannelFactory;"},{"sha":"c9bfb12fc58277f8e731ef1127506e790a4ae345","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConsumeHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -17,7 +17,8 @@\n  */\n package org.apache.hedwig.server.proxy;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n \n import org.apache.hedwig.client.api.Subscriber;\n@@ -29,7 +30,7 @@\n \n public class ProxyConsumeHandler implements Handler {\n \n-    static final Logger logger = Logger.getLogger(ProxyConsumeHandler.class);\n+    static final Logger logger = LoggerFactory.getLogger(ProxyConsumeHandler.class);\n \n     Subscriber subscriber;\n "},{"sha":"76835f7f327b2f10ca75a7e01fd46c6c5d5416d1","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -17,7 +17,8 @@\n  */\n package org.apache.hedwig.server.proxy;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n import org.jboss.netty.channel.ChannelFuture;\n import org.jboss.netty.channel.ChannelFutureListener;\n@@ -39,7 +40,7 @@\n \n public class ProxyStartDeliveryHandler implements Handler {\n \n-    static final Logger logger = Logger.getLogger(ProxyStartDeliveryHandler.class);\n+    static final Logger logger = LoggerFactory.getLogger(ProxyStartDeliveryHandler.class);\n \n     Subscriber subscriber;\n     ChannelTracker tracker;\n@@ -116,7 +117,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n             } catch (ClientNotSubscribedException e) {\n                 // This should not happen, since we already checked the correct\n                 // channel and so on\n-                logger.fatal(\"Unexpected: No subscription when attempting to start delivery\", e);\n+                logger.error(\"Unexpected: No subscription when attempting to start delivery\", e);\n                 throw new RuntimeException(e);\n             }\n "},{"sha":"cc95bf3c9316b571ceaf4225c497b08585975f5b","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -17,7 +17,8 @@\n  */\n package org.apache.hedwig.server.proxy;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n \n import com.google.protobuf.ByteString;\n@@ -30,7 +31,7 @@\n \n public class ProxyStopDeliveryHandler implements Handler {\n \n-    static final Logger logger = Logger.getLogger(ProxyStopDeliveryHandler.class);\n+    static final Logger logger = LoggerFactory.getLogger(ProxyStopDeliveryHandler.class);\n \n     Subscriber subscriber;\n     ChannelTracker tracker;"},{"sha":"69770ca658f7fac3973bf1bc474da1ccda9c2d1f","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -17,7 +17,8 @@\n  */\n package org.apache.hedwig.server.proxy;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.client.data.TopicSubscriber;\n@@ -33,7 +34,7 @@\n \n public class ProxySubscribeHandler implements Handler, ChannelDisconnectListener {\n \n-    static final Logger logger = Logger.getLogger(ProxySubscribeHandler.class);\n+    static final Logger logger = LoggerFactory.getLogger(ProxySubscribeHandler.class);\n \n     Subscriber subscriber;\n     ChannelTracker tracker;"},{"sha":"55405aadb7546e5dcd447f5604565939a14bf421","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -20,8 +20,10 @@\n import java.util.ArrayList;\n import java.util.concurrent.ScheduledExecutorService;\n \n-import org.apache.log4j.Level;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.ZooKeeper;\n \n import com.google.protobuf.ByteString;\n@@ -44,7 +46,7 @@\n \n public class RegionManager implements SubscriptionEventListener {\n \n-    protected static final Logger LOGGER = Logger.getLogger(RegionManager.class);\n+    protected static final Logger LOGGER = LoggerFactory.getLogger(RegionManager.class);\n \n     private final ByteString mySubId;\n     private final PersistenceManager pm;\n@@ -69,8 +71,9 @@ public void onFirstLocalSubscribe(final ByteString topic, final boolean synchron\n         queue.pushAndMaybeRun(topic, queue.new AsynchronousOp<Void>(topic, cb, null) {\n             @Override\n             public void run() {\n-                Callback<Void> postCb = synchronous ? cb : CallbackUtils.logger(LOGGER, Level.DEBUG, Level.ERROR,\n-                                        \"all cross-region subscriptions succeeded\", \"at least one cross-region subscription failed\");\n+                Callback<Void> postCb = synchronous ? cb : CallbackUtils.logger(LOGGER, \n+                        \"all cross-region subscriptions succeeded\", \n+                        \"at least one cross-region subscription failed\");\n                 final Callback<Void> mcb = CallbackUtils.multiCallback(clients.size(), postCb, ctx);\n                 for (final HedwigHubClient client : clients) {\n                     final HedwigSubscriber sub = client.getSubscriber();"},{"sha":"831488c25d3df2945152567259051512ad27dd68","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -25,7 +25,8 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.exceptions.PubSubException;\n@@ -47,7 +48,7 @@\n \n     ServerConfiguration cfg;\n     ConcurrentHashMap<ByteString, Map<ByteString, InMemorySubscriptionState>> top2sub2seq = new ConcurrentHashMap<ByteString, Map<ByteString, InMemorySubscriptionState>>();\n-    static Logger logger = Logger.getLogger(AbstractSubscriptionManager.class);\n+    static Logger logger = LoggerFactory.getLogger(AbstractSubscriptionManager.class);\n \n     TopicOpQueuer queuer;\n     private final ArrayList<SubscriptionEventListener> listeners = new ArrayList<SubscriptionEventListener>();"},{"sha":"4d39335f7d727ea21f3d0e924287a1bb451c82e6","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/ZkSubscriptionManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/ZkSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/ZkSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/ZkSubscriptionManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -24,7 +24,8 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n@@ -47,7 +48,7 @@\n \n     ZooKeeper zk;\n \n-    protected final static Logger logger = Logger.getLogger(ZkSubscriptionManager.class);\n+    protected final static Logger logger = LoggerFactory.getLogger(ZkSubscriptionManager.class);\n \n     public ZkSubscriptionManager(ZooKeeper zk, TopicManager topicMgr, PersistenceManager pm, ServerConfiguration cfg,\n                                  ScheduledExecutorService scheduler) {"},{"sha":"36324ab78bd5221a4b920ceddcc6722a15994bd0","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -25,7 +25,8 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.exceptions.PubSubException;\n@@ -55,7 +56,7 @@\n     protected ServerConfiguration cfg;\n     protected ScheduledExecutorService scheduler;\n \n-    private static final Logger logger = Logger.getLogger(AbstractTopicManager.class);\n+    private static final Logger logger = LoggerFactory.getLogger(AbstractTopicManager.class);\n \n     private class GetOwnerOp extends TopicOpQueuer.AsynchronousOp<HedwigSocketAddress> {\n         public boolean shouldClaim;"},{"sha":"b1bd9a448ee0d64ac40f5d7d2e155bbac5ca87eb","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -23,7 +23,8 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.SynchronousQueue;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n@@ -51,7 +52,7 @@\n  */\n public class ZkTopicManager extends AbstractTopicManager implements TopicManager {\n \n-    static Logger logger = Logger.getLogger(ZkTopicManager.class);\n+    static Logger logger = LoggerFactory.getLogger(ZkTopicManager.class);\n     Random rand = new Random();\n \n     /**"},{"sha":"c377e04f6097377e7d07a97209a7344a168ce439","filename":"hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -19,7 +19,8 @@\n \n import java.util.List;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n@@ -31,7 +32,7 @@\n \n public class ZkUtils {\n \n-    static Logger logger = Logger.getLogger(ZkUtils.class);\n+    static Logger logger = LoggerFactory.getLogger(ZkUtils.class);\n \n     public static void createFullPathOptimistic(final ZooKeeper zk, final String originalPath, final byte[] data,\n             final List<ACL> acl, final CreateMode createMode, final AsyncCallback.StringCallback callback,"},{"sha":"8f77a1b8f20ded0482677f40194959c834d04e69","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -22,7 +22,8 @@\n \n import junit.framework.TestCase;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.junit.After;\n import org.junit.Before;\n \n@@ -37,7 +38,7 @@\n  */\n public abstract class HedwigHubTestBase extends TestCase {\n \n-    protected static Logger logger = Logger.getLogger(HedwigHubTestBase.class);\n+    protected static Logger logger = LoggerFactory.getLogger(HedwigHubTestBase.class);\n \n     // BookKeeper variables\n     // Default number of bookie servers to setup. Extending classes can"},{"sha":"5271c5c50ec96db8f2d9dc3e99da27ab00db6b68","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -24,7 +24,8 @@\n \n import junit.framework.TestCase;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.junit.After;\n import org.junit.Before;\n \n@@ -43,7 +44,7 @@\n  */\n public abstract class HedwigRegionTestBase extends TestCase {\n \n-    protected static Logger logger = Logger.getLogger(HedwigRegionTestBase.class);\n+    protected static Logger logger = LoggerFactory.getLogger(HedwigRegionTestBase.class);\n \n     // BookKeeper variables\n     // Default number of bookie servers to setup. Extending classes"},{"sha":"5f6e36359f9e6f0015652d21fa49ae7a5df3e090","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -19,7 +19,8 @@\n \n import junit.framework.TestCase;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.junit.After;\n import org.junit.Before;\n \n@@ -31,7 +32,7 @@\n  */\n public abstract class PubSubServerStandAloneTestBase extends TestCase {\n \n-    protected static Logger logger = Logger.getLogger(PubSubServerStandAloneTestBase.class);\n+    protected static Logger logger = LoggerFactory.getLogger(PubSubServerStandAloneTestBase.class);\n \n     protected class StandAloneServerConfiguration extends ServerConfiguration {\n         @Override"},{"sha":"65e2bd231461e65b84beb03e97db7c8816b61d49","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -28,7 +28,8 @@\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.netty.PubSubServer;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs;\n import org.apache.zookeeper.ZooKeeper;\n@@ -39,7 +40,7 @@\n \n public class TestPubSubServerStartup {\n \n-    private static Logger logger = Logger.getLogger(TestPubSubServerStartup.class);\n+    private static Logger logger = LoggerFactory.getLogger(TestPubSubServerStartup.class);\n \n     /**\n      * Start-up zookeeper + pubsubserver reading from a config URL. Then stop"},{"sha":"1cd5b62891e54bd7d0f6fb989fc3f2ee3759dfd2","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -33,15 +33,16 @@\n \n import org.apache.hedwig.util.FileUtils;\n import org.apache.hedwig.zookeeper.ZooKeeperTestBase;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This is a base class for any tests that require a BookKeeper client/server\n  * setup.\n  *\n  */\n public class BookKeeperTestBase extends ZooKeeperTestBase {\n-    private static Logger LOG = Logger.getLogger(BookKeeperTestBase.class);\n+    private static Logger LOG = LoggerFactory.getLogger(BookKeeperTestBase.class);\n \n     // BookKeeper Server variables\n     private List<BookieServer> bookiesList;"},{"sha":"ce82c0bae7f9927e6979799c640dd72d1facfc97","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -25,7 +25,8 @@\n \n import junit.framework.TestCase;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.junit.Test;\n \n import com.google.protobuf.ByteString;\n@@ -39,7 +40,7 @@\n     protected PersistenceManager persistenceManager;\n     protected int NUM_MESSAGES_TO_TEST = 5;\n     protected int NUM_TOPICS_TO_TEST = 5;\n-    static Logger logger = Logger.getLogger(TestPersistenceManagerBlackBox.class);\n+    static Logger logger = LoggerFactory.getLogger(TestPersistenceManagerBlackBox.class);\n     TestCallback testCallback = new TestCallback();\n \n     RuntimeException failureException;"},{"sha":"8c7cbd2a99f59dd958721c80f53dd160dcb958de","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3969ff71a1865b5b8c32b60ac529999c6de71ab8/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java?ref=3969ff71a1865b5b8c32b60ac529999c6de71ab8","patch":"@@ -36,11 +36,12 @@\n import org.apache.hedwig.util.HedwigSocketAddress;\n import org.apache.hedwig.util.Pair;\n import org.apache.hedwig.zookeeper.ZooKeeperTestBase;\n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class TestZkTopicManager extends ZooKeeperTestBase {\n \n-    static Logger LOG = Logger.getLogger(TestZkTopicManager.class);\n+    static Logger LOG = LoggerFactory.getLogger(TestZkTopicManager.class);\n \n     protected ZkTopicManager tm;\n "}]}

