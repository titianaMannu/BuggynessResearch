{"sha":"3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYTJmZGM2ODNlYjdjODg4MWU0Y2U5NjA4YmIxZDdjMzU0OGUyN2Q0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-05-10T12:47:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-05-10T12:47:37Z"},"message":"BOOKKEEPER-224: Fix findbugs in bookkeeper-server component (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1336645 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eeabf4c8aa5b953cf70d4d029627d228b253dd3b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/eeabf4c8aa5b953cf70d4d029627d228b253dd3b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","html_url":"https://github.com/apache/bookkeeper/commit/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c32edf860040ebba19c6c57d226b12cd487a00d2","url":"https://api.github.com/repos/apache/bookkeeper/commits/c32edf860040ebba19c6c57d226b12cd487a00d2","html_url":"https://github.com/apache/bookkeeper/commit/c32edf860040ebba19c6c57d226b12cd487a00d2"}],"stats":{"total":265,"additions":160,"deletions":105},"files":[{"sha":"26cb4101b0aab1981b95f027b6fbddf71fce34fd","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -102,6 +102,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-235: Bad syncing in entrylogger degrades performance for many concurrent ledgers (ivank via fpj)\n \n+        BOOKKEEPER-224: Fix findbugs in bookkeeper-server component (ivank)\n+\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)"},{"sha":"aa4dec29752bbb675d963ca90c8ef2662f28b9fc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -123,7 +123,7 @@ public long getEntry() {\n     }\n \n     // Write Callback do nothing\n-    class NopWriteCallback implements WriteCallback {\n+    static class NopWriteCallback implements WriteCallback {\n         @Override\n         public void writeComplete(int rc, long ledgerId, long entryId,\n                                   InetSocketAddress addr, Object ctx) {\n@@ -246,7 +246,11 @@ public boolean accept(File dir, String name) {\n                 LOG.error(err);\n                 throw new IOException(err);\n             }\n-            dir.mkdirs();\n+            if (!dir.mkdirs()) {\n+                String err = \"Unable to create directory \" + dir;\n+                LOG.error(err);\n+                throw new IOException(err);\n+            }\n         }\n     }\n "},{"sha":"75c99402daeb12250a44b6b6f779153f4526364b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -79,14 +79,19 @@ public String getMessage(int code) {\n         switch(code) {\n         case Code.OK:\n             err = \"No problem\";\n+            break;\n         case Code.UnauthorizedAccessException:\n             err = \"Error while reading ledger\";\n+            break;\n         case Code.LedgerFencedException:\n             err = \"Ledger has been fenced; No more entries can be added\";\n+            break;\n         case Code.InvalidCookieException:\n             err = \"Invalid environment cookie found\";\n+            break;\n         case Code.UpgradeException:\n             err = \"Error performing an upgrade operation \";\n+            break;\n         }\n         String reason = super.getMessage();\n         if (reason == null) {"},{"sha":"493cc6c1aa1944d7ce57f23ad53226ae2a3d19ae","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":17,"deletions":12,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -57,7 +57,7 @@\n     private static final Logger LOG = LoggerFactory.getLogger(EntryLogger.class);\n     private File dirs[];\n \n-    long logId;\n+    private long logId;\n     /**\n      * The maximum size of a entry logger file.\n      */\n@@ -133,6 +133,10 @@ public EntryLogger(ServerConfiguration conf) throws IOException {\n      */\n     private ConcurrentHashMap<Long, BufferedChannel> channels = new ConcurrentHashMap<Long, BufferedChannel>();\n \n+    synchronized long getCurrentLogId() {\n+        return logId;\n+    }\n+\n     /**\n      * Creates a new log file\n      */\n@@ -190,7 +194,9 @@ protected boolean removeEntryLog(long entryLogId) {\n                     + entryLogId + \".log\");\n             return false;\n         }\n-        entryLogFile.delete();\n+        if (!entryLogFile.delete()) {\n+            LOG.warn(\"Could not delete entry log file {}\", entryLogFile);\n+        }\n         return true;\n     }\n \n@@ -206,7 +212,7 @@ private void setLastLogId(File dir, long logId) throws IOException {\n             bw.flush();\n         } finally {\n             try {\n-                fos.close();\n+                bw.close();\n             } catch (IOException e) {\n             }\n         }\n@@ -263,7 +269,7 @@ private long readLastLogId(File f) {\n             return -1;\n         } finally {\n             try {\n-                fis.close();\n+                br.close();\n             } catch (IOException e) {\n             }\n         }\n@@ -344,14 +350,13 @@ private BufferedChannel getChannelForLogId(long entryLogId) throws IOException {\n         // If the file already exists before creating a BufferedChannel layer above it,\n         // set the FileChannel's position to the end so the write buffer knows where to start.\n         newFc.position(newFc.size());\n-        synchronized (channels) {\n-            fc = channels.get(entryLogId);\n-            if (fc != null) {\n-                newFc.close();\n-                return fc;\n-            }\n-            fc = new BufferedChannel(newFc, 8192);\n-            channels.put(entryLogId, fc);\n+        fc = new BufferedChannel(newFc, 8192);\n+\n+        BufferedChannel oldfc = channels.putIfAbsent(entryLogId, fc);\n+        if (oldfc != null) {\n+            newFc.close();\n+            return oldfc;\n+        } else {\n             return fc;\n         }\n     }"},{"sha":"7ca3104a136ea0cb46109d3a20f116129555befc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -163,7 +163,9 @@ private static void linkIndexDirectories(File srcPath, File targetPath) throws I\n \n         for (String f : files) {\n             if (f.endsWith(\".idx\")) { // this is an index dir, create the links\n-                targetPath.mkdirs();\n+                if (!targetPath.mkdirs()) {\n+                    throw new IOException(\"Could not create target path [\"+targetPath+\"]\");\n+                }\n                 HardLink.createHardLinkMult(srcPath, files, targetPath);\n                 return;\n             }\n@@ -198,7 +200,9 @@ public static void upgrade(ServerConfiguration conf)\n                     File curDir = new File(d, Bookie.CURRENT_DIR);\n                     File tmpDir = new File(d, \"upgradeTmp.\" + System.nanoTime());\n                     deferredMoves.put(curDir, tmpDir);\n-                    tmpDir.mkdirs();\n+                    if (!tmpDir.mkdirs()) {\n+                        throw new BookieException.UpgradeException(\"Could not create temporary directory \" + tmpDir);\n+                    }\n                     c.writeToDirectory(tmpDir);\n \n                     String[] files = d.list(new FilenameFilter() {\n@@ -251,14 +255,18 @@ public static void finalizeUpgrade(ServerConfiguration conf)\n                 if (version < 3) {\n                     if (version == 2) {\n                         File v2versionFile = new File(d, Cookie.VERSION_FILENAME);\n-                        v2versionFile.delete();\n+                        if (!v2versionFile.delete()) {\n+                            LOG.warn(\"Could not delete old version file {}\", v2versionFile);\n+                        }\n                     }\n                     File[] files = d.listFiles(BOOKIE_FILES_FILTER);\n                     for (File f : files) {\n                         if (f.isDirectory()) {\n                             FileUtils.deleteDirectory(f);\n                         } else{\n-                            f.delete();\n+                            if (!f.delete()) {\n+                                LOG.warn(\"Could not delete {}\", f);\n+                            }\n                         }\n                     }\n                 }"},{"sha":"4dc71e5249528a1ed66fb691725fb1935b895ced","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -457,7 +457,7 @@ public void process(long ledgerId, ByteBuffer entry) {\n         // Extract it for every entry log except for the current one.\n         // Entry Log ID's are just a long value that starts at 0 and increments\n         // by 1 when the log fills up and we roll to a new one.\n-        long curLogId = entryLogger.logId;\n+        long curLogId = entryLogger.getCurrentLogId();\n         for (long entryLogId = 0; entryLogId < curLogId; entryLogId++) {\n             // Comb the current entry log file if it has not already been extracted.\n             if (entryLogMetaMap.containsKey(entryLogId)) {"},{"sha":"409e2fc8c95eff1fdac6cf6befa49c9b70f4825c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":33,"deletions":11,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -99,14 +99,25 @@ synchronized void setLastLogMark(long logId, long logPosition) {\n         synchronized void markLog() {\n             lastMark = new LastLogMark(txnLogId, txnLogPosition);\n         }\n+\n+        synchronized LastLogMark getLastMark() {\n+            return lastMark;\n+        }\n+        synchronized long getTxnLogId() {\n+            return txnLogId;\n+        }\n+        synchronized long getTxnLogPosition() {\n+            return txnLogPosition;\n+        }\n+\n         synchronized void rollLog() {\n             byte buff[] = new byte[16];\n             ByteBuffer bb = ByteBuffer.wrap(buff);\n             // we should record <logId, logPosition> marked in markLog\n             // which is safe since records before lastMark have been\n             // persisted to disk (both index & entry logger)\n-            bb.putLong(lastMark.txnLogId);\n-            bb.putLong(lastMark.txnLogPosition);\n+            bb.putLong(lastMark.getTxnLogId());\n+            bb.putLong(lastMark.getTxnLogPosition());\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"RollLog to persist last marked log : \" + lastMark);\n             }\n@@ -135,8 +146,15 @@ synchronized void readLog() {\n                 File file = new File(dir, \"lastMark\");\n                 try {\n                     FileInputStream fis = new FileInputStream(file);\n-                    fis.read(buff);\n-                    fis.close();\n+                    try {\n+                        int bytesRead = fis.read(buff);\n+                        if (bytesRead != 16) {\n+                            throw new IOException(\"Couldn't read enough bytes from lastMark.\"\n+                                                  + \" Wanted \" + 16 + \", got \" + bytesRead);\n+                        }\n+                    } finally {\n+                        fis.close();\n+                    }\n                     bb.clear();\n                     long i = bb.getLong();\n                     long p = bb.getLong();\n@@ -169,7 +187,7 @@ public String toString() {\n     private class JournalRollingFilter implements JournalIdFilter {\n         @Override\n         public boolean accept(long journalId) {\n-            if (journalId < lastLogMark.lastMark.txnLogId) {\n+            if (journalId < lastLogMark.getLastMark().getTxnLogId()) {\n                 return true;\n             } else {\n                 return false;\n@@ -308,9 +326,11 @@ public void gcJournals() {\n             for (int i=0; i<maxIdx; i++) {\n                 long id = logs.get(i);\n                 // make sure the journal id is smaller than marked journal id\n-                if (id < lastLogMark.lastMark.txnLogId) {\n+                if (id < lastLogMark.getLastMark().getTxnLogId()) {\n                     File journalFile = new File(journalDirectory, Long.toHexString(id) + \".txn\");\n-                    journalFile.delete();\n+                    if (!journalFile.delete()) {\n+                        LOG.warn(\"Could not delete old journal file {}\", journalFile);\n+                    }\n                     LOG.info(\"garbage collected journal \" + journalFile.getName());\n                 }\n             }\n@@ -380,7 +400,7 @@ public void scanJournal(long journalId, long journalPos, JournalScanner scanner)\n      * @throws IOException\n      */\n     public void replay(JournalScanner scanner) throws IOException {\n-        final long markedLogId = lastLogMark.txnLogId;\n+        final long markedLogId = lastLogMark.getTxnLogId();\n         List<Long> logs = listJournalIds(journalDirectory, new JournalIdFilter() {\n             @Override\n             public boolean accept(long journalId) {\n@@ -406,7 +426,7 @@ public boolean accept(long journalId) {\n         for(Long id: logs) {\n             long logPosition = 0L;\n             if(id == markedLogId) {\n-                logPosition = lastLogMark.txnLogPosition;\n+                logPosition = lastLogMark.getTxnLogPosition();\n             }\n             scanJournal(id, logPosition, scanner);\n         }\n@@ -517,8 +537,10 @@ public void run() {\n             }\n             logFile.close();\n             logFile = null;\n-        } catch (Exception e) {\n-            LOG.warn(\"Journal exits when shutting down\", e);\n+        } catch (IOException ioe) {\n+            LOG.error(\"I/O exception in Journal thread!\", ioe);\n+        } catch (InterruptedException ie) {\n+            LOG.warn(\"Journal exits when shutting down\", ie);\n         } finally {\n             IOUtils.close(LOG, logFile);\n         }"},{"sha":"4df689e72f5cbf452a3f54ea1c798c5c0c130593","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -440,7 +440,7 @@ private void writeBuffers(Long ledger,\n             }\n             totalWritten += rc;\n         }\n-        if (totalWritten != count * pageSize) {\n+        if (totalWritten != (long)count * (long)pageSize) {\n             throw new IOException(\"Short write to ledger \" + ledger + \" wrote \" + totalWritten\n                                   + \" expected \" + count * pageSize);\n         }\n@@ -727,12 +727,12 @@ public boolean isHidden() {\n \n             @Override\n             public int getPageCount() {\n-                return getNumUsedPages();\n+                return LedgerCacheImpl.this.getNumUsedPages();\n             }\n \n             @Override\n             public int getPageSize() {\n-                return getPageSize();\n+                return LedgerCacheImpl.this.getPageSize();\n             }\n \n             @Override\n@@ -742,7 +742,7 @@ public int getOpenFileLimit() {\n \n             @Override\n             public int getPageLimit() {\n-                return getPageLimit();\n+                return LedgerCacheImpl.this.getPageLimit();\n             }\n \n             @Override"},{"sha":"e0f5bb7f9a2075eac5da1d9126e5ed08993c09d6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -80,8 +80,12 @@ synchronized private void checkPage() {\n     }\n     @Override\n     public boolean equals(Object other) {\n-        LedgerEntryPage otherLEP = (LedgerEntryPage) other;\n-        return otherLEP.getLedger() == getLedger() && otherLEP.getFirstEntry() == getFirstEntry();\n+        if (other instanceof LedgerEntryPage) {\n+            LedgerEntryPage otherLEP = (LedgerEntryPage) other;\n+            return otherLEP.getLedger() == getLedger() && otherLEP.getFirstEntry() == getFirstEntry();\n+        } else {\n+            return false;\n+        }\n     }\n     @Override\n     public int hashCode() {"},{"sha":"712bbea9a9fb4167d9356f4ce6b3eaf688272c7a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -183,7 +183,7 @@ private DigestType getLedgerDigestType(long ledgerId) {\n     }\n \n     // Object used for calling async methods and waiting for them to complete.\n-    class SyncObject {\n+    static class SyncObject {\n         boolean value;\n         int rc;\n \n@@ -324,7 +324,7 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n                         availableBookies.add(new InetSocketAddress(parts[0], Integer.parseInt(parts[1])));\n                     }\n                     // Now poll ZK to get the active ledgers\n-                    getActiveLedgers(bookieSrc, bookieDest, cb, context, availableBookies);\n+                    getActiveLedgers(bookieSrc, null, cb, context, availableBookies);\n                 }\n             }, null);\n         }\n@@ -702,7 +702,7 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n      * Once finished propogate callback up to ledgerFragmentsMcb which should\n      * be a multicallback responsible for all fragments in a single ledger\n      */\n-    class SingleFragmentCallback implements AsyncCallback.VoidCallback {\n+    static class SingleFragmentCallback implements AsyncCallback.VoidCallback {\n         final AsyncCallback.VoidCallback ledgerFragmentsMcb;\n         final LedgerHandle lh;\n         final long fragmentStartId;"},{"sha":"d3cd145e8759174fc855bd77297e2e44686ad73d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -163,12 +163,10 @@ ChannelBufferInputStream verifyDigestAndReturnData(long entryId, ChannelBuffer d\n \n     static class RecoveryData {\n         long lastAddConfirmed;\n-        long entryId;\n         long length;\n \n-        public RecoveryData(long lastAddConfirmed, long entryId, long length) {\n+        public RecoveryData(long lastAddConfirmed, long length) {\n             this.lastAddConfirmed = lastAddConfirmed;\n-            this.entryId = entryId;\n             this.length = length;\n         }\n \n@@ -178,9 +176,9 @@ RecoveryData verifyDigestAndReturnLastConfirmed(ChannelBuffer dataReceived) thro\n         verifyDigest(dataReceived);\n         dataReceived.readerIndex(8);\n \n-        long entryId = dataReceived.readLong();\n+        dataReceived.readLong(); // skip unused entryId\n         long lastAddConfirmed = dataReceived.readLong();\n         long length = dataReceived.readLong();\n-        return new RecoveryData(lastAddConfirmed, entryId, length);\n+        return new RecoveryData(lastAddConfirmed, length);\n     }\n }"},{"sha":"8c5bce3af10561c7f74c49f8a733c780567884b5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -100,7 +100,7 @@ public void initiate() {\n         /*\n          * Add ensemble to the configuration\n          */\n-        metadata.addEnsemble(new Long(0), ensemble);\n+        metadata.addEnsemble(0L, ensemble);\n \n         // create a ledger path with metadata\n         bk.getLedgerManager().newLedgerPath(this, metadata);"},{"sha":"6ce576dc813a1b30d3cf2a240f49c83b02fc7419","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -25,6 +25,7 @@\n import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.Queue;\n@@ -128,7 +129,7 @@ public long getLastAddConfirmed() {\n      *\n      * @return the id of the last entry pushed\n      */\n-    public long getLastAddPushed() {\n+    synchronized public long getLastAddPushed() {\n         return lastAddPushed;\n     }\n \n@@ -138,7 +139,7 @@ public long getLastAddPushed() {\n      * @return byte array for the ledger's key/password.\n      */\n     public byte[] getLedgerKey() {\n-        return ledgerKey;\n+        return Arrays.copyOf(ledgerKey, ledgerKey.length);\n     }\n \n     /**\n@@ -184,7 +185,7 @@ long addToLength(long delta) {\n      *\n      * @return the length of the ledger in bytes\n      */\n-    public long getLength() {\n+    synchronized public long getLength() {\n         return this.length;\n     }\n \n@@ -399,7 +400,8 @@ public void addEntry(byte[] data) throws InterruptedException, BKException {\n      */\n     public void addEntry(byte[] data, int offset, int length)\n             throws InterruptedException, BKException {\n-        LOG.debug(\"Adding entry \" + data);\n+        LOG.debug(\"Adding entry {}\", data);\n+\n         SyncCounter counter = new SyncCounter();\n         counter.inc();\n \n@@ -552,7 +554,7 @@ public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData dat\n     /**\n      * Context objects for synchronous call to read last confirmed.\n      */\n-    class LastConfirmedCtx {\n+    static class LastConfirmedCtx {\n         long response;\n         int rc;\n \n@@ -754,7 +756,7 @@ public void processResult(int rc, String path,\n         }, null);\n     }\n \n-    void recover(final GenericCallback<Void> cb) {\n+    synchronized void recover(final GenericCallback<Void> cb) {\n         if (metadata.isClosed()) {\n             lastAddConfirmed = lastAddPushed = metadata.close;\n             length = metadata.length;"},{"sha":"c699eaeed8cc4b10aba86a7e2cea2dca3fe466a0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -297,7 +297,7 @@ boolean resolveConflict(LedgerMetadata newMeta) {\n         for (int i=0; i<ensembles.size(); i++) {\n             Long curKey = keyIter.next();\n             Long newMetaKey = newMetaKeyIter.next();\n-            if (curKey != newMetaKey) {\n+            if (!curKey.equals(newMetaKey)) {\n                 return false;\n             }\n         }"},{"sha":"1bbc9b9c3e5a2d5ebdbfdafcbc325681ec754b01","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -105,9 +105,10 @@ public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n              * replicas. We subtract the length of the data itself, since it will\n              * be added again when processing the call to add it.\n              */\n-            lh.length = entry.getLength() - (long) data.length;\n+            synchronized (lh) {\n+                lh.length = entry.getLength() - (long) data.length;\n+            }\n             lh.asyncRecoveryAddEntry(data, 0, data.length, this, null);\n-\n             return;\n         }\n "},{"sha":"008cc8075a906abfcaae24c5848bfc24f099003e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -49,7 +49,7 @@\n \n     public ReadLastConfirmedOp(LedgerHandle lh, LastConfirmedDataCallback cb) {\n         this.cb = cb;\n-        this.maxRecoveredData = new RecoveryData(-1,-1,0);\n+        this.maxRecoveredData = new RecoveryData(-1,0);\n         this.lh = lh;\n         this.numResponsesPending = lh.metadata.ensembleSize;\n         this.coverageSet = lh.distributionSchedule.getCoverageSet();"},{"sha":"ce5346166448b40912b08958e262d65316c41b8e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -137,8 +137,9 @@ public void processResult(int rc, String path, Object ctx, List<String> ledgerNo\n         }, null);\n     }\n \n-    private class GetLedgersCtx {\n+    private static class GetLedgersCtx {\n         int rc;\n+        boolean done = false;\n         HashSet<Long> ledgers = null;\n     }\n \n@@ -156,20 +157,24 @@ public void processResult(int rc, String path, Object ctx, List<String> ledgerNo\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Try to get ledgers of node : \" + nodePath);\n         }\n-        synchronized (ctx) {\n-            asyncGetLedgersInSingleNode(nodePath, new GenericCallback<HashSet<Long>>() {\n+        asyncGetLedgersInSingleNode(nodePath, new GenericCallback<HashSet<Long>>() {\n                 @Override\n                 public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n                     synchronized (ctx) {\n                         if (Code.OK.intValue() == rc) {\n                             ctx.ledgers = zkActiveLedgers;\n                         }\n                         ctx.rc = rc;\n+                        ctx.done = true;\n                         ctx.notifyAll();\n                     }\n                 }\n             });\n-            ctx.wait();\n+\n+        synchronized (ctx) {\n+            while (ctx.done == false) {\n+                ctx.wait();\n+            }\n         }\n         if (Code.OK.intValue() != ctx.rc) {\n             throw new IOException(\"Error on getting ledgers from node \" + nodePath);"},{"sha":"cab02feaa8656adc9c0c47a28170a715a2849643","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -193,6 +193,11 @@ public boolean equals(Object obj) {\n             managerVersion == other.managerVersion;\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return (managerType + managerVersion).hashCode();\n+    }\n+\n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();"},{"sha":"491a3e404e8a15f10c31317c1bd6203ee3638821","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -50,7 +50,7 @@ public static LedgerManager newLedgerManager(\n         \n         // if zk is null, return the default ledger manager\n         if (zk == null) {\n-            return new FlatLedgerManager(conf, zk, \n+            return new FlatLedgerManager(conf, null,\n                     ledgerRootPath, FlatLedgerManager.CUR_VERSION);\n         }\n "},{"sha":"82e5213bfdff8b27095f3e665c351d496306766b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -86,6 +86,7 @@ public void start() throws IOException {\n         this.bookie.start();\n \n         nioServerFactory = new NIOServerFactory(conf, this);\n+        nioServerFactory.start();\n         running = true;\n         deathWatcher = new DeathWatcher(conf);\n         deathWatcher.start();\n@@ -493,7 +494,7 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n     /**\n      * A cnxn wrapper for time\n      */\n-    class TimedCnxn {\n+    static class TimedCnxn {\n         Cnxn cnxn;\n         long time;\n "},{"sha":"461566bd3ea06a9d3f264fac56d076f65671e9da","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -83,7 +83,6 @@ public NIOServerFactory(ServerConfiguration conf, PacketProcessor processor) thr\n         ss.socket().bind(new InetSocketAddress(conf.getBookiePort()));\n         ss.configureBlocking(false);\n         ss.register(selector, SelectionKey.OP_ACCEPT);\n-        start();\n     }\n \n     public InetSocketAddress getLocalAddress() {\n@@ -188,10 +187,6 @@ public void shutdown() {\n \n         int sessionTimeout;\n \n-        int packetsSent;\n-\n-        int packetsReceived;\n-\n         void doIO(SelectionKey k) throws InterruptedException {\n             try {\n                 if (sock == null) {\n@@ -490,16 +485,18 @@ public InetSocketAddress getRemoteAddress() {\n         }\n \n         private class CnxnStats {\n-            long packetsReceived;\n+            int packetsSent = 0;\n \n-            long packetsSent;\n+            int packetsReceived = 0;\n \n             /**\n              * The number of requests that have been submitted but not yet\n              * responded to.\n              */\n             public long getOutstandingRequests() {\n-                return outstandingRequests;\n+                synchronized(Cnxn.this) {\n+                    return outstandingRequests;\n+                }\n             }\n \n             public long getPacketsReceived() {"},{"sha":"80e2152ccd67ec043cb3f774df4ec2566859074b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":21,"deletions":28,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -73,7 +73,7 @@\n     static final Logger LOG = LoggerFactory.getLogger(PerChannelBookieClient.class);\n \n     static final long maxMemory = Runtime.getRuntime().maxMemory() / 5;\n-    public static int MAX_FRAME_LENGTH = 2 * 1024 * 1024; // 2M\n+    public static final int MAX_FRAME_LENGTH = 2 * 1024 * 1024; // 2M\n \n     InetSocketAddress addr;\n     Semaphore opCounterSem = new Semaphore(2000);\n@@ -174,38 +174,29 @@ public void operationComplete(ChannelFuture future) throws Exception {\n     void connectIfNeededAndDoOp(GenericCallback<Void> op) {\n         boolean doOpNow;\n \n-        // common case without lock first\n-        if (channel != null && state == ConnectionState.CONNECTED) {\n-            doOpNow = true;\n-        } else {\n-\n-            synchronized (this) {\n-                // check again under lock\n-                if (channel != null && state == ConnectionState.CONNECTED) {\n-                    doOpNow = true;\n-                } else {\n-\n-                    // if reached here, channel is either null (first connection\n-                    // attempt),\n-                    // or the channel is disconnected\n-                    doOpNow = false;\n-\n-                    // connection attempt is still in progress, queue up this\n-                    // op. Op will be executed when connection attempt either\n-                    // fails\n-                    // or\n-                    // succeeds\n-                    pendingOps.add(op);\n-\n-                    connect();\n-                }\n+        synchronized (this) {\n+            if (channel != null && state == ConnectionState.CONNECTED) {\n+                doOpNow = true;\n+            } else {\n+                // if reached here, channel is either null (first connection\n+                // attempt),\n+                // or the channel is disconnected\n+                doOpNow = false;\n+\n+                // connection attempt is still in progress, queue up this\n+                // op. Op will be executed when connection attempt either\n+                // fails\n+                // or\n+                // succeeds\n+                pendingOps.add(op);\n+\n+                connect();\n             }\n         }\n \n         if (doOpNow) {\n             op.operationComplete(BKException.Code.OK, null);\n         }\n-\n     }\n \n     /**\n@@ -447,7 +438,9 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n         LOG.info(\"Disconnected from bookie: \" + addr);\n         errorOutOutstandingEntries();\n         channel.close();\n-        state = ConnectionState.DISCONNECTED;\n+        synchronized (this) {\n+            state = ConnectionState.DISCONNECTED;\n+        }\n \n         // we don't want to reconnect right away. If someone sends a request to\n         // this address, we will reconnect."},{"sha":"6165791d85ae4bc7c5ba222cf549da91f676a987","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/tools/BookKeeperTools.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -64,7 +64,7 @@ public static void main(String[] args)\n         String zkServers = args[0];\n         String bookieSrcString[] = args[1].split(\":\");\n         if (bookieSrcString.length < 2) {\n-            System.err.println(\"BookieSrc inputted has invalid name format (host:port expected): \" + bookieSrcString);\n+            System.err.println(\"BookieSrc inputted has invalid name format (host:port expected): \" + args[1]);\n             return;\n         }\n         final InetSocketAddress bookieSrc = new InetSocketAddress(bookieSrcString[0], Integer\n@@ -74,7 +74,7 @@ public static void main(String[] args)\n             String bookieDestString[] = args[2].split(\":\");\n             if (bookieDestString.length < 2) {\n                 System.err.println(\"BookieDest inputted has invalid name format (host:port expected): \"\n-                                   + bookieDestString);\n+                                   + args[2]);\n                 return;\n             }\n             bookieDest = new InetSocketAddress(bookieDestString[0], Integer.parseInt(bookieDestString[1]));"},{"sha":"57fbd3e044414fe7d85d33ecfdea6e4b7f574efb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -48,7 +48,7 @@\n     OS_TYPE_MAC\n   }\n   \n-  public static OSType osType;\n+  public static final OSType osType;\n   private static HardLinkCommandGetter getHardLinkCommand;\n   \n   public final LinkStats linkStats; //not static"},{"sha":"c9233b573b02221c598b29ee8c81af053b7d013b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -86,8 +86,9 @@ private void runZookeeper(int maxCC) throws IOException {\n         //ServerStats.registerAsConcrete();\n         //ClientBase.setupTestEnv();\n         ZkTmpDir = File.createTempFile(\"zookeeper\", \"test\");\n-        ZkTmpDir.delete();\n-        ZkTmpDir.mkdir();\n+        if (!ZkTmpDir.delete() || !ZkTmpDir.mkdir()) {\n+            throw new IOException(\"Couldn't create zk directory \" + ZkTmpDir);\n+        }\n \n         try {\n             zks = new ZooKeeperServer(ZkTmpDir, ZkTmpDir, ZooKeeperDefaultPort);\n@@ -134,8 +135,9 @@ private void runBookies(ServerConfiguration baseConf)\n \n         for(int i = 0; i < numberOfBookies; i++) {\n             tmpDirs[i] = File.createTempFile(\"bookie\" + Integer.toString(i), \"test\");\n-            tmpDirs[i].delete();\n-            tmpDirs[i].mkdir();\n+            if (!tmpDirs[i].delete() || !tmpDirs[i].mkdir()) {\n+                throw new IOException(\"Couldn't create bookie dir \" + tmpDirs[i]);\n+            }\n \n             bsConfs[i] = new ServerConfiguration(baseConf);\n             // override settings\n@@ -183,7 +185,7 @@ private static void usage() {\n     }\n \n     /*\tUser for testing purposes, void */\n-    class emptyWatcher implements Watcher {\n+    static class emptyWatcher implements Watcher {\n         public void process(WatchedEvent event) {}\n     }\n "},{"sha":"bdcb7a27e3ec0b9c93fd2f5752afb9af353bfad4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java?ref=3a2fdc683eb7c8881e4ce9608bb1d7c3548e27d4","patch":"@@ -49,6 +49,7 @@ public void testProblemProcessor() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n         conf.setBookiePort(22334);\n         NIOServerFactory factory = new NIOServerFactory(conf, problemProcessor);\n+        factory.start();\n         Socket s = new Socket(\"127.0.0.1\", 22334);\n         s.setSoTimeout(5000);\n         try {"}]}

