{"sha":"3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYTRmODkyMGJhNTAxN2VmMzdkNzY0MWQzZDVmMGVlYjBiYmM1OTBi","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-05-06T17:32:45Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-05-06T17:32:45Z"},"message":"BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1479649 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06ff7c097a7eb69d4412a040758036c62ab5d5b6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/06ff7c097a7eb69d4412a040758036c62ab5d5b6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","html_url":"https://github.com/apache/bookkeeper/commit/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"d175ada58dcaf78f0a70b0ebebf489255ae67b5f","url":"https://api.github.com/repos/apache/bookkeeper/commits/d175ada58dcaf78f0a70b0ebebf489255ae67b5f","html_url":"https://github.com/apache/bookkeeper/commit/d175ada58dcaf78f0a70b0ebebf489255ae67b5f"}],"stats":{"total":100,"additions":100,"deletions":0},"files":[{"sha":"32d3f1f9dfc9ae949e1e1634598a4e2f74f255a7","filename":"CHANGES.txt","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","patch":"@@ -76,6 +76,10 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-583: Read from a ReadOnlyBookie fails if index fileinfo is not in ledger cache (vinay via sijie)\n \n+    NEW FEATURE:\n+\n+      BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)\n+\n Release 4.2.0 - 2013-01-14\n \n   Non-backward compatible changes:"},{"sha":"d3f17284bc8efd4b188ef3b5c6c41fbcc6e87192","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java?ref=3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","patch":"@@ -136,4 +136,16 @@ void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n          */\n         void recoverComplete(int rc, Object ctx);\n     }\n+    \n+    public interface IsClosedCallback {\n+        /**\n+         * Callback definition for isClosed operation\n+         *\n+         * @param rc\n+         *          return code\n+         * @param isClosed\n+         *          true if ledger is closed\n+         */\n+        void isClosedComplete(int rc, boolean isClosed, Object ctx);\n+    }\n }"},{"sha":"0324ca97b0ecb7616278b6508272e04caabfa16d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/bookkeeper/blob/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","patch":"@@ -29,11 +29,13 @@\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.IsClosedCallback;\n import org.apache.bookkeeper.client.BKException.Code;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookieClient;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n@@ -555,6 +557,68 @@ public void deleteLedger(long lId) throws InterruptedException, BKException {\n             throw BKException.create(counter.getrc());\n         }\n     }\n+    \n+    /**\n+     * Check asynchronously whether the ledger with identifier <i>lId</i>\n+     * has been closed.\n+     * \n+     * @param lId   ledger identifier\n+     * @param cb    callback method\n+     */\n+    public void asyncIsClosed(long lId, final IsClosedCallback cb, final Object ctx){\n+        ledgerManager.readLedgerMetadata(lId, new GenericCallback<LedgerMetadata>(){\n+            public void operationComplete(int rc, LedgerMetadata lm){\n+                if (rc == BKException.Code.OK) {\n+                    cb.isClosedComplete(rc, lm.isClosed(), ctx);\n+                } else {\n+                    cb.isClosedComplete(rc, false, ctx);\n+                }\n+            }\n+        });\n+    }\n+    \n+    /**\n+     * Check whether the ledger with identifier <i>lId</i>\n+     * has been closed.\n+     * \n+     * @param lId\n+     * @return boolean true if ledger has been closed\n+     * @throws BKException\n+     */\n+    public boolean isClosed(long lId)\n+    throws BKException, InterruptedException {\n+        final class Result {\n+            int rc;\n+            boolean isClosed;\n+            final CountDownLatch notifier = new CountDownLatch(1);\n+        }\n+\n+        final Result result = new Result();\n+\n+        final IsClosedCallback cb = new IsClosedCallback(){\n+            public void isClosedComplete(int rc, boolean isClosed, Object ctx){\n+                    result.isClosed = isClosed;\n+                    result.rc = rc;\n+                    result.notifier.countDown();\n+            }\n+        };\n+\n+        /*\n+         * Call asynchronous version of isClosed\n+         */\n+        asyncIsClosed(lId, cb, null);\n+        \n+        /*\n+         * Wait for callback\n+         */\n+        result.notifier.await();\n+        \n+        if (result.rc != BKException.Code.OK) {\n+            throw BKException.create(result.rc);\n+        }\n+        \n+        return result.isClosed;\n+    }\n \n     /**\n      * Shuts down client."},{"sha":"917134e253dd81fafb5fb209736b7c858aad9cfe","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=3a4f8920ba5017ef37d7641d3d5f0eeb0bbc590b","patch":"@@ -218,4 +218,24 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n             assertTrue(\"Close was not successful\", success.get());\n         }\n     }\n+    \n+    @Test(timeout=60000)\n+    public void testIsClosed() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+        .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        LedgerHandle lh = bkc.createLedger(digestType, \"testPasswd\".getBytes());\n+        Long lId = lh.getId();\n+\n+        lh.addEntry(\"000\".getBytes());\n+        boolean result = bkc.isClosed(lId);\n+        Assert.assertTrue(\"Ledger shouldn't be flagged as closed!\",!result);\n+\n+        lh.close();\n+        result = bkc.isClosed(lId);\n+        Assert.assertTrue(\"Ledger should be flagged as closed!\",result);\n+\n+        bkc.close();\n+    }\n }"}]}

