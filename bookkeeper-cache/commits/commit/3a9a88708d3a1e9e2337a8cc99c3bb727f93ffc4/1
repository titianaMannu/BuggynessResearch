{"sha":"3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYTlhODg3MDhkM2ExZTllMjMzN2E4Y2M5OWMzYmI3MjdmOTNmZmM0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T10:51:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T10:51:44Z"},"message":"BOOKKEEPER-346: Detect IOExceptions in LedgerCache and bookie should look at next ledger dir(if any) (Vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402464 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"819b2eaf17cf2092ca7ab35e3b66fa0471ab6dcf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/819b2eaf17cf2092ca7ab35e3b66fa0471ab6dcf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","html_url":"https://github.com/apache/bookkeeper/commit/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ffd46bcd1c7e2c78f6d41355a2215f73661764c1","url":"https://api.github.com/repos/apache/bookkeeper/commits/ffd46bcd1c7e2c78f6d41355a2215f73661764c1","html_url":"https://github.com/apache/bookkeeper/commit/ffd46bcd1c7e2c78f6d41355a2215f73661764c1"}],"stats":{"total":252,"additions":226,"deletions":26},"files":[{"sha":"383986de38601d885ecbafe20a96e7d0ba7cf335","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","patch":"@@ -166,6 +166,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-345: Detect IOExceptions on entrylogger and bookie should consider next ledger dir(if any) (Vinay via ivank)\n \n+        BOOKKEEPER-346: Detect IOExceptions in LedgerCache and bookie should look at next ledger dir(if any) (Vinay via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)"},{"sha":"c48ecdaaa18fb52a72898ad9770d0c19ed65c662","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":63,"deletions":1,"changes":64,"blob_url":"https://github.com/apache/bookkeeper/blob/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","patch":"@@ -54,7 +54,7 @@\n     static final int NO_MASTER_KEY = -1;\n \n     private FileChannel fc;\n-    private final File lf;\n+    private File lf;\n     byte[] masterKey;\n \n     /**\n@@ -67,6 +67,7 @@\n     private long size;\n     private int useCount;\n     private boolean isClosed;\n+    private long sizeSinceLastwrite;\n \n     // file access mode\n     protected String mode;\n@@ -78,6 +79,14 @@ public FileInfo(File lf, byte[] masterKey) throws IOException {\n         mode = \"rw\";\n     }\n \n+    public File getLf() {\n+        return lf;\n+    }\n+\n+    public long getSizeSinceLastwrite() {\n+        return sizeSinceLastwrite;\n+    }\n+\n     synchronized public void readHeader() throws IOException {\n         if (lf.exists()) {\n             if (fc != null) {\n@@ -86,6 +95,7 @@ synchronized public void readHeader() throws IOException {\n \n             fc = new RandomAccessFile(lf, mode).getChannel();\n             size = fc.size();\n+            sizeSinceLastwrite = size;\n \n             // avoid hang on reading partial index\n             ByteBuffer bb = ByteBuffer.allocate((int)(Math.min(size, START_OF_DATA)));\n@@ -220,9 +230,61 @@ synchronized public long write(ByteBuffer[] buffs, long position) throws IOExcep\n                 size = newsize;\n             }\n         }\n+        sizeSinceLastwrite = fc.size();\n         return total;\n     }\n \n+    /**\n+     * Copies current file contents upto specified size to the target file and\n+     * deletes the current file. If size not known then pass size as\n+     * Long.MAX_VALUE to copy complete file.\n+     */\n+    public synchronized void moveToNewLocation(File newFile, long size) throws IOException {\n+        checkOpen(false);\n+        if (size > fc.size()) {\n+            size = fc.size();\n+        }\n+        File rlocFile = new File(newFile.getParentFile(), newFile.getName() + LedgerCacheImpl.RLOC);\n+        if (!rlocFile.exists()) {\n+            checkParents(rlocFile);\n+            if (!rlocFile.createNewFile()) {\n+                throw new IOException(\"Creating new cache index file \" + rlocFile + \" failed \");\n+            }\n+        }\n+        // copy contents from old.idx to new.idx.rloc\n+        FileChannel newFc = new RandomAccessFile(rlocFile, \"rw\").getChannel();\n+        try {\n+            long written = 0;\n+            while (written < size) {\n+                long count = fc.transferTo(written, size, newFc);\n+                if (count <= 0) {\n+                    throw new IOException(\"Copying to new location \" + rlocFile + \" failed\");\n+                }\n+                written += count;\n+            }\n+            if (written <= 0 && size > 0) {\n+                throw new IOException(\"Copying to new location \" + rlocFile + \" failed\");\n+            }\n+        } finally {\n+            newFc.force(true);\n+            newFc.close();\n+        }\n+        // delete old.idx\n+        fc.close();\n+        if (!delete()) {\n+            LOG.error(\"Failed to delete the previous index file \" + lf);\n+            throw new IOException(\"Failed to delete the previous index file \" + lf);\n+        }\n+\n+        // rename new.idx.rloc to new.idx\n+        if (!rlocFile.renameTo(newFile)) {\n+            LOG.error(\"Failed to rename \" + rlocFile + \" to \" + newFile);\n+            throw new IOException(\"Failed to rename \" + rlocFile + \" to \" + newFile);\n+        }\n+        fc = new RandomAccessFile(newFile, mode).getChannel();\n+        lf = newFile;\n+    }\n+\n     synchronized public byte[] getMasterKey() throws IOException {\n         checkOpen(false);\n         return masterKey;"},{"sha":"c3f514987664b81fe18e17032c2676f66e6c605a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","patch":"@@ -54,7 +54,7 @@\n             ActiveLedgerManager activeLedgerManager,\n             LedgerDirsManager ledgerDirsManager) throws IOException {\n         entryLogger = new EntryLogger(conf, ledgerDirsManager);\n-        ledgerCache = new LedgerCacheImpl(conf, activeLedgerManager);\n+        ledgerCache = new LedgerCacheImpl(conf, activeLedgerManager, ledgerDirsManager);\n         gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n                 activeLedgerManager, new EntryLogCompactionScanner());\n     }"},{"sha":"c8d2b2154a627353721f91bad01df6b316a49c8c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":93,"deletions":21,"changes":114,"blob_url":"https://github.com/apache/bookkeeper/blob/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","patch":"@@ -32,10 +32,12 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Random;\n import java.util.Map.Entry;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.bookkeeper.meta.ActiveLedgerManager;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -46,11 +48,15 @@\n  */\n public class LedgerCacheImpl implements LedgerCache {\n     private final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n+    private static final String IDX = \".idx\";\n+    static final String RLOC = \".rloc\";\n \n-    final File ledgerDirectories[];\n+    private LedgerDirsManager ledgerDirsManager;\n+    final private AtomicBoolean shouldRelocateIndexFile = new AtomicBoolean(false);\n \n-    public LedgerCacheImpl(ServerConfiguration conf, ActiveLedgerManager alm) {\n-        this.ledgerDirectories = Bookie.getCurrentDirectories(conf.getLedgerDirs());\n+    public LedgerCacheImpl(ServerConfiguration conf, ActiveLedgerManager alm, LedgerDirsManager ledgerDirsManager)\n+            throws IOException {\n+        this.ledgerDirsManager = ledgerDirsManager;\n         this.openFileLimit = conf.getOpenFileLimit();\n         this.pageSize = conf.getPageSize();\n         this.entriesPerPage = pageSize / 8;\n@@ -66,6 +72,7 @@ public LedgerCacheImpl(ServerConfiguration conf, ActiveLedgerManager alm) {\n         activeLedgerManager = alm;\n         // Retrieve all of the active ledgers.\n         getActiveLedgers();\n+        ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n     }\n     /**\n      * the list of potentially clean ledgers\n@@ -233,16 +240,10 @@ static final String getLedgerName(long ledgerId) {\n         sb.append(Integer.toHexString(parent));\n         sb.append('/');\n         sb.append(Long.toHexString(ledgerId));\n-        sb.append(\".idx\");\n+        sb.append(IDX);\n         return sb.toString();\n     }\n \n-    static final private Random rand = new Random();\n-\n-    static final private File pickDirs(File dirs[]) {\n-        return dirs[rand.nextInt(dirs.length)];\n-    }\n-\n     FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n         synchronized(fileInfoCache) {\n             FileInfo fi = fileInfoCache.get(ledger);\n@@ -252,16 +253,18 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n                     if (masterKey == null) {\n                         throw new Bookie.NoLedgerException(ledger);\n                     }\n-                    File dir = pickDirs(ledgerDirectories);\n-                    String ledgerName = getLedgerName(ledger);\n-                    lf = new File(dir, ledgerName);\n+                    lf = getNewLedgerIndexFile(ledger);\n                     // A new ledger index file has been created for this Bookie.\n                     // Add this new ledger to the set of active ledgers.\n                     LOG.debug(\"New ledger index file created for ledgerId: {}\", ledger);\n                     activeLedgerManager.addActiveLedger(ledger, true);\n                 }\n                 evictFileInfoIfNecessary();\n                 fi = new FileInfo(lf, masterKey);\n+                if (ledgerDirsManager.isDirFull(lf.getParentFile()\n+                        .getParentFile().getParentFile())) {\n+                    moveLedgerIndexFile(ledger, fi);\n+                }\n                 fileInfoCache.put(ledger, fi);\n                 openLedgers.add(ledger);\n             }\n@@ -271,6 +274,13 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n             return fi;\n         }\n     }\n+\n+    private File getNewLedgerIndexFile(Long ledger) throws NoWritableLedgerDirException {\n+        File dir = ledgerDirsManager.pickRandomWritableDir();\n+        String ledgerName = getLedgerName(ledger);\n+        return new File(dir, ledgerName);\n+    }\n+\n     private void updatePage(LedgerEntryPage lep) throws IOException {\n         if (!lep.isClean()) {\n             throw new IOException(\"Trying to update a dirty page\");\n@@ -291,6 +301,32 @@ private void updatePage(LedgerEntryPage lep) throws IOException {\n         }\n     }\n \n+    private LedgerDirsListener getLedgerDirsListener() {\n+        return new LedgerDirsListener() {\n+            @Override\n+            public void diskFull(File disk) {\n+                // If the current entry log disk is full, then create new entry\n+                // log.\n+                shouldRelocateIndexFile.set(true);\n+            }\n+\n+            @Override\n+            public void diskFailed(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void allDisksFull() {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void fatalError() {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+        };\n+    }\n+\n     @Override\n     public void flushLedger(boolean doAll) throws IOException {\n         synchronized(dirtyLedgers) {\n@@ -307,6 +343,20 @@ public void flushLedger(boolean doAll) throws IOException {\n             if (dirtyLedgers.isEmpty()) {\n                 return;\n             }\n+\n+            if (shouldRelocateIndexFile.get()) {\n+                // if some new dir detected as full, then move all corresponding\n+                // open index files to new location\n+                for (Long l : dirtyLedgers) {\n+                    FileInfo fi = getFileInfo(l, null);\n+                    File currentDir = fi.getLf().getParentFile().getParentFile().getParentFile();\n+                    if (ledgerDirsManager.isDirFull(currentDir)) {\n+                        moveLedgerIndexFile(l, fi);\n+                    }\n+                }\n+                shouldRelocateIndexFile.set(false);\n+            }\n+\n             while(!dirtyLedgers.isEmpty()) {\n                 Long l = dirtyLedgers.removeFirst();\n \n@@ -327,6 +377,11 @@ public void flushLedger(boolean doAll) throws IOException {\n         }\n     }\n \n+    private void moveLedgerIndexFile(Long l, FileInfo fi) throws NoWritableLedgerDirException, IOException {\n+        File newLedgerIndexFile = getNewLedgerIndexFile(l);\n+        fi.moveToNewLocation(newLedgerIndexFile, fi.getSizeSinceLastwrite());\n+    }\n+\n     /**\n      * Flush a specified ledger\n      *\n@@ -578,22 +633,39 @@ public long getLastEntry(long ledgerId) throws IOException {\n      * BookieServer knows about that have not yet been deleted by the BookKeeper\n      * Client. This is called only once during initialization.\n      */\n-    private void getActiveLedgers() {\n+    private void getActiveLedgers() throws IOException {\n         // Ledger index files are stored in a file hierarchy with a parent and\n         // grandParent directory. We'll have to go two levels deep into these\n         // directories to find the index files.\n-        for (File ledgerDirectory : ledgerDirectories) {\n+        for (File ledgerDirectory : ledgerDirsManager.getAllLedgerDirs()) {\n             for (File grandParent : ledgerDirectory.listFiles()) {\n                 if (grandParent.isDirectory()) {\n                     for (File parent : grandParent.listFiles()) {\n                         if (parent.isDirectory()) {\n                             for (File index : parent.listFiles()) {\n-                                if (!index.isFile() || !index.getName().endsWith(\".idx\")) {\n+                                if (!index.isFile()\n+                                        || (!index.getName().endsWith(IDX) && !index.getName().endsWith(RLOC))) {\n                                     continue;\n                                 }\n-                                // We've found a ledger index file. The file name is the\n-                                // HexString representation of the ledgerId.\n-                                String ledgerIdInHex = index.getName().substring(0, index.getName().length() - 4);\n+\n+                                // We've found a ledger index file. The file\n+                                // name is the HexString representation of the\n+                                // ledgerId.\n+                                String ledgerIdInHex = index.getName().replace(RLOC, \"\").replace(IDX, \"\");\n+                                if (index.getName().endsWith(RLOC)) {\n+                                    if (findIndexFile(Long.parseLong(ledgerIdInHex)) != null) {\n+                                        if (!index.delete()) {\n+                                            LOG.warn(\"Deleting the rloc file \" + index + \" failed\");\n+                                        }\n+                                        continue;\n+                                    } else {\n+                                        File dest = new File(index.getParentFile(), ledgerIdInHex + IDX);\n+                                        if (!index.renameTo(dest)) {\n+                                            throw new IOException(\"Renaming rloc file \" + index\n+                                                    + \" to index file has failed\");\n+                                        }\n+                                    }\n+                                }\n                                 activeLedgerManager.addActiveLedger(Long.parseLong(ledgerIdInHex, 16), true);\n                             }\n                         }\n@@ -656,7 +728,7 @@ public void deleteLedger(long ledgerId) throws IOException {\n \n     private File findIndexFile(long ledgerId) throws IOException {\n         String ledgerName = getLedgerName(ledgerId);\n-        for(File d: ledgerDirectories) {\n+        for (File d : ledgerDirsManager.getAllLedgerDirs()) {\n             File lf = new File(d, ledgerName);\n             if (lf.exists()) {\n                 return lf;"},{"sha":"a24b1e2ca86ff1574dae164a86fa7565ab373168","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":67,"deletions":3,"changes":70,"blob_url":"https://github.com/apache/bookkeeper/blob/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","patch":"@@ -23,13 +23,15 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.nio.ByteBuffer;\n \n import org.apache.bookkeeper.bookie.Bookie.NoLedgerException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.ActiveLedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -50,6 +52,8 @@\n     ServerConfiguration conf;\n     File txnDir, ledgerDir;\n \n+    private Bookie bookie;\n+\n     @Override\n     @Before\n     public void setUp() throws Exception {\n@@ -66,27 +70,34 @@ public void setUp() throws Exception {\n         conf.setZkServers(null);\n         conf.setJournalDirName(txnDir.getPath());\n         conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+        bookie = new Bookie(conf);\n \n         ledgerManagerFactory =\n             LedgerManagerFactory.newLedgerManagerFactory(conf, null);\n         activeLedgerManager = ledgerManagerFactory.newActiveLedgerManager();\n+        ledgerCache = ((InterleavedLedgerStorage) bookie.ledgerStorage).ledgerCache;\n     }\n \n     @Override\n     @After\n     public void tearDown() throws Exception {\n+        bookie.ledgerStorage.shutdown();\n         activeLedgerManager.close();\n         ledgerManagerFactory.uninitialize();\n         FileUtils.deleteDirectory(txnDir);\n         FileUtils.deleteDirectory(ledgerDir);\n     }\n \n-    private void newLedgerCache() {\n-        ledgerCache = new LedgerCacheImpl(conf, activeLedgerManager);\n+    private void newLedgerCache() throws IOException {\n+        if (ledgerCache != null) {\n+            ledgerCache.close();\n+        }\n+        ledgerCache = ((InterleavedLedgerStorage) bookie.ledgerStorage).ledgerCache = new LedgerCacheImpl(\n+                conf, activeLedgerManager, bookie.getLedgerDirsManager());\n     }\n \n     @Test\n-    public void testAddEntryException() {\n+    public void testAddEntryException() throws IOException {\n         // set page limitation\n         conf.setPageLimit(10);\n         // create a ledger cache\n@@ -211,4 +222,57 @@ public void testPageEviction() throws Exception {\n             fail(\"Failed to add entry.\");\n         }\n     }\n+\n+    /**\n+     * Test Ledger Cache flush failure\n+     */\n+    public void testLedgerCacheFlushFailureOnDiskFull() throws Exception {\n+        File ledgerDir1 = File.createTempFile(\"bkTest\", \".dir\");\n+        ledgerDir1.delete();\n+        File ledgerDir2 = File.createTempFile(\"bkTest\", \".dir\");\n+        ledgerDir2.delete();\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(), ledgerDir2.getAbsolutePath() });\n+\n+        Bookie bookie = new Bookie(conf);\n+        InterleavedLedgerStorage ledgerStorage = ((InterleavedLedgerStorage) bookie.ledgerStorage);\n+        LedgerCacheImpl ledgerCache = (LedgerCacheImpl) ledgerStorage.ledgerCache;\n+        // Create ledger index file\n+        ledgerStorage.setMasterKey(1, \"key\".getBytes());\n+\n+        FileInfo fileInfo = ledgerCache.getFileInfo(Long.valueOf(1), null);\n+\n+        // Simulate the flush failure\n+        FileInfo newFileInfo = new FileInfo(fileInfo.getLf(), fileInfo.getMasterKey());\n+        ledgerCache.fileInfoCache.put(Long.valueOf(1), newFileInfo);\n+        // Add entries\n+        ledgerStorage.addEntry(generateEntry(1, 1));\n+        ledgerStorage.addEntry(generateEntry(1, 2));\n+        ledgerStorage.flush();\n+\n+        ledgerStorage.addEntry(generateEntry(1, 3));\n+        // add the dir to failed dirs\n+        bookie.getLedgerDirsManager().addToFilledDirs(\n+                newFileInfo.getLf().getParentFile().getParentFile().getParentFile());\n+        File before = newFileInfo.getLf();\n+        // flush after disk is added as failed.\n+        ledgerStorage.flush();\n+        File after = newFileInfo.getLf();\n+\n+        assertFalse(\"After flush index file should be changed\", before.equals(after));\n+        // Verify written entries\n+        Assert.assertArrayEquals(generateEntry(1, 1).array(), ledgerStorage.getEntry(1, 1).array());\n+        Assert.assertArrayEquals(generateEntry(1, 2).array(), ledgerStorage.getEntry(1, 2).array());\n+        Assert.assertArrayEquals(generateEntry(1, 3).array(), ledgerStorage.getEntry(1, 3).array());\n+    }\n+\n+    private ByteBuffer generateEntry(long ledger, long entry) {\n+        byte[] data = (\"ledger-\" + ledger + \"-\" + entry).getBytes();\n+        ByteBuffer bb = ByteBuffer.wrap(new byte[8 + 8 + data.length]);\n+        bb.putLong(ledger);\n+        bb.putLong(entry);\n+        bb.put(data);\n+        bb.flip();\n+        return bb;\n+    }\n }"}]}

