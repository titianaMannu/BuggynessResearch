{"sha":"3abac4eb86d64286d057d73024a177ef300283b0","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYWJhYzRlYjg2ZDY0Mjg2ZDA1N2Q3MzAyNGExNzdlZjMwMDI4M2Iw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-03-19T14:02:15Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-03-19T14:02:15Z"},"message":"BOOKKEEPER-186: Bookkeeper throttling - permits is not released when read has failed from all replicas (Rakesh R via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1302458 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ceed841fad9a8f97800d8db9ebe87d32ef27e9d2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ceed841fad9a8f97800d8db9ebe87d32ef27e9d2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3abac4eb86d64286d057d73024a177ef300283b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3abac4eb86d64286d057d73024a177ef300283b0","html_url":"https://github.com/apache/bookkeeper/commit/3abac4eb86d64286d057d73024a177ef300283b0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3abac4eb86d64286d057d73024a177ef300283b0/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"0663029788d504f38e98fd79e625a466bb4780c9","url":"https://api.github.com/repos/apache/bookkeeper/commits/0663029788d504f38e98fd79e625a466bb4780c9","html_url":"https://github.com/apache/bookkeeper/commit/0663029788d504f38e98fd79e625a466bb4780c9"}],"stats":{"total":130,"additions":130,"deletions":0},"files":[{"sha":"b2ad2099bbdfadac20200b7f4d12376fe86dd917","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3abac4eb86d64286d057d73024a177ef300283b0/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3abac4eb86d64286d057d73024a177ef300283b0/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3abac4eb86d64286d057d73024a177ef300283b0","patch":"@@ -58,6 +58,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-182: Entry log file is overwritten when fail to read lastLogId. (sijie via ivank)\n \n+        BOOKKEEPER-186: Bookkeeper throttling - permits is not released when read has failed from all replicas (Rakesh R via sijie)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"539d6b247d9c1b529629ff133f66fda0480aa467","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/3abac4eb86d64286d057d73024a177ef300283b0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/3abac4eb86d64286d057d73024a177ef300283b0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=3abac4eb86d64286d057d73024a177ef300283b0","patch":"@@ -97,6 +97,7 @@ void sendRead(ArrayList<InetSocketAddress> ensemble, LedgerEntry entry, int last\n         if (entry.nextReplicaIndexToReadFrom >= lh.metadata.quorumSize) {\n             // we are done, the read has failed from all replicas, just fail the\n             // read\n+            lh.opCounterSem.release();\n             submitCallback(lastErrorCode);\n             return;\n         }"},{"sha":"3d03cd38dea1e919cc6732de55418d9727ad60db","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/bookkeeper/blob/3abac4eb86d64286d057d73024a177ef300283b0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/3abac4eb86d64286d057d73024a177ef300283b0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java?ref=3abac4eb86d64286d057d73024a177ef300283b0","patch":"@@ -0,0 +1,127 @@\n+package org.apache.bookkeeper.client;\n+\n+/*\n+*\n+* Licensed to the Apache Software Foundation (ASF) under one\n+* or more contributor license agreements.  See the NOTICE file\n+* distributed with this work for additional information\n+* regarding copyright ownership.  The ASF licenses this file\n+* to you under the Apache License, Version 2.0 (the\n+* \"License\"); you may not use this file except in compliance\n+* with the License.  You may obtain a copy of the License at\n+*\n+*   http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*\n+*/\n+\n+import java.util.Enumeration;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.test.BookieFailureTest;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BookieThrottleTest extends BookKeeperClusterTestCase{\n+\n+    private static Logger LOG = LoggerFactory.getLogger(BookieFailureTest.class);\n+    private DigestType digestType;\n+    private LedgerHandle lh;\n+    private static CountDownLatch countDownLatch;\n+    private int throttle = 5;\n+    private int TIME_OUT = 30;\n+\n+    // Constructor\n+    public BookieThrottleTest() {\n+        super(4);\n+        this.digestType = DigestType.CRC32;\n+    }\n+\n+    @Test\n+    public void testVerifyPermitRelaseInReadFailure() throws Exception {\n+        baseClientConf.setThrottleValue(numBookies);\n+        int numEntries = throttle * 2;\n+        System.setProperty(\"throttle\", String.valueOf(throttle));\n+\n+        lh = bkc.createLedger(numBookies, 1, digestType, \"\".getBytes());\n+        // Add ledger entries.\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry((\"LedgerId: \" + lh.getId() + \", EntryId: \" + (i))\n+                    .getBytes());\n+        }\n+        LOG.info(\"Finished writing all ledger entries so shutdown all the bookies \" +\n+                \"to verify the read permits.\");\n+\n+        for (int i = 0; i < numBookies; i++) {\n+            bs.get(i).shutdown();\n+        }\n+\n+        try {\n+            lh.readEntries(0, throttle-1);\n+        } catch (BKException e) {\n+            LOG.info( \"Exception when reading the entries, since all bookies are stopped\", e);\n+        }\n+        LOG.debug(\"*** READ COMPLETE ***\");\n+        // grace period, just to avoid randomness\n+        Thread.sleep(2000);\n+        assertEquals(\"Permits is not released when read has failed from all replicas\",\n+                throttle, lh.getAvailablePermits().availablePermits());\n+        lh.close();\n+    }\n+\n+    @Test\n+    public void testVerifyPermitRelaseInAsyncReadFailure() throws Exception {\n+        baseClientConf.setThrottleValue(numBookies);\n+        System.setProperty(\"throttle\", String.valueOf(throttle));\n+\n+        lh = bkc.createLedger(numBookies, 1, digestType, \"\"\n+                .getBytes());\n+        // Add ledger entries.\n+        int numEntries = throttle * 2;\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry((\"LedgerId: \" + lh.getId() + \", EntryId: \" + (i))\n+                    .getBytes());\n+        }\n+        LOG.info(\"Finished writing all ledger entries so shutdown all the bookies \"+\n+                \"to verify the read permits.\");\n+\n+        for (int i = 0; i < numBookies; i++) {\n+            bs.get(i).shutdown();\n+        }\n+        BookieReadCallback bookieReadCallback = new BookieReadCallback();\n+        countDownLatch = new CountDownLatch(throttle);\n+        try {\n+            lh.asyncReadEntries(0, throttle-1, bookieReadCallback, null);\n+        } catch (Exception e) {\n+            LOG.info( \"Exception when reading the entries, since all bookies are stopped\", e);\n+        }\n+        countDownLatch.await(TIME_OUT, TimeUnit.SECONDS);\n+        LOG.debug(\"*** READ COMPLETE ***\");\n+        // grace period, just to avoid randomness\n+        Thread.sleep(2000);\n+        assertEquals(\"Permits is not released when read has failed from all replicas\",\n+                throttle, lh.getAvailablePermits().availablePermits());\n+        lh.close();\n+    }\n+\n+    static class BookieReadCallback implements ReadCallback\n+    {\n+        @Override\n+        public void readComplete(int rc, LedgerHandle lh,\n+                Enumeration<LedgerEntry> seq, Object ctx) {\n+            assertTrue(\"Expected Not OK, since all bookies are stopped\", rc != BKException.Code.OK);\n+            countDownLatch.countDown();\n+        }        \n+    }\n+}"}]}

