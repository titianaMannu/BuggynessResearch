{"sha":"3ce797955e66d709fd9d96419bc484cab4ddeec3","node_id":"MDY6Q29tbWl0MTU3NTk1NjozY2U3OTc5NTVlNjZkNzA5ZmQ5ZDk2NDE5YmM0ODRjYWI0ZGRlZWMz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-30T15:28:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-30T15:28:43Z"},"message":"BOOKKEEPER-389: add documentation for message filter. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1415691 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4ba680e500b32fde9eb13f0fac727a42af196b51","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4ba680e500b32fde9eb13f0fac727a42af196b51"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3ce797955e66d709fd9d96419bc484cab4ddeec3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3ce797955e66d709fd9d96419bc484cab4ddeec3","html_url":"https://github.com/apache/bookkeeper/commit/3ce797955e66d709fd9d96419bc484cab4ddeec3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3ce797955e66d709fd9d96419bc484cab4ddeec3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2522f9863b30359b617b6fd2ab6190c1f1cc8570","url":"https://api.github.com/repos/apache/bookkeeper/commits/2522f9863b30359b617b6fd2ab6190c1f1cc8570","html_url":"https://github.com/apache/bookkeeper/commit/2522f9863b30359b617b6fd2ab6190c1f1cc8570"}],"stats":{"total":79,"additions":79,"deletions":0},"files":[{"sha":"62ee2f7c9d4bcdcf80b44f25f378829e8bd7b923","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3ce797955e66d709fd9d96419bc484cab4ddeec3/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3ce797955e66d709fd9d96419bc484cab4ddeec3/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3ce797955e66d709fd9d96419bc484cab4ddeec3","patch":"@@ -238,6 +238,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-487: Add existed hub server settings to configuration template file (sijie via ivank)\n \n+        BOOKKEEPER-389: add documentation for message filter. (sijie via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"d5ca21ff210ae1768da8066d1a24c0b64202dd68","filename":"doc/hedwigMessageFilter.textile","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/3ce797955e66d709fd9d96419bc484cab4ddeec3/doc/hedwigMessageFilter.textile","raw_url":"https://github.com/apache/bookkeeper/raw/3ce797955e66d709fd9d96419bc484cab4ddeec3/doc/hedwigMessageFilter.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/hedwigMessageFilter.textile?ref=3ce797955e66d709fd9d96419bc484cab4ddeec3","patch":"@@ -0,0 +1,76 @@\n+Title:        Hedwig Message Filter\n+Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License. You may\n+        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n+        .\n+        .\n+        Unless required by applicable law or agreed to in writing,\n+        software distributed under the License is distributed on an \"AS IS\"\n+        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n+        implied. See the License for the specific language governing permissions\n+        and limitations under the License.\n+        .\n+        .\n+\n+h1. Message Filter\n+\n+Apache Hedwig provides an efficient mechanism for supporting application-defined __message filtering__.\n+\n+h2. Message\n+\n+Most message-oriented middleware (MOM) products treat messages as lightweight entities that consist of a header and a payload. The header contains fields used for message routing and identification; the payload contains the application data being sent.\n+\n+Hedwig messages follow a similar template, being composed of following parts:\n+\n+* @Header@ - All messages support both system defined fields and application defined property values. Properties provide an efficient mechanism for supporting application-defined message filtering.\n+* @Body@ - Hedwig considers the message body as a opaque binary blob.\n+* @SrcRegion@ - Indicates where the message comes from.\n+* @MessageSeqId@ - The unique message sequence id assigned by Hedwig.\n+\n+h3. Message Header Properties\n+\n+A __Message__ object contains a built-in facility for supporting application-defined property values. In effect, this provides a mechanism for adding application-specific header fields to a message.\n+\n+By using properties and  __message filters__, an application can have Hedwig select, or filter, messages on its behalf using application-specific criteria.\n+\n+Property names must be a __String__ and must not be null, while property values are binary blobs. The flexibility of binary blobs allows applications to define their own serialize/deserialize functions, allowing structured data to be stored in the message header.\n+\n+h2. Message Filter\n+\n+A __Message Filter__ allows an application to specify, via header properties, the messages it is interested in. Only messages which pass validation of a __Message Filter__, specified by a subscriber, are be delivered to the subscriber.\n+\n+A message filter could be run either on the __server side__ or on the __client side__. For both __server side__ and __client side__, a __Message Filter__ implementation needs to implement the following two interfaces:\n+\n+* @setSubscriptionPreferences(topic, subscriberId, preferences)@: The __subscription preferences__ of the subscriber will be passed to message filter when it was attached to its subscription either on the server-side or on the client-side.\n+* @testMessage(message)@: Used to test whether a particular message passes the filter or not.\n+\n+The __subscription preferences__ are used to specify the messages that the user is interested in. The __message filter__ uses the __subscription preferences__ to decide which messages are passed to the user.\n+\n+Take a book store(using topic __BookStore__) as an example:\n+\n+# User A may only care about History books. He subscribes to __BookStore__ with his custom preferences : type=\"History\".\n+# User B may only care about Romance books. He subscribes to __BookStore__ with his custom preferences : type=\"Romance\".\n+# A new book arrives at the book store; a message is sent to __BookStore__ with type=\"History\" in its header\n+# The message is then delivered to __BookStore__'s subscribers.\n+# Subscriber A filters the message by checking messages' header to accept those messages whose type is \"History\".\n+# Subscriber B filters out the message, as the type does not match its preferences.\n+\n+h3. Client Message Filter.\n+\n+A __ClientMessageFilter__ runs on the client side. Each subscriber can write its own filter and pass it as a parameter when starting delivery ( __startDelivery(topic, subscriberId, messageHandler, messageFilter)__ ).\n+\n+h3. Server Message Filter.\n+\n+A __ServerMessageFilter__ runs on the server side (a hub server). A hub server instantiates a server message filter, by means of reflection, using the message filter class specified in the subscription preferences which are provided by the subscriber. Since __ServerMessageFilter__s run on the hub server, all filtered-out messages are never delivered to client, reducing unnecessary network traffic. Hedwig uses a implementation of __ServerMessageFilter__ to filter unnecessary message deliveries between regions.\n+\n+Since hub servers use reflection to instantiate a __ServerMessageFilter__, an implementation of __ServerMessageFilter__ needs to implement two additional methods:\n+\n+* @initialize(conf)@: Initialize the message filter before filtering messages.\n+* @uninitialize()@: Uninitialize the message filter to release resources used by the message filter.\n+\n+For the hub server to load the message filter, the implementation class must be in the server's classpath at startup.\n+\n+h3. Which message filter should be used?\n+\n+It depends on application requirements. Using a __ServerMessageFilter__ will reduce network traffic by filtering unnecessary messages, but it would compete for resources on the hub server(CPU, memory, etc). Conversely, __ClientMessageFilter__s have the advantage of inducing no extra load on the hub server, but at the price of higher network utilization. A filter can be installed both at the server side and on the client; Hedwig does not restrict this.\n+"},{"sha":"ab5f149b9b627ae34e12767e40109df81063773b","filename":"doc/index.textile","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/3ce797955e66d709fd9d96419bc484cab4ddeec3/doc/index.textile","raw_url":"https://github.com/apache/bookkeeper/raw/3ce797955e66d709fd9d96419bc484cab4ddeec3/doc/index.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/index.textile?ref=3ce797955e66d709fd9d96419bc484cab4ddeec3","patch":"@@ -37,6 +37,7 @@ h1. Apache Hedwig documentation\n * \"Building Hedwig, or how to set up Hedwig\":./hedwigBuild.html\n * \"User's Guide, or how to program against the Hedwig API and how to run it\":./hedwigUser.html\n * \"Developer's Guide, or Hedwig internals and hacking details\":./hedwigDesign.html\n+* \"Message Filtering\":./hedwigMessageFilter.html\n \n h2. Hedwig Admin & Ops\n "}]}

