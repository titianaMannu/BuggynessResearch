{"sha":"3de1c6668a60999230f446011ca27fa7629b4465","node_id":"MDY6Q29tbWl0MTU3NTk1NjozZGUxYzY2NjhhNjA5OTkyMzBmNDQ2MDExY2EyN2ZhNzYyOWI0NDY1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-26T03:22:34Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-26T03:22:34Z"},"message":"BOOKKEEPER-330: System.currentTimeMillis usage in Hedwig (uma via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1365873 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7fbfca62475b36ead89fa1a59ca997c5898c9cfe","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7fbfca62475b36ead89fa1a59ca997c5898c9cfe"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3de1c6668a60999230f446011ca27fa7629b4465","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3de1c6668a60999230f446011ca27fa7629b4465","html_url":"https://github.com/apache/bookkeeper/commit/3de1c6668a60999230f446011ca27fa7629b4465","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3de1c6668a60999230f446011ca27fa7629b4465/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"6e33b2519f98f08faa248056e9e017dd8ba8de90","url":"https://api.github.com/repos/apache/bookkeeper/commits/6e33b2519f98f08faa248056e9e017dd8ba8de90","html_url":"https://github.com/apache/bookkeeper/commit/6e33b2519f98f08faa248056e9e017dd8ba8de90"}],"stats":{"total":119,"additions":91,"deletions":28},"files":[{"sha":"807939a074d08c4bd289fa5616dd447a493fea15","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -52,6 +52,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)\n \n+        BOOKKEEPER-330: System.currentTimeMillis usage in Hedwig (uma via sijie)\n+\n     IMPROVEMENTS:\n \n       bookkeeper-server:"},{"sha":"b61e3c19bdc7f35dedd85cc47536a348f99f2408","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -18,6 +18,8 @@\n package org.apache.hedwig.client.benchmark;\n \n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.api.Subscriber;\n@@ -98,7 +100,7 @@ public Void call() throws Exception {\n             myPublishCount++;\n         }\n \n-        long startTime = System.currentTimeMillis();\n+        long startTime = MathUtils.now();\n         int myPublishLimit = numMessages / numRegions / numPartitions - myPublishCount;\n         myPublishCount = 0;\n         ThroughputLatencyAggregator agg = new ThroughputLatencyAggregator(\"acked pubs\", myPublishLimit, nParallel);\n@@ -117,7 +119,7 @@ public Void call() throws Exception {\n             ByteString topic = ByteString.copyFromUtf8(HedwigBenchmark.TOPIC_PREFIX + topicNum);\n \n             if (rate > 0) {\n-                long delay = startTime + (long) (1000 * myPublishCount / rate) - System.currentTimeMillis();\n+                long delay = startTime + (long) (1000 * myPublishCount / rate) - MathUtils.now();\n                 if (delay > 0)\n                     Thread.sleep(delay);\n             }"},{"sha":"2081500702fd7e6be6b9e413d4fe292b2f14a751","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -25,6 +25,8 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.client.benchmark.BenchmarkUtils.BenchmarkCallback;\n@@ -120,7 +122,7 @@ long getSrcSeqId(Message msg) {\n \n     void multiSub(String label, String topicPrefix, int start, final int npar, final int count)\n             throws InterruptedException {\n-        long startTime = System.currentTimeMillis();\n+        long startTime = MathUtils.now();\n         ThroughputLatencyAggregator agg = new ThroughputLatencyAggregator(label, count / numPartitions, npar);\n         agg.startProgress();\n "},{"sha":"3efe22da20938a875dee575044d9c5e4e9d234b0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -25,14 +25,15 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.util.Callback;\n \n public class BenchmarkUtils {\n     static final Logger logger = LoggerFactory.getLogger(BenchmarkUtils.class);\n \n     public static double calcTp(final int count, long startTime) {\n-        return 1000. * count / (System.currentTimeMillis() - startTime);\n+        return 1000. * count / (MathUtils.now() - startTime);\n     }\n \n     /**\n@@ -142,7 +143,7 @@ public void startProgress() {\n \n         public void ding(boolean failed) {\n             int snapDone = done.incrementAndGet();\n-            earliest.compareAndSet(0, System.currentTimeMillis());\n+            earliest.compareAndSet(0, MathUtils.now());\n             if (failed)\n                 numFailed.incrementAndGet();\n             if (logger.isDebugEnabled())\n@@ -167,11 +168,11 @@ public BenchmarkCallback(ThroughputLatencyAggregator agg) throws InterruptedExce\n             this.agg = agg;\n             agg.outstanding.acquire();\n             // Must set the start time *after* taking acquiring on outstanding.\n-            startTime = System.currentTimeMillis();\n+            startTime = MathUtils.now();\n         }\n \n         private void finish(boolean failed) {\n-            agg.reportLatency(System.currentTimeMillis() - startTime);\n+            agg.reportLatency(MathUtils.now() - startTime);\n             agg.tpAgg.ding(failed);\n             agg.outstanding.release();\n         }"},{"sha":"5ddc1a5d48eb0763af409232c9272d567b61249d","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -36,6 +36,8 @@\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n \n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.api.Client;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.data.PubSubData;\n@@ -168,7 +170,7 @@ public void run() {\n                 logger.debug(\"Running the PubSubRequest Timeout Task\");\n             // Loop through all outstanding PubSubData requests and check if\n             // the requestWriteTime has timed out compared to the current time.\n-            long curTime = System.currentTimeMillis();\n+            long curTime = MathUtils.now();\n             long timeoutInterval = cfg.getServerAckResponseTimeout();\n \n             // First check the ResponseHandlers associated with cached"},{"sha":"f7d90165ad188d60fdc66b8162fcda6fc4b2cdf9","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -27,6 +27,8 @@\n import org.jboss.netty.channel.ChannelFuture;\n \n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.data.PubSubData;\n@@ -175,7 +177,7 @@ protected void doPublish(PubSubData pubSubData, Channel channel) {\n \n         // Update the PubSubData with the txnId and the requestWriteTime\n         pubSubData.txnId = txnId;\n-        pubSubData.requestWriteTime = System.currentTimeMillis();\n+        pubSubData.requestWriteTime = MathUtils.now();\n \n         // Before we do the write, store this information into the\n         // ResponseHandler so when the server responds, we know what"},{"sha":"4893a015bece2bbe46116e4a38f58d09873ef828","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -29,6 +29,8 @@\n import org.jboss.netty.channel.ChannelFutureListener;\n \n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n@@ -395,7 +397,7 @@ protected void doSubUnsub(PubSubData pubSubData, Channel channel) {\n \n         // Update the PubSubData with the txnId and the requestWriteTime\n         pubSubData.txnId = txnId;\n-        pubSubData.requestWriteTime = System.currentTimeMillis();\n+        pubSubData.requestWriteTime = MathUtils.now();\n \n         // Before we do the write, store this information into the\n         // ResponseHandler so when the server responds, we know what"},{"sha":"460d8b3e0150be13eb8685de2ca16eda389c69d7","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -37,6 +37,7 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.hedwig.admin.HedwigAdmin;\n import org.apache.hedwig.client.api.MessageHandler;\n@@ -422,7 +423,7 @@ public boolean runCmd(String[] args) throws Exception {\n             if (args.length < 5) {\n                 return false;\n             }\n-            final long startTime = System.currentTimeMillis();\n+            final long startTime = MathUtils.now();\n \n             final ByteString topic = ByteString.copyFromUtf8(args[1]);\n             final ByteString subId = ByteString.copyFromUtf8(args[2] + \"-\" + startTime);\n@@ -481,7 +482,7 @@ public void deliver(ByteString thisTopic, ByteString subscriberId,\n \n                 // wait for the message\n                 success = isDone.await(timeoutSecs, TimeUnit.SECONDS);\n-                elapsedTime = System.currentTimeMillis() - startTime;\n+                elapsedTime = MathUtils.now() - startTime;\n             } finally {\n                 try {\n                     if (subscribed) {\n@@ -879,15 +880,15 @@ protected boolean processCmd(MyCommandOptions co) {\n             return false;\n         }\n \n-        long startTime = System.currentTimeMillis();\n+        long startTime = MathUtils.now();\n         boolean success = false;\n         try {\n             success = myCommand.runCmd(args);\n         } catch (Exception e) {\n             e.printStackTrace();\n             success = false;\n         }\n-        long elapsedTime = System.currentTimeMillis() - startTime;\n+        long elapsedTime = MathUtils.now() - startTime;\n         if (inConsole) {\n             if (success) {\n                 System.out.println(\"Finished \" + ((double)elapsedTime / 1000) + \" s.\");"},{"sha":"7f32036f067b31a1fc594018b18bdbc3b37f3073","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/AbstractBenchmark.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -25,6 +25,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.util.ConcurrencyUtils;\n \n public abstract class AbstractBenchmark {\n@@ -57,7 +58,7 @@ public void handle(boolean success, Object ctx) {\n                 return;\n             }\n \n-            totalLatency.addAndGet(System.currentTimeMillis() - (Long)ctx);\n+            totalLatency.addAndGet(MathUtils.now() - (Long)ctx);\n             int numDoneInt = numDone.incrementAndGet();\n \n             if (logging && numDoneInt % 10000 == 0) {\n@@ -71,15 +72,15 @@ public void handle(boolean success, Object ctx) {\n     }\n \n     public void runPhase(String phase, int numOps) throws Exception {\n-        long startTime = System.currentTimeMillis();\n+        long startTime = MathUtils.now();\n \n         doOps(numOps);\n \n         if (!doneSignalQueue.take()) {\n             logger.error(\"One or more operations failed in phase: \" + phase);\n             throw new RuntimeException();\n         } else {\n-            logger.info(\"Phase: \" + phase + \" Avg latency : \" + totalLatency.get() / numOps + \", tput = \" + (numOps * 1000/ (System.currentTimeMillis() - startTime)));\n+            logger.info(\"Phase: \" + phase + \" Avg latency : \" + totalLatency.get() / numOps + \", tput = \" + (numOps * 1000/ (MathUtils.now() - startTime)));\n         }\n     }\n "},{"sha":"ecd567bebb7bf40a1a239a453a3548e122a86248","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -27,6 +27,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n@@ -83,7 +84,7 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n             buffer.put(passwd);\n             buffer.rewind();\n             ChannelBuffer toSend = ChannelBuffers.wrappedBuffer(ChannelBuffers.wrappedBuffer(buffer.slice()), ChannelBuffers.wrappedBuffer(data));\n-            bkc.addEntry(addr, ledgerId, passwd, i, toSend, callback, System.currentTimeMillis(), 0);\n+            bkc.addEntry(addr, ledgerId, passwd, i, toSend, callback, MathUtils.now(), 0);\n         }\n \n     }"},{"sha":"70875bd7a73673fd1729a5289041172f7084a3a1","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -24,6 +24,7 @@\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -73,7 +74,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n \n         for (int i=0; i<numOps; i++) {\n             outstanding.acquire();\n-            lh[rand.nextInt(lh.length)].asyncAddEntry(msg, callback, System.currentTimeMillis());\n+            lh[rand.nextInt(lh.length)].asyncAddEntry(msg, callback, MathUtils.now());\n         }\n \n "},{"sha":"3e69443f9cbb50a0257237d3d5c1b6a1b2d078b5","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -33,6 +33,8 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n@@ -173,7 +175,7 @@ protected void stopServingSubscriber(ActiveSubscriberState subscriber) {\n \n     public void retryErroredSubscriberAfterDelay(ActiveSubscriberState subscriber) {\n \n-        subscriber.setLastScanErrorTime(System.currentTimeMillis());\n+        subscriber.setLastScanErrorTime(MathUtils.now());\n \n         if (!retryQueue.offer(subscriber)) {\n             throw new UnexpectedError(\"Could not enqueue to delivery manager retry queue\");\n@@ -228,7 +230,7 @@ public void stop() {\n     }\n \n     protected void retryErroredSubscribers() {\n-        long lastInterestingFailureTime = System.currentTimeMillis() - cfg.getScanBackoffPeriodMs();\n+        long lastInterestingFailureTime = MathUtils.now() - cfg.getScanBackoffPeriodMs();\n         ActiveSubscriberState subscriber;\n \n         while ((subscriber = retryQueue.peek()) != null) {"},{"sha":"829789e8e94dca59288c25f6fa360c65f887e7bc","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -18,6 +18,7 @@\n package org.apache.hedwig.server.handlers;\n \n import org.jboss.netty.channel.Channel;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n@@ -55,7 +56,7 @@ public void handleRequestAtOwner(final PubSubRequest request, final Channel chan\n         Message msgToSerialize = Message.newBuilder(request.getPublishRequest().getMsg()).setSrcRegion(\n                                      cfg.getMyRegionByteString()).build();\n \n-        final long requestTime = System.currentTimeMillis();\n+        final long requestTime = MathUtils.now();\n         PersistRequest persistRequest = new PersistRequest(request.getTopic(), msgToSerialize,\n         new Callback<Long>() {\n             @Override\n@@ -67,7 +68,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n             @Override\n             public void operationFinished(Object ctx, Long resultOfOperation) {\n                 channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n-                pubStats.updateLatency(System.currentTimeMillis() - requestTime);\n+                pubStats.updateLatency(MathUtils.now() - requestTime);\n             }\n         }, null);\n "},{"sha":"43badc600bee446bb0df439ce34aafa1e14c06c8","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -25,6 +25,8 @@\n import org.jboss.netty.channel.ChannelFutureListener;\n \n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;\n@@ -108,7 +110,7 @@ public void handleRequestAtOwner(final PubSubRequest request, final Channel chan\n \n         MessageSeqId lastSeqIdPublished = MessageSeqId.newBuilder(seqId).setLocalComponent(seqId.getLocalComponent()).build();\n \n-        final long requestTime = System.currentTimeMillis();\n+        final long requestTime = MathUtils.now();\n         subMgr.serveSubscribeRequest(topic, subRequest, lastSeqIdPublished, new Callback<MessageSeqId>() {\n \n             @Override\n@@ -152,7 +154,7 @@ public void operationFinished(Object ctx, MessageSeqId resultOfOperation) {\n                 // otherwise the first message might go out before the response\n                 // to the subscribe\n                 channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n-                subStats.updateLatency(System.currentTimeMillis() - requestTime);\n+                subStats.updateLatency(MathUtils.now() - requestTime);\n \n                 // want to start 1 ahead of the consume ptr\n                 MessageSeqId seqIdToStartFrom = MessageSeqId.newBuilder(resultOfOperation).setLocalComponent("},{"sha":"b2ffe9828fd9d0da0d26225ea53b1d4c51539545","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -19,6 +19,8 @@\n \n import org.jboss.netty.channel.Channel;\n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n@@ -60,7 +62,7 @@ public void handleRequestAtOwner(final PubSubRequest request, final Channel chan\n         final ByteString topic = request.getTopic();\n         final ByteString subscriberId = unsubRequest.getSubscriberId();\n \n-        final long requestTime = System.currentTimeMillis();\n+        final long requestTime = MathUtils.now();\n         subMgr.unsubscribe(topic, subscriberId, new Callback<Void>() {\n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n@@ -72,7 +74,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n             public void operationFinished(Object ctx, Void resultOfOperation) {\n                 deliveryMgr.stopServingSubscriber(topic, subscriberId);\n                 channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n-                unsubStats.updateLatency(System.currentTimeMillis() - requestTime);\n+                unsubStats.updateLatency(MathUtils.now() - requestTime);\n             }\n         }, null);\n "},{"sha":"69ee6efd5eae294973becf03c1909a2c8f30ab0c","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -21,11 +21,14 @@\n import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Server Stats\n  */\n public class ServerStats {\n+    private static final Logger LOG = LoggerFactory.getLogger(ServerStats.class);\n     static ServerStats instance = new ServerStats();\n \n     /**\n@@ -100,6 +103,14 @@ synchronized public void incrementFailedOps() {\n          * Update Latency\n          */\n         synchronized public void updateLatency(long latency) {\n+            if (latency < 0) {\n+                // less than 0ms . Ideally this should not happen.\n+                // We have seen this latency negative in some cases due to the\n+                // behaviors of JVM. Ignoring the statistics updation for such\n+                // cases.\n+                LOG.warn(\"Latency time coming negative\");\n+                return;\n+            }\n             totalLatency += latency;\n             ++numSuccessOps;\n             if (latency < minLatency) {"},{"sha":"ad7981fb96ab37dcd1a157a3a6e24a448570fee0","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -35,6 +35,8 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n+\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n@@ -628,7 +630,7 @@ public ScanResponse(CacheKey cacheKey, Message message) {\n         }\n \n         public void performRequest() {\n-            addMessageToCache(cacheKey, message, System.currentTimeMillis());\n+            addMessageToCache(cacheKey, message, MathUtils.now());\n         }\n \n     }"},{"sha":"dd4c0231a9833b47e1468b9c34369d8a70c9b8d9","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/3de1c6668a60999230f446011ca27fa7629b4465/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java?ref=3de1c6668a60999230f446011ca27fa7629b4465","patch":"@@ -0,0 +1,26 @@\n+package org.apache.hedwig.server.netty;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n+import org.junit.Test;\n+\n+/** Tests that Statistics updation in hedwig Server */\n+public class TestServerStats {\n+\n+    /**\n+     * Tests that updatLatency should not fail with\n+     * ArrayIndexOutOfBoundException when latency time coming as negative.\n+     */\n+    @Test\n+    public void testUpdateLatencyShouldNotFailWithAIOBEWithNegativeLatency()\n+            throws Exception {\n+        ServerStats stats = ServerStats.getInstance();\n+        org.apache.hedwig.server.netty.ServerStats.OpStats opStat = stats\n+                .getOpStats(OperationType.SUBSCRIBE);\n+        opStat.updateLatency(-10);\n+        assertEquals(\"Should not update any latency metrics\", 0,\n+                opStat.numSuccessOps);\n+\n+    }\n+}"}]}

