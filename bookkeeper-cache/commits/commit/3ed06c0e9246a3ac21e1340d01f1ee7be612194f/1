{"sha":"3ed06c0e9246a3ac21e1340d01f1ee7be612194f","node_id":"MDY6Q29tbWl0MTU3NTk1NjozZWQwNmMwZTkyNDZhM2FjMjFlMTM0MGQwMWYxZWU3YmU2MTIxOTRm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-05-12T06:10:00Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-05-12T06:10:00Z"},"message":"BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1593889 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c5ce9abc6c00cc9bab42dd1425301273f68fbd2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6c5ce9abc6c00cc9bab42dd1425301273f68fbd2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3ed06c0e9246a3ac21e1340d01f1ee7be612194f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3ed06c0e9246a3ac21e1340d01f1ee7be612194f","html_url":"https://github.com/apache/bookkeeper/commit/3ed06c0e9246a3ac21e1340d01f1ee7be612194f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"19b821c63b91293960041bca7b031614a109a7b8","url":"https://api.github.com/repos/apache/bookkeeper/commits/19b821c63b91293960041bca7b031614a109a7b8","html_url":"https://github.com/apache/bookkeeper/commit/19b821c63b91293960041bca7b031614a109a7b8"}],"stats":{"total":344,"additions":331,"deletions":13},"files":[{"sha":"0d2e74551b73f0f2afede1060c0fead2ad83fd23","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -268,6 +268,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-731: Missing BOOKIE_PID_DIR and BOOKIE_STOP_TIMEOUT in env variables list (rakesh via sijie)\n \n+      BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)\n+\n     NEW FEATURE:\n \n       BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)"},{"sha":"0fc8afee8658ef747e100ab53c23f6514e782517","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -100,8 +100,10 @@ public void operationComplete(int rc, final LedgerMetadata result) {\n                     scheduler.submit(new Runnable() {\n                         @Override\n                         public void run() {\n-                            for (LedgerMetadataListener listener : listenerSet) {\n-                                listener.onChanged(ledgerId, result);\n+                            synchronized(listenerSet) {\n+                                for (LedgerMetadataListener listener : listenerSet) {\n+                                    listener.onChanged(ledgerId, result);\n+                                }\n                             }\n                         }\n                     });\n@@ -188,10 +190,16 @@ public void process(WatchedEvent event) {\n         }\n         switch (event.getType()) {\n         case NodeDeleted:\n-            Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n             if (null != listenerSet) {\n-                LOG.debug(\"Removed ledger metadata listeners on ledger {} : {}\",\n-                        ledgerId, listenerSet);\n+                synchronized(listenerSet){\n+                    LOG.debug(\"Removed ledger metadata listeners on ledger {} : {}\",\n+                            ledgerId, listenerSet);\n+                    for(LedgerMetadataListener l : listenerSet) {\n+                        unregisterLedgerMetadataListener(ledgerId, l);\n+                        l.onChanged( ledgerId, null );\n+                    }\n+                }\n             } else {\n                 LOG.debug(\"No ledger metadata listeners to remove from ledger {} after it's deleted.\",\n                         ledgerId);"},{"sha":"db16d26b1672ce4f549d9d4010307e7924475db8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -30,7 +30,7 @@\n /**\n  * Flat Ledger Manager Factory\n  */\n-class FlatLedgerManagerFactory extends LedgerManagerFactory {\n+public class FlatLedgerManagerFactory extends LedgerManagerFactory {\n \n     public static final String NAME = \"flat\";\n     public static final int CUR_VERSION = 1;"},{"sha":"b843e994af49da314d17204110a191968e685220","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -30,7 +30,7 @@\n /**\n  * Hierarchical Ledger Manager Factory\n  */\n-class HierarchicalLedgerManagerFactory extends LedgerManagerFactory {\n+public class HierarchicalLedgerManagerFactory extends LedgerManagerFactory {\n \n     public static final String NAME = \"hierarchical\";\n     public static final int CUR_VERSION = 1;"},{"sha":"2510b89d749f3123f0ea225b3396d1e84e28f292","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":119,"deletions":4,"changes":123,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -21,18 +21,24 @@\n import static org.apache.bookkeeper.metastore.MetastoreTable.NON_FIELDS;\n \n import java.io.IOException;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.bookkeeper.meta.AbstractZkLedgerManager.ReadLedgerMetadataTask;\n import org.apache.bookkeeper.metastore.MSException;\n+import org.apache.bookkeeper.metastore.MSWatchedEvent;\n import org.apache.bookkeeper.metastore.MetaStore;\n import org.apache.bookkeeper.metastore.MetastoreCallback;\n import org.apache.bookkeeper.metastore.MetastoreCursor;\n@@ -41,6 +47,8 @@\n import org.apache.bookkeeper.metastore.MetastoreFactory;\n import org.apache.bookkeeper.metastore.MetastoreScannableTable;\n import org.apache.bookkeeper.metastore.MetastoreTableItem;\n+import org.apache.bookkeeper.metastore.MetastoreWatcher;\n+import org.apache.bookkeeper.metastore.MSWatchedEvent.EventType;\n import org.apache.bookkeeper.metastore.Value;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n@@ -68,6 +76,8 @@\n \n     private final static Logger LOG = LoggerFactory.getLogger(MSLedgerManagerFactory.class);\n \n+    static int MS_CONNECT_BACKOFF_MS = 200;\n+\n     public static final int CUR_VERSION = 1;\n \n     public static final String TABLE_NAME = \"LEDGER\";\n@@ -170,7 +180,7 @@ public synchronized T getResult() {\n         }\n     }\n \n-    static class MsLedgerManager implements LedgerManager {\n+    static class MsLedgerManager implements LedgerManager, MetastoreWatcher {\n         final ZooKeeper zk;\n         final AbstractConfiguration conf;\n \n@@ -181,13 +191,66 @@ public synchronized T getResult() {\n         static final String IDGEN_ZNODE = \"ms-idgen\";\n         static final String IDGENERATION_PREFIX = \"/\" + IDGEN_ZNODE + \"/ID-\";\n \n+        // ledger metadata listeners\n+        protected final ConcurrentMap<Long, Set<LedgerMetadataListener>> listeners =\n+                new ConcurrentHashMap<Long, Set<LedgerMetadataListener>>();\n+\n         // Path to generate global id\n         private final String idGenPath;\n \n         // we use this to prevent long stack chains from building up in\n         // callbacks\n         ScheduledExecutorService scheduler;\n \n+        protected class ReadLedgerMetadataTask implements Runnable, GenericCallback<LedgerMetadata> {\n+\n+            final long ledgerId;\n+\n+            ReadLedgerMetadataTask(long ledgerId) {\n+                this.ledgerId = ledgerId;\n+            }\n+\n+            @Override\n+            public void run() {\n+                if (null != listeners.get(ledgerId)) {\n+                    LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                    readLedgerMetadata(ledgerId, ReadLedgerMetadataTask.this);\n+                } else {\n+                    LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+                }\n+            }\n+\n+            @Override\n+            public void operationComplete(int rc, final LedgerMetadata result) {\n+                if (BKException.Code.OK == rc) {\n+                    final Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                        scheduler.submit(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                synchronized(listenerSet) {\n+                                    for (LedgerMetadataListener listener : listenerSet) {\n+                                        listener.onChanged(ledgerId, result);\n+                                    }\n+                                }\n+                            }\n+                        });\n+                    }\n+                } else if (BKException.Code.NoSuchLedgerExistsException == rc) {\n+                    // the ledger is removed, do nothing\n+                    Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n+                                ledgerId, listenerSet.size());\n+                    }\n+                } else {\n+                    LOG.warn(\"Failed on read ledger metadata of ledger {} : {}\", ledgerId, rc);\n+                    scheduler.schedule(this, MS_CONNECT_BACKOFF_MS, TimeUnit.MILLISECONDS);\n+                }\n+            }\n+        }\n+\n         MsLedgerManager(final AbstractConfiguration conf, final ZooKeeper zk, final MetaStore metastore) {\n             this.conf = conf;\n             this.zk = zk;\n@@ -210,14 +273,66 @@ public synchronized T getResult() {\n                     .build());\n         }\n \n+        @Override\n+        public void process(MSWatchedEvent e){\n+            long ledgerId = key2LedgerId(e.getKey());\n+            switch(e.getType()) {\n+            case CHANGED:\n+                new ReadLedgerMetadataTask(key2LedgerId(e.getKey())).run();\n+\n+                break;\n+            case REMOVED:\n+                Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (listenerSet != null) {\n+                    synchronized (listenerSet) {\n+                        for(LedgerMetadataListener l : listenerSet){\n+                            unregisterLedgerMetadataListener(ledgerId, l);\n+                            l.onChanged( ledgerId, null );\n+                        }\n+                    }\n+                }\n+\n+                break;\n+            default:\n+                LOG.warn(\"Unknown type: {}\", e.getType());\n+                break;\n+            }\n+        }\n+\n         @Override\n         public void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n-            // TODO: should provide ledger metadata listener in metadata store.\n+            if (null != listener) {\n+                LOG.info(\"Registered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (listenerSet == null) {\n+                    Set<LedgerMetadataListener> newListenerSet = new HashSet<LedgerMetadataListener>();\n+                    Set<LedgerMetadataListener> oldListenerSet = listeners.putIfAbsent(ledgerId, newListenerSet);\n+                    if (null != oldListenerSet) {\n+                        listenerSet = oldListenerSet;\n+                    } else {\n+                        listenerSet = newListenerSet;\n+                    }\n+                }\n+                synchronized (listenerSet) {\n+                    listenerSet.add(listener);\n+                }\n+                new ReadLedgerMetadataTask(ledgerId).run();\n+            }\n         }\n \n         @Override\n         public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n-            // TODO: should provide ledger metadata listener in metadata store.\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+            if (listenerSet != null) {\n+                synchronized (listenerSet) {\n+                    if (listenerSet.remove(listener)) {\n+                        LOG.info(\"Unregistered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                    }\n+                    if (listenerSet.isEmpty()) {\n+                        listeners.remove(ledgerId, listenerSet);\n+                    }\n+                }\n+            }\n         }\n \n         @Override\n@@ -354,7 +469,7 @@ public void complete(int rc, Versioned<Value> value, Object ctx) {\n                     readCb.operationComplete(BKException.Code.OK, metadata);\n                 }\n             };\n-            ledgerTable.get(key, msCallback, ALL_FIELDS);\n+            ledgerTable.get(key, this, msCallback, ALL_FIELDS);\n         }\n \n         @Override"},{"sha":"03f1c600566dd6f42ab8fc661454bf1588e0a544","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","status":"modified","additions":38,"deletions":1,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -93,10 +93,12 @@ public int hashCode() {\n \n     private String name;\n     private TreeMap<String, Versioned<Value>> map = null;\n+    private TreeMap<String, MetastoreWatcher> watcherMap = null;\n     private ScheduledExecutorService scheduler;\n \n     public InMemoryMetastoreTable(InMemoryMetaStore metastore, String name) {\n         this.map = new TreeMap<String, Versioned<Value>>();\n+        this.watcherMap = new TreeMap<String,MetastoreWatcher>();\n         this.name = name;\n         String thName = \"InMemoryMetastore-Table(\" + name + \")-Scheduler-%d\";\n         ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n@@ -144,6 +146,19 @@ public void run() {\n             }\n         });\n     }\n+    \n+    @Override\n+    public void get(final String key, final MetastoreWatcher watcher, final MetastoreCallback<Versioned<Value>> cb, final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                scheduleGet(key, ALL_FIELDS, cb, ctx);\n+                synchronized(watcherMap) {\n+                    watcherMap.put( key, watcher );\n+                }\n+            }\n+        });\n+    }\n \n     @Override\n     public void get(final String key, final Set<String> fields, final MetastoreCallback<Versioned<Value>> cb,\n@@ -182,10 +197,18 @@ public void run() {\n                 }\n                 Result<Version> result = put(key, value, version);\n                 cb.complete(result.code.getCode(), result.value, ctx);\n+                \n+                /*\n+                 * If there is a watcher set for this key, we need\n+                 * to trigger it.\n+                 */\n+                if(result.code == MSException.Code.OK){\n+                    triggerWatch(key, MSWatchedEvent.EventType.CHANGED);\n+                }\n             }\n         });\n     }\n-\n+    \n     @Override\n     public void remove(final String key, final Version version, final MetastoreCallback<Void> cb, final Object ctx) {\n         scheduler.submit(new Runnable() {\n@@ -197,6 +220,10 @@ public void run() {\n                 }\n                 Code code = remove(key, version);\n                 cb.complete(code.getCode(), null, ctx);\n+                \n+                if(code == MSException.Code.OK){\n+                    triggerWatch(key, MSWatchedEvent.EventType.REMOVED);\n+                }\n             }\n         });\n     }\n@@ -238,6 +265,16 @@ public void run() {\n         });\n     }\n \n+    private void triggerWatch(String key, MSWatchedEvent.EventType type) {\n+        synchronized(watcherMap){\n+            if(watcherMap.containsKey( key )) {\n+                MSWatchedEvent event = new MSWatchedEvent(key, type);\n+                watcherMap.get( key ).process( event );\n+                watcherMap.remove( key );\n+            }\n+        }\n+    }\n+    \n     private synchronized Versioned<Value> get(String key) {\n         return map.get(key);\n     }"},{"sha":"182387877f5ed058e018f9127a5d60364010b95a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+public class MSWatchedEvent {\n+    public enum EventType {CHANGED, REMOVED};\n+    \n+    String key;\n+    EventType type;\n+    \n+    public MSWatchedEvent(String key, EventType type) {\n+        this.key = key;\n+        this.type = type;\n+    }\n+    \n+    public EventType getType() {\n+        return type;\n+    }\n+    \n+    public String getKey(){\n+        return key;\n+    }\n+}"},{"sha":"735931e92fc3a7a6884a393b442d5a7d0cfdc2ed","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -55,6 +55,27 @@\n      */\n     public void get(String key, MetastoreCallback<Versioned<Value>> cb, Object ctx);\n \n+    /**\n+     * Get all fields of a key.\n+     *\n+     * <p>\n+     * Return Code:<ul>\n+     * <li>{@link MSException.Code.OK}: success returning the key</li>\n+     * <li>{@link MSException.Code.NoKey}: no key found</li>\n+     * <li>{@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}: other issues</li>\n+     * </ul></p>\n+     *\n+     * @param key\n+     *          Key Name\n+     * @param watcher\n+     *          Watcher object to receive notifications\n+     * @param cb\n+     *          Callback to return all fields of the key\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void get(String key, MetastoreWatcher watcher, MetastoreCallback<Versioned<Value>> cb, Object ctx);\n+    \n     /**\n      * Get specified fields of a key.\n      *"},{"sha":"4c6ebc9bcee6e05b1e44978dde051cb2b84f21f8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -0,0 +1,22 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+public interface MetastoreWatcher {\n+    public void process(MSWatchedEvent e);\n+}"},{"sha":"bb194fe78efc7bb1244ef10517e3866c8a5070c7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","status":"modified","additions":76,"deletions":1,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","raw_url":"https://github.com/apache/bookkeeper/raw/3ed06c0e9246a3ac21e1340d01f1ee7be612194f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java?ref=3ed06c0e9246a3ac21e1340d01f1ee7be612194f","patch":"@@ -21,24 +21,55 @@\n package org.apache.bookkeeper.client;\n \n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.meta.FlatLedgerManagerFactory;\n+import org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.MSLedgerManagerFactory;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+import org.apache.bookkeeper.versioning.Version;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.nio.ByteBuffer;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+@RunWith(Parameterized.class)\n public class TestWatchEnsembleChange extends BookKeeperClusterTestCase {\n \n     static Logger LOG = LoggerFactory.getLogger(TestWatchEnsembleChange.class);\n \n     final DigestType digestType;\n+    final Class<? extends LedgerManagerFactory> lmFactoryCls;\n \n-    public TestWatchEnsembleChange() {\n+    public TestWatchEnsembleChange(Class<? extends LedgerManagerFactory> lmFactoryCls) {\n         super(7);\n         this.digestType = DigestType.CRC32;\n+        this.lmFactoryCls = lmFactoryCls;\n+        baseClientConf.setLedgerManagerFactoryClass(lmFactoryCls);\n+        baseConf.setLedgerManagerFactoryClass(lmFactoryCls);\n+    }\n+\n+    @Parameters\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][] {\n+                { FlatLedgerManagerFactory.class },\n+                { HierarchicalLedgerManagerFactory.class },\n+                { MSLedgerManagerFactory.class }\n+        });\n     }\n \n     @Test(timeout = 60000)\n@@ -68,4 +99,48 @@ public void testWatchEnsembleChange() throws Exception {\n         readLh.close();\n         lh.close();\n     }\n+    \n+    @Test(timeout = 60000)\n+    public void testWatchMetadataRemoval() throws Exception {\n+       LedgerManagerFactory factory = ReflectionUtils.newInstance(lmFactoryCls);\n+       factory.initialize(baseConf, super.zkc, factory.getCurrentVersion());\n+       LedgerManager manager = factory.newLedgerManager();\n+       final ByteBuffer bbLedgerId = ByteBuffer.allocate(8);\n+       final CountDownLatch createLatch = new CountDownLatch(1);\n+       final CountDownLatch removeLatch = new CountDownLatch(1);\n+       \n+       manager.createLedger( new LedgerMetadata(4, 2, 2, digestType, \"fpj was here\".getBytes()), \n+                new BookkeeperInternalCallbacks.GenericCallback<Long>(){\n+          \n+           @Override\n+           public void operationComplete(int rc, Long result) {\n+               bbLedgerId.putLong(result);\n+               bbLedgerId.flip();\n+               createLatch.countDown();\n+           }\n+       }); \n+       assertTrue(createLatch.await(2000, TimeUnit.MILLISECONDS));\n+       final long createdLid = bbLedgerId.getLong();\n+       \n+       manager.registerLedgerMetadataListener( createdLid, \n+               new LedgerMetadataListener() {\n+\n+           @Override\n+           public void onChanged( long ledgerId, LedgerMetadata metadata ) {\n+               assertEquals(ledgerId, createdLid);\n+               assertEquals(metadata, null);\n+               removeLatch.countDown();\n+           }   \n+       });\n+       \n+       manager.removeLedgerMetadata( createdLid, Version.ANY,\n+               new BookkeeperInternalCallbacks.GenericCallback<Void>() {\n+           \n+           @Override\n+           public void operationComplete(int rc, Void result) {\n+               assertEquals(rc, BKException.Code.OK);\n+           }\n+       });\n+       assertTrue(removeLatch.await(2000, TimeUnit.MILLISECONDS));\n+    }\n }"}]}

