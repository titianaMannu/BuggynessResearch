{"sha":"4049d4c2b115f81008ef7a3920fd9153ced2f53c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MDQ5ZDRjMmIxMTVmODEwMDhlZjdhMzkyMGZkOTE1M2NlZDJmNTNj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-18T10:18:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-18T10:18:05Z"},"message":"BOOKKEEPER-108: add configuration support for BK (Sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1203568 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3857be4833cbc3c4535aae006cf1b464af97004c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3857be4833cbc3c4535aae006cf1b464af97004c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4049d4c2b115f81008ef7a3920fd9153ced2f53c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4049d4c2b115f81008ef7a3920fd9153ced2f53c","html_url":"https://github.com/apache/bookkeeper/commit/4049d4c2b115f81008ef7a3920fd9153ced2f53c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4049d4c2b115f81008ef7a3920fd9153ced2f53c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e14618559769b7f3fa68360a4571a84392e162e3","url":"https://api.github.com/repos/apache/bookkeeper/commits/e14618559769b7f3fa68360a4571a84392e162e3","html_url":"https://github.com/apache/bookkeeper/commit/e14618559769b7f3fa68360a4571a84392e162e3"}],"stats":{"total":1641,"additions":1393,"deletions":248},"files":[{"sha":"59e826b89d442e4685a93ed5a16105ab2e8b6b1e","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -74,6 +74,8 @@ BUGFIXES:\n \n   BOOKKEEPER-91: Bookkeeper and hedwig clients should not use log4j directly (ivank via fpj)\n \n+  BOOKKEEPER-108: add configuration support for BK (Sijie via ivank)\n+\n  hedwig-server/\n \n   BOOKKEEPER-43: NullPointException when releasing topic (Sijie Guo via breed)"},{"sha":"b698b3ca342fa87a72a140ef6c228daa7767ac26","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":6,"deletions":24,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -23,10 +23,7 @@\n BINDIR=`dirname \"$0\"`\n BK_HOME=`cd $BINDIR/..;pwd`\n \n-DEFAULT_ZOOKEEPER=localhost:2181\n-DEFAULT_PORT=3181\n-DEFAULT_TXN_DIR=/tmp/bk-txn\n-DEFAULT_DATA_DIR=/tmp/bk-data\n+DEFAULT_CONF=$BK_HOME/conf/bk_server.conf\n \n source $BK_HOME/conf/bkenv.sh\n \n@@ -55,11 +52,8 @@ where command is one of:\n or command is the full name of a class with a defined main() method.\n \n Environment variables:\n-   BOOKIE_ZOOKEEPER       Zookeeper ensemble (default: $DEFAULT_ZOOKEEPER)\n-   BOOKIE_PORT            Port to listen on (default: $DEFAULT_PORT)\n-   BOOKIE_TXN_LOGDIR      Directory for transaction logs (default: $DEFAULT_TXN_DIR)\n-   BOOKIE_DATA_DIR        Directory for data (default: $DEFAULT_DATA_DIR)\n    BOOKIE_LOG_CONF        Log4j configuration file\n+   BOOKIE_CONF            Configuration file (default: conf/bk_server.conf)\n    BOOKIE_EXTRA_OPTS      Extra options to be passed to the jvm\n \n These variable can also be set in conf/bkenv.sh\n@@ -101,20 +95,8 @@ fi\n COMMAND=$1\n shift\n \n-if [ \"$BOOKIE_ZOOKEEPER\" == \"\" ]; then\n-    BOOKIE_ZOOKEEPER=$DEFAULT_ZOOKEEPER\n-fi\n-\n-if [ \"$BOOKIE_PORT\" == \"\" ]; then\n-    BOOKIE_PORT=$DEFAULT_PORT\n-fi\n-\n-if [ \"$BOOKIE_TXN_LOGDIR\" == \"\" ]; then\n-    BOOKIE_TXN_LOGDIR=$DEFAULT_TXN_DIR\n-fi\n-\n-if [ \"$BOOKIE_DATA_DIR\" == \"\" ]; then\n-    BOOKIE_DATA_DIR=$DEFAULT_DATA_DIR\n+if [ \"$BOOKIE_CONF\" == \"\" ]; then\n+    BOOKIE_CONF=$DEFAULT_CONF\n fi\n \n BOOKIE_CLASSPATH=\"$BOOKIE_JAR:$BOOKIE_CLASSPATH\"\n@@ -127,11 +109,11 @@ OPTS=\"-cp $BOOKIE_CLASSPATH $OPTS $BOOKIE_EXTRA_OPTS\"\n OPTS=\"$OPTS $BOOKIE_EXTRA_OPTS\"\n \n if [ $COMMAND == \"bookie\" ]; then\n-    exec java $OPTS org.apache.bookkeeper.proto.BookieServer $BOOKIE_PORT $BOOKIE_ZOOKEEPER $BOOKIE_TXN_LOGDIR $BOOKIE_DATA_DIR $@\n+    exec java $OPTS org.apache.bookkeeper.proto.BookieServer --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"localbookie\" ]; then\n     NUMBER=$1\n     shift\n-    exec java $OPTS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $@\n+    exec java $OPTS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $BOOKIE_CONF $@\n elif [ $COMMAND == \"help\" ]; then\n     bookkeeper_help;\n else"},{"sha":"75337ac8e20d852bce23fd241a9c6a79cf836db2","filename":"bookkeeper-server/conf/bk_server.conf","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/conf/bk_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/conf/bk_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bk_server.conf?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -0,0 +1,124 @@\n+#!/bin/sh\n+#\n+#/**\n+# * Copyright 2007 The Apache Software Foundation\n+# *\n+# * Licensed to the Apache Software Foundation (ASF) under one\n+# * or more contributor license agreements.  See the NOTICE file\n+# * distributed with this work for additional information\n+# * regarding copyright ownership.  The ASF licenses this file\n+# * to you under the Apache License, Version 2.0 (the\n+# * \"License\"); you may not use this file except in compliance\n+# * with the License.  You may obtain a copy of the License at\n+# *\n+# *     http://www.apache.org/licenses/LICENSE-2.0\n+# *\n+# * Unless required by applicable law or agreed to in writing, software\n+# * distributed under the License is distributed on an \"AS IS\" BASIS,\n+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# * See the License for the specific language governing permissions and\n+# * limitations under the License.\n+# */\n+\n+## Bookie settings\n+\n+# Port that bookie server listen on\n+bookie_port=3181\n+\n+# Directory Bookkeeper outputs its write ahead log\n+journal_dir=/tmp/bk-txn\n+\n+# Directory Bookkeeper outputs ledger snapshots\n+# could define multi directories to store snapshots, separated by ','\n+# For example:\n+# ledger_dirs=/tmp/bk1-data,/tmp/bk2-data\n+# \n+# Ideally ledger dirs and journal dir are each in a differet device,\n+# which reduce the contention between random i/o and sequential write.\n+# It is possible to run with a single disk, but performance will be significantly lower.\n+ledger_dirs=/tmp/bk-data\n+\n+# Max file size of entry logger, in bytes\n+# A new entry log file will be created when the old one reaches the file size limitation\n+# logSizeLimit=2147483648\n+\n+# Max file size of journal file, in mega bytes\n+# A new journal file will be created when the old one reaches the file size limitation\n+# journal_max_size_mb=2048\n+\n+# Max number of old journal file to kept\n+# Keep a number of old journal files would help data recovery in specia case\n+# journal_max_backups=5\n+\n+# How long the interval to trigger next garbage collection, in milliseconds\n+# Since garbage collection is running in background, too frequent gc\n+# will heart performance. It is better to give a higher number of gc\n+# interval if there is enough disk capacity.\n+# gcWaitTime=1000\n+\n+# How long the interval to flush ledger index pages to disk, in milliseconds\n+# Flushing index files will introduce much random disk I/O.\n+# If separating journal dir and ledger dirs each on different devices,\n+# flushing would not affect performance. But if putting journal dir\n+# and ledger dirs on same device, performance degrade significantly\n+# on too frequent flushing. You can consider increment flush interval\n+# to get better performance, but you need to pay more time on bookie\n+# server restart after failure.\n+# flush_interval=100\n+\n+# Interval to watch whether bookie is dead or not, in milliseconds\n+# bookie_death_watch_interval=1000\n+\n+## zookeeper client settings\n+\n+# A list of one of more servers on which zookeeper is running.\n+# The server list can be comma separated values, for example:\n+# zkServers=zk1:2181,zk2:2181,zk3:2181\n+zkServers=localhost:2181\n+# ZooKeeper client session timeout in milliseconds\n+# Bookie server will exit if it received SESSION_EXPIRED because it\n+# was partitioned off from ZooKeeper for more than the session timeout\n+# JVM garbage collection, disk I/O will cause SESSION_EXPIRED.\n+# Increment this value could help avoiding this issue\n+zkTimeout=10000\n+\n+## NIO Server settings\n+\n+# This settings is used to enabled/disabled Nagle's algorithm, which is a means of\n+# improving the efficiency of TCP/IP networks by reducing the number of packets\n+# that need to be sent over the network.\n+# If you are sending many small messages, such that more than one can fit in\n+# a single IP packet, setting server.tcpnodelay to false to enable Nagle algorithm\n+# can provide better performance.\n+# Default value is true.\n+# server.tcpnodelay=true\n+\n+## ledger cache settings\n+\n+# Max number of ledger index files could be opened in bookie server\n+# If number of ledger index files reaches this limitation, bookie\n+# server started to swap some ledgers from memory to disk.\n+# Too frequent swap will affect performance. You can tune this number\n+# to gain performance according your requirements.\n+# openFileLimit=900\n+\n+# Size of a index page in ledger cache, in bytes\n+# A larger index page can improve performance writing page to disk,\n+# which is efficent when you have small number of ledgers and these\n+# ledgers have similar number of entries.\n+# If you have large number of ledgers and each ledger has fewer entries,\n+# smaller index page would improve memory usage.\n+# pageSize=8192\n+\n+# How many index pages provided in ledger cache\n+# If number of index pages reaches this limitation, bookie server\n+# starts to swap some ledgers from memory to disk. You can increment\n+# this value when you found swap became more frequent. But make sure\n+# pageLimit*pageSize should not more than JVM max memory limitation,\n+# otherwise you would got OutOfMemoryException.\n+# In general, incrementing pageLimit, using smaller index page would\n+# gain bettern performance in lager number of ledgers with fewer entries case\n+# If pageLimit is -1, bookie server will use 1/3 of JVM memory to compute\n+# the limitation of number of index pages.\n+# pageLimit=-1\n+"},{"sha":"8273819af3e09739b2b671f291f9ebbb5cd842a9","filename":"bookkeeper-server/conf/bkenv.sh","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/conf/bkenv.sh","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/conf/bkenv.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bkenv.sh?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -22,14 +22,5 @@\n \n # default settings for starting bookkeeper\n \n-# Zookeeper ensemble for bookkeeper to use\n-#BOOKIE_ZOOKEEPER=\n-\n-# Port for bookie to listen on\n-#BOOKIE_PORT=\n-\n-# Directory Bookkeeper outputs its write ahead log\n-#BOOKIE_TXN_LOGDIR=\n-\n-# Directory Bookkeeper outputs ledger snapshots\n-#BOOKIE_DATA_DIR=\n+# Configuration file of settings used in bookie server\n+# BOOKIE_CONF="},{"sha":"fb6e02ab931ae30172d9f93944068801645a4c80","filename":"bookkeeper-server/pom.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -50,6 +50,16 @@\n       <version>3.2.4.Final</version>\n       <scope>compile</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>commons-configuration</groupId>\n+      <artifactId>commons-configuration</artifactId>\n+      <version>1.6</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>commons-cli</groupId>\n+      <artifactId>commons-cli</artifactId>\n+      <version>1.2</version>\n+    </dependency>\n     <!--\n \tAnnoying dependency we need to include because\n \tzookeeper uses log4j and so we transatively do, but"},{"sha":"9999db3384e1edbab6d07702a981e556c7897900","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":31,"deletions":17,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -44,6 +44,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.slf4j.Logger;\n@@ -66,14 +67,18 @@\n     static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n     final static long MB = 1024 * 1024L;\n     // max journal file size\n-    final static long MAX_JOURNAL_SIZE = Long.getLong(\"journal_max_size_mb\", 2 * 1024) * MB;\n+    final long maxJournalSize;\n     // number journal files kept before marked journal\n-    final static int MAX_BACKUP_JOURNALS = Integer.getInteger(\"journal_max_backups\", 5);\n+    final int maxBackupJournals;\n \n     final File journalDirectory;\n \n     final File ledgerDirectories[];\n \n+    final ServerConfiguration conf;\n+\n+    final SyncThread syncThread;\n+\n     /**\n      * Current directory layout version. Increment this \n      * when you make a change to the format of any of the files in \n@@ -82,7 +87,6 @@\n     static final int CURRENT_DIRECTORY_LAYOUT_VERSION = 1;\n     static final String VERSION_FILENAME = \"VERSION\";\n     \n-\n     // ZK registration path for this bookie\n     static final String BOOKIE_REGISTRATION_PATH = \"/ledgers/available/\";\n \n@@ -149,9 +153,13 @@ public long getEntry() {\n         // flag to ensure sync thread will not be interrupted during flush\n         final AtomicBoolean flushing = new AtomicBoolean(false);\n         // make flush interval as a parameter\n-        final int flushInterval = Integer.getInteger(\"flush_interval\", 100);\n-        public SyncThread() {\n+        final int flushInterval;\n+        public SyncThread(ServerConfiguration conf) {\n             super(\"SyncThread\");\n+            flushInterval = conf.getFlushInterval();\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Flush Interval : \" + flushInterval);\n+            }\n         }\n         @Override\n         public void run() {\n@@ -204,8 +212,8 @@ public boolean accept(long journalId) {\n                 });\n \n                 // keep MAX_BACKUP_JOURNALS journal files before marked journal\n-                if (logs.size() >= MAX_BACKUP_JOURNALS) {\n-                    int maxIdx = logs.size() - MAX_BACKUP_JOURNALS;\n+                if (logs.size() >= maxBackupJournals) {\n+                    int maxIdx = logs.size() - maxBackupJournals;\n                     for (int i=0; i<maxIdx; i++) {\n                         long id = logs.get(i);\n                         // make sure the journal id is smaller than marked journal id\n@@ -233,18 +241,24 @@ void shutdown() throws InterruptedException {\n             this.join();\n         }\n     }\n-    SyncThread syncThread = new SyncThread();\n \n-    public Bookie(int port, String zkServers, File journalDirectory, File ledgerDirectories[]) throws IOException {\n+    public Bookie(ServerConfiguration conf) throws IOException {\n+        this.journalDirectory = conf.getJournalDir();\n+        this.ledgerDirectories = conf.getLedgerDirs();\n+        this.conf = conf;\n+\n         checkDirectoryLayoutVersion(journalDirectory);\n         for (File dir : ledgerDirectories) {\n             checkDirectoryLayoutVersion(dir);\n         }\n \n-        this.journalDirectory = journalDirectory;\n-        this.ledgerDirectories = ledgerDirectories;\n-        entryLogger = new EntryLogger(ledgerDirectories, this);\n-        ledgerCache = new LedgerCache(ledgerDirectories);\n+        this.maxJournalSize = conf.getMaxJournalSize() * MB;\n+        this.maxBackupJournals = conf.getMaxBackupJournals();\n+\n+        syncThread = new SyncThread(conf);\n+        entryLogger = new EntryLogger(conf, this);\n+        ledgerCache = new LedgerCache(conf);\n+    \n         lastLogMark.readLog();\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Last Log Mark : \" + lastLogMark);\n@@ -318,7 +332,7 @@ public boolean accept(long journalId) {\n                 }\n             }\n         }\n-        instantiateZookeeperClient(port, zkServers);\n+        instantiateZookeeperClient(conf.getBookiePort(), conf.getZkServers());\n         setDaemon(true);\n         LOG.debug(\"I'm starting a bookie with journal directory \" + journalDirectory.getName());\n         start();\n@@ -372,7 +386,7 @@ private void instantiateZookeeperClient(int port, String zkServers) throws IOExc\n             isZkExpired = false;\n             return;\n         }\n-        int zkTimeout = Integer.getInteger(\"zkTimeout\", 10000);\n+        int zkTimeout = conf.getZkTimeout();\n         // Create the ZooKeeper client instance\n         zk = newZookeeper(zkServers, zkTimeout);\n         // Create the ZK ephemeral node for this Bookie.\n@@ -771,7 +785,7 @@ public void run() {\n                             toFlush.clear();\n \n                             // check whether journal file is over file limit\n-                            if (bc.position() > MAX_JOURNAL_SIZE) {\n+                            if (bc.position() > maxJournalSize) {\n                                 logFile.close();\n                                 logFile = null;\n                                 continue;\n@@ -971,7 +985,7 @@ synchronized public void waitZero() throws InterruptedException {\n      */\n     public static void main(String[] args) throws IOException,\n         InterruptedException, BookieException {\n-        Bookie b = new Bookie(5000, null, new File(\"/tmp\"), new File[] { new File(\"/tmp\") });\n+        Bookie b = new Bookie(new ServerConfiguration());\n         CounterCallback cb = new CounterCallback();\n         long start = System.currentTimeMillis();\n         for (int i = 0; i < 100000; i++) {"},{"sha":"a1898f5ba4a352c135c371b9b3b2cd4a7dbfe714","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -42,6 +42,7 @@\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n@@ -64,7 +65,7 @@\n     /**\n      * The maximum size of a entry logger file.\n      */\n-    final static long LOG_SIZE_LIMIT = Long.getLong(\"logSizeLimit\", 2 * 1024 * 1024 * 1024L);\n+    final long logSizeLimit;\n     private volatile BufferedChannel logChannel;\n     /**\n      * The 1K block at the head of the entry logger file\n@@ -87,16 +88,18 @@\n     // contain any active ledgers in them.\n     GarbageCollectorThread gcThread = new GarbageCollectorThread();\n     // This is how often we want to run the Garbage Collector Thread (in milliseconds).\n-    // This should be passed as a System property. Default it to 1000 ms (1sec).\n-    final static int gcWaitTime = Integer.getInteger(\"gcWaitTime\", 1000);\n+    final long gcWaitTime;\n \n     /**\n      * Create an EntryLogger that stores it's log files in the given\n      * directories\n      */\n-    public EntryLogger(File dirs[], Bookie bookie) throws IOException {\n-        this.dirs = dirs;\n+    public EntryLogger(ServerConfiguration conf, Bookie bookie) throws IOException {\n+        this.dirs = conf.getLedgerDirs();\n         this.bookie = bookie;\n+        // log size limit\n+        this.logSizeLimit = conf.getEntryLogSizeLimit();\n+        this.gcWaitTime = conf.getGcWaitTime();\n         // Initialize the entry log header buffer. This cannot be a static object\n         // since in our unit tests, we run multiple Bookies and thus EntryLoggers\n         // within the same JVM. All of these Bookie instances access this header\n@@ -321,7 +324,7 @@ synchronized void flush() throws IOException {\n         }\n     }\n     synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n-        if (logChannel.position() + entry.remaining() + 4 > LOG_SIZE_LIMIT) {\n+        if (logChannel.position() + entry.remaining() + 4 > logSizeLimit) {\n             openNewChannel();\n         }\n         ByteBuffer buff = ByteBuffer.allocate(4);"},{"sha":"effde483e37f85fc70404a17b77749b5a55cab83","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","status":"modified","additions":42,"deletions":26,"changes":68,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -36,6 +36,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -49,8 +51,20 @@\n \n     final File ledgerDirectories[];\n \n-    public LedgerCache(File ledgerDirectories[]) {\n-        this.ledgerDirectories = ledgerDirectories;\n+    public LedgerCache(ServerConfiguration conf) {\n+        this.ledgerDirectories = conf.getLedgerDirs();\n+        this.openFileLimit = conf.getOpenFileLimit();\n+        this.pageSize = conf.getPageSize();\n+        this.entriesPerPage = pageSize / 8;\n+        \n+        if (conf.getPageLimit() <= 0) {\n+            // allocate half of the memory to the page cache\n+            this.pageLimit = (int)((Runtime.getRuntime().maxMemory() / 3) / this.pageSize);\n+        } else {\n+            this.pageLimit = conf.getPageLimit();\n+        }\n+        LOG.info(\"maxMemory = \" + Runtime.getRuntime().maxMemory());\n+        LOG.info(\"openFileLimit is \" + openFileLimit + \", pageSize is \" + pageSize + \", pageLimit is \" + pageLimit);\n         // Retrieve all of the active ledgers.\n         getActiveLedgers();\n     }\n@@ -71,23 +85,25 @@ public LedgerCache(File ledgerDirectories[]) {\n     // Stores the set of active (non-deleted) ledgers.\n     ConcurrentMap<Long, Boolean> activeLedgers = new ConcurrentHashMap<Long, Boolean>();\n \n-    static int OPEN_FILE_LIMIT = 900;\n-    static {\n-        if (System.getProperty(\"openFileLimit\") != null) {\n-            OPEN_FILE_LIMIT = Integer.parseInt(System.getProperty(\"openFileLimit\"));\n-        }\n-        LOG.info(\"openFileLimit is \" + OPEN_FILE_LIMIT);\n+    final int openFileLimit;\n+    final int pageSize;\n+    final int pageLimit;\n+    final int entriesPerPage;\n+\n+    /**\n+     * @return page size used in ledger cache\n+     */\n+    public int getPageSize() {\n+        return pageSize;\n     }\n \n-    // allocate half of the memory to the page cache\n-    private static int pageLimit = (int)((Runtime.getRuntime().maxMemory() / 3) / LedgerEntryPage.PAGE_SIZE);\n-    static {\n-        LOG.info(\"maxMemory = \" + Runtime.getRuntime().maxMemory());\n-        if (System.getProperty(\"pageLimit\") != null) {\n-            pageLimit = Integer.parseInt(System.getProperty(\"pageLimit\"));\n-        }\n-        LOG.info(\"pageLimit is \" + pageLimit);\n+    /**\n+     * @return entries per page used in ledger cache\n+     */\n+    public int getEntriesPerPage() {\n+        return entriesPerPage;\n     }\n+\n     // The number of pages that have actually been used\n     private int pageCount = 0;\n     HashMap<Long, HashMap<Long,LedgerEntryPage>> pages = new HashMap<Long, HashMap<Long,LedgerEntryPage>>();\n@@ -124,7 +140,7 @@ synchronized private LedgerEntryPage getLedgerEntryPage(Long ledger, Long firstE\n     }\n \n     public void putEntryOffset(long ledger, long entry, long offset) throws IOException {\n-        int offsetInPage = (int) (entry%LedgerEntryPage.ENTRIES_PER_PAGES);\n+        int offsetInPage = (int) (entry % entriesPerPage);\n         // find the id of the first entry of the page that has the entry\n         // we are looking for\n         long pageEntry = entry-offsetInPage;\n@@ -145,7 +161,7 @@ public void putEntryOffset(long ledger, long entry, long offset) throws IOExcept\n     }\n \n     public long getEntryOffset(long ledger, long entry) throws IOException {\n-        int offsetInPage = (int) (entry%LedgerEntryPage.ENTRIES_PER_PAGES);\n+        int offsetInPage = (int) (entry%entriesPerPage);\n         // find the id of the first entry of the page that has the entry\n         // we are looking for\n         long pageEntry = entry-offsetInPage;\n@@ -223,7 +239,7 @@ FileInfo getFileInfo(Long ledger, boolean create) throws IOException {\n                     }\n                     activeLedgers.put(ledger, true);\n                 }\n-                if (openLedgers.size() > OPEN_FILE_LIMIT) {\n+                if (openLedgers.size() > openFileLimit) {\n                     fileInfoCache.remove(openLedgers.removeFirst()).close();\n                 }\n                 fi = new FileInfo(lf);\n@@ -313,7 +329,7 @@ public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n                     long lastOffset = -1;\n                     for(int i = 0; i < entries.size(); i++) {\n                         versions.add(i, entries.get(i).getVersion());\n-                        if (lastOffset != -1 && (entries.get(i).getFirstEntry() - lastOffset) != LedgerEntryPage.ENTRIES_PER_PAGES) {\n+                        if (lastOffset != -1 && (entries.get(i).getFirstEntry() - lastOffset) != entriesPerPage) {\n                             // send up a sequential list\n                             int count = i - start;\n                             if (count == 0) {\n@@ -383,18 +399,18 @@ private void writeBuffers(Long ledger,\n             //System.out.println(\"Wrote \" + rc + \" to \" + ledger);\n             totalWritten += rc;\n         }\n-        if (totalWritten != count*LedgerEntryPage.PAGE_SIZE) {\n-            throw new IOException(\"Short write to ledger \" + ledger + \" wrote \" + totalWritten + \" expected \" + count*LedgerEntryPage.PAGE_SIZE);\n+        if (totalWritten != count * pageSize) {\n+            throw new IOException(\"Short write to ledger \" + ledger + \" wrote \" + totalWritten + \" expected \" + count * pageSize);\n         }\n     }\n     private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOException {\n-        if (entry % LedgerEntryPage.ENTRIES_PER_PAGES != 0) {\n-            throw new IllegalArgumentException(entry + \" is not a multiple of \" + LedgerEntryPage.ENTRIES_PER_PAGES);\n+        if (entry % entriesPerPage != 0) {\n+            throw new IllegalArgumentException(entry + \" is not a multiple of \" + entriesPerPage);\n         }\n         synchronized(this) {\n             if (pageCount  < pageLimit) {\n                 // let's see if we can allocate something\n-                LedgerEntryPage lep = new LedgerEntryPage();\n+                LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n                 lep.setLedger(ledger);\n                 lep.setFirstEntry(entry);\n                 // note, this will not block since it is a new page\n@@ -451,7 +467,7 @@ public long getLastEntry(long ledgerId) {\n             Map<Long, LedgerEntryPage> map = pages.get(ledgerId);\n             if (map != null) {\n                 for(LedgerEntryPage lep: map.values()) {\n-                    if (lep.getFirstEntry() + LedgerEntryPage.ENTRIES_PER_PAGES < lastEntry) {\n+                    if (lep.getFirstEntry() + entriesPerPage < lastEntry) {\n                         continue;\n                     }\n                     lep.usePage();"},{"sha":"728d729911171bc8554c600e231fa48c2e8627bc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -113,15 +113,15 @@ ByteBuffer readEntry(long entryId) throws IOException {\n                 long size = fi.size();\n                 // we may not have the last entry in the cache\n                 if (size > lastEntry*8) {\n-                    ByteBuffer bb = ByteBuffer.allocate(LedgerEntryPage.PAGE_SIZE);\n-                    long position = size-LedgerEntryPage.PAGE_SIZE;\n+                    ByteBuffer bb = ByteBuffer.allocate(ledgerCache.getPageSize());\n+                    long position = size - ledgerCache.getPageSize();\n                     if (position < 0) {\n                         position = 0;\n                     }\n                     fi.read(bb, position);\n                     bb.flip();\n                     long startingEntryId = position/8;\n-                    for(int i = LedgerEntryPage.ENTRIES_PER_PAGES-1; i >= 0; i--) {\n+                    for(int i = ledgerCache.getEntriesPerPage()-1; i >= 0; i--) {\n                         if (bb.getLong(i*8) != 0) {\n                             if (lastEntry < startingEntryId+i) {\n                                 lastEntry = startingEntryId+i;"},{"sha":"294684a1b7cb40ea0a4819d56c0555c1fe4fea22","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","status":"modified","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -29,16 +29,22 @@\n  * (entrylogfile, offset) for entry ids.\n  */\n public class LedgerEntryPage {\n-    public static final int PAGE_SIZE = 8192;\n-    public static final int ENTRIES_PER_PAGES = PAGE_SIZE/8;\n+    private final int pageSize;\n+    private final int entriesPerPage;\n     private long ledger = -1;\n     private long firstEntry = -1;\n-    private ByteBuffer page = ByteBuffer.allocateDirect(PAGE_SIZE);\n+    private final ByteBuffer page;\n     private boolean clean = true;\n     private boolean pinned = false;\n     private int useCount;\n     private int version;\n \n+    public LedgerEntryPage(int pageSize, int entriesPerPage) {\n+        this.pageSize = pageSize;\n+        this.entriesPerPage = entriesPerPage;\n+        page = ByteBuffer.allocateDirect(pageSize);\n+    }\n+\n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n@@ -129,8 +135,8 @@ int getVersion() {\n         return version;\n     }\n     void setFirstEntry(long firstEntry) {\n-        if (firstEntry % ENTRIES_PER_PAGES != 0) {\n-            throw new IllegalArgumentException(firstEntry + \" is not a multiple of \" + ENTRIES_PER_PAGES);\n+        if (firstEntry % entriesPerPage != 0) {\n+            throw new IllegalArgumentException(firstEntry + \" is not a multiple of \" + entriesPerPage);\n         }\n         this.firstEntry = firstEntry;\n     }\n@@ -141,7 +147,7 @@ public boolean inUse() {\n         return useCount > 0;\n     }\n     public long getLastEntry() {\n-        for(int i = ENTRIES_PER_PAGES - 1; i >= 0; i--) {\n+        for(int i = entriesPerPage - 1; i >= 0; i--) {\n             if (getOffset(i*8) > 0) {\n                 return i + firstEntry;\n             }"},{"sha":"98f2a8f67a8473df3510382d872816bea4a8bf6c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":37,"deletions":6,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -26,6 +26,7 @@\n import java.util.EnumSet;\n import java.util.Set;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n@@ -77,6 +78,9 @@\n     OrderedSafeExecutor mainWorkerPool = new OrderedSafeExecutor(Runtime\n             .getRuntime().availableProcessors());\n \n+    ClientConfiguration conf;\n+\n+    \n     /**\n      * Create a bookkeeper client. A zookeeper client and a client socket factory\n      * will be instantiated as part of this constructor.\n@@ -92,7 +96,23 @@\n      */\n     public BookKeeper(String servers) throws IOException, InterruptedException,\n         KeeperException {\n-        this(new ZooKeeper(servers, 10000, new Watcher() {\n+        this(new ClientConfiguration().setZkServers(servers));\n+    }\n+\n+    /**\n+     * Create a bookkeeper client using a configuration object.\n+     * A zookeeper client and a client socket factory will be \n+     * instantiated as part of this constructor.\n+     *\n+     * @param conf\n+     *          Client Configuration object\n+     * @throws IOException\n+     * @throws InterruptedException\n+     * @throws KeeperException\n+     */\n+    public BookKeeper(ClientConfiguration conf) throws IOException, InterruptedException,\n+        KeeperException {\n+        this(conf, new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {\n             @Override\n             public void process(WatchedEvent event) {\n                 // TODO: handle session disconnects and expires\n@@ -105,20 +125,23 @@ public void process(WatchedEvent event) {\n \n         ownZKHandle = true;\n         ownChannelFactory = true;\n-    }\n+     }\n \n     /**\n      * Create a bookkeeper client but use the passed in zookeeper client instead\n      * of instantiating one.\n      *\n+     * @param conf\n+     *          Client Configuration object\n+     *          {@link ClientConfiguration}\n      * @param zk\n      *          Zookeeper client instance connected to the zookeeper with which\n      *          the bookies have registered\n      * @throws InterruptedException\n      * @throws KeeperException\n      */\n-    public BookKeeper(ZooKeeper zk) throws InterruptedException, KeeperException {\n-        this(zk, new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n+    public BookKeeper(ClientConfiguration conf, ZooKeeper zk) throws InterruptedException, KeeperException {\n+        this(conf, zk, new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                 Executors.newCachedThreadPool()));\n         ownChannelFactory = true;\n     }\n@@ -127,6 +150,9 @@ public BookKeeper(ZooKeeper zk) throws InterruptedException, KeeperException {\n      * Create a bookkeeper client but use the passed in zookeeper client and\n      * client socket channel factory instead of instantiating those.\n      *\n+     * @param conf\n+     *          Client Configuration Object\n+     *          {@link ClientConfiguration}\n      * @param zk\n      *          Zookeeper client instance connected to the zookeeper with which\n      *          the bookies have registered\n@@ -135,16 +161,17 @@ public BookKeeper(ZooKeeper zk) throws InterruptedException, KeeperException {\n      * @throws InterruptedException\n      * @throws KeeperException\n      */\n-    public BookKeeper(ZooKeeper zk, ClientSocketChannelFactory channelFactory)\n+    public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFactory channelFactory)\n             throws InterruptedException, KeeperException {\n         if (zk == null || channelFactory == null) {\n             throw new NullPointerException();\n         }\n+        this.conf = conf;\n         this.zk = zk;\n         this.channelFactory = channelFactory;\n         bookieWatcher = new BookieWatcher(this);\n         bookieWatcher.readBookiesBlocking();\n-        bookieClient = new BookieClient(channelFactory, mainWorkerPool);\n+        bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n     }\n \n     /**\n@@ -162,6 +189,10 @@ ZooKeeper getZkHandle() {\n         return zk;\n     }\n \n+    protected ClientConfiguration getConf() {\n+        return conf;\n+    }\n+\n     /**\n      * Get the BookieClient, currently used for doing bookie recovery.\n      *"},{"sha":"4f8c0ec9e2017eb8f34bddfc237e078a3c4cc9eb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":31,"deletions":4,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -36,6 +36,7 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.AsyncCallback.RecoverCallback;\n@@ -85,9 +86,10 @@\n      * can open it. These values will come from System properties, though hard\n      * coded defaults are defined here.\n      */\n-    private DigestType DIGEST_TYPE = DigestType.valueOf(System.getProperty(\"digestType\", DigestType.CRC32.toString()));\n-    private byte[] PASSWD = System.getProperty(\"passwd\", \"\").getBytes();\n+    private DigestType DIGEST_TYPE;\n+    private byte[] PASSWD;\n \n+    \n     /**\n      * Constructor that takes in a ZooKeeper servers connect string so we know\n      * how to connect to ZooKeeper to retrieve information about the BookKeeper\n@@ -108,17 +110,42 @@\n      *             BookKeeper client.\n      */\n     public BookKeeperAdmin(String zkServers) throws IOException, InterruptedException, KeeperException {\n+        this(new ClientConfiguration().setZkServers(zkServers));\n+    }\n+\n+    /**\n+     * Constructor that takes in a configuration object so we know\n+     * how to connect to ZooKeeper to retrieve information about the BookKeeper\n+     * cluster. We need this before we can do any type of admin operations on\n+     * the BookKeeper cluster.\n+     *\n+     * @param conf\n+     *           Client Configuration Object\n+     * @throws IOException\n+     *             throws this exception if there is an error instantiating the\n+     *             ZooKeeper client.\n+     * @throws InterruptedException\n+     *             Throws this exception if there is an error instantiating the\n+     *             BookKeeper client.\n+     * @throws KeeperException\n+     *             Throws this exception if there is an error instantiating the\n+     *             BookKeeper client.\n+     */\n+    public BookKeeperAdmin(ClientConfiguration conf) throws IOException, InterruptedException, KeeperException {\n         // Create the ZooKeeper client instance\n-        zk = new ZooKeeper(zkServers, 10000, new Watcher() {\n+        zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {\n             @Override\n             public void process(WatchedEvent event) {\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Process: \" + event.getType() + \" \" + event.getPath());\n                 }\n             }\n         });\n+\n         // Create the BookKeeper client instance\n-        bkc = new BookKeeper(zk);\n+        bkc = new BookKeeper(conf);\n+        DIGEST_TYPE = conf.getBookieRecoveryDigestType();\n+        PASSWD = conf.getBookieRecoveryPasswd();\n     }\n \n     /**"},{"sha":"276b8f40fafc072bb22c9b0e49bea772aec2b801","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -147,7 +147,7 @@ public void processResult(int rc, String path, Object ctx, String name) {\n             cb.createComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);\n             return;\n         } catch (NumberFormatException e) {\n-            LOG.error(\"Incorrectly entered parameter throttle: \" + System.getProperty(\"throttle\"), e);\n+            LOG.error(\"Incorrectly entered parameter throttle: \" + bk.getConf().getThrottleValue(), e);\n             cb.createComplete(BKException.Code.IncorrectParameterException, null, this.ctx);\n             return;\n         }"},{"sha":"8ffcf4e2871aa2065d367a4abee735cc6f9421f8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -29,6 +29,7 @@\n import java.util.Queue;\n import java.util.concurrent.Semaphore;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n@@ -69,7 +70,7 @@\n     final DistributionSchedule distributionSchedule;\n \n     final Semaphore opCounterSem;\n-    private Integer throttling = 5000;\n+    private final Integer throttling;\n \n     final Queue<PendingAddOp> pendingAddOps = new ArrayDeque<PendingAddOp>();\n \n@@ -89,10 +90,7 @@\n \n         this.ledgerId = ledgerId;\n \n-        String throttleValue = System.getProperty(\"throttle\");\n-        if(throttleValue != null) {\n-            this.throttling = new Integer(throttleValue);\n-        }\n+        this.throttling = bk.getConf().getThrottleValue();\n         this.opCounterSem = new Semaphore(throttling);\n \n         macManager = DigestManager.instantiate(ledgerId, password, digestType);"},{"sha":"5ba4040de7820ebd42f300d97a4aea0847b7cd4c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -127,7 +127,7 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n             cb.openComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);\n             return;\n         } catch (NumberFormatException e) {\n-            LOG.error(\"Incorrectly entered parameter throttle: \" + System.getProperty(\"throttle\"), e);\n+            LOG.error(\"Incorrectly entered parameter throttle: \" + bk.getConf().getThrottleValue(), e);\n             cb.openComplete(BKException.Code.IncorrectParameterException, null, this.ctx);\n             return;\n         }"},{"sha":"48041af265756e53b0b0f63903082afbb75d5aef","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -0,0 +1,61 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.conf;\n+\n+import java.net.URL;\n+\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.configuration.SystemConfiguration;\n+\n+/**\n+ * Abstract configuration\n+ */\n+public abstract class AbstractConfiguration extends CompositeConfiguration { \n+\n+    protected AbstractConfiguration() {\n+        super();\n+        // add configuration for system properties\n+        addConfiguration(new SystemConfiguration());\n+    }\n+\n+    /**\n+     * You can load configurations in precedence order. The first one takes\n+     * precedence over any loaded later.\n+     *\n+     * @param confURL\n+     *          Configuration URL\n+     */\n+    public void loadConf(URL confURL) throws ConfigurationException {\n+        Configuration loadedConf = new PropertiesConfiguration(confURL);\n+        addConfiguration(loadedConf);\n+    }\n+\n+    /**\n+     * You can load configuration from other configuration\n+     *\n+     * @param baseConf\n+     *          Other Configuration\n+     */\n+    public void loadConf(AbstractConfiguration baseConf) {\n+        addConfiguration(baseConf); \n+    }\n+\n+}"},{"sha":"cde67be4217ebb762f6c07afab29deac006818dc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"added","additions":216,"deletions":0,"changes":216,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -0,0 +1,216 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.conf;\n+\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+\n+/**\n+ * Configuration settings for client side\n+ */\n+public class ClientConfiguration extends AbstractConfiguration {\n+\n+    // Zookeeper Parameters\n+    protected final static String ZK_TIMEOUT = \"zkTimeout\";\n+    protected final static String ZK_SERVERS = \"zkServers\";\n+\n+    // Throttle value\n+    protected final static String THROTTLE = \"throttle\";\n+\n+    // Digest Type\n+    protected final static String DIGEST_TYPE = \"digestType\";\n+    // Passwd\n+    protected final static String PASSWD = \"passwd\";\n+\n+    // NIO Parameters\n+    protected final static String CLIENT_TCP_NODELAY = \"client.tcpnodelay\";\n+\n+    /**\n+     * Construct a default client-side configuration\n+     */\n+    public ClientConfiguration() {\n+        super();\n+    }\n+\n+    /**\n+     * Construct a client-side configuration using a base configuration\n+     *\n+     * @param conf\n+     *          Base configuration\n+     */\n+    public ClientConfiguration(AbstractConfiguration conf) {\n+        super();\n+        loadConf(conf);\n+    }\n+\n+    /**\n+     * Get throttle value\n+     *\n+     * @return throttle value\n+     * @see #setThrottleValue\n+     */\n+    public int getThrottleValue() {\n+        return this.getInt(THROTTLE, 5000);\n+    }\n+\n+    /**\n+     * Set throttle value.\n+     *\n+     * Since BookKeeper process requests in asynchrous way, it will holds \n+     * those pending request in queue. You may easily run it out of memory\n+     * if producing too many requests than the capability of bookie servers can handle.\n+     * To prevent that from happeding, you can set a throttle value here.\n+     *\n+     * @param throttle\n+     *          Throttle Value\n+     * @return client configuration\n+     */\n+    public ClientConfiguration setThrottleValue(int throttle) {\n+        this.addProperty(THROTTLE, Integer.toString(throttle));\n+        return this;\n+    }\n+\n+    /**\n+     * Get digest type used in bookkeeper admin\n+     *\n+     * @return digest type\n+     * @see #setBookieRecoveryDigestType\n+     */\n+    public DigestType getBookieRecoveryDigestType() {\n+        return DigestType.valueOf(this.getString(DIGEST_TYPE, DigestType.CRC32.toString()));\n+    }\n+\n+    /**\n+     * Set digest type used in bookkeeper admin.\n+     *\n+     * Digest Type and Passwd used to open ledgers for admin tool\n+     * For now, assume that all ledgers were created with the same DigestType\n+     * and password. In the future, this admin tool will need to know for each\n+     * ledger, what was the DigestType and password used to create it before it\n+     * can open it. These values will come from System properties, though fixed\n+     * defaults are defined here.\n+     *\n+     * @param digestType\n+     *          Digest Type\n+     * @return client configuration\n+     */\n+    public ClientConfiguration setBookieRecoveryDigestType(DigestType digestType) {\n+        this.addProperty(DIGEST_TYPE, digestType.toString());\n+        return this;\n+    }\n+\n+    /**\n+     * Get passwd used in bookkeeper admin\n+     *\n+     * @return password\n+     * @see #setBookieRecoveryPasswd\n+     */\n+    public byte[] getBookieRecoveryPasswd() {\n+        return this.getString(PASSWD, \"\").getBytes();\n+    }\n+\n+    /**\n+     * Set passwd used in bookkeeper admin.\n+     *\n+     * Digest Type and Passwd used to open ledgers for admin tool\n+     * For now, assume that all ledgers were created with the same DigestType\n+     * and password. In the future, this admin tool will need to know for each\n+     * ledger, what was the DigestType and password used to create it before it\n+     * can open it. These values will come from System properties, though fixed\n+     * defaults are defined here.\n+     *\n+     * @param passwd\n+     *          Password\n+     * @return client configuration\n+     */\n+    public ClientConfiguration setBookieRecoveryPasswd(byte[] passwd) {\n+        addProperty(PASSWD, new String(passwd));\n+        return this;\n+    }\n+\n+    /**\n+     * Is tcp connection no delay.\n+     *\n+     * @return tcp socket nodelay setting\n+     * @see #setClientTcpNoDelay\n+     */\n+    public boolean getClientTcpNoDelay() {\n+        return getBoolean(CLIENT_TCP_NODELAY, true);\n+    }\n+\n+    /**\n+     * Set socket nodelay setting.\n+     *\n+     * This settings is used to enabled/disabled Nagle's algorithm, which is a means of\n+     * improving the efficiency of TCP/IP networks by reducing the number of packets\n+     * that need to be sent over the network. If you are sending many small messages, \n+     * such that more than one can fit in a single IP packet, setting client.tcpnodelay\n+     * to false to enable Nagle algorithm can provide better performance.\n+     * <br>\n+     * Default value is true.\n+     *\n+     * @param noDelay\n+     *          NoDelay setting\n+     * @return client configuration\n+     */\n+    public ClientConfiguration setClientTcpNoDelay(boolean noDelay) {\n+        addProperty(CLIENT_TCP_NODELAY, Boolean.toString(noDelay));\n+        return this;\n+    }\n+\n+    /**\n+     * Get zookeeper servers to connect\n+     *\n+     * @return zookeeper servers\n+     */\n+    public String getZkServers() {\n+        return getString(ZK_SERVERS, \"localhost\");\n+    }\n+\n+    /**\n+     * Set zookeeper servers to connect\n+     *\n+     * @param zkServers\n+     *          ZooKeeper servers to connect\n+     */\n+    public ClientConfiguration setZkServers(String zkServers) {\n+        addProperty(ZK_SERVERS, zkServers);\n+        return this;\n+    }\n+\n+    /**\n+     * Get zookeeper timeout\n+     *\n+     * @return zookeeper client timeout\n+     */\n+    public int getZkTimeout() {\n+        return getInt(ZK_TIMEOUT, 10000);\n+    }\n+\n+    /**\n+     * Set zookeeper timeout\n+     *\n+     * @param zkTimeout\n+     *          ZooKeeper client timeout\n+     * @return client configuration\n+     */\n+    public ClientConfiguration setZkTimeout(int zkTimeout) {\n+        addProperty(ZK_SERVERS, Integer.toString(zkTimeout));\n+        return this;\n+    }\n+\n+}"},{"sha":"2ae4504c1221fbe163482d16315a0cba17067f0b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"added","additions":377,"deletions":0,"changes":377,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -0,0 +1,377 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.conf;\n+\n+import java.io.File;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+/**\n+ * Configuration manages server-side settings\n+ */\n+public class ServerConfiguration extends AbstractConfiguration {\n+    // Entry Log Parameters\n+    protected final static String ENTRY_LOG_SIZE_LIMIT = \"logSizeLimit\";\n+\n+    // Gc Parameters\n+    protected final static String GC_WAIT_TIME = \"gcWaitTime\";\n+    // Sync Parameters\n+    protected final static String FLUSH_INTERVAL = \"flush_interval\";\n+    // Bookie death watch interval\n+    protected final static String DEATH_WATCH_INTERVAL = \"bookie_death_watch_interval\";\n+    // Ledger Cache Parameters\n+    protected final static String OPEN_FILE_LIMIT = \"openFileLimit\";\n+    protected final static String PAGE_LIMIT = \"pageLimit\";\n+    protected final static String PAGE_SIZE = \"pageSize\";\n+    // Journal Parameters\n+    protected final static String MAX_JOURNAL_SIZE = \"journal_max_size_mb\";\n+    protected final static String MAX_BACKUP_JOURNALS = \"journal_max_backups\";\n+    // Bookie Parameters\n+    protected final static String BOOKIE_PORT = \"bookie_port\";\n+    protected final static String JOURNAL_DIR = \"journal_dir\";\n+    protected final static String LEDGER_DIRS = \"ledger_dirs\";\n+    // NIO Parameters\n+    protected final static String SERVER_TCP_NODELAY = \"server.tcpnodelay\";\n+    // Zookeeper Parameters\n+    protected final static String ZK_TIMEOUT = \"zkTimeout\";\n+    protected final static String ZK_SERVERS = \"zkServers\";\n+\n+    // separator for ledger dir\n+    protected final static String SEP = \",\";\n+\n+    /**\n+     * Construct a default configuration object\n+     */\n+    public ServerConfiguration() {\n+        super();\n+    }\n+\n+    /**\n+     * Construct a configuration based on other configuration\n+     *\n+     * @param conf\n+     *          Other configuration\n+     */\n+    public ServerConfiguration(AbstractConfiguration conf) {\n+        super();\n+        loadConf(conf);\n+    }\n+\n+    /**\n+     * Get entry logger size limitation\n+     *\n+     * @return entry logger size limitation\n+     */\n+    public long getEntryLogSizeLimit() {\n+        return this.getLong(ENTRY_LOG_SIZE_LIMIT, 2 * 1024 * 1024 * 1024L);\n+    }\n+\n+    /**\n+     * Set entry logger size limitation\n+     *\n+     * @param logSizeLimit\n+     *          new log size limitation\n+     */\n+    public ServerConfiguration setEntryLogSizeLimit(long logSizeLimit) {\n+        this.addProperty(ENTRY_LOG_SIZE_LIMIT, Long.toString(logSizeLimit));\n+        return this;\n+    }\n+\n+    /**\n+     * Get Garbage collection wait time\n+     *\n+     * @return gc wait time\n+     */\n+    public long getGcWaitTime() {\n+        return this.getLong(GC_WAIT_TIME, 1000);\n+    }\n+\n+    /**\n+     * Set garbage collection wait time\n+     *\n+     * @param gcWaitTime\n+     *          gc wait time\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setGcWaitTime(long gcWaitTime) {\n+        this.addProperty(GC_WAIT_TIME, Long.toString(gcWaitTime));\n+        return this;\n+    }\n+\n+    /**\n+     * Get flush interval\n+     *\n+     * @return flush interval\n+     */\n+    public int getFlushInterval() {\n+        return this.getInt(FLUSH_INTERVAL, 100);\n+    }\n+\n+    /**\n+     * Set flush interval\n+     *\n+     * @param flushInterval\n+     *          Flush Interval\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setFlushInterval(int flushInterval) {\n+        this.addProperty(FLUSH_INTERVAL, Integer.toString(flushInterval));\n+        return this;\n+    }\n+\n+    /**\n+     * Get bookie death watch interval\n+     *\n+     * @return watch interval\n+     */\n+    public int getDeathWatchInterval() {\n+        return this.getInt(DEATH_WATCH_INTERVAL, 1000);\n+    }\n+\n+    /**\n+     * Get open file limit\n+     *\n+     * @return max number of files to open\n+     */\n+    public int getOpenFileLimit() {\n+        return this.getInt(OPEN_FILE_LIMIT, 900);\n+    }\n+\n+    /**\n+     * Get limitation number of index pages in ledger cache\n+     *\n+     * @return max number of index pages in ledger cache\n+     */\n+    public int getPageLimit() {\n+        return this.getInt(PAGE_LIMIT, -1);\n+    }\n+\n+    /**\n+     * Get page size\n+     *\n+     * @return page size in ledger cache\n+     */\n+    public int getPageSize() {\n+        return this.getInt(PAGE_SIZE, 8192);\n+    }\n+\n+    /**\n+     * Max journal file size\n+     *\n+     * @return max journal file size\n+     */\n+    public long getMaxJournalSize() {\n+        return this.getLong(MAX_JOURNAL_SIZE, 2 * 1024);\n+    }\n+\n+    /**\n+     * Set new max journal file size\n+     *\n+     * @param maxJournalSize\n+     *          new max journal file size\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setMaxJournalSize(long maxJournalSize) {\n+        this.addProperty(MAX_JOURNAL_SIZE, Long.toString(maxJournalSize));\n+        return this;\n+    }\n+\n+    /**\n+     * Max number of older journal files kept\n+     *\n+     * @return max number of older journal files to kept\n+     */\n+    public int getMaxBackupJournals() {\n+        return this.getInt(MAX_BACKUP_JOURNALS, 5);\n+    }\n+\n+    /**\n+     * Set max number of older journal files to kept\n+     *\n+     * @param maxBackupJournals\n+     *          Max number of older journal files\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setMaxBackupJournals(int maxBackupJournals) {\n+        this.addProperty(MAX_BACKUP_JOURNALS, Integer.toString(maxBackupJournals));\n+        return this;\n+    }\n+\n+    /**\n+     * Get bookie port that bookie server listen on\n+     *\n+     * @return bookie port\n+     */\n+    public int getBookiePort() {\n+        return this.getInt(BOOKIE_PORT, 3181);\n+    }\n+\n+    /**\n+     * Set new bookie port that bookie server listen on\n+     *\n+     * @param port\n+     *          Port to listen on\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setBookiePort(int port) {\n+        this.addProperty(BOOKIE_PORT, Integer.toString(port));\n+        return this;\n+    }\n+\n+    /**\n+     * Get dir name to store journal files\n+     *\n+     * @return journal dir name\n+     */\n+    public String getJournalDirName() {\n+        return this.getString(JOURNAL_DIR, \"/tmp/bk-txn\");\n+    }\n+\n+    /**\n+     * Set dir name to store journal files\n+     *\n+     * @param journalDir\n+     *          Dir to store journal files\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setJournalDirName(String journalDir) {\n+        this.addProperty(JOURNAL_DIR, journalDir);\n+        return this;\n+    }\n+\n+    /**\n+     * Get dir to store journal files\n+     *\n+     * @return journal dir, if no journal dir provided return null\n+     */\n+    public File getJournalDir() {\n+        String journalDirName = getJournalDirName();\n+        if (null == journalDirName) {\n+            return null;\n+        }\n+        return new File(journalDirName);\n+    }\n+\n+    /**\n+     * Get dir names to store ledger data\n+     *\n+     * @return ledger dir names, if not provided return null\n+     */\n+    public String[] getLedgerDirNames() {\n+        String ledgerDirs = this.getString(LEDGER_DIRS, \"/tmp/bk-data\");\n+        if (null == ledgerDirs) {\n+            return null;\n+        }\n+        return ledgerDirs.split(SEP);\n+    }\n+\n+    /**\n+     * Set dir names to store ledger data\n+     *\n+     * @param ledgerDirs\n+     *          Dir names to store ledger data\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setLedgerDirNames(String[] ledgerDirs) {\n+        if (null == ledgerDirs) {\n+            return this;\n+        }\n+        this.addProperty(LEDGER_DIRS, StringUtils.join(ledgerDirs, SEP));\n+        return this;\n+    }\n+\n+    /**\n+     * Get dirs that stores ledger data\n+     *\n+     * @return ledger dirs\n+     */\n+    public File[] getLedgerDirs() {\n+        String[] ledgerDirNames = getLedgerDirNames();\n+        if (null == ledgerDirNames) {\n+            return null;\n+        }\n+        File[] ledgerDirs = new File[ledgerDirNames.length];\n+        for (int i = 0; i < ledgerDirNames.length; i++) {\n+            ledgerDirs[i] = new File(ledgerDirNames[i]);\n+        }\n+        return ledgerDirs;\n+    }\n+\n+    /**\n+     * Is tcp connection no delay.\n+     *\n+     * @return tcp socket nodelay setting\n+     */\n+    public boolean getServerTcpNoDelay() {\n+        return getBoolean(SERVER_TCP_NODELAY, true);\n+    }\n+\n+    /**\n+     * Set socket nodelay setting\n+     *\n+     * @param noDelay\n+     *          NoDelay setting\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setServerTcpNoDelay(boolean noDelay) {\n+        addProperty(SERVER_TCP_NODELAY, Boolean.toString(noDelay));\n+        return this;\n+    }\n+\n+    /**\n+     * Get zookeeper servers to connect\n+     *\n+     * @return zookeeper servers\n+     */\n+    public String getZkServers() {\n+        return getString(ZK_SERVERS, null);\n+    }\n+\n+    /**\n+     * Set zookeeper servers to connect\n+     *\n+     * @param zkServers\n+     *          ZooKeeper servers to connect\n+     */\n+    public ServerConfiguration setZkServers(String zkServers) {\n+        addProperty(ZK_SERVERS, zkServers);\n+        return this;\n+    }\n+\n+    /**\n+     * Get zookeeper timeout\n+     *\n+     * @return zookeeper server timeout\n+     */\n+    public int getZkTimeout() {\n+        return getInt(ZK_TIMEOUT, 10000);\n+    }\n+\n+    /**\n+     * Set zookeeper timeout\n+     *\n+     * @param zkTimeout\n+     *          ZooKeeper server timeout\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setZkTimeout(int zkTimeout) {\n+        addProperty(ZK_SERVERS, Integer.toString(zkTimeout));\n+        return this;\n+    }\n+\n+}"},{"sha":"4466ce3f02415c0a6d807b3497f3b5968d672e07","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -26,6 +26,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -52,7 +53,10 @@\n     ClientSocketChannelFactory channelFactory;\n     ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient> channels = new ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient>();\n \n-    public BookieClient(ClientSocketChannelFactory channelFactory, OrderedSafeExecutor executor) {\n+    private final ClientConfiguration conf;\n+\n+    public BookieClient(ClientConfiguration conf, ClientSocketChannelFactory channelFactory, OrderedSafeExecutor executor) {\n+        this.conf = conf;\n         this.channelFactory = channelFactory;\n         this.executor = executor;\n     }\n@@ -162,7 +166,7 @@ public void writeComplete(int rc, long ledger, long entry, InetSocketAddress add\n         ClientSocketChannelFactory channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                 .newCachedThreadPool());\n         OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n-        BookieClient bc = new BookieClient(channelFactory, executor);\n+        BookieClient bc = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n         InetSocketAddress addr = new InetSocketAddress(args[0], Integer.parseInt(args[1]));\n \n         for (int i = 0; i < 100000; i++) {"},{"sha":"e5dcad08072f8947aeddcc7e16fd10faf3770672","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":111,"deletions":21,"changes":132,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -25,13 +25,22 @@\n import java.io.IOException;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.cli.BasicParser;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.ParseException;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -40,28 +49,28 @@\n  *\n  */\n public class BookieServer implements NIOServerFactory.PacketProcessor, BookkeeperInternalCallbacks.WriteCallback {\n-    int port;\n+    final ServerConfiguration conf;\n     NIOServerFactory nioServerFactory;\n     private volatile boolean running = false;\n     Bookie bookie;\n     DeathWatcher deathWatcher;\n     static Logger LOG = LoggerFactory.getLogger(BookieServer.class);\n \n-    public BookieServer(int port, String zkServers, File journalDirectory, File ledgerDirectories[]) throws IOException {\n-        this.port = port;\n-        this.bookie = new Bookie(port, zkServers, journalDirectory, ledgerDirectories);\n+    public BookieServer(ServerConfiguration conf) throws IOException {\n+        this.conf = conf;\n+        this.bookie = new Bookie(conf);\n     }\n \n     public void start() throws IOException {\n-        nioServerFactory = new NIOServerFactory(port, this);\n+        nioServerFactory = new NIOServerFactory(conf, this);\n         running = true;\n-        deathWatcher = new DeathWatcher();\n+        deathWatcher = new DeathWatcher(conf);\n         deathWatcher.start();\n     }\n \n     public InetSocketAddress getLocalAddress() {\n         try {\n-            return new InetSocketAddress(InetAddress.getLocalHost().getHostAddress(), port);\n+            return new InetSocketAddress(InetAddress.getLocalHost().getHostAddress(), conf.getBookiePort());\n         } catch (UnknownHostException uhe) {\n             return nioServerFactory.getLocalAddress();\n         }\n@@ -106,9 +115,15 @@ public void join() throws InterruptedException {\n      * A thread to watch whether bookie & nioserver is still alive\n      */\n     class DeathWatcher extends Thread {\n+\n+        final int watchInterval;\n+\n+        DeathWatcher(ServerConfiguration conf) {\n+            watchInterval = conf.getDeathWatchInterval();\n+        }\n+\n         @Override\n         public void run() {\n-            int watchInterval = Integer.getInteger(\"bookie_death_watch_interval\", 1000);\n             while(true) {\n                 try {\n                     Thread.sleep(watchInterval);\n@@ -127,33 +142,108 @@ public void run() {\n         }\n     }\n \n+    static final Options bkOpts = new Options();\n+    static {\n+        bkOpts.addOption(\"c\", \"conf\", true, \"Configuration for Bookie Server\");\n+        bkOpts.addOption(\"h\", \"help\", false, \"Print help message\");\n+    }\n+\n+    /**\n+     * Print usage\n+     */\n+    private static void printUsage() {\n+        HelpFormatter hf = new HelpFormatter();\n+        hf.printHelp(\"BookieServer [options]\\n\\tor\\n\"\n+                   + \"BookieServer <bookie_port> <zk_servers> <journal_dir> <ledger_dir [ledger_dir]>\", bkOpts);\n+    }\n+\n+    private static void loadConfFile(ServerConfiguration conf, String confFile)\n+        throws IllegalArgumentException {\n+        try {\n+            conf.loadConf(new File(confFile).toURI().toURL());\n+        } catch (MalformedURLException e) {\n+            LOG.error(\"Could not open configuration file: \" + confFile, e);\n+            throw new IllegalArgumentException();\n+        } catch (ConfigurationException e) {\n+            LOG.error(\"Malformed configuration file: \" + confFile, e);\n+            throw new IllegalArgumentException();\n+        }\n+        LOG.info(\"Using configuration file \" + confFile);\n+    }\n+\n+    private static ServerConfiguration parseArgs(String[] args)\n+        throws IllegalArgumentException {\n+        try {\n+            BasicParser parser = new BasicParser();\n+            CommandLine cmdLine = parser.parse(bkOpts, args);\n+\n+            if (cmdLine.hasOption('h')) {\n+                throw new IllegalArgumentException();\n+            }\n+\n+            ServerConfiguration conf = new ServerConfiguration();\n+            String[] leftArgs = cmdLine.getArgs();\n+\n+            if (cmdLine.hasOption('c')) {\n+                if (null != leftArgs && leftArgs.length > 0) {\n+                    throw new IllegalArgumentException();\n+                }\n+                String confFile = cmdLine.getOptionValue(\"c\");\n+                loadConfFile(conf, confFile);\n+                return conf;\n+            }\n+\n+            if (leftArgs.length < 4) {\n+                throw new IllegalArgumentException();\n+            }\n+\n+            // command line arguments overwrite settings in configuration file\n+            conf.setBookiePort(Integer.parseInt(leftArgs[0]));\n+            conf.setZkServers(leftArgs[1]);\n+            conf.setJournalDirName(leftArgs[2]);\n+            String[] ledgerDirNames = new String[leftArgs.length - 3];\n+            System.arraycopy(leftArgs, 3, ledgerDirNames, 0, ledgerDirNames.length);\n+            conf.setLedgerDirNames(ledgerDirNames);\n+\n+            return conf;\n+        } catch (ParseException e) {\n+            LOG.error(\"Error parsing command line arguments : \", e);\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n     /**\n      * @param args\n      * @throws IOException\n      * @throws InterruptedException\n      */\n-    public static void main(String[] args) throws IOException, InterruptedException {\n-        if (args.length < 4) {\n-            System.err.println(\"USAGE: BookieServer port zkServers journalDirectory ledgerDirectory [ledgerDirectory]*\");\n-            return;\n+    public static void main(String[] args) throws IOException, InterruptedException,\n+                                                  IllegalArgumentException {\n+        ServerConfiguration conf = null;\n+        try {\n+            conf = parseArgs(args);\n+        } catch (IllegalArgumentException iae) {\n+            LOG.error(\"Error parsing command line arguments : \", iae);\n+            System.err.println(iae.getMessage());\n+            printUsage();\n+            throw iae;\n         }\n-        int port = Integer.parseInt(args[0]);\n-        String zkServers = args[1];\n-        File journalDirectory = new File(args[2]);\n-        File ledgerDirectory[] = new File[args.length - 3];\n+\n         StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < ledgerDirectory.length; i++) {\n-            ledgerDirectory[i] = new File(args[i + 3]);\n+        String[] ledgerDirNames = conf.getLedgerDirNames();\n+        for (int i = 0; i < ledgerDirNames.length; i++) {\n             if (i != 0) {\n                 sb.append(',');\n             }\n-            sb.append(ledgerDirectory[i]);\n+            sb.append(ledgerDirNames[i]);\n         }\n+\n         String hello = String.format(\n                            \"Hello, I'm your bookie, listening on port %1$s. ZKServers are on %2$s. Journals are in %3$s. Ledgers are stored in %4$s.\",\n-                           port, zkServers, journalDirectory, sb);\n+                           conf.getBookiePort(), conf.getZkServers(),\n+                           conf.getJournalDirName(), sb);\n         LOG.info(hello);\n-        BookieServer bs = new BookieServer(port, zkServers, journalDirectory, ledgerDirectory);\n+        BookieServer bs = new BookieServer(conf);\n         bs.start();\n         bs.join();\n     }"},{"sha":"2a8df38b99bc15d7fe321e8c0e623f58e9d45296","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -34,6 +34,8 @@\n import java.util.Set;\n import java.util.concurrent.LinkedBlockingQueue;\n \n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -70,12 +72,15 @@\n \n     long minLatency = 99999999;\n \n-    public NIOServerFactory(int port, PacketProcessor processor) throws IOException {\n+    ServerConfiguration conf;\n+\n+    public NIOServerFactory(ServerConfiguration conf, PacketProcessor processor) throws IOException {\n         super(\"NIOServerFactory\");\n         setDaemon(true);\n         this.processor = processor;\n+        this.conf = conf;\n         this.ss = ServerSocketChannel.open();\n-        ss.socket().bind(new InetSocketAddress(port));\n+        ss.socket().bind(new InetSocketAddress(conf.getBookiePort()));\n         ss.configureBlocking(false);\n         ss.register(selector, SelectionKey.OP_ACCEPT);\n         start();\n@@ -352,11 +357,7 @@ public int getSessionTimeout() {\n         public Cnxn(SocketChannel sock, SelectionKey sk) throws IOException {\n             this.sock = sock;\n             this.sk = sk;\n-            if (System.getProperty(\"server.tcpnodelay\", \"true\").equals(\"true\")) {\n-                sock.socket().setTcpNoDelay(true);\n-            } else {\n-                sock.socket().setTcpNoDelay(false);\n-            }\n+            sock.socket().setTcpNoDelay(conf.getServerTcpNoDelay());\n             sock.socket().setSoLinger(true, 2);\n             sk.interestOps(SelectionKey.OP_READ);\n             if (LOG.isTraceEnabled()) {"},{"sha":"2fa79bbcf2e272fdccab18d7525f42062d9440e2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -26,6 +26,7 @@\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n@@ -91,9 +92,16 @@\n             };\n \n     private ConnectionState state;\n-            \n+    private final ClientConfiguration conf;\n+\n     public PerChannelBookieClient(OrderedSafeExecutor executor, ClientSocketChannelFactory channelFactory,\n                                   InetSocketAddress addr, AtomicLong totalBytesOutstanding) {\n+        this(new ClientConfiguration(), executor, channelFactory, addr, totalBytesOutstanding);\n+    }\n+            \n+    public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor executor, ClientSocketChannelFactory channelFactory,\n+                                  InetSocketAddress addr, AtomicLong totalBytesOutstanding) {\n+        this.conf = conf;\n         this.addr = addr;\n         this.executor = executor;\n         this.totalBytesOutstanding = totalBytesOutstanding;\n@@ -115,11 +123,7 @@ synchronized private void connect() {\n         // to the bookie.\n         ClientBootstrap bootstrap = new ClientBootstrap(channelFactory);\n         bootstrap.setPipelineFactory(this);\n-        if (System.getProperty(\"server.tcpnodelay\", \"true\").equals(\"true\")) {\n-            bootstrap.setOption(\"tcpNoDelay\", true);\n-        } else {\n-            bootstrap.setOption(\"tcpNoDelay\", false);\n-        }\n+        bootstrap.setOption(\"tcpNoDelay\", conf.getClientTcpNoDelay());\n         bootstrap.setOption(\"keepAlive\", true);\n \n         ChannelFuture future = bootstrap.connect(addr);"},{"sha":"acfdb227974d6b46d1b8d6e878da56c4cf482ad2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":27,"deletions":4,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -27,6 +27,7 @@\n import java.net.InetSocketAddress;\n import java.net.Socket;\n \n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -71,6 +72,7 @@ public LocalBookKeeper(int numberOfBookies) {\n     //BookKeeper variables\n     File tmpDirs[];\n     BookieServer bs[];\n+    ServerConfiguration bsConfs[];\n     Integer initialPort = 5000;\n \n     /**\n@@ -120,20 +122,28 @@ private void initializeZookeper() {\n             LOG.error(\"Exception while creating znodes\", e);\n         }\n     }\n-    private void runBookies() throws IOException {\n+    private void runBookies(ServerConfiguration baseConf) throws IOException {\n         LOG.info(\"Starting Bookie(s)\");\n         // Create Bookie Servers (B1, B2, B3)\n \n         tmpDirs = new File[numberOfBookies];\n         bs = new BookieServer[numberOfBookies];\n+        bsConfs = new ServerConfiguration[numberOfBookies];\n \n         for(int i = 0; i < numberOfBookies; i++) {\n             tmpDirs[i] = File.createTempFile(\"bookie\" + Integer.toString(i), \"test\");\n             tmpDirs[i].delete();\n             tmpDirs[i].mkdir();\n \n-            bs[i] = new BookieServer(initialPort + i, InetAddress.getLocalHost().getHostAddress() + \":\"\n-                                     + ZooKeeperDefaultPort, tmpDirs[i], new File[] {tmpDirs[i]});\n+            bsConfs[i] = new ServerConfiguration(baseConf);\n+            // override settings\n+            bsConfs[i].setBookiePort(initialPort + i);\n+            bsConfs[i].setZkServers(InetAddress.getLocalHost().getHostAddress() + \":\"\n+                                  + ZooKeeperDefaultPort);\n+            bsConfs[i].setJournalDirName(tmpDirs[i].getPath());\n+            bsConfs[i].setLedgerDirNames(new String[] { tmpDirs[i].getPath() });\n+\n+            bs[i] = new BookieServer(bsConfs[i]);\n             bs[i].start();\n         }\n     }\n@@ -144,9 +154,22 @@ public static void main(String[] args) throws IOException, InterruptedException\n             System.exit(-1);\n         }\n         LocalBookKeeper lb = new LocalBookKeeper(Integer.parseInt(args[0]));\n+\n+        ServerConfiguration conf = new ServerConfiguration();\n+        if (args.length >= 2) {\n+            String confFile = args[1];\n+            try {\n+                conf.loadConf(new File(confFile).toURI().toURL());\n+                LOG.info(\"Using configuration file \" + confFile);\n+            } catch (Exception e) {\n+                // load conf failed\n+                LOG.warn(\"Error loading configuration file \" + confFile, e);\n+            }\n+        }\n+\n         lb.runZookeeper(1000);\n         lb.initializeZookeper();\n-        lb.runBookies();\n+        lb.runBookies(conf);\n         while (true) {\n             Thread.sleep(5000);\n         }"},{"sha":"21ffcedabdba33bebc8c0c91c45f4acc93cbc38b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","status":"modified","additions":42,"deletions":28,"changes":70,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -81,8 +81,9 @@ private static File newDirectoryWithoutVersion() throws IOException {\n     public void testTooNewVersion() throws Exception {\n         // test with bad ledger dir\n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1) });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n+                new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1) }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -91,8 +92,9 @@ public void testTooNewVersion() throws Exception {\n         \n         // test with bad data dir\n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n-                    new File[] { newDirectoryWithoutVersion() });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n+                new File[] { newDirectoryWithoutVersion() }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -101,26 +103,29 @@ public void testTooNewVersion() throws Exception {\n \n         // test with both bad        \n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n-                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1) });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n+                new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1) }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n                        ioe.getMessage().contains(\"Directory has an invalid version,\"));\n         }\n \n         // test with neither bad, both with good version\n-        Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION ),\n-                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION) });\n+        Bookie b = new Bookie(newServerConfiguration(\n+            BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION ),\n+            new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION) }));\n         b.shutdown();\n     }\n \n     @Test\n     public void testTooOldVersion() throws Exception {\n         // test with bad ledger dir\n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1) });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n+                new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1) }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -129,8 +134,9 @@ public void testTooOldVersion() throws Exception {\n         \n         // test with bad data dir\n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n-                    new File[] { newDirectoryWithoutVersion() });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n+                new File[] { newDirectoryWithoutVersion() }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -139,8 +145,9 @@ public void testTooOldVersion() throws Exception {\n \n         // test with both bad        \n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n-                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1) });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n+                new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1) }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -152,12 +159,13 @@ public void testTooOldVersion() throws Exception {\n     public void testSomeOldSomeCurrent() throws Exception {\n         // test with both bad        \n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n+            Bookie b = new Bookie(newServerConfiguration(\n+                    BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n                     new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n                                  newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n                                  newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n                                  newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n-                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),});\n+                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),}));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -174,8 +182,9 @@ public void testInvalidVersionFile() throws Exception {\n         writeTextToVersionFile(junkDir2, \"JunkText2\");\n \n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                    new File[] { junkDir });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n+                new File[] { junkDir }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -184,8 +193,9 @@ public void testInvalidVersionFile() throws Exception {\n         \n         // test with bad data dir\n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, junkDir,\n-                                  new File[] { newDirectoryWithoutVersion() });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, junkDir,\n+                new File[] { newDirectoryWithoutVersion() }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -194,8 +204,9 @@ public void testInvalidVersionFile() throws Exception {\n \n         // test with both bad        \n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, junkDir,\n-                    new File[] { junkDir2 });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, junkDir,\n+                new File[] { junkDir2 }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -212,8 +223,9 @@ public void directoryIsReadOnly() throws Exception {\n         roDir2.setWritable(false);\n \n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                    new File[] { roDir });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n+                new File[] { roDir }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -222,8 +234,9 @@ public void directoryIsReadOnly() throws Exception {\n         \n         // test with bad data dir\n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, roDir,\n-                    new File[] { newDirectoryWithoutVersion() });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, roDir,\n+                new File[] { newDirectoryWithoutVersion() }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -232,8 +245,9 @@ public void directoryIsReadOnly() throws Exception {\n \n         // test with both bad        \n         try {\n-            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, roDir,\n-                    new File[] { roDir2 });\n+            Bookie b = new Bookie(newServerConfiguration(\n+                BOOKIE_PORT, HOSTPORT, roDir,\n+                new File[] { roDir2 }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", "},{"sha":"b394dc2625267e13c37e4662dcce0e21807ba361","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -24,6 +24,7 @@\n import java.io.IOException;\n import java.util.concurrent.Executors;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n@@ -44,15 +45,19 @@\n  * wish to expose in the public API.\n  */\n public class BookKeeperTestClient extends BookKeeper {\n-    public BookKeeperTestClient(String servers)\n+    public BookKeeperTestClient(ClientConfiguration conf)\n             throws IOException, InterruptedException, KeeperException {\n-        super(servers);\n+        super(conf);\n     }\n \n     public ZooKeeper getZkHandle() {\n         return super.getZkHandle();\n     }\n \n+    public ClientConfiguration getConf() {\n+        return super.getConf();\n+    }\n+\n     /**\n      * Force a read to zookeeper to get list of bookies.\n      *"},{"sha":"d886c822e6d72823b34373aa6c2dceff0ea51488","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -40,6 +40,8 @@\n import java.util.concurrent.TimeUnit;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n@@ -106,13 +108,16 @@ public BookieRecoveryTest(DigestType digestType) {\n     @Before\n     @Override\n     public void setUp() throws Exception {\n-        super.setUp();\n         // Set up the configuration properties needed.\n-        System.setProperty(\"digestType\", digestType.toString());\n-        System.setProperty(\"passwd\", \"\");\n+        baseClientConf.setBookieRecoveryDigestType(digestType);\n+        baseClientConf.setBookieRecoveryPasswd(\"\".getBytes());\n+        super.setUp();\n+\n         sync = new SyncObject();\n         bookieRecoverCb = new BookieRecoverCallback();\n-        bkAdmin = new BookKeeperAdmin(HOSTPORT);\n+        ClientConfiguration adminConf = new ClientConfiguration(baseClientConf);\n+        adminConf.setZkServers(HOSTPORT);\n+        bkAdmin = new BookKeeperAdmin(adminConf);\n     }\n \n     @After\n@@ -150,7 +155,8 @@ public void tearDown() throws Exception {\n         InterruptedException {\n         List<LedgerHandle> lhs = new ArrayList<LedgerHandle>();\n         for (int i = 0; i < numLedgers; i++) {\n-            lhs.add(bkc.createLedger(ensemble, quorum, digestType, System.getProperty(\"passwd\").getBytes()));\n+            lhs.add(bkc.createLedger(ensemble, quorum, \n+                                     digestType, baseClientConf.getBookieRecoveryPasswd()));\n         }\n         return lhs;\n     }\n@@ -191,7 +197,9 @@ private void startNewBookie(int port)\n         f.delete();\n         f.mkdir();\n \n-        BookieServer server = new BookieServer(port, HOSTPORT, f, new File[] { f });\n+        ServerConfiguration conf = newServerConfiguration(port, HOSTPORT, f, new File[] { f });\n+\n+        BookieServer server = new BookieServer(conf);\n         server.start();\n         bs.add(server);\n \n@@ -220,7 +228,7 @@ private void verifyRecoveredLedgers(int numLedgers, long startEntryId, long endE\n         // Get a set of LedgerHandles for all of the ledgers to verify\n         List<LedgerHandle> lhs = new ArrayList<LedgerHandle>();\n         for (int i = 0; i < numLedgers; i++) {\n-            lhs.add(bkc.openLedger(i + 1, digestType, System.getProperty(\"passwd\").getBytes()));\n+            lhs.add(bkc.openLedger(i + 1, digestType, baseClientConf.getBookieRecoveryPasswd()));\n         }\n         // Read the ledger entries to verify that they are all present and\n         // correct in the new bookie."},{"sha":"21859aae319fe9d1beaa766811d01492b65afe0b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -32,6 +32,7 @@\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.LedgerEntryPage;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.MacDigestManager;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.junit.After;\n@@ -50,6 +51,7 @@\n     static Logger LOG = LoggerFactory.getLogger(LedgerCacheTest.class);\n \n     Bookie bookie;\n+    ServerConfiguration conf;\n     File txnDir, ledgerDir;\n \n     class TestWriteCallback implements WriteCallback {\n@@ -78,8 +80,12 @@ public void setUp() throws IOException {\n         ledgerDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n         ledgerDir.mkdirs();\n \n-\n-        bookie = new Bookie(5000, null, txnDir, new File[] {ledgerDir});\n+        conf = new ServerConfiguration();\n+        conf.setBookiePort(5000);\n+        conf.setZkServers(null);\n+        conf.setJournalDirName(txnDir.getPath());\n+        conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+        bookie = new Bookie(conf);\n     }\n \n "},{"sha":"932d344c5c9e96dc65db5b147cfe5b0109c279d2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -26,6 +26,7 @@\n import java.util.Enumeration;\n import java.util.concurrent.CyclicBarrier;\n import java.util.concurrent.CountDownLatch;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.BookKeeper;\n@@ -115,7 +116,7 @@ public void run() {\n                 barrier.await();\n                 while(true) {\n                     try {\n-                        bk = new BookKeeper(bkc.getZkHandle());\n+                        bk = new BookKeeper(new ClientConfiguration(baseClientConf), bkc.getZkHandle());\n                         \n                         lh = bk.openLedger(ledgerId, \n                                            digestType, \"\".getBytes());"},{"sha":"5d76599b55544277024ec2be17d04e4f8d32478c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":37,"deletions":3,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -31,6 +31,8 @@\n \n import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -64,10 +66,14 @@\n     // BookKeeper\n     protected List<File> tmpDirs = new ArrayList<File>();\n     protected List<BookieServer> bs = new ArrayList<BookieServer>();\n+    protected List<ServerConfiguration> bsConfs = new ArrayList<ServerConfiguration>();\n     protected Integer initialPort = 5000;\n     protected int numBookies;\n     protected BookKeeperTestClient bkc;\n \n+    protected ServerConfiguration baseConf = new ServerConfiguration();\n+    protected ClientConfiguration baseClientConf = new ClientConfiguration();\n+\n     public BaseTestCase(int numBookies) {\n         this.numBookies = numBookies;\n     }\n@@ -77,6 +83,18 @@ public BaseTestCase(int numBookies) {\n         return Arrays.asList(new Object[][] { {DigestType.MAC }, {DigestType.CRC32}});\n     }\n \n+    protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {\n+        ServerConfiguration conf = new ServerConfiguration(baseConf);\n+        conf.setBookiePort(port);\n+        conf.setZkServers(zkServers);\n+        conf.setJournalDirName(journalDir.getPath());\n+        String[] ledgerDirNames = new String[ledgerDirs.length];\n+        for (int i=0; i<ledgerDirs.length; i++) {\n+            ledgerDirNames[i] = ledgerDirs[i].getPath();\n+        }\n+        conf.setLedgerDirNames(ledgerDirNames);\n+        return conf;\n+    }\n \n     @Before\n     @Override\n@@ -114,12 +132,17 @@ public void setUp() throws Exception {\n                 f.delete();\n                 f.mkdir();\n \n-                BookieServer server = new BookieServer(initialPort + i, HOSTPORT, f, new File[] { f });\n+                ServerConfiguration conf = newServerConfiguration(\n+                    initialPort + i, HOSTPORT, f, new File[] { f });\n+                bsConfs.add(conf);\n+\n+                BookieServer server = new BookieServer(conf);\n                 server.start();\n                 bs.add(server);\n             }\n             zkc.close();\n-            bkc = new BookKeeperTestClient(\"127.0.0.1\");\n+            baseClientConf.setZkServers(\"127.0.0.1\");\n+            bkc = new BookKeeperTestClient(baseClientConf);\n         } catch(Exception e) {\n             LOG.error(\"Error setting up\", e);\n             throw e;\n@@ -146,6 +169,13 @@ public void killBookie(InetSocketAddress addr) throws InterruptedException {\n      * @throws IOException\n      */\n     protected void restartBookies() throws InterruptedException, IOException {\n+        restartBookies(null);\n+    }\n+\n+    /**\n+     * Restart bookie servers add new configuration settings\n+     */\n+    protected void restartBookies(ServerConfiguration newConf) throws InterruptedException, IOException {\n         // shut down bookie server\n         for (BookieServer server : bs) {\n             server.shutdown();\n@@ -155,7 +185,11 @@ protected void restartBookies() throws InterruptedException, IOException {\n         // restart them to ensure we can't \n         int j = 0;\n         for (File f : tmpDirs) {\n-            BookieServer server = new BookieServer(initialPort + j, HOSTPORT, f, new File[] { f });\n+            ServerConfiguration conf = bsConfs.get(j);\n+            if (null != newConf) {\n+                conf.loadConf(newConf);\n+            }\n+            BookieServer server = new BookieServer(conf);\n             server.start();\n             bs.add(server);\n             j++;"},{"sha":"8be2ab67e015177a166b46db79409d5c9f457458","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -32,6 +32,8 @@\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n import org.junit.Test;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.proto.BookieProtocol;\n@@ -51,16 +53,22 @@\n     public int port = 13645;\n     public ClientSocketChannelFactory channelFactory;\n     public OrderedSafeExecutor executor;\n+    ServerConfiguration conf = new ServerConfiguration();\n \n     @Override\n     public void setUp() throws Exception {\n         tmpDir = File.createTempFile(\"bookie\", \"test\");\n         tmpDir.delete();\n         tmpDir.mkdir();\n+\n         // Since this test does not rely on the BookKeeper client needing to\n         // know via ZooKeeper which Bookies are available, okay, so pass in null\n         // for the zkServers input parameter when constructing the BookieServer.\n-        bs = new BookieServer(port, null, tmpDir, new File[] { tmpDir });\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setZkServers(null).setBookiePort(port)\n+            .setJournalDirName(tmpDir.getPath())\n+            .setLedgerDirNames(new String[] { tmpDir.getPath() });\n+        bs = new BookieServer(conf);\n         bs.start();\n         channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                 .newCachedThreadPool());\n@@ -124,7 +132,7 @@ public void testWriteGaps() throws Exception {\n         InetSocketAddress addr = new InetSocketAddress(\"127.0.0.1\", port);\n         ResultStruct arc = new ResultStruct();\n \n-        BookieClient bc = new BookieClient(channelFactory, executor);\n+        BookieClient bc = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n         ChannelBuffer bb;\n         bb = createByteBuffer(1, 1, 1);\n         bc.addEntry(addr, 1, passwd, 1, bb, wrcb, null, BookieProtocol.FLAG_NONE);\n@@ -224,7 +232,7 @@ private ChannelBuffer createByteBuffer(int i, long lid, long eid) {\n     public void testNoLedger() throws Exception {\n         ResultStruct arc = new ResultStruct();\n         InetSocketAddress addr = new InetSocketAddress(\"127.0.0.1\", port);\n-        BookieClient bc = new BookieClient(channelFactory, executor);\n+        BookieClient bc = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n         synchronized (arc) {\n             bc.readEntry(addr, 2, 13, recb, arc, BookieProtocol.FLAG_NONE);\n             arc.wait(1000);"},{"sha":"5873255bfc99d8df07288b1bbfc7f825bbe58b3a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -29,6 +29,7 @@\n import java.util.Random;\n import java.util.Set;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n@@ -137,7 +138,7 @@ public void testBookieRecovery() throws Exception {\n         }\n \n         bs.get(3).shutdown();\n-        BookieServer server = new BookieServer(initialPort + 3, HOSTPORT, tmpDirs.get(3), new File[] { tmpDirs.get(3)});\n+        BookieServer server = new BookieServer(bsConfs.get(3));\n         server.start();\n         bs.set(3, server);\n \n@@ -192,7 +193,7 @@ void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n \n             // open ledger\n             bkc.close();\n-            bkc = new BookKeeperTestClient(\"127.0.0.1\");\n+            bkc = new BookKeeperTestClient(baseClientConf);\n             lh = bkc.openLedger(ledgerId, digestType, ledgerPassword);\n             LOG.debug(\"Number of entries written: \" + (lh.getLastAddConfirmed() + 1));\n             assertTrue(\"Verifying number of entries written\", lh.getLastAddConfirmed() == (numEntriesToWrite - 1));"},{"sha":"9de95bca129c40c2ce22fa95e9e1784a12e3b580","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":20,"deletions":26,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -24,6 +24,7 @@\n import java.util.Enumeration;\n import java.util.List;\n \n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.Bookie.JournalIdFilter;\n import org.apache.bookkeeper.client.LedgerEntry;\n@@ -53,20 +54,15 @@ public BookieJournalRollingTest(DigestType digestType) {\n     @Override\n     public void setUp() throws Exception {\n         // Set up the configuration properties needed.\n-        System.setProperty(\"journal_max_size_mb\", \"1\");\n-        System.setProperty(\"journal_max_backups\", \"1\");\n+        baseConf.setMaxJournalSize(1);\n+        baseConf.setMaxBackupJournals(1);\n         super.setUp();\n     }\n \n     @After\n     @Override\n     public void tearDown() throws Exception {\n-        try {\n-            super.tearDown();\n-        } finally {\n-            System.setProperty(\"journal_max_size_mb\", \"2048\");\n-            System.setProperty(\"journal_max_backups\", \"5\");\n-        }\n+        super.tearDown();\n     }\n \n     /**\n@@ -196,27 +192,25 @@ public void testJournalRollingWithoutSyncup() throws Exception {\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Testing Journal Rolling without sync up\");\n         }\n+\n         // set flush interval to a large value\n-        System.setProperty(\"flush_interval\", \"999999999\");\n-        try {\n-            // restart bookies\n-            restartBookies();\n-\n-            // Write enough ledger entries so that we roll over journals\n-            LedgerHandle[] lhs = writeLedgerEntries(4, 1024, 1024);\n-            long[] ledgerIds = new long[lhs.length];\n-            for (int i=0; i<lhs.length; i++) {\n-                ledgerIds[i] = lhs[i].getId();\n-            }\n+        ServerConfiguration newConf = new ServerConfiguration();\n+        newConf.setFlushInterval(999999999);\n+        // restart bookies\n+        restartBookies(newConf);\n \n-            // ledger indexes are not flushed\n-            // and after bookies restarted, journals will be relayed\n-            // ensure that we can still read the entries\n-            restartBookies();\n-            validLedgerEntries(ledgerIds, 1024, 1024);\n-        } finally {\n-            System.setProperty(\"flush_interval\", \"100\");\n+        // Write enough ledger entries so that we roll over journals\n+        LedgerHandle[] lhs = writeLedgerEntries(4, 1024, 1024);\n+        long[] ledgerIds = new long[lhs.length];\n+        for (int i=0; i<lhs.length; i++) {\n+            ledgerIds[i] = lhs[i].getId();\n         }\n+\n+        // ledger indexes are not flushed\n+        // and after bookies restarted, journals will be relayed\n+        // ensure that we can still read the entries\n+        restartBookies(newConf);\n+        validLedgerEntries(ledgerIds, 1024, 1024);\n     }\n \n }"},{"sha":"205343979c76b9ac87c150c062b5582607cdaaf9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -417,7 +417,7 @@ public void testReadWriteAsyncSingleClientThrottle() throws\n             Integer throttle = 100;\n             ThrottleTestCallback tcb = new ThrottleTestCallback(throttle);\n             // Create a ledger\n-            System.setProperty(\"throttle\", throttle.toString());\n+            bkc.getConf().setThrottleValue(throttle);\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -771,8 +771,8 @@ public void testReadWriteAsyncLength() throws IOException {\n     public void testShutdown() throws IOException {\n         try {\n             int numLedgers = 10000;\n-            Long throttle = (((Double) Math.max(1.0, ((double) 10000/numLedgers))).longValue());\n-            System.setProperty(\"throttle\", throttle.toString());\n+            int throttle = (((Double) Math.max(1.0, ((double) 10000/numLedgers))).intValue());\n+            bkc.getConf().setThrottleValue(throttle);\n             LedgerHandle[] lhArray = new LedgerHandle[numLedgers];\n             for(int i = 0; i < numLedgers; i++) {\n                 lhArray[i] = bkc.createLedger(3, 2, BookKeeper.DigestType.CRC32, new byte[] {'a', 'b'});"},{"sha":"5ed706124d8c193677f5e33a3cbdcc837601201e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -27,6 +27,7 @@\n import org.junit.After;\n import static org.junit.Assert.*;\n \n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import java.util.HashSet;\n import junit.framework.TestCase;\n@@ -57,7 +58,8 @@ public void runBookieServerZKExpireBehaviourTest() throws Exception {\n                 }\n             }\n \n-            server = new BookieServer(initialPort + 1, HOSTPORT, f, new File[] { f });\n+            ServerConfiguration conf = newServerConfiguration(initialPort + 1, HOSTPORT, f, new File[] { f });\n+            server = new BookieServer(conf);\n             server.start();\n \n             Thread.sleep(10);"},{"sha":"2b9728070799ba7974d00ebb982058f1fb0e0ba9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -30,6 +30,7 @@\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.junit.After;\n import org.junit.Before;\n@@ -49,6 +50,7 @@\n     File txnDir, ledgerDir;\n     int recvTimeout = 10000;\n     Semaphore throttle;\n+    ServerConfiguration conf = new ServerConfiguration();\n \n     @Override\n     @Before\n@@ -69,7 +71,11 @@ public void setUp() throws IOException {\n         ledgerDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n         ledgerDir.mkdirs();\n \n-        bookie = new Bookie(5000, null, txnDir, new File[] {ledgerDir});\n+        conf.setBookiePort(5000);\n+        conf.setZkServers(null);\n+        conf.setJournalDirName(txnDir.getPath());\n+        conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+        bookie = new Bookie(conf);\n     }\n \n     static void recursiveDelete(File f) {"},{"sha":"b224fcae1fed7f44cb555fc1d8a08340f0104f66","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -30,6 +30,7 @@\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.BKException;\n@@ -66,7 +67,7 @@ public ConditionalSetTest(DigestType digestType) {\n     public void setUp() throws IOException, Exception {\n         super.setUp();\n         entry = new byte[10]; // initialize the entries list\n-        this.bkcReader = new BookKeeperTestClient(\"127.0.0.1\");\n+        this.bkcReader = new BookKeeperTestClient(baseClientConf);\n     }\n \n     /**"},{"sha":"b531b549e66024de35ed7846e42acb4f9d2c00b0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -0,0 +1,55 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.test;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+import junit.framework.TestCase;\n+\n+import org.junit.Test;\n+\n+public class ConfigurationTest extends TestCase {\n+    @Test\n+    public void testConfigurationOverwrite() {\n+        System.clearProperty(\"zkServers\");\n+\n+        ServerConfiguration conf = new ServerConfiguration();\n+        assertEquals(null, conf.getZkServers());\n+\n+        // override setting from property\n+        System.setProperty(\"zkServers\", \"server1\");\n+        // it affects previous created configurations, if the setting is not overwrite\n+        assertEquals(\"server1\", conf.getZkServers());\n+\n+        ServerConfiguration conf2 = new ServerConfiguration();\n+        assertEquals(\"server1\", conf2.getZkServers());\n+\n+        System.clearProperty(\"zkServers\");\n+\n+        // load other configuration\n+        ServerConfiguration newConf = new ServerConfiguration();\n+        assertEquals(null, newConf.getZkServers());\n+        newConf.setZkServers(\"newserver\");\n+        assertEquals(\"newserver\", newConf.getZkServers());\n+        conf2.loadConf(newConf);\n+        assertEquals(\"newserver\", conf2.getZkServers());\n+    }\n+}"},{"sha":"5364fdd3d5083628fe24d0eccad7c32fa8168833","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":3,"deletions":13,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -48,8 +48,8 @@ public LedgerDeleteTest(DigestType digestType) {\n     @Override\n     public void setUp() throws Exception {\n         // Set up the configuration properties needed.\n-        System.setProperty(\"logSizeLimit\", Long.toString(2 * 1024 * 1024L));\n-        System.setProperty(\"gcWaitTime\", \"1000\");\n+        baseConf.setEntryLogSizeLimit(2 * 1024 * 1024L);\n+        baseConf.setGcWaitTime(1000);\n         super.setUp();\n     }\n \n@@ -128,17 +128,7 @@ public void testLedgerDeleteWithExistingEntryLogs() throws Exception {\n          * directories. This will test the reading of pre-existing ledger index\n          * files in the LedgerCache during startup of a Bookie Server.\n          */\n-        for (BookieServer server : bs) {\n-            server.shutdown();\n-        }\n-        bs.clear();\n-        int j = 0;\n-        for (File f : tmpDirs) {\n-            BookieServer server = new BookieServer(initialPort + j, HOSTPORT, f, new File[] { f });\n-            server.start();\n-            bs.add(server);\n-            j++;\n-        }\n+        restartBookies();\n \n         // Delete all of these ledgers from the BookKeeper client\n         for (LedgerHandle lh : lhs) {"},{"sha":"6078b97b2b60a3b22bbea6d06d2540391cfe5b4f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -27,6 +27,7 @@\n import java.util.Arrays;\n import java.util.concurrent.Executors;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n@@ -68,7 +69,7 @@ synchronized void increment() {\n     }\n \n     LoopbackClient(ClientSocketChannelFactory channelFactory, OrderedSafeExecutor executor, long begin, int limit) throws IOException {\n-        this.client = new BookieClient(channelFactory, executor);\n+        this.client = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n         this.begin = begin;\n     }\n "},{"sha":"e2b2758c5ba5a8057948d772f67de0a53708f28b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -24,6 +24,7 @@\n import java.net.Socket;\n import java.nio.ByteBuffer;\n \n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.NIOServerFactory;\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n import org.apache.bookkeeper.proto.NIOServerFactory.PacketProcessor;\n@@ -45,7 +46,9 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n \n     @Test\n     public void testProblemProcessor() throws Exception {\n-        NIOServerFactory factory = new NIOServerFactory(22334, problemProcessor);\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setBookiePort(22334);\n+        NIOServerFactory factory = new NIOServerFactory(conf, problemProcessor);\n         Socket s = new Socket(\"127.0.0.1\", 22334);\n         s.setSoTimeout(5000);\n         try {"},{"sha":"20df934b5539e492451c5a1f338756c7dec1ddcb","filename":"hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/conf/AbstractConfiguration.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -31,6 +31,15 @@ protected AbstractConfiguration() {\n         conf = new CompositeConfiguration();\n     }\n \n+    /**\n+     * Return real configuration object\n+     *\n+     * @return configuration\n+     */\n+    public Configuration getConf() {\n+        return conf;\n+    }\n+\n     /**\n      * You can load configurations in precedence order. The first one takes\n      * precedence over any loaded later."},{"sha":"2d78d831bd0dd2933a779962e5d37a32e64d93b6","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -21,6 +21,7 @@\n import java.nio.ByteBuffer;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Semaphore;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.slf4j.Logger;\n@@ -44,7 +45,7 @@\n \n     public BookieBenchmark(String bookieHostPort)  throws Exception {\n         channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors.newCachedThreadPool());\n-        bkc = new BookieClient(channelFactory, executor);\n+        bkc = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n         String[] hostPort = bookieHostPort.split(\":\");\n         addr = new InetSocketAddress(hostPort[0], Integer.parseInt(hostPort[1]));\n "},{"sha":"8c2d77f7849bf5723ed3a86d2e54f32aa78e6295","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -30,6 +30,7 @@\n import java.util.concurrent.SynchronousQueue;\n import java.util.concurrent.TimeUnit;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.commons.configuration.ConfigurationException;\n@@ -113,7 +114,9 @@ protected PersistenceManager instantiatePersistenceManager(TopicManager topicMgr\n \n         } else {\n             try {\n-                bk = new BookKeeper(zk, clientChannelFactory);\n+                ClientConfiguration bkConf = new ClientConfiguration();\n+                bkConf.addConfiguration(conf.getConf());\n+                bk = new BookKeeper(bkConf, zk, clientChannelFactory);\n             } catch (KeeperException e) {\n                 logger.error(\"Could not instantiate bookkeeper client\", e);\n                 throw new IOException(e);"},{"sha":"1ad28e7245fd08ba4b88f68e9017468ec6d5d04d","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/4049d4c2b115f81008ef7a3920fd9153ced2f53c/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/4049d4c2b115f81008ef7a3920fd9153ced2f53c/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=4049d4c2b115f81008ef7a3920fd9153ced2f53c","patch":"@@ -21,6 +21,8 @@\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.zookeeper.CreateMode;\n@@ -46,6 +48,7 @@\n \n     // BookKeeper Server variables\n     private List<BookieServer> bookiesList;\n+    private List<ServerConfiguration> bookieConfsList;\n     private int initialPort = 5000;\n \n     // String constants used for creating the bookie server files.\n@@ -57,6 +60,9 @@\n     // BookKeeper client instance\n     protected BookKeeper bk;\n \n+    protected ServerConfiguration baseConf = new ServerConfiguration();\n+    protected ClientConfiguration baseClientConf = new ClientConfiguration();\n+\n     // Constructor\n     public BookKeeperTestBase(int numBookies) {\n         this.numBookies = numBookies;\n@@ -94,10 +100,14 @@ public void setUp() throws Exception {\n \n         // Create Bookie Servers\n         bookiesList = new LinkedList<BookieServer>();\n+        bookieConfsList = new LinkedList<ServerConfiguration>();\n \n         for (int i = 0; i < numBookies; i++) {\n             File tmpDir = FileUtils.createTempDirectory(PREFIX + i, SUFFIX);\n-            BookieServer bs = new BookieServer(initialPort + i, hostPort, tmpDir, new File[] { tmpDir });\n+            ServerConfiguration conf = newServerConfiguration(\n+                initialPort + i, hostPort, tmpDir, new File[] { tmpDir });\n+            bookieConfsList.add(conf);\n+            BookieServer bs = new BookieServer(conf);\n             bs.start();\n             bookiesList.add(bs);\n         }\n@@ -126,4 +136,17 @@ public void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n+    protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {\n+        ServerConfiguration conf = new ServerConfiguration(baseConf);\n+        conf.setBookiePort(port);\n+        conf.setZkServers(zkServers);\n+        conf.setJournalDirName(journalDir.getPath());\n+        String[] ledgerDirNames = new String[ledgerDirs.length];\n+        for (int i=0; i<ledgerDirs.length; i++) {\n+            ledgerDirNames[i] = ledgerDirs[i].getPath();\n+        }\n+        conf.setLedgerDirNames(ledgerDirNames);\n+        return conf;\n+    }\n+\n }"}]}

