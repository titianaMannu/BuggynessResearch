{"sha":"404b83abafb94b62c0ced2ba7cf6878762643746","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MDRiODNhYmFmYjk0YjYyYzBjZWQyYmE3Y2Y2ODc4NzYyNjQzNzQ2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T10:35:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T10:35:13Z"},"message":"BOOKKEEPER-746: 5 new shell commands. List ledgers, list metadata, list underreplicated, show auditor and simpletest (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1599470 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f724534511c12a86b1847d552c964ec711f3f83f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f724534511c12a86b1847d552c964ec711f3f83f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/404b83abafb94b62c0ced2ba7cf6878762643746","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/404b83abafb94b62c0ced2ba7cf6878762643746","html_url":"https://github.com/apache/bookkeeper/commit/404b83abafb94b62c0ced2ba7cf6878762643746","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/404b83abafb94b62c0ced2ba7cf6878762643746/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d86917af98c2a7442619f1b71aa6d4d1da5945f4","url":"https://api.github.com/repos/apache/bookkeeper/commits/d86917af98c2a7442619f1b71aa6d4d1da5945f4","html_url":"https://github.com/apache/bookkeeper/commit/d86917af98c2a7442619f1b71aa6d4d1da5945f4"}],"stats":{"total":552,"additions":510,"deletions":42},"files":[{"sha":"9a268943b0fffa738c79fc4a9de45e7d1a0e2cf3","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/404b83abafb94b62c0ced2ba7cf6878762643746/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/404b83abafb94b62c0ced2ba7cf6878762643746/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=404b83abafb94b62c0ced2ba7cf6878762643746","patch":"@@ -202,6 +202,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-745: Fix for false reports of ledger unreplication during rolling restarts. (ivank)\n \n+        BOOKKEEPER-746: 5 new shell commands. List ledgers, list metadata, list underreplicated, show auditor and simpletest (ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"40270a60e900f6cc992157eac03886f39f13190a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":442,"deletions":41,"changes":483,"blob_url":"https://github.com/apache/bookkeeper/blob/404b83abafb94b62c0ced2ba7cf6878762643746/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/404b83abafb94b62c0ced2ba7cf6878762643746/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=404b83abafb94b62c0ced2ba7cf6878762643746","patch":"@@ -18,19 +18,52 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Formatter;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.Collections;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.replication.AuditorElector;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.Tool;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+\n+import org.apache.bookkeeper.util.EntryFormatter;\n+import org.apache.bookkeeper.util.Tool;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+\n+import com.google.common.util.concurrent.AbstractFuture;\n+import static com.google.common.base.Charsets.UTF_8;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n@@ -44,16 +77,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Formatter;\n-import java.util.HashMap;\n-import java.util.Map;\n-\n /**\n  * Bookie Shell is to provide utilities for users to administer a bookkeeper cluster.\n  */\n@@ -67,6 +90,11 @@\n     static final String CMD_BOOKIEFORMAT = \"bookieformat\";\n     static final String CMD_RECOVER = \"recover\";\n     static final String CMD_LEDGER = \"ledger\";\n+    static final String CMD_LISTLEDGERS = \"listledgers\";\n+    static final String CMD_LEDGERMETADATA = \"ledgermetadata\";\n+    static final String CMD_LISTUNDERREPLICATED = \"listunderreplicated\";\n+    static final String CMD_WHOISAUDITOR = \"whoisauditor\";\n+    static final String CMD_SIMPLETEST = \"simpletest\";\n     static final String CMD_READLOG = \"readlog\";\n     static final String CMD_READJOURNAL = \"readjournal\";\n     static final String CMD_LASTMARK = \"lastmark\";\n@@ -150,7 +178,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"metaformat [-nonInteractive] [-force]\";\n+            return \"metaformat   [-nonInteractive] [-force]\";\n         }\n \n         @Override\n@@ -228,7 +256,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"recover <bookieSrc> [bookieDest]\";\n+            return \"recover      <bookieSrc> [bookieDest]\";\n         }\n \n         @Override\n@@ -325,7 +353,272 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"ledger [-m] <ledger_id>\";\n+            return \"ledger       [-m] <ledger_id>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command for listing underreplicated ledgers\n+     */\n+    class ListUnderreplicatedCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public ListUnderreplicatedCmd() {\n+            super(CMD_LISTUNDERREPLICATED);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"List ledgers marked as underreplicated\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"listunderreplicated\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerUnderreplicationManager underreplicationManager = mFactory.newLedgerUnderreplicationManager();\n+                Iterator<Long> iter = underreplicationManager.listLedgersToRereplicate();\n+                while (iter.hasNext()) {\n+                    System.out.println(iter.next());\n+                }\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n+\n+    final static int LIST_BATCH_SIZE = 1000;\n+    /**\n+     * Command to list all ledgers in the cluster\n+     */\n+    class ListLedgersCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        ListLedgersCmd() {\n+            super(CMD_LISTLEDGERS);\n+            lOpts.addOption(\"m\", \"meta\", false, \"Print metadata\");\n+\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerManager m = mFactory.newLedgerManager();\n+                LedgerRangeIterator iter = m.getLedgerRanges();\n+                if (cmdLine.hasOption(\"m\")) {\n+                    List<ReadMetadataCallback> futures\n+                        = new ArrayList<ReadMetadataCallback>(LIST_BATCH_SIZE);\n+                    while (iter.hasNext()) {\n+                        LedgerRange r = iter.next();\n+                        for (Long lid : r.getLedgers()) {\n+                            ReadMetadataCallback cb = new ReadMetadataCallback(lid);\n+                            m.readLedgerMetadata(lid, cb);\n+                            futures.add(cb);\n+                        }\n+                        if (futures.size() >= LIST_BATCH_SIZE) {\n+                            while (futures.size() > 0) {\n+                                ReadMetadataCallback cb = futures.remove(0);\n+                                printLedgerMetadata(cb);\n+                            }\n+                        }\n+                    }\n+                    while (futures.size() > 0) {\n+                        ReadMetadataCallback cb = futures.remove(0);\n+                        printLedgerMetadata(cb);\n+                    }\n+                } else {\n+                    while (iter.hasNext()) {\n+                        LedgerRange r = iter.next();\n+                        for (Long lid : r.getLedgers()) {\n+                            System.out.println(Long.toString(lid));\n+                        }\n+                    }\n+                }\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"List all ledgers on the cluster (this may take a long time)\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"listledgers  [-meta]\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    static void printLedgerMetadata(ReadMetadataCallback cb) throws Exception {\n+        LedgerMetadata md = cb.get();\n+        System.out.println(\"ledgerID: \" + cb.getLedgerId());\n+        System.out.println(new String(md.serialize(), UTF_8));\n+    }\n+\n+    static class ReadMetadataCallback extends AbstractFuture<LedgerMetadata>\n+        implements GenericCallback<LedgerMetadata> {\n+        final long ledgerId;\n+\n+        ReadMetadataCallback(long ledgerId) {\n+            this.ledgerId = ledgerId;\n+        }\n+\n+        long getLedgerId() {\n+            return ledgerId;\n+        }\n+\n+        public void operationComplete(int rc, LedgerMetadata result) {\n+            if (rc != 0) {\n+                setException(BKException.create(rc));\n+            } else {\n+                set(result);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Print the metadata for a ledger\n+     */\n+    class LedgerMetadataCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        LedgerMetadataCmd() {\n+            super(CMD_LEDGERMETADATA);\n+            lOpts.addOption(\"l\", \"ledgerid\", true, \"Ledger ID\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            final long lid = getOptionLongValue(cmdLine, \"ledgerid\", -1);\n+            if (lid == -1) {\n+                System.err.println(\"Must specify a ledger id\");\n+                return -1;\n+            }\n+\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerManager m = mFactory.newLedgerManager();\n+                ReadMetadataCallback cb = new ReadMetadataCallback(lid);\n+                m.readLedgerMetadata(lid, cb);\n+                printLedgerMetadata(cb);\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Print the metadata for a ledger\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"ledgermetadata -ledgerid <ledgerid>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    /**\n+     * Simple test to create a ledger and write to it\n+     */\n+    class SimpleTestCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        SimpleTestCmd() {\n+            super(CMD_SIMPLETEST);\n+            lOpts.addOption(\"e\", \"ensemble\", true, \"Ensemble size (default 3)\");\n+            lOpts.addOption(\"w\", \"writeQuorum\", true, \"Write quorum size (default 2)\");\n+            lOpts.addOption(\"a\", \"ackQuorum\", true, \"Ack quorum size (default 2)\");\n+            lOpts.addOption(\"n\", \"numEntries\", true, \"Entries to write (default 1000)\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            byte[] data = new byte[100]; // test data\n+\n+            int ensemble = getOptionIntValue(cmdLine, \"ensemble\", 3);\n+            int writeQuorum = getOptionIntValue(cmdLine, \"writeQuorum\", 2);\n+            int ackQuorum = getOptionIntValue(cmdLine, \"ackQuorum\", 2);\n+            int numEntries = getOptionIntValue(cmdLine, \"numEntries\", 1000);\n+\n+            ClientConfiguration conf = new ClientConfiguration();\n+            conf.addConfiguration(bkConf);\n+            BookKeeper bk = new BookKeeper(conf);\n+            LedgerHandle lh = bk.createLedger(ensemble, writeQuorum, ackQuorum,\n+                                              BookKeeper.DigestType.MAC, new byte[0]);\n+            System.out.println(\"Ledger ID: \" + lh.getId());\n+            long lastReport = System.nanoTime();\n+            for (int i = 0; i < numEntries; i++) {\n+                lh.addEntry(data);\n+                if (TimeUnit.SECONDS.convert(System.nanoTime() - lastReport,\n+                                             TimeUnit.NANOSECONDS) > 1) {\n+                    System.out.println(i + \" entries written\");\n+                    lastReport = System.nanoTime();\n+                }\n+            }\n+\n+            lh.close();\n+            bk.close();\n+            System.out.println(numEntries + \" entries written to ledger \" + lh.getId());\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Simple test to create a ledger and write entries to it\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"simpletest   [-ensemble N] [-writeQuorum N] [-ackQuorum N] [-numEntries N]\";\n         }\n \n         @Override\n@@ -386,7 +679,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"readlog [-m] <entry_log_id | entry_log_file_name>\";\n+            return \"readlog      [-msg] <entry_log_id | entry_log_file_name>\";\n         }\n \n         @Override\n@@ -447,7 +740,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"readjournal [-m] <journal_id | journal_file_name>\";\n+            return \"readjournal  [-msg] <journal_id | journal_file_name>\";\n         }\n \n         @Override\n@@ -459,16 +752,30 @@ Options getOptions() {\n     /**\n      * Command to print last log mark\n      */\n-    class LastMarkCmd implements Command {\n+    class LastMarkCmd extends MyCommand {\n+        LastMarkCmd() {\n+            super(CMD_LASTMARK);\n+        }\n+\n         @Override\n-        public int runCmd(String[] args) throws Exception {\n+        public int runCmd(CommandLine c) throws Exception {\n             printLastLogMark();\n             return 0;\n         }\n \n         @Override\n-        public void printUsage() {\n-            System.err.println(\"lastmark: Print last log marker.\");\n+        String getDescription() {\n+            return \"Print last log marker.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"lastmark\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return new Options();\n         }\n     }\n \n@@ -533,7 +840,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"listbookies [-readwrite|-readonly] [-hostnames]\";\n+            return \"listbookies  [-readwrite|-readonly] [-hostnames]\";\n         }\n \n         @Override\n@@ -545,9 +852,14 @@ Options getOptions() {\n     /**\n      * Command to print help message\n      */\n-    class HelpCmd implements Command {\n+    class HelpCmd extends MyCommand {\n+        HelpCmd() {\n+            super(CMD_HELP);\n+        }\n+\n         @Override\n-        public int runCmd(String[] args) throws Exception {\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] args = cmdLine.getArgs();\n             if (args.length == 0) {\n                 printShellUsage();\n                 return 0;\n@@ -564,9 +876,18 @@ public int runCmd(String[] args) throws Exception {\n         }\n \n         @Override\n-        public void printUsage() {\n-            System.err.println(\"help: Describe the usage of this program or its subcommands.\");\n-            System.err.println(\"usage: help [COMMAND]\");\n+        String getDescription() {\n+            return \"Describe the usage of this program or its subcommands.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"help         [COMMAND]\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return new Options();\n         }\n     }\n \n@@ -641,13 +962,68 @@ int runCmd(CommandLine cmdLine) throws Exception {\n         }\n     }\n \n-    final Map<String, Command> commands;\n+    /**\n+     * Print which node has the auditor lock\n+     */\n+    class WhoIsAuditorCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public WhoIsAuditorCmd() {\n+            super(CMD_WHOISAUDITOR);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Print the node which holds the auditor lock\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"whoisauditor\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                BookieSocketAddress bookieId = AuditorElector.getCurrentAuditor(bkConf, zk);\n+                if (bookieId == null) {\n+                    LOG.info(\"No auditor elected\");\n+                    return -1;\n+                }\n+                LOG.info(\"Auditor: {}/{}:{}\",\n+                         new Object[] {\n+                             bookieId.getSocketAddress().getAddress().getCanonicalHostName(),\n+                             bookieId.getSocketAddress().getAddress().getHostAddress(),\n+                             bookieId.getSocketAddress().getPort() });\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n+\n+    final Map<String, MyCommand> commands = new HashMap<String, MyCommand>();\n     {\n-        commands = new HashMap<String, Command>();\n         commands.put(CMD_METAFORMAT, new MetaFormatCmd());\n         commands.put(CMD_BOOKIEFORMAT, new BookieFormatCmd());\n         commands.put(CMD_RECOVER, new RecoverCmd());\n         commands.put(CMD_LEDGER, new LedgerCmd());\n+        commands.put(CMD_LISTLEDGERS, new ListLedgersCmd());\n+        commands.put(CMD_LISTUNDERREPLICATED, new ListUnderreplicatedCmd());\n+        commands.put(CMD_WHOISAUDITOR, new WhoIsAuditorCmd());\n+        commands.put(CMD_LEDGERMETADATA, new LedgerMetadataCmd());\n+        commands.put(CMD_SIMPLETEST, new SimpleTestCmd());\n         commands.put(CMD_READLOG, new ReadLogCmd());\n         commands.put(CMD_READJOURNAL, new ReadJournalCmd());\n         commands.put(CMD_LASTMARK, new LastMarkCmd());\n@@ -667,19 +1043,17 @@ public void setConf(Configuration conf) throws Exception {\n         entriesPerPage = pageSize / 8;\n     }\n \n-    private static void printShellUsage() {\n+    private void printShellUsage() {\n         System.err.println(\"Usage: BookieShell [-conf configuration] <command>\");\n         System.err.println();\n-        System.err.println(\"       metaformat   [-nonInteractive] [-force]\");\n-        System.err.println(\"       bookieformat [-nonInteractive] [-force]\");\n-        System.err.println(\"       recover      <bookieSrc> [bookieDest]\");\n-        System.err.println(\"       ledger       [-meta] <ledger_id>\");\n-        System.err.println(\"       readlog      [-msg] <entry_log_id|entry_log_file_name>\");\n-        System.err.println(\"       readjournal  [-msg] <journal_id|journal_file_name>\");\n-        System.err.println(\"       autorecovery [-enable|-disable]\");\n-        System.err.println(\"       listbookies  [-readwrite|-readonly] [-hostnames]\");\n-        System.err.println(\"       lastmark\");\n-        System.err.println(\"       help\");\n+        List<String> commandNames = new ArrayList<String>();\n+        for (MyCommand c : commands.values()) {\n+            commandNames.add(\"       \" + c.getUsage());\n+        }\n+        Collections.sort(commandNames);\n+        for (String s : commandNames) {\n+            System.err.println(s);\n+        }\n     }\n \n     @Override\n@@ -702,16 +1076,17 @@ public int run(String[] args) throws Exception {\n     }\n \n     public static void main(String argv[]) throws Exception {\n+        BookieShell shell = new BookieShell();\n         if (argv.length <= 0) {\n-            printShellUsage();\n+            shell.printShellUsage();\n             System.exit(-1);\n         }\n \n         CompositeConfiguration conf = new CompositeConfiguration();\n         // load configuration\n         if (\"-conf\".equals(argv[0])) {\n             if (argv.length <= 1) {\n-                printShellUsage();\n+                shell.printShellUsage();\n                 System.exit(-1);\n             }\n             conf.addConfiguration(new PropertiesConfiguration(\n@@ -722,7 +1097,7 @@ public static void main(String argv[]) throws Exception {\n             argv = newArgv;\n         }\n \n-        BookieShell shell = new BookieShell();\n+\n         shell.setConf(conf);\n         int res = shell.run(argv);\n         System.exit(res);\n@@ -1002,4 +1377,30 @@ static String bytes2Hex(byte[] data) {\n         formatter.close();\n         return sb.toString();\n     }\n+\n+    private static int getOptionIntValue(CommandLine cmdLine, String option, int defaultVal) {\n+        if (cmdLine.hasOption(option)) {\n+            String val = cmdLine.getOptionValue(option);\n+            try {\n+                return Integer.parseInt(val);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid value for option \" + option + \" : \" + val);\n+                return defaultVal;\n+            }\n+        }\n+        return defaultVal;\n+    }\n+\n+    private static long getOptionLongValue(CommandLine cmdLine, String option, long defaultVal) {\n+        if (cmdLine.hasOption(option)) {\n+            String val = cmdLine.getOptionValue(option);\n+            try {\n+                return Long.parseLong(val);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid value for option \" + option + \" : \" + val);\n+                return defaultVal;\n+            }\n+        }\n+        return defaultVal;\n+    }\n }"},{"sha":"d006895e9e4eb7b7afb4fded35e7325d47e18783","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/404b83abafb94b62c0ced2ba7cf6878762643746/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/404b83abafb94b62c0ced2ba7cf6878762643746/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java?ref=404b83abafb94b62c0ced2ba7cf6878762643746","patch":"@@ -20,6 +20,8 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.replication.ReplicationException;\n \n+import java.util.Iterator;\n+\n /**\n  * Interface for marking ledgers which need to be rereplicated\n  */\n@@ -38,6 +40,14 @@ void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n     void markLedgerReplicated(long ledgerId)\n             throws ReplicationException.UnavailableException;\n \n+    /**\n+     * Get a list of all the ledgers which have been\n+     * marked for rereplication.\n+     *\n+     * @return an iterator which returns ledger ids\n+     */\n+    Iterator<Long> listLedgersToRereplicate();\n+\n     /**\n      * Acquire a underreplicated ledger for rereplication. The ledger\n      * should be locked, so that no other agent will receive the ledger"},{"sha":"06aeeb2ba396079f49dd53bb5a80619d5366acc9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":56,"deletions":1,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/404b83abafb94b62c0ced2ba7cf6878762643746/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/404b83abafb94b62c0ced2ba7cf6878762643746/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=404b83abafb94b62c0ced2ba7cf6878762643746","patch":"@@ -51,7 +51,12 @@\n import java.util.List;\n import java.util.Collections;\n import java.util.Arrays;\n-\n+import java.util.Deque;\n+import java.util.ArrayDeque;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.ArrayList;\n \n import java.util.regex.Pattern;\n import java.util.regex.Matcher;\n@@ -313,6 +318,56 @@ public void markLedgerReplicated(long ledgerId) throws ReplicationException.Unav\n         }\n     }\n \n+    @Override\n+    public Iterator<Long> listLedgersToRereplicate() {\n+        final Queue<String> queue = new LinkedList<String>();\n+        queue.add(urLedgerPath);\n+\n+        return new Iterator<Long>() {\n+            final Queue<Long> curBatch = new LinkedList<Long>();\n+\n+            @Override\n+            public void remove() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+                if (curBatch.size() > 0) {\n+                    return true;\n+                }\n+\n+                while (queue.size() > 0 && curBatch.size() == 0) {\n+                    String parent = queue.remove();\n+                    try {\n+                        for (String c : zkc.getChildren(parent,false)) {\n+                            String child = parent + \"/\" + c;\n+                            if (c.startsWith(\"urL\")) {\n+                                curBatch.add(getLedgerId(child));\n+                            } else {\n+                                queue.add(child);\n+                            }\n+                        }\n+                    } catch (InterruptedException ie) {\n+                        Thread.currentThread().interrupt();\n+                        return false;\n+                    } catch (KeeperException.NoNodeException nne) {\n+                        // ignore\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(\"Error reading list\", e);\n+                    }\n+                }\n+                return curBatch.size() > 0;\n+            }\n+\n+            @Override\n+            public Long next() {\n+                assert curBatch.size() > 0;\n+                return curBatch.remove();\n+            }\n+        };\n+    }\n+\n     private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watcher w)\n             throws KeeperException, InterruptedException {\n         if (depth == 4) {"}]}

