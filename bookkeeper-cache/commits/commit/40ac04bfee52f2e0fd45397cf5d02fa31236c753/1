{"sha":"40ac04bfee52f2e0fd45397cf5d02fa31236c753","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MGFjMDRiZmVlNTJmMmUwZmQ0NTM5N2NmNWQwMmZhMzEyMzZjNzUz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T15:14:52Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T15:14:52Z"},"message":"BOOKKEEPER-474:  BookieReadWriteTest#testShutdown doesn't make sense (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1418685 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"131153c296470e0007abc5ab72200baaba73f2d5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/131153c296470e0007abc5ab72200baaba73f2d5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/40ac04bfee52f2e0fd45397cf5d02fa31236c753","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/40ac04bfee52f2e0fd45397cf5d02fa31236c753","html_url":"https://github.com/apache/bookkeeper/commit/40ac04bfee52f2e0fd45397cf5d02fa31236c753","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/40ac04bfee52f2e0fd45397cf5d02fa31236c753/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"d0217c170a0906bdf3188cc89a290f6da0950146","url":"https://api.github.com/repos/apache/bookkeeper/commits/d0217c170a0906bdf3188cc89a290f6da0950146","html_url":"https://github.com/apache/bookkeeper/commit/d0217c170a0906bdf3188cc89a290f6da0950146"}],"stats":{"total":83,"additions":35,"deletions":48},"files":[{"sha":"6c79d088654b98c7986c61856e64306447b9f924","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/40ac04bfee52f2e0fd45397cf5d02fa31236c753/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/40ac04bfee52f2e0fd45397cf5d02fa31236c753/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=40ac04bfee52f2e0fd45397cf5d02fa31236c753","patch":"@@ -126,6 +126,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-431: Duplicate definition of COOKIES_NODE (uma via fpj)\n \n+\tBOOKKEEPER-474:  BookieReadWriteTest#testShutdown doesn't make sense (ivank via fpj)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"7fd5a9f87231f4d09f5e1a98ad4954954eec9acb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/40ac04bfee52f2e0fd45397cf5d02fa31236c753/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/40ac04bfee52f2e0fd45397cf5d02fa31236c753/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java?ref=40ac04bfee52f2e0fd45397cf5d02fa31236c753","patch":"@@ -78,4 +78,37 @@ public void operationComplete(int rc, Void result) {\n         channelFactory.releaseExternalResources();\n         executor.shutdown();\n     }\n+\n+    /**\n+     * Test race scenario found in {@link https://issues.apache.org/jira/browse/BOOKKEEPER-5}\n+     * where multiple clients try to connect a channel simultaneously. If not synchronised\n+     * correctly, this causes the netty channel to get orphaned.\n+     */\n+    @Test(timeout=60000)\n+    public void testConnectRace() {\n+        GenericCallback<Void> nullop = new GenericCallback<Void>() {\n+            @Override\n+            public void operationComplete(int rc, Void result) {\n+                // do nothing, we don't care about doing anything with the connection,\n+                // we just want to trigger it connecting.\n+            }\n+        };\n+        ClientSocketChannelFactory channelFactory\n+            = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n+                                                Executors.newCachedThreadPool());\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+\n+        InetSocketAddress addr = getBookie(0);\n+        AtomicLong bytesOutstanding = new AtomicLong(0);\n+        for (int i = 0; i < 100; i++) {\n+            PerChannelBookieClient client = new PerChannelBookieClient(executor, channelFactory,\n+                                                                       addr, bytesOutstanding);\n+            for (int j = i; j < 10; j++) {\n+                client.connectIfNeededAndDoOp(nullop);\n+            }\n+            client.close();\n+        }\n+        channelFactory.releaseExternalResources();\n+        executor.shutdown();\n+    }\n }\n\\ No newline at end of file"},{"sha":"fcf3e509e56072a734ed517294bcd1827742ecdf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/40ac04bfee52f2e0fd45397cf5d02fa31236c753/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/40ac04bfee52f2e0fd45397cf5d02fa31236c753/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=40ac04bfee52f2e0fd45397cf5d02fa31236c753","patch":"@@ -770,54 +770,6 @@ public void testReadWriteAsyncLength() throws IOException {\n         }\n     }\n \n-    @Test\n-    public void testShutdown() throws IOException {\n-        try {\n-            int numLedgers = 10000;\n-            int throttle = (((Double) Math.max(1.0, ((double) 10000/numLedgers))).intValue());\n-            bkc.getConf().setThrottleValue(throttle);\n-            LedgerHandle[] lhArray = new LedgerHandle[numLedgers];\n-            for(int i = 0; i < numLedgers; i++) {\n-                lhArray[i] = bkc.createLedger(3, 2, BookKeeper.DigestType.CRC32, new byte[] {'a', 'b'});\n-                LOG.debug(\"Ledger handle: \" + lhArray[i].getId());\n-            }\n-            LOG.info(\"Done creating ledgers.\");\n-            Random r = new Random();\n-\n-            for (int i = 0; i < numEntriesToWrite; i++) {\n-                ByteBuffer entry = ByteBuffer.allocate(4);\n-                entry.putInt(rng.nextInt(maxInt));\n-                entry.position(0);\n-\n-                entries.add(entry.array());\n-                entriesSize.add(entry.array().length);\n-\n-                int nextLh = r.nextInt(numLedgers);\n-                lhArray[nextLh].asyncAddEntry(entry.array(), this, sync);\n-            }\n-\n-            // wait for all entries to be acknowledged\n-            synchronized (sync) {\n-                while (sync.counter < numEntriesToWrite) {\n-                    LOG.debug(\"Entries counter = \" + sync.counter);\n-                    sync.wait();\n-                }\n-            }\n-\n-            LOG.debug(\"*** WRITE COMPLETE ***\");\n-            // close ledger\n-            for(int i = 0; i < lhArray.length; i++) {\n-                lhArray[i].close();\n-            }\n-        } catch (BKException e) {\n-            LOG.error(\"Test failed\", e);\n-            fail(\"Test failed due to BookKeeper exception\");\n-        } catch (InterruptedException e) {\n-            LOG.error(\"Test failed\", e);\n-            fail(\"Test failed due to interruption\");\n-        }\n-    }\n-\n     @Test\n     public void testReadFromOpenLedger() throws IOException {\n         try {"}]}

