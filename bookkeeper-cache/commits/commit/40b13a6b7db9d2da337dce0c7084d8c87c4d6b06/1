{"sha":"40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MGIxM2E2YjdkYjlkMmRhMzM3ZGNlMGM3MDg0ZDhjODdjNGQ2YjA2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-08-11T19:37:21Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-08-11T19:37:21Z"},"message":"BOOKKEEPER-29: BookieRecoveryTest fails intermittently (ivank, fpj via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1156766 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3de9e13d442b1201fda1c61bde405b37988236e6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3de9e13d442b1201fda1c61bde405b37988236e6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","html_url":"https://github.com/apache/bookkeeper/commit/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"0910d6cd7ffb1a7b78ab91a327715e936a3eb9e5","url":"https://api.github.com/repos/apache/bookkeeper/commits/0910d6cd7ffb1a7b78ab91a327715e936a3eb9e5","html_url":"https://github.com/apache/bookkeeper/commit/0910d6cd7ffb1a7b78ab91a327715e936a3eb9e5"}],"stats":{"total":155,"additions":85,"deletions":70},"files":[{"sha":"041c4315d77f5c16dbde3813c951f74857186660","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","patch":"@@ -28,3 +28,5 @@ BUGFIXES:\n \n   BOOKKEEPER-33: Add length and offset parameter to addEntry (ivank via fpj)\n \n+  BOOKKEEPER-29: BookieRecoveryTest fails intermittently (ivank, fpj via fpj)\n+"},{"sha":"9d9002fa165b0a180c5f467cdf7de60952e01a5c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","patch":"@@ -135,7 +135,6 @@ public void run() {\n     }\n     SyncThread syncThread = new SyncThread();\n     public Bookie(int port, String zkServers, File journalDirectory, File ledgerDirectories[]) throws IOException {\n-        instantiateZookeeperClient(port, zkServers);\n         this.journalDirectory = journalDirectory;\n         this.ledgerDirectories = ledgerDirectories;\n         entryLogger = new EntryLogger(ledgerDirectories, this);\n@@ -202,6 +201,7 @@ public Bookie(int port, String zkServers, File journalDirectory, File ledgerDire\n                 }\n             }\n         }\n+        instantiateZookeeperClient(port, zkServers);\n         setDaemon(true);\n         LOG.debug(\"I'm starting a bookie with journal directory \" + journalDirectory.getName());\n         start();"},{"sha":"940d1ee9c696deafc04567a2b6142db17ca573c9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","patch":"@@ -79,7 +79,7 @@ public void readBookies() {\n     }\n \n     public void readBookies(ChildrenCallback callback) {\n-        bk.getZkHandle().getChildren( BOOKIE_REGISTRATION_PATH, this, callback, null);\n+        bk.getZkHandle().getChildren(BOOKIE_REGISTRATION_PATH, this, callback, null);\n     }\n \n     @Override"},{"sha":"dfc63d7695ba0f5dd7829dc6179a8ee56e1777ee","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/apache/bookkeeper/blob/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTestClient.java?ref=40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","patch":"@@ -0,0 +1,61 @@\n+package org.apache.bookkeeper.client;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+import java.io.IOException;\n+import java.util.concurrent.Executors;\n+\n+import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n+import org.apache.bookkeeper.client.BKException.Code;\n+import org.apache.bookkeeper.proto.BookieClient;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+import org.apache.log4j.Logger;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n+import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n+\n+/**\n+ * Test BookKeeperClient which allows access to members we don't\n+ * wish to expose in the public API.\n+ */\n+public class BookKeeperTestClient extends BookKeeper {\n+    public BookKeeperTestClient(String servers)\n+            throws IOException, InterruptedException, KeeperException {\n+        super(servers);\n+    }\n+\n+    /**\n+     * Force a read to zookeeper to get list of bookies.\n+     *\n+     * @throws InterruptedException\n+     * @throws KeeperException\n+     */\n+    public void readBookiesBlocking()\n+            throws InterruptedException, KeeperException {\n+        bookieWatcher.readBookiesBlocking();\n+    }\n+}"},{"sha":"414dfa59f18fa0b6a761c98f715efb063a28c044","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","patch":"@@ -28,7 +28,7 @@\n import java.util.Collection;\n import java.util.List;\n \n-import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.log4j.Logger;\n@@ -64,7 +64,7 @@\n     List<BookieServer> bs = new ArrayList<BookieServer>();\n     Integer initialPort = 5000;\n     int numBookies;\n-    BookKeeper bkc;\n+    BookKeeperTestClient bkc;\n \n     public BaseTestCase(int numBookies) {\n         this.numBookies = numBookies;\n@@ -117,7 +117,7 @@ public void setUp() throws Exception {\n             bs.add(server);\n         }\n         zkc.close();\n-        bkc = new BookKeeper(\"127.0.0.1\");\n+        bkc = new BookKeeperTestClient(\"127.0.0.1\");\n         } catch(Exception e) {\n             LOG.error(\"Error setting up\", e);\n             throw e;"},{"sha":"e2238eefacef565e9b01fa05cc49d1ba0f06e33a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","patch":"@@ -31,7 +31,7 @@\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n@@ -121,8 +121,6 @@ public void testAsyncBK4() throws IOException {\n     \n     @Test\n     public void testBookieRecovery() throws Exception{\n-        bkc = new BookKeeper(\"127.0.0.1\");\n-        \n         //Shutdown all but 1 bookie\n         bs.get(0).shutdown();\n         bs.get(1).shutdown();\n@@ -157,7 +155,7 @@ public void testBookieRecovery() throws Exception{\n \n     void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n+            // Create a ledger\n             lh = bkc.createLedger(3, 2, digestType, ledgerPassword);\n \n             ledgerId = lh.getId();\n@@ -193,7 +191,7 @@ void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n \n             // open ledger\n             bkc.halt();\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            bkc = new BookKeeperTestClient(\"127.0.0.1\");\n             lh = bkc.openLedger(ledgerId, digestType, ledgerPassword);\n             LOG.debug(\"Number of entries written: \" + (lh.getLastAddConfirmed() + 1));\n             assertTrue(\"Verifying number of entries written\", lh.getLastAddConfirmed() == (numEntriesToWrite - 1));"},{"sha":"8d57b38bce8992d438fac933108e431238c1eeac","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":10,"deletions":22,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","patch":"@@ -119,7 +119,6 @@ public void testOpenException() throws KeeperException, IOException, Interrupted\n      */\n     @Test\n     public void testStreamingClients() throws IOException, KeeperException, BKException, InterruptedException {\n-        bkc = new BookKeeper(\"127.0.0.1\");\n         lh = bkc.createLedger(digestType, ledgerPassword);\n         // write a string so that we cna\n         // create a buffer of a single bytes\n@@ -169,8 +168,7 @@ public void testStreamingClients() throws IOException, KeeperException, BKExcept\n     @Test\n     public void testReadWriteAsyncSingleClient() throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -255,8 +253,7 @@ public void testReadWriteAsyncSingleClient() throws IOException {\n     @Test\n     public void testReadWriteRangeAsyncSingleClient() throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -423,9 +420,8 @@ public void testReadWriteAsyncSingleClientThrottle() throws\n                        \n             Integer throttle = 100;\n             ThrottleTestCallback tcb = new ThrottleTestCallback(throttle);\n-            // Create a BookKeeper client and a ledger\n+            // Create a ledger\n             System.setProperty(\"throttle\", throttle.toString());\n-            bkc = new BookKeeper(\"127.0.0.1\");\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -519,8 +515,7 @@ public void testSyncReadAsyncWriteStringsSingleClient() throws IOException {\n         String charset = \"utf-8\";\n         LOG.debug(\"Default charset: \" + Charset.defaultCharset());\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -593,8 +588,7 @@ public void testSyncReadAsyncWriteStringsSingleClient() throws IOException {\n     @Test\n     public void testReadWriteSyncSingleClient() throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -640,8 +634,7 @@ public void testReadWriteSyncSingleClient() throws IOException {\n     @Test\n     public void testReadWriteZero() throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -688,8 +681,7 @@ public void testReadWriteZero() throws IOException {\n     @Test\n     public void testMultiLedger() throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             lh2 = bkc.createLedger(digestType, ledgerPassword);\n \n@@ -748,8 +740,7 @@ public void testMultiLedger() throws IOException {\n     @Test\n     public void testReadWriteAsyncLength() throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -804,7 +795,6 @@ public void testShutdown() throws IOException {\n             int numLedgers = 10000;\n             Long throttle = (((Double) Math.max(1.0, ((double) 10000/numLedgers))).longValue());\n             System.setProperty(\"throttle\", throttle.toString());\n-            bkc = new BookKeeper(\"127.0.0.1\");\n             LedgerHandle[] lhArray = new LedgerHandle[numLedgers];\n             for(int i = 0; i < numLedgers; i++){\n                 lhArray[i] = bkc.createLedger(3, 2, BookKeeper.DigestType.CRC32, new byte[] {'a', 'b'});\n@@ -852,8 +842,7 @@ public void testShutdown() throws IOException {\n     \n     public void testReadFromOpenLedger() throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();\n@@ -931,8 +920,7 @@ public void testReadFromOpenLedger() throws IOException {\n     @Test\n     public void testLastConfirmedAdd() throws IOException {\n         try {\n-            // Create a BookKeeper client and a ledger\n-            bkc = new BookKeeper(\"127.0.0.1\");\n+            // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n             // bkc.initMessageDigest(\"SHA1\");\n             ledgerId = lh.getId();"},{"sha":"d182fd19659b0f336c73a1ccf6a164ce94208be4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java","status":"modified","additions":4,"deletions":38,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/40b13a6b7db9d2da337dce0c7084d8c87c4d6b06/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieRecoveryTest.java?ref=40b13a6b7db9d2da337dce0c7084d8c87c4d6b06","patch":"@@ -48,7 +48,7 @@\n /**\n  * This class tests the bookie recovery admin functionality.\n  */\n-public class BookieRecoveryTest extends BaseTestCase implements Watcher {\n+public class BookieRecoveryTest extends BaseTestCase {\n     static Logger LOG = Logger.getLogger(BookieRecoveryTest.class);\n \n     // Object used for synchronizing async method calls\n@@ -77,7 +77,7 @@ public void recoverComplete(int rc, Object ctx) {\n \n     // Objects to use for this jUnit test.\n     DigestType digestType;\n-    SyncObject sync, zkSync;\n+    SyncObject sync;\n     BookieRecoverCallback bookieRecoverCb;\n     BookKeeperTools bkTools;\n \n@@ -95,7 +95,6 @@ public void setUp() throws Exception {\n         System.setProperty(\"digestType\", digestType.toString());\n         System.setProperty(\"passwd\", \"\");\n         sync = new SyncObject();\n-        zkSync = new SyncObject();\n         bookieRecoverCb = new BookieRecoverCallback();\n         bkTools = new BookKeeperTools(HOSTPORT);\n     }\n@@ -163,24 +162,18 @@ private void startNewBookie(int port)\n         tmpDirs.add(f);\n         f.delete();\n         f.mkdir();\n-        zkSync.value = false;\n-        bkc.getZkHandle().getChildren(\"/ledgers/available\", this);\n         \n         BookieServer server = new BookieServer(port, HOSTPORT, f, new File[] { f });\n         server.start();\n         bs.add(server);\n         \n-        while(!zkSync.value){\n+        while(bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null){\n             Thread.sleep(500);\n         }\n         \n+        bkc.readBookiesBlocking();\n         LOG.info(\"New bookie on port \" + port + \" has been created.\");\n     }\n-\n-    @Override\n-    public void process(WatchedEvent event) {\n-        zkSync.value = true;\n-    }\n     \n     /**\n      * Helper method to verify that we can read the recovered ledger entries.\n@@ -234,16 +227,9 @@ public void testAsyncBookieRecoveryToSpecificBookie() throws Exception {\n         writeEntriestoLedgers(numMsgs, 0, lhs);\n \n         // Shutdown the first bookie server\n-        zkSync.value = false;\n-        bkc.getZkHandle().getChildren(\"/ledgers/available\", this);\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n         bs.get(0).shutdown();\n         bs.remove(0);\n-        \n-        // Block until I get a notification \n-        while(!zkSync.value){\n-            Thread.sleep(100);\n-        }\n \n         // Startup a new bookie server\n         int newBookiePort = initialPort + numBookies;\n@@ -294,17 +280,10 @@ public void testAsyncBookieRecoveryToRandomBookies() throws Exception {\n         writeEntriestoLedgers(numMsgs, 0, lhs);\n \n         // Shutdown the first bookie server\n-        zkSync.value = false;\n-        bkc.getZkHandle().getChildren(\"/ledgers/available\", this);\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n         bs.get(0).shutdown();\n         bs.remove(0);\n         \n-        // Block until I get a notification \n-        while(!zkSync.value){\n-            Thread.sleep(100);\n-        }\n-        \n         // Startup three new bookie servers\n         for (int i = 0; i < 3; i++) {\n             int newBookiePort = initialPort + numBookies + i;\n@@ -355,16 +334,9 @@ public void testSyncBookieRecoveryToSpecificBookie() throws Exception {\n         writeEntriestoLedgers(numMsgs, 0, lhs);\n \n         // Shutdown the first bookie server\n-        zkSync.value = false;\n-        bkc.getZkHandle().getChildren(\"/ledgers/available\", this);\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n         bs.get(0).shutdown();\n         bs.remove(0);\n-\n-        // Block until I get a notification \n-        while(!zkSync.value){\n-            Thread.sleep(100);\n-        }\n         \n         // Startup a new bookie server\n         int newBookiePort = initialPort + numBookies;\n@@ -406,16 +378,10 @@ public void testSyncBookieRecoveryToRandomBookies() throws Exception {\n         writeEntriestoLedgers(numMsgs, 0, lhs);\n \n         // Shutdown the first bookie server\n-        zkSync.value = false;\n-        bkc.getZkHandle().getChildren(\"/ledgers/available\", this);\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n         bs.get(0).shutdown();\n         bs.remove(0);\n \n-        // Block until I get a notification \n-        while(!zkSync.value){\n-            Thread.sleep(100);\n-        }\n         // Startup three new bookie servers\n         for (int i = 0; i < 3; i++) {\n             int newBookiePort = initialPort + numBookies + i;"}]}

