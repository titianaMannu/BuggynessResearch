{"sha":"40de140171a26b0943909900d6af4a73b31a641e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MGRlMTQwMTcxYTI2YjA5NDM5MDk5MDBkNmFmNGE3M2IzMWE2NDFl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-10T09:42:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-10T09:42:19Z"},"message":"BOOKKEEPER-540: #stopServingSubscriber when channel is disconnected. (Fangmin via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1431235 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"480ac60c628c45afebaf043f7b1dd2971a2b88ef","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/480ac60c628c45afebaf043f7b1dd2971a2b88ef"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/40de140171a26b0943909900d6af4a73b31a641e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/40de140171a26b0943909900d6af4a73b31a641e","html_url":"https://github.com/apache/bookkeeper/commit/40de140171a26b0943909900d6af4a73b31a641e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/40de140171a26b0943909900d6af4a73b31a641e/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"a9b851b3afe2d8031ad426fdd2e579ba003fe02c","url":"https://api.github.com/repos/apache/bookkeeper/commits/a9b851b3afe2d8031ad426fdd2e579ba003fe02c","html_url":"https://github.com/apache/bookkeeper/commit/a9b851b3afe2d8031ad426fdd2e579ba003fe02c"}],"stats":{"total":35,"additions":34,"deletions":1},"files":[{"sha":"d8dc79df2aae7bb51180acae6d0e10403bea7469","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/40de140171a26b0943909900d6af4a73b31a641e/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/40de140171a26b0943909900d6af4a73b31a641e/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=40de140171a26b0943909900d6af4a73b31a641e","patch":"@@ -230,6 +230,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-543: Read zk host list in a wrong way in hedwig server (Fangmin via sijie)\n \n+        BOOKKEEPER-540: #stopServingSubscriber when channel is disconnected. (Fangmin via sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-467: Allocate ports for testing dynamically (ivank)"},{"sha":"3e35484d8a4c55b76f3703e85e993ef3435d5529","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/40de140171a26b0943909900d6af4a73b31a641e/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/40de140171a26b0943909900d6af4a73b31a641e/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=40de140171a26b0943909900d6af4a73b31a641e","patch":"@@ -51,6 +51,7 @@\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.common.UnexpectedError;\n+import org.apache.hedwig.server.handlers.SubscriptionChannelManager.SubChannelDisconnectedListener;\n import org.apache.hedwig.server.netty.ServerStats;\n import org.apache.hedwig.server.persistence.CancelScanRequest;\n import org.apache.hedwig.server.persistence.Factory;\n@@ -62,7 +63,7 @@\n import org.apache.hedwig.util.Callback;\n import static org.apache.hedwig.util.VarArgs.va;\n \n-public class FIFODeliveryManager implements Runnable, DeliveryManager {\n+public class FIFODeliveryManager implements Runnable, DeliveryManager, SubChannelDisconnectedListener {\n \n     protected static final Logger logger = LoggerFactory.getLogger(FIFODeliveryManager.class);\n \n@@ -881,4 +882,10 @@ public void performRequest() {\n         }\n     }\n \n+    @Override\n+    public void onSubChannelDisconnected(TopicSubscriber topicSubscriber) {\n+        stopServingSubscriber(topicSubscriber.getTopic(), topicSubscriber.getSubscriberId(),\n+                null, NOP_CALLBACK, null);\n+    }\n+\n }"},{"sha":"5b1d85d8bc3e3b8e000bb9e54b232fbdd4be42ce","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscriptionChannelManager.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/40de140171a26b0943909900d6af4a73b31a641e/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscriptionChannelManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/40de140171a26b0943909900d6af4a73b31a641e/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscriptionChannelManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscriptionChannelManager.java?ref=40de140171a26b0943909900d6af4a73b31a641e","patch":"@@ -17,7 +17,9 @@\n  */\n package org.apache.hedwig.server.handlers;\n \n+import java.util.ArrayList;\n import java.util.HashSet;\n+import java.util.List;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n \n@@ -56,12 +58,29 @@ public void operationComplete(ChannelFuture future) throws Exception {\n         }\n     };\n \n+    final List<SubChannelDisconnectedListener> listeners;\n+\n+    public interface SubChannelDisconnectedListener {\n+        /**\n+         * Act on a particular topicSubscriber being disconnected\n+         * @param topicSubscriber\n+         */\n+        public void onSubChannelDisconnected(TopicSubscriber topicSubscriber);\n+    }\n+\n     final ConcurrentHashMap<TopicSubscriber, Channel> sub2Channel;\n     final ConcurrentHashMap<Channel, Set<TopicSubscriber>> channel2sub;\n \n     public SubscriptionChannelManager() {\n         sub2Channel = new ConcurrentHashMap<TopicSubscriber, Channel>();\n         channel2sub = new ConcurrentHashMap<Channel, Set<TopicSubscriber>>();\n+        listeners = new ArrayList<SubChannelDisconnectedListener>();\n+    }\n+\n+    public void addSubChannelDisconnectedListener(SubChannelDisconnectedListener listener) {\n+        if (null != listener) {\n+            listeners.add(listener);\n+        }\n     }\n \n     @Override\n@@ -79,6 +98,9 @@ public void channelDisconnected(Channel channel) {\n                             va(channel.getRemoteAddress(), topicSub));\n                 // remove entry only currently mapped to given value.\n                 sub2Channel.remove(topicSub, channel);\n+                for (SubChannelDisconnectedListener listener : listeners) {\n+                    listener.onSubChannelDisconnected(topicSub);\n+                }\n             }\n         }\n     }"},{"sha":"16bf417ff84598c995b10142ac42ec9d340b99f4","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/40de140171a26b0943909900d6af4a73b31a641e/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/40de140171a26b0943909900d6af4a73b31a641e/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=40de140171a26b0943909900d6af4a73b31a641e","patch":"@@ -64,6 +64,7 @@\n import org.apache.hedwig.server.handlers.PublishHandler;\n import org.apache.hedwig.server.handlers.SubscribeHandler;\n import org.apache.hedwig.server.handlers.SubscriptionChannelManager;\n+import org.apache.hedwig.server.handlers.SubscriptionChannelManager.SubChannelDisconnectedListener;\n import org.apache.hedwig.server.handlers.UnsubscribeHandler;\n import org.apache.hedwig.server.jmx.HedwigMBeanRegistry;\n import org.apache.hedwig.server.meta.MetadataManagerFactory;\n@@ -422,6 +423,7 @@ public void run() {\n                     // UmbrellaHandler) once so they can be shared by\n                     // both the SSL and non-SSL channels.\n                     SubscriptionChannelManager subChannelMgr = new SubscriptionChannelManager();\n+                    subChannelMgr.addSubChannelDisconnectedListener((SubChannelDisconnectedListener) dm);\n                     Map<OperationType, Handler> handlers =\n                         initializeNettyHandlers(tm, dm, pm, sm, subChannelMgr);\n                     // Initialize Netty for the regular non-SSL channels"}]}

