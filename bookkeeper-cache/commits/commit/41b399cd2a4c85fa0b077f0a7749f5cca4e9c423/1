{"sha":"41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MWIzOTljZDJhNGM4NWZhMGIwNzdmMGE3NzQ5ZjVjY2E0ZTljNDIz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T10:10:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T10:10:17Z"},"message":"BOOKKEEPER-339: Let hedwig cpp client support returning message seq id for publish requests. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1369767 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d20bc498920bb7f72428e473e3eab022bfdc0cb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2d20bc498920bb7f72428e473e3eab022bfdc0cb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","html_url":"https://github.com/apache/bookkeeper/commit/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4088f7ac7b700588a935485b0a9723a36cc995f3","url":"https://api.github.com/repos/apache/bookkeeper/commits/4088f7ac7b700588a935485b0a9723a36cc995f3","html_url":"https://github.com/apache/bookkeeper/commit/4088f7ac7b700588a935485b0a9723a36cc995f3"}],"stats":{"total":352,"additions":314,"deletions":38},"files":[{"sha":"fafb4f215685a09e188c6bfcaa3f582a4bd68e20","filename":"CHANGES.txt","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -6,9 +6,15 @@ Trunk (unreleased changes)\n \n     IMPROVEMENTS:\n \n-      BOOKKEEPER-203: improve ledger manager interface to remove zookeeper dependency on metadata operations. (sijie via ivank)\n+      bookkeeper-server:\n+\n+        BOOKKEEPER-203: improve ledger manager interface to remove zookeeper dependency on metadata operations. (sijie via ivank)\n+\n+        BOOKKEEPER-303: LedgerMetadata should serialized using protobufs (ivank)\n+\n+      hedwig-client:\n \n-      BOOKKEEPER-303: LedgerMetadata should serialized using protobufs (ivank)\n+        BOOKKEEPER-339: Let hedwig cpp client support returning message seq id for publish requests. (sijie via ivank)\n \n   Backward compatible changes:\n "},{"sha":"f2cc4238336df88dbc2e57f7ca704fcfcdf135b7","filename":"hedwig-client/src/main/cpp/inc/hedwig/callback.h","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/inc/hedwig/callback.h","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/inc/hedwig/callback.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/callback.h?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -29,6 +29,16 @@\n #endif\n \n namespace Hedwig {\n+\n+  template<class R>\n+  class Callback {\n+  public:\n+    virtual void operationComplete(const R& result) = 0;\n+    virtual void operationFailed(const std::exception& exception) = 0;\n+\n+    virtual ~Callback() {};\n+  };\n+\n   class OperationCallback {\n   public:\n     virtual void operationComplete() = 0;"},{"sha":"ea08838df9130d648be5984a38ca6991287cc8cc","filename":"hedwig-client/src/main/cpp/inc/hedwig/publish.h","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/inc/hedwig/publish.h","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/inc/hedwig/publish.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/publish.h?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -27,6 +27,10 @@\n \n namespace Hedwig {\n \n+  typedef std::tr1::shared_ptr<PublishResponse> PublishResponsePtr;\n+  typedef Callback<PublishResponsePtr> PublishResponseCallback;\n+  typedef std::tr1::shared_ptr<PublishResponseCallback> PublishResponseCallbackPtr;\n+\n   /**\n      Interface for publishing to a hedwig instance.\n   */\n@@ -38,9 +42,9 @@ namespace Hedwig {\n        @param topic Topic to publish to.\n        @param message Data to publish for topic.\n     */\n-    virtual void publish(const std::string& topic, const std::string& message) = 0;\n+    virtual PublishResponsePtr publish(const std::string& topic, const std::string& message) = 0;\n     \n-    virtual void publish(const std::string& topic, const Message& message) = 0;\n+    virtual PublishResponsePtr publish(const std::string& topic, const Message& message) = 0;\n \n     /** \n \tAsynchronously publish message for topic. \n@@ -58,6 +62,9 @@ namespace Hedwig {\n     \n     virtual void asyncPublish(const std::string& topic, const Message& message, const OperationCallbackPtr& callback) = 0;\n \n+    virtual void asyncPublishWithResponse(const std::string& topic, const Message& messsage,\n+                                          const PublishResponseCallbackPtr& callback) = 0;\n+\n     virtual ~Publisher() {}\n   };\n };"},{"sha":"ddb5d92a97bdd65958ba83c244aab7695da53fa7","filename":"hedwig-client/src/main/cpp/lib/clientimpl.h","status":"modified","additions":96,"deletions":2,"changes":98,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/clientimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/clientimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.h?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -44,9 +44,103 @@\n namespace Hedwig {\n   const int DEFAULT_SYNC_REQUEST_TIMEOUT = 5000;\n \n+  template<class R>\n+  class SyncCallback : public Callback<R> {\n+  public:\n+    SyncCallback(int timeout) : response(PENDING), timeout(timeout) {}\n+    virtual void operationComplete(const R& r) {\n+      if (response == TIMEOUT) {\n+        return;\n+      }\n+\n+      {\n+        boost::lock_guard<boost::mutex> lock(mut);\n+        response = SUCCESS;\n+        result = r;\n+      }\n+      cond.notify_all();\n+    }\n+\n+    virtual void operationFailed(const std::exception& exception) {\n+      if (response == TIMEOUT) {\n+        return;\n+      }\n+\n+      {\n+        boost::lock_guard<boost::mutex> lock(mut);\n+\n+        if (typeid(exception) == typeid(ChannelConnectException)) {\n+          response = NOCONNECT;\n+        } else if (typeid(exception) == typeid(ServiceDownException)) {\n+          response = SERVICEDOWN;\n+        } else if (typeid(exception) == typeid(AlreadySubscribedException)) {\n+          response = ALREADY_SUBSCRIBED;\n+        } else if (typeid(exception) == typeid(NotSubscribedException)) {\n+          response = NOT_SUBSCRIBED;\n+        } else {\n+          response = UNKNOWN;\n+        }\n+      }\n+      cond.notify_all();\n+    }\n+\n+    void wait() {\n+      boost::unique_lock<boost::mutex> lock(mut);\n+      while(response==PENDING) {\n+        if (cond.timed_wait(lock, boost::posix_time::milliseconds(timeout)) == false) {\n+          response = TIMEOUT;\n+        }\n+      }\n+    }\n+\n+    void throwExceptionIfNeeded() {\n+      switch (response) {\n+        case SUCCESS:\n+          break;\n+        case NOCONNECT:\n+          throw CannotConnectException();\n+          break;\n+        case SERVICEDOWN:\n+          throw ServiceDownException();\n+          break;\n+        case ALREADY_SUBSCRIBED:\n+          throw AlreadySubscribedException();\n+          break;\n+        case NOT_SUBSCRIBED:\n+          throw NotSubscribedException();\n+          break;\n+        case TIMEOUT:\n+          throw ClientTimeoutException();\n+          break;\n+        default:\n+          throw ClientException();\n+          break;\n+      }\n+    }\n+\n+    R getResult() { return result; }\n+    \n+  private:\n+    enum { \n+      PENDING, \n+      SUCCESS,\n+      NOCONNECT,\n+      SERVICEDOWN,\n+      NOT_SUBSCRIBED,\n+      ALREADY_SUBSCRIBED,\n+      TIMEOUT,\n+      UNKNOWN\n+    } response;\n+\n+    boost::condition_variable cond;\n+    boost::mutex mut;\n+    int timeout;\n+    R result;\n+  };\n+\n   class SyncOperationCallback : public OperationCallback {\n   public:\n-  SyncOperationCallback(int timeout) : response(PENDING), timeout(timeout) {}\n+    SyncOperationCallback(int timeout) : response(PENDING), timeout(timeout) {}\n     virtual void operationComplete();\n     virtual void operationFailed(const std::exception& exception);\n     \n@@ -64,7 +158,7 @@ namespace Hedwig {\n       TIMEOUT,\n       UNKNOWN\n     } response;\n-    \n+\n     boost::condition_variable cond;\n     boost::mutex mut;\n     int timeout;"},{"sha":"4782b607a64661a22f15dea8a1d2960776067d47","filename":"hedwig-client/src/main/cpp/lib/data.cpp","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/data.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/data.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.cpp?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -28,7 +28,8 @@ static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n \n using namespace Hedwig;\n \n-PubSubDataPtr PubSubData::forPublishRequest(long txnid, const std::string& topic, const Message& body, const OperationCallbackPtr& callback) {\n+PubSubDataPtr PubSubData::forPublishRequest(long txnid, const std::string& topic, const Message& body,\n+                                            const ResponseCallbackPtr& callback) {\n   PubSubDataPtr ptr(new PubSubData());\n   ptr->type = PUBLISH;\n   ptr->txnid = txnid;\n@@ -38,7 +39,8 @@ PubSubDataPtr PubSubData::forPublishRequest(long txnid, const std::string& topic\n   return ptr;\n }\n \n-PubSubDataPtr PubSubData::forSubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic, const OperationCallbackPtr& callback, const SubscriptionOptions& options) {\n+PubSubDataPtr PubSubData::forSubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic,\n+                                              const ResponseCallbackPtr& callback, const SubscriptionOptions& options) {\n   PubSubDataPtr ptr(new PubSubData());\n   ptr->type = SUBSCRIBE;\n   ptr->txnid = txnid;\n@@ -49,7 +51,8 @@ PubSubDataPtr PubSubData::forSubscribeRequest(long txnid, const std::string& sub\n   return ptr;  \n }\n \n-PubSubDataPtr PubSubData::forUnsubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic, const OperationCallbackPtr& callback) {\n+PubSubDataPtr PubSubData::forUnsubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic,\n+                                                const ResponseCallbackPtr& callback) {\n   PubSubDataPtr ptr(new PubSubData());\n   ptr->type = UNSUBSCRIBE;\n   ptr->txnid = txnid;\n@@ -155,11 +158,11 @@ void PubSubData::clearTriedServers() {\n   triedservers.clear();\n }\n \n-OperationCallbackPtr& PubSubData::getCallback() {\n+ResponseCallbackPtr& PubSubData::getCallback() {\n   return callback;\n }\n \n-void PubSubData::setCallback(const OperationCallbackPtr& callback) {\n+void PubSubData::setCallback(const ResponseCallbackPtr& callback) {\n   this->callback = callback;\n }\n "},{"sha":"21f527baecd3925665e514e000990e99b1963bef","filename":"hedwig-client/src/main/cpp/lib/data.h","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/data.h","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/data.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.h?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -49,6 +49,9 @@ namespace Hedwig {\n     boost::mutex mutex;\n   };\n \n+  typedef Callback<ResponseBody> ResponseCallback;\n+  typedef std::tr1::shared_ptr<ResponseCallback> ResponseCallbackPtr;\n+\n   class PubSubData;\n   typedef boost::shared_ptr<PubSubData> PubSubDataPtr;\n   typedef boost::shared_ptr<PubSubRequest> PubSubRequestPtr;\n@@ -61,10 +64,12 @@ namespace Hedwig {\n   class PubSubData {\n   public:\n     // to be used for publish\n-    static PubSubDataPtr forPublishRequest(long txnid, const std::string& topic, const Message& body, const OperationCallbackPtr& callback);\n+    static PubSubDataPtr forPublishRequest(long txnid, const std::string& topic, const Message& body,\n+                                           const ResponseCallbackPtr& callback);\n     static PubSubDataPtr forSubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic,\n-\t\t\t\t\t     const OperationCallbackPtr& callback, const SubscriptionOptions& options);\n-    static PubSubDataPtr forUnsubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic, const OperationCallbackPtr& callback);\n+                                             const ResponseCallbackPtr& callback, const SubscriptionOptions& options);\n+    static PubSubDataPtr forUnsubscribeRequest(long txnid, const std::string& subscriberid, const std::string& topic,\n+                                               const ResponseCallbackPtr& callback);\n     static PubSubDataPtr forConsumeRequest(long txnid, const std::string& subscriberid, const std::string& topic, const MessageSeqId msgid);\n \n     ~PubSubData();\n@@ -80,8 +85,8 @@ namespace Hedwig {\n     void setMessageBound(int messageBound);\n \n     const PubSubRequestPtr getRequest();\n-    void setCallback(const OperationCallbackPtr& callback);\n-    OperationCallbackPtr& getCallback();\n+    void setCallback(const ResponseCallbackPtr& callback);\n+    ResponseCallbackPtr& getCallback();\n     const SubscriptionOptions& getSubscriptionOptions() const;\n \n     void addTriedServer(HostAddress& h);\n@@ -98,7 +103,7 @@ namespace Hedwig {\n     Message body;\n     bool shouldClaim;\n     int messageBound;\n-    OperationCallbackPtr callback;\n+    ResponseCallbackPtr callback;\n     SubscriptionOptions options;\n     MessageSeqId msgid;\n     std::tr1::unordered_set<HostAddress, HostAddressHash > triedservers;"},{"sha":"07e8427dbcb756931301c36fbf532b2b13871ce7","filename":"hedwig-client/src/main/cpp/lib/publisherimpl.cpp","status":"modified","additions":50,"deletions":12,"changes":62,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/publisherimpl.cpp?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -28,6 +28,26 @@ static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n \n using namespace Hedwig;\n \n+PublishResponseAdaptor::PublishResponseAdaptor(const PublishResponseCallbackPtr& pubCallback)\n+  : pubCallback(pubCallback) {\n+}\n+\n+void PublishResponseAdaptor::operationComplete(const ResponseBody& result) {\n+  if (result.has_publishresponse()) {\n+    PublishResponse *resp = new PublishResponse();\n+    resp->CopyFrom(result.publishresponse());\n+    PublishResponsePtr respPtr(resp);\n+    pubCallback->operationComplete(respPtr);\n+  } else {\n+    // return empty response\n+    pubCallback->operationComplete(PublishResponsePtr());\n+  }\n+}\n+\n+void PublishResponseAdaptor::operationFailed(const std::exception& exception) {\n+  pubCallback->operationFailed(exception);\n+}\n+\n PublishWriteCallback::PublishWriteCallback(const ClientImplPtr& client, const PubSubDataPtr& data) : client(client), data(data) {}\n \n void PublishWriteCallback::operationComplete() {\n@@ -44,28 +64,28 @@ PublisherImpl::PublisherImpl(const ClientImplPtr& client)\n   : client(client) {\n }\n \n-void PublisherImpl::publish(const std::string& topic, const Message& message) {\n-  SyncOperationCallback* cb = new SyncOperationCallback(client->getConfiguration().getInt(Configuration::SYNC_REQUEST_TIMEOUT, \n-\t\t\t\t\t\t\t\t\t\t\t  DEFAULT_SYNC_REQUEST_TIMEOUT));\n-  OperationCallbackPtr callback(cb);\n-  asyncPublish(topic, message, callback);\n+PublishResponsePtr PublisherImpl::publish(const std::string& topic, const Message& message) {\n+  SyncCallback<PublishResponsePtr>* cb =\n+    new SyncCallback<PublishResponsePtr>(client->getConfiguration().getInt(Configuration::SYNC_REQUEST_TIMEOUT, \n+\t\t\t\t\t\t\t\t\t\t\t                                                     DEFAULT_SYNC_REQUEST_TIMEOUT));\n+  PublishResponseCallbackPtr callback(cb);\n+  asyncPublishWithResponse(topic, message, callback);\n   cb->wait();\n   \n   cb->throwExceptionIfNeeded();  \n+  return cb->getResult();\n }\n \n-void PublisherImpl::publish(const std::string& topic, const std::string& message) {\n+PublishResponsePtr PublisherImpl::publish(const std::string& topic, const std::string& message) {\n   Message msg;\n   msg.set_body(message);\n-  publish(topic, msg);\n+  return publish(topic, msg);\n }\n \n void PublisherImpl::asyncPublish(const std::string& topic, const Message& message, const OperationCallbackPtr& callback) {\n   // use release after callback to release the channel after the callback is called\n-  PubSubDataPtr data = PubSubData::forPublishRequest(client->counter().next(), topic, message, callback);\n-  \n-  DuplexChannelPtr channel = client->getChannel(topic);\n-  doPublish(channel, data);\n+  ResponseCallbackPtr respCallback(new ResponseCallbackAdaptor(callback));\n+  doPublish(topic, message, respCallback);\n }\n \n void PublisherImpl::asyncPublish(const std::string& topic, const std::string& message, const OperationCallbackPtr& callback) {\n@@ -74,6 +94,20 @@ void PublisherImpl::asyncPublish(const std::string& topic, const std::string& me\n   asyncPublish(topic, msg, callback);\n }\n \n+void PublisherImpl::asyncPublishWithResponse(const std::string& topic, const Message& message,\n+                                             const PublishResponseCallbackPtr& callback) {\n+  ResponseCallbackPtr respCallback(new PublishResponseAdaptor(callback));\n+  doPublish(topic, message, respCallback);\n+}\n+\n+void PublisherImpl::doPublish(const std::string& topic, const Message& message, const ResponseCallbackPtr& callback) {\n+  PubSubDataPtr data = PubSubData::forPublishRequest(client->counter().next(), topic, message, callback);\n+  \n+  DuplexChannelPtr channel = client->getChannel(topic);\n+\n+  doPublish(channel, data);\n+}\n+\n void PublisherImpl::doPublish(const DuplexChannelPtr& channel, const PubSubDataPtr& data) {\n   channel->storeTransaction(data);\n   \n@@ -84,7 +118,11 @@ void PublisherImpl::doPublish(const DuplexChannelPtr& channel, const PubSubDataP\n void PublisherImpl::messageHandler(const PubSubResponsePtr& m, const PubSubDataPtr& txn) {\n   switch (m->statuscode()) {\n   case SUCCESS:\n-    txn->getCallback()->operationComplete();\n+    if (m->has_responsebody()) {\n+      txn->getCallback()->operationComplete(m->responsebody());\n+    } else {\n+      txn->getCallback()->operationComplete(ResponseBody());\n+    }\n     break;\n   case SERVICE_DOWN:\n     LOG4CXX_ERROR(logger, \"Server responsed with SERVICE_DOWN for \" << txn->getTxnId());"},{"sha":"16afa152636d40e0d5db28cd1117b183af79ebf7","filename":"hedwig-client/src/main/cpp/lib/publisherimpl.h","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/publisherimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/publisherimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/publisherimpl.h?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -21,8 +21,19 @@\n #include <hedwig/publish.h>\n #include <hedwig/callback.h>\n #include \"clientimpl.h\"\n+#include \"data.h\"\n \n namespace Hedwig {\n+  class PublishResponseAdaptor : public ResponseCallback {\n+  public:\n+    PublishResponseAdaptor(const PublishResponseCallbackPtr& pubCallback);\n+\n+    void operationComplete(const ResponseBody & result);\n+    void operationFailed(const std::exception& exception);\n+  private:\n+    PublishResponseCallbackPtr pubCallback;\n+  };\n+\n   class PublishWriteCallback : public OperationCallback {\n   public:\n     PublishWriteCallback(const ClientImplPtr& client, const PubSubDataPtr& data);\n@@ -38,14 +49,17 @@ namespace Hedwig {\n   public:\n     PublisherImpl(const ClientImplPtr& client);\n \n-    void publish(const std::string& topic, const std::string& message);\n-    void publish(const std::string& topic, const Message& message);\n+    PublishResponsePtr publish(const std::string& topic, const std::string& message);\n+    PublishResponsePtr publish(const std::string& topic, const Message& message);\n \n     void asyncPublish(const std::string& topic, const std::string& message, const OperationCallbackPtr& callback);\n     void asyncPublish(const std::string& topic, const Message& message, const OperationCallbackPtr& callback);\n+    void asyncPublishWithResponse(const std::string& topic, const Message& messsage,\n+                                  const PublishResponseCallbackPtr& callback);\n     \n     void messageHandler(const PubSubResponsePtr& m, const PubSubDataPtr& txn);\n \n+    void doPublish(const std::string& topic, const Message& message, const ResponseCallbackPtr& callback);\n     void doPublish(const DuplexChannelPtr& channel, const PubSubDataPtr& data);\n \n   private:"},{"sha":"44ef117c32d34079239e13ba48ba5b2c0f634e81","filename":"hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -137,7 +137,7 @@ SubscriberReconnectCallback::SubscriberReconnectCallback(const ClientImplPtr& cl\n   : client(client), origData(origData) {\n }\n \n-void SubscriberReconnectCallback::operationComplete() {\n+void SubscriberReconnectCallback::operationComplete(const ResponseBody & resp) {\n }\n \n void SubscriberReconnectCallback::operationFailed(const std::exception& exception) {\n@@ -217,7 +217,7 @@ void SubscriberClientChannelHandler::channelDisconnected(const DuplexChannelPtr&\n \n   // setup pubsub data for reconnection attempt\n   origData->clearTriedServers();\n-  OperationCallbackPtr newcallback(new SubscriberReconnectCallback(client, origData));\n+  ResponseCallbackPtr newcallback(new SubscriberReconnectCallback(client, origData));\n   origData->setCallback(newcallback);\n \n   // Create a new handler for the new channel\n@@ -329,7 +329,9 @@ void SubscriberImpl::asyncSubscribe(const std::string& topic, const std::string&\n     options2.set_messagebound(messageBound);\n   }\n \n-  PubSubDataPtr data = PubSubData::forSubscribeRequest(client->counter().next(), subscriberId, topic, callback, options2);\n+  ResponseCallbackPtr respCallback(new ResponseCallbackAdaptor(callback));\n+  PubSubDataPtr data = PubSubData::forSubscribeRequest(client->counter().next(), subscriberId, topic,\n+                                                       respCallback, options2);\n \n   SubscriberClientChannelHandlerPtr handler(new SubscriberClientChannelHandler(client, *this, data));\n   ChannelHandlerPtr baseptr = handler;\n@@ -369,7 +371,8 @@ void SubscriberImpl::unsubscribe(const std::string& topic, const std::string& su\n void SubscriberImpl::asyncUnsubscribe(const std::string& topic, const std::string& subscriberId, const OperationCallbackPtr& callback) {\n   closeSubscription(topic, subscriberId);\n \n-  PubSubDataPtr data = PubSubData::forUnsubscribeRequest(client->counter().next(), subscriberId, topic, callback);\n+  ResponseCallbackPtr respCallback(new ResponseCallbackAdaptor(callback));\n+  PubSubDataPtr data = PubSubData::forUnsubscribeRequest(client->counter().next(), subscriberId, topic, respCallback);\n   \n   DuplexChannelPtr channel = client->getChannel(topic);\n   doUnsubscribe(channel, data);\n@@ -456,7 +459,11 @@ void SubscriberImpl::messageHandler(const PubSubResponsePtr& m, const PubSubData\n \n   switch (m->statuscode()) {\n   case SUCCESS:\n-    txn->getCallback()->operationComplete();\n+    if (m->has_responsebody()) {\n+      txn->getCallback()->operationComplete(m->responsebody());\n+    } else {\n+      txn->getCallback()->operationComplete(ResponseBody());\n+    }\n     break;\n   case SERVICE_DOWN:\n     txn->getCallback()->operationFailed(ServiceDownException());"},{"sha":"99219999a7bf7c966aa0d103ccd7767b34e02471","filename":"hedwig-client/src/main/cpp/lib/subscriberimpl.h","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/subscriberimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/subscriberimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/subscriberimpl.h?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -72,11 +72,11 @@ namespace Hedwig {\n     const PubSubDataPtr data;\n     };\n \n-  class SubscriberReconnectCallback : public OperationCallback {\n+  class SubscriberReconnectCallback : public ResponseCallback {\n   public: \n     SubscriberReconnectCallback(const ClientImplPtr& client, const PubSubDataPtr& origData);\n \n-    void operationComplete();\n+    void operationComplete(const ResponseBody & resp);\n     void operationFailed(const std::exception& exception);\n   private:\n     const ClientImplPtr client;"},{"sha":"325aca9dd651fbe6d931ab63958f7197f4ce8a2e","filename":"hedwig-client/src/main/cpp/lib/util.cpp","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/util.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/util.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/util.cpp?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -143,3 +143,14 @@ HostAddress HostAddress::fromString(std::string str) {\n   return h;\n }\n \n+ResponseCallbackAdaptor::ResponseCallbackAdaptor(const OperationCallbackPtr& opCallbackPtr)\n+  : opCallbackPtr(opCallbackPtr) {\n+}\n+\n+void ResponseCallbackAdaptor::operationComplete(const ResponseBody& response) {\n+  opCallbackPtr->operationComplete();\n+}\n+\n+void ResponseCallbackAdaptor::operationFailed(const std::exception& exception) {\n+  opCallbackPtr->operationFailed(exception);\n+}"},{"sha":"8712c1f40c979d7cc20466c86f29b0949e7a42c1","filename":"hedwig-client/src/main/cpp/lib/util.h","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/lib/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/util.h?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -66,6 +66,19 @@ namespace Hedwig {\n     uint16_t host_port;\n   };\n \n+  /**\n+   * An adaptor for OperationCallback\n+   */\n+  class ResponseCallbackAdaptor : public Callback<ResponseBody> {\n+  public:\n+    ResponseCallbackAdaptor(const OperationCallbackPtr& opCallbackPtr);\n+\n+    virtual void operationComplete(const ResponseBody& response);\n+    virtual void operationFailed(const std::exception& exception);\n+  private:\n+    OperationCallbackPtr opCallbackPtr;\n+  };\n+\n   /**\n      Hash a host address. Takes the least significant 16-bits of the address and the 16-bits of the\n      port and packs them into one 32-bit number. While collisons are theoretically very possible, they"},{"sha":"65028e8255c1fd559035bccb40bb935cd5dc6b45","filename":"hedwig-client/src/main/cpp/test/publishtest.cpp","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/test/publishtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/test/publishtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/publishtest.cpp?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -67,6 +67,22 @@ TEST(PublishTest, testSyncPublish) {\n   delete conf;\n }\n \n+TEST(PublishTest, testSyncPublishWithResponse) {\n+  Hedwig::Configuration* conf = new TestServerConfiguration();\n+  \n+  Hedwig::Client* client = new Hedwig::Client(*conf);\n+  Hedwig::Publisher& pub = client->getPublisher();\n+\n+  int numMsgs = 20;\n+  for(int i=1; i<=numMsgs; i++) {\n+    Hedwig::PublishResponsePtr pubResponse = pub.publish(\"testSyncPublishWithResponse\", \"testMessage \" + i);\n+    ASSERT_EQ(i, (int)pubResponse->publishedmsgid().localcomponent());\n+  }\n+  \n+  delete client;\n+  delete conf;\n+}\n+\n TEST(PublishTest, testAsyncPublish) {\n   SimpleWaitCondition* cond = new SimpleWaitCondition();\n \n@@ -86,6 +102,32 @@ TEST(PublishTest, testAsyncPublish) {\n   delete conf;\n }\n \n+TEST(PublishTest, testAsyncPublishWithResponse) {\n+  Hedwig::Configuration* conf = new TestServerConfiguration();\n+  Hedwig::Client* client = new Hedwig::Client(*conf);\n+  Hedwig::Publisher& pub = client->getPublisher();\n+\n+  int numMsgs = 20;\n+  for (int i=1; i<=numMsgs; i++) {\n+    SimpleWaitCondition* cond = new SimpleWaitCondition();\n+    TestPublishResponseCallback* callback =\n+      new TestPublishResponseCallback(cond);\n+    Hedwig::PublishResponseCallbackPtr testcb(callback);\n+    Hedwig::Message asyncMsg;\n+    asyncMsg.set_body(\"testAsyncPublishWithResponse-\" + i);\n+    pub.asyncPublishWithResponse(\"testAsyncPublishWithResponse\", asyncMsg, testcb);\n+    \n+    cond->wait();\n+\n+    ASSERT_TRUE(cond->wasSuccess());\n+    ASSERT_EQ(i, (int)callback->getResponse()->publishedmsgid().localcomponent());\n+\n+    delete cond;\n+  }\n+  delete client;\n+  delete conf;\n+}\n+\n TEST(PublishTest, testMultipleAsyncPublish) {\n   SimpleWaitCondition* cond1 = new SimpleWaitCondition();\n   SimpleWaitCondition* cond2 = new SimpleWaitCondition();"},{"sha":"45a6db3b1b90bff7e1a98a5a60c49e2f88b7522c","filename":"hedwig-client/src/main/cpp/test/util.h","status":"modified","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/test/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/hedwig-client/src/main/cpp/test/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/util.h?ref=41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","patch":"@@ -63,6 +63,32 @@ class SimpleWaitCondition {\n   bool success;\n };\n \n+class TestPublishResponseCallback : public Hedwig::PublishResponseCallback {\n+public:\n+  TestPublishResponseCallback(SimpleWaitCondition* cond) : cond(cond) {\n+  }\n+\n+  virtual void operationComplete(const Hedwig::PublishResponsePtr & resp) {\n+    LOG4CXX_DEBUG(utillogger, \"operationComplete\");\n+    pubResp = resp;\n+    cond->setSuccess(true);\n+    cond->notify();\n+  }\n+  \n+  virtual void operationFailed(const std::exception& exception) {\n+    LOG4CXX_DEBUG(utillogger, \"operationFailed: \" << exception.what());\n+    cond->setSuccess(false);\n+    cond->notify();\n+  }    \n+\n+  Hedwig::PublishResponsePtr getResponse() {\n+    return pubResp;\n+  }\n+private:\n+  SimpleWaitCondition *cond;\n+  Hedwig::PublishResponsePtr pubResp;\n+};\n+\n class TestCallback : public Hedwig::OperationCallback {\n public:\n   TestCallback(SimpleWaitCondition* cond) "}]}

