{"sha":"431554da9e2598c73edfbaf671e87cfd9ae94716","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MzE1NTRkYTllMjU5OGM3M2VkZmJhZjY3MWU4N2NmZDlhZTk0NzE2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-03-01T14:58:08Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-03-01T14:58:08Z"},"message":"BOOKKEEPER-176: HierarchicalBookieFailureTest Hung (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1295604 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a7e3bf2aa8733b885973034e23c849ea5c0c886e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a7e3bf2aa8733b885973034e23c849ea5c0c886e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/431554da9e2598c73edfbaf671e87cfd9ae94716","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/431554da9e2598c73edfbaf671e87cfd9ae94716","html_url":"https://github.com/apache/bookkeeper/commit/431554da9e2598c73edfbaf671e87cfd9ae94716","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/431554da9e2598c73edfbaf671e87cfd9ae94716/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"76818a6aadd4aa40a45aca6f5b0acba79cd42515","url":"https://api.github.com/repos/apache/bookkeeper/commits/76818a6aadd4aa40a45aca6f5b0acba79cd42515","html_url":"https://github.com/apache/bookkeeper/commit/76818a6aadd4aa40a45aca6f5b0acba79cd42515"}],"stats":{"total":156,"additions":113,"deletions":43},"files":[{"sha":"158e2c80137acc39a9c35462b694f765d4a56e50","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/431554da9e2598c73edfbaf671e87cfd9ae94716/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/431554da9e2598c73edfbaf671e87cfd9ae94716/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=431554da9e2598c73edfbaf671e87cfd9ae94716","patch":"@@ -48,6 +48,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-113: NPE In BookKeeper test (fpj via ivank)\n \n+\tBOOKKEEPER-176: HierarchicalBookieFailureTest Hung (ivank via fpj)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"490c13048caccff81ed00d94c0783bdf37d02ce6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":105,"deletions":37,"changes":142,"blob_url":"https://github.com/apache/bookkeeper/blob/431554da9e2598c73edfbaf671e87cfd9ae94716/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/431554da9e2598c73edfbaf671e87cfd9ae94716/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=431554da9e2598c73edfbaf671e87cfd9ae94716","patch":"@@ -24,6 +24,9 @@\n import java.io.IOException;\n import java.util.concurrent.Executors;\n \n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n@@ -41,6 +44,7 @@\n import org.apache.zookeeper.ZooKeeper;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n+import org.apache.bookkeeper.util.SafeRunnable;\n \n /**\n  * BookKeeper client. We assume there is one single writer to a ledger at any\n@@ -59,28 +63,35 @@\n \n     static final Logger LOG = LoggerFactory.getLogger(BookKeeper.class);\n \n-    ZooKeeper zk = null;\n-    // whether the zk handle is one we created, or is owned by whoever\n-    // instantiated us\n-    boolean ownZKHandle = false;\n+    final ZooKeeper zk;\n+    final CountDownLatch connectLatch = new CountDownLatch(1);\n+    final static int zkConnectTimeoutMs = 5000;\n+    final ClientSocketChannelFactory channelFactory;\n \n-    ClientSocketChannelFactory channelFactory;\n     // whether the socket factory is one we created, or is owned by whoever\n     // instantiated us\n     boolean ownChannelFactory = false;\n+    // whether the zk handle is one we created, or is owned by whoever\n+    // instantiated us\n+    boolean ownZKHandle = false;\n \n-    BookieClient bookieClient;\n-    BookieWatcher bookieWatcher;\n+    final BookieClient bookieClient;\n+    final BookieWatcher bookieWatcher;\n \n     OrderedSafeExecutor callbackWorker = new OrderedSafeExecutor(Runtime\n             .getRuntime().availableProcessors());\n-    OrderedSafeExecutor mainWorkerPool = new OrderedSafeExecutor(Runtime\n+    final OrderedSafeExecutor mainWorkerPool = new OrderedSafeExecutor(Runtime\n             .getRuntime().availableProcessors());\n \n     // Ledger manager responsible for how to store ledger meta data\n     final LedgerManager ledgerManager;\n \n-    ClientConfiguration conf;\n+    final ClientConfiguration conf;\n+\n+    interface ZKConnectCallback {\n+        public void connected();\n+        public void connectionFailed(int code);\n+    }\n \n     /**\n      * Create a bookkeeper client. A zookeeper client and a client socket factory\n@@ -111,21 +122,30 @@ public BookKeeper(String servers) throws IOException, InterruptedException,\n      * @throws InterruptedException\n      * @throws KeeperException\n      */\n-    public BookKeeper(ClientConfiguration conf) throws IOException, InterruptedException,\n-        KeeperException {\n-        this(conf, new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {\n-            @Override\n-            public void process(WatchedEvent event) {\n-                // TODO: handle session disconnects and expires\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Process: \" + event.getType() + \" \" + event.getPath());\n-                }\n-            }\n-        }), new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n-                                              Executors.newCachedThreadPool()));\n+    public BookKeeper(ClientConfiguration conf)\n+            throws IOException, InterruptedException, KeeperException {\n+        this.conf = conf;\n+        this.zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(),\n+                new Watcher() {\n+                    @Override\n+                    public void process(WatchedEvent event) {\n+                        if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {\n+                            connectLatch.countDown();\n+                        }\n+                        // TODO: handle session disconnects and expires\n+                        LOG.debug(\"Process: {} {}\", event.getType(), event.getPath());\n+                    }\n+                });\n+        this.channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n+                                                                Executors.newCachedThreadPool());\n+        bookieWatcher = new BookieWatcher(this);\n+        bookieWatcher.readBookiesBlocking();\n+        bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n+        // initialize ledger meta manager\n+        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n \n-        ownZKHandle = true;\n         ownChannelFactory = true;\n+        ownZKHandle = true;\n      }\n \n     /**\n@@ -176,10 +196,32 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFac\n         bookieWatcher = new BookieWatcher(this);\n         bookieWatcher.readBookiesBlocking();\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        // intialize ledger meta manager\n+        // initialize ledger meta manager\n         ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n     }\n \n+    void withZKConnected(final ZKConnectCallback cb) {\n+        if (ownZKHandle) {\n+            mainWorkerPool.submit(new SafeRunnable() {\n+                    @Override\n+                    public void safeRun() {\n+                        try {\n+                            if (!connectLatch.await(zkConnectTimeoutMs, TimeUnit.MILLISECONDS)) {\n+                                cb.connectionFailed(BKException.Code.ZKException);\n+                            } else {\n+                                cb.connected();\n+                            }\n+                        } catch (InterruptedException ie) {\n+                            // someone trying to kill the process\n+                            cb.connectionFailed(BKException.Code.InterruptedException);\n+                        }\n+                    }\n+                });\n+        } else {\n+            cb.connected();\n+        }\n+    }\n+\n     LedgerManager getLedgerManager() {\n         return ledgerManager;\n     }\n@@ -235,12 +277,17 @@ BookieClient getBookieClient() {\n      * @param ctx\n      *          optional control object\n      */\n-    public void asyncCreateLedger(int ensSize, int qSize, DigestType digestType,\n-                                  byte[] passwd, CreateCallback cb, Object ctx) {\n-\n-        new LedgerCreateOp(this, ensSize, qSize, digestType, passwd, cb, ctx)\n-        .initiate();\n-\n+    public void asyncCreateLedger(final int ensSize, final int qSize, final DigestType digestType,\n+                                  final byte[] passwd, final CreateCallback cb, final Object ctx) {\n+        withZKConnected(new ZKConnectCallback() {\n+                public void connected() {\n+                    new LedgerCreateOp(BookKeeper.this, ensSize, qSize, digestType, passwd, cb, ctx)\n+                        .initiate();\n+                }\n+                public void connectionFailed(int code) {\n+                    cb.createComplete(code, null, ctx);\n+                }\n+            });\n     }\n \n \n@@ -322,9 +369,16 @@ public LedgerHandle createLedger(int ensSize, int qSize,\n      * @param ctx\n      *          optional control object\n      */\n-    public void asyncOpenLedger(long lId, DigestType digestType, byte passwd[],\n-                                OpenCallback cb, Object ctx) {\n-        new LedgerOpenOp(this, lId, digestType, passwd, cb, ctx).initiate();\n+    public void asyncOpenLedger(final long lId, final DigestType digestType, final byte passwd[],\n+                                final OpenCallback cb, final Object ctx) {\n+        withZKConnected(new ZKConnectCallback() {\n+                public void connected() {\n+                    new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n+                }\n+                public void connectionFailed(int code) {\n+                    cb.openComplete(code, null, ctx);\n+                }\n+            });\n     }\n \n     /**\n@@ -354,9 +408,16 @@ public void asyncOpenLedger(long lId, DigestType digestType, byte passwd[],\n      * @param ctx\n      *          optional control object\n      */\n-    public void asyncOpenLedgerNoRecovery(long lId, DigestType digestType, byte passwd[],\n-                                          OpenCallback cb, Object ctx) {\n-        new LedgerOpenOp(this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n+    public void asyncOpenLedgerNoRecovery(final long lId, final DigestType digestType, final byte passwd[],\n+                                          final OpenCallback cb, final Object ctx) {\n+        withZKConnected(new ZKConnectCallback() {\n+                public void connected() {\n+                    new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n+                }\n+                public void connectionFailed(int code) {\n+                    cb.openComplete(code, null, ctx);\n+                }\n+            });\n     }\n \n \n@@ -441,8 +502,15 @@ public LedgerHandle openLedgerNoRecovery(long lId, DigestType digestType, byte p\n      * @param ctx\n      *            optional control object\n      */\n-    public void asyncDeleteLedger(long lId, DeleteCallback cb, Object ctx) {\n-        new LedgerDeleteOp(this, lId, cb, ctx).initiate();\n+    public void asyncDeleteLedger(final long lId, final DeleteCallback cb, final Object ctx) {\n+        withZKConnected(new ZKConnectCallback() {\n+                public void connected() {\n+                    new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n+                }\n+                public void connectionFailed(int code) {\n+                    cb.deleteComplete(code, ctx);\n+                }\n+            });\n     }\n \n "},{"sha":"f71e53fe4aedc324062fdcbd1c4658e97939af01","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/431554da9e2598c73edfbaf671e87cfd9ae94716/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/431554da9e2598c73edfbaf671e87cfd9ae94716/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=431554da9e2598c73edfbaf671e87cfd9ae94716","patch":"@@ -23,7 +23,7 @@\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n-import java.util.ArrayDeque;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.Queue;\n@@ -69,7 +69,7 @@\n     final Semaphore opCounterSem;\n     private final Integer throttling;\n \n-    final Queue<PendingAddOp> pendingAddOps = new ArrayDeque<PendingAddOp>();\n+    final Queue<PendingAddOp> pendingAddOps = new ConcurrentLinkedQueue<PendingAddOp>();\n \n     LedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n                  DigestType digestType, byte[] password)"},{"sha":"8679c8b1f4f33346f59ad6617cc1cd8d2a282f89","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/431554da9e2598c73edfbaf671e87cfd9ae94716/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/431554da9e2598c73edfbaf671e87cfd9ae94716/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=431554da9e2598c73edfbaf671e87cfd9ae94716","patch":"@@ -168,7 +168,7 @@ public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n             });\n             ctx.wait();\n         }\n-        if (Code.OK.intValue() != ctx.rc && null != ctx.ledgers) {\n+        if (Code.OK.intValue() != ctx.rc) {\n             throw new IOException(\"Error on getting ledgers from node \" + nodePath);\n         }\n         return ctx.ledgers;"},{"sha":"83fd132fed15de2285c90729e169a8be90109175","filename":"hedwig-client/src/main/cpp/scripts/network-delays.sh","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/431554da9e2598c73edfbaf671e87cfd9ae94716/hedwig-client/src/main/cpp/scripts/network-delays.sh","raw_url":"https://github.com/apache/bookkeeper/raw/431554da9e2598c73edfbaf671e87cfd9ae94716/hedwig-client/src/main/cpp/scripts/network-delays.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/network-delays.sh?ref=431554da9e2598c73edfbaf671e87cfd9ae94716","patch":"@@ -26,10 +26,10 @@ setup_delays() {\n \tDarwin|FreeBSD)\n \t    sudo ipfw pipe 1 config delay ${1}ms\n \t    sudo ipfw add pipe 1 dst-port 4081\n-\t    sudo ipfw add pipe 1 dst-port 4081\n-\t    sudo ipfw add pipe 1 src-port 4082 \n+\t    sudo ipfw add pipe 1 src-port 4081\n+\t    sudo ipfw add pipe 1 dst-port 4082 \n \t    sudo ipfw add pipe 1 src-port 4082 \n-\t    sudo ipfw add pipe 1 src-port 4083 \n+\t    sudo ipfw add pipe 1 dst-port 4083 \n \t    sudo ipfw add pipe 1 src-port 4083 \n             ;;\n \tLinux)"}]}

