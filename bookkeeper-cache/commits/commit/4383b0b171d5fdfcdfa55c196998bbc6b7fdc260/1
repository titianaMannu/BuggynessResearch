{"sha":"4383b0b171d5fdfcdfa55c196998bbc6b7fdc260","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MzgzYjBiMTcxZDVmZGZjZGZhNTVjMTk2OTk4YmJjNmI3ZmRjMjYw","commit":{"author":{"name":"Yiming Zang","email":"yzang@twitter.com","date":"2016-10-20T17:38:33Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-10-20T17:38:33Z"},"message":"BOOKKEEPER-952: Fix RegionAwareEnsemblePlacementPolicy\n\nallocate bookies evenly as much as possible across all regions\n\nhttps://issues.apache.org/jira/browse/BOOKKEEPER-952\n\nRB_ID=880463\n\nAuthor: Yiming Zang <yzang@twitter.com>\n\nReviewers: sijie@apache.org <sijie@apache.org>\n\nCloses #61 from yzang/apache_master and squashes the following commits:\n\na0a9979 [Yiming Zang] fix Inefficient use of keySet iterator instead of entrySet iterator\nd882c28 [Yiming Zang] fix RegionAwareEnsemblePlacementPolicy test case fix the algorithm for balanced placement across regions.","tree":{"sha":"f51f61912b9c841f0fe35a7ac4e798d3aed13c92","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f51f61912b9c841f0fe35a7ac4e798d3aed13c92"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4383b0b171d5fdfcdfa55c196998bbc6b7fdc260","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4383b0b171d5fdfcdfa55c196998bbc6b7fdc260","html_url":"https://github.com/apache/bookkeeper/commit/4383b0b171d5fdfcdfa55c196998bbc6b7fdc260","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4383b0b171d5fdfcdfa55c196998bbc6b7fdc260/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf4a4d6a07f9d615752054c6743035cebd86716e","url":"https://api.github.com/repos/apache/bookkeeper/commits/bf4a4d6a07f9d615752054c6743035cebd86716e","html_url":"https://github.com/apache/bookkeeper/commit/bf4a4d6a07f9d615752054c6743035cebd86716e"}],"stats":{"total":31,"additions":15,"deletions":16},"files":[{"sha":"181feca99c78e14a81c410e30f1a0f7d4031b120","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":15,"deletions":16,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/4383b0b171d5fdfcdfa55c196998bbc6b7fdc260/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/4383b0b171d5fdfcdfa55c196998bbc6b7fdc260/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java?ref=4383b0b171d5fdfcdfa55c196998bbc6b7fdc260","patch":"@@ -142,12 +142,12 @@ public void handleBookiesThatJoined(Set<BookieSocketAddress> joinedBookies) {\n             }\n         }\n \n-        for(String region: perRegionPlacement.keySet()) {\n-            Set<BookieSocketAddress> regionSet = perRegionClusterChange.get(region);\n+        for (Map.Entry<String, TopologyAwareEnsemblePlacementPolicy> regionEntry : perRegionPlacement.entrySet()) {\n+            Set<BookieSocketAddress> regionSet = perRegionClusterChange.get(regionEntry.getKey());\n             if (null == regionSet) {\n                 regionSet = new HashSet<BookieSocketAddress>();\n             }\n-            perRegionPlacement.get(region).handleBookiesThatJoined(regionSet);\n+            regionEntry.getValue().handleBookiesThatJoined(regionSet);\n         }\n     }\n \n@@ -289,12 +289,11 @@ public RegionAwareEnsemblePlacementPolicy initialize(ClientConfiguration conf,\n                 regionsWiseAllocation.put(region, Pair.of(0,0));\n             }\n             int remainingEnsembleBeforeIteration;\n+            int numRemainingRegions;\n             Set<String> regionsReachedMaxAllocation = new HashSet<String>();\n             RRTopologyAwareCoverageEnsemble ensemble;\n-            int iteration = 0;\n             do {\n-                LOG.info(\"RegionAwareEnsemblePlacementPolicy#newEnsemble Iteration {}\", iteration++);\n-                int numRemainingRegions = numRegionsAvailable - regionsReachedMaxAllocation.size();\n+                numRemainingRegions = numRegionsAvailable - regionsReachedMaxAllocation.size();\n                 ensemble = new RRTopologyAwareCoverageEnsemble(ensembleSize,\n                                     writeQuorumSize,\n                                     ackQuorumSize,\n@@ -305,6 +304,7 @@ public RegionAwareEnsemblePlacementPolicy initialize(ClientConfiguration conf,\n                                     effectiveMinRegionsForDurability > 0 ? new HashSet<String>(perRegionPlacement.keySet()) : null,\n                                     effectiveMinRegionsForDurability);\n                 remainingEnsembleBeforeIteration = remainingEnsemble;\n+                int regionsToAllocate = numRemainingRegions;\n                 for (Map.Entry<String, Pair<Integer, Integer>> regionEntry: regionsWiseAllocation.entrySet()) {\n                     String region = regionEntry.getKey();\n                     final Pair<Integer, Integer> currentAllocation = regionEntry.getValue();\n@@ -314,27 +314,27 @@ public RegionAwareEnsemblePlacementPolicy initialize(ClientConfiguration conf,\n                             LOG.error(\"Inconsistent State: This should never happen\");\n                             throw new BKException.BKNotEnoughBookiesException();\n                         }\n-\n-                        int addToEnsembleSize = Math.min(remainingEnsemble, (remainingEnsembleBeforeIteration + numRemainingRegions - 1) / numRemainingRegions);\n+                        // try to place the bookies as balance as possible across all the regions\n+                        int addToEnsembleSize = Math.min(remainingEnsemble, remainingEnsemble / regionsToAllocate + (remainingEnsemble % regionsToAllocate == 0 ? 0 : 1));\n                         boolean success = false;\n-                        while(addToEnsembleSize > 0) {\n+                        while (addToEnsembleSize > 0) {\n                             int addToWriteQuorum = Math.max(1, Math.min(remainingWriteQuorum, Math.round(1.0f * writeQuorumSize * addToEnsembleSize / ensembleSize)));\n-\n                             // Temp ensemble will be merged back into the ensemble only if we are able to successfully allocate\n                             // the target number of bookies in this region; if we fail because we dont have enough bookies; then we\n                             // retry the process with a smaller target\n                             RRTopologyAwareCoverageEnsemble tempEnsemble = new RRTopologyAwareCoverageEnsemble(ensemble);\n                             int newEnsembleSize = currentAllocation.getLeft() + addToEnsembleSize;\n                             int newWriteQuorumSize = currentAllocation.getRight() + addToWriteQuorum;\n                             try {\n-                                policyWithinRegion.newEnsemble(newEnsembleSize, newWriteQuorumSize, newWriteQuorumSize, excludeBookies, tempEnsemble, tempEnsemble);\n+                                List<BookieSocketAddress> allocated = policyWithinRegion.newEnsemble(newEnsembleSize, newWriteQuorumSize, newWriteQuorumSize, excludeBookies, tempEnsemble, tempEnsemble);\n                                 ensemble = tempEnsemble;\n                                 remainingEnsemble -= addToEnsembleSize;\n-                                remainingWriteQuorum -= writeQuorumSize;\n+                                remainingWriteQuorum -= addToWriteQuorum;\n                                 regionsWiseAllocation.put(region, Pair.of(newEnsembleSize, newWriteQuorumSize));\n                                 success = true;\n-                                LOG.info(\"Allocated {} bookies in region {} : {}\",\n-                                        new Object[]{newEnsembleSize, region, ensemble});\n+                                regionsToAllocate--;\n+                                LOG.info(\"Region {} allocating bookies with ensemble size {} and write quorum size {} : {}\",\n+                                    new Object[]{region, newEnsembleSize, newWriteQuorumSize, allocated});\n                                 break;\n                             } catch (BKException.BKNotEnoughBookiesException exc) {\n                                 LOG.warn(\"Could not allocate {} bookies in region {}, try allocating {} bookies\",\n@@ -384,7 +384,7 @@ public RegionAwareEnsemblePlacementPolicy initialize(ClientConfiguration conf,\n                     ensembleSize, bookieList);\n                 throw new BKException.BKNotEnoughBookiesException();\n             }\n-\n+            LOG.info(\"Bookies allocated successfully {}\", ensemble);\n             return ensemble.toList();\n         } finally {\n             rwLock.readLock().unlock();\n@@ -597,6 +597,5 @@ protected BookieNode replaceFromRack(BookieNode bookieNodeToReplace,\n             }\n         }\n         return finalList;\n-\n     }\n }"}]}

