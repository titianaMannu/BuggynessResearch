{"sha":"45034f5f4a51225b9f963840741818da7869a85c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NTAzNGY1ZjRhNTEyMjViOWY5NjM4NDA3NDE4MThkYTc4NjlhODVj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T15:41:52Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T15:41:52Z"},"message":"BOOKKEEPER-332: Add SubscriptionPreferences to record all preferences for a subscription (sijie via ivank) [missing files]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61104b24a9326f788e674c5fa73f5dd5b1b3a12f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/61104b24a9326f788e674c5fa73f5dd5b1b3a12f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/45034f5f4a51225b9f963840741818da7869a85c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/45034f5f4a51225b9f963840741818da7869a85c","html_url":"https://github.com/apache/bookkeeper/commit/45034f5f4a51225b9f963840741818da7869a85c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/45034f5f4a51225b9f963840741818da7869a85c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8","url":"https://api.github.com/repos/apache/bookkeeper/commits/14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8","html_url":"https://github.com/apache/bookkeeper/commit/14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8"}],"stats":{"total":74,"additions":74,"deletions":0},"files":[{"sha":"898e8b12f65b705a987cb75d82231d8a923b44c5","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MapUtils.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/apache/bookkeeper/blob/45034f5f4a51225b9f963840741818da7869a85c/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MapUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/45034f5f4a51225b9f963840741818da7869a85c/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MapUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/MapUtils.java?ref=45034f5f4a51225b9f963840741818da7869a85c","patch":"@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.protoextensions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MapUtils {\n+\n+    static final Logger logger = LoggerFactory.getLogger(MapUtils.class);\n+\n+    public static String toString(PubSubProtocol.Map map) {\n+        StringBuilder sb = new StringBuilder();\n+        int numEntries = map.getEntriesCount();\n+        for (int i=0; i<numEntries; i++) {\n+            PubSubProtocol.Map.Entry entry = map.getEntries(i);\n+            String key = entry.getKey();\n+            ByteString value = entry.getValue();\n+            sb.append(key).append('=').append(value.toStringUtf8());\n+            if (i != (numEntries - 1)) {\n+                sb.append(',');\n+            }\n+        }\n+        return sb.toString();\n+    }\n+\n+    public static Map<String, ByteString> buildMap(PubSubProtocol.Map protoMap) {\n+        Map<String, ByteString> javaMap = new HashMap<String, ByteString>();\n+\n+        int numEntries = protoMap.getEntriesCount();\n+        for (int i=0; i<numEntries; i++) {\n+            PubSubProtocol.Map.Entry entry = protoMap.getEntries(i);\n+            String key = entry.getKey();\n+            if (javaMap.containsKey(key)) {\n+                ByteString preValue = javaMap.get(key);\n+                logger.warn(\"Key \" + key + \" has already been defined as value : \" + preValue.toStringUtf8());\n+            } else {\n+                javaMap.put(key, entry.getValue());\n+            }\n+        }\n+        return javaMap;\n+    }\n+\n+    public static PubSubProtocol.Map.Builder buildMapBuilder(Map<String, ByteString> javaMap) {\n+        PubSubProtocol.Map.Builder mapBuilder = PubSubProtocol.Map.newBuilder();\n+\n+        for (Map.Entry<String, ByteString> entry : javaMap.entrySet()) {\n+            mapBuilder.addEntries(PubSubProtocol.Map.Entry.newBuilder().setKey(entry.getKey())\n+                                                .setValue(entry.getValue()));\n+        }\n+        return mapBuilder;\n+    }\n+}"}]}

