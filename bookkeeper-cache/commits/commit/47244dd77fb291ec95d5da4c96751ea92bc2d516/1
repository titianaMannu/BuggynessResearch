{"sha":"47244dd77fb291ec95d5da4c96751ea92bc2d516","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NzI0NGRkNzdmYjI5MWVjOTVkNWRhNGM5Njc1MWVhOTJiYzJkNTE2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-04-02T10:38:18Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-04-02T10:38:18Z"},"message":"BOOKKEEPER-135: Fencing does not check the ledger masterPasswd (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1308294 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"04dcf6e583b23dc7db7dae0a998389027fa4cdfb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/04dcf6e583b23dc7db7dae0a998389027fa4cdfb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/47244dd77fb291ec95d5da4c96751ea92bc2d516","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/47244dd77fb291ec95d5da4c96751ea92bc2d516","html_url":"https://github.com/apache/bookkeeper/commit/47244dd77fb291ec95d5da4c96751ea92bc2d516","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/47244dd77fb291ec95d5da4c96751ea92bc2d516/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"682a23fb23c8de7756d5ef226fd6e97dd8d4e561","url":"https://api.github.com/repos/apache/bookkeeper/commits/682a23fb23c8de7756d5ef226fd6e97dd8d4e561","html_url":"https://github.com/apache/bookkeeper/commit/682a23fb23c8de7756d5ef226fd6e97dd8d4e561"}],"stats":{"total":242,"additions":190,"deletions":52},"files":[{"sha":"bac0a88e352c8400c5c031fba1f67b3567267d3f","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -76,6 +76,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-112: Bookie Recovery on an open ledger will cause LedgerHandle#close on that ledger to fail (sijie)\n \n+        BOOKKEEPER-135: Fencing does not check the ledger masterPasswd (ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"e3b51c947d5c44a7adb0d954979cdadda29f1067","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -1037,21 +1037,16 @@ public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] mast\n     }\n \n     /**\n-     * Fences a ledger. From this point on, clients will be unable to \n+     * Fences a ledger. From this point on, clients will be unable to\n      * write to this ledger. Only recoveryAddEntry will be\n      * able to add entries to the ledger.\n      * This method is idempotent. Once a ledger is fenced, it can\n      * never be unfenced. Fencing a fenced ledger has no effect.\n      */\n-    public void fenceLedger(long ledgerId) throws IOException {\n-        try {\n-            byte[] key = ledgerCache.readMasterKey(ledgerId);\n-            LedgerDescriptor handle = handles.getHandle(ledgerId, key);\n-            synchronized (handle) {\n-                handle.setFenced();\n-            }\n-        } catch (BookieException e) {\n-            throw new IOException(\"Error fencing\", e);\n+    public void fenceLedger(long ledgerId, byte[] masterKey) throws IOException, BookieException {\n+        LedgerDescriptor handle = handles.getHandle(ledgerId, masterKey);\n+        synchronized (handle) {\n+            handle.setFenced();\n         }\n     }\n "},{"sha":"484a055790e8572e8593b04085fd0a168285350e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -78,6 +78,8 @@ public static BKException create(int code) {\n             return new BKProtocolVersionException();\n         case Code.LedgerFencedException:\n             return new BKLedgerFencedException();\n+        case Code.UnauthorizedAccessException:\n+            return new BKUnauthorizedAccessException();\n         default:\n             return new BKIllegalOpException();\n         }\n@@ -108,6 +110,7 @@ public static BKException create(int code) {\n \n         int IllegalOpException = -100;\n         int LedgerFencedException = -101;\n+        int UnauthorizedAccessException = -102;\n     }\n \n     public void setCode(int code) {\n@@ -156,6 +159,8 @@ public static String getMessage(int code) {\n             return \"Bookie protocol version on server is incompatible with client\";\n         case Code.LedgerFencedException:\n             return \"Ledger has been fenced off. Some other client must have opened it to read\";\n+        case Code.UnauthorizedAccessException:\n+            return \"Attempted to access ledger using the wrong password\";\n         default:\n             return \"Invalid operation\";\n         }\n@@ -268,4 +273,10 @@ public BKLedgerFencedException() {\n             super(Code.LedgerFencedException);\n         }\n     }\n+\n+    public static class BKUnauthorizedAccessException extends BKException {\n+        public BKUnauthorizedAccessException() {\n+            super(Code.UnauthorizedAccessException);\n+        }\n+    }\n }"},{"sha":"101ebf35547409818d598ba509373e2c9d6e25a4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -141,10 +141,12 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n             lh.recover(new GenericCallback<Void>() {\n                     @Override\n                     public void operationComplete(int rc, Void result) {\n-                        if (rc != BKException.Code.OK) {\n-                            cb.openComplete(BKException.Code.LedgerRecoveryException, null, LedgerOpenOp.this.ctx);\n-                        } else {\n+                        if (rc == BKException.Code.OK) {\n                             cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);\n+                        } else if (rc == BKException.Code.UnauthorizedAccessException) {\n+                            cb.openComplete(BKException.Code.UnauthorizedAccessException, null, LedgerOpenOp.this.ctx);\n+                        } else {\n+                            cb.openComplete(BKException.Code.LedgerRecoveryException, null, LedgerOpenOp.this.ctx);\n                         }\n                     }\n                 });"},{"sha":"a564536a1de68ee4942e7ad4ef0b8869c5cdc922","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -68,6 +68,8 @@ public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n                         lh.lastAddPushed = lh.lastAddConfirmed = data.lastAddConfirmed;\n                         lh.length = data.length;\n                         doRecoveryRead();\n+                    } else if (rc == BKException.Code.UnauthorizedAccessException) {\n+                        cb.operationComplete(rc, null);\n                     } else {\n                         cb.operationComplete(BKException.Code.ReadException, null);\n                     }"},{"sha":"ed8f9d7798200f14c11d31114f35edacc1df3de9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -138,6 +138,10 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n             LOG.warn(\"Fencing exception on write: \" + ledgerId + \", \" + entryId);\n             lh.handleUnrecoverableErrorDuringAdd(rc);\n             return;\n+        case BKException.Code.UnauthorizedAccessException:\n+            LOG.warn(\"Unauthorized access exception on write: \" + ledgerId + \", \" + entryId);\n+            lh.handleUnrecoverableErrorDuringAdd(rc);\n+            return;\n         default:\n             LOG.warn(\"Write did not succeed: \" + ledgerId + \", \" + entryId);\n             lh.handleBookieFailure(addr, bookieIndex);"},{"sha":"778ec83de8e7d98acb65d7776542f02dca8df79d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -105,7 +105,7 @@ void sendRead(ArrayList<InetSocketAddress> ensemble, LedgerEntry entry, int last\n         int bookieIndex = lh.distributionSchedule.getBookieIndex(entry.entryId, entry.nextReplicaIndexToReadFrom);\n         entry.nextReplicaIndexToReadFrom++;\n         lh.bk.bookieClient.readEntry(ensemble.get(bookieIndex), lh.ledgerId, entry.entryId, \n-                                     this, entry, BookieProtocol.FLAG_NONE);\n+                                     this, entry);\n     }\n \n     void logErrorAndReattemptRead(LedgerEntry entry, String errMsg, int rc) {"},{"sha":"3c225c6b43bbe4efcb9aad36ef275ac176f88336","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -56,18 +56,21 @@ public ReadLastConfirmedOp(LedgerHandle lh, LastConfirmedDataCallback cb) {\n     }\n \n     public void initiate() {\n-        initiate(BookieProtocol.FLAG_NONE);\n+        for (int i = 0; i < lh.metadata.currentEnsemble.size(); i++) {\n+            lh.bk.bookieClient.readEntry(lh.metadata.currentEnsemble.get(i),\n+                                         lh.ledgerId,\n+                                         BookieProtocol.LAST_ADD_CONFIRMED,\n+                                         this, i);\n+        }\n     }\n \n     public void initiateWithFencing() {\n-        initiate(BookieProtocol.FLAG_DO_FENCING);\n-    }\n-\n-    private void initiate(short flags) {\n         for (int i = 0; i < lh.metadata.currentEnsemble.size(); i++) {\n-            lh.bk.bookieClient.readEntry(lh.metadata.currentEnsemble.get(i), lh.ledgerId,\n-                                         BookieProtocol.LAST_ADD_CONFIRMED,\n-                                         this, i, flags);\n+            lh.bk.bookieClient.readEntryAndFenceLedger(lh.metadata.currentEnsemble.get(i),\n+                                                       lh.ledgerId,\n+                                                       lh.ledgerKey,\n+                                                       BookieProtocol.LAST_ADD_CONFIRMED,\n+                                                       this, i);\n         }\n     }\n \n@@ -97,6 +100,10 @@ public synchronized void readEntryComplete(final int rc, final long ledgerId, fi\n             heardValidResponse = true;\n         }\n \n+        if (rc == BKException.Code.UnauthorizedAccessException  && !completed) {\n+            cb.readLastConfirmedDataComplete(rc, maxRecoveredData);\n+            completed = true;\n+        }\n         // other return codes dont count as valid responses\n         if (heardValidResponse\n             && coverageSet.addBookieAndCheckCovered(bookieIndex)"},{"sha":"7c8b026d8a0445ee36934c74a3a48269cf2c5604","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -91,8 +91,28 @@ public void operationComplete(int rc, Void result) {\n         });\n     }\n \n+    public void readEntryAndFenceLedger(final InetSocketAddress addr,\n+                                        final long ledgerId,\n+                                        final byte[] masterKey,\n+                                        final long entryId,\n+                                        final ReadEntryCallback cb,\n+                                        final Object ctx) {\n+        final PerChannelBookieClient client = lookupClient(addr);\n+\n+        client.connectIfNeededAndDoOp(new GenericCallback<Void>() {\n+            @Override\n+            public void operationComplete(int rc, Void result) {\n+                if (rc != BKException.Code.OK) {\n+                    cb.readEntryComplete(rc, ledgerId, entryId, null, ctx);\n+                    return;\n+                }\n+                client.readEntryAndFenceLedger(ledgerId, masterKey, entryId, cb, ctx);\n+            }\n+        });\n+    }\n+\n     public void readEntry(final InetSocketAddress addr, final long ledgerId, final long entryId,\n-                          final ReadEntryCallback cb, final Object ctx, final int options) {\n+                          final ReadEntryCallback cb, final Object ctx) {\n         final PerChannelBookieClient client = lookupClient(addr);\n \n         client.connectIfNeededAndDoOp(new GenericCallback<Void>() {\n@@ -103,7 +123,7 @@ public void operationComplete(int rc, Void result) {\n                     cb.readEntryComplete(rc, ledgerId, entryId, null, ctx);\n                     return;\n                 }\n-                client.readEntry(ledgerId, entryId, cb, ctx, options);\n+                client.readEntry(ledgerId, entryId, cb, ctx);\n             }\n         });\n     }"},{"sha":"e2a8a48d8d9ca09563d2298b536a5e66d097013c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -37,13 +37,21 @@\n     /**\n      * Current version of the protocol, which client will use. \n      */\n-    public static final byte CURRENT_PROTOCOL_VERSION = 1;\n-    \n+    public static final byte CURRENT_PROTOCOL_VERSION = 2;\n+\n     /**\n      * Entry identifier representing a request to obtain the last add entry confirmed\n      */\n     public static final long LAST_ADD_CONFIRMED = -1;\n \n+    /**\n+     * The length of the master key in add packets. This\n+     * is fixed at 20 for historic reasons. This is because it\n+     * is always generated using the MacDigestManager regardless\n+     * of whether Mac is being used for the digest or not\n+     */\n+    public static final int MASTER_KEY_LENGTH = 20;\n+\n     /** \n      * The first int of a packet is the header.\n      * It contains the version, opCode and flags."},{"sha":"f02d838b797a32e20510bac46b24adb20e98e10e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -327,14 +327,16 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n         switch (h.getOpCode()) {\n         case BookieProtocol.ADDENTRY:\n             // first read master key\n-            masterKey = new byte[20];\n-            packet.get(masterKey, 0, 20);\n-            // !! fall thru to read ledger id and entry id\n-        case BookieProtocol.READENTRY:\n+            masterKey = new byte[BookieProtocol.MASTER_KEY_LENGTH];\n+            packet.get(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n             ByteBuffer bb = packet.duplicate();\n             ledgerId = bb.getLong();\n             entryId = bb.getLong();\n             break;\n+        case BookieProtocol.READENTRY:\n+            ledgerId = packet.getLong();\n+            entryId = packet.getLong();\n+            break;\n         }\n \n         if (h.getVersion() < BookieProtocol.LOWEST_COMPAT_PROTOCOL_VERSION\n@@ -379,7 +381,15 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n             try {\n                 if ((flags & BookieProtocol.FLAG_DO_FENCING) == BookieProtocol.FLAG_DO_FENCING) {\n                     LOG.warn(\"Ledger \" + ledgerId + \" fenced by \" + src.getPeerName());\n-                    bookie.fenceLedger(ledgerId);\n+                    if (h.getVersion() >= 2) {\n+                        masterKey = new byte[BookieProtocol.MASTER_KEY_LENGTH];\n+                        packet.get(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n+\n+                        bookie.fenceLedger(ledgerId, masterKey);\n+                    } else {\n+                        LOG.error(\"Password not provided, Not safe to fence {}\", ledgerId);\n+                        throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n+                    }\n                 }\n                 rsp[1] = bookie.readEntry(ledgerId, entryId);\n                 LOG.debug(\"##### Read entry ##### \" + rsp[1].remaining());\n@@ -400,6 +410,9 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n                     LOG.error(\"Error reading \" + entryId + \"@\" + ledgerId, e);\n                 }\n                 errorCode = BookieProtocol.EIO;\n+            } catch (BookieException e) {\n+                LOG.error(\"Unauthorized access to ledger \" + ledgerId, e);\n+                errorCode = BookieProtocol.EUA;\n             }\n             rsp[0] = buildResponse(errorCode, h.getVersion(), h.getOpCode(), ledgerId, entryId);\n "},{"sha":"b664e70a210ff4853516537414c1dc63161dde49","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":48,"deletions":5,"changes":53,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -231,15 +231,15 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n \n         int totalHeaderSize = 4 // for the length of the packet\n                               + 4 // for the type of request\n-                              + masterKey.length; // for the master key\n+                              + BookieProtocol.MASTER_KEY_LENGTH; // for the master key\n \n         try{\n             ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n \n             header.writeInt(totalHeaderSize - 4 + entrySize);\n             header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n                                              BookieProtocol.ADDENTRY, (short)options).toInt());\n-            header.writeBytes(masterKey);\n+            header.writeBytes(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n \n             ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n \n@@ -264,7 +264,45 @@ public void operationComplete(ChannelFuture future) throws Exception {\n         }\n     }\n \n-    public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback cb, Object ctx, final int options) {\n+    public void readEntryAndFenceLedger(final long ledgerId, byte[] masterKey,\n+                                        final long entryId,\n+                                        ReadEntryCallback cb, Object ctx) {\n+        final CompletionKey key = new CompletionKey(ledgerId, entryId);\n+        readCompletions.put(key, new ReadCompletion(cb, ctx));\n+\n+        int totalHeaderSize = 4 // for the length of the packet\n+                              + 4 // for request type\n+                              + 8 // for ledgerId\n+                              + 8 // for entryId\n+                              + BookieProtocol.MASTER_KEY_LENGTH; // for masterKey\n+\n+        ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n+        tmpEntry.writeInt(totalHeaderSize - 4);\n+\n+        tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n+                                           BookieProtocol.READENTRY,\n+                                           BookieProtocol.FLAG_DO_FENCING).toInt());\n+        tmpEntry.writeLong(ledgerId);\n+        tmpEntry.writeLong(entryId);\n+        tmpEntry.writeBytes(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n+\n+        ChannelFuture future = channel.write(tmpEntry);\n+        future.addListener(new ChannelFutureListener() {\n+            @Override\n+            public void operationComplete(ChannelFuture future) throws Exception {\n+                if (future.isSuccess()) {\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n+                                  + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+                    }\n+                } else {\n+                    errorOutReadKey(key);\n+                }\n+            }\n+        });\n+    }\n+\n+    public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback cb, Object ctx) {\n         final CompletionKey key = new CompletionKey(ledgerId, entryId);\n         readCompletions.put(key, new ReadCompletion(cb, ctx));\n \n@@ -278,7 +316,7 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n             tmpEntry.writeInt(totalHeaderSize - 4);\n \n             tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n-                                               BookieProtocol.READENTRY, (short)options).toInt());\n+                                               BookieProtocol.READENTRY, BookieProtocol.FLAG_NONE).toInt());\n             tmpEntry.writeLong(ledgerId);\n             tmpEntry.writeLong(entryId);\n \n@@ -505,7 +543,10 @@ void handleAddResponse(long ledgerId, long entryId, int rc) {\n         case BookieProtocol.EFENCED:\n             rc = BKException.Code.LedgerFencedException;\n             break;\n-        default: \n+        case BookieProtocol.EUA:\n+            rc = BKException.Code.UnauthorizedAccessException;\n+            break;\n+        default:\n             LOG.error(\"Add for ledger: \" + ledgerId + \", entry: \" + entryId + \" failed on bookie: \" + addr\n                       + \" with code: \" + rc);\n             rc = BKException.Code.WriteException;\n@@ -541,6 +582,8 @@ void handleReadResponse(long ledgerId, long entryId, int rc, ChannelBuffer buffe\n             rc = BKException.Code.NoSuchEntryException;\n         } else if (rc == BookieProtocol.EBADVERSION) {\n             rc = BKException.Code.ProtocolVersionException;\n+        } else if (rc == BookieProtocol.EUA) {\n+            rc = BKException.Code.UnauthorizedAccessException;\n         } else {\n             LOG.error(\"Read for ledger: \" + ledgerId + \", entry: \" + entryId + \" failed on bookie: \" + addr\n                       + \" with code: \" + rc);"},{"sha":"8bd3f6b94aa7e4f1ac40001e538e68e7571023b0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -482,7 +482,7 @@ private boolean verifyFullyReplicated(LedgerHandle lh, long untilEntry) throws E\n             ReplicationVerificationCallback cb = new ReplicationVerificationCallback(numRequests);\n             for (long i = startEntryId; i < endEntryId; i++) {\n                 for (InetSocketAddress addr : e.getValue()) {\n-                    bkc.bookieClient.readEntry(addr, lh.getId(), i, cb, addr, BookieProtocol.FLAG_NONE);\n+                    bkc.bookieClient.readEntry(addr, lh.getId(), i, cb, addr);\n                 }\n             }\n "},{"sha":"1c109a28741df7bebdd9675fa5dddf7db35d05b1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":33,"deletions":2,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -62,7 +62,7 @@ public void testBasicFencing() throws Exception {\n          * Create ledger.\n          */\n         LedgerHandle writelh = null;\n-        writelh = bkc.createLedger(digestType, \"\".getBytes());\n+        writelh = bkc.createLedger(digestType, \"password\".getBytes());\n \n         String tmp = \"BookKeeper is cool!\";\n         for (int i = 0; i < 10; i++) {\n@@ -72,7 +72,7 @@ public void testBasicFencing() throws Exception {\n         /*\n          * Try to open ledger.\n          */\n-        LedgerHandle readlh = bkc.openLedger(writelh.getId(), digestType, \"\".getBytes());\n+        LedgerHandle readlh = bkc.openLedger(writelh.getId(), digestType, \"password\".getBytes());\n         // should have triggered recovery and fencing\n         \n         try {\n@@ -346,4 +346,35 @@ public void testFencingInteractionWithBookieRecovery2() throws Exception {\n             // correct behaviour\n         }\n     }\n+\n+    /**\n+     * Test that fencing doesn't work with a bad password\n+     */\n+    @Test\n+    public void testFencingBadPassword() throws Exception {\n+        /*\n+         * Create ledger.\n+         */\n+        LedgerHandle writelh = null;\n+        writelh = bkc.createLedger(digestType, \"password1\".getBytes());\n+\n+        String tmp = \"BookKeeper is cool!\";\n+        for (int i = 0; i < 10; i++) {\n+            writelh.addEntry(tmp.getBytes());\n+        }\n+\n+        /*\n+         * Try to open ledger.\n+         */\n+        try {\n+            LedgerHandle readlh = bkc.openLedger(writelh.getId(), digestType, \"badPassword\".getBytes());\n+            fail(\"Should not have been able to open with a bad password\");\n+        } catch (BKException.BKUnauthorizedAccessException uue) {\n+            // correct behaviour\n+        }\n+        // should have triggered recovery and fencing\n+\n+        writelh.addEntry(tmp.getBytes());\n+    }\n+\n }"},{"sha":"773d7698b28b8884a4ef3d9d433127b5d42cc411","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/47244dd77fb291ec95d5da4c96751ea92bc2d516/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=47244dd77fb291ec95d5da4c96751ea92bc2d516","patch":"@@ -138,7 +138,7 @@ public void testWriteGaps() throws Exception {\n         bc.addEntry(addr, 1, passwd, 1, bb, wrcb, arc, BookieProtocol.FLAG_NONE);\n         synchronized (arc) {\n             arc.wait(1000);\n-            bc.readEntry(addr, 1, 1, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 1, recb, arc);\n             arc.wait(1000);\n             assertEquals(0, arc.rc);\n             assertEquals(1, arc.entry.getInt());\n@@ -157,63 +157,63 @@ public void testWriteGaps() throws Exception {\n             notifyObject.wait();\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 6, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 6, recb, arc);\n             arc.wait(1000);\n             assertEquals(BKException.Code.NoSuchEntryException, arc.rc);\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 7, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 7, recb, arc);\n             arc.wait(1000);\n             assertEquals(0, arc.rc);\n             assertEquals(7, arc.entry.getInt());\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 1, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 1, recb, arc);\n             arc.wait(1000);\n             assertEquals(0, arc.rc);\n             assertEquals(1, arc.entry.getInt());\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 2, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 2, recb, arc);\n             arc.wait(1000);\n             assertEquals(0, arc.rc);\n             assertEquals(2, arc.entry.getInt());\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 3, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 3, recb, arc);\n             arc.wait(1000);\n             assertEquals(0, arc.rc);\n             assertEquals(3, arc.entry.getInt());\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 4, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 4, recb, arc);\n             arc.wait(1000);\n             assertEquals(BKException.Code.NoSuchEntryException, arc.rc);\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 11, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 11, recb, arc);\n             arc.wait(1000);\n             assertEquals(0, arc.rc);\n             assertEquals(11, arc.entry.getInt());\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 5, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 5, recb, arc);\n             arc.wait(1000);\n             assertEquals(0, arc.rc);\n             assertEquals(5, arc.entry.getInt());\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 10, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 10, recb, arc);\n             arc.wait(1000);\n             assertEquals(BKException.Code.NoSuchEntryException, arc.rc);\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 12, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 12, recb, arc);\n             arc.wait(1000);\n             assertEquals(BKException.Code.NoSuchEntryException, arc.rc);\n         }\n         synchronized (arc) {\n-            bc.readEntry(addr, 1, 13, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 1, 13, recb, arc);\n             arc.wait(1000);\n             assertEquals(BKException.Code.NoSuchEntryException, arc.rc);\n         }\n@@ -235,7 +235,7 @@ public void testNoLedger() throws Exception {\n         InetSocketAddress addr = new InetSocketAddress(\"127.0.0.1\", port);\n         BookieClient bc = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n         synchronized (arc) {\n-            bc.readEntry(addr, 2, 13, recb, arc, BookieProtocol.FLAG_NONE);\n+            bc.readEntry(addr, 2, 13, recb, arc);\n             arc.wait(1000);\n             assertEquals(BKException.Code.NoSuchEntryException, arc.rc);\n         }"}]}

