{"sha":"479cb452d43785c88c729934e079d5ca4939ba90","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NzljYjQ1MmQ0Mzc4NWM4OGM3Mjk5MzRlMDc5ZDVjYTQ5MzliYTkw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-23T15:53:40Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-23T15:53:40Z"},"message":"BOOKKEEPER-787: Modify Cookie by removing 'znodeVersion' state/field (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1627068 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e32161c852941e52259d0cda716be2e7035dbf61","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e32161c852941e52259d0cda716be2e7035dbf61"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/479cb452d43785c88c729934e079d5ca4939ba90","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/479cb452d43785c88c729934e079d5ca4939ba90","html_url":"https://github.com/apache/bookkeeper/commit/479cb452d43785c88c729934e079d5ca4939ba90","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/479cb452d43785c88c729934e079d5ca4939ba90/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"36478d1e639ba099cc4256ca2b2fbcc98f7649dd","url":"https://api.github.com/repos/apache/bookkeeper/commits/36478d1e639ba099cc4256ca2b2fbcc98f7649dd","html_url":"https://github.com/apache/bookkeeper/commit/36478d1e639ba099cc4256ca2b2fbcc98f7649dd"}],"stats":{"total":138,"additions":96,"deletions":42},"files":[{"sha":"c2af81405f8721ea2ae288fdc30de65a1b1019fe","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/479cb452d43785c88c729934e079d5ca4939ba90/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/479cb452d43785c88c729934e079d5ca4939ba90/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=479cb452d43785c88c729934e079d5ca4939ba90","patch":"@@ -236,6 +236,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-782: Use builder pattern for Cookie (rakeshr via sijie)\n \n+        BOOKKEEPER-787: Modify Cookie by removing 'znodeVersion' state/field (rakeshr via ivank)\n+\n       bookkeeper-benchmark:\n \n         BOOKKEEPER-768: fix typo 'seconds' to milliseconds in benchmark output (jialin via sijie)"},{"sha":"54a3c9fbfaf9f372b569ef50c7f5533b107133d8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/479cb452d43785c88c729934e079d5ca4939ba90/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/479cb452d43785c88c729934e079d5ca4939ba90/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=479cb452d43785c88c729934e079d5ca4939ba90","patch":"@@ -59,6 +59,8 @@\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.CreateMode;\n@@ -322,8 +324,8 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n             }\n             Cookie masterCookie = builder.build();\n             try {\n-                Cookie zkCookie = Cookie.readFromZooKeeper(zk, conf);\n-                masterCookie.verify(zkCookie);\n+                Versioned<Cookie> zkCookie = Cookie.readFromZooKeeper(zk, conf);\n+                masterCookie.verify(zkCookie.getValue());\n             } catch (KeeperException.NoNodeException nne) {\n                 // can occur in cases:\n                 // 1) new environment or\n@@ -357,7 +359,7 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n                         masterCookie.writeToDirectory(dir);\n                     }\n                 }\n-                masterCookie.writeToZooKeeper(zk, conf);\n+                masterCookie.writeToZooKeeper(zk, conf, Version.NEW);\n             }\n         } catch (KeeperException ke) {\n             LOG.error(\"Couldn't access cookie in zookeeper\", ke);"},{"sha":"44582b29cf82574006c026e37bdecf24b75012a0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":33,"deletions":35,"changes":68,"blob_url":"https://github.com/apache/bookkeeper/blob/479cb452d43785c88c729934e079d5ca4939ba90/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/479cb452d43785c88c729934e079d5ca4939ba90/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=479cb452d43785c88c729934e079d5ca4939ba90","patch":"@@ -36,8 +36,11 @@\n import java.net.UnknownHostException;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.ZkVersion;\n import org.apache.bookkeeper.proto.DataFormats.CookieFormat;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooDefs.Ids;\n@@ -65,21 +68,17 @@\n     private final static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n \n     static final int CURRENT_COOKIE_LAYOUT_VERSION = 4;\n-    private static final int DEFAULT_COOKIE_ZNODE_VERSION = Integer.MIN_VALUE;\n     private final int layoutVersion;\n     private final String bookieHost;\n     private final String journalDir;\n     private final String ledgerDirs;\n-    private int znodeVersion = DEFAULT_COOKIE_ZNODE_VERSION;\n     private final String instanceId;\n \n-    private Cookie(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, int znodeVersion,\n-            String instanceId) {\n+    private Cookie(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, String instanceId) {\n         this.layoutVersion = layoutVersion;\n         this.bookieHost = bookieHost;\n         this.journalDir = journalDir;\n         this.ledgerDirs = ledgerDirs;\n-        this.znodeVersion = znodeVersion;\n         this.instanceId = instanceId;\n     }\n \n@@ -186,33 +185,36 @@ void writeToDirectory(File directory) throws IOException {\n      *            ZooKeeper instance\n      * @param conf\n      *            configuration\n+     * @param version\n+     *            version\n      *\n      * @throws KeeperException\n      * @throws InterruptedException\n      * @throws UnknownHostException\n      */\n-    void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n+    void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version)\n             throws KeeperException, InterruptedException, UnknownHostException {\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n                 + BookKeeperConstants.COOKIE_NODE;\n         String zkPath = getZkPath(conf);\n         byte[] data = toString().getBytes(UTF_8);\n-        if (znodeVersion != DEFAULT_COOKIE_ZNODE_VERSION) {\n-            zk.setData(zkPath, data, znodeVersion);\n-        } else {\n+        if (Version.NEW == version) {\n             if (zk.exists(bookieCookiePath, false) == null) {\n                 try {\n                     zk.create(bookieCookiePath, new byte[0],\n-                              Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                 } catch (KeeperException.NodeExistsException nne) {\n                     LOG.info(\"More than one bookie tried to create {} at once. Safe to ignore\",\n-                             bookieCookiePath);\n+                            bookieCookiePath);\n                 }\n             }\n             zk.create(zkPath, data,\n-                      Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-            Stat stat = zk.exists(zkPath, false);\n-            this.znodeVersion = stat.getVersion();\n+                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        } else {\n+            if (!(version instanceof ZkVersion)) {\n+                throw new IllegalArgumentException(\"Invalid version type, expected ZkVersion type\");\n+            }\n+            zk.setData(zkPath, data, ((ZkVersion) version).getZnodeVersion());\n         }\n     }\n \n@@ -223,18 +225,20 @@ void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n      *            ZooKeeper instance\n      * @param conf\n      *            configuration\n+     * @param version\n+     *            zookeeper version\n      *\n      * @throws KeeperException\n      * @throws InterruptedException\n      * @throws UnknownHostException\n      */\n-    void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf) throws KeeperException, InterruptedException,\n-            UnknownHostException {\n-        String zkPath = getZkPath(conf);\n-        if (znodeVersion != DEFAULT_COOKIE_ZNODE_VERSION) {\n-            zk.delete(zkPath, znodeVersion);\n+    void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf, Version version) throws KeeperException,\n+            InterruptedException, UnknownHostException {\n+        if (!(version instanceof ZkVersion)) {\n+            throw new IllegalArgumentException(\"Invalid version type, expected ZkVersion type\");\n         }\n-        znodeVersion = DEFAULT_COOKIE_ZNODE_VERSION;\n+        String zkPath = getZkPath(conf);\n+        zk.delete(zkPath, ((ZkVersion)version).getZnodeVersion());\n     }\n \n     /**\n@@ -271,14 +275,14 @@ static Builder generateCookie(ServerConfiguration conf)\n      * @param conf\n      *            configuration\n      *\n-     * @return cookie object\n+     * @return versioned cookie object\n      *\n      * @throws KeeperException\n      * @throws InterruptedException\n      * @throws IOException\n      * @throws UnknownHostException\n      */\n-    static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n+    static Versioned<Cookie> readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n             throws KeeperException, InterruptedException, IOException, UnknownHostException {\n         String zkPath = getZkPath(conf);\n \n@@ -287,8 +291,10 @@ static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n         BufferedReader reader = new BufferedReader(new StringReader(new String(data, UTF_8)));\n         try {\n             Builder builder = parse(reader);\n-            builder.setZnodeVersion(stat.getVersion()); // sets stat version from ZooKeeper\n-            return builder.build();\n+            Cookie cookie = builder.build();\n+            // sets stat version from ZooKeeper\n+            ZkVersion version = new ZkVersion(stat.getVersion());\n+            return new Versioned<Cookie>(cookie, version);\n         } finally {\n             reader.close();\n         }\n@@ -356,19 +362,16 @@ public boolean isBookieHostCreatedFromIp() throws IOException {\n         private String bookieHost = null;\n         private String journalDir = null;\n         private String ledgerDirs = null;\n-        private int znodeVersion = DEFAULT_COOKIE_ZNODE_VERSION;\n         private String instanceId = null;\n \n         private Builder() {\n         }\n \n-        private Builder(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs,\n-                int znodeVersion, String instanceId) {\n+        private Builder(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, String instanceId) {\n             this.layoutVersion = layoutVersion;\n             this.bookieHost = bookieHost;\n             this.journalDir = journalDir;\n             this.ledgerDirs = ledgerDirs;\n-            this.znodeVersion = znodeVersion;\n             this.instanceId = instanceId;\n         }\n \n@@ -392,18 +395,13 @@ public Builder setLedgerDirs(String ledgerDirs) {\n             return this;\n         }\n \n-        public Builder setZnodeVersion(int znodeVersion) {\n-            this.znodeVersion = znodeVersion;\n-            return this;\n-        }\n-\n         public Builder setInstanceId(String instanceId) {\n             this.instanceId = instanceId;\n             return this;\n         }\n \n         public Cookie build() {\n-            return new Cookie(layoutVersion, bookieHost, journalDir, ledgerDirs, znodeVersion, instanceId);\n+            return new Cookie(layoutVersion, bookieHost, journalDir, ledgerDirs, instanceId);\n         }\n     }\n \n@@ -425,6 +423,6 @@ static Builder newBuilder() {\n      */\n     static Builder newBuilder(Cookie oldCookie) {\n         return new Builder(oldCookie.layoutVersion, oldCookie.bookieHost, oldCookie.journalDir, oldCookie.ledgerDirs,\n-                oldCookie.znodeVersion, oldCookie.instanceId);\n+                oldCookie.instanceId);\n     }\n }"},{"sha":"f6ec59c9bfcee8fd3e9365d0ad58fd79e9e52fa2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/479cb452d43785c88c729934e079d5ca4939ba90/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/479cb452d43785c88c729934e079d5ca4939ba90/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=479cb452d43785c88c729934e079d5ca4939ba90","patch":"@@ -23,6 +23,8 @@\n \n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.HardLink;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.cli.BasicParser;\n@@ -240,7 +242,7 @@ public boolean accept(File dir, String name) {\n             }\n \n             try {\n-                c.writeToZooKeeper(zk, conf);\n+                c.writeToZooKeeper(zk, conf, Version.NEW);\n             } catch (KeeperException ke) {\n                 LOG.error(\"Error writing cookie to zookeeper\");\n                 throw new BookieException.UpgradeException(ke);\n@@ -314,8 +316,8 @@ public static void rollback(ServerConfiguration conf)\n                 }\n             }\n             try {\n-                Cookie c = Cookie.readFromZooKeeper(zk, conf);\n-                c.deleteFromZooKeeper(zk, conf);\n+                Versioned<Cookie> cookie = Cookie.readFromZooKeeper(zk, conf);\n+                cookie.getValue().deleteFromZooKeeper(zk, conf, cookie.getVersion());\n             } catch (KeeperException ke) {\n                 LOG.error(\"Error deleting cookie from ZooKeeper\");\n                 throw new BookieException.UpgradeException(ke);"},{"sha":"27577d2924c33886a875eb952c8031bbb072225e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":51,"deletions":1,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/479cb452d43785c88c729934e079d5ca4939ba90/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/479cb452d43785c88c729934e079d5ca4939ba90/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=479cb452d43785c88c729934e079d5ca4939ba90","patch":"@@ -31,12 +31,17 @@\n import java.io.File;\n import java.io.IOException;\n \n+import junit.framework.Assert;\n+\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.apache.bookkeeper.meta.ZkVersion;\n import org.apache.bookkeeper.test.PortManager;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.After;\n@@ -104,7 +109,7 @@ public void testBadJournalCookie() throws Exception {\n             .setBookiePort(bookiePort);\n         Cookie.Builder cookieBuilder = Cookie.generateCookie(conf1);\n         Cookie c = cookieBuilder.build();\n-        c.writeToZooKeeper(zkc, conf1);\n+        c.writeToZooKeeper(zkc, conf1, Version.NEW);\n \n         String journalDir = newDirectory();\n         String ledgerDir = newDirectory();\n@@ -429,4 +434,49 @@ public void testV2dataWithHostNameAsBookieID() throws Exception {\n                     ice.getCause().getMessage().contains(\"upgrade needed\"));\n         }\n     }\n+\n+    /**\n+     * Test write cookie multiple times.\n+     */\n+    @Test(timeout = 60000)\n+    public void testWriteToZooKeeper() throws Exception {\n+        String[] ledgerDirs = new String[] { newDirectory(), newDirectory(), newDirectory() };\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n+                .setZkServers(zkutil.getZooKeeperConnectString()).setJournalDirName(journalDir)\n+                .setLedgerDirNames(ledgerDirs).setBookiePort(bookiePort);\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+        Versioned<Cookie> zkCookie = Cookie.readFromZooKeeper(zkc, conf);\n+        Version version1 = zkCookie.getVersion();\n+        Assert.assertTrue(\"Invalid type expected ZkVersion type\", version1 instanceof ZkVersion);\n+        ZkVersion zkVersion1 = (ZkVersion) version1;\n+        Cookie cookie = zkCookie.getValue();\n+        cookie.writeToZooKeeper(zkc, conf, version1);\n+\n+        zkCookie = Cookie.readFromZooKeeper(zkc, conf);\n+        Version version2 = zkCookie.getVersion();\n+        Assert.assertTrue(\"Invalid type expected ZkVersion type\", version2 instanceof ZkVersion);\n+        ZkVersion zkVersion2 = (ZkVersion) version2;\n+        Assert.assertEquals(\"Version mismatches!\", zkVersion1.getZnodeVersion() + 1, zkVersion2.getZnodeVersion());\n+    }\n+\n+    /**\n+     * Test delete cookie.\n+     */\n+    @Test(timeout = 60000)\n+    public void testDeleteFromZooKeeper() throws Exception {\n+        String[] ledgerDirs = new String[] { newDirectory(), newDirectory(), newDirectory() };\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n+                .setZkServers(zkutil.getZooKeeperConnectString()).setJournalDirName(journalDir)\n+                .setLedgerDirNames(ledgerDirs).setBookiePort(bookiePort);\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+        Versioned<Cookie> zkCookie = Cookie.readFromZooKeeper(zkc, conf);\n+        Cookie cookie = zkCookie.getValue();\n+        cookie.deleteFromZooKeeper(zkc, conf, zkCookie.getVersion());\n+    }\n }"}]}

