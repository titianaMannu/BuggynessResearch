{"sha":"48304c7c07513a15d26cb61f311c9f4b998fd8fc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ODMwNGM3YzA3NTEzYTE1ZDI2Y2I2MWYzMTFjOWY0Yjk5OGZkOGZj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-29T13:18:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-29T13:18:34Z"},"message":"BOOKKEEPER-190: Add entries would fail when number of open ledgers reaches more than openFileLimit. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1306839 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ac46a913712c60854893555ebeb094aac827e95d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ac46a913712c60854893555ebeb094aac827e95d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/48304c7c07513a15d26cb61f311c9f4b998fd8fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/48304c7c07513a15d26cb61f311c9f4b998fd8fc","html_url":"https://github.com/apache/bookkeeper/commit/48304c7c07513a15d26cb61f311c9f4b998fd8fc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/48304c7c07513a15d26cb61f311c9f4b998fd8fc/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c805430253c6e6bb4341ad51b406ceabeafcd4e8","url":"https://api.github.com/repos/apache/bookkeeper/commits/c805430253c6e6bb4341ad51b406ceabeafcd4e8","html_url":"https://github.com/apache/bookkeeper/commit/c805430253c6e6bb4341ad51b406ceabeafcd4e8"}],"stats":{"total":374,"additions":214,"deletions":160},"files":[{"sha":"9361bae44e034257a0b237b2d5d1082813d1e769","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/48304c7c07513a15d26cb61f311c9f4b998fd8fc/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/48304c7c07513a15d26cb61f311c9f4b998fd8fc/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=48304c7c07513a15d26cb61f311c9f4b998fd8fc","patch":"@@ -64,6 +64,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-195: HierarchicalLedgerManager doesn't consider idgen as a \"specialNode\" (ivank)\n \n+        BOOKKEEPER-190: Add entries would fail when number of open ledgers reaches more than openFileLimit. (sijie via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"ee38862a2a996d73b2a28bbcb844dcde7934efc7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=48304c7c07513a15d26cb61f311c9f4b998fd8fc","patch":"@@ -113,6 +113,7 @@\n         private static final long serialVersionUID = 1L;\n         private long ledgerId;\n         public NoLedgerException(long ledgerId) {\n+            super(\"Ledger \" + ledgerId + \" not found\");\n             this.ledgerId = ledgerId;\n         }\n         public long getLedgerId() {"},{"sha":"ab5405839915076809a1b1d2e04a5371ff81fbbf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=48304c7c07513a15d26cb61f311c9f4b998fd8fc","patch":"@@ -182,8 +182,16 @@ private int readAbsolute(ByteBuffer bb, long start) throws IOException {\n         return total;\n     }\n \n-    synchronized public void close() throws IOException {\n+    /**\n+     * Close a file info\n+     *\n+     * @param force\n+     *          if set to true, the index is forced to create before closed,\n+     *          if set to false, the index is not forced to create.\n+     */\n+    synchronized public void close(boolean force) throws IOException {\n         isClosed = true;\n+        checkOpen(force);\n         if (useCount == 0 && fc != null) {\n             fc.close();\n         }"},{"sha":"0e89a8f897cb2c25b65a715a9296e5497de0f2dc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":47,"deletions":19,"changes":66,"blob_url":"https://github.com/apache/bookkeeper/blob/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=48304c7c07513a15d26cb61f311c9f4b998fd8fc","patch":"@@ -238,9 +238,7 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n                     }\n                     activeLedgerManager.addActiveLedger(ledger, true);\n                 }\n-                if (openLedgers.size() > openFileLimit) {\n-                    fileInfoCache.remove(openLedgers.removeFirst()).close();\n-                }\n+                evictFileInfoIfNecessary();\n                 fi = new FileInfo(lf, masterKey);\n                 fileInfoCache.put(ledger, fi);\n                 openLedgers.add(ledger);\n@@ -366,15 +364,15 @@ public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n                     // send up a sequential list\n                     int count = i - start;\n                     if (count == 0) {\n-                        System.out.println(\"Count cannot possibly be zero!\");\n+                        LOG.warn(\"Count cannot possibly be zero!\");\n                     }\n                     writeBuffers(l, entries, fi, start, count);\n                     start = i;\n                 }\n                 lastOffset = entries.get(i).getFirstEntry();\n             }\n             if (entries.size()-start == 0 && entries.size() != 0) {\n-                System.out.println(\"Nothing to write, but there were entries!\");\n+                LOG.warn(\"Nothing to write, but there were entries!\");\n             }\n             writeBuffers(l, entries, fi, start, entries.size()-start);\n             synchronized(this) {\n@@ -400,7 +398,6 @@ private void writeBuffers(Long ledger,\n             LOG.trace(\"Writing \" + count + \" buffers of \" + Long.toHexString(ledger));\n         }\n         if (count == 0) {\n-            //System.out.println(\"Count is zero!\");\n             return;\n         }\n         ByteBuffer buffs[] = new ByteBuffer[count];\n@@ -417,7 +414,6 @@ private void writeBuffers(Long ledger,\n             if (rc <= 0) {\n                 throw new IOException(\"Short write to ledger \" + ledger + \" rc = \" + rc);\n             }\n-            //System.out.println(\"Wrote \" + rc + \" to \" + ledger);\n             totalWritten += rc;\n         }\n         if (totalWritten != count * pageSize) {\n@@ -457,14 +453,20 @@ private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOExceptio\n                 synchronized(this) {\n                     Long cleanLedger = cleanLedgers.getFirst();\n                     Map<Long, LedgerEntryPage> map = pages.get(cleanLedger);\n-                    if (map == null || map.isEmpty()) {\n+                    while (map == null || map.isEmpty()) {\n                         cleanLedgers.removeFirst();\n-                        continue;\n+                        if (cleanLedgers.isEmpty()) {\n+                            continue outerLoop; \n+                        }\n+                        cleanLedger = cleanLedgers.getFirst();\n+                        map = pages.get(cleanLedger);\n                     }\n                     Iterator<Map.Entry<Long, LedgerEntryPage>> it = map.entrySet().iterator();\n                     LedgerEntryPage lep = it.next().getValue();\n                     while((lep.inUse() || !lep.isClean())) {\n                         if (!it.hasNext()) {\n+                            // no clean page found in this ledger\n+                            cleanLedgers.removeFirst();\n                             continue outerLoop;\n                         }\n                         lep = it.next().getValue();\n@@ -581,19 +583,30 @@ private void getActiveLedgers() {\n     public void deleteLedger(long ledgerId) throws IOException {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Deleting ledgerId: \" + ledgerId);\n+\n+        // remove pages first to avoid page flushed when deleting file info\n+        synchronized(this) {\n+            pages.remove(ledgerId);\n+        }\n         // Delete the ledger's index file and close the FileInfo\n-        FileInfo fi = getFileInfo(ledgerId, null);\n-        fi.delete();\n-        fi.close();\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            fi.delete();\n+            fi.close(false);\n+        } finally {\n+            // should release use count\n+            // otherwise the file channel would not be closed.\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n \n         // Remove it from the active ledger manager\n         activeLedgerManager.removeActiveLedger(ledgerId);\n \n         // Now remove it from all the other lists and maps.\n         // These data structures need to be synchronized first before removing entries.\n-        synchronized(this) {\n-            pages.remove(ledgerId);\n-        }\n         synchronized(fileInfoCache) {\n             fileInfoCache.remove(ledgerId);\n         }\n@@ -628,9 +641,7 @@ private File findIndexFile(long ledgerId) throws IOException {\n                 if (lf == null) {\n                     throw new Bookie.NoLedgerException(ledgerId);\n                 }\n-                if (openLedgers.size() > openFileLimit) {\n-                    fileInfoCache.remove(openLedgers.removeFirst()).close();\n-                }\n+                evictFileInfoIfNecessary();        \n                 fi = new FileInfo(lf, null);\n                 byte[] key = fi.getMasterKey();\n                 fileInfoCache.put(ledgerId, fi);\n@@ -641,9 +652,26 @@ private File findIndexFile(long ledgerId) throws IOException {\n         }\n     }\n \n+    // evict file info if necessary\n+    private void evictFileInfoIfNecessary() throws IOException {\n+        if (openLedgers.size() > openFileLimit) {\n+            long ledgerToRemove = openLedgers.removeFirst();\n+            LOG.info(\"Ledger {} is evicted from file info cache.\",\n+                     ledgerToRemove);\n+            fileInfoCache.remove(ledgerToRemove).close(true);\n+        }\n+    }\n+\n     @Override\n     public void setMasterKey(long ledgerId, byte[] masterKey) throws IOException {\n-        getFileInfo(ledgerId, masterKey);\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, masterKey);\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n     }\n \n     @Override"},{"sha":"f26e30b729ad3366cde4153ba67926035f9f6a91","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=48304c7c07513a15d26cb61f311c9f4b998fd8fc","patch":"@@ -153,6 +153,18 @@ public int getOpenFileLimit() {\n         return this.getInt(OPEN_FILE_LIMIT, 900);\n     }\n \n+    /**\n+     * Set limitation of number of open files.\n+     *\n+     * @param fileLimit\n+     *          Limitation of number of open files.\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setOpenFileLimit(int fileLimit) {\n+        setProperty(OPEN_FILE_LIMIT, fileLimit);\n+        return this;\n+    }\n+\n     /**\n      * Get limitation number of index pages in ledger cache\n      *\n@@ -162,6 +174,18 @@ public int getPageLimit() {\n         return this.getInt(PAGE_LIMIT, -1);\n     }\n \n+    /**\n+     * Set limitation number of index pages in ledger cache.\n+     *\n+     * @param pageLimit\n+     *          Limitation of number of index pages in ledger cache.\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setPageLimit(int pageLimit) {\n+        this.setProperty(PAGE_LIMIT, pageLimit);\n+        return this;\n+    }\n+\n     /**\n      * Get page size\n      *"},{"sha":"97eaca1cb73eb63fc637eb009e5a9bec0abb8de0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=48304c7c07513a15d26cb61f311c9f4b998fd8fc","patch":"@@ -64,7 +64,7 @@ private void writeIndexFileForLedger(File indexDir, long ledgerId,\n         FileInfo fi = new FileInfo(fn, masterKey);\n         // force creation of index file\n         fi.write(new ByteBuffer[]{ ByteBuffer.allocate(0) }, 0);\n-        fi.close();\n+        fi.close(true);\n     }\n \n     private void writePartialIndexFileForLedger(File indexDir, long ledgerId,\n@@ -75,7 +75,7 @@ private void writePartialIndexFileForLedger(File indexDir, long ledgerId,\n         FileInfo fi = new FileInfo(fn, masterKey);\n         // force creation of index file\n         fi.write(new ByteBuffer[]{ ByteBuffer.allocate(0) }, 0);\n-        fi.close();\n+        fi.close(true);\n         // file info header\n         int headerLen = 8 + 4 + masterKey.length;\n         // truncate the index file"},{"sha":"4e32807c08cda5dff4474fd83a60077ea81e38a8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/bookkeeper/blob/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=48304c7c07513a15d26cb61f311c9f4b998fd8fc","patch":"@@ -0,0 +1,127 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * LedgerCache related test cases\n+ */\n+public class LedgerCacheTest extends TestCase {\n+    static Logger LOG = LoggerFactory.getLogger(LedgerCacheTest.class);\n+\n+    LedgerManager ledgerManager;\n+    LedgerCache ledgerCache;\n+    ServerConfiguration conf;\n+    File txnDir, ledgerDir;\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        txnDir = File.createTempFile(\"ledgercache\", \"txn\");\n+        txnDir.delete();\n+        txnDir.mkdir();\n+        ledgerDir = File.createTempFile(\"ledgercache\", \"ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+        // create current dir\n+        new File(ledgerDir, Bookie.CURRENT_DIR).mkdir();\n+\n+        conf = new ServerConfiguration();\n+        conf.setZkServers(null);\n+        conf.setJournalDirName(txnDir.getPath());\n+        conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+\n+        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, null);\n+    }\n+\n+    @Override\n+    @After\n+    public void tearDown() throws Exception {\n+        ledgerManager.close();\n+        FileUtils.deleteDirectory(txnDir);\n+        FileUtils.deleteDirectory(ledgerDir);\n+    }\n+\n+    private void newLedgerCache() {\n+        ledgerCache = new LedgerCacheImpl(conf, ledgerManager);\n+    }\n+\n+    @Test\n+    public void testAddEntryException() {\n+        // set page limitation\n+        conf.setPageLimit(10);\n+        // create a ledger cache\n+        newLedgerCache();\n+        /*\n+         * Populate ledger cache.\n+         */\n+        try {\n+            byte[] masterKey = \"blah\".getBytes();\n+            for( int i = 0; i < 100; i++) {\n+                ledgerCache.setMasterKey((long)i, masterKey);\n+                ledgerCache.putEntryOffset(i, 0, i*8);\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"Got IOException.\", e);\n+            fail(\"Failed to add entry.\");\n+        }\n+    }\n+\n+    @Test\n+    public void testLedgerEviction() throws Exception {\n+        int numEntries = 10;\n+        // limit open files & pages\n+        conf.setOpenFileLimit(1).setPageLimit(2)\n+            .setPageSize(8 * numEntries);\n+        // create ledger cache\n+        newLedgerCache();\n+        try {\n+            int numLedgers = 3;\n+            byte[] masterKey = \"blah\".getBytes();\n+            for (int i=1; i<=numLedgers; i++) {\n+                ledgerCache.setMasterKey((long)i, masterKey);\n+                for (int j=0; j<numEntries; j++) {\n+                    ledgerCache.putEntryOffset(i, j, i * numEntries + j);\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"Got Exception.\", e);\n+            fail(\"Failed to add entry.\");\n+        }\n+    }\n+\n+}"},{"sha":"b39954a90c7d5974928c2b6522d9398cdff332d3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/48304c7c07513a15d26cb61f311c9f4b998fd8fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=48304c7c07513a15d26cb61f311c9f4b998fd8fc","patch":"@@ -77,7 +77,7 @@ static void writeLedgerDir(File dir,\n         FileInfo fi = new FileInfo(fn, masterKey);\n         // force creation of index file\n         fi.write(new ByteBuffer[]{ ByteBuffer.allocate(0) }, 0);\n-        fi.close();\n+        fi.close(true);\n \n         long logId = 0;\n         ByteBuffer LOGFILE_HEADER = ByteBuffer.allocate(1024);\n@@ -245,4 +245,4 @@ public void testCommandLine() throws Exception {\n             System.setErr(origerr);\n         }\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"00249e3016d545e821855e4d38c2f865b9ed30e1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","status":"removed","additions":0,"deletions":136,"changes":136,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -1,136 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.bookkeeper.client;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.InetSocketAddress;\n-import java.nio.ByteBuffer;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.security.GeneralSecurityException;\n-\n-import org.apache.bookkeeper.bookie.Bookie;\n-import org.apache.bookkeeper.bookie.BookieException;\n-import org.apache.bookkeeper.bookie.LedgerEntryPage;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.client.MacDigestManager;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import junit.framework.TestCase;\n-\n-/**\n- * Tests writing to concurrent ledgers\n- */\n-public class LedgerCacheTest extends TestCase {\n-    static Logger LOG = LoggerFactory.getLogger(LedgerCacheTest.class);\n-\n-    Bookie bookie;\n-    ServerConfiguration conf;\n-    File txnDir, ledgerDir;\n-\n-    class TestWriteCallback implements WriteCallback {\n-        public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n-            LOG.info(\"Added entry: \" + rc + \", \" + ledgerId + \", \" + entryId + \", \" + addr);\n-        }\n-    }\n-\n-\n-    @Override\n-    @Before\n-    public void setUp() throws Exception {\n-        String txnDirName = System.getProperty(\"txnDir\");\n-        if (txnDirName != null) {\n-            txnDir = new File(txnDirName);\n-        }\n-        String ledgerDirName = System.getProperty(\"ledgerDir\");\n-        if (ledgerDirName != null) {\n-            ledgerDir = new File(ledgerDirName);\n-        }\n-        File tmpFile = File.createTempFile(\"book\", \".txn\", txnDir);\n-        tmpFile.delete();\n-        txnDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n-        txnDir.mkdirs();\n-        tmpFile = File.createTempFile(\"book\", \".ledger\", ledgerDir);\n-        ledgerDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n-        ledgerDir.mkdirs();\n-\n-        conf = new ServerConfiguration();\n-        conf.setBookiePort(5000);\n-        conf.setZkServers(null);\n-        conf.setJournalDirName(txnDir.getPath());\n-        conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n-        bookie = new Bookie(conf);\n-        bookie.start();\n-    }\n-\n-\n-    @Override\n-    @After\n-    public void tearDown() {\n-        bookie.shutdown();\n-        recursiveDelete(txnDir);\n-        recursiveDelete(ledgerDir);\n-    }\n-\n-    /**\n-     * Recursively deletes a directory. This is a duplication of BookieClientTest.\n-     *\n-     * @param dir\n-     */\n-    private static void recursiveDelete(File dir) {\n-        File children[] = dir.listFiles();\n-        if (children != null) {\n-            for (File child : children) {\n-                recursiveDelete(child);\n-            }\n-        }\n-        dir.delete();\n-    }\n-\n-    @Test\n-    public void testAddEntryException()\n-            throws GeneralSecurityException, BookieException {\n-        /*\n-         * Populate ledger cache\n-         */\n-        try {\n-            byte[] masterKey = \"blah\".getBytes();\n-            for( int i = 0; i < 30000; i++) {\n-                MacDigestManager dm = new MacDigestManager(i, masterKey);\n-                byte[] data = \"0123456789\".getBytes();\n-                ByteBuffer entry = dm.computeDigestAndPackageForSending(0, 0, 10, data, 0, data.length).toByteBuffer();\n-                bookie.addEntry(entry, new TestWriteCallback(), null, masterKey);\n-            }\n-        } catch (IOException e) {\n-            LOG.error(\"Got IOException.\", e);\n-            fail(\"Failed to add entry.\");\n-        }\n-    }\n-\n-}"}]}

