{"sha":"48aa69dd0ba41f5ba7bb2b04f31172c919be4391","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0OGFhNjlkZDBiYTQxZjViYTdiYjJiMDRmMzExNzJjOTE5YmU0Mzkx","commit":{"author":{"name":"Samuel Just","email":"sjust@salesforce.com","date":"2017-04-11T18:14:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-04-11T18:14:19Z"},"message":"BOOKKEEPER-1031: close the ledger handle in ReplicationWorker.rereplicate\n\nâ€¦cate\n\nOtherwise, we build up an unbounded set of Listeners in the\nAbstractZkLedgerManager listenerSet structure which never go\naway.\n\nSigned-off-by: Samuel Just <sjustsalesforce.com>\n\nAuthor: Samuel Just <sjust@salesforce.com>\n\nReviewers: Enrico Olivelli <eolivelli@gmail.com>, Sijie Guo <sijie@apache.org>\n\nCloses #130 from athanatos/forupstream/BOOKKEEPER-1031","tree":{"sha":"6373d66c4212c5fb4bcc1b2f3fed93c0d3cc40c5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6373d66c4212c5fb4bcc1b2f3fed93c0d3cc40c5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/48aa69dd0ba41f5ba7bb2b04f31172c919be4391","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/48aa69dd0ba41f5ba7bb2b04f31172c919be4391","html_url":"https://github.com/apache/bookkeeper/commit/48aa69dd0ba41f5ba7bb2b04f31172c919be4391","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/48aa69dd0ba41f5ba7bb2b04f31172c919be4391/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"ab707d2c6b3251b2a9a30a6d14074704460b3da5","url":"https://api.github.com/repos/apache/bookkeeper/commits/ab707d2c6b3251b2a9a30a6d14074704460b3da5","html_url":"https://github.com/apache/bookkeeper/commit/ab707d2c6b3251b2a9a30a6d14074704460b3da5"}],"stats":{"total":110,"additions":54,"deletions":56},"files":[{"sha":"e6e986f488f8aa168cd6a733fc1b4561a1e80321","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":54,"deletions":56,"changes":110,"blob_url":"https://github.com/apache/bookkeeper/blob/48aa69dd0ba41f5ba7bb2b04f31172c919be4391/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/48aa69dd0ba41f5ba7bb2b04f31172c919be4391/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=48aa69dd0ba41f5ba7bb2b04f31172c919be4391","patch":"@@ -225,9 +225,60 @@ private void rereplicate() throws InterruptedException, BKException,\n     private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedException, BKException,\n             UnavailableException {\n         LOG.debug(\"Going to replicate the fragments of the ledger: {}\", ledgerIdToReplicate);\n-        LedgerHandle lh;\n-        try {\n-            lh = admin.openLedgerNoRecovery(ledgerIdToReplicate);\n+        try (LedgerHandle lh = admin.openLedgerNoRecovery(ledgerIdToReplicate)) {\n+            Set<LedgerFragment> fragments = getUnderreplicatedFragments(lh);\n+            LOG.debug(\"Founds fragments {} for replication from ledger: {}\", fragments, ledgerIdToReplicate);\n+\n+            boolean foundOpenFragments = false;\n+            long numFragsReplicated = 0;\n+            for (LedgerFragment ledgerFragment : fragments) {\n+                if (!ledgerFragment.isClosed()) {\n+                    foundOpenFragments = true;\n+                    continue;\n+                } else if (isTargetBookieExistsInFragmentEnsemble(lh,\n+                        ledgerFragment)) {\n+                    LOG.debug(\"Target Bookie[{}] found in the fragment ensemble: {}\", targetBookie,\n+                            ledgerFragment.getEnsemble());\n+                    continue;\n+                }\n+                try {\n+                    admin.replicateLedgerFragment(lh, ledgerFragment, targetBookie);\n+                    numFragsReplicated++;\n+                } catch (BKException.BKBookieHandleNotAvailableException e) {\n+                    LOG.warn(\"BKBookieHandleNotAvailableException \"\n+                            + \"while replicating the fragment\", e);\n+                } catch (BKException.BKLedgerRecoveryException e) {\n+                    LOG.warn(\"BKLedgerRecoveryException \"\n+                            + \"while replicating the fragment\", e);\n+                    if (admin.getReadOnlyBookies().contains(targetBookie)) {\n+                        underreplicationManager.releaseUnderreplicatedLedger(ledgerIdToReplicate);\n+                        throw new BKException.BKWriteOnReadOnlyBookieException();\n+                    }\n+                }\n+            }\n+\n+            if (numFragsReplicated > 0) {\n+                numLedgersReplicated.inc();\n+            }\n+\n+            if (foundOpenFragments || isLastSegmentOpenAndMissingBookies(lh)) {\n+                deferLedgerLockRelease(ledgerIdToReplicate);\n+                return false;\n+            }\n+\n+            fragments = getUnderreplicatedFragments(lh);\n+            if (fragments.size() == 0) {\n+                LOG.info(\"Ledger replicated successfully. ledger id is: \"\n+                        + ledgerIdToReplicate);\n+                underreplicationManager.markLedgerReplicated(ledgerIdToReplicate);\n+                return true;\n+            } else {\n+                // Releasing the underReplication ledger lock and compete\n+                // for the replication again for the pending fragments\n+                underreplicationManager\n+                        .releaseUnderreplicatedLedger(ledgerIdToReplicate);\n+                return false;\n+            }\n         } catch (BKNoSuchLedgerExistsException e) {\n             // Ledger might have been deleted by user\n             LOG.info(\"BKNoSuchLedgerExistsException while opening \"\n@@ -253,59 +304,6 @@ private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedExceptio\n                     .releaseUnderreplicatedLedger(ledgerIdToReplicate);\n             return false;\n         }\n-        Set<LedgerFragment> fragments = getUnderreplicatedFragments(lh);\n-        LOG.debug(\"Founds fragments {} for replication from ledger: {}\", fragments, ledgerIdToReplicate);\n-\n-        boolean foundOpenFragments = false;\n-        long numFragsReplicated = 0;\n-        for (LedgerFragment ledgerFragment : fragments) {\n-            if (!ledgerFragment.isClosed()) {\n-                foundOpenFragments = true;\n-                continue;\n-            } else if (isTargetBookieExistsInFragmentEnsemble(lh,\n-                    ledgerFragment)) {\n-                LOG.debug(\"Target Bookie[{}] found in the fragment ensemble: {}\", targetBookie,\n-                        ledgerFragment.getEnsemble());\n-                continue;\n-            }\n-            try {\n-                admin.replicateLedgerFragment(lh, ledgerFragment, targetBookie);\n-                numFragsReplicated++;\n-            } catch (BKException.BKBookieHandleNotAvailableException e) {\n-                LOG.warn(\"BKBookieHandleNotAvailableException \"\n-                        + \"while replicating the fragment\", e);\n-            } catch (BKException.BKLedgerRecoveryException e) {\n-                LOG.warn(\"BKLedgerRecoveryException \"\n-                        + \"while replicating the fragment\", e);\n-                if (admin.getReadOnlyBookies().contains(targetBookie)) {\n-                    underreplicationManager.releaseUnderreplicatedLedger(ledgerIdToReplicate);\n-                    throw new BKException.BKWriteOnReadOnlyBookieException();\n-                }\n-            }\n-        }\n-\n-        if (numFragsReplicated > 0) {\n-            numLedgersReplicated.inc();\n-        }\n-\n-        if (foundOpenFragments || isLastSegmentOpenAndMissingBookies(lh)) {\n-            deferLedgerLockRelease(ledgerIdToReplicate);\n-            return false;\n-        }\n-\n-        fragments = getUnderreplicatedFragments(lh);\n-        if (fragments.size() == 0) {\n-            LOG.info(\"Ledger replicated successfully. ledger id is: \"\n-                    + ledgerIdToReplicate);\n-            underreplicationManager.markLedgerReplicated(ledgerIdToReplicate);\n-            return true;\n-        } else {\n-            // Releasing the underReplication ledger lock and compete\n-            // for the replication again for the pending fragments\n-            underreplicationManager\n-                    .releaseUnderreplicatedLedger(ledgerIdToReplicate);\n-            return false;\n-        }\n     }\n \n     /**"}]}

