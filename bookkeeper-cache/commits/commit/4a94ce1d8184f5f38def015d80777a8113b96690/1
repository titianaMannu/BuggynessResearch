{"sha":"4a94ce1d8184f5f38def015d80777a8113b96690","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YTk0Y2UxZDgxODRmNWYzOGRlZjAxNWQ4MDc3N2E4MTEzYjk2Njkw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-04-17T10:18:55Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-04-17T10:18:55Z"},"message":"BOOKKEEPER-196: Define interface between bookie and ledger storage (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1327027 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2c6b7d9002a1b3be1b337629abd2f8315e8daa5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b2c6b7d9002a1b3be1b337629abd2f8315e8daa5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4a94ce1d8184f5f38def015d80777a8113b96690","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4a94ce1d8184f5f38def015d80777a8113b96690","html_url":"https://github.com/apache/bookkeeper/commit/4a94ce1d8184f5f38def015d80777a8113b96690","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4a94ce1d8184f5f38def015d80777a8113b96690/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d834bd3798f22a43dc434d4b809a5c22731da38","url":"https://api.github.com/repos/apache/bookkeeper/commits/3d834bd3798f22a43dc434d4b809a5c22731da38","html_url":"https://github.com/apache/bookkeeper/commit/3d834bd3798f22a43dc434d4b809a5c22731da38"}],"stats":{"total":443,"additions":316,"deletions":127},"files":[{"sha":"764978a83749c9138d25becc6466e2b8152ef425","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -86,6 +86,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-216: Bookie doesn't exit with right exit code (sijie via ivank)\n \n+        BOOKKEEPER-196: Define interface between bookie and ledger storage (ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"128fc09ddec7aef881a6b725fd65e21fe15e6f8d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":21,"deletions":56,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -84,6 +84,7 @@\n \n     final SyncThread syncThread;\n     final LedgerManager ledgerManager;\n+    final LedgerStorage ledgerStorage;\n     final HandleFactory handles;\n \n     static final long METAENTRY_ID_LEDGER_KEY = -0x1000;\n@@ -105,7 +106,7 @@\n \n     // jmx related beans\n     BookieBean jmxBookieBean;\n-    LedgerCacheBean jmxLedgerCacheBean;\n+    BKMBeanInfo jmxLedgerStorageBean;\n \n     Map<Long, byte[]> masterKeyCache = Collections.synchronizedMap(new HashMap<Long, byte[]>());\n \n@@ -137,12 +138,6 @@ public long getEntry() {\n         }\n     }\n \n-    EntryLogger entryLogger;\n-    LedgerCache ledgerCache;\n-    // This is the thread that garbage collects the entry logs that do not\n-    // contain any active ledgers in them; and compacts the entry logs that\n-    // has lower remaining percentage to reclaim disk space.\n-    final GarbageCollectorThread gcThread;\n \n     /**\n      * SyncThread is a background thread which flushes ledger index pages periodically.\n@@ -185,7 +180,7 @@ public void run() {\n                 synchronized(this) {\n                     try {\n                         wait(flushInterval);\n-                        if (!entryLogger.testAndClearSomethingWritten()) {\n+                        if (!ledgerStorage.isFlushRequired()) {\n                             continue;\n                         }\n                     } catch (InterruptedException e) {\n@@ -208,17 +203,11 @@ public void run() {\n \n                 boolean flushFailed = false;\n                 try {\n-                    ledgerCache.flushLedger(true);\n+                    ledgerStorage.flush();\n                 } catch (IOException e) {\n                     LOG.error(\"Exception flushing Ledger\", e);\n                     flushFailed = true;\n                 }\n-                try {\n-                    entryLogger.flush();\n-                } catch (IOException e) {\n-                    LOG.error(\"Exception flushing entry logger\", e);\n-                    flushFailed = true;\n-                }\n \n                 // if flush failed, we should not roll last mark, otherwise we would\n                 // have some ledgers are not flushed and their journal entries were lost\n@@ -378,27 +367,6 @@ public static File getCurrentDirectory(File dir) {\n         return currentDirs;\n     }\n \n-    /**\n-     * Scanner used to do entry log compaction\n-     */\n-    class EntryLogCompactionScanner implements EntryLogger.EntryLogScanner {\n-        @Override\n-        public boolean accept(long ledgerId) {\n-            // bookie has no knowledge about which ledger is deleted\n-            // so just accept all ledgers.\n-            return true;\n-        }\n-\n-        @Override\n-        public void process(long ledgerId, ByteBuffer buffer)\n-            throws IOException {\n-            try {\n-                Bookie.this.addEntryByLedgerId(ledgerId, buffer);\n-            } catch (BookieException be) {\n-                throw new IOException(be);\n-            }\n-        }\n-    }\n \n     public Bookie(ServerConfiguration conf)\n             throws IOException, KeeperException, InterruptedException, BookieException {\n@@ -416,11 +384,9 @@ public Bookie(ServerConfiguration conf)\n         ledgerManager = LedgerManagerFactory.newLedgerManager(conf, this.zk);\n \n         syncThread = new SyncThread(conf);\n-        entryLogger = new EntryLogger(conf);\n-        ledgerCache = new LedgerCacheImpl(conf, ledgerManager);\n-        gcThread = new GarbageCollectorThread(conf, this.zk, ledgerCache, entryLogger,\n-                ledgerManager, new EntryLogCompactionScanner());\n-        handles = new HandleFactoryImpl(entryLogger, ledgerCache);\n+        ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager);\n+\n+        handles = new HandleFactoryImpl(ledgerStorage);\n \n         // replay journals\n         readJournal();\n@@ -506,7 +472,7 @@ public boolean accept(long journalId) {\n                     } else {\n                         byte[] key = masterKeyCache.get(ledgerId);\n                         if (key == null) {\n-                            key = ledgerCache.readMasterKey(ledgerId);\n+                            key = ledgerStorage.readMasterKey(ledgerId);\n                         }\n                         LedgerDescriptor handle = handles.getHandle(ledgerId, key);\n \n@@ -527,7 +493,8 @@ synchronized public void start() {\n         LOG.debug(\"I'm starting a bookie with journal directory \" + journalDirectory.getName());\n         super.start();\n         syncThread.start();\n-        gcThread.start();\n+\n+        ledgerStorage.start();\n         // set running here.\n         // since bookie server use running as a flag to tell bookie server whether it is alive\n         // if setting it in bookie thread, the watcher might run before bookie thread.\n@@ -584,13 +551,12 @@ public void registerJMX(BKMBeanInfo parent) {\n             BKMBeanRegistry.getInstance().register(jmxBookieBean, parent);\n \n             try {\n-                jmxLedgerCacheBean = this.ledgerCache.getJMXBean();\n-                BKMBeanRegistry.getInstance().register(jmxLedgerCacheBean, jmxBookieBean);\n+                jmxLedgerStorageBean = this.ledgerStorage.getJMXBean();\n+                BKMBeanRegistry.getInstance().register(jmxLedgerStorageBean, jmxBookieBean);\n             } catch (Exception e) {\n                 LOG.warn(\"Failed to register with JMX for ledger cache\", e);\n-                jmxLedgerCacheBean = null;\n+                jmxLedgerStorageBean = null;\n             }\n-\n         } catch (Exception e) {\n             LOG.warn(\"Failed to register with JMX\", e);\n             jmxBookieBean = null;\n@@ -602,8 +568,8 @@ public void registerJMX(BKMBeanInfo parent) {\n      */\n     public void unregisterJMX() {\n         try {\n-            if (jmxLedgerCacheBean != null) {\n-                BKMBeanRegistry.getInstance().unregister(jmxLedgerCacheBean);\n+            if (jmxLedgerStorageBean != null) {\n+                BKMBeanRegistry.getInstance().unregister(jmxLedgerStorageBean);\n             }\n         } catch (Exception e) {\n             LOG.warn(\"Failed to unregister with JMX\", e);\n@@ -616,7 +582,7 @@ public void unregisterJMX() {\n             LOG.warn(\"Failed to unregister with JMX\", e);\n         }\n         jmxBookieBean = null;\n-        jmxLedgerCacheBean = null;\n+        jmxLedgerStorageBean = null;\n     }\n \n \n@@ -940,17 +906,16 @@ synchronized int shutdown(int exitCode) {\n                 this.exitCode = exitCode;\n                 // mark bookie as in shutting down progress\n                 shuttingdown = true;\n-                // shut down gc thread, which depends on zookeeper client\n-                // also compaction will write entries again to entry log file\n-                gcThread.shutdown();\n+\n+                // Shutdown the EntryLogger which has the GarbageCollector Thread running\n+                ledgerStorage.shutdown();\n+\n                 // Shutdown the ZK client\n                 if(zk != null) zk.close();\n                 this.interrupt();\n                 this.join();\n                 syncThread.shutdown();\n \n-                // Shutdown the EntryLogger which has the GarbageCollector Thread running\n-                entryLogger.shutdown();\n                 // close Ledger Manager\n                 ledgerManager.close();\n                 // setting running to false here, so watch thread in bookie server know it only after bookie shut down\n@@ -998,7 +963,7 @@ public void writeComplete(int rc, long ledgerId,\n \n     protected void addEntryByLedgerId(long ledgerId, ByteBuffer entry)\n         throws IOException, BookieException {\n-        byte[] key = ledgerCache.readMasterKey(ledgerId);\n+        byte[] key = ledgerStorage.readMasterKey(ledgerId);\n         LedgerDescriptor handle = handles.getHandle(ledgerId, key);\n         handle.addEntry(entry);\n     }"},{"sha":"97e01c030977319129a43ca5e73949e43d79c761","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":1,"deletions":12,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -70,9 +70,6 @@\n     final static int LOGFILE_HEADER_SIZE = 1024;\n     final ByteBuffer LOGFILE_HEADER = ByteBuffer.allocate(LOGFILE_HEADER_SIZE);\n \n-    // this indicates that a write has happened since the last flush\n-    private volatile boolean somethingWritten = false;\n-\n     final static long MB = 1024 * 1024;\n \n     /**\n@@ -284,7 +281,7 @@ synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n         long pos = logChannel.position();\n         logChannel.write(entry);\n         //logChannel.flush(false);\n-        somethingWritten = true;\n+\n         return (logId << 32L) | pos;\n     }\n \n@@ -365,14 +362,6 @@ private File findFile(long logId) throws FileNotFoundException {\n         throw new FileNotFoundException(\"No file for log \" + Long.toHexString(logId));\n     }\n \n-    synchronized public boolean testAndClearSomethingWritten() {\n-        try {\n-            return somethingWritten;\n-        } finally {\n-            somethingWritten = false;\n-        }\n-    }\n-\n     /**\n      * Scan entry log\n      *"},{"sha":"269581aec3fc78176c41fdd8abe3c8a4c8e8433c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -75,9 +75,6 @@\n \n     final LedgerManager ledgerManager;\n \n-    // ZooKeeper Client\n-    final ZooKeeper zk;\n-\n     // flag to ensure gc thread will not be interrupted during compaction\n     // to reduce the risk getting entry log corrupted\n     final AtomicBoolean compacting = new AtomicBoolean(false);\n@@ -114,15 +111,13 @@ public void process(long ledgerId, ByteBuffer entry) throws IOException {\n      * @throws IOException\n      */\n     public GarbageCollectorThread(ServerConfiguration conf,\n-                                  ZooKeeper zookeeper,\n                                   LedgerCache ledgerCache,\n                                   EntryLogger entryLogger,\n                                   LedgerManager ledgerManager,\n                                   EntryLogScanner scanner)\n         throws IOException {\n         super(\"GarbageCollectorThread\");\n \n-        this.zk = zookeeper;\n         this.ledgerCache = ledgerCache;\n         this.entryLogger = entryLogger;\n         this.ledgerManager = ledgerManager;\n@@ -189,11 +184,6 @@ public void run() {\n                 }\n             }\n \n-            // Dependency check.\n-            if (null == zk) {\n-                continue;\n-            }\n-\n             // Extract all of the ledger ID's that comprise all of the entry logs\n             // (except for the current new one which is still being written to).\n             try {"},{"sha":"558e8cf151911d834ee63c9b8a6e5bdc6bf335e1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -29,12 +29,10 @@\n     HashMap<Long, LedgerDescriptor> readOnlyLedgers\n         = new HashMap<Long, LedgerDescriptor>();\n \n-    final EntryLogger entryLogger;\n-    final LedgerCache ledgerCache;\n+    final LedgerStorage ledgerStorage;\n \n-    HandleFactoryImpl(EntryLogger entryLogger, LedgerCache ledgerCache) {\n-        this.entryLogger = entryLogger;\n-        this.ledgerCache = ledgerCache;\n+    HandleFactoryImpl(LedgerStorage ledgerStorage) {\n+        this.ledgerStorage = ledgerStorage;\n     }\n \n     @Override\n@@ -44,8 +42,7 @@ public LedgerDescriptor getHandle(long ledgerId, byte[] masterKey)\n         synchronized (ledgers) {\n             handle = ledgers.get(ledgerId);\n             if (handle == null) {\n-                handle = LedgerDescriptor.create(masterKey, ledgerId,\n-                                                 entryLogger, ledgerCache);\n+                handle = LedgerDescriptor.create(masterKey, ledgerId, ledgerStorage);\n                 ledgers.put(ledgerId, handle);\n             }\n             handle.checkAccess(masterKey);\n@@ -60,7 +57,7 @@ public LedgerDescriptor getReadOnlyHandle(long ledgerId)\n         synchronized (ledgers) {\n             handle = readOnlyLedgers.get(ledgerId);\n             if (handle == null) {\n-                handle = LedgerDescriptor.createReadOnly(ledgerId, entryLogger, ledgerCache);\n+                handle = LedgerDescriptor.createReadOnly(ledgerId, ledgerStorage);\n                 readOnlyLedgers.put(ledgerId, handle);\n             }\n         }"},{"sha":"71a8c6bf450f7d59dd9d85dae65d298a371f38d3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"added","additions":183,"deletions":0,"changes":183,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -0,0 +1,183 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.nio.ByteBuffer;\n+import java.io.IOException;\n+\n+import org.apache.bookkeeper.jmx.BKMBeanInfo;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Interleave ledger storage\n+ * This ledger storage implementation stores all entries in a single\n+ * file and maintains an index file for each ledger.\n+ */\n+class InterleavedLedgerStorage implements LedgerStorage {\n+    final static Logger LOG = LoggerFactory.getLogger(InterleavedLedgerStorage.class);\n+\n+    private EntryLogger entryLogger;\n+    private LedgerCache ledgerCache;\n+    // This is the thread that garbage collects the entry logs that do not\n+    // contain any active ledgers in them; and compacts the entry logs that\n+    // has lower remaining percentage to reclaim disk space.\n+    final GarbageCollectorThread gcThread;\n+\n+    // this indicates that a write has happened since the last flush\n+    private volatile boolean somethingWritten = false;\n+\n+    InterleavedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager)\n+            throws IOException {\n+        entryLogger = new EntryLogger(conf);\n+        ledgerCache = new LedgerCacheImpl(conf, ledgerManager);\n+        gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n+                ledgerManager, new EntryLogCompactionScanner());\n+    }\n+\n+    @Override    \n+    public void start() {\n+        gcThread.start();\n+    }\n+\n+    @Override\n+    public void shutdown() throws InterruptedException {\n+        // shut down gc thread, which depends on zookeeper client\n+        // also compaction will write entries again to entry log file\n+        gcThread.shutdown();\n+        entryLogger.shutdown();\n+    }\n+\n+    @Override\n+    public void setMasterKey(long ledgerId, byte[] masterKey) throws IOException {\n+        ledgerCache.setMasterKey(ledgerId, masterKey);\n+    }\n+\n+    @Override\n+    public byte[] readMasterKey(long ledgerId) throws IOException, BookieException {\n+        return ledgerCache.readMasterKey(ledgerId);\n+    }\n+\n+    @Override\n+    public boolean ledgerExists(long ledgerId) throws IOException {\n+        return ledgerCache.ledgerExists(ledgerId);\n+    }\n+\n+    @Override\n+    synchronized public long addEntry(ByteBuffer entry) throws IOException {\n+        long ledgerId = entry.getLong();\n+        long entryId = entry.getLong();\n+        entry.rewind();\n+        \n+        /*\n+         * Log the entry\n+         */\n+        long pos = entryLogger.addEntry(ledgerId, entry);\n+        \n+        \n+        /*\n+         * Set offset of entry id to be the current ledger position\n+         */\n+        ledgerCache.putEntryOffset(ledgerId, entryId, pos);\n+\n+        somethingWritten = true;\n+\n+        return entryId;\n+    }\n+\n+    @Override\n+    public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n+        long offset;\n+        /*\n+         * If entryId is -1, then return the last written.\n+         */\n+        if (entryId == -1) {\n+            entryId = ledgerCache.getLastEntry(ledgerId);\n+        }\n+\n+        offset = ledgerCache.getEntryOffset(ledgerId, entryId);\n+        if (offset == 0) {\n+            throw new Bookie.NoEntryException(ledgerId, entryId);\n+        }\n+        return ByteBuffer.wrap(entryLogger.readEntry(ledgerId, entryId, offset));\n+    }\n+\n+    @Override\n+    public boolean isFlushRequired() {\n+        return somethingWritten;\n+    };\n+\n+    @Override\n+    public void flush() throws IOException {\n+        synchronized (entryLogger) {\n+            if (!somethingWritten) {\n+                return;\n+            }\n+            somethingWritten = false;\n+            boolean flushFailed = false;\n+\n+            try {\n+                ledgerCache.flushLedger(true);\n+            } catch (IOException ioe) {\n+                LOG.error(\"Exception flushing Ledger cache\", ioe);\n+                flushFailed = true;\n+            }\n+            \n+            try {\n+                entryLogger.flush();\n+            } catch (IOException ioe) {\n+                LOG.error(\"Exception flushing Ledger\", ioe);\n+                flushFailed = true;\n+            }\n+            if (flushFailed) {\n+                throw new IOException(\"Flushing to storage failed, check logs\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public BKMBeanInfo getJMXBean() {\n+        return ledgerCache.getJMXBean();\n+    }\n+\n+    /**\n+     * Scanner used to do entry log compaction\n+     */\n+    class EntryLogCompactionScanner implements EntryLogger.EntryLogScanner {\n+        @Override\n+        public boolean accept(long ledgerId) {\n+            // bookie has no knowledge about which ledger is deleted\n+            // so just accept all ledgers.\n+            return true;\n+        }\n+\n+        @Override\n+        public void process(long ledgerId, ByteBuffer buffer)\n+            throws IOException {\n+            addEntry(buffer);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file"},{"sha":"cfeab64118718dfc9faa3f94c96b98766f61e59a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -35,21 +35,19 @@\n public abstract class LedgerDescriptor {\n     static LedgerDescriptor create(byte[] masterKey,\n                                    long ledgerId,\n-                                   EntryLogger entryLogger,\n-                                   LedgerCache ledgerCache) throws IOException {\n-        LedgerDescriptor ledger = new LedgerDescriptorImpl(masterKey, ledgerId, entryLogger, ledgerCache);\n-        ledgerCache.setMasterKey(ledgerId, masterKey);\n+                                   LedgerStorage ledgerStorage) throws IOException {\n+        LedgerDescriptor ledger = new LedgerDescriptorImpl(masterKey, ledgerId, ledgerStorage);\n+        ledgerStorage.setMasterKey(ledgerId, masterKey);\n         return ledger;\n     }\n \n     static LedgerDescriptor createReadOnly(long ledgerId,\n-                                           EntryLogger entryLogger,\n-                                           LedgerCache ledgerCache)\n+                                           LedgerStorage ledgerStorage)\n             throws IOException, Bookie.NoLedgerException {\n-        if (!ledgerCache.ledgerExists(ledgerId)) {\n+        if (!ledgerStorage.ledgerExists(ledgerId)) {\n             throw new Bookie.NoLedgerException(ledgerId);\n         }\n-        return new LedgerDescriptorReadOnlyImpl(ledgerId, entryLogger, ledgerCache);\n+        return new LedgerDescriptorReadOnlyImpl(ledgerId, ledgerStorage);\n     }\n \n     abstract void checkAccess(byte masterKey[]) throws BookieException, IOException;"},{"sha":"e05ecb7179d70de375df61da94bec71ce0484aec","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","status":"modified","additions":5,"deletions":30,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -35,18 +35,16 @@\n  */\n public class LedgerDescriptorImpl extends LedgerDescriptor {\n     final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n-    LedgerCache ledgerCache;\n+    final LedgerStorage ledgerStorage;\n     private long ledgerId;\n-    EntryLogger entryLogger;\n \n     volatile private boolean fenced = false;\n     final byte[] masterKey;\n \n-    LedgerDescriptorImpl(byte[] masterKey, long ledgerId, EntryLogger entryLogger, LedgerCache ledgerCache) {\n+    LedgerDescriptorImpl(byte[] masterKey, long ledgerId, LedgerStorage ledgerStorage) {\n         this.masterKey = masterKey;\n         this.ledgerId = ledgerId;\n-        this.entryLogger = entryLogger;\n-        this.ledgerCache = ledgerCache;\n+        this.ledgerStorage = ledgerStorage;\n     }\n \n     @Override\n@@ -78,36 +76,13 @@ long addEntry(ByteBuffer entry) throws IOException {\n         if (ledgerId != this.ledgerId) {\n             throw new IOException(\"Entry for ledger \" + ledgerId + \" was sent to \" + this.ledgerId);\n         }\n-        long entryId = entry.getLong();\n         entry.rewind();\n \n-        /*\n-         * Log the entry\n-         */\n-        long pos = entryLogger.addEntry(ledgerId, entry);\n-\n-\n-        /*\n-         * Set offset of entry id to be the current ledger position\n-         */\n-        ledgerCache.putEntryOffset(ledgerId, entryId, pos);\n-        return entryId;\n+        return ledgerStorage.addEntry(entry);\n     }\n \n     @Override\n     ByteBuffer readEntry(long entryId) throws IOException {\n-        long offset;\n-        /*\n-         * If entryId is -1, then return the last written.\n-         */\n-        if (entryId == -1) {\n-            entryId = ledgerCache.getLastEntry(ledgerId);\n-        }\n-\n-        offset = ledgerCache.getEntryOffset(ledgerId, entryId);\n-        if (offset == 0) {\n-            throw new Bookie.NoEntryException(ledgerId, entryId);\n-        }\n-        return ByteBuffer.wrap(entryLogger.readEntry(ledgerId, entryId, offset));\n+        return ledgerStorage.getEntry(ledgerId, entryId);\n     }\n }"},{"sha":"476bc28e2dbb1ec4764a4ca30aaa04ab34f2bc4a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -28,9 +28,8 @@\n  * to write entries to a ledger and read entries from a ledger.\n  */\n public class LedgerDescriptorReadOnlyImpl extends LedgerDescriptorImpl {\n-    LedgerDescriptorReadOnlyImpl(long ledgerId, EntryLogger entryLogger,\n-            LedgerCache ledgerCache) {\n-        super(null, ledgerId, entryLogger, ledgerCache);\n+    LedgerDescriptorReadOnlyImpl(long ledgerId, LedgerStorage storage) {\n+        super(null, ledgerId, storage);\n     }\n \n     @Override"},{"sha":"14f133800420215ee1468cb52f63a764c0dc7a1a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/apache/bookkeeper/blob/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/4a94ce1d8184f5f38def015d80777a8113b96690/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java?ref=4a94ce1d8184f5f38def015d80777a8113b96690","patch":"@@ -0,0 +1,91 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.bookkeeper.jmx.BKMBeanInfo;\n+\n+/**\n+ * Interface for storing ledger data\n+ * on persistant storage.\n+ */\n+interface LedgerStorage {\n+    /**\n+     * Start any background threads\n+     * belonging to the storage system. For example,\n+     * garbage collection.\n+     */\n+    void start();\n+\n+    /**\n+     * Cleanup and free any resources\n+     * being used by the storage system.\n+     */\n+    void shutdown() throws InterruptedException;\n+\n+    /**\n+     * Whether a ledger exists\n+     */\n+    boolean ledgerExists(long ledgerId) throws IOException;\n+\n+    /**\n+     * Set the master key for a ledger\n+     */\n+    void setMasterKey(long ledgerId, byte[] masterKey) throws IOException;\n+\n+    /**\n+     * Get the master key for a ledger\n+     * @throws IOException if there is an error reading the from the ledger\n+     * @throws BookieException if no such ledger exists\n+     */\n+    byte[] readMasterKey(long ledgerId) throws IOException, BookieException;\n+\n+    /**\n+     * Add an entry to the storage.\n+     * @return the entry id of the entry added\n+     */\n+    long addEntry(ByteBuffer entry) throws IOException;\n+\n+    /**\n+     * Read an entry from storage\n+     */\n+    ByteBuffer getEntry(long ledgerId, long entryId) throws IOException;\n+\n+    /**\n+     * Whether there is data in the storage which needs to be flushed\n+     */\n+    boolean isFlushRequired();\n+\n+    /**\n+     * Flushes all data in the storage. Once this is called,\n+     * add data written to the LedgerStorage up until this point\n+     * has been persisted to perminant storage\n+     */\n+    void flush() throws IOException;\n+\n+    /**\n+     * Get the JMX management bean for this LedgerStorage\n+     */\n+    BKMBeanInfo getJMXBean();\n+}\n\\ No newline at end of file"}]}

