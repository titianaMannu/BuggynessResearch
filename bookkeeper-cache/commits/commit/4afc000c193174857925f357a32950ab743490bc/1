{"sha":"4afc000c193174857925f357a32950ab743490bc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YWZjMDAwYzE5MzE3NDg1NzkyNWYzNTdhMzI5NTBhYjc0MzQ5MGJj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-18T10:38:46Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-18T10:38:46Z"},"message":"BOOKKEEPER-69: ServerRedirectLoopException when a machine (hosts bookie server & hub server) reboot, which is caused by race condition of topic manager (Sijie, ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1203576 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aec63797117c9a4e3cf887e8baf29afde42b3f18","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/aec63797117c9a4e3cf887e8baf29afde42b3f18"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4afc000c193174857925f357a32950ab743490bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4afc000c193174857925f357a32950ab743490bc","html_url":"https://github.com/apache/bookkeeper/commit/4afc000c193174857925f357a32950ab743490bc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4afc000c193174857925f357a32950ab743490bc/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4049d4c2b115f81008ef7a3920fd9153ced2f53c","url":"https://api.github.com/repos/apache/bookkeeper/commits/4049d4c2b115f81008ef7a3920fd9153ced2f53c","html_url":"https://github.com/apache/bookkeeper/commit/4049d4c2b115f81008ef7a3920fd9153ced2f53c"}],"stats":{"total":257,"additions":245,"deletions":12},"files":[{"sha":"45f0e4ed41f1fb1ccfc26126554f5b609c515e6b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4afc000c193174857925f357a32950ab743490bc/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4afc000c193174857925f357a32950ab743490bc/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4afc000c193174857925f357a32950ab743490bc","patch":"@@ -86,6 +86,8 @@ BUGFIXES:\n \n   BOOKKEEPER-100: Some hedwig tests have build errors (dferro via ivank)\n \n+  BOOKKEEPER-69: ServerRedirectLoopException when a machine (hosts bookie server & hub server) reboot, which is caused by race condition of topic manager (Sijie, ivank via ivank)\n+\n  hedwig-client/\n  \n   BOOKKEEPER-52: Message sequence confuse due to the subscribeMsgQueue@SubscribeResponseHandler (xulei via ivank)"},{"sha":"0c3c4df42bceb91d9c3232679eb20618e4dc722e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/4afc000c193174857925f357a32950ab743490bc/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/4afc000c193174857925f357a32950ab743490bc/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java?ref=4afc000c193174857925f357a32950ab743490bc","patch":"@@ -136,10 +136,19 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n             }\n \n             @Override\n-            public void operationFailed(Object ctx, PubSubException exception) {\n+            public void operationFailed(final Object ctx, final PubSubException exception) {\n                 // TODO: optimization: we can release this as soon as we experience the first error.\n-                realReleaseTopic(topic, CallbackUtils.curry(originalCallback, addr), originalContext);\n-                originalCallback.operationFailed(ctx, exception);\n+                Callback<Void> cb = new Callback<Void>() {\n+                    public void operationFinished(Object _ctx, Void _resultOfOperation) {\n+                        originalCallback.operationFailed(ctx, exception);\n+                    }\n+                    public void operationFailed(Object _ctx, PubSubException _exception) {\n+                        logger.error(\"Exception releasing topic\", _exception);\n+                        originalCallback.operationFailed(ctx, exception);\n+                    }\n+                };\n+                \n+                realReleaseTopic(topic, cb, originalContext);\n             }\n         };\n "},{"sha":"ac2d61e5713c7427d6c22f0d3c1ad51ff32dec62","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":25,"deletions":9,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/4afc000c193174857925f357a32950ab743490bc/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/4afc000c193174857925f357a32950ab743490bc/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=4afc000c193174857925f357a32950ab743490bc","patch":"@@ -20,6 +20,7 @@\n import java.io.File;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Random;\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -48,8 +49,8 @@\n \n     // BookKeeper Server variables\n     private List<BookieServer> bookiesList;\n-    private List<ServerConfiguration> bookieConfsList;\n     private int initialPort = 5000;\n+    private int nextPort = initialPort;\n \n     // String constants used for creating the bookie server files.\n     private static final String PREFIX = \"bookie\";\n@@ -100,16 +101,9 @@ public void setUp() throws Exception {\n \n         // Create Bookie Servers\n         bookiesList = new LinkedList<BookieServer>();\n-        bookieConfsList = new LinkedList<ServerConfiguration>();\n \n         for (int i = 0; i < numBookies; i++) {\n-            File tmpDir = FileUtils.createTempDirectory(PREFIX + i, SUFFIX);\n-            ServerConfiguration conf = newServerConfiguration(\n-                initialPort + i, hostPort, tmpDir, new File[] { tmpDir });\n-            bookieConfsList.add(conf);\n-            BookieServer bs = new BookieServer(conf);\n-            bs.start();\n-            bookiesList.add(bs);\n+            startUpNewBookieServer();\n         }\n \n         // Create the BookKeeper client\n@@ -135,6 +129,28 @@ public void tearDown() throws Exception {\n         bk.close();\n         super.tearDown();\n     }\n+    \n+    public void tearDownOneBookieServer() throws Exception {\n+        Random r = new Random();\n+        int bi = r.nextInt(bookiesList.size());\n+        BookieServer bs = bookiesList.get(bi);\n+        try {\n+            bs.shutdown();\n+        } catch (InterruptedException e) {\n+            LOG.error(\"Error tearing down\", e);\n+        }\n+        bookiesList.remove(bi);\n+    }\n+    \n+    public void startUpNewBookieServer() throws Exception {\n+        File tmpDir = FileUtils.createTempDirectory(\n+                PREFIX + (nextPort - initialPort), SUFFIX);\n+        ServerConfiguration conf = newServerConfiguration(\n+                nextPort++, hostPort, tmpDir, new File[] { tmpDir });\n+        BookieServer bs = new BookieServer(conf);\n+        bs.start();\n+        bookiesList.add(bs);\n+    }\n \n     protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {\n         ServerConfiguration conf = new ServerConfiguration(baseConf);"},{"sha":"956d31cfd63543e1593839ef18adc761b2d2a752","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","status":"added","additions":206,"deletions":0,"changes":206,"blob_url":"https://github.com/apache/bookkeeper/blob/4afc000c193174857925f357a32950ab743490bc/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","raw_url":"https://github.com/apache/bookkeeper/raw/4afc000c193174857925f357a32950ab743490bc/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java?ref=4afc000c193174857925f357a32950ab743490bc","patch":"@@ -0,0 +1,206 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server.topics;\n+\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.server.HedwigHubTestBase;\n+import org.apache.hedwig.util.Callback;\n+import org.apache.hedwig.util.ConcurrencyUtils;\n+import org.junit.Test;\n+\n+import com.google.protobuf.ByteString;\n+\n+public class TestConcurrentTopicAcquisition extends HedwigHubTestBase {\n+\n+    // Client variables\n+    protected HedwigClient client;\n+    protected Publisher publisher;\n+    protected Subscriber subscriber;\n+    \n+    final LinkedBlockingQueue<ByteString> subscribers =\n+            new LinkedBlockingQueue<ByteString>();\n+    final ByteString topic = ByteString.copyFromUtf8(\"concurrent-topic\");\n+    final int numSubscribers = 300;\n+    final AtomicInteger numDone = new AtomicInteger(0);\n+\n+    // SynchronousQueues to verify async calls\n+    private final SynchronousQueue<Boolean> queue = new SynchronousQueue<Boolean>();\n+    \n+    class SubCallback implements Callback<Void> {\n+        \n+        ByteString subId;\n+        \n+        public SubCallback(ByteString subId) {\n+            this.subId = subId;\n+        }\n+\n+        @Override\n+        public void operationFinished(Object ctx,\n+                Void resultOfOperation) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"subscriber \" + subId.toStringUtf8() + \" succeed.\");\n+            }\n+            int done = numDone.incrementAndGet();\n+            if (done == numSubscribers) {\n+                ConcurrencyUtils.put(queue, false);\n+            }\n+        }\n+\n+        @Override\n+        public void operationFailed(Object ctx,\n+                PubSubException exception) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"subscriber \" + subId.toStringUtf8() + \" failed : \", exception);\n+            }\n+            ConcurrencyUtils.put(subscribers, subId);\n+            // ConcurrencyUtils.put(queue, false);\n+        }\n+    }\n+    \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        client = new HedwigClient(new ClientConfiguration());\n+\n+        publisher = client.getPublisher();\n+        subscriber = client.getSubscriber();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        // sub.interrupt();\n+        // sub.join();\n+        \n+        client.close();\n+        super.tearDown();\n+    }\n+    \n+    @Test\n+    public void testTopicAcquistion() throws Exception {\n+        logger.info(\"Start concurrent topic acquistion test.\");\n+        \n+        // let one bookie down to cause not enough bookie exception\n+        logger.info(\"Tear down one bookie server.\");\n+        bktb.tearDownOneBookieServer();\n+        \n+        // In current implementation, the first several subscriptions will succeed to put topic in topic manager set,\n+        // because the tear down bookie server's zk node need time to disappear\n+        // some subscriptions will create ledger successfully, then other subscriptions will fail.\n+        // the race condition will be: topic manager own topic but persistence manager doesn't\n+        \n+        // 300 subscribers subscribe to a same topic\n+        final AtomicBoolean inRedirectLoop = new AtomicBoolean(false);\n+        numDone.set(0);\n+        for (int i=0; i<numSubscribers; i++) {\n+            ByteString subId = ByteString.copyFromUtf8(\"sub-\" + i);\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"subscriber \" + subId.toStringUtf8() + \" subscribes topic \" + topic.toStringUtf8());\n+            }\n+            subscriber.asyncSubscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH,\n+                new Callback<Void>() {\n+                \n+                    private void tick() {\n+                        if (numDone.incrementAndGet() == numSubscribers) {\n+                            ConcurrencyUtils.put(queue, true);\n+                        }\n+                    }\n+\n+                    @Override\n+                    public void operationFinished(Object ctx,\n+                            Void resultOfOperation) {\n+                        tick();\n+                    }\n+\n+                    @Override\n+                    public void operationFailed(Object ctx,\n+                            PubSubException exception) {\n+                        if (exception instanceof PubSubException.ServiceDownException) {\n+                            String msg = exception.getMessage();\n+                            if (msg.indexOf(\"ServerRedirectLoopException\") > 0) {\n+                                inRedirectLoop.set(true);\n+                            }\n+                            if (logger.isDebugEnabled()) {\n+                                logger.debug(\"Operation failed : \", exception);\n+                            }\n+                        }\n+                        tick(); \n+                    }\n+                \n+                },\n+            null);\n+        }\n+        \n+        queue.take();\n+        \n+        // TODO: remove comment after we fix the issue\n+        // Assert.assertEquals(false, inRedirectLoop.get());\n+        \n+        // start a thread to send subscriptions\n+        numDone.set(0);\n+        Thread sub = new Thread(new Runnable() {\n+\n+            @Override\n+            public void run() {\n+                logger.info(\"sub thread started\");\n+                try {\n+                    // 100 subscribers subscribe to a same topic\n+                    for (int i=0; i<numSubscribers; i++) {\n+                        ByteString subscriberId = ByteString.copyFromUtf8(\"sub-\" + i);\n+                        subscribers.put(subscriberId);\n+                    }\n+                    \n+                    ByteString subId;\n+                    while (true) {\n+                        subId = subscribers.take();\n+                        \n+                        if (logger.isDebugEnabled()) {\n+                            logger.debug(\"subscriber \" + subId.toStringUtf8() + \" subscribes topic \" + topic.toStringUtf8());\n+                        }\n+                        subscriber.asyncSubscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH,\n+                            new SubCallback(subId), null);\n+                    }\n+                    // subscriber.asyncSubscribe(topic, subscriberId, mode, callback, context)\n+                } catch (InterruptedException ie) {\n+                    // break\n+                    logger.warn(\"Interrupted : \", ie);\n+                }\n+            }\n+\n+        });\n+        sub.start();\n+        Thread.sleep(2000);\n+        \n+        // start a new bookie server\n+        logger.info(\"start new bookie server\");\n+        bktb.startUpNewBookieServer();\n+        \n+        // hope that all the subscriptions will be OK\n+        queue.take();\n+    }\n+\n+}"}]}

