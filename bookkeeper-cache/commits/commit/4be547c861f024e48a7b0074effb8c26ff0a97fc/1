{"sha":"4be547c861f024e48a7b0074effb8c26ff0a97fc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YmU1NDdjODYxZjAyNGU0OGE3YjAwNzRlZmZiOGMyNmZmMGE5N2Zj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-16T18:01:04Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-16T18:01:04Z"},"message":"BOOKKEEPER-104: Add versioning between bookie and its filesystem layout (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1202814 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bcd957787ef149e5e4347f9db049cfae3ff43966","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bcd957787ef149e5e4347f9db049cfae3ff43966"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4be547c861f024e48a7b0074effb8c26ff0a97fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4be547c861f024e48a7b0074effb8c26ff0a97fc","html_url":"https://github.com/apache/bookkeeper/commit/4be547c861f024e48a7b0074effb8c26ff0a97fc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4be547c861f024e48a7b0074effb8c26ff0a97fc/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4d9f0c0ebe8614e0190c5df5bbd68c6fa1c05180","url":"https://api.github.com/repos/apache/bookkeeper/commits/4d9f0c0ebe8614e0190c5df5bbd68c6fa1c05180","html_url":"https://github.com/apache/bookkeeper/commit/4d9f0c0ebe8614e0190c5df5bbd68c6fa1c05180"}],"stats":{"total":338,"additions":338,"deletions":0},"files":[{"sha":"1adf55b1084e447e7ce29ad8f658fbcfa8b8a46e","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4be547c861f024e48a7b0074effb8c26ff0a97fc/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4be547c861f024e48a7b0074effb8c26ff0a97fc/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4be547c861f024e48a7b0074effb8c26ff0a97fc","patch":"@@ -68,6 +68,8 @@ BUGFIXES:\n \n   BOOKKEEPER-101: Add Fencing to Bookkeeper (ivank)\n \n+  BOOKKEEPER-104: Add versioning between bookie and its filesystem layout (ivank)\n+\n  hedwig-server/\n \n   BOOKKEEPER-43: NullPointException when releasing topic (Sijie Guo via breed)"},{"sha":"592df353e4949e603eaf395791a0b5c2fb49457b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/bookkeeper/blob/4be547c861f024e48a7b0074effb8c26ff0a97fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/4be547c861f024e48a7b0074effb8c26ff0a97fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=4be547c861f024e48a7b0074effb8c26ff0a97fc","patch":"@@ -21,6 +21,10 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n@@ -69,6 +73,15 @@\n \n     final File ledgerDirectories[];\n \n+    /**\n+     * Current directory layout version. Increment this \n+     * when you make a change to the format of any of the files in \n+     * this directory or to the general layout of the directory.\n+     */\n+    static final int CURRENT_DIRECTORY_LAYOUT_VERSION = 1;\n+    static final String VERSION_FILENAME = \"VERSION\";\n+    \n+\n     // ZK registration path for this bookie\n     static final String BOOKIE_REGISTRATION_PATH = \"/ledgers/available/\";\n \n@@ -222,6 +235,11 @@ void shutdown() throws InterruptedException {\n     SyncThread syncThread = new SyncThread();\n \n     public Bookie(int port, String zkServers, File journalDirectory, File ledgerDirectories[]) throws IOException {\n+        checkDirectoryLayoutVersion(journalDirectory);\n+        for (File dir : ledgerDirectories) {\n+            checkDirectoryLayoutVersion(dir);\n+        }\n+\n         this.journalDirectory = journalDirectory;\n         this.ledgerDirectories = ledgerDirectories;\n         entryLogger = new EntryLogger(ledgerDirectories, this);\n@@ -423,6 +441,78 @@ public void process(WatchedEvent event) {\n         return newZk;\n     }\n \n+    /**\n+     * Check the layout version of a directory. If it is outside of the \n+     * range which this version of the software can handle, throw an\n+     * exception.\n+     *\n+     * @param dir Directory to check\n+     * @throws IOException if layout version if is outside usable range\n+     *               or if there is a problem reading the version file\n+     */\n+    private void checkDirectoryLayoutVersion(File dir) \n+            throws IOException {\n+        if (!dir.isDirectory()) {\n+            throw new IOException(\"Directory(\"+dir+\") isn't a directory\");\n+        }\n+        File versionFile = new File(dir, VERSION_FILENAME);\n+        \n+        FileInputStream fis;\n+        try {\n+            fis = new FileInputStream(versionFile);\n+        } catch (FileNotFoundException e) {\n+            /* \n+             * If the version file is not found, this must\n+             * either be the first time we've used this directory,\n+             * or it must date from before layout versions were introduced.\n+             * In both cases, we just create the version file\n+             */\n+            LOG.info(\"No version file found, creating\");\n+            createDirectoryLayoutVersionFile(dir);\n+            return;\n+        }\n+        \n+        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n+        try {\n+            String layoutVersionStr = br.readLine();\n+            int layoutVersion = Integer.parseInt(layoutVersionStr);\n+            if (layoutVersion != CURRENT_DIRECTORY_LAYOUT_VERSION) {\n+                String errmsg = \"Directory has an invalid version, expected \" \n+                    + CURRENT_DIRECTORY_LAYOUT_VERSION + \", found \" + layoutVersion;\n+                LOG.error(errmsg);\n+                throw new IOException(errmsg);\n+            }\n+        } catch(NumberFormatException e) {\n+            throw new IOException(\"Version file has invalid content\", e);\n+        } finally {\n+            try {\n+                fis.close();\n+            } catch (IOException e) {\n+                LOG.warn(\"Error closing version file\", e);\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Create the directory layout version file with the current\n+     * directory layout version\n+     */\n+    private void createDirectoryLayoutVersionFile(File dir) throws IOException {\n+        File versionFile = new File(dir, VERSION_FILENAME);\n+\n+        FileOutputStream fos = new FileOutputStream(versionFile);\n+        BufferedWriter bw = null;\n+        try {\n+            bw = new BufferedWriter(new OutputStreamWriter(fos));\n+            bw.write(String.valueOf(CURRENT_DIRECTORY_LAYOUT_VERSION));\n+        } finally {\n+            if (bw != null) {\n+                bw.close();\n+            }\n+            fos.close();\n+        }\n+    }\n+\n     private static int fullRead(FileChannel fc, ByteBuffer bb) throws IOException {\n         int total = 0;\n         while(bb.remaining() > 0) {"},{"sha":"5e7a947cef0e3dc889f9cb83ee41d349943af46c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","status":"added","additions":246,"deletions":0,"changes":246,"blob_url":"https://github.com/apache/bookkeeper/blob/4be547c861f024e48a7b0074effb8c26ff0a97fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4be547c861f024e48a7b0074effb8c26ff0a97fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java?ref=4be547c861f024e48a7b0074effb8c26ff0a97fc","patch":"@@ -0,0 +1,246 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.BufferedWriter;\n+import java.io.OutputStreamWriter;\n+\n+import org.junit.*;\n+import static org.junit.Assert.*;\n+\n+import org.apache.log4j.Logger;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+\n+import org.apache.bookkeeper.test.BaseTestCase;\n+\n+public class BookieLayoutVersionTest extends BaseTestCase {\n+    static Logger LOG = Logger.getLogger(BookieLayoutVersionTest.class);\n+    \n+    final int BOOKIE_PORT = 3181;\n+\n+    public BookieLayoutVersionTest(DigestType digestType) {\n+        super(0);\n+    }\n+\n+    private static void writeTextToVersionFile(File dir, String text) throws IOException {\n+        File versionFile = new File(dir, Bookie.VERSION_FILENAME);\n+\n+        FileOutputStream fos = new FileOutputStream(versionFile);\n+        BufferedWriter bw = null;\n+        try {\n+            bw = new BufferedWriter(new OutputStreamWriter(fos));\n+            bw.write(text);\n+        } finally {\n+            if (bw != null) {\n+                bw.close();\n+            }\n+            fos.close();\n+        }\n+    }\n+\n+    private static void writeDirectoryLayoutVersionFile(File dir, int version) throws IOException {\n+        writeTextToVersionFile(dir, String.valueOf(version));\n+    }\n+\n+    private static File newDirectory(int version) throws IOException {\n+        File d = newDirectoryWithoutVersion();\n+        writeDirectoryLayoutVersionFile(d, version);\n+        return d;\n+    }\n+    \n+    private static File newDirectoryWithoutVersion() throws IOException {\n+        File d = File.createTempFile(\"bookie\", \"dir\");\n+        d.delete();\n+        d.mkdirs();\n+        return d;\n+    }\n+\n+    @Test\n+    public void testTooNewVersion() throws Exception {\n+        // test with bad ledger dir\n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n+                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1) });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n+        }\n+        \n+        // test with bad data dir\n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n+                    new File[] { newDirectoryWithoutVersion() });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n+        }\n+\n+        // test with both bad        \n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n+                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1) });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n+        }\n+\n+        // test with neither bad, both with good version\n+        Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION ),\n+                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION) });\n+        b.shutdown();\n+    }\n+\n+    @Test\n+    public void testTooOldVersion() throws Exception {\n+        // test with bad ledger dir\n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n+                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1) });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n+        }\n+        \n+        // test with bad data dir\n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n+                    new File[] { newDirectoryWithoutVersion() });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n+        }\n+\n+        // test with both bad        \n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n+                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1) });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n+        }\n+    }\n+    \n+    @Test\n+    public void testSomeOldSomeCurrent() throws Exception {\n+        // test with both bad        \n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n+                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n+                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n+                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n+                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n+                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),});\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testInvalidVersionFile() throws Exception {\n+        // invalid data\n+        File junkDir = newDirectoryWithoutVersion();\n+        writeTextToVersionFile(junkDir, \"JunkText\");\n+        File junkDir2 = newDirectoryWithoutVersion();\n+        writeTextToVersionFile(junkDir2, \"JunkText2\");\n+\n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n+                    new File[] { junkDir });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Version file has invalid content\"));\n+        }\n+        \n+        // test with bad data dir\n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, junkDir,\n+                                  new File[] { newDirectoryWithoutVersion() });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Version file has invalid content\"));\n+        }\n+\n+        // test with both bad        \n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, junkDir,\n+                    new File[] { junkDir2 });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Version file has invalid content\"));\n+        }\n+    }\n+    \n+    @Test \n+    public void directoryIsReadOnly() throws Exception {\n+        // invalid data\n+        File roDir = newDirectoryWithoutVersion();\n+        roDir.setWritable(false);\n+        File roDir2 = newDirectoryWithoutVersion();\n+        roDir2.setWritable(false);\n+\n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n+                    new File[] { roDir });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Permission denied\"));\n+        }\n+        \n+        // test with bad data dir\n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, roDir,\n+                    new File[] { newDirectoryWithoutVersion() });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Permission denied\"));\n+        }\n+\n+        // test with both bad        \n+        try {\n+            Bookie b = new Bookie(BOOKIE_PORT, HOSTPORT, roDir,\n+                    new File[] { roDir2 });\n+            fail(\"Shouldn't reach here\");\n+        } catch (IOException ioe) {\n+            assertTrue(\"Invalid exception\", \n+                       ioe.getMessage().contains(\"Permission denied\"));\n+        }\n+\n+    } \n+\n+\n+}"}]}

