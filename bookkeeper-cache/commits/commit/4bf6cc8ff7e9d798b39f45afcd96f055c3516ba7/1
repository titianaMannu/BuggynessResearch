{"sha":"4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YmY2Y2M4ZmY3ZTlkNzk4YjM5ZjQ1YWZjZDk2ZjA1NWMzNTE2YmE3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:42:57Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:42:57Z"},"message":"BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank) [missing files]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1495517 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed052621ebe0f6e8ec2bdc05625676423c165289","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ed052621ebe0f6e8ec2bdc05625676423c165289"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","html_url":"https://github.com/apache/bookkeeper/commit/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"805408a86e8ceb87643d8a19b6a11403b0534422","url":"https://api.github.com/repos/apache/bookkeeper/commits/805408a86e8ceb87643d8a19b6a11403b0534422","html_url":"https://github.com/apache/bookkeeper/commit/805408a86e8ceb87643d8a19b6a11403b0534422"}],"stats":{"total":157,"additions":157,"deletions":0},"files":[{"sha":"1f3e380c6b4e3b07ff0a95a0bf3550c1fdb04708","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/apache/bookkeeper/blob/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","patch":"@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class tests the ledger close logic.\n+ */\n+public class LedgerCloseTest extends BookKeeperClusterTestCase {\n+\n+    static Logger LOG = LoggerFactory.getLogger(LedgerCloseTest.class);\n+\n+    static final int READ_TIMEOUT = 1;\n+\n+    final DigestType digestType;\n+\n+    public LedgerCloseTest() {\n+        super(6);\n+        this.digestType = DigestType.CRC32;\n+        // set timeout to a large value which disable it.\n+        baseClientConf.setReadTimeout(99999);\n+        baseConf.setGcWaitTime(999999);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testLedgerCloseDuringUnrecoverableErrors() throws Exception {\n+        int numEntries = 3;\n+        final CountDownLatch addDoneLatch = new CountDownLatch(1);\n+        final CountDownLatch deadIOLatch = new CountDownLatch(1);\n+        final CountDownLatch recoverDoneLatch = new CountDownLatch(1);\n+        final CountDownLatch failedLatch = new CountDownLatch(1);\n+\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n+        // kill first bookie to replace with a unauthorize bookie\n+        InetSocketAddress bookie = lh.getLedgerMetadata().currentEnsemble.get(0);\n+        ServerConfiguration conf = killBookie(bookie);\n+        // replace a unauthorize bookie\n+        startUnauthorizedBookie(conf, addDoneLatch);\n+        // kill second bookie to replace with a dead bookie\n+        bookie = lh.getLedgerMetadata().currentEnsemble.get(1);\n+        conf = killBookie(bookie);\n+        // replace a slow dead bookie\n+        startDeadBookie(conf, deadIOLatch);\n+\n+        // tried to add entries\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.asyncAddEntry(\"data\".getBytes(), new AddCallback() {\n+                @Override\n+                public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                    if (BKException.Code.OK != rc) {\n+                        failedLatch.countDown();\n+                        deadIOLatch.countDown();\n+                    }\n+                    if (0 == entryId) {\n+                        try {\n+                            recoverDoneLatch.await();\n+                        } catch (InterruptedException ie) {\n+                        }\n+                    }\n+                }\n+            }, null);\n+        }\n+        // add finished\n+        addDoneLatch.countDown();\n+        // wait until entries failed due to UnauthorizedAccessException\n+        failedLatch.await();\n+        // simulate the ownership of this ledger is transfer to another host (which is actually\n+        // what we did in Hedwig).\n+        LOG.info(\"Recover ledger {}.\", lh.getId());\n+        ClientConfiguration newConf = new ClientConfiguration();\n+        newConf.addConfiguration(baseClientConf);\n+        BookKeeper newBkc = new BookKeeperTestClient(newConf.setReadTimeout(1));\n+        LedgerHandle recoveredLh = newBkc.openLedger(lh.getId(), digestType, \"\".getBytes());\n+        LOG.info(\"Recover ledger {} done.\", lh.getId());\n+        recoverDoneLatch.countDown();\n+        // wait a bit until add operations failed from second bookie due to IOException\n+        TimeUnit.SECONDS.sleep(5);\n+        // open the ledger again to make sure we ge the right last confirmed.\n+        LedgerHandle newLh = newBkc.openLedger(lh.getId(), digestType, \"\".getBytes());\n+        assertEquals(\"Metadata should be consistent across different opened ledgers\",\n+                recoveredLh.getLastAddConfirmed(), newLh.getLastAddConfirmed());\n+    }\n+\n+    private void startUnauthorizedBookie(ServerConfiguration conf, final CountDownLatch latch)\n+            throws Exception {\n+        Bookie sBookie = new Bookie(conf) {\n+            @Override\n+            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException e) {\n+                }\n+                throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n+            }\n+\n+            @Override\n+            public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                throw new IOException(\"Dead bookie for recovery adds.\");\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, sBookie));\n+    }\n+\n+    // simulate slow adds, then become normal when recover,\n+    // so no ensemble change when recovering ledger on this bookie.\n+    private void startDeadBookie(ServerConfiguration conf, final CountDownLatch latch) throws Exception {\n+        Bookie dBookie = new Bookie(conf) {\n+            @Override\n+            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException e) {\n+                }\n+                // simulate slow adds.\n+                throw new IOException(\"Dead bookie\");\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, dBookie));\n+    }\n+}"}]}

