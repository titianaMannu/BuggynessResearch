{"sha":"4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0Yzg5MzEwZjhiOGUwOWYyYWQzOTRhN2U3ZmQ1ZmZmYzhmNTFlNzAx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-10T10:45:58Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-10T10:45:58Z"},"message":"BOOKKEEPER-257: Ability to list all ledgers (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1480978 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"23f5d69d8cf6ba71501036b5ef3c5de3295d3270","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/23f5d69d8cf6ba71501036b5ef3c5de3295d3270"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","html_url":"https://github.com/apache/bookkeeper/commit/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c2bb7ffb366d5c1942ee2e040516af749a705115","url":"https://api.github.com/repos/apache/bookkeeper/commits/c2bb7ffb366d5c1942ee2e040516af749a705115","html_url":"https://github.com/apache/bookkeeper/commit/c2bb7ffb366d5c1942ee2e040516af749a705115"}],"stats":{"total":176,"additions":176,"deletions":0},"files":[{"sha":"255b75ffcb73f1bdfccc0f6f685589e7af2daf62","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","patch":"@@ -84,6 +84,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)\n \n+      BOOKKEEPER-257: Ability to list all ledgers (fpj via ivank)\n+\n Release 4.2.0 - 2013-01-14\n \n   Non-backward compatible changes:"},{"sha":"313ec8dd2a7b4eee572f823f11b399c26d4c8f3f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","patch":"@@ -24,9 +24,12 @@\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.NoSuchElementException;\n import java.util.Random;\n import java.util.UUID;\n import java.util.Collection;\n@@ -36,6 +39,8 @@\n import org.apache.bookkeeper.client.BookKeeper.SyncOpenCallback;\n import org.apache.bookkeeper.client.LedgerFragmentReplicator.SingleFragmentCallback;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n@@ -789,4 +794,62 @@ public static boolean format(ClientConfiguration conf,\n         }\n         return true;\n     }\n+\n+    /**\n+     * This method returns an iterable object for the list of ledger identifiers of\n+     * the ledgers currently available.\n+     *\n+     * @return an iterable object for the list of ledger identifiers\n+     * @throws IOException  if the list of ledger identifiers cannot be read from the\n+     *  metadata store\n+     */\n+    public Iterable<Long> listLedgers()\n+    throws IOException {\n+        final LedgerRangeIterator iterator = bkc.getLedgerManager().getLedgerRanges();\n+        return new Iterable<Long>() {\n+            public Iterator<Long> iterator() {\n+                return new Iterator<Long>() {\n+                    Iterator<Long> currentRange = null;\n+\n+                    @Override\n+                    public boolean hasNext() {\n+                        try {\n+                            if (iterator.hasNext()) {\n+                                return true;\n+                            } else if (currentRange != null) {\n+                                if (currentRange.hasNext()) {\n+                                    return true;\n+                                }\n+                            }\n+                        } catch (IOException e) {\n+                            LOG.error(\"Error while checking if there is a next element\", e);\n+                        }\n+\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public Long next()\n+                    throws NoSuchElementException {\n+                        try{\n+                            if (currentRange == null) {\n+                                currentRange = iterator.next().getLedgers().iterator();\n+                            }\n+                        } catch (IOException e) {\n+                            LOG.error(\"Error while reading the next element\", e);\n+                            throw new NoSuchElementException(e.getMessage());\n+                        }\n+\n+                        return currentRange.next();\n+                    }\n+\n+                    @Override\n+                    public void remove()\n+                    throws UnsupportedOperationException {\n+                        throw new UnsupportedOperationException();\n+                    }\n+                };\n+            }\n+        };\n+    }\n }"},{"sha":"10253010cf763709e4fc481dcb7d4addec209836","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/apache/bookkeeper/blob/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java?ref=4c89310f8b8e09f2ad394a7e7fd5fffc8f51e701","patch":"@@ -0,0 +1,111 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.bookkeeper.client;\n+\n+import java.util.Iterator;\n+\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.test.BaseTestCase;\n+\n+import org.apache.zookeeper.KeeperException;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ListLedgersTest extends BaseTestCase {\n+    static Logger LOG = LoggerFactory.getLogger(ListLedgersTest.class);\n+\n+    DigestType digestType;\n+\n+    public ListLedgersTest (DigestType digestType) {\n+        super(4);\n+        this.digestType = digestType;\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testListLedgers()\n+    throws Exception {\n+        int numOfLedgers = 10;\n+\n+        ClientConfiguration conf = new ClientConfiguration()\n+        .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        for (int i = 0; i < numOfLedgers ; i++) {\n+            bkc.createLedger(digestType, \"testPasswd\".\n+                    getBytes()).close();\n+        }\n+\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.\n+                getZooKeeperConnectString());\n+        Iterable<Long> iterable = admin.listLedgers();\n+\n+        int counter = 0;\n+        for (Long lId: iterable) {\n+            counter++;\n+        }\n+\n+        Assert.assertTrue(\"Wrong number of ledgers: \" + numOfLedgers,\n+                counter == numOfLedgers);\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testEmptyList()\n+    throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+        .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.\n+                getZooKeeperConnectString());\n+        Iterable<Long> iterable = admin.listLedgers();\n+\n+        Assert.assertFalse(\"There should be no ledger\", iterable.iterator().hasNext());\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testRemoveNotSupported()\n+    throws Exception {\n+        int numOfLedgers = 1;\n+\n+        ClientConfiguration conf = new ClientConfiguration()\n+        .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        for (int i = 0; i < numOfLedgers ; i++) {\n+            bkc.createLedger(digestType, \"testPasswd\".\n+                    getBytes()).close();\n+        }\n+\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.\n+                getZooKeeperConnectString());\n+        Iterator<Long> iterator = admin.listLedgers().iterator();\n+        iterator.next();\n+        try{\n+            iterator.remove();\n+        } catch (UnsupportedOperationException e) {\n+            // This exception is expected\n+            return;\n+        }\n+\n+        Assert.fail(\"Remove is not supported, we shouln't have reached this point\");\n+\n+    }\n+}"}]}

