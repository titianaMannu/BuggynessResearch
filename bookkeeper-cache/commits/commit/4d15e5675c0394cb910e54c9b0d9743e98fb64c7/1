{"sha":"4d15e5675c0394cb910e54c9b0d9743e98fb64c7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZDE1ZTU2NzVjMDM5NGNiOTEwZTU0YzliMGQ5NzQzZTk4ZmI2NGM3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-28T17:19:46Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-28T17:19:46Z"},"message":"BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1355079 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"776fe04b96d0b8eb6d16d5b3498716ccc7fd8bf1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/776fe04b96d0b8eb6d16d5b3498716ccc7fd8bf1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4d15e5675c0394cb910e54c9b0d9743e98fb64c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4d15e5675c0394cb910e54c9b0d9743e98fb64c7","html_url":"https://github.com/apache/bookkeeper/commit/4d15e5675c0394cb910e54c9b0d9743e98fb64c7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4d15e5675c0394cb910e54c9b0d9743e98fb64c7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"744edf07394472d3146e57831592a69d5a86616c","url":"https://api.github.com/repos/apache/bookkeeper/commits/744edf07394472d3146e57831592a69d5a86616c","html_url":"https://github.com/apache/bookkeeper/commit/744edf07394472d3146e57831592a69d5a86616c"}],"stats":{"total":259,"additions":254,"deletions":5},"files":[{"sha":"98643f8ee6c2bbb9ca8f1a4d265427217f9c48b4","filename":"CHANGES.txt","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/4d15e5675c0394cb910e54c9b0d9743e98fb64c7/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4d15e5675c0394cb910e54c9b0d9743e98fb64c7/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4d15e5675c0394cb910e54c9b0d9743e98fb64c7","patch":"@@ -30,6 +30,10 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)\n \n+      hedwig-server:\n+\n+        BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)\n+\n     IMPROVEMENTS:\n \n Release 4.1.0 - 2012-06-07"},{"sha":"025040122a03f4da213c4c34fbc812647e5d680d","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/4d15e5675c0394cb910e54c9b0d9743e98fb64c7/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/4d15e5675c0394cb910e54c9b0d9743e98fb64c7/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=4d15e5675c0394cb910e54c9b0d9743e98fb64c7","patch":"@@ -173,13 +173,15 @@ public BookkeeperPersistenceManager(BookKeeper bk, ZooKeeper zk, TopicManager tm\n         long startSeqIdToScan;\n \n         public RangeScanOp(RangeScanRequest request) {\n-            this(request, -1L);\n+            this(request, -1L, 0, 0L);\n         }\n \n-        public RangeScanOp(RangeScanRequest request, long startSeqId) {\n+        public RangeScanOp(RangeScanRequest request, long startSeqId, int numMessagesRead, long totalSizeRead) {\n             queuer.super(request.topic);\n             this.request = request;\n             this.startSeqIdToScan = startSeqId;\n+            this.numMessagesRead = numMessagesRead;\n+            this.totalSizeRead = totalSizeRead;\n         }\n \n         @Override\n@@ -283,7 +285,7 @@ public void safeReadComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> s\n                     }\n \n                     // continue scanning messages\n-                    scanMessages(request, imlr.startSeqIdIncluded + entry.getEntryId() + 1);\n+                    scanMessages(request, imlr.startSeqIdIncluded + entry.getEntryId() + 1, numMessagesRead, totalSizeRead);\n                 }\n             }, request.ctx);\n         }\n@@ -317,8 +319,8 @@ public void scanMessages(RangeScanRequest request) {\n         queuer.pushAndMaybeRun(request.topic, new RangeScanOp(request));\n     }\n \n-    protected void scanMessages(RangeScanRequest request, long scanSeqId) {\n-        queuer.pushAndMaybeRun(request.topic, new RangeScanOp(request, scanSeqId));\n+    protected void scanMessages(RangeScanRequest request, long scanSeqId, int numMsgsRead, long totalSizeRead) {\n+        queuer.pushAndMaybeRun(request.topic, new RangeScanOp(request, scanSeqId, numMsgsRead, totalSizeRead));\n     }\n \n     public void deliveredUntil(ByteString topic, Long seqId) {"},{"sha":"0fb4fe47a85695e74176e20796918ad9ee2dc7be","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/apache/bookkeeper/blob/4d15e5675c0394cb910e54c9b0d9743e98fb64c7/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/4d15e5675c0394cb910e54c9b0d9743e98fb64c7/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java?ref=4d15e5675c0394cb910e54c9b0d9743e98fb64c7","patch":"@@ -0,0 +1,243 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server.persistence;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.TimeUnit;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.hedwig.HelperMethods;\n+import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.topics.TopicManager;\n+import org.apache.hedwig.server.topics.TrivialOwnAllTopicManager;\n+import org.apache.hedwig.util.Callback;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.protobuf.ByteString;\n+\n+public class TestBookKeeperPersistenceManager extends TestCase {\n+    static Logger logger = LoggerFactory.getLogger(TestPersistenceManagerBlackBox.class);\n+\n+    BookKeeperTestBase bktb;\n+    private final int numBookies = 3;\n+    private final long readDelay = 2000L;\n+\n+    ServerConfiguration conf;\n+    ScheduledExecutorService scheduler;\n+\n+    TopicManager tm;\n+    BookkeeperPersistenceManager manager;\n+    PubSubException failureException = null;\n+\n+    @Override\n+    @Before\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+\n+        // delay read response for 2s.\n+        bktb = new BookKeeperTestBase(numBookies, readDelay);\n+        bktb.setUp();\n+\n+        conf = new ServerConfiguration();\n+        org.apache.bookkeeper.conf.ClientConfiguration bkClientConf =\n+                new org.apache.bookkeeper.conf.ClientConfiguration();\n+        bkClientConf.setNumWorkerThreads(1).setReadTimeout(9999)\n+        .setThrottleValue(3);\n+        conf.addConf(bkClientConf);\n+\n+        scheduler = Executors.newScheduledThreadPool(1);\n+        tm = new TrivialOwnAllTopicManager(conf, scheduler);\n+        manager = new BookkeeperPersistenceManager(bktb.bk, bktb.getZooKeeperClient(), tm, conf, scheduler);\n+    }\n+\n+    @Override\n+    @After\n+    protected void tearDown() throws Exception {\n+        tm.stop();\n+        scheduler.shutdown();\n+        bktb.tearDown();\n+        super.tearDown();\n+    }\n+\n+    class RangeScanVerifier implements ScanCallback {\n+        LinkedList<Message> pubMsgs;\n+        boolean runNextScan = false;\n+        RangeScanRequest nextScan = null;\n+\n+        public RangeScanVerifier(LinkedList<Message> pubMsgs, RangeScanRequest nextScan) {\n+            this.pubMsgs = pubMsgs;\n+            this.nextScan = nextScan;\n+        }\n+\n+        @Override\n+        public void messageScanned(Object ctx, Message recvMessage) {\n+            if (null != nextScan && !runNextScan) {\n+                runNextScan = true;\n+                manager.scanMessages(nextScan);\n+            }\n+\n+            if (pubMsgs.size() == 0) {\n+                return;\n+            }\n+\n+            Message pubMsg = pubMsgs.removeFirst();\n+            if (!HelperMethods.areEqual(recvMessage, pubMsg)) {\n+                fail(\"Scanned message not equal to expected\");\n+            }\n+        }\n+\n+        @Override\n+        public void scanFailed(Object ctx, Exception exception) {\n+            fail(\"Failed to scan messages.\");\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public void scanFinished(Object ctx, ReasonForFinish reason) {\n+            LinkedBlockingQueue<Boolean> statusQueue = (LinkedBlockingQueue<Boolean>) ctx;\n+            try {\n+                statusQueue.put(true);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+    }\n+\n+    private LinkedList<Message> subMessages(List<Message> msgs, int start, int end) {\n+        LinkedList<Message> result = new LinkedList<Message>();\n+        for (int i=start; i<=end; i++) {\n+            result.add(msgs.get(i));\n+        }\n+        return result;\n+    }\n+\n+    @Test\n+    public void testScanMessagesOnTwoLedgers() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestScanMessagesOnTwoLedgers\");\n+\n+        List<Message> msgs = new ArrayList<Message>();\n+\n+        acquireTopic(topic);\n+        msgs.addAll(publishMessages(topic, 1));\n+        releaseTopic(topic);\n+\n+        // acquire topic again to force a new ledger\n+        acquireTopic(topic);\n+        msgs.addAll(publishMessages(topic, 3));\n+\n+        // scan messages\n+        LinkedBlockingQueue<Boolean> statusQueue = new LinkedBlockingQueue<Boolean>();\n+        RangeScanRequest nextScan = new RangeScanRequest(topic, 3, 2, Long.MAX_VALUE,\n+                new RangeScanVerifier(subMessages(msgs, 2, 3), null), statusQueue);\n+        manager.scanMessages(new RangeScanRequest(topic, 1, 2, Long.MAX_VALUE,\n+                new RangeScanVerifier(subMessages(msgs, 0, 1), nextScan), statusQueue));\n+        Boolean b = statusQueue.poll(10 * readDelay, TimeUnit.MILLISECONDS);\n+        if (b == null) {\n+            fail(\"One scan request doesn't finish\");\n+        }\n+        b = statusQueue.poll(10 * readDelay, TimeUnit.MILLISECONDS);\n+        if (b == null) {\n+            fail(\"One scan request doesn't finish\");\n+        }\n+    }\n+\n+    class TestCallback implements Callback<Long> {\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public void operationFailed(Object ctx, PubSubException exception) {\n+            LinkedBlockingQueue<Boolean> statusQueue = (LinkedBlockingQueue<Boolean>) ctx;\n+            try {\n+                statusQueue.put(false);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+\n+        @Override\n+        @SuppressWarnings(\"unchecked\")\n+        public void operationFinished(Object ctx, Long resultOfOperation) {\n+            LinkedBlockingQueue<Boolean> statusQueue = (LinkedBlockingQueue<Boolean>) ctx;\n+            try {\n+                statusQueue.put(true);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    protected List<Message> publishMessages(ByteString topic, int numMsgs) throws Exception {\n+        List<Message> msgs = HelperMethods.getRandomPublishedMessages(numMsgs, 1024);\n+        LinkedBlockingQueue<Boolean> statusQueue = new LinkedBlockingQueue<Boolean>();\n+        for (Message msg : msgs) {\n+\n+            try {\n+                manager.persistMessage(new PersistRequest(topic, msg, new TestCallback(), statusQueue));\n+                // wait a maximum of a minute\n+                Boolean b = statusQueue.poll(60, TimeUnit.SECONDS);\n+                if (b == null) {\n+                    throw new RuntimeException(\"Publish timed out\");\n+                }\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        return msgs;\n+    }\n+\n+    protected void acquireTopic(ByteString topic) throws Exception {\n+        Semaphore latch = new Semaphore(1);\n+        latch.acquire();\n+        manager.acquiredTopic(topic, new Callback<Void>() {\n+            @Override\n+            public void operationFinished(Object ctx, Void resultOfOperation) {\n+                failureException = null;\n+                ((Semaphore)ctx).release();\n+            }\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException exception) {\n+                failureException = exception;\n+                ((Semaphore)ctx).release();\n+            }\n+        }, latch);\n+        latch.acquire();\n+        latch.release();\n+        if (null != failureException) {\n+            throw failureException;\n+        }\n+    }\n+\n+    protected void releaseTopic(ByteString topic) throws Exception {\n+        manager.lostTopic(topic);\n+    }\n+\n+}"}]}

