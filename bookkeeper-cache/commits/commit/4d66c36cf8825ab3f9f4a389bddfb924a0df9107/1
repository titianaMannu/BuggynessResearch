{"sha":"4d66c36cf8825ab3f9f4a389bddfb924a0df9107","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZDY2YzM2Y2Y4ODI1YWIzZjlmNGEzODliZGRmYjkyNGEwZGY5MTA3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T17:59:39Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T17:59:39Z"},"message":"BOOKKEEPER-563: Avoid Journal polluting page cache (Robin Dhamankar via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1505174 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"25e8185a75491308ea636679f60b88448f1c2987","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/25e8185a75491308ea636679f60b88448f1c2987"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4d66c36cf8825ab3f9f4a389bddfb924a0df9107","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4d66c36cf8825ab3f9f4a389bddfb924a0df9107","html_url":"https://github.com/apache/bookkeeper/commit/4d66c36cf8825ab3f9f4a389bddfb924a0df9107","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"53c208b09483c90207aecf0e27e669ee810619c2","url":"https://api.github.com/repos/apache/bookkeeper/commits/53c208b09483c90207aecf0e27e669ee810619c2","html_url":"https://github.com/apache/bookkeeper/commit/53c208b09483c90207aecf0e27e669ee810619c2"}],"stats":{"total":230,"additions":223,"deletions":7},"files":[{"sha":"c41b2e81fe61b6a5a3cc0d1e2b3eddf6e3499e6f","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4d66c36cf8825ab3f9f4a389bddfb924a0df9107","patch":"@@ -70,6 +70,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-633: ConcurrentModificationException in RackawareEnsemblePlacementPolicy when a bookie is removed from available list (vinay via sijie)\n \n+        BOOKKEEPER-563: Avoid Journal polluting page cache (Robin Dhamankar via sijie)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"77e18a3fd97f551fcfdb7c8047f1d1f39c5ead87","filename":"bookkeeper-server/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=4d66c36cf8825ab3f9f4a389bddfb924a0df9107","patch":"@@ -98,6 +98,11 @@\n       <artifactId>commons-io</artifactId>\n       <version>2.1</version>\n     </dependency>\n+    <dependency>\n+      <groupId>net.java.dev.jna</groupId>\n+      <artifactId>jna</artifactId>\n+      <version>3.2.7</version>\n+    </dependency>\n     <!--\n         Annoying dependency we need to include because\n         zookeeper uses log4j and so we transatively do, but"},{"sha":"eb8b9e6b8bd6ee5121ba3a5aeeca2a8c3d72f74e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java?ref=4d66c36cf8825ab3f9f4a389bddfb924a0df9107","patch":"@@ -111,10 +111,23 @@ public void flush(boolean sync) throws IOException {\n             writeBufferStartPosition = bc.position();\n         }\n         if (sync) {\n-            bc.force(false);\n+            forceWrite(false);\n         }\n     }\n \n+    public long forceWrite(boolean forceMetadata) throws IOException {\n+        // This is the point up to which we had flushed to the file system page cache\n+        // before issuing this force write hence is guaranteed to be made durable by\n+        // the force write, any flush that happens after this may or may\n+        // not be flushed\n+        long positionForceWrite;\n+        synchronized (this) {\n+            positionForceWrite = writeBufferStartPosition;\n+        }\n+        bc.force(forceMetadata);\n+        return positionForceWrite;\n+    }\n+\n     /*public Channel getInternalChannel() {\n         return bc;\n     }*/"},{"sha":"91e38f299fe36c6959761cc937366134b01209cc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=4d66c36cf8825ab3f9f4a389bddfb924a0df9107","patch":"@@ -275,6 +275,8 @@ public boolean accept(long journalId) {\n \n     final File journalDirectory;\n     final ServerConfiguration conf;\n+    // should we hint the filesystem to remove pages from cache after force write\n+    private final boolean removePagesFromCache;\n \n     private LastLogMark lastLogMark = new LastLogMark(0, 0);\n \n@@ -292,6 +294,7 @@ public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager) {\n         this.maxJournalSize = conf.getMaxJournalSize() * MB;\n         this.maxBackupJournals = conf.getMaxBackupJournals();\n \n+        this.removePagesFromCache = conf.getJournalRemovePagesFromCache();\n         // read last log mark\n         lastLogMark.readLog();\n         LOG.debug(\"Last Log Mark : {}\", lastLogMark.getCurMark());\n@@ -492,7 +495,7 @@ public void run() {\n                 // new journal file to write\n                 if (null == logFile) {\n                     logId = logId + 1;\n-                    logFile = new JournalChannel(journalDirectory, logId);\n+                    logFile = new JournalChannel(journalDirectory, logId, removePagesFromCache);\n                     bc = logFile.getBufferedChannel();\n \n                     lastFlushPosition = 0;\n@@ -505,7 +508,11 @@ public void run() {\n                         qe = queue.poll();\n                         if (qe == null || bc.position() > lastFlushPosition + 512*1024) {\n                             //logFile.force(false);\n-                            bc.flush(true);\n+                            bc.flush(false);\n+                            // This separation of flush and force is useful when adaptive group\n+                            // force write is used where the flush thread does not block while\n+                            // the force is issued by a separate thread\n+                            logFile.forceWrite(false);\n                             lastFlushPosition = bc.position();\n                             lastLogMark.setCurLogMark(logId, lastFlushPosition);\n                             for (QueueEntry e : toFlush) {"},{"sha":"41cb7960d35c0d8b154bf4ab720902ec1f71af6e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":36,"deletions":4,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=4d66c36cf8825ab3f9f4a389bddfb924a0df9107","patch":"@@ -29,6 +29,7 @@\n import java.io.IOException;\n import java.nio.channels.FileChannel;\n import java.nio.ByteBuffer;\n+import org.apache.bookkeeper.util.NativeIO;\n \n import static com.google.common.base.Charsets.UTF_8;\n \n@@ -42,6 +43,7 @@\n class JournalChannel implements Closeable {\n     static Logger LOG = LoggerFactory.getLogger(JournalChannel.class);\n \n+    final RandomAccessFile randomAccessFile;\n     final FileChannel fc;\n     final BufferedChannel bc;\n     final int formatVersion;\n@@ -57,12 +59,24 @@\n \n     public final static long preAllocSize = 4*1024*1024;\n     public final static ByteBuffer zeros = ByteBuffer.allocate(512);\n+    private boolean fRemoveFromPageCache;\n+    // The position of the file channel's last force write.\n+    private long lastForceWritePosition = 0;\n \n     JournalChannel(File journalDirectory, long logId) throws IOException {\n-        this(journalDirectory, logId, START_OF_FILE);\n+        this(journalDirectory, logId, START_OF_FILE, false);\n     }\n \n     JournalChannel(File journalDirectory, long logId, long position) throws IOException {\n+        this(journalDirectory, logId, position, false);\n+    }\n+\n+    JournalChannel(File journalDirectory, long logId, boolean fRemoveFromPageCache) throws IOException {\n+        this(journalDirectory, logId, START_OF_FILE, fRemoveFromPageCache);\n+    }\n+\n+    JournalChannel(File journalDirectory, long logId, long position, boolean fRemoveFromPageCache) throws IOException {\n+        this.fRemoveFromPageCache = fRemoveFromPageCache;\n         File fn = new File(journalDirectory, Long.toHexString(logId) + \".txn\");\n \n         LOG.info(\"Opening journal {}\", fn);\n@@ -73,22 +87,24 @@\n                 throw new IOException(\"File \" + fn\n                         + \" suddenly appeared, is another bookie process running?\");\n             }\n-            fc = new RandomAccessFile(fn, \"rw\").getChannel();\n+            randomAccessFile = new RandomAccessFile(fn, \"rw\");\n+            fc = randomAccessFile.getChannel();\n             formatVersion = CURRENT_JOURNAL_FORMAT_VERSION;\n \n             ByteBuffer bb = ByteBuffer.allocate(HEADER_SIZE);\n             bb.put(MAGIC_WORD);\n             bb.putInt(formatVersion);\n             bb.flip();\n             fc.write(bb);\n-            fc.force(true);\n \n             bc = new BufferedChannel(fc, 65536);\n \n+            forceWrite(true);\n             nextPrealloc = preAllocSize;\n             fc.write(zeros, nextPrealloc);\n         } else {  // open an existing file\n-            fc = new RandomAccessFile(fn, \"r\").getChannel();\n+            randomAccessFile = new RandomAccessFile(fn, \"r\");\n+            fc = randomAccessFile.getChannel();\n             bc = null; // readonly\n \n             ByteBuffer bb = ByteBuffer.allocate(HEADER_SIZE);\n@@ -133,6 +149,9 @@\n             } catch (IOException e) {\n                 LOG.error(\"Bookie journal file can seek to position :\", e);\n             }\n+\n+            // Anything we read has been force written\n+            lastForceWritePosition = fc.position();\n         }\n     }\n \n@@ -163,4 +182,17 @@ int read(ByteBuffer dst)\n     public void close() throws IOException {\n         fc.close();\n     }\n+\n+    public void forceWrite(boolean forceMetadata) throws IOException {\n+        long newForceWritePosition = bc.forceWrite(forceMetadata);\n+        if (newForceWritePosition > lastForceWritePosition) {\n+            if (fRemoveFromPageCache) {\n+                NativeIO.bestEffortRemoveFromPageCache(randomAccessFile.getFD(),\n+                    lastForceWritePosition, (int)(newForceWritePosition - lastForceWritePosition));\n+            }\n+            synchronized (this) {\n+                lastForceWritePosition = newForceWritePosition;\n+            }\n+        }\n+    }\n }"},{"sha":"18e6dab210ab7544ad8d7cbe482ea489311c23e1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=4d66c36cf8825ab3f9f4a389bddfb924a0df9107","patch":"@@ -20,6 +20,8 @@\n import java.io.File;\n import java.util.List;\n \n+import com.google.common.annotations.Beta;\n+\n import org.apache.commons.lang.StringUtils;\n \n /**\n@@ -46,6 +48,7 @@\n     // Journal Parameters\n     protected final static String MAX_JOURNAL_SIZE = \"journalMaxSizeMB\";\n     protected final static String MAX_BACKUP_JOURNALS = \"journalMaxBackups\";\n+    protected final static String JOURNAL_REMOVE_FROM_PAGE_CACHE = \"journalRemoveFromPageCache\";\n     // Bookie Parameters\n     protected final static String BOOKIE_PORT = \"bookiePort\";\n     protected final static String LISTENING_INTERFACE = \"listeningInterface\";\n@@ -753,4 +756,26 @@ public ServerConfiguration setAutoRecoveryDaemonEnabled(boolean enabled) {\n     public boolean isAutoRecoveryDaemonEnabled() {\n         return getBoolean(AUTO_RECOVERY_DAEMON_ENABLED, false);\n     }\n+\n+    /**\n+     * Should we remove pages from page cache after force write\n+     *\n+     * @return remove pages from cache\n+     */\n+    @Beta\n+    public boolean getJournalRemovePagesFromCache() {\n+        return getBoolean(JOURNAL_REMOVE_FROM_PAGE_CACHE, false);\n+    }\n+\n+    /**\n+     * Sets that whether should we remove pages from page cache after force write.\n+     *\n+     * @param enabled\n+     *            - true if we need to remove pages from page cache. otherwise, false\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setJournalRemovePagesFromCache(boolean enabled) {\n+        setProperty(JOURNAL_REMOVE_FROM_PAGE_CACHE, enabled);\n+        return this;\n+    }\n }"},{"sha":"53cec0d3e8141b523638e2217050096bb01430f8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/bookkeeper/blob/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","raw_url":"https://github.com/apache/bookkeeper/raw/4d66c36cf8825ab3f9f4a389bddfb924a0df9107/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/NativeIO.java?ref=4d66c36cf8825ab3f9f4a389bddfb924a0df9107","patch":"@@ -0,0 +1,132 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.util;\n+\n+import java.lang.reflect.Field;\n+import java.io.FileDescriptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import com.sun.jna.LastErrorException;\n+import com.sun.jna.Native;\n+\n+public final class NativeIO {\n+    private static Logger LOG = LoggerFactory.getLogger(NativeIO.class);\n+\n+    private static final int POSIX_FADV_DONTNEED = 4; /* fadvise.h */\n+\n+    private static boolean initializationAttempted = false;\n+    private static boolean initialized = false;\n+\n+    private static void onDemandInitialization() {\n+        try {\n+            initializationAttempted = true;\n+            Native.register(\"c\");\n+            initialized = true;\n+        } catch (NoClassDefFoundError e) {\n+            LOG.info(\"JNA not found. Native methods will be disabled.\");\n+        } catch (UnsatisfiedLinkError e) {\n+            LOG.info(\"Unable to link C library. Native methods will be disabled.\");\n+        } catch (NoSuchMethodError e) {\n+            LOG.warn(\"Obsolete version of JNA present; unable to register C library\");\n+        }\n+    }\n+\n+    // fadvice\n+    public static native int posix_fadvise(int fd, long offset, int len, int flag) throws LastErrorException;\n+\n+    private NativeIO() {}\n+\n+    private static Field getFieldByReflection(Class cls, String fieldName) {\n+        Field field = null;\n+\n+        try {\n+            field = cls.getDeclaredField(fieldName);\n+            field.setAccessible(true);\n+        } catch (Exception e) {\n+            // We don't really expect this so throw an assertion to\n+            // catch this during development\n+            assert false;\n+            LOG.warn(\"Unable to read {} field from {}\", fieldName, cls.getName());\n+        }\n+\n+        return field;\n+    }\n+    /**\n+     * Get system file descriptor (int) from FileDescriptor object.\n+     * @param descriptor - FileDescriptor object to get fd from\n+     * @return file descriptor, -1 or error\n+     */\n+    private static int getSysFileDescriptor(FileDescriptor descriptor) {\n+        // field would not be null due to 'assert false' in getFieldByReflection\n+        Field field = getFieldByReflection(descriptor.getClass(), \"fd\");\n+        try {\n+            return field.getInt(descriptor);\n+        } catch (Exception e) {\n+            LOG.warn(\"Unable to read fd field from java.io.FileDescriptor\");\n+        }\n+\n+        return -1;\n+    }\n+\n+    /**\n+     * Remove pages from the file system page cache when they wont\n+     * be accessed again\n+     *\n+     * @param fileDescriptor     The file descriptor of the source file.\n+     * @param offset The offset within the file.\n+     * @param len    The length to be flushed.\n+     *\n+     * @throws nothing => Best effort\n+     */\n+\n+    public static void bestEffortRemoveFromPageCache(FileDescriptor fileDescriptor, long offset, int len) {\n+        if (!initializationAttempted) {\n+            onDemandInitialization();\n+        }\n+\n+        if (!initialized) {\n+            return;\n+        }\n+\n+        int sysFileDesc = getSysFileDescriptor(fileDescriptor);\n+\n+        if (sysFileDesc < 0) {\n+            return;\n+        }\n+\n+        try {\n+            if (System.getProperty(\"os.name\").toLowerCase().contains(\"linux\")) {\n+                posix_fadvise(sysFileDesc, offset, len, POSIX_FADV_DONTNEED);\n+            } else {\n+                LOG.debug(\"posix_fadvise skipped on file descriptor {}, offset {}\", fileDescriptor, offset);\n+            }\n+        } catch (UnsatisfiedLinkError e) {\n+            // if JNA is unavailable just skipping Direct I/O\n+            // instance of this class will act like normal RandomAccessFile\n+            LOG.warn(\"Unsatisfied Link error: posix_fadvise failed on file descriptor {}, offset {}\",\n+                fileDescriptor, offset);\n+        } catch (Exception e) {\n+            // This is best effort anyway so lets just log that there was an\n+            // exception and forget\n+            LOG.warn(\"Unknown exception: posix_fadvise failed on file descriptor {}, offset {}\",\n+                fileDescriptor, offset);\n+        }\n+    }\n+\n+}"}]}

