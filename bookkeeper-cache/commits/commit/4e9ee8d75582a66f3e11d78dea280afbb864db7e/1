{"sha":"4e9ee8d75582a66f3e11d78dea280afbb864db7e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZTllZThkNzU1ODJhNjZmM2UxMWQ3OGRlYTI4MGFmYmI4NjRkYjdl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-04-24T17:37:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-04-24T17:37:54Z"},"message":"BOOKKEEPER-56: Race condition of message handler in connection recovery in Hedwig client (sijie & Gavin Li via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1329883 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1584a6bee7551f0a349e388627ef1cba1d25a174","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1584a6bee7551f0a349e388627ef1cba1d25a174"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4e9ee8d75582a66f3e11d78dea280afbb864db7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4e9ee8d75582a66f3e11d78dea280afbb864db7e","html_url":"https://github.com/apache/bookkeeper/commit/4e9ee8d75582a66f3e11d78dea280afbb864db7e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4e9ee8d75582a66f3e11d78dea280afbb864db7e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2f25ef611dd2c8ea2c94b48af09f183d74b6167e","url":"https://api.github.com/repos/apache/bookkeeper/commits/2f25ef611dd2c8ea2c94b48af09f183d74b6167e","html_url":"https://github.com/apache/bookkeeper/commit/2f25ef611dd2c8ea2c94b48af09f183d74b6167e"}],"stats":{"total":133,"additions":111,"deletions":22},"files":[{"sha":"b21e8bef101d5a203ad01a3d74172c70b68817a1","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -102,6 +102,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-197: HedwigConsole uses the same file to load bookkeeper client config and hub server config (sijie)\n \n+        BOOKKEEPER-56: Race condition of message handler in connection recovery in Hedwig client (sijie & Gavin Li via ivank)\n+\n       bookkeeper-benchmark/\n \t\n \tBOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj)"},{"sha":"972590b7b1d1e6972530ec05d2dccd1058ae1b23","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -20,6 +20,7 @@\n import java.util.List;\n \n import com.google.protobuf.ByteString;\n+import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;\n import org.apache.hedwig.exceptions.PubSubException.ClientAlreadySubscribedException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n@@ -232,9 +233,11 @@ public boolean hasSubscription(ByteString topic, ByteString subscriberId) throws\n      *            Message Handler that will consume the subscribed messages\n      * @throws ClientNotSubscribedException\n      *             If the client is not currently subscribed to the topic\n+     * @throws AlreadyStartDeliveryException\n+     *             If someone started delivery a message handler before stopping existed one.\n      */\n     public void startDelivery(ByteString topic, ByteString subscriberId, MessageHandler messageHandler)\n-            throws ClientNotSubscribedException;\n+            throws ClientNotSubscribedException, AlreadyStartDeliveryException;\n \n     /**\n      * Stop delivery of messages for this topic and subscriberId."},{"sha":"6c79feebd80db01efe365cac9c736dc256299ecb","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -25,9 +25,11 @@\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.data.PubSubData;\n+import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n import org.apache.hedwig.client.netty.HedwigClientImpl;\n import org.apache.hedwig.client.netty.HedwigSubscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n+\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.util.Callback;\n \n@@ -48,15 +50,13 @@\n     private final HedwigClientImpl client;\n     private final HedwigSubscriber sub;\n     private final ClientConfiguration cfg;\n-    private final MessageHandler messageHandler;\n \n     // Constructor\n-    public SubscribeReconnectCallback(PubSubData origSubData, HedwigClientImpl client, MessageHandler messageHandler) {\n+    public SubscribeReconnectCallback(PubSubData origSubData, HedwigClientImpl client) {\n         this.origSubData = origSubData;\n         this.client = client;\n         this.sub = client.getSubscriber();\n         this.cfg = client.getConfiguration();\n-        this.messageHandler = messageHandler;\n     }\n \n     class SubscribeReconnectRetryTask extends TimerTask {\n@@ -77,17 +77,17 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n         // Now we want to restart delivery for the subscription channel only\n         // if delivery was started at the time the original subscribe channel\n         // was disconnected.\n-        if (messageHandler != null) {\n-            try {\n-                sub.startDelivery(origSubData.topic, origSubData.subscriberId, messageHandler);\n-            } catch (ClientNotSubscribedException e) {\n-                // This exception should never be thrown here but just in case,\n-                // log an error and just keep retrying the subscribe request.\n-                logger.error(\"Subscribe was successful but error starting delivery for topic: \"\n-                             + origSubData.topic.toStringUtf8() + \", subscriberId: \"\n-                             + origSubData.subscriberId.toStringUtf8(), e);\n-                retrySubscribeRequest();\n-            }\n+        try {\n+            sub.restartDelivery(origSubData.topic, origSubData.subscriberId);\n+        } catch (ClientNotSubscribedException e) {\n+            // This exception should never be thrown here but just in case,\n+            // log an error and just keep retrying the subscribe request.\n+            logger.error(\"Subscribe was successful but error starting delivery for topic: \"\n+                         + origSubData.topic.toStringUtf8() + \", subscriberId: \"\n+                         + origSubData.subscriberId.toStringUtf8(), e);\n+            retrySubscribeRequest();\n+        } catch (AlreadyStartDeliveryException asde) {\n+            // should not reach here\n         }\n     }\n "},{"sha":"c986b6e4bd5521e5083d43ed26e03290ca38bc36","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":38,"deletions":1,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -34,6 +34,7 @@\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.data.PubSubData;\n import org.apache.hedwig.client.data.TopicSubscriber;\n+import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;\n import org.apache.hedwig.client.handlers.PubSubCallback;\n import org.apache.hedwig.exceptions.PubSubException;\n@@ -68,6 +69,11 @@\n     // Channel Pipeline.\n     protected final ConcurrentMap<TopicSubscriber, Channel> topicSubscriber2Channel = new ConcurrentHashMap<TopicSubscriber, Channel>();\n \n+    // Concurrent Map to store Message handler for each topic + sub id combination.\n+    // Store it here instead of in SubscriberResponseHandler as we don't want to lose the handler\n+    // user set when connection is recovered\n+    protected final ConcurrentMap<TopicSubscriber, MessageHandler> topicSubscriber2MessageHandler= new ConcurrentHashMap<TopicSubscriber, MessageHandler>();\n+\n     protected final HedwigClientImpl client;\n     protected final ClientConfiguration cfg;\n \n@@ -463,7 +469,18 @@ public boolean hasSubscription(ByteString topic, ByteString subscriberId) throws\n     }\n \n     public void startDelivery(final ByteString topic, final ByteString subscriberId, MessageHandler messageHandler)\n-            throws ClientNotSubscribedException {\n+            throws ClientNotSubscribedException, AlreadyStartDeliveryException {\n+        startDelivery(topic, subscriberId, messageHandler, false);\n+    }\n+\n+    public void restartDelivery(final ByteString topic, final ByteString subscriberId)\n+        throws ClientNotSubscribedException, AlreadyStartDeliveryException {\n+        startDelivery(topic, subscriberId, null, true);\n+    }\n+\n+    private void startDelivery(final ByteString topic, final ByteString subscriberId,\n+                               MessageHandler messageHandler, boolean restart)\n+        throws ClientNotSubscribedException, AlreadyStartDeliveryException {\n         if (logger.isDebugEnabled())\n             logger.debug(\"Starting delivery for topic: \" + topic.toStringUtf8() + \", subscriberId: \"\n                          + subscriberId.toStringUtf8());\n@@ -482,6 +499,25 @@ public void startDelivery(final ByteString topic, final ByteString subscriberId,\n         // Register the MessageHandler with the subscribe Channel's\n         // Response Handler.\n         Channel topicSubscriberChannel = topicSubscriber2Channel.get(topicSubscriber);\n+\n+        // Need to ensure the setting of handler and the readability of channel is in sync\n+        // as there's a race condition that connection recovery and user might call this at the same time\n+\n+        MessageHandler existedMsgHandler = topicSubscriber2MessageHandler.get(topicSubscriber);\n+        if (restart) {\n+            // restart using existing msg handler \n+            messageHandler = existedMsgHandler;\n+        } else {\n+            // some has started delivery but not stop it\n+            if (null != existedMsgHandler) {\n+                throw new AlreadyStartDeliveryException(\"A message handler has been started for topic subscriber \" + topicSubscriber);\n+            }\n+            if (messageHandler != null) {\n+                if (null != topicSubscriber2MessageHandler.putIfAbsent(topicSubscriber, messageHandler)) {\n+                    throw new AlreadyStartDeliveryException(\"Someone is also starting delivery for topic subscriber \" + topicSubscriber);\n+                }\n+            }\n+        }\n         HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n         .setMessageHandler(messageHandler);\n         // Now make the TopicSubscriber Channel readable (it is set to not be\n@@ -521,6 +557,7 @@ public void stopDelivery(final ByteString topic, final ByteString subscriberId)\n         Channel topicSubscriberChannel = topicSubscriber2Channel.get(topicSubscriber);\n         HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n         .setMessageHandler(null);\n+        this.topicSubscriber2MessageHandler.remove(topicSubscriber);\n         // Now make the TopicSubscriber channel not-readable. This will buffer\n         // up messages if any are sent from the server. Note that this is an\n         // asynchronous call. If this fails (not likely), the futureListener"},{"sha":"c4affafa12bf0e334a4a2fba4b0df5c31ccacb79","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -318,7 +318,7 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n             // hook so after the subscribe reconnect has completed, delivery for\n             // that topic subscriber should also be restarted (if it was that\n             // case before the channel disconnect).\n-            origSubData.callback = new SubscribeReconnectCallback(origSubData, client, subHandler.getMessageHandler());\n+            origSubData.callback = new SubscribeReconnectCallback(origSubData, client);\n             origSubData.context = null;\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Disconnected subscribe channel so reconnect with origSubData: \" + origSubData);"},{"sha":"118340ae46994868fba099ae1a3377c352956f6c","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -52,6 +52,7 @@\n     ChannelGroup allChannels;\n     Map<OperationType, Handler> handlers;\n     ProxyConfiguration cfg;\n+    ChannelTracker tracker;\n \n     public HedwigProxy(final ProxyConfiguration cfg, final UncaughtExceptionHandler exceptionHandler)\n             throws InterruptedException {\n@@ -87,9 +88,14 @@ public HedwigProxy(ProxyConfiguration conf) throws InterruptedException {\n         this(conf, new TerminateJVMExceptionHandler());\n     }\n \n+    // used for testing\n+    public ChannelTracker getChannelTracker() {\n+        return tracker;\n+    }\n+\n     protected void initializeHandlers() {\n         handlers = new HashMap<OperationType, Handler>();\n-        ChannelTracker tracker = new ChannelTracker(client.getSubscriber());\n+        tracker = new ChannelTracker(client.getSubscriber());\n \n         handlers.put(OperationType.PUBLISH, new ProxyPublishHander(client.getPublisher()));\n         handlers.put(OperationType.SUBSCRIBE, new ProxySubscribeHandler(client.getSubscriber(), tracker));\n@@ -130,6 +136,10 @@ public Handler getStartDeliveryHandler() {\n         return handlers.get(OperationType.START_DELIVERY);\n     }\n \n+    public Handler getStopDeliveryHandler() {\n+        return handlers.get(OperationType.STOP_DELIVERY);\n+    }\n+\n     /**\n      * @param args\n      */"},{"sha":"e77fbceb6c7473374a3d4d38c6c55ba92151910a","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -26,6 +26,7 @@\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n@@ -119,10 +120,11 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 // channel and so on\n                 logger.error(\"Unexpected: No subscription when attempting to start delivery\", e);\n                 throw new RuntimeException(e);\n+            } catch (AlreadyStartDeliveryException e) {\n+                logger.error(\"Unexpected: Already start delivery when attempting to start delivery\", e);\n+                throw new RuntimeException(e);\n             }\n \n-\n-\n         }\n \n     }"},{"sha":"4ac23e7023fb306b620c93bf8e0e2cc1d01970ee","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStopDeliveryHandler.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -50,7 +50,7 @@ public void handleRequest(PubSubRequest request, Channel channel) {\n         }\n \n         final ByteString topic = request.getTopic();\n-        final ByteString subscriberId = request.getStartDeliveryRequest().getSubscriberId();\n+        final ByteString subscriberId = request.getStopDeliveryRequest().getSubscriberId();\n \n         synchronized (tracker) {\n             try {"},{"sha":"b84d9c32db99edbf5081619323979cf8d3c3997e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -34,6 +34,7 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.api.MessageHandler;\n+import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n import org.apache.hedwig.client.netty.HedwigSubscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n@@ -243,6 +244,10 @@ public void operationFailed(Object ctx, PubSubException exception) {\n                         LOGGER.error(\n                                 \"[\" + myRegion.toStringUtf8() + \"] cross-region start-delivery failed for topic \" + topic.toStringUtf8(), ex);\n                     mcb.operationFailed(ctx, ex);\n+                } catch (AlreadyStartDeliveryException ex) {\n+                    LOGGER.error(\"[\" + myRegion.toStringUtf8() + \"] cross-region start-delivery failed for topic \"\n+                               + topic.toStringUtf8(), ex);\n+                    mcb.operationFailed(ctx, new PubSubException.UnexpectedConditionException(\"cross-region start-delivery failed : \" + ex.getMessage()));\n                 }\n             }\n "},{"sha":"eef014c9e3adaf410cd6095d557d0d223e55093a","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","status":"modified","additions":31,"deletions":1,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","raw_url":"https://github.com/apache/bookkeeper/raw/4e9ee8d75582a66f3e11d78dea280afbb864db7e/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java?ref=4e9ee8d75582a66f3e11d78dea280afbb864db7e","patch":"@@ -35,6 +35,7 @@\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;\n+import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.client.api.Client;\n import org.apache.hedwig.client.api.Publisher;\n@@ -48,6 +49,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n import org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.StopDeliveryRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n@@ -254,6 +256,20 @@ protected void startDelivery(Subscriber subscriber, ByteString topic, ByteString\n         }\n     }\n \n+    protected void stopDelivery(ByteString topic, ByteString subscriberId) throws Exception {\n+        stopDelivery(subscriber, topic, subscriberId);\n+    }\n+\n+    protected void stopDelivery(Subscriber subscriber, ByteString topic, ByteString subscriberId) throws Exception {\n+        subscriber.stopDelivery(topic, subscriberId);\n+        if (mode == Mode.PROXY) {\n+            PubSubRequest request = PubSubRequest.newBuilder().setProtocolVersion(ProtocolVersion.VERSION_ONE)\n+                                    .setTopic(topic).setTxnId(1).setType(OperationType.STOP_DELIVERY).setStopDeliveryRequest(\n+                                        StopDeliveryRequest.newBuilder().setSubscriberId(subscriberId)).build();\n+            proxy.getStopDeliveryHandler().handleRequest(request, proxy.getChannelTracker().getChannel(topic, subscriberId));\n+        }\n+    }\n+\n     protected void publishBatch(int batchSize, boolean expected, boolean messagesToBeConsumed, int loop) throws Exception {\n         if (logger.isDebugEnabled())\n             logger.debug(\"Publishing \" + loop + \" batch of messages.\");\n@@ -486,6 +502,20 @@ public void run() {\n         assertFalse(consumeQueue.take());\n     }\n \n+    @Test\n+    public void testStartDeliveryTwice() throws Exception {\n+        ByteString topic = getTopic(0);\n+        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(queue),\n+                                  null);\n+        assertTrue(queue.take());\n+        startDelivery(topic, localSubscriberId, new TestMessageHandler(consumeQueue));\n+        try {\n+            startDelivery(topic, localSubscriberId, new TestMessageHandler(consumeQueue));\n+            fail(\"Should not reach here!\");\n+        } catch (AlreadyStartDeliveryException e) {\n+        }\n+    }\n+\n     @Test\n     public void testStopDelivery() throws Exception {\n         ByteString topic = getTopic(0);\n@@ -497,7 +527,7 @@ public void testStopDelivery() throws Exception {\n         assertTrue(queue.take());\n         assertTrue(consumeQueue.take());\n         // Stop the delivery for this subscription\n-        subscriber.stopDelivery(topic, localSubscriberId);\n+        stopDelivery(topic, localSubscriberId);\n         // Publish some more messages so they are queued up to be delivered to\n         // the client\n         int batchSize = 10;"}]}

