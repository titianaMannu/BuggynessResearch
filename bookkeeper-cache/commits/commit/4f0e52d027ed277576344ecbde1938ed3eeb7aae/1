{"sha":"4f0e52d027ed277576344ecbde1938ed3eeb7aae","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZjBlNTJkMDI3ZWQyNzc1NzYzNDRlY2JkZTE5MzhlZDNlZWI3YWFl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:47:22Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:47:22Z"},"message":"BOOKKEEPER-785: Fix javadoc warnings in trunk (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1625885 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79151a5f7ca8980ec6f32ccd58c127d8368315ac","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/79151a5f7ca8980ec6f32ccd58c127d8368315ac"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4f0e52d027ed277576344ecbde1938ed3eeb7aae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4f0e52d027ed277576344ecbde1938ed3eeb7aae","html_url":"https://github.com/apache/bookkeeper/commit/4f0e52d027ed277576344ecbde1938ed3eeb7aae","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4f0e52d027ed277576344ecbde1938ed3eeb7aae/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"c918051659f9f9231989531304a0a0a15f0f939e","url":"https://api.github.com/repos/apache/bookkeeper/commits/c918051659f9f9231989531304a0a0a15f0f939e","html_url":"https://github.com/apache/bookkeeper/commit/c918051659f9f9231989531304a0a0a15f0f939e"}],"stats":{"total":52,"additions":27,"deletions":25},"files":[{"sha":"2846374e9fc5962743e2728fbdecae2107f096dc","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4f0e52d027ed277576344ecbde1938ed3eeb7aae/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4f0e52d027ed277576344ecbde1938ed3eeb7aae/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4f0e52d027ed277576344ecbde1938ed3eeb7aae","patch":"@@ -230,6 +230,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-783: Avoid running out of fds in MutlipleThreadReadTest (sijie via ivank)\n \n+        BOOKKEEPER-785: Fix javadoc warnings in trunk (ivank via sijie)\n+\n       bookkeeper-benchmark:\n \n         BOOKKEEPER-768: fix typo 'seconds' to milliseconds in benchmark output (jialin via sijie)"},{"sha":"7204d6cbb2795f5503a3ad8a38407bbc5cd84ee6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4f0e52d027ed277576344ecbde1938ed3eeb7aae/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f0e52d027ed277576344ecbde1938ed3eeb7aae/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=4f0e52d027ed277576344ecbde1938ed3eeb7aae","patch":"@@ -187,7 +187,7 @@ DigestManager getDigestManager() {\n      *  Add to the length of the ledger in bytes.\n      *\n      * @param delta\n-     * @return\n+     * @return the length of the ledger after the addition\n      */\n     long addToLength(long delta) {\n         this.length += delta;"},{"sha":"a20f34ade6af14e2b892afb243827e796b78329b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/4f0e52d027ed277576344ecbde1938ed3eeb7aae/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f0e52d027ed277576344ecbde1938ed3eeb7aae/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=4f0e52d027ed277576344ecbde1938ed3eeb7aae","patch":"@@ -227,11 +227,11 @@ void addEnsemble(long startEntryId, ArrayList<BookieSocketAddress> ensemble) {\n     }\n \n     /**\n-     * the entry id > the given entry-id at which the next ensemble change takes\n-     * place ( -1 if no further ensemble changes)\n+     * the entry id greater than the given entry-id at which the next ensemble change takes\n+     * place\n      *\n      * @param entryId\n-     * @return\n+     * @return the entry id of the next ensemble change (-1 if no further ensemble changes) \n      */\n     long getNextEnsembleChange(long entryId) {\n         SortedMap<Long, ArrayList<BookieSocketAddress>> tailMap = ensembles.tailMap(entryId + 1);\n@@ -435,10 +435,10 @@ public Version getVersion() {\n     }\n \n     /**\n-     * Is the metadata newer that given <i>newMeta</i>.\n+     * Is the metadata newer than given <i>newMeta</i>.\n      *\n-     * @param newMeta\n-     * @return\n+     * @param newMeta the metadata to compare\n+     * @return true if <i>this</i> is newer than <i>newMeta</i>, false otherwise\n      */\n     boolean isNewerThan(LedgerMetadata newMeta) {\n         if (null == version) {"},{"sha":"2f4127a96980c2a893f2e9d6461481f0b87c3fe6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4f0e52d027ed277576344ecbde1938ed3eeb7aae/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f0e52d027ed277576344ecbde1938ed3eeb7aae/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=4f0e52d027ed277576344ecbde1938ed3eeb7aae","patch":"@@ -349,7 +349,7 @@ public ClientConfiguration setReadEntryTimeout(int timeout) {\n      * will be executed and it will error out entries that have timed out.\n      *\n      * We do it more aggressive to not accumulate pending requests due to slow responses.\n-     * @return\n+     * @return the interval at which request timeouts will be checked\n      */\n     @Deprecated\n     public long getTimeoutTaskIntervalMillis() {"},{"sha":"03b3be49ba96fad8f6065af8e670aad7cf15aa37","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":17,"deletions":17,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/4f0e52d027ed277576344ecbde1938ed3eeb7aae/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f0e52d027ed277576344ecbde1938ed3eeb7aae/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=4f0e52d027ed277576344ecbde1938ed3eeb7aae","patch":"@@ -808,8 +808,8 @@ public long getOpenLedgerRereplicationGracePeriod() {\n     }\n \n     /**\n-     * Get the number of bytes we should use as capacity for the {@link\n-     * org.apache.bookkeeper.bookie.BufferedReadChannel}\n+     * Get the number of bytes we should use as capacity for\n+     * org.apache.bookkeeper.bookie.BufferedReadChannel\n      * Default is 512 bytes\n      * @return read buffer size\n      */\n@@ -818,8 +818,8 @@ public int getReadBufferBytes() {\n     }\n \n     /**\n-     * Set the number of bytes we should use as capacity for the {@link\n-     * org.apache.bookkeeper.bookie.BufferedReadChannel}\n+     * Set the number of bytes we should use as capacity for\n+     * org.apache.bookkeeper.bookie.BufferedReadChannel\n      *\n      * @param readBufferSize\n      *          Read Buffer Size\n@@ -874,7 +874,7 @@ public int getNumReadWorkerThreads() {\n      * Get the number of bytes used as capacity for the write buffer. Default is\n      * 64KB.\n      * NOTE: Make sure this value is greater than the maximum message size.\n-     * @return\n+     * @return the size of the write buffer in bytes\n      */\n     public int getWriteBufferBytes() {\n         return getInt(WRITE_BUFFER_SIZE, 65536);\n@@ -926,7 +926,7 @@ public ServerConfiguration setSortedLedgerStorageEnabled(boolean enabled) {\n     /**\n      * Check if sorted-ledger storage enabled (default true)\n      *\n-     * @return\n+     * @return true if sorted ledger storage is enabled, false otherwise\n      */\n     public boolean getSortedLedgerStorageEnabled() {\n         return this.getBoolean(SORTED_LEDGER_STORAGE_ENABLED, true);\n@@ -953,18 +953,18 @@ public ServerConfiguration setSkipListSizeLimit(int size) {\n     }\n \n     /**\n-     * Get the number of bytes we should use as chunk allocation for the {@link\n-     * org.apache.bookkeeper.bookie.SkipListArena}\n+     * Get the number of bytes we should use as chunk allocation for\n+     * org.apache.bookkeeper.bookie.SkipListArena\n      * Default is 4 MB\n-     * @return\n+     * @return the number of bytes to use for each chunk in the skiplist arena\n      */\n     public int getSkipListArenaChunkSize() {\n         return getInt(SKIP_LIST_CHUNK_SIZE_ENTRY, 4096 * 1024);\n     }\n \n     /**\n-     * Set the number of bytes w used as chunk allocation for {@link\n-     * org.apache.bookkeeper.bookie.SkipListArena}.\n+     * Set the number of bytes w used as chunk allocation for\n+     * org.apache.bookkeeper.bookie.SkipListArena\n      *\n      * @param size chunk size.\n      * @return server configuration object.\n@@ -975,10 +975,10 @@ public ServerConfiguration setSkipListArenaChunkSize(int size) {\n     }\n \n     /**\n-     * Get the max size we should delegate memory allocation to VM for the {@link\n-     * org.apache.bookkeeper.bookie.SkipListArena}\n-     * Default is 128 KB\n-     * @return\n+     * Get the max size we should allocate from the skiplist arena. Allocations\n+     * larger than this should be allocated directly by the VM to avoid fragmentation.\n+     *\n+     * @return max size allocatable from the skiplist arena (Default is 128 KB)\n      */\n     public int getSkipListArenaMaxAllocSize() {\n         return getInt(SKIP_LIST_MAX_ALLOC_ENTRY, 128 * 1024);\n@@ -1101,7 +1101,7 @@ public ServerConfiguration setDiskUsageWarnThreshold(float threshold) {\n     /**\n      * Returns the warning threshold for disk usage. If disk usage\n      * goes beyond this, a garbage collection cycle will be forced.\n-     * @return\n+     * @return the percentage at which a disk usage warning will trigger\n      */\n     public float getDiskUsageWarnThreshold() {\n         return getFloat(DISK_USAGE_WARN_THRESHOLD, 0.90f);\n@@ -1123,7 +1123,7 @@ public ServerConfiguration setDiskUsageThreshold(float threshold) {\n     /**\n      * Returns disk free space threshold. By default it is 0.95.\n      *\n-     * @return float\n+     * @return the percentage at which a disk will be considered full\n      */\n     public float getDiskUsageThreshold() {\n         return getFloat(DISK_USAGE_THRESHOLD, 0.95f);"}]}

