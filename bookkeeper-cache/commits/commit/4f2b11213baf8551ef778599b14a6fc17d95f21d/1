{"sha":"4f2b11213baf8551ef778599b14a6fc17d95f21d","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZjJiMTEyMTNiYWY4NTUxZWY3Nzg1OTliMTRhNmZjMTdkOTVmMjFk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-14T09:53:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-14T09:53:13Z"},"message":"BOOKKEEPER-403: ReReadMetadataCb is not executed in the thread responsible for that ledger (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1384700 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0869e23c83976a1c79fa993415a8aa3d06c4fbaf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0869e23c83976a1c79fa993415a8aa3d06c4fbaf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4f2b11213baf8551ef778599b14a6fc17d95f21d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4f2b11213baf8551ef778599b14a6fc17d95f21d","html_url":"https://github.com/apache/bookkeeper/commit/4f2b11213baf8551ef778599b14a6fc17d95f21d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4f2b11213baf8551ef778599b14a6fc17d95f21d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6bffc3245ae3c2f9a671a0549f394c192460217f","url":"https://api.github.com/repos/apache/bookkeeper/commits/6bffc3245ae3c2f9a671a0549f394c192460217f","html_url":"https://github.com/apache/bookkeeper/commit/6bffc3245ae3c2f9a671a0549f394c192460217f"}],"stats":{"total":127,"additions":85,"deletions":42},"files":[{"sha":"9aa101255ee9b6e283228b446d3a27fd8ff66e38","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/4f2b11213baf8551ef778599b14a6fc17d95f21d/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/4f2b11213baf8551ef778599b14a6fc17d95f21d/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=4f2b11213baf8551ef778599b14a6fc17d95f21d","patch":"@@ -84,6 +84,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-396: Compilation issue in TestClient.java of BenchMark ( showing this in eclipse) (umamahesh via sijie)\n \n+        BOOKKEEPER-403: ReReadMetadataCb is not executed in the thread responsible for that ledger (ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"eae1f376ce1fc9ce6bcec9ea7d444b00ff39949a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java?ref=4f2b11213baf8551ef778599b14a6fc17d95f21d","patch":"@@ -22,15 +22,15 @@\n package org.apache.bookkeeper.client;\n \n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * Encapsulates asynchronous ledger delete operation\n  *\n  */\n-class LedgerDeleteOp implements GenericCallback<Void> {\n+class LedgerDeleteOp extends OrderedSafeGenericCallback<Void> {\n \n     static final Logger LOG = LoggerFactory.getLogger(LedgerDeleteOp.class);\n \n@@ -52,6 +52,7 @@\n      *            optional control object\n      */\n     LedgerDeleteOp(BookKeeper bk, long ledgerId, DeleteCallback cb, Object ctx) {\n+        super(bk.mainWorkerPool, ledgerId);\n         this.bk = bk;\n         this.ledgerId = ledgerId;\n         this.cb = cb;\n@@ -70,8 +71,8 @@ public void initiate() {\n     /**\n      * Implements Delete Callback.\n      */\n-    public void operationComplete(int rc, Void result) {\n+    @Override\n+    public void safeOperationComplete(int rc, Void result) {\n         cb.deleteComplete(rc, this.ctx);\n     }\n-\n }"},{"sha":"3f386a057ebf1ba95389cecfbef5603ad3a90928","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java?ref=4f2b11213baf8551ef778599b14a6fc17d95f21d","patch":"@@ -30,6 +30,8 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n+\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException.Code;\n import org.jboss.netty.buffer.ChannelBuffer;\n@@ -261,9 +263,10 @@ public void operationComplete(int rc, Void result) {\n                     // will have updated the stat\n                     // other operations such as (addEnsemble) would update it\n                     // too.\n-                    lh.rereadMetadata(new GenericCallback<LedgerMetadata>() {\n+                    lh.rereadMetadata(new OrderedSafeGenericCallback<LedgerMetadata>(lh.bk.mainWorkerPool,\n+                                                                                     lh.getId()) {\n                         @Override\n-                        public void operationComplete(int rc,\n+                        public void safeOperationComplete(int rc,\n                                 LedgerMetadata newMeta) {\n                             if (rc != BKException.Code.OK) {\n                                 LOG"},{"sha":"650e2994381398118f7c3ad6cf55dfcf381411b1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":37,"deletions":34,"changes":71,"blob_url":"https://github.com/apache/bookkeeper/blob/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=4f2b11213baf8551ef778599b14a6fc17d95f21d","patch":"@@ -40,6 +40,8 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n+\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.State;\n import org.apache.bookkeeper.util.SafeRunnable;\n@@ -284,13 +286,18 @@ public void safeRun() {\n                               + metadata.getLastEntryId() + \" with this many bytes: \" + metadata.getLength());\n                 }\n \n-                final class CloseCb implements GenericCallback<Void> {\n+                final class CloseCb extends OrderedSafeGenericCallback<Void> {\n+                    CloseCb() {\n+                        super(bk.mainWorkerPool, ledgerId);\n+                    }\n+\n                     @Override\n-                    public void operationComplete(final int rc, Void result) {\n+                    public void safeOperationComplete(final int rc, Void result) {\n                         if (rc == BKException.Code.MetadataVersionException) {\n-                            rereadMetadata(new GenericCallback<LedgerMetadata>() {\n+                            rereadMetadata(new OrderedSafeGenericCallback<LedgerMetadata>(bk.mainWorkerPool,\n+                                                                                          ledgerId) {\n                                 @Override\n-                                public void operationComplete(int newrc, LedgerMetadata newMeta) {\n+                                public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                                     if (newrc != BKException.Code.OK) {\n                                         LOG.error(\"Error reading new metadata from ledger \" + ledgerId\n                                                   + \" when closing, code=\" + newrc);\n@@ -714,56 +721,51 @@ public EnsembleInfo(ArrayList<InetSocketAddress> newEnsemble,\n      * reformed ensemble. On MetadataVersionException, will reread latest\n      * ledgerMetadata and act upon.\n      */\n-    private final class ChangeEnsembleCb implements GenericCallback<Void> {\n+    private final class ChangeEnsembleCb extends OrderedSafeGenericCallback<Void> {\n         private final EnsembleInfo ensembleInfo;\n \n         ChangeEnsembleCb(EnsembleInfo ensembleInfo) {\n+            super(bk.mainWorkerPool, ledgerId);\n             this.ensembleInfo = ensembleInfo;\n         }\n \n         @Override\n-        public void operationComplete(final int rc, Void result) {\n-\n-            bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {\n-                @Override\n-                public void safeRun() {\n-                    if (rc == BKException.Code.MetadataVersionException) {\n-                        rereadMetadata(new ReReadLedgerMetadataCb(rc,\n-                                ensembleInfo));\n-                        return;\n-                    } else if (rc != BKException.Code.OK) {\n-                        LOG.error(\"Could not persist ledger metadata while \"\n-                                + \"changing ensemble to: \"\n-                                + ensembleInfo.newEnsemble\n-                                + \" , closing ledger\");\n-                        handleUnrecoverableErrorDuringAdd(rc);\n-                        return;\n-                    }\n-                    blockAddCompletions.decrementAndGet();\n+        public void safeOperationComplete(final int rc, Void result) {\n+            if (rc == BKException.Code.MetadataVersionException) {\n+                rereadMetadata(new ReReadLedgerMetadataCb(rc,\n+                                       ensembleInfo));\n+                return;\n+            } else if (rc != BKException.Code.OK) {\n+                LOG.error(\"Could not persist ledger metadata while \"\n+                          + \"changing ensemble to: \"\n+                          + ensembleInfo.newEnsemble\n+                          + \" , closing ledger\");\n+                handleUnrecoverableErrorDuringAdd(rc);\n+                return;\n+            }\n+            blockAddCompletions.decrementAndGet();\n \n-                    // the failed bookie has been replaced\n-                    unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);\n-                }\n-            });\n+            // the failed bookie has been replaced\n+            unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);\n         }\n     };\n \n     /**\n      * Callback which is reading the ledgerMetadata present in zk. This will try\n      * to resolve the version conflicts.\n      */\n-    private final class ReReadLedgerMetadataCb implements\n-            GenericCallback<LedgerMetadata> {\n+    private final class ReReadLedgerMetadataCb extends OrderedSafeGenericCallback<LedgerMetadata> {\n         private final int rc;\n         private final EnsembleInfo ensembleInfo;\n \n         ReReadLedgerMetadataCb(int rc, EnsembleInfo ensembleInfo) {\n+            super(bk.mainWorkerPool, ledgerId);\n             this.rc = rc;\n             this.ensembleInfo = ensembleInfo;\n         }\n \n         @Override\n-        public void operationComplete(int newrc, LedgerMetadata newMeta) {\n+        public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n             if (newrc != BKException.Code.OK) {\n                 LOG.error(\"Error reading new metadata from ledger \"\n                         + \"after changing ensemble, code=\" + newrc);\n@@ -858,13 +860,14 @@ synchronized void recover(final GenericCallback<Void> cb) {\n \n         metadata.markLedgerInRecovery();\n \n-        writeLedgerConfig(new GenericCallback<Void>() {\n+        writeLedgerConfig(new OrderedSafeGenericCallback<Void>(bk.mainWorkerPool, ledgerId) {\n             @Override\n-            public void operationComplete(final int rc, Void result) {\n+            public void safeOperationComplete(final int rc, Void result) {\n                 if (rc == BKException.Code.MetadataVersionException) {\n-                    rereadMetadata(new GenericCallback<LedgerMetadata>() {\n+                    rereadMetadata(new OrderedSafeGenericCallback<LedgerMetadata>(bk.mainWorkerPool,\n+                                                                                  ledgerId) {\n                         @Override\n-                        public void operationComplete(int rc, LedgerMetadata newMeta) {\n+                        public void safeOperationComplete(int rc, LedgerMetadata newMeta) {\n                             if (rc != BKException.Code.OK) {\n                                 cb.operationComplete(rc, null);\n                             } else {"},{"sha":"61d26b14bc10afb992dae28106a210e30d03d5c3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=4f2b11213baf8551ef778599b14a6fc17d95f21d","patch":"@@ -28,6 +28,7 @@\n import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -155,9 +156,9 @@ public void operationComplete(int rc, LedgerMetadata metadata) {\n         }\n \n         if (doRecovery) {\n-            lh.recover(new GenericCallback<Void>() {\n+            lh.recover(new OrderedSafeGenericCallback<Void>(bk.mainWorkerPool, ledgerId) {\n                     @Override\n-                    public void operationComplete(int rc, Void result) {\n+                    public void safeOperationComplete(int rc, Void result) {\n                         if (rc == BKException.Code.OK) {\n                             cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);\n                         } else if (rc == BKException.Code.UnauthorizedAccessException) {"},{"sha":"686b72a40cba847dccb71854d00b6e0f1a1813a0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","raw_url":"https://github.com/apache/bookkeeper/raw/4f2b11213baf8551ef778599b14a6fc17d95f21d/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java?ref=4f2b11213baf8551ef778599b14a6fc17d95f21d","patch":"@@ -23,6 +23,8 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n \n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+\n /**\n  * This class provides 2 things over the java {@link ScheduledExecutorService}.\n  *\n@@ -95,4 +97,35 @@ public void shutdown() {\n         }\n     }\n \n+    /**\n+     * Generic callback implementation which will run the\n+     * callback in the thread which matches the ordering key\n+     */\n+    public static abstract class OrderedSafeGenericCallback<T>\n+            implements GenericCallback<T> {\n+        private final OrderedSafeExecutor executor;\n+        private final Object orderingKey;\n+\n+        /**\n+         * @param executor The executor on which to run the callback\n+         * @param orderingKey Key used to decide which thread the callback\n+         *                    should run on.\n+         */\n+        public OrderedSafeGenericCallback(OrderedSafeExecutor executor, Object orderingKey) {\n+            this.executor = executor;\n+            this.orderingKey = orderingKey;\n+        }\n+\n+        @Override\n+        public final void operationComplete(final int rc, final T result) {\n+            executor.submitOrdered(orderingKey, new SafeRunnable() {\n+                    @Override\n+                    public void safeRun() {\n+                        safeOperationComplete(rc, result);\n+                    }\n+                });\n+        }\n+\n+        public abstract void safeOperationComplete(int rc, T result);\n+    }\n }"}]}

