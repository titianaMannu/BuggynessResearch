{"sha":"504369377af29b6d09a801243ead58805784765a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1MDQzNjkzNzdhZjI5YjZkMDlhODAxMjQzZWFkNTg4MDU3ODQ3NjVh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T16:54:10Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T16:54:10Z"},"message":"BOOKKEEPER-385: replicateLedgerFragment should throw Exceptions in error conditions (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1380293 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d315fcd5958a31055df7b61393a6626a41d4ef29","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d315fcd5958a31055df7b61393a6626a41d4ef29"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/504369377af29b6d09a801243ead58805784765a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/504369377af29b6d09a801243ead58805784765a","html_url":"https://github.com/apache/bookkeeper/commit/504369377af29b6d09a801243ead58805784765a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/504369377af29b6d09a801243ead58805784765a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d169f8843e819e7ef49c1fdfe69a85308f420a4a","url":"https://api.github.com/repos/apache/bookkeeper/commits/d169f8843e819e7ef49c1fdfe69a85308f420a4a","html_url":"https://github.com/apache/bookkeeper/commit/d169f8843e819e7ef49c1fdfe69a85308f420a4a"}],"stats":{"total":50,"additions":27,"deletions":23},"files":[{"sha":"649cff1b61a1ffa6de727318df1a4ca6f6277f3d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/504369377af29b6d09a801243ead58805784765a/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/504369377af29b6d09a801243ead58805784765a/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=504369377af29b6d09a801243ead58805784765a","patch":"@@ -72,6 +72,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-384: Clean up LedgerManagerFactory and LedgerManager usage in tests (rakeshr via ivank)\n \n+        BOOKKEEPER-385: replicateLedgerFragment should throw Exceptions in error conditions (umamahesh via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"93dc1cb659469660f20afd5a1b6f259efd8468b4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":7,"deletions":16,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/504369377af29b6d09a801243ead58805784765a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/504369377af29b6d09a801243ead58805784765a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=504369377af29b6d09a801243ead58805784765a","patch":"@@ -659,11 +659,11 @@ private void asyncRecoverLedgerFragment(final LedgerHandle lh,\n      *            - LedgerFragment to replicate\n      * @param targetBookieAddress\n      *            - target Bookie, to where entries should be replicated.\n-     * @return true - if replication success, false if fails to replicate.\n      */\n-    public boolean replicateLedgerFragment(LedgerHandle lh,\n+    public void replicateLedgerFragment(LedgerHandle lh,\n             final LedgerFragment ledgerFragment,\n-            InetSocketAddress targetBookieAddress) throws InterruptedException {\n+            InetSocketAddress targetBookieAddress) throws InterruptedException,\n+            BKException {\n         final SyncCounter syncCounter = new SyncCounter();\n         ResultCallBack resultCallBack = new ResultCallBack(syncCounter);\n         SingleFragmentCallback sfcb = new SingleFragmentCallback(\n@@ -672,31 +672,22 @@ public boolean replicateLedgerFragment(LedgerHandle lh,\n         syncCounter.inc();\n         lfr.replicate(lh, ledgerFragment, sfcb, targetBookieAddress);\n         syncCounter.block(0);\n-        return resultCallBack.getResult();\n+        if (syncCounter.getrc() != BKException.Code.OK) {\n+            throw BKException.create(syncCounter.getrc());\n+        }\n     }\n \n     /** This is the class for getting the replication result */\n     static class ResultCallBack implements AsyncCallback.VoidCallback {\n-\n-        private boolean result;\n         private SyncCounter sync;\n \n-        public boolean getResult() {\n-            return this.result;\n-        }\n-\n         public ResultCallBack(SyncCounter sync) {\n             this.sync = sync;\n         }\n \n         @Override\n         public void processResult(int rc, String s, Object obj) {\n-\n-            if (rc != BKException.Code.OK) {\n-                this.result = false;\n-            } else {\n-                this.result = true;\n-            }\n+            sync.setrc(rc);\n             sync.dec();\n         }\n     }"},{"sha":"0a509a04fc7d89d31077f86b405655e3214cc76d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/504369377af29b6d09a801243ead58805784765a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/504369377af29b6d09a801243ead58805784765a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=504369377af29b6d09a801243ead58805784765a","patch":"@@ -180,9 +180,10 @@ public void run() {\n      *         ensemble, it will skip replication for that particular\n      *         fragments). Returns true if all fragments replicated\n      *         successfully.\n+     * @throws BKException \n      */\n     private boolean doReplicateFragments(long ledgerIdToReplicate,\n-            LedgerHandle lh) throws InterruptedException {\n+            LedgerHandle lh) throws InterruptedException, BKException {\n         CheckerCallback checkerCb = new CheckerCallback();\n         ledgerChecker.checkLedger(lh, checkerCb);\n         Set<LedgerFragment> fragments = checkerCb.waitAndGetResult();\n@@ -198,11 +199,18 @@ private boolean doReplicateFragments(long ledgerIdToReplicate,\n                 isTargetBookieExistsInFragmentEnsemble = true;\n                 continue;\n             }\n-            boolean isFragmentReplicated = admin.replicateLedgerFragment(lh,\n-                    ledgerFragment, targetBookie);\n-            if (!isFragmentReplicated) {\n+            try {\n+                admin.replicateLedgerFragment(lh, ledgerFragment, targetBookie);\n+            } catch (BKException.BKBookieHandleNotAvailableException e) {\n+                LOG.warn(\"BKBookieHandleNotAvailableException \"\n+                        + \"while replicating the fragment\", e);\n+                isAllFragmentsReplicated = false;\n+            } catch (BKException.BKLedgerRecoveryException e) {\n+                LOG.warn(\"BKLedgerRecoveryException \"\n+                        + \"while replicating the fragment\", e);\n                 isAllFragmentsReplicated = false;\n             }\n+\n         }\n         if (isTargetBookieExistsInFragmentEnsemble) {\n             LOG.info(\"Releasing the lock, as target Bookie found\""},{"sha":"434290d45e9772102acc45031f4d72f074e067c2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/504369377af29b6d09a801243ead58805784765a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","raw_url":"https://github.com/apache/bookkeeper/raw/504369377af29b6d09a801243ead58805784765a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java?ref=504369377af29b6d09a801243ead58805784765a","patch":"@@ -99,7 +99,7 @@ public void testReplicateLFShouldCopyFailedBookieFragmentsToTargetBookie()\n         // 0-9 entries should be copy to new bookie\n         \n         for (LedgerFragment lf : result) {\n-            assertTrue(admin.replicateLedgerFragment(lh, lf, newBkAddr));\n+            admin.replicateLedgerFragment(lh, lf, newBkAddr);\n         }\n \n         // Killing all bookies except newly replicated bookie\n@@ -157,8 +157,11 @@ public void testReplicateLFShouldReturnFalseIfTheReplicationFails()\n         InetSocketAddress additionalBK = new InetSocketAddress(InetAddress\n                 .getLocalHost().getHostAddress(), startNewBookie);\n         for (LedgerFragment lf : fragments) {\n-            assertFalse(\"Replication should fail\", admin\n-                    .replicateLedgerFragment(lh, lf, additionalBK));\n+            try {\n+                admin.replicateLedgerFragment(lh, lf, additionalBK);\n+            } catch (BKException.BKLedgerRecoveryException e) {\n+                // expected\n+            }\n         }\n     }\n "}]}

