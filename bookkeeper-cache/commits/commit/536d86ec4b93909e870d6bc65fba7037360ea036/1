{"sha":"536d86ec4b93909e870d6bc65fba7037360ea036","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1MzZkODZlYzRiOTM5MDllODcwZDZiYzY1ZmJhNzAzNzM2MGVhMDM2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-10-26T14:25:47Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-10-26T14:25:47Z"},"message":"BOOKKEEPER-425: Cleanup Bookie id generation (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402526 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d091bfe78e7bd20c61c663dc42daa73f282571bd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d091bfe78e7bd20c61c663dc42daa73f282571bd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/536d86ec4b93909e870d6bc65fba7037360ea036","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/536d86ec4b93909e870d6bc65fba7037360ea036","html_url":"https://github.com/apache/bookkeeper/commit/536d86ec4b93909e870d6bc65fba7037360ea036","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/536d86ec4b93909e870d6bc65fba7037360ea036/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2","url":"https://api.github.com/repos/apache/bookkeeper/commits/223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2","html_url":"https://github.com/apache/bookkeeper/commit/223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2"}],"stats":{"total":117,"additions":61,"deletions":56},"files":[{"sha":"a5615d809b758b4e81875ba9e8b0c43d5a1373a1","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -100,6 +100,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-416: LedgerChecker returns underreplicated fragments for an closed ledger with no entries (ivank)\n \n+\tBOOKKEEPER-425: Cleanup Bookie id generation (ivank via fpj)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"929be516b04ef257ba94974efcfdcd714716febc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -51,6 +51,7 @@\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n@@ -359,6 +360,15 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n         }\n     }\n \n+    /**\n+     * Return the configured address of the bookie.\n+     */\n+    public static InetSocketAddress getBookieAddress(ServerConfiguration conf)\n+            throws UnknownHostException {\n+        return new InetSocketAddress(InetAddress.getLocalHost()\n+                .getHostAddress(), conf.getBookiePort());\n+    }\n+\n     private String getInstanceId(ZooKeeper zk) throws KeeperException,\n             InterruptedException {\n         String instanceId = null;\n@@ -489,7 +499,7 @@ synchronized public void start() {\n         // if setting it in bookie thread, the watcher might run before bookie thread.\n         running = true;\n         try {\n-            registerBookie(conf.getBookiePort());\n+            registerBookie(conf);\n         } catch (IOException e) {\n             LOG.error(\"Couldn't register bookie with zookeeper, shutting down\", e);\n             shutdown(ExitCode.ZK_REG_FAIL);\n@@ -590,11 +600,15 @@ private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf)\n     /**\n      * Register as an available bookie\n      */\n-    protected void registerBookie(int port) throws IOException {\n+    protected void registerBookie(ServerConfiguration conf) throws IOException {\n         if (null == zk) {\n             // zookeeper instance is null, means not register itself to zk\n             return;\n         }\n+\n+        // ZK ephemeral node for this Bookie.\n+        String zkBookieRegPath = this.bookieRegistrationPath\n+            + StringUtils.addrToString(getBookieAddress(conf));\n         final CountDownLatch prevNodeLatch = new CountDownLatch(1);\n         try{\n             Watcher zkPrevRegNodewatcher = new Watcher() {"},{"sha":"db306ba685d366bc679cc90ac98bea3cf9f76c11","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -39,6 +39,7 @@\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n+import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.DataFormats.CookieFormat;\n \n@@ -206,7 +207,7 @@ static Cookie generateCookie(ServerConfiguration conf)\n             throws UnknownHostException {\n         Cookie c = new Cookie();\n         c.layoutVersion = CURRENT_COOKIE_LAYOUT_VERSION;\n-        c.bookieHost = InetAddress.getLocalHost().getHostAddress() + \":\" + conf.getBookiePort();\n+        c.bookieHost = StringUtils.addrToString(Bookie.getBookieAddress(conf));\n         c.journalDir = conf.getJournalDirName();\n         StringBuilder b = new StringBuilder();\n         String[] dirs = conf.getLedgerDirNames();\n@@ -252,6 +253,6 @@ public void setInstanceId(String instanceId) {\n     private static String getZkPath(ServerConfiguration conf)\n             throws UnknownHostException {\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\" + COOKIE_NODE;\n-        return bookieCookiePath + \"/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + conf.getBookiePort();\n+        return bookieCookiePath + \"/\" + StringUtils.addrToString(Bookie.getBookieAddress(conf));\n     }\n }"},{"sha":"f6a817b8a6c00964d38952f90944a3bee21bee5d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -256,7 +256,7 @@ long getNextEnsembleChange(long entryId) {\n             s.append(lSplitter).append(entry.getKey());\n             for (InetSocketAddress addr : entry.getValue()) {\n                 s.append(tSplitter);\n-                StringUtils.addrToString(s, addr);\n+                s.append(StringUtils.addrToString(addr));\n             }\n         }\n "},{"sha":"5d7082ad92b633678b6a915cab82799735107013","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -98,7 +98,7 @@ public void start() throws IOException {\n \n     public InetSocketAddress getLocalAddress() {\n         try {\n-            return new InetSocketAddress(InetAddress.getLocalHost().getHostAddress(), conf.getBookiePort());\n+            return Bookie.getBookieAddress(conf);\n         } catch (UnknownHostException uhe) {\n             return nioServerFactory.getLocalAddress();\n         }"},{"sha":"fded415352f029e15d90fc4133fd948343f97b8e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -21,6 +21,8 @@\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n+import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.proto.BKStats;\n@@ -80,8 +82,7 @@ public String getServerState() {\n     @Override\n     public String getServerPort() {\n         try {\n-            return InetAddress.getLocalHost().getHostAddress() + \":\"\n-                    + conf.getBookiePort();\n+            return StringUtils.addrToString(Bookie.getBookieAddress(conf));\n         } catch (UnknownHostException e) {\n             return \"localhost:\" + conf.getBookiePort();\n         }"},{"sha":"7a7bff63536f0c3f4993853db964be9057021253","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -25,13 +25,14 @@\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.MalformedURLException;\n-import java.net.UnknownHostException;\n \n+import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.ExitCode;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.CommandLine;\n@@ -80,18 +81,12 @@ public void process(WatchedEvent event) {\n         };\n         zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n         auditorElector = new AuditorElector(\n-                getMyBookieAddress(conf).toString(), conf, zk);\n+                StringUtils.addrToString(Bookie.getBookieAddress(conf)), conf, zk);\n         replicationWorker = new ReplicationWorker(zk, conf,\n-                getMyBookieAddress(conf));\n+                Bookie.getBookieAddress(conf));\n         deathWatcher = new AutoRecoveryDeathWatcher(this);\n     }\n \n-    private static InetSocketAddress getMyBookieAddress(ServerConfiguration conf)\n-            throws UnknownHostException {\n-        return new InetSocketAddress(InetAddress.getLocalHost()\n-                .getHostAddress(), conf.getBookiePort());\n-    }\n-\n     /*\n      * Start daemons\n      */"},{"sha":"a6fca3e7131cd028f1c17bbb0527202f7e55e892","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -80,11 +80,9 @@ public void operationComplete(final int rc,\n                                     .getEnsembles().entrySet()) {\n                                 for (InetSocketAddress bookie : ensemble\n                                         .getValue()) {\n-                                    bookieAddr = new StringBuilder();\n-                                    StringUtils\n-                                            .addrToString(bookieAddr, bookie);\n-                                    putLedger(bookie2ledgersMap, bookieAddr\n-                                            .toString(), ledgerId);\n+                                    putLedger(bookie2ledgersMap,\n+                                              StringUtils.addrToString(bookie),\n+                                              ledgerId);\n                                 }\n                             }\n                         } else {"},{"sha":"575e48035f3ecf8bfb8c2326081e61d3e6b5cd1a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -20,6 +20,8 @@\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n \n /**\n  * Provided utilites for parsing network addresses, ledger-id from node paths\n@@ -52,8 +54,8 @@ public static InetSocketAddress parseAddr(String s) throws IOException {\n         return addr;\n     }\n \n-    public static StringBuilder addrToString(StringBuilder sb, InetSocketAddress addr) {\n-        return sb.append(addr.getAddress().getHostAddress()).append(\":\").append(addr.getPort());\n+    public static String addrToString(InetSocketAddress addr) {\n+        return addr.getAddress().getHostAddress() + \":\" + addr.getPort();\n     }\n \n     /**"},{"sha":"14517e3451d80ccac83e75f745485dd1daa42979","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -79,8 +79,8 @@ public void tearDownZooKeeper() throws Exception {\n             super(conf);\n         }\n \n-        void testRegisterBookie(int port) throws IOException {\n-            super.registerBookie(port);\n+        void testRegisterBookie(ServerConfiguration conf) throws IOException {\n+            super.registerBookie(conf);\n         }\n     }\n \n@@ -105,7 +105,7 @@ public void testBookieRegistration() throws Exception {\n \n         MockBookie b = new MockBookie(conf);\n         b.zk = zkc;\n-        b.testRegisterBookie(conf.getBookiePort());\n+        b.testRegisterBookie(conf);\n         Stat bkRegNode1 = zkc.exists(bkRegPath, false);\n         Assert.assertNotNull(\"Bookie registration node doesn't exists!\",\n                 bkRegNode1);\n@@ -130,7 +130,7 @@ public void run() {\n             }\n         }.start();\n         try {\n-            b.testRegisterBookie(conf.getBookiePort());\n+            b.testRegisterBookie(conf);\n         } catch (IOException e) {\n             Throwable t = e.getCause();\n             if (t instanceof KeeperException) {\n@@ -171,7 +171,7 @@ public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n \n         MockBookie b = new MockBookie(conf);\n         b.zk = zkc;\n-        b.testRegisterBookie(conf.getBookiePort());\n+        b.testRegisterBookie(conf);\n         Stat bkRegNode1 = zkc.exists(bkRegPath, false);\n         Assert.assertNotNull(\"Bookie registration node doesn't exists!\",\n                 bkRegNode1);\n@@ -181,7 +181,7 @@ public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n         createNewZKClient();\n         b.zk = newzk;\n         try {\n-            b.testRegisterBookie(conf.getBookiePort());\n+            b.testRegisterBookie(conf);\n             fail(\"Should throw NodeExistsException as the znode is not getting expired\");\n         } catch (IOException e) {\n             Throwable t = e.getCause();"},{"sha":"7309e155204675ab751e8790e77199633f86cbd1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"modified","additions":10,"deletions":15,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -158,8 +158,7 @@ public void testShutdown() throws Exception {\n         for (String child : children) {\n             byte[] data = zkc.getData(electionPath + '/' + child, false, null);\n             String bookieIP = new String(data);\n-            StringBuilder addr = new StringBuilder();\n-            StringUtils.addrToString(addr, auditor.getLocalAddress());\n+            String addr = StringUtils.addrToString(auditor.getLocalAddress());\n             Assert.assertFalse(\"AuditorElection cleanup fails\", bookieIP\n                     .contains(addr));\n         }\n@@ -184,10 +183,9 @@ public void testRestartAuditorBookieAfterCrashing() throws Exception {\n         tmpDirs.remove(indexOfDownBookie);\n         startBookie(serverConfiguration);\n         // starting corresponding auditor elector\n-        StringBuilder sb = new StringBuilder();\n-        StringUtils.addrToString(sb, auditor.getLocalAddress());\n-        LOG.debug(\"Performing Auditor Election:\" + sb.toString());\n-        auditorElectors.get(sb.toString()).doElection();\n+        String addr = StringUtils.addrToString(auditor.getLocalAddress());\n+        LOG.debug(\"Performing Auditor Election:\" + addr);\n+        auditorElectors.get(addr).doElection();\n \n         // waiting for new auditor to come\n         BookieServer newAuditor = waitForNewAuditor(auditor);\n@@ -201,12 +199,10 @@ public void testRestartAuditorBookieAfterCrashing() throws Exception {\n \n     private void startAuditorElectors() throws UnavailableException {\n         for (BookieServer bserver : bs) {\n-            StringBuilder sb = new StringBuilder();\n-            StringBuilder addr = StringUtils.addrToString(sb, bserver\n-                    .getLocalAddress());\n-            AuditorElector auditorElector = new AuditorElector(addr.toString(),\n+            String addr = StringUtils.addrToString(bserver.getLocalAddress());\n+            AuditorElector auditorElector = new AuditorElector(addr,\n                     baseClientConf, zkc);\n-            auditorElectors.put(addr.toString(), auditorElector);\n+            auditorElectors.put(addr, auditorElector);\n             auditorElector.doElection();\n             LOG.debug(\"Starting Auditor Elector\");\n         }\n@@ -242,14 +238,13 @@ private BookieServer verifyAuditor() throws KeeperException,\n     }\n \n     private void shudownBookie(BookieServer bkServer) {\n-        StringBuilder sb = new StringBuilder();\n-        StringUtils.addrToString(sb, bkServer.getLocalAddress());\n-        LOG.debug(\"Shutting down bookie:\" + sb.toString());\n+        String addr = StringUtils.addrToString(bkServer.getLocalAddress());\n+        LOG.debug(\"Shutting down bookie:\" + addr);\n \n         // shutdown bookie which is an auditor\n         bkServer.shutdown();\n         // stopping corresponding auditor elector\n-        auditorElectors.get(sb.toString()).shutdown();\n+        auditorElectors.get(addr).shutdown();\n     }\n \n     private BookieServer waitForNewAuditor(BookieServer auditor)"},{"sha":"9f3f201e3c7c5ba779b9ee9a03a944872a7492ad","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/536d86ec4b93909e870d6bc65fba7037360ea036/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=536d86ec4b93909e870d6bc65fba7037360ea036","patch":"@@ -109,12 +109,10 @@ public void tearDown() throws Exception {\n \n     private void startAuditorElectors() throws UnavailableException {\n         for (BookieServer bserver : bs) {\n-            StringBuilder sb = new StringBuilder();\n-            StringBuilder addr = StringUtils.addrToString(sb, bserver\n-                    .getLocalAddress());\n-            AuditorElector auditorElector = new AuditorElector(addr.toString(),\n+            String addr = StringUtils.addrToString(bserver.getLocalAddress());\n+            AuditorElector auditorElector = new AuditorElector(addr,\n                     baseClientConf, zkc);\n-            auditorElectors.put(addr.toString(), auditorElector);\n+            auditorElectors.put(addr, auditorElector);\n             auditorElector.doElection();\n             LOG.debug(\"Starting Auditor Elector\");\n         }\n@@ -303,14 +301,13 @@ private void doLedgerRereplication(long ledgerId)\n \n     private String shutdownBookie(int bkShutdownIndex) throws IOException,\n             InterruptedException {\n-        StringBuilder bookieAddr = new StringBuilder();\n         BookieServer bkServer = bs.get(bkShutdownIndex);\n-        StringUtils.addrToString(bookieAddr, bkServer.getLocalAddress());\n-        LOG.debug(\"Shutting down bookie:\" + bookieAddr.toString());\n+        String bookieAddr = StringUtils.addrToString(bkServer.getLocalAddress());\n+        LOG.debug(\"Shutting down bookie:\" + bookieAddr);\n         killBookie(bkShutdownIndex);\n-        auditorElectors.get(bookieAddr.toString()).shutdown();\n-        auditorElectors.remove(bookieAddr.toString());\n-        return bookieAddr.toString();\n+        auditorElectors.get(bookieAddr).shutdown();\n+        auditorElectors.remove(bookieAddr);\n+        return bookieAddr;\n     }\n \n     private LedgerHandle createAndAddEntriesToLedger() throws BKException,"}]}

