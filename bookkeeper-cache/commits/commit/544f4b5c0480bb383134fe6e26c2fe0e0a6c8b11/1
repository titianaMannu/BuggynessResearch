{"sha":"544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NDRmNGI1YzA0ODBiYjM4MzEzNGZlNmUyNmMyZmUwZTBhNmM4YjEx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-29T22:55:24Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-29T22:55:24Z"},"message":"BOOKKEEPER-122: Review BookKeeper server documentation (fpj & ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1208123 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ee6d31ea6c536877d86843ea312f6a840ef8c75","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5ee6d31ea6c536877d86843ea312f6a840ef8c75"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","html_url":"https://github.com/apache/bookkeeper/commit/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e3b52e82ccccf4807100db0950609ec7ede8378c","url":"https://api.github.com/repos/apache/bookkeeper/commits/e3b52e82ccccf4807100db0950609ec7ede8378c","html_url":"https://github.com/apache/bookkeeper/commit/e3b52e82ccccf4807100db0950609ec7ede8378c"}],"stats":{"total":192,"additions":71,"deletions":121},"files":[{"sha":"cd57d844aa13ed890a22231a992f566b9870ce68","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -15,6 +15,8 @@ BUGFIXES:\n  BOOKKEEPER-127: Make poms use official zookeeper 3.4.0 (ivank)\n \n  BOOKKEEPER-120: Review BookKeeper client documentation (ivank)\n+ \n+ BOOKKEEPER-122: Review BookKeeper server documentation (fpj & ivank)\n \n  bookkeeper-server/\n "},{"sha":"d005d01df64c51344a2a9b35d822f64f3af75a6c","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/conf/bk_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/conf/bk_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bk_server.conf?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -40,7 +40,7 @@ ledgerDirectories=/tmp/bk-data\n \n # Ledger Manager Class\n # What kind of ledger manager is used to manage how ledgers are stored, managed\n-# and garbage collected. Try to read 'BookKeeper Overview' for detail info.\n+# and garbage collected. Try to read 'BookKeeper Internals' for detail info.\n # ledgerManagerType=flat\n \n # Root zookeeper path to store ledger metadata"},{"sha":"795bbcea21e0baa16aa1d5bddd2666caf21e9ed8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -26,8 +26,8 @@\n          *\n          * @param rc\n          *          return code\n-         * @param ledgerId\n-         *          ledger identifier\n+         * @param lh\n+         *          ledger handle\n          * @param entryId\n          *          entry identifier\n          * @param ctx\n@@ -42,8 +42,8 @@\n          *\n          * @param rc\n          *          return code\n-         * @param ledgerId\n-         *          ledger identifier\n+         * @param lh\n+         *          ledger handle\n          * @param ctx\n          *          control object\n          */\n@@ -87,8 +87,8 @@\n          *\n          * @param rc\n          *          return code\n-         * @param ledgerId\n-         *          ledger identifier\n+         * @param lh\n+         *          ledger handle\n          * @param seq\n          *          sequence of entries\n          * @param ctx"},{"sha":"5bb37c3c21838f1d7e58c04c1e22894a4b27f271","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -251,7 +251,7 @@ public void asyncCreateLedger(int ensSize, int qSize, DigestType digestType,\n      *          digest type, either MAC or CRC32\n      * @param passwd\n      *          password\n-     * @return\n+     * @return a handle to the newly created ledger\n      * @throws InterruptedException\n      * @throws BKException\n      */\n@@ -262,13 +262,14 @@ public LedgerHandle createLedger(DigestType digestType, byte passwd[])\n \n     /**\n      * Synchronous call to create ledger. Parameters match those of\n-     * {@link #asyncCreateLedger(int, int, DigestType, byte[], CreateCallback, Object)}\n+     * {@link #asyncCreateLedger(int, int, DigestType, byte[], \n+     *                           AsyncCallback.CreateCallback, Object)}\n      *\n      * @param ensSize\n      * @param qSize\n      * @param digestType\n      * @param passwd\n-     * @return\n+     * @return a handle to the newly created ledger\n      * @throws InterruptedException\n      * @throws BKException\n      */\n@@ -369,7 +370,7 @@ public void asyncOpenLedgerNoRecovery(long lId, DigestType digestType, byte pass\n      *          digest type, either MAC or CRC32\n      * @param passwd\n      *          password\n-     * @return\n+     * @return a handle to the open ledger\n      * @throws InterruptedException\n      * @throws BKException\n      */\n@@ -404,7 +405,7 @@ public LedgerHandle openLedger(long lId, DigestType digestType, byte passwd[])\n      *          digest type, either MAC or CRC32\n      * @param passwd\n      *          password\n-     * @return\n+     * @return a handle to the open ledger\n      * @throws InterruptedException\n      * @throws BKException\n      */\n@@ -447,7 +448,7 @@ public void asyncDeleteLedger(long lId, DeleteCallback cb, Object ctx) {\n \n     /**\n      * Synchronous call to delete a ledger. Parameters match those of\n-     * {@link #asyncDeleteLedger(long, DeleteCallback, Object)}\n+     * {@link #asyncDeleteLedger(long, AsyncCallback.DeleteCallback, Object)}\n      *\n      * @param lId\n      *            ledgerId"},{"sha":"8de20c9baa96d5c8521ac7d29586cd37011ea4d0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -100,7 +100,7 @@\n     /**\n      * Get the id of the current ledger\n      *\n-     * @return\n+     * @return the id of the ledger\n      */\n     public long getId() {\n         return ledgerId;\n@@ -109,7 +109,7 @@ public long getId() {\n     /**\n      * Get the last confirmed entry id on this ledger\n      *\n-     * @return\n+     * @return the last confirmed entry id\n      */\n     public long getLastAddConfirmed() {\n         return lastAddConfirmed;\n@@ -119,7 +119,7 @@ public long getLastAddConfirmed() {\n      * Get the entry id of the last entry that has been enqueued for addition (but\n      * may not have possibly been persited to the ledger)\n      *\n-     * @return\n+     * @return the id of the last entry pushed\n      */\n     public long getLastAddPushed() {\n         return lastAddPushed;\n@@ -175,7 +175,7 @@ long addToLength(long delta) {\n     /**\n      * Returns the length of the ledger in bytes.\n      *\n-     * @return\n+     * @return the length of the ledger in bytes\n      */\n     public long getLength() {\n         return this.length;"},{"sha":"c353e466f709cc1c18cf0817f12541f4f5818e23","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -133,11 +133,9 @@ long getNextEnsembleChange(long entryId) {\n     }\n \n     /**\n-     * Generates a byte array based on a LedgerConfig object received.\n+     * Generates a byte array of this object\n      *\n-     * @param config\n-     *            LedgerConfig object\n-     * @return byte[]\n+     * @return the metadata serialized into a byte array\n      */\n     public byte[] serialize() {\n         StringBuilder s = new StringBuilder();"},{"sha":"13de05cc065f211e12a2177073db1dded89df10e","filename":"doc/bookkeeperConfig.textile","status":"modified","additions":21,"deletions":81,"changes":102,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/doc/bookkeeperConfig.textile","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/doc/bookkeeperConfig.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperConfig.textile?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -16,102 +16,42 @@ h1. Abstract\n \n This document contains information about deploying, administering and mantaining BookKeeper. It also discusses best practices and common problems. \n \n-As BookKeeper is still a prototype, this article is likely to change significantly over time. \n+h1. Running a BookKeeper instance\n \n-h1. System requirements\n+h2. System requirements\n \n-p. A typical BookKeeper installation comprises a set of bookies and a set of ZooKeeper replicas. The exact number of bookies depends on the quorum mode, desired throughput, and number of clients using this installation simultaneously. The minimum number of bookies is three for self-verifying (stores a message authentication code along with each entry) and four for generic (does not store a message authentication codewith each entry), and there is no upper limit on the number of bookies. Increasing the number of bookies, in fact, enables higher throughput. \n+p. A typical BookKeeper installation comprises a set of bookies and a set of ZooKeeper replicas. The exact number of bookies depends on the quorum mode, desired throughput, and number of clients using this installation simultaneously. The minimum number of bookies is three for self-verifying (stores a message authentication code along with each entry) and four for generic (does not store a message authentication code with each entry), and there is no upper limit on the number of bookies. Increasing the number of bookies will, in fact, enable higher throughput. \n \n-p. For performance, we require each server to have at least two disks. It is possible to run a bookie with a single disk, but performance will be significantly lower in this case. Of course, it works with one disk, but performance is significantly lower. \n+p. For performance, we require each server to have at least two disks. It is possible to run a bookie with a single disk, but performance will be significantly lower in this case.\n \n-p. For ZooKeeper, there is no constraint with respect to the number of replicas. Having a single machine running ZooKeeper in standalone mode is sufficient for BookKeeper. For resilience purposes, it might be a good idea to run ZooKeeper in quorum mode with multiple servers. Please refer to the ZooKeeper documentation for detail on how to configure ZooKeeper with multiple replicas \n+p. For ZooKeeper, there is no constraint with respect to the number of replicas. Having a single machine running ZooKeeper in standalone mode is sufficient for BookKeeper. For resilience purposes, it might be a good idea to run ZooKeeper in quorum mode with multiple servers. Please refer to the ZooKeeper documentation for detail on how to configure ZooKeeper with multiple replicas. \n \n-h1. Running bookies\n+h2. Running bookies\n \n p. To run a bookie, we execute the following command: \n \n- @ bookkeeper-server/bin/bookkeeper bookie\n+@bookkeeper-server/bin/bookkeeper bookie@\n \n-p. The configuration parameters, which can be set in bookkeeper-server/conf/bkenv.sh\n+p. The configuration parameters can be set in bookkeeper-server/conf/bk_server.conf. \n \n-* BOOKIE_PORT: Port number that the bookie listens on; \n-* BOOKIE_ZOOKEEPER: Comma separated list of ZooKeeper servers with a hostname:port format; \n-* BOOKIE_TXN_LOGDIR: Path for Log Device (stores bookie write-ahead log); \n-* BOOKIE_DATA_DIR: Path for Ledger Device (stores ledger entries); \n+The important parameters are:\n+ * @bookiePort@, Port number that the bookie listens on; \n+ * @zkServers@, Comma separated list of ZooKeeper servers with a hostname:port format; \n+ * @journalDir@, Path for Log Device (stores bookie write-ahead log); \n+ * @ledgerDir@, Path for Ledger Device (stores ledger entries); \n \n-p. Ideally, @/path_to_log_device/@ and @/path_to_ledger_device/@ are each in a different device. \n+p. Ideally, @journalDir@ and @ledgerDir@ are each in a different device. See \"BookKeeper Configuration Parameters\":./bookkeeperConfigParams.html for a full list of configuration parameters.\n \n-h1. Bookie Configuration\n \n-p. Bookie server stores its data in multiple ledger directories and its journal files in a journal directory. Ideally, storing journal files in a separate directory than data files would increase throughput and decrease latency.\n+h3. Logging\n \n-h2. Journal Configuration\n+BookKeeper uses \"slf4j\":http://www.slf4j.org for logging, with the log4j bindings enabled by default. To enable logging from a bookie, create a log4j.properties file and point the environment variable BOOKIE_LOG_CONF to the configuration file. The path to the log4j.properties file must be absolute.\n \n-p. Journal directory has one kind of files in it:\n+@export BOOKIE_LOG_CONF=/tmp/log4j.properties@\n+@bookkeeper-server/bin/bookkeeper bookie@\n \n-* {timestamp}.txn - holds transactions executed in the bookie server.\n+h2. Setting up a test ensemble\n \n-p. Before persisting ledger index and data to disk, a bookie ensures that the transaction that represents the update is written to a journal in non-volatile storage. A new journal file is created using current timestamp when a bookie starts or an old journal file reaches its maximum size.\n+Sometimes it is useful to run a ensemble of bookies on your local machine for testing. We provide a utility for doing this. It will set up N bookies, and a zookeeper instance locally. The data on these bookies and of the zookeeper instance are not persisted over restarts, so obviously this should never be used in a production environment. To run a test ensemble of 10 bookies, do the following.\n \n-p. A bookie supports journal rolling to remove old journal files. In order to remove old journal files safely, bookie server records LastLogMark in Ledger Device, which indicates all updates (including index and data) before LastLogMark has been persisted to the Ledger Device.\n-\n-p. LastLogMark contains two parts:\n-\n-* LastLogId - indicates which journal file the transaction persisted.\n-* LastLogPos - indicates the position the transaction persisted in LastLogId journal file.\n-\n-p. You may use following settings to further fine tune the behavior of your Bookie servers. Currently these configuration settings are set using Java system properties.\n-\n-* journalMaxSizeMB\n-** journal file size limitation. when a journal reaches this limitation, it will be closed and new journal file be created.\n-\n-* journalMaxBackups\n-** how many old journal files whose id is less than LastLogMark 's journal id.\n-\n-bq. NOTE: keeping number of old journal files would be useful for manually recovery in special case.\n-\n-h1. ZooKeeper Metadata\n-\n-p. For BookKeeper, we require a ZooKeeper installation to store metadata, and to pass the list of ZooKeeper servers as parameter to the constructor of the BookKeeper class ( @org.apache.bookkeeper.client,BookKeeper@ ). To setup ZooKeeper, please check the \"ZooKeeper documentation\":index.html. \n-\n-p. BookKeeper provides two mechnaisms to organize its metadata in ZooKeeper.\n-\n-* FlatLedgerManager : All ledger metadata are placed as children in a single zookeeper path.\n-* HierarchicalLedgerManager : All ledger metadata are partitioned into 2-level znodes.\n-\n-h2. Flat Ledger Manager\n-\n-p. All ledgers' metadata are put in a single zookeeper path, created using zookeeper sequential node, which can ensure uniqueness of ledger id. Each ledger node is prefixed with 'L'.\n-\n-p. Bookie server manages its owned active ledgers in a hash map. So it is easy for bookie server to find what ledgers are deleted from zookeeper and garbage collect them. And its garbage collection flow is described as below:\n-\n-* Fetch all existing ledgers from zookeeper (*zkActiveLedgers*).\n-* Fetch all ledgers currently active within the Bookie (*bkActiveLedgers*).\n-* Loop over *bkActiveLedgers* to find those ledgers which do not exist in *zkActiveLedgers* and garbage collect them.\n-\n-h2. Hierarchical Ledger Manager\n-\n-p. Hierarchical Ledger Manager first obtains a global unique id from ZooKeeper using a EPHEMERAL_SEQUENTIAL znode.\n-\n-p. Since ZooKeeper sequential counter has a format of %10d -- that is 10 digits with 0 (zero) padding, i.e. \"&lt;path&gt;0000000001\", HierarchicalLedgerManager splits the generated id into 3 parts :\n-\n- @ {level1 (2 digits)}{level2 (4 digits)}{level3 (4 digits)}\n-\n-p. These 3 parts are used to form the actual ledger node path used to store ledger metadata:\n-\n- @ {ledgers_root_path}/{level1}/{level2}/L{level3}\n-\n-p. E.g. Ledger 0000000001 is split into 3 parts 00, 0000, 00001, which is stored in znode /{ledgers_root_path}/00/0000/L0001. So each znode could have at most 10000 ledgers, which avoids the problem of the child list being larger than the maximum ZooKeeper packet size.\n-\n-p. Bookie server manages its active ledgers in a sorted map, which simplifies access to active ledgers in a particular (level1, level2) partition.\n-\n-p. Garbage collection in bookie server is processed node by node as follows:\n-\n-* Fetching all level1 nodes, by calling zk#getChildren(ledgerRootPath).\n-** For each level1 nodes, fetching their level2 nodes :\n-** For each partition (level1, level2) :\n-*** Fetch all existed ledgers from zookeeper belonging to partition (level1, level2) (*zkActiveLedgers*).\n-*** Fetch all ledgers currently active in the bookie which belong to partition (level1, level2) (*bkActiveLedgers*).\n-*** Loop over *bkActiveLedgers* to find those ledgers which do not exist in *zkActiveLedgers*, and garbage collect them.\n-\n-bq. NOTE: Hierarchical Ledger Manager is more suitable to manage large number of ledgers existed in BookKeeper.\n+@bookkeeper-server/bin/bookkeeper localbookie 10@"},{"sha":"81d014ffa6b66a7321a2f0267180720ce6e1ac2a","filename":"doc/bookkeeperOverview.textile","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/doc/bookkeeperOverview.textile","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/doc/bookkeeperOverview.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperOverview.textile?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -18,7 +18,7 @@ h1. BookKeeper introduction\n \n p. BookKeeper is a replicated service to reliably log streams of records. In BookKeeper, servers are \"bookies\", log streams are \"ledgers\", and each unit of a log (aka record) is a \"ledger entry\". BookKeeper is designed to be reliable; bookies, the servers that store ledgers, can crash, corrupt data, discard data, but as long as there are enough bookies behaving correctly the service as a whole behaves correctly. \n \n-p. The initial motivation for BookKeeper comes from the namenode of HDFS. Namenodes have to log operations in a reliable fashion so that recovery is possible in the case of crashes. We have found the applications for BookKeeper extend far beyond HDFS, however. Essentially, any application that requires an append storage can replace their implementations with BookKeeper. BookKeeper has the advantage of scaling throughput with the number of servers. \n+p. The initial motivation for BookKeeper comes from the namenode of HDFS. Namenodes have to log operations in a reliable fashion so that recovery is possible in the case of crashes. We have found the applications for BookKeeper extend far beyond HDFS, however. Essentially, any application that requires an append storage can replace their implementations with BookKeeper. BookKeeper has the advantage of writing efficiently, replicating for fault tolerance, and scaling throughput with the number of servers through striping. \n \n p. At a high level, a bookkeeper client receives entries from a client application and stores it to sets of bookies, and there are a few advantages in having such a service: \n \n@@ -100,7 +100,7 @@ p. We maintain this information in ZooKeeper. Bookies use ephemeral nodes to ind\n \n h1. Closing out ledgers\n \n-p. The process of closing out the ledger and finding the last ledger is difficult due to the durability guarantees of BookKeeper: \n+p. The process of closing out the ledger and finding the last entry is difficult due to the durability guarantees of BookKeeper: \n \n * If an entry has been successfully recorded, it must be readable. \n * If an entry is read once, it must always be available to be read. \n@@ -116,14 +116,16 @@ p. The trick to making everything work is to have a correct idea of a last entry\n # Find the highest consecutively recorded entry, _LR_ ; \n # Make sure that all entries between _LC_ and _LR_ are on a quorum of bookies; \n \n-h1. Data Management in Bookie Server\n+h1. Data Management in Bookies\n+\n+p. This section gives an overview of how a bookie manages its ledger fragments. \n \n h2. Basic\n \n-p. Bookie servers manage data in a log-structured way, which is implemented using three kind of files:\n+p. Bookies manage data in a log-structured way, which is implemented using three kind of files:\n \n-* _Journal_ : A journal file contains the BookKeeper transaction logs. Before any update takes place, a Bookie server ensures that a transaction describing the update is written to non-volatile storage. A new journal file is created once the Bookie server starts or the older journal file reaches the journal file size threshold.\n-* _Entry Log_ : An entry log file manages the written entries received from BookKeeper clients. Entries from different ledgers are aggregated and written sequentially, while their offsets are kept as pointers in _LedgerCache_ for fast lookup. A new entry log file is created once the Bookie server starts or the older entry log file reaches the entry log size threshold. Old entry log files are removed by the _Garbage Collector Thread_ once they are not associated with any active ledger.\n+* _Journal_ : A journal file contains the BookKeeper transaction logs. Before any update takes place, a bookie ensures that a transaction describing the update is written to non-volatile storage. A new journal file is created once the bookie starts or the older journal file reaches the journal file size threshold.\n+* _Entry Log_ : An entry log file manages the written entries received from BookKeeper clients. Entries from different ledgers are aggregated and written sequentially, while their offsets are kept as pointers in _LedgerCache_ for fast lookup. A new entry log file is created once the bookie starts or the older entry log file reaches the entry log size threshold. Old entry log files are removed by the _Garbage Collector Thread_ once they are not associated with any active ledger.\n * _Index File_ : An index file is created for each ledger, which comprises a header and several fixed-length index pages, recording the offsets of data stored in entry log files. \n \n p. Since updating index files would introduce random disk I/O, for performance consideration, index files are updated lazily by a _Sync Thread_ running in the background. Before index pages are persisted to disk, they are gathered in _LedgerCache_ for lookup.\n@@ -132,11 +134,11 @@ p. Since updating index files would introduce random disk I/O, for performance c\n \n h2. Add Entry\n \n-p. When a Bookie server receives entries from clients to be written, these entries will go through the following steps to be persisted to disk:\n+p. When a bookie receives entries from clients to be written, these entries will go through the following steps to be persisted to disk:\n \n # Append the entry in _Entry Log_, return its position { logId , offset } ;\n # Update the index of this entry in _Ledger Cache_ ;\n-# Append a transaction of update of this entry in _Journal_ ;\n+# Append a transaction corresponding to this entry update in _Journal_ ;\n # Respond to BookKeeper client ;\n \n * For performance reasons, _Entry Log_ buffers entries in memory and commit them in batches, while _Ledger Cache_ holds index pages in memory and flushes them lazily. We will discuss data flush and how to ensure data integrity in the following section 'Data Flush'.\n@@ -154,11 +156,11 @@ p. The data flush flow in _Sync Thread_ is as follows:\n \n # Records a _LastLogMark_ in memory. The _LastLogMark_ contains two parts: first one is _txnLogId_ (file id of a journal) and the second one is _txnLogPos_ (offset in a journal). The _LastLogMark_ indicates that those entries before it have been persisted to both index and entry log files.\n # Flushes dirty index pages from _LedgerCache_ to index file, and flushes entry log files to ensure all buffered entries in entry log files are persisted to disk.\n-#* Ideally, a Bookie server just needs to flush index pages and entry log files that contains entries before _LastLogMark_. There is no such information in _LedgerCache_ and _Entry Log_ mapping to journal files, though. Consequently, the thread flushes _LedgerCache_ and _Entry Log_ entirely here, and may flush entries after the _LastLogMark_. Flushing more is not a problem, though, just redundant.\n+#* Ideally, a bookie just needs to flush index pages and entry log files that contains entries before _LastLogMark_. There is no such information in _LedgerCache_ and _Entry Log_ mapping to journal files, though. Consequently, the thread flushes _LedgerCache_ and _Entry Log_ entirely here, and may flush entries after the _LastLogMark_. Flushing more is not a problem, though, just redundant.\n # Persists _LastLogMark_ to disk, which means entries added before _LastLogMark_ whose entry data and index page were also persisted to disk. It is the time to safely remove journal files created earlier than _txnLogId_.\n-#* If a Bookie server has crashed before persisting _LastLogMark_ to disk, it still has journal files containing entries for which index pages may not have been persisted. Consequently, when this Bookie server restarts, it inspects journal files to restore those entries; data isn't lost.\n+#* If the bookie has crashed before persisting _LastLogMark_ to disk, it still has journal files containing entries for which index pages may not have been persisted. Consequently, when this bookie restarts, it inspects journal files to restore those entries; data isn't lost.\n \n-p. Using the above data flush mechanism, it is safe for the _Sync Thread_ to skip data flushing when the Bookie server shuts down. However, in _Entry Logger_, it uses _BufferedChannel_ to write entries in batches and there might be data buffered in _BufferedChannel_ upon a shut down. Bookie server needs to ensure _Entry Logger_ flushes its buffered data during shutting down. Otherwise, _Entry Log_ files become corrupted with partial entries.\n+p. Using the above data flush mechanism, it is safe for the _Sync Thread_ to skip data flushing when the bookie shuts down. However, in _Entry Logger_, it uses _BufferedChannel_ to write entries in batches and there might be data buffered in _BufferedChannel_ upon a shut down. The bookie needs to ensure _Entry Logger_ flushes its buffered data during shutting down. Otherwise, _Entry Log_ files become corrupted with partial entries.\n \n p. As described above, _EntryLogger#flush_ is invoked in the following two cases:\n * in _Sync Thread_ : used to ensure entries added before _LastLogMark_ are persisted to disk."},{"sha":"37233cd9d4cf1398dcf78b0adb073e51700da69a","filename":"doc/bookkeeperStarted.textile","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/doc/bookkeeperStarted.textile","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/doc/bookkeeperStarted.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperStarted.textile?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -32,21 +32,21 @@ p. BookKeeper provides a utility program to start a standalone ZooKeeper ensembl\n \n p. To start a local bookkeeper ensemble with 5 bookies:\n \n-@ bookkeeper-server/bin/bookkeeper localbookie 5\n+ @bookkeeper-server/bin/bookkeeper localbookie 5@\n \n h1. Setting up bookies\n \n p. If you're bold and you want more than just running things locally, then you'll need to run bookies in different servers. You'll need at least three bookies to start with. \n \n p. For each bookie, we need to execute a command like the following: \n \n- @ bookkeeper-server/bin/bookkeeper bookie\n+ @bookkeeper-server/bin/bookkeeper bookie@\n \n-p. This command will use the default directories for storing ledgers and the write ahead log, and will look for a zookeeper server on localhost:2181. To modify this you must edit bookkeeper-server/conf/bkenv.sh. BOOKIE_TXN_LOGDIR and BOOKIE_DATA_DIR should be configured to used different physical devices for best performance. BOOKIE_ZOOKEEPER should be a comma separated list of zookeeper servers.\n+p. This command will use the default directories for storing ledgers and the write ahead log, and will look for a zookeeper server on localhost:2181. See the \"Admin Guide\":./bookkeeperConfig.html for more details.\n \n p. To see the default values of these configuration variables, run:\n \n- @ bookkeeper-server/bin/bookkeeper help\n+ @bookkeeper-server/bin/bookkeeper help@\n \n h1. Setting up ZooKeeper\n \n@@ -60,14 +60,17 @@ h1. Example\n \n p. In the following excerpt of code, we: \n \n+# Open a bookkeeper client;\n # Create a ledger; \n # Write to the ledger; \n # Close the ledger; \n # Open the same ledger for reading; \n # Read from the ledger; \n # Close the ledger again; \n+# Close the bookkeeper client.\n \n-bc.. \n+<pre><code>\n+BookKeeper bkc = new BookKeeper(\"localhost:2181\");\n LedgerHandle lh = bkc.createLedger(ledgerPassword);\n ledgerId = lh.getId();\n ByteBuffer entry = ByteBuffer.allocate(4);\n@@ -93,4 +96,5 @@ while(ls.hasMoreElements()){\n \tInteger retrEntry = result.getInt();\n }\n lh.close();\n-\t    \n+bkc.close();\n+</code></pre>\n\\ No newline at end of file"},{"sha":"41a73d31e252353c8029c6d328f9fe0cbef55fe7","filename":"doc/index.textile","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/doc/index.textile","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/doc/index.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/index.textile?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -22,6 +22,9 @@ h1. Apache BookKeeper documentation\n * \"Getting started\":./bookkeeperStarted.html\n * \"Programmer's Guide\":./bookkeeperProgrammer.html\n * \"Admin Guide\":./bookkeeperConfig.html\n+* \"Bookie Server Configuration Parameters\":./bookkeeperConfigParams.html\n+* \"BookKeeper Internals\":./bookkeeperInternals.html\n+* \"Bookie Recovery\":./bookieRecovery.html\n * \"Using BookKeeper stream library\":./bookkeeperStream.html\n \n h1. Apache Hedwig documentation"},{"sha":"8f0fda8166f21c507e3a9088f1e1e0e4cf1f3cb4","filename":"hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/util/CallbackUtils.java?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -51,7 +51,7 @@\n      *            failure (but before the final failure callback). Useful for\n      *            releasing resources, etc. as soon as we know the composite\n      *            operation is doomed.\n-     * @return\n+     * @return the generated callback\n      */\n     public static Callback<Void> multiCallback(final int expected, final Callback<Void> cb, final Object ctx,\n             final Logger logger, final String successMsg, final String failureMsg,"},{"sha":"32b48aea9bef165f89d35ec5d7d07c6c38454c5d","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=544f4b5c0480bb383134fe6e26c2fe0e0a6c8b11","patch":"@@ -63,7 +63,7 @@\n         <version>2.8</version>\n \t<configuration>\n \t  <additionalparam>-exclude org.apache.hedwig.client.netty:org.apache.hedwig.client.benchmark:org.apache.hedwig.client.data:org.apache.hedwig.client.exceptions:org.apache.hedwig.client.handlers:org.apache.hedwig.client.ssl</additionalparam>\n-\t  <subpackages>org.apache.bookkeeper.client:org.apache.hedwig.client:org.apache.hedwig.util:org.apache.hedwig.protocol:org.apache.hedwig.exceptions</subpackages>\n+\t  <subpackages>org.apache.bookkeeper.client:org.apache.bookkeeper.conf:org.apache.hedwig.client:org.apache.hedwig.util:org.apache.hedwig.protocol:org.apache.hedwig.exceptions</subpackages>\n           <groups>\n \t    <group>\n               <title>Bookkeeper</title>"}]}

