{"sha":"54c54f71a5fad10838c66c6a6b28ef13d9388931","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NGM1NGY3MWE1ZmFkMTA4MzhjNjZjNmE2YjI4ZWYxM2Q5Mzg4OTMx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T12:44:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T12:44:34Z"},"message":"BOOKKEEPER-743: Periodic ledger check running too often as doc doesn't match implementation. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1589694 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b3f0980d2994d822c4b6ae706c2e38c60c2e04db","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b3f0980d2994d822c4b6ae706c2e38c60c2e04db"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/54c54f71a5fad10838c66c6a6b28ef13d9388931","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/54c54f71a5fad10838c66c6a6b28ef13d9388931","html_url":"https://github.com/apache/bookkeeper/commit/54c54f71a5fad10838c66c6a6b28ef13d9388931","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/54c54f71a5fad10838c66c6a6b28ef13d9388931/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e1838f47800120252a3b5db77b7d1169e1daf801","url":"https://api.github.com/repos/apache/bookkeeper/commits/e1838f47800120252a3b5db77b7d1169e1daf801","html_url":"https://github.com/apache/bookkeeper/commit/e1838f47800120252a3b5db77b7d1169e1daf801"}],"stats":{"total":18,"additions":10,"deletions":8},"files":[{"sha":"d93435e4847f18e8376e9cb2f6c303ab3e571e24","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/54c54f71a5fad10838c66c6a6b28ef13d9388931/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/54c54f71a5fad10838c66c6a6b28ef13d9388931/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=54c54f71a5fad10838c66c6a6b28ef13d9388931","patch":"@@ -180,6 +180,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-742: Fix for empty ledgers losing quorum. (ivank)\n \n+        BOOKKEEPER-743: Periodic ledger check running too often as doc doesn't match implementation. (ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"0afaaada765b7c9ad0e0d8cc00409465716d7b92","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/54c54f71a5fad10838c66c6a6b28ef13d9388931/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/54c54f71a5fad10838c66c6a6b28ef13d9388931/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=54c54f71a5fad10838c66c6a6b28ef13d9388931","patch":"@@ -224,7 +224,7 @@ public void run() {\n                                           +\"running periodic check\", ue);\n                             }\n                         }\n-                    }, interval, interval, TimeUnit.MILLISECONDS);\n+                    }, interval, interval, TimeUnit.SECONDS);\n             } else {\n                 LOG.info(\"Periodic checking disabled\");\n             }"},{"sha":"c702f6270c749e12fab065970c113e7ef5f4bf55","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/54c54f71a5fad10838c66c6a6b28ef13d9388931/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/54c54f71a5fad10838c66c6a6b28ef13d9388931/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java?ref=54c54f71a5fad10838c66c6a6b28ef13d9388931","patch":"@@ -64,7 +64,7 @@\n     private HashMap<String, AuditorElector> auditorElectors = new HashMap<String, AuditorElector>();\n     private List<ZooKeeper> zkClients = new LinkedList<ZooKeeper>();\n \n-    private final static int CHECK_INTERVAL = 100; // run every 100ms\n+    private final static int CHECK_INTERVAL = 1; // run every second\n \n     public AuditorPeriodicCheckTest() {\n         super(3);\n@@ -151,7 +151,7 @@ public boolean accept(File dir, String name) {\n             if (underReplicatedLedger != -1) {\n                 break;\n             }\n-            Thread.sleep(CHECK_INTERVAL);\n+            Thread.sleep(CHECK_INTERVAL * 1000);\n         }\n         assertEquals(\"Ledger should be under replicated\", ledgerId, underReplicatedLedger);\n         underReplicationManager.close();\n@@ -199,7 +199,7 @@ public void testIndexCorruption() throws Exception {\n             if (underReplicatedLedger != -1) {\n                 break;\n             }\n-            Thread.sleep(CHECK_INTERVAL);\n+            Thread.sleep(CHECK_INTERVAL * 1000);\n         }\n         assertEquals(\"Ledger should be under replicated\", ledgerToCorrupt, underReplicatedLedger);\n         underReplicationManager.close();\n@@ -256,14 +256,14 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n         bsConfs.add(conf);\n         bs.add(startBookie(conf, deadBookie));\n \n-        Thread.sleep(CHECK_INTERVAL * 2);\n+        Thread.sleep(CHECK_INTERVAL * 2000);\n         assertEquals(\"Nothing should have tried to read\", 0, numReads.get());\n         underReplicationManager.enableLedgerReplication();\n-        Thread.sleep(CHECK_INTERVAL * 2); // give it time to run\n+        Thread.sleep(CHECK_INTERVAL * 2000); // give it time to run\n \n         underReplicationManager.disableLedgerReplication();\n         // give it time to stop, from this point nothing new should be marked\n-        Thread.sleep(CHECK_INTERVAL * 2);\n+        Thread.sleep(CHECK_INTERVAL * 2000);\n \n         int numUnderreplicated = 0;\n         long underReplicatedLedger = -1;\n@@ -277,7 +277,7 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n             underReplicationManager.markLedgerReplicated(underReplicatedLedger);\n         } while (underReplicatedLedger != -1);\n \n-        Thread.sleep(CHECK_INTERVAL * 2); // give a chance to run again (it shouldn't, it's disabled)\n+        Thread.sleep(CHECK_INTERVAL * 2000); // give a chance to run again (it shouldn't, it's disabled)\n \n         // ensure that nothing is marked as underreplicated\n         underReplicatedLedger = underReplicationManager.pollLedgerToRereplicate();"}]}

