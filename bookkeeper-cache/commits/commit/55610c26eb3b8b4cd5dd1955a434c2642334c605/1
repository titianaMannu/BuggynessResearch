{"sha":"55610c26eb3b8b4cd5dd1955a434c2642334c605","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NTYxMGMyNmViM2I4YjRjZDVkZDE5NTVhNDM0YzI2NDIzMzRjNjA1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-12T17:26:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-12T17:26:59Z"},"message":"BOOKKEEPER-493: moveLedgerIndexFile might have chance pickup same directory (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1420854 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63ea09b8f9edf8850847c25ed8882a2b74bf353e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/63ea09b8f9edf8850847c25ed8882a2b74bf353e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/55610c26eb3b8b4cd5dd1955a434c2642334c605","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/55610c26eb3b8b4cd5dd1955a434c2642334c605","html_url":"https://github.com/apache/bookkeeper/commit/55610c26eb3b8b4cd5dd1955a434c2642334c605","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/55610c26eb3b8b4cd5dd1955a434c2642334c605/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"5414cec92a99135c8ba0bc0f6768bd348c65e2fb","url":"https://api.github.com/repos/apache/bookkeeper/commits/5414cec92a99135c8ba0bc0f6768bd348c65e2fb","html_url":"https://github.com/apache/bookkeeper/commit/5414cec92a99135c8ba0bc0f6768bd348c65e2fb"}],"stats":{"total":145,"additions":137,"deletions":8},"files":[{"sha":"835f38bdc7beaca62d3842b370b9cf7ec7b9caff","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/55610c26eb3b8b4cd5dd1955a434c2642334c605/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/55610c26eb3b8b4cd5dd1955a434c2642334c605/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=55610c26eb3b8b4cd5dd1955a434c2642334c605","patch":"@@ -134,6 +134,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-497: GcLedgersTest has a potential race (ivank via sijie)\n \n+        BOOKKEEPER-493: moveLedgerIndexFile might have chance pickup same directory (sijie via ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"c689bb9e240a7d4b730ebc62a1c8ab754cf9da8a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":27,"deletions":7,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/55610c26eb3b8b4cd5dd1955a434c2642334c605/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/55610c26eb3b8b4cd5dd1955a434c2642334c605/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=55610c26eb3b8b4cd5dd1955a434c2642334c605","patch":"@@ -253,16 +253,15 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n                     if (masterKey == null) {\n                         throw new Bookie.NoLedgerException(ledger);\n                     }\n-                    lf = getNewLedgerIndexFile(ledger);\n+                    lf = getNewLedgerIndexFile(ledger, null);\n                     // A new ledger index file has been created for this Bookie.\n                     // Add this new ledger to the set of active ledgers.\n                     LOG.debug(\"New ledger index file created for ledgerId: {}\", ledger);\n                     activeLedgerManager.addActiveLedger(ledger, true);\n                 }\n                 evictFileInfoIfNecessary();\n                 fi = new FileInfo(lf, masterKey);\n-                if (ledgerDirsManager.isDirFull(lf.getParentFile()\n-                        .getParentFile().getParentFile())) {\n+                if (ledgerDirsManager.isDirFull(getLedgerDirForLedger(fi))) {\n                     moveLedgerIndexFile(ledger, fi);\n                 }\n                 fileInfoCache.put(ledger, fi);\n@@ -275,8 +274,19 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n         }\n     }\n \n-    private File getNewLedgerIndexFile(Long ledger) throws NoWritableLedgerDirException {\n-        File dir = ledgerDirsManager.pickRandomWritableDir();\n+    /**\n+     * Get a new index file for ledger excluding directory <code>excludedDir</code>.\n+     *\n+     * @param ledger\n+     *          Ledger id.\n+     * @param excludedDir\n+     *          The ledger directory to exclude.\n+     * @return new index file object.\n+     * @throws NoWritableLedgerDirException if there is no writable dir available.\n+     */\n+    private File getNewLedgerIndexFile(Long ledger, File excludedDir)\n+    throws NoWritableLedgerDirException {\n+        File dir = ledgerDirsManager.pickRandomWritableDir(excludedDir);\n         String ledgerName = getLedgerName(ledger);\n         return new File(dir, ledgerName);\n     }\n@@ -349,7 +359,7 @@ public void flushLedger(boolean doAll) throws IOException {\n                 // open index files to new location\n                 for (Long l : dirtyLedgers) {\n                     FileInfo fi = getFileInfo(l, null);\n-                    File currentDir = fi.getLf().getParentFile().getParentFile().getParentFile();\n+                    File currentDir = getLedgerDirForLedger(fi);\n                     if (ledgerDirsManager.isDirFull(currentDir)) {\n                         moveLedgerIndexFile(l, fi);\n                     }\n@@ -377,8 +387,18 @@ public void flushLedger(boolean doAll) throws IOException {\n         }\n     }\n \n+    /**\n+     * Get the ledger directory that the ledger index belongs to.\n+     *\n+     * @param fi File info of a ledger\n+     * @return ledger directory that the ledger belongs to.\n+     */\n+    private File getLedgerDirForLedger(FileInfo fi) {\n+        return fi.getLf().getParentFile().getParentFile().getParentFile();\n+    }\n+\n     private void moveLedgerIndexFile(Long l, FileInfo fi) throws NoWritableLedgerDirException, IOException {\n-        File newLedgerIndexFile = getNewLedgerIndexFile(l);\n+        File newLedgerIndexFile = getNewLedgerIndexFile(l, getLedgerDirForLedger(fi));\n         fi.moveToNewLocation(newLedgerIndexFile, fi.getSizeSinceLastwrite());\n     }\n "},{"sha":"bb1d675e9e57ded9145deb6357aaaeec4ef7a61b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":28,"deletions":1,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/55610c26eb3b8b4cd5dd1955a434c2642334c605/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/55610c26eb3b8b4cd5dd1955a434c2642334c605/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java?ref=55610c26eb3b8b4cd5dd1955a434c2642334c605","patch":"@@ -115,8 +115,35 @@ public void addToFilledDirs(File dir) {\n      * Returns one of the ledger dir from writable dirs list randomly.\n      */\n     File pickRandomWritableDir() throws NoWritableLedgerDirException {\n+        return pickRandomWritableDir(null);\n+    }\n+\n+    /**\n+     * Pick up a writable dir from available dirs list randomly. The <code>excludedDir</code>\n+     * will not be pickedup.\n+     *\n+     * @param excludedDir\n+     *          The directory to exclude during pickup.\n+     * @throws NoWritableLedgerDirException if there is no writable dir available.\n+     */\n+    File pickRandomWritableDir(File excludedDir) throws NoWritableLedgerDirException {\n         List<File> writableDirs = getWritableLedgerDirs();\n-        return writableDirs.get(rand.nextInt(writableDirs.size()));\n+\n+        final int start = rand.nextInt(writableDirs.size());\n+        int idx = start;\n+        File candidate = writableDirs.get(idx);\n+        while (null != excludedDir && excludedDir.equals(candidate)) {\n+            idx = (idx + 1) % writableDirs.size();\n+            if (idx == start) {\n+                // after searching all available dirs,\n+                // no writable dir is found\n+                throw new NoWritableLedgerDirException(\"No writable directories found from \"\n+                        + \" available writable dirs (\" + writableDirs + \") : exclude dir \"\n+                        + excludedDir);\n+            }\n+            candidate = writableDirs.get(idx);\n+        }\n+        return candidate;\n     }\n \n     public void addLedgerDirsListener(LedgerDirsListener listener) {"},{"sha":"b79da2f61e05a75f658acd6bd16516139e005a50","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/bookkeeper/blob/55610c26eb3b8b4cd5dd1955a434c2642334c605/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/55610c26eb3b8b4cd5dd1955a434c2642334c605/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=55610c26eb3b8b4cd5dd1955a434c2642334c605","patch":"@@ -0,0 +1,80 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TestLedgerDirsManager extends TestCase {\n+    static Logger LOG = LoggerFactory.getLogger(TestLedgerDirsManager.class);\n+\n+    ServerConfiguration conf = new ServerConfiguration();\n+    File curDir;\n+    LedgerDirsManager dirsManager;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+        curDir = Bookie.getCurrentDirectory(tmpDir);\n+        Bookie.checkDirectoryStructure(curDir);\n+\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n+\n+        dirsManager = new LedgerDirsManager(conf);\n+    }\n+\n+    @Test\n+    public void testPickWritableDirExclusive() throws Exception {\n+        try {\n+            dirsManager.pickRandomWritableDir(curDir);\n+            fail(\"Should not reach here due to there is no writable ledger dir.\");\n+        } catch (NoWritableLedgerDirException nwlde) {\n+            // expected to fail with no writable ledger dir\n+            assertTrue(true);\n+        }\n+    }\n+\n+    @Test\n+    public void testNoWritableDir() throws Exception {\n+        try {\n+            dirsManager.addToFilledDirs(curDir);\n+            dirsManager.pickRandomWritableDir();\n+            fail(\"Should not reach here due to there is no writable ledger dir.\");\n+        } catch (NoWritableLedgerDirException nwlde) {\n+            // expected to fail with no writable ledger dir\n+            assertEquals(\"Should got NoWritableLedgerDirException w/ 'All ledger directories are non writable'.\",\n+                         \"All ledger directories are non writable\", nwlde.getMessage());\n+        }\n+    }\n+\n+}"}]}

