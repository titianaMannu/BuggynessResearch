{"sha":"55f6300ef7eea86c7573d07d65341e2f9ad982a4","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NWY2MzAwZWY3ZWVhODZjNzU3M2QwN2Q2NTM0MWUyZjlhZDk4MmE0","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-03T21:38:08Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-03T21:38:08Z"},"message":"BOOKKEEPER-399: Let hub server configure write quorum from ack quorum. (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416677 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"345cddd8b99c9fdb4ebff87ebe056520ce631549","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/345cddd8b99c9fdb4ebff87ebe056520ce631549"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/55f6300ef7eea86c7573d07d65341e2f9ad982a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/55f6300ef7eea86c7573d07d65341e2f9ad982a4","html_url":"https://github.com/apache/bookkeeper/commit/55f6300ef7eea86c7573d07d65341e2f9ad982a4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/55f6300ef7eea86c7573d07d65341e2f9ad982a4/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"c86eb1c481fd837269d370cbcc248274708b0887","url":"https://api.github.com/repos/apache/bookkeeper/commits/c86eb1c481fd837269d370cbcc248274708b0887","html_url":"https://github.com/apache/bookkeeper/commit/c86eb1c481fd837269d370cbcc248274708b0887"}],"stats":{"total":46,"additions":42,"deletions":4},"files":[{"sha":"a7d1d7a57b41e6d947a8f558b854b94c2bf0c630","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/55f6300ef7eea86c7573d07d65341e2f9ad982a4/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/55f6300ef7eea86c7573d07d65341e2f9ad982a4/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=55f6300ef7eea86c7573d07d65341e2f9ad982a4","patch":"@@ -256,6 +256,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-389: add documentation for message filter. (sijie via ivank)\n \n+\tBOOKKEEPER-399: Let hub server configure write quorum from ack quorum. (sijie via fpj)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"d9f50179b98a99cc1e6923f105ef179b5c8dc8f6","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","status":"modified","additions":38,"deletions":3,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/55f6300ef7eea86c7573d07d65341e2f9ad982a4/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/55f6300ef7eea86c7573d07d65341e2f9ad982a4/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java?ref=55f6300ef7eea86c7573d07d65341e2f9ad982a4","patch":"@@ -59,7 +59,10 @@\n     protected final static String INTER_REGION_SSL_ENABLED = \"inter_region_ssl_enabled\";\n     protected final static String MESSAGES_CONSUMED_THREAD_RUN_INTERVAL = \"messages_consumed_thread_run_interval\";\n     protected final static String BK_ENSEMBLE_SIZE = \"bk_ensemble_size\";\n+    @Deprecated\n     protected final static String BK_QUORUM_SIZE = \"bk_quorum_size\";\n+    protected final static String BK_WRITE_QUORUM_SIZE = \"bk_write_quorum_size\";\n+    protected final static String BK_ACK_QUORUM_SIZE = \"bk_ack_quorum_size\";\n     protected final static String RETRY_REMOTE_SUBSCRIBE_THREAD_RUN_INTERVAL = \"retry_remote_subscribe_thread_run_interval\";\n     protected final static String DEFAULT_MESSAGE_WINDOW_SIZE =\n         \"default_message_window_size\";\n@@ -302,10 +305,37 @@ public int getBkEnsembleSize() {\n     // This parameter is used when Bookkeeper is the persistence store\n     // and indicates what the quorum size is (i.e. how many redundant\n     // copies of each ledger entry is written).\n-    public int getBkQuorumSize() {\n+    protected int getBkQuorumSize() {\n         return conf.getInt(BK_QUORUM_SIZE, 2);\n     }\n \n+    /**\n+     * Get the write quorum size for BookKeeper client, which is used to\n+     * indicate how many redundant copies of each ledger entry is written.\n+     *\n+     * @return write quorum size for BookKeeper client.\n+     */\n+    public int getBkWriteQuorumSize() {\n+        if (conf.containsKey(BK_WRITE_QUORUM_SIZE)) {\n+            return conf.getInt(BK_WRITE_QUORUM_SIZE, 2);\n+        } else {\n+            return getBkQuorumSize();\n+        }\n+    }\n+\n+    /**\n+     * Get the ack quorum size for BookKeeper client.\n+     *\n+     * @return ack quorum size for BookKeeper client.\n+     */\n+    public int getBkAckQuorumSize() {\n+        if (conf.containsKey(BK_ACK_QUORUM_SIZE)) {\n+            return conf.getInt(BK_ACK_QUORUM_SIZE, 2);\n+        } else {\n+            return getBkQuorumSize();\n+        }\n+    }\n+\n     /**\n      * This parameter is used when BookKeeper is the persistence storage,\n      * and indicates when the number of entries stored in a ledger reach\n@@ -336,9 +366,14 @@ public void validate() throws ConfigurationException {\n             }\n         }\n         // Validate that the Bookkeeper ensemble size >= quorum size.\n-        if (getBkEnsembleSize() < getBkQuorumSize()) {\n+        if (getBkEnsembleSize() < getBkWriteQuorumSize()) {\n             throw new ConfigurationException(\"BK ensemble size (\" + getBkEnsembleSize()\n-                                             + \") is less than the quorum size (\" + getBkQuorumSize() + \")\");\n+                                             + \") is less than the write quorum size (\" + getBkWriteQuorumSize() + \")\");\n+        }\n+\n+        if (getBkWriteQuorumSize() < getBkAckQuorumSize()) {\n+            throw new ConfigurationException(\"BK write quorum size (\" + getBkWriteQuorumSize()\n+                                             + \") is less than the ack quorum size (\" + getBkAckQuorumSize() + \")\");\n         }\n \n         // add other checks here"},{"sha":"7112f705e0f4d37dfae7eb3f2ba08936eaa99431","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/55f6300ef7eea86c7573d07d65341e2f9ad982a4/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/55f6300ef7eea86c7573d07d65341e2f9ad982a4/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=55f6300ef7eea86c7573d07d65341e2f9ad982a4","patch":"@@ -1033,7 +1033,8 @@ void openNewTopicLedger(final ByteString topic,\n                             final Version expectedVersionOfLedgersNode, final TopicInfo topicInfo,\n                             final long startSeqId, final boolean changeLedger,\n                             final Callback<Void> cb, final Object ctx) {\n-        bk.asyncCreateLedger(cfg.getBkEnsembleSize(), cfg.getBkQuorumSize(), DigestType.CRC32, passwd,\n+        bk.asyncCreateLedger(cfg.getBkEnsembleSize(), cfg.getBkWriteQuorumSize(),\n+                             cfg.getBkAckQuorumSize(), DigestType.CRC32, passwd,\n         new SafeAsynBKCallback.CreateCallback() {\n             AtomicBoolean processed = new AtomicBoolean(false);\n "}]}

