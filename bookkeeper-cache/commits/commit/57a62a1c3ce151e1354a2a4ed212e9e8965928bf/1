{"sha":"57a62a1c3ce151e1354a2a4ed212e9e8965928bf","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1N2E2MmExYzNjZTE1MWUxMzU0YTJhNGVkMjEyZTllODk2NTkyOGJm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-04-20T09:19:08Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-04-20T09:19:08Z"},"message":"BOOKKEEPER-168: Message bounding on subscriptions (ivank) [missing test]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1328270 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4a8b164b2c669ef41539b7b0d8b8880091ae118a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4a8b164b2c669ef41539b7b0d8b8880091ae118a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/57a62a1c3ce151e1354a2a4ed212e9e8965928bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/57a62a1c3ce151e1354a2a4ed212e9e8965928bf","html_url":"https://github.com/apache/bookkeeper/commit/57a62a1c3ce151e1354a2a4ed212e9e8965928bf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/57a62a1c3ce151e1354a2a4ed212e9e8965928bf/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b5c0791d38a093936016a7989c35363063cdb202","url":"https://api.github.com/repos/apache/bookkeeper/commits/b5c0791d38a093936016a7989c35363063cdb202","html_url":"https://github.com/apache/bookkeeper/commit/b5c0791d38a093936016a7989c35363063cdb202"}],"stats":{"total":209,"additions":209,"deletions":0},"files":[{"sha":"45ba046653af2bcf8fbe818d52eae5f3f7a8a4cc","filename":"hedwig-client/src/main/cpp/test/messageboundtest.cpp","status":"added","additions":209,"deletions":0,"changes":209,"blob_url":"https://github.com/apache/bookkeeper/blob/57a62a1c3ce151e1354a2a4ed212e9e8965928bf/hedwig-client/src/main/cpp/test/messageboundtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/57a62a1c3ce151e1354a2a4ed212e9e8965928bf/hedwig-client/src/main/cpp/test/messageboundtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/messageboundtest.cpp?ref=57a62a1c3ce151e1354a2a4ed212e9e8965928bf","patch":"@@ -0,0 +1,209 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n+#include <cppunit/Test.h>\n+#include <cppunit/TestSuite.h>\n+#include <cppunit/extensions/HelperMacros.h>\n+\n+#include \"../lib/clientimpl.h\"\n+#include <hedwig/exceptions.h>\n+#include <hedwig/callback.h>\n+#include <stdexcept>\n+#include <pthread.h>\n+\n+#include <log4cxx/logger.h>\n+\n+#include \"util.h\"\n+\n+static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n+\n+class MessageBoundTestSuite : public CppUnit::TestFixture {\n+  class MessageBoundConfiguration : public Hedwig::Configuration {\n+  public:\n+    MessageBoundConfiguration() : address(\"localhost:4081\") {}\n+    \n+    virtual int getInt(const std::string& key, int defaultVal) const {\n+      if (key == Configuration::SUBSCRIPTION_MESSAGE_BOUND) {\n+\treturn 5;\n+      }\n+      return defaultVal;\n+    }\n+\n+    virtual const std::string get(const std::string& key, const std::string& defaultVal) const {\n+      if (key == Configuration::DEFAULT_SERVER) {\n+\treturn address;\n+      } else {\n+\treturn defaultVal;\n+      }\n+    }\n+    \n+    virtual bool getBool(const std::string& /*key*/, bool defaultVal) const {\n+      return defaultVal;\n+    }\n+\n+    protected:\n+    const std::string address;\n+  };\n+    \n+private:\n+  CPPUNIT_TEST_SUITE( MessageBoundTestSuite );\n+  CPPUNIT_TEST(testMessageBound);\n+  CPPUNIT_TEST(testMultipleSubscribers);\n+  CPPUNIT_TEST_SUITE_END();\n+\n+public:\n+  MessageBoundTestSuite() {    \n+  }\n+\n+  ~MessageBoundTestSuite() {\n+  }\n+\n+  void setUp()\n+  {\n+  }\n+  \n+  void tearDown() \n+  {\n+  }\n+\n+  class MyOrderCheckingMessageHandlerCallback : public Hedwig::MessageHandlerCallback {\n+  public:\n+    MyOrderCheckingMessageHandlerCallback(const int nextExpectedMsg)\n+      : nextExpectedMsg(nextExpectedMsg) {\n+    }\n+\n+    virtual void consume(const std::string& topic, const std::string& subscriberId,\n+                         const Hedwig::Message& msg, Hedwig::OperationCallbackPtr& callback) {\n+      boost::lock_guard<boost::mutex> lock(mutex);\n+      \n+      int thisMsg = atoi(msg.body().c_str());\n+      LOG4CXX_DEBUG(logger, \"received message \" << thisMsg);\n+      if (thisMsg == nextExpectedMsg) {\n+\tnextExpectedMsg++;\n+      }\n+      // checking msgId\n+      callback->operationComplete();\n+    }\n+\n+    int nextExpected() {\n+      return nextExpectedMsg;\n+    }\n+\n+  protected:\n+    boost::mutex mutex;\n+    int nextExpectedMsg;\n+  };\n+\n+  void sendXExpectLastY(Hedwig::Publisher& pub, Hedwig::Subscriber& sub, const std::string& topic, \n+\t\t\t  const std::string& subid, int X, int Y) {\n+    for (int i = 0; i < X; i++) {\n+      std::stringstream oss;\n+      oss << i;\n+      pub.publish(topic, oss.str());\n+    }\n+\n+    sub.subscribe(topic, subid, Hedwig::SubscribeRequest::ATTACH);\n+\n+    MyOrderCheckingMessageHandlerCallback* cb =\n+      new MyOrderCheckingMessageHandlerCallback(X - Y);\n+\n+    Hedwig::MessageHandlerCallbackPtr handler(cb);\n+    sub.startDelivery(topic, subid, handler);\n+\n+    for (int i = 0; i < 100; i++) {\n+      if (cb->nextExpected() == X) {\n+\tbreak;\n+      } else {\n+\tsleep(1);\n+      }\n+    }\n+    CPPUNIT_ASSERT(cb->nextExpected() == X);\n+\n+    sub.stopDelivery(topic, subid);\n+    sub.closeSubscription(topic, subid);\n+  }\n+\n+  void testMessageBound() {\n+    Hedwig::Configuration* conf = new MessageBoundConfiguration();\n+    std::auto_ptr<Hedwig::Configuration> confptr(conf);\n+    \n+    Hedwig::Client* client = new Hedwig::Client(*conf);\n+    std::auto_ptr<Hedwig::Client> clientptr(client);\n+\n+    Hedwig::Subscriber& sub = client->getSubscriber();\n+    Hedwig::Publisher& pub = client->getPublisher();\n+\n+    std::string topic = \"testTopic\";\n+    std::string subid = \"testSubId\";\n+    sub.subscribe(topic, subid, Hedwig::SubscribeRequest::CREATE_OR_ATTACH);\n+    sub.closeSubscription(topic, subid);\n+\n+    sendXExpectLastY(pub, sub, topic, subid, 100, 5);\n+  }\n+\n+  void testMultipleSubscribers() {\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n+    std::auto_ptr<Hedwig::Configuration> confptr(conf);\n+\n+    Hedwig::Client* client = new Hedwig::Client(*conf);\n+    std::auto_ptr<Hedwig::Client> clientptr(client);\n+\n+    Hedwig::Subscriber& sub = client->getSubscriber();\n+    Hedwig::Publisher& pub = client->getPublisher();\n+    \n+    Hedwig::SubscriptionOptions options5;\n+    options5.set_messagebound(5);\n+    options5.set_createorattach(Hedwig::SubscribeRequest::CREATE_OR_ATTACH);\n+    Hedwig::SubscriptionOptions options20;\n+    options20.set_messagebound(20);\n+    options20.set_createorattach(Hedwig::SubscribeRequest::CREATE_OR_ATTACH);\n+    Hedwig::SubscriptionOptions optionsUnlimited;\n+    optionsUnlimited.set_createorattach(Hedwig::SubscribeRequest::CREATE_OR_ATTACH);\n+\n+    std::string topic = \"testTopic\";\n+    std::string subid5 = \"testSubId5\";\n+    std::string subid20 = \"testSubId20\";\n+    std::string subidUnlimited = \"testSubIdUnlimited\";\n+\n+    sub.subscribe(topic, subid5, options5);\n+    sub.closeSubscription(topic, subid5);\n+\n+    sendXExpectLastY(pub, sub, topic, subid5, 1000, 5);\n+\n+    sub.subscribe(topic, subid20, options20);\n+    sub.closeSubscription(topic, subid20);\n+    sendXExpectLastY(pub, sub, topic, subid20, 1000, 20);\n+\n+    sub.subscribe(topic, subidUnlimited, optionsUnlimited);\n+    sub.closeSubscription(topic, subidUnlimited);\n+\n+    sendXExpectLastY(pub, sub, topic, subidUnlimited, 1000, 1000);\n+    sub.unsubscribe(topic, subidUnlimited);\n+\n+    sendXExpectLastY(pub, sub, topic, subid20, 1000, 20);\n+    sub.unsubscribe(topic, subid20);\n+\n+    sendXExpectLastY(pub, sub, topic, subid5, 1000, 5);\n+    sub.unsubscribe(topic, subid5);\n+  }\n+};\n+\n+CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( MessageBoundTestSuite, \"MessageBound\" );"}]}

