{"sha":"5c3a30f8e423da51b1ee03173a336400335de3b8","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1YzNhMzBmOGU0MjNkYTUxYjFlZTAzMTczYTMzNjQwMDMzNWRlM2I4","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-01-03T17:12:42Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-01-03T17:12:42Z"},"message":"BOOKKEEPER-709: SlowBookieTest#testSlowBookie fails intermittently (Rakesh R via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1555158 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"374efa0912694ca04f745e844031d4a6a498d7d4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/374efa0912694ca04f745e844031d4a6a498d7d4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5c3a30f8e423da51b1ee03173a336400335de3b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5c3a30f8e423da51b1ee03173a336400335de3b8","html_url":"https://github.com/apache/bookkeeper/commit/5c3a30f8e423da51b1ee03173a336400335de3b8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5c3a30f8e423da51b1ee03173a336400335de3b8/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"34c260bfc7db379351fa8807897603b9a9b9012b","url":"https://api.github.com/repos/apache/bookkeeper/commits/34c260bfc7db379351fa8807897603b9a9b9012b","html_url":"https://github.com/apache/bookkeeper/commit/34c260bfc7db379351fa8807897603b9a9b9012b"}],"stats":{"total":22,"additions":13,"deletions":9},"files":[{"sha":"b621b3e5cca46bcf3cab10b4f2f9f87403ec8463","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5c3a30f8e423da51b1ee03173a336400335de3b8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/5c3a30f8e423da51b1ee03173a336400335de3b8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=5c3a30f8e423da51b1ee03173a336400335de3b8","patch":"@@ -130,6 +130,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-712: bookkeeper script should use 'java' from JAVA_HOME (vinay via sijie)\n \n+\tBOOKKEEPER-709: SlowBookieTest#testSlowBookie fails intermittently (Rakesh R via fpj)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"dc2243cb3f7fc74ca2d9f2b04a135f2533a1d886","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5c3a30f8e423da51b1ee03173a336400335de3b8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/5c3a30f8e423da51b1ee03173a336400335de3b8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=5c3a30f8e423da51b1ee03173a336400335de3b8","patch":"@@ -121,6 +121,7 @@ public Bookie getBookie() {\n      */\n     @VisibleForTesting\n     public void suspendProcessing() {\n+        LOG.debug(\"Suspending bookie server, port is {}\", conf.getBookiePort());\n         nettyServer.suspendProcessing();\n     }\n \n@@ -129,6 +130,7 @@ public void suspendProcessing() {\n      */\n     @VisibleForTesting\n     public void resumeProcessing() {\n+        LOG.debug(\"Resuming bookie server, port is {}\", conf.getBookiePort());\n         nettyServer.resumeProcessing();\n     }\n "},{"sha":"bb7877df7a1b920c6a2342afffcabea10c5f7c11","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/5c3a30f8e423da51b1ee03173a336400335de3b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5c3a30f8e423da51b1ee03173a336400335de3b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java?ref=5c3a30f8e423da51b1ee03173a336400335de3b8","patch":"@@ -25,13 +25,12 @@\n import java.util.List;\n \n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.net.InetSocketAddress;\n import org.junit.Test;\n-import static org.junit.Assert.*;\n \n-import junit.framework.TestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -62,6 +61,7 @@ public void testSlowBookie() throws Exception {\n         }\n         final CountDownLatch b0latch = new CountDownLatch(1);\n         final CountDownLatch b1latch = new CountDownLatch(1);\n+        final CountDownLatch addEntrylatch = new CountDownLatch(1);\n         List<InetSocketAddress> curEns = lh.getLedgerMetadata().currentEnsemble;\n         try {\n             sleepBookie(curEns.get(0), b0latch);\n@@ -74,19 +74,21 @@ public void testSlowBookie() throws Exception {\n             AsyncCallback.AddCallback cb = new AsyncCallback.AddCallback() {\n                     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n                         i.set(rc);\n+                        addEntrylatch.countDown();\n                     }\n                 };\n             lh.asyncAddEntry(entry, cb, null);\n \n-            Thread.sleep(1000); // sleep a second to allow time to complete\n-            assertEquals(i.get(), 0xdeadbeef);\n+            Thread.sleep(3000); // sleep 3 seconds to allow time to complete\n+            assertEquals(\"Successfully added entry!\", 0xdeadbeef, i.get());\n             b0latch.countDown();\n             b1latch.countDown();\n-            Thread.sleep(2000);\n-            assertEquals(i.get(), BKException.Code.OK);\n+            addEntrylatch.await(4000, TimeUnit.MILLISECONDS);\n+            assertEquals(\"Failed to add entry!\", BKException.Code.OK, i.get());\n         } finally {\n             b0latch.countDown();\n             b1latch.countDown();\n+            addEntrylatch.countDown();\n         }\n     }\n \n@@ -99,7 +101,6 @@ public void testBookieFailureWithSlowBookie() throws Exception {\n \n         byte[] pwd = new byte[] {};\n         final LedgerHandle lh = bkc.createLedger(4, 3, 2, BookKeeper.DigestType.CRC32, pwd);\n-        long lid = lh.getId();\n         final AtomicBoolean finished = new AtomicBoolean(false);\n         final AtomicBoolean failTest = new AtomicBoolean(false);\n         final byte[] entry = \"Test Entry\".getBytes();\n@@ -154,7 +155,6 @@ public void testManyBookieFailureWithSlowBookies() throws Exception {\n \n         byte[] pwd = new byte[] {};\n         final LedgerHandle lh = bkc.createLedger(4, 3, 1, BookKeeper.DigestType.CRC32, pwd);\n-        long lid = lh.getId();\n         final AtomicBoolean finished = new AtomicBoolean(false);\n         final AtomicBoolean failTest = new AtomicBoolean(false);\n         final byte[] entry = \"Test Entry\".getBytes();"},{"sha":"12ec3eba0fab7aa11df6af04555c900d6f8caa9c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5c3a30f8e423da51b1ee03173a336400335de3b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/5c3a30f8e423da51b1ee03173a336400335de3b8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=5c3a30f8e423da51b1ee03173a336400335de3b8","patch":"@@ -311,10 +311,10 @@ public void sleepBookie(InetSocketAddress addr, final CountDownLatch l)\n             throws Exception {\n         for (final BookieServer bookie : bs) {\n             if (bookie.getLocalAddress().equals(addr)) {\n+                bookie.suspendProcessing();\n                 Thread sleeper = new Thread() {\n                     public void run() {\n                         try {\n-                            bookie.suspendProcessing();\n                             l.await();\n                             bookie.resumeProcessing();\n                         } catch (Exception e) {"}]}

