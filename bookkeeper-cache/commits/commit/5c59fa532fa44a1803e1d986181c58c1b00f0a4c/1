{"sha":"5c59fa532fa44a1803e1d986181c58c1b00f0a4c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1YzU5ZmE1MzJmYTQ0YTE4MDNlMWQ5ODYxODFjNThjMWIwMGYwYTRj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T14:17:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T14:17:05Z"},"message":"BOOKKEEPER-340: Test backward compatibility for hedwig between different versions. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1369854 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9110017c5174b541683dfd3060656209009beead","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9110017c5174b541683dfd3060656209009beead"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5c59fa532fa44a1803e1d986181c58c1b00f0a4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5c59fa532fa44a1803e1d986181c58c1b00f0a4c","html_url":"https://github.com/apache/bookkeeper/commit/5c59fa532fa44a1803e1d986181c58c1b00f0a4c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4d9f3d32a063975303f42a7108cbd4892062ab89","url":"https://api.github.com/repos/apache/bookkeeper/commits/4d9f3d32a063975303f42a7108cbd4892062ab89","html_url":"https://github.com/apache/bookkeeper/commit/4d9f3d32a063975303f42a7108cbd4892062ab89"}],"stats":{"total":1066,"additions":1012,"deletions":54},"files":[{"sha":"a7eb2a0bcf3af0c2041a98428a6248dacabc4bd7","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=5c59fa532fa44a1803e1d986181c58c1b00f0a4c","patch":"@@ -84,6 +84,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-331: Let hedwig support returning message seq id for publish requests. (Mridul via sijie)\n \n+        BOOKKEEPER-340: Test backward compatibility for hedwig between different versions. (sijie via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"8903c8c1f09b78b5e9eedbfb64df2988d5fe0a6d","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=5c59fa532fa44a1803e1d986181c58c1b00f0a4c","patch":"@@ -57,12 +57,14 @@ DEFAULT_LOG_CONF=$BK_HOME/conf/log4j.properties\n \n source $BK_HOME/conf/bkenv.sh\n \n-RELEASE_JAR=`ls $BK_HOME/bookkeeper-server-*.jar 2> /dev/null | tail -1` \n+# exclude tests jar\n+RELEASE_JAR=`ls $BK_HOME/bookkeeper-server-*.jar 2> /dev/null | grep -v tests | tail -1` \n if [ $? == 0 ]; then\n     BOOKIE_JAR=$RELEASE_JAR\n fi\n \n-BUILT_JAR=`ls $BK_HOME/target/bookkeeper-server-*.jar 2> /dev/null | tail -1`\n+# exclude tests jar\n+BUILT_JAR=`ls $BK_HOME/target/bookkeeper-server-*.jar 2> /dev/null | grep -v tests | tail -1`\n if [ $? != 0 ] && [ ! -e \"$BOOKIE_JAR\" ]; then \n     echo \"\\nCouldn't find bookkeeper jar.\";\n     echo \"Make sure you've run 'mvn package'\\n\";"},{"sha":"7e7919a0a76cbbd3447a701b3c4d974d98857b3c","filename":"bookkeeper-server/pom.xml","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=5c59fa532fa44a1803e1d986181c58c1b00f0a4c","patch":"@@ -121,12 +121,24 @@\n       <artifactId>bookkeeper-server-compat400</artifactId>\n       <version>4.0.0</version>\n       <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>bookkeeper-server</artifactId>\n+        </exclusion>\n+      </exclusions>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.bookkeeper</groupId>\n       <artifactId>bookkeeper-server-compat410</artifactId>\n       <version>4.1.0</version>\n       <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>bookkeeper-server</artifactId>\n+        </exclusion>\n+      </exclusions>\n     </dependency>\n   </dependencies>\n   <build>\n@@ -140,6 +152,18 @@\n           <forkMode>pertest</forkMode>\n         </configuration>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <version>2.2</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>test-jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n       <plugin>\n         <artifactId>maven-assembly-plugin</artifactId>\n         <version>2.2.1</version>"},{"sha":"7cdb0794d781f3b573cdf44a6cf5c195f0d5974f","filename":"compat-deps/hedwig-server-compat-4.0.0/pom.xml","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/bookkeeper/blob/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/compat-deps/hedwig-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/compat-deps/hedwig-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.0.0/pom.xml?ref=5c59fa532fa44a1803e1d986181c58c1b00f0a4c","patch":"@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>compat-deps</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.2.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.apache.bookkeeper</groupId>\n+  <artifactId>hedwig-server-compat400</artifactId>\n+  <version>4.0.0</version>\n+  <name>hedwig-server-compat400</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>hedwig-server</artifactId>\n+      <version>4.0.0</version>\n+    </dependency>\n+  </dependencies>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>1.5</version>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <createDependencyReducedPom>false</createDependencyReducedPom>\n+              <artifactSet>\n+                <includes>\n+                  <include>org.apache.*:*</include>\n+                  <include>org.jboss.*:*</include>\n+                  <include>commons-*:*</include>\n+                </includes>\n+                <excludes>\n+                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n+                </excludes>\n+              </artifactSet>\n+              <relocations>\n+                <relocation>\n+                  <pattern>org.apache.commons</pattern>\n+                  <shadedPattern>org.apache.hw_v4_0_0.commons</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.bookkeeper</pattern>\n+                  <shadedPattern>org.apache.hw_v4_0_0.bookkeeper</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.zookeeper</pattern>\n+                  <shadedPattern>org.apache.hw_v4_0_0.zookkeeper</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.hedwig</pattern>\n+                  <shadedPattern>org.apache.hw_v4_0_0.hedwig</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.jute</pattern>\n+                  <shadedPattern>org.apache.hw_v4_0_0.jute</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.jboss</pattern>\n+                  <shadedPattern>org.jboss.hw_v4_0_0</shadedPattern>\n+                </relocation>\n+              </relocations>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"b25f35d0ad2301421516e4e474206a1d7f202f63","filename":"compat-deps/hedwig-server-compat-4.1.0/pom.xml","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/apache/bookkeeper/blob/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/compat-deps/hedwig-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/compat-deps/hedwig-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.1.0/pom.xml?ref=5c59fa532fa44a1803e1d986181c58c1b00f0a4c","patch":"@@ -0,0 +1,97 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>compat-deps</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.2.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.apache.bookkeeper</groupId>\n+  <artifactId>hedwig-server-compat410</artifactId>\n+  <version>4.1.0</version>\n+  <name>hedwig-server-compat410</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>hedwig-server</artifactId>\n+      <version>4.1.0</version>\n+    </dependency>\n+  </dependencies>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>1.5</version>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <createDependencyReducedPom>false</createDependencyReducedPom>\n+              <artifactSet>\n+                <includes>\n+                  <include>org.apache.*:*</include>\n+                  <include>org.jboss.*:*</include>\n+                  <include>commons-*:*</include>\n+                </includes>\n+                <excludes>\n+                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n+                </excludes>\n+              </artifactSet>\n+              <relocations>\n+                <relocation>\n+                  <pattern>org.apache.commons</pattern>\n+                  <shadedPattern>org.apache.hw_v4_1_0.commons</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.bookkeeper</pattern>\n+                  <shadedPattern>org.apache.hw_v4_1_0.bookkeeper</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.zookeeper</pattern>\n+                  <shadedPattern>org.apache.hw_v4_1_0.zookkeeper</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.hedwig</pattern>\n+                  <shadedPattern>org.apache.hw_v4_1_0.hedwig</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.apache.jute</pattern>\n+                  <shadedPattern>org.apache.hw_v4_1_0.jute</shadedPattern>\n+                </relocation>\n+                <relocation>\n+                  <pattern>org.jboss</pattern>\n+                  <shadedPattern>org.jboss.hw_v4_1_0</shadedPattern>\n+                </relocation>\n+              </relocations>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"b7de37146f9351076d187372b110f5acf3e5d64a","filename":"compat-deps/pom.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/compat-deps/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/compat-deps/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/pom.xml?ref=5c59fa532fa44a1803e1d986181c58c1b00f0a4c","patch":"@@ -33,9 +33,11 @@\n   <modules>\n     <module>bookkeeper-server-compat-4.0.0</module>\n     <module>bookkeeper-server-compat-4.1.0</module>\n+    <module>hedwig-server-compat-4.0.0</module>\n+    <module>hedwig-server-compat-4.1.0</module>\n   </modules>\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n   </properties>\n-</project>\n\\ No newline at end of file\n+</project>"},{"sha":"9f5c3cd03876fc3131c94980898730d5dee77389","filename":"hedwig-server/pom.xml","status":"modified","additions":106,"deletions":51,"changes":157,"blob_url":"https://github.com/apache/bookkeeper/blob/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/hedwig-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/hedwig-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/pom.xml?ref=5c59fa532fa44a1803e1d986181c58c1b00f0a4c","patch":"@@ -56,10 +56,10 @@\n       <type>jar</type>\n     </dependency>\n     <dependency>\n-    \t<groupId>org.apache.derby</groupId>\n-    \t<artifactId>derby</artifactId>\n-    \t<version>10.8.2.2</version>\n-    \t<scope>runtime</scope>\n+        <groupId>org.apache.derby</groupId>\n+        <artifactId>derby</artifactId>\n+        <version>10.8.2.2</version>\n+        <scope>runtime</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n@@ -81,59 +81,114 @@\n       <scope>compile</scope>\n       <type>jar</type>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server</artifactId>\n+      <version>${project.parent.version}</version>\n+      <scope>test</scope>\n+      <type>test-jar</type>\n+    </dependency>\n     <!--\n-\tAnnoying dependency we need to include because\n-\tzookeeper uses log4j and so we transatively do, but\n-\tlog4j has some dependencies which aren't in the \n-\tdefault maven repositories\n+        Annoying dependency we need to include because\n+        zookeeper uses log4j and so we transatively do, but\n+        log4j has some dependencies which aren't in the \n+        default maven repositories\n     //-->\n     <dependency>\n       <groupId>log4j</groupId>\n       <artifactId>log4j</artifactId>\n       <version>1.2.15</version>\n       <exclusions>\n-\t<exclusion>\n-\t  <groupId>javax.mail</groupId>\n-\t  <artifactId>mail</artifactId>\n-\t</exclusion>\n-\t<exclusion>\n-\t  <groupId>javax.jms</groupId>\n-\t  <artifactId>jms</artifactId>\n-\t</exclusion>\n-\t<exclusion>\n-\t  <groupId>com.sun.jdmk</groupId>\n-\t  <artifactId>jmxtools</artifactId>\n-\t</exclusion>\n-\t<exclusion>\n-\t  <groupId>com.sun.jmx</groupId>\n-\t  <artifactId>jmxri</artifactId>\n-\t</exclusion>\n+        <exclusion>\n+          <groupId>javax.mail</groupId>\n+          <artifactId>mail</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>javax.jms</groupId>\n+          <artifactId>jms</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>com.sun.jdmk</groupId>\n+          <artifactId>jmxtools</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>com.sun.jmx</groupId>\n+          <artifactId>jmxri</artifactId>\n+        </exclusion>\n       </exclusions>\n     </dependency>\n     <dependency>\n       <groupId>jline</groupId>\n       <artifactId>jline</artifactId>\n       <version>0.9.94</version>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>hedwig-server-compat410</artifactId>\n+      <version>4.1.0</version>\n+      <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>bookkeeper-server</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>hedwig-server</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>hedwig-protocol</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>hedwig-client</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>hedwig-server-compat400</artifactId>\n+      <version>4.0.0</version>\n+      <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>bookkeeper-server</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>hedwig-server</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>hedwig-protocol</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>hedwig-client</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n   </dependencies>\n   <build>\n     <plugins>\n       <plugin>\n-\t<groupId>org.apache.rat</groupId>\n-\t<artifactId>apache-rat-plugin</artifactId>\n-\t<version>0.7</version>\n-\t<configuration>\n-\t  <excludes>\n-\t    <exclude>**/p12.pass</exclude>\n-\t  </excludes>\n-\t</configuration>\n+        <groupId>org.apache.rat</groupId>\n+        <artifactId>apache-rat-plugin</artifactId>\n+        <version>0.7</version>\n+        <configuration>\n+          <excludes>\n+            <exclude>**/p12.pass</exclude>\n+          </excludes>\n+        </configuration>\n       </plugin>\n       <plugin>\n         <artifactId>maven-assembly-plugin</artifactId>\n         <version>2.2.1</version>\n         <configuration>\n           <descriptors>\n-\t    <descriptor>../src/assemble/bin.xml</descriptor>\n+            <descriptor>../src/assemble/bin.xml</descriptor>\n           </descriptors>\n         </configuration>\n       </plugin>\n@@ -162,30 +217,30 @@\n         </executions>\n       </plugin>\n       <plugin>\n-\t<artifactId>maven-dependency-plugin</artifactId>\n-\t<executions>\n-\t  <execution>\n-\t    <phase>package</phase>\n-\t    <goals>\n-\t      <goal>copy-dependencies</goal>\n-\t    </goals>\n-\t    <configuration>\n-\t      <outputDirectory>${basedir}/lib</outputDirectory>\n-\t    </configuration>\n-\t  </execution>\n-\t</executions>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>copy-dependencies</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${basedir}/lib</outputDirectory>\n+            </configuration>\n+          </execution>\n+        </executions>\n       </plugin>\n       <plugin>\n-      \t<groupId>org.apache.maven.plugins</groupId>\n-\t<artifactId>maven-surefire-plugin</artifactId>\n-\t<version>2.9</version>\n-\t<configuration>\n-\t  <argLine>-Xmx1G -Djava.net.preferIPv4Stack=true</argLine>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-surefire-plugin</artifactId>\n+        <version>2.9</version>\n+        <configuration>\n+          <argLine>-Xmx1G -Djava.net.preferIPv4Stack=true</argLine>\n           <systemPropertyVariables>\n             <derby.stream.error.file>target/derby.log</derby.stream.error.file>\n             <build.test.dir>target/zk_clientbase_build</build.test.dir>\n           </systemPropertyVariables>\n-\t</configuration>\n+        </configuration>\n       </plugin>\n     </plugins>\n   </build>"},{"sha":"28cb5ace96d7be5037bb7fdc02bf8fd5d653fa04","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"added","additions":679,"deletions":0,"changes":679,"blob_url":"https://github.com/apache/bookkeeper/blob/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=5c59fa532fa44a1803e1d986181c58c1b00f0a4c","patch":"@@ -0,0 +1,679 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server;\n+\n+import java.net.InetAddress;\n+import java.io.File;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.google.protobuf.ByteString;\n+\n+import junit.framework.TestCase;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Test Backward Compatability between different versions\n+ */\n+public class TestBackwardCompat extends TestCase {\n+\n+    private static Logger logger = LoggerFactory.getLogger(TestBackwardCompat.class);\n+\n+    static ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n+\n+    static class BookKeeperCluster400 {\n+\n+        int numBookies;\n+        List<org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration> bkConfs;\n+        List<org.apache.hw_v4_0_0.bookkeeper.proto.BookieServer> bks;\n+\n+        private int initialPort = 5000;\n+        private int nextPort = initialPort;\n+\n+        BookKeeperCluster400(int numBookies) {\n+            this.numBookies = numBookies;\n+        }\n+\n+        public void start() throws Exception {\n+            zkUtil.startServer();\n+\n+            bks = new LinkedList<org.apache.hw_v4_0_0.bookkeeper.proto.BookieServer>();\n+            bkConfs = new LinkedList<org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration>();\n+\n+            for (int i=0; i<numBookies; i++) {\n+                startBookieServer();\n+            }\n+        }\n+\n+        public void stop() throws Exception {\n+            for (org.apache.hw_v4_0_0.bookkeeper.proto.BookieServer bs : bks) {\n+                bs.shutdown();\n+            }\n+            bks.clear();\n+\n+            zkUtil.killServer();\n+        }\n+\n+        protected void startBookieServer() throws Exception {\n+            File tmpDir = org.apache.hw_v4_0_0.hedwig.util.FileUtils.createTempDirectory(\n+                getClass().getName() + (nextPort - initialPort), \"test\");\n+            org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration conf = newServerConfiguration(\n+                nextPort++, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n+            bks.add(startBookie(conf));\n+            bkConfs.add(conf);\n+        }\n+\n+        protected org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration newServerConfiguration(\n+            int port, String zkServers, File journalDir, File[] ledgerDirs) {\n+            org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration conf =\n+                new org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration();\n+            conf.setBookiePort(port);\n+            conf.setZkServers(zkServers);\n+            conf.setJournalDirName(journalDir.getPath());\n+            String[] ledgerDirNames = new String[ledgerDirs.length];\n+            for (int i=0; i<ledgerDirs.length; i++) {\n+                ledgerDirNames[i] = ledgerDirs[i].getPath();\n+            }\n+            conf.setLedgerDirNames(ledgerDirNames);\n+            return conf;\n+        }\n+\n+        protected org.apache.hw_v4_0_0.bookkeeper.proto.BookieServer startBookie(\n+            org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration conf) throws Exception {\n+            org.apache.hw_v4_0_0.bookkeeper.proto.BookieServer server\n+                = new org.apache.hw_v4_0_0.bookkeeper.proto.BookieServer(conf);\n+            server.start();\n+\n+            int port = conf.getBookiePort();\n+            while (zkUtil.getZooKeeperClient().exists(\n+                    \"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port,\n+                    false) == null) {\n+                Thread.sleep(500);\n+            }\n+            return server;\n+        }\n+    }\n+\n+    /**\n+     * Version 4.0.0 classes\n+     */\n+    static class Server400 {\n+        org.apache.hw_v4_0_0.hedwig.server.common.ServerConfiguration conf;\n+        org.apache.hw_v4_0_0.hedwig.server.netty.PubSubServer server;\n+\n+        Server400(final String zkHosts) {\n+            conf = new org.apache.hw_v4_0_0.hedwig.server.common.ServerConfiguration() {\n+                @Override\n+                public String getZkHost() {\n+                    return zkHosts;\n+                }\n+            };\n+        }\n+\n+        void start() throws Exception {\n+            server = new org.apache.hw_v4_0_0.hedwig.server.netty.PubSubServer(conf);\n+        }\n+\n+        void stop() throws Exception {\n+            if (null != server) {\n+                server.shutdown();\n+            }\n+        }\n+    }\n+\n+    static class Client400 {\n+        org.apache.hw_v4_0_0.hedwig.client.conf.ClientConfiguration conf;\n+        org.apache.hw_v4_0_0.hedwig.client.api.Client client;\n+        org.apache.hw_v4_0_0.hedwig.client.api.Publisher publisher;\n+        org.apache.hw_v4_0_0.hedwig.client.api.Subscriber subscriber;\n+\n+        Client400() {\n+            conf = new org.apache.hw_v4_0_0.hedwig.client.conf.ClientConfiguration();\n+            client = new org.apache.hw_v4_0_0.hedwig.client.HedwigClient(conf);\n+            publisher = client.getPublisher();\n+            subscriber = client.getSubscriber();\n+        }\n+\n+        void close() throws Exception {\n+            if (null != client) {\n+                client.close();\n+            }\n+        }\n+\n+        org.apache.hw_v4_0_0.hedwig.protocol.PubSubProtocol.MessageSeqId publish(\n+            ByteString topic, ByteString data) throws Exception {\n+            org.apache.hw_v4_0_0.hedwig.protocol.PubSubProtocol.Message message =\n+                org.apache.hw_v4_0_0.hedwig.protocol.PubSubProtocol.Message.newBuilder()\n+                    .setBody(data).build();\n+            publisher.publish(topic, message);\n+            return null;\n+        }\n+    }\n+\n+    static class BookKeeperCluster410 {\n+\n+        int numBookies;\n+        List<org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration> bkConfs;\n+        List<org.apache.hw_v4_1_0.bookkeeper.proto.BookieServer> bks;\n+\n+        private int initialPort = 5000;\n+        private int nextPort = initialPort;\n+\n+        BookKeeperCluster410(int numBookies) {\n+            this.numBookies = numBookies;\n+        }\n+\n+        public void start() throws Exception {\n+            zkUtil.startServer();\n+\n+            bks = new LinkedList<org.apache.hw_v4_1_0.bookkeeper.proto.BookieServer>();\n+            bkConfs = new LinkedList<org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration>();\n+\n+            for (int i=0; i<numBookies; i++) {\n+                startBookieServer();\n+            }\n+        }\n+\n+        public void stop() throws Exception {\n+            for (org.apache.hw_v4_1_0.bookkeeper.proto.BookieServer bs : bks) {\n+                bs.shutdown();\n+            }\n+            bks.clear();\n+\n+            zkUtil.killServer();\n+        }\n+\n+        protected void startBookieServer() throws Exception {\n+            File tmpDir = org.apache.hw_v4_1_0.hedwig.util.FileUtils.createTempDirectory(\n+                getClass().getName() + (nextPort - initialPort), \"test\");\n+            org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration conf = newServerConfiguration(\n+                nextPort++, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n+            bks.add(startBookie(conf));\n+            bkConfs.add(conf);\n+        }\n+\n+        protected org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration newServerConfiguration(\n+            int port, String zkServers, File journalDir, File[] ledgerDirs) {\n+            org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration conf =\n+                new org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration();\n+            conf.setBookiePort(port);\n+            conf.setZkServers(zkServers);\n+            conf.setJournalDirName(journalDir.getPath());\n+            String[] ledgerDirNames = new String[ledgerDirs.length];\n+            for (int i=0; i<ledgerDirs.length; i++) {\n+                ledgerDirNames[i] = ledgerDirs[i].getPath();\n+            }\n+            conf.setLedgerDirNames(ledgerDirNames);\n+            return conf;\n+        }\n+\n+        protected org.apache.hw_v4_1_0.bookkeeper.proto.BookieServer startBookie(\n+            org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration conf) throws Exception {\n+            org.apache.hw_v4_1_0.bookkeeper.proto.BookieServer server\n+                = new org.apache.hw_v4_1_0.bookkeeper.proto.BookieServer(conf);\n+            server.start();\n+\n+            int port = conf.getBookiePort();\n+            while (zkUtil.getZooKeeperClient().exists(\n+                    \"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port,\n+                    false) == null) {\n+                Thread.sleep(500);\n+            }\n+            return server;\n+        }\n+    }\n+\n+    /**\n+     * Version 4.1.0 classes\n+     */\n+    static class Server410 {\n+        org.apache.hw_v4_1_0.hedwig.server.common.ServerConfiguration conf;\n+        org.apache.hw_v4_1_0.hedwig.server.netty.PubSubServer server;\n+\n+        Server410(final String zkHosts) {\n+            conf = new org.apache.hw_v4_1_0.hedwig.server.common.ServerConfiguration() {\n+                @Override\n+                public String getZkHost() {\n+                    return zkHosts;\n+                }\n+            };\n+        }\n+\n+        void start() throws Exception {\n+            server = new org.apache.hw_v4_1_0.hedwig.server.netty.PubSubServer(conf);\n+            server.start();\n+        }\n+\n+        void stop() throws Exception {\n+            if (null != server) {\n+                server.shutdown();\n+            }\n+        }\n+    }\n+\n+    static class Client410 {\n+        org.apache.hw_v4_1_0.hedwig.client.conf.ClientConfiguration conf;\n+        org.apache.hw_v4_1_0.hedwig.client.api.Client client;\n+        org.apache.hw_v4_1_0.hedwig.client.api.Publisher publisher;\n+        org.apache.hw_v4_1_0.hedwig.client.api.Subscriber subscriber;\n+\n+        Client410() {\n+            conf = new org.apache.hw_v4_1_0.hedwig.client.conf.ClientConfiguration();\n+            client = new org.apache.hw_v4_1_0.hedwig.client.HedwigClient(conf);\n+            publisher = client.getPublisher();\n+            subscriber = client.getSubscriber();\n+        }\n+\n+        void close() throws Exception {\n+            if (null != client) {\n+                client.close();\n+            }\n+        }\n+\n+        org.apache.hw_v4_1_0.hedwig.protocol.PubSubProtocol.MessageSeqId publish(\n+            ByteString topic, ByteString data) throws Exception {\n+            org.apache.hw_v4_1_0.hedwig.protocol.PubSubProtocol.Message message =\n+                org.apache.hw_v4_1_0.hedwig.protocol.PubSubProtocol.Message.newBuilder()\n+                    .setBody(data).build();\n+            publisher.publish(topic, message);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Current Version\n+     */\n+    static class BookKeeperClusterCurrent {\n+\n+        int numBookies;\n+        List<org.apache.bookkeeper.conf.ServerConfiguration> bkConfs;\n+        List<org.apache.bookkeeper.proto.BookieServer> bks;\n+\n+        private int initialPort = 5000;\n+        private int nextPort = initialPort;\n+\n+        BookKeeperClusterCurrent(int numBookies) {\n+            this.numBookies = numBookies;\n+        }\n+\n+        public void start() throws Exception {\n+            zkUtil.startServer();\n+\n+            bks = new LinkedList<org.apache.bookkeeper.proto.BookieServer>();\n+            bkConfs = new LinkedList<org.apache.bookkeeper.conf.ServerConfiguration>();\n+\n+            for (int i=0; i<numBookies; i++) {\n+                startBookieServer();\n+            }\n+        }\n+\n+        public void stop() throws Exception {\n+            for (org.apache.bookkeeper.proto.BookieServer bs : bks) {\n+                bs.shutdown();\n+            }\n+            bks.clear();\n+\n+            zkUtil.killServer();\n+        }\n+\n+        protected void startBookieServer() throws Exception {\n+            File tmpDir = org.apache.hedwig.util.FileUtils.createTempDirectory(\n+                getClass().getName() + (nextPort - initialPort), \"test\");\n+            org.apache.bookkeeper.conf.ServerConfiguration conf = newServerConfiguration(\n+                nextPort++, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n+            bks.add(startBookie(conf));\n+            bkConfs.add(conf);\n+        }\n+\n+        protected org.apache.bookkeeper.conf.ServerConfiguration newServerConfiguration(\n+            int port, String zkServers, File journalDir, File[] ledgerDirs) {\n+            org.apache.bookkeeper.conf.ServerConfiguration conf =\n+                new org.apache.bookkeeper.conf.ServerConfiguration();\n+            conf.setBookiePort(port);\n+            conf.setZkServers(zkServers);\n+            conf.setJournalDirName(journalDir.getPath());\n+            String[] ledgerDirNames = new String[ledgerDirs.length];\n+            for (int i=0; i<ledgerDirs.length; i++) {\n+                ledgerDirNames[i] = ledgerDirs[i].getPath();\n+            }\n+            conf.setLedgerDirNames(ledgerDirNames);\n+            return conf;\n+        }\n+\n+        protected org.apache.bookkeeper.proto.BookieServer startBookie(\n+            org.apache.bookkeeper.conf.ServerConfiguration conf) throws Exception {\n+            org.apache.bookkeeper.proto.BookieServer server\n+                = new org.apache.bookkeeper.proto.BookieServer(conf);\n+            server.start();\n+\n+            int port = conf.getBookiePort();\n+            while (zkUtil.getZooKeeperClient().exists(\n+                    \"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port,\n+                    false) == null) {\n+                Thread.sleep(500);\n+            }\n+            return server;\n+        }\n+    }\n+\n+    static class ServerCurrent {\n+        org.apache.hedwig.server.common.ServerConfiguration conf;\n+        org.apache.hedwig.server.netty.PubSubServer server;\n+\n+        ServerCurrent(final String zkHosts) {\n+            conf = new org.apache.hedwig.server.common.ServerConfiguration() {\n+                @Override\n+                public String getZkHost() {\n+                    return zkHosts;\n+                }\n+            };\n+        }\n+\n+        void start() throws Exception {\n+            server = new org.apache.hedwig.server.netty.PubSubServer(conf);\n+            server.start();\n+        }\n+\n+        void stop() throws Exception {\n+            if (null != server) {\n+                server.shutdown();\n+            }\n+        }\n+    }\n+\n+    static class ClientCurrent {\n+        org.apache.hedwig.client.conf.ClientConfiguration conf;\n+        org.apache.hedwig.client.api.Client client;\n+        org.apache.hedwig.client.api.Publisher publisher;\n+        org.apache.hedwig.client.api.Subscriber subscriber;\n+\n+        class IntMessageHandler implements org.apache.hedwig.client.api.MessageHandler {\n+            ByteString topic;\n+            ByteString subId;\n+            int next;\n+\n+            CountDownLatch latch;\n+\n+            IntMessageHandler(ByteString t, ByteString s, int start, int num) {\n+                this.topic = t;\n+                this.subId = s;\n+                this.next = start;\n+                this.latch = new CountDownLatch(num);\n+            }\n+\n+            @Override\n+            public void deliver(ByteString t, ByteString s,\n+                                org.apache.hedwig.protocol.PubSubProtocol.Message msg,\n+                                org.apache.hedwig.util.Callback<Void> callback, Object context) {\n+                if (!t.equals(topic) || !s.equals(subId)) {\n+                    return;\n+                }\n+                int num = Integer.parseInt(msg.getBody().toStringUtf8());\n+                if (num == next) {\n+                    latch.countDown();\n+                    ++next;\n+                }\n+                callback.operationFinished(context, null);\n+            }\n+\n+            public boolean await(long timeout, TimeUnit unit)\n+            throws InterruptedException {\n+                return latch.await(timeout, unit);\n+            }\n+        }\n+\n+        ClientCurrent() {\n+            conf = new org.apache.hedwig.client.conf.ClientConfiguration() {\n+                @Override\n+                public boolean isAutoSendConsumeMessageEnabled() {\n+                    return true;\n+                }\n+                @Override\n+                public int getConsumedMessagesBufferSize() {\n+                    return 1;\n+                }\n+            };\n+            client = new org.apache.hedwig.client.HedwigClient(conf);\n+            publisher = client.getPublisher();\n+            subscriber = client.getSubscriber();\n+        }\n+\n+        void close() throws Exception {\n+            if (null != client) {\n+                client.close();\n+            }\n+        }\n+\n+        org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId publish(\n+            ByteString topic, ByteString data) throws Exception {\n+            org.apache.hedwig.protocol.PubSubProtocol.Message message =\n+                org.apache.hedwig.protocol.PubSubProtocol.Message.newBuilder()\n+                    .setBody(data).build();\n+            org.apache.hedwig.protocol.PubSubProtocol.PublishResponse resp =\n+                publisher.publish(topic, message);\n+            if (null == resp) {\n+                return null;\n+            }\n+            return resp.getPublishedMsgId();\n+        }\n+\n+        void publishInts(ByteString topic, int start, int num) throws Exception {\n+            for (int i=0; i<num; i++) {\n+                org.apache.hedwig.protocol.PubSubProtocol.Message msg =\n+                    org.apache.hedwig.protocol.PubSubProtocol.Message.newBuilder().setBody(ByteString.copyFromUtf8(\"\" + (start+i))).build();\n+                publisher.publish(topic, msg);\n+            }\n+        }\n+\n+        void sendXExpectLastY(ByteString topic, ByteString subid, final int x, final int y)\n+        throws Exception {\n+            for (int i=0; i<x; i++) {\n+                publisher.publish(topic, org.apache.hedwig.protocol.PubSubProtocol.Message.newBuilder().setBody(\n+                                         ByteString.copyFromUtf8(String.valueOf(i))).build());\n+            }\n+            subscriber.subscribe(topic, subid, org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.ATTACH);\n+\n+            final AtomicInteger expected = new AtomicInteger(x - y);\n+            final CountDownLatch latch = new CountDownLatch(1);\n+            subscriber.startDelivery(topic, subid, new org.apache.hedwig.client.api.MessageHandler() {\n+                @Override\n+                synchronized public void deliver(ByteString topic, ByteString subscriberId,\n+                                                 org.apache.hedwig.protocol.PubSubProtocol.Message msg,\n+                                                 org.apache.hedwig.util.Callback<Void> callback, Object context) {\n+                    try {\n+                        int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+                        if (value == expected.get()) {\n+                            expected.incrementAndGet();\n+                        } else {\n+                            logger.error(\"Did not receive expected value, expected {}, got {}\",\n+                                         expected.get(), value);\n+                            expected.set(0);\n+                            latch.countDown();\n+                        }\n+                        if (expected.get() == x) {\n+                            latch.countDown();\n+                        }\n+                        callback.operationFinished(context, null);\n+                    } catch (Exception e) {\n+                        logger.error(\"Received bad message\", e);\n+                        latch.countDown();\n+                    }\n+                }\n+            });\n+            assertTrue(\"Timed out waiting for messages Y is \" + y + \" expected is currently \"\n+                       + expected.get(), latch.await(10, TimeUnit.SECONDS));\n+            assertEquals(\"Should be expected message with \" + x, x, expected.get());\n+            subscriber.stopDelivery(topic, subid);\n+            subscriber.closeSubscription(topic, subid);\n+        }\n+\n+        void subscribe(ByteString topic, ByteString subscriberId) throws Exception {\n+            org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions options =\n+                org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.CREATE_OR_ATTACH).build();\n+            subscribe(topic, subscriberId, options);\n+        }\n+\n+        void subscribe(ByteString topic, ByteString subscriberId,\n+                       org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions options) throws Exception {\n+            subscriber.subscribe(topic, subscriberId, options);\n+        }\n+\n+        void closeSubscription(ByteString topic, ByteString subscriberId) throws Exception {\n+            subscriber.closeSubscription(topic, subscriberId);\n+        }\n+\n+        void receiveInts(ByteString topic, ByteString subscriberId, int start, int num) throws Exception {\n+            IntMessageHandler msgHandler = new IntMessageHandler(topic, subscriberId, start, num);\n+            subscriber.startDelivery(topic, subscriberId, msgHandler);\n+            msgHandler.await(num, TimeUnit.SECONDS);\n+            subscriber.stopDelivery(topic, subscriberId);\n+        }\n+\n+    }\n+\n+    /**\n+     * Test compatability of message bound between version 4.0.0 and\n+     * current version.\n+     *\n+     * 1) message bound doesn't take effects on 4.0.0 server.\n+     * 2) message bound take effects on both 4.1.0 and current server\n+     */\n+    @Test\n+    public void testMessageBoundCompat() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"testMessageBoundCompat\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        // start bookkeeper 400\n+        BookKeeperCluster400 bkc400 = new BookKeeperCluster400(3);\n+        bkc400.start();\n+\n+        // start 400 server\n+        Server400 s400 = new Server400(zkUtil.getZooKeeperConnectString());\n+        s400.start();\n+\n+        org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions options5cur =\n+            org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.CREATE_OR_ATTACH)\n+            .setMessageBound(5).build();\n+\n+        ClientCurrent ccur = new ClientCurrent();\n+        ccur.subscribe(topic, subid, options5cur);\n+        ccur.closeSubscription(topic, subid);\n+        ccur.sendXExpectLastY(topic, subid, 50, 50);\n+\n+        // stop 400 servers\n+        s400.stop();\n+        bkc400.stop();\n+\n+        // start bookkeeper 410\n+        BookKeeperCluster410 bkc410 = new BookKeeperCluster410(3);\n+        bkc410.start();\n+\n+        // start 410 server\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        s410.start();\n+\n+        ccur.subscribe(topic, subid, options5cur);\n+        ccur.closeSubscription(topic, subid);\n+        ccur.sendXExpectLastY(topic, subid, 50, 5);\n+\n+        // stop 410 servers\n+        s410.stop();\n+        bkc410.stop();\n+\n+        // start bookkeeper current\n+        BookKeeperClusterCurrent bkccur = new BookKeeperClusterCurrent(3);\n+        bkccur.start();\n+\n+        // start current server\n+        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString());\n+        scur.start();\n+\n+        ccur.subscribe(topic, subid, options5cur);\n+        ccur.closeSubscription(topic, subid);\n+        ccur.sendXExpectLastY(topic, subid, 50, 5);\n+\n+        // stop current servers\n+        scur.stop();\n+        bkccur.stop();\n+\n+        ccur.close();\n+    }\n+\n+    /**\n+     * Test compatability of publish interface between version 4.1.0\n+     * and current verison.\n+     *\n+     * 1) 4.1.0 client could talk with current server.\n+     * 2) current client could talk with 4.1.0 server,\n+     *    but no message seq id would be returned\n+     */\n+    @Test\n+    public void testPublishCompat410() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestPublishCompat410\");\n+        ByteString data = ByteString.copyFromUtf8(\"testdata\");\n+\n+        // start bookkeeper 410\n+        BookKeeperCluster410 bkc410 = new BookKeeperCluster410(3);\n+        bkc410.start();\n+\n+        // start 410 server\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        s410.start();\n+\n+        ClientCurrent ccur = new ClientCurrent();\n+        Client410 c410 = new Client410();\n+\n+        // client c410 could publish message to 410 server\n+        assertNull(c410.publish(topic, data));\n+        // client ccur could publish message to 410 server\n+        // but no message seq id would be returned\n+        assertNull(ccur.publish(topic, data));\n+\n+        // stop 410 server\n+        s410.stop();\n+\n+        // start current server\n+        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString());\n+        scur.start();\n+\n+        // client c410 could publish message to 410 server\n+        // but no message seq id would be returned\n+        assertNull(c410.publish(topic, data));\n+        // client ccur could publish message to current server\n+        assertNotNull(ccur.publish(topic, data));\n+\n+        ccur.close();\n+        c410.close();\n+\n+        // stop current server\n+        scur.stop();\n+        bkc410.stop();\n+    }\n+\n+}"}]}

