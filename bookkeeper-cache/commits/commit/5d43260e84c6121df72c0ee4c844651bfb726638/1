{"sha":"5d43260e84c6121df72c0ee4c844651bfb726638","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1ZDQzMjYwZTg0YzYxMjFkZjcyYzBlZTRjODQ0NjUxYmZiNzI2NjM4","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-05-15T19:35:26Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-05-15T19:35:26Z"},"message":"BOOKKEEPER-1061: BookieWatcher should not do ZK blocking operations from ZK async callback thread\n\nIn some cases, the BookieWatcher can get the ZK event thread stuck. This happens when a ZK blocking request is issued from a ZK callback thread.\n\nWe should decouple the blocking requests in a separate executor to avoid deadlocking ZK client.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Jia Zhai <None>, Sijie Guo <sijie@apache.org>\n\nCloses #149 from merlimat/bookie-watcher-thread","tree":{"sha":"113b57dd53d20439a3a781ee1ba6bbe40cca70d8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/113b57dd53d20439a3a781ee1ba6bbe40cca70d8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5d43260e84c6121df72c0ee4c844651bfb726638","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5d43260e84c6121df72c0ee4c844651bfb726638","html_url":"https://github.com/apache/bookkeeper/commit/5d43260e84c6121df72c0ee4c844651bfb726638","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5d43260e84c6121df72c0ee4c844651bfb726638/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d863513719b696638e3369f4bbfde9abf5fd3d5f","url":"https://api.github.com/repos/apache/bookkeeper/commits/d863513719b696638e3369f4bbfde9abf5fd3d5f","html_url":"https://github.com/apache/bookkeeper/commit/d863513719b696638e3369f4bbfde9abf5fd3d5f"}],"stats":{"total":29,"additions":16,"deletions":13},"files":[{"sha":"e15f49a9a82c2a725b22a23879e2f34b55188294","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/5d43260e84c6121df72c0ee4c844651bfb726638/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/5d43260e84c6121df72c0ee4c844651bfb726638/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=5d43260e84c6121df72c0ee4c844651bfb726638","patch":"@@ -17,6 +17,8 @@\n  */\n package org.apache.bookkeeper.client;\n \n+import static org.apache.bookkeeper.util.SafeRunnable.safeRun;\n+\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collection;\n@@ -183,14 +185,18 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n \n         HashSet<BookieSocketAddress> newBookieAddrs = convertToBookieAddresses(children);\n \n-        synchronized (this) {\n-            Set<BookieSocketAddress> readonlyBookies = readOnlyBookieWatcher.getReadOnlyBookies();\n-            placementPolicy.onClusterChanged(newBookieAddrs, readonlyBookies);\n-            if (bk.conf.getDiskWeightBasedPlacementEnabled()) {\n-                // start collecting bookieInfo for the newly joined bookies, if any\n-                bk.bookieInfoReader.availableBookiesChanged(newBookieAddrs);\n+        // Update watcher outside ZK callback thread, to avoid deadlock in case some other\n+        // component is trying to do a blocking ZK operation\n+        bk.mainWorkerPool.submitOrdered(path, safeRun(() -> {\n+            synchronized (BookieWatcher.this) {\n+                Set<BookieSocketAddress> readonlyBookies = readOnlyBookieWatcher.getReadOnlyBookies();\n+                placementPolicy.onClusterChanged(newBookieAddrs, readonlyBookies);\n+                if (bk.conf.getDiskWeightBasedPlacementEnabled()) {\n+                    // start collecting bookieInfo for the newly joined bookies, if any\n+                    bk.bookieInfoReader.availableBookiesChanged(newBookieAddrs);\n+                }\n             }\n-        }\n+        }));\n \n         // we don't need to close clients here, because:\n         // a. the dead bookies will be removed from topology, which will not be used in new ensemble.\n@@ -236,13 +242,10 @@ public void readBookiesBlocking() throws InterruptedException, KeeperException {\n         final LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();\n         readBookies(new ChildrenCallback() {\n             public void processResult(int rc, String path, Object ctx, List<String> children) {\n-                try {\n+                bk.mainWorkerPool.submitOrdered(path, safeRun(() -> {\n                     BookieWatcher.this.processResult(rc, path, ctx, children);\n-                    queue.put(rc);\n-                } catch (InterruptedException e) {\n-                    logger.error(\"Interruped when trying to read bookies in a blocking fashion\");\n-                    throw new RuntimeException(e);\n-                }\n+                    queue.add(rc);\n+                }));\n             }\n         });\n         int rc = queue.take();"}]}

