{"sha":"5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1ZDQ0Y2Q4NGYwZTBmZGQ5ODk1ZWJkMWJmNzM0M2M4M2JjNDg5MGNi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T09:27:14Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-10-08T09:27:14Z"},"message":"undo bad copy\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.3.0@1630040 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"80cab6f26bf2ac6382fe97f335bfd8427516aaf7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/80cab6f26bf2ac6382fe97f335bfd8427516aaf7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","html_url":"https://github.com/apache/bookkeeper/commit/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5d44cd84f0e0fdd9895ebd1bf7343c83bc4890cb/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d6c94da5751258c7868c7fd3232bafaf55090af9","url":"https://api.github.com/repos/apache/bookkeeper/commits/d6c94da5751258c7868c7fd3232bafaf55090af9","html_url":"https://github.com/apache/bookkeeper/commit/d6c94da5751258c7868c7fd3232bafaf55090af9"}],"stats":{"total":189200,"additions":0,"deletions":189200},"files":[{"sha":"a06accd77058a221616015f9fb4ed0bf0cbb032d","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"removed","additions":0,"deletions":117,"changes":117,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,117 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.test;\n-\n-import java.io.File;\n-import java.io.IOException;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayList;\n-import java.util.Random;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.bookie.Bookie;\n-import org.apache.bookkeeper.client.BookKeeperTestClient;\n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.BookKeeper;\n-import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.apache.zookeeper.KeeperException;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.junit.Assert.*;\n-\n-/**\n- * Tests conditional set of the ledger metadata znode.\n- */\n-public class ConditionalSetTest extends BaseTestCase {\n-    private final static Logger LOG = LoggerFactory.getLogger(ConditionalSetTest.class);\n-\n-    byte[] entry;\n-    DigestType digestType;\n-    BookKeeper bkcReader;\n-\n-    public ConditionalSetTest(DigestType digestType) {\n-        super(3);\n-        this.digestType = digestType;\n-    }\n-\n-    @Override\n-    @Before\n-    public void setUp() throws IOException, Exception {\n-        super.setUp();\n-        entry = new byte[10]; // initialize the entries list\n-        this.bkcReader = new BookKeeperTestClient(baseClientConf);\n-    }\n-\n-    /**\n-     * Opens a ledger before the ledger writer, which triggers ledger recovery.\n-     * When the ledger writer tries to close the ledger, the close operation\n-     * should fail.\n-     *\n-     *\n-     * @throws IOException\n-     * @throws InterruptedException\n-     * @throws BKException\n-     * @throws KeeperException\n-     */\n-\n-    @Test(timeout=60000)\n-    public void testConditionalSet() throws IOException, InterruptedException,\n-                                    BKException, KeeperException {\n-        LedgerHandle lhWrite = bkc.createLedger(digestType, new byte[] { 'a',\n-                'b' });\n-        long ledgerId = lhWrite.getId();\n-        LOG.debug(\"Ledger ID: \" + lhWrite.getId());\n-        for (int i = 0; i < 10; i++) {\n-            LOG.debug(\"Adding entry: \" + i);\n-            lhWrite.addEntry(entry);\n-        }\n-\n-        /*\n-         * Open a ledger for reading, which triggers recovery, since the ledger\n-         * is still open.\n-         */\n-        LOG.debug(\"Instantiating new bookkeeper client.\");\n-        LedgerHandle lhRead = bkcReader.openLedger(lhWrite.getId(), digestType,\n-                                        new byte[] { 'a', 'b' });\n-        LOG.debug(\"Opened the ledger already\");\n-\n-        /*\n-         * Writer tries to close the ledger, and if should fail.\n-         */\n-        try{\n-            lhWrite.close();\n-            fail(\"Should have received an exception when trying to close the ledger.\");\n-        } catch (BKException e) {\n-            /*\n-             * Correctly failed to close the ledger\n-             */\n-        }\n-    }\n-}"},{"sha":"ac4e0e0af08c34291bb394fd5e6573ae9db7a20a","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,67 +0,0 @@\n-/**\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.test;\n-\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n-\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n-public class ConfigurationTest {\n-    @Test(timeout=60000)\n-    public void testConfigurationOverwrite() {\n-        System.clearProperty(\"zkServers\");\n-\n-        ServerConfiguration conf = new ServerConfiguration();\n-        assertEquals(null, conf.getZkServers());\n-\n-        // override setting from property\n-        System.setProperty(\"zkServers\", \"server1\");\n-        // it affects previous created configurations, if the setting is not overwrite\n-        assertEquals(\"server1\", conf.getZkServers());\n-\n-        ServerConfiguration conf2 = new ServerConfiguration();\n-        assertEquals(\"server1\", conf2.getZkServers());\n-\n-        System.clearProperty(\"zkServers\");\n-\n-        // load other configuration\n-        ServerConfiguration newConf = new ServerConfiguration();\n-        assertEquals(null, newConf.getZkServers());\n-        newConf.setZkServers(\"newserver\");\n-        assertEquals(\"newserver\", newConf.getZkServers());\n-        conf2.loadConf(newConf);\n-        assertEquals(\"newserver\", conf2.getZkServers());\n-    }\n-\n-    @Test(timeout=60000)\n-    public void testGetZkServers() {\n-        System.setProperty(\"zkServers\", \"server1:port1,server2:port2\");\n-        ServerConfiguration conf = new ServerConfiguration();\n-        ClientConfiguration clientConf = new ClientConfiguration();\n-        assertEquals(\"zookeeper connect string doesn't match in server configuration\",\n-                     \"server1:port1,server2:port2\", conf.getZkServers());\n-        assertEquals(\"zookeeper connect string doesn't match in client configuration\",\n-                     \"server1:port1,server2:port2\", clientConf.getZkServers());\n-    }\n-}"},{"sha":"e3107c31b778c51c9e1d6a44368df8ed1996d203","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","status":"removed","additions":0,"deletions":99,"changes":99,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,99 +0,0 @@\n-package org.apache.bookkeeper.test;\n-\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-import static org.junit.Assert.fail;\n-\n-import java.util.ArrayList;\n-\n-import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-/**\n- * Test Create/Delete ledgers\n- */\n-public class LedgerCreateDeleteTest extends BookKeeperClusterTestCase {\n-\n-    public LedgerCreateDeleteTest() {\n-        super(1);\n-    }\n-\n-    @Override\n-    @Before\n-    public void setUp() throws Exception {\n-        baseConf.setOpenFileLimit(1); \n-        super.setUp();\n-    }\n-\n-    @Test(timeout=60000)\n-    public void testCreateDeleteLedgers() throws Exception {\n-        int numLedgers = 3;\n-        ArrayList<Long> ledgers = new ArrayList<Long>();\n-        for (int i=0; i<numLedgers; i++) {\n-            LedgerHandle lh = bkc.createLedger(1, 1, DigestType.CRC32, \"bk is cool\".getBytes());\n-            for (int j=0; j<5; j++) {\n-                lh.addEntry(\"just test\".getBytes());\n-            }\n-            ledgers.add(lh.getId());\n-            lh.close();\n-        }\n-        for (long ledgerId : ledgers) {\n-            bkc.deleteLedger(ledgerId);\n-        }\n-        ledgers.clear();\n-        Thread.sleep(baseConf.getGcWaitTime() * 2);\n-        for (int i=0; i<numLedgers; i++) {\n-            LedgerHandle lh = bkc.createLedger(1, 1, DigestType.CRC32, \"bk is cool\".getBytes());\n-            for (int j=0; j<5; j++) {\n-                lh.addEntry(\"just test\".getBytes());\n-            }\n-            ledgers.add(lh.getId());\n-            lh.close();\n-        }\n-    }\n-\n-    @Test(timeout = 60000)\n-    public void testCreateLedgerWithBKNotEnoughBookiesException() throws Exception {\n-        try {\n-            bkc.createLedger(2, 2, DigestType.CRC32, \"bk is cool\".getBytes());\n-            fail(\"Should be able to throw BKNotEnoughBookiesException\");\n-        } catch (BKException.BKNotEnoughBookiesException bkn) {\n-            // expected\n-        }\n-    }\n-\n-    @Test(timeout = 60000)\n-    public void testCreateLedgerWithZKException() throws Exception {\n-        stopZKCluster();\n-        try {\n-            bkc.createLedger(1, 1, DigestType.CRC32, \"bk is cool\".getBytes());\n-            fail(\"Should be able to throw ZKException\");\n-        } catch (BKException.ZKException zke) {\n-            // expected\n-        }\n-    }\n-\n-}"},{"sha":"d45a2f31003e3fd5f24810a73ca5415cb42e843c","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"removed","additions":0,"deletions":173,"changes":173,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,173 +0,0 @@\n-package org.apache.bookkeeper.test;\n-\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-import java.io.File;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.concurrent.CountDownLatch;\n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.util.TestUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n-/**\n- * This class tests the ledger delete functionality both from the BookKeeper\n- * client and the server side.\n- */\n-public class LedgerDeleteTest extends MultiLedgerManagerTestCase {\n-    private final static Logger LOG = LoggerFactory.getLogger(LedgerDeleteTest.class);\n-    DigestType digestType;\n-\n-    public LedgerDeleteTest(String ledgerManagerFactory) {\n-        super(1);\n-        LOG.info(\"Running test case using ledger manager : \" + ledgerManagerFactory);\n-        this.digestType = DigestType.CRC32;\n-        // set ledger manager name\n-        baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n-        baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n-    }\n-\n-    @Before\n-    @Override\n-    public void setUp() throws Exception {\n-        // Set up the configuration properties needed.\n-        baseConf.setEntryLogSizeLimit(2 * 1024 * 1024L);\n-        baseConf.setGcWaitTime(1000);\n-        baseConf.setEntryLogFilePreAllocationEnabled(false);\n-        baseConf.setSortedLedgerStorageEnabled(false);\n-        super.setUp();\n-    }\n-\n-    /**\n-     * Common method to create ledgers and write entries to them.\n-     */\n-    private LedgerHandle[] writeLedgerEntries(int numLedgers, int msgSize, int numMsgs) throws Exception {\n-        // Create the ledgers\n-        LedgerHandle[] lhs = new LedgerHandle[numLedgers];\n-        for (int i = 0; i < numLedgers; i++) {\n-            lhs[i] = bkc.createLedger(1, 1, digestType, \"\".getBytes());\n-        }\n-\n-        // Create a dummy message string to write as ledger entries\n-        StringBuilder msgSB = new StringBuilder();\n-        for (int i = 0; i < msgSize; i++) {\n-            msgSB.append(\"a\");\n-        }\n-        String msg = msgSB.toString();\n-        final CountDownLatch completeLatch = new CountDownLatch(numMsgs*numLedgers);\n-        final AtomicInteger rc = new AtomicInteger(BKException.Code.OK);\n-        // Write all of the entries for all of the ledgers\n-        for (int i = 0; i < numMsgs; i++) {\n-            for (int j = 0; j < numLedgers; j++) {\n-                lhs[j].asyncAddEntry(msg.getBytes(), new AddCallback() {\n-                    public void addComplete(int rc2, LedgerHandle lh, long entryId, Object ctx) {\n-                        rc.compareAndSet(BKException.Code.OK, rc2);\n-                        completeLatch.countDown();\n-                    }\n-                }, null);\n-            }\n-        }\n-        completeLatch.await();\n-        if (rc.get() != BKException.Code.OK) {\n-            throw BKException.create(rc.get());\n-        }\n-\n-        // Return the ledger handles to the inserted ledgers and entries\n-        return lhs;\n-    }\n-\n-    /**\n-     * This test writes enough ledger entries to roll over the entry log file.\n-     * It will then delete all of the ledgers from the client and let the\n-     * server's EntryLogger garbage collector thread delete the initial entry\n-     * log file.\n-     *\n-     * @throws Exception\n-     */\n-    @Test(timeout=60000)\n-    public void testLedgerDelete() throws Exception {\n-        // Write enough ledger entries so that we roll over the initial entryLog (0.log)\n-        LedgerHandle[] lhs = writeLedgerEntries(3, 1024, 1024);\n-        // restart bookies to force rolling entry log files\n-        restartBookies();\n-\n-        // Delete all of these ledgers from the BookKeeper client\n-        for (LedgerHandle lh : lhs) {\n-            bkc.deleteLedger(lh.getId());\n-        }\n-        LOG.info(\"Finished deleting all ledgers so waiting for the GC thread to clean up the entryLogs\");\n-        Thread.sleep(2000);\n-\n-        // Verify that the first entry log (0.log) has been deleted from all of the Bookie Servers.\n-        for (File ledgerDirectory : tmpDirs) {\n-            assertFalse(\"Found the entry log file (0.log) that should have been deleted in ledgerDirectory: \"\n-                + ledgerDirectory, TestUtils.hasLogFiles(ledgerDirectory, true, 0));\n-        }\n-    }\n-\n-    /**\n-     * This test is similar to testLedgerDelete() except it will stop and\n-     * restart the Bookie Servers after it has written out the ledger entries.\n-     * On restart, there will be existing entry logs and ledger index files for\n-     * the EntryLogger and LedgerCache to read and store into memory.\n-     *\n-     * @throws Exception\n-     */\n-    @Test(timeout=60000)\n-    public void testLedgerDeleteWithExistingEntryLogs() throws Exception {\n-        // Write enough ledger entries so that we roll over the initial entryLog (0.log)\n-        LedgerHandle[] lhs = writeLedgerEntries(3, 1024, 1024);\n-\n-        /*\n-         * Shutdown the Bookie Servers and restart them using the same ledger\n-         * directories. This will test the reading of pre-existing ledger index\n-         * files in the LedgerCache during startup of a Bookie Server.\n-         */\n-        restartBookies();\n-\n-        // Delete all of these ledgers from the BookKeeper client\n-        for (LedgerHandle lh : lhs) {\n-            bkc.deleteLedger(lh.getId());\n-        }\n-        LOG.info(\"Finished deleting all ledgers so waiting for the GC thread to clean up the entryLogs\");\n-        Thread.sleep(2 * baseConf.getGcWaitTime());\n-\n-        /*\n-         * Verify that the first two entry logs ([0,1].log) have been deleted\n-         * from all of the Bookie Servers. When we restart the servers in this\n-         * test, a new entry log is created. We know then that the first two\n-         * entry logs should be deleted.\n-         */\n-        for (File ledgerDirectory : tmpDirs) {\n-            assertFalse(\"Found the entry log file ([0,1].log) that should have been deleted in ledgerDirectory: \"\n-                + ledgerDirectory, TestUtils.hasLogFiles(ledgerDirectory, true, 0, 1));\n-        }\n-    }\n-\n-}"},{"sha":"778a804822c7752764899b554c5bd8a8865ab4c8","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,119 +0,0 @@\n-package org.apache.bookkeeper.test;\n-\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.concurrent.Executors;\n-\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.proto.BookieClient;\n-import org.apache.bookkeeper.proto.BookieProtocol;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-import org.jboss.netty.buffer.ChannelBuffers;\n-import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n-import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * This class tests BookieClient. It just sends the a new entry to itself.\n- *\n- *\n- *\n- */\n-\n-class LoopbackClient implements WriteCallback {\n-    private final static Logger LOG = LoggerFactory.getLogger(LoopbackClient.class);\n-    BookieClient client;\n-    static int recvTimeout = 2000;\n-    long begin = 0;\n-    int limit;\n-    OrderedSafeExecutor executor;\n-\n-    static class Counter {\n-        int c;\n-        int limit;\n-\n-        Counter(int limit) {\n-            this.c = 0;\n-            this.limit = limit;\n-        }\n-\n-        synchronized void increment() {\n-            if (++c == limit)\n-                this.notify();\n-        }\n-    }\n-\n-    LoopbackClient(ClientSocketChannelFactory channelFactory, OrderedSafeExecutor executor, long begin, int limit) throws IOException {\n-        this.client = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n-        this.begin = begin;\n-    }\n-\n-    void write(long ledgerId, long entry, byte[] data, BookieSocketAddress addr, WriteCallback cb, Object ctx)\n-            throws IOException, InterruptedException {\n-        LOG.info(\"Ledger id: \" + ledgerId + \", Entry: \" + entry);\n-        byte[] passwd = new byte[20];\n-        Arrays.fill(passwd, (byte) 'a');\n-\n-        client.addEntry(addr, ledgerId, passwd, entry, ChannelBuffers.wrappedBuffer(data), cb, ctx, BookieProtocol.FLAG_NONE);\n-    }\n-\n-    public void writeComplete(int rc, long ledgerId, long entryId, BookieSocketAddress addr, Object ctx) {\n-        Counter counter = (Counter) ctx;\n-        counter.increment();\n-    }\n-\n-    public static void main(String args[]) {\n-        byte[] data = new byte[Integer.parseInt(args[0])];\n-        Integer limit = Integer.parseInt(args[1]);\n-        Counter c = new Counter(limit);\n-        long ledgerId = Long.valueOf(\"0\").longValue();\n-        long begin = System.currentTimeMillis();\n-\n-        LoopbackClient lb;\n-        ClientSocketChannelFactory channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n-                .newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(2, \"BookieClientScheduler\");\n-        try {\n-            BookieSocketAddress addr = new BookieSocketAddress(\"127.0.0.1\", Integer.valueOf(args[2]).intValue());\n-            lb = new LoopbackClient(channelFactory, executor, begin, limit.intValue());\n-\n-            for (int i = 0; i < limit; i++) {\n-                lb.write(ledgerId, i, data, addr, lb, c);\n-            }\n-\n-            synchronized (c) {\n-                c.wait();\n-                System.out.println(\"Time to write all entries: \" + (System.currentTimeMillis() - begin));\n-            }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (InterruptedException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-\n-}"},{"sha":"b4026b40d44b6668d5161b82fe7c9bab20402af4","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,64 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.bookkeeper.test;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-/**\n- * Running test case using different ledger managers.\n- */\n-@RunWith(Parameterized.class)\n-public abstract class MultiLedgerManagerMultiDigestTestCase extends BookKeeperClusterTestCase {\n-    static final Logger LOG = LoggerFactory.getLogger(MultiLedgerManagerMultiDigestTestCase.class);\n-\n-    public MultiLedgerManagerMultiDigestTestCase(int numBookies) {\n-        super(numBookies);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> configs() {\n-        String[] ledgerManagers = {\n-            \"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.MSLedgerManagerFactory\",\n-        };\n-        ArrayList<Object[]> cfgs = new ArrayList<Object[]>(ledgerManagers.length);\n-        DigestType[] digestTypes = new DigestType[] { DigestType.MAC, DigestType.CRC32 };\n-        for (String lm : ledgerManagers) {\n-            for (DigestType type : digestTypes) {\n-                cfgs.add(new Object[] { lm, type });\n-            }\n-        }\n-        return cfgs;\n-    }\n-\n-}"},{"sha":"cba8be4cccde1ec461fd19231179e9ef5f3bf76c","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,56 +0,0 @@\n-package org.apache.bookkeeper.test;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameters;\n-\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-import org.apache.bookkeeper.meta.LedgerManagerFactory;\n-\n-/**\n- * Test Case run over different ledger manager.\n- */\n-@RunWith(Parameterized.class)\n-public abstract class MultiLedgerManagerTestCase extends BookKeeperClusterTestCase {\n-\n-    public MultiLedgerManagerTestCase(int numBookies) {\n-        super(numBookies);\n-    }\n-\n-    @Parameters\n-    public static Collection<Object[]> configs() {\n-        String[] ledgerManagers = new String[] {\n-            \"org.apache.bookkeeper.meta.FlatLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\",\n-            \"org.apache.bookkeeper.meta.MSLedgerManagerFactory\",\n-        };\n-        ArrayList<Object[]> cfgs = new ArrayList<Object[]>(ledgerManagers.length);\n-        for (String lm : ledgerManagers) {\n-            cfgs.add(new Object[] { lm });\n-        }\n-        return cfgs;\n-    }\n-}"},{"sha":"16ef0c52e55bad00f3a046a390ffa9b62c5b9f20","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","status":"removed","additions":0,"deletions":308,"changes":308,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,308 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.test;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Enumeration;\n-import java.util.List;\n-import java.util.NoSuchElementException;\n-import java.util.concurrent.atomic.AtomicBoolean;\n-import org.apache.bookkeeper.client.AsyncCallback;\n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.BookKeeper;\n-import org.apache.bookkeeper.client.BookKeeperTestClient;\n-import org.apache.bookkeeper.client.LedgerEntry;\n-import org.apache.bookkeeper.client.LedgerHandle;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.junit.Assert.*;\n-import static com.google.common.base.Charsets.UTF_8;\n-\n-public class MultipleThreadReadTest extends BookKeeperClusterTestCase {\n-    static Logger LOG = LoggerFactory.getLogger(MultipleThreadReadTest.class);\n-\n-    BookKeeper.DigestType digestType;\n-    byte [] ledgerPassword = \"aaa\".getBytes();\n-    private int entriesPerLedger = 100;\n-    final SyncObj mainSyncObj = new SyncObj();\n-\n-    class SyncObj {\n-        volatile int counter;\n-        boolean failed;\n-        public SyncObj() {\n-            counter = 0;\n-            failed = false;\n-        }\n-    }\n-\n-    BookKeeperTestClient readBkc;\n-\n-    public MultipleThreadReadTest() {\n-        super(6);\n-        this.digestType = BookKeeper.DigestType.CRC32;\n-        baseClientConf.setAddEntryTimeout(20);\n-    }\n-\n-    @Override\n-    public void setUp() throws Exception {\n-        super.setUp();\n-        readBkc = new BookKeeperTestClient(baseClientConf);\n-    }\n-\n-    private Thread getWriterThread(final int tNo, final LedgerHandle lh, final AtomicBoolean resultHolder) {\n-        Thread t = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                final SyncObj tSync = new SyncObj();\n-                for (int j = 0; j < entriesPerLedger; j++) {\n-                    final byte[] entry = (\"Entry-\" + tNo + \"-\" + j).getBytes();\n-                    lh.asyncAddEntry(entry, new AsyncCallback.AddCallback() {\n-                        @Override\n-                        public void addComplete(int rc, LedgerHandle ledgerHandle, long eid, Object o) {\n-                            SyncObj syncObj = (SyncObj)o;\n-                            synchronized (syncObj) {\n-                                if (rc != BKException.Code.OK) {\n-                                    LOG.error(\"Add entry {} failed : rc = {}\", new String(entry, UTF_8), rc);\n-                                    syncObj.failed = true;\n-                                    syncObj.notify();\n-                                } else {\n-                                    syncObj.counter++;\n-                                    syncObj.notify();\n-                                }\n-                            }\n-                        }\n-                    }, tSync);\n-                }\n-                synchronized (tSync) {\n-                    while (!tSync.failed && tSync.counter < entriesPerLedger) {\n-                        try {\n-                            tSync.wait();\n-                        } catch (InterruptedException e) {\n-                            Thread.currentThread().interrupt();\n-                        }\n-                    }\n-                    resultHolder.set(!tSync.failed);\n-                }\n-                // close this handle\n-                try {\n-                    lh.close();\n-                } catch (InterruptedException ie) {\n-                    LOG.error(\"Interrupted on closing ledger handle {} : \", lh.getId(), ie);\n-                    Thread.currentThread().interrupt();\n-                } catch (BKException bke) {\n-                    LOG.error(\"Error on closing ledger handle {} : \", lh.getId(), bke);\n-                }\n-            }\n-        }, \"WriteThread(Lid=\" + lh.getId() + \")\");\n-        t.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n-            @Override\n-            public void uncaughtException(Thread thread, Throwable throwable) {\n-                synchronized (mainSyncObj) {\n-                    mainSyncObj.failed = true;\n-                }\n-            }\n-        });\n-        return t;\n-    }\n-\n-    private Thread getReaderThread(final int tNo, final LedgerHandle lh, final int ledgerNumber,\n-                                   final AtomicBoolean resultHolder) {\n-        Thread t = new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                //LedgerHandle lh = clientList.get(0).openLedger(ledgerIds.get(tNo % numLedgers), digestType, ledgerPassword);\n-                long startEntryId = 0;\n-                long endEntryId;\n-                long eid = 0;\n-                while (startEntryId <= entriesPerLedger - 1) {\n-                    endEntryId = Math.min(startEntryId + 10 - 1, entriesPerLedger - 1);\n-                    final long numEntries = (endEntryId - startEntryId) + 1;\n-                    boolean success = true;\n-                    try {\n-                        Enumeration<LedgerEntry> list = lh.readEntries(startEntryId, endEntryId);\n-                        for (int j = 0; j < numEntries; j++) {\n-                            LedgerEntry e;\n-                            try {\n-                                e = list.nextElement();\n-                            } catch (NoSuchElementException exception) {\n-                                success = false;\n-                                break;\n-                            }\n-                            long curEid = eid++;\n-                            if (e.getEntryId() != curEid) {\n-                                LOG.error(\"Expected entry id {} for ledger {} but {} found.\",\n-                                          new Object[] { curEid, lh.getId(), e.getEntryId() });\n-                                success = false;\n-                                break;\n-                            }\n-                            byte[] data = e.getEntry();\n-                            if (!Arrays.equals((\"Entry-\" + ledgerNumber + \"-\" + e.getEntryId()).getBytes(), data)) {\n-                                LOG.error(\"Expected entry data 'Entry-{}-{}' but {} found for ledger {}.\",\n-                                          new Object[] { ledgerNumber, e.getEntryId(), new String(data, UTF_8), lh.getId() });\n-                                success = false;\n-                                break;\n-                            }\n-                        }\n-                        if (success) {\n-                            success = !list.hasMoreElements();\n-                            if (!success) {\n-                                LOG.error(\"Found more entries returned on reading ({}-{}) from ledger {}.\",\n-                                          new Object[] { startEntryId, endEntryId, lh.getId() });\n-                            }\n-                        }\n-                    } catch (InterruptedException ie) {\n-                        LOG.error(\"Interrupted on reading entries ({} - {}) from ledger {} : \",\n-                                  new Object[] { startEntryId, endEntryId, lh.getId(), ie });\n-                        Thread.currentThread().interrupt();\n-                        success = false;\n-                    } catch (BKException bke) {\n-                        LOG.error(\"Failed on reading entries ({} - {}) from ledger {} : \",\n-                                  new Object[] { startEntryId, endEntryId, lh.getId(), bke });\n-                        success = false;\n-                    }\n-                    resultHolder.set(success);\n-                    if (!success) {\n-                        break;\n-                    }\n-                    startEntryId = endEntryId + 1;\n-                }\n-            }\n-        }, \"ReadThread(Tid =\" + tNo  + \", Lid=\" + lh.getId() + \")\");\n-        t.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {\n-            @Override\n-            public void uncaughtException(Thread thread, Throwable throwable) {\n-                LOG.error(\"Uncaught exception in thread {} : \", thread.getName(), throwable);\n-                synchronized (mainSyncObj) {\n-                    mainSyncObj.failed = true;\n-                }\n-            }\n-        });\n-        return t;\n-    }\n-\n-    /**\n-     * Ledger L is handled threads [L, T+(T/L), T+2*(T/L) ... ]\n-     * Reads are simultaneous, writes are sequential.\n-     * @throws java.io.IOException\n-     */\n-    public void multiLedgerMultiThreadRead(final int numLedgers,\n-                                           final int numThreads) throws IOException {\n-        assertTrue(numLedgers != 0 && numThreads >= numLedgers && numThreads % numLedgers == 0);\n-\n-        // We create numThread/numLedger clients so that each client can be used to open a handle.\n-        try {\n-            final List<LedgerHandle> oldLedgerHandles = new ArrayList<LedgerHandle>();\n-            final List<Long> ledgerIds = new ArrayList<Long>();\n-            List<Thread> threadList = new ArrayList<Thread>();\n-            List<AtomicBoolean> writeResults = new ArrayList<AtomicBoolean>();\n-            // Start write threads.\n-            // Only one thread writes to a ledger, so just use numLedgers instead.\n-            for (int i = 0; i < numLedgers; i++) {\n-                LedgerHandle lh = bkc.createLedger(digestType, ledgerPassword);\n-                oldLedgerHandles.add(lh);\n-                ledgerIds.add(lh.getId());\n-                AtomicBoolean writeResult = new AtomicBoolean(false);\n-                writeResults.add(writeResult);\n-                Thread t;\n-                threadList.add(t = getWriterThread(i, oldLedgerHandles.get(i), writeResult));\n-                t.start();\n-            }\n-            // Wait for the threads to complete\n-            for (Thread t : threadList) {\n-                t.join();\n-            }\n-            synchronized (mainSyncObj) {\n-                if (mainSyncObj.failed) {\n-                    fail(\"Test failed because we encountered uncaught exception on adding entries.\");\n-                }\n-            }\n-            for (int i = 0; i < numLedgers; i++) {\n-                assertTrue(\"Failed on adding entries for ledger \" + oldLedgerHandles.get(i).getId(),\n-                           writeResults.get(i).get());\n-            }\n-            // Close the ledger handles.\n-            for (LedgerHandle lh : oldLedgerHandles) {\n-                try {\n-                    lh.close();\n-                } catch (BKException.BKLedgerClosedException e) {\n-                } catch (Exception e) {\n-                    fail(\"Error while closing handle.\");\n-                }\n-            }\n-            // Now try to read.\n-            mainSyncObj.failed = false;\n-            threadList.clear();\n-\n-            List<AtomicBoolean> readResults = new ArrayList<AtomicBoolean>();\n-            for (int i = 0; i < numThreads; i++) {\n-                AtomicBoolean readResult = new AtomicBoolean(false);\n-                Thread t;\n-                threadList.add(t = getReaderThread(i, readBkc.openLedger(ledgerIds.get(i % numLedgers),\n-                        digestType, ledgerPassword), i % numLedgers, readResult));\n-                readResults.add(readResult);\n-                t.start();\n-            }\n-            // Wait for the threads to complete.\n-            for (Thread t : threadList) {\n-                t.join();\n-            }\n-            synchronized (mainSyncObj) {\n-                if (mainSyncObj.failed) {\n-                    fail(\"Test failed because we encountered uncaught exception on reading entries\");\n-                }\n-            }\n-            for (AtomicBoolean readResult : readResults) {\n-                assertTrue(\"Failed on read entries\", readResult.get());\n-            }\n-        } catch (BKException e) {\n-            LOG.error(\"Test failed\", e);\n-            fail(\"Test failed due to BookKeeper exception\");\n-        } catch (InterruptedException e) {\n-            LOG.error(\"Test failed\", e);\n-            fail(\"Test failed due to interruption\");\n-        }\n-    }\n-\n-    @Test(timeout = 60000)\n-    public void test10Ledgers20ThreadsRead() throws IOException {\n-        multiLedgerMultiThreadRead(10, 20);\n-    }\n-\n-    @Test(timeout = 60000)\n-    public void test10Ledgers200ThreadsRead() throws IOException {\n-        multiLedgerMultiThreadRead(10, 200);\n-    }\n-\n-    @Test(timeout = 60000)\n-    public void test1Ledger20ThreadsRead() throws IOException {\n-        multiLedgerMultiThreadRead(1, 20);\n-    }\n-\n-    @Override\n-    public void tearDown() throws Exception {\n-        readBkc.close();\n-        super.tearDown();\n-    }\n-}"},{"sha":"fe68e29ae582be31fcafbed92eec66a397a50e0e","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,55 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.test;\n-\n-import java.net.ServerSocket;\n-import java.io.IOException;\n-/**\n- * Port manager allows a base port to be specified on the commandline.\n- * Tests will then use ports, counting up from this base port.\n- * This allows multiple instances of the bookkeeper tests to run at once.\n- */\n-public class PortManager {\n-    private static int nextPort = getBasePort();\n-\n-    public synchronized static int nextFreePort() {\n-        while (true) {\n-            ServerSocket ss = null;\n-            try {\n-                int port = nextPort++;\n-                ss = new ServerSocket(port);\n-                ss.setReuseAddress(true);\n-                return port;\n-            } catch (IOException ioe) {\n-            } finally {\n-                if (ss != null) {\n-                    try {\n-                        ss.close();\n-                    } catch (IOException ioe) {}\n-                }\n-            }\n-        }\n-    }\n-\n-    private static int getBasePort() {\n-        return Integer.valueOf(System.getProperty(\"test.basePort\", \"15000\"));\n-    }\n-}\n\\ No newline at end of file"},{"sha":"8ccd07d851b0af5293ffb6a68827da586927aa81","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"removed","additions":0,"deletions":297,"changes":297,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,297 +0,0 @@\n-/**\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.test;\n-\n-import java.io.File;\n-import java.util.Enumeration;\n-\n-import org.apache.bookkeeper.bookie.Bookie;\n-import org.apache.bookkeeper.bookie.LedgerDirsManager;\n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.client.LedgerEntry;\n-import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.junit.Test;\n-\n-import static org.junit.Assert.*;\n-\n-/**\n- * Test to verify the readonly feature of bookies\n- */\n-public class ReadOnlyBookieTest extends BookKeeperClusterTestCase {\n-\n-    public ReadOnlyBookieTest() {\n-        super(2);\n-        baseConf.setSortedLedgerStorageEnabled(false);\n-        baseConf.setEntryLogFilePreAllocationEnabled(false);\n-    }\n-\n-    /**\n-     * Check readonly bookie\n-     */\n-    @Test(timeout = 60000)\n-    public void testBookieShouldServeAsReadOnly() throws Exception {\n-        killBookie(0);\n-        baseConf.setReadOnlyModeEnabled(true);\n-        startNewBookie();\n-        LedgerHandle ledger = bkc.createLedger(2, 2, DigestType.MAC,\n-                \"\".getBytes());\n-\n-        // Check new bookie with readonly mode enabled.\n-        File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n-        assertEquals(\"Only one ledger dir should be present\", 1,\n-                ledgerDirs.length);\n-        Bookie bookie = bs.get(1).getBookie();\n-        LedgerDirsManager ledgerDirsManager = bookie.getLedgerDirsManager();\n-\n-        for (int i = 0; i < 10; i++) {\n-            ledger.addEntry(\"data\".getBytes());\n-        }\n-\n-        // Now add the current ledger dir to filled dirs list\n-        ledgerDirsManager.addToFilledDirs(new File(ledgerDirs[0], \"current\"));\n-\n-        try {\n-            ledger.addEntry(\"data\".getBytes());\n-            fail(\"Should fail to add entry since there isn't enough bookies alive.\");\n-        } catch (BKException.BKNotEnoughBookiesException e) {\n-            // Expected\n-        }\n-\n-        assertTrue(\"Bookie should be running and converted to readonly mode\",\n-                bookie.isRunning() && bookie.isReadOnly());\n-\n-        // Now kill the other bookie and read entries from the readonly bookie\n-        killBookie(0);\n-\n-        Enumeration<LedgerEntry> readEntries = ledger.readEntries(0, 9);\n-        while (readEntries.hasMoreElements()) {\n-            LedgerEntry entry = readEntries.nextElement();\n-            assertEquals(\"Entry should contain correct data\", \"data\",\n-                    new String(entry.getEntry()));\n-        }\n-    }\n-\n-    @Test(timeout = 60000)\n-    public void testBookieShouldTurnWritableFromReadOnly() throws Exception {\n-        killBookie(0);\n-        baseConf.setReadOnlyModeEnabled(true);\n-        startNewBookie();\n-        LedgerHandle ledger = bkc.createLedger(2, 2, DigestType.MAC,\n-                \"\".getBytes());\n-\n-        // Check new bookie with readonly mode enabled.\n-        File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n-        assertEquals(\"Only one ledger dir should be present\", 1,\n-                ledgerDirs.length);\n-        Bookie bookie = bs.get(1).getBookie();\n-        LedgerDirsManager ledgerDirsManager = bookie.getLedgerDirsManager();\n-\n-        for (int i = 0; i < 10; i++) {\n-            ledger.addEntry(\"data\".getBytes());\n-        }\n-\n-        File testDir = new File(ledgerDirs[0], \"current\");\n-\n-        // Now add the current ledger dir to filled dirs list\n-        ledgerDirsManager.addToFilledDirs(testDir);\n-\n-        try {\n-            ledger.addEntry(\"data\".getBytes());\n-            fail(\"Should fail to add entry since there isn't enough bookies alive.\");\n-        } catch (BKException.BKNotEnoughBookiesException e) {\n-            // Expected\n-        }\n-        LOG.info(\"bookie is running {}, readonly {}.\", bookie.isRunning(), bookie.isReadOnly());\n-        assertTrue(\"Bookie should be running and converted to readonly mode\",\n-                bookie.isRunning() && bookie.isReadOnly());\n-\n-        // refresh the bookkeeper client\n-        bkc.readBookiesBlocking();\n-        // should fail to create ledger\n-        try {\n-            bkc.createLedger(2, 2, DigestType.MAC, \"\".getBytes());\n-            fail(\"Should fail to create a ledger since there isn't enough bookies alive.\");\n-        } catch (BKException.BKNotEnoughBookiesException bke) {\n-            // Expected.\n-        }\n-\n-        // Now add the current ledger dir back to writable dirs list\n-        ledgerDirsManager.addToWritableDirs(testDir, true);\n-\n-        LOG.info(\"bookie is running {}, readonly {}.\", bookie.isRunning(), bookie.isReadOnly());\n-        assertTrue(\"Bookie should be running and converted back to writable mode\", bookie.isRunning()\n-                && !bookie.isReadOnly());\n-        // force client to read bookies\n-        bkc.readBookiesBlocking();\n-        LedgerHandle newLedger = bkc.createLedger(2, 2, DigestType.MAC, \"\".getBytes());\n-        for (int i = 0; i < 10; i++) {\n-            newLedger.addEntry(\"data\".getBytes());\n-        }\n-        Enumeration<LedgerEntry> readEntries = newLedger.readEntries(0, 9);\n-        while (readEntries.hasMoreElements()) {\n-            LedgerEntry entry = readEntries.nextElement();\n-            assertEquals(\"Entry should contain correct data\", \"data\", new String(entry.getEntry()));\n-        }\n-    }\n-\n-    /**\n-     * check readOnlyModeEnabled=false\n-     */\n-    @Test(timeout = 60000)\n-    public void testBookieShutdownIfReadOnlyModeNotEnabled() throws Exception {\n-        File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n-        assertEquals(\"Only one ledger dir should be present\", 1,\n-                ledgerDirs.length);\n-        Bookie bookie = bs.get(1).getBookie();\n-        LedgerHandle ledger = bkc.createLedger(2, 2, DigestType.MAC,\n-                \"\".getBytes());\n-        LedgerDirsManager ledgerDirsManager = bookie.getLedgerDirsManager();\n-\n-        for (int i = 0; i < 10; i++) {\n-            ledger.addEntry(\"data\".getBytes());\n-        }\n-\n-        // Now add the current ledger dir to filled dirs list\n-        ledgerDirsManager.addToFilledDirs(new File(ledgerDirs[0], \"current\"));\n-\n-        try {\n-            ledger.addEntry(\"data\".getBytes());\n-            fail(\"Should fail to add entry since there isn't enough bookies alive.\");\n-        } catch (BKException.BKNotEnoughBookiesException e) {\n-            // Expected\n-        }\n-\n-        // wait for up to 10 seconds for bookie to shut down\n-        for (int i = 0; i < 10 && bookie.isAlive(); i++) {\n-            Thread.sleep(1000);\n-        }\n-        assertFalse(\"Bookie should shutdown if readOnlyMode not enabled\",\n-                bookie.isAlive());\n-    }\n-\n-    /**\n-     * Check multiple ledger dirs\n-     */\n-    @Test(timeout = 60000)\n-    public void testBookieContinueWritingIfMultipleLedgersPresent()\n-            throws Exception {\n-        startNewBookieWithMultipleLedgerDirs(2);\n-\n-        File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n-        assertEquals(\"Only one ledger dir should be present\", 2,\n-                ledgerDirs.length);\n-        Bookie bookie = bs.get(1).getBookie();\n-        LedgerHandle ledger = bkc.createLedger(2, 2, DigestType.MAC,\n-                \"\".getBytes());\n-        LedgerDirsManager ledgerDirsManager = bookie.getLedgerDirsManager();\n-\n-        for (int i = 0; i < 10; i++) {\n-            ledger.addEntry(\"data\".getBytes());\n-        }\n-\n-        // Now add the current ledger dir to filled dirs list\n-        ledgerDirsManager.addToFilledDirs(new File(ledgerDirs[0], \"current\"));\n-        for (int i = 0; i < 10; i++) {\n-            ledger.addEntry(\"data\".getBytes());\n-        }\n-        assertEquals(\"writable dirs should have one dir\", 1, ledgerDirsManager\n-                .getWritableLedgerDirs().size());\n-        assertTrue(\"Bookie should shutdown if readOnlyMode not enabled\",\n-                bookie.isAlive());\n-    }\n-\n-    private void startNewBookieWithMultipleLedgerDirs(int numOfLedgerDirs)\n-            throws Exception {\n-        ServerConfiguration conf = bsConfs.get(1);\n-        killBookie(1);\n-\n-        File[] ledgerDirs = new File[numOfLedgerDirs];\n-        for (int i = 0; i < numOfLedgerDirs; i++) {\n-            File dir = File.createTempFile(\"bookie\", \"test\");\n-            tmpDirs.add(dir);\n-            dir.delete();\n-            dir.mkdir();\n-            ledgerDirs[i] = dir;\n-        }\n-\n-        ServerConfiguration newConf = newServerConfiguration(\n-                conf.getBookiePort() + 1, zkUtil.getZooKeeperConnectString(),\n-                ledgerDirs[0], ledgerDirs);\n-        bsConfs.add(newConf);\n-        bs.add(startBookie(newConf));\n-    }\n-\n-    /**\n-     * Test ledger creation with readonly bookies\n-     */\n-    @Test(timeout = 60000)\n-    public void testLedgerCreationShouldFailWithReadonlyBookie() throws Exception {\n-        killBookie(1);\n-        baseConf.setReadOnlyModeEnabled(true);\n-        startNewBookie();\n-        bs.get(1).getBookie().transitionToReadOnlyMode();\n-        try {\n-            bkc.readBookiesBlocking();\n-            bkc.createLedger(2, 2, DigestType.CRC32, \"\".getBytes());\n-            fail(\"Must throw exception, as there is one readonly bookie\");\n-        } catch (BKException e) {\n-            // Expected\n-        }\n-    }\n-\n-    /**\n-     * Try to read closed ledger from restarted ReadOnlyBookie.\n-     */\n-    public void testReadFromReadOnlyBookieShouldBeSuccess() throws Exception {\n-        LedgerHandle ledger = bkc.createLedger(2, 2, DigestType.MAC, \"\".getBytes());\n-        for (int i = 0; i < 10; i++) {\n-            ledger.addEntry(\"data\".getBytes());\n-        }\n-        ledger.close();\n-        bsConfs.get(1).setReadOnlyModeEnabled(true);\n-        bsConfs.get(1).setDiskCheckInterval(500);\n-        restartBookies();\n-\n-        // Check new bookie with readonly mode enabled.\n-        File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n-        assertEquals(\"Only one ledger dir should be present\", 1, ledgerDirs.length);\n-        Bookie bookie = bs.get(1).getBookie();\n-        LedgerDirsManager ledgerDirsManager = bookie.getLedgerDirsManager();\n-\n-        // Now add the current ledger dir to filled dirs list\n-        ledgerDirsManager.addToFilledDirs(new File(ledgerDirs[0], \"current\"));\n-\n-        // Wait till Bookie converts to ReadOnly mode.\n-        Thread.sleep(1000);\n-        assertTrue(\"Bookie should be converted to readonly mode\", bookie.isRunning() && bookie.isReadOnly());\n-\n-        // Now kill the other bookie and read entries from the readonly bookie\n-        killBookie(0);\n-\n-        Enumeration<LedgerEntry> readEntries = ledger.readEntries(0, 9);\n-        while (readEntries.hasMoreElements()) {\n-            LedgerEntry entry = readEntries.nextElement();\n-            assertEquals(\"Entry should contain correct data\", \"data\", new String(entry.getEntry()));\n-        }\n-    }\n-}"},{"sha":"89939b414736f201ed1f6659a6ccb982f0d00d7a","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"removed","additions":0,"deletions":831,"changes":831,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,831 +0,0 @@\n-/**\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.test;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n-\n-import java.io.File;\n-import java.net.InetAddress;\n-import java.util.Arrays;\n-import java.util.Enumeration;\n-\n-import org.apache.bookkeeper.bookie.Bookie;\n-import org.apache.bookkeeper.bookie.BookieException;\n-import org.apache.bookkeeper.bookie.FileSystemUpgrade;\n-import org.apache.bookkeeper.client.BookKeeperAdmin;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.conf.TestBKConfiguration;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class TestBackwardCompat {\n-    private final static Logger LOG = LoggerFactory.getLogger(TestBackwardCompat.class);\n-\n-    private static ZooKeeperUtil zkUtil = new ZooKeeperUtil();;\n-    private static byte[] ENTRY_DATA = \"ThisIsAnEntry\".getBytes();\n-\n-    static void waitUp(int port) throws Exception {\n-        while(zkUtil.getZooKeeperClient().exists(\n-                      \"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port,\n-                      false) == null) {\n-            Thread.sleep(500);\n-        }\n-    }\n-    @Before\n-    public void startZooKeeperServer() throws Exception {\n-        zkUtil.startServer();\n-    }\n-\n-    @After\n-    public void stopZooKeeperServer() throws Exception {\n-        zkUtil.killServer();\n-    }\n-\n-    /**\n-     * Version 4.0.0 classes\n-     */\n-    static class Server400 {\n-        org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration conf;\n-        org.apache.bk_v4_0_0.bookkeeper.proto.BookieServer server = null;\n-\n-        Server400(File journalDir, File ledgerDir, int port) throws Exception {\n-            conf = new org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration();\n-            conf.setBookiePort(port);\n-            conf.setZkServers(zkUtil.getZooKeeperConnectString());\n-            conf.setJournalDirName(journalDir.getPath());\n-            conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n-        }\n-\n-        void start() throws Exception {\n-            server = new org.apache.bk_v4_0_0.bookkeeper.proto.BookieServer(conf);\n-            server.start();\n-            waitUp(conf.getBookiePort());\n-        }\n-\n-        org.apache.bk_v4_0_0.bookkeeper.conf.ServerConfiguration getConf() {\n-            return conf;\n-        }\n-\n-        void stop() throws Exception {\n-            if (server != null) {\n-                server.shutdown();\n-            }\n-        }\n-    }\n-\n-    static class Ledger400 {\n-        org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper bk;\n-        org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle lh;\n-\n-        private Ledger400(org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper bk,\n-                          org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle lh) {\n-            this.bk = bk;\n-            this.lh = lh;\n-        }\n-\n-        static Ledger400 newLedger() throws Exception {\n-            org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle newlh\n-                = newbk.createLedger(1, 1,\n-                                  org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                  \"foobar\".getBytes());\n-            return new Ledger400(newbk, newlh);\n-        }\n-\n-        static Ledger400 openLedger(long id) throws Exception {\n-            org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bk_v4_0_0.bookkeeper.client.LedgerHandle newlh\n-                = newbk.openLedger(id,\n-                                org.apache.bk_v4_0_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                \"foobar\".getBytes());\n-            return new Ledger400(newbk, newlh);\n-        }\n-\n-        long getId() {\n-            return lh.getId();\n-        }\n-\n-        void write100() throws Exception {\n-            for (int i = 0; i < 100; i++) {\n-                lh.addEntry(ENTRY_DATA);\n-            }\n-        }\n-\n-        long readAll() throws Exception {\n-            long count = 0;\n-            Enumeration<org.apache.bk_v4_0_0.bookkeeper.client.LedgerEntry> entries\n-                = lh.readEntries(0, lh.getLastAddConfirmed());\n-            while (entries.hasMoreElements()) {\n-                assertTrue(\"entry data doesn't match\",\n-                           Arrays.equals(entries.nextElement().getEntry(), ENTRY_DATA));\n-                count++;\n-            }\n-            return count;\n-        }\n-\n-        void close() throws Exception {\n-            try {\n-                if (lh != null) {\n-                    lh.close();\n-                }\n-            } finally {\n-                if (bk != null) {\n-                    bk.close();\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Version 4.1.0 classes\n-     */\n-    static class Server410 {\n-        org.apache.bk_v4_1_0.bookkeeper.conf.ServerConfiguration conf;\n-        org.apache.bk_v4_1_0.bookkeeper.proto.BookieServer server = null;\n-\n-        Server410(File journalDir, File ledgerDir, int port) throws Exception {\n-            conf = new org.apache.bk_v4_1_0.bookkeeper.conf.ServerConfiguration();\n-            conf.setBookiePort(port);\n-            conf.setZkServers(zkUtil.getZooKeeperConnectString());\n-            conf.setJournalDirName(journalDir.getPath());\n-            conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n-        }\n-\n-        void start() throws Exception {\n-            server = new org.apache.bk_v4_1_0.bookkeeper.proto.BookieServer(conf);\n-            server.start();\n-            waitUp(conf.getBookiePort());\n-        }\n-\n-        org.apache.bk_v4_1_0.bookkeeper.conf.ServerConfiguration getConf() {\n-            return conf;\n-        }\n-\n-        void stop() throws Exception {\n-            if (server != null) {\n-                server.shutdown();\n-            }\n-        }\n-    }\n-\n-    static class Ledger410 {\n-        org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper bk;\n-        org.apache.bk_v4_1_0.bookkeeper.client.LedgerHandle lh;\n-\n-        private Ledger410(org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper bk,\n-                          org.apache.bk_v4_1_0.bookkeeper.client.LedgerHandle lh) {\n-            this.bk = bk;\n-            this.lh = lh;\n-        }\n-\n-        static Ledger410 newLedger() throws Exception {\n-            org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bk_v4_1_0.bookkeeper.client.LedgerHandle newlh\n-                = newbk.createLedger(1, 1,\n-                                  org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                  \"foobar\".getBytes());\n-            return new Ledger410(newbk, newlh);\n-        }\n-\n-        static Ledger410 openLedger(long id) throws Exception {\n-            org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bk_v4_1_0.bookkeeper.client.LedgerHandle newlh\n-                = newbk.openLedger(id,\n-                                org.apache.bk_v4_1_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                \"foobar\".getBytes());\n-            return new Ledger410(newbk, newlh);\n-        }\n-\n-        long getId() {\n-            return lh.getId();\n-        }\n-\n-        void write100() throws Exception {\n-            for (int i = 0; i < 100; i++) {\n-                lh.addEntry(ENTRY_DATA);\n-            }\n-        }\n-\n-        long readAll() throws Exception {\n-            long count = 0;\n-            Enumeration<org.apache.bk_v4_1_0.bookkeeper.client.LedgerEntry> entries\n-                = lh.readEntries(0, lh.getLastAddConfirmed());\n-            while (entries.hasMoreElements()) {\n-                assertTrue(\"entry data doesn't match\",\n-                           Arrays.equals(entries.nextElement().getEntry(), ENTRY_DATA));\n-                count++;\n-            }\n-            return count;\n-        }\n-\n-        void close() throws Exception {\n-            try {\n-                if (lh != null) {\n-                    lh.close();\n-                }\n-            } finally {\n-                if (bk != null) {\n-                    bk.close();\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Version 4.2.0 classes\n-     */\n-    static class Server420 {\n-        org.apache.bk_v4_2_0.bookkeeper.conf.ServerConfiguration conf;\n-        org.apache.bk_v4_2_0.bookkeeper.proto.BookieServer server = null;\n-\n-        Server420(File journalDir, File ledgerDir, int port) throws Exception {\n-            conf = new org.apache.bk_v4_2_0.bookkeeper.conf.ServerConfiguration();\n-            conf.setBookiePort(port);\n-            conf.setZkServers(zkUtil.getZooKeeperConnectString());\n-            conf.setJournalDirName(journalDir.getPath());\n-            conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n-        }\n-\n-        void start() throws Exception {\n-            server = new org.apache.bk_v4_2_0.bookkeeper.proto.BookieServer(conf);\n-            server.start();\n-            waitUp(conf.getBookiePort());\n-        }\n-\n-        org.apache.bk_v4_2_0.bookkeeper.conf.ServerConfiguration getConf() {\n-            return conf;\n-        }\n-\n-        void stop() throws Exception {\n-            if (server != null) {\n-                server.shutdown();\n-            }\n-        }\n-    }\n-\n-    static class Ledger420 {\n-        org.apache.bk_v4_2_0.bookkeeper.client.BookKeeper bk;\n-        org.apache.bk_v4_2_0.bookkeeper.client.LedgerHandle lh;\n-\n-        private Ledger420(org.apache.bk_v4_2_0.bookkeeper.client.BookKeeper bk,\n-                          org.apache.bk_v4_2_0.bookkeeper.client.LedgerHandle lh) {\n-            this.bk = bk;\n-            this.lh = lh;\n-        }\n-\n-        static Ledger420 newLedger() throws Exception {\n-            org.apache.bk_v4_2_0.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bk_v4_2_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bk_v4_2_0.bookkeeper.client.LedgerHandle newlh\n-                = newbk.createLedger(1, 1,\n-                                  org.apache.bk_v4_2_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                  \"foobar\".getBytes());\n-            return new Ledger420(newbk, newlh);\n-        }\n-\n-        static Ledger420 openLedger(long id) throws Exception {\n-            org.apache.bk_v4_2_0.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bk_v4_2_0.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bk_v4_2_0.bookkeeper.client.LedgerHandle newlh\n-                = newbk.openLedger(id,\n-                                org.apache.bk_v4_2_0.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                \"foobar\".getBytes());\n-            return new Ledger420(newbk, newlh);\n-        }\n-\n-        long getId() {\n-            return lh.getId();\n-        }\n-\n-        void write100() throws Exception {\n-            for (int i = 0; i < 100; i++) {\n-                lh.addEntry(ENTRY_DATA);\n-            }\n-        }\n-\n-        long readAll() throws Exception {\n-            long count = 0;\n-            Enumeration<org.apache.bk_v4_2_0.bookkeeper.client.LedgerEntry> entries\n-                = lh.readEntries(0, lh.getLastAddConfirmed());\n-            while (entries.hasMoreElements()) {\n-                assertTrue(\"entry data doesn't match\",\n-                           Arrays.equals(entries.nextElement().getEntry(), ENTRY_DATA));\n-                count++;\n-            }\n-            return count;\n-        }\n-\n-        void close() throws Exception {\n-            try {\n-                if (lh != null) {\n-                    lh.close();\n-                }\n-            } finally {\n-                if (bk != null) {\n-                    bk.close();\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Current verion classes\n-     */\n-    static class ServerCurrent {\n-        org.apache.bookkeeper.conf.ServerConfiguration conf;\n-        org.apache.bookkeeper.proto.BookieServer server = null;\n-\n-        ServerCurrent(File journalDir, File ledgerDir, int port,\n-                boolean useHostNameAsBookieID) throws Exception {\n-            conf = TestBKConfiguration.newServerConfiguration();\n-            conf.setBookiePort(port);\n-            conf.setZkServers(zkUtil.getZooKeeperConnectString());\n-            conf.setJournalDirName(journalDir.getPath());\n-            conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n-            conf.setUseHostNameAsBookieID(useHostNameAsBookieID);\n-        }\n-\n-        void start() throws Exception {\n-            server = new org.apache.bookkeeper.proto.BookieServer(conf);\n-            server.start();\n-            waitUp(conf.getBookiePort());\n-        }\n-\n-        org.apache.bookkeeper.conf.ServerConfiguration getConf() {\n-            return conf;\n-        }\n-\n-        void stop() throws Exception {\n-            if (server != null) {\n-                server.shutdown();\n-            }\n-        }\n-    }\n-\n-    static class LedgerCurrent {\n-        org.apache.bookkeeper.client.BookKeeper bk;\n-        org.apache.bookkeeper.client.LedgerHandle lh;\n-\n-        private LedgerCurrent(org.apache.bookkeeper.client.BookKeeper bk,\n-                              org.apache.bookkeeper.client.LedgerHandle lh) {\n-            this.bk = bk;\n-            this.lh = lh;\n-        }\n-\n-        static LedgerCurrent newLedger() throws Exception {\n-            org.apache.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bookkeeper.client.LedgerHandle newlh\n-                = newbk.createLedger(1, 1,\n-                                     org.apache.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                     \"foobar\".getBytes());\n-            return new LedgerCurrent(newbk, newlh);\n-        }\n-\n-        static LedgerCurrent openLedger(long id) throws Exception {\n-            org.apache.bookkeeper.client.BookKeeper newbk\n-                = new org.apache.bookkeeper.client.BookKeeper(zkUtil.getZooKeeperConnectString());\n-            org.apache.bookkeeper.client.LedgerHandle newlh\n-                = newbk.openLedger(id,\n-                                org.apache.bookkeeper.client.BookKeeper.DigestType.CRC32,\n-                                \"foobar\".getBytes());\n-            return new LedgerCurrent(newbk, newlh);\n-        }\n-\n-        long getId() {\n-            return lh.getId();\n-        }\n-\n-        void write100() throws Exception {\n-            for (int i = 0; i < 100; i++) {\n-                lh.addEntry(ENTRY_DATA);\n-            }\n-        }\n-\n-        long readAll() throws Exception {\n-            long count = 0;\n-            Enumeration<org.apache.bookkeeper.client.LedgerEntry> entries\n-                = lh.readEntries(0, lh.getLastAddConfirmed());\n-            while (entries.hasMoreElements()) {\n-                assertTrue(\"entry data doesn't match\",\n-                           Arrays.equals(entries.nextElement().getEntry(), ENTRY_DATA));\n-                count++;\n-            }\n-            return count;\n-        }\n-\n-        void close() throws Exception {\n-            try {\n-                if (lh != null) {\n-                    lh.close();\n-                }\n-            } finally {\n-                if (bk != null) {\n-                    bk.close();\n-                }\n-            }\n-        }\n-    }\n-\n-    /*\n-     * Test old cookie accessing the new version formatted cluster.\n-     */\n-    @Test(timeout=60000)\n-    public void testOldCookieAccessingNewCluster() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n-\n-        int port = PortManager.nextFreePort();\n-\n-        // start old server\n-        Server410 s410 = new Server410(journalDir, ledgerDir, port);\n-        s410.start();\n-\n-        Ledger410 l410 = Ledger410.newLedger();\n-        l410.write100();\n-        l410.getId();\n-        l410.close();\n-        s410.stop();\n-\n-        // Format the metadata using current version\n-        ServerCurrent currentServer = new ServerCurrent(journalDir, ledgerDir,\n-                port, false);\n-        BookKeeperAdmin.format(new ClientConfiguration(currentServer.conf),\n-                false, true);\n-        // start the current version server with old version cookie\n-        try {\n-            currentServer.start();\n-            fail(\"Bookie should not start with old cookie\");\n-        } catch (BookieException e) {\n-            assertTrue(\"Old Cookie should not be able to access\", e\n-                    .getMessage().contains(\"instanceId\"));\n-        } finally {\n-            currentServer.stop();\n-        }\n-\n-        // Format the bookie also and restart\n-        assertTrue(\"Format should be success\",\n-                Bookie.format(currentServer.conf, false, true));\n-        try {\n-            currentServer = null;\n-            currentServer = new ServerCurrent(journalDir, ledgerDir, port, false);\n-            currentServer.start();\n-        } finally {\n-            if (null != currentServer) {\n-                currentServer.stop();\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Test compatability between version 4.0.0 and the current version.\n-     * Incompatabilities are:\n-     *  - Current client will not be able to talk to 4.0.0 server.\n-     *  - 4.0.0 client will not be able to fence ledgers on current server.\n-     *  - Current server won't start with 4.0.0 server directories without upgrade.\n-     */\n-    @Test(timeout=60000)\n-    public void testCompat400() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n-\n-        int port = PortManager.nextFreePort();\n-        // start server, upgrade\n-        Server400 s400 = new Server400(journalDir, ledgerDir, port);\n-        s400.start();\n-\n-        Ledger400 l400 = Ledger400.newLedger();\n-        l400.write100();\n-        long oldLedgerId = l400.getId();\n-        l400.close();\n-\n-        // Check that current client isn't able to write to old server\n-        LedgerCurrent lcur = LedgerCurrent.newLedger();\n-        try {\n-            lcur.write100();\n-            fail(\"Current shouldn't be able to write to 4.0.0 server\");\n-        } catch (Exception e) {\n-        }\n-        lcur.close();\n-\n-        s400.stop();\n-\n-        // Start the current server, will require a filesystem upgrade\n-        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port, false);\n-        try {\n-            scur.start();\n-            fail(\"Shouldn't be able to start without directory upgrade\");\n-        } catch (Exception e) {\n-        }\n-        FileSystemUpgrade.upgrade(scur.getConf());\n-\n-        scur.start();\n-\n-        // check that old client can read its old ledgers on new server\n-        l400 = Ledger400.openLedger(oldLedgerId);\n-        assertEquals(100, l400.readAll());\n-        l400.close();\n-\n-        // check that old client can create ledgers on new server\n-        l400 = Ledger400.newLedger();\n-        l400.write100();\n-        l400.close();\n-\n-        // check that current client can read old ledger\n-        lcur = LedgerCurrent.openLedger(oldLedgerId);\n-        assertEquals(100, lcur.readAll());\n-        lcur.close();\n-\n-        // check that old client can read current client's ledgers\n-        lcur = LedgerCurrent.openLedger(oldLedgerId);\n-        assertEquals(100, lcur.readAll());\n-        lcur.close();\n-\n-        // check that old client can not fence a current client\n-        // due to lack of password\n-        lcur = LedgerCurrent.newLedger();\n-        lcur.write100();\n-        long fenceLedgerId = lcur.getId();\n-        try {\n-            l400 = Ledger400.openLedger(fenceLedgerId);\n-            fail(\"Shouldn't be able to open ledger\");\n-        } catch (Exception e) {\n-            // correct behaviour\n-        }\n-        lcur.write100();\n-        lcur.close();\n-\n-        lcur = LedgerCurrent.openLedger(fenceLedgerId);\n-        assertEquals(200, lcur.readAll());\n-        lcur.close();\n-\n-        scur.stop();\n-    }\n-\n-    /**\n-     * Test compatability between version 4.1.0 and the current version.\n-     *  - A 4.1.0 client is not able to open a ledger created by the current\n-     *    version due to a change in the ledger metadata format.\n-     *  - Otherwise, they should be compatible.\n-     */\n-    @Test(timeout=60000)\n-    public void testCompat410() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n-\n-        int port = PortManager.nextFreePort();\n-        // start server, upgrade\n-        Server410 s410 = new Server410(journalDir, ledgerDir, port);\n-        s410.start();\n-\n-        Ledger410 l410 = Ledger410.newLedger();\n-        l410.write100();\n-        long oldLedgerId = l410.getId();\n-        l410.close();\n-\n-        // Check that current client can to write to old server\n-        LedgerCurrent lcur = LedgerCurrent.newLedger();\n-        try {\n-            lcur.write100();\n-            fail(\"Shouldn't be able to write\");\n-        } catch (Exception e) {\n-            // correct behaviour\n-        }\n-        lcur.close();\n-\n-        s410.stop();\n-\n-        // Start the current server, will not require a filesystem upgrade\n-        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port, false);\n-        scur.start();\n-\n-        // check that old client can read its old ledgers on new server\n-        l410 = Ledger410.openLedger(oldLedgerId);\n-        assertEquals(100, l410.readAll());\n-        l410.close();\n-\n-        // check that old client can create ledgers on new server\n-        l410 = Ledger410.newLedger();\n-        l410.write100();\n-        l410.close();\n-\n-        // check that an old client can fence an old client\n-        l410 = Ledger410.newLedger();\n-        l410.write100();\n-\n-        Ledger410 l410f = Ledger410.openLedger(l410.getId());\n-        try {\n-            l410.write100();\n-            fail(\"Shouldn't be able to write\");\n-        } catch (Exception e) {\n-            // correct behaviour\n-        }\n-        l410f.close();\n-        try {\n-            l410.close();\n-            fail(\"Shouldn't be able to close\");\n-        } catch (Exception e) {\n-            // correct\n-        }\n-\n-        // check that a new client can fence an old client\n-        // and the old client can continue to read that ledger\n-        l410 = Ledger410.newLedger();\n-        l410.write100();\n-\n-        oldLedgerId = l410.getId();\n-        lcur = LedgerCurrent.openLedger(oldLedgerId);\n-        try {\n-            l410.write100();\n-            fail(\"Shouldn't be able to write\");\n-        } catch (Exception e) {\n-            // correct behaviour\n-        }\n-        try {\n-            l410.close();\n-            fail(\"Shouldn't be able to close\");\n-        } catch (Exception e) {\n-            // correct\n-        }\n-        lcur.close();\n-\n-        l410 = Ledger410.openLedger(oldLedgerId);\n-\n-        assertEquals(100, l410.readAll());\n-        l410.close();\n-\n-        // check that current client can read old ledger\n-        lcur = LedgerCurrent.openLedger(oldLedgerId);\n-        assertEquals(100, lcur.readAll());\n-        lcur.close();\n-\n-        // check that old client can read current client's ledgers\n-        lcur = LedgerCurrent.openLedger(oldLedgerId);\n-        assertEquals(100, lcur.readAll());\n-        lcur.close();\n-\n-        // check that old client can not fence a current client\n-        // since it cannot open a new ledger due to the format changes\n-        lcur = LedgerCurrent.newLedger();\n-        lcur.write100();\n-        long fenceLedgerId = lcur.getId();\n-        try {\n-            l410 = Ledger410.openLedger(fenceLedgerId);\n-            fail(\"Shouldn't be able to open ledger\");\n-        } catch (Exception e) {\n-            // correct behaviour\n-        }\n-        lcur.write100();\n-        lcur.close();\n-\n-        scur.stop();\n-    }\n-\n-    /**\n-     * Test compatability between old versions and the current version.\n-     * - old server restarts with useHostNameAsBookieID=true.\n-     * - Read ledgers with old and new clients\n-     */\n-    @Test(timeout = 60000)\n-    public void testCompatReads() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n-\n-        int port = PortManager.nextFreePort();\n-        // start server, upgrade\n-        Server410 s410 = new Server410(journalDir, ledgerDir, port);\n-        s410.start();\n-\n-        Ledger410 l410 = Ledger410.newLedger();\n-        l410.write100();\n-        long oldLedgerId = l410.getId();\n-        l410.close();\n-\n-        // Check that 420 client can to write to 410 server\n-        Ledger420 l420 = Ledger420.newLedger();\n-        l420.write100();\n-        long lid420 = l420.getId();\n-        l420.close();\n-\n-        s410.stop();\n-\n-        // Start the current server, will not require a filesystem upgrade\n-        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port,\n-                true);\n-        scur.start();\n-\n-        // check that old client can read its old ledgers on new server\n-        l410 = Ledger410.openLedger(oldLedgerId);\n-        assertEquals(100, l410.readAll());\n-        l410.close();\n-\n-        // Check that 420 client can read old ledgers on new server\n-        l420 = Ledger420.openLedger(lid420);\n-        assertEquals(\"Failed to read entries!\", 100, l420.readAll());\n-        l420.close();\n-\n-        // Check that current client can read old ledgers on new server\n-        final LedgerCurrent curledger = LedgerCurrent.openLedger(lid420);\n-        assertEquals(\"Failed to read entries!\", 100, curledger.readAll());\n-        curledger.close();\n-    }\n-\n-    /**\n-     * Test compatability between version old version and the current version.\n-     * - 4.1.0 server restarts with useHostNameAsBookieID=true.\n-     * - Write ledgers with old and new clients\n-     * - Read ledgers written by old clients.\n-     */\n-    @Test(timeout = 60000)\n-    public void testCompatWrites() throws Exception {\n-        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n-        journalDir.delete();\n-        journalDir.mkdir();\n-        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n-        ledgerDir.delete();\n-        ledgerDir.mkdir();\n-\n-        int port = PortManager.nextFreePort();\n-        // start server, upgrade\n-        Server410 s410 = new Server410(journalDir, ledgerDir, port);\n-        s410.start();\n-        s410.stop();\n-\n-        // Start the current server, will not require a filesystem upgrade\n-        ServerCurrent scur = new ServerCurrent(journalDir, ledgerDir, port,\n-                true);\n-        scur.start();\n-\n-        // Check that current client can to write to server\n-        LedgerCurrent lcur = LedgerCurrent.newLedger();\n-        lcur.write100();\n-        lcur.close();\n-        final LedgerCurrent curledger = LedgerCurrent.openLedger(lcur.getId());\n-        assertEquals(\"Failed to read entries!\", 100, curledger.readAll());\n-\n-        // Check that 410 client can write to server\n-        Ledger410 l410 = Ledger410.newLedger();\n-        l410.write100();\n-        long oldLedgerId = l410.getId();\n-        l410.close();\n-\n-        // Check that 420 client can write to server\n-        Ledger410 l420 = Ledger410.newLedger();\n-        l420.write100();\n-        long lid420 = l420.getId();\n-        l420.close();\n-\n-        // check that new client can read old ledgers on new server\n-        LedgerCurrent oldledger = LedgerCurrent.openLedger(oldLedgerId);\n-        assertEquals(\"Failed to read entries!\", 100, oldledger.readAll());\n-        oldledger.close();\n-\n-        // check that new client can read old ledgers on new server\n-        oldledger = LedgerCurrent.openLedger(lid420);\n-        assertEquals(\"Failed to read entries!\", 100, oldledger.readAll());\n-        oldledger.close();\n-    }\n-}"},{"sha":"61217f0d973869d027a6d9de6cf3df0b6b175641","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,57 +0,0 @@\n-/**\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.test;\n-\n-import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import com.google.common.util.concurrent.AbstractFuture;\n-\n-/**\n- * Callbacks implemented with SettableFuture, to be used in tests\n- */\n-public class TestCallbacks {\n-    public static class GenericCallbackFuture<T>\n-        extends AbstractFuture<T> implements GenericCallback<T> {\n-        @Override\n-        public void operationComplete(int rc, T value) {\n-            if (rc != BKException.Code.OK) {\n-                setException(BKException.create(rc));\n-            } else {\n-                set(value);\n-            }\n-        }\n-    }\n-\n-    public static class AddCallbackFuture\n-        extends AbstractFuture<Long> implements AddCallback {\n-        @Override\n-        public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n-            if (rc != BKException.Code.OK) {\n-                setException(BKException.create(rc));\n-            } else {\n-                set(entryId);\n-            }\n-        }\n-    }\n-}\n-"},{"sha":"fd61d2d0f18411920f52bbb1ad2671e66d0213de","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"removed","additions":0,"deletions":167,"changes":167,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,167 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.bookkeeper.test;\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import java.net.InetSocketAddress;\n-\n-import org.apache.bookkeeper.util.ZkUtils;\n-import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n-import org.apache.commons.io.FileUtils;\n-\n-import java.util.concurrent.CountDownLatch;\n-\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.ZooDefs.Ids;\n-\n-import org.apache.zookeeper.server.NIOServerCnxnFactory;\n-import org.apache.zookeeper.server.ZooKeeperServer;\n-import org.apache.zookeeper.test.ClientBase;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static org.junit.Assert.*;\n-\n-public class ZooKeeperUtil {\n-    static final Logger LOG = LoggerFactory.getLogger(ZooKeeperUtil.class);\n-\n-    // ZooKeeper related variables\n-    protected final static Integer zooKeeperPort = PortManager.nextFreePort();\n-    private final InetSocketAddress zkaddr;\n-\n-    protected ZooKeeperServer zks;\n-    protected ZooKeeper zkc; // zookeeper client\n-    protected NIOServerCnxnFactory serverFactory;\n-    protected File ZkTmpDir;\n-    private final String connectString;\n-\n-    public ZooKeeperUtil() {\n-        zkaddr = new InetSocketAddress(zooKeeperPort);\n-        connectString= \"localhost:\" + zooKeeperPort;\n-    }\n-\n-    public ZooKeeper getZooKeeperClient() {\n-        return zkc;\n-    }\n-\n-    public String getZooKeeperConnectString() {\n-        return connectString;\n-    }\n-\n-    public void startServer() throws Exception {\n-        // create a ZooKeeper server(dataDir, dataLogDir, port)\n-        LOG.debug(\"Running ZK server\");\n-        // ServerStats.registerAsConcrete();\n-        ClientBase.setupTestEnv();\n-        ZkTmpDir = File.createTempFile(\"zookeeper\", \"test\");\n-        ZkTmpDir.delete();\n-        ZkTmpDir.mkdir();\n-\n-        // start the server and client.\n-        restartServer();\n-\n-        // initialize the zk client with values\n-        zkc.create(\"/ledgers\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-        zkc.create(\"/ledgers/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-    }\n-\n-    public void restartServer() throws Exception {\n-        zks = new ZooKeeperServer(ZkTmpDir, ZkTmpDir,\n-                ZooKeeperServer.DEFAULT_TICK_TIME);\n-        serverFactory = new NIOServerCnxnFactory();\n-        serverFactory.configure(zkaddr, 100);\n-        serverFactory.startup(zks);\n-\n-        boolean b = ClientBase.waitForServerUp(getZooKeeperConnectString(),\n-                ClientBase.CONNECTION_TIMEOUT);\n-        LOG.debug(\"Server up: \" + b);\n-\n-        // create a zookeeper client\n-        LOG.debug(\"Instantiate ZK Client\");\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-        zkc = ZkUtils.createConnectedZookeeperClient(\n-                getZooKeeperConnectString(), w);\n-    }\n-\n-    public void sleepServer(final int seconds, final CountDownLatch l)\n-            throws InterruptedException, IOException {\n-        Thread[] allthreads = new Thread[Thread.activeCount()];\n-        Thread.enumerate(allthreads);\n-        for (final Thread t : allthreads) {\n-            if (t.getName().contains(\"SyncThread:0\")) {\n-                Thread sleeper = new Thread() {\n-                    @SuppressWarnings(\"deprecation\")\n-                    public void run() {\n-                        try {\n-                            t.suspend();\n-                            l.countDown();\n-                            Thread.sleep(seconds*1000);\n-                            t.resume();\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error suspending thread\", e);\n-                        }\n-                    }\n-                };\n-                sleeper.start();\n-                return;\n-            }\n-        }\n-        throw new IOException(\"ZooKeeper thread not found\");\n-    }\n-\n-    public void expireSession(ZooKeeper zk) throws Exception {\n-        long id = zk.getSessionId();\n-        byte[] password = zk.getSessionPasswd();\n-        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n-        ZooKeeper zk2 = new ZooKeeper(getZooKeeperConnectString(),\n-                zk.getSessionTimeout(), w, id, password);\n-        w.waitForConnection();\n-        zk2.close();\n-    }\n-\n-    public void stopServer() throws Exception {\n-        if (zkc != null) {\n-            zkc.close();\n-        }\n-\n-        // shutdown ZK server\n-        if (serverFactory != null) {\n-            serverFactory.shutdown();\n-            assertTrue(\"waiting for server down\",\n-                    ClientBase.waitForServerDown(getZooKeeperConnectString(),\n-                            ClientBase.CONNECTION_TIMEOUT));\n-        }\n-        if (zks != null) {\n-            zks.getTxnLogFactory().close();\n-        }\n-    }\n-\n-    public void killServer() throws Exception {\n-        stopServer();\n-        // ServerStats.unregister();\n-        FileUtils.deleteDirectory(ZkTmpDir);\n-    }\n-}"},{"sha":"a6ffce0288ae2df2178e7d0c67e7ecdf26d3c8d0","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","status":"removed","additions":0,"deletions":80,"changes":80,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,80 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.bookkeeper.util;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n-\n-import org.apache.bookkeeper.net.AbstractDNSToSwitchMapping;\n-import org.apache.bookkeeper.net.DNSToSwitchMapping;\n-import org.apache.bookkeeper.net.NetworkTopology;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Implements {@link DNSToSwitchMapping} via static mappings. Used in test cases to simulate racks.\n- */\n-public class StaticDNSResolver extends AbstractDNSToSwitchMapping {\n-\n-    static final Logger LOG = LoggerFactory.getLogger(StaticDNSResolver.class);\n-\n-    private static final ConcurrentMap<String, String> name2Racks = new ConcurrentHashMap<String, String>();\n-\n-    public static void addNodeToRack(String name, String rack) {\n-        name2Racks.put(name, rack);\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Add node {} to rack {}.\", name, rack);\n-        }\n-    }\n-\n-    public static String getRack(String name) {\n-        String rack = name2Racks.get(name);\n-        if (null == rack) {\n-            rack = NetworkTopology.DEFAULT_RACK;\n-        }\n-        return rack;\n-    }\n-\n-    public static void reset() {\n-        name2Racks.clear();\n-    }\n-\n-    @Override\n-    public List<String> resolve(List<String> names) {\n-        List<String> racks = new ArrayList<String>();\n-        for (String n : names) {\n-            String rack = name2Racks.get(n);\n-            if (null == rack) {\n-                rack = NetworkTopology.DEFAULT_RACK;\n-            }\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Resolve name {} to rack {}.\", n, rack);\n-            }\n-            racks.add(rack);\n-        }\n-        return racks;\n-    }\n-\n-    @Override\n-    public void reloadCachedMappings() {\n-        // nop\n-    }\n-\n-}"},{"sha":"c0bdfa60d4b7f4cdc641f64944e61f3df6addfd4","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","status":"removed","additions":0,"deletions":111,"changes":111,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,111 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.bookkeeper.util;\n-\n-import static org.junit.Assert.assertTrue;\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n-import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n-import org.apache.bookkeeper.util.DiskChecker.DiskWarnThresholdException;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-/**\n- * Test to verify {@link DiskChecker}\n- *\n- */\n-public class TestDiskChecker {\n-\n-    DiskChecker diskChecker;\n-\n-    @Before\n-    public void setup() {\n-        diskChecker = new DiskChecker(0.95f, 0.95f);\n-    }\n-\n-    /**\n-     * Check the disk full\n-     */\n-    @Test(expected = DiskOutOfSpaceException.class)\n-    public void testCheckDiskFull() throws IOException {\n-        File file = File.createTempFile(\"DiskCheck\", \"test\");\n-        long usableSpace = file.getUsableSpace();\n-        long totalSpace = file.getTotalSpace();\n-        float threshold =\n-                (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;\n-        diskChecker.setDiskSpaceThreshold(threshold, threshold);\n-        diskChecker.checkDiskFull(file);\n-    }\n-\n-    @Test(expected = DiskWarnThresholdException.class)\n-    public void testDiskWarnThresholdException() throws IOException {\n-        File file = File.createTempFile(\"DiskCheck\", \"test\");\n-        long usableSpace = file.getUsableSpace();\n-        long totalSpace = file.getTotalSpace();\n-        float diskSpaceThreshold =\n-                (1f - ((float) usableSpace / (float) totalSpace)) + 0.01f;\n-        float diskWarnThreshold =\n-                (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;\n-        diskChecker.setDiskSpaceThreshold(diskSpaceThreshold, diskWarnThreshold);\n-        diskChecker.checkDiskFull(file);\n-    }\n-\n-    /**\n-     * Check disk full on non exist file. in this case it should check for\n-     * parent file\n-     */\n-    @Test(timeout = 30000, expected = DiskOutOfSpaceException.class)\n-    public void testCheckDiskFullOnNonExistFile() throws IOException {\n-        File file = File.createTempFile(\"DiskCheck\", \"test\");\n-        long usableSpace = file.getUsableSpace();\n-        long totalSpace = file.getTotalSpace();\n-        float threshold = (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;\n-        diskChecker.setDiskSpaceThreshold(threshold, threshold);\n-        assertTrue(file.delete());\n-        diskChecker.checkDiskFull(file);\n-    }\n-\n-    /**\n-     * Check disk error for file\n-     */\n-    @Test(timeout = 30000, expected = DiskErrorException.class)\n-    public void testCheckDiskErrorForFile() throws Exception {\n-        File parent = File.createTempFile(\"DiskCheck\", \"test\");\n-        parent.delete();\n-        parent.mkdir();\n-        File child = File.createTempFile(\"DiskCheck\", \"test\", parent);\n-        diskChecker.checkDir(child);\n-    }\n-\n-    /**\n-     * Check disk error for valid dir.\n-     */\n-    @Test(timeout=60000)\n-    public void testCheckDiskErrorForDir() throws Exception {\n-        File parent = File.createTempFile(\"DiskCheck\", \"test\");\n-        parent.delete();\n-        parent.mkdir();\n-        File child = File.createTempFile(\"DiskCheck\", \"test\", parent);\n-        child.delete();\n-        child.mkdir();\n-        diskChecker.checkDir(child);\n-    }\n-}"},{"sha":"1c569d70c53b711b86f781800980b3d19014c2b9","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestUtils.java","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestUtils.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,52 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.bookkeeper.util;\n-\n-import java.io.File;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-import org.apache.bookkeeper.bookie.Bookie;\n-\n-public class TestUtils {\n-    public static boolean hasLogFiles(File ledgerDirectory, boolean partial, Integer... logsId) {\n-        boolean result = partial ? false : true;\n-        Set<Integer> logs = new HashSet<Integer>();\n-        for (File file : Bookie.getCurrentDirectory(ledgerDirectory).listFiles()) {\n-            if (file.isFile()) {\n-                String name = file.getName();\n-                if (!name.endsWith(\".log\")) {\n-                    continue;\n-                }\n-                logs.add(Integer.parseInt(name.split(\"\\\\.\")[0], 16));\n-            }\n-        }\n-        for (Integer logId : logsId) {\n-            boolean exist = logs.contains(logId);\n-            if ((partial && exist)\n-                    || (!partial && !exist)) {\n-                return !result;\n-            }\n-        }\n-        return result;\n-    }\n-}"},{"sha":"f48fe37f70a4100f0183966b00359460f8ec8fe6","filename":"branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","status":"removed","additions":0,"deletions":367,"changes":367,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,367 +0,0 @@\n-/**\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.zookeeper;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicReference;\n-\n-import org.apache.bookkeeper.test.ZooKeeperUtil;\n-import org.apache.zookeeper.AsyncCallback.Children2Callback;\n-import org.apache.zookeeper.AsyncCallback.DataCallback;\n-import org.apache.zookeeper.AsyncCallback.StatCallback;\n-import org.apache.zookeeper.AsyncCallback.StringCallback;\n-import org.apache.zookeeper.AsyncCallback.VoidCallback;\n-import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.Watcher.Event.EventType;\n-import org.apache.zookeeper.Watcher.Event.KeeperState;\n-import org.apache.zookeeper.ZooDefs.Ids;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.data.Stat;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import junit.framework.Assert;\n-import junit.framework.TestCase;\n-\n-/**\n- * Test the wrapper of {@link org.apache.zookeeper.ZooKeeper} client.\n- */\n-public class TestZooKeeperClient extends TestCase {\n-\n-    static final Logger logger = LoggerFactory.getLogger(TestZooKeeperClient.class);\n-\n-    // ZooKeeper related variables\n-    protected ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n-\n-    @Before\n-    @Override\n-    public void setUp() throws Exception {\n-        logger.info(\"Setting up test {}.\", getName());\n-        zkUtil.startServer();\n-    }\n-\n-    @After\n-    @Override\n-    public void tearDown() throws Exception {\n-        zkUtil.killServer();\n-        logger.info(\"Teared down test {}.\", getName());\n-    }\n-\n-    private void expireZooKeeperSession(ZooKeeper zk, int timeout)\n-            throws IOException, InterruptedException, KeeperException {\n-        final CountDownLatch latch = new CountDownLatch(1);\n-        ZooKeeper newZk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), timeout,\n-                new Watcher() {\n-\n-            @Override\n-            public void process(WatchedEvent event) {\n-                if (event.getType() == EventType.None &&\n-                        event.getState() == KeeperState.SyncConnected) {\n-                    latch.countDown();\n-                }\n-            }\n-\n-        }, zk.getSessionId(), zk.getSessionPasswd());\n-        if (!latch.await(timeout, TimeUnit.MILLISECONDS)) {\n-            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n-        }\n-        newZk.close();\n-    }\n-\n-    /**\n-     * Shutdown Zk Server when client received an expire event.\n-     * So the client issue recreation client task but it would not succeed\n-     * until we start the zookeeper server again.\n-     */\n-    class ShutdownZkServerClient extends ZooKeeperClient {\n-\n-        ShutdownZkServerClient(String connectString, int sessionTimeoutMs,\n-                ZooKeeperWatcherBase watcher, RetryPolicy operationRetryPolicy)throws IOException {\n-            super(connectString, sessionTimeoutMs, watcher, operationRetryPolicy);\n-        }\n-\n-        @Override\n-        public void process(WatchedEvent event) {\n-            if (event.getType() == EventType.None &&\n-                    event.getState() == KeeperState.Expired) {\n-                try {\n-                    zkUtil.stopServer();\n-                } catch (Exception e) {\n-                    logger.error(\"Failed to stop zookeeper server : \", e);\n-                }\n-            }\n-            super.process(event);\n-        }\n-\n-    }\n-\n-    @Test(timeout=12000)\n-    public void testReconnectAfterExipred() throws Exception {\n-        final CountDownLatch expireLatch = new CountDownLatch(1);\n-        Watcher testWatcher = new Watcher() {\n-\n-            @Override\n-            public void process(WatchedEvent event) {\n-                if (event.getType() == EventType.None &&\n-                        event.getState() == KeeperState.Expired) {\n-                    expireLatch.countDown();\n-                }\n-            }\n-\n-        };\n-        final int timeout = 2000;\n-        ZooKeeperWatcherBase watcherManager =\n-                new ZooKeeperWatcherBase(timeout).addChildWatcher(testWatcher);\n-        List<Watcher> watchers = new ArrayList<Watcher>(1);\n-        watchers.add(testWatcher);\n-        ZooKeeperClient client = new ShutdownZkServerClient(\n-                zkUtil.getZooKeeperConnectString(), timeout, watcherManager,\n-                new BoundExponentialBackoffRetryPolicy(timeout, timeout, 0)\n-                );\n-        client.waitForConnection();\n-        Assert.assertTrue(\"Client failed to connect an alive ZooKeeper.\",\n-                client.getState().isConnected());\n-        logger.info(\"Expire zookeeper client\");\n-        expireZooKeeperSession(client, timeout);\n-\n-        // wait until session expire\n-        Assert.assertTrue(\"Client registered watcher should receive expire event.\",\n-                expireLatch.await(2 * timeout, TimeUnit.MILLISECONDS));\n-\n-        Assert.assertFalse(\"Client doesn't receive expire event from ZooKeeper.\",\n-                client.getState().isConnected());\n-        \n-        try {\n-            client.exists(\"/tmp\", false);\n-            Assert.fail(\"Should fail due to connection loss.\");\n-        } catch (KeeperException.ConnectionLossException cle) {\n-            // expected\n-        } catch (KeeperException.SessionExpiredException cle) {\n-            // expected\n-        }\n-\n-        zkUtil.restartServer();\n-\n-        // wait for a reconnect cycle\n-        Thread.sleep(2*timeout);\n-        Assert.assertTrue(\"Client failed to connect zookeeper even it was back.\",\n-                client.getState().isConnected());\n-        try {\n-            client.exists(\"/tmp\", false);\n-        } catch (KeeperException.ConnectionLossException cle) {\n-            Assert.fail(\"Should not throw ConnectionLossException\");\n-        } catch (KeeperException.SessionExpiredException cle) {\n-            Assert.fail(\"Should not throw SessionExpiredException\");\n-        }\n-    }\n-\n-    @Test(timeout=60000)\n-    public void testRetrySyncOperations() throws Exception {\n-        final int timeout = 2000;\n-        ZooKeeperClient client = ZooKeeperClient.createConnectedZooKeeperClient(\n-                zkUtil.getZooKeeperConnectString(), timeout, new HashSet<Watcher>(),\n-                new BoundExponentialBackoffRetryPolicy(timeout, timeout, Integer.MAX_VALUE)\n-                );\n-        Assert.assertTrue(\"Client failed to connect an alive ZooKeeper.\",\n-                client.getState().isConnected());\n-\n-        String path = \"/a\";\n-        byte[] data = \"test\".getBytes();\n-\n-        expireZooKeeperSession(client, timeout);\n-        logger.info(\"Create znode \" + path);\n-        client.create(path, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-        logger.info(\"Created znode \" + path);\n-\n-        expireZooKeeperSession(client, timeout);\n-        logger.info(\"Exists znode \" + path);\n-        Stat stat = client.exists(path, false);\n-        Assert.assertNotNull(\"znode doesn't existed\", stat);\n-\n-        expireZooKeeperSession(client, timeout);\n-        logger.info(\"Get data from znode \" + path);\n-        Stat newStat = new Stat();\n-        client.getData(path, false, newStat);\n-        Assert.assertEquals(stat, newStat);\n-\n-        expireZooKeeperSession(client, timeout);\n-        logger.info(\"Create children under znode \" + path);\n-        client.create(path + \"/children\", data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-\n-        expireZooKeeperSession(client, timeout);\n-        List<String> children = client.getChildren(path, false, newStat);\n-        Assert.assertEquals(1, children.size());\n-        Assert.assertEquals(\"children\", children.get(0));\n-        logger.info(\"Get children under znode \" + path);\n-\n-        expireZooKeeperSession(client, timeout);\n-        client.delete(path + \"/children\", -1);\n-        logger.info(\"Delete children from znode \" + path);\n-    }\n-\n-    @Test(timeout=60000)\n-    public void testRetryOnCreatingEphemeralZnode() throws Exception {\n-        final int timeout = 2000;\n-        ZooKeeperClient client = ZooKeeperClient.createConnectedZooKeeperClient(\n-                zkUtil.getZooKeeperConnectString(), timeout, new HashSet<Watcher>(),\n-                new BoundExponentialBackoffRetryPolicy(timeout, timeout, Integer.MAX_VALUE)\n-                );\n-        Assert.assertTrue(\"Client failed to connect an alive ZooKeeper.\",\n-                client.getState().isConnected());\n-\n-        String path = \"/a\";\n-        byte[] data = \"test\".getBytes();\n-\n-        logger.info(\"Create znode \" + path);\n-        client.create(path, data, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n-        logger.info(\"Created znode \" + path);\n-\n-        expireZooKeeperSession(client, timeout);\n-        logger.info(\"Create znode w/ new session : \" + path);\n-        client.create(path, data, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n-        logger.info(\"Created znode w/ new session : \" + path);\n-    }\n-\n-    @Test(timeout=60000)\n-    public void testRetryAsyncOperations() throws Exception {\n-        final int timeout = 2000;\n-        ZooKeeperClient client = ZooKeeperClient.createConnectedZooKeeperClient(\n-                zkUtil.getZooKeeperConnectString(), timeout, new HashSet<Watcher>(),\n-                new BoundExponentialBackoffRetryPolicy(timeout, timeout, Integer.MAX_VALUE)\n-                );\n-        Assert.assertTrue(\"Client failed to connect an alive ZooKeeper.\",\n-                client.getState().isConnected());\n-\n-        String path = \"/a\";\n-        byte[] data = \"test\".getBytes();\n-\n-        expireZooKeeperSession(client, timeout);\n-        logger.info(\"Create znode \" + path);\n-        final CountDownLatch createLatch = new CountDownLatch(1);\n-        client.create(path, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT,\n-                new StringCallback() {\n-\n-            @Override\n-            public void processResult(int rc, String path, Object ctx, String name) {\n-                if (KeeperException.Code.OK.intValue() == rc) {\n-                    createLatch.countDown();\n-                }\n-            }\n-\n-        }, null);\n-        createLatch.await();\n-        logger.info(\"Created znode \" + path);\n-\n-        expireZooKeeperSession(client, timeout);\n-        logger.info(\"Exists znode \" + path);\n-        final CountDownLatch existsLatch = new CountDownLatch(1);\n-        client.exists(path, false, new StatCallback() {\n-\n-            @Override\n-            public void processResult(int rc, String path, Object ctx, Stat stat) {\n-                if (KeeperException.Code.OK.intValue() == rc) {\n-                    existsLatch.countDown();\n-                }\n-            }\n-\n-        }, null);\n-        existsLatch.await();\n-\n-        expireZooKeeperSession(client, timeout);\n-        final CountDownLatch getLatch = new CountDownLatch(1);\n-        logger.info(\"Get data from znode \" + path);\n-        client.getData(path, false, new DataCallback() {\n-\n-            @Override\n-            public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n-                if (KeeperException.Code.OK.intValue() == rc) {\n-                    getLatch.countDown();\n-                }\n-            }\n-\n-        }, null);\n-        getLatch.await();\n-\n-        expireZooKeeperSession(client, timeout);\n-        logger.info(\"Create children under znode \" + path);\n-        final CountDownLatch createChildLatch = new CountDownLatch(1);\n-        client.create(path + \"/children\", data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT,\n-                new StringCallback() {\n-\n-            @Override\n-            public void processResult(int rc, String path, Object ctx, String name) {\n-                if (KeeperException.Code.OK.intValue() == rc) {\n-                    createChildLatch.countDown();\n-                }\n-            }\n-\n-        }, null);\n-        createChildLatch.await();\n-\n-        expireZooKeeperSession(client, timeout);\n-        final CountDownLatch getChildLatch = new CountDownLatch(1);\n-        final AtomicReference<List<String>> children =\n-                new AtomicReference<List<String>>();\n-        client.getChildren(path, false, new Children2Callback() {\n-\n-            @Override\n-            public void processResult(int rc, String path, Object ctx, List<String> childList, Stat stat) {\n-                if (KeeperException.Code.OK.intValue() == rc) {\n-                    children.set(childList);\n-                    getChildLatch.countDown();\n-                }\n-            }\n-\n-        }, null);\n-        getChildLatch.await();\n-        Assert.assertNotNull(children.get());\n-        Assert.assertEquals(1, children.get().size());\n-        Assert.assertEquals(\"children\", children.get().get(0));\n-        logger.info(\"Get children under znode \" + path);\n-\n-        expireZooKeeperSession(client, timeout);\n-        final CountDownLatch deleteChildLatch = new CountDownLatch(1);\n-        client.delete(path + \"/children\", -1, new VoidCallback() {\n-\n-            @Override\n-            public void processResult(int rc, String path, Object ctx) {\n-                if (KeeperException.Code.OK.intValue() == rc) {\n-                    deleteChildLatch.countDown();\n-                }\n-            }\n-\n-        }, null);\n-        deleteChildLatch.await();\n-        logger.info(\"Delete children from znode \" + path);\n-    }\n-\n-}"},{"sha":"096c20daa83eea6cf47c0a64f83a1d8a3d8ff872","filename":"branch-4.3/bookkeeper-server/src/test/resources/log4j.properties","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/resources/log4j.properties","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-server/src/test/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-server/src/test/resources/log4j.properties?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,72 +0,0 @@\n-#\n-# \n-# Licensed to the Apache Software Foundation (ASF) under one\n-# or more contributor license agreements.  See the NOTICE file\n-# distributed with this work for additional information\n-# regarding copyright ownership.  The ASF licenses this file\n-# to you under the Apache License, Version 2.0 (the\n-# \"License\"); you may not use this file except in compliance\n-# with the License.  You may obtain a copy of the License at\n-# \n-#   http://www.apache.org/licenses/LICENSE-2.0\n-# \n-# Unless required by applicable law or agreed to in writing,\n-# software distributed under the License is distributed on an\n-# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-# KIND, either express or implied.  See the License for the\n-# specific language governing permissions and limitations\n-# under the License.\n-# \n-#\n-\n-#\n-# Bookkeeper Logging Configuration\n-#\n-\n-# Format is \"<default threshold> (, <appender>)+\n-\n-# DEFAULT: console appender only\n-log4j.rootLogger=INFO, CONSOLE\n-\n-# Example with rolling log file\n-#log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE\n-\n-# Example with rolling log file and tracing\n-#log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n-\n-#\n-# Log INFO level and above messages to the console\n-#\n-log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n-log4j.appender.CONSOLE.Threshold=INFO\n-log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n-log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p - [%t:%C{1}@%L] - %m%n\n-\n-#\n-# Add ROLLINGFILE to rootLogger to get log file output\n-#    Log DEBUG level and above messages to a log file\n-log4j.appender.ROLLINGFILE=org.apache.log4j.DailyRollingFileAppender\n-log4j.appender.ROLLINGFILE.Threshold=DEBUG\n-log4j.appender.ROLLINGFILE.File=bookkeeper-server.log\n-log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\n-log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p - [%t:%C{1}@%L] - %m%n\n-\n-# Max log file size of 10MB\n-log4j.appender.ROLLINGFILE.MaxFileSize=10MB\n-# uncomment the next line to limit number of backup files\n-#log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n-\n-log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\n-log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n-\n-\n-#\n-# Add TRACEFILE to rootLogger to get log file output\n-#    Log DEBUG level and above messages to a log file\n-log4j.appender.TRACEFILE=org.apache.log4j.FileAppender\n-log4j.appender.TRACEFILE.Threshold=TRACE\n-log4j.appender.TRACEFILE.File=bookkeeper_trace.log\n-\n-log4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout\n-### Notice we are including log4j's NDC here (%x)\n-log4j.appender.TRACEFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L][%x] - %m%n"},{"sha":"0c6f07cd96ce52740fdbfe151900e32ddd146c9f","filename":"branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,62 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>bookkeeper</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-    <relativePath>../..</relativePath>\n-  </parent>\n-  <groupId>org.apache.bookkeeper.stats</groupId>\n-  <artifactId>codahale-metrics-provider</artifactId>\n-  <name>Stats provider for codahale metrics</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <project.libdir>${basedir}/lib</project.libdir>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper.stats</groupId>\n-      <artifactId>bookkeeper-stats-api</artifactId>\n-      <version>${project.parent.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.codahale.metrics</groupId>\n-      <artifactId>metrics-core</artifactId>\n-      <version>3.0.1</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.codahale.metrics</groupId>\n-      <artifactId>metrics-jvm</artifactId>\n-      <version>3.0.1</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.codahale.metrics</groupId>\n-      <artifactId>metrics-graphite</artifactId>\n-      <version>3.0.1</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.google.guava</groupId>\n-      <artifactId>guava</artifactId>\n-      <version>${guava.version}</version>\n-    </dependency>\n-  </dependencies>\n-</project>"},{"sha":"a434b3c64200a622b1a01b53edf49c49dd7cb49d","filename":"branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","status":"removed","additions":0,"deletions":147,"changes":147,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,147 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-import java.net.InetSocketAddress;\n-\n-import com.codahale.metrics.CsvReporter;\n-import com.codahale.metrics.MetricFilter;\n-import com.codahale.metrics.MetricRegistry;\n-import com.codahale.metrics.ScheduledReporter;\n-import com.codahale.metrics.Slf4jReporter;\n-import com.codahale.metrics.JmxReporter;\n-import com.google.common.base.Strings;\n-import com.google.common.net.HostAndPort;\n-import static com.codahale.metrics.MetricRegistry.name;\n-import com.codahale.metrics.graphite.Graphite;\n-import com.codahale.metrics.graphite.GraphiteReporter;\n-\n-import com.codahale.metrics.jvm.GarbageCollectorMetricSet;\n-import com.codahale.metrics.jvm.MemoryUsageGaugeSet;\n-\n-import org.apache.bookkeeper.stats.StatsLogger;\n-import org.apache.bookkeeper.stats.StatsProvider;\n-import org.apache.commons.configuration.Configuration;\n-\n-import java.util.List;\n-import java.util.ArrayList;\n-import java.util.concurrent.TimeUnit;\n-\n-import java.io.File;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class CodahaleMetricsProvider implements StatsProvider {\n-\n-    static final Logger LOG = LoggerFactory.getLogger(CodahaleMetricsProvider.class);\n-\n-    MetricRegistry metrics = null;\n-    List<ScheduledReporter> reporters = new ArrayList<ScheduledReporter>();\n-    JmxReporter jmx = null;\n-\n-    synchronized void initIfNecessary() {\n-        if (metrics == null) {\n-            metrics = new MetricRegistry();\n-            metrics.registerAll(new MemoryUsageGaugeSet());\n-            metrics.registerAll(new GarbageCollectorMetricSet());\n-        }\n-    }\n-\n-    synchronized MetricRegistry getMetrics() {\n-        return metrics;\n-    }\n-\n-    @Override\n-    public void start(Configuration conf) {\n-        initIfNecessary();\n-\n-        int metricsOutputFrequency = conf.getInt(\"codahaleStatsOutputFrequencySeconds\", 60);\n-        String prefix = conf.getString(\"codahaleStatsPrefix\", \"\");\n-        String graphiteHost = conf.getString(\"codahaleStatsGraphiteEndpoint\");\n-        String csvDir = conf.getString(\"codahaleStatsCSVEndpoint\");\n-        String slf4jCat = conf.getString(\"codahaleStatsSlf4jEndpoint\");\n-        String jmxDomain = conf.getString(\"codahaleStatsJmxEndpoint\");\n-\n-        if (!Strings.isNullOrEmpty(graphiteHost)) {\n-            LOG.info(\"Configuring stats with graphite\");\n-            HostAndPort addr = HostAndPort.fromString(graphiteHost);\n-            final Graphite graphite = new Graphite(\n-                    new InetSocketAddress(addr.getHostText(), addr.getPort()));\n-            reporters.add(GraphiteReporter.forRegistry(getMetrics())\n-                          .prefixedWith(prefix)\n-                          .convertRatesTo(TimeUnit.SECONDS)\n-                          .convertDurationsTo(TimeUnit.MILLISECONDS)\n-                          .filter(MetricFilter.ALL)\n-                          .build(graphite));\n-        }\n-        if (!Strings.isNullOrEmpty(csvDir)) {\n-            // NOTE: 1/ metrics output files are exclusive to a given process\n-            // 2/ the output directory must exist\n-            // 3/ if output files already exist they are not overwritten and there is no metrics output\n-            File outdir;\n-            if (Strings.isNullOrEmpty(prefix)) {\n-                outdir = new File(csvDir, prefix);\n-            } else {\n-                outdir = new File(csvDir);\n-            }\n-            LOG.info(\"Configuring stats with csv output to directory [{}]\", outdir.getAbsolutePath());\n-            reporters.add(CsvReporter.forRegistry(getMetrics())\n-                          .convertRatesTo(TimeUnit.SECONDS)\n-                          .convertDurationsTo(TimeUnit.MILLISECONDS)\n-                          .build(outdir));\n-        }\n-        if (!Strings.isNullOrEmpty(slf4jCat)) {\n-            LOG.info(\"Configuring stats with slf4j\");\n-            reporters.add(Slf4jReporter.forRegistry(getMetrics())\n-                          .outputTo(LoggerFactory.getLogger(slf4jCat))\n-                          .convertRatesTo(TimeUnit.SECONDS)\n-                          .convertDurationsTo(TimeUnit.MILLISECONDS)\n-                          .build());\n-        }\n-        if (!Strings.isNullOrEmpty(jmxDomain)) {\n-            LOG.info(\"Configuring stats with jmx\");\n-            jmx = JmxReporter.forRegistry(getMetrics())\n-                .inDomain(jmxDomain)\n-                .convertRatesTo(TimeUnit.SECONDS)\n-                .convertDurationsTo(TimeUnit.MILLISECONDS)\n-                .build();\n-            jmx.start();\n-        }\n-\n-        for (ScheduledReporter r : reporters) {\n-            r.start(metricsOutputFrequency, TimeUnit.SECONDS);\n-        }\n-    }\n-\n-    @Override\n-    public void stop() {\n-        for (ScheduledReporter r : reporters) {\n-            r.report();\n-            r.stop();\n-        }\n-        if (jmx != null) {\n-            jmx.stop();\n-        }\n-    }\n-\n-    @Override\n-    public StatsLogger getStatsLogger(String name) {\n-        initIfNecessary();\n-        return new CodahaleStatsLogger(getMetrics(), name);\n-    }\n-}"},{"sha":"dbb79b62ba43c3dc349cb51a3002ceb407e222d5","filename":"branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,68 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-import org.apache.bookkeeper.stats.OpStatsData;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-\n-import com.codahale.metrics.Timer;\n-import com.codahale.metrics.Snapshot;\n-\n-import java.util.Arrays;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-class CodahaleOpStatsLogger implements OpStatsLogger {\n-    final Timer success;\n-    final Timer fail;\n-\n-    CodahaleOpStatsLogger(Timer success, Timer fail) {\n-        this.success = success;\n-        this.fail = fail;\n-    }\n-\n-    // OpStatsLogger functions\n-    public void registerFailedEvent(long eventLatencyMillis) {\n-        fail.update(eventLatencyMillis, TimeUnit.MILLISECONDS);\n-    }\n-\n-    public void registerSuccessfulEvent(long eventLatencyMillis) {\n-        success.update(eventLatencyMillis, TimeUnit.MILLISECONDS);\n-    }\n-\n-    public synchronized void clear() {\n-        // can't clear a timer\n-    }\n-\n-    /**\n-     * This function should go away soon (hopefully).\n-     */\n-    public synchronized OpStatsData toOpStatsData() {\n-        long numFailed = fail.getCount();\n-        long numSuccess = success.getCount();\n-        Snapshot s = success.getSnapshot();\n-        double avgLatencyMillis = s.getMean();\n-\n-        double[] default_percentiles = {10, 50, 90, 99, 99.9, 99.99};\n-        long[] latenciesMillis = new long[default_percentiles.length];\n-        Arrays.fill(latenciesMillis, Long.MAX_VALUE);\n-        for (int i = 0; i < default_percentiles.length; i++) {\n-            latenciesMillis[i] = (long)s.getValue(default_percentiles[i]);\n-        }\n-        return new OpStatsData(numSuccess, numFailed, avgLatencyMillis, latenciesMillis);\n-    }\n-}"},{"sha":"156290b678ec51bf8151c74e15c27131775d3cd0","filename":"branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","status":"removed","additions":0,"deletions":99,"changes":99,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,99 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-import com.codahale.metrics.Timer;\n-import com.codahale.metrics.MetricRegistry;\n-import static com.codahale.metrics.MetricRegistry.name;\n-\n-import org.apache.bookkeeper.stats.Counter;\n-import org.apache.bookkeeper.stats.Gauge;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-import org.apache.bookkeeper.stats.StatsLogger;\n-\n-public class CodahaleStatsLogger implements StatsLogger {\n-    protected final String basename;\n-    final MetricRegistry metrics;\n-\n-    CodahaleStatsLogger(MetricRegistry metrics, String basename) {\n-        this.metrics = metrics;\n-        this.basename = basename;\n-    }\n-\n-    @Override\n-    public OpStatsLogger getOpStatsLogger(String statName) {\n-        Timer success = metrics.timer(name(basename, statName));\n-        Timer failure = metrics.timer(name(basename, statName+\"-fail\"));\n-        return new CodahaleOpStatsLogger(success, failure);\n-    }\n-\n-    @Override\n-    public Counter getCounter(String statName) {\n-        final com.codahale.metrics.Counter c = metrics.counter(name(basename, statName));\n-        return new Counter() {\n-            @Override\n-            public synchronized void clear() {\n-                long cur = c.getCount();\n-                c.dec(cur);\n-            }\n-\n-            @Override\n-            public Long get() {\n-                return c.getCount();\n-            }\n-\n-            @Override\n-            public void inc() {\n-                c.inc();\n-            }\n-\n-            @Override\n-            public void dec() {\n-                c.dec();\n-            }\n-\n-            @Override\n-            public void add(long delta) {\n-                c.inc(delta);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public <T extends Number> void registerGauge(final String statName, final Gauge<T> gauge) {\n-        String metricName = name(basename, statName);\n-        metrics.remove(metricName);\n-\n-        metrics.register(metricName, new com.codahale.metrics.Gauge<T>() {\n-                @Override\n-                public T getValue() {\n-                    return gauge.getSample();\n-                }\n-            });\n-    }\n-\n-    @Override\n-    public StatsLogger scope(String scope) {\n-        String scopeName;\n-        if (0 == basename.length()) {\n-            scopeName = scope;\n-        } else {\n-            scopeName = name(basename, scope);\n-        }\n-        return new CodahaleStatsLogger(metrics, scopeName);\n-    }\n-}"},{"sha":"f4287ff2235642e5bad407eb51e43a54e54bcd83","filename":"branch-4.3/bookkeeper-stats-providers/pom.xml","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,42 +0,0 @@\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n-                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <parent>\n-    <artifactId>bookkeeper</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <modelVersion>4.0.0</modelVersion>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <version>4.3.0</version>\n-  <artifactId>bookkeeper-stats-providers</artifactId>\n-  <packaging>pom</packaging>\n-  <name>bookkeeper-stats-providers</name>\n-  <modules>\n-    <module>twitter-science-provider</module>\n-    <module>twitter-ostrich-provider</module>\n-    <module>codahale-metrics-provider</module>\n-  </modules>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n-  </properties>\n-</project>"},{"sha":"e2b50f502496678b8920d8aeab7856f6504398d8","filename":"branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,55 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>bookkeeper</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-    <relativePath>../..</relativePath>\n-  </parent>\n-  <groupId>org.apache.bookkeeper.stats</groupId>\n-  <artifactId>twitter-ostrich-provider</artifactId>\n-  <name>Stats provider for twitter-ostrich package</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <project.libdir>${basedir}/lib</project.libdir>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper.stats</groupId>\n-      <artifactId>bookkeeper-stats-api</artifactId>\n-      <version>${project.parent.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.twitter</groupId>\n-      <artifactId>ostrich_2.9.2</artifactId>\n-      <version>9.1.3</version>\n-    </dependency>\n-  </dependencies>\n-  <repositories>\n-    <repository>\n-      <id>twitter</id>\n-      <name>Twitter repo</name>\n-      <layout>default</layout>\n-      <url>http://maven.twttr.com</url>\n-    </repository>\n-  </repositories>\n-</project> "},{"sha":"903562901b9b294f7ef1b3f824e5504f8b881e1e","filename":"branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","status":"removed","additions":0,"deletions":53,"changes":53,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,53 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.ostrich;\n-\n-import org.apache.bookkeeper.stats.Counter;\n-\n-class CounterImpl implements Counter {\n-\n-    private final com.twitter.ostrich.stats.Counter ostrichCounter;\n-\n-    CounterImpl(com.twitter.ostrich.stats.Counter ostrichCounter) {\n-        this.ostrichCounter = ostrichCounter;\n-    }\n-\n-    @Override\n-    public void clear() {\n-        this.ostrichCounter.reset();\n-    }\n-\n-    @Override\n-    public void inc() {\n-        this.ostrichCounter.incr();\n-    }\n-\n-    @Override\n-    public void dec() {\n-        this.ostrichCounter.incr(-1);\n-    }\n-\n-    @Override\n-    public void add(long delta) {\n-        this.ostrichCounter.incr((int)delta);\n-    }\n-\n-    @Override\n-    public Long get() {\n-        return this.ostrichCounter.apply();\n-    }\n-}"},{"sha":"ba969bad79096341d8edf48404010d3fb730e7c5","filename":"branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","status":"removed","additions":0,"deletions":81,"changes":81,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,81 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.ostrich;\n-\n-import org.apache.bookkeeper.stats.OpStatsData;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-\n-class OpStatsLoggerImpl implements OpStatsLogger {\n-\n-    static final double[] PERCENTILES = new double[] {\n-            0.1, 0.5, 0.9, 0.99, 0.999, 0.9999\n-    };\n-\n-    private final String scope;\n-    private final com.twitter.ostrich.stats.Counter successCounter;\n-    private final com.twitter.ostrich.stats.Counter failureCounter;\n-    private final com.twitter.ostrich.stats.Metric successMetric;\n-    private final com.twitter.ostrich.stats.Metric failureMetric;\n-\n-    OpStatsLoggerImpl(String scope, com.twitter.ostrich.stats.StatsProvider statsProvider) {\n-        this.scope = scope;\n-        successCounter = statsProvider.getCounter(statName(\"requests/success\"));\n-        failureCounter = statsProvider.getCounter(statName(\"requests/failure\"));\n-        successMetric = statsProvider.getMetric(statName(\"latency/success\"));\n-        failureMetric = statsProvider.getMetric(statName(\"latency/failure\"));\n-    }\n-\n-    private String statName(String statName) {\n-        return String.format(\"%s/%s\", scope, statName);\n-    }\n-\n-    @Override\n-    public void registerFailedEvent(long eventLatencyMillis) {\n-        failureMetric.add((int)eventLatencyMillis);\n-        failureCounter.incr();\n-    }\n-\n-    @Override\n-    public void registerSuccessfulEvent(long eventLatencyMillis) {\n-        successMetric.add((int)eventLatencyMillis);\n-        successCounter.incr();\n-    }\n-\n-    @Override\n-    public OpStatsData toOpStatsData() {\n-        long numSuccess = successCounter.apply();\n-        long numFailures = failureCounter.apply();\n-        com.twitter.ostrich.stats.Distribution distribution = successMetric.apply();\n-        com.twitter.ostrich.stats.Histogram histogram = distribution.histogram();\n-        double avgLatency = distribution.average();\n-        long[] percentiles = new long[PERCENTILES.length];\n-        int i = 0;\n-        for (double percentile : PERCENTILES) {\n-            percentiles[i] = histogram.getPercentile(percentile);\n-            ++i;\n-        }\n-        return new OpStatsData(numSuccess, numFailures, avgLatency, percentiles);\n-    }\n-\n-    @Override\n-    public void clear() {\n-        successCounter.reset();\n-        failureCounter.reset();\n-        successMetric.clear();\n-        failureMetric.clear();\n-    }\n-}"},{"sha":"62246cff8d612f3c21428621b8f85bcdfdc69acb","filename":"branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,78 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.ostrich;\n-\n-import com.twitter.ostrich.admin.CustomHttpHandler;\n-import com.twitter.ostrich.admin.RuntimeEnvironment;\n-import com.twitter.util.Duration;\n-import org.apache.bookkeeper.stats.StatsLogger;\n-import org.apache.bookkeeper.stats.StatsProvider;\n-import org.apache.commons.configuration.Configuration;\n-import scala.Some;\n-import scala.collection.immutable.$colon$colon;\n-import scala.collection.immutable.List;\n-import scala.collection.immutable.List$;\n-import scala.collection.immutable.Map;\n-import scala.collection.immutable.Map$;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-public class OstrichProvider implements StatsProvider {\n-\n-    protected final static String STATS_EXPORT = \"statsExport\";\n-    protected final static String STATS_HTTP_PORT = \"statsHttpPort\";\n-\n-    private com.twitter.ostrich.admin.AdminHttpService statsExporter = null;\n-\n-    private static <T> List<T> list(T ... ts) {\n-        List<T> result = List$.MODULE$.empty();\n-        for (int i = ts.length; i > 0; i--) {\n-            result = new $colon$colon<T>(ts[i-1], result);\n-        }\n-        return result;\n-    }\n-\n-    private static <K, V> Map<K, V> emptyMap() {\n-        Map<K, V> result = Map$.MODULE$.empty();\n-        return result;\n-    }\n-\n-    @Override\n-    public void start(Configuration conf) {\n-        if (conf.getBoolean(STATS_EXPORT, false)) {\n-            statsExporter = new com.twitter.ostrich.admin.AdminServiceFactory(\n-                    conf.getInt(STATS_HTTP_PORT, 9002), 20, null, Some.apply(\"\"), null,\n-                    OstrichProvider.<String, CustomHttpHandler>emptyMap(), list(Duration.apply(1, TimeUnit.MINUTES))\n-            ).apply(RuntimeEnvironment.apply(this, new String[0]));\n-        }\n-        if (null != statsExporter) {\n-            statsExporter.start();\n-        }\n-    }\n-\n-    @Override\n-    public void stop() {\n-        if (null != statsExporter) {\n-            statsExporter.shutdown();\n-        }\n-    }\n-\n-    @Override\n-    public StatsLogger getStatsLogger(String scope) {\n-        return new OstrichStatsLoggerImpl(scope, com.twitter.ostrich.stats.Stats.get(\"\"));\n-    }\n-}"},{"sha":"483ba0f6f835d6dab783d688e03c04faf2bc1725","filename":"branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,69 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.ostrich;\n-\n-import org.apache.bookkeeper.stats.Counter;\n-import org.apache.bookkeeper.stats.Gauge;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-import org.apache.bookkeeper.stats.StatsLogger;\n-import scala.Function0;\n-import scala.runtime.AbstractFunction0;\n-\n-/**\n- * Implementation of ostrich logger.\n- */\n-class OstrichStatsLoggerImpl implements StatsLogger {\n-\n-    protected final String scope;\n-    protected final com.twitter.ostrich.stats.StatsProvider ostrichProvider;\n-\n-    OstrichStatsLoggerImpl(String scope, com.twitter.ostrich.stats.StatsProvider ostrichProvider) {\n-        this.scope = scope;\n-        this.ostrichProvider = ostrichProvider;\n-    }\n-\n-    @Override\n-    public OpStatsLogger getOpStatsLogger(String statName) {\n-        return new OpStatsLoggerImpl(getStatName(statName), ostrichProvider);\n-    }\n-\n-    @Override\n-    public Counter getCounter(String statName) {\n-        return new CounterImpl(ostrichProvider.getCounter(getStatName(statName)));\n-    }\n-\n-    @Override\n-    public <T extends Number> void registerGauge(final String statName, final Gauge<T> gauge) {\n-        Function0<Object> gaugeFunc = new AbstractFunction0<Object>() {\n-            @Override\n-            public Object apply() {\n-                return gauge.getSample().doubleValue();\n-            }\n-        };\n-        ostrichProvider.addGauge(getStatName(statName), gaugeFunc);\n-    }\n-\n-    private String getStatName(String statName) {\n-        return String.format(\"%s/%s\", scope, statName);\n-    }\n-\n-    @Override\n-    public StatsLogger scope(String scope) {\n-        return new OstrichStatsLoggerImpl(getStatName(scope), ostrichProvider);\n-    }\n-\n-}"},{"sha":"0b0ad0233ace57dea5f633b1c5325d87d1f34ebf","filename":"branch-4.3/bookkeeper-stats-providers/twitter-science-provider/pom.xml","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,89 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>bookkeeper</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-    <relativePath>../..</relativePath>\n-  </parent>\n-  <groupId>org.apache.bookkeeper.stats</groupId>\n-  <artifactId>twitter-science-provider</artifactId>\n-  <name>Stats provider for twitter-stats package</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <project.libdir>${basedir}/lib</project.libdir>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper.stats</groupId>\n-      <artifactId>bookkeeper-stats-api</artifactId>\n-      <version>${project.parent.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.twitter.common</groupId>\n-      <artifactId>stats</artifactId>\n-      <version>0.0.64</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.twitter.common</groupId>\n-      <artifactId>net-http-handlers</artifactId>\n-      <exclusions>\n-        <exclusion>\n-          <groupId>javax.servlet</groupId>\n-          <artifactId>servlet-api</artifactId>\n-        </exclusion>\n-      </exclusions>\n-      <version>0.0.39</version>\n-      <scope>compile</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.twitter.common</groupId>\n-      <artifactId>stats-time-series</artifactId>\n-      <version>0.0.36</version>\n-      <scope>compile</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>com.twitter.common</groupId>\n-      <artifactId>stats-jvm</artifactId>\n-      <version>0.0.33</version>\n-      <scope>compile</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.eclipse.jetty</groupId>\n-      <artifactId>jetty-server</artifactId>\n-      <version>8.1.4.v20120524</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.eclipse.jetty</groupId>\n-      <artifactId>jetty-servlet</artifactId>\n-      <version>8.1.4.v20120524</version>\n-    </dependency>\n-  </dependencies>\n-  <repositories>\n-    <repository>\n-      <id>twitter</id>\n-      <name>Twitter repo</name>\n-      <layout>default</layout>\n-      <url>http://maven.twttr.com</url>\n-    </repository>\n-  </repositories>\n-</project> "},{"sha":"df5c7ad19c93a44a550fdef5b1a57968a872fcba","filename":"branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,69 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.science;\n-\n-import com.twitter.common.stats.Rate;\n-import com.twitter.common.stats.Stats;\n-import org.apache.bookkeeper.stats.Counter;\n-\n-import java.util.concurrent.atomic.AtomicLong;\n-/**\n- * This will export the value and the rate (per sec) to {@link org.apache.bookkeeper.stats.Stats}\n- */\n-public class CounterImpl implements Counter {\n-    // The name used to export this stat\n-    private String name;\n-    private AtomicLong value;\n-\n-    public CounterImpl(String name) {\n-        this.name = name;\n-        value = new AtomicLong(0);\n-        setUpStatsExport();\n-    }\n-\n-    @Override\n-    public synchronized void clear() {\n-        value.getAndSet(0);\n-    }\n-\n-    @Override\n-    public Long get() {\n-        return value.get();\n-    }\n-\n-    private void setUpStatsExport() {\n-        // Export the value.\n-        Stats.export(name, value);\n-        // Export the rate of this value.\n-        Stats.export(Rate.of(name + \"_per_sec\", value).build());\n-    }\n-\n-    @Override\n-    public void inc() {\n-        value.incrementAndGet();\n-    }\n-\n-    @Override\n-    public void dec() {\n-        value.decrementAndGet();\n-    }\n-\n-    @Override\n-    public void add(long delta) {\n-        value.addAndGet(delta);\n-    }\n-}"},{"sha":"2ac29da131f51f2733f26395c1b08f98dba554f8","filename":"branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,77 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.science;\n-\n-import com.twitter.common.application.ShutdownRegistry;\n-import com.twitter.common.base.Supplier;\n-import com.twitter.common.net.http.handlers.VarsHandler;\n-import com.twitter.common.net.http.handlers.VarsJsonHandler;\n-import com.twitter.common.quantity.Amount;\n-import com.twitter.common.quantity.Time;\n-import com.twitter.common.stats.*;\n-import org.eclipse.jetty.server.Server;\n-import org.eclipse.jetty.servlet.ServletContextHandler;\n-import org.eclipse.jetty.servlet.ServletHolder;\n-\n-/**\n- * Starts a jetty server on a configurable port and the samplers to export stats.\n- */\n-public class HTTPStatsExporter {\n-    final Server jettyServer;\n-    final ShutdownRegistry.ShutdownRegistryImpl shutDownRegistry;\n-    final int port;\n-\n-    public HTTPStatsExporter(int port) {\n-        // Create the ShutdownRegistry needed for our sampler\n-        this.shutDownRegistry = new ShutdownRegistry.ShutdownRegistryImpl();\n-        this.port = port;\n-        this.jettyServer = new Server(port);\n-    }\n-\n-    public void start() throws Exception {\n-        // Start the sampler. Sample every 1 second and retain for 1 hour\n-        // TODO(Aniruddha): Make this configurable if needed.\n-        TimeSeriesRepository sampler = new TimeSeriesRepositoryImpl(Stats.STAT_REGISTRY,\n-                Amount.of(1L, Time.SECONDS), Amount.of(1L, Time.HOURS));\n-        sampler.start(this.shutDownRegistry);\n-        // Export JVM stats\n-        JvmStats.export();\n-        // Configure handlers\n-        Supplier<Iterable<Stat<?>>> supplier = new Supplier<Iterable<Stat<?>>>() {\n-            @Override\n-            public Iterable<Stat<?>> get() {\n-                return Stats.getVariables();\n-            }\n-        };\n-\n-        // Start jetty.\n-        ServletContextHandler context = new ServletContextHandler();\n-        context.setContextPath(\"/\");\n-        this.jettyServer.setHandler(context);\n-        context.addServlet(new ServletHolder(new VarsHandler(supplier)), \"/vars\");\n-        context.addServlet(new ServletHolder(new VarsJsonHandler(supplier)), \"/vars.json\");\n-        this.jettyServer.start();\n-    }\n-\n-    public void stop() throws Exception {\n-        this.jettyServer.stop();\n-        if (this.shutDownRegistry != null) {\n-            this.shutDownRegistry.execute();\n-        }\n-    }\n-}"},{"sha":"ac236f6196e0d171d2ee419b715f332c1836c9e6","filename":"branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,72 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.science;\n-\n-import com.twitter.common.stats.*;\n-import org.apache.bookkeeper.stats.OpStatsData;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-\n-import java.util.Arrays;\n-import java.util.Map;\n-import java.util.concurrent.TimeUnit;\n-\n-/**\n- * An implementation of the OpStatsLogger interface that handles per operation type stats.\n- * Internals use twitter.common.stats for exporting metrics.\n- */\n-public class OpStatsLoggerImpl implements OpStatsLogger {\n-    private final RequestStats events;\n-\n-    public OpStatsLoggerImpl(String name) {\n-        this.events = new RequestStats(name);\n-    }\n-\n-    // OpStatsLogger functions\n-    public void registerFailedEvent(long eventLatencyMillis) {\n-        this.events.incErrors(TimeUnit.MILLISECONDS.toMicros(eventLatencyMillis));\n-    }\n-\n-    public void registerSuccessfulEvent(long eventLatencyMillis) {\n-        this.events.requestComplete(TimeUnit.MILLISECONDS.toMicros(eventLatencyMillis));\n-    }\n-\n-    public synchronized void clear() {\n-        //TODO(Aniruddha): Figure out how to clear RequestStats. Till then this is a no-op\n-    }\n-\n-    /**\n-     * This function should go away soon (hopefully).\n-     */\n-    public synchronized OpStatsData toOpStatsData() {\n-        long numFailed = this.events.getErrorCount();\n-        long numSuccess = this.events.getSlidingStats().getEventCounter().get() - numFailed;\n-        double avgLatencyMillis = this.events.getSlidingStats().getPerEventLatency().read() / 1000.0;\n-        double[] default_percentiles = {10, 50, 90, 99, 99.9, 99.99};\n-        long[] latenciesMillis = new long[default_percentiles.length];\n-        Arrays.fill(latenciesMillis, Long.MAX_VALUE);\n-        Map<Double, ? extends Stat> realPercentileLatencies =\n-                this.events.getPercentile().getPercentiles();\n-        for (int i = 0; i < default_percentiles.length; i++) {\n-            if (realPercentileLatencies.containsKey(default_percentiles[i])) {\n-                @SuppressWarnings(\"unchecked\")\n-                Stat<Double> latency = realPercentileLatencies.get(default_percentiles[i]);\n-                latenciesMillis[i] = TimeUnit.MICROSECONDS.toMillis(latency.read().longValue());\n-            }\n-        }\n-        return new OpStatsData(numSuccess, numFailed, avgLatencyMillis, latenciesMillis);\n-    }\n-}"},{"sha":"c30c54529855cf108516143b3eeedaafeda65387","filename":"branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,72 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.science;\n-\n-import com.twitter.common.stats.SampledStat;\n-import com.twitter.common.stats.Stats;\n-import org.apache.bookkeeper.stats.Counter;\n-import org.apache.bookkeeper.stats.Gauge;\n-import org.apache.bookkeeper.stats.OpStatsLogger;\n-import org.apache.bookkeeper.stats.StatsLogger;\n-\n-/**\n- * Implementation of twitter-stats logger.\n- */\n-public class TwitterStatsLoggerImpl implements StatsLogger {\n-\n-    protected final String name;\n-\n-    public TwitterStatsLoggerImpl(String name) {\n-        this.name = name;\n-    }\n-\n-    @Override\n-    public OpStatsLogger getOpStatsLogger(String statName) {\n-        return new OpStatsLoggerImpl(getStatName(statName));\n-    }\n-\n-    @Override\n-    public Counter getCounter(String statName) {\n-        return new CounterImpl(getStatName(statName));\n-    }\n-\n-    @Override\n-    public <T extends Number> void registerGauge(final String statName, final Gauge<T> gauge) {\n-        Stats.export(new SampledStat<Number>(getStatName(statName), gauge.getDefaultValue()) {\n-            @Override\n-            public T doSample() {\n-                return gauge.getSample();\n-            }\n-        });\n-    }\n-\n-    private String getStatName(String statName) {\n-        return (name + \"_\" + statName).toLowerCase();\n-    }\n-\n-    @Override\n-    public StatsLogger scope(String scope) {\n-        String scopeName;\n-        if (0 == name.length()) {\n-            scopeName = scope;\n-        } else {\n-            scopeName = name + \"_\" + scope;\n-        }\n-        return new TwitterStatsLoggerImpl(scopeName);\n-    }\n-\n-}"},{"sha":"cc6e3f064e17261041d49fef1a8691be7e704bb9","filename":"branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,63 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats.twitter.science;\n-\n-import org.apache.bookkeeper.stats.StatsLogger;\n-import org.apache.bookkeeper.stats.StatsProvider;\n-import org.apache.commons.configuration.Configuration;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class TwitterStatsProvider implements StatsProvider {\n-\n-    static final Logger LOG = LoggerFactory.getLogger(TwitterStatsProvider.class);\n-\n-    protected final static String STATS_EXPORT = \"statsExport\";\n-    protected final static String STATS_HTTP_PORT = \"statsHttpPort\";\n-\n-    private HTTPStatsExporter statsExporter = null;\n-\n-    @Override\n-    public void start(Configuration conf) {\n-        if (conf.getBoolean(STATS_EXPORT, false)) {\n-            statsExporter = new HTTPStatsExporter(conf.getInt(STATS_HTTP_PORT, 9002));\n-        }\n-        if (null != statsExporter) {\n-            try {\n-                statsExporter.start();\n-            } catch (Exception e) {\n-                LOG.error(\"Fail to start stats exporter : \", e);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void stop() {\n-        if (null != statsExporter) {\n-            try {\n-                statsExporter.stop();\n-            } catch (Exception e) {\n-                LOG.error(\"Fail to stop stats exporter : \", e);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public StatsLogger getStatsLogger(String name) {\n-        return new TwitterStatsLoggerImpl(name);\n-    }\n-}"},{"sha":"286c01c2f3e490bf28fe0b54bc5243c1a8fe80f0","filename":"branch-4.3/bookkeeper-stats/pom.xml","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,57 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>bookkeeper</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <groupId>org.apache.bookkeeper.stats</groupId>\n-  <artifactId>bookkeeper-stats-api</artifactId>\n-  <name>Stats API for bookkeeper</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <project.libdir>${basedir}/lib</project.libdir>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>commons-configuration</groupId>\n-      <artifactId>commons-configuration</artifactId>\n-      <version>1.6</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n-      <version>4.8.1</version>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.slf4j</groupId>\n-      <artifactId>slf4j-api</artifactId>\n-      <version>1.6.4</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.slf4j</groupId>\n-      <artifactId>slf4j-log4j12</artifactId>\n-      <version>1.6.4</version>\n-    </dependency>\n-  </dependencies>\n-</project>"},{"sha":"393c24cf6bde5966585f1d26ab52d87a7c9569e5","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","status":"removed","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,50 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-/**\n- * Simple stats that require only increment and decrement\n- * functions on a Long. Metrics like the number of topics, persist queue size\n- * etc. should use this.\n- */\n-public interface Counter {\n-    /**\n-     * Clear this stat.\n-     */\n-    public void clear();\n-\n-    /**\n-     * Increment the value associated with this stat.\n-     */\n-    public void inc();\n-\n-    /**\n-     * Decrement the value associated with this stat.\n-     */\n-    public void dec();\n-\n-    /**\n-     * Add delta to the value associated with this stat.\n-     * @param delta\n-     */\n-    public void add(long delta);\n-\n-    /**\n-     * Get the value associated with this stat.\n-     */\n-    public Long get();\n-}"},{"sha":"326b7e1a37d9437f12404580cbcc97704c04304b","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,28 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-/**\n- * A guage is a value that has only one value at a specific point in time.\n- * An example is the number of elements in a queue. The value of T must be\n- * some numeric type.\n- */\n-public interface Gauge<T extends Number> {\n-    public T getDefaultValue();\n-    public T getSample();\n-}"},{"sha":"21a103d6db77a9021b44ca75d8c603fbd7a37f90","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,96 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-public class NullStatsLogger implements StatsLogger {\n-\n-    public static final NullStatsLogger INSTANCE = new NullStatsLogger();\n-\n-    static class NullOpStatsLogger implements OpStatsLogger {\n-        final OpStatsData nullOpStats = new OpStatsData(0, 0, 0, new long[6]);\n-\n-        @Override\n-        public void registerFailedEvent(long eventLatencyMillis) {\n-            // nop\n-        }\n-\n-        @Override\n-        public void registerSuccessfulEvent(long eventLatencyMillis) {\n-            // nop\n-        }\n-\n-        @Override\n-        public OpStatsData toOpStatsData() {\n-            return nullOpStats;\n-        }\n-\n-        @Override\n-        public void clear() {\n-            // nop\n-        }\n-    }\n-    static NullOpStatsLogger nullOpStatsLogger = new NullOpStatsLogger();\n-\n-    static class NullCounter implements Counter {\n-        @Override\n-        public void clear() {\n-            // nop\n-        }\n-\n-        @Override\n-        public void inc() {\n-            // nop\n-        }\n-\n-        @Override\n-        public void dec() {\n-            // nop\n-        }\n-\n-        @Override\n-        public void add(long delta) {\n-            // nop\n-        }\n-\n-        @Override\n-        public Long get() {\n-            return 0L;\n-        }\n-    }\n-    static NullCounter nullCounter = new NullCounter();\n-\n-    @Override\n-    public OpStatsLogger getOpStatsLogger(String name) {\n-        return nullOpStatsLogger;\n-    }\n-\n-    @Override\n-    public Counter getCounter(String name) {\n-        return nullCounter;\n-    }\n-\n-    @Override\n-    public <T extends Number> void registerGauge(String name, Gauge<T> gauge) {\n-        // nop\n-    }\n-\n-    @Override\n-    public StatsLogger scope(String name) {\n-        return this;\n-    }\n-\n-}"},{"sha":"c817e74600999120dd64041c0c7b99c8bdca92a7","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,40 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-import org.apache.commons.configuration.Configuration;\n-\n-public class NullStatsProvider implements StatsProvider {\n-\n-    final StatsLogger nullStatsLogger = new NullStatsLogger();\n-\n-    @Override\n-    public void start(Configuration conf) {\n-        // nop\n-    }\n-\n-    @Override\n-    public void stop() {\n-        // nop\n-    }\n-\n-    @Override\n-    public StatsLogger getStatsLogger(String scope) {\n-        return nullStatsLogger;\n-    }\n-\n-}"},{"sha":"1d3cd5faf10853a94ec7c562ce8d2a75d35b8d9f","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,76 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-import java.util.Arrays;\n-\n-/**\n- * This class provides a read view of operation specific stats.\n- * We expose this to JMX.\n- * We use primitives because the class has to conform to CompositeViewData.\n- */\n-public class OpStatsData {\n-    private final long numSuccessfulEvents, numFailedEvents;\n-    // All latency values are in Milliseconds.\n-    private final double avgLatencyMillis;\n-    // 10.0 50.0, 90.0, 99.0, 99.9, 99.99 in that order.\n-    // TODO(Aniruddha): Figure out if we can use a Map\n-    private final long[] percentileLatenciesMillis;\n-    public OpStatsData (long numSuccessfulEvents, long numFailedEvents,\n-                        double avgLatencyMillis, long[] percentileLatenciesMillis) {\n-        this.numSuccessfulEvents = numSuccessfulEvents;\n-        this.numFailedEvents = numFailedEvents;\n-        this.avgLatencyMillis = avgLatencyMillis;\n-        this.percentileLatenciesMillis =\n-            Arrays.copyOf(percentileLatenciesMillis, percentileLatenciesMillis.length);\n-    }\n-\n-    public long getP10Latency() {\n-        return this.percentileLatenciesMillis[0];\n-    }\n-    public long getP50Latency() {\n-        return this.percentileLatenciesMillis[1];\n-    }\n-\n-    public long getP90Latency() {\n-        return this.percentileLatenciesMillis[2];\n-    }\n-\n-    public long getP99Latency() {\n-        return this.percentileLatenciesMillis[3];\n-    }\n-\n-    public long getP999Latency() {\n-        return this.percentileLatenciesMillis[4];\n-    }\n-\n-    public long getP9999Latency() {\n-        return this.percentileLatenciesMillis[5];\n-    }\n-\n-    public long getNumSuccessfulEvents() {\n-        return this.numSuccessfulEvents;\n-    }\n-\n-    public long getNumFailedEvents() {\n-        return this.numFailedEvents;\n-    }\n-\n-    public double getAvgLatencyMillis() {\n-        return this.avgLatencyMillis;\n-    }\n-}"},{"sha":"ca0477f980813672704f069ed87bf1bac733ddc1","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,49 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-/**\n- * This interface handles logging of statistics related to each operation (PUBLISH,\n- * CONSUME etc.)\n- */\n-public interface OpStatsLogger {\n-\n-    /**\n-     * Increment the failed op counter with the given eventLatencyMillis.\n-     * @param eventLatencyMillis The event latency in milliseconds.\n-     */\n-    public void registerFailedEvent(long eventLatencyMillis);\n-\n-    /**\n-     * An operation succeeded with the given eventLatencyMillis. Update\n-     * stats to reflect the same\n-     * @param eventLatencyMillis The event latency in milliseconds.\n-     */\n-    public void registerSuccessfulEvent(long eventLatencyMillis);\n-\n-    /**\n-     * @return Returns an OpStatsData object with necessary values. We need this function\n-     * to support JMX exports. This should be deprecated sometime in the near future.\n-     * populated.\n-     */\n-    public OpStatsData toOpStatsData();\n-\n-    /**\n-     * Clear stats for this operation.\n-     */\n-    public void clear();\n-}"},{"sha":"8f8ca45b07ea438a702344a602d27fd757863da7","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,63 +0,0 @@\n-/**\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-package org.apache.bookkeeper.stats;\n-\n-import org.apache.commons.configuration.Configuration;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.InvocationTargetException;\n-\n-public class Stats {\n-    static final Logger LOG = LoggerFactory.getLogger(Stats.class);\n-    public final static String STATS_PROVIDER_CLASS = \"statsProviderClass\";\n-\n-    static StatsProvider prov = new NullStatsProvider();\n-\n-    public static void loadStatsProvider(Configuration conf) {\n-        String className = conf.getString(STATS_PROVIDER_CLASS);\n-        if (className != null) {\n-            try {\n-                Class cls = Class.forName(className);\n-                @SuppressWarnings(\"unchecked\")\n-                Constructor<? extends StatsProvider> cons =\n-                    (Constructor<? extends StatsProvider>)cls.getDeclaredConstructor();\n-                prov = cons.newInstance();\n-            } catch (ClassNotFoundException cnfe) {\n-                LOG.error(\"Couldn't find configured class(\" + className +\")\", cnfe);\n-            } catch (NoSuchMethodException nsme) {\n-                LOG.error(\"Couldn't find default constructor for class (\" + className + \")\", nsme);\n-            } catch (InstantiationException ie) {\n-                LOG.error(\"Couldn't construct class (\" + className + \")\", ie);\n-            } catch (IllegalAccessException iae) {\n-                LOG.error(\"Couldn't construct class (\" + className + \"),\"\n-                          + \" Is the constructor private?\", iae);\n-            } catch (InvocationTargetException ite) {\n-                LOG.error(\"Constructor threw an exception. It should not have.\", ite);\n-            }\n-        }\n-    }\n-\n-    public static StatsProvider get() {\n-        return prov;\n-    }\n-}"},{"sha":"f7791e8b26ae7d2a577c7fad66e1ed0dd66491f0","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","status":"removed","additions":0,"deletions":55,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,55 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-/**\n- * A simple interface that exposes just 2 useful methods. One to get the logger for an Op stat\n- * and another to get the logger for a simple stat\n- */\n-public interface StatsLogger {\n-    /**\n-     * @param name\n-     *          Stats Name\n-     * @return Get the logger for an OpStat described by the <i>name</i>.\n-     */\n-    public OpStatsLogger getOpStatsLogger(String name);\n-\n-    /**\n-     * @param name\n-     *          Stats Name\n-     * @return Get the logger for a simple stat described by the <i>name</i>\n-     */\n-    public Counter getCounter(String name);\n-\n-    /**\n-     * Register given <i>guage</i> as name <i>name</i>.\n-     *\n-     * @param name\n-     *          gauge name\n-     */\n-    public <T extends Number> void registerGauge(String name, Gauge<T> gauge);\n-\n-    /**\n-     * Provide the stats logger under scope <i>name</i>.\n-     *\n-     * @param name\n-     *          scope name.\n-     * @return stats logger under scope <i>name</i>.\n-     */\n-    public StatsLogger scope(String name);\n-\n-}"},{"sha":"b06e0a6ba9e3dc6b0cf99ff760a68b6a91c37361","filename":"branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,45 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations under\n- * the License.\n- */\n-package org.apache.bookkeeper.stats;\n-\n-import org.apache.commons.configuration.Configuration;\n-\n-/**\n- * Provider to provide stats logger for different scopes.\n- */\n-public interface StatsProvider {\n-    /**\n-     * Intialize the stats provider by loading the given configuration <i>conf</i>.\n-     *\n-     * @param conf\n-     *          Configuration to configure the stats provider.\n-     */\n-    public void start(Configuration conf);\n-\n-    /**\n-     * Close the stats provider\n-     */\n-    public void stop();\n-\n-    /**\n-     * Return the stats logger to a given <i>scope</i>\n-     * @param scope\n-     *          Scope for the given stats\n-     * @return stats logger for the given <i>scope</i>\n-     */\n-    public StatsLogger getStatsLogger(String scope);\n-}"},{"sha":"297cda6f7ed0941879c4d8e495a5cbf861566d34","filename":"branch-4.3/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,84 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>compat-deps</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <artifactId>bookkeeper-server-compat400</artifactId>\n-  <version>4.0.0</version>\n-  <name>bookkeeper-server-compat400</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>bookkeeper-server</artifactId>\n-      <version>4.0.0</version>\n-    </dependency>\n-  </dependencies>\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-shade-plugin</artifactId>\n-        <version>1.5</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>shade</goal>\n-            </goals>\n-            <configuration>\n-              <createDependencyReducedPom>false</createDependencyReducedPom>\n-              <artifactSet>\n-                <includes>\n-                  <include>org.apache.*:*</include>\n-                  <include>org.jboss.*:*</include>\n-                  <include>commons-*:*</include>\n-                </includes>\n-                <excludes>\n-                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n-                </excludes>\n-              </artifactSet>\n-              <relocations>\n-                <relocation>\n-                  <pattern>org.apache</pattern>\n-                  <shadedPattern>org.apache.bk_v4_0_0</shadedPattern>\n-                  <excludes>\n-                    <exclude>org.apache.log4j</exclude>\n-                  </excludes>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.jboss</pattern>\n-                  <shadedPattern>org.jboss.bk_v4_0_0</shadedPattern>\n-                </relocation>\n-              </relocations>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>\n\\ No newline at end of file"},{"sha":"5259316d600920c8900e4ee843e64dac9e11ec3f","filename":"branch-4.3/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,93 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>compat-deps</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <artifactId>bookkeeper-server-compat410</artifactId>\n-  <version>4.1.0</version>\n-  <name>bookkeeper-server-compat410</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>bookkeeper-server</artifactId>\n-      <version>4.1.0</version>\n-    </dependency>\n-  </dependencies>\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-shade-plugin</artifactId>\n-        <version>1.5</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>shade</goal>\n-            </goals>\n-            <configuration>\n-              <createDependencyReducedPom>false</createDependencyReducedPom>\n-              <artifactSet>\n-                <includes>\n-                  <include>org.apache.*:*</include>\n-                  <include>org.jboss.*:*</include>\n-                  <include>commons-*:*</include>\n-                </includes>\n-                <excludes>\n-                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n-                </excludes>\n-              </artifactSet>\n-              <relocations>\n-                <relocation>\n-                  <pattern>org.apache.commons</pattern>\n-                  <shadedPattern>org.apache.bk_v4_1_0.commons</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.bookkeeper</pattern>\n-                  <shadedPattern>org.apache.bk_v4_1_0.bookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.zookeeper</pattern>\n-                  <shadedPattern>org.apache.bk_v4_1_0.bookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.jute</pattern>\n-                  <shadedPattern>org.apache.bk_v4_1_0.jute</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.jboss</pattern>\n-                  <shadedPattern>org.jboss.bk_v4_1_0</shadedPattern>\n-                </relocation>\n-              </relocations>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>\n\\ No newline at end of file"},{"sha":"092e12f8332b3703b1ca6e9a3c5507677af2fd36","filename":"branch-4.3/compat-deps/bookkeeper-server-compat-4.2.0/pom.xml","status":"removed","additions":0,"deletions":93,"changes":93,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/bookkeeper-server-compat-4.2.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/bookkeeper-server-compat-4.2.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/compat-deps/bookkeeper-server-compat-4.2.0/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,93 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>compat-deps</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <artifactId>bookkeeper-server-compat420</artifactId>\n-  <version>4.2.0</version>\n-  <name>bookkeeper-server-compat420</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>bookkeeper-server</artifactId>\n-      <version>4.2.0</version>\n-    </dependency>\n-  </dependencies>\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-shade-plugin</artifactId>\n-        <version>1.5</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>shade</goal>\n-            </goals>\n-            <configuration>\n-              <createDependencyReducedPom>false</createDependencyReducedPom>\n-              <artifactSet>\n-                <includes>\n-                  <include>org.apache.*:*</include>\n-                  <include>org.jboss.*:*</include>\n-                  <include>commons-*:*</include>\n-                </includes>\n-                <excludes>\n-                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n-                </excludes>\n-              </artifactSet>\n-              <relocations>\n-                <relocation>\n-                  <pattern>org.apache.commons</pattern>\n-                  <shadedPattern>org.apache.bk_v4_2_0.commons</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.bookkeeper</pattern>\n-                  <shadedPattern>org.apache.bk_v4_2_0.bookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.zookeeper</pattern>\n-                  <shadedPattern>org.apache.bk_v4_2_0.bookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.jute</pattern>\n-                  <shadedPattern>org.apache.bk_v4_2_0.jute</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.jboss</pattern>\n-                  <shadedPattern>org.jboss.bk_v4_2_0</shadedPattern>\n-                </relocation>\n-              </relocations>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"1d7d38e5e76e30aeba72a5a09fc2c401b5fc7256","filename":"branch-4.3/compat-deps/hedwig-server-compat-4.0.0/pom.xml","status":"removed","additions":0,"deletions":97,"changes":97,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/hedwig-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/hedwig-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/compat-deps/hedwig-server-compat-4.0.0/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,97 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>compat-deps</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <artifactId>hedwig-server-compat400</artifactId>\n-  <version>4.0.0</version>\n-  <name>hedwig-server-compat400</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>hedwig-server</artifactId>\n-      <version>4.0.0</version>\n-    </dependency>\n-  </dependencies>\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-shade-plugin</artifactId>\n-        <version>1.5</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>shade</goal>\n-            </goals>\n-            <configuration>\n-              <createDependencyReducedPom>false</createDependencyReducedPom>\n-              <artifactSet>\n-                <includes>\n-                  <include>org.apache.*:*</include>\n-                  <include>org.jboss.*:*</include>\n-                  <include>commons-*:*</include>\n-                </includes>\n-                <excludes>\n-                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n-                </excludes>\n-              </artifactSet>\n-              <relocations>\n-                <relocation>\n-                  <pattern>org.apache.commons</pattern>\n-                  <shadedPattern>org.apache.hw_v4_0_0.commons</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.bookkeeper</pattern>\n-                  <shadedPattern>org.apache.hw_v4_0_0.bookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.zookeeper</pattern>\n-                  <shadedPattern>org.apache.hw_v4_0_0.zookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.hedwig</pattern>\n-                  <shadedPattern>org.apache.hw_v4_0_0.hedwig</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.jute</pattern>\n-                  <shadedPattern>org.apache.hw_v4_0_0.jute</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.jboss</pattern>\n-                  <shadedPattern>org.jboss.hw_v4_0_0</shadedPattern>\n-                </relocation>\n-              </relocations>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"8534cd44f9160f3d17e487743fa8be677bc64054","filename":"branch-4.3/compat-deps/hedwig-server-compat-4.1.0/pom.xml","status":"removed","additions":0,"deletions":97,"changes":97,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/hedwig-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/hedwig-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/compat-deps/hedwig-server-compat-4.1.0/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,97 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>compat-deps</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <artifactId>hedwig-server-compat410</artifactId>\n-  <version>4.1.0</version>\n-  <name>hedwig-server-compat410</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>hedwig-server</artifactId>\n-      <version>4.1.0</version>\n-    </dependency>\n-  </dependencies>\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-shade-plugin</artifactId>\n-        <version>1.5</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>shade</goal>\n-            </goals>\n-            <configuration>\n-              <createDependencyReducedPom>false</createDependencyReducedPom>\n-              <artifactSet>\n-                <includes>\n-                  <include>org.apache.*:*</include>\n-                  <include>org.jboss.*:*</include>\n-                  <include>commons-*:*</include>\n-                </includes>\n-                <excludes>\n-                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n-                </excludes>\n-              </artifactSet>\n-              <relocations>\n-                <relocation>\n-                  <pattern>org.apache.commons</pattern>\n-                  <shadedPattern>org.apache.hw_v4_1_0.commons</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.bookkeeper</pattern>\n-                  <shadedPattern>org.apache.hw_v4_1_0.bookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.zookeeper</pattern>\n-                  <shadedPattern>org.apache.hw_v4_1_0.zookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.hedwig</pattern>\n-                  <shadedPattern>org.apache.hw_v4_1_0.hedwig</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.jute</pattern>\n-                  <shadedPattern>org.apache.hw_v4_1_0.jute</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.jboss</pattern>\n-                  <shadedPattern>org.jboss.hw_v4_1_0</shadedPattern>\n-                </relocation>\n-              </relocations>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"069b2428feba0b3cce00403b19cdeb24f9a2ae6e","filename":"branch-4.3/compat-deps/hedwig-server-compat-4.2.0/pom.xml","status":"removed","additions":0,"deletions":97,"changes":97,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/hedwig-server-compat-4.2.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/hedwig-server-compat-4.2.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/compat-deps/hedwig-server-compat-4.2.0/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,97 +0,0 @@\n-<?xml version=\"1.0\"?>\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <artifactId>compat-deps</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <artifactId>hedwig-server-compat420</artifactId>\n-  <version>4.2.0</version>\n-  <name>hedwig-server-compat420</name>\n-  <url>http://maven.apache.org</url>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-  </properties>\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>hedwig-server</artifactId>\n-      <version>4.2.0</version>\n-    </dependency>\n-  </dependencies>\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-shade-plugin</artifactId>\n-        <version>1.5</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>shade</goal>\n-            </goals>\n-            <configuration>\n-              <createDependencyReducedPom>false</createDependencyReducedPom>\n-              <artifactSet>\n-                <includes>\n-                  <include>org.apache.*:*</include>\n-                  <include>org.jboss.*:*</include>\n-                  <include>commons-*:*</include>\n-                </includes>\n-                <excludes>\n-                  <exclude>commons-beanutils*:commons-beanutils*</exclude>\n-                </excludes>\n-              </artifactSet>\n-              <relocations>\n-                <relocation>\n-                  <pattern>org.apache.commons</pattern>\n-                  <shadedPattern>org.apache.hw_v4_2_0.commons</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.bookkeeper</pattern>\n-                  <shadedPattern>org.apache.hw_v4_2_0.bookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.zookeeper</pattern>\n-                  <shadedPattern>org.apache.hw_v4_2_0.zookkeeper</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.hedwig</pattern>\n-                  <shadedPattern>org.apache.hw_v4_2_0.hedwig</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.apache.jute</pattern>\n-                  <shadedPattern>org.apache.hw_v4_2_0.jute</shadedPattern>\n-                </relocation>\n-                <relocation>\n-                  <pattern>org.jboss</pattern>\n-                  <shadedPattern>org.jboss.hw_v4_2_0</shadedPattern>\n-                </relocation>\n-              </relocations>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n-</project>"},{"sha":"0aab5ccd486f7796d57bbb0348822078847e94f9","filename":"branch-4.3/compat-deps/pom.xml","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/compat-deps/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/compat-deps/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,45 +0,0 @@\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n-                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <parent>\n-    <artifactId>bookkeeper</artifactId>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <modelVersion>4.0.0</modelVersion>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <version>4.3.0</version>\n-  <artifactId>compat-deps</artifactId>\n-  <packaging>pom</packaging>\n-  <name>compability dependencies</name>\n-  <modules>\n-    <module>bookkeeper-server-compat-4.0.0</module>\n-    <module>bookkeeper-server-compat-4.1.0</module>\n-    <module>bookkeeper-server-compat-4.2.0</module>\n-    <module>hedwig-server-compat-4.0.0</module>\n-    <module>hedwig-server-compat-4.1.0</module>\n-    <module>hedwig-server-compat-4.2.0</module>\n-  </modules>\n-  <properties>\n-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n-    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n-  </properties>\n-</project>"},{"sha":"a67c1788d035204a4b3c9cc317fbf2fe4b2ebcbe","filename":"branch-4.3/doc/bookieConfigParams.textile","status":"removed","additions":0,"deletions":94,"changes":94,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookieConfigParams.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookieConfigParams.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookieConfigParams.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,94 +0,0 @@\n-Title:        Bookie Configuration Parameters\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. Bookie Configuration Parameters\n-\n-This page contains detailed information about configuration parameters used for configuring a bookie server. There is an example in \"bookkeeper-server/conf/bk_server.conf\". \n-\n-h2. Server parameters\n-\n-| @bookiePort@        |Port that bookie server listens on. The default value is 3181.|\n-| @journalDirectory@        | Directory to which Bookkeeper outputs its write ahead log, ideally on a dedicated device. The default value is \"/tmp/bk-txn\". |\n-| @ledgerDirectories@        | Directory to which Bookkeeper outputs ledger snapshots.  Multiple directories can be defined, separated by comma, e.g. /tmp/bk1-data,/tmp/bk2-data. Ideally ledger dirs and journal dir are each on a different device, which reduces the contention between random I/O and sequential writes. It is possible to run with a single disk,  but performance will be significantly lower.|\n-| @indexDirectories@  | Directories to store index files. If not specified, bookie will use ledgerDirectories to store index files. |\n-| @bookieDeathWatchInterval@ | Interval to check whether a bookie is dead or not, in milliseconds. |\n-| @gcWaitTime@        | Interval to trigger next garbage collection, in milliseconds. Since garbage collection is running in the background, running the garbage collector too frequently hurts performance. It is best to set its value high enough if there is sufficient disk capacity.|\n-| @flushInterval@ | Interval to flush ledger index pages to disk, in milliseconds. Flushing index files will introduce random disk I/O. Consequently, it is important to have journal dir and ledger dirs each on different devices. However,  if it necessary to have journal dir and ledger dirs on the same device, one option is to increment the flush interval to get higher performance. Upon a failure, the bookie will take longer to recover. |\n-| @numAddWorkerThreads@ | Number of threads that should handle write requests. if zero, the writes would be handled by netty threads directly. |\n-| @numReadWorkerThreads@ | Number of threads that should handle read requests. if zero, the reads would be handled by netty threads directly. |\n-\n-h2. NIO server settings\n-\n-| @serverTcpNoDelay@ | This settings is used to enabled/disabled Nagle's algorithm, which is a means of improving the efficiency of TCP/IP networks by reducing the number of packets that need to be sent over the network. If you are sending many small messages, such that more than one can fit in a single IP packet, setting server.tcpnodelay to false to enable Nagle algorithm can provide better performance. Default value is true. |\n-\n-h2. Journal settings\n-\n-| @journalMaxSizeMB@  |  Maximum file size of journal file, in megabytes. A new journal file will be created when the old one reaches the file size limitation. The default value is 2kB. |\n-| @journalMaxBackups@ |  Max number of old journal file to keep. Keeping a number of old journal files might help data recovery in some special cases. The default value is 5. |\n-| @journalPreAllocSizeMB@ | The space that bookie pre-allocate at a time in the journal. |\n-| @journalWriteBufferSizeKB@ | Size of the write buffers used for the journal. |\n-| @journalRemoveFromPageCache@ | Whether bookie removes pages from page cache after force write. Used to avoid journal pollute os page cache. |\n-| @journalAdaptiveGroupWrites@ | Whether to group journal force writes, which optimize group commit for higher throughput. |\n-| @journalMaxGroupWaitMSec@ | Maximum latency to impose on a journal write to achieve grouping. |\n-| @journalBufferedWritesThreshold@ | Maximum writes to buffer to achieve grouping. |\n-| @journalFlushWhenQueueEmpty@ | Whether to flush the journal when journal queue is empty. Disabling it would provide sustained journal adds throughput. |\n-| @numJournalCallbackThreads@ | The number of threads that should handle journal callbacks. |\n-\n-h2. Ledger cache settings\n-\n-| @openFileLimit@ | Maximum number of ledger index files that can be opened in a bookie. If the number of ledger index files reaches this limit, the bookie starts to flush some ledger indexes from memory to disk. If flushing happens too frequently, then performance is affected. You can tune this number to improve performance according. |\n-| @pageSize@ | Size of an index page in ledger cache, in bytes. A larger index page can improve performance when writing page to disk, which is efficient when you have small number of ledgers and these ledgers have a similar number of entries. With a large number of ledgers and a few entries per ledger, a smaller index page would improves memory usage. |\n-| @pageLimit@ | Maximum number of index pages to store in the ledger cache. If the number of index pages reaches this limit, bookie server starts to flush ledger indexes from memory to disk. Incrementing this value is an option when flushing becomes frequent. It is important to make sure, though, that pageLimit*pageSize is not more than JVM max memory limit; otherwise it will raise an OutOfMemoryException. In general, incrementing pageLimit, using smaller index page would gain better performance in the case of a large number of ledgers with few entries per ledger. If pageLimit is -1, a bookie uses 1/3 of the JVM memory to compute the maximum number of index pages. |\n-\n-h2. Ledger manager settings\n-\n-| @ledgerManagerType@ | What kind of ledger manager is used to manage how ledgers are stored, managed and garbage collected. See \"BookKeeper Internals\":./bookkeeperInternals.html for detailed info. Default is flat. |\n-| @zkLedgersRootPath@ | Root zookeeper path to store ledger metadata. Default is /ledgers. |\n-\n-h2. Entry Log settings\n-\n-| @logSizeLimit@      | Maximum file size of entry logger, in bytes. A new entry log file will be created when the old one reaches the file size limitation. The default value is 2GB. |\n-| @entryLogFilePreallocationEnabled@ | Enable/Disable entry logger preallocation. Enable this would provide sustained higher throughput and reduce latency impaction. |\n-| @readBufferSizeBytes@ | The number of bytes used as capacity for BufferedReadChannel. Default is 512 bytes. |\n-| @writeBufferSizeBytes@ | The number of bytes used as capacity for the write buffer. Default is 64KB. |\n-\n-h2. Entry Log compaction settings\n-\n-| @minorCompactionInterval@ | Interval to run minor compaction, in seconds. If it is set to less than or equal to zero, then minor compaction is disabled. Default is 1 hour. |\n-| @minorCompactionThreshold@ | Entry log files with remaining size under this threshold value will be compacted in a minor compaction. If it is set to less than or equal to zero, the minor compaction is disabled. Default is 0.2 |\n-| @majorCompactionInterval@ | Interval to run major compaction, in seconds. If it is set to less than or equal to zero, then major compaction is disabled. Default is 1 day. |\n-| @majorCompactionThreshold@ | Entry log files with remaining size below this threshold value will be compacted in a major compaction. Those entry log files whose remaining size percentage is still higher than the threshold value will never be compacted. If it is set to less than or equal to zero, the major compaction is disabled. Default is 0.8. |\n-| @compactionMaxOutstandingRequests@ | The maximum number of entries which can be compacted without flushing. When compacting, the entries are written to the entrylog and the new offsets are cached in memory. Once the entrylog is flushed the index is updated with the new offsets. This parameter controls the number of entries added to the entrylog before a flush is forced. A higher value for this parameter means more memory will be used for offsets. Each offset consist of 3\n-longs. This parameter should _not_ be modified unless you know what you're doing. |\n-| @compactionRate@ | The rate at which compaction will re-add entries. The unit is adds per second. |\n-\n-h2. Statistics\n-\n-| @enableStatistics@ | Enables the collection of statistics. Default is on. |\n-\n-h2. Auto-replication\n-\n-| @openLedgerRereplicationGracePeriod@ | This is the grace period which the rereplication worker waits before fencing and replicating a ledger fragment which is still being written to upon a bookie failure. The default is 30s. |\n-\n-h2. Read-only mode support\n-\n-| @readOnlyModeEnabled@ | Enables/disables the read-only Bookie feature. A bookie goes into read-only mode when it finds integrity issues with stored data. If @readOnlyModeEnabled@ is false, the bookie shuts down if it finds integrity issues. By default it is enabled. |\n-\n-h2. Disk utilization\n-\n-| @diskUsageThreshold@ | Fraction of the total utilized usable disk space to declare the disk full. The total available disk space is obtained with File.getUsableSpace(). Default is 0.95. |\n-| @diskCheckInterval@ | Interval between consecutive checks of disk utilization. Default is 10s. |\n-\n-h2. ZooKeeper parameters\n-\n-| @zkServers@ | A list of one or more servers on which zookeeper is running. The server list is comma separated, e.g., zk1:2181,zk2:2181,zk3:2181 |\n-| @zkTimeout@ | ZooKeeper client session timeout in milliseconds. Bookie server will exit if it received SESSION_EXPIRED because it was partitioned off from ZooKeeper for more than the session timeout. JVM garbage collection or disk I/O can cause SESSION_EXPIRED. Increment this value could help avoiding this issue. The default value is 10,000. |"},{"sha":"59adbb2cff67e042192c5b16381e43c7ce0b6d36","filename":"branch-4.3/doc/bookieRecovery.textile","status":"removed","additions":0,"deletions":79,"changes":79,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookieRecovery.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookieRecovery.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookieRecovery.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,79 +0,0 @@\n-Title:     BookKeeper Bookie Recovery\n-Notice:    Licensed to the Apache Software Foundation (ASF) under one\n-           or more contributor license agreements.  See the NOTICE file\n-           distributed with this work for additional information\n-           regarding copyright ownership.  The ASF licenses this file\n-           to you under the Apache License, Version 2.0 (the\n-           \"License\"); you may not use this file except in compliance\n-           with the License.  You may obtain a copy of the License at\n-           .\n-             http://www.apache.org/licenses/LICENSE-2.0\n-           .\n-           Unless required by applicable law or agreed to in writing,\n-           software distributed under the License is distributed on an\n-           \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-           KIND, either express or implied.  See the License for the\n-           specific language governing permissions and limitations\n-           under the License.\n-h1. Bookie Ledger Recovery\n-\n-p. When a Bookie crashes, any ledgers with data on that Bookie become underreplicated. There are two options for bringing the ledgers back to full replication, Autorecovery and Manual Bookie Recovery.\n-\n-h2. Autorecovery\n-\n-p. Autorecovery runs as a daemon alongside the Bookie daemon on each Bookie. Autorecovery detects when a bookie in the cluster has become unavailable, and rereplicates all the ledgers which were on that bookie, so that those ledgers are brough back to full replication. See the \"Admin Guide\":./bookkeeperConfig.html for instructions on how to start autorecovery.\n-\n-h2. Manual Bookie Recovery\n-\n-p. If autorecovery is not enabled, it is possible for the adminisatrator to manually rereplicate the data from the failed bookie.\n-\n-To run recovery, with zk1.example.com as the zookeeper ensemble, and 192.168.1.10 as the failed bookie, do the following:\n-\n-@bookkeeper-server/bin/bookkeeper org.apache.bookkeeper.tools.BookKeeperTools zk1.example.com:2181 192.168.1.10:3181@\n-\n-It is necessary to specify the host and port portion of failed bookie, as this is how it identifies itself to zookeeper. It is possible to specify a third argument, which is the bookie to replicate to. If this is omitted, as in our example, a random bookie is chosen for each ledger segment. A ledger segment is a continuous sequence of entries in a bookie, which share the same ensemble.\n-\n-h2. AutoRecovery Internals\n-\n-Auto-Recovery has two components:\n-\n-* *Auditor*, a singleton node which watches for bookie failure, and creates rereplication tasks for the ledgers on failed bookies.\n-* *ReplicationWorker*, runs on each Bookie, takes rereplication tasks and executes them.\n-\n-Both the components run as threads in the the *AutoRecoveryMain* process. The *AutoRecoveryMain* process runs on each Bookie in the cluster. All recovery nodes will participate in leader election to decide which node becomes the auditor. Those which fail to become the auditor will watch the elected auditor, and will run election again if they see that it has failed.\n-\n-h3. Auditor\n-\n-The auditor watches the the list of bookies registered with ZooKeeper in the cluster. A Bookie registers with ZooKeeper during startup. If the bookie crashes or is killed, the bookie's registration disappears. The auditor is notified of changes in the registered bookies list.\n-\n-When the auditor sees that a bookie has disappeared from the list, it immediately scans the complete ledger list to find ledgers which have stored data on the failed bookie. Once it has a list of ledgers which need to be rereplicated, it will publish a rereplication task for each ledger under the /underreplicated/ znode in ZooKeeeper.\n-\n-h3. ReplicationWorker\n-\n-Each replication worker watches for tasks being published in the /underreplicated/ znode. When a new task appears, it will try to get a lock on it. If it cannot acquire the lock, it tries the next entry. The locks are implemented using ZooKeeper ephemeral znodes.\n-\n-The replication worker will scan through the rereplication task's ledger for segments of which its local bookie is not a member. When it finds segments matching this criteria it will replicate the entries of that segment to the local bookie.  If, after this process, the ledger is fully replicated, the ledgers entry under /underreplicated/ is deleted, and the lock is released. If there is a problem replicating, or there are still segments in the ledger which are still underreplicated (due to the local bookie already being part of the ensemble for the segment), then the lock is simply released.\n-\n-If the replication worker finds a segment which needs rereplication, but does not have a defined endpoint (i.e. the final segment of a ledger currently being written to), it will wait for a grace period before attempting rereplication. If the segment needing rereplciation still does not have a defined endpoint, the ledger is fenced and rereplication then takes place. This avoids the case where a client is writing to a ledger, and one of the bookies goes down, but the client has not written an entry to that bookie before rereplication takes place. The client could continue writing to the old segment, even though the ensemble for the segment had changed. This could lead to data loss. Fencing prevents this scenario from happening. In the normal case, the client will try to write to the failed bookie within the grace period, and will have started a new segment before rereplication starts. See the \"Admin Guide\":./bookkeeperConfig.html for how to configure this grace period.\n-\n-h2. The Rereplication process\n-\n-The ledger rereplication process is as follows.\n-\n-# The client goes through all ledger segments in the ledger, selecting those which contain the failed bookie;\n-# A recovery process is initiated for each ledger segment in this list;\n-## The client selects a bookie to which all entries in the ledger segment will be replicated; In the case of autorecovery, this will always be the local bookie;\n-## the client reads entries that belong to the ledger segment from other bookies in the ensemble and writes them to the selected bookie;\n-## Once all entries have been replicated, the zookeeper metadata for the segment is updated to reflect the new ensemble;\n-## The segment is marked as fully replicated in the recovery tool;\n-# Once all ledger segments are marked as fully replicated, the ledger is marked as fully replicated.\n-\n-h2. The Manual Bookie Recovery process\n-\n-The manual bookie recovery process is as follows.\n-\n-# The client reads the metadata of active ledgers from zookeeper;\n-# From this, the ledgers which contain segments using the failed bookie in their ensemble are selected;\n-# A recovery process is initiated for each ledger in this list;\n-## The Ledger rereplication process is run for each ledger;\n-# Once all ledgers are marked as fully replicated, bookie recovery is finished."},{"sha":"4b9d5534c395372efd29c299c09b2c98781ac6a0","filename":"branch-4.3/doc/bookkeeperConfig.textile","status":"removed","additions":0,"deletions":167,"changes":167,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperConfig.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperConfig.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperConfig.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,167 +0,0 @@\n-Title:        BookKeeper Administrator's Guide\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        .\n-\n-h1. Abstract\n-\n-This document contains information about deploying, administering and maintaining BookKeeper. It also discusses best practices and common problems. \n-\n-h1. Running a BookKeeper instance\n-\n-h2. System requirements\n-\n-A typical BookKeeper installation comprises a set of bookies and a set of ZooKeeper replicas. The exact number of bookies depends on the quorum mode, desired throughput, and number of clients using this installation simultaneously. The minimum number of bookies is three for self-verifying (stores a message authentication code along with each entry) and four for generic (does not store a message authentication code with each entry), and there is no upper limit on the number of bookies. Increasing the number of bookies will, in fact, enable higher throughput.\n-\n-For performance, we require each server to have at least two disks. It is possible to run a bookie with a single disk, but performance will be significantly lower in this case.\n-\n-For ZooKeeper, there is no constraint with respect to the number of replicas. Having a single machine running ZooKeeper in standalone mode is sufficient for BookKeeper. For resilience purposes, it might be a good idea to run ZooKeeper in quorum mode with multiple servers. Please refer to the ZooKeeper documentation for detail on how to configure ZooKeeper with multiple replicas.\n-\n-h2. Starting and Stopping Bookies\n-\n-To *start* a bookie, execute the following command:\n-\n-* To run a bookie in the foreground:\n-@bookkeeper-server/bin/bookkeeper bookie@\n-\n-* To run a bookie in the background:\n-@bookkeeper-server/bin/bookkeeper-daemon.sh start bookie@\n-\n-The configuration parameters can be set in bookkeeper-server/conf/bk_server.conf.\n-\n-The important parameters are:\n-\n-* @bookiePort@, Port number that the bookie listens on; \n-* @zkServers@, Comma separated list of ZooKeeper servers with a hostname:port format; \n-* @journalDir@, Path for Log Device (stores bookie write-ahead log); \n-* @ledgerDir@, Path for Ledger Device (stores ledger entries); \n-\n-Ideally, @journalDir@ and @ledgerDir@ are each in a different device. See \"Bookie Configuration Parameters\":./bookieConfigParams.html for a full list of configuration parameters.\n-\n-To *stop* a bookie running in the background, execute the following command:\n-\n-@bookkeeper-server/bin/bookkeeper-daemon.sh stop bookie [-force]@\n-@-force@ is optional, which is used to stop the bookie forcefully, if the bookie server is not stopped gracefully within the _BOOKIE_STOP_TIMEOUT_ (environment variable), which is 30 seconds, by default.\n-\n-h3. Upgrading\n-\n-From time to time, we may make changes to the filesystem layout of the bookie, which are incompatible with previous versions of bookkeeper and require that directories used with previous versions are upgraded. If you upgrade your bookkeeper software, and an upgrade is required, then the bookie will fail to start and print an error such as:\n-\n-@2012-05-25 10:41:50,494 - ERROR - [main:Bookie@246] - Directory layout version is less than 3, upgrade needed@\n-\n-BookKeeper provides a utility for upgrading the filesystem.\n-@bookkeeper-server/bin/bookkeeper upgrade@\n-\n-The upgrade application takes 3 possible switches, @--upgrade@, @--rollback@ or @--finalize@. A normal upgrade process looks like.\n-\n-# @bookkeeper-server/bin/bookkeeper upgrade --upgrade@\n-# @bookkeeper-server/bin/bookkeeper bookie@\n-# Check everything is working. Kill bookie, ^C\n-# If everything is ok, @bookkeeper-server/bin/bookkeeper upgrade --finalize@\n-# Start bookie again @bookkeeper-server/bin/bookkeeper bookie@\n-# If something is amiss, you can roll back the upgrade @bookkeeper-server/bin/bookkeeper upgrade --rollback@\n-\n-h3. Formatting\n-\n-To format the bookie metadata in Zookeeper, execute the following command once:\n-\n-@bookkeeper-server/bin/bookkeeper shell metaformat [-nonInteractive] [-force]@\n-\n-To format the bookie local filesystem data, execute the following command on each bookie node:\n-\n-@bookkeeper-server/bin/bookkeeper shell bookieformat [-nonInteractive] [-force]@\n-\n-The @-nonInteractive@ and @-force@ switches are optional.\n-\n-If @-nonInteractive@ is set, the user will not be asked to confirm the format operation if old data exists. If it exists, the format operation will abort, unless the @-force@ switch has been specified, in which case it will process.\n-\n-By default, the user will be prompted to confirm the format operation if old data exists.\n-\n-h3. Logging\n-\n-BookKeeper uses \"slf4j\":http://www.slf4j.org for logging, with the log4j bindings enabled by default. To enable logging from a bookie, create a log4j.properties file and point the environment variable BOOKIE_LOG_CONF to the configuration file. The path to the log4j.properties file must be absolute.\n-\n-@export BOOKIE_LOG_CONF=/tmp/log4j.properties@\n-@bookkeeper-server/bin/bookkeeper bookie@\n-\n-h3. Missing disks or directories\n-\n-Replacing disks or removing directories accidentally can cause a bookie to fail while trying to read a ledger fragment which the ledger metadata has claimed exists on the bookie. For this reason, when a bookie is started for the first time, it's disk configuration is fixed for the lifetime of that bookie. Any change to the disk configuration of the bookie, such as a crashed disk or an accidental configuration change, will result in the bookie being unable to start with the following error:\n-\n-@2012-05-29 18:19:13,790 - ERROR - [main:BookieServer@314] - Exception running bookie server : @\n-@org.apache.bookkeeper.bookie.BookieException$InvalidCookieException@\n-@.......at org.apache.bookkeeper.bookie.Cookie.verify(Cookie.java:82)@\n-@.......at org.apache.bookkeeper.bookie.Bookie.checkEnvironment(Bookie.java:275)@\n-@.......at org.apache.bookkeeper.bookie.Bookie.<init>(Bookie.java:351)@\n-\n-If the change was the result of an accidental configuration change, the change can be reverted and the bookie can be restarted. However, if the change cannot be reverted, such as is the case when you want to add a new disk or replace a disk, the bookie must be wiped and then all its data re-replicated onto it. To do this, do the following:\n-\n-# Increment the _bookiePort_ in _bk_server.conf_.\n-# Ensure that all directories specified by _journalDirectory_ and _ledgerDirectories_ are empty.\n-# Start the bookie.\n-# Run @bin/bookkeeper org.apache.bookkeeper.tools.BookKeeperTools <zkserver> <oldbookie> <newbookie>@ to re-replicate data. <oldbookie> and <newbookie> are identified by their external IP and bookiePort. For example if this process is being run on a bookie with an external IP of 192.168.1.10, with an old _bookiePort_ of 3181 and a new _bookiePort_ of 3182, and with zookeeper running on _zk1.example.com_, the command to run would be <br/>@bin/bookkeeper org.apache.bookkeeper.tools.BookKeeperTools zk1.example.com 192.168.1.10:3181 192.168.1.10:3182@. See \"Bookie Recovery\":./bookieRecovery.html for more details on the re-replication process.\n-\n-The mechanism to prevent the bookie from starting up in the case of configuration changes exists to prevent the following silent failures:\n-\n-# A strict subset of the ledger devices (among multiple ledger devices) has been replaced, consequently making the content of the replaced devices unavailable;\n-# A strict subset of the ledger directories has been accidentally deleted.\n-\n-h3. Full or failing disks\n-\n-A bookie can go into read-only mode if it detects problems with its disks. In read-only mode, the bookie will serve read requests, but will not allow any writes. Any ledger currently writing to the bookie will replace the bookie in its ensemble. No new ledgers will select the read-only bookie for writing.\n-\n-The bookie goes into read-only mode in the following conditions.\n-\n-# All disks are full.\n-# An error occurred flushing to the ledger disks.\n-# An error occurred writing to the journal disk.\n-\n-Important parameters are:\n-\n-* @readOnlyModeEnabled@, whether read-only mode is enabled. If read-only mode is not enabled, the bookie will shutdown on encountering any of the above conditions. By default, read-only mode is disabled.\n-* @diskUsageThreshold@, percentage threshold at which a disk will be considered full. This value must be between 0 and 1.0. By default, the value is 0.95.\n-* @diskCheckInterval@, interval at which the disks are checked to see if they are full. Specified in milliseconds. By default the check occurs every 10000 milliseconds (10 seconds).\n-\n-h2. Running Autorecovery nodes\n-\n-To run autorecovery nodes, we execute the following command in every Bookie node:\n- @bookkeeper-server/bin/bookkeeper autorecovery@\n-\n-Configuration parameters for autorecovery can be set in *bookkeeper-server/conf/bk_server.conf*.\n-\n-Important parameters are:\n-\n-* @auditorPeriodicCheckInterval@, interval at which the auditor will do a check of all ledgers in the cluster. By default this runs once a week. The interval is set in seconds. To disable the periodic check completely, set this to 0. Note that periodic checking will put extra load on the cluster, so it should not be run more frequently than once a day.\n-\n-* @rereplicationEntryBatchSize@ specifies the number of entries which a replication will rereplicate in parallel. The default value is 10. A larger value for this parameter will increase the speed at which autorecovery occurs but will increate the memory requirement of the autorecovery process, and create more load on the cluster.\n-\n-* @openLedgerRereplicationGracePeriod@, is the amount of time, in milliseconds, which a recovery worker will wait before recovering a ledger segment which has no defined ended, i.e. the client is still writing to that segment. If the client is still active, it should detect the bookie failure, and start writing to a new ledger segment, and a new ensemble, which doesn't include the failed bookie. Creating new ledger segment will define the end of the previous segment. If, after the grace period, the ledger segment's end has not been defined, we assume the writing client has crashed. The ledger is fenced and the client is blocked from writing any more entries to the ledger. The default value is 30000ms.\n-\n-\n-h3. Disabling Autorecovery during maintenance\n-\n-It is useful to disable autorecovery during maintenance, for example, to avoid a Bookie's data being unnecessarily rereplicated when it is only being taken down for a short period to update the software, or change the configuration.\n-\n-To disable autorecovery, run:\n-@bookkeeper-server/bin/bookkeeper shell autorecovery -disable@\n-\n-To reenable, run:\n-@bookkeeper-server/bin/bookkeeper shell autorecovery -enable@\n-\n-Autorecovery enable/disable only needs to be run once for the whole cluster, and not individually on each Bookie in the cluster.\n-\n-h2. Setting up a test ensemble\n-\n-Sometimes it is useful to run a ensemble of bookies on your local machine for testing. We provide a utility for doing this. It will set up N bookies, and a zookeeper instance locally. The data on these bookies and of the zookeeper instance are not persisted over restarts, so obviously this should never be used in a production environment. To run a test ensemble of 10 bookies, do the following:\n-\n-@bookkeeper-server/bin/bookkeeper localbookie 10@\n-"},{"sha":"eb76ca4cc2a49c7aa23d596322c555200b812caa","filename":"branch-4.3/doc/bookkeeperConfigParams.textile","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperConfigParams.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperConfigParams.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperConfigParams.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,39 +0,0 @@\n-Title:        BookKeeper Configuration Parameters\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. BookKeeper Configuration Parameters\n-\n-This page contains detailed information about configuration parameters used for configuring a BookKeeper client.\n-\n-h3. General parameters\n-\n-| @zkServers@ | A list of one of more servers on which zookeeper is running. The server list can be comma separated values, e.g., zk1:2181,zk2:2181,zk3:2181 |\n-| @zkTimeout@ | ZooKeeper client session timeout in milliseconds. The default value is 10,000. |\n-| @throttle@ | A throttle value is used to prevent running out of memory when producing too many requests than the capability of bookie servers can handle. The default is 5,000. |\n-| @readTimeout@ | This is the number of seconds bookkeeper client wait without hearing a response from a bookie before client consider it failed. The default is 5 seconds. |\n-| @numWorkerThreads@ | This is the number of worker threads used by bookkeeper client to submit operations. The default value is the number of available processors. |\n-\n-h3. NIO server settings\n-\n-| @clientTcpNoDelay@ | This settings is used to enabled/disabled Nagle's algorithm, which is a means of improving the efficiency of TCP/IP networks by reducing the number of packets that need to be sent over the network. If you are sending many small messages, such that more than one can fit in a single IP packet, setting server.tcpnodelay to false to enable Nagle algorithm can provide better performance. Default value is true. |\n-\n-h3. Ledger manager settings\n-\n-| @ledgerManagerType@ | This parameter determines the type of ledger manager used to manage how ledgers are stored, manipulated, and garbage collected. See \"BookKeeper Internals\":./bookkeeperInternals.html for detailed info. Default value is flat. |\n-| @zkLedgersRootPath@ | Root zookeeper path to store ledger metadata. Default is /ledgers. |\n-\n-h3. Bookie recovery settings\n-\n-Currently bookie recovery tool needs a digest type and passwd to open ledgers to do recovery. Currently, bookkeeper assumes that all ledgers were created with the same DigestType and Password. In the future, it needs to know for each ledger, what was the DigestType and Password used to create it before opening it.\n-\n-| @digestType@ | Digest type used to open ledgers from bookkie recovery tool. |\n-| @passwd@ | Password used to open ledgers from bookie recovery tool. |"},{"sha":"2c461f24f0992cf3d2537cd2e4328569e890c650","filename":"branch-4.3/doc/bookkeeperInternals.textile","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperInternals.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperInternals.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperInternals.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,84 +0,0 @@\n-Title:        BookKeeper Internals\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h2. Bookie Internals\n-\n-p. Bookie server stores its data in multiple ledger directories and its journal files in a journal directory. Ideally, storing journal files in a separate directory than data files would increase throughput and decrease latency\n-\n-h3. The Bookie Journal\n-\n-p. Journal directory has one kind of file in it:\n-\n-* @{timestamp}.txn@ - holds transactions executed in the bookie server.\n-\n-p. Before persisting ledger index and data to disk, a bookie ensures that the transaction that represents the update is written to a journal in non-volatile storage. A new journal file is created using current timestamp when a bookie starts or an old journal file reaches its maximum size.\n-\n-p. A bookie supports journal rolling to remove old journal files. In order to remove old journal files safely, bookie server records LastLogMark in Ledger Device, which indicates all updates (including index and data) before LastLogMark has been persisted to the Ledger Device.\n-\n-p. LastLogMark contains two parts:\n-\n-* @LastLogId@ - indicates which journal file the transaction persisted.\n-* @LastLogPos@ - indicates the position the transaction persisted in LastLogId journal file.\n-\n-p. You may use following settings to further fine tune the behavior of journalling on bookies:\n-\n-| @journalMaxSizeMB@ | journal file size limitation. when a journal reaches this limitation, it will be closed and new journal file be created. |\n-| @journalMaxBackups@ | how many old journal files whose id is less than LastLogMark 's journal id. |\n-\n-bq. NOTE: keeping number of old journal files would be useful for manually recovery in special case.\n-\n-h1. ZooKeeper Metadata\n-\n-p. For BookKeeper, we require a ZooKeeper installation to store metadata, and to pass the list of ZooKeeper servers as parameter to the constructor of the BookKeeper class (@org.apache.bookkeeper.client.BookKeeper@). To setup ZooKeeper, please check the \"ZooKeeper documentation\":http://zookeeper.apache.org/doc/trunk/index.html. \n-\n-p. BookKeeper provides two mechanisms to organize its metadata in ZooKeeper. By default, the @FlatLedgerManager@ is used, and 99% of users should never need to look at anything else. However, in cases where there are a lot of active ledgers concurrently, (> 50,000), @HierarchicalLedgerManager@ should be used. For so many ledgers, a hierarchical approach is needed due to a limit ZooKeeper places on packet sizes \"JIRA Issue\":https://issues.apache.org/jira/browse/BOOKKEEPER-39.\n-\n-| @FlatLedgerManager@ | All ledger metadata are placed as children in a single zookeeper path. |\n-| @HierarchicalLedgerManager@ | All ledger metadata are partitioned into 2-level znodes. |\n-\n-h2. Flat Ledger Manager\n-\n-p. All ledgers' metadata are put in a single zookeeper path, created using zookeeper sequential node, which can ensure uniqueness of ledger id. Each ledger node is prefixed with 'L'.\n-\n-p. Bookie server manages its owned active ledgers in a hash map. So it is easy for bookie server to find what ledgers are deleted from zookeeper and garbage collect them. And its garbage collection flow is described as below:\n-\n-* Fetch all existing ledgers from zookeeper (@zkActiveLedgers@).\n-* Fetch all ledgers currently active within the Bookie (@bkActiveLedgers@).\n-* Loop over @bkActiveLedgers@ to find those ledgers which do not exist in @zkActiveLedgers@ and garbage collect them.\n-\n-h2. Hierarchical Ledger Manager\n-\n-p. @HierarchicalLedgerManager@ first obtains a global unique id from ZooKeeper using a EPHEMERAL_SEQUENTIAL znode.\n-\n-p. Since ZooKeeper sequential counter has a format of %10d -- that is 10 digits with 0 (zero) padding, i.e. \"&lt;path&gt;0000000001\", @HierarchicalLedgerManager@ splits the generated id into 3 parts :\n-\n-@{level1 (2 digits)}{level2 (4 digits)}{level3 (4 digits)}@\n-\n-p. These 3 parts are used to form the actual ledger node path used to store ledger metadata:\n-\n-@{ledgers_root_path}/{level1}/{level2}/L{level3}@\n-\n-p. E.g. Ledger 0000000001 is split into 3 parts 00, 0000, 00001, which is stored in znode /{ledgers_root_path}/00/0000/L0001. So each znode could have at most 10000 ledgers, which avoids the problem of the child list being larger than the maximum ZooKeeper packet size.\n-\n-p. Bookie server manages its active ledgers in a sorted map, which simplifies access to active ledgers in a particular (level1, level2) partition.\n-\n-p. Garbage collection in bookie server is processed node by node as follows:\n-\n-* Fetching all level1 nodes, by calling zk#getChildren(ledgerRootPath).\n-** For each level1 nodes, fetching their level2 nodes :\n-** For each partition (level1, level2) :\n-*** Fetch all existed ledgers from zookeeper belonging to partition (level1, level2) (@zkActiveLedgers@).\n-*** Fetch all ledgers currently active in the bookie which belong to partition (level1, level2) (@bkActiveLedgers@).\n-*** Loop over @bkActiveLedgers@ to find those ledgers which do not exist in @zkActiveLedgers@, and garbage collect them.\n-\n-bq. NOTE: Hierarchical Ledger Manager is more suitable to manage large number of ledgers existed in BookKeeper.\n-"},{"sha":"289fb3c7a228728b482c113eb019f2488eebeaf3","filename":"branch-4.3/doc/bookkeeperJMX.textile","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperJMX.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperJMX.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperJMX.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,32 +0,0 @@\n-Title:        BookKeeper JMX\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        .\n-\n-h1. JMX\n-\n-Apache BookKeeper has extensive support for JMX, which allows viewing and managing a BookKeeper cluster.\n-\n-This document assumes that you have basic knowledge of JMX. See \"Sun JMX Technology\":http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/ page to get started with JMX.\n-\n-See the \"JMX Management Guide\":http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html for details on setting up local and remote management of VM instances. By default the included __bookkeeper__ script supports only local management - review the linked document to enable support for remote management (beyond the scope of this document).\n-\n-__Bookie Server__ is a JMX manageable server, which registers the proper MBeans during initialization to support JMX monitoring and management of the instance.\n-\n-h1. Bookie Server MBean Reference\n-\n-This table details JMX for a bookie server.\n-\n-| _.MBean | _.MBean Object Name | _.Description |\n-| BookieServer | BookieServer_<port> | Represents a bookie server. Note that the object name includes bookie port that the server listens on. It is the root MBean for bookie server, which includes statistics for a bookie server. E.g. number packets sent/received, and statistics for add/read operations. |\n-| Bookie | Bookie | Provide bookie statistics. Currently it just returns current journal queue length waiting to be committed. |\n-| LedgerCache | LedgerCache | Provide ledger cache statistics. E.g. number of page cached in page cache, number of files opened for ledger index files. |"},{"sha":"3d82506da3680dad513abed400ad67344511ae19","filename":"branch-4.3/doc/bookkeeperMetadata.textile","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperMetadata.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperMetadata.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperMetadata.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,40 +0,0 @@\n-Title:        BookKeeper Metadata Management\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .\n-        .\n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        .\n-\n-h1. Metadata Management\n-\n-There are two kinds of metadata needs to be managed in BookKeeper: one is the __list of available bookies__, which is used to track server availability (ZooKeeper is designed naturally for this); while the other is __ledger metadata__, which could be handle by different kinds of key/value storages efficiently with __CAS (Compare And Set)__ semantics.\n-\n-__Ledger metadata__ is handled by __LedgerManager__ and can be plugged with various storage mediums.\n-\n-h2. Ledger Metadata Management\n-\n-The operations on the metadata of a ledger are quite straightforward. They are:\n-\n-* @createLedger@: create an new entry to store given ledger metadata. A unique id should be generated as the ledger id for the new ledger.\n-* @removeLedgerMetadata@: remove the entry of a ledger from metadata store. A __Version__ object is provided to do conditional remove. If given __Version__ object doesn't match current __Version__ in metadata store, __MetadataVersionException__ should be thrown to indicate version confliction. __NoSuchLedgerExistsException__ should be returned if the ledger metadata entry doesn't exists.\n-* @readLedgerMetadata@: read the metadata of a ledger from metadata store. The new __version__ should be set to the returned __LedgerMetadata__ object. __NoSuchLedgerExistsException__ should be returned if the entry of the ledger metadata doesn't exists.\n-* @writeLedgerMetadata@: update the metadata of a ledger matching the given __Version__. The update should be rejected and __MetadataVersionException__ should be returned whe then given __Version__ doesn't match the current __Version__ in metadata store. __NoSuchLedgerExistsException__ should be returned if the entry of the ledger metadata doesn't exists. The version of the __LedgerMetadata__ object should be set to the new __Version__ generated by applying this update.\n-* @asyncProcessLedgers@: loops through all existed ledgers in metadata store and applies a __Processor__. The __Processor__ provided is executed for each ledger. If a failure happens during iteration, the iteration should be teminated and __final callback__ triggered with failure. Otherwise, __final callback__ is triggered after all ledgers are processed. No ordering nor transactional guarantees need to be provided for in the implementation of this interface.\n-* @getLedgerRanges@: return a list of ranges for ledgers in the metadata store. The ledger metadata itself does not need to be fetched. Only the ledger ids are needed. No ordering is required, but there must be no overlap between ledger ranges and each ledger range must be contain all the ledgers in the metadata store between the defined endpoint (i.e. a ledger range [x, y], all ledger ids larger or equal to x and smaller or equal to y should exist only in this range). __getLedgerRanges__ is used in the __ScanAndCompare__ gc algorithm.\n-\n-h1. How to choose a metadata storage medium for BookKeeper.\n-\n-From the interface, several requirements need to met before choosing a metadata storage medium for BookKeeper:\n-\n-* @Check and Set (CAS)@: The ability to do strict update according to specific conditional. Etc, a specific version (ZooKeeper) and same content (HBase).\n-* @Optimized for Writes@: The metadata access pattern for BookKeeper is read first and continuous updates.\n-* @Optimized for Scans@: Scans are required for a __ScanAndCompare__ gc algorithm.\n-\n-__ZooKeeper__ is the default implemention for BookKeeper metadata management, __ZooKeeper__ holds data in memory and provides filesystem-like namespace and also meets all the above requirements. __ZooKeeper__ could meet most of usages for BookKeeper. However, if you application needs to manage millions of ledgers, a more scalable solution would be __HBase__, which also meet the above requirements, but it more complicated to set up."},{"sha":"87ba67287e27c8483e64381486aa814c09db062c","filename":"branch-4.3/doc/bookkeeperOverview.textile","status":"removed","additions":0,"deletions":185,"changes":185,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperOverview.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperOverview.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperOverview.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,185 +0,0 @@\n-Title:        BookKeeper overview\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. Abstract\n-\n-This guide contains detailed information about using BookKeeper for logging. It discusses the basic operations BookKeeper supports, and how to create logs and perform basic read and write operations on these logs.\n-\n-h1. BookKeeper introduction\n-\n-p. BookKeeper is a replicated service to reliably log streams of records. In BookKeeper, servers are \"bookies\", log streams are \"ledgers\", and each unit of a log (aka record) is a \"ledger entry\". BookKeeper is designed to be reliable; bookies, the servers that store ledgers, can crash, corrupt data, discard data, but as long as there are enough bookies behaving correctly the service as a whole behaves correctly. \n-\n-p. The initial motivation for BookKeeper comes from the namenode of HDFS. Namenodes have to log operations in a reliable fashion so that recovery is possible in the case of crashes. We have found the applications for BookKeeper extend far beyond HDFS, however. Essentially, any application that requires an append storage can replace their implementations with BookKeeper. BookKeeper has the advantage of writing efficiently, replicating for fault tolerance, and scaling throughput with the number of servers through striping. \n-\n-p. At a high level, a bookkeeper client receives entries from a client application and stores it to sets of bookies, and there are a few advantages in having such a service: \n-\n-* We can use hardware that is optimized for such a service. We currently believe that such a system has to be optimized only for disk I/O; \n-* We can have a pool of servers implementing such a log system, and shared among a number of servers; \n-* We can have a higher degree of replication with such a pool, which makes sense if the hardware necessary for it is cheaper compared to the one the application uses. \n-\n-\n-h1. In slightly more detail...\n-\n-p. BookKeeper implements highly available logs, and it has been designed with write-ahead logging in mind. Besides high availability due to the replicated nature of the service, it provides high throughput due to striping. As we write entries in a subset of bookies of an ensemble and rotate writes across available quorums, we are able to increase throughput with the number of servers for both reads and writes. Scalability is a property that is possible to achieve in this case due to the use of quorums. Other replication techniques, such as state-machine replication, do not enable such a property. \n-\n-p. An application first creates a ledger before writing to bookies through a local BookKeeper client instance. Upon creating a ledger, a BookKeeper client writes metadata about the ledger to ZooKeeper. Each ledger currently has a single writer. This writer has to execute a close ledger operation before any other client can read from it. If the writer of a ledger does not close a ledger properly because, for example, it has crashed before having the opportunity of closing the ledger, then the next client that tries to open a ledger executes a procedure to recover it. As closing a ledger consists essentially of writing the last entry written to a ledger to ZooKeeper, the recovery procedure simply finds the last entry written correctly and writes it to ZooKeeper. \n-\n-p. Note that currently this recovery procedure is executed automatically upon trying to open a ledger and no explicit action is necessary. Although two clients may try to recover a ledger concurrently, only one will succeed, the first one that is able to create the close znode for the ledger. \n-\n-h1. Bookkeeper elements and concepts\n-\n-p. BookKeeper uses four basic elements: \n-\n-*  _Ledger_ : A ledger is a sequence of entries, and each entry is a sequence of bytes. Entries are written sequentially to a ledger and at most once. Consequently, ledgers have an append-only semantics; \n-*  _BookKeeper client_ : A client runs along with a BookKeeper application, and it enables applications to execute operations on ledgers, such as creating a ledger and writing to it; \n-*  _Bookie_ : A bookie is a BookKeeper storage server. Bookies store the content of ledgers. For any given ledger L, we call an _ensemble_ the group of bookies storing the content of L. For performance, we store on each bookie of an ensemble only a fragment of a ledger. That is, we stripe when writing entries to a ledger such that each entry is written to sub-group of bookies of the ensemble. \n-*  _Metadata storage service_ : BookKeeper requires a metadata storage service to store information related to ledgers and available bookies. We currently use ZooKeeper for such a task. \n-\n-\n-h1. Bookkeeper initial design\n-\n-p. A set of bookies implements BookKeeper, and we use a quorum-based protocol to replicate data across the bookies. There are basically two operations to an existing ledger: read and append. Here is the complete API list (mode detail \"here\":bookkeeperProgrammer.html): \n-\n-* Create ledger: creates a new empty ledger; \n-* Open ledger: opens an existing ledger for reading; \n-* Add entry: adds a record to a ledger either synchronously or asynchronously; \n-* Read entries: reads a sequence of entries from a ledger either synchronously or asynchronously \n-\n-\n-p. There is only a single client that can write to a ledger. Once that ledger is closed or the client fails, no more entries can be added. (We take advantage of this behavior to provide our strong guarantees.) There will not be gaps in the ledger. Fingers get broken, people get roughed up or end up in prison when books are manipulated, so there is no deleting or changing of entries. \n-\n-!images/bk-overview.jpg!\n-p. A simple use of BooKeeper is to implement a write-ahead transaction log. A server maintains an in-memory data structure (with periodic snapshots for example) and logs changes to that structure before it applies the change. The application server creates a ledger at startup and store the ledger id and password in a well known place (ZooKeeper maybe). When it needs to make a change, the server adds an entry with the change information to a ledger and apply the change when BookKeeper adds the entry successfully. The server can even use asyncAddEntry to queue up many changes for high change throughput. BooKeeper meticulously logs the changes in order and call the completion functions in order. \n-\n-p. When the application server dies, a backup server will come online, get the last snapshot and then it will open the ledger of the old server and read all the entries from the time the snapshot was taken. (Since it doesn't know the last entry number it will use MAX_INTEGER). Once all the entries have been processed, it will close the ledger and start a new one for its use. \n-\n-p. A client library takes care of communicating with bookies and managing entry numbers. An entry has the following fields: \n-\n-|Field|Type|Description|\n-|Ledger number|long|The id of the ledger of this entry|\n-|Entry number|long|The id of this entry|\n-|last confirmed ( _LC_ )|long|id of the last recorded entry|\n-|data|byte[]|the entry data (supplied by application)|\n-|authentication code|byte[]|Message authentication code that includes all other fields of the entry|\n-\n-\n-p. The client library generates a ledger entry. None of the fields are modified by the bookies and only the first three fields are interpreted by the bookies. \n-\n-p. To add to a ledger, the client generates the entry above using the ledger number. The entry number will be one more than the last entry generated. The _LC_ field contains the last entry that has been successfully recorded by BookKeeper. If the client writes entries one at a time, _LC_ is the last entry id. But, if the client is using asyncAddEntry, there may be many entries in flight. An entry is considered recorded when both of the following conditions are met: \n-\n-* the entry has been accepted by a quorum of bookies \n-* all entries with a lower entry id have been accepted by a quorum of bookies \n-\n-\n- _LC_ seems mysterious right now, but it is too early to explain how we use it; just smile and move on. \n-\n-p. Once all the other fields have been field in, the client generates an authentication code with all of the previous fields. The entry is then sent to a quorum of bookies to be recorded. Any failures will result in the entry being sent to a new quorum of bookies. \n-\n-p. To read, the client library initially contacts a bookie and starts requesting entries. If an entry is missing or invalid (a bad MAC for example), the client will make a request to a different bookie. By using quorum writes, as long as enough bookies are up we are guaranteed to eventually be able to read an entry. \n-\n-h1. Bookkeeper metadata management\n-\n-p. There are some meta data that needs to be made available to BookKeeper clients: \n-\n-* The available bookies; \n-* The list of ledgers; \n-* The list of bookies that have been used for a given ledger; \n-* The last entry of a ledger; \n-\n-\n-p. We maintain this information in ZooKeeper. Bookies use ephemeral nodes to indicate their availability. Clients use znodes to track ledger creation and deletion and also to know the end of the ledger and the bookies that were used to store the ledger. Bookies also watch the ledger list so that they can cleanup ledgers that get deleted. \n-\n-h1. Closing out ledgers\n-\n-p. The process of closing out the ledger and finding the last entry is difficult due to the durability guarantees of BookKeeper: \n-\n-* If an entry has been successfully recorded, it must be readable. \n-* If an entry is read once, it must always be available to be read. \n-\n-\n-p. If the ledger was closed gracefully, ZooKeeper will have the last entry and everything will work well. But, if the BookKeeper client that was writing the ledger dies, there is some recovery that needs to take place. \n-\n-p. The problematic entries are the ones at the end of the ledger. There can be entries in flight when a BookKeeper client dies. If the entry only gets to one bookie, the entry should not be readable since the entry will disappear if that bookie fails. If the entry is only on one bookie, that doesn't mean that the entry has not been recorded successfully; the other bookies that recorded the entry might have failed. \n-\n-p. The trick to making everything work is to have a correct idea of a last entry. We do it in roughly three steps: \n-\n-# Find the entry with the highest last recorded entry, _LC_ ; \n-# Find the highest consecutively recorded entry, _LR_ ; \n-# Make sure that all entries between _LC_ and _LR_ are on a quorum of bookies; \n-\n-h1. Data Management in Bookies\n-\n-p. This section gives an overview of how a bookie manages its ledger fragments. \n-\n-h2. Basic\n-\n-p. Bookies manage data in a log-structured way, which is implemented using three kind of files:\n-\n-* _Journal_ : A journal file contains the BookKeeper transaction logs. Before any update takes place, a bookie ensures that a transaction describing the update is written to non-volatile storage. A new journal file is created once the bookie starts or the older journal file reaches the journal file size threshold.\n-* _Entry Log_ : An entry log file manages the written entries received from BookKeeper clients. Entries from different ledgers are aggregated and written sequentially, while their offsets are kept as pointers in _LedgerCache_ for fast lookup. A new entry log file is created once the bookie starts or the older entry log file reaches the entry log size threshold. Old entry log files are removed by the _Garbage Collector Thread_ once they are not associated with any active ledger.\n-* _Index File_ : An index file is created for each ledger, which comprises a header and several fixed-length index pages, recording the offsets of data stored in entry log files. \n-\n-p. Since updating index files would introduce random disk I/O, for performance consideration, index files are updated lazily by a _Sync Thread_ running in the background. Before index pages are persisted to disk, they are gathered in _LedgerCache_ for lookup.\n-\n-* _LedgerCache_ : A memory pool caches ledger index pages, which more efficiently manage disk head scheduling.\n-\n-h2. Add Entry\n-\n-p. When a bookie receives entries from clients to be written, these entries will go through the following steps to be persisted to disk:\n-\n-# Append the entry in _Entry Log_, return its position { logId , offset } ;\n-# Update the index of this entry in _Ledger Cache_ ;\n-# Append a transaction corresponding to this entry update in _Journal_ ;\n-# Respond to BookKeeper client ;\n-\n-* For performance reasons, _Entry Log_ buffers entries in memory and commit them in batches, while _Ledger Cache_ holds index pages in memory and flushes them lazily. We will discuss data flush and how to ensure data integrity in the following section 'Data Flush'.\n-\n-h2. Data Flush\n-\n-p. Ledger index pages are flushed to index files in the following two cases:\n-\n-# _LedgerCache_ memory reaches its limit. There is no more space available to hold newer index pages. Dirty index pages will be evicted from _LedgerCache_ and persisted to index files.\n-# A background thread _Sync Thread_ is responsible for flushing index pages from _LedgerCache_ to index files periodically.\n-\n-p. Besides flushing index pages, _Sync Thread_ is responsible for rolling journal files in case that journal files use too much disk space. \n-\n-p. The data flush flow in _Sync Thread_ is as follows:\n-\n-# Records a _LastLogMark_ in memory. The _LastLogMark_ contains two parts: first one is _txnLogId_ (file id of a journal) and the second one is _txnLogPos_ (offset in a journal). The _LastLogMark_ indicates that those entries before it have been persisted to both index and entry log files.\n-# Flushes dirty index pages from _LedgerCache_ to index file, and flushes entry log files to ensure all buffered entries in entry log files are persisted to disk.\n-#* Ideally, a bookie just needs to flush index pages and entry log files that contains entries before _LastLogMark_. There is no such information in _LedgerCache_ and _Entry Log_ mapping to journal files, though. Consequently, the thread flushes _LedgerCache_ and _Entry Log_ entirely here, and may flush entries after the _LastLogMark_. Flushing more is not a problem, though, just redundant.\n-# Persists _LastLogMark_ to disk, which means entries added before _LastLogMark_ whose entry data and index page were also persisted to disk. It is the time to safely remove journal files created earlier than _txnLogId_.\n-#* If the bookie has crashed before persisting _LastLogMark_ to disk, it still has journal files containing entries for which index pages may not have been persisted. Consequently, when this bookie restarts, it inspects journal files to restore those entries; data isn't lost.\n-\n-p. Using the above data flush mechanism, it is safe for the _Sync Thread_ to skip data flushing when the bookie shuts down. However, in _Entry Logger_, it uses _BufferedChannel_ to write entries in batches and there might be data buffered in _BufferedChannel_ upon a shut down. The bookie needs to ensure _Entry Logger_ flushes its buffered data during shutting down. Otherwise, _Entry Log_ files become corrupted with partial entries.\n-\n-p. As described above, _EntryLogger#flush_ is invoked in the following two cases:\n-* in _Sync Thread_ : used to ensure entries added before _LastLogMark_ are persisted to disk.\n-* in _ShutDown_ : used to ensure its buffered data persisted to disk to avoid data corruption with partial entries.\n-\n-h2. Data Compaction\n-\n-p. In bookie server, entries of different ledgers are interleaved in entry log files. A bookie server runs a _Garbage Collector_ thread to delete un-associated entry log files to reclaim disk space. If a given entry log file contains entries from a ledger that has not been deleted, then the entry log file would never be removed and the occupied disk space never reclaimed. In order to avoid such a case, a bookie server compacts entry log files in _Garbage Collector_ thread to reclaim disk space.\n-\n-p. There are two kinds of compaction running with different frequency, which are _Minor Compaction_ and _Major Compaction_. The differences of _Minor Compaction_ and _Major Compaction_ are just their threshold value and compaction interval.\n-\n-# _Threshold_ : Size percentage of an entry log file occupied by those undeleted ledgers. Default minor compaction threshold is 0.2, while major compaction threshold is 0.8.\n-# _Interval_ : How long to run the compaction. Default minor compaction is 1 hour, while major compaction threshold is 1 day.\n-\n-p. NOTE: if either _Threshold_ or _Interval_ is set to less than or equal to zero, then compaction is disabled.\n-\n-p. The data compaction flow in _Garbage Collector Thread_ is as follows:\n-\n-# _Garbage Collector_ thread scans entry log files to get their entry log metadata, which records a list of ledgers comprising an entry log and their corresponding percentages.\n-# With the normal garbage collection flow, once the bookie determines that a ledger has been deleted, the ledger will be removed from the entry log metadata and the size of the entry log reduced.\n-# If the remaining size of an entry log file reaches a specified threshold, the entries of active ledgers in the entry log will be copied to a new entry log file.\n-# Once all valid entries have been copied, the old entry log file is deleted."},{"sha":"4a1b3c058a67280e523d6293ac665b1a5bfb53b5","filename":"branch-4.3/doc/bookkeeperProgrammer.textile","status":"removed","additions":0,"deletions":99,"changes":99,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperProgrammer.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperProgrammer.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperProgrammer.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,99 +0,0 @@\n-Title:        BookKeeper Getting Started Guide\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. Abstract\n-\n-This guide contains detailed information about using BookKeeper for write ahead logging. It discusses the basic operations BookKeeper supports, and how to create logs and perform basic read and write operations on these logs. The main classes used by BookKeeper client are \"BookKeeper\":./apidocs/org/apache/bookkeeper/client/BookKeeper.html and \"LedgerHandle\":./apidocs/org/apache/bookkeeper/client/LedgerHandle.html. \n-\n-BookKeeper is the main client used to create, open and delete ledgers. A ledger is a log file in BookKeeper, which contains a sequence of entries. Only the client which creates a ledger can write to it. A LedgerHandle represents the ledger to the client, and allows the client to read and write entries. When the client is finished writing they can close the LedgerHandle. Once a ledger has been closed, all client who read from it are guaranteed to read the exact same entries in the exact same order. All methods of BookKeeper and LedgerHandle have synchronous and asynchronous versions. Internally the synchronous versions are implemented using the asynchronous.\n-\n-h1.  Instantiating BookKeeper\n-\n-To create a BookKeeper client, you need to create a configuration object and set the address of the ZooKeeper ensemble in use. For example, if you were using @zk1.example.com:2181,zk2.example.com:2181,zk3.example.com:2181@ as your ensemble, you would create the BookKeeper client as follows.\n-\n-<pre><code>\n-ClientConfiguration conf = new ClientConfiguration();\n-conf.setZkServers(\"zk1.example.com:2181,zk2.example.com:2181,zk3.example.com:2181\"); \n-\n-BookKeeper client = new BookKeeper(conf);\n-</code></pre>\n-\n-It is important to close the client once you are finished working with it. The set calls on ClientConfiguration are chainable, so instead of putting a set* call on a new line as above, it is possible to make a number of calls on the one line. For example;\n-\n-<pre><code>\n-ClientConfiguration conf = new ClientConfiguration().setZkServers(\"localhost:2181\").setZkTimeout(5000);\n-</code></pre>\n-\n-There is also a useful shortcut constructor which allows you to pass the zookeeper ensemble string directly to BookKeeper.\n-<pre><code>\n-BookKeeper client = new BookKeeper(\"localhost:2181\");\n-</code></pre>\n-\n-See \"BookKeeper\":./apidocs/org/apache/bookkeeper/client/BookKeeper.html for the full api.\n-\n-\n-h1.  Creating a ledger\n-\n-p. Before writing entries to BookKeeper, it is necessary to create a ledger. Before creating the ledger you must decide the ensemble size and the quorum size. \n-\n-p. The ensemble size is the number of Bookies over which entries will be striped. The quorum size is the number of bookies which an entry will be written to. Striping is done in a round robin fashion. For example, if you have an ensemble size of 3 (consisting of bk1, bk2 & bk3), and a quorum of 2, entry 1 will be written to bk1 & bk2, entry 2 will be written to bk2 & bk3, entry 3 will be written to bk3 & bk1 and so on.\n-\n-p. Ledgers are also created with a digest type and password. The digest type is used to generate a checksum so that when reading entries we can ensure that the content is the same as what was written. The password is used as an access control mechanism.\n-\n-p. To create a ledger, with ensemble size 3, quorum size 2, using a CRC to checksum and \"foobar\" as the password, do the following:\n-\n-<pre><code>\n-LedgerHandle lh = client.createLedger(3, 2, DigestType.CRC32, \"foobar\");\n-</code></pre>\n-\n-You can now write to this ledger handle. As you probably plan to read the ledger at some stage, now is a good time to store the id of the ledger somewhere. The ledger id is a long, and can be obtained with @lh.getId()@.\n-\n-h1.  Adding entries to a ledger\n-\n-p. Once you have obtained a ledger handle, you can start adding entries to it. Entries are simply arrays of bytes. As such, adding entries to the ledger is rather simple.\n-\n-<pre><code>\n-lh.addEntry(\"Hello World!\".getBytes());\n-</code></pre>\n-\n-h1.  Closing a ledger\n-\n-p. Once a client is done writing, it can closes the ledger. Closing the ledger is a very important step in BookKeeper, as once a ledger is closed, all reading clients are guaranteed to read the same sequence of entries in the same order. Closing takes no parameters. \n-\n-<pre><code>\n-lh.close();\n-</code></pre>\n-\n-h1.  Opening a ledger\n-\n-To read from a ledger, a client must open it first. To open a ledger you must know its ID, which digest type was used when creating it, and its password. To open the ledger we created above, assuming it has ID 1;\n-\n-<pre><code>\n-LedgerHandle lh2 = client.openLedger(1, DigestType.CRC32, \"foobar\");\n-</code></pre>\n-\n-You can now read entries from the ledger. Any attempt to write to this handle will throw an exception.\n-\n-bq. NOTE: Opening a ledger, which another client already has open for writing will prevent that client from writing any new entries to it. If you do not wish this to happen, you should use the openLedgerNoRecovery method. However, keep in mind that without recovery, you lose the guarantees of what entries are in the ledger. You should only use openLedgerNoRecovery if you know what you are doing.\n-\n-h1. Reading entries from a ledger\n-\n-p. Now that you have an open ledger, you can read entries from it. You can use @getLastAddConfirmed@ to get the id of the last entry in the ledger.\n-\n-<pre><code>\n-long lastEntry = lh2.getLastAddConfirmed();\n-Enumeration<LedgerEntry> entries = lh2.readEntries(0, 9);\n-while (entries.hasMoreElements()) {\n-\tbyte[] bytes = entries.nextElement().getEntry();\n-\tSystem.out.println(new String(bytes));\n-}\n-</code></pre>\n\\ No newline at end of file"},{"sha":"4fe9d9f1d0ffeb0c76952fe922a3fb86ad580000","filename":"branch-4.3/doc/bookkeeperStarted.textile","status":"removed","additions":0,"deletions":102,"changes":102,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperStarted.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperStarted.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperStarted.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,102 +0,0 @@\n-Title:        BookKeeper Getting Started Guide\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. Abstract\n-\n-This guide contains detailed information about using BookKeeper for logging. It discusses the basic operations BookKeeper supports, and how to create logs and perform basic read and write operations on these logs.\n-\n-h1. Getting Started: Setting up BookKeeper to write logs.\n-\n-p. This document contains information to get you started quickly with BookKeeper. It is aimed primarily at developers willing to try it out, and contains simple installation instructions for a simple BookKeeper installation and a simple programming example. For further programming detail, please refer to  \"BookKeeper Programmer's Guide\":bookkeeperProgrammer.html. \n-\n-h1. Pre-requisites\n-\n-p. See \"System Requirements\":./bookkeeperConfig.html#bk_sysReqin the Admin guide.\n-\n-h1. Download\n-\n-p. BookKeeper trunk can be downloaded from subversion. See \"Version Control:http://zookeeper.apache.org/bookkeeper/svn.html. \n-\n-h1. LocalBookKeeper\n-\n-p. BookKeeper provides a utility program to start a standalone ZooKeeper ensemble and a number of bookies on a local machine. As this all runs on a local machine, throughput will be very low. It should only be used for testing.\n-\n-p. To start a local bookkeeper ensemble with 5 bookies:\n-\n- @bookkeeper-server/bin/bookkeeper localbookie 5@\n-\n-h1. Setting up bookies\n-\n-p. If you're bold and you want more than just running things locally, then you'll need to run bookies in different servers. You'll need at least three bookies to start with. \n-\n-p. For each bookie, we need to execute a command like the following: \n-\n- @bookkeeper-server/bin/bookkeeper bookie@\n-\n-p. This command will use the default directories for storing ledgers and the write ahead log, and will look for a zookeeper server on localhost:2181. See the \"Admin Guide\":./bookkeeperConfig.html for more details.\n-\n-p. To see the default values of these configuration variables, run:\n-\n- @bookkeeper-server/bin/bookkeeper help@\n-\n-h1. Setting up ZooKeeper\n-\n-p. ZooKeeper stores metadata on behalf of BookKeeper clients and bookies. To get a minimal ZooKeeper installation to work with BookKeeper, we can set up one server running in standalone mode. Once we have the server running, we need to create a few znodes: \n-\n-#  @/ledgers @ \n-#  @/ledgers/available @ \n-\n-p. We provide a way of bootstrapping it automatically. See the \"Admin Guide\":./bookkeeperConfig.html for a description of how to bootstrap automatically, and in particular the shell metaformat command.\n- \n-\n-h1. Example\n-\n-p. In the following excerpt of code, we: \n-\n-# Open a bookkeeper client;\n-# Create a ledger; \n-# Write to the ledger; \n-# Close the ledger; \n-# Open the same ledger for reading; \n-# Read from the ledger; \n-# Close the ledger again; \n-# Close the bookkeeper client.\n-\n-<pre><code>\n-BookKeeper bkc = new BookKeeper(\"localhost:2181\");\n-LedgerHandle lh = bkc.createLedger(ledgerPassword);\n-ledgerId = lh.getId();\n-ByteBuffer entry = ByteBuffer.allocate(4);\n-\n-for(int i = 0; i < 10; i++){\n-\tentry.putInt(i);\n-\tentry.position(0);\n-\tentries.add(entry.array());\t\t\t\t\n-\tlh.addEntry(entry.array());\n-}\n-lh.close();\n-lh = bkc.openLedger(ledgerId, ledgerPassword);\t\t\n-\t\t\t\n-Enumeration<LedgerEntry> ls = lh.readEntries(0, 9);\n-int i = 0;\n-while(ls.hasMoreElements()){\n-\tByteBuffer origbb = ByteBuffer.wrap(\n-\t\t\t\tentries.get(i++));\n-\tInteger origEntry = origbb.getInt();\n-\tByteBuffer result = ByteBuffer.wrap(\n-\t\t\t\tls.nextElement().getEntry());\n-\n-\tInteger retrEntry = result.getInt();\n-}\n-lh.close();\n-bkc.close();\n-</code></pre>\n\\ No newline at end of file"},{"sha":"a0c8feb8578e9999d5e70f2d8071959939f6538c","filename":"branch-4.3/doc/bookkeeperStream.textile","status":"removed","additions":0,"deletions":124,"changes":124,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperStream.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/bookkeeperStream.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/bookkeeperStream.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,124 +0,0 @@\n-Title:        Streaming with BookKeeper\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. Abstract\n-\n-This guide contains detailed information about using how to stream bytes on top of BookKeeper. It essentially motivates and discusses the basic stream operations currently supported.\n-\n-h1. Summary\n-\n-p. When using the BookKeeper API, an application has to split the data to write into entries, each entry being a byte array. This is natural for many applications. For example, when using BookKeeper for write-ahead logging, an application typically wants to write the modifications corresponding to a command or a transaction. Some other applications, however, might not have a natural boundary for entries, and may prefer to write and read streams of bytes. This is exactly the purpose of the stream API we have implemented on top of BookKeeper. \n-\n-p. The stream API is implemented in the package @Streaming@ , and it contains two main classes: @LedgerOutputStream@ and  @LedgerInputStream@ . The class names are indicative of what they do. \n-\n-h1. Writing a stream of bytes\n-\n-p. Class @LedgerOutputStream@ implements two constructors and five public methods: \n-\n- @public LedgerOutputStream(LedgerHandle lh) @ \n-\n-p. where: \n-\n-*  @lh@ is a ledger handle for a previously created and open ledger. \n-\n-\n- @public LedgerOutputStream(LedgerHandle lh, int size) @ \n-\n-p. where: \n-\n-*  @lh@ is a ledger handle for a previously created and open ledger. \n-*  @size@ is the size of the byte buffer to store written bytes before flushing. \n-\n-\n- _Closing a stream._ This call closes the stream by flushing the write buffer. \n-\n- @public void close() @ \n-\n-p. which has no parameters. \n-\n- _Flushing a stream._ This call essentially flushes the write buffer. \n-\n- @public synchronized void flush() @ \n-\n-p. which has no parameters. \n-\n- _Writing bytes._ There are three calls for writing bytes to a stream. \n-\n- @public synchronized void write(byte[] b) @ \n-\n-p. where: \n-\n-*  @b@ is an array of bytes to write. \n-\n-\n- @public synchronized void write(byte[] b, int off, int len) @ \n-\n-p. where: \n-\n-*  @b@ is an array of bytes to write. \n-*  @off@ is a buffer offset. \n-*  @len@ is the length to write. \n-\n-\n- @public synchronized void write(int b) @ \n-\n-p. where: \n-\n-*  @b@ contains a byte to write. The method writes the least significant byte of the integer four bytes. \n-\n-\n-h1. Reading a stream of bytes\n-\n-p. Class @LedgerOutputStream@ implements two constructors and four public methods: \n-\n- @public LedgerInputStream(LedgerHandle lh) throws BKException, InterruptedException @ \n-\n-p. where: \n-\n-*  @lh@ is a ledger handle for a previously created and open ledger. \n-\n-\n- @public LedgerInputStream(LedgerHandle lh, int size) throws BKException, InterruptedException @ \n-\n-p. where: \n-\n-*  @lh@ is a ledger handle for a previously created and open ledger. \n-*  @size@ is the size of the byte buffer to store bytes that the application will eventually read. \n-\n-\n- _Closing._ There is one call to close an input stream, but the call is currently empty and the application is responsible for closing the ledger handle. \n-\n- @public void close() @ \n-\n-p. which has no parameters. \n-\n- _Reading._ There are three calls to read from the stream. \n-\n- @public synchronized int read() throws IOException @ \n-\n-p. which has no parameters. \n-\n- @public synchronized int read(byte[] b) throws IOException @ \n-\n-p. where: \n-\n-*  @b@ is a byte array to write to. \n-\n-\n- @public synchronized int read(byte[] b, int off, int len) throws IOException @ \n-\n-p. where: \n-\n-*  @b@ is a byte array to write to. \n-*  @off@ is an offset for byte array @b@ . \n-*  @len@ is the length in bytes to write to @b@ . \n-"},{"sha":"36c69e7844441e84b8854fe3490835821d21976a","filename":"branch-4.3/doc/doc.textile","status":"removed","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/doc.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/doc.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/doc.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,21 +0,0 @@\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-In the documentation directory, you'll find:\n-\n-* @build.txt@: Building Hedwig, or how to set up Hedwig\n-* @user.txt@: User's Guide, or how to program against the Hedwig API and how to run it\n-* @dev.txt@: Developer's Guide, or Hedwig internals and hacking details\n-\n-These documents are all written in the \"Pandoc\":http://johnmacfarlane.net/pandoc/ dialect of \"Markdown\":http://daringfireball.net/projects/markdown/. This makes them readable as plain text files, but also capable of generating HTML or LaTeX documentation.\n-\n-Documents are wrapped at 80 chars and use 2-space indentation.\n-"},{"sha":"bcecd9930e0727ef11d5c81d2fa3b8a9c272073a","filename":"branch-4.3/doc/hedwigBuild.textile","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigBuild.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigBuild.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/hedwigBuild.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,38 +0,0 @@\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. Pre-requisites\n-\n-For the core itself:\n-\n-* JDK 6: \"http://java.sun.com/\":http://java.sun.com/. Ensure @$JAVA_HOME@ is correctly set.\n-* Maven 2: \"http://maven.apache.org/\":http://maven.apache.org/.\n-\n-Hedwig has been tested on Windows XP, Linux 2.6, and OS X.\n-\n-h1. Command-Line Instructions\n-\n-From the top level bookkeeper directory, run @mvn package@. This will compile and package the jars necessary for running hedwig. \n-\n-See the User's Guide for instructions on running and usage.\n-\n-h1. Eclipse Instructions\n-\n-To check out, build, and develop using Eclipse:\n-\n-# Install the Subclipse plugin. Update site: \"http://subclipse.tigris.org/update_1.4.x\":http://subclipse.tigris.org/update_1.4.x.\n-# Install the Maven plugin. Update site: \"http://m2eclipse.sonatype.org/update\":http://m2eclipse.sonatype.org/update. From the list of packages available from this site, select everything under the &quot;Maven Integration&quot; category, and from the optional components select the ones with the word &quot;SCM&quot; in them.\n-# Go to Preferences &gt; Team &gt; SVN. For the SVN interface, choose &quot;Pure Java&quot;.\n-# Choose File &gt; New &gt; Project... &gt; Maven &gt; Checkout Maven Projects from SCM.\n-# For the SCM URL type, choose SVN. For the URL, enter SVN URL. Maven will automatically create a top-level Eclipse project for each of the 4 Maven modules (recommended). If you want fewer top-level projects, uncheck the option of having a project for each module (under Advanced).\n-\n-You are now ready to run and debug the client and server code. See the User's Guide for instructions on running and usage.\n-"},{"sha":"b37d20c174d68c02a1d88cb6c9732733d672ae39","filename":"branch-4.3/doc/hedwigConsole.textile","status":"removed","additions":0,"deletions":187,"changes":187,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigConsole.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigConsole.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/hedwigConsole.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,187 +0,0 @@\n-Title:        Hedwig Console\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        .\n-\n-h1. Hedwig Console\n-\n-Apache Hedwig provides a console client, which allows users and administrators to interact with a hedwig cluster. \n-\n-h2. Connecting to hedwig cluster\n-\n-Hedwig console client is shipped with hedwig server package.\n-\n-p. To start the console client:\n-\n- @hedwig-server/bin/hedwig console@\n-\n-p. By default, the console client connects to hub server on localhost. If you want the console client to connect to a different hub server, you can override following environment variables.\n-\n-| @HEDWIG_CONSOLE_SERVER_CONF@ | Path of a hub server configuration file. Override to make hedwig console client connect to correct zookeeper cluster. |\n-| @HEDWIG_CONSOLE_CLIENT_CONF@ | Path of a hedwig client configuration file. Override to make hedwig console client communicate with correct hub servers. |\n-\n-p. Once connected, you should see something like:\n-\n-<pre>\n-Connecting to zookeeper/bookkeeper using HedwigAdmin\n-\n-Connecting to default hub server localhost/127.0.0.1:4080\n-Welcome to Hedwig!\n-JLine support is enabled\n-JLine history support is enabled\n-[hedwig: (standalone) 16] \n-</pre>\n-\n-p. From the shell, type __help__ to get a list of commands that can be executed from the client:\n-\n-<pre>\n-[hedwig: (standalone) 16] help\n-HedwigConsole [options] [command] [args]\n-\n-Available commands:\n-        pub\n-        sub\n-        closesub\n-        unsub\n-        rmsub\n-        consume\n-        consumeto\n-        pubsub\n-        show\n-        describe\n-        readtopic\n-        set\n-        history\n-        redo\n-        help\n-        quit\n-        exit\n-\n-Finished 0.0020 s.\n-</pre>\n-\n-p. If you want to know detail usage for each command, type __help {command}__ in the shell. For example:\n-\n-<pre>\n-[hedwig: (standalone) 17] help pub\n-pub: Publish a message to a topic in Hedwig\n-usage: pub {topic} {message}\n-\n-  {topic}   : topic name.\n-              any printable string without spaces.\n-  {message} : message body.\n-              remaining arguments are used as message body to publish.\n-\n-Finished 0.0 s.\n-</pre>\n-\n-h2. Commands\n-\n-All the available commands provided in hedwig console could be categorized into three groups. They are __interactive commands__, __admin commands__, __utility commands__.\n-\n-h3. Interactive Commands\n-\n-p. Interactive commands are used by users to communicate with a hedwig cluster. They are __pub__, __sub__, __closesub__, __unsub__, __consume__ and __consumeto__.\n-\n-p. These commands are quite simple and have same semantics as the API provided in hedwig client.\n-\n-h3.  Admin Commands\n-\n-p. Admin commands are used by administrators to operate or debug a hedwig cluster. They are __show__, __describe__, __pubsub__ and __readtopic__.\n-\n-p. __show__ is used to list all available hub servers or topics in the cluster.\n-\n-p. You could use __show__ to list hub servers to know how many hub servers are alive in the cluster.\n-\n-<pre>\n-[hedwig: (standalone) 27] show hubs\n-Available Hub Servers:\n-        192.168.1.102:4080:9876 :       0\n-Finished 0.0040 s.\n-</pre>\n-\n-p. Also, you could use __show__ to list all topics. If you have a lot of topics on the clusters, this command will take a long time to run.\n-\n-<pre>\n-[hedwig: (standalone) 28] show topics\n-Topic List:\n-[mytopic]\n-Finished 0.0020 s.\n-</pre>\n-\n-p. To see the details of a topic, run __describe__. This shows the metadata of a topic, including topic owner, persistence info, subscriptions info.\n-\n-<pre>\n-[hedwig: (standalone) 43] describe topic mytopic\n-===== Topic Information : mytopic =====\n-\n-Owner : 192.168.1.102:4080:9876\n-\n->>> Persistence Info <<<\n-Ledger 3 [ 1 ~ 9 ]\n-\n->>> Subscription Info <<<\n-Subscriber mysub : consumeSeqId: local:0\n-\n-Finished 0.011 s.\n-</pre>\n-\n-p. When you are run the __describe__ command, you should keep in mind that __describe__ command reads the metadata from __ZooKeeper__ directly, so the subscription info might not be completely up to date due to the fact that hub servers update the subscription metadata lazily.\n-\n-p. The __readtopic__ command is useful to see which messages have not been consumed by the client.\n-\n-<pre>\n-[hedwig: (standalone) 46] readtopic mytopic\n-\n->>>>> Ledger 3 [ 1 ~ 9] <<<<<\n-\n----------- MSGID=LOCAL(1) ----------\n-MsgId:     LOCAL(1)\n-SrcRegion: standalone\n-Message:\n-\n-hello\n-\n----------- MSGID=LOCAL(2) ----------\n-MsgId:     LOCAL(2)\n-SrcRegion: standalone\n-Message:\n-\n-hello 2\n-\n----------- MSGID=LOCAL(3) ----------\n-MsgId:     LOCAL(3)\n-SrcRegion: standalone\n-Message:\n-\n-hello 3\n-\n-...\n-</pre>\n-\n-p. __pubsub__ is another useful command for administrators. It can be used to test availability and functionality of a cluster. It generates a temporary subscriber id with the current timestamp, subscribes to the given topic using generated subscriber id, publishes a message to given topic and testes whether the subscriber received the message.\n-\n-<pre>\n-[hedwig: (standalone) 48] pubsub testtopic testsub- 10 test message for availability\n-Starting PUBSUB test ...\n-Sub topic testtopic, subscriber id testsub--1338126964504\n-Pub topic testtopic : test message for availability-1338126964504\n-Received message : test message for availability-1338126964504\n-PUBSUB SUCCESS. TIME: 377 MS\n-Finished 0.388 s.\n-</pre>\n-\n-h3. Utility Commands\n-\n-p. Utility Commands are __help__, __history__, __redo__, __quit__ and __exit__.\n-\n-p. __quit__ and __exit__ are used to exit console, while __history__ and __redo__ are used to manage the history of commands executed in the shell."},{"sha":"e56c0d19569831941517566c8679c39a0f3831d8","filename":"branch-4.3/doc/hedwigDesign.textile","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigDesign.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigDesign.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/hedwigDesign.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,72 +0,0 @@\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. Style\n-\n-We have provided an Eclipse Formatter file @formatter.xml@ with all the formatting conventions currently used in the project. Highlights include no tabs, 4-space indentation, and 120-char width. Please respect this so as to reduce the amount of formatting-related noise produced in commits.\n-\n-h1. Static Analysis\n-\n-We would like to use static analysis tools PMD and FindBugs to maintain code quality. However, we have not yet arrived at a consensus on what rules to adhere to, and what to ignore.\n-\n-h1. Netty Notes\n-\n-The asynchronous network IO infrastructure that Hedwig uses is \"Netty\":http://www.jboss.org/netty. Here are some notes on Netty's concurrency architecture and its filter pipeline design.\n-\n-h2. Concurrency Architecture\n-\n-After calling @ServerBootstrap.bind()@, Netty starts a boss thread (@NioServerSocketPipelineSink.Boss@) that just accepts new connections and registers them with one of the workers from the @NioWorker@ pool in round-robin fashion (pool size defaults to CPU count). Each worker runs its own select loop over just the set of keys that have been registered with it. Workers start lazily on demand and run only so long as there are interested fd's/keys. All selected events are handled in the same thread and sent up the pipeline attached to the channel (this association is established by the boss as soon as a new connection is accepted).\n-\n-All workers, and the boss, run via the executor thread pool; hence, the executor must support at least two simultaneous threads.\n-\n-h2. Handler Pipeline\n-\n-A pipeline implements the intercepting filter pattern. A pipeline is a sequence of handlers. Whenever a packet is read from the wire, it travels up the stream, stopping at each handler that can handle upstream events. Vice-versa for writes. Between each filter, control flows back through the centralized pipeline, and a linked list of contexts keeps track of where we are in the pipeline (one context object per handler).\n-\n-\n-h1. Pseudocode\n-\n-This summarizes the control flow through the system.\n-\n-h2. publish\n-\n-Need to document\n-\n-h2. subscribe\n-\n-Need to document\n-\n-h1. ReadAhead Cache\n-\n-The delivery manager class is responsible for pushing published messages from the hubs to the subscribers. The most common case is that all subscribers are connected and either caught up, or close to the tail end of the topic. In this case, we don't want the delivery manager to be polling bookkeeper for any newly arrived messages on the topic; new messages should just be pushed to the delivery manager. However, there is also the uncommon case when a subscriber is behind, and messages must be pulled from Bookkeeper.\n-\n-Since all publishes go through the hub, it is possible to cache the recently published messages in the hub, and then the delivery manager won't have to make the trip to bookkeeper to get the messages but instead get them from local process memory.\n-\n-These ideas of push, pull, and caching are unified in the following way: - A hub has a cache of messages\n-\n-* When the delivery manager wants to deliver a message, it asks the cache for it. There are 3 cases:\n-* The message is available in the cache, in which case it is given to the delivery manager\n-* The message is not present in the cache and the seq-id of the message is beyond the last message published on that topic (this happens if the subscriber is totally caught up for that topic). In this case, a stub is put in the cache in order to notify the delivery manager when that message does happen to be published.\n-* The message is not in the cache but has been published to the topic. In this case, a stub is put in the cache, and a read is issued to bookkeeper.\n-* Whenever a message is published, it is cached. If there is a stub already in the cache for that message, the delivery manager is notified.\n-* Whenever a message is read from bookkeeper, it is cached. There must be a stub for that message (since reads to bookkeeper are issued only after putting a stub), so the delivery manager is notified.\n-* The cache does readahead, i.e., if a message requested by the delivery manager is not in the cache, a stub is established not only for that message, but also for the next n messages where n is configurable (default 10). On a cache hit, we look ahead n/2 messages, and if that message is not present, we establish another n/2 stubs. In short, we always ensure that the next n stubs are always established.\n-* Over time, the cache will grow in size. There are 2 pruning mechanisms:\n-* Once all subscribers have consumed up to a particular seq-id, they notify the cache, and all messages up to that seq-id are pruned from the cache.\n-* If the above pruning is not working (e.g., because some subscribers are down), the cache will eventually hit its size limit which is configurable\n- (default, half of maximum jvm heap size). At this point, messages are just pruned in FIFO order. We use the size of the blobs in the message for estimating the cache size. The assumption is that that size will dominate over fixed, object-level size overheads.\n-* Stubs are not purged because according to the above simplification, they are of 0 size.\n-\n-h1. Scalability Bottlenecks Down the Road\n-\n-* Currently each topic subscription is served on a different channel. The number of channels will become a bottleneck at higher channels. We should switch to an architecture, where multiple topic subscriptions between the same client, hub pair should be served on the same channel. We can have commands to start, stop subscriptions sent all the way to the server (right now these are local).\n-* Publishes for a topic are serialized through a hub, to get ordering guarantees. Currently, all subscriptions to that topic are served from the same hub. If we start having large number of subscribers to heavy-volume topics, the outbound bandwidth at the hub, or the CPU at that hub might become the bottleneck. In that case, we can setup other regions through which the messages are routed (this hierarchical scheme) reduces bandwidth requirements at any single node. It should be possible to do this entirely through configuration.\n-"},{"sha":"4c694993a8f0599155f649a1fe5a190c7682edb4","filename":"branch-4.3/doc/hedwigJMX.textile","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigJMX.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigJMX.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/hedwigJMX.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,32 +0,0 @@\n-Title:        Hedwig JMX\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        .\n-\n-h1. JMX\n-\n-Apache Hedwig has extensive support for JMX, which allows viewing and managing a hedwig cluster.\n-\n-This document assumes that you have basic knowledge of JMX. See \"Sun JMX Technology\":http://java.sun.com/javase/technologies/core/mntr-mgmt/javamanagement/ page to get started with JMX.\n-\n-See the \"JMX Management Guide\":http://java.sun.com/javase/6/docs/technotes/guides/management/agent.html for details on setting up local and remote management of VM instances. By default the included __hedwig__ script supports only local management - review the linked document to enable support for remote management (beyond the scope of this document).\n-\n-__Hub Server__ is a JMX manageable server, which registers the proper MBeans during initialization to support JMX monitoring and management of the instance.\n-\n-h1. Hub Server MBean Reference\n-\n-This table details JMX for a hub server.\n-\n-| _.MBean | _.MBean Object Name | _.Description |\n-| PubSubServer | PubSubServer | Represents a hub server. It is the root MBean for hub server, which includes statistics for a hub server. E.g. number packets sent/received/redirected, and statistics for pub/sub/unsub/consume operations. |\n-| NettyHandlers | NettyHandler | Provide statistics for netty handlers. Currently it just returns number of subscription channels established to a hub server. |\n-| ReadAheadCache | ReadAheadCache | Provide read ahead cache statistics. |"},{"sha":"d5ca21ff210ae1768da8066d1a24c0b64202dd68","filename":"branch-4.3/doc/hedwigMessageFilter.textile","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigMessageFilter.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigMessageFilter.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/hedwigMessageFilter.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,76 +0,0 @@\n-Title:        Hedwig Message Filter\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .\n-        .\n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        .\n-\n-h1. Message Filter\n-\n-Apache Hedwig provides an efficient mechanism for supporting application-defined __message filtering__.\n-\n-h2. Message\n-\n-Most message-oriented middleware (MOM) products treat messages as lightweight entities that consist of a header and a payload. The header contains fields used for message routing and identification; the payload contains the application data being sent.\n-\n-Hedwig messages follow a similar template, being composed of following parts:\n-\n-* @Header@ - All messages support both system defined fields and application defined property values. Properties provide an efficient mechanism for supporting application-defined message filtering.\n-* @Body@ - Hedwig considers the message body as a opaque binary blob.\n-* @SrcRegion@ - Indicates where the message comes from.\n-* @MessageSeqId@ - The unique message sequence id assigned by Hedwig.\n-\n-h3. Message Header Properties\n-\n-A __Message__ object contains a built-in facility for supporting application-defined property values. In effect, this provides a mechanism for adding application-specific header fields to a message.\n-\n-By using properties and  __message filters__, an application can have Hedwig select, or filter, messages on its behalf using application-specific criteria.\n-\n-Property names must be a __String__ and must not be null, while property values are binary blobs. The flexibility of binary blobs allows applications to define their own serialize/deserialize functions, allowing structured data to be stored in the message header.\n-\n-h2. Message Filter\n-\n-A __Message Filter__ allows an application to specify, via header properties, the messages it is interested in. Only messages which pass validation of a __Message Filter__, specified by a subscriber, are be delivered to the subscriber.\n-\n-A message filter could be run either on the __server side__ or on the __client side__. For both __server side__ and __client side__, a __Message Filter__ implementation needs to implement the following two interfaces:\n-\n-* @setSubscriptionPreferences(topic, subscriberId, preferences)@: The __subscription preferences__ of the subscriber will be passed to message filter when it was attached to its subscription either on the server-side or on the client-side.\n-* @testMessage(message)@: Used to test whether a particular message passes the filter or not.\n-\n-The __subscription preferences__ are used to specify the messages that the user is interested in. The __message filter__ uses the __subscription preferences__ to decide which messages are passed to the user.\n-\n-Take a book store(using topic __BookStore__) as an example:\n-\n-# User A may only care about History books. He subscribes to __BookStore__ with his custom preferences : type=\"History\".\n-# User B may only care about Romance books. He subscribes to __BookStore__ with his custom preferences : type=\"Romance\".\n-# A new book arrives at the book store; a message is sent to __BookStore__ with type=\"History\" in its header\n-# The message is then delivered to __BookStore__'s subscribers.\n-# Subscriber A filters the message by checking messages' header to accept those messages whose type is \"History\".\n-# Subscriber B filters out the message, as the type does not match its preferences.\n-\n-h3. Client Message Filter.\n-\n-A __ClientMessageFilter__ runs on the client side. Each subscriber can write its own filter and pass it as a parameter when starting delivery ( __startDelivery(topic, subscriberId, messageHandler, messageFilter)__ ).\n-\n-h3. Server Message Filter.\n-\n-A __ServerMessageFilter__ runs on the server side (a hub server). A hub server instantiates a server message filter, by means of reflection, using the message filter class specified in the subscription preferences which are provided by the subscriber. Since __ServerMessageFilter__s run on the hub server, all filtered-out messages are never delivered to client, reducing unnecessary network traffic. Hedwig uses a implementation of __ServerMessageFilter__ to filter unnecessary message deliveries between regions.\n-\n-Since hub servers use reflection to instantiate a __ServerMessageFilter__, an implementation of __ServerMessageFilter__ needs to implement two additional methods:\n-\n-* @initialize(conf)@: Initialize the message filter before filtering messages.\n-* @uninitialize()@: Uninitialize the message filter to release resources used by the message filter.\n-\n-For the hub server to load the message filter, the implementation class must be in the server's classpath at startup.\n-\n-h3. Which message filter should be used?\n-\n-It depends on application requirements. Using a __ServerMessageFilter__ will reduce network traffic by filtering unnecessary messages, but it would compete for resources on the hub server(CPU, memory, etc). Conversely, __ClientMessageFilter__s have the advantage of inducing no extra load on the hub server, but at the price of higher network utilization. A filter can be installed both at the server side and on the client; Hedwig does not restrict this.\n-"},{"sha":"1add816dea118cbd6cbc6d1fbbb603893394b8b0","filename":"branch-4.3/doc/hedwigMetadata.textile","status":"removed","additions":0,"deletions":123,"changes":123,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigMetadata.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigMetadata.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/hedwigMetadata.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,123 +0,0 @@\n-Title:        Hedwig Metadata Management\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .\n-        .\n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        .\n-\n-h1. Metadata Management\n-\n-There are two classes of metadata that need to be managed in Hedwig: one is the __list of available hubs__, which is used to track server availability (ZooKeeper is designed naturally for this); while the other is for data structures to track __topic states__ and __subscription states__. This second class can be handled by any key/value store which provides ah __CAS (Compare And Set)__ operation. The metadata in this class are:\n-\n-* @Topic Ownership@: tracks which hub server is assigned to serve requests for a specific topic.\n-* @Topic Persistence Info@: records what __bookkeeper ledgers__ are used to store messages for a specific topic and their message id ranges.\n-* @Subscription Data@: records the preferences and subscription state for a specific subscription (topic, subscriber).\n-\n-Each kind of metadata is handled by a specific metadata manager. They are __TopicOwnershipManager__, __TopicPersistenceManager__ and __SubscriptionDataManager__.\n-\n-h2. Topic Ownership Management\n-\n-There are two ways to management topic ownership. One is leveraging ZooKeeper's ephemeral znodes to record the topic's owner info as a child ephemeral znode under its topic znode. When a hub server, owning a specific topic, crashes, the ephemeral znode which signifies topic ownership will be deleted due to the loss of the zookeeper session. Other hubs can then be assigned the ownership of the topic. The other one is to leverage the __CAS__ operation provided by key/value stores to do leader election. __CAS__ doesn't require the underlying key/value store to provide functionality similar to ZooKeeper's ephemeral nodes. With __CAS__ it is possible to guarantee that only one hub server gains the ownership for a specific topic, which is more scalable and generic solution.\n-\n-The implementation of a __TopicOwnershipManager__ is required to implement following methods:\n-\n-<pre><code>\n-\n-public void readOwnerInfo(ByteString topic, Callback<Versioned<HubInfo>> callback, Object ctx);\n-\n-public void writeOwnerInfo(ByteString topic, HubInfo owner, Version version,\n-                           Callback<Version> callback, Object ctx);\n-\n-public void deleteOwnerInfo(ByteString topic, Version version,\n-                            Callback<Void> callback, Object ctx);\n-\n-</code></pre>\n-\n-* @readOwnerInfo@: Read the owner info from the underlying key/value store. The implementation should take the responsibility of deserializing the metadata into a __HubInfo__ object identifying a hub server. Also, its current __version__ needs to be returned for future updates. If there is no owner info found for a topic, null value is returned.\n-\n-* @writeOwnerInfo@: Write the owner info into the underlying key/value store with the given __version__. If the current __version__ in underlying key/value store doesn't equal to the provided __version__, the write should be rejected with __BadVersionException__. The new __version__ should be returned for a successful write. __NoTopicOwnerInfoException__ is returned if no owner info found for a topic.\n-\n-* @deleteOwnerInfo@: Delete the owner info from key/value store with the given __version__. The owner info should be removed if the current __version__ in key/value store is equal to the provided __version__. Otherwise, the deletion should be rejected with __BadVersionException__. __NoTopicOwnerInfoException__ is returned if no owner info is found for the topic.\n-\n-h2. Topic Persistence Info Management\n-\n-Similar as __TopicOwnershipManager__, an implementation of __TopicPersistenceManager__ is required to implement READ/WRITE/DELETE interfaces as below:\n-\n-<pre><code>\n-public void readTopicPersistenceInfo(ByteString topic,\n-                                     Callback<Versioned<LedgerRanges>> callback, Object ctx);\n-\n-public void writeTopicPersistenceInfo(ByteString topic, LedgerRanges ranges, Version version,\n-                                      Callback<Version> callback, Object ctx);\n-\n-public void deleteTopicPersistenceInfo(ByteString topic, Version version,\n-                                       Callback<Void> callback, Object ctx);\n-</code></pre>\n-\n-* @readTopicPersistenceInfo@: Read the persistence info from the underlying key/value store. The implementation should take the responsibility of deserializing the metadata into a __LedgerRanges__ object includes the ledgers used to store messages. Also, its current __version__ needs to be returned for future updates. If there is no persistence info found for a topic, a null value is returned.\n-\n-* @writeTopicPersistenceInfo@: Write the persistence info into the underlying key/value store with the given __version__. If the current __version__ in the underlying key/value store doesn't equal the provided __version__, the write should be rejected with __BadVersionException__. The new __version__ should be returned on a successful write. __NoTopicPersistenceInfoException__ is returned if no persistence info is found for a topic.\n-\n-* @deleteTopicPersistenceInfo@: Delete the persistence info from the key/value store with the given __version__. The owner info should be removed if the current __version__ in the key/value store equals the provided __version__. Otherwise, the deletion should be rejected with __BadVersionException__. __NoTopicPersistenceInfoException__ is returned if no persistence info is found for a topic.\n-\n-h2. Subscription Data Management\n-\n-__SubscriptionDataManager__ has similar READ/CREATE/WRITE/DELETE interfaces as other managers. Besides that, the implementation needs to implement __READ SUBSCRIPTIONS__ interface, which is to fetch all the subscriptions for a given topic.\n-\n-<pre><code>\n-public void createSubscriptionData(ByteString topic, ByteString subscriberId, SubscriptionData data,\n-                                   Callback<Version> callback, Object ctx);\n-\n-public boolean isPartialUpdateSupported();\n-\n-public void updateSubscriptionData(ByteString topic, ByteString subscriberId, SubscriptionData dataToUpdate, \n-                                   Version version, Callback<Version> callback, Object ctx);\n-\n-public void replaceSubscriptionData(ByteString topic, ByteString subscriberId, SubscriptionData dataToReplace,\n-                                    Version version, Callback<Version> callback, Object ctx);\n-\n-public void deleteSubscriptionData(ByteString topic, ByteString subscriberId, Version version,\n-                                   Callback<Void> callback, Object ctx);\n-\n-public void readSubscriptionData(ByteString topic, ByteString subscriberId,\n-                                 Callback<Versioned<SubscriptionData>> callback, Object ctx);\n-\n-public void readSubscriptions(ByteString topic, Callback<Map<ByteString, Versioned<SubscriptionData>>> cb,\n-                              Object ctx);\n-</code></pre>\n-\n-h3. Create/Update Subscriptions\n-\n-The metadata for a subscription includes two parts, one is preferences and the other one is subscription state. __SubscriptionPreferences__ tracks all the preferences for a subscriber (etc. Application could store its customized preferences for message filtering), while __SubscriptionState__ is used internally to track the message consumption state for a given subscriber. These two kinds of metadata are quite different: __SubscriptionPreferences__ is not updated\n-frequently while __SubscriptionState__ is be updated frequently when messages are consumed. If the underlying key/value store supports independent field update for a given key (subscription), __SubscriptionPreferences__ and __SubscriptionState__ could be stored as two different fields for a given subscription. In this case __isPartialUpdateSupported__ should return true. Otherwise, __isPartialUpdateSupported__ should return false and the implementation should serialize/deserialize __SubscriptionData__ as an opaque blob.\n-\n-* @createSubscriptionData@: Create a subscription entry for a given topic. The initial __version__ would be returned for a success creation. __SubscriptionStateExistsException__ is returned if the subscription entry already exists.\n-\n-* @updateSubscriptionData/replaceSubscriptionData@: Update/replace the subscription data in the underlying key/value store with the given __version__. If the current __version__ in underlying key/value store doesn't equal to the provided __version__, the update should be rejected with __BadVersionException__. The new __version__ should be returned for a successful write. __NoSubscriptionStateException__ is returned if no subscription entry is found for a subscription (topic, subscriber).\n-\n-h3. Read Subscriptions\n-\n-* @readSubscriptionData@: Read the subscription data from the underlying key/value store. The implementation should take the responsibility of deserializing the metadata into a __SubscriptionData__ object including its preferences and subscription state. Also, its current __version__ needs to be returned for future updates. If there is no subscription data found for a subscription, a null value is returned.\n-\n-* @readSubscriptions@: Read all the subscription data from key/value store for a given topic. The implementation should take the responsibility of managing all subscription for a topic for efficient access.  An empty map is returned if there are no subscriptions found for a given topic.\n-\n-h3. Delete Subscription\n-\n-* @deleteSubscriptionData@: Delete the subscription data from the key/value store with given __version__ for a specific subscription (topic, subscriber). The subscription info should be removed if current __version__ in key/value store equals the provided __version__. Otherwise, the deletion should be rejected with __BadVersionException__. __NoSubscriptionStateException__ is returned if no subscription data is found for a subscription (topic, subscriber).\n-\n-h1. How to choose a key/value store for Hedwig.\n-\n-From the interface, several requirements needs to meet before picking up a key/value store for Hedwig:\n-\n-* @CAS@: The ability to do strict updates according to specific condition, i.e. a specific version (ZooKeeper) and same content (HBase).\n-* @Optimized for Writes@: The metadata access pattern for Hedwig is read first and continuous updates.\n-* @Optimized for retrieving all subscriptions for a topic@: Either hierarchical structures to maintain such relationships (ZooKeeper), or ordered key/value storage to cluster the subscription for a topic together, would provide efficient subscription data management.\n-\n-__ZooKeeper__ is the default implementation for Hedwig metadata management, which holds data in memory and provides filesystem-like namespace, meeting the above requirements. __ZooKeeper__ is suitable for most Hedwig usecases. However, if your application needs to manage millions of topics/subscriptions, a more scalable solution would be __HBase__, which also meet the above requirements."},{"sha":"ea01be671a7481532b1a49a49820b38b16f81119","filename":"branch-4.3/doc/hedwigParams.textile","status":"removed","additions":0,"deletions":92,"changes":92,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigParams.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigParams.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/hedwigParams.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,92 +0,0 @@\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        \n-h1. Hedwig configuration parameters        \n-        \n-This page contains detailed information about configuration parameters used for Hubs, Regions, ZooKeeper, and BookKeeper.\n-        \n-h2. Hedwig server configuration parameters\n-\n-Please also refer to the configuration file that comes with the distribution: _hedwig-server/conf/hw_server.conf_.  \n-\n-h3. Region related parameters\n-\n-| @region@ | Region identifier. Default is \"standalone\". |\n-| @regions@ | List of region identifiers, space separated. Default is empty. |\n-| @inter_region_ssl_enabled (deprecated)@ | Enables SSL across regions. Default is false. *Since this parameter has been deprecated, use __ssl_enabled__ in _hedwig-server/conf/hw_region_client.conf_ to enable SSL across regions instead.* |\n-| @retry_remote_subscribe_thread_run_interval@ | This parameter is used to determine how often we run a thread to retry those failed remote subscriptions in asynchronous mode (in milliseconds). Default is 2 minutes. |\n-\n-h3. Hub server parameters\n-\n-| @standalone@ | Sets the hub server to run in standalone mode (no regions). Default is false. |\n-| @server_port@ | Sets the server port that receives client connections. Default is 4080. |\n-| @ssl_enabled@ | Enables SSL. Default is false. |\n-| @ssl_server_port@ | Sets the server port for SSL connections. Default is 9876. | \n-| @password@ | Password used for pkcs12 certificate.. Default is the empty string. |\n-| @cert_name@ | Sets the name of the SSL certificate if available as a resource. Default is the null string. |\n-| @cert_path@ | Sets the path to the SSL certificate if it is available as a file. Default is the null string. |\n-\n-h3. Read-ahead cache parameters\n-\n-| @readahead_enabled@ | Enables read-ahead. Enabled by default. | \n-| @readahead_count@ | Number of messages to read ahead. Default is 10. |\n-| @readahead_size@ | Maximum number of bytes to read during a scan. Default is 4 megabytes. |\n-\n-bq. Upon a range scan request for a given topic, two hints are provided as to when scanning should stop: the number of messages scanned and the total size of messages scanned. Scanning stops whenever one of these limits is exceeded.\n-\n-| @cache_size@ | Sets the size of the read-ahead cache. Default is the smallest of 2G or half the heap size. | \n-| @cache_entry_ttl@ | Sets TTL for cache entries. Each time adding new entry into the cache, those expired cache entries would be discarded. If the value is set to zero or less than zero, cache entry will not be evicted until the cache is fullfilled or the messages are already consumed. Default is 0. |\n-| @scan_backoff_ms@ | The backoff time (in milliseconds) to retry scans after failures. Default value is 1s (1000ms). Default is 1s. |\n-| @num_readahead_cache_threads@ | Sets the number of threads to be used for the read-ahead mechanism. Default is the number of cores as returned with a call to <code>Runtime.getRuntime().availableProcessors()</code>.|\n-\n-h3. Publish and subscription parameters \n-\n-| @max_message_size@ | Sets the maximum message size. Default is 1.2 megabytes. |\n-| @default_message_window_size@ | This parameter is used for setting the default maximum number of messages that can be delivered to a subscriber without being consumed. We pause delivery to a subscriber when reaching the window size. Default is unlimited (0). |\n-| @consume_interval@ | Sets the number of messages consumed before persisting information about consumed messages. A value greater than one avoids persisting information about consumed messages upon every consumed message. Default is 50.|\n-| @retention_secs@ | the interval to release a topic. If this parameter is greater than zero, then schedule a task to release an owned topic. Default is 0 (never released).\n-| @messages_consumed_thread_run_interval@ | Time interval (in milliseconds) to run messages consumed timer task to\n-delete those consumed ledgers in BookKeeper. Default is 1 minute (60,000 ms). |\n-\n-\n-h3. ZooKeeper parameters\n- \n-| @zk_host@ | Sets the ZooKeeper list of servers. Default is localhost:2181. |\n-| @zk_timeout@ | Sets the ZooKeeper session timeout. Default is 2s. |\n-\n-h3. BookKeeper parameters\n-\n-| @bk_ensemble_size@ | Sets the ensemble size. Default is 3. |\n-| @bk_write_quorum_size@ | Sets the write quorum size. Default is 2. |\n-| @bk_ack_quorum_size@ | Sets the ack quorum size. Default is 2. |\n-\n-bq. Note that the ack quorum size must be equal or smaller than the write quorum size.\n-\n-| @max_entries_per_ledger@ | Maximum number of entries before we roll a ledger. Default is unlimited (0). |\n-\n-h3. Metadata parameters\n-\n-| @zk_prefix@ | Sets the ZooKeeper path prefix. Default is _/hedwig_. |\n-| @metadata_manager_based_topic_manager_enabled@ | Enables the use of a metadata manager for topic management. Default is false. |\n-| @metadata_manager_factory_class@ | Sets the default factory for the metadata manager. Default is null. |\n-\n-h2. Region manager configuration parameters\n-\n-Please also refer to the configuration file that comes with the distribution: _hedwig-server/conf/hw_region_client.conf_.\n-\n-| @ssl_enabled@ | This parameter is a boolean flag indicating if communication with the server should be done via SSL for encryption. The Hedwig server hubs also need to be SSL enabled for this to work. Default value is false. |\n-| @max_message_size@ | Sets the maximum message size in bytes. The default value is 2 MB (2097152). |\n-| @max_server_redirects@ | Sets the maximum number of redirects we permit before signaling an error. Default value is 2. |\n-| @auto_send_consume_message_enabled@ | A flag indicating whether the client library should automatically send consume messages to the server. Default value is true. |\n-| @consumed_messages_buffer_size@ | Sets the number of messages we buffer before sending a consume message to the server. Default value is 5. |\n-| @max_outstanding_messages@ | Support for client side throttling, sets the maximum number of outstanding messages. Default value is 10. |\n-| @server_ack_response_timeout@ | Sets the timeout (in milliseconds) before we error out any existing requests. Default value is 30s (30,000). |\n-        "},{"sha":"58ff1cf1546ed9544ba732e3cd53b8cf1ad20731","filename":"branch-4.3/doc/hedwigUser.textile","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigUser.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/hedwigUser.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/hedwigUser.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,63 +0,0 @@\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .        \n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-\n-h1. Design\n-\n-In Hedwig, clients publish messages associated with a topic, and they subscribe to a topic to receive all messages published with that topic. Clients are associated with (publish to and subscribe from) a Hedwig _instance_ (also referred to as a _region_), which consists of a number of servers called _hubs_. The hubs partition up topic ownership among themselves, and all publishes and subscribes to a topic must be done to its owning hub. When a client doesn't know the owning hub, it tries a default hub, which may redirect the client.\n-\n-Running a Hedwig instance requires a Zookeeper server and at least three Bookkeeper servers.\n-\n-An instance is designed to run within a datacenter. For wide-area messaging across datacenters, specify in the server configuration the set of default servers for each of the other instances. Dissemination among instances currently takes place over an all-to-all topology. Local subscriptions cause the hub to subscribe to all other regions on this topic, so that the local region receives all updates to it. Future work includes allowing the user to overlay alternative topologies.\n-\n-Because all messages on a topic go through a single hub per region, all messages within a region are ordered. This means that, for a given topic, messages are delivered in the same order to all subscribers within a region, and messages from any particular region are delivered in the same order to all subscribers globally, but messages from different regions may be delivered in different orders to different regions. Providing global ordering is prohibitively expensive in the wide area. However, in Hedwig clients such as PNUTS, the lack of global ordering is not a problem, as PNUTS serializes all updates to a table row at a single designated master for that row.\n-\n-Topics are independent; Hedwig provides no ordering across different topics.\n-\n-Version vectors are associated with each topic and serve as the identifiers for each message. Vectors consist of one component per region. A component value is the region's local sequence number on the topic, and is incremented each time a hub persists a message (published either locally or remotely) to BK.\n-\n-TODO: More on how version vectors are to be used, and on maintaining vector-maxes.\n-\n-h1. Entry Points\n-\n-The main class for running the server is @org.apache.hedwig.server.netty.PubSubServer@. It takes a single argument, which is a \"Commons Configuration\":http://commons.apache.org/configuration/ file. Currently, for configuration, the source is the documentation. See @org.apache.hedwig.server.conf.ServerConfiguration@ for server configuration parameters.\n-\n-The client is a library intended to be consumed by user applications. It takes a Commons Configuration object, for which the source/documentation is in @org.apache.hedwig.client.conf.ClientConfiguration@.\n-\n-h1. Deployment\n-\n-h2. Limits\n-\n-Because the current implementation uses a single socket per subscription, the Hedwig requires a high @ulimit@ on the number of open file descriptors. Non-root users can only use up to the limit specified in @/etc/security/limits.conf@; to raise this to 1024^2, as root, modify the &quot;nofile&quot; line in /etc/security/limits.conf on all hubs.\n-\n-h2. Running Servers\n-\n-Hedwig requires BookKeeper to run. For BookKeeper setup instructions see \"BookKeeper Getting Started\":./bookkeeperStarted.html.\n-\n-To start a Hedwig hub server:\n-\n-@hedwig-server/bin/hedwig server@\n-\n-Hedwig takes its configuration from hedwig-server/conf/hw_server.conf by default. To change location of the conf file, modify the HEDWIG_SERVER_CONF environment variable.\n-\n-h1. Debugging\n-\n-You can attach an Eclipse debugger (or any debugger) to a Java process running on a remote host, as long as it has been started with the appropriate JVM flags. (See the Building Hedwig document to set up your Eclipse environment.) To launch something using @bin/hedwig@ with debugger attachment enabled, prefix the command with @HEDWIG_EXTRA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,address=5000@, e.g.:\n-\n-@HEDWIG_EXTRA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,address=5000 hedwig-server/bin/hedwig server@\n-\n-h1. Logging\n-\n-Hedwig uses \"slf4j\":http://www.slf4j.org for logging, with the log4j bindings enabled by default. To enable logging from hedwig, create a log4j.properties file and point the environment variable HEDWIG_LOG_CONF to the file. The path to the log4j.properties file must be absolute.\n-\n-@export HEDWIG_LOG_CONF=/tmp/log4j.properties@\n-@hedwig-server/bin/hedwig server@\n-\n-"},{"sha":"ae5e08fa8d3275fd6c8908d4bb144c46c560ac7e","filename":"branch-4.3/doc/index.textile","status":"removed","additions":0,"deletions":52,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/index.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/index.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/index.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,52 +0,0 @@\n-Title:     BookKeeper Documentation\n-Notice:    Licensed to the Apache Software Foundation (ASF) under one\n-           or more contributor license agreements.  See the NOTICE file\n-           distributed with this work for additional information\n-           regarding copyright ownership.  The ASF licenses this file\n-           to you under the Apache License, Version 2.0 (the\n-           \"License\"); you may not use this file except in compliance\n-           with the License.  You may obtain a copy of the License at\n-           .\n-             http://www.apache.org/licenses/LICENSE-2.0\n-           .\n-           Unless required by applicable law or agreed to in writing,\n-           software distributed under the License is distributed on an\n-           \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-           KIND, either express or implied.  See the License for the\n-           specific language governing permissions and limitations\n-           under the License.\n-\n-h1. Apache BookKeeper documentation\n-\n-* \"Overview\":./bookkeeperOverview.html\n-* \"Getting started\":./bookkeeperStarted.html\n-* \"Programmer's Guide\":./bookkeeperProgrammer.html\n-* \"Bookie Server Configuration Parameters\":./bookieConfigParams.html\n-* \"BookKeeper Configuration Parameters\":./bookkeeperConfigParams.html\n-* \"BookKeeper Internals\":./bookkeeperInternals.html\n-* \"Bookie Recovery\":./bookieRecovery.html\n-* \"Using BookKeeper stream library\":./bookkeeperStream.html\n-* \"BookKeeper Metadata Management\":./bookkeeperMetadata.html\n-\n-h2. BookKeeper Admin & Ops\n-\n-* \"Admin Guide\":./bookkeeperConfig.html\n-* \"BookKeeper JMX\":./bookkeeperJMX.html\n-\n-h1. Apache Hedwig documentation\n-\n-* \"Building Hedwig, or how to set up Hedwig\":./hedwigBuild.html\n-* \"User's Guide, or how to program against the Hedwig API and how to run it\":./hedwigUser.html\n-* \"Developer's Guide, or Hedwig internals and hacking details\":./hedwigDesign.html\n-* \"Configuration parameters\":./hedwigParams.html\n-* \"Message Filtering\":./hedwigMessageFilter.html\n-* \"Hedwig Metadata Management\":./hedwigMetadata.html\n-\n-h2. Hedwig Admin & Ops\n-\n-* \"Hedwig Console\":./hedwigConsole.html\n-* \"Hedwig JMX\":./hedwigJMX.html\n-\n-h1. Metastore documentation\n-\n-* \"Metastore Interface\":./metastore.textile"},{"sha":"aa9d508e79e09fb42786943db41b4ee4ecb9e91a","filename":"branch-4.3/doc/metastore.textile","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/metastore.textile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/doc/metastore.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/doc/metastore.textile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,47 +0,0 @@\n-Title:        Metastore Interface\n-Notice: Licensed under the Apache License, Version 2.0 (the \"License\");\n-        you may not use this file except in compliance with the License. You may\n-        obtain a copy of the License at \"http://www.apache.org/licenses/LICENSE-2.0\":http://www.apache.org/licenses/LICENSE-2.0.\n-        .\n-        .\n-        Unless required by applicable law or agreed to in writing,\n-        software distributed under the License is distributed on an \"AS IS\"\n-        BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n-        implied. See the License for the specific language governing permissions\n-        and limitations under the License.\n-        .\n-        .\n-\n-h1. Metastore Interface\n-\n-Although Apache BookKeeper provides \"LedgerManager\":./bookkeeperMetadata.html and \"Hedwig Metadata Managers\":./hedwigMetadata.html for users to plugin different metadata storages for both BookKeeper and Hedwig, it is quite difficult to implement a correct and efficient manager version based on the knowledge for both projects. The __MetaStore__ interface extracts the commonality of the metadata storage interfaces and is provided for users to focus on adapting the underlying storage itself w/o having to worry about the detailed logic for BookKeeper and Hedwig.\n-\n-h2. MetaStore\n-\n-The __MetaStore__ interface provide users with access to __MetastoreTable__s used for BookKeeper and Hedwig metadata management. There are two kinds of table defined in a __MetaStore__, __MetastoreTable__ which provides basic __PUT__,__GET__,__REMOVE__,__SCAN__ operations and which does not assume any ordering requirements from the underlying storage; and __MetastoreScannableTable__ which is derived from __MetastoreTable__, but *does* assume that data is stored in key order in the underlying storage.\n-\n-* @getName@: Return the name of the __MetaStore__.\n-* @getVersion@: Return current __MetaStore__ plugin version.\n-* @init@: Initialize the __MetaStore__ library with the given configuration and its version.\n-* @close@: Close the __MetaStore__, freeing all resources. i.e. release all the open connections and occupied memory etc.\n-* @createTable@: Create a table instance to access the data stored in it. A table name is given to locate the table. An __MetastoreTable__ object is returned.\n-* @createScannableTable@: Similar as __createTable__, but returns __MetastoreScannableTable__ rather then __MetastoreTable__ object. If the underlying table is not an ordered table, __MetastoreException__ should be thrown.\n-\n-h2. MetaStore Table\n-\n-__MetastoreTable__ is a basic unit in a __MetaStore__, which is used to handle different types of metadata, i.e. A __MetastoreTable__ is used to store metadata for ledgers, while the other __MetastoreTable__ is used to store metadata for topic persistence info. The interface for a __MetastoreTable__ is quite simple:\n-\n-* @get@: Retrieve a entry by a given __key__. __OK__ and its current version in metadata storage is returned when succeed. __NoKey__ returned for a non-existent key. If __fields__ are specified, return only the specified fields for the key.\n-* @put@: Put the given __value__ associated with __key__ with given __version__. The value is only updated when the given __version__ equals the current version in metadata storage. A new __version__ should be returned when updated successfully. __NoKey__ is returned for a non-existent key, __BadVersion__ is returned when an update is attempted with a __version__ which does not match the one in the metadata store.\n-* @remove@: Remove the given __value__ associated with __key__. The value is only removed when the given __version__ equals its current version in metadata storage. __NoKey__ is returned for a non-existent key, __BadVersion__ is returned when remove is attempted with a __version__ which does not match.\n-* @openCursor@: Open a __cursor__ to iterate over all the entries of a table. The returned cursor doesn't need to guarantee any order and transaction.\n-\n-h2. MetaStore Scannable Table\n-\n-__MetastoreScannableTable__ is identical to a __MetastoreTable__ except that it provides an addition interface to iterate over entries in the table in key order.\n-\n-* @openCursor@: Open a __cursor__ to iterate over all the entries of a table between the key range of __firstKey__ and __lastKey__.\n-\n-h2. How to organize your metadata.\n-\n-Some metadata in Hedwig and BookKeeper does not need to be stored in the order of the ledger id or the topic. You could use kind of hash table to store metadata for them. These metadata are topic ownership and topic persistence info. Besides that, subscription state and ledger metadata must be stored in key order due to the current logic in Hedwig/BookKeeper."},{"sha":"f828df1c1e03621fdf12a4a0f27a0436c9a618ca","filename":"branch-4.3/formatter.xml","status":"removed","additions":0,"deletions":286,"changes":286,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/formatter.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/formatter.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/formatter.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,286 +0,0 @@\n-<!--\r\n-   Licensed to the Apache Software Foundation (ASF) under one or more\r\n-   contributor license agreements.  See the NOTICE file distributed with\r\n-   this work for additional information regarding copyright ownership.\r\n-   The ASF licenses this file to You under the Apache License, Version 2.0\r\n-   (the \"License\"); you may not use this file except in compliance with\r\n-   the License.  You may obtain a copy of the License at\r\n-\r\n-       http://www.apache.org/licenses/LICENSE-2.0\r\n-\r\n-   Unless required by applicable law or agreed to in writing, software\r\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\r\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n-   See the License for the specific language governing permissions and\r\n-   limitations under the License.\r\n--->\r\n-\r\n-<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n-<profiles version=\"11\">\r\n-<profile kind=\"CodeFormatterProfile\" name=\"Hedwig\" version=\"11\">\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_field\" value=\"0\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_ellipsis\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_multiple_fields\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_conditional_expression\" value=\"80\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_binary_operator\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_array_initializer\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_after_package\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.continuation_indentation\" value=\"2\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_binary_operator\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_package\" value=\"0\"/>\r\n-<setting id=\"org.eclipse.jdt.core.compiler.source\" value=\"1.5\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.format_line_comments\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.join_wrapped_lines\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_member_type\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.align_type_members_on_columns\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_unary_operator\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.indent_parameter_description\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.lineSplit\" value=\"120\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration\" value=\"0\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indentation.size\" value=\"4\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_assignment\" value=\"0\"/>\r\n-<setting id=\"org.eclipse.jdt.core.compiler.problem.assertIdentifier\" value=\"error\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.tabulation.char\" value=\"space\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_body\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_method\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_switch\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.compiler.problem.enumIdentifier\" value=\"error\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_ellipsis\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_block\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_method_declaration\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.compact_else_if\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_enum_constant\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.indent_root_tags\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.tabulation.size\" value=\"4\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_empty_lines\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_block_in_case\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.compiler.compliance\" value=\"1.5\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer\" value=\"2\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_unary_operator\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_binary_expression\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode\" value=\"enabled\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.format_javadoc_comments\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.line_length\" value=\"80\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_between_import_groups\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body\" value=\"0\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.wrap_before_binary_operator\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_statements_compare_to_block\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.join_lines_in_comments\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_compact_if\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_before_imports\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.format_html\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.format_source_code\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration\" value=\"16\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.compiler.codegen.targetPlatform\" value=\"1.5\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.format_header\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.comment.format_block_comments\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.alignment_for_enum_constants\" value=\"0\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.brace_position_for_type_declaration\" value=\"end_of_line\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.blank_lines_after_imports\" value=\"1\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header\" value=\"true\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for\" value=\"insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments\" value=\"do not insert\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column\" value=\"false\"/>\r\n-<setting id=\"org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line\" value=\"false\"/>\r\n-</profile>\r\n-</profiles>\r"},{"sha":"97ee5e3a5abb0901dce6493983ebebe938129445","filename":"branch-4.3/hedwig-client-jms/pom.xml","status":"removed","additions":0,"deletions":301,"changes":301,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,301 +0,0 @@\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-\n-<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n-         xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n-  <modelVersion>4.0.0</modelVersion>\n-  <parent>\n-    <groupId>org.apache.bookkeeper</groupId>\n-    <artifactId>bookkeeper</artifactId>\n-    <version>4.3.0</version>\n-  </parent>\n-  <groupId>org.apache.bookkeeper</groupId>\n-  <artifactId>hedwig-client-jms</artifactId>\n-  <name>hedwig-client-jms</name>\n-  <url>http://maven.apache.org</url>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>com.google.protobuf</groupId>\n-      <artifactId>protobuf-java</artifactId>\n-      <version>2.4.1</version>\n-      <scope>compile</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>junit</groupId>\n-      <artifactId>junit</artifactId>\n-      <version>4.8.1</version>\n-      <scope>test</scope>\n-    </dependency>\n-    <!-- As suggested by Matthieu - Using geronimo-spec-jms instead of ver=1.1, groupId=java.jms, artifcatId=jms -->\n-    <dependency>\n-      <groupId>geronimo-spec</groupId>\n-      <artifactId>geronimo-spec-jms</artifactId>\n-      <version>1.1-rc4</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>hedwig-client</artifactId>\n-      <version>${project.parent.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>hedwig-protocol</artifactId>\n-      <version>${project.parent.version}</version>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>bookkeeper-server</artifactId>\n-      <version>${project.parent.version}</version>\n-      <scope>test</scope>\n-      <type>test-jar</type>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>hedwig-server</artifactId>\n-      <version>${project.parent.version}</version>\n-      <scope>test</scope>\n-      <type>test-jar</type>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>hedwig-server</artifactId>\n-      <version>${project.parent.version}</version>\n-      <scope>test</scope>\n-      <type>jar</type>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.bookkeeper</groupId>\n-      <artifactId>bookkeeper-server</artifactId>\n-      <version>${project.parent.version}</version>\n-      <scope>test</scope>\n-      <type>jar</type>\n-    </dependency>\n-    <dependency>\n-      <groupId>org.apache.zookeeper</groupId>\n-      <artifactId>zookeeper</artifactId>\n-      <version>${zookeeper.version}</version>\n-      <type>test-jar</type>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-      <groupId>log4j</groupId>\n-      <artifactId>log4j</artifactId>\n-      <version>1.2.15</version>\n-      <scope>provided</scope>\n-      <exclusions>\n-        <exclusion>\n-          <groupId>javax.mail</groupId>\n-          <artifactId>mail</artifactId>\n-        </exclusion>\n-        <exclusion>\n-          <groupId>javax.jms</groupId>\n-          <artifactId>jms</artifactId>\n-        </exclusion>\n-        <exclusion>\n-          <groupId>com.sun.jdmk</groupId>\n-          <artifactId>jmxtools</artifactId>\n-        </exclusion>\n-        <exclusion>\n-          <groupId>com.sun.jmx</groupId>\n-          <artifactId>jmxri</artifactId>\n-        </exclusion>\n-      </exclusions>\n-    </dependency>\n-  </dependencies>\n-\n-  <build>\n-    <testResources>\n-      <testResource>\n-        <directory>src/test/resources</directory>\n-        <includes>\n-          <include>log4j.properties</include>\n-        </includes>\n-      </testResource>\n-    </testResources>\n-    <plugins>\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>javacc-maven-plugin</artifactId>\n-        <version>2.6</version>\n-        <executions>\n-          <execution>\n-            <id>jjtree-javacc</id>\n-            <goals>\n-              <goal>jjtree-javacc</goal>\n-            </goals>\n-            <configuration>\n-              <sourceDirectory>${basedir}/src/main/grammar/javacc</sourceDirectory>\n-              <packageName>org.apache.hedwig.jms.selector</packageName>\n-            </configuration>\n-            <phase>generate-sources</phase>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-surefire-plugin</artifactId>\n-        <version>2.9</version>\n-        <configuration>\n-          <!-- Skip the default running of this plug-in (or everything is run twice...see below) -->\n-          <skip>true</skip>\n-          <!-- Show 100% of the lines from the stack trace (doesn't work ?) -->\n-          <trimStackTrace>false</trimStackTrace>\n-          <systemProperties>\n-            <property>\n-              <name>log4j.configuration</name>\n-              <value>log4j.properties</value>\n-            </property>\n-            <property>\n-              <name>java.net.preferIPv4Stack</name>\n-              <value>true</value>\n-            </property>\n-            <property>\n-              <name>com.sun.management.jmxremote</name>\n-              <value>true</value>\n-            </property>\n-            <property>\n-              <name>com.sun.management.jmxremote.local.only</name>\n-              <value>true</value>\n-            </property>\n-            <property>\n-              <name>com.sun.management.jmxremote.ssl</name>\n-              <value>false</value>\n-            </property>\n-            <property>\n-              <name>com.sun.management.jmxremote.authenticate</name>\n-              <value>false</value>\n-            </property>\n-            <property>\n-              <name>java.rmi.server.hostname</name>\n-              <value>localhost</value>\n-            </property>\n-            <!--\n-                <property>\n-                <name>com.sun.management.jmxremote.port</name>\n-                <value>39999</value>\n-                </property>\n-            -->\n-          </systemProperties>\n-          <!-- <forkMode>always</forkMode> -->\n-          <forkMode>pertest</forkMode>\n-          <argLine>-Xmx1G</argLine>\n-        </configuration>\n-\n-        <executions>\n-          <execution>\n-            <id>unit-tests</id>\n-            <phase>test</phase>\n-            <goals>\n-              <goal>test</goal>\n-            </goals>\n-            <configuration>\n-              <skip>false</skip>\n-              <!-- run everything other than activemq testcases -->\n-              <excludes>\n-                <exclude>org/apache/activemq/**/Test*.java</exclude>\n-                <exclude>org/apache/activemq/**/*Test.java</exclude>\n-                <exclude>org/apache/activemq/**/*TestCase.java</exclude>\n-              </excludes>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n-      <plugin>\n-        <groupId>org.apache.rat</groupId>\n-        <artifactId>apache-rat-plugin</artifactId>\n-        <version>0.7</version>\n-        <configuration>\n-          <excludes>\n-            <!-- exclude generated file //-->\n-            <exclude>**/JmsHeader.java</exclude>\n-          </excludes>\n-        </configuration>\n-      </plugin>\n-\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>findbugs-maven-plugin</artifactId>\n-        <configuration>\n-          <excludeFilterFile>${basedir}/src/main/resources/findbugsExclude.xml</excludeFilterFile>\n-        </configuration>\n-      </plugin>\n-\n-    </plugins>\n-  </build>\n-  <profiles>\n-    <profile>\n-      <id>protobuf</id>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <artifactId>maven-antrun-plugin</artifactId>\n-            <executions>\n-              <execution>\n-                <phase>generate-sources</phase>\n-                <id>default-cli</id>\n-                <configuration>\n-                  <target>\n-                    <exec executable=\"protoc\" failonerror=\"true\">\n-                      <arg value=\"--java_out=src/main/java\" />\n-                      <arg value=\"src/main/protobuf/JmsHeader.proto\" />\n-                    </exec>\n-                  </target>\n-                </configuration>\n-                <goals>\n-                  <goal>run</goal>\n-                </goals>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-    <profile>\n-      <id>activemqtests</id>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <groupId>org.apache.maven.plugins</groupId>\n-            <artifactId>maven-surefire-plugin</artifactId>\n-            <version>2.9</version>\n-            <executions>\n-              <execution>\n-                <id>integration-tests</id>\n-                <phase>test</phase>\n-                <goals>\n-                  <goal>test</goal>\n-                </goals>\n-                <configuration>\n-                  <skip>false</skip>\n-                  <includes>\n-                    <!-- run the activemq testcases -->\n-                    <include>org/apache/activemq/**/Test*.java</include>\n-                    <include>org/apache/activemq/**/*Test.java</include>\n-                    <include>org/apache/activemq/**/*TestCase.java</include>\n-                  </includes>\n-                </configuration>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n-    </profile>\n-  </profiles>\n-</project>"},{"sha":"b118681733b0d7a33883b614d6687aae70802874","filename":"branch-4.3/hedwig-client-jms/src/main/grammar/javacc/readme.html","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/grammar/javacc/readme.html","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/grammar/javacc/readme.html","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/grammar/javacc/readme.html?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,26 +0,0 @@\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-\n-\n-Contains the grammar to define and support selectors in our JMS provider. <br/>\n-Maven handles generation of the code based on this, and the JMS provider code has rest of the\n-implementation which depends on this generated code to implement selectors in our provider.<br/>\n-Please refer to <a href=\"../../java/org/apache/hedwig/jms/selector/package-info.html\">\n-../../java/org/apache/hedwig/jms/selector/package-info.html</a> for more information. <br/>\n-\n-<p/>\n-Based loosely off java and sql grammar from javacc."},{"sha":"a141b8b51338f06569618c6b3b6bf27155c56b2c","filename":"branch-4.3/hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt","status":"removed","additions":0,"deletions":689,"changes":689,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/grammar/javacc/selector_grammar.jjt?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,689 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-/* This is based on the Java1.0.2.jj grammar */\n-\n-options {\n-  MULTI=true;\n-  // JAVA_UNICODE_ESCAPE = true;\n-  // LOOKAHEAD = 1;\n-  FORCE_LA_CHECK = false;\n-  NODE_EXTENDS=\"MyNode\";\n-  VISITOR = true;\n-  STATIC = false;\n-  VISITOR_DATA_TYPE = \"SelectorEvalState\";\n-  VISITOR_EXCEPTION = \"SelectorEvaluationException\";\n-\n-/*\n-  DEBUG_PARSER = true ;\n-  DEBUG_LOOKAHEAD = true ;\n-  DEBUG_TOKEN_MANAGER = true ;\n-  */\n-}\n-\n-PARSER_BEGIN(SelectorParser)\n-\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-\n-import org.apache.hedwig.jms.SessionImpl;\n-import org.apache.hedwig.jms.message.MessageImpl;\n-import org.apache.hedwig.jms.message.TextMessageImpl;\n-\n-import java.io.StringReader;\n-import java.util.Set;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.LinkedHashMap;\n-\n-\n-public class SelectorParser {\n-\n-  // It contains no state (as of now).\n-  private static final InterpretSelectorParserVisitor interpreter = new InterpretSelectorParserVisitor();\n-  private static final TreeDumperSelectorParserVisitor treeDumper = new TreeDumperSelectorParserVisitor();\n-\n-  public static Boolean evaluateSelector(final Node ast, final MessageImpl message) {\n-  if (MyNode.logger.isTraceEnabled()) {\n-      MyNode.logger.trace(\"--- Dump AST START ---\");\n-      try {\n-        ast.jjtAccept(treeDumper, new SelectorEvalState(null));\n-      } catch (SelectorEvaluationException e) {\n-        MyNode.logger.trace(\"Unable to run debug visitor \" + message + \", exception : \" + e + \" ... ignoring.\", e);\n-      }\n-      MyNode.logger.trace(\"--- Dump AST DONE---\");\n-    }\n-    final SelectorEvalState data = new SelectorEvalState(message);\n-    try {\n-        ast.jjtAccept(interpreter, data);\n-        if (1 != data.getStack().size() ||\n-                SelectorConstant.SelectorDataType.BOOLEAN != data.getStack().peek().type){\n-            if (MyNode.logger.isDebugEnabled())\n-                MyNode.logger.debug(\"Expected only a single boolean in stack, obtained : \" + data.getStack());\n-            return null;\n-        }\n-        return data.getStack().peek().getBoolValue();\n-    } catch (SelectorEvaluationException e) {\n-        if (MyNode.logger.isDebugEnabled())\n-            MyNode.logger.debug(\"Unable to run interpreter on \" + message + \", exception : \"\n-                                + e + \" ... ignoring message\", e);\n-        return null;\n-    }\n-  }\n-\n-  private static final int CACHED_AST_SIZE = Integer.getInteger(\"CACHED_AST_SIZE\", 128);\n-  private static final LinkedHashMap<String, Node> parsedSelectorCache\n-       = new LinkedHashMap<String, Node>(CACHED_AST_SIZE, 0.75f, true){\n-    @Override\n-    protected boolean removeEldestEntry(Map.Entry<String, Node> eldest) {\n-      return size() > CACHED_AST_SIZE;\n-    }\n-  };\n-\n-  public static Node parseMessageSelector(String messageSelector) throws ParseException {\n-    if (MyNode.logger.isTraceEnabled()) {\n-      MyNode.logger.trace(\"Parse '\" + messageSelector + \"'\");\n-    }\n-    synchronized (parsedSelectorCache){\n-      if (parsedSelectorCache.containsKey(messageSelector)) return parsedSelectorCache.get(messageSelector);\n-    }\n-    Node retval = null;\n-    try {\n-      SelectorParser parser = new SelectorParser(new StringReader(messageSelector));\n-      parser.Expression();\n-      retval = parser.jjtree.rootNode();\n-      return retval;\n-    } catch (TokenMgrError rmErr){\n-      // It throws an error ! seriously ? ... sigh !\n-      if (MyNode.logger.isDebugEnabled()) {\n-        MyNode.logger.debug(\"Unable to parse selector expression - recieved error \", rmErr);\n-      }\n-      throw new ParseException(rmErr.toString());\n-    } finally {\n-        synchronized (parsedSelectorCache){\n-          parsedSelectorCache.put(messageSelector, retval);\n-        }\n-    }\n-  }\n-\n-  public static void main(String[] args) throws ParseException, SelectorEvaluationException  {\n-      MessageImpl message = new TextMessageImpl(null, \"test\");\n-      SelectorEvalState data = new SelectorEvalState(message);\n-      SelectorParserVisitor visitor = new InterpretSelectorParserVisitor();\n-      for (String arg : args){\n-          Node node = parseMessageSelector(arg);\n-          node.jjtAccept(visitor, data);\n-\n-          if (1 != data.getStack().size()){\n-            throw new IllegalArgumentException(\"Invalid proposition '\" + arg\n-                                               + \"'. Unexpected result stack : \" + data.getStack());\n-          }\n-          else System.out.println(\"Result : \" + data.getStack().peek());\n-      }\n-  }\n-\n-  private String unescapeSingleQuotes(String str){\n-    final int len = str.length();\n-    final StringBuilder retval = new StringBuilder();\n-\n-    int offset = 0;\n-    while (true){\n-      int indx = str.indexOf('\\'', offset);\n-      if (-1 == indx) break;\n-      if (indx + 1 >= len) break;\n-\n-      retval.append(str.substring(offset, indx + 1));\n-      offset = indx + 1;\n-      if ('\\'' == str.charAt(indx + 1)) offset ++;\n-    }\n-    if (offset < len) retval.append(str.substring(offset));\n-    return retval.toString();\n-  }\n-\n-  public String parseString(final Token token, boolean canBeNull) throws ParseException{\n-    if (canBeNull && null == token) return null;\n-\n-    final String str = token.image;\n-    final int len = str.length();\n-    if (len >= 2 && '\\'' == str.charAt(0) && '\\'' == str.charAt(len - 1)){\n-      String tstr = str.substring(1, len - 1);\n-      tstr = unescapeSingleQuotes(tstr);\n-      return tstr;\n-    }\n-    if (!\"''\".equals(str)) throw new ParseException(\"Unexpected string : \" + str);\n-    return \"\";\n-  }\n-\n-  public String parseString(final Token token) throws ParseException{\n-    return parseString(token, false);\n-  }\n-\n-  public String parseIdentifier(Token identifier) throws ParseException{\n-    // nothing to parse actually ...\n-    final String identifierName = identifier.image;\n-    if (\"null\".equalsIgnoreCase(identifierName) ||\n-          \"true\".equalsIgnoreCase(identifierName) ||\n-          \"false\".equalsIgnoreCase(identifierName)){\n-      throw new ParseException(\"Invalid identifier name : \" + identifierName);\n-    }\n-\n-    if (\"NOT\".equalsIgnoreCase(identifierName) ||\n-          \"AND\".equalsIgnoreCase(identifierName) ||\n-          \"OR\".equalsIgnoreCase(identifierName) ||\n-          \"BETWEEN\".equalsIgnoreCase(identifierName) ||\n-          \"LIKE\".equalsIgnoreCase(identifierName) ||\n-          \"IN\".equalsIgnoreCase(identifierName) ||\n-          \"IS\".equalsIgnoreCase(identifierName) ||\n-          \"ESCAPE\".equalsIgnoreCase(identifierName)){\n-      throw new ParseException(\"Invalid identifier name : \" + identifierName);\n-    }\n-\n-    return identifierName;\n-  }\n-}\n-\n-\n-PARSER_END(SelectorParser)\n-\n-SKIP : /* WHITE SPACE */\n-{\n-  \" \"\n-| \"\\t\"\n-| \"\\n\"\n-| \"\\r\"\n-| \"\\f\"\n-}\n-\n-/*\n-SKIP :\n-{\n-  \" \"\n-| \"\\t\"\n-| \"\\f\"\n-}\n-*/\n-\n-// As per 3.8.1.3 Special Notes, I SHOULD NOT be supporting SQL comments ... but what the heck :-)\n-/* COMMENTS */\n-/*\n-SKIP:\n-{\n-  <SINGLE_LINE_COMMENT: \"--\" (~[\"\\n\",\"\\r\"])* (\"\\n\"|\"\\r\"|\"\\r\\n\")>\n-| <MULTI_LINE_COMMENT: \"/*\" (~[\"*\"])* \"*\" (\"*\" | (~[\"*\",\"/\"] (~[\"*\"])* \"*\"))* \"/\">\n-}\n-*/\n-\n-TOKEN : /* SEPARATORS */\n-{\n-  < LPAREN: \"(\" >\n-| < RPAREN: \")\" >\n-}\n-\n-TOKEN : /* OPERATORS */\n-{\n-  < EQ: \"=\" >\n-| < GT: \">\" >\n-| < LT: \"<\" >\n-| < LE: \"<=\" >\n-| < GE: \">=\" >\n-| < NE: \"<>\" >\n-\n-| < PLUS: \"+\" >\n-| < MINUS: \"-\" >\n-| < STAR: \"*\" >\n-| < SLASH: \"/\" >\n-| < COMMA: \",\" >\n-}\n-\n-TOKEN[IGNORE_CASE] :\n-{\n-\n-  < NULL : \"NULL\" >\n-\n-| < NOT : \"NOT\" >\n-| < AND : \"AND\" >\n-| < OR : \"OR\" >\n-\n-| < BETWEEN : \"BETWEEN\" >\n-| < LIKE : \"LIKE\" >\n-| < IN : \"IN\" >\n-| < IS : \"IS\" >\n-| < ESCAPE : \"ESCAPE\" >\n-}\n-\n-\n-\n-TOKEN[IGNORE_CASE] : /* Boolean literal - case-insensitive */\n-{\n-  < BOOLEAN_LITERAL: \"true\" | \"false\" >\n-}\n-\n-\n-TOKEN : /* IDENTIFIER */\n-{\n-  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >\n-|\n-  < #LETTER:\n-      [\n-       \"\\u0024\",\n-       \"\\u0041\"-\"\\u005a\",\n-       \"\\u005f\",\n-       \"\\u0061\"-\"\\u007a\",\n-       \"\\u00c0\"-\"\\u00d6\",\n-       \"\\u00d8\"-\"\\u00f6\",\n-       \"\\u00f8\"-\"\\u00ff\",\n-       \"\\u0100\"-\"\\u1fff\",\n-       \"\\u3040\"-\"\\u318f\",\n-       \"\\u3300\"-\"\\u337f\",\n-       \"\\u3400\"-\"\\u3d2d\",\n-       \"\\u4e00\"-\"\\u9fff\",\n-       \"\\uf900\"-\"\\ufaff\"\n-      ]\n-  >\n-|\n-  < #DIGIT:\n-      [\n-       \"\\u0030\"-\"\\u0039\",\n-       \"\\u0660\"-\"\\u0669\",\n-       \"\\u06f0\"-\"\\u06f9\",\n-       \"\\u0966\"-\"\\u096f\",\n-       \"\\u09e6\"-\"\\u09ef\",\n-       \"\\u0a66\"-\"\\u0a6f\",\n-       \"\\u0ae6\"-\"\\u0aef\",\n-       \"\\u0b66\"-\"\\u0b6f\",\n-       \"\\u0be7\"-\"\\u0bef\",\n-       \"\\u0c66\"-\"\\u0c6f\",\n-       \"\\u0ce6\"-\"\\u0cef\",\n-       \"\\u0d66\"-\"\\u0d6f\",\n-       \"\\u0e50\"-\"\\u0e59\",\n-       \"\\u0ed0\"-\"\\u0ed9\",\n-       \"\\u1040\"-\"\\u1049\"\n-      ]\n-  >\n-}\n-\n-\n-TOKEN : /* LITERALS */\n-{\n-  < FLOATING_POINT_LITERAL:\n-    // ([\"+\",\"-\"])?\n-      (\n-        ([\"0\"-\"9\"])+ \".\" ([\"0\"-\"9\"])* (<EXPONENT>)? ([\"f\",\"F\",\"d\",\"D\"])?\n-      | \".\" ([\"0\"-\"9\"])+ (<EXPONENT>)? ([\"f\",\"F\",\"d\",\"D\"])?\n-      | ([\"0\"-\"9\"])+ <EXPONENT> ([\"f\",\"F\",\"d\",\"D\"])?\n-      | ([\"0\"-\"9\"])+ (<EXPONENT>)? [\"f\",\"F\",\"d\",\"D\"]\n-      )\n-  >\n-|\n-  < #EXPONENT: [\"e\",\"E\"] ([\"+\",\"-\"])? ([\"0\"-\"9\"])+ >\n-|\n-  // Scrapping the earlier more complicated definition of string listern.\n-  // This is not required on second thoughts - a simpler definition will suffice.\n-   < STRING_LITERAL: \"'\" (~[\"'\"])* \"'\" (\"'\" (~[\"'\"])* \"'\")*>\n-  |\n-  < INTEGER_LITERAL: // ([\"+\",\"-\"])?\n-    [\"0\"-\"9\"] ([\"0\"-\"9\"])* >\n-}\n-\n-\n-\n-\n-void Expression () #void : {}\n-{\n-  ExpressionChoice()\n-  <EOF>\n-}\n-\n-void ExpressionChoice() #void : {}\n-{\n-  LOOKAHEAD(OrLogicalTerm())\n-  OrLogicalTerm() |\n-\n-  AndLogicalTermChoice()\n-}\n-\n-void OrLogicalTerm () #void : {}\n-{\n-  AndLogicalTermChoice() (\n-    ( ( <OR> AndLogicalTermChoice() )\n-      {\n-        jjtThis.setExprFunction(LogicalComparisonFunction.OR_FUNCTION);\n-      }\n-    ) #OrExpr(2)\n-  ) +\n-}\n-\n-void AndLogicalTermChoice() #void : {}\n-{\n-  LOOKAHEAD(AndLogicalTerm())\n-  AndLogicalTerm() |\n-\n-  NotLogicalTermChoice()\n-}\n-\n-void AndLogicalTerm () #void : {}\n-{\n-  NotLogicalTermChoice() (\n-    ( ( <AND> NotLogicalTermChoice() )\n-      {\n-        jjtThis.setExprFunction(LogicalComparisonFunction.AND_FUNCTION);\n-      }\n-    ) #AndExpr(2)\n-  ) +\n-}\n-\n-void NotLogicalTermChoice() #void : {}\n-{\n-  LOOKAHEAD(NotLogicalTerm())\n-  NotLogicalTerm() |\n-\n-  RelationTermChoice()\n-}\n-\n-void NotLogicalTerm () #void : {}\n-{\n-  ( ( <NOT> RelationTermChoice() )\n-    {\n-      jjtThis.setExprFunction(UnaryExprFunction.NOT_FUNCTION);\n-    }\n-  ) #NotExpr(1)\n-}\n-\n-void RelationTermChoice () #void : {}\n-{\n-  LOOKAHEAD(RelationTermOptions())\n-  RelationTermOptions() |\n-\n-  ArithmeticTermChoice()\n-}\n-\n-void RelationTermOptions() #void : {}\n-{\n-\n-  ArithmeticTermChoice()\n-\n-  (\n-    ( ( <GT> ArithmeticTermChoice() )\n-      {\n-        jjtThis.setExprFunction(ValueComparisonFunction.GREATER_THAN_FUNCTION);\n-      }\n-    ) #GreaterThan(2) |\n-\n-    ( ( <LT> ArithmeticTermChoice() )\n-      {\n-        jjtThis.setExprFunction(ValueComparisonFunction.LESS_THAN_FUNCTION);\n-      }\n-    ) #LessThan(2) |\n-\n-    ( ( <LE> ArithmeticTermChoice() )\n-      {\n-        jjtThis.setExprFunction(ValueComparisonFunction.LESS_THAN_EQUAL_TO_FUNCTION);\n-      }\n-    ) #LessThanEqualTo(2) |\n-\n-    ( ( <GE> ArithmeticTermChoice() )\n-      {\n-        jjtThis.setExprFunction(ValueComparisonFunction.GREATER_THAN_EQUAL_TO_FUNCTION);\n-      }\n-    ) #GreaterThanEqualTo(2) |\n-\n-    ( ( <EQ> ArithmeticTermChoice() )\n-      {\n-        jjtThis.setExprFunction(ValueComparisonFunction.EQUAL_TO_FUNCTION);\n-      }\n-    ) #EqualTo(2) |\n-\n-    ( ( <NE> ArithmeticTermChoice() )\n-      {\n-        jjtThis.setExprFunction(ValueComparisonFunction.NOT_EQUAL_TO_FUNCTION);\n-      }\n-    ) #NotEqualTo(2) |\n-\n-\n-    LOOKAHEAD(IsNullTerm())\n-    // LOOKAHEAD(2)\n-    IsNullTerm() |\n-\n-    LOOKAHEAD(BetweenTerm())\n-    // LOOKAHEAD(2)\n-    BetweenTerm() |\n-\n-    LOOKAHEAD(InTerm())\n-    // LOOKAHEAD(2)\n-    InTerm() |\n-\n-    LOOKAHEAD(LikeTerm())\n-    // LOOKAHEAD(2)\n-    LikeTerm()\n-  )\n-\n-}\n-\n-\n-\n-void IsNullTerm() #void : {\n-  Token notToken = null;\n-}\n-{\n-  ( ( <IS> ( notToken=<NOT> )? <NULL> )\n-    {\n-      jjtThis.setExprFunction(new PropertyExprFunction.IsNullExpr(null != notToken));\n-    } ) #IsNullExpr(1)\n-}\n-\n-\n-void BetweenTerm() #void : {\n-  Token notToken = null;\n-}\n-{\n-\n-  ( ( ( notToken=<NOT> )? <BETWEEN> ArithmeticTermChoice() <AND> ArithmeticTermChoice() )\n-  {\n-    jjtThis.setExprFunction(new PropertyExprFunction.BetweenExpr(null != notToken));\n-  } ) #BetweenExpr(3)\n-}\n-\n-\n-void InTerm() #void : {\n-  Token notToken = null;\n-}\n-{\n-  ( ( ( notToken=<NOT> )? <IN> <LPAREN> StringVarargParams() <RPAREN> )\n-  {\n-      jjtThis.setExprFunction(new PropertyExprFunction.InExpr(null != notToken));\n-  } ) #InExpr(2)\n-}\n-\n-void LikeTerm() #void : {\n-  Token notToken = null;\n-  Token likePattern = null;\n-  Token escapeCharacter = null;\n-}\n-{\n-  ( ( ( notToken=<NOT> )? <LIKE> likePattern=<STRING_LITERAL> ( <ESCAPE> escapeCharacter=<STRING_LITERAL> )? )\n-  {\n-    jjtThis.setExprFunction(new PropertyExprFunction.LikeExpr(\n-      parseString(likePattern),\n-      parseString(escapeCharacter, true),\n-      null != notToken));\n-  } ) #LikeExpr(1)\n-}\n-\n-\n-\n-\n-\n-void ArithmeticTermChoice () #void : {}\n-{\n-  LOOKAHEAD(AddTerm())\n-  AddTerm() |\n-\n-  MultTermChoice()\n-}\n-\n-void AddTerm () #void : {}\n-{\n-\n-  MultTermChoice() (\n-     ( (<PLUS> MultTermChoice() )\n-       {\n-         jjtThis.setExprFunction(BinaryArithmeticFunction.ADD_FUNCTION);\n-       }\n-     ) #AddExpr(2) |\n-\n-     ( (<MINUS> MultTermChoice() )\n-       {\n-         jjtThis.setExprFunction(BinaryArithmeticFunction.SUB_FUNCTION);\n-       }\n-     ) #SubExpr(2)\n-  ) +\n-}\n-\n-void MultTermChoice() #void : {}\n-{\n-  LOOKAHEAD(MultTerm())\n-  MultTerm() |\n-\n-  UnaryUnitChoice()\n-}\n-\n-void MultTerm() #void : {}\n-{\n-  UnaryUnitChoice() (\n-     ( ( <SLASH> UnaryUnitChoice() )\n-       {\n-         jjtThis.setExprFunction(BinaryArithmeticFunction.DIVIDE_FUNCTION);\n-       }\n-     ) #DivideExpr(2) |\n-\n-     ( ( <STAR> UnaryUnitChoice() )\n-     {\n-       jjtThis.setExprFunction(BinaryArithmeticFunction.MULTIPLY_FUNCTION);\n-     }\n-    ) #MultiplyExpr(2)\n-  ) +\n-}\n-\n-\n-void UnaryUnitChoice() #void : {}\n-{\n-  LOOKAHEAD(UnaryUnit())\n-  UnaryUnit() |\n-\n-  BasicUnit()\n-}\n-\n-void UnaryUnit() #void : {}\n-{\n-  LOOKAHEAD( <MINUS> BasicUnit() )\n-  ( ( <MINUS> BasicUnit() )\n-    {\n-      jjtThis.setExprFunction(UnaryArithmeticFunction.NEGATE_FUNCTION);\n-    }\n-  ) #NegateExpr(1) |\n-\n-  // Ignore if + value.\n-  LOOKAHEAD( <PLUS> BasicUnit() )\n-  ( ( <PLUS> BasicUnit() )\n-    {\n-      // noop\n-    }\n-  )\n-}\n-\n-void BasicUnit() #void :  {\n-  Token identifier = null;\n-}\n-{\n-  // An expression within braces for grouping\n-\n-  // LOOKAHEAD(<LPAREN> ExpressionChoice() <RPAREN>)\n-  (<LPAREN> ExpressionChoice() <RPAREN>) |\n-\n-  // LOOKAHEAD(Constant())\n-  Constant() |\n-\n-  // LOOKAHEAD(<IDENTIFIER>)\n-  ( ( identifier=<IDENTIFIER> )\n-  {\n-    jjtThis.setExprFunction(new PropertyExprFunction.LookupExpr(parseIdentifier(identifier)));\n-  } ) #LookupExpr(0)\n-}\n-\n-\n-\n-void Constant() : {\n-  Token bt, it, ft;\n-  Token st;\n-}\n-{\n-  bt=<BOOLEAN_LITERAL>\n-  {\n-    jjtThis.setConstantValue(new SelectorConstant(Boolean.parseBoolean(bt.image.toLowerCase())));\n-  } |\n-  ft=<FLOATING_POINT_LITERAL>\n-  {\n-    jjtThis.setConstantValue(new SelectorConstant(Double.parseDouble(ft.image)));\n-  }\n-  |\n-  st=<STRING_LITERAL>\n-  {\n-    jjtThis.setConstantValue(new SelectorConstant(parseString(st)));\n-  } |\n-  it=<INTEGER_LITERAL>\n-  {\n-    jjtThis.setConstantValue(new SelectorConstant(Integer.parseInt(it.image)));\n-  }\n-}\n-\n-\n-void StringVarargParams() : {\n-  Token st;\n-}\n-{\n-  st=<STRING_LITERAL>\n-  {\n-    Set<String> set = new HashSet<String>(4);\n-    set.add(parseString(st));\n-    jjtThis.setConstantValue(new SelectorConstant(set));\n-  }\n-\n-  ( ( <COMMA> st=<STRING_LITERAL> )\n-  {\n-    jjtThis.addToStringSet(parseString(st));\n-  }\n-  )*\n-\n-}"},{"sha":"1a77fcfeec29a5780c758a7e49a1440070b15cfd","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java","status":"removed","additions":0,"deletions":476,"changes":476,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,476 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.jms.Connection;\n-import javax.jms.ConnectionConsumer;\n-import javax.jms.ConnectionMetaData;\n-import javax.jms.Destination;\n-import javax.jms.ExceptionListener;\n-import javax.jms.InvalidClientIDException;\n-import javax.jms.JMSException;\n-import javax.jms.Queue;\n-import javax.jms.QueueConnection;\n-import javax.jms.ServerSessionPool;\n-import javax.jms.Topic;\n-import javax.jms.TopicConnection;\n-import java.util.ArrayList;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-\n-/**\n- * Implementation of jmx Connection\n- * MUST be MT-safe (2.8)\n- */\n-public abstract class ConnectionImpl implements Connection, TopicConnection, QueueConnection {\n-\n-    private static final Logger logger = LoggerFactory.getLogger(ConnectionImpl.class);\n-\n-    // Copied from old HedwigConnectoin\n-    // TODO move to a constants class?\n-    public static final String HEDWIG_CLIENT_CONFIG_FILE = \"hedwig.client.config.file\";\n-    private static final Set<String> globalClientIdSet = new HashSet<String>(16);\n-\n-    private final String user;\n-    private final String password;\n-\n-    // Will be set to a random string if unspecified - we do not have a way (currently) for admin\n-    // specified value ...\n-    // Note, using the system property means\n-    // private String clientID = System.getProperty(\"HEDWIG_CLIENT_ID\", null);\n-    private volatile String clientID = null;\n-\n-    // I do not like locking on 'this' inspite of the perf diff - allows 'others' to lock on our\n-    // lock object (client code for example) : leaks MT-safety.\n-    private final Object lockObject = new Object();\n-\n-    // Call this when there are issues (primarily connection issues imo).\n-    // There are two issues with supporting this :\n-    // a) we do not follow jms model of connection -> multiple sessions; for us, connection does not\n-    // represent underlying connection to\n-    // hedwig, but session does. So the basic model does not fit.\n-    // b) from what I see, hedwig-client does not expose the ability to do this. (it automatically reconnects)\n-    // hence we do not support this yet.\n-    private volatile ExceptionListener exceptionListener;\n-\n-    // connection 'starts' in stopped mode.\n-    // Until it is started, NO messages MUST be delivered - 4.3.3\n-    private StateManager connectionState = new StateManager(StateManager.State.STOPPED, lockObject);\n-\n-    private final List<SessionImpl> sessionList = new ArrayList<SessionImpl>(4);\n-    private final ConnectionMetaData metadata = new ConnectionMetaDataImpl();\n-\n-    protected ConnectionImpl() {\n-        this.user = null;\n-        this.password = null;\n-    }\n-\n-    protected ConnectionImpl(String user, String password) {\n-        this.user = user;\n-        this.password = password;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public SessionImpl createSession(boolean transacted, int acknowledgeMode)  throws JMSException {\n-        return createSessionImpl(transacted, acknowledgeMode, null);\n-    }\n-\n-    protected SessionImpl createSessionImpl(boolean transacted, int acknowledgeMode,\n-                                            MessagingSessionFacade.DestinationType type)  throws JMSException {\n-        final boolean needStart;\n-        synchronized (lockObject){\n-            if (connectionState.isInCloseMode())\n-              throw new javax.jms.IllegalStateException(\"Connection closed\");\n-            if (connectionState.isTransitionState()) {\n-                connectionState.waitForTransientStateChange(StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE, logger);\n-                // Not expected actually, present to guard against future changes ...\n-                if (connectionState.isTransitionState())\n-                  throw new JMSException(\"Connection did not make state change to steady state ?\");\n-\n-                if (connectionState.isClosed()) throw new JMSException(\"Connection already closed\");\n-\n-            }\n-\n-            assert StateManager.State.STOPPED == connectionState.getCurrentState() ||\n-                    StateManager.State.STARTED == connectionState.getCurrentState();\n-\n-            // create within lock, so that it can register with connection, etc ...\n-            // session = new SessionImpl(this, transacted, acknowledgeMode);\n-            final SessionImpl session = createSessionInstance(transacted, acknowledgeMode, type);\n-            sessionList.add(session);\n-            needStart = connectionState.isStarted();\n-\n-            if (needStart) session.start();\n-            return session;\n-        }\n-    }\n-\n-    protected abstract SessionImpl createSessionInstance(boolean transacted, int acknowledgeMode,\n-                                                         MessagingSessionFacade.DestinationType type)\n-        throws JMSException;\n-\n-    public boolean removeSession(SessionImpl session){\n-        // simply remove.\n-        synchronized (lockObject){\n-            return sessionList.remove(session);\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public String getClientID() {\n-        return clientID;\n-    }\n-\n-    /**\n-     * Allow clientID to be set only if it is NOT administratively configured for connection. (4.3.2)\n-     * Since we do not work (yet) within the context of a container, this aspect is a TODO for now.\n-     *\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void setClientID(String clientID) throws InvalidClientIDException, javax.jms.IllegalStateException {\n-        if (null == clientID) throw new InvalidClientIDException(\"clientId specified is null\");\n-\n-        synchronized (globalClientIdSet){\n-            if (globalClientIdSet.contains(clientID))\n-              throw new InvalidClientIDException(\"clientId '\" + clientID + \"' already in use in this provider\");\n-            if (null != this.clientID && !this.clientID.equals(clientID))\n-              throw new javax.jms.IllegalStateException(\"clientID already set to \" + this.clientID +\n-                  \", cant override to \" + clientID);\n-            this.clientID = clientID;\n-            globalClientIdSet.add(clientID);\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public ConnectionMetaData getMetaData() throws JMSException {\n-        // return new ConnectionMetaDataImpl();\n-        return metadata;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public ExceptionListener getExceptionListener() throws JMSException {\n-        return exceptionListener;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void setExceptionListener(ExceptionListener exceptionListener) throws JMSException {\n-        this.exceptionListener = exceptionListener;\n-    }\n-\n-    public void initConnectionClientID() throws javax.jms.IllegalStateException, InvalidClientIDException {\n-        synchronized (lockObject){\n-            // default to hedwig_client_id ?\n-            if (null == clientID) setClientID(SessionImpl.generateRandomString());\n-        }\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    @Override\n-    public void start() throws JMSException {\n-\n-        final StateManager.State prevState;\n-        final List<SessionImpl> sessionListCopy;\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"Attempting to start connection\");\n-\n-        synchronized (lockObject){\n-            if (connectionState.isStarted()) return ;\n-            if (connectionState.isClosed()) throw new JMSException(\"Connection already closed\");\n-\n-            if (connectionState.isTransitionState()){\n-                connectionState.waitForTransientStateChange(StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE, logger);\n-                // Not expected actually, present to guard against future changes ...\n-                if (connectionState.isTransitionState())\n-                  throw new JMSException(\"Connection did not make state change to steady state ?\");\n-\n-                if (connectionState.isClosed()) throw new JMSException(\"Connection already closed\");\n-                if (connectionState.isStarted()) return ;\n-\n-                assert connectionState.isStopped();\n-                // try again ...\n-            }\n-\n-            prevState = connectionState.getCurrentState();\n-            connectionState.setCurrentState(StateManager.State.STARTING);\n-            initConnectionClientID();\n-            sessionListCopy = new ArrayList<SessionImpl>(sessionList);\n-        }\n-\n-        StateManager.State nextState = prevState;\n-        try {\n-            // There will be only one thread down here ...\n-\n-            // start any provider specific implementation bootstrap ...\n-            doStart(user, password);\n-            // Copy to prevent concurrent mod exceptions.\n-            if (logger.isTraceEnabled()) logger.trace(\"Starting \" + sessionListCopy.size() + \" sessions\");\n-            for (SessionImpl session : sessionListCopy) {\n-                try {\n-                    session.start();\n-                } catch (JMSException jex){\n-                    // log the error and ignore\n-                    if (logger.isInfoEnabled()) logger.info(\"exception starting session : \" + jex);\n-                    DebugUtil.dumpJMSStacktrace(logger, jex);\n-                }\n-            }\n-            nextState = StateManager.State.STARTED;\n-        } finally {\n-            // set status and notify.\n-            synchronized (lockObject){\n-                connectionState.setCurrentState(nextState);\n-                lockObject.notifyAll();\n-            }\n-        }\n-    }\n-\n-\n-    protected String getUser(){\n-        return user;\n-    }\n-    protected String getPassword(){\n-        return password;\n-    }\n-\n-    protected abstract void doStart(String user, String password) throws JMSException;\n-    protected abstract void doStop();\n-    protected abstract void doClose();\n-\n-    @Override\n-    public void stop() throws JMSException {\n-\n-        final StateManager.State prevState;\n-        final List<SessionImpl> sessionListCopy;\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"Attempting to stop connection\");\n-\n-        synchronized (lockObject){\n-            if (connectionState.isClosed()) throw new JMSException(\"Already closed\");\n-            if (connectionState.isStopped()) return ;\n-\n-            if (connectionState.isTransitionState()){\n-                connectionState.waitForTransientStateChange(StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE, logger);\n-                // Not expected actually, present to guard against future changes ...\n-                if (connectionState.isTransitionState())\n-                  throw new JMSException(\"Connection did not make state change to steady state ?\");\n-\n-                if (connectionState.isClosed()) throw new JMSException(\"Already closed\");\n-                if (connectionState.isStopped()) return ;\n-\n-                assert connectionState.isStarted();\n-\n-                // try (again ?) ...\n-            }\n-\n-            prevState = connectionState.getCurrentState();\n-            connectionState.setCurrentState(StateManager.State.STOPPING);\n-            sessionListCopy = new ArrayList<SessionImpl>(sessionList);\n-        }\n-\n-        StateManager.State nextState = prevState;\n-        try {\n-            // In case there are any specific changes to be done.\n-            // Copy to prevent concurrent mod exceptions.\n-\n-            // Stop all sessions - doing this within MT-safe block to prevent any possibility of race conditions.\n-            // Potentially expensive, but it is a tradeoff between correctness and performance :-(\n-            if (logger.isTraceEnabled()) logger.trace(\"Stopping \" + sessionListCopy.size() + \" sessions\");\n-            for (SessionImpl session : sessionListCopy) {\n-                try {\n-                    session.stop();\n-                } catch (JMSException jex){\n-                    // log the error and ignore\n-                    if (logger.isInfoEnabled()) logger.info(\"exception closing session : \" + jex);\n-                    DebugUtil.dumpJMSStacktrace(logger, jex);\n-                }\n-            }\n-            // stop connection AFTER session's are stopped.\n-            doStop();\n-            nextState = StateManager.State.STOPPED;\n-        } finally {\n-            // set status and notify.\n-            synchronized (lockObject){\n-                lockObject.notifyAll();\n-                connectionState.setCurrentState(nextState);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void close() throws JMSException {\n-\n-        final StateManager.State prevState;\n-        final List<SessionImpl> sessionListCopy;\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"Attempting to close connection\");\n-\n-        synchronized (lockObject){\n-            if (connectionState.isClosed()) return ;\n-            if (! connectionState.isStopped()) {\n-                if (connectionState.isTransitionState()){\n-                    connectionState.waitForTransientStateChange(\n-                            StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE, logger);\n-                    // Not expected actually, present to guard against future changes ...\n-                    if (connectionState.isTransitionState())\n-                      throw new JMSException(\"Connection did not make state change to steady state ?\");\n-\n-                    if (connectionState.isClosed()) return ;\n-\n-                    assert connectionState.isStarted() || connectionState.isStopped();\n-                }\n-            }\n-\n-            prevState = connectionState.getCurrentState();\n-            connectionState.setCurrentState(StateManager.State.CLOSING);\n-            sessionListCopy = new ArrayList<SessionImpl>(sessionList);\n-        }\n-\n-        StateManager.State nextState = prevState;\n-\n-        try {\n-            // Copy to prevent concurrent mod exceptions.\n-\n-            // Close all sessions - doing this within MT-safe block to prevent any possibility of race conditions.\n-            // Potentially expensive, but it is a tradeoff between correctness and performance :-(\n-            if (logger.isTraceEnabled()) logger.trace(\"Closing \" + sessionListCopy.size() + \" sessions\");\n-            for (SessionImpl session : sessionListCopy) {\n-                try {\n-                    session.close();\n-                } catch (Exception ex){\n-                    // log the error and ignore\n-                    if (logger.isDebugEnabled()) logger.debug(\"exception closing session\", ex);\n-                    else if (logger.isInfoEnabled()) logger.info(\"exception closing session : \" + ex);\n-                }\n-            }\n-            doClose();\n-            synchronized (globalClientIdSet){\n-                assert (null != getClientID());\n-                globalClientIdSet.remove(getClientID());\n-            }\n-            nextState = StateManager.State.CLOSED;\n-        } finally {\n-            // set status and notify.\n-            synchronized (lockObject){\n-                lockObject.notifyAll();\n-\n-                if (StateManager.State.CLOSED == nextState && !connectionState.isClosed()) {\n-                    // clear sessions.\n-                    sessionList.clear();\n-                }\n-                // set after everything is done.\n-                connectionState.setCurrentState(nextState);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public ConnectionConsumer createConnectionConsumer(Destination destination, String messageSelector,\n-                                                       ServerSessionPool sessionPool, int maxMessages)\n-        throws JMSException {\n-\n-        throw new JMSException(\"Unsupported\");\n-    }\n-\n-    @Override\n-    public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String subscriptionName,\n-                                                              String messageSelector, ServerSessionPool sessionPool,\n-                                                              int maxMessages)\n-        throws JMSException {\n-\n-        throw new JMSException(\"Unsupported\");\n-    }\n-\n-    @Override\n-    public ConnectionConsumer createConnectionConsumer(Queue queue, String s,\n-                                                       ServerSessionPool serverSessionPool, int maxMessages)\n-        throws JMSException {\n-\n-        throw new JMSException(\"Unsupported\");\n-    }\n-\n-\n-    @Override\n-    public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSelector,\n-                                                       ServerSessionPool sessionPool, int maxMessages)\n-        throws JMSException {\n-\n-        throw new JMSException(\"Unsupported\");\n-    }\n-\n-    public boolean isInStartMode() {\n-        return connectionState.isInStartMode();\n-    }\n-\n-    protected abstract MessagingSessionFacade createMessagingSessionFacade(SessionImpl session) throws JMSException;\n-\n-\n-    // required to catch resource leaks ...\n-    @Override\n-    protected void finalize() throws Throwable {\n-        super.finalize();\n-        if (!connectionState.isClosed()) {\n-            if (logger.isErrorEnabled()) logger.error(\"Connection was NOT closed before it went out of scope\");\n-            close();\n-        }\n-    }\n-\n-    private static final int LOCALLY_SENT_MESSAGE_ID_CACHE_SIZE =\n-        Integer.getInteger(\"LOCALLY_SENT_MESSAGE_ID_CACHE_SIZE\", 1024);\n-    // This is gaurded by publishedMessageIds\n-    private final LRUCacheSet<String> publishedMessageIds =\n-        new LRUCacheSet<String>(LOCALLY_SENT_MESSAGE_ID_CACHE_SIZE, true);\n-\n-    boolean isLocallyPublished(String messageId){\n-\n-        if (null == messageId) return false;\n-\n-        synchronized(publishedMessageIds){\n-            return publishedMessageIds.contains(messageId);\n-        }\n-    }\n-\n-    void addToLocallyPublishedMessageIds(String messageId){\n-\n-        if (null == messageId) return ;\n-\n-        synchronized(publishedMessageIds){\n-            publishedMessageIds.add(messageId);\n-        }\n-    }\n-}"},{"sha":"12210ac2e59c273709a57fcbc1d140b68e5d7048","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/ConnectionMetaDataImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,77 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms;\n-\n-import javax.jms.ConnectionMetaData;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-\n-/**\n- * Metadata about the provider and/or connection.\n- */\n-public class ConnectionMetaDataImpl implements ConnectionMetaData {\n-    public static final int JMS_MAJOR_VERSION = 1;\n-    public static final int JMS_MINOR_VERSION = 1;\n-    // What should be the value ?\n-    public static final String PROVIDER_NAME = \"hedwig.jms.provider\";\n-\n-    public static final int PROVIDER_MAJOR_VERSION = 1;\n-    public static final int PROVIDER_MINOR_VERSION = 0;\n-\n-    @Override\n-    public String getJMSVersion() {\n-        return JMS_MAJOR_VERSION + \".\" + JMS_MINOR_VERSION;\n-    }\n-\n-    @Override\n-    public int getJMSMajorVersion() {\n-        return JMS_MAJOR_VERSION;\n-    }\n-\n-    @Override\n-    public int getJMSMinorVersion() {\n-        return JMS_MINOR_VERSION;\n-    }\n-\n-    @Override\n-    public String getJMSProviderName() {\n-        return PROVIDER_NAME;\n-    }\n-\n-    @Override\n-    public String getProviderVersion() {\n-        return getJMSVersion();\n-    }\n-\n-    @Override\n-    public int getProviderMajorVersion() {\n-        return PROVIDER_MAJOR_VERSION;\n-    }\n-\n-    @Override\n-    public int getProviderMinorVersion() {\n-        return PROVIDER_MINOR_VERSION;\n-    }\n-\n-    // None right now ... add more as required.\n-    @Override\n-    public Enumeration getJMSXPropertyNames() {\n-        // return Collections.emptyEnumeration();\n-        return Collections.enumeration(Collections.emptyList());\n-    }\n-}"},{"sha":"0e6d27fb462536c50cc5350c022e7f3c911198c1","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/DebugUtil.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,69 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms;\n-\n-import javax.jms.JMSException;\n-import java.io.PrintStream;\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.Set;\n-import org.slf4j.Logger;\n-\n-/**\n- * Contains some Debug Util methods.\n- */\n-public final class DebugUtil {\n-\n-  public static void dumpAllStacktraces(Logger logger) {\n-        logger.debug(generateDumpAllStacktraces());\n-    }\n-\n-    public static void dumpAllStacktraces(PrintStream out) {\n-        out.println(generateDumpAllStacktraces());\n-    }\n-\n-    private static String generateDumpAllStacktraces(){\n-        Map<Thread, StackTraceElement[]> map = Thread.getAllStackTraces();\n-\n-        StringBuilder sb = new StringBuilder();\n-\n-        sb.append(\"Dump start\\n---\\n\");\n-        for (Map.Entry<Thread, StackTraceElement[]> entry : map.entrySet()){\n-            sb.append(\"Thread \").append(entry.getKey()).append(\"\\n\");\n-            for (StackTraceElement traceElement : entry.getValue())\n-                sb.append(\"\\tat \").append(traceElement).append(\"\\n\");\n-\n-        }\n-        sb.append(\"---\\nDump done\\n\");\n-\n-        return sb.toString();\n-    }\n-\n-    public static void dumpJMSStacktrace(Logger logger, JMSException jex) {\n-\n-        assert logger.isDebugEnabled();\n-\n-        final Exception linkedException = jex.getLinkedException();\n-        logger.debug(\"exception\" , jex);\n-        if (null != linkedException)  {\n-            logger.debug(\"due to\" , linkedException);\n-        }\n-    }\n-}"},{"sha":"a9e1d50fe1d5c79ba5542698f3a5d66dce14ab09","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java","status":"removed","additions":0,"deletions":104,"changes":104,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheMap.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,104 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hedwig.jms;\n-\n-import java.util.Collection;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.Set;\n-\n-/**\n- * An LRUCacheMap\n- */\n-class LRUCacheMap<K, V> implements Map<K, V> {\n-    private final int maxSize;\n-    private final Map<K, V> cache;\n-\n-    public LRUCacheMap(int maxSize, boolean accessOrder){\n-        this.maxSize = maxSize;\n-\n-        this.cache = new LinkedHashMap<K, V>(maxSize, 0.75f, accessOrder){\n-            @Override\n-            protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {\n-                boolean retval = super.removeEldestEntry(eldest);\n-                return retval || super.size() > LRUCacheMap.this.maxSize;\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public int size() {\n-        return cache.size();\n-    }\n-\n-    @Override\n-    public boolean isEmpty() {\n-        return cache.isEmpty();\n-    }\n-\n-    @Override\n-    public boolean containsKey(Object key) {\n-        return cache.containsKey(key);\n-    }\n-\n-    @Override\n-    public boolean containsValue(Object value) {\n-        return cache.containsValue(value);\n-    }\n-\n-    @Override\n-    public V get(Object key) {\n-        return cache.get(key);\n-    }\n-\n-    @Override\n-    public V put(K key, V value) {\n-        return cache.put(key, value);\n-    }\n-\n-    @Override\n-    public V remove(Object key) {\n-        return cache.remove(key);\n-    }\n-\n-    @Override\n-    public void putAll(Map<? extends K, ? extends V> m) {\n-        cache.putAll(m);\n-    }\n-\n-    @Override\n-    public void clear() {\n-        cache.clear();\n-    }\n-\n-    @Override\n-    public Set<K> keySet() {\n-        return cache.keySet();\n-    }\n-\n-    @Override\n-    public Collection<V> values() {\n-        return cache.values();\n-    }\n-\n-    @Override\n-    public Set<Entry<K, V>> entrySet() {\n-        return cache.entrySet();\n-    }\n-}"},{"sha":"72ce593a02183e73ec1efb25fad41e6242903412","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java","status":"removed","additions":0,"deletions":115,"changes":115,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/LRUCacheSet.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,115 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hedwig.jms;\n-\n-import java.util.Collection;\n-import java.util.Iterator;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.Set;\n-\n-/**\n-* An LRUCache (set) based on the LRUCacheMap.\n-*/\n-public class LRUCacheSet<E> implements Set<E> {\n-\n-    private final int maxSize;\n-    private final Map<E, E> cache;\n-\n-    public LRUCacheSet(int maxSize, boolean accessOrder){\n-        this.maxSize = maxSize;\n-\n-        this.cache = new LinkedHashMap<E, E>(maxSize, 0.75f, accessOrder){\n-            @Override\n-            protected boolean removeEldestEntry(Map.Entry<E, E> eldest) {\n-                boolean retval = super.removeEldestEntry(eldest);\n-                return retval || super.size() > LRUCacheSet.this.maxSize;\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public int size() {\n-        return cache.size();\n-    }\n-\n-    @Override\n-    public boolean isEmpty() {\n-        return cache.isEmpty();\n-    }\n-\n-    @Override\n-    public boolean contains(Object val) {\n-        return cache.containsKey(val);\n-    }\n-\n-    @Override\n-    public Iterator<E> iterator() {\n-        return cache.keySet().iterator();\n-    }\n-\n-    @Override\n-    public Object[] toArray() {\n-        return cache.keySet().toArray();\n-    }\n-\n-    @Override\n-    public <T> T[] toArray(T[] a) {\n-        return cache.keySet().toArray(a);\n-    }\n-\n-    @Override\n-    public boolean add(E val) {\n-        return null == cache.put(val, val);\n-    }\n-\n-    @Override\n-    public boolean remove(Object val) {\n-        if (! contains(val)) return false;\n-        cache.remove(val);\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean containsAll(Collection<?> c) {\n-        return cache.keySet().containsAll(c);\n-    }\n-\n-    @Override\n-    public boolean addAll(Collection<? extends E> c) {\n-        boolean retval = false;\n-        for (E e : c) retval = retval | add(e);\n-        return retval;\n-    }\n-\n-    @Override\n-    public boolean retainAll(Collection<?> c) {\n-        return cache.keySet().retainAll(c);\n-    }\n-\n-    @Override\n-    public boolean removeAll(Collection<?> c) {\n-        return cache.keySet().removeAll(c);\n-    }\n-\n-    @Override\n-    public void clear() {\n-        cache.clear();\n-    }\n-}"},{"sha":"63cf0cc8e9be7888ff2dc1658eee2037ad2813d4","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java","status":"removed","additions":0,"deletions":421,"changes":421,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/MessagingSessionFacade.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,421 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-import javax.jms.Destination;\n-import javax.jms.JMSException;\n-import javax.jms.MessageConsumer;\n-import javax.jms.Queue;\n-import javax.jms.QueueBrowser;\n-import javax.jms.QueueReceiver;\n-import javax.jms.QueueSender;\n-import javax.jms.TemporaryQueue;\n-import javax.jms.TemporaryTopic;\n-import javax.jms.Topic;\n-import javax.jms.TopicPublisher;\n-import javax.jms.TopicSubscriber;\n-\n-/**\n- * Encapsulates the actual implementation away from the rest of the system. <br/>\n- * This will allow us to, potentially, change the underlying messaging implementation with minimal\n- * disruption to the provide code.<br/>\n- * <p/>\n- * Note that provider specific validation to conform to JMS spec must be done BEFORE invoking the\n- * business methods here.<br/>\n- * These are supposed to handle ONLY implementation specific logic, not JMS specific constraint\n- * enforcement(s), etc.<br/>\n- * <p/>\n- * Since hedwig itself might undergo changes due to the JMS provider effort, this will allow us to\n- * decouple the changes.<br/>\n- * In addition, it is an easy way for us to create proxy objects to allow for testing various\n- * aspects of the provider without depending\n- * on hedwig itself (via test facade impl's). <br/>\n- * <p/>\n- * Most of the javadoc's are pretty much verbatim copied from corresponding JMS javadoc's :-)\n- *\n- * <p/>\n- * Note that, typically, actual ConnectionImpl and MessagingSessionFacade used are tightly coupled.\n- * ConnectionImpl is the base class to the actual implementations ...\n- */\n-public interface MessagingSessionFacade {\n-\n-\n-\n-    public enum DestinationType { QUEUE, TOPIC }\n-\n-    /**\n-     * Starts the session.\n-     *\n-     * @throws JMSException If we are unable to initialize hedwig client (typically).\n-     */\n-    public void start() throws JMSException;\n-\n-    /**\n-     * Stop the session.\n-     *\n-     * @throws JMSException If we are unable to stop hedwig client (typically).\n-     */\n-    public void stop() throws JMSException;\n-\n-    /**\n-     * Close the session.\n-     */\n-    public void close();\n-\n-    /**\n-     * Given a destination, find out if it is a queue or topic. Required for createProducer(),\n-     * createConsumer() methods in session.\n-     * @param destination The specified destination.\n-     * @return Its type.\n-     * @throws javax.jms.JMSException In case of internal errors.\n-     */\n-    public DestinationType findDestinationType(String destination) throws JMSException;\n-\n-    /**\n-     * Given a destination, find out if it is a queue or topic. Required for createProducer(),\n-     * createConsumer() methods in session.\n-     * @param destination The specified destination.\n-     * @return Its type.\n-     * @throws javax.jms.JMSException In case of internal errors.\n-     */\n-    public DestinationType findDestinationType(Destination destination) throws JMSException;\n-\n-    /**\n-     * Create a topic publisher to the specified destination.\n-     * @param destination The topic to publish to\n-     * @return A topic publisher for the topic specified\n-     * @throws javax.jms.JMSException In case of internal error.\n-     */\n-    public TopicPublisher createTopicPublisher(Destination destination) throws JMSException;\n-\n-\n-    /**\n-     * Create a queue sender to the specified destination.\n-     * @param destination The queue to publish to\n-     * @return A queue sender for the queue specified\n-     * @throws javax.jms.JMSException In case of internal error.\n-     */\n-    public QueueSender createQueueSender(Destination destination) throws JMSException;\n-\n-    /**\n-     * Create a topic subscriber for the specified destination.\n-     * @param destination The topic name\n-     * @return Topic subscriber for the topic.\n-     * @throws javax.jms.JMSException In case of internal error.\n-     */\n-    public TopicSubscriber createTopicSubscriber(Destination destination) throws JMSException;\n-\n-    /**\n-     * Create a queue receiver for the specified destination.\n-     * @param destination The queue name\n-     * @return Queue receiver for the queue.\n-     * @throws javax.jms.JMSException In case of internal error.\n-     */\n-    public QueueReceiver createQueueReceiver(Destination destination) throws JMSException;\n-\n-    /**\n-     * Create a queue receiver for the specified destination.\n-     * @param destination destination\n-     * @param messageSelector selector to apply\n-     * @return A queue receiver conforming to the constraints.\n-     * @throws javax.jms.JMSException In case of internal error or unsatisfiable constraints.\n-     */\n-    public QueueReceiver createQueueReceiver(Destination destination, String messageSelector) throws JMSException;\n-\n-    /**\n-     * Create a topic subscriber for the specified destination.\n-     * @param destination destination\n-     * @param messageSelector selector to apply\n-     * @param noLocal should locally published messages be received. Note, for now, we do not (yet) support this.\n-     * @return A topic subscriber conforming to the constraints.\n-     * @throws javax.jms.JMSException In case of internal error or unsatisfiable constraints.\n-     */\n-    public TopicSubscriber createTopicSubscriber(Destination destination, String messageSelector,\n-                                                 boolean noLocal) throws JMSException;\n-\n-    /**\n-     * Create a queue receiver for the specified destination.\n-     * @param destination destination\n-     * @param messageSelector selector to apply\n-     * @param noLocal should locally published messages be received. Note, for now, we do not (yet) support this.\n-     * @return A queue receiver conforming to the constraints.\n-     * @throws javax.jms.JMSException In case of internal error or unsatisfiable constraints.\n-     */\n-    public QueueReceiver createQueueReceiver(Destination destination, String messageSelector,\n-                                             boolean noLocal) throws JMSException;\n-\n-\n-    /**\n-     * Creates a durable subscriber to the specified topic. <br/>\n-     * <p/>\n-     * If a client needs to receive all the messages published on a topic, including the ones\n-     * published while the\n-     * subscriber is inactive, it uses a durable TopicSubscriber.\n-     * The JMS provider retains a record of this durable subscription and insures that all messages\n-     * from the\n-     * topic's publishers are retained until they are acknowledged by this durable subscriber or\n-     * they have expired.\n-     * <p/>\n-     * Sessions with durable subscribers must always provide the same client identifier.\n-     * In addition, each client must specify a subscribedId that uniquely identifies (within client\n-     * identifier) each durable\n-     * subscription it creates. Only one session at a time can have a TopicSubscriber for a particular\n-     * durable subscription.\n-     * <p/>\n-     * A client can change an existing durable subscription by creating a durable TopicSubscriber\n-     * with the same subscribedId\n-     * and a new topic and/or message selector.\n-     * Changing a durable subscriber is equivalent to unsubscribing (deleting) the old one and\n-     * creating a new one.\n-     * <p/>\n-     * In some cases, a connection may both publish and subscribe to a topic.\n-     * The subscriber NoLocal attribute allows a subscriber to inhibit the delivery of messages\n-     * published by its own connection.\n-     * The default value for this attribute is false.\n-     *\n-     * @param topic The topic to subscribe to.\n-     * @param subscribedId Name used to identify the subscription. This should be a combination\n-     *  of the client-id and the session and is expected to be unique.\n-     * Only a single subscription can be active for a given subscribedId.\n-     * @return The topicsubscriber which will recieve messages for the topic.\n-     * @throws JMSException if failure due to some error\n-     */\n-    public TopicSubscriber createDurableSubscriber(Topic topic, String subscribedId) throws JMSException;\n-\n-    /**\n-     * Creates a durable subscriber to the specified topic. <br/>\n-     * <p/>\n-     * If a client needs to receive all the messages published on a topic, including the ones published while the\n-     * subscriber is inactive, it uses a durable TopicSubscriber.\n-     * The JMS provider retains a record of this durable subscription and insures that all messages\n-     * from the\n-     * topic's publishers are retained until they are acknowledged by this durable subscriber or\n-     * they have expired.\n-     * <p/>\n-     * Sessions with durable subscribers must always provide the same client identifier.\n-     * In addition, each client must specify a subscribedId that uniquely identifies (within client\n-     * identifier) each durable\n-     * subscription it creates. Only one session at a time can have a TopicSubscriber for a particular\n-     * durable subscription.\n-     * <p/>\n-     * A client can change an existing durable subscription by creating a durable TopicSubscriber with\n-     * the same subscribedId\n-     * and a new topic and/or message selector.\n-     * Changing a durable subscriber is equivalent to unsubscribing (deleting) the old one and\n-     * creating a new one.\n-     * <p/>\n-     * In some cases, a connection may both publish and subscribe to a topic.\n-     * The subscriber NoLocal attribute allows a subscriber to inhibit the delivery of messages\n-     * published by its own connection.\n-     * The default value for this attribute is false.\n-     *\n-     * @param topic The topic to subscribe to.\n-     * @param subscribedId Name used to identify the subscription. This should be a combination of\n-     *  the client-id and the session and is expected to be unique.\n-     * Only a single subscription can be active for a given subscribedId.\n-     * @param messageSelector The selector to filter the messages on.\n-     * @param noLocal Should local messages be delivered or not.\n-     * Note that noLocal implementation is NOT currently supported by hedwig and should be simulated\n-     *  by us in the provider ...\n-     * @return The topicsubscriber which will recieve messages for the topic.\n-     * @throws JMSException if failure due to some error\n-     */\n-    public TopicSubscriber createDurableSubscriber(Topic topic, String subscribedId,\n-                                                   String messageSelector, boolean noLocal) throws JMSException;\n-\n-    /**\n-     *\n-     * @param queue The queue\n-     * @return Create a queue browser for the specified queue.\n-     */\n-    public QueueBrowser createBrowser(Queue queue) throws JMSException;\n-\n-    /**\n-     *\n-     * @param queue The queue\n-     * @param messageSelector The selector to apply\n-     * @return Create a queue browser for the specified queue.\n-     */\n-    public QueueBrowser createBrowser(Queue queue, String messageSelector) throws JMSException;\n-\n-    /**\n-     * Creates a TemporaryTopic object. Its lifetime will be that of the Connection unless it is deleted earlier.\n-     * JMS VIOLATION: Most probably we will violate JMS spec here since session &lt;-&gt; hedwig\n-     * connection and not connection &lt;-&gt; hedwig connection ...\n-     * This is, assuming ofcourse, that we can create temporary topic's !\n-     *\n-     * @return A temporary topic.\n-     * @throws JMSException In case of exceptions creating a queue.\n-     */\n-    public TemporaryTopic createTemporaryTopic() throws JMSException;\n-\n-\n-    /**\n-     * Creates a TemporaryQueue object. Its lifetime will be that of the Connection unless it is deleted earlier.\n-     * JMS VIOLATION: Most probably we will violate JMS spec here since session &lt;-&gt; hedwig\n-     * connection and not connection &lt;-&gt; hedwig connection ...\n-     * This is, assuming ofcourse, that we can create temporary topic's !\n-     *\n-     * @return A temporary queue.\n-     * @throws JMSException In case of exceptions creating a queue.\n-     */\n-    public TemporaryQueue createTemporaryQueue() throws JMSException;\n-\n-    /**\n-     * Starts a durable subscription for a client.\n-     *\n-     * @param topicName The topic name\n-     * @param subscribedId The subscription subscribedId\n-     * @throws JMSException In case of exceptions unsubscribing.\n-     */\n-    public void subscribeToTopic(String topicName, String subscribedId) throws JMSException;\n-\n-    /**\n-     * Unsubscribes a durable subscription that has been created by a client.\n-     * <p/>\n-     * This method deletes the state being maintained on behalf of the subscriber by its provider.\n-     * <p/>\n-     * <br/>\n-     * Note that it is erroneous for a client to delete a durable subscription while there is an\n-     * active MessageConsumer or TopicSubscriber for the subscription,\n-     * or while a consumed message is part of a pending transaction or has not been acknowledged in the session.\n-     * <br/> <b>This validation MUST be done BEFORE invoking this method !</b>\n-     *\n-     * @param topicName The topic name\n-     * @param subscribedId The subscription subscribedId\n-     * @throws JMSException In case of exceptions unsubscribing.\n-     */\n-    public void unsubscribeFromTopic(String topicName, String subscribedId) throws JMSException;\n-\n-    /**\n-     * Starts delivery of messages from a Topic. <br/>\n-     *\n-     * @param topicName The topic name\n-     * @param subscribedId The subscription subscribedId\n-     * @throws JMSException In case of exceptions unsubscribing.\n-     */\n-    public void startTopicDelivery(String topicName, String subscribedId) throws JMSException;\n-\n-    /**\n-     * Starts delivery of messages from a Queue. <br/>\n-     *\n-     * @param queueName The queue name\n-     * @param subscriberId The subscription subscribedId\n-     * @throws JMSException In case of exceptions unsubscribing.\n-     */\n-    public void startQueueDelivery(String queueName, String subscriberId) throws JMSException;\n-\n-    /**\n-     * Stops delivery of messages from a Topic. <br/>\n-     *\n-     * @param topicName The topic name\n-     * @param subscribedId The subscription subscribedId\n-     * @throws JMSException In case of exceptions unsubscribing.\n-     */\n-    public void stopTopicDelivery(String topicName, String subscribedId) throws JMSException;\n-\n-    /**\n-     * Stops delivery of messages from a Queue. <br/>\n-     *\n-     * @param queueName The queue name\n-     * @param subscribedId The subscription subscribedId\n-     * @throws JMSException In case of exceptions unsubscribing.\n-     */\n-    public void stopQueueDelivery(String queueName, String subscribedId) throws JMSException;\n-\n-    /**\n-     * Register an unacknowledged message. This is to be used when session is going to NOT manage\n-     * acknowledgements and\n-     * expects clients to explicitly call message.acknowledge().\n-     * This is true when : session is not transacted and it is in CLIENT_ACKNOWLEDGE mode.\n-     *\n-     * Note that invocation of this method MUST be in the order it was received from the server :\n-     * since hedwig does ack-until-N.\n-     *\n-     * @param message The un-ack message.\n-     */\n-    public void registerUnAcknowledgedMessage(SessionImpl.ReceivedMessage message);\n-\n-    /**\n-     * Acknowledge the jms message to hedwig.\n-     *\n-     * @param message The message to acknowledge.\n-     * @throws javax.jms.JMSException In case of internal errors while sending acknowledgement to hedwig\n-     */\n-    public void acknowledge(MessageImpl message) throws JMSException;\n-\n-    /**\n-     * Get the subscriber id of the TopicSubscriber.\n-     * @param topicSubscriber This must be a topic subscriber created using this facade.\n-     * @return The subscriber id of the subscriber.\n-     * @throws JMSException Typically in case this is NOT an instance compatible with this facade.\n-     */\n-    public String getSubscriberId(TopicSubscriber topicSubscriber) throws JMSException;\n-\n-    /**\n-     * Get the subscriber id of the QueueReceiver.\n-     * @param queueReceiver  This must be a queue receiver created using this facade.\n-     * @return The subscriber id of the subscriber.\n-     * @throws JMSException Typically in case this is NOT an instance compatible with this facade.\n-     */\n-    public String getSubscriberId(QueueReceiver queueReceiver) throws JMSException;\n-\n-    /**\n-     * Enqueue a message for consumption by the subscriber.\n-     * This happens when there are one or more 'recieve()' calls possible.\n-     * <p/>\n-     * The typically flow is : client DOES NOT use <br/>\n-     * {@link javax.jms.Session#setMessageListener(javax.jms.MessageListener)}<br/>\n-     * but directly creates One or more Subscribers via (For Topics) :<br/>\n-     * {@link javax.jms.Session#createConsumer(javax.jms.Destination)},<br/>\n-     * {@link javax.jms.Session#createConsumer(javax.jms.Destination, String)},<br/>\n-     * {@link javax.jms.Session#createConsumer(javax.jms.Destination, String, boolean)},<br/>\n-     * Or directly using Topic api using.<br/>\n-     * {@link javax.jms.TopicSession#createSubscriber(javax.jms.Topic)},<br/>\n-     * {@link javax.jms.TopicSession#createSubscriber(javax.jms.Topic, String, boolean)},<br/>\n-     * {@link javax.jms.TopicSession#createDurableSubscriber(javax.jms.Topic, String)},<br/>\n-     * {@link javax.jms.TopicSession#createDurableSubscriber(javax.jms.Topic, String, String, boolean)}<br/>\n-     * <p/>\n-     * The message is the enqueued in the subscriber for subsequent consumption by<br/>\n-     * {@link javax.jms.TopicSubscriber#receive()} or variants,<br/>\n-     * {@link javax.jms.MessageConsumer#receive()} or variants.<br/>\n-     *\n-     * @param subscriber The subscriber of the message.\n-     * @param receivedMessage The message to dispatch.\n-     * @param addFirst Add to begining of the received list or at end. (usually addFirst == true for\n-     * txn rollback recovery).\n-     * @throws javax.jms.JMSException If not a valid subscriber (for now).\n-     * @return Was the message successfully enqueud to the subscriber. Typically fails if already closed.\n-     */\n-    public boolean enqueueReceivedMessage(MessageConsumer subscriber, SessionImpl.ReceivedMessage receivedMessage,\n-                                          boolean addFirst) throws JMSException;\n-\n-\n-    /**\n-     *\n-     * Publish a message to the topic specified.\n-     *\n-     * @param topicName The topic to publish to.\n-     * @param message The message to send.\n-     * @throws JMSException In case of errors publishing message.\n-     * @return The message-id to be set as JMSMessageID\n-     */\n-    public String publish(String topicName, MessageImpl message) throws JMSException;\n-}"},{"sha":"7689d3b20cf2dc60eea3b11114548d3fb9cff6d6","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/Mutable.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,61 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hedwig.jms;\n-\n-/**\n- * A simple utility class to ship values around even particularly when variable is immutable\n- * (like pass from inner class to outer context).\n- */\n-public final class Mutable<T> {\n-    private T value;\n-\n-    public Mutable(T value){\n-        this.value = value;\n-    }\n-\n-    public T getValue() {\n-        return value;\n-    }\n-\n-    public void setValue(T value) {\n-        this.value = value;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"\" + value;\n-    }\n-\n-    @Override\n-    public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n-\n-        Mutable mutable = (Mutable) o;\n-\n-        if (value != null ? !value.equals(mutable.value) : mutable.value != null) return false;\n-\n-        return true;\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return value != null ? value.hashCode() : 0;\n-    }\n-}"},{"sha":"f86d9559b5c8869f39e57a21002929bd10b065d1","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","status":"removed","additions":0,"deletions":2009,"changes":2009,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,2009 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms;\n-\n-import org.apache.hedwig.jms.message.BytesMessageImpl;\n-import org.apache.hedwig.jms.message.MapMessageImpl;\n-import org.apache.hedwig.jms.message.MessageImpl;\n-import org.apache.hedwig.jms.message.MessageUtil;\n-import org.apache.hedwig.jms.message.ObjectMessageImpl;\n-import org.apache.hedwig.jms.message.StreamMessageImpl;\n-import org.apache.hedwig.jms.message.TextMessageImpl;\n-import org.apache.hedwig.jms.selector.Node;\n-import org.apache.hedwig.jms.selector.SelectorParser;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.jms.BytesMessage;\n-import javax.jms.Destination;\n-import javax.jms.InvalidDestinationException;\n-import javax.jms.JMSException;\n-import javax.jms.MapMessage;\n-import javax.jms.Message;\n-import javax.jms.MessageConsumer;\n-import javax.jms.MessageListener;\n-import javax.jms.MessageProducer;\n-import javax.jms.ObjectMessage;\n-import javax.jms.Queue;\n-import javax.jms.QueueBrowser;\n-import javax.jms.QueueReceiver;\n-import javax.jms.QueueSender;\n-import javax.jms.Session;\n-import javax.jms.StreamMessage;\n-import javax.jms.TemporaryQueue;\n-import javax.jms.TemporaryTopic;\n-import javax.jms.TextMessage;\n-import javax.jms.Topic;\n-import javax.jms.TopicPublisher;\n-import javax.jms.TopicSubscriber;\n-import javax.jms.TransactionRolledBackException;\n-import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.IdentityHashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.UUID;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.CopyOnWriteArrayList;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-/**\n- * Implementation of jms Session.\n- * IS NOT MT-safe (2.8) - except for close()\n- *\n- * We are yet to support/implement this - must pass a flag through constructor on \"how\" this object\n- * was created and use that to throw exception...\n- *\n- */\n-public class SessionImpl implements Session {\n-\n-\n-    private final static Logger logger = LoggerFactory.getLogger(SessionImpl.class);\n-\n-    // 8k, too high ?\n-    public static final int MAX_SESSION_BUFFERED_MESSAGES =\n-        Integer.getInteger(\"Session.MAX_BUFFERED_MESSAGES\", 1024 * 8);\n-    // 0.5k too low/high ?\n-    public static final int MAX_SUBSCRIBER_BUFFERED_MESSAGES =\n-        Integer.getInteger(\"Session.MAX_SUBSCRIBER_BUFFERED_MESSAGES\", 512);\n-\n-    // Number of attempts to retry and see if a transaction keeps getting rolled back as part\n-    // of async delivery of messages.\n-    public static final int RETRY_DISPATCH_TO_TRANSACTION_ATTEMPTS =\n-        Integer.getInteger(\"Session.RETRY_DISPATCH_TO_TRANSACTION_ATTEMPTS\", 9);\n-\n-    private final boolean transacted;\n-    private final int acknowledgeMode;\n-    private volatile MessageListener messageListener = null;\n-\n-    private final ConnectionImpl connection;\n-    private final MessagingSessionFacade sessionFacade;\n-\n-    private final Object lockObject = new Object();\n-    // Message processing locks on this object itself - everything else on lockObject. This is to\n-    // prevent interactions with hedwig threading idioms.\n-    // messageList is a leaf in call graph - so it must not cause MT interactions with other locks\n-    // acquired prior to it.\n-    private final List<ReceivedMessage> messageList = new LinkedList<ReceivedMessage>();\n-    private final List<TransactedReceiveOperation> rolledbackMessageList\n-        = new LinkedList<TransactedReceiveOperation>();\n-\n-    private StateManager sessionState = new StateManager(StateManager.State.STOPPED, lockObject);\n-\n-    // Simply encapsulating all state within a single class.\n-    private final Subscriptions subscriptions = new Subscriptions();\n-\n-    private boolean messageListenerThreadStarted = false;\n-    private final Thread messageListenerThread;\n-    private boolean messageListenerThreadFinished = false;\n-\n-    public SessionImpl(ConnectionImpl connection, boolean transacted, int acknowledgeMode) throws JMSException {\n-        if (Session.AUTO_ACKNOWLEDGE != acknowledgeMode &&\n-            Session.CLIENT_ACKNOWLEDGE != acknowledgeMode &&\n-            Session.DUPS_OK_ACKNOWLEDGE != acknowledgeMode){\n-            // On;y if not transacted !\n-            if (!transacted){\n-                throw new javax.jms.IllegalStateException(\"Unknown/unsupported acknowledgeMode specified : \" +\n-                    acknowledgeMode);\n-            }\n-        }\n-        this.transacted = transacted;\n-        this.acknowledgeMode = acknowledgeMode;\n-        this.connection = connection;\n-        this.sessionFacade = connection.createMessagingSessionFacade(this);\n-        this.messageListenerThread = new Thread(this, \"JMS message listener thread\");\n-        // not daemon, right ?\n-        this.messageListenerThread.setDaemon(false);\n-    }\n-\n-    @Override\n-    public BytesMessage createBytesMessage() throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        return new BytesMessageImpl(this);\n-    }\n-\n-    @Override\n-    public MapMessage createMapMessage() throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        return new MapMessageImpl(this);\n-    }\n-\n-    @Override\n-    public Message createMessage() throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        return new MessageImpl(this);\n-    }\n-\n-    @Override\n-    public ObjectMessage createObjectMessage() throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        return new ObjectMessageImpl(this, null);\n-    }\n-\n-    @Override\n-    public ObjectMessage createObjectMessage(Serializable serializable) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        return new ObjectMessageImpl(this, serializable);\n-    }\n-\n-    @Override\n-    public StreamMessage createStreamMessage() throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        return new StreamMessageImpl(this);\n-    }\n-\n-    @Override\n-    public TextMessage createTextMessage() throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        return new TextMessageImpl(this);\n-    }\n-\n-    @Override\n-    public TextMessage createTextMessage(String payload) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        return new TextMessageImpl(this, payload);\n-    }\n-\n-    @Override\n-    public boolean getTransacted() {\n-        return transacted;\n-    }\n-\n-    @Override\n-    public int getAcknowledgeMode() {\n-        return acknowledgeMode;\n-    }\n-\n-    @Override\n-    public void commit() throws JMSException {\n-        // Apparently, we can send even if connection is not open ?\n-        // if (!sessionState.isStarted()) throw new javax.jms.IllegalStateException(\"Session not open\");\n-        if (!getTransacted()) throw new javax.jms.IllegalStateException(\"Session not transacted\");\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        commitTransactionState();\n-    }\n-\n-    @Override\n-    public void rollback() throws JMSException {\n-        if (!sessionState.isStarted()) throw new javax.jms.IllegalStateException(\"Session not open\");\n-        if (!getTransacted()) throw new javax.jms.IllegalStateException(\"Session not transacted\");\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        rollbackTransactionState();\n-    }\n-\n-    void start() throws JMSException {\n-        final StateManager.State prevState;\n-        final Map<Subscription, CopyOnWriteArrayList<MessageConsumer>> subscriptionToSubscriberMapCopy;\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"Attempting to start session\");\n-\n-        synchronized (lockObject){\n-            // Do not throw exception, it might be connection starting while another thread might\n-            // be doing a close() - there is a\n-            // potential race there !\n-            // if (isClosed()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-            if (isClosed()) return ;\n-            if (sessionState.isStarted()) return ;\n-\n-            if (sessionState.isTransitionState()){\n-                sessionState.waitForTransientStateChange(StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE, logger);\n-                // Not expected actually, present to guard against future changes ...\n-                if (sessionState.isTransitionState())\n-                  throw new JMSException(\"Connection did not make state change to steady state ?\");\n-\n-                if (isClosed()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-                if (sessionState.isStarted()) return ;\n-\n-                assert sessionState.isStopped();\n-                // try again ...\n-            }\n-\n-            prevState = sessionState.getCurrentState();\n-            sessionState.setCurrentState(StateManager.State.STARTING);\n-\n-            // Copy to prevent concurrent mod exceptions - is it required here ? Not sure ...\n-            subscriptionToSubscriberMapCopy = subscriptions.createSubscriptionToSubscriberMapCopy();\n-        }\n-\n-        StateManager.State nextState = prevState;\n-\n-        try {\n-            rollbackTransactionState();\n-            // Note: this part of the code IS thread-safe for our private state.\n-\n-            // Validate state - in terms of listener's, etc : we are relying on the single thread semantics of JMS\n-            // to NOT do any complex locking, etc.\n-\n-            if (null != getMessageListener()){\n-                // There CANNOT be any subscriber with listeners registered.\n-                for (MessageConsumer consumer : subscriptions.getAllConsumersSet()){\n-                    if (null != consumer.getMessageListener()) {\n-                        throw new JMSException(\"Session's message listener is already set - \" +\n-                            \"cannot have a consumer with listener also set.\");\n-                    }\n-                }\n-            }\n-\n-\n-            sessionFacade.start();\n-\n-            if (logger.isTraceEnabled()) logger.trace(\"Starting \" + subscriptionToSubscriberMapCopy.size() +\n-                \" subscribers\");\n-\n-            // Subscribe to all the subscriberId's\n-            for (Map.Entry<Subscription, CopyOnWriteArrayList<MessageConsumer>> entry :\n-                    subscriptionToSubscriberMapCopy.entrySet()){\n-\n-                if (entry.getValue().isEmpty()) continue;\n-                if (entry.getKey().isTopic()){\n-                    TopicSubscription topicSubscription = (TopicSubscription) entry.getKey();\n-                    try {\n-                        sessionFacade.subscribeToTopic(topicSubscription.topicName, topicSubscription.subscriberId);\n-                    } catch (JMSException e) {\n-                        // Log and ignore\n-                        // This CAN fail, it is ok to fail !\n-                        if (logger.isDebugEnabled()) {\n-                            logger.debug(\"(Potentially Benign error) Error subscribing from topic for entry : \" +\n-                                topicSubscription);\n-                            DebugUtil.dumpJMSStacktrace(logger, e);\n-                        }\n-                    }\n-                    try {\n-                        sessionFacade.startTopicDelivery(topicSubscription.topicName,\n-                            topicSubscription.subscriberId);\n-                    } catch (JMSException e) {\n-                        // Log and ignore\n-                        if (logger.isDebugEnabled()) {\n-                            logger.debug(\"Error starting topic delivery for entry : \" + entry.getKey());\n-                            DebugUtil.dumpJMSStacktrace(logger, e);\n-                        }\n-                    }\n-                }\n-                else {\n-                    assert entry.getKey().isQueue();\n-\n-                    QueueSubscription queueSubscription = (QueueSubscription) entry.getKey();\n-\n-                    // There is no notion like subscription to queue, right ?\n-                    /*\n-                    try {\n-                        sessionFacade.subscribeToQueue(queueSubscription.queueName,\n-                          queueSubscription.subscriberId);\n-                    } catch (JMSException e) {\n-                        // Log and ignore\n-                        // This CAN fail, it is ok to fail !\n-                        if (logger.isDebugEnabled()) {\n-                            logger.debug(\"(Potentially Benign error) Error subscribing from queue for entry : \" +\n-                              queueSubscription);\n-                            Util.dumpJMSStacktrace(logger, e);\n-                        }\n-                    }\n-                    */\n-                    try {\n-                        sessionFacade.startQueueDelivery(queueSubscription.queueName, queueSubscription.subscriberId);\n-                    } catch (JMSException e) {\n-                        // Log and ignore\n-                        if (logger.isDebugEnabled()) {\n-                            logger.debug(\"Error starting queue delivery for entry : \" + entry.getKey());\n-                            DebugUtil.dumpJMSStacktrace(logger, e);\n-                        }\n-                    }\n-                }\n-            }\n-            nextState = StateManager.State.STARTED;\n-        } finally {\n-            // set status and notify.\n-            synchronized (lockObject){\n-                lockObject.notifyAll();\n-                sessionState.setCurrentState(nextState);\n-            }\n-        }\n-    }\n-\n-    void stop() throws JMSException {\n-        final StateManager.State prevState;\n-        final Map<Subscription, CopyOnWriteArrayList<MessageConsumer>> subscriptionToSubscriberMapCopy;\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"Attempting to stop connection\");\n-\n-        synchronized (lockObject){\n-            if (isClosed()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-            if (sessionState.isStopped()) return ;\n-\n-            if (sessionState.isTransitionState()){\n-                sessionState.waitForTransientStateChange(StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE, logger);\n-                // Not expected actually, present to guard against future changes ...\n-                if (sessionState.isTransitionState())\n-                  throw new JMSException(\"Connection did not make state change to steady state ?\");\n-\n-                if (isClosed()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-                if (sessionState.isStopped()) return ;\n-\n-                assert sessionState.isStarted();\n-\n-                // try again ...\n-            }\n-\n-            prevState = sessionState.getCurrentState();\n-            sessionState.setCurrentState(StateManager.State.STOPPING);\n-\n-            // Copy to prevent concurrent mod exceptions.\n-            subscriptionToSubscriberMapCopy = subscriptions.createSubscriptionToSubscriberMapCopy();\n-        }\n-\n-        StateManager.State nextState = prevState;\n-        try {\n-            rollbackTransactionState();\n-            // In case there are other things to be done ...\n-\n-            // Unsubscribe to all the subscriberId's\n-            if (logger.isTraceEnabled()) logger.trace(\"Stopping \" +\n-                subscriptionToSubscriberMapCopy.size() + \" subscribers\");\n-            for (Map.Entry<Subscription, CopyOnWriteArrayList<MessageConsumer>> entry :\n-                    subscriptionToSubscriberMapCopy.entrySet()){\n-\n-                if (entry.getValue().isEmpty()) continue;\n-                if (entry.getKey().isTopic()){\n-                    TopicSubscription topicSubscription = (TopicSubscription) entry.getKey();\n-                    try {\n-                        stopTopicDelivery(topicSubscription.topicName, topicSubscription.subscriberId);\n-                    } catch (JMSException e) {\n-                        // Log and ignore\n-                        if (logger.isDebugEnabled()) {\n-                            logger.debug(\"Error unsubscribing from topic for entry : \" + topicSubscription);\n-                            DebugUtil.dumpJMSStacktrace(logger, e);\n-                        }\n-                    }\n-                }\n-                else {\n-                  assert entry.getKey().isQueue();\n-\n-                  QueueSubscription queueSubscription = (QueueSubscription) entry.getKey();\n-                  try {\n-                      stopQueueDelivery(queueSubscription.queueName, queueSubscription.subscriberId);\n-                  } catch (JMSException e) {\n-                      // Log and ignore\n-                      if (logger.isDebugEnabled()) {\n-                          logger.debug(\"Error unsubscribing from queue for entry : \" + queueSubscription);\n-                          DebugUtil.dumpJMSStacktrace(logger, e);\n-                      }\n-                  }\n-                }\n-            }\n-            // stop facade AFTER subscriber's are stopped.\n-            sessionFacade.stop();\n-            nextState = StateManager.State.STOPPED;\n-        } finally {\n-            synchronized (lockObject){\n-                lockObject.notifyAll();\n-                sessionState.setCurrentState(nextState);\n-            }\n-        }\n-    }\n-\n-\n-    /**\n-     *\n-     * Closes the session. <br/>\n-     * Since a provider may allocate some resources on behalf of a session outside the JVM, clients\n-     * should close the resources\n-     * when they are not needed. Relying on garbage collection to eventually reclaim these resources\n-     * may not be timely enough.<br/>\n-     * <p/>\n-     * There is no need to close the producers and consumers of a closed session.\n-     * <p/>\n-     *\n-     *\n-     * A blocked message consumer receive call returns null when this session is closed.\n-     * <p/>\n-     * Closing a transacted session must roll back the transaction in progress.<br/>\n-     * This method is the only Session method that can be called concurrently.<br/>\n-     * Invoking any other Session method on a closed session must throw a JMSException.IllegalStateException.<br/>\n-     * Closing a closed session must not throw an exception.<br/>\n-     *\n-     */\n-    private static final ThreadLocal<Boolean> closeFromWithinListener = new ThreadLocal<Boolean>(){\n-        @Override\n-        protected Boolean initialValue() {\n-            return false;\n-        }\n-    };\n-\n-    @Override\n-    public void close() throws JMSException {\n-        final StateManager.State prevState;\n-        final Set<MessageConsumer> subscriberSetCopy = Collections.newSetFromMap(\n-            new IdentityHashMap<MessageConsumer, Boolean>());\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"Attempting to close session\");\n-\n-        synchronized (lockObject){\n-            if (isClosed()) return ;\n-            if (! sessionState.isStopped()) {\n-                if (sessionState.isTransitionState()){\n-                    sessionState.waitForTransientStateChange(StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE, logger);\n-                    // Not expected actually, present to guard against future changes ...\n-                    if (sessionState.isTransitionState())\n-                      throw new JMSException(\"Connection did not make state change to steady state ?\");\n-\n-                    if (isClosed()) return ;\n-\n-                    assert sessionState.isStarted() || sessionState.isStopped();\n-                }\n-            }\n-\n-            prevState = sessionState.getCurrentState();\n-            sessionState.setCurrentState(StateManager.State.CLOSING);\n-            // Copy to prevent concurrent mod exceptions.\n-            subscriberSetCopy.addAll(subscriptions.getAllConsumersSet());\n-        }\n-\n-        StateManager.State nextState = prevState;\n-\n-        try {\n-            rollbackTransactionState();\n-            connection.removeSession(this);\n-\n-            // Close all publishers - doing this within synchronized block to prevent any possibility\n-            // of race conditions.\n-            // Potentially expensive, but it is a tradeoff between correctness and performance :-(\n-            if (logger.isTraceEnabled()) logger.trace(\"Closing \" + subscriberSetCopy.size() + \" subscribers\");\n-            for (MessageConsumer subscriber : subscriberSetCopy){\n-                try {\n-                    subscriber.close();\n-                } catch (JMSException e) {\n-                    // Log and ignore\n-                    if (logger.isDebugEnabled()) {\n-                        logger.debug(\"Error unsubscribing from destination for entry : \" + subscriber);\n-                        DebugUtil.dumpJMSStacktrace(logger, e);\n-                    }\n-                }\n-            }\n-            sessionFacade.close();\n-            nextState = StateManager.State.CLOSED;\n-        } finally {\n-\n-            // set status and notify.\n-            synchronized (lockObject){\n-                lockObject.notifyAll();\n-                sessionState.setCurrentState(nextState);\n-            }\n-        }\n-\n-        if (logger.isTraceEnabled()) logger.trace(this + \"Waiting for messageListenerThreadStarted \" +\n-            messageListenerThreadStarted + \", messageListenerThreadFinished \" + messageListenerThreadFinished);\n-\n-        // spin on messageListenerThreadFinished\n-        // spin ONLY if we are NOT within the listener already !\n-        if (! closeFromWithinListener.get()){\n-            synchronized (lockObject){\n-                long waitTime = 100;\n-                long retryCount = StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE / waitTime;\n-                if (messageListenerThreadStarted) {\n-                    while (!messageListenerThreadFinished) {\n-                        try {\n-                            lockObject.wait(waitTime);\n-                        } catch (InterruptedException e) {\n-                            // ignore ...\n-                            if (logger.isDebugEnabled()) logger.debug(\"interrupted ?\", e);\n-                        }\n-                        retryCount --;\n-                        // Fail if we have waiting long enough ... hardcoded for now.\n-                        if (retryCount <= 0) break;\n-                    }\n-                }\n-            }\n-        }\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"Waiting for messageListenerThreadFinished \" +\n-            messageListenerThreadFinished + \" DONE\");\n-    }\n-\n-    @Override\n-    public void recover() throws JMSException {\n-        // Typically will be in stopped state.\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (getTransacted())\n-          throw new javax.jms.IllegalStateException(\"cannot invoke recover in transacted session.\");\n-        throw new JMSException(\"recovery : TODO\");\n-    }\n-\n-    @Override\n-    public MessageListener getMessageListener() {\n-        return messageListener;\n-    }\n-\n-    @Override\n-    public void setMessageListener(final MessageListener messageListener) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        // Explicitly forbidding it for now : leads to too many complexities otherwise.\n-        // start session ONLY AFTER you have set the listener.\n-        if (messageListener != this.messageListener && sessionState.isInStartMode()) {\n-            throw new JMSException(\"Set the message listener BEFORE starting session (and/or connection)\");\n-        }\n-\n-        this.messageListener = messageListener;\n-    }\n-\n-    @Override\n-    public void run() {\n-        if (logger.isTraceEnabled()) logger.trace(\"Session thread started\");\n-        try {\n-            while (!isClosed()){\n-                final List<ReceivedMessage> messageListCopy;\n-                final List<TransactedReceiveOperation> rolledbackMessageListCopy;\n-                final MessageListener msglistener;\n-                synchronized (lockObject){\n-                    while (!isClosed() &&\n-                            (!sessionState.isStarted() ||\n-                                (null == getMessageListener() && 0 == subscriptions.getNumSubscribers()) ||\n-                                (messageList.isEmpty() && rolledbackMessageList.isEmpty())\n-                            )\n-                        ) {\n-                        // Check for buffer over-run's due to no listener being available !\n-                        if (messageList.size() > MAX_SESSION_BUFFERED_MESSAGES){\n-                            // simply discard it with an error logged.\n-                            if (logger.isInfoEnabled()) logger.info(\"Discarding \" + messageList.size() +\n-                                \" messages since there are no consumers for them\");\n-                            messageList.clear();\n-                        }\n-                        // Check for buffer over-run's due to no listener being available !\n-                        if (rolledbackMessageList.size() > MAX_SESSION_BUFFERED_MESSAGES){\n-                            // simply discard it with an error logged.\n-                            if (logger.isInfoEnabled()) logger.info(\"Discarding \" + rolledbackMessageList.size() +\n-                                \" messages since there are no consumers for them from recovered list.\");\n-                            rolledbackMessageList.clear();\n-                        }\n-\n-                        if (logger.isTraceEnabled()) logger.trace(this + \"sessionState : \" + sessionState +\n-                            \", listener \" + getMessageListener() + \", numSubscribers : \" +\n-                            subscriptions.getNumSubscribers());\n-                        try {\n-                            lockObject.wait(500);\n-                        } catch (InterruptedException e) {\n-                            // Should we ignore this ? There is no way this thread can be interrupted currently -\n-                            // while closing it will cause issues !\n-                            // Log and forget\n-                            if (logger.isDebugEnabled()) {\n-                                logger.debug(\"Ignoring interrupted exception\", e);\n-                            }\n-                        }\n-                    }\n-\n-                    if (isClosed()) break;\n-                    msglistener = getMessageListener();\n-                    messageListCopy = new ArrayList<ReceivedMessage>(messageList);\n-                    rolledbackMessageListCopy = new ArrayList<TransactedReceiveOperation>(rolledbackMessageList);\n-                    messageList.clear();\n-                    rolledbackMessageList.clear();\n-                    assert subscriptions.getNumSubscribers() > 0 || null != msglistener;\n-                }\n-\n-                if (logger.isTraceEnabled()) logger.trace(\"Processing \" + messageListCopy.size() +\n-                    \" messages using listener ? \" + (null != msglistener));\n-\n-                dispatchReceivedMessagesToSubscribers(msglistener, messageListCopy, rolledbackMessageListCopy);\n-            }\n-        } finally {\n-            String msg = null;\n-            synchronized (lockObject){\n-                lockObject.notifyAll();\n-                messageListenerThreadFinished = true;\n-                if (logger.isTraceEnabled()) msg = \"Exiting thread and setting \" +\n-                    messageListenerThreadFinished;\n-            }\n-            if (logger.isTraceEnabled()) logger.trace(msg);\n-        }\n-    }\n-\n-    private void dispatchReceivedMessagesToSubscribers(MessageListener sessionMessageListener,\n-                                                       List<ReceivedMessage> messageListCopy,\n-                                                       List<TransactedReceiveOperation> rolledbackMessageListCopy) {\n-        assert null != messageListCopy;\n-\n-        // Doing it before processing messageList.\n-        handleRollbackInDispatch(rolledbackMessageListCopy);\n-\n-        for (final ReceivedMessage receivedMessage : messageListCopy){\n-\n-            if (isClosed()) break;\n-\n-            // It is possible that previous listener rolledback transaction ... check that before\n-            // delivering the other messages !\n-            // Else we will mess up the oder of message delivery.\n-            {\n-                int retryCount = 0;\n-                while (retryCount < RETRY_DISPATCH_TO_TRANSACTION_ATTEMPTS){\n-                    if (! handleRollbackInDispatch(null)) break;\n-                    retryCount ++;\n-                }\n-                if (RETRY_DISPATCH_TO_TRANSACTION_ATTEMPTS == retryCount){\n-                    // we cant do much - close session and abort.\n-                    try {\n-                        SessionImpl.this.close();\n-                    } catch (JMSException e) {\n-                        if (logger.isDebugEnabled()) logger.debug(\"Exception closing session\", e);\n-                    }\n-                    return ;\n-                }\n-            }\n-\n-            final Subscription subscription = createSubscription(receivedMessage.destinationType,\n-                receivedMessage.originalMessage.getSourceName(), receivedMessage.originalMessage.getSubscriberId());\n-\n-            // COW - so no need to worry about concurrent-mod's or inconsistent states - other than\n-            // potential stale state,\n-            // which is fine since MessageConsumer's are essentially immutable from basic state point\n-            // of view (subscriberId, destination).\n-            CopyOnWriteArrayList<? extends MessageConsumer> subscriberList =\n-                subscriptions.getSubscribers(subscription);\n-            if (null == subscriberList) continue;\n-\n-            if (! subscriberList.listIterator().hasNext()) continue;\n-\n-            // For selector support - pick up the last register\n-            Node ast = subscriptions.getSelectorExpression(subscription);\n-            if (logger.isTraceEnabled()) logger.trace(\"subscription : \" + subscription + \", selector : \" + ast);\n-            if (null != ast){\n-                // final Boolean value = SelectorParser.evaluateSelector(ast, receivedMessage.originalMessage);\n-                final Boolean value = SelectorParser.evaluateSelector(ast, receivedMessage.msg);\n-\n-                if (null == value){\n-                    if (logger.isDebugEnabled()) {\n-                        logger.debug(\"Unable to evaluate selector ? ... ignoring message\");\n-                        logger.debug(\"Message : \" + receivedMessage.msg);\n-                    }\n-                    receivedMessage.originalMessage.getAckRunnable().run();\n-                    continue;\n-                }\n-                if (! Boolean.TRUE.equals(value)){\n-                    if (logger.isTraceEnabled()) logger.trace(\"Selector DID NOT evaluate to true (\" +\n-                        value + \"), ignore message ignoring message\");\n-                    receivedMessage.originalMessage.getAckRunnable().run();\n-                    continue;\n-                }\n-            }\n-\n-\n-            if (null != sessionMessageListener){\n-                // Since there was atleast one subscriber when we started this loop (which might\n-                // not be case anymore, but that is just an uncontrollable harmless race)\n-                // we can send it to messageListener for the session.\n-                if (logger.isTraceEnabled()) logger.trace(\"Dispatching \" + receivedMessage.originalMessage +\n-                    \" to session listener\");\n-\n-                if (isMessageExpired(receivedMessage.originalMessage)){\n-                    // message already expired.\n-                    // This means we acknowledge for all subscribers with this subscription id ...\n-                    receivedMessage.originalMessage.getAckRunnable().run();\n-                    continue;\n-                }\n-\n-                try {\n-                    final MessageImpl message = MessageUtil.createCloneForDispatch(this,\n-                        receivedMessage.originalMessage, receivedMessage.originalMessage.getSourceName(),\n-                        receivedMessage.originalMessage.getSubscriberId());\n-                    deliverToListener(sessionMessageListener, receivedMessage, message, false);\n-                } catch (JMSException e) {\n-                    // Unexpected not to be able to clone ...\n-                    if (logger.isDebugEnabled()) {\n-                        logger.debug(\"Unexpected exception trying to process message\");\n-                        DebugUtil.dumpJMSStacktrace(logger, e);\n-                    }\n-                }\n-                continue;\n-            }\n-\n-            for (final MessageConsumer subscriber : subscriberList){\n-                if (isClosed()) break;\n-                try {\n-                    final MessageListener subscriberListener = subscriber.getMessageListener();\n-                    // Clone - since each subscrber can modify the message.  We are optimizing this\n-                    // to clone only if subscriberList\n-                    // has more than one subscriber to avoid the (potentially) expensive creation.\n-                    if (getNoLocal(subscription, subscriber)){\n-                        if (isLocallyPublished(receivedMessage.originalMessage.getJMSMessageID())){\n-                            // This means we acknowledge for all subscribers with this subscription id ...\n-                            receivedMessage.originalMessage.getAckRunnable().run();\n-                            continue;\n-                        }\n-                    }\n-                    if (isMessageExpired(receivedMessage.originalMessage)){\n-                        receivedMessage.originalMessage.getAckRunnable().run();\n-                        continue;\n-                    }\n-\n-                    final MessageImpl message = MessageUtil.createCloneForDispatch(this,\n-                        receivedMessage.originalMessage, receivedMessage.originalMessage.getSourceName(),\n-                        receivedMessage.originalMessage.getSubscriberId());\n-\n-                    if (logger.isTraceEnabled()) logger.trace(\"Dispatching \" + message +\n-                        \" to subscriber subscriberListener ? \" + (subscriberListener != null));\n-\n-                    if (null != subscriberListener) {\n-                        deliverToListener(subscriberListener, receivedMessage, message, false);\n-                    }\n-                    else {\n-                        sessionFacade.enqueueReceivedMessage(subscriber,\n-                            new ReceivedMessage(receivedMessage.originalMessage, message,\n-                                receivedMessage.destinationType), false);\n-                    }\n-\n-                    if (logger.isTraceEnabled()) logger.trace(\"Dispatching \" + message +\n-                        \" to subscriberListener ? \" + (subscriberListener != null) + \", DONE\");\n-                } catch (JMSException e) {\n-                    // Unexpected not to be able to clone ...\n-                    if (logger.isDebugEnabled()) {\n-                        logger.debug(\"Unexpected exception trying to process message\", e);\n-                    }\n-                    continue ;\n-                }\n-            }\n-        }\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"dispatchReceivedMessagesToSubscribers() DONE\");\n-    }\n-\n-    private boolean getNoLocal(Subscription subscription, MessageConsumer subscriber) throws JMSException {\n-        if (subscription.isTopic()) return ((TopicSubscriber) subscriber).getNoLocal();\n-        // nothing equivalent for queue.\n-        // if (subscription.isQueue()) return ((QueueReceiver) subscriber).getNoLocal();\n-        return false;\n-    }\n-\n-    // Note that rollback can happen WHILE a listener is being run - so we need to check this\n-    // between EACH message delivery :-(\n-    // Not just as part of block draining of the queue.\n-    // returns true if there was any async operation to rollback (specifically async !).\n-    private boolean handleRollbackInDispatch(List<TransactedReceiveOperation> rolledbackMessageListCopy) {\n-        if (null == rolledbackMessageListCopy) {\n-            // Attempt to drain the queue.\n-            synchronized (lockObject){\n-                if (rolledbackMessageList.isEmpty()) return false;\n-                rolledbackMessageListCopy = new ArrayList<TransactedReceiveOperation>(rolledbackMessageList);\n-                rolledbackMessageList.clear();\n-            }\n-        }\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"rolledbackMessageList (\" +\n-            rolledbackMessageListCopy.size() + \") ... \" + rolledbackMessageListCopy);\n-\n-        LinkedList<TransactedReceiveOperation> listenerDeliveryList = new LinkedList<TransactedReceiveOperation>();\n-        for (TransactedReceiveOperation receiveOp : rolledbackMessageListCopy){\n-            if (isClosed()) break;\n-            receiveOp.recover(listenerDeliveryList);\n-        }\n-        for (TransactedReceiveOperation receiveOp : listenerDeliveryList){\n-            if (isClosed()) break;\n-            receiveOp.recoverForListener();\n-        }\n-\n-        return listenerDeliveryList.size() > 0;\n-    }\n-\n-    private void deliverToListener(MessageListener sessionMessageListener, ReceivedMessage receivedMessage,\n-                                   MessageImpl theMessage, boolean redelivery) {\n-\n-      // NOT re-enterent method ...\n-        closeFromWithinListener.set(true);\n-        try {\n-            int errorRetry = 0;\n-            boolean success = false;\n-            final int retryFor =\n-                    (!getTransacted() &&\n-                            (Session.AUTO_ACKNOWLEDGE == getAcknowledgeMode() ||\n-                                    Session.CLIENT_ACKNOWLEDGE == getAcknowledgeMode()))\n-                    ? 3 : 1;\n-\n-            while (errorRetry < retryFor && !isClosed()){\n-                try {\n-                    if (redelivery || errorRetry > 0) theMessage.setJMSRedelivered(true);\n-\n-                    // Changed my mind, always ack the message before processing it. This seems to\n-                    // be consistent with activemq testcases too ...\n-                    handleAutomaticMessageAcknowledgement(receivedMessage, sessionMessageListener);\n-                    sessionMessageListener.onMessage(theMessage);\n-                    success = true;\n-                    break ;\n-                } catch (RuntimeException rEx){\n-                    // Badly behaved client, retry ...\n-                    if (logger.isInfoEnabled())\n-                      logger.info(\"Unexpected runtime exception from client message listener.\", rEx);\n-                }\n-                errorRetry ++;\n-            }\n-\n-            if (isClosed()) return ;\n-\n-            if (!success){\n-                // If failed, then reset transaction state - so that next txn will not get affected by this.\n-                rollbackTransactionState();\n-                // We gave up deliverying message ...\n-                if (retryFor > 1) {\n-                    if (logger.isInfoEnabled())\n-                      logger.info(\"Delivery of message to listener resulted in repeated failures, \" +\n-                          \" dropping message -  session recovery should be used to handle it.\");\n-                }\n-                else {\n-                    if (logger.isInfoEnabled()) logger.info(\"Use session recovery to handle message\");\n-                }\n-            }\n-        } finally {\n-            closeFromWithinListener.remove();\n-        }\n-    }\n-\n-    public MessagingSessionFacade.DestinationType findDestinationType(String destination) throws JMSException {\n-        return sessionFacade.findDestinationType(destination);\n-    }\n-\n-    public MessagingSessionFacade.DestinationType findDestinationType(Destination destination) throws JMSException {\n-        return sessionFacade.findDestinationType(destination);\n-    }\n-\n-    @Override\n-    public MessageProducer createProducer(Destination destination) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        connection.initConnectionClientID();\n-\n-        return createProducerImpl(findDestinationType(destination), destination);\n-    }\n-\n-    private MessageProducer createProducerImpl(MessagingSessionFacade.DestinationType type,\n-                                               Destination destination) throws JMSException {\n-        switch (type){\n-            case QUEUE:\n-                return sessionFacade.createQueueSender(destination);\n-            case TOPIC:\n-                return sessionFacade.createTopicPublisher(destination);\n-            default:\n-                throw new JMSException(\"Unable to find destination type \" + destination +\n-                    \", please use explicit queue/topic methods to create producer\");\n-        }\n-    }\n-\n-    // delegate to this IF this method can be invoked (specifically, if not QueueSession)\n-    protected TopicPublisher createPublisherImpl(Topic topic) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n-        connection.initConnectionClientID();\n-\n-        return (TopicPublisher) createProducerImpl(MessagingSessionFacade.DestinationType.TOPIC, topic);\n-    }\n-\n-\n-    @Override\n-    public MessageConsumer createConsumer(Destination destination) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == destination) throw new InvalidDestinationException(\"Illegal destination\");\n-        connection.initConnectionClientID();\n-\n-        return createConsumerImpl(findDestinationType(destination), destination);\n-    }\n-\n-    private MessageConsumer createConsumerImpl(MessagingSessionFacade.DestinationType type,\n-                                               Destination destination) throws JMSException {\n-        switch (type){\n-            case QUEUE:\n-                return sessionFacade.createQueueReceiver(destination);\n-            case TOPIC:\n-                return sessionFacade.createTopicSubscriber(destination);\n-            default:\n-                throw new JMSException(\"Unable to find destination type \" + destination +\n-                    \", please use explicit queue/topic methods to create consumer\");\n-        }\n-    }\n-\n-    // delegate to this IF this method can be invoked (specifically, if not QueueSession)\n-    protected TopicSubscriber createSubscriberImpl(Topic topic) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n-        connection.initConnectionClientID();\n-\n-        return (TopicSubscriber) createConsumerImpl(MessagingSessionFacade.DestinationType.TOPIC, topic);\n-    }\n-\n-    // delegate to this IF this method can be invoked (specifically, if not QueueSession)\n-    protected TopicSubscriber createSubscriberImpl(Topic topic, String messageSelector, boolean noLocal)\n-        throws JMSException {\n-\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n-        connection.initConnectionClientID();\n-\n-        return (TopicSubscriber) createConsumerImpl(MessagingSessionFacade.DestinationType.TOPIC,\n-            topic, messageSelector, noLocal);\n-    }\n-\n-\n-    @Override\n-    public MessageConsumer createConsumer(Destination destination, String messageSelector) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == destination) throw new InvalidDestinationException(\"Illegal destination\");\n-        connection.initConnectionClientID();\n-\n-        return createConsumer(destination, messageSelector, false);\n-    }\n-\n-    @Override\n-    public MessageConsumer createConsumer(Destination destination, String messageSelector,\n-                                          boolean noLocal) throws JMSException {\n-\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == destination) throw new InvalidDestinationException(\"Illegal destination\");\n-        connection.initConnectionClientID();\n-\n-        return createConsumerImpl(findDestinationType(destination), destination, messageSelector, noLocal);\n-    }\n-\n-    private MessageConsumer createConsumerImpl(MessagingSessionFacade.DestinationType type, Destination destination,\n-                                               String messageSelector, boolean noLocal) throws JMSException {\n-        switch (type){\n-            case QUEUE:\n-                return sessionFacade.createQueueReceiver(destination, messageSelector, noLocal);\n-            case TOPIC:\n-                return sessionFacade.createTopicSubscriber(destination, messageSelector, noLocal);\n-            default:\n-                throw new JMSException(\"Unable to find destination type \" + destination +\n-                    \", please use explicit queue/topic methods to create consumer\");\n-        }\n-    }\n-\n-    // TODO: Check if it is actually a Queue !\n-    @Override\n-    public Queue createQueue(String queueName) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        return (Queue) getDestination(MessagingSessionFacade.DestinationType.QUEUE, queueName);\n-    }\n-\n-    // delegate to this IF this method can be invoked (specifically, if not TopicSession)\n-    protected QueueReceiver createReceiverImpl(Queue queue) throws JMSException {\n-        return sessionFacade.createQueueReceiver(queue);\n-    }\n-\n-    // delegate to this IF this method can be invoked (specifically, if not QueueSession)\n-    protected QueueReceiver createReceiverImpl(Queue queue, String messageSelector) throws JMSException {\n-        return sessionFacade.createQueueReceiver(queue, messageSelector);\n-    }\n-\n-    // delegate to this IF this method can be invoked (specifically, if not QueueSession)\n-    protected QueueSender createSenderImpl(Queue queue) throws JMSException {\n-        return sessionFacade.createQueueSender(queue);\n-    }\n-\n-    // TODO: Check if it is actually a Topic !\n-    @Override\n-    public Topic createTopic(String topicName) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == topicName) throw new InvalidDestinationException(\"Illegal destination\");\n-        connection.initConnectionClientID();\n-\n-        return (Topic) getDestination(MessagingSessionFacade.DestinationType.TOPIC, topicName);\n-    }\n-\n-    @Override\n-    public TopicSubscriber createDurableSubscriber(Topic topic, String subscribedId) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n-        if (null == subscribedId) throw new JMSException(\"Illegal subscribedId\");\n-        connection.initConnectionClientID();\n-\n-        subscriptions.registerSubscriberIdToTopic(subscribedId, topic.getTopicName());\n-        return sessionFacade.createDurableSubscriber(topic, createSubscriberId(subscribedId));\n-    }\n-\n-    @Override\n-    public TopicSubscriber createDurableSubscriber(Topic topic, String subscribedId, String messageSelector,\n-                                                   boolean noLocal) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n-        if (null == subscribedId) throw new JMSException(\"Illegal subscribedId\");\n-        connection.initConnectionClientID();\n-\n-        subscriptions.registerSubscriberIdToTopic(subscribedId, topic.getTopicName());\n-        return sessionFacade.createDurableSubscriber(topic, createSubscriberId(subscribedId),\n-            messageSelector, noLocal);\n-    }\n-\n-    @Override\n-    public void unsubscribe(String subscribedId) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        final String topicName = subscriptions.findTopicNameForSubscriberId(subscribedId);\n-        sessionFacade.unsubscribeFromTopic(topicName, createSubscriberId(subscribedId));\n-    }\n-\n-    public String createSubscriberId(final String subscribedId) throws JMSException {\n-        final String clientId = connection.getClientID();\n-        StringBuilder sb = new StringBuilder();\n-\n-        // Some arbitrary combination of client id and subscriber id.\n-        sb.append(\"CLIENT_ID:\");\n-        sb.append(clientId);\n-        sb.append('|');\n-        sb.append(\"SUBSCRIBER_ID:\");\n-        sb.append(subscribedId);\n-\n-        return sb.toString();\n-    }\n-\n-    /*\n-    public String createTemporaryTopicId() throws JMSException {\n-        final String clientId = connection.getClientID();\n-        StringBuilder sb = new StringBuilder();\n-\n-        // Some arbitrary combination of client id and subscriber id.\n-        sb.append(\"CLIENT_ID:\");\n-        sb.append(clientId);\n-        sb.append('|');\n-        sb.append(\"TOPIC_ID:\");\n-        sb.append(generateRandomString());\n-\n-        return sb.toString();\n-    }\n-    */\n-\n-    @Override\n-    public QueueBrowser createBrowser(Queue queue) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        return sessionFacade.createBrowser(queue);\n-    }\n-\n-    @Override\n-    public QueueBrowser createBrowser(Queue queue, String messageSelector) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        return sessionFacade.createBrowser(queue, messageSelector);\n-    }\n-\n-    @Override\n-    public TemporaryQueue createTemporaryQueue() throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        return sessionFacade.createTemporaryQueue();\n-    }\n-\n-    @Override\n-    public TemporaryTopic createTemporaryTopic() throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-\n-        return sessionFacade.createTemporaryTopic();\n-    }\n-\n-    public void subscriberCreated() {\n-        // subscriberCreatedCount ++;\n-    }\n-\n-    public void acknowledge(MessageImpl message) throws JMSException {\n-        if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        // If NOT in explicit acknowledge mode, ignore request.\n-        if (Session.CLIENT_ACKNOWLEDGE != getAcknowledgeMode()) return;\n-        // If in transaction, ignore request.\n-        if (getTransacted()) return ;\n-\n-        sessionFacade.acknowledge(message);\n-    }\n-\n-    public String toName(Destination destination) throws JMSException {\n-        if (destination instanceof Topic) return ((Topic)destination).getTopicName();\n-        if (destination instanceof Queue) return ((Queue)destination).getQueueName();\n-\n-        throw new javax.jms.IllegalStateException(\"Unknown/unsupported destination \" + destination);\n-    }\n-\n-    public static Topic asTopic(final String topicName){\n-        return new Topic() {\n-            @Override\n-            public String getTopicName() throws JMSException {\n-                return topicName;\n-            }\n-\n-            @Override\n-            public String toString(){\n-                return topicName;\n-            }\n-        };\n-    }\n-\n-\n-    public static Queue asQueue(final String queueName){\n-        return new Queue() {\n-            @Override\n-            public String getQueueName() throws JMSException {\n-                return queueName;\n-            }\n-\n-            @Override\n-            public String toString(){\n-                return queueName;\n-            }\n-        };\n-    }\n-    // TODO: Convert to JNDI lookup.\n-    public Destination getDestination(final MessagingSessionFacade.DestinationType type,\n-                                      final String destination) throws JMSException {\n-        switch (type){\n-            case TOPIC:\n-                return asTopic(destination);\n-            case QUEUE:\n-                return asQueue(destination);\n-            default:\n-                throw new JMSException(\"Unknown destination type \" + type +\n-                    \" for destination \" + destination);\n-        }\n-    }\n-\n-    public static String generateRandomString() {\n-        // UUID is expensive, but using it for now ...\n-        return UUID.randomUUID().toString();\n-    }\n-\n-    public void registerTopicSubscriptionInfo(TopicSubscription topicSubscription, Node selectorAst) {\n-        subscriptions.registerTopicSubscriptionSelector(topicSubscription, selectorAst);\n-    }\n-\n-    public void registerQueueSubscriptionInfo(QueueSubscription queueSubscription, Node selectorAst) {\n-        subscriptions.registerQueueSubscriptionSelector(queueSubscription, selectorAst);\n-    }\n-\n-    // returns true IF we need to do an explicit subscribe to the topic (there was NO subscription to it earlier).\n-    public void registerTopicSubscriber(TopicSubscriber topicSubscriber) throws JMSException {\n-        registerSubscriber(topicSubscriber, MessagingSessionFacade.DestinationType.TOPIC,\n-            topicSubscriber.getTopic().getTopicName(), sessionFacade.getSubscriberId(topicSubscriber));\n-    }\n-\n-    public void registerQueueSubscriber(QueueReceiver queueReceiver) throws JMSException {\n-        registerSubscriber(queueReceiver, MessagingSessionFacade.DestinationType.QUEUE,\n-            queueReceiver.getQueue().getQueueName(), sessionFacade.getSubscriberId(queueReceiver));\n-    }\n-\n-    private void registerSubscriber(MessageConsumer subscriber, MessagingSessionFacade.DestinationType type,\n-                                   final String destination, final String subscriberId) throws JMSException {\n-\n-        assert MessagingSessionFacade.DestinationType.QUEUE == type ||\n-            MessagingSessionFacade.DestinationType.TOPIC == type;\n-\n-        boolean needSubscription = false;\n-        boolean needDelivery = false;\n-        if (logger.isTraceEnabled()) logger.trace(\"Registering ... \" + subscriber + \" for \" + destination +\n-            \", sid \" + subscriberId);\n-\n-        synchronized (lockObject){\n-            if (sessionState.isInCloseMode()) throw new JMSException(\"Already closed\");\n-\n-            // already subscribed.\n-            if (! subscriptions.addToSubscriberSet(subscriber)) return ;\n-\n-            if (subscriptions.addToSubscribers(subscriber, type, destination, subscriberId)) {\n-                // needSubscription = sessionState.isStarted();\n-                needSubscription = ! sessionState.isInCloseMode();\n-                needDelivery = sessionState.isStarted();\n-            }\n-        }\n-\n-        // TODO: There is a potential race here between registering/starting subscription and\n-        // stopping/closing subscription(s) elsewhere.\n-        // We should resolve it by taking a per List lock (which is gauranteed to be non-null here)\n-        // and a per List subscription status.\n-        // For now, NOT handling crazy edge-cases like this - under most circumsances, this will\n-        // fail for other reasons anyway !\n-\n-        // Session must be used by clients only in a thread safe manner, since it is ok to do this\n-        // outside the lock.\n-        if (needSubscription){\n-            if (logger.isTraceEnabled()) logger.trace(\"Subscribing ... \" + subscriber + \" for \" +\n-                destination + \", sid \" + subscriberId);\n-\n-            if (MessagingSessionFacade.DestinationType.TOPIC == type){\n-                // Only for topic's, right ?\n-                try {\n-                    sessionFacade.subscribeToTopic(destination, subscriberId);\n-                } catch (JMSException e){\n-                    // It might be possible for this to fail ...\n-                    // Log and ignore\n-                    if (logger.isDebugEnabled()) {\n-                        logger.debug(\"Error subscribing from topic for entry : \" + subscriberId);\n-                        DebugUtil.dumpJMSStacktrace(logger, e);\n-                    }\n-                }\n-            }\n-            if (logger.isTraceEnabled()) logger.trace(\"Subscribing ... \" + subscriber + \" for \" +\n-                destination + \", sid \" + subscriberId + \" DONE\");\n-        }\n-\n-        if (needDelivery) {\n-            if (MessagingSessionFacade.DestinationType.TOPIC == type){\n-                if (logger.isTraceEnabled()) logger.trace(\"Topic delivery ... \" + subscriber + \" for \" +\n-                    destination + \", sid \" + subscriberId);\n-                sessionFacade.startTopicDelivery(destination, subscriberId);\n-                if (logger.isTraceEnabled()) logger.trace(\"Topic delivery ... \" + subscriber + \" for \" +\n-                    destination + \", sid \" + subscriberId + \" DONE\");\n-            }\n-            else {\n-                if (logger.isTraceEnabled()) logger.trace(\"Queue delivery ... \" + subscriber + \" for \" +\n-                    destination + \", sid \" + subscriberId);\n-                sessionFacade.startQueueDelivery(destination, subscriberId);\n-                if (logger.isTraceEnabled()) logger.trace(\"Queue delivery ... \" + subscriber + \" for \" +\n-                    destination + \", sid \" + subscriberId + \" DONE\");\n-            }\n-        }\n-\n-        if (logger.isTraceEnabled()) logger.trace(\"registerSubscriber ... \" + messageListenerThreadStarted);\n-        if (! messageListenerThreadStarted){\n-            try {\n-                this.messageListenerThread.start();\n-            } catch (IllegalThreadStateException  itse){\n-                // ignore\n-                // This should not happen, it will happen when Session is used in an MT-unsafe manner,\n-                // contrary to what is expected from JMS.\n-                if (logger.isDebugEnabled()) logger.debug(\"Unexpected\", itse);\n-            }\n-            messageListenerThreadStarted = true;\n-        }\n-        if (logger.isTraceEnabled()) logger.trace(\"registerSubscriber ... DONE\");\n-    }\n-\n-    public void unregisterTopicSubscriber(TopicSubscriber topicSubscriber) throws JMSException {\n-        unregisterSubscriber(topicSubscriber, MessagingSessionFacade.DestinationType.TOPIC,\n-            topicSubscriber.getTopic().getTopicName(), sessionFacade.getSubscriberId(topicSubscriber));\n-    }\n-\n-    public void unregisterQueueReceiver(QueueReceiver queueReceiver) throws JMSException {\n-        unregisterSubscriber(queueReceiver, MessagingSessionFacade.DestinationType.QUEUE,\n-            queueReceiver.getQueue().getQueueName(), sessionFacade.getSubscriberId(queueReceiver));\n-    }\n-\n-    private void unregisterSubscriber(MessageConsumer subscriber, MessagingSessionFacade.DestinationType type,\n-                                      final String destination, final String subscriberId) throws JMSException {\n-\n-        assert MessagingSessionFacade.DestinationType.QUEUE == type ||\n-            MessagingSessionFacade.DestinationType.TOPIC == type;\n-        final boolean stopDelivery;\n-\n-        synchronized (lockObject){\n-            // if in closing, continue on anyway ...\n-            if (isClosed()) return ;\n-\n-            stopDelivery = subscriptions.removeSubscriber(subscriber, type, destination, subscriberId);\n-            if (stopDelivery) {\n-                if (! subscriptions.getAllConsumersSet().remove(subscriber)) return ;\n-            }\n-        }\n-\n-        // Session is expected to be used in a MT safe manner, since it is MT-unsafe.\n-        if (stopDelivery){\n-            if (MessagingSessionFacade.DestinationType.TOPIC == type){\n-                stopTopicDelivery(destination, subscriberId);\n-            }\n-            else {\n-                stopQueueDelivery(destination, subscriberId);\n-            }\n-        }\n-    }\n-\n-    public void handleAutomaticMessageAcknowledgement(ReceivedMessage receivedMessage,\n-                                                      MessageListener sessionMessageListener) {\n-        doHandleAutomaticMessageAcknowledgement(new TransactedReceiveOperation(receivedMessage,\n-            sessionMessageListener));\n-    }\n-\n-    public void handleAutomaticMessageAcknowledgement(ReceivedMessage receivedMessage, MessageConsumer subscriber) {\n-        doHandleAutomaticMessageAcknowledgement(new TransactedReceiveOperation(receivedMessage, subscriber));\n-    }\n-\n-    // This is a provider internal method.\n-    private void doHandleAutomaticMessageAcknowledgement(TransactedReceiveOperation receiveOperation) {\n-        if (isClosed()) return ;\n-        // If in transaction, ignore.\n-        if (transacted) {\n-            enqueueReceiveWithinTransaction(receiveOperation);\n-            return ;\n-        }\n-\n-        if (Session.AUTO_ACKNOWLEDGE == getAcknowledgeMode() ||\n-            Session.DUPS_OK_ACKNOWLEDGE == getAcknowledgeMode()){\n-            // Ignore (any) exceptions which might be thrown ...\n-            try {\n-                if (logger.isTraceEnabled()) logger.trace(\"acknowledging ... \" + receiveOperation);\n-                receiveOperation.receivedMessage.originalMessage.getAckRunnable().run();\n-            } catch (Exception ex){\n-                if (logger.isDebugEnabled()) {\n-                    logger.debug(\"Ignoring exception while sending ack ... \", ex);\n-                }\n-            }\n-        }\n-    }\n-\n-\n-    public void unsubscribeFromTopic(String topicName, String subscribedId) throws JMSException {\n-        sessionFacade.unsubscribeFromTopic(topicName, subscribedId);\n-    }\n-\n-    public void stopTopicDelivery(String topicName, String subscribedId) throws JMSException {\n-        sessionFacade.stopTopicDelivery(topicName, subscribedId);\n-    }\n-\n-    public void stopQueueDelivery(String queueName, String subscribedId) throws JMSException {\n-        sessionFacade.stopQueueDelivery(queueName, subscribedId);\n-    }\n-\n-    public void messageReceived(final MessageImpl msg, MessagingSessionFacade.DestinationType type)\n-        throws JMSException {\n-\n-        String traceMsg = null;\n-        ReceivedMessage receivedMessage = new ReceivedMessage(msg, msg, type);\n-        synchronized (lockObject){\n-            // ignore if closed ... continue on if in closing state.\n-            if (isClosed()) return ;\n-            messageList.add(receivedMessage);\n-\n-            if (!getTransacted() && CLIENT_ACKNOWLEDGE == getAcknowledgeMode()) {\n-                sessionFacade.registerUnAcknowledgedMessage(receivedMessage);\n-            }\n-\n-            lockObject.notifyAll();\n-            if (logger.isTraceEnabled()) traceMsg = \"messageReceived from \" + msg.getSourceName() +\n-                \", for \" + msg.getSubscriberId() + \" = \" + msg;\n-        }\n-\n-        if (logger.isTraceEnabled()) logger.trace(traceMsg);\n-    }\n-\n-    // A simple immutable datastructure to hold details about a message which has been recieved.\n-    public static class ReceivedMessage {\n-        // Ensure that the original message is NOT modified in any way !\n-        public final MessageImpl originalMessage;\n-        // This is the message returned to the client : to the listener and/or in the TopicSubscriberImpl -\n-        // created as a\n-        // clone of the originalMessage.\n-        public final MessageImpl msg;\n-\n-        public final MessagingSessionFacade.DestinationType destinationType;\n-\n-        private ReceivedMessage(MessageImpl originalMessage, MessageImpl msg,\n-                                MessagingSessionFacade.DestinationType destinationType) {\n-            this.originalMessage = originalMessage;\n-            this.msg = msg;\n-            this.destinationType = destinationType;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"ReceivedMessage\");\n-            sb.append(\"{originalMessage=\").append(originalMessage);\n-            sb.append(\", msg=\").append(msg);\n-            sb.append(\", destinationType=\").append(destinationType);\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    // required to catch resource leaks ...\n-    @Override\n-    protected void finalize() throws Throwable {\n-        super.finalize();\n-        if (!sessionState.isInCloseMode()) {\n-            if (logger.isErrorEnabled()) logger.error(\"Session was NOT closed before it went out of scope\");\n-            close();\n-        }\n-    }\n-\n-    public boolean isClosed() {\n-        return sessionState.isClosed();\n-    }\n-\n-\n-    // TODO: Introduce a daemon thread which periodically updates this - each call to\n-    // System.currentTimeMillis is a native call\n-    // And can be very expensive if there are a lot of concurrent invocations to it : learnings\n-    // from XMPP server circa 2006 !\n-    public static long currentTimeMillis() {\n-        return System.currentTimeMillis();\n-    }\n-\n-    public Subscription createSubscription(MessagingSessionFacade.DestinationType type, String name,\n-                                           String subscriberId){\n-        switch(type){\n-          case QUEUE:\n-              return new QueueSubscription(name, subscriberId);\n-          case TOPIC:\n-              return new TopicSubscription(name, subscriberId);\n-          default:\n-              throw new IllegalArgumentException(\"Unknown destination type \" + type +\n-                  \" for destination \" + name + \", subscriberId \" + subscriberId);\n-        }\n-    }\n-    public interface Subscription {\n-        public boolean isTopic();\n-        public boolean isQueue();\n-    }\n-\n-    public static final class TopicSubscription implements Subscription {\n-        public final String topicName;\n-        public final String subscriberId;\n-\n-        public TopicSubscription(String topicName, String subscriberId) {\n-            if (null == topicName || null == subscriberId) {\n-                throw new NullPointerException(\"Unexpected null as parameter topicName: \" +\n-                    topicName + \", subscriberId: \" + subscriberId);\n-            }\n-            this.topicName = topicName;\n-            this.subscriberId = subscriberId;\n-        }\n-\n-        public boolean isTopic() { return true; }\n-\n-        public boolean isQueue() { return false; }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-\n-            TopicSubscription that = (TopicSubscription) o;\n-\n-            if (!subscriberId.equals(that.subscriberId)) return false;\n-            if (!topicName.equals(that.topicName)) return false;\n-\n-            return true;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            int result = topicName.hashCode();\n-            result = 31 * result + subscriberId.hashCode();\n-            return result;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"TopicSubscription\");\n-            sb.append(\"{topicName='\").append(topicName).append('\\'');\n-            sb.append(\", subscriberId='\").append(subscriberId).append('\\'');\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    public static final class QueueSubscription implements Subscription {\n-        public final String queueName;\n-        public final String subscriberId;\n-\n-        public QueueSubscription(String queueName, String subscriberId) {\n-            if (null == queueName || null == subscriberId) {\n-                throw new NullPointerException(\"Unexpected null as parameter queueName: \" +\n-                    queueName + \", subscriberId: \" + subscriberId);\n-            }\n-            this.queueName = queueName;\n-            this.subscriberId = subscriberId;\n-        }\n-\n-        public boolean isTopic() { return false; }\n-\n-        public boolean isQueue() { return true; }\n-\n-        @Override\n-        public boolean equals(Object o) {\n-            if (this == o) return true;\n-            if (o == null || getClass() != o.getClass()) return false;\n-\n-            QueueSubscription that = (QueueSubscription) o;\n-\n-            if (!subscriberId.equals(that.subscriberId)) return false;\n-            if (!queueName.equals(that.queueName)) return false;\n-\n-            return true;\n-        }\n-\n-        @Override\n-        public int hashCode() {\n-            int result = queueName.hashCode();\n-            result = 31 * result + subscriberId.hashCode();\n-            return result;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"QueueSubscription\");\n-            sb.append(\"{queueName='\").append(queueName).append('\\'');\n-            sb.append(\", subscriberId='\").append(subscriberId).append('\\'');\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-\n-    private static interface TransactedOperation {\n-        public void rollback();\n-        public void commit() throws JMSException;\n-        public boolean requiresStartedSession();\n-    }\n-\n-    private class TransactedSendOperation implements TransactedOperation {\n-        private final String destination;\n-        private final MessageImpl messageImpl;\n-        private final Message userMessage;\n-\n-        private TransactedSendOperation(String destination, MessageImpl messageImpl, Message userMessage) {\n-            this.destination = destination;\n-            this.messageImpl = messageImpl;\n-            this.userMessage = userMessage;\n-        }\n-\n-\n-        @Override\n-        public void commit() throws JMSException {\n-            String msgId = SessionImpl.this.sessionFacade.publish(destination, messageImpl);\n-            if (userMessage instanceof MessageImpl) ((MessageImpl) userMessage).setJMSMessageIDInternal(msgId);\n-            else userMessage.setJMSMessageID(msgId);\n-        }\n-\n-        public void rollback() {\n-            // noop ...\n-        }\n-\n-        @Override\n-        public boolean requiresStartedSession() {\n-            return false;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"TransactedSendOperation\");\n-            sb.append(\"{destination='\").append(destination).append('\\'');\n-            sb.append(\", messageImpl=\").append(messageImpl);\n-            sb.append(\", userMessage=\").append(userMessage);\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    private class TransactedReceiveOperation implements TransactedOperation {\n-        private final ReceivedMessage receivedMessage;\n-        private final MessageListener sessionMessageListener;\n-        private final MessageConsumer subscriber;\n-\n-        private TransactedReceiveOperation(ReceivedMessage receivedMessage, MessageListener sessionMessageListener) {\n-            this.receivedMessage = receivedMessage;\n-            this.sessionMessageListener = sessionMessageListener;\n-            this.subscriber = null;\n-        }\n-\n-        private TransactedReceiveOperation(ReceivedMessage receivedMessage, MessageConsumer subscriber) {\n-            this.receivedMessage = receivedMessage;\n-            this.subscriber = subscriber;\n-            this.sessionMessageListener = null;\n-        }\n-\n-        @Override\n-        public boolean requiresStartedSession() {\n-            return true;\n-        }\n-\n-        @Override\n-        public void rollback() {\n-\n-            // async dispatch ...\n-            if (null != sessionMessageListener) {\n-                synchronized (SessionImpl.this.lockObject){\n-                    rolledbackMessageList.add(this);\n-                    SessionImpl.this.lockObject.notifyAll();\n-                }\n-            }\n-            // If rollback in sync mode, do in same thread - else a rollback, receive WILL see messages\n-            // in different order !\n-            // This is also required since in async mode, session IS NOT MT-safe - and so is\n-            // expecting this behavior.\n-            else if (null != subscriber){\n-                try {\n-                    MessageImpl theMessage = MessageUtil.createCloneForDispatch(SessionImpl.this,\n-                            receivedMessage.originalMessage,\n-                            receivedMessage.originalMessage.getSourceName(),\n-                            receivedMessage.originalMessage.getSubscriberId());\n-                    theMessage.setJMSRedelivered(true);\n-\n-                    sessionFacade.enqueueReceivedMessage(subscriber,\n-                            new ReceivedMessage(receivedMessage.originalMessage, theMessage,\n-                                receivedMessage.destinationType), true);\n-                } catch (JMSException e) {\n-                    if (logger.isDebugEnabled()) {\n-                        logger.debug(\"Unable to enqueue received message to\");\n-                        DebugUtil.dumpJMSStacktrace(logger, e);\n-                    }\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void commit() throws JMSException {\n-            try {\n-                receivedMessage.originalMessage.getAckRunnable().run();\n-            } catch (Exception ex){\n-                if (logger.isDebugEnabled()) {\n-                    logger.debug(\"Ignoring exception while sending ack ... \", ex);\n-                }\n-            }\n-        }\n-\n-        /**\n-         * Recovery is slightly tricky - we have two cases here :\n-         * a) Messages which to be consumed via subscriber which support the sync mode - via receive(), variants.\n-         * b) Messages which are to be consumed via the subscriber or session's async mode - via listener.\n-         *\n-         *\n-         * We have to ensure that message recovery will result in the exact SAME order of message\n-         * delivery to client as it was done first time\n-         * (when rollback was triggered).\n-         * To ensure this, the recover method is called in REVERSE order in which operations were\n-         * enqueued in the txn (log) queue.\n-         *\n-         * To handle (a), sessionFacade.enqueueReceivedMessage pushes message to begining of pending\n-         * message queue in subscriber.\n-         * Taken along with reverse order of unwinding of txn log, this ensure the desired behavior for (a).\n-         *\n-         * To ensure desired behavior for (b), we pass a listenerDeliveryList as parameter - which is\n-         * used to maintain the\n-         * order of how to invoke onMessage to recover for async dispatch. Note: we keep adding to\n-         * begining of this list to ensure that\n-         * in the end, oldest message in txn log is the first message in listenerDeliveryList when\n-         * we attempt recovery.\n-         *\n-         */\n-        public void recover(LinkedList<TransactedReceiveOperation> listenerDeliveryList) {\n-            // Do the actual recovery ...\n-            if (null != subscriber){\n-                // already handled in rollback ...\n-                assert false : \"unexpected ...\";\n-            }\n-            else if (null != sessionMessageListener){\n-                listenerDeliveryList.addFirst(this);\n-            }\n-        }\n-\n-        public void recoverForListener(){\n-            assert null == subscriber;\n-            assert null != sessionMessageListener;\n-\n-            try {\n-                final MessageImpl message = MessageUtil.createCloneForDispatch(SessionImpl.this,\n-                        receivedMessage.originalMessage,\n-                        receivedMessage.originalMessage.getSourceName(),\n-                        receivedMessage.originalMessage.getSubscriberId());\n-                deliverToListener(sessionMessageListener, receivedMessage, message, true);\n-            } catch (JMSException e) {\n-                // Unexpected not to be able to clone ...\n-                if (logger.isDebugEnabled()) {\n-                    logger.debug(\"Unexpected exception trying to process message\");\n-                    DebugUtil.dumpJMSStacktrace(logger, e);\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"TransactedReceiveOperation\");\n-            sb.append(\"{receivedMessage=\").append(receivedMessage);\n-            sb.append(\", sessionMessageListener=\").append(sessionMessageListener);\n-            sb.append(\", subscriber=\").append(subscriber);\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-\n-    // For txn support.\n-    private final Object transactionLock = new Object();\n-    private final List<TransactedOperation> transactedOperation = new LinkedList<TransactedOperation>();\n-\n-    private void rollbackTransactionState(){\n-        final ArrayList<TransactedOperation> transactedOperationCopy;\n-        synchronized (transactionLock){\n-            transactedOperationCopy = new ArrayList<TransactedOperation>(transactedOperation);\n-            transactedOperation.clear();\n-        }\n-        rollbackTransactionState(transactedOperationCopy);\n-    }\n-\n-    private void rollbackTransactionState(ArrayList<TransactedOperation> transactedOperationCopy){\n-\n-        if (logger.isDebugEnabled()) logger.debug(\"Attempting to rollback \" +\n-            transactedOperationCopy.size() + \" operations\");\n-        if (logger.isTraceEnabled()) logger.trace(\"Operations : \" + transactedOperationCopy);\n-\n-        // Rollback MUST be in reverse order !\n-        final int size = transactedOperationCopy.size();\n-        for (int i = size - 1;i >= 0; i --){\n-            TransactedOperation op = transactedOperationCopy.get(i);\n-            op.rollback();\n-        }\n-    }\n-\n-\n-    // Note: the messageImpl MUST be a copy of what the user sent - so that modifications by user\n-    // WILL NOT affect this.\n-    public void enqueuePublishWithinTransaction(String topicName, MessageImpl messageImpl, Message userMessage) {\n-        TransactedSendOperation sendOperation = new TransactedSendOperation(topicName, messageImpl, userMessage);\n-        synchronized (transactionLock){\n-            transactedOperation.add(sendOperation);\n-        }\n-    }\n-\n-    private void enqueueReceiveWithinTransaction(TransactedReceiveOperation receiveOperation) {\n-        synchronized (transactionLock){\n-            transactedOperation.add(receiveOperation);\n-        }\n-    }\n-\n-    private void commitTransactionState() throws JMSException {\n-        final ArrayList<TransactedOperation> transactedOperationCopy;\n-        synchronized (transactionLock){\n-            transactedOperationCopy = new ArrayList<TransactedOperation>(transactedOperation);\n-            transactedOperation.clear();\n-        }\n-\n-        if (!sessionState.isStarted()){\n-            // Ensure that there are ONLY send op's - else throw TransactionRolledBackException : we\n-            // cannot ack message !\n-            for (TransactedOperation op : transactedOperationCopy){\n-                if (op.requiresStartedSession())\n-                  throw new TransactionRolledBackException(\"Commit failed : session is not open - cant ack message\");\n-            }\n-        }\n-\n-        for (TransactedOperation op : transactedOperationCopy){\n-            try {\n-                op.commit();\n-            } catch (JMSException jEx){\n-                if (logger.isDebugEnabled()) logger.debug(\"Commit failed for \" + op, jEx);\n-                rollbackTransactionState(transactedOperationCopy);\n-                TransactionRolledBackException trbEx = new TransactionRolledBackException(\"Commit failed\");\n-                trbEx.setLinkedException(jEx);\n-                throw trbEx;\n-            }\n-        }\n-    }\n-\n-    public boolean isMessageExpired(MessageImpl message) {\n-        return 0 != message.getJMSExpiration() && SessionImpl.currentTimeMillis() > message.getJMSExpiration();\n-    }\n-\n-    public boolean isLocallyPublished(String messageId) {\n-        return connection.isLocallyPublished(messageId);\n-    }\n-\n-    public void addToLocallyPublishedMessageIds(String messageId) {\n-        connection.addToLocallyPublishedMessageIds(messageId);\n-    }\n-\n-    public ConnectionImpl getConnection() {\n-        return connection;\n-    }\n-\n-    private static final class Subscriptions {\n-        // Keeps track of number of subscribers created. This will prevent setMessageListener form\n-        // succeeding in case subscriberCreatedCount > 0\n-        // Their use is mutually exclusive.\n-        // private int subscriberCreatedCount = 0;\n-        private AtomicInteger numSubscribers = new AtomicInteger(0);\n-\n-        private final ConcurrentHashMap<TopicSubscription, Node> topicSubscriptionToSelectorMap =\n-            new ConcurrentHashMap<TopicSubscription, Node>(32);\n-        private final ConcurrentHashMap<QueueSubscription, Node> queueSubscriptionToSelectorMap =\n-            new ConcurrentHashMap<QueueSubscription, Node>(32);\n-\n-        // We make use of concurrent api for this map (and its list) since we will be reading\n-        // it heavily concurrently while modifying it rarely.\n-        private final Map<Subscription, CopyOnWriteArrayList<MessageConsumer>> topicSubscriptionToSubscriberMap =\n-            new ConcurrentHashMap<Subscription, CopyOnWriteArrayList<MessageConsumer>>();\n-        private final Map<Subscription, CopyOnWriteArrayList<MessageConsumer>> queueSubscriptionToSubscriberMap =\n-            new ConcurrentHashMap<Subscription, CopyOnWriteArrayList<MessageConsumer>>();\n-\n-        // The value for the key is irrelevant - there is not\n-        private final Set<MessageConsumer> allConsumersSet = Collections.newSetFromMap(\n-            new IdentityHashMap<MessageConsumer, Boolean>());\n-\n-        private static final int SUBSCRIBER_ID_TO_DESTINATION_CACHE_SIZE =\n-            Integer.getInteger(\"SUBSCRIBER_ID_TO_DESTINATION_CACHE_SIZE\", 1024);\n-        // This is guarded by subscriberIdTo<Destination> lock - query/modify ONLY in that context !\n-        private final Map<String, String> topicSubscriberIdToTopicName =\n-            new LRUCacheMap<String, String>(SUBSCRIBER_ID_TO_DESTINATION_CACHE_SIZE, true);\n-\n-        public Map<Subscription, CopyOnWriteArrayList<MessageConsumer>> createSubscriptionToSubscriberMapCopy() {\n-          Map<Subscription, CopyOnWriteArrayList<MessageConsumer>> retval\n-              = new HashMap<Subscription, CopyOnWriteArrayList<MessageConsumer>>();\n-          retval.putAll(topicSubscriptionToSubscriberMap);\n-          retval.putAll(queueSubscriptionToSubscriberMap);\n-          return retval;\n-        }\n-\n-        public Set<MessageConsumer> getAllConsumersSet() {\n-          return allConsumersSet;\n-        }\n-\n-        public CopyOnWriteArrayList<? extends MessageConsumer> getSubscribers(Subscription subscription) {\n-            if (subscription.isTopic()) {\n-                assert subscription instanceof TopicSubscription;\n-                return topicSubscriptionToSubscriberMap.get(subscription);\n-            }\n-            if (subscription.isQueue()) {\n-                assert subscription instanceof QueueSubscription;\n-                return queueSubscriptionToSubscriberMap.get(subscription);\n-            }\n-            throw new IllegalArgumentException(\"Unknown subscription type \" + subscription);\n-        }\n-\n-        public Node getSelectorExpression(Subscription subscription) {\n-            if (subscription.isTopic()) {\n-                assert subscription instanceof TopicSubscription;\n-                return topicSubscriptionToSelectorMap.get(subscription);\n-            }\n-            if (subscription.isQueue()) {\n-                assert subscription instanceof QueueSubscription;\n-                return queueSubscriptionToSelectorMap.get(subscription);\n-            }\n-            throw new IllegalArgumentException(\"Unknown subscription type \" + subscription);\n-        }\n-\n-        public void registerSubscriberIdToTopic(String subscribedId, String topicName) throws JMSException {\n-            synchronized (topicSubscriberIdToTopicName){\n-                String currentTopicName = topicSubscriberIdToTopicName.get(subscribedId);\n-                if (null != currentTopicName && !currentTopicName.equals(topicName)) {\n-                    throw new JMSException(\"There is already a subscription in this session for \" +\n-                        \"same subscriberId for topic \" + currentTopicName);\n-                }\n-                topicSubscriberIdToTopicName.put(subscribedId, topicName);\n-            }\n-        }\n-\n-        public String findTopicNameForSubscriberId(String subscribedId) throws JMSException {\n-            synchronized (topicSubscriberIdToTopicName){\n-                String topicName = topicSubscriberIdToTopicName.get(subscribedId);\n-                if (null == topicName){\n-                    throw new JMSException(\"Unable to find topicName for subscriberId \" + subscribedId);\n-                }\n-                return topicName;\n-            }\n-        }\n-\n-        public void registerTopicSubscriptionSelector(TopicSubscription topicSubscription, Node selectorAst) {\n-            topicSubscriptionToSelectorMap.put(topicSubscription, selectorAst);\n-        }\n-\n-        public void registerQueueSubscriptionSelector(QueueSubscription queueSubscription, Node selectorAst) {\n-            queueSubscriptionToSelectorMap.put(queueSubscription, selectorAst);\n-        }\n-\n-        public boolean addToSubscriberSet(MessageConsumer consumer) {\n-            return allConsumersSet.add(consumer);\n-        }\n-\n-        public boolean addToSubscribers(MessageConsumer subscriber, MessagingSessionFacade.DestinationType type,\n-                                        String destination, String subscriberId) {\n-            switch (type){\n-              case QUEUE :\n-                return createIfMissingAndAdd(queueSubscriptionToSubscriberMap,\n-                    new QueueSubscription(destination, subscriberId),\n-                    subscriber);\n-              case TOPIC:\n-                return createIfMissingAndAdd(topicSubscriptionToSubscriberMap,\n-                    new TopicSubscription(destination, subscriberId),\n-                    subscriber);\n-              default:\n-                  throw new IllegalArgumentException(\"Unknown subscription type \" + type);\n-            }\n-        }\n-\n-        public boolean removeSubscriber(MessageConsumer subscriber, MessagingSessionFacade.DestinationType type,\n-                                        String destination, String subscriberId) {\n-            boolean retval = false;\n-            switch (type){\n-                case TOPIC:\n-                {\n-                    final CopyOnWriteArrayList<MessageConsumer> subscriberList =\n-                        topicSubscriptionToSubscriberMap.get(new TopicSubscription(destination, subscriberId));\n-                    if (null != subscriberList) {\n-                        if (subscriberList.remove(subscriber)){\n-                            numSubscribers.decrementAndGet();\n-                            if (subscriberList.isEmpty()){\n-                                // Unsubscribe\n-                                retval = true;\n-                            }\n-                        }\n-                    }\n-                    else retval = true;\n-                    break;\n-                }\n-                case QUEUE:\n-                {\n-                    final CopyOnWriteArrayList<MessageConsumer> subscriberList =\n-                        queueSubscriptionToSubscriberMap.get(new QueueSubscription(destination, subscriberId));\n-                    if (null != subscriberList) {\n-                        if (subscriberList.remove(subscriber)){\n-                            numSubscribers.decrementAndGet();\n-                            if (subscriberList.isEmpty()){\n-                                // Unsubscribe\n-                                retval = true;\n-                            }\n-                        }\n-                    }\n-                    else retval = true;\n-                    break;\n-                }\n-                default:\n-                    throw new IllegalArgumentException(\"Unknown subscription type \" + type);\n-            }\n-            return retval;\n-        }\n-\n-        // returns true IF a new list is inserted.\n-        private boolean createIfMissingAndAdd(Map<Subscription, CopyOnWriteArrayList<MessageConsumer>> map,\n-                                              Subscription key, MessageConsumer value) {\n-            boolean retval = false;\n-            if (!map.containsKey(key)) {\n-                map.put(key, new CopyOnWriteArrayList<MessageConsumer>());\n-            }\n-\n-            List<MessageConsumer>  list = map.get(key);\n-            if (list.isEmpty()) retval = true;\n-            if (!list.contains(value)) {\n-                list.add(value);\n-                numSubscribers.incrementAndGet();\n-            }\n-            return retval;\n-        }\n-\n-        public int getNumSubscribers() {\n-            return numSubscribers.get();\n-        }\n-    }\n-}"},{"sha":"26db51499e2337ce62f3abd59a3a40dbf0059920","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java","status":"removed","additions":0,"deletions":179,"changes":179,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/StateManager.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,179 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hedwig.jms;\n-\n-import org.slf4j.Logger;\n-\n-import javax.jms.JMSException;\n-\n-\n-/**\n-    Specific to jms package - NOT to be used elsewhere.\n-\n-    The util class allows for managing the current readiness 'state' of the object which hosts it\n-    along the axis of StateManager.State while being MT safe. Right now, both Connection and Session make use of it.\n-\n-    The lockObject is used to do timed wait's (which the host object will notify on) in case of async state changes.\n-\n-\n-    This is not a general purpose code, but specific to state transitions mentioned in jms spec.\n-\n-\n-    All use of the class goes like this :\n-\n-\n-    StateManager.State prevState;\n-    acquire lock:\n-        if in transition state, wait.\n-        if in expected state, return.\n-        if in error state, return/throw exception.\n-        if in valid state transition state -\n-            prevState = currentState.\n-            set to corresponding transition state (STARTING, CLOSING, etc).\n-        Other method specific changes.\n-    release lock:\n-\n-    nextState = prevState (in case state change failed, revert).\n-\n-    try {\n-        attempt state change.\n-        on success nextState = next valid state for this method.\n-    } finally {\n-        acquire lock:\n-          change state to nextState\n-        release lock:\n-    }\n-\n-    * So at any given point of time, the state will be in transition ONLY when there is an attempt\n-            being made to transition.\n-    * The state will always be in a final state at all other points of time.\n-    * No attempt will be made to change state while a transition state is currently in progress.\n- */\n-final class StateManager {\n-  public static final long WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE =\n-      Long.getLong(\"WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE\", 16000L);\n-\n-  static enum State {\n-        STARTING(true, false, true),\n-        STARTED(true, false, false),\n-        STOPPING(false, false, true),\n-        STOPPED(false, false, false),\n-        CLOSING(false, true, true),\n-        CLOSED(false, true, false);\n-\n-        private final boolean inStartMode;\n-        private final boolean inCloseMode;\n-        private final boolean inTransitionMode;\n-\n-        State(boolean inStartMode, boolean inCloseMode, boolean inTransitionMode) {\n-            this.inStartMode = inStartMode;\n-            this.inCloseMode = inCloseMode;\n-            this.inTransitionMode = inTransitionMode;\n-        }\n-\n-        public boolean isInStartMode() {\n-            return inStartMode;\n-        }\n-\n-        public boolean isInCloseMode() {\n-            return inCloseMode;\n-        }\n-\n-        public boolean isInTransitionMode() {\n-            return inTransitionMode;\n-        }\n-    }\n-\n-    // DO NOT do something silly like State.STARTING == currentState || State.STARTED == currentState, etc !\n-    private volatile State currentState;\n-    private final Object lockObject;\n-\n-    StateManager(State startStart, Object lockObject){\n-        this.currentState = startStart;\n-        this.lockObject = lockObject;\n-    }\n-\n-    State getCurrentState() {\n-        return currentState;\n-    }\n-\n-    boolean isStarted() {\n-        return State.STARTED == currentState;\n-    }\n-\n-    boolean isInStartMode() {\n-        return currentState.isInStartMode();\n-    }\n-\n-    boolean isStopped() {\n-        return State.STOPPED == currentState;\n-    }\n-\n-    boolean isClosed() {\n-        return State.CLOSED == currentState;\n-    }\n-\n-    // NOT locking explicitly : typically, already locked on lockObject\n-    boolean isInCloseMode() {\n-        return currentState.isInCloseMode();\n-    }\n-\n-    // NOT locking explicitly : typically, already locked on lockObject\n-    boolean isTransitionState() {\n-        return currentState.isInTransitionMode();\n-    }\n-\n-    void setCurrentState(State currentState) {\n-        this.currentState = currentState;\n-    }\n-\n-    // NOT locking explicitly : MUST be already locked on lockObject\n-    void waitForTransientStateChange(long timeout, Logger logger) throws JMSException {\n-        final long startTime = SessionImpl.currentTimeMillis();\n-        final int WAIT_UNIT = 100;\n-        int retryCount = (int)(timeout / WAIT_UNIT);\n-\n-        while (isTransitionState()) {\n-            try {\n-                // If we are NOT locked on lockObject, this will throw exception !\n-                lockObject.wait(WAIT_UNIT);\n-            } catch (InterruptedException e) {\n-                // bubble it up.\n-                JMSException jex = new JMSException(\"Thread interrupted ... \" + e);\n-                jex.setLinkedException(e);\n-                throw jex;\n-            }\n-            retryCount --;\n-            if (retryCount <= 0) {\n-                if (logger.isDebugEnabled()) DebugUtil.dumpAllStacktraces(logger);\n-                // throw new JMSException(\"wait timeout \" + (SessionImpl.currentTimeMillis() - startTime));\n-                throw new JMSException(\"wait for \" + (SessionImpl.currentTimeMillis() - startTime) + \" timeout\");\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public String toString() {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"StateManager\");\n-        sb.append(\"{currentState=\").append(currentState);\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-}"},{"sha":"2e0cddd7ca8d93ba7cfffda620213100b56b1230","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java","status":"removed","additions":0,"deletions":106,"changes":106,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContext.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,106 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.jndi;\n-\n-import org.apache.hedwig.jms.spi.HedwigConnectionFactoryImpl;\n-\n-import javax.jms.ConnectionFactory;\n-import javax.naming.Name;\n-import javax.naming.NamingException;\n-import javax.naming.directory.InitialDirContext;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Hashtable;\n-import java.util.Set;\n-\n-/**\n- * Based (very very loosely) on\n- * <a href=\"http://docs.oracle.com/javase/1.3/docs/guide/jndi/spec/spi/jndispi.fm.html\">jndi guide</a>. <br/>\n- * The InitialContext implementation clients should be using to get to our implementation. <br/>\n- * It is possible (by configuring via administrative means for example) to use a different DirContext\n- * to get to our provider implementation\n- * if the various classes exposed are the same as exposed via this DirContext.<br/>\n- * <p/>\n- * Ideally, the env property\n- * {@link javax.naming.Context.INITIAL_CONTEXT_FACTORY} \"java.naming.factory.initial\" is set to our factory\n- * {@link HedwigInitialContextFactory} classname which will return this InitialDirContext.\n- */\n-public class HedwigInitialContext extends InitialDirContext {\n-\n-    public static final String CONNECTION_FACTORY_NAME = \"jms/ConnectionFactory\";\n-    public static final String TOPIC_CONNECTION_FACTORY_NAME = \"jms/TopicConnectionFactory\";\n-    // public static final String QUEUE_CONNECTION_FACTORY_NAME = \"jms/QueueConnectionFactory\";\n-\n-    // Hardcoding to point to HedwigConnectionFactoryImpl by default.\n-    private static final Set<String> defaultNamesMapping;\n-    static {\n-        Set<String> set = new HashSet<String>(8);\n-\n-        // The actual name's for the various factories are bound by an admin. For convinence sake,\n-        // we are providing default bindings.\n-\n-        // The default connection\n-        set.add(\"jms/ConnectionFactory\");\n-        set.add(\"jms/TopicConnectionFactory\");\n-        // Add in future - for now, we do not support it.\n-        // set.add(\"jms/QueueConnectionFactory\");\n-\n-\n-        set.add(\"ConnectionFactory\");\n-        set.add(\"TopicConnectionFactory\");\n-        // Add in future - for now, we do not support it.\n-        // set.add(\"QueueConnectionFactory\");\n-        defaultNamesMapping = Collections.unmodifiableSet(set);\n-    }\n-\n-    protected HedwigInitialContext(boolean lazy) throws NamingException {\n-        super(lazy);\n-    }\n-\n-    public HedwigInitialContext() throws NamingException {\n-        super();\n-    }\n-\n-    public HedwigInitialContext(Hashtable<?, ?> environment) throws NamingException {\n-        super(environment);\n-    }\n-\n-    private ConnectionFactory ourLookup(String name){\n-        if (defaultNamesMapping.contains(name)){\n-            return new HedwigConnectionFactoryImpl();\n-        }\n-\n-        return null;\n-    }\n-\n-    @Override\n-    public Object lookup(String name) throws NamingException {\n-        ConnectionFactory factory = ourLookup(name);\n-        if (null != factory) return factory;\n-\n-        return super.lookup(name);\n-    }\n-\n-    @Override\n-    public Object lookup(Name name) throws NamingException {\n-        ConnectionFactory factory = ourLookup(name.toString());\n-        if (null != factory) return factory;\n-\n-        return super.lookup(name);\n-    }\n-}\n\\ No newline at end of file"},{"sha":"b701aad3256b689b0e7048cb784a5c9d89fd6f0d","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContextFactory.java","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContextFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContextFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/HedwigInitialContextFactory.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,33 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.jndi;\n-\n-import javax.naming.Context;\n-import javax.naming.NamingException;\n-import javax.naming.spi.InitialContextFactory;\n-import java.util.Hashtable;\n-\n-/**\n- * See HedwigInitialContext for more information.\n- */\n-public class HedwigInitialContextFactory implements InitialContextFactory {\n-    @Override\n-    public Context getInitialContext(Hashtable<?, ?> environment) throws NamingException {\n-        return new HedwigInitialContext(environment);\n-    }\n-}"},{"sha":"bab5787c4c6d7849888e41872a34c034fbb08248","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/package-info.html","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/package-info.html","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/package-info.html","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/jndi/package-info.html?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,65 +0,0 @@\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-\n-\n-Contains some default SHIM's to interface with JNDI - so that clients can use our JMS provider without\n-ANY code level ties.<br/>\n-The ideal way to use JNDI is to have administrator configure JNDI such that a well-known jndi NAME is\n-bound to \"org.apache.hedwig.jms.spi.HedwigConnectionFactoryImpl\" for Topic and JMS connection factory. <br/>\n-<p/>\n-<p/>\n-Alternatively, if the user is NOT within an admin controlled JNDI environment, there are two other\n-common options : <br/>\n-<ul>\n-  <li>Set the \"java.naming.factory.initial\" environment property to our Context factory\n-    \"org.apache.hedwig.jms.jndi.HedwigInitialContextFactory\"</li>\n-  <li>Directly instantiate the \"org.apache.hedwig.jms.jndi.HedwigInitialContext\" as a JNDI InitialContext\n-    and pull the relevant factories, via it.</li>\n-</ul>\n-\n-In either of these two cases, we expose 6 well defined 'names' for users, to pull the relevant\n-factories from the JNDI context.\n-<table border=\"1\">\n-  <tr>\n-    <th>JNDI name</th>\n-    <th>Connection factory</th>\n-  </tr>\n-  <tr>\n-    <td>jms/ConnectionFactory</td>\n-    <td>ConnectionFactory</td>\n-  </tr>\n-  <tr>\n-    <td>jms/TopicConnectionFactory</td>\n-    <td>TopicConnectionFactory</td>\n-  </tr>\n-  <tr>\n-    <td>jms/QueueConnectionFactory</td>\n-    <td>QueueConnectionFactory</td>\n-  </tr>\n-  <tr>\n-    <td>ConnectionFactory</td>\n-    <td>ConnectionFactory</td>\n-  </tr>\n-  <tr>\n-    <td>TopicConnectionFactory</td>\n-    <td>TopicConnectionFactory</td>\n-  </tr>\n-  <tr>\n-    <td>QueueConnectionFactory</td>\n-    <td>QueueConnectionFactory</td>\n-  </tr>\n-</table>"},{"sha":"fb564dcd5c23e9471741c7a8c439ef48140482cb","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/BytesMessageImpl.java","status":"removed","additions":0,"deletions":657,"changes":657,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/BytesMessageImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/BytesMessageImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/BytesMessageImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,657 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.message;\n-\n-import com.google.protobuf.ByteString;\n-import org.apache.hedwig.jms.SessionImpl;\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-\n-import javax.jms.BytesMessage;\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.MessageEOFException;\n-import javax.jms.MessageNotReadableException;\n-import javax.jms.MessageNotWriteableException;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.DataInputStream;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.util.Map;\n-\n-/**\n- * To be used for raw bytes ...\n- */\n-public class BytesMessageImpl extends MessageImpl implements BytesMessage {\n-    private ReadOnlyMessage readOnlyMessage;\n-    private WriteOnlyMessage writeOnlyMessage;\n-    private boolean readMode;\n-\n-    public BytesMessageImpl(SessionImpl session) throws JMSException {\n-        super(session);\n-        clearBody();\n-    }\n-\n-    // To clone a message\n-    public BytesMessageImpl(SessionImpl session, BytesMessageImpl message, String sourceTopicName,\n-                            String subscriberId) throws JMSException {\n-        super(session, (MessageImpl) message, sourceTopicName, subscriberId);\n-        try {\n-            if (message.readMode){\n-                this.readOnlyMessage = new ReadOnlyMessage(message.readOnlyMessage.getDataCopy());\n-                this.writeOnlyMessage = null;\n-            }\n-            else {\n-                this.readOnlyMessage = null;\n-                this.writeOnlyMessage = new WriteOnlyMessage(message.writeOnlyMessage.getPayloadAsBytes());\n-            }\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to clone/copy input message \" + message + \" .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-        this.readMode = message.readMode;\n-    }\n-\n-    // To clone a message from a BytesMessage which is NOT BytesMessageImpl\n-    // Changing order of parameter to NOT accidentally clash with the constructor above.\n-    // This is midly confusing, but helps a lot in preventing accidental bugs !\n-    public BytesMessageImpl(BytesMessage message, SessionImpl session) throws JMSException {\n-        super((Message) message, session);\n-\n-        if (message instanceof BytesMessageImpl) {\n-            throw new JMSException(\"Coding bug - should use this constructor ONLY for non \" +\n-                \"BytesMessageImpl messages\");\n-        }\n-\n-        // copy the bytes ...\n-        final byte[] data;\n-        {\n-            final long length = message.getBodyLength();\n-            if (length < 0 || length >= Integer.MAX_VALUE) throw new JMSException(\"Unreasonably \" +\n-                \"large value for body Length : \" + length);\n-\n-            data = new byte[(int) length];\n-            int read = 0;\n-            while (read < length){\n-                int sz = message.readBytes(data, read);\n-                read += sz;\n-            }\n-        }\n-\n-        try {\n-            this.writeOnlyMessage = new WriteOnlyMessage(data);\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to clone/copy input message \" + message + \" .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-        this.readOnlyMessage  = null;\n-        this.readMode = true;\n-    }\n-\n-    public BytesMessageImpl(SessionImpl session, PubSubProtocol.Message message, Map<String, Object> properties,\n-                            String sourceTopicName, String subscriberId, Runnable ackRunnable) throws JMSException {\n-        super(session, message, properties, sourceTopicName, subscriberId, ackRunnable);\n-\n-        this.readOnlyMessage = new ReadOnlyMessage(message.getBody().toByteArray());\n-        this.writeOnlyMessage = null;\n-        this.readMode = true;\n-    }\n-\n-    @Override\n-    protected MessageUtil.SupportedMessageTypes  getJmsMessageType() {\n-        return MessageUtil.SupportedMessageTypes.BYTES;\n-    }\n-\n-    protected boolean isBodyEmpty(){\n-        return false;\n-    }\n-\n-    @Override\n-    public PubSubProtocol.Message generateHedwigMessage() throws JMSException {\n-        PubSubProtocol.Message.Builder builder = PubSubProtocol.Message.newBuilder();\n-        super.populateBuilderWithHeaders(builder);\n-\n-        // Now set body and type.\n-        try {\n-            builder.setBody(ByteString.copyFrom(getPayloadData()));\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to read message data .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-\n-        return builder.build();\n-    }\n-\n-    @Override\n-    public long getBodyLength() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        return readOnlyMessage.getBodyLength();\n-    }\n-\n-    @Override\n-    public boolean readBoolean() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readBoolean();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public byte readByte() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readByte();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public int readUnsignedByte() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readUnsignedByte();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public short readShort() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readShort();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public int readUnsignedShort() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readUnsignedShort();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public char readChar() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readChar();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public int readInt() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readInt();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public long readLong() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readLong();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public float readFloat() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readFloat();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public double readDouble() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readDouble();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public String readUTF() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readUTF();\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public int readBytes(byte[] data) throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readBytes(data);\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public int readBytes(byte[] data, int length) throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readBytes(data, length);\n-        } catch (IOException eof){\n-            MessageEOFException eofEx = new MessageEOFException(\"eof ?\");\n-            eofEx.setLinkedException(eof);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeBoolean(boolean val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeBoolean(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeByte(byte val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeByte(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeShort(short val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeShort(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeChar(char val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeChar(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeInt(int val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeInt(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeLong(long val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeLong(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeFloat(float val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeFloat(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeDouble(double val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeDouble(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeUTF(String val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeUTF(val);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeBytes(byte[] data) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeBytes(data);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeBytes(byte[] data, int offset, int length) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeBytes(data, offset, length);\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    // This method is ONLY supposed to be used for object form of primitive types !\n-    @Override\n-    public void writeObject(Object obj) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            // unrolling it\n-            if (obj instanceof Boolean) {\n-                writeOnlyMessage.writeBoolean((Boolean) obj);\n-            }\n-            else if (obj instanceof Byte) {\n-                writeOnlyMessage.writeByte((Byte) obj);\n-            }\n-            else if (obj instanceof Short) {\n-                writeOnlyMessage.writeShort((Short) obj);\n-            }\n-            else if (obj instanceof Character) {\n-                writeOnlyMessage.writeChar((Character) obj);\n-            }\n-            else if (obj instanceof Integer) {\n-                writeOnlyMessage.writeInt((Integer) obj);\n-            }\n-            else if (obj instanceof Long) {\n-                writeOnlyMessage.writeLong((Long) obj);\n-            }\n-            else if (obj instanceof Float) {\n-                writeOnlyMessage.writeFloat((Float) obj);\n-            }\n-            else if (obj instanceof Double) {\n-                writeOnlyMessage.writeDouble((Double) obj);\n-            }\n-            else if (obj instanceof String) {\n-                writeOnlyMessage.writeUTF((String) obj);\n-            }\n-            else if (obj instanceof byte[]) {\n-                writeOnlyMessage.writeBytes((byte[]) obj);\n-            }\n-            else{\n-                throw new JMSException(\"Unsupported type for obj : \" + obj.getClass());\n-            }\n-        } catch (IOException ioEx){\n-            MessageEOFException eofEx = new MessageEOFException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void reset() throws JMSException {\n-        if (this.readMode) return ;\n-        try {\n-            this.readOnlyMessage = new ReadOnlyMessage(writeOnlyMessage.getPayloadAsBytes());\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to convert write-only message to read-only message .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-        this.readMode = true;\n-        this.writeOnlyMessage = null;\n-    }\n-\n-    @Override\n-    public void clearBody() throws JMSException {\n-        super.clearBody();\n-        this.writeOnlyMessage = new WriteOnlyMessage();\n-        this.readOnlyMessage = null;\n-        this.readMode = false;\n-    }\n-\n-    private byte[] getPayloadData() throws IOException {\n-        if (readMode) return readOnlyMessage.getDataCopy();\n-        return writeOnlyMessage.getPayloadAsBytes();\n-    }\n-\n-    @Override\n-    BytesMessageImpl createClone(SessionImpl session, String sourceTopicName, String subscriberId)\n-        throws JMSException {\n-        return new BytesMessageImpl(session, this, sourceTopicName, subscriberId);\n-    }\n-\n-    // Using java object's instead of primitives to avoid having to store schema separately.\n-    private static class ReadOnlyMessage {\n-\n-        private final DataInputStream dis;\n-        private final byte[] data;\n-\n-        public ReadOnlyMessage(byte[] data) {\n-            this.dis = new DataInputStream(new ByteArrayInputStream(data));\n-            this.data = data;\n-        }\n-\n-        public byte[] getDataCopy(){\n-            byte[] retval = new byte[data.length];\n-            System.arraycopy(data, 0, retval, 0, retval.length);\n-            return retval;\n-        }\n-\n-        public int getBodyLength() {\n-            return data.length;\n-        }\n-\n-        public boolean readBoolean() throws IOException {\n-            return dis.readBoolean();\n-        }\n-\n-        public byte readByte() throws IOException {\n-            return dis.readByte();\n-        }\n-\n-        public int readUnsignedByte() throws IOException {\n-            return dis.readUnsignedByte();\n-        }\n-\n-        public short readShort() throws IOException {\n-            return dis.readShort();\n-        }\n-\n-        public int readUnsignedShort() throws IOException {\n-            return dis.readUnsignedShort();\n-        }\n-\n-        public char readChar() throws IOException {\n-            return dis.readChar();\n-        }\n-\n-        public int readInt() throws IOException {\n-            return dis.readInt();\n-        }\n-\n-        public long readLong() throws IOException {\n-            return dis.readLong();\n-        }\n-\n-        public float readFloat() throws IOException {\n-            return dis.readFloat();\n-        }\n-\n-        public double readDouble() throws IOException {\n-            return dis.readDouble();\n-        }\n-\n-        public String readUTF() throws IOException {\n-            return dis.readUTF();\n-        }\n-\n-        public int readBytes(byte[] data) throws IOException {\n-            return dis.read(data);\n-        }\n-\n-        public int readBytes(byte[] data, int length) throws IOException {\n-            if (length < 0 || length > data.length)\n-              throw new IndexOutOfBoundsException(\"Invalid length specified : \" + length + \", data : \" + data.length);\n-            return dis.read(data, 0, length);\n-        }\n-    }\n-\n-    private static class WriteOnlyMessage {\n-\n-        private final ByteArrayOutputStream baos;\n-        private final DataOutputStream dos;\n-\n-        public WriteOnlyMessage(){\n-            baos = new ByteArrayOutputStream();\n-            dos = new DataOutputStream(baos);\n-        }\n-\n-        public WriteOnlyMessage(byte[] data) throws IOException {\n-            baos = new ByteArrayOutputStream();\n-            dos = new DataOutputStream(baos);\n-            dos.write(data);\n-        }\n-\n-        public byte[] getPayloadAsBytes() throws IOException {\n-            dos.flush();\n-            return baos.toByteArray();\n-        }\n-\n-        public void writeBoolean(boolean val) throws IOException {\n-            dos.writeBoolean(val);\n-        }\n-\n-        public void writeByte(byte val) throws IOException {\n-            dos.writeByte(val);\n-        }\n-\n-        public void writeShort(short val) throws IOException {\n-            dos.writeShort(val);\n-        }\n-\n-        public void writeChar(char val) throws IOException {\n-            dos.writeChar(val);\n-        }\n-\n-        public void writeInt(int val) throws IOException {\n-            dos.writeInt(val);\n-        }\n-\n-        public void writeLong(long val) throws IOException {\n-            dos.writeLong(val);\n-        }\n-\n-        public void writeFloat(float val) throws IOException {\n-            dos.writeFloat(val);\n-        }\n-\n-        public void writeDouble(double val) throws IOException {\n-            dos.writeDouble(val);\n-        }\n-\n-        public void writeUTF(String val) throws IOException {\n-            dos.writeUTF(val);\n-        }\n-\n-        public void writeBytes(byte[] data) throws IOException {\n-            dos.write(data);\n-        }\n-\n-        public void writeBytes(byte[] data, int offset, int length) throws IOException {\n-            dos.write(data, offset, length);\n-        }\n-    }\n-}\n\\ No newline at end of file"},{"sha":"af806fb4a5bbd39d078da93df892e424f9b036c2","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MapMessageImpl.java","status":"removed","additions":0,"deletions":295,"changes":295,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MapMessageImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MapMessageImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MapMessageImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,295 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.message;\n-\n-import com.google.protobuf.ByteString;\n-import org.apache.hedwig.jms.SessionImpl;\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-\n-import javax.jms.JMSException;\n-import javax.jms.MapMessage;\n-import javax.jms.Message;\n-import javax.jms.MessageNotWriteableException;\n-import java.io.IOException;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-\n-/**\n- * There is a weaker expectation of ordering and strong expectation of &lt;key, value&gt; container for data.\n- */\n-public class MapMessageImpl extends MessageImpl implements MapMessage {\n-    private final Map<String, Object> payload = new LinkedHashMap<String, Object>(4);\n-    private boolean readMode;\n-\n-    public MapMessageImpl(SessionImpl session) throws JMSException {\n-        super(session);\n-        clearBody();\n-    }\n-\n-    public MapMessageImpl(SessionImpl session, MapMessageImpl message, String sourceTopicName,\n-                          String subscriberId) throws JMSException {\n-        super(session, (MessageImpl) message, sourceTopicName, subscriberId);\n-        this.payload.putAll(message.payload);\n-        this.readMode = message.readMode;\n-    }\n-\n-    // To clone a message from a MapMessage which is NOT MapMessageImpl\n-    // Changing order of parameter to NOT accidentally clash with the constructor above.\n-    // This is midly confusing, but helps a lot in preventing accidental bugs !\n-    public MapMessageImpl(MapMessage message, SessionImpl session) throws JMSException {\n-        super((Message) message, session);\n-\n-        if (message instanceof MapMessageImpl) {\n-            throw new JMSException(\"Coding bug - should use this constructor ONLY for non MapMessageImpl messages\");\n-        }\n-\n-\n-        Enumeration keys = message.getMapNames();\n-        while (keys.hasMoreElements()){\n-            Object key = keys.nextElement();\n-            if (!(key instanceof String))\n-              throw new JMSException(\"Unsupported type (expected String) for key : \" + key);\n-\n-            String skey = (String) key;\n-            this.payload.put(skey, message.getObject(skey));\n-        }\n-        this.readMode = false;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public MapMessageImpl(SessionImpl session, PubSubProtocol.Message message,\n-                          Map<String, Object> properties, String sourceTopicName, String subscriberId,\n-                          Runnable ackRunnable) throws JMSException {\n-        super(session, message, properties, sourceTopicName, subscriberId, ackRunnable);\n-        try {\n-            this.payload.putAll((Map<String, Object>) MessageUtil.bytesToObject(message.getBody().toByteArray()));\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to read message data .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-        this.readMode = true;\n-    }\n-\n-    @Override\n-    protected MessageUtil.SupportedMessageTypes  getJmsMessageType() {\n-        return MessageUtil.SupportedMessageTypes.MAP;\n-    }\n-\n-    protected boolean isBodyEmpty(){\n-        return false;\n-    }\n-\n-    @Override\n-    public PubSubProtocol.Message generateHedwigMessage() throws JMSException {\n-        PubSubProtocol.Message.Builder builder = PubSubProtocol.Message.newBuilder();\n-        super.populateBuilderWithHeaders(builder);\n-\n-        // Now set body and type.\n-        try {\n-            builder.setBody(ByteString.copyFrom(MessageUtil.objectToBytes(this.payload)));\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to read message data .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-\n-        return builder.build();\n-    }\n-\n-    @Override\n-    public boolean getBoolean(String name) throws JMSException {\n-        return MessageUtil.asBoolean(payload.get(name));\n-    }\n-\n-    @Override\n-    public byte getByte(String name) throws JMSException {\n-        return MessageUtil.asByte(payload.get(name));\n-    }\n-\n-    @Override\n-    public short getShort(String name) throws JMSException {\n-        return MessageUtil.asShort(payload.get(name));\n-    }\n-\n-    @Override\n-    public char getChar(String name) throws JMSException {\n-        return MessageUtil.asChar(payload.get(name));\n-    }\n-\n-    @Override\n-    public int getInt(String name) throws JMSException {\n-        return MessageUtil.asInteger(payload.get(name));\n-    }\n-\n-    @Override\n-    public long getLong(String name) throws JMSException {\n-        return MessageUtil.asLong(payload.get(name));\n-    }\n-\n-    @Override\n-    public float getFloat(String name) throws JMSException {\n-        return MessageUtil.asFloat(payload.get(name));\n-    }\n-\n-    @Override\n-    public double getDouble(String name) throws JMSException {\n-        return MessageUtil.asDouble(payload.get(name));\n-    }\n-\n-    @Override\n-    public String getString(String name) throws JMSException {\n-        return MessageUtil.asString(payload.get(name));\n-    }\n-\n-    @Override\n-    public byte[] getBytes(String name) throws JMSException {\n-        return MessageUtil.asBytes(payload.get(name));\n-    }\n-\n-    @Override\n-    public Object getObject(String name) throws JMSException {\n-        return payload.get(name);\n-    }\n-\n-    @Override\n-    public Enumeration getMapNames() throws JMSException {\n-        return Collections.enumeration(payload.keySet());\n-    }\n-\n-    @Override\n-    public void setBoolean(String name, boolean value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-    }\n-\n-    @Override\n-    public void setByte(String name, byte value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setShort(String name, short value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setChar(String name, char value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setInt(String name, int value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setLong(String name, long value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setFloat(String name, float value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setDouble(String name, double value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setString(String name, String value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setBytes(String name, byte[] value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setBytes(String name, byte[] value, int i, int i1) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public void setObject(String name, Object value) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        if (!MessageUtil.isValidKey(name)) throw new IllegalArgumentException(\"Invalid key \" + name);\n-        payload.put(name, value);\n-\n-    }\n-\n-    @Override\n-    public boolean itemExists(String name) throws JMSException {\n-        return payload.containsKey(name);\n-    }\n-\n-    @Override\n-    public void clearBody() throws JMSException {\n-        super.clearBody();\n-        // allow read and write.\n-        this.payload.clear();\n-        this.readMode = false;\n-    }\n-\n-    @Override\n-    public void reset() throws JMSException {\n-        if (this.readMode) return ;\n-        this.readMode = true;\n-    }\n-\n-    @Override\n-    MapMessageImpl createClone(SessionImpl session, String sourceTopicName, String subscriberId) throws JMSException {\n-        return new MapMessageImpl(session, this, sourceTopicName, subscriberId);\n-    }\n-}"},{"sha":"d13feb033427fbe9cdce8118224ccd66df3ad838","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageImpl.java","status":"removed","additions":0,"deletions":872,"changes":872,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,872 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.message;\n-\n-import com.google.protobuf.ByteString;\n-import org.apache.hedwig.jms.SessionImpl;\n-import org.apache.hedwig.jms.message.header.MetadataProcessor;\n-import org.apache.hedwig.jms.selector.SelectorEvaluationException;\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import javax.jms.DeliveryMode;\n-import javax.jms.Destination;\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.MessageFormatException;\n-import javax.jms.MessageNotWriteableException;\n-import java.util.Collections;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-\n-/**\n- * Implementation of a message.\n- */\n-public class MessageImpl implements Message {\n-\n-    // This is of type byte for now - enough ?\n-    public static final String JMS_MESSAGE_TYPE_KEY = \"jmsBodyType\";\n-    // 'others' (non-jms clients) can depend on this boolean metadata property : for now, part\n-    // of jms values directly due to how metadata is being designed !\n-    // sigh :-(\n-    public static final String EMPTY_BODY_KEY = \"bodyEmpty\";\n-\n-\n-    private final static Logger logger = LoggerFactory.getLogger(MessageImpl.class);\n-\n-    public static final String JMS_MESSAGE_ID = \"JMSMessageID\";\n-    public static final String JMS_TIMESTAMP = \"JMSTimestamp\";\n-    public static final String JMS_CORRELATION_ID = \"JMSCorrelationID\";\n-    public static final String JMS_REPLY_TO = \"JMSReplyTo\";\n-    public static final String JMS_DESTINATION = \"JMSDestination\";\n-    public static final String JMS_DELIVERY_MODE = \"JMSDeliveryMode\";\n-    public static final String JMS_REDELIVERED = \"JMSRedelivered\";\n-    public static final String JMS_TYPE = \"JMSType\";\n-    public static final String JMS_EXPIRATION = \"JMSExpiration\";\n-    public static final String JMS_PRIORITY = \"JMSPriority\";\n-\n-    private static final Set<String> standardProperties;\n-    static {\n-        Set<String> set = new HashSet<String>(16);\n-        set.add(JMS_MESSAGE_ID);\n-        set.add(JMS_TIMESTAMP);\n-        set.add(JMS_CORRELATION_ID);\n-\n-        set.add(JMS_REPLY_TO);\n-        set.add(JMS_DESTINATION);\n-        set.add(JMS_DELIVERY_MODE);\n-\n-        // Currently simulated in provider - NOT from hedwig.\n-        set.add(JMS_REDELIVERED);\n-        set.add(JMS_TYPE);\n-\n-        set.add(JMS_EXPIRATION);\n-        set.add(JMS_PRIORITY);\n-\n-        standardProperties = Collections.unmodifiableSet(set);\n-    }\n-\n-    private final SessionImpl session;\n-    private final String serverJmsMessageId;\n-\n-    private String jmsMessageId;\n-    private long jmsTimestamp = 0;\n-    private String jmsCorrelationID;\n-\n-    private Destination jmsReplyTo;\n-    private Destination jmsDestination;\n-    private int jmsDeliveryMode = DeliveryMode.PERSISTENT;\n-\n-    private boolean jmsRedelivered;\n-    private String jmsType;\n-\n-    private long jmsExpiration = 0L;\n-    private int jmsPriority = Message.DEFAULT_PRIORITY;\n-\n-    // Note: this DOES NOT contain standard headers - which are explicitly handled.\n-    private boolean propertiesReadOnly = false;\n-    protected Map<String, Object> properties = new HashMap<String, Object>(4);\n-\n-    // key == standard property.\n-    private Set<String> standardPropertiesExists = new HashSet<String>(16);\n-    private Set<String> standardPropertiesExistsForWire = new HashSet<String>(16);\n-\n-    private final String sourceName;\n-    private final String subscriberId;\n-\n-    private final Runnable ackRunnable;\n-\n-    // This is to be set to true ONLY for testing - NOT otherwise !\n-    // The JMS api DOES NOT expose this ...\n-    // private boolean allowSpecifyJMSMessageIDForTest;\n-\n-    //private final PubSubProtocol.Message rawMessage;\n-\n-    public MessageImpl(SessionImpl session){\n-        this.session = session;\n-\n-        this.sourceName = null;\n-        this.subscriberId = null;\n-        this.ackRunnable = null;\n-        this.serverJmsMessageId = null;\n-        // this.rawMessage = null;\n-    }\n-\n-    MessageImpl(SessionImpl session, MessageImpl message, String sourceName, String subscriberId)\n-        throws JMSException {\n-        this.session = session;\n-        this.sourceName = sourceName;\n-        this.subscriberId = subscriberId;\n-        this.ackRunnable = message.getAckRunnable();\n-        this.serverJmsMessageId = message.getServerJmsMessageId();\n-        // this.rawMessage = null;\n-\n-        // Copy all properties from message to this class.\n-\n-        this.properties.putAll(message.properties);\n-\n-        // Now copy rest of the state over ...\n-        if (message.propertyExists(JMS_MESSAGE_ID)) setJMSMessageIDInternal(message.getJMSMessageID());\n-        if (message.propertyExists(JMS_TIMESTAMP)) setJMSTimestamp(message.getJMSTimestamp());\n-        if (message.propertyExists(JMS_CORRELATION_ID)) setJMSCorrelationID(message.getJMSCorrelationID());\n-        // We do not support this right now.\n-        // if (message.propertyExists(JMS_CORRELATION_ID_AS_BYTES))\n-        //    setJMSCorrelationIDAsBytes(message.getJMSCorrelationIDAsBytes());\n-        if (message.propertyExists(JMS_REPLY_TO)) setJMSReplyTo(message.getJMSReplyTo());\n-        if (message.propertyExists(JMS_DESTINATION)) setJMSDestination(message.getJMSDestination());\n-        if (message.propertyExists(JMS_DELIVERY_MODE)) setJMSDeliveryMode(message.getJMSDeliveryMode());\n-        if (message.propertyExists(JMS_REDELIVERED)) setJMSRedelivered(message.getJMSRedelivered());\n-        if (message.propertyExists(JMS_TYPE)) setJMSType(message.getJMSType());\n-        if (message.propertyExists(JMS_EXPIRATION)) setJMSExpiration(message.getJMSExpiration());\n-        if (message.propertyExists(JMS_PRIORITY)) setJMSPriority(message.getJMSPriority());\n-\n-        this.propertiesReadOnly = message.propertiesReadOnly;\n-    }\n-\n-    // To clone a message from a Message which is NOT MessageImpl\n-    // Changing order of parameter to NOT accidentally clash with the constructor above.\n-    // This is midly confusing, but helps a lot in preventing accidental bugs !\n-    MessageImpl(Message message, SessionImpl session) throws JMSException {\n-        this.session = session;\n-        this.sourceName = null;\n-        this.subscriberId = null;\n-        this.ackRunnable = null;\n-        this.serverJmsMessageId = null;\n-        // this.rawMessage = null;\n-\n-        assert (! (message instanceof MessageImpl ));\n-\n-        // Copy all properties from message to this class.\n-        Enumeration names = message.getPropertyNames();\n-        while (names.hasMoreElements()){\n-            Object name = names.nextElement();\n-            if (!(name instanceof String))\n-              throw new JMSException(\"Unsupported type (expected String) for key : \" + name);\n-\n-            String sname = (String) name;\n-            this.properties.put(sname, message.getObjectProperty(sname));\n-        }\n-\n-        // Now copy rest of the state over ...\n-        // JMS VIOLATION: we will be unable to check for propertyExists after this,\n-        //  at sender and receiver side ... sigh :-(\n-        setJMSMessageIDInternal(message.getJMSMessageID());\n-        setJMSTimestamp(message.getJMSTimestamp());\n-        setJMSCorrelationID(message.getJMSCorrelationID());\n-        // We do not support this right now.\n-        // setJMSCorrelationIDAsBytes(message.getJMSCorrelationIDAsBytes());\n-        setJMSReplyTo(message.getJMSReplyTo());\n-        setJMSDestination(message.getJMSDestination());\n-        setJMSDeliveryMode(message.getJMSDeliveryMode());\n-        setJMSRedelivered(message.getJMSRedelivered());\n-        setJMSType(message.getJMSType());\n-        setJMSExpiration(message.getJMSExpiration());\n-        setJMSPriority(message.getJMSPriority());\n-\n-        // Should be able to modify, right ?\n-        this.propertiesReadOnly = false;\n-\n-        // remove all jms standard keys from properties now : this should ideally result in zero\n-        // removals ... but we never know with client code !\n-        for (String key : standardProperties) properties.remove(key);\n-    }\n-\n-    MessageImpl(SessionImpl session, PubSubProtocol.Message message, Map<String, Object> properties,\n-                String sourceName, String subscriberId, Runnable ackRunnable) throws JMSException {\n-        this.session = session;\n-        this.sourceName = sourceName;\n-        this.subscriberId = subscriberId;\n-        this.ackRunnable = ackRunnable;\n-        // this.rawMessage = message;\n-\n-        // setJMSMessageID(getStringProperty(properties, JMS_MESSAGE_ID));\n-        setJMSMessageIDInternal(MessageUtil.generateJMSMessageIdFromSeqId(message.getMsgId()));\n-        this.serverJmsMessageId = getJMSMessageID();\n-\n-        if (properties.containsKey(JMS_TIMESTAMP)) setJMSTimestamp(getLongProperty(properties, JMS_TIMESTAMP));\n-        if (properties.containsKey(JMS_CORRELATION_ID)) setJMSCorrelationID(\n-            getStringProperty(properties, JMS_CORRELATION_ID));\n-        if (null != getStringProperty(properties, JMS_REPLY_TO)) {\n-            setJMSReplyTo(\n-                    session.getDestination(session.findDestinationType(getStringProperty(properties, JMS_REPLY_TO)),\n-                        getStringProperty(properties, JMS_REPLY_TO)\n-                    ));\n-        }\n-        if (null != getStringProperty(properties, JMS_DESTINATION)) {\n-            setJMSDestination(\n-                    session.getDestination(session.findDestinationType(\n-                        getStringProperty(properties, JMS_DESTINATION)),\n-                        getStringProperty(properties, JMS_DESTINATION)\n-                    ));\n-        }\n-\n-        if (properties.containsKey(JMS_DELIVERY_MODE)) setJMSDeliveryMode(\n-            getIntProperty(properties, JMS_DELIVERY_MODE));\n-        if (properties.containsKey(JMS_TYPE)) setJMSType(getStringProperty(properties, JMS_TYPE));\n-\n-        if (properties.containsKey(JMS_EXPIRATION)) setJMSExpiration(\n-            getLongProperty(properties, JMS_EXPIRATION));\n-        if (properties.containsKey(JMS_PRIORITY)) setJMSPriority(\n-            getIntProperty(properties, JMS_PRIORITY));\n-\n-\n-        // remove all jms standard keys from properties now : this should result in zero removals ...\n-        // but adding anyway.\n-        for (String key : standardProperties) properties.remove(key);\n-\n-        // Immutable after reading from stream !\n-        this.propertiesReadOnly = true;\n-        this.properties.putAll(properties);\n-    }\n-\n-    protected MessageUtil.SupportedMessageTypes getJmsMessageType(){\n-        // Validate against coding bug ... this MUST be overridden in all subclasses.\n-        if (getClass() != MessageImpl.class)\n-          throw new IllegalStateException(\"This method must be overridden by subclasses. class : \" + getClass());\n-        return MessageUtil.SupportedMessageTypes.ONLY_MESSAGE;\n-    }\n-\n-    public PubSubProtocol.Message generateHedwigMessage() throws JMSException {\n-        // This is to be called ONLY from the base class - all children MUST override it and NOT delegate to it.\n-        if (getClass() != MessageImpl.class) {\n-            throw new JMSException(\"Unexpected to call MessageImpl's generateHedwigMessage from subclass \" +\n-                getClass());\n-        }\n-\n-        PubSubProtocol.Message.Builder builder = PubSubProtocol.Message.newBuilder();\n-        populateBuilderWithHeaders(builder);\n-        // no body - will be appropriately set in populateBuilderWithHeaders().\n-        return builder.build();\n-    }\n-\n-    protected boolean isBodyEmpty(){\n-        return true;\n-    }\n-\n-    /*\n-    protected void markEmptyBody(PubSubProtocol.Message.Builder builder) {\n-        MetadataProcessor.addBooleanProperty(builder, EMPTY_BODY_KEY, true);\n-        builder.setBody(ByteString.EMPTY);\n-    }\n-    */\n-\n-    protected boolean hasBodyFromProperties() {\n-        // if key missing (common case), then there is body.\n-        if (!properties.containsKey(EMPTY_BODY_KEY)) return true;\n-        // If present, then check if it is a boolean of value true.\n-        Object value = properties.get(EMPTY_BODY_KEY);\n-\n-        // special case null.\n-        if (null == value) return true;\n-        if (value instanceof Boolean) return ! (Boolean) value;\n-\n-        // unknown type ...\n-        logger.info(\"Unknown type for value of \" + EMPTY_BODY_KEY + \" in message properties : \" + value);\n-        // assume true by default.\n-        return true;\n-    }\n-\n-\n-    protected final void populateBuilderWithHeaders(PubSubProtocol.Message.Builder builder) throws JMSException {\n-\n-        Map<String, Object> propertiesCopy = new HashMap<String, Object>(properties);\n-        if (isBodyEmpty()) {\n-            propertiesCopy.put(EMPTY_BODY_KEY, true);\n-            builder.setBody(ByteString.EMPTY);\n-        }\n-        // Not setting unless required to reduce message size - change this ?\n-        // else propertiesCopy.put(EMPTY_BODY_KEY, false);\n-\n-        Iterator<Map.Entry<String, Object>> iter = propertiesCopy.entrySet().iterator();\n-        while (iter.hasNext()){\n-            Map.Entry<String, Object> entry = iter.next();\n-            if (standardProperties.contains(entry.getKey())) {\n-                if (logger.isInfoEnabled())\n-                  logger.info(\"Ignoring user attempt to set standard property as application property : \" + entry);\n-                iter.remove();\n-            }\n-        }\n-\n-\n-        // set jms message type.\n-        propertiesCopy.put(JMS_MESSAGE_TYPE_KEY, getJmsMessageType().getType());\n-        if (standardPropertiesExistsForWire.contains(JMS_CORRELATION_ID))\n-          propertiesCopy.put(JMS_CORRELATION_ID, getJMSCorrelationID());\n-\n-        // unsupported for now.\n-        // if (standardPropertiesExistsForWire.contains(JMS_CORRELATION_ID_AS_BYTES))\n-        //    propertiesCopy.put(JMS_CORRELATION_ID_AS_BYTES, getJMSCorrelationIDAsBytes());\n-        if (standardPropertiesExistsForWire.contains(JMS_DELIVERY_MODE))\n-          propertiesCopy.put(JMS_DELIVERY_MODE, getJMSDeliveryMode());\n-\n-        if (standardPropertiesExistsForWire.contains(JMS_DESTINATION))\n-          propertiesCopy.put(JMS_DESTINATION, session.toName(getJMSDestination()));\n-        if (standardPropertiesExistsForWire.contains(JMS_EXPIRATION))\n-          propertiesCopy.put(JMS_EXPIRATION, getJMSExpiration());\n-\n-        // This can be set by client - but we ignore it in hedwig.\n-        // if (standardPropertiesExistsForWire.contains(JMS_MESSAGE_ID))\n-        //    propertiesCopy.put(JMS_MESSAGE_ID, getJMSMessageID());\n-\n-        // We do not support priority - but we are gong to allow it to be specified : this is\n-        // for selectors to set conditions on it !\n-        if (standardPropertiesExistsForWire.contains(JMS_PRIORITY))\n-          propertiesCopy.put(JMS_PRIORITY, getJMSPriority());\n-\n-        // this is not to be sent to hedwig.\n-        // if (standardPropertiesExistsForWire.contains(JMS_REDELIVERED))\n-        //    propertiesCopy.put(JMS_REDELIVERED, getJMSRedelivered());\n-\n-        if (standardPropertiesExistsForWire.contains(JMS_REPLY_TO))\n-          propertiesCopy.put(JMS_REPLY_TO, session.toName(getJMSReplyTo()));\n-\n-\n-        propertiesCopy.put(JMS_TIMESTAMP, getJMSTimestamp());\n-        if (standardPropertiesExistsForWire.contains(JMS_TYPE)) propertiesCopy.put(JMS_TYPE, getJMSType());\n-\n-\n-        MetadataProcessor.addHeaders(builder, propertiesCopy);\n-    }\n-\n-    @Override\n-    public String getJMSMessageID() {\n-        return jmsMessageId;\n-    }\n-\n-    @Override\n-    public void setJMSMessageID(String jmsMessageId) throws JMSException {\n-        // JMS VIOLATION ... we are NOT allowing client to override jms message-id.\n-        // if (!allowSpecifyJMSMessageIDForTest)\n-        //    throw new JMSException(\"We do not allow setting jms message id. This will be ignored by hedwig anyway.\");\n-        if (logger.isDebugEnabled()) logger.debug(\"Setting this is irrelevant - we override it anyway - \" +\n-            \" hedwig does not allow specifying it explictly.\");\n-        setJMSMessageIDInternal(jmsMessageId);\n-    }\n-\n-    public void setJMSMessageIDInternal(String jmsMessageId) throws JMSException {\n-        this.jmsMessageId = jmsMessageId;\n-        if (null != jmsMessageId){\n-            // We do not allow sending the property over wire.\n-            this.standardPropertiesExists.add(JMS_MESSAGE_ID);\n-            // this.standardPropertiesExistsForWire.add(JMS_MESSAGE_ID);\n-        }\n-        else {\n-            this.standardPropertiesExists.remove(JMS_MESSAGE_ID);\n-            // this.standardPropertiesExistsForWire.remove(JMS_MESSAGE_ID);\n-        }\n-    }\n-\n-    // The immutable message Id set by the server.\n-    public String getServerJmsMessageId() {\n-        return serverJmsMessageId;\n-    }\n-\n-    @Override\n-    public long getJMSTimestamp() {\n-        return jmsTimestamp;\n-    }\n-\n-    @Override\n-    public void setJMSTimestamp(long jmsTimestamp) {\n-        this.jmsTimestamp = jmsTimestamp;\n-        this.standardPropertiesExists.add(JMS_TIMESTAMP);\n-        // this.standardPropertiesExistsForWire.add(JMS_TIMESTAMP);\n-    }\n-\n-    @Override\n-    public byte[] getJMSCorrelationIDAsBytes() {\n-        throw new UnsupportedOperationException(\"unsupported\");\n-    }\n-\n-    @Override\n-    public void setJMSCorrelationIDAsBytes(byte[] bytes) {\n-        throw new UnsupportedOperationException(\"unsupported\");\n-    }\n-\n-    @Override\n-    public void setJMSCorrelationID(String jmsCorrelationID) {\n-        this.jmsCorrelationID = jmsCorrelationID;\n-        if (null != jmsCorrelationID){\n-            this.standardPropertiesExists.add(JMS_CORRELATION_ID);\n-            this.standardPropertiesExistsForWire.add(JMS_CORRELATION_ID);\n-        }\n-        else {\n-            this.standardPropertiesExists.remove(JMS_CORRELATION_ID);\n-            this.standardPropertiesExistsForWire.remove(JMS_CORRELATION_ID);\n-        }\n-    }\n-\n-    @Override\n-    public String getJMSCorrelationID() {\n-        return jmsCorrelationID;\n-    }\n-\n-    @Override\n-    public Destination getJMSReplyTo() {\n-        return jmsReplyTo;\n-    }\n-\n-    @Override\n-    public void setJMSReplyTo(Destination jmsReplyTo) {\n-        this.jmsReplyTo = jmsReplyTo;\n-        if (null != jmsReplyTo){\n-            this.standardPropertiesExists.add(JMS_REPLY_TO);\n-            this.standardPropertiesExistsForWire.add(JMS_REPLY_TO);\n-        }\n-        else {\n-            this.standardPropertiesExists.remove(JMS_REPLY_TO);\n-            this.standardPropertiesExistsForWire.remove(JMS_REPLY_TO);\n-        }\n-    }\n-\n-    @Override\n-    public Destination getJMSDestination() {\n-        return jmsDestination;\n-    }\n-\n-    @Override\n-    public void setJMSDestination(Destination jmsDestination) {\n-        this.jmsDestination = jmsDestination;\n-        if (null != jmsDestination){\n-            this.standardPropertiesExists.add(JMS_DESTINATION);\n-            this.standardPropertiesExistsForWire.add(JMS_DESTINATION);\n-        }\n-        else {\n-            this.standardPropertiesExists.remove(JMS_DESTINATION);\n-            this.standardPropertiesExistsForWire.remove(JMS_DESTINATION);\n-        }\n-    }\n-\n-    @Override\n-    public int getJMSDeliveryMode() {\n-        return jmsDeliveryMode;\n-    }\n-\n-    @Override\n-    public void setJMSDeliveryMode(int jmsDeliveryMode) {\n-        this.jmsDeliveryMode = jmsDeliveryMode;\n-        this.standardPropertiesExists.add(JMS_DELIVERY_MODE);\n-        this.standardPropertiesExistsForWire.add(JMS_DELIVERY_MODE);\n-    }\n-\n-    @Override\n-    public boolean getJMSRedelivered() {\n-        return jmsRedelivered;\n-    }\n-\n-    @Override\n-    public void setJMSRedelivered(boolean jmsRedelivered) {\n-        this.jmsRedelivered = jmsRedelivered;\n-        this.standardPropertiesExists.add(JMS_REDELIVERED);\n-        // this.standardPropertiesExistsForWire.add(JMS_REDELIVERED);\n-    }\n-\n-    @Override\n-    public String getJMSType() {\n-        return jmsType;\n-    }\n-\n-    @Override\n-    public void setJMSType(String jmsType) {\n-        this.jmsType = jmsType;\n-        if (null != jmsType){\n-            this.standardPropertiesExists.add(JMS_TYPE);\n-            this.standardPropertiesExistsForWire.add(JMS_TYPE);\n-        }\n-        else {\n-            this.standardPropertiesExists.remove(JMS_TYPE);\n-            this.standardPropertiesExistsForWire.remove(JMS_TYPE);\n-        }\n-    }\n-\n-    @Override\n-    public long getJMSExpiration() {\n-        return jmsExpiration;\n-    }\n-\n-    @Override\n-    public void setJMSExpiration(long jmsExpiration) {\n-        // We simulate it now !\n-        // if (logger.isInfoEnabled()) logger.info(\"JMSExpiration is not supported right now by Hedwig ...\");\n-        this.jmsExpiration = jmsExpiration;\n-\n-        if (0 != jmsExpiration){\n-            this.standardPropertiesExists.add(JMS_EXPIRATION);\n-            this.standardPropertiesExistsForWire.add(JMS_EXPIRATION);\n-        }\n-        else {\n-            this.standardPropertiesExists.remove(JMS_EXPIRATION);\n-            this.standardPropertiesExistsForWire.remove(JMS_EXPIRATION);\n-        }\n-    }\n-\n-    @Override\n-    public int getJMSPriority() {\n-        return jmsPriority;\n-    }\n-\n-    @Override\n-    public void setJMSPriority(int jmsPriority) {\n-        this.jmsPriority = jmsPriority;\n-        this.standardPropertiesExists.add(JMS_PRIORITY);\n-        // Sent over wire ?\n-        this.standardPropertiesExistsForWire.add(JMS_PRIORITY);\n-    }\n-\n-    @Override\n-    public void clearProperties() {\n-        this.propertiesReadOnly = false;\n-        properties.clear();\n-    }\n-\n-    /**\n-     * JMS VIOLATION ? The spec & javadoc is unclear as to whether this method must include jms\n-     * standard properties or not.\n-     * But going by javadoc of\n-     * @see #getPropertyNames() , we have this specified :\n-     * \"Note that JMS standard header fields are not considered properties and are not returned\n-     * in this enumeration.\"\n-     * Which indicates this method must not include standard properties.\n-     */\n-    @Override\n-    public boolean propertyExists(String key) {\n-        if (!standardProperties.contains(key)) return properties.containsKey(key);\n-\n-        // Evaluate depending on type of property.\n-        return standardPropertiesExists.contains(key);\n-    }\n-\n-    @Override\n-    public boolean getBooleanProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        return getBooleanProperty(properties, key);\n-    }\n-\n-    private boolean getBooleanProperty(Map<String, Object> properties, String key) throws JMSException {\n-        return MessageUtil.asBoolean(properties.get(key));\n-    }\n-\n-    @Override\n-    public byte getByteProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        return getByteProperty(properties, key);\n-    }\n-\n-    private byte getByteProperty(Map<String, Object> properties, String key) throws JMSException {\n-        return MessageUtil.asByte(properties.get(key));\n-    }\n-\n-    @Override\n-    public short getShortProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        return getShortProperty(properties, key);\n-    }\n-\n-    private short getShortProperty(Map<String, Object> properties, String key) throws JMSException {\n-        return MessageUtil.asShort(properties.get(key));\n-    }\n-\n-    @Override\n-    public int getIntProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        return getIntProperty(properties, key);\n-    }\n-\n-    private int getIntProperty(Map<String, Object> properties, String key) throws JMSException {\n-        return MessageUtil.asInteger(properties.get(key));\n-    }\n-\n-    @Override\n-    public long getLongProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        return getLongProperty(properties, key);\n-    }\n-\n-    private long getLongProperty(Map<String, Object> properties, String key) throws JMSException {\n-        return MessageUtil.asLong(properties.get(key));\n-    }\n-\n-    @Override\n-    public float getFloatProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        return getFloatProperty(properties, key);\n-    }\n-\n-    private float getFloatProperty(Map<String, Object> properties, String key) throws JMSException {\n-        return MessageUtil.asFloat(properties.get(key));\n-    }\n-\n-    @Override\n-    public double getDoubleProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        return getDoubleProperty(properties, key);\n-    }\n-\n-    private double getDoubleProperty(Map<String, Object> properties, String key) throws JMSException {\n-        return MessageUtil.asDouble(properties.get(key));\n-    }\n-\n-    public Object getSelectorProcessingPropertyValue(String key) throws SelectorEvaluationException {\n-        if (properties.containsKey(key)) return properties.get(key);\n-        if (! standardProperties.contains(key)) return null;\n-\n-        if (JMS_MESSAGE_ID.equals(key)) return getJMSMessageID();\n-        if (JMS_TIMESTAMP.equals(key)) return getJMSTimestamp();\n-        if (JMS_CORRELATION_ID.equals(key)) return getJMSCorrelationID();\n-        // We do not support this right now.\n-        // if (JMS_CORRELATION_ID_AS_BYTES.equals(key)) return getJMSCorrelationIDAsBytes();\n-        if (JMS_REPLY_TO.equals(key)) return getJMSReplyTo();\n-        if (JMS_DESTINATION.equals(key)) return getJMSDestination();\n-        if (JMS_DELIVERY_MODE.equals(key)) {\n-            // 3.8.1.3 Special Notes \"When used in a message selector JMSDeliveryMode is treated as having the\n-            // values ‘PERSISTENT’ and ‘NON_PERSISTENT’.\"\n-            final int deliveryMode = getJMSDeliveryMode();\n-            if (DeliveryMode.PERSISTENT == deliveryMode) return \"PERSISTENT\";\n-            if (DeliveryMode.NON_PERSISTENT == deliveryMode) return \"NON_PERSISTENT\";\n-            // unknown !\n-            if (logger.isInfoEnabled()) logger.info(\"Unknown delivery mode specified ... \" + deliveryMode);\n-            return null;\n-        }\n-        if (JMS_REDELIVERED.equals(key)) return getJMSRedelivered();\n-        if (JMS_TYPE.equals(key)) return getJMSType();\n-        if (JMS_EXPIRATION.equals(key)) return getJMSExpiration();\n-        if (JMS_PRIORITY.equals(key)) return getJMSPriority();\n-\n-        throw new SelectorEvaluationException(\"Unable to retrieve value for key : '\" + key + \"'\");\n-    }\n-\n-    @Override\n-    public String getStringProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        return getStringProperty(properties, key);\n-    }\n-\n-    private String getStringProperty(Map<String, Object> properties, String key) throws JMSException {\n-        return MessageUtil.asString(properties.get(key));\n-    }\n-\n-    @Override\n-    public Object getObjectProperty(String key) throws JMSException {\n-        checkIfStandardProperty(key);\n-        // if (!propertyExists(key)) return null;\n-\n-        return properties.get(key);\n-    }\n-\n-    @Override\n-    public Enumeration<String> getPropertyNames() throws JMSException {\n-        return Collections.enumeration(properties.keySet());\n-    }\n-\n-    @Override\n-    public void setBooleanProperty(String key, boolean value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-        properties.put(key, value);\n-    }\n-\n-    @Override\n-    public void setByteProperty(String key, byte value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-        properties.put(key, value);\n-    }\n-\n-    @Override\n-    public void setShortProperty(String key, short value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-        properties.put(key, value);\n-    }\n-\n-    @Override\n-    public void setIntProperty(String key, int value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-        properties.put(key, value);\n-    }\n-\n-    @Override\n-    public void setLongProperty(String key, long value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-        properties.put(key, value);\n-    }\n-\n-    @Override\n-    public void setFloatProperty(String key, float value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-        properties.put(key, value);\n-    }\n-\n-    @Override\n-    public void setDoubleProperty(String key, double value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-        properties.put(key, value);\n-    }\n-\n-    @Override\n-    public void setStringProperty(String key, String value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-        properties.put(key, value);\n-    }\n-\n-    @Override\n-    public void setObjectProperty(String key, Object value) throws JMSException {\n-        if (!MessageUtil.isValidKey(key)) throw new IllegalArgumentException(\"Invalid key \" + key);\n-        if (propertiesReadOnly)\n-          throw new MessageNotWriteableException(\"Message not writable. attempt to set property \" +\n-              key + \" = \" + value);\n-        checkIfStandardProperty(key);\n-\n-        if (null == value ||\n-                value instanceof Boolean ||\n-                value instanceof Byte ||\n-                value instanceof Short ||\n-                value instanceof Integer ||\n-                value instanceof Long ||\n-                value instanceof Float ||\n-                value instanceof Double ||\n-                value instanceof byte[] ||\n-                value instanceof String) {\n-            properties.put(key, value);\n-            return ;        }\n-\n-        throw new MessageFormatException(\"Unsupported type for value \" + value.getClass());\n-    }\n-\n-    // JMS VIOLATION ?\n-    // I am not sure if getting and setting standard properties is allowed via the generic\n-    // get/set methods : the spec seems unclear on it.\n-    // Some javadocs seem to indicate it is NOT allowed. Hence this check ...\n-    // If it is allowed in JMS - to support it, we will need to have a if/else block within each set/get\n-    // which delegates to corresponding jms header set/get ...\n-    private void checkIfStandardProperty(String key) throws JMSException {\n-        if (standardProperties.contains(key))\n-          throw new JMSException(\"Cannot get/set standard JMS properties using *Property api\");\n-    }\n-\n-    @Override\n-    public void acknowledge() throws JMSException {\n-        session.acknowledge(this);\n-    }\n-\n-    @Override\n-    public void clearBody() throws JMSException {\n-        // Clear the body of the message.\n-    }\n-\n-    public String getSourceName() {\n-        return sourceName;\n-    }\n-\n-    public String getSubscriberId() {\n-        return subscriberId;\n-    }\n-\n-    MessageImpl createClone(SessionImpl session, String sourceTopicName, String subscriberId) throws JMSException {\n-        if (MessageImpl.class != getClass()) {\n-            throw new JMSException(\"Unexpected to call MessageImpl's createClone from subclass \" + getClass());\n-        }\n-        return new MessageImpl(session, this, sourceTopicName, subscriberId);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"MessageImpl\");\n-        sb.append(\"{session=\").append(session);\n-        sb.append(\", jmsMessageId='\").append(jmsMessageId).append('\\'');\n-        sb.append(\", jmsTimestamp=\").append(jmsTimestamp);\n-        sb.append(\", jmsCorrelationID='\").append(jmsCorrelationID).append('\\'');\n-        sb.append(\", jmsReplyTo=\").append(jmsReplyTo);\n-        sb.append(\", jmsDestination=\").append(jmsDestination);\n-        sb.append(\", jmsDeliveryMode=\").append(jmsDeliveryMode);\n-        sb.append(\", jmsRedelivered=\").append(jmsRedelivered);\n-        sb.append(\", jmsType='\").append(jmsType).append('\\'');\n-        sb.append(\", jmsExpiration=\").append(jmsExpiration);\n-        sb.append(\", jmsPriority=\").append(jmsPriority);\n-        sb.append(\", properties=\").append(properties);\n-        sb.append(\", standardPropertiesExists=\").append(standardPropertiesExists);\n-        sb.append(\", standardPropertiesExistsForWire=\").append(standardPropertiesExistsForWire);\n-        sb.append(\", sourceName='\").append(sourceName).append('\\'');\n-        sb.append(\", subscriberId='\").append(subscriberId).append('\\'');\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-\n-    void reset() throws JMSException {\n-        // noop ... children will override to do needful.\n-    }\n-\n-    public Runnable getAckRunnable() {\n-        return ackRunnable;\n-    }\n-}"},{"sha":"15b75ee737bbf6d50a6d7fa033186af70d718952","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageUtil.java","status":"removed","additions":0,"deletions":444,"changes":444,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/MessageUtil.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,444 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.message;\n-\n-\n-import com.google.protobuf.ByteString;\n-import org.apache.hedwig.jms.SessionImpl;\n-import org.apache.hedwig.jms.message.header.MetadataProcessor;\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-\n-import javax.jms.BytesMessage;\n-import javax.jms.JMSException;\n-import javax.jms.MapMessage;\n-import javax.jms.Message;\n-import javax.jms.MessageFormatException;\n-import javax.jms.ObjectMessage;\n-import javax.jms.StreamMessage;\n-import javax.jms.TextMessage;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.regex.Pattern;\n-\n-/**\n- * Bunch of simple util methods to reduce code in the implementation.\n- */\n-public class MessageUtil {\n-\n-    // The various message types supported.\n-    public enum SupportedMessageTypes {\n-      ONLY_MESSAGE((byte) 0),\n-      TEXT((byte) 1),\n-      BYTES((byte) 2),\n-      MAP((byte) 3),\n-      STREAM((byte) 4),\n-      OBJECT((byte) 5);\n-\n-      private final byte type;\n-      private SupportedMessageTypes(byte type){\n-        this.type = type;\n-      }\n-\n-      public byte getType() {\n-        return type;\n-      }\n-    }\n-\n-    private static final Map<Byte, SupportedMessageTypes> valueToSupportedMessageType;\n-    static {\n-        SupportedMessageTypes[] arr = SupportedMessageTypes.values();\n-        Map<Byte, SupportedMessageTypes> map = new HashMap<Byte, SupportedMessageTypes>(arr.length);\n-        for (SupportedMessageTypes type : arr){\n-            map.put(type.getType(), type);\n-        }\n-        valueToSupportedMessageType = Collections.unmodifiableMap(map);\n-    }\n-\n-    public static boolean asBoolean(Object value) throws MessageFormatException {\n-        // The JMS spec explicitly wants us to raise NPE !\n-        // if (null == value) return false;\n-        if (null == value) return Boolean.valueOf((String) value);\n-\n-        if (value instanceof Boolean) return (Boolean) value;\n-        if (value instanceof String) return Boolean.valueOf((String) value);\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static byte asByte(Object value) throws MessageFormatException {\n-        // The JMS spec explicitly wants us to raise NPE !\n-        // if (null == value) return 0;\n-        if (null == value) return Byte.valueOf((String) value);\n-\n-        if (value instanceof Byte) return (Byte) value;\n-        if (value instanceof String) return Byte.valueOf((String) value);\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static short asShort(Object value) throws MessageFormatException {\n-        // The JMS spec explicitly wants us to raise NPE !\n-        // if (null == value) return 0;\n-        if (null == value) return Short.valueOf((String) value);\n-\n-        if (value instanceof Byte) return (Byte) value;\n-        if (value instanceof Short) return (Short) value;\n-        if (value instanceof String) return Short.valueOf((String) value);\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static int asInteger(Object value) throws MessageFormatException {\n-        // The JMS spec explicitly wants us to raise NPE !\n-        // if (null == value) return 0;\n-        if (null == value) return Integer.valueOf((String) value);\n-\n-        if (value instanceof Byte) return (Byte) value;\n-        if (value instanceof Short) return (Short) value;\n-        if (value instanceof Integer) return (Integer) value;\n-        if (value instanceof String) return Integer.valueOf((String) value);\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static long asLong(Object value) throws MessageFormatException {\n-        // The JMS spec explicitly wants us to raise NPE !\n-        // if (null == value) return 0;\n-        if (null == value) return Long.valueOf((String) value);\n-\n-        if (value instanceof Byte) return (Byte) value;\n-        if (value instanceof Short) return (Short) value;\n-        if (value instanceof Integer) return (Integer) value;\n-        if (value instanceof Long) return (Long) value;\n-        if (value instanceof String) return Long.valueOf((String) value);\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static float asFloat(Object value) throws MessageFormatException {\n-        // The JMS spec explicitly wants us to raise NPE !\n-        // if (null == value) return 0.0f;\n-        if (null == value) return Float.valueOf((String) value);\n-\n-        if (value instanceof Float) return (Float) value;\n-        if (value instanceof String) return Float.valueOf((String) value);\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static double asDouble (Object value) throws MessageFormatException {\n-        // The JMS spec explicitly wants us to raise NPE !\n-        // if (null == value) return 0.0;\n-        if (null == value) return Double.valueOf((String) value);\n-\n-        if (value instanceof Float) return (Float) value;\n-        if (value instanceof Double ) return (Double) value;\n-        if (value instanceof String) return Double.valueOf((String) value);\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static Double asDoubleSelectorProcessing(Object value) throws MessageFormatException {\n-        if (null == value) return null;\n-\n-        if (value instanceof Float) return (double) (Float) value;\n-        if (value instanceof Double ) return (Double) value;\n-\n-        if (value instanceof Long) return (double) (Long) value;\n-        if (value instanceof Integer) return (double) (Integer) value;\n-        if (value instanceof Short) return (double) (Short) value;\n-        if (value instanceof Byte) return (double) (Byte) value;\n-\n-        return null;\n-    }\n-\n-    public static Integer asIntegerSelectorProcessing(Object value) throws MessageFormatException {\n-        if (null == value) return null;\n-\n-        if (value instanceof Float) return (int) (float) (Float) value;\n-        if (value instanceof Double ) return (int) (double) (Double) value;\n-\n-        if (value instanceof Long) return (int) (long) (Long) value;\n-        if (value instanceof Integer) return (Integer) value;\n-        if (value instanceof Short) return (int) (Short) value;\n-        if (value instanceof Byte) return (int) (Byte) value;\n-\n-        return null;\n-    }\n-\n-    public static String asString(Object value) {\n-        if (null == value) return null;\n-\n-        if (value instanceof String) return (String) value;\n-        // converts from boolean, byte, short, char, int, long, float and double to String.\n-        return \"\" + value;\n-    }\n-\n-    public static char asChar(Object value) throws MessageFormatException {\n-        // treat it as integer with null\n-        if (null == value) return (char) 0;\n-\n-        // only from/to char\n-        if (value instanceof Character) return (Character) value;\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static byte[] asBytes(Object value) throws MessageFormatException {\n-        if (null == value || value instanceof byte[]) return (byte[]) value;\n-        throw new MessageFormatException(\"Unsupported property type \" + value.getClass() + \" for \" + value);\n-    }\n-\n-    public static boolean isValidKey(String key) {\n-        return null != key && 0 != key.length();\n-    }\n-\n-    public static byte[] objectToBytes(Object obj) throws IOException {\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream(128);\n-        ObjectOutputStream oos = new ObjectOutputStream(baos);\n-        try {\n-            oos.writeObject(obj);\n-            oos.flush();\n-        } finally {\n-            try { oos.close(); } catch (IOException ioEx) { /* ignore */ }\n-        }\n-\n-        return baos.toByteArray();\n-    }\n-\n-    public static Object bytesToObject(byte[] data) throws IOException {\n-        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data));\n-        try {\n-            return ois.readObject();\n-        } catch (ClassNotFoundException  cnfEx){\n-            // unexpected !\n-            throw new IllegalStateException(\"Unexpected\", cnfEx);\n-        } finally {\n-            try { ois.close(); } catch(IOException ioEx) { /* ignore */ }\n-        }\n-    }\n-\n-\n-\n-    public static MessageImpl processHedwigMessage(SessionImpl session, PubSubProtocol.Message message,\n-                                                   String sourceTopicName, String subscriberId,\n-                                                   Runnable ackRunnable) throws JMSException {\n-        Map<String, Object> map = MetadataProcessor.parseHeaders(message);\n-\n-        Object jmsBodyTypeValue = map.get(MessageImpl.JMS_MESSAGE_TYPE_KEY);\n-        // Should we treat these as bytes message by default ?\n-        // if (! (jmsBodyTypeValue instanceof Byte) )\n-        //    throw new JMSException(\"Unsupported message : \" + message + \", unable to determine jms message type \" +\n-        //      jmsBodyTypeValue);\n-        if (! (jmsBodyTypeValue instanceof Byte) ) jmsBodyTypeValue = (Byte) SupportedMessageTypes.BYTES.getType();\n-\n-        SupportedMessageTypes type = valueToSupportedMessageType.get((Byte) jmsBodyTypeValue);\n-        switch (type){\n-            case STREAM:\n-                return new StreamMessageImpl(session, message, map, sourceTopicName, subscriberId, ackRunnable);\n-            case MAP:\n-                return new MapMessageImpl(session, message, map, sourceTopicName, subscriberId, ackRunnable);\n-            case TEXT:\n-                return new TextMessageImpl(session, message, map, sourceTopicName, subscriberId, ackRunnable);\n-            case OBJECT:\n-                return new ObjectMessageImpl(session, message, map, sourceTopicName, subscriberId, ackRunnable);\n-            case BYTES:\n-                return new BytesMessageImpl(session, message, map, sourceTopicName, subscriberId, ackRunnable);\n-            case ONLY_MESSAGE:\n-                return new MessageImpl(session, message, map, sourceTopicName, subscriberId, ackRunnable);\n-            default:\n-                throw new JMSException(\"Unsupported message type : \" + type + \" for message \" + message);\n-        }\n-    }\n-\n-    public static MessageImpl createMessageCopy(SessionImpl session, Message message) throws JMSException {\n-        if (message instanceof MessageImpl) {\n-            return createMessageImplCopy(session, (MessageImpl) message);\n-        }\n-\n-        if (message instanceof BytesMessage) {\n-            return new BytesMessageImpl((BytesMessage) message, session);\n-        }\n-        if (message instanceof MapMessage) {\n-            return new MapMessageImpl((MapMessage) message, session);\n-        }\n-        if (message instanceof ObjectMessage) {\n-            return new ObjectMessageImpl((ObjectMessage) message, session);\n-        }\n-        if (message instanceof StreamMessage) {\n-            return new StreamMessageImpl((StreamMessage) message, session);\n-        }\n-        if (message instanceof TextMessage) {\n-            return new TextMessageImpl((TextMessage) message, session);\n-        }\n-\n-        return new MessageImpl(message, session);\n-    }\n-\n-    private static MessageImpl createMessageImplCopy(SessionImpl session, MessageImpl message)\n-        throws JMSException {\n-\n-        if (message instanceof BytesMessageImpl) {\n-            return new BytesMessageImpl(session, (BytesMessageImpl) message, message.getSourceName(),\n-                message.getSubscriberId());\n-        }\n-        if (message instanceof MapMessageImpl) {\n-            return new MapMessageImpl(session, (MapMessageImpl) message, message.getSourceName(),\n-                message.getSubscriberId());\n-        }\n-        if (message instanceof ObjectMessageImpl) {\n-            return new ObjectMessageImpl(session, (ObjectMessageImpl) message, message.getSourceName(),\n-                message.getSubscriberId());\n-        }\n-        if (message instanceof StreamMessageImpl) {\n-            return new StreamMessageImpl(session, (StreamMessageImpl) message, message.getSourceName(),\n-                message.getSubscriberId());\n-        }\n-        if (message instanceof TextMessageImpl) {\n-            return new TextMessageImpl(session, (TextMessageImpl) message, message.getSourceName(),\n-                message.getSubscriberId());\n-        }\n-\n-        return new MessageImpl(session, message, message.getSourceName(), message.getSubscriberId());\n-    }\n-\n-    private static final String JMS_MESSAGE_ID_PREFIX = \"ID:\";\n-    private static final String LOCAL_PREFIX = \"LOCAL(\";\n-    private static final String REMOTE_PREFIX = \"REMOTE(\";\n-    private static final char SEQ_ID_SUFFIX = ')';\n-    private static final char REMOTE_RECORD_SEPARATOR = ',';\n-    private static final char REMOTE_RECORD_SEQ_ID_PREFIX = '[';\n-    private static final char REMOTE_RECORD_SEQ_ID_SUFFIX = ']';\n-    private static final Pattern remoteMessageIdSplitPattern = Pattern.compile(\"\" + REMOTE_RECORD_SEPARATOR);\n-\n-    /**\n-     * Based on\n-     * {@link org.apache.hedwig.admin.console.ReadTopic#formatMessage(PubSubProtocol.Message)}\n-     *\n-     * This is tightly coupled with\n-     * @see #generateSeqIdFromJMSMessageId(String)\n-     *\n-     * @param seqId The sequence id to convert to string.\n-     * @return The string representation of the seq-id.\n-     */\n-    public static String generateJMSMessageIdFromSeqId(final PubSubProtocol.MessageSeqId seqId) {\n-        StringBuilder sb = new StringBuilder();\n-        // mandatory prefix for system generated id's.\n-        sb.append(JMS_MESSAGE_ID_PREFIX);\n-\n-        if (seqId.hasLocalComponent()) {\n-            sb.append(LOCAL_PREFIX).append(seqId.getLocalComponent()).append(SEQ_ID_SUFFIX);\n-        } else {\n-            List<PubSubProtocol.RegionSpecificSeqId> remoteIds = seqId.getRemoteComponentsList();\n-            boolean first = true;\n-\n-            sb.append(REMOTE_PREFIX);\n-            for (PubSubProtocol.RegionSpecificSeqId rssid : remoteIds) {\n-                if (!first) sb.append(REMOTE_RECORD_SEPARATOR);\n-                first = false;\n-                sb.append(rssid.getRegion().toStringUtf8());\n-                sb.append(REMOTE_RECORD_SEQ_ID_PREFIX);\n-                sb.append(rssid.getSeqId());\n-                sb.append(REMOTE_RECORD_SEQ_ID_SUFFIX);\n-            }\n-            sb.append(SEQ_ID_SUFFIX);\n-        }\n-\n-        return sb.toString();\n-    }\n-\n-    /**\n-     * Based on\n-     * {@link org.apache.hedwig.admin.console.ReadTopic#formatMessage(PubSubProtocol.Message)}\n-     *\n-     * This is tightly coupled with\n-     * @see #generateJMSMessageIdFromSeqId(org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId)\n-     * @param messageId The message id to convert to string.\n-     * @return The seq-id\n-     * @throws javax.jms.JMSException In case of exceptions doing the conversion.\n-     */\n-    public static PubSubProtocol.MessageSeqId generateSeqIdFromJMSMessageId(final String messageId)\n-        throws JMSException {\n-        if (null == messageId || !messageId.startsWith(JMS_MESSAGE_ID_PREFIX)) {\n-            throw new JMSException(\"Invalid messageId specified '\" + messageId + \"'\");\n-        }\n-\n-        PubSubProtocol.MessageSeqId.Builder builder = PubSubProtocol.MessageSeqId.newBuilder();\n-        // local ?\n-        if (messageId.regionMatches(JMS_MESSAGE_ID_PREFIX.length(), LOCAL_PREFIX, 0, LOCAL_PREFIX.length())){\n-            try {\n-                long seqId = Long.parseLong(messageId.substring(JMS_MESSAGE_ID_PREFIX.length() +\n-                    LOCAL_PREFIX.length(), messageId.length() - 1));\n-                builder.setLocalComponent(seqId);\n-            } catch (NumberFormatException nfEx){\n-                JMSException jEx = new JMSException(\"Unable to parse local seq id from '\" +\n-                    messageId + \"' .. \" + nfEx);\n-                jEx.setLinkedException(nfEx);\n-                throw jEx;\n-            }\n-        }\n-        else {\n-            assert messageId.regionMatches(JMS_MESSAGE_ID_PREFIX.length(), REMOTE_PREFIX, 0,\n-                REMOTE_PREFIX.length());\n-\n-            final String[] remoteParts;\n-            {\n-                final String remoteMessageId = messageId.substring(JMS_MESSAGE_ID_PREFIX.length() +\n-                    REMOTE_PREFIX.length(), messageId.length() - 1);\n-                // Should ew stop using pattern and move to using indexOf's ?\n-                remoteParts = remoteMessageIdSplitPattern.split(remoteMessageId);\n-            }\n-\n-            for (String remote : remoteParts){\n-                if (REMOTE_RECORD_SEQ_ID_SUFFIX != remote.charAt(remote.length() - 1))\n-                  throw new JMSException(\"Invalid remote region snippet (no seq suffix) '\" +\n-                      remote + \"' within '\" + messageId);\n-                final int regionIndx = remote.indexOf(REMOTE_RECORD_SEQ_ID_PREFIX);\n-                if (-1 == regionIndx)\n-                  throw new JMSException(\"Invalid remote region snippet (no region) '\" + remote +\n-                      \"' within '\" + messageId);\n-                final String region = remote.substring(0, regionIndx);\n-                final long seqId;\n-\n-\n-                try {\n-                    seqId = Long.parseLong(remote.substring(regionIndx + 1, remote.length() - 1));\n-                } catch (NumberFormatException nfEx){\n-                    JMSException jEx = new JMSException(\"Unable to parse remote seq id from '\" +\n-                        remote + \"' within '\" + messageId + \"' .. \" + nfEx);\n-                    jEx.setLinkedException(nfEx);\n-                    throw jEx;\n-                }\n-\n-                PubSubProtocol.RegionSpecificSeqId.Builder rbuilder =\n-                    PubSubProtocol.RegionSpecificSeqId.newBuilder();\n-                rbuilder.setRegion(ByteString.copyFromUtf8(region));\n-                rbuilder.setSeqId(seqId);\n-                builder.addRemoteComponents(rbuilder);\n-            }\n-        }\n-\n-        return builder.build();\n-    }\n-\n-    public static MessageImpl createCloneForDispatch(SessionImpl session, MessageImpl msg,\n-                                                     String sourceTopicName, String subscriberId) throws JMSException {\n-        MessageImpl retval = msg.createClone(session, sourceTopicName, subscriberId);\n-        retval.reset();\n-        return retval;\n-    }\n-}"},{"sha":"ba26c4c1b55a1b6e6a441ef4bc33a6841f520d1a","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/ObjectMessageImpl.java","status":"removed","additions":0,"deletions":168,"changes":168,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/ObjectMessageImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/ObjectMessageImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/ObjectMessageImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,168 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.message;\n-\n-import com.google.protobuf.ByteString;\n-import org.apache.hedwig.jms.SessionImpl;\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.MessageNotWriteableException;\n-import javax.jms.ObjectMessage;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.io.Serializable;\n-import java.util.Map;\n-\n-/**\n- * read/write serializable java object ...\n- *\n- */\n-public class ObjectMessageImpl extends MessageImpl implements ObjectMessage {\n-    private Serializable payload;\n-    private boolean readMode;\n-\n-    public ObjectMessageImpl(SessionImpl session, Serializable payload) {\n-        super(session);\n-        this.payload = payload;\n-        this.readMode = false;\n-    }\n-\n-    public ObjectMessageImpl(SessionImpl session, ObjectMessageImpl message, String sourceTopicName,\n-                             String subscriberId) throws JMSException {\n-        super(session, (MessageImpl) message, sourceTopicName, subscriberId);\n-\n-        this.payload = copySerializable(message.getObject());\n-        this.readMode = message.readMode;\n-    }\n-\n-    private Serializable copySerializable(Serializable object) throws JMSException {\n-        try {\n-            ByteArrayOutputStream baos = new ByteArrayOutputStream(128);\n-            ObjectOutputStream oos = new ObjectOutputStream(baos);\n-            oos.writeObject(object);\n-            oos.flush();\n-            oos.close();\n-            baos.flush();\n-            baos.close();\n-\n-            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(baos.toByteArray()));\n-            return (Serializable) ois.readObject();\n-        } catch (IOException e){\n-            JMSException jmsEx = new javax.jms.IllegalStateException(\"Unexpected exception\");\n-            jmsEx.setLinkedException(e);\n-            throw jmsEx;\n-        } catch (ClassNotFoundException e) {\n-            JMSException jmsEx = new javax.jms.IllegalStateException(\"Unexpected exception\");\n-            jmsEx.setLinkedException(e);\n-            throw jmsEx;\n-        }\n-    }\n-\n-    // To clone a message from a ObjectMessage which is NOT ObjectMessageImpl\n-    // Changing order of parameter to NOT accidentally clash with the constructor above.\n-    // This is midly confusing, but helps a lot in preventing accidental bugs !\n-    public ObjectMessageImpl(ObjectMessage message, SessionImpl session) throws JMSException {\n-        super((Message) message, session);\n-\n-        if (message instanceof ObjectMessageImpl) {\n-            throw new JMSException(\"Coding bug - should use this constructor ONLY for non ObjectMessageImpl messages\");\n-        }\n-\n-\n-        this.payload = message.getObject();\n-        this.readMode = false;\n-    }\n-\n-    public ObjectMessageImpl(SessionImpl session, PubSubProtocol.Message message, Map<String, Object> properties,\n-                             String sourceTopicName, String subscriberId, Runnable ackRunnable) throws JMSException {\n-        super(session, message, properties, sourceTopicName, subscriberId, ackRunnable);\n-\n-        try {\n-            this.payload = hasBodyFromProperties() ?\n-                (Serializable) MessageUtil.bytesToObject(message.getBody().toByteArray()) : null;\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to read message data .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-        this.readMode = true;\n-    }\n-\n-    @Override\n-    protected MessageUtil.SupportedMessageTypes getJmsMessageType() {\n-        return MessageUtil.SupportedMessageTypes.OBJECT;\n-    }\n-\n-    @Override\n-    public PubSubProtocol.Message generateHedwigMessage() throws JMSException {\n-        PubSubProtocol.Message.Builder builder = PubSubProtocol.Message.newBuilder();\n-        super.populateBuilderWithHeaders(builder);\n-\n-        // Now set body and type.\n-        try {\n-            if (! isBodyEmpty()) builder.setBody(ByteString.copyFrom(MessageUtil.objectToBytes(this.payload)));\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to read message data .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-\n-        return builder.build();\n-    }\n-\n-    protected boolean isBodyEmpty(){\n-        return null == this.payload;\n-    }\n-\n-    @Override\n-    public void setObject(Serializable payload) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        this.payload = payload;\n-    }\n-\n-    @Override\n-    public Serializable getObject() throws JMSException {\n-        return payload;\n-    }\n-\n-    @Override\n-    public void clearBody() throws JMSException {\n-        super.clearBody();\n-        // allow read and write.\n-        this.payload = null;\n-        this.readMode = false;\n-    }\n-\n-    @Override\n-    public void reset() throws JMSException {\n-        if (this.readMode) return ;\n-        this.readMode = true;\n-    }\n-\n-    @Override\n-    ObjectMessageImpl createClone(SessionImpl session, String sourceTopicName, String subscriberId)\n-        throws JMSException {\n-\n-        return new ObjectMessageImpl(session, this, sourceTopicName, subscriberId);\n-    }\n-}"},{"sha":"2aa74a2e690aabe2300d5a9e34d85b06d1bb0e71","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/StreamMessageImpl.java","status":"removed","additions":0,"deletions":752,"changes":752,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/StreamMessageImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/StreamMessageImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/StreamMessageImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,752 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.message;\n-\n-import com.google.protobuf.ByteString;\n-import org.apache.hedwig.jms.Mutable;\n-import org.apache.hedwig.jms.SessionImpl;\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-\n-import javax.jms.IllegalStateException;\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.MessageEOFException;\n-import javax.jms.MessageNotReadableException;\n-import javax.jms.MessageNotWriteableException;\n-import javax.jms.StreamMessage;\n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.EOFException;\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.util.ArrayDeque;\n-import java.util.Arrays;\n-import java.util.Deque;\n-import java.util.Map;\n-\n-/**\n- * Though similar to BytesMessageImpl, the difference is that BytesMessage expects the user to know\n- * the schema while\n- * StreamMessage user expects type conversion, etc.\n- *\n- * In our case, the stream is not a true open stream to the server; it is buffered in memory.\n- */\n-public class StreamMessageImpl extends MessageImpl implements StreamMessage {\n-    private ReadOnlyMessage readOnlyMessage;\n-    private WriteOnlyMessage writeOnlyMessage;\n-    private boolean readMode;\n-\n-    public StreamMessageImpl(SessionImpl session) throws JMSException {\n-        super(session);\n-        clearBody();\n-    }\n-\n-    // To clone a message\n-    public StreamMessageImpl(SessionImpl session, StreamMessageImpl message, String sourceTopicName,\n-                             String subscriberId) throws JMSException {\n-        super(session, (MessageImpl) message, sourceTopicName, subscriberId);\n-        try {\n-            if (message.readMode){\n-                this.readOnlyMessage = new ReadOnlyMessage(message.getPayloadData());\n-                this.writeOnlyMessage = null;\n-            }\n-            else {\n-                this.readOnlyMessage = null;\n-                this.writeOnlyMessage = new WriteOnlyMessage(message.getPayloadData());\n-            }\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to clone/copy input message \" + message + \" .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-\n-        this.readMode = message.readMode;\n-    }\n-\n-    // To clone a message from a StreamMessage which is NOT StreamMessageImpl\n-    // Changing order of parameter to NOT accidentally clash with the constructor above.\n-    // This is midly confusing, but helps a lot in preventing accidental bugs !\n-    public StreamMessageImpl(StreamMessage message, SessionImpl session) throws JMSException {\n-        super((Message) message, session);\n-\n-        if (message instanceof StreamMessageImpl) {\n-            throw new JMSException(\"Coding bug - should use this constructor ONLY for non StreamMessageImpl messages\");\n-        }\n-\n-        final byte[] data;\n-        try {\n-            WriteOnlyMessage wom = new WriteOnlyMessage();\n-            try {\n-                Object obj;\n-                while (null != (obj = message.readObject())){\n-                    wom.writeObject(obj);\n-                }\n-            } catch (EOFException eof){\n-                // ignore ...\n-            }\n-            data = wom.getPayloadAsBytes(null);\n-        } catch (IOException e) {\n-            JMSException jEx = new JMSException(\"Unable to write to internal message .. \" + e);\n-            jEx.setLinkedException(e);\n-            throw jEx;\n-        }\n-\n-        this.writeOnlyMessage = new WriteOnlyMessage(data);\n-\n-        this.readOnlyMessage  = null;\n-        this.readMode = false;\n-    }\n-\n-    StreamMessageImpl(SessionImpl session, PubSubProtocol.Message message, Map<String, Object> properties,\n-                      String sourceTopicName, String subscriberId, Runnable ackRunnable) throws JMSException {\n-        super(session, message, properties, sourceTopicName, subscriberId, ackRunnable);\n-\n-        final byte[] data = message.getBody().toByteArray();\n-        try {\n-            this.readOnlyMessage = new ReadOnlyMessage(data);\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to clone/copy input message \" + message + \" .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-\n-        this.writeOnlyMessage = null;\n-        this.readMode = true;\n-    }\n-\n-    @Override\n-    protected MessageUtil.SupportedMessageTypes getJmsMessageType() {\n-        return MessageUtil.SupportedMessageTypes.STREAM;\n-    }\n-\n-    protected boolean isBodyEmpty(){\n-        return false;\n-    }\n-\n-    @Override\n-    public PubSubProtocol.Message generateHedwigMessage() throws JMSException {\n-        PubSubProtocol.Message.Builder builder = PubSubProtocol.Message.newBuilder();\n-        super.populateBuilderWithHeaders(builder);\n-\n-        // Now set body and type.\n-        try {\n-            byte[] data = getPayloadData();\n-            builder.setBody(ByteString.copyFrom(data));\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"Unable to read message data .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-\n-        return builder.build();\n-    }\n-\n-\n-    @Override\n-    public boolean readBoolean() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readBoolean();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public byte readByte() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readByte();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public short readShort() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readShort();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public char readChar() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readChar();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public int readInt() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readInt();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public long readLong() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readLong();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public float readFloat() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readFloat();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public double readDouble() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readDouble();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public String readString() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readString();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public int readBytes(byte[] data) throws JMSException {\n-        throw new UnsupportedOperationException(\"Please use readObject - this method is not supported\");\n-    }\n-\n-    @Override\n-    public Object readObject() throws JMSException {\n-        if (!readMode) throw new MessageNotReadableException(\"Message not readable\");\n-        try {\n-            return readOnlyMessage.readObject();\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"ioEx ?\");\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeBoolean(boolean val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeBoolean(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeByte(byte val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeByte(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeShort(short val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeShort(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeChar(char val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeChar(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeInt(int val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeInt(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeLong(long val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeLong(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeFloat(float val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeFloat(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeDouble(double val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeDouble(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeString(String val) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeString(val);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeBytes(byte[] data) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeBytes(data);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void writeBytes(byte[] data, int offset, int length) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeBytes(data, offset, length);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    // This method is ONLY supposed to be used for object form of primitive types !\n-    @Override\n-    public void writeObject(Object obj) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        try {\n-            writeOnlyMessage.writeObject(obj);\n-        } catch (IOException ioEx){\n-            JMSException eofEx = new JMSException(\"Unexpected ioex : \" + ioEx);\n-            eofEx.setLinkedException(ioEx);\n-            throw eofEx;\n-        }\n-    }\n-\n-    @Override\n-    public void reset() throws JMSException {\n-        if (this.readMode) return ;\n-        this.readMode = true;\n-        try {\n-            byte[] data = writeOnlyMessage.getPayloadAsBytes(null);\n-            this.readOnlyMessage = new ReadOnlyMessage(data);\n-        } catch (IOException e) {\n-            JMSException ex = new JMSException(\"cant convert to read only message ... unexpected actually .. \" + e);\n-            ex.setLinkedException(e);\n-            throw ex;\n-        }\n-        this.writeOnlyMessage = null;\n-    }\n-\n-    @Override\n-    public void clearBody() throws JMSException {\n-        super.clearBody();\n-        this.writeOnlyMessage = new WriteOnlyMessage();\n-        this.readOnlyMessage = null;\n-        this.readMode = false;\n-    }\n-\n-    private byte[] getPayloadData() throws IOException, IllegalStateException {\n-        if (readMode) return readOnlyMessage.getDataCopy();\n-\n-        Mutable<byte[]> preCloseData = new Mutable<byte[]>(null);\n-        byte[] data = writeOnlyMessage.getPayloadAsBytes(preCloseData);\n-\n-        writeOnlyMessage = new WriteOnlyMessage(preCloseData.getValue());\n-        return data;\n-    }\n-\n-\n-    @Override\n-    StreamMessageImpl createClone(SessionImpl session, String sourceTopicName, String subscriberId)\n-        throws JMSException {\n-        return new StreamMessageImpl(session, this, sourceTopicName, subscriberId);\n-    }\n-\n-    // Using java object's instead of primitives to avoid having to store schema separately.\n-    private static class ReadOnlyMessage {\n-\n-        private final ObjectInputStream ois;\n-        private final byte[] data;\n-        private final Deque<Object> unreadObjects = new ArrayDeque<Object>(4);\n-\n-        public ReadOnlyMessage(byte[] data) throws IOException {\n-            this.data = data;\n-            this.ois = new ObjectInputStream(new ByteArrayInputStream(data));\n-        }\n-\n-        public byte[] getDataCopy(){\n-            return Arrays.copyOf(data, data.length);\n-        }\n-\n-        private void unreadObject(Object obj) {\n-            unreadObjects.push(obj);\n-        }\n-\n-        private Object readNextObject() throws IOException, JMSException {\n-            try {\n-                if (! unreadObjects.isEmpty()) return unreadObjects.pop();\n-\n-                return ois.readObject();\n-            } catch (ClassNotFoundException e) {\n-                // unexpected !\n-                javax.jms.IllegalStateException jEx =\n-                    new javax.jms.IllegalStateException(\"Unexpected not to be able to resolve class\");\n-                jEx.setLinkedException(e);\n-                throw jEx;\n-            } catch (EOFException eof) {\n-                throw new MessageEOFException(\"eof\");\n-            }\n-        }\n-\n-        public boolean readBoolean() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                Boolean value = MessageUtil.asBoolean(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public byte readByte() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                Byte value = MessageUtil.asByte(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public short readShort() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                Short value = MessageUtil.asShort(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public char readChar() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                Character value = MessageUtil.asChar(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public int readInt() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                Integer value = MessageUtil.asInteger(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public long readLong() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                Long value = MessageUtil.asLong(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public float readFloat() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                Float value = MessageUtil.asFloat(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public double readDouble() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                Double value = MessageUtil.asDouble(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public String readString() throws IOException, JMSException {\n-            Object obj = readNextObject();\n-            boolean failed = true;\n-            try {\n-                String value = MessageUtil.asString(obj);\n-                failed = false;\n-                return value;\n-            } finally {\n-                if (failed) unreadObject(obj);\n-            }\n-        }\n-\n-        public Object readObject() throws IOException, JMSException {\n-            return readNextObject();\n-        }\n-    }\n-\n-    private static class WriteOnlyMessage {\n-\n-        private final ByteArrayOutputStream baos;\n-        // private ObjectOutputStream oos;\n-        private final ObjectOutputStream oos;\n-\n-        public WriteOnlyMessage() throws JMSException {\n-            baos = new ByteArrayOutputStream();\n-            try {\n-                oos = new ObjectOutputStream(baos);\n-            } catch (IOException e) {\n-                IllegalStateException jEx =\n-                    new IllegalStateException(\"Unexpected to not be able to create empty write only message\");\n-                jEx.setLinkedException(e);\n-                throw jEx;\n-            }\n-        }\n-\n-        private WriteOnlyMessage(final byte[] data) throws IllegalStateException {\n-            baos = new ByteArrayOutputStream();\n-            try {\n-                if (null != data) baos.write(data);\n-                baos.flush();\n-                oos = new ObjectOutputStream(baos){\n-                    // Do not write the header if data is based on already materialized stream.\n-                    protected void writeStreamHeader() throws IOException {\n-                        if (null == data || 0 == data.length) super.writeStreamHeader();\n-                    }\n-                };\n-            } catch (IOException e) {\n-                IllegalStateException jEx =\n-                    new IllegalStateException(\"Unexpected to not be able to create empty write only message\");\n-                jEx.setLinkedException(e);\n-                throw jEx;\n-            }\n-        }\n-\n-        public byte[] getPayloadAsBytes(Mutable<byte[]> preCloseData) throws IOException {\n-            oos.flush();\n-            baos.flush();\n-            if (null != preCloseData) preCloseData.setValue(baos.toByteArray());\n-            oos.close();\n-            baos.flush();\n-            baos.close();\n-            // oos = null;\n-            return baos.toByteArray();\n-        }\n-\n-        public void writeBoolean(boolean val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeByte(byte val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeShort(short val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeChar(char val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeInt(int val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeLong(long val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeFloat(float val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeDouble(double val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeString(String val) throws IOException {\n-            oos.writeObject(val);\n-        }\n-\n-        public void writeBytes(byte[] data) throws IOException {\n-            oos.writeObject(data);\n-        }\n-\n-        // copy and write as a single byte array.\n-        public void writeBytes(byte[] data, int offset, int length) throws IOException {\n-            byte[] arr = new byte[length];\n-            System.arraycopy(data, offset, arr, 0, length);\n-            writeBytes(arr);\n-        }\n-\n-        public void writeObject(Object obj) throws JMSException, IOException {\n-            // unrolling it\n-            if (obj instanceof Boolean) {\n-                writeBoolean((Boolean) obj);\n-            }\n-            else if (obj instanceof Byte) {\n-                writeByte((Byte) obj);\n-            }\n-            else if (obj instanceof Short) {\n-                writeShort((Short) obj);\n-            }\n-            else if (obj instanceof Character) {\n-                writeChar((Character) obj);\n-            }\n-            else if (obj instanceof Integer) {\n-                writeInt((Integer) obj);\n-            }\n-            else if (obj instanceof Long) {\n-                writeLong((Long) obj);\n-            }\n-            else if (obj instanceof Float) {\n-                writeFloat((Float) obj);\n-            }\n-            else if (obj instanceof Double) {\n-                writeDouble((Double) obj);\n-            }\n-            else if (obj instanceof String) {\n-                writeString((String) obj);\n-            }\n-            else if (obj instanceof byte[]) {\n-                writeBytes((byte[]) obj);\n-            }\n-            else{\n-                throw new JMSException(\"Unsupported type for obj : \" + obj.getClass());\n-            }\n-        }\n-    }\n-}\n\\ No newline at end of file"},{"sha":"dc3a3ca4e8298471e06fc307d37a3cdc40da70b3","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/TextMessageImpl.java","status":"removed","additions":0,"deletions":135,"changes":135,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/TextMessageImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/TextMessageImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/TextMessageImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,135 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.message;\n-\n-import com.google.protobuf.ByteString;\n-import org.apache.hedwig.jms.SessionImpl;\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-\n-import javax.jms.JMSException;\n-import javax.jms.Message;\n-import javax.jms.MessageNotWriteableException;\n-import javax.jms.TextMessage;\n-import java.util.Map;\n-\n-/**\n- * read/write text message ...\n- */\n-public class TextMessageImpl extends MessageImpl implements TextMessage {\n-    private String payload;\n-    private boolean readMode;\n-\n-    public TextMessageImpl(SessionImpl session) {\n-        super(session);\n-        this.readMode = false;\n-    }\n-\n-    public TextMessageImpl(SessionImpl session, String payload) {\n-        super(session);\n-        this.payload = payload;\n-        this.readMode = false;\n-    }\n-\n-    public TextMessageImpl(SessionImpl session, TextMessageImpl message, String sourceTopicName,\n-                           String subscriberId) throws JMSException {\n-        super(session, (MessageImpl) message, sourceTopicName, subscriberId);\n-\n-        this.payload = message.getText();\n-        this.readMode = message.readMode;\n-    }\n-\n-\n-    // To clone a message from a TextMessage which is NOT TextMessageImpl\n-    // Changing order of parameter to NOT accidentally clash with the constructor above.\n-    // This is midly confusing, but helps a lot in preventing accidental bugs !\n-    public TextMessageImpl(TextMessage message, SessionImpl session) throws JMSException {\n-        super((Message) message, session);\n-\n-        if (message instanceof TextMessageImpl) {\n-            throw new JMSException(\"Coding bug - should use this constructor ONLY for non TextMessageImpl messages\");\n-        }\n-\n-        this.payload = message.getText();\n-        this.readMode = false;\n-    }\n-\n-    public TextMessageImpl(SessionImpl session, PubSubProtocol.Message message, Map<String, Object> properties,\n-                           String sourceTopicName, String subscriberId, Runnable ackRunnable) throws JMSException {\n-        super(session, message, properties, sourceTopicName, subscriberId, ackRunnable);\n-\n-        this.payload = hasBodyFromProperties() ? message.getBody().toStringUtf8() : null;\n-        this.readMode = true;\n-    }\n-\n-    @Override\n-    protected MessageUtil.SupportedMessageTypes getJmsMessageType() {\n-        return MessageUtil.SupportedMessageTypes.TEXT;\n-    }\n-\n-    @Override\n-    public PubSubProtocol.Message generateHedwigMessage() throws JMSException {\n-        PubSubProtocol.Message.Builder builder = PubSubProtocol.Message.newBuilder();\n-        super.populateBuilderWithHeaders(builder);\n-        if (! isBodyEmpty()) builder.setBody(ByteString.copyFromUtf8(this.payload));\n-        return builder.build();\n-    }\n-\n-    protected boolean isBodyEmpty(){\n-        return null == this.payload;\n-    }\n-\n-    @Override\n-    public void setText(String payload) throws JMSException {\n-        if (readMode) throw new MessageNotWriteableException(\"Message not writable\");\n-        this.payload = payload;\n-    }\n-\n-    @Override\n-    public String getText() throws JMSException {\n-        return payload;\n-    }\n-\n-    @Override\n-    public void clearBody() throws JMSException {\n-        super.clearBody();\n-        this.payload = null;\n-        this.readMode = false;\n-    }\n-\n-    @Override\n-    public void reset() throws JMSException {\n-        if (this.readMode) return ;\n-        this.readMode = true;\n-    }\n-\n-    @Override\n-    TextMessageImpl createClone(SessionImpl session, String sourceTopicName, String subscriberId) throws JMSException {\n-        return new TextMessageImpl(session, this, sourceTopicName, subscriberId);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"TextMessageImpl\");\n-        sb.append(\"{payload='\").append(payload).append('\\'');\n-        sb.append(\", readMode=\").append(readMode);\n-        sb.append(\", parent=\").append(super.toString());\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-}"},{"sha":"c4b51233e6c750c1d0ba5d5c52f9ff5573f01e9c","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/JmsHeader.java","status":"removed","additions":0,"deletions":1126,"changes":1126,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/JmsHeader.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/JmsHeader.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/JmsHeader.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,1126 +0,0 @@\n-// Generated by the protocol buffer compiler.  DO NOT EDIT!\n-// source: src/main/protobuf/JmsHeader.proto\n-\n-package org.apache.hedwig.jms.message.header;\n-\n-public final class JmsHeader {\n-  private JmsHeader() {}\n-  public static void registerAllExtensions(\n-      com.google.protobuf.ExtensionRegistry registry) {\n-  }\n-  public enum ProtocolVersion\n-      implements com.google.protobuf.ProtocolMessageEnum {\n-    VERSION_ONE(0, 1),\n-    ;\n-    \n-    public static final int VERSION_ONE_VALUE = 1;\n-    \n-    \n-    public final int getNumber() { return value; }\n-    \n-    public static ProtocolVersion valueOf(int value) {\n-      switch (value) {\n-        case 1: return VERSION_ONE;\n-        default: return null;\n-      }\n-    }\n-    \n-    public static com.google.protobuf.Internal.EnumLiteMap<ProtocolVersion>\n-        internalGetValueMap() {\n-      return internalValueMap;\n-    }\n-    private static com.google.protobuf.Internal.EnumLiteMap<ProtocolVersion>\n-        internalValueMap =\n-          new com.google.protobuf.Internal.EnumLiteMap<ProtocolVersion>() {\n-            public ProtocolVersion findValueByNumber(int number) {\n-              return ProtocolVersion.valueOf(number);\n-            }\n-          };\n-    \n-    public final com.google.protobuf.Descriptors.EnumValueDescriptor\n-        getValueDescriptor() {\n-      return getDescriptor().getValues().get(index);\n-    }\n-    public final com.google.protobuf.Descriptors.EnumDescriptor\n-        getDescriptorForType() {\n-      return getDescriptor();\n-    }\n-    public static final com.google.protobuf.Descriptors.EnumDescriptor\n-        getDescriptor() {\n-      return org.apache.hedwig.jms.message.header.JmsHeader.getDescriptor().getEnumTypes().get(0);\n-    }\n-    \n-    private static final ProtocolVersion[] VALUES = {\n-      VERSION_ONE, \n-    };\n-    \n-    public static ProtocolVersion valueOf(\n-        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {\n-      if (desc.getType() != getDescriptor()) {\n-        throw new java.lang.IllegalArgumentException(\n-          \"EnumValueDescriptor is not for this type.\");\n-      }\n-      return VALUES[desc.getIndex()];\n-    }\n-    \n-    private final int index;\n-    private final int value;\n-    \n-    private ProtocolVersion(int index, int value) {\n-      this.index = index;\n-      this.value = value;\n-    }\n-    \n-    // @@protoc_insertion_point(enum_scope:Hedwig.Jms.Header.ProtocolVersion)\n-  }\n-  \n-  public interface JmsValueOrBuilder\n-      extends com.google.protobuf.MessageOrBuilder {\n-    \n-    // required .Hedwig.Jms.Header.JmsValue.ValueType type = 1;\n-    boolean hasType();\n-    org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType getType();\n-    \n-    // optional bool booleanValue = 2;\n-    boolean hasBooleanValue();\n-    boolean getBooleanValue();\n-    \n-    // optional sint32 byteValue = 3;\n-    boolean hasByteValue();\n-    int getByteValue();\n-    \n-    // optional sint32 shortValue = 4;\n-    boolean hasShortValue();\n-    int getShortValue();\n-    \n-    // optional sint32 intValue = 5;\n-    boolean hasIntValue();\n-    int getIntValue();\n-    \n-    // optional sint64 longValue = 6;\n-    boolean hasLongValue();\n-    long getLongValue();\n-    \n-    // optional float floatValue = 7;\n-    boolean hasFloatValue();\n-    float getFloatValue();\n-    \n-    // optional double doubleValue = 8;\n-    boolean hasDoubleValue();\n-    double getDoubleValue();\n-    \n-    // optional string stringValue = 9;\n-    boolean hasStringValue();\n-    String getStringValue();\n-    \n-    // optional bytes bytesValue = 10;\n-    boolean hasBytesValue();\n-    com.google.protobuf.ByteString getBytesValue();\n-  }\n-  public static final class JmsValue extends\n-      com.google.protobuf.GeneratedMessage\n-      implements JmsValueOrBuilder {\n-    // Use JmsValue.newBuilder() to construct.\n-    private JmsValue(Builder builder) {\n-      super(builder);\n-    }\n-    private JmsValue(boolean noInit) {}\n-    \n-    private static final JmsValue defaultInstance;\n-    public static JmsValue getDefaultInstance() {\n-      return defaultInstance;\n-    }\n-    \n-    public JmsValue getDefaultInstanceForType() {\n-      return defaultInstance;\n-    }\n-    \n-    public static final com.google.protobuf.Descriptors.Descriptor\n-        getDescriptor() {\n-      return org.apache.hedwig.jms.message.header.JmsHeader.internal_static_Hedwig_Jms_Header_JmsValue_descriptor;\n-    }\n-    \n-    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-        internalGetFieldAccessorTable() {\n-      return org.apache.hedwig.jms.message.header.JmsHeader.internal_static_Hedwig_Jms_Header_JmsValue_fieldAccessorTable;\n-    }\n-    \n-    public enum ValueType\n-        implements com.google.protobuf.ProtocolMessageEnum {\n-      BOOLEAN(0, 1),\n-      BYTE(1, 2),\n-      SHORT(2, 3),\n-      INT(3, 4),\n-      LONG(4, 5),\n-      FLOAT(5, 6),\n-      DOUBLE(6, 7),\n-      STRING(7, 8),\n-      BYTES(8, 9),\n-      ;\n-      \n-      public static final int BOOLEAN_VALUE = 1;\n-      public static final int BYTE_VALUE = 2;\n-      public static final int SHORT_VALUE = 3;\n-      public static final int INT_VALUE = 4;\n-      public static final int LONG_VALUE = 5;\n-      public static final int FLOAT_VALUE = 6;\n-      public static final int DOUBLE_VALUE = 7;\n-      public static final int STRING_VALUE = 8;\n-      public static final int BYTES_VALUE = 9;\n-      \n-      \n-      public final int getNumber() { return value; }\n-      \n-      public static ValueType valueOf(int value) {\n-        switch (value) {\n-          case 1: return BOOLEAN;\n-          case 2: return BYTE;\n-          case 3: return SHORT;\n-          case 4: return INT;\n-          case 5: return LONG;\n-          case 6: return FLOAT;\n-          case 7: return DOUBLE;\n-          case 8: return STRING;\n-          case 9: return BYTES;\n-          default: return null;\n-        }\n-      }\n-      \n-      public static com.google.protobuf.Internal.EnumLiteMap<ValueType>\n-          internalGetValueMap() {\n-        return internalValueMap;\n-      }\n-      private static com.google.protobuf.Internal.EnumLiteMap<ValueType>\n-          internalValueMap =\n-            new com.google.protobuf.Internal.EnumLiteMap<ValueType>() {\n-              public ValueType findValueByNumber(int number) {\n-                return ValueType.valueOf(number);\n-              }\n-            };\n-      \n-      public final com.google.protobuf.Descriptors.EnumValueDescriptor\n-          getValueDescriptor() {\n-        return getDescriptor().getValues().get(index);\n-      }\n-      public final com.google.protobuf.Descriptors.EnumDescriptor\n-          getDescriptorForType() {\n-        return getDescriptor();\n-      }\n-      public static final com.google.protobuf.Descriptors.EnumDescriptor\n-          getDescriptor() {\n-        return org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.getDescriptor().getEnumTypes().get(0);\n-      }\n-      \n-      private static final ValueType[] VALUES = {\n-        BOOLEAN, BYTE, SHORT, INT, LONG, FLOAT, DOUBLE, STRING, BYTES, \n-      };\n-      \n-      public static ValueType valueOf(\n-          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {\n-        if (desc.getType() != getDescriptor()) {\n-          throw new java.lang.IllegalArgumentException(\n-            \"EnumValueDescriptor is not for this type.\");\n-        }\n-        return VALUES[desc.getIndex()];\n-      }\n-      \n-      private final int index;\n-      private final int value;\n-      \n-      private ValueType(int index, int value) {\n-        this.index = index;\n-        this.value = value;\n-      }\n-      \n-      // @@protoc_insertion_point(enum_scope:Hedwig.Jms.Header.JmsValue.ValueType)\n-    }\n-    \n-    private int bitField0_;\n-    // required .Hedwig.Jms.Header.JmsValue.ValueType type = 1;\n-    public static final int TYPE_FIELD_NUMBER = 1;\n-    private org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType type_;\n-    public boolean hasType() {\n-      return ((bitField0_ & 0x00000001) == 0x00000001);\n-    }\n-    public org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType getType() {\n-      return type_;\n-    }\n-    \n-    // optional bool booleanValue = 2;\n-    public static final int BOOLEANVALUE_FIELD_NUMBER = 2;\n-    private boolean booleanValue_;\n-    public boolean hasBooleanValue() {\n-      return ((bitField0_ & 0x00000002) == 0x00000002);\n-    }\n-    public boolean getBooleanValue() {\n-      return booleanValue_;\n-    }\n-    \n-    // optional sint32 byteValue = 3;\n-    public static final int BYTEVALUE_FIELD_NUMBER = 3;\n-    private int byteValue_;\n-    public boolean hasByteValue() {\n-      return ((bitField0_ & 0x00000004) == 0x00000004);\n-    }\n-    public int getByteValue() {\n-      return byteValue_;\n-    }\n-    \n-    // optional sint32 shortValue = 4;\n-    public static final int SHORTVALUE_FIELD_NUMBER = 4;\n-    private int shortValue_;\n-    public boolean hasShortValue() {\n-      return ((bitField0_ & 0x00000008) == 0x00000008);\n-    }\n-    public int getShortValue() {\n-      return shortValue_;\n-    }\n-    \n-    // optional sint32 intValue = 5;\n-    public static final int INTVALUE_FIELD_NUMBER = 5;\n-    private int intValue_;\n-    public boolean hasIntValue() {\n-      return ((bitField0_ & 0x00000010) == 0x00000010);\n-    }\n-    public int getIntValue() {\n-      return intValue_;\n-    }\n-    \n-    // optional sint64 longValue = 6;\n-    public static final int LONGVALUE_FIELD_NUMBER = 6;\n-    private long longValue_;\n-    public boolean hasLongValue() {\n-      return ((bitField0_ & 0x00000020) == 0x00000020);\n-    }\n-    public long getLongValue() {\n-      return longValue_;\n-    }\n-    \n-    // optional float floatValue = 7;\n-    public static final int FLOATVALUE_FIELD_NUMBER = 7;\n-    private float floatValue_;\n-    public boolean hasFloatValue() {\n-      return ((bitField0_ & 0x00000040) == 0x00000040);\n-    }\n-    public float getFloatValue() {\n-      return floatValue_;\n-    }\n-    \n-    // optional double doubleValue = 8;\n-    public static final int DOUBLEVALUE_FIELD_NUMBER = 8;\n-    private double doubleValue_;\n-    public boolean hasDoubleValue() {\n-      return ((bitField0_ & 0x00000080) == 0x00000080);\n-    }\n-    public double getDoubleValue() {\n-      return doubleValue_;\n-    }\n-    \n-    // optional string stringValue = 9;\n-    public static final int STRINGVALUE_FIELD_NUMBER = 9;\n-    private java.lang.Object stringValue_;\n-    public boolean hasStringValue() {\n-      return ((bitField0_ & 0x00000100) == 0x00000100);\n-    }\n-    public String getStringValue() {\n-      java.lang.Object ref = stringValue_;\n-      if (ref instanceof String) {\n-        return (String) ref;\n-      } else {\n-        com.google.protobuf.ByteString bs = \n-            (com.google.protobuf.ByteString) ref;\n-        String s = bs.toStringUtf8();\n-        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n-          stringValue_ = s;\n-        }\n-        return s;\n-      }\n-    }\n-    private com.google.protobuf.ByteString getStringValueBytes() {\n-      java.lang.Object ref = stringValue_;\n-      if (ref instanceof String) {\n-        com.google.protobuf.ByteString b = \n-            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n-        stringValue_ = b;\n-        return b;\n-      } else {\n-        return (com.google.protobuf.ByteString) ref;\n-      }\n-    }\n-    \n-    // optional bytes bytesValue = 10;\n-    public static final int BYTESVALUE_FIELD_NUMBER = 10;\n-    private com.google.protobuf.ByteString bytesValue_;\n-    public boolean hasBytesValue() {\n-      return ((bitField0_ & 0x00000200) == 0x00000200);\n-    }\n-    public com.google.protobuf.ByteString getBytesValue() {\n-      return bytesValue_;\n-    }\n-    \n-    private void initFields() {\n-      type_ = org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType.BOOLEAN;\n-      booleanValue_ = false;\n-      byteValue_ = 0;\n-      shortValue_ = 0;\n-      intValue_ = 0;\n-      longValue_ = 0L;\n-      floatValue_ = 0F;\n-      doubleValue_ = 0D;\n-      stringValue_ = \"\";\n-      bytesValue_ = com.google.protobuf.ByteString.EMPTY;\n-    }\n-    private byte memoizedIsInitialized = -1;\n-    public final boolean isInitialized() {\n-      byte isInitialized = memoizedIsInitialized;\n-      if (isInitialized != -1) return isInitialized == 1;\n-      \n-      if (!hasType()) {\n-        memoizedIsInitialized = 0;\n-        return false;\n-      }\n-      memoizedIsInitialized = 1;\n-      return true;\n-    }\n-    \n-    public void writeTo(com.google.protobuf.CodedOutputStream output)\n-                        throws java.io.IOException {\n-      getSerializedSize();\n-      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n-        output.writeEnum(1, type_.getNumber());\n-      }\n-      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n-        output.writeBool(2, booleanValue_);\n-      }\n-      if (((bitField0_ & 0x00000004) == 0x00000004)) {\n-        output.writeSInt32(3, byteValue_);\n-      }\n-      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n-        output.writeSInt32(4, shortValue_);\n-      }\n-      if (((bitField0_ & 0x00000010) == 0x00000010)) {\n-        output.writeSInt32(5, intValue_);\n-      }\n-      if (((bitField0_ & 0x00000020) == 0x00000020)) {\n-        output.writeSInt64(6, longValue_);\n-      }\n-      if (((bitField0_ & 0x00000040) == 0x00000040)) {\n-        output.writeFloat(7, floatValue_);\n-      }\n-      if (((bitField0_ & 0x00000080) == 0x00000080)) {\n-        output.writeDouble(8, doubleValue_);\n-      }\n-      if (((bitField0_ & 0x00000100) == 0x00000100)) {\n-        output.writeBytes(9, getStringValueBytes());\n-      }\n-      if (((bitField0_ & 0x00000200) == 0x00000200)) {\n-        output.writeBytes(10, bytesValue_);\n-      }\n-      getUnknownFields().writeTo(output);\n-    }\n-    \n-    private int memoizedSerializedSize = -1;\n-    public int getSerializedSize() {\n-      int size = memoizedSerializedSize;\n-      if (size != -1) return size;\n-    \n-      size = 0;\n-      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeEnumSize(1, type_.getNumber());\n-      }\n-      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeBoolSize(2, booleanValue_);\n-      }\n-      if (((bitField0_ & 0x00000004) == 0x00000004)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeSInt32Size(3, byteValue_);\n-      }\n-      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeSInt32Size(4, shortValue_);\n-      }\n-      if (((bitField0_ & 0x00000010) == 0x00000010)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeSInt32Size(5, intValue_);\n-      }\n-      if (((bitField0_ & 0x00000020) == 0x00000020)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeSInt64Size(6, longValue_);\n-      }\n-      if (((bitField0_ & 0x00000040) == 0x00000040)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeFloatSize(7, floatValue_);\n-      }\n-      if (((bitField0_ & 0x00000080) == 0x00000080)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeDoubleSize(8, doubleValue_);\n-      }\n-      if (((bitField0_ & 0x00000100) == 0x00000100)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeBytesSize(9, getStringValueBytes());\n-      }\n-      if (((bitField0_ & 0x00000200) == 0x00000200)) {\n-        size += com.google.protobuf.CodedOutputStream\n-          .computeBytesSize(10, bytesValue_);\n-      }\n-      size += getUnknownFields().getSerializedSize();\n-      memoizedSerializedSize = size;\n-      return size;\n-    }\n-    \n-    private static final long serialVersionUID = 0L;\n-    @java.lang.Override\n-    protected java.lang.Object writeReplace()\n-        throws java.io.ObjectStreamException {\n-      return super.writeReplace();\n-    }\n-    \n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseFrom(\n-        com.google.protobuf.ByteString data)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return newBuilder().mergeFrom(data).buildParsed();\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseFrom(\n-        com.google.protobuf.ByteString data,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return newBuilder().mergeFrom(data, extensionRegistry)\n-               .buildParsed();\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseFrom(byte[] data)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return newBuilder().mergeFrom(data).buildParsed();\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseFrom(\n-        byte[] data,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws com.google.protobuf.InvalidProtocolBufferException {\n-      return newBuilder().mergeFrom(data, extensionRegistry)\n-               .buildParsed();\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseFrom(java.io.InputStream input)\n-        throws java.io.IOException {\n-      return newBuilder().mergeFrom(input).buildParsed();\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseFrom(\n-        java.io.InputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      return newBuilder().mergeFrom(input, extensionRegistry)\n-               .buildParsed();\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseDelimitedFrom(java.io.InputStream input)\n-        throws java.io.IOException {\n-      Builder builder = newBuilder();\n-      if (builder.mergeDelimitedFrom(input)) {\n-        return builder.buildParsed();\n-      } else {\n-        return null;\n-      }\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseDelimitedFrom(\n-        java.io.InputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      Builder builder = newBuilder();\n-      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {\n-        return builder.buildParsed();\n-      } else {\n-        return null;\n-      }\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseFrom(\n-        com.google.protobuf.CodedInputStream input)\n-        throws java.io.IOException {\n-      return newBuilder().mergeFrom(input).buildParsed();\n-    }\n-    public static org.apache.hedwig.jms.message.header.JmsHeader.JmsValue parseFrom(\n-        com.google.protobuf.CodedInputStream input,\n-        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-        throws java.io.IOException {\n-      return newBuilder().mergeFrom(input, extensionRegistry)\n-               .buildParsed();\n-    }\n-    \n-    public static Builder newBuilder() { return Builder.create(); }\n-    public Builder newBuilderForType() { return newBuilder(); }\n-    public static Builder newBuilder(org.apache.hedwig.jms.message.header.JmsHeader.JmsValue prototype) {\n-      return newBuilder().mergeFrom(prototype);\n-    }\n-    public Builder toBuilder() { return newBuilder(this); }\n-    \n-    @java.lang.Override\n-    protected Builder newBuilderForType(\n-        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n-      Builder builder = new Builder(parent);\n-      return builder;\n-    }\n-    public static final class Builder extends\n-        com.google.protobuf.GeneratedMessage.Builder<Builder>\n-       implements org.apache.hedwig.jms.message.header.JmsHeader.JmsValueOrBuilder {\n-      public static final com.google.protobuf.Descriptors.Descriptor\n-          getDescriptor() {\n-        return org.apache.hedwig.jms.message.header.JmsHeader.internal_static_Hedwig_Jms_Header_JmsValue_descriptor;\n-      }\n-      \n-      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-          internalGetFieldAccessorTable() {\n-        return org.apache.hedwig.jms.message.header.JmsHeader.internal_static_Hedwig_Jms_Header_JmsValue_fieldAccessorTable;\n-      }\n-      \n-      // Construct using org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.newBuilder()\n-      private Builder() {\n-        maybeForceBuilderInitialization();\n-      }\n-      \n-      private Builder(BuilderParent parent) {\n-        super(parent);\n-        maybeForceBuilderInitialization();\n-      }\n-      private void maybeForceBuilderInitialization() {\n-        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n-        }\n-      }\n-      private static Builder create() {\n-        return new Builder();\n-      }\n-      \n-      public Builder clear() {\n-        super.clear();\n-        type_ = org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType.BOOLEAN;\n-        bitField0_ = (bitField0_ & ~0x00000001);\n-        booleanValue_ = false;\n-        bitField0_ = (bitField0_ & ~0x00000002);\n-        byteValue_ = 0;\n-        bitField0_ = (bitField0_ & ~0x00000004);\n-        shortValue_ = 0;\n-        bitField0_ = (bitField0_ & ~0x00000008);\n-        intValue_ = 0;\n-        bitField0_ = (bitField0_ & ~0x00000010);\n-        longValue_ = 0L;\n-        bitField0_ = (bitField0_ & ~0x00000020);\n-        floatValue_ = 0F;\n-        bitField0_ = (bitField0_ & ~0x00000040);\n-        doubleValue_ = 0D;\n-        bitField0_ = (bitField0_ & ~0x00000080);\n-        stringValue_ = \"\";\n-        bitField0_ = (bitField0_ & ~0x00000100);\n-        bytesValue_ = com.google.protobuf.ByteString.EMPTY;\n-        bitField0_ = (bitField0_ & ~0x00000200);\n-        return this;\n-      }\n-      \n-      public Builder clone() {\n-        return create().mergeFrom(buildPartial());\n-      }\n-      \n-      public com.google.protobuf.Descriptors.Descriptor\n-          getDescriptorForType() {\n-        return org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.getDescriptor();\n-      }\n-      \n-      public org.apache.hedwig.jms.message.header.JmsHeader.JmsValue getDefaultInstanceForType() {\n-        return org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.getDefaultInstance();\n-      }\n-      \n-      public org.apache.hedwig.jms.message.header.JmsHeader.JmsValue build() {\n-        org.apache.hedwig.jms.message.header.JmsHeader.JmsValue result = buildPartial();\n-        if (!result.isInitialized()) {\n-          throw newUninitializedMessageException(result);\n-        }\n-        return result;\n-      }\n-      \n-      private org.apache.hedwig.jms.message.header.JmsHeader.JmsValue buildParsed()\n-          throws com.google.protobuf.InvalidProtocolBufferException {\n-        org.apache.hedwig.jms.message.header.JmsHeader.JmsValue result = buildPartial();\n-        if (!result.isInitialized()) {\n-          throw newUninitializedMessageException(\n-            result).asInvalidProtocolBufferException();\n-        }\n-        return result;\n-      }\n-      \n-      public org.apache.hedwig.jms.message.header.JmsHeader.JmsValue buildPartial() {\n-        org.apache.hedwig.jms.message.header.JmsHeader.JmsValue result = new org.apache.hedwig.jms.message.header.JmsHeader.JmsValue(this);\n-        int from_bitField0_ = bitField0_;\n-        int to_bitField0_ = 0;\n-        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n-          to_bitField0_ |= 0x00000001;\n-        }\n-        result.type_ = type_;\n-        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {\n-          to_bitField0_ |= 0x00000002;\n-        }\n-        result.booleanValue_ = booleanValue_;\n-        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {\n-          to_bitField0_ |= 0x00000004;\n-        }\n-        result.byteValue_ = byteValue_;\n-        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {\n-          to_bitField0_ |= 0x00000008;\n-        }\n-        result.shortValue_ = shortValue_;\n-        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {\n-          to_bitField0_ |= 0x00000010;\n-        }\n-        result.intValue_ = intValue_;\n-        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {\n-          to_bitField0_ |= 0x00000020;\n-        }\n-        result.longValue_ = longValue_;\n-        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {\n-          to_bitField0_ |= 0x00000040;\n-        }\n-        result.floatValue_ = floatValue_;\n-        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {\n-          to_bitField0_ |= 0x00000080;\n-        }\n-        result.doubleValue_ = doubleValue_;\n-        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {\n-          to_bitField0_ |= 0x00000100;\n-        }\n-        result.stringValue_ = stringValue_;\n-        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {\n-          to_bitField0_ |= 0x00000200;\n-        }\n-        result.bytesValue_ = bytesValue_;\n-        result.bitField0_ = to_bitField0_;\n-        onBuilt();\n-        return result;\n-      }\n-      \n-      public Builder mergeFrom(com.google.protobuf.Message other) {\n-        if (other instanceof org.apache.hedwig.jms.message.header.JmsHeader.JmsValue) {\n-          return mergeFrom((org.apache.hedwig.jms.message.header.JmsHeader.JmsValue)other);\n-        } else {\n-          super.mergeFrom(other);\n-          return this;\n-        }\n-      }\n-      \n-      public Builder mergeFrom(org.apache.hedwig.jms.message.header.JmsHeader.JmsValue other) {\n-        if (other == org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.getDefaultInstance()) return this;\n-        if (other.hasType()) {\n-          setType(other.getType());\n-        }\n-        if (other.hasBooleanValue()) {\n-          setBooleanValue(other.getBooleanValue());\n-        }\n-        if (other.hasByteValue()) {\n-          setByteValue(other.getByteValue());\n-        }\n-        if (other.hasShortValue()) {\n-          setShortValue(other.getShortValue());\n-        }\n-        if (other.hasIntValue()) {\n-          setIntValue(other.getIntValue());\n-        }\n-        if (other.hasLongValue()) {\n-          setLongValue(other.getLongValue());\n-        }\n-        if (other.hasFloatValue()) {\n-          setFloatValue(other.getFloatValue());\n-        }\n-        if (other.hasDoubleValue()) {\n-          setDoubleValue(other.getDoubleValue());\n-        }\n-        if (other.hasStringValue()) {\n-          setStringValue(other.getStringValue());\n-        }\n-        if (other.hasBytesValue()) {\n-          setBytesValue(other.getBytesValue());\n-        }\n-        this.mergeUnknownFields(other.getUnknownFields());\n-        return this;\n-      }\n-      \n-      public final boolean isInitialized() {\n-        if (!hasType()) {\n-          \n-          return false;\n-        }\n-        return true;\n-      }\n-      \n-      public Builder mergeFrom(\n-          com.google.protobuf.CodedInputStream input,\n-          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n-          throws java.io.IOException {\n-        com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n-          com.google.protobuf.UnknownFieldSet.newBuilder(\n-            this.getUnknownFields());\n-        while (true) {\n-          int tag = input.readTag();\n-          switch (tag) {\n-            case 0:\n-              this.setUnknownFields(unknownFields.build());\n-              onChanged();\n-              return this;\n-            default: {\n-              if (!parseUnknownField(input, unknownFields,\n-                                     extensionRegistry, tag)) {\n-                this.setUnknownFields(unknownFields.build());\n-                onChanged();\n-                return this;\n-              }\n-              break;\n-            }\n-            case 8: {\n-              int rawValue = input.readEnum();\n-              org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType value = org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType.valueOf(rawValue);\n-              if (value == null) {\n-                unknownFields.mergeVarintField(1, rawValue);\n-              } else {\n-                bitField0_ |= 0x00000001;\n-                type_ = value;\n-              }\n-              break;\n-            }\n-            case 16: {\n-              bitField0_ |= 0x00000002;\n-              booleanValue_ = input.readBool();\n-              break;\n-            }\n-            case 24: {\n-              bitField0_ |= 0x00000004;\n-              byteValue_ = input.readSInt32();\n-              break;\n-            }\n-            case 32: {\n-              bitField0_ |= 0x00000008;\n-              shortValue_ = input.readSInt32();\n-              break;\n-            }\n-            case 40: {\n-              bitField0_ |= 0x00000010;\n-              intValue_ = input.readSInt32();\n-              break;\n-            }\n-            case 48: {\n-              bitField0_ |= 0x00000020;\n-              longValue_ = input.readSInt64();\n-              break;\n-            }\n-            case 61: {\n-              bitField0_ |= 0x00000040;\n-              floatValue_ = input.readFloat();\n-              break;\n-            }\n-            case 65: {\n-              bitField0_ |= 0x00000080;\n-              doubleValue_ = input.readDouble();\n-              break;\n-            }\n-            case 74: {\n-              bitField0_ |= 0x00000100;\n-              stringValue_ = input.readBytes();\n-              break;\n-            }\n-            case 82: {\n-              bitField0_ |= 0x00000200;\n-              bytesValue_ = input.readBytes();\n-              break;\n-            }\n-          }\n-        }\n-      }\n-      \n-      private int bitField0_;\n-      \n-      // required .Hedwig.Jms.Header.JmsValue.ValueType type = 1;\n-      private org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType type_ = org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType.BOOLEAN;\n-      public boolean hasType() {\n-        return ((bitField0_ & 0x00000001) == 0x00000001);\n-      }\n-      public org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType getType() {\n-        return type_;\n-      }\n-      public Builder setType(org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType value) {\n-        if (value == null) {\n-          throw new NullPointerException();\n-        }\n-        bitField0_ |= 0x00000001;\n-        type_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearType() {\n-        bitField0_ = (bitField0_ & ~0x00000001);\n-        type_ = org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.ValueType.BOOLEAN;\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional bool booleanValue = 2;\n-      private boolean booleanValue_ ;\n-      public boolean hasBooleanValue() {\n-        return ((bitField0_ & 0x00000002) == 0x00000002);\n-      }\n-      public boolean getBooleanValue() {\n-        return booleanValue_;\n-      }\n-      public Builder setBooleanValue(boolean value) {\n-        bitField0_ |= 0x00000002;\n-        booleanValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearBooleanValue() {\n-        bitField0_ = (bitField0_ & ~0x00000002);\n-        booleanValue_ = false;\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional sint32 byteValue = 3;\n-      private int byteValue_ ;\n-      public boolean hasByteValue() {\n-        return ((bitField0_ & 0x00000004) == 0x00000004);\n-      }\n-      public int getByteValue() {\n-        return byteValue_;\n-      }\n-      public Builder setByteValue(int value) {\n-        bitField0_ |= 0x00000004;\n-        byteValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearByteValue() {\n-        bitField0_ = (bitField0_ & ~0x00000004);\n-        byteValue_ = 0;\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional sint32 shortValue = 4;\n-      private int shortValue_ ;\n-      public boolean hasShortValue() {\n-        return ((bitField0_ & 0x00000008) == 0x00000008);\n-      }\n-      public int getShortValue() {\n-        return shortValue_;\n-      }\n-      public Builder setShortValue(int value) {\n-        bitField0_ |= 0x00000008;\n-        shortValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearShortValue() {\n-        bitField0_ = (bitField0_ & ~0x00000008);\n-        shortValue_ = 0;\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional sint32 intValue = 5;\n-      private int intValue_ ;\n-      public boolean hasIntValue() {\n-        return ((bitField0_ & 0x00000010) == 0x00000010);\n-      }\n-      public int getIntValue() {\n-        return intValue_;\n-      }\n-      public Builder setIntValue(int value) {\n-        bitField0_ |= 0x00000010;\n-        intValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearIntValue() {\n-        bitField0_ = (bitField0_ & ~0x00000010);\n-        intValue_ = 0;\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional sint64 longValue = 6;\n-      private long longValue_ ;\n-      public boolean hasLongValue() {\n-        return ((bitField0_ & 0x00000020) == 0x00000020);\n-      }\n-      public long getLongValue() {\n-        return longValue_;\n-      }\n-      public Builder setLongValue(long value) {\n-        bitField0_ |= 0x00000020;\n-        longValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearLongValue() {\n-        bitField0_ = (bitField0_ & ~0x00000020);\n-        longValue_ = 0L;\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional float floatValue = 7;\n-      private float floatValue_ ;\n-      public boolean hasFloatValue() {\n-        return ((bitField0_ & 0x00000040) == 0x00000040);\n-      }\n-      public float getFloatValue() {\n-        return floatValue_;\n-      }\n-      public Builder setFloatValue(float value) {\n-        bitField0_ |= 0x00000040;\n-        floatValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearFloatValue() {\n-        bitField0_ = (bitField0_ & ~0x00000040);\n-        floatValue_ = 0F;\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional double doubleValue = 8;\n-      private double doubleValue_ ;\n-      public boolean hasDoubleValue() {\n-        return ((bitField0_ & 0x00000080) == 0x00000080);\n-      }\n-      public double getDoubleValue() {\n-        return doubleValue_;\n-      }\n-      public Builder setDoubleValue(double value) {\n-        bitField0_ |= 0x00000080;\n-        doubleValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearDoubleValue() {\n-        bitField0_ = (bitField0_ & ~0x00000080);\n-        doubleValue_ = 0D;\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // optional string stringValue = 9;\n-      private java.lang.Object stringValue_ = \"\";\n-      public boolean hasStringValue() {\n-        return ((bitField0_ & 0x00000100) == 0x00000100);\n-      }\n-      public String getStringValue() {\n-        java.lang.Object ref = stringValue_;\n-        if (!(ref instanceof String)) {\n-          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n-          stringValue_ = s;\n-          return s;\n-        } else {\n-          return (String) ref;\n-        }\n-      }\n-      public Builder setStringValue(String value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000100;\n-        stringValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearStringValue() {\n-        bitField0_ = (bitField0_ & ~0x00000100);\n-        stringValue_ = getDefaultInstance().getStringValue();\n-        onChanged();\n-        return this;\n-      }\n-      void setStringValue(com.google.protobuf.ByteString value) {\n-        bitField0_ |= 0x00000100;\n-        stringValue_ = value;\n-        onChanged();\n-      }\n-      \n-      // optional bytes bytesValue = 10;\n-      private com.google.protobuf.ByteString bytesValue_ = com.google.protobuf.ByteString.EMPTY;\n-      public boolean hasBytesValue() {\n-        return ((bitField0_ & 0x00000200) == 0x00000200);\n-      }\n-      public com.google.protobuf.ByteString getBytesValue() {\n-        return bytesValue_;\n-      }\n-      public Builder setBytesValue(com.google.protobuf.ByteString value) {\n-        if (value == null) {\n-    throw new NullPointerException();\n-  }\n-  bitField0_ |= 0x00000200;\n-        bytesValue_ = value;\n-        onChanged();\n-        return this;\n-      }\n-      public Builder clearBytesValue() {\n-        bitField0_ = (bitField0_ & ~0x00000200);\n-        bytesValue_ = getDefaultInstance().getBytesValue();\n-        onChanged();\n-        return this;\n-      }\n-      \n-      // @@protoc_insertion_point(builder_scope:Hedwig.Jms.Header.JmsValue)\n-    }\n-    \n-    static {\n-      defaultInstance = new JmsValue(true);\n-      defaultInstance.initFields();\n-    }\n-    \n-    // @@protoc_insertion_point(class_scope:Hedwig.Jms.Header.JmsValue)\n-  }\n-  \n-  private static com.google.protobuf.Descriptors.Descriptor\n-    internal_static_Hedwig_Jms_Header_JmsValue_descriptor;\n-  private static\n-    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n-      internal_static_Hedwig_Jms_Header_JmsValue_fieldAccessorTable;\n-  \n-  public static com.google.protobuf.Descriptors.FileDescriptor\n-      getDescriptor() {\n-    return descriptor;\n-  }\n-  private static com.google.protobuf.Descriptors.FileDescriptor\n-      descriptor;\n-  static {\n-    java.lang.String[] descriptorData = {\n-      \"\\n!src/main/protobuf/JmsHeader.proto\\022\\021Hed\" +\n-      \"wig.Jms.Header\\\"\\343\\002\\n\\010JmsValue\\0223\\n\\004type\\030\\001 \\002(\" +\n-      \"\\0162%.Hedwig.Jms.Header.JmsValue.ValueType\" +\n-      \"\\022\\024\\n\\014booleanValue\\030\\002 \\001(\\010\\022\\021\\n\\tbyteValue\\030\\003 \\001(\" +\n-      \"\\021\\022\\022\\n\\nshortValue\\030\\004 \\001(\\021\\022\\020\\n\\010intValue\\030\\005 \\001(\\021\\022\" +\n-      \"\\021\\n\\tlongValue\\030\\006 \\001(\\022\\022\\022\\n\\nfloatValue\\030\\007 \\001(\\002\\022\\023\" +\n-      \"\\n\\013doubleValue\\030\\010 \\001(\\001\\022\\023\\n\\013stringValue\\030\\t \\001(\\t\" +\n-      \"\\022\\022\\n\\nbytesValue\\030\\n \\001(\\014\\\"n\\n\\tValueType\\022\\013\\n\\007BOO\" +\n-      \"LEAN\\020\\001\\022\\010\\n\\004BYTE\\020\\002\\022\\t\\n\\005SHORT\\020\\003\\022\\007\\n\\003INT\\020\\004\\022\\010\\n\\004\" +\n-      \"LONG\\020\\005\\022\\t\\n\\005FLOAT\\020\\006\\022\\n\\n\\006DOUBLE\\020\\007\\022\\n\\n\\006STRING\\020\",\n-      \"\\010\\022\\t\\n\\005BYTES\\020\\t*\\\"\\n\\017ProtocolVersion\\022\\017\\n\\013VERSI\" +\n-      \"ON_ONE\\020\\001B(\\n$org.apache.hedwig.jms.messag\" +\n-      \"e.headerH\\001\"\n-    };\n-    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n-      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n-        public com.google.protobuf.ExtensionRegistry assignDescriptors(\n-            com.google.protobuf.Descriptors.FileDescriptor root) {\n-          descriptor = root;\n-          internal_static_Hedwig_Jms_Header_JmsValue_descriptor =\n-            getDescriptor().getMessageTypes().get(0);\n-          internal_static_Hedwig_Jms_Header_JmsValue_fieldAccessorTable = new\n-            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n-              internal_static_Hedwig_Jms_Header_JmsValue_descriptor,\n-              new java.lang.String[] { \"Type\", \"BooleanValue\", \"ByteValue\", \"ShortValue\", \"IntValue\", \"LongValue\", \"FloatValue\", \"DoubleValue\", \"StringValue\", \"BytesValue\", },\n-              org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.class,\n-              org.apache.hedwig.jms.message.header.JmsHeader.JmsValue.Builder.class);\n-          return null;\n-        }\n-      };\n-    com.google.protobuf.Descriptors.FileDescriptor\n-      .internalBuildGeneratedFileFrom(descriptorData,\n-        new com.google.protobuf.Descriptors.FileDescriptor[] {\n-        }, assigner);\n-  }\n-  \n-  // @@protoc_insertion_point(outer_class_scope)\n-}"},{"sha":"38fccd9bd81c01c7e7883c481812739a812caf9f","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/MetadataProcessor.java","status":"removed","additions":0,"deletions":163,"changes":163,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/MetadataProcessor.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/MetadataProcessor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/header/MetadataProcessor.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,163 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.apache.hedwig.jms.message.header;\n-\n-import com.google.protobuf.ByteString;\n-import com.google.protobuf.InvalidProtocolBufferException;\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-/**\n- * Decouple rest of system from handling metadata/headers in hedwig.\n- * Since this part might change (and is shared across the system), changes to it should be isolated from rest of\n- * jms provider as much as possible so that they can evolve independently with minimal overlap.\n- */\n-public class MetadataProcessor {\n-\n-    private final static Logger logger = LoggerFactory.getLogger(MetadataProcessor.class);\n-\n-    public static Map<String, Object> parseHeaders(PubSubProtocol.Message message){\n-        Map<String, Object> properties = new HashMap<String, Object>();\n-\n-        // if not header or properties, return empty map ...\n-        if (! message.hasHeader() || ! message.getHeader().hasProperties()) return properties;\n-\n-        // first, populate the map, then remove the standard headers from it.\n-        for (PubSubProtocol.Map.Entry entry : message.getHeader().getProperties().getEntriesList()){\n-            final JmsHeader.JmsValue value;\n-            try {\n-                ByteString data = entry.getValue();\n-                value = JmsHeader.JmsValue.parseFrom(data);\n-            } catch (InvalidProtocolBufferException e) {\n-                // incorrect type, we cant do much, ignore and continue.\n-                if (logger.isDebugEnabled()) logger.debug(\"Cant parse header \" +\n-                    entry.getKey() + \" as a jms value, ignoring\");\n-                continue;\n-            }\n-\n-            switch(value.getType()){\n-                case BOOLEAN:\n-                    properties.put(entry.getKey(), (boolean) value.getBooleanValue());\n-                    break;\n-                case BYTE:\n-                    properties.put(entry.getKey(), (byte) value.getByteValue());\n-                    break;\n-                case SHORT:\n-                    properties.put(entry.getKey(), (short) value.getShortValue());\n-                    break;\n-                case INT:\n-                    properties.put(entry.getKey(), (int) value.getIntValue());\n-                    break;\n-                case LONG:\n-                    properties.put(entry.getKey(), (long) value.getLongValue());\n-                    break;\n-                case FLOAT:\n-                    properties.put(entry.getKey(), (float) value.getFloatValue());\n-                    break;\n-                case DOUBLE:\n-                    properties.put(entry.getKey(), (double) value.getDoubleValue());\n-                    break;\n-                case STRING:\n-                    properties.put(entry.getKey(), (String) value.getStringValue());\n-                    break;\n-                case BYTES:\n-                    properties.put(entry.getKey(), value.getBytesValue());\n-                    break;\n-                default:\n-                    // future addition not yet supported ...\n-                    logger.info(\"Unknown metadata key type \" + value.getType() +\n-                        \" ... unsupported by jms provider. Ignoring\");\n-                    continue;\n-            }\n-        }\n-        return properties;\n-    }\n-\n-    public static void addHeaders(PubSubProtocol.Message.Builder builder, Map<String, Object> properties) {\n-        // Too many builder.addMetadata(...) code in this method, externalize to their own methods ? maybe later ...\n-        // add the user properties, and then override standard properties.\n-\n-        PubSubProtocol.Map.Builder mapBuilder = PubSubProtocol.Map.newBuilder();\n-\n-        for (Map.Entry<String, Object> entry : properties.entrySet()){\n-            // ignoring, right ?\n-            if (null == entry.getValue()) continue;\n-\n-            final JmsHeader.JmsValue.Builder jmsValueBuilder = JmsHeader.JmsValue.newBuilder();\n-\n-            final String key = entry.getKey();\n-            final Object value = entry.getValue();\n-            if (value instanceof Boolean){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.BOOLEAN);\n-                jmsValueBuilder.setBooleanValue((Boolean) value);\n-            }\n-            else if (value instanceof Byte){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.BYTE);\n-                jmsValueBuilder.setByteValue((Byte) value);\n-            }\n-            else if (value instanceof Short){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.SHORT);\n-                jmsValueBuilder.setShortValue((Short) value);\n-            }\n-            else if (value instanceof Integer){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.INT);\n-                jmsValueBuilder.setIntValue((Integer) value);\n-            }\n-            else if (value instanceof Long){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.LONG);\n-                jmsValueBuilder.setLongValue((Long) value);\n-            }\n-            else if (value instanceof Float){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.FLOAT);\n-                jmsValueBuilder.setFloatValue((Float) value);\n-            }\n-            else if (value instanceof Double){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.DOUBLE);\n-                jmsValueBuilder.setDoubleValue((Double) value);\n-            }\n-            else if (value instanceof String){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.STRING);\n-                jmsValueBuilder.setStringValue((String) value);\n-            }\n-            else if (value instanceof byte[]){\n-                jmsValueBuilder.setType(JmsHeader.JmsValue.ValueType.BYTES);\n-                jmsValueBuilder.setBytesValue(ByteString.copyFrom((byte[]) value));\n-            }\n-            else {\n-                throw new IllegalArgumentException(\"Unknown property value type ? \" + entry);\n-            }\n-\n-\n-            PubSubProtocol.Map.Entry.Builder entryBuilder = PubSubProtocol.Map.Entry.newBuilder();\n-            entryBuilder.setKey(key);\n-            entryBuilder.setValue(jmsValueBuilder.build().toByteString());\n-\n-            mapBuilder.addEntries(entryBuilder.build());\n-        }\n-\n-        PubSubProtocol.MessageHeader.Builder messageHeaderBuilder = PubSubProtocol.MessageHeader.newBuilder();\n-        messageHeaderBuilder.setProperties(mapBuilder.build());\n-\n-        builder.setHeader(messageHeaderBuilder.build());\n-    }\n-}"},{"sha":"0cd78cb2dc86f2c77ded2e576de7271f872e5103","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/package-info.html","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/package-info.html","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/package-info.html","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/message/package-info.html?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,29 +0,0 @@\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-\n-Contains implementations of various Message's supported by JMS. <br/>\n-The implementations take care of these aspects : <br/>\n-<ul>\n-  <li>Provide a JMS compliant implementation for the different messages</li>\n-  <li>Allows the system to accept and convert Message's NOT created via this package.</li>\n-  <li>Allows system to generate hedwig wire-format messages from these JMS messages. (taken with above,\n-    it allows us to send any JMS message over wire).</li>\n-  <li>Allows system to parse hedwig wire-format messages into JMS messages</li>\n-</ul>\n-\n-Most of the implementation is hidden away and exposed via the MessagUtil - except for what is mandated\n-by JMS, and some state information required by hedwig."},{"sha":"e0150686eaf255b76abc8ca2292099ce6e9357f0","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/package-info.html","status":"removed","additions":0,"deletions":92,"changes":92,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/package-info.html","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/package-info.html","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/package-info.html?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,92 +0,0 @@\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-\n-\n-<h3>Introduction</h3>\n-\n-Contains the basic (hedwig agnostic) aspects of the provider implementation <br/>\n-This package enforces (to a large part) the constraints expected by JMS api and maintains state and\n-manages the lifecycle of rest of the provider system. <br/>\n-<p/>\n-It depends only on message package.<br/>\n-It is decoupled from actual nitty-gritties of the hedwig specific aspects via a Facade - which\n-encapsulates all functionalities required off hedwig. <br/>\n-It is envisioned that we will have additional implementations for the facade as time goes by :\n-<ul>\n-  <li>Test mockup facade to test provider aspects decoupled from hedwig</li>\n-  <li>Facade's to experiment with add and/or modify functionality exposed to provider (support for\n-    Queue for example without modifying existing code).</li>\n-  <li>Facade's to experiment with add and/or modify functionality to hedwig itself.</li>\n-  <li>This space for rent :-)</li>\n-</ul>\n-\n-\n-<h3>Missing functionality</h3>\n-\n-Various aspects of JMS are currently unsupported - the detailed list is long, but the main caveats\n-with the provider currently are :\n-<ul>\n-\n-  <li>No support for Queues : Hedwig currently does not have a notion of JMS queue's for us to leverage.</li>\n-\n-  <li>No support for noLocal : Hedwig DOES NOT conform to JMS model of\n-    connection -(n)-> session -(n)-> publisher/subscriber. Each session has a hedwig connection.<br/>\n-Currently I am simulating noLocal, but this IS fragile and works for the duration of connection -\n-    ONLY until the message id is still in a LRUCache. As mentioned before, this is a kludge, and not\n-    a good solution.<br/>\n-  </li>\n-\n-  <li>Note that everything is durable in hedwig - so we do not support NON_PERSISTENT delivery mode.</li>\n-\n-  <li>Calling unsubscribe on a durable subscription will fail if it was NOT created in the current session. <br/>\n-    In hedwig, to unsubscribe, we need the subscription id and the topic ... <br/>\n-    To simulate unsubscribe(), we store the subscriberId to topicName mapping when a create* api is\n-    invoked. <br/>\n-    Hence, if create* was NOT called, then we have no way to infer which topic the subscription-id\n-    refers to from hedwig, and so cant unsubscribe. <br/>\n-    The workaround is - simply create a durable subsriber just as a workaround of this limitation -\n-    the topicName will be known to the user/client anyway.</li>\n-\n-  <li>Explicit session recovery is not supported.<br/>\n-Reconnection of hedwig session (either explicitly or implicitly by underlying client implementation) will\n-automatically trigger redelivery of un-acknowledged messages.\n-  </li>\n-\n-  <li>Because of the above, setting the JMSRedelivered flag is almost impossible in a consistent way.<br/>\n-Currently, we simulate it for redelivery due to provider side events : rollback of txn, exception\n-    in message listener (primarily). <br/>\n-At best we can simulate it with a kludge - at risk of potentially running out of resources ... this\n-    is being investigated : but unlikely to have a clean fix. <br/>\n-  </li>\n-\n-  <li>Hedwig only supports marking all messages until seq-id as received : while JMS indicates abilit\n-    y to acknowledge individual messages.<br/>\n-This distinction is currently unsupported. Investigating if we can do something about it.\n-  </li>\n-\n-  <li>JMS spec requires\n-    \"A connection's delivery of incoming messages can be temporarily stopped <br/>\n-using its stop() method. It can be restarted using its start() method. When the <br/>\n-connection is stopped, delivery to all the connection’s MessageConsumers is <br/>\n-inhibited: synchronous receives block, and messages are not delivered to <br/>\n-MessageListeners.\"<br/>\n-  We honour this for undelivered messages from server - but if stop is called while there are\n-    pending messages yet to be delivered to a listner (or buffered in subscriber for receive),\n-    then they will be delivered irrespective of stop().</li>\n-\n-</ul>\n-Hopefully I am not missing any of the big points ..."},{"sha":"a2845be563110ae8fd0e7cf36bc085b51e0d5196","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryArithmeticFunction.java","status":"removed","additions":0,"deletions":184,"changes":184,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryArithmeticFunction.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryArithmeticFunction.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryArithmeticFunction.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,184 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-/**\n- * Binary arithematic of values ..\n- */\n-public abstract class BinaryArithmeticFunction extends BinaryExprFunction {\n-\n-    protected SelectorConstant evaluateImpl(SelectorConstant left, SelectorConstant right,\n-                                            MessageImpl message) throws SelectorEvaluationException {\n-\n-        switch (left.type) {\n-            case INT: {\n-                switch (right.type) {\n-                    case INT:\n-                        return new SelectorConstant(computeWithInt(left.getIntValue(), right.getIntValue()));\n-                    case DOUBLE:\n-                        return new SelectorConstant(computeWithInt(left.getIntValue(), right.getDoubleValue()));\n-                    default:\n-                        throw new SelectorEvaluationException(getClass() + \" Unexpected type : \" +\n-                            right.type + \". left : \" + left + \", right : \" + right);\n-                }\n-            }\n-            case DOUBLE: {\n-                switch (right.type) {\n-                    case INT:\n-                        return new SelectorConstant(computeWithDouble(left.getDoubleValue(), right.getIntValue()));\n-                    case DOUBLE:\n-                        return new SelectorConstant(computeWithDouble(left.getDoubleValue(), right.getDoubleValue()));\n-                    default:\n-                        throw new SelectorEvaluationException(getClass() + \" Unexpected type : \" +\n-                            right.type + \". left : \" + left + \", right : \" + right);\n-                }\n-            }\n-            case BOOLEAN:\n-            case STRING:\n-            default:\n-                throw new SelectorEvaluationException(getClass() + \" Unsupported type : \" + left.type +\n-                    \". left : \" + left + \", right : \" + right);\n-        }\n-    }\n-\n-\n-    protected abstract Double computeWithInt(Integer left, Double right) throws SelectorEvaluationException;\n-\n-    protected abstract Integer computeWithInt(Integer left, Integer right) throws SelectorEvaluationException;\n-\n-    protected abstract Double computeWithDouble(Double left, Double right) throws SelectorEvaluationException;\n-\n-    protected abstract Double computeWithDouble(Double left, Integer right) throws SelectorEvaluationException;\n-\n-\n-    public static final BinaryArithmeticFunction ADD_FUNCTION = new BinaryArithmeticFunction() {\n-        @Override\n-        protected Double computeWithInt(Integer left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return (double) left + right;\n-        }\n-\n-        @Override\n-        protected Integer computeWithInt(Integer left, Integer right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left + right;\n-        }\n-\n-        @Override\n-        protected Double computeWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left + right;\n-        }\n-\n-        @Override\n-        protected Double computeWithDouble(Double left, Integer right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left + (double) right;\n-        }\n-    };\n-\n-    public static final BinaryArithmeticFunction SUB_FUNCTION = new BinaryArithmeticFunction() {\n-        @Override\n-        protected Double computeWithInt(Integer left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return (double) left - right;\n-        }\n-\n-        @Override\n-        protected Integer computeWithInt(Integer left, Integer right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left - right;\n-        }\n-\n-        @Override\n-        protected Double computeWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left - right;\n-        }\n-\n-        @Override\n-        protected Double computeWithDouble(Double left, Integer right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left - (double) right;\n-        }\n-    };\n-\n-    public static final BinaryArithmeticFunction MULTIPLY_FUNCTION = new BinaryArithmeticFunction() {\n-        @Override\n-        protected Double computeWithInt(Integer left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return (double) left * right;\n-        }\n-\n-        @Override\n-        protected Integer computeWithInt(Integer left, Integer right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left * right;\n-        }\n-\n-        @Override\n-        protected Double computeWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left * right;\n-        }\n-\n-        @Override\n-        protected Double computeWithDouble(Double left, Integer right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left * (double) right;\n-        }\n-    };\n-\n-    public static final BinaryArithmeticFunction DIVIDE_FUNCTION = new BinaryArithmeticFunction() {\n-        @Override\n-        protected Double computeWithInt(Integer left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            if ((double) 0 == right) throw new SelectorEvaluationException(getClass() + \" denominator == 0\");\n-            return (double) left / right;\n-        }\n-\n-        @Override\n-        protected Integer computeWithInt(Integer left, Integer right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            if ((int) 0 == right) throw new SelectorEvaluationException(getClass() + \" denominator == 0\");\n-            return left / right;\n-        }\n-\n-        @Override\n-        protected Double computeWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            if ((double) 0 == right) throw new SelectorEvaluationException(getClass() + \" denominator == 0\");\n-            return left / right;\n-        }\n-\n-        @Override\n-        protected Double computeWithDouble(Double left, Integer right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            if (0 == right) throw new SelectorEvaluationException(getClass() + \" denominator == 0\");\n-            return left / (double) right;\n-        }\n-    };\n-\n-\n-    @Override\n-    public String toString(){\n-        return getClass().getName();\n-    }\n-}"},{"sha":"6c41b6d0560c337ef82e39561283d4918c4af53b","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryExprFunction.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryExprFunction.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryExprFunction.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/BinaryExprFunction.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,51 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-/**\n- * Evaluate binary expressions - where there is a left and right expression to be evaluated.\n- */\n-public abstract class BinaryExprFunction implements ExprFunction {\n-\n-    public void evaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-        if (state.getStack().size() < 2)\n-            throw new SelectorEvaluationException(getClass() + \" stack corruption ? \" + state.getStack());\n-\n-        SelectorConstant right = state.getStack().pop();\n-        SelectorConstant left = state.getStack().pop();\n-\n-        SelectorConstant result = evaluateImpl(left, right, state.getMessage());\n-\n-        if (MyNode.logger.isTraceEnabled()) MyNode.logger.trace(getClass() + \": left \" + left +\n-            \", right \" + right + \" -> \" + result);\n-\n-        if (null != result) state.getStack().push(result);\n-        else throw new SelectorEvaluationException(getClass() +\n-            \" Unexpected to return a null response in binary function evaluation\");\n-    }\n-\n-    protected abstract SelectorConstant evaluateImpl(SelectorConstant left, SelectorConstant right,\n-                                                     MessageImpl message) throws SelectorEvaluationException;\n-\n-    @Override\n-    public String toString(){\n-        return getClass().getName();\n-    }\n-}"},{"sha":"da708e3b57df48ba268bffdd3fc10f49a7cfaec4","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ExprFunction.java","status":"removed","additions":0,"deletions":25,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ExprFunction.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ExprFunction.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ExprFunction.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,25 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-/**\n- * All function's referenced in the ast implement this interface to evaluate it result.\n- */\n-public interface ExprFunction {\n-    public void evaluate(SelectorEvalState state) throws SelectorEvaluationException;\n-}"},{"sha":"143269fd7f67219631622d9d1c7c9f3652ad1bd1","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/InterpretSelectorParserVisitor.java","status":"removed","additions":0,"deletions":180,"changes":180,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/InterpretSelectorParserVisitor.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/InterpretSelectorParserVisitor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/InterpretSelectorParserVisitor.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,180 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-/**\n- * Visits the AST to evaluate the message (in the SelectorEvalState) against this ast parse tree to see if the\n- * message evaluates to true or false (whether to allow message to be submitted or not to consumers).\n- */\n-public class InterpretSelectorParserVisitor implements SelectorParserVisitor {\n-    @Override\n-    public Object visit(SimpleNode node, SelectorEvalState data) throws SelectorEvaluationException {\n-        throw new SelectorEvaluationException(getClass() + \" Should not result in this method being called !\");\n-    }\n-\n-    @Override\n-    public Object visit(ASTOrExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTAndExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTNotExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTGreaterThan node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTLessThan node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTLessThanEqualTo node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTGreaterThanEqualTo node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTEqualTo node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTNotEqualTo node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTIsNullExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTBetweenExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTInExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTLikeExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTLookupExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTAddExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTSubExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTDivideExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTMultiplyExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTNegateExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        node.childrenAccept(this, data);\n-        node.getExprFunction().evaluate(data);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTConstant node, SelectorEvalState data) throws SelectorEvaluationException {\n-        // node.childrenAccept(this, data);\n-        if (0 != node.jjtGetNumChildren()) throw new SelectorEvaluationException(getClass() +\n-            \" parse error ? \" + node);\n-        data.getStack().push(node.getConstantValue());\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTStringVarargParams node, SelectorEvalState data) throws SelectorEvaluationException {\n-        // node.childrenAccept(this, data);\n-        if (0 != node.jjtGetNumChildren()) throw new SelectorEvaluationException(getClass() +\n-            \" parse error ? \" + node);\n-        data.getStack().push(node.getConstantValue());\n-        return null;\n-    }\n-}"},{"sha":"4db66f7851faec7378f85eed909ba08874ed68c9","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/LogicalComparisonFunction.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/LogicalComparisonFunction.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/LogicalComparisonFunction.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/LogicalComparisonFunction.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,64 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-/**\n- * Logical comparison between two booleans.\n- */\n-public abstract class LogicalComparisonFunction extends BinaryExprFunction {\n-    public static final LogicalComparisonFunction AND_FUNCTION = new LogicalComparisonFunction() {\n-        @Override\n-        protected Boolean doComparison(Boolean left, Boolean right) {\n-            if (null == left || null == right) {\n-                return (Boolean.FALSE.equals(left) || Boolean.FALSE.equals(right)) ? false : null;\n-            }\n-            return left && right;\n-        }\n-    };\n-\n-    public static final LogicalComparisonFunction OR_FUNCTION = new LogicalComparisonFunction() {\n-        @Override\n-        protected Boolean doComparison(Boolean left, Boolean right) {\n-            if (null == left || null == right) {\n-                return (Boolean.TRUE.equals(left) || Boolean.TRUE.equals(right)) ? true : null;\n-            }\n-\n-            return left || right;\n-        }\n-    };\n-\n-\n-    protected abstract Boolean doComparison(Boolean left, Boolean right);\n-\n-    protected SelectorConstant evaluateImpl(SelectorConstant left, SelectorConstant right,\n-                                            MessageImpl message) throws SelectorEvaluationException {\n-        if (SelectorConstant.SelectorDataType.BOOLEAN != left.type ||\n-            SelectorConstant.SelectorDataType.BOOLEAN != right.type) {\n-            throw new SelectorEvaluationException(getClass() + \" Invalid value type ? \" + left + \", \" + right);\n-        }\n-\n-        return new SelectorConstant(doComparison(left.getBoolValue(), right.getBoolValue()));\n-    }\n-\n-    @Override\n-    public String toString(){\n-        return getClass().getName();\n-    }\n-}"},{"sha":"b23b3e105915515c883f048aa5e43c87d3fca609","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/MyNode.java","status":"removed","additions":0,"deletions":101,"changes":101,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/MyNode.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/MyNode.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/MyNode.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,101 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-\n-/**\n- * Root of all nodes in the AST generated.\n- * Encapsulates state for evaluation of the ast by an interpreter.\n- */\n-public class MyNode {\n-\n-    final static Logger logger = LoggerFactory.getLogger(MyNode.class);\n-\n-    // This is se for case of constant value literals.\n-    private SelectorConstant selectorConstant;\n-\n-    // This is the actual expression to evaluate.\n-    private ExprFunction exprFunction;\n-\n-    // Called while interpreting ..\n-    public SelectorConstant getConstantValue() throws SelectorEvaluationException {\n-        if (null == selectorConstant)\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unexpected not to have evalData populated for \" + this);\n-        return selectorConstant;\n-    }\n-\n-    public void addToStringSet(String str) throws ParseException {\n-        if (null == selectorConstant) throw new ParseException(getClass() +\n-            \" Unexpected not to have evalData populated for \" + this);\n-        selectorConstant.addToStringSet(str);\n-    }\n-\n-    // Called while parsing ..\n-    public void setConstantValue(SelectorConstant selectorData) throws ParseException {\n-        if (null != this.selectorConstant)\n-            throw new ParseException(getClass() + \" Value already set ? prev : \" +\n-                this.selectorConstant + \", new : \" + selectorData);\n-\n-        if (MyNode.logger.isTraceEnabled()) MyNode.logger.trace(\"Setting constant value \" +\n-            selectorData + \" for \" + this);\n-\n-        this.selectorConstant = selectorData;\n-    }\n-\n-\n-    // Called while interpreting ..\n-    public ExprFunction getExprFunction() throws SelectorEvaluationException {\n-        if (null == exprFunction)\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unexpected not to have exprFunction populated for \" + this);\n-        return exprFunction;\n-    }\n-\n-    // Called while parsing ..\n-    public void setExprFunction(ExprFunction exprFunction) throws ParseException {\n-        if (null != this.exprFunction)\n-            throw new ParseException(getClass() + \" exprFunction already set ? prev : \" +\n-                this.exprFunction + \", new : \" + exprFunction);\n-\n-        if (MyNode.logger.isTraceEnabled()) MyNode.logger.trace(\"Setting function expr \" +\n-            exprFunction + \" for \" + this);\n-\n-        this.exprFunction = exprFunction;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        final StringBuilder sb = new StringBuilder();\n-        sb.append(\"MyNode\");\n-        sb.append(\"{selectorConstant=\").append(selectorConstant);\n-        sb.append(\", exprFunction=\").append(exprFunction);\n-        sb.append('}');\n-        return sb.toString();\n-    }\n-\n-\n-\n-\n-    // Internal to the parser - DO NOT use outside !\n-    SelectorConstant getConstantValueInternal() { return selectorConstant; }\n-    ExprFunction getExprFunctionInternal() { return exprFunction; }\n-}"},{"sha":"83df4f100114a3f1372ac62d6645312ef29c2f40","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/PropertyExprFunction.java","status":"removed","additions":0,"deletions":512,"changes":512,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/PropertyExprFunction.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/PropertyExprFunction.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/PropertyExprFunction.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,512 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-import java.util.regex.Pattern;\n-import java.util.regex.PatternSyntaxException;\n-\n-/**\n- * Handles property (and header) dereference against message evaluation (based on identifier specified).\n- */\n-public abstract class PropertyExprFunction implements ExprFunction {\n-\n-    public static class LookupExpr extends PropertyExprFunction {\n-        private final String identifier;\n-\n-        public LookupExpr(String identifier) {\n-            this.identifier = identifier;\n-        }\n-\n-        @Override\n-        public void evaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-            // No (stack) params required ...\n-\n-            SelectorConstant result = doEvaluate(state.getMessage());\n-            if (MyNode.logger.isTraceEnabled()) MyNode.logger.trace(getClass() + \": identifier '\" +\n-                identifier + \"' -> \" + result);\n-            state.getStack().push(result);\n-            return;\n-        }\n-\n-        private SelectorConstant doEvaluate(final MessageImpl message) throws SelectorEvaluationException {\n-\n-\n-            if (!message.propertyExists(identifier)) {\n-                // defaulting to String, does it matter ?\n-                return new SelectorConstant((String) null);\n-            }\n-\n-            final Object val = message.getSelectorProcessingPropertyValue(identifier);\n-\n-            if (val instanceof Byte) {\n-                return new SelectorConstant((int) (Byte) val);\n-            }\n-            if (val instanceof Short) {\n-                return new SelectorConstant((int) (Short) val);\n-            }\n-            if (val instanceof Integer) {\n-                return new SelectorConstant((Integer) val);\n-            }\n-            if (val instanceof Long) {\n-                long lval = (Long) val;\n-                if (lval >= (long) Integer.MAX_VALUE || lval <= (long) Integer.MIN_VALUE)\n-                    throw new SelectorEvaluationException(getClass() + \" long value \" + lval +\n-                        \" out of range for an int\");\n-\n-                return new SelectorConstant((int) lval);\n-            }\n-            if (val instanceof Boolean) {\n-                return new SelectorConstant((Boolean) val);\n-            }\n-            if (val instanceof Float) {\n-                return new SelectorConstant((double) (Float) val);\n-            }\n-            if (val instanceof Double) {\n-                return new SelectorConstant((Double) val);\n-            }\n-            if (val instanceof String) {\n-                return new SelectorConstant((String) val);\n-            }\n-\n-\n-            throw new SelectorEvaluationException(getClass() + \" Unable to interpret value '\" + val +\n-                \"' for identifier \" + identifier);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"LookupExpr\");\n-            sb.append(\"{identifier='\").append(identifier).append('\\'');\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    public static class IsNullExpr extends PropertyExprFunction {\n-\n-        private final boolean negate;\n-\n-        public IsNullExpr(boolean negate) {\n-            this.negate = negate;\n-        }\n-\n-        @Override\n-        public void evaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-\n-            final SelectorConstant result = doEvaluate(state);\n-            if (MyNode.logger.isTraceEnabled()) MyNode.logger.trace(getClass() + \" -> \" + result);\n-            state.getStack().push(result);\n-        }\n-\n-        private SelectorConstant doEvaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-\n-            if (state.getStack().isEmpty())\n-                throw new SelectorEvaluationException(getClass() + \" stack corruption ? \" + state.getStack());\n-\n-            final SelectorConstant value = state.getStack().pop();\n-\n-            boolean result = value.isNull();\n-            if (negate) result = !result;\n-            return new SelectorConstant(result);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"IsNullExpr\");\n-            sb.append(\"{negate=\").append(negate);\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    public static class InExpr extends PropertyExprFunction {\n-\n-        private final boolean negate;\n-\n-        public InExpr(boolean negate) {\n-            this.negate = negate;\n-        }\n-\n-        @Override\n-        public void evaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-            if (state.getStack().size() < 2)\n-                throw new SelectorEvaluationException(getClass() + \" stack corruption ? \" + state.getStack());\n-\n-            final SelectorConstant paramSet = state.getStack().pop();\n-            final SelectorConstant checkFor = state.getStack().pop();\n-\n-            final SelectorConstant result = doEvaluate(paramSet, checkFor);\n-            if (MyNode.logger.isTraceEnabled()) MyNode.logger.trace(getClass() + \": checkFor '\" +\n-                checkFor + \"', paramSet '\" + paramSet+ \"' -> \" + result);\n-\n-            state.getStack().push(result);\n-            return ;\n-\n-        }\n-\n-        private SelectorConstant doEvaluate(SelectorConstant paramSet, SelectorConstant checkFor)\n-            throws SelectorEvaluationException {\n-\n-            if (checkFor.isNull()){\n-                return new SelectorConstant((String) null);\n-            }\n-\n-            if (SelectorConstant.SelectorDataType.STRING_SET != paramSet.type) {\n-                throw new SelectorEvaluationException(getClass() + \" Expected string list, found : \" +\n-                    paramSet.type + \", for \" + paramSet);\n-            }\n-            if (SelectorConstant.SelectorDataType.STRING != checkFor.type){\n-                throw new SelectorEvaluationException(getClass() + \" Expected string , found : \" +\n-                    checkFor.type + \", for \" + checkFor);\n-            }\n-\n-            boolean result = paramSet.getStringSet().contains(checkFor.getStringValue());\n-            if (negate) result = !result;\n-            return new SelectorConstant(result);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"InExpr\");\n-            sb.append(\"{negate=\").append(negate);\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    public static class LikeExpr extends PropertyExprFunction {\n-\n-        private final Pattern likePattern;\n-        private final String likePatternStr;\n-        private final boolean negate;\n-\n-        public LikeExpr(String likeExpression, String escapeCharacter, boolean negate) throws ParseException {\n-            if (null != escapeCharacter && 1 != escapeCharacter.length()) {\n-                throw new ParseException(getClass() + \" Escape character must be a single character : '\" +\n-                    escapeCharacter + \"'\");\n-            }\n-            this.likePatternStr = generateRegexpPattern(likeExpression, escapeCharacter);\n-            try {\n-                this.likePattern = Pattern.compile(this.likePatternStr, Pattern.DOTALL);\n-            } catch (PatternSyntaxException psEx){\n-                throw new ParseException(LikeExpr.class + \" Unable to compile '\" + likeExpression +\n-                    \"' into regexp Pattern using '\" + this.likePatternStr+ \"'\");\n-            }\n-            this.negate = negate;\n-        }\n-\n-        private static String generateRegexpWithoutWildcard(final String expression){\n-            int indxOffset = 0;\n-            int substringOffset = 0;\n-            StringBuilder sb = new StringBuilder();\n-            while (indxOffset < expression.length()){\n-                final int indxUnder = expression.indexOf('_', indxOffset);\n-                final int indxMod = expression.indexOf('%', indxOffset);\n-                if (-1 == indxUnder && -1 == indxMod) break;\n-\n-                final int indx;\n-\n-                if (-1 != indxUnder && -1 != indxMod) indx = Math.min(indxUnder, indxMod);\n-                else if (-1 != indxUnder) indx = indxUnder;\n-                else indx = indxMod;\n-\n-                if (indx != substringOffset) {\n-                    sb.append(Pattern.quote(expression.substring(substringOffset, indx)));\n-                }\n-                sb.append(indx == indxUnder ? \".\" : \".*\");\n-                substringOffset = indx + 1;\n-                indxOffset = indx + 1;\n-            }\n-            if (expression.length() != substringOffset) {\n-                sb.append(Pattern.quote(expression.substring(substringOffset)));\n-            }\n-\n-            return sb.toString();\n-        }\n-\n-        // If wildcard if prefixed with escapeChar, ignore it.\n-        private static String generateRegexpWithWildcard(final String expression, char escapeChar){\n-            int indxOffset = 0;\n-            int substringOffset = 0;\n-            StringBuilder sb = new StringBuilder();\n-            while (indxOffset < expression.length()){\n-                final int indxUnder = expression.indexOf('_', indxOffset);\n-                final int indxMod = expression.indexOf('%', indxOffset);\n-                if (-1 == indxUnder && -1 == indxMod) break;\n-\n-                final int indx;\n-\n-                if (-1 != indxUnder && -1 != indxMod) indx = Math.min(indxUnder, indxMod);\n-                else if (-1 != indxUnder) indx = indxUnder;\n-                else indx = indxMod;\n-\n-                if (indx > 0 && escapeChar == expression.charAt(indx - 1)) {\n-                    // ignore it.\n-                    indxOffset = indx + 1;\n-                    continue;\n-                }\n-\n-                if (indx != substringOffset) {\n-                    sb.append(Pattern.quote(expression.substring(substringOffset, indx)));\n-                }\n-                sb.append(indx == indxUnder ? \".\" : \".*\");\n-                substringOffset = indx + 1;\n-                indxOffset = indx + 1;\n-            }\n-            if (expression.length() != substringOffset) {\n-                sb.append(Pattern.quote(expression.substring(substringOffset)));\n-            }\n-\n-            return sb.toString();\n-        }\n-\n-        private static String generateRegexpPattern(final String likeExpression,\n-                                                    final String escapeCharacterStr) throws ParseException {\n-\n-            if (null == escapeCharacterStr){\n-                // Ok, hand-generating the pattern seems to be the only generic way to handle this, sigh :-(\n-\n-                String rpat = generateRegexpWithoutWildcard(likeExpression);\n-                return rpat;\n-            }\n-\n-            // expect this to be there ...\n-            final char escapeChar = escapeCharacterStr.charAt(0);\n-\n-            // Test when escapeChar == ']', '[' and '^'. done !\n-            String rpat = generateRegexpWithWildcard(likeExpression, escapeChar);\n-\n-            rpat = rpat.replace(escapeChar + \"%\", \"%\");\n-            rpat = rpat.replace(escapeChar + \"_\", \"_\");\n-\n-            return rpat;\n-        }\n-\n-        @Override\n-        public void evaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-\n-            if (state.getStack().isEmpty()) throw new SelectorEvaluationException(getClass() +\n-                \" stack corruption ? \" + state.getStack());\n-\n-            final SelectorConstant checkFor = state.getStack().pop();\n-\n-            final SelectorConstant result = doEvaluate(checkFor);\n-            if (MyNode.logger.isTraceEnabled()) MyNode.logger.trace(getClass() + \": checkFor '\" +\n-                checkFor + \"' -> \" + result);\n-\n-            state.getStack().push(result);\n-            return ;\n-        }\n-\n-        private SelectorConstant doEvaluate(SelectorConstant checkFor) throws SelectorEvaluationException {\n-            if (checkFor.isNull()){\n-                return new SelectorConstant((String) null);\n-            }\n-\n-            if (SelectorConstant.SelectorDataType.STRING != checkFor.type){\n-                throw new SelectorEvaluationException(getClass() + \" Expected string , found : \" +\n-                    checkFor.type + \", for \" + checkFor);\n-            }\n-\n-\n-            final String value = checkFor.getStringValue();\n-\n-            if (null == value) {\n-                return new SelectorConstant((Boolean) null);\n-            }\n-\n-            boolean result = likePattern.matcher(value).matches();\n-            if (negate) result = !result;\n-            return new SelectorConstant(result);\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"LikeExpr\");\n-            sb.append(\"{likePatternStr=\").append(likePatternStr);\n-            sb.append(\", negate=\").append(negate);\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-\n-    public static class BetweenExpr extends PropertyExprFunction {\n-\n-        private final boolean negate;\n-\n-        public BetweenExpr(boolean negate) {\n-            this.negate = negate;\n-        }\n-\n-        @Override\n-        public void evaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-            if (state.getStack().size() < 3){\n-                throw new SelectorEvaluationException(getClass() + \" stack corruption ? \" + state.getStack());\n-            }\n-\n-            final SelectorConstant right = state.getStack().pop();\n-            final SelectorConstant left = state.getStack().pop();\n-\n-            final SelectorConstant checkFor = state.getStack().pop();\n-\n-            final SelectorConstant result = doEvaluate(checkFor, left, right);\n-            if (MyNode.logger.isTraceEnabled()) MyNode.logger.trace(getClass() + \": left '\" + left +\n-                \"', right '\" + right + \"', checkFor '\" + checkFor + \"' -> \" + result);\n-            state.getStack().push(result);\n-        }\n-\n-        private SelectorConstant doEvaluate(final SelectorConstant checkFor, final SelectorConstant left,\n-                                            final SelectorConstant right) throws SelectorEvaluationException {\n-\n-            if (left.isNull() || right.isNull()) {\n-                // Unexpected for a bound to be null ...\n-                throw new SelectorEvaluationException(getClass() + \" Unexpected for left or right bound to be null \" +\n-                    left + \", \" + right);\n-            }\n-\n-            if (checkFor.isNull()){\n-                // If checkFor is null, then it cant be between anyway - return unknown.\n-                return new SelectorConstant((Boolean) null);\n-            }\n-\n-            final Boolean result;\n-\n-            // Between left and right ...\n-            switch (left.type) {\n-                case INT: {\n-                    switch (right.type) {\n-                        case INT: {\n-                            result = handleBetweenIntAndInt(checkFor, left.getIntValue(),\n-                                right.getIntValue());\n-                            break;\n-                        }\n-                        case DOUBLE: {\n-                            result = handleBetweenIntAndDouble(checkFor, left.getIntValue(),\n-                                right.getDoubleValue());\n-                            break;\n-                        }\n-                        default:\n-                            throw new SelectorEvaluationException(getClass() + \" Unsupported type for right \" +\n-                                right.type);\n-                    }\n-                    break;\n-                }\n-                case DOUBLE: {\n-                    switch (right.type) {\n-                        case INT: {\n-                            result = handleBetweenIntAndDouble(checkFor, right.getIntValue(),\n-                                left.getDoubleValue());\n-                            break;\n-                        }\n-                        case DOUBLE: {\n-                            result = handleBetweenDoubleAndDouble(checkFor, left.getDoubleValue(),\n-                                right.getDoubleValue());\n-                            break;\n-                        }\n-                        default:\n-                            throw new SelectorEvaluationException(getClass() +\n-                                \" Unsupported type for right \" + right.type);\n-                    }\n-                    break;\n-                }\n-                default:\n-                    throw new SelectorEvaluationException(getClass() + \" Unsupported type for left \" + right.type);\n-            }\n-\n-            if (null == result) {\n-                // Cannot find the result as the type we expected.\n-                return new SelectorConstant((Boolean) null);\n-            }\n-\n-\n-            return new SelectorConstant(negate ? !result : result);\n-        }\n-\n-        private Boolean handleBetweenIntAndInt(SelectorConstant checkFor, int intBound,\n-                                               int otherIntBound) throws SelectorEvaluationException {\n-            final int low = Math.min(intBound, otherIntBound);\n-            final int high = Math.max(intBound, otherIntBound);\n-\n-            assert ! checkFor.isNull();\n-\n-\n-            switch (checkFor.type){\n-                case INT:\n-                    return checkFor.getIntValue() >= low && checkFor.getIntValue() <= high;\n-                case DOUBLE:\n-                    return checkFor.getDoubleValue() >= low && checkFor.getDoubleValue() <= high;\n-                default:\n-                    throw new SelectorEvaluationException(getClass() +\n-                        \" Identifier value is of illegal type \" + checkFor.type + \" ... \" + checkFor);\n-            }\n-        }\n-\n-        private Boolean handleBetweenIntAndDouble(SelectorConstant checkFor, int intBound,\n-                                                  double doubleBound) throws SelectorEvaluationException {\n-            final double low = Math.min((double) intBound, doubleBound);\n-            final double high = Math.max((double) intBound, doubleBound);\n-\n-            assert ! checkFor.isNull();\n-\n-\n-            switch (checkFor.type){\n-                case INT:\n-                    return checkFor.getIntValue() >= low && checkFor.getIntValue() <= high;\n-                case DOUBLE:\n-                    return checkFor.getDoubleValue() >= low && checkFor.getDoubleValue() <= high;\n-                default:\n-                    throw new SelectorEvaluationException(getClass() +\n-                        \" Identifier value is of illegal type \" + checkFor.type + \" ... \" + checkFor);\n-            }\n-        }\n-\n-        private Boolean handleBetweenDoubleAndDouble(SelectorConstant checkFor, double doubleBound,\n-                                                     double otherDoubleBound) throws SelectorEvaluationException {\n-            final double low = Math.min(doubleBound, otherDoubleBound);\n-            final double high = Math.max(doubleBound, otherDoubleBound);\n-\n-            assert ! checkFor.isNull();\n-\n-\n-            switch (checkFor.type){\n-                case INT:\n-                    return checkFor.getIntValue() >= low && checkFor.getIntValue() <= high;\n-                case DOUBLE:\n-                    return checkFor.getDoubleValue() >= low && checkFor.getDoubleValue() <= high;\n-                default:\n-                    throw new SelectorEvaluationException(getClass() +\n-                        \" Identifier value is of illegal type \" + checkFor.type + \" ... \" + checkFor);\n-            }\n-        }\n-\n-        @Override\n-        public String toString() {\n-            final StringBuilder sb = new StringBuilder();\n-            sb.append(\"BetweenExpr\");\n-            sb.append(\"{negate=\").append(negate);\n-            sb.append('}');\n-            return sb.toString();\n-        }\n-    }\n-}\n\\ No newline at end of file"},{"sha":"e4af1c75d8ec6b47fa81432de654f7a240708a7f","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorConstant.java","status":"removed","additions":0,"deletions":187,"changes":187,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorConstant.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorConstant.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorConstant.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,187 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import java.util.Collections;\n-import java.util.Set;\n-\n-/**\n- * A constant in the AST ends up getting pushed into the stack as this.\n- */\n-public class SelectorConstant {\n-\n-    public enum SelectorDataType {BOOLEAN, INT, DOUBLE, STRING, STRING_SET}\n-\n-    public final SelectorDataType type;\n-\n-    private final Boolean boolValue;\n-    private final Integer intValue;\n-    private final Double doubleValue;\n-    private final String stringValue;\n-\n-    private final Set<String> stringSet;\n-\n-    public SelectorConstant(Boolean boolValue) {\n-        this.type = SelectorDataType.BOOLEAN;\n-        this.boolValue = boolValue;\n-        this.intValue = null;\n-        this.doubleValue = null;\n-        this.stringValue = null;\n-        this.stringSet = null;\n-    }\n-\n-    public SelectorConstant(Integer intValue) {\n-        this.type = SelectorDataType.INT;\n-        this.boolValue = null;\n-        this.intValue = intValue;\n-        this.doubleValue = null;\n-        this.stringValue = null;\n-        this.stringSet = null;\n-    }\n-\n-    public SelectorConstant(Double doubleValue) {\n-        this.type = SelectorDataType.DOUBLE;\n-        this.boolValue = null;\n-        this.intValue = null;\n-        this.doubleValue = doubleValue;\n-        this.stringValue = null;\n-        this.stringSet = null;\n-    }\n-\n-    public SelectorConstant(String stringValue) {\n-        this.type = SelectorDataType.STRING;\n-        this.boolValue = null;\n-        this.intValue = null;\n-        this.doubleValue = null;\n-        this.stringValue = stringValue;\n-        this.stringSet = null;\n-    }\n-\n-    public SelectorConstant(Set<String> stringSet) {\n-        this.type = SelectorDataType.STRING_SET;\n-        this.boolValue = null;\n-        this.intValue = null;\n-        this.doubleValue = null;\n-        this.stringValue = null;\n-        this.stringSet = stringSet;\n-    }\n-\n-    public void addToStringSet(String value) throws ParseException {\n-        if (SelectorDataType.STRING_SET != type)\n-            throw new ParseException(getClass() + \" Attempting to add to a non-string_list type : \" + type);\n-        if (null == this.stringSet) throw new ParseException(getClass() +\n-            \" Attempting to add to a null string_list : \" + stringSet);\n-        this.stringSet.add(value);\n-    }\n-\n-    public boolean isNull() {\n-        switch (type) {\n-            case BOOLEAN:\n-                return null == boolValue;\n-            case INT:\n-                return null == intValue;\n-            case DOUBLE:\n-                return null == doubleValue;\n-            case STRING:\n-                return null == stringValue;\n-            case STRING_SET:\n-                return null == stringSet;\n-            default:\n-                throw new IllegalStateException(getClass() + \" Unknown type ? \" + type);\n-        }\n-    }\n-\n-    public boolean isTrue() throws SelectorEvaluationException {\n-        switch (type) {\n-            case BOOLEAN:\n-                return null != boolValue && Boolean.TRUE.equals(boolValue);\n-            default:\n-                throw new SelectorEvaluationException(getClass() + \" Unexpected type \" + type +\n-                    \", value \" + getValueAsString());\n-        }\n-    }\n-\n-    public String getValueAsString() throws SelectorEvaluationException {\n-        switch (type) {\n-            case BOOLEAN:\n-                return Boolean.toString(boolValue);\n-            case INT:\n-                return Integer.toString(intValue);\n-            case DOUBLE:\n-                return Double.toString(doubleValue);\n-            case STRING:\n-                return stringValue;\n-            case STRING_SET:\n-                return null != stringSet ? stringSet.toString() : \"null\";\n-            default:\n-                throw new SelectorEvaluationException(getClass() + \" Unexpected type : \" + type);\n-        }\n-    }\n-\n-    public String toString() {\n-        try {\n-            switch (type) {\n-                case BOOLEAN:\n-                    return \"boolean : \" + getValueAsString();\n-                case INT:\n-                    return \"int : \" + getValueAsString();\n-                case DOUBLE:\n-                    return \"double : \" + getValueAsString();\n-                case STRING:\n-                    return \"string : \" + getValueAsString();\n-                case STRING_SET:\n-                    return \"string_list : \" + getValueAsString();\n-                default:\n-                    throw new IllegalStateException(getClass() + \" Unexpected type\");\n-            }\n-        } catch (SelectorEvaluationException seEx) {\n-            throw new IllegalStateException(getClass() + \" Unexpected exception\", seEx);\n-        }\n-    }\n-\n-    public Boolean getBoolValue() throws SelectorEvaluationException {\n-        if (SelectorDataType.BOOLEAN != type)\n-            throw new SelectorEvaluationException(getClass() + \" Illegal access to boolean for type \" + type);\n-        return boolValue;\n-    }\n-\n-    public Integer getIntValue() throws SelectorEvaluationException {\n-        if (SelectorDataType.INT != type)\n-            throw new SelectorEvaluationException(getClass() + \" Illegal access to boolean for type \" + type);\n-        return intValue;\n-    }\n-\n-    public Double getDoubleValue() throws SelectorEvaluationException {\n-        if (SelectorDataType.DOUBLE != type)\n-            throw new SelectorEvaluationException(getClass() + \" Illegal access to boolean for type \" + type);\n-        return doubleValue;\n-    }\n-\n-    public String getStringValue() throws SelectorEvaluationException {\n-        if (SelectorDataType.STRING != type)\n-            throw new SelectorEvaluationException(getClass() + \" Illegal access to boolean for type \" + type);\n-        return stringValue;\n-    }\n-\n-    public Set<String> getStringSet() throws SelectorEvaluationException {\n-        if (SelectorDataType.STRING_SET != type)\n-            throw new SelectorEvaluationException(getClass() + \" Illegal access to boolean for type \" + type);\n-        // wrap to prevent changes ...\n-        return Collections.unmodifiableSet(stringSet);\n-    }\n-}"},{"sha":"d760e0c8c69830d916de7f962f914c7c335211d6","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvalState.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvalState.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvalState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvalState.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,56 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-import java.util.ArrayDeque;\n-import java.util.Deque;\n-\n-/**\n- * Holds (any) state data required to evaluate a Selector.\n- */\n-public class SelectorEvalState {\n-    private final MessageImpl message;\n-    private final Deque<SelectorConstant> stack;\n-\n-    // Used ONLY for debugging ... it is sad that this is part of SelectorEvalState - but I dont\n-    // have time to do anything else right now !\n-    private int debugIndentCount = 0;\n-\n-    public SelectorEvalState(MessageImpl message) {\n-        this.message = message;\n-        this.stack = new ArrayDeque<SelectorConstant>(32);\n-    }\n-\n-    public MessageImpl getMessage() {\n-        return message;\n-    }\n-\n-    public Deque<SelectorConstant> getStack() {\n-        return stack;\n-    }\n-\n-    public int getDebugIndentCount() {\n-        return debugIndentCount;\n-    }\n-\n-    public void setDebugIndentCount(int debugIndentCount) {\n-        this.debugIndentCount = debugIndentCount;\n-    }\n-}"},{"sha":"7425189e99231bda7410d68e438f007e66f5bad2","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvaluationException.java","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvaluationException.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvaluationException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/SelectorEvaluationException.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,39 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-/**\n- * Thrown when evaluating a selector.\n- */\n-public class SelectorEvaluationException extends Exception {\n-\n-    public SelectorEvaluationException() {\n-    }\n-\n-    public SelectorEvaluationException(String message) {\n-        super(message);\n-    }\n-\n-    public SelectorEvaluationException(String message, Throwable cause) {\n-        super(message, cause);\n-    }\n-\n-    public SelectorEvaluationException(Throwable cause) {\n-        super(cause);\n-    }\n-}"},{"sha":"dedda05f4d77f6ccd9505c223a1e01012ce2cc57","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/TreeDumperSelectorParserVisitor.java","status":"removed","additions":0,"deletions":261,"changes":261,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/TreeDumperSelectorParserVisitor.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/TreeDumperSelectorParserVisitor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/TreeDumperSelectorParserVisitor.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,261 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-/**\n- * To dump the AST - used ONLY for debugging\n- */\n-public class TreeDumperSelectorParserVisitor implements SelectorParserVisitor{\n-\n-    private static final int INDENT_PER_LEVEL = 4;\n-\n-    private static void emitDebug(SimpleNode node, SelectorEvalState data, boolean start)\n-        throws SelectorEvaluationException {\n-\n-        if (!start && 0 == node.jjtGetNumChildren()) return ;\n-\n-        final StringBuilder sb = new StringBuilder();\n-        int count = data.getDebugIndentCount();\n-        for (int i = 0;i < count * INDENT_PER_LEVEL; i ++){\n-            sb.append(' ');\n-        }\n-\n-        sb.append(node.getClass().getName()).append(\" -> \").append(node);\n-        sb.append(\", Constant -> \").append(node.getConstantValueInternal());\n-        sb.append(\", Func -> \").append(node.getExprFunctionInternal());\n-        if (0 != node.jjtGetNumChildren()) sb.append(start ? \" OPEN\" : \" CLOSE\");\n-\n-        MyNode.logger.trace(sb.toString());\n-    }\n-\n-    @Override\n-    public Object visit(SimpleNode node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTOrExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTAndExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTNotExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTGreaterThan node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTLessThan node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTLessThanEqualTo node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTGreaterThanEqualTo node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTEqualTo node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTNotEqualTo node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTIsNullExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTBetweenExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTInExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTLikeExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTAddExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTSubExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTDivideExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTMultiplyExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTNegateExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTLookupExpr node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        data.setDebugIndentCount(data.getDebugIndentCount() + 1);\n-        node.childrenAccept(this, data);\n-        data.setDebugIndentCount(data.getDebugIndentCount() - 1);\n-        emitDebug(node, data, false);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTConstant node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        if (0 != node.jjtGetNumChildren()) throw new SelectorEvaluationException(getClass() +\n-            \" parse error ? \" + node);\n-        return null;\n-    }\n-\n-    @Override\n-    public Object visit(ASTStringVarargParams node, SelectorEvalState data) throws SelectorEvaluationException {\n-        emitDebug(node, data, true);\n-        if (0 != node.jjtGetNumChildren()) throw new SelectorEvaluationException(getClass() +\n-            \" parse error ? \" + node);\n-        return null;\n-    }\n-}"},{"sha":"59170e7944e00ad9e0fbad0c3627a133e778a213","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryArithmeticFunction.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryArithmeticFunction.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryArithmeticFunction.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryArithmeticFunction.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,73 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-/**\n- * Unary arithematic operations\n- */\n-public abstract class UnaryArithmeticFunction implements ExprFunction {\n-\n-    public static final UnaryArithmeticFunction NEGATE_FUNCTION = new UnaryArithmeticFunction() {\n-\n-        @Override\n-        protected SelectorConstant evaluateImpl(SelectorConstant value, MessageImpl message)\n-            throws SelectorEvaluationException {\n-\n-            switch (value.type) {\n-                case INT: {\n-                    Integer val = value.getIntValue();\n-                    if (null == val) return new SelectorConstant((Integer) null);\n-                    return new SelectorConstant(-(int) val);\n-                }\n-                case DOUBLE: {\n-                    Double val = value.getDoubleValue();\n-                    if (null == val) return new SelectorConstant((Double) null);\n-                    return new SelectorConstant(-(double) val);\n-                }\n-                default:\n-                    throw new SelectorEvaluationException(getClass() + \" Invalid value type ? \" + value);\n-            }\n-        }\n-    };\n-\n-    public void evaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-        if (state.getStack().size() < 1)\n-            throw new SelectorEvaluationException(getClass() + \" stack corruption ? \" + state.getStack());\n-\n-        SelectorConstant value = state.getStack().pop();\n-\n-        SelectorConstant result = evaluateImpl(value, state.getMessage());\n-\n-        if (null != result) state.getStack().push(result);\n-        else\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unexpected to return a null response in binary function evaluation\");\n-    }\n-\n-    protected abstract SelectorConstant evaluateImpl(SelectorConstant value, MessageImpl message)\n-        throws SelectorEvaluationException;\n-\n-\n-\n-    @Override\n-    public String toString(){\n-        return getClass().getName();\n-    }\n-}"},{"sha":"c50514be715db173709a8ce9adc0158e6d453504","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryExprFunction.java","status":"removed","additions":0,"deletions":65,"changes":65,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryExprFunction.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryExprFunction.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/UnaryExprFunction.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,65 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-/**\n- * Unary function's.\n- */\n-public abstract class UnaryExprFunction implements ExprFunction {\n-\n-    public static final UnaryExprFunction NOT_FUNCTION = new UnaryExprFunction() {\n-\n-        @Override\n-        protected SelectorConstant evaluateImpl(SelectorConstant value, MessageImpl message)\n-            throws SelectorEvaluationException {\n-            if (SelectorConstant.SelectorDataType.BOOLEAN != value.type) {\n-                throw new SelectorEvaluationException(getClass() + \" Invalid value type ? \" + value);\n-            }\n-\n-            final Boolean boolValue = value.getBoolValue();\n-            final Boolean result = null == boolValue ? null : !boolValue;\n-            return new SelectorConstant(result);\n-        }\n-    };\n-\n-    public void evaluate(SelectorEvalState state) throws SelectorEvaluationException {\n-        if (state.getStack().size() < 1)\n-            throw new SelectorEvaluationException(getClass() + \" stack corruption ? \" + state.getStack());\n-\n-        SelectorConstant value = state.getStack().pop();\n-\n-        SelectorConstant result = evaluateImpl(value, state.getMessage());\n-\n-        if (null != result) state.getStack().push(result);\n-        else\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unexpected to return a null response in binary function evaluation\");\n-    }\n-\n-    protected abstract SelectorConstant evaluateImpl(SelectorConstant value, MessageImpl message)\n-        throws SelectorEvaluationException;\n-\n-\n-\n-    @Override\n-    public String toString(){\n-        return getClass().getName();\n-    }\n-}"},{"sha":"24957d374e1786df465588b017e02fb2dfa29bd0","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ValueComparisonFunction.java","status":"removed","additions":0,"deletions":329,"changes":329,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ValueComparisonFunction.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ValueComparisonFunction.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/ValueComparisonFunction.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,329 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.selector;\n-\n-import org.apache.hedwig.jms.message.MessageImpl;\n-\n-/**\n- * Comparison of values ..\n- */\n-public abstract class ValueComparisonFunction extends BinaryExprFunction {\n-\n-    protected SelectorConstant evaluateImpl(SelectorConstant left, SelectorConstant right,\n-                                            MessageImpl message) throws SelectorEvaluationException {\n-\n-        switch (left.type) {\n-            case INT: {\n-                switch (right.type) {\n-                    case INT:\n-                        return new SelectorConstant(compareWithInt(left.getIntValue(), right.getIntValue()));\n-                    case DOUBLE:\n-                        return new SelectorConstant(compareWithInt(left.getIntValue(), right.getDoubleValue()));\n-                    default:\n-                        throw new SelectorEvaluationException(getClass() + \" Unexpected type : \" +\n-                            right.type + \". left : \" + left + \", right : \" + right);\n-                }\n-            }\n-            case DOUBLE: {\n-                switch (right.type) {\n-                    case INT:\n-                        return new SelectorConstant(compareWithDouble(left.getDoubleValue(), right.getIntValue()));\n-                    case DOUBLE:\n-                        return new SelectorConstant(compareWithDouble(left.getDoubleValue(), right.getDoubleValue()));\n-                    default:\n-                        throw new SelectorEvaluationException(getClass() + \" Unexpected type : \" +\n-                            right.type + \". left : \" + left + \", right : \" + right);\n-                }\n-            }\n-            case BOOLEAN: {\n-                switch (right.type) {\n-                    case BOOLEAN:\n-                        return new SelectorConstant(compareWithBoolean(left.getBoolValue(), right.getBoolValue()));\n-                    default:\n-                        throw new SelectorEvaluationException(getClass() + \" Unexpected type : \" +\n-                            right.type + \". left : \" + left + \", right : \" + right);\n-                }\n-            }\n-\n-            case STRING: {\n-                switch (right.type) {\n-                    case STRING:\n-                        return new SelectorConstant(compareWithString(left.getStringValue(), right.getStringValue()));\n-                    default:\n-                        throw new SelectorEvaluationException(getClass() + \" Unexpected type : \" +\n-                            right.type + \". left : \" + left + \", right : \" + right);\n-                }\n-            }\n-\n-            default:\n-                throw new SelectorEvaluationException(getClass() + \" Unsupported type : \" +\n-                    left.type + \". left : \" + left + \", right : \" + right);\n-        }\n-    }\n-\n-    protected abstract Boolean compareWithInt(Integer left, Double right) throws SelectorEvaluationException;\n-\n-    protected abstract Boolean compareWithInt(Integer left, Integer right) throws SelectorEvaluationException;\n-\n-    protected abstract Boolean compareWithDouble(Double left, Double right) throws SelectorEvaluationException;\n-\n-    protected abstract Boolean compareWithDouble(Double left, Integer right) throws SelectorEvaluationException;\n-\n-    protected abstract Boolean compareWithString(String left, String right) throws SelectorEvaluationException;\n-\n-    protected abstract Boolean compareWithBoolean(Boolean left, Boolean right) throws SelectorEvaluationException;\n-\n-\n-    public static final ValueComparisonFunction GREATER_THAN_FUNCTION = new ValueComparisonFunction() {\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Double right) {\n-            if (null == left || null == right) return null;\n-            return (double) left > right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left > right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left > right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left > (double) right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithString(String left, String right) throws SelectorEvaluationException {\n-            throw new SelectorEvaluationException(getClass()\n-                    + \" Unsupported string comparison for greater_than operator\");\n-        }\n-\n-        @Override\n-        protected Boolean compareWithBoolean(Boolean left, Boolean right) throws SelectorEvaluationException {\n-            throw new SelectorEvaluationException(getClass()\n-                    + \" Unsupported boolean comparison for greater_than operator\");\n-        }\n-    };\n-\n-\n-    public static final ValueComparisonFunction GREATER_THAN_EQUAL_TO_FUNCTION = new ValueComparisonFunction() {\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Double right) {\n-            if (null == left || null == right) return null;\n-            return (double) left >= right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left >= right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left >= right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left >= (double) right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithString(String left, String right) throws SelectorEvaluationException {\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unsupported string comparison for greater_than operator\");\n-        }\n-\n-        @Override\n-        protected Boolean compareWithBoolean(Boolean left, Boolean right) throws SelectorEvaluationException {\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unsupported boolean comparison for greater_than operator\");\n-        }\n-    };\n-\n-    public static final ValueComparisonFunction LESS_THAN_FUNCTION = new ValueComparisonFunction() {\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Double right) {\n-            if (null == left || null == right) return null;\n-            return (double) left < right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left < right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left < right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left < (double) right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithString(String left, String right) throws SelectorEvaluationException {\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unsupported string comparison for greater_than operator\");\n-        }\n-\n-        @Override\n-        protected Boolean compareWithBoolean(Boolean left, Boolean right) throws SelectorEvaluationException {\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unsupported boolean comparison for greater_than operator\");\n-        }\n-    };\n-\n-\n-    public static final ValueComparisonFunction LESS_THAN_EQUAL_TO_FUNCTION = new ValueComparisonFunction() {\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Double right) {\n-            if (null == left || null == right) return null;\n-            return (double) left <= right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left <= right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left <= right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left <= (double) right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithString(String left, String right) throws SelectorEvaluationException {\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unsupported string comparison for greater_than operator\");\n-        }\n-\n-        @Override\n-        protected Boolean compareWithBoolean(Boolean left, Boolean right) throws SelectorEvaluationException {\n-            throw new SelectorEvaluationException(getClass() +\n-                \" Unsupported boolean comparison for greater_than operator\");\n-        }\n-    };\n-\n-    public static final ValueComparisonFunction EQUAL_TO_FUNCTION = new ValueComparisonFunction() {\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Double right) {\n-            if (null == left || null == right) return null;\n-            return (double) left == right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return (int) left == right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return (double) left == right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left == (double) right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithString(String left, String right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left.equals(right);\n-        }\n-\n-        @Override\n-        protected Boolean compareWithBoolean(Boolean left, Boolean right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return left.equals(right);\n-        }\n-    };\n-\n-\n-    public static final ValueComparisonFunction NOT_EQUAL_TO_FUNCTION = new ValueComparisonFunction() {\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Double right) {\n-            if (null == left || null == right) return null;\n-            return (double) left != right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithInt(Integer left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return (int) left != right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Double right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return (double) left != right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithDouble(Double left, Integer right) {\n-            if (null == left || null == right) return null;\n-            return left != (double) right;\n-        }\n-\n-        @Override\n-        protected Boolean compareWithString(String left, String right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return !left.equals(right);\n-        }\n-\n-        @Override\n-        protected Boolean compareWithBoolean(Boolean left, Boolean right) throws SelectorEvaluationException {\n-            if (null == left || null == right) return null;\n-            return !left.equals(right);\n-        }\n-    };\n-\n-\n-\n-    @Override\n-    public String toString(){\n-        return getClass().getName();\n-    }\n-}"},{"sha":"e426eb84cad68b42b5917c5fa703eaac11cb9ef0","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/package-info.html","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/package-info.html","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/package-info.html","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/selector/package-info.html?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,35 +0,0 @@\n-<!--\n-   Licensed to the Apache Software Foundation (ASF) under one or more\n-   contributor license agreements.  See the NOTICE file distributed with\n-   this work for additional information regarding copyright ownership.\n-   The ASF licenses this file to You under the Apache License, Version 2.0\n-   (the \"License\"); you may not use this file except in compliance with\n-   the License.  You may obtain a copy of the License at\n-\n-       http://www.apache.org/licenses/LICENSE-2.0\n-\n-   Unless required by applicable law or agreed to in writing, software\n-   distributed under the License is distributed on an \"AS IS\" BASIS,\n-   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-   See the License for the specific language governing permissions and\n-   limitations under the License.\n--->\n-\n-\n-Contains implementation of the selector, associated files and interpreter. <br/>\n-This depends on files generated by the grammar at $HEDWIG_CLIENT_JMS/src/main/grammar/javacc/selector_grammar.jjt <br/>\n-<p/>\n-This package depends on message package to pull headers, etc. <br/>\n-<p/>\n-<p/>\n-The code essentially is split into three things :\n-<ul>\n-  <li>Basic implementation of the selector, interpreter and grammar interface code : split between this\n-    package and the generated package (of same name).</li>\n-  <li>State objects, visitor implementation, etc to help evaluate the generated AST based on the message.\n-    MyNode, SelectorConstant, SelectorEvalState, etc.</li>\n-  <li>The functions to evaluate and implement functionality - expose constructs to interpreter to evaluate.\n-    *Function classes.</li>\n-</ul>\n-\n-The code relies heavily on the javacc grammar and the interpreter generated based on it : so please modify with care !"},{"sha":"6ef09704fe04086f8d63175dff6a80c66bbcae82","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionFactoryImpl.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionFactoryImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionFactoryImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,64 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.spi;\n-\n-import javax.jms.Connection;\n-import javax.jms.ConnectionFactory;\n-import javax.jms.JMSException;\n-import javax.jms.TopicConnection;\n-import javax.jms.TopicConnectionFactory;\n-import javax.naming.NamingException;\n-import javax.naming.Reference;\n-import javax.naming.Referenceable;\n-import java.io.Serializable;\n-\n-/**\n- * Implementation of jmx ConnectionFactory\n- * MUST be MT-safe (2.8)\n- */\n-public class HedwigConnectionFactoryImpl implements ConnectionFactory, TopicConnectionFactory,\n-    Referenceable, Serializable {\n-    private static final long serialVersionUID = 1L;\n-\n-    @Override\n-    public HedwigConnectionImpl createConnection() throws JMSException {\n-        HedwigConnectionImpl retval = new HedwigConnectionImpl();\n-        return retval;\n-    }\n-\n-    @Override\n-    public HedwigConnectionImpl createConnection(String user, String password) throws JMSException {\n-        HedwigConnectionImpl retval = new HedwigConnectionImpl(user, password);\n-        return retval;\n-    }\n-\n-    @Override\n-    public Reference getReference() throws NamingException {\n-        return new Reference(getClass().getName());\n-    }\n-\n-    @Override\n-    public TopicConnection createTopicConnection() throws JMSException {\n-        return new HedwigConnectionImpl();\n-    }\n-\n-    @Override\n-    public TopicConnection createTopicConnection(String user, String password) throws JMSException {\n-        return new HedwigConnectionImpl(user, password);\n-    }\n-}"},{"sha":"98f4273c6715040f358c35df6036ccfa359ce639","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionImpl.java","status":"removed","additions":0,"deletions":164,"changes":164,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigConnectionImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9","patch":"@@ -1,164 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.jms.spi;\n-\n-import org.apache.commons.configuration.ConfigurationException;\n-import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.jms.ConnectionImpl;\n-import org.apache.hedwig.jms.MessagingSessionFacade;\n-import org.apache.hedwig.jms.SessionImpl;\n-\n-import javax.jms.JMSException;\n-import java.io.File;\n-import java.io.IOException;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.net.URLConnection;\n-import java.net.URLStreamHandler;\n-\n-/**\n- * Returns the hedwig specific functionality of the Connection - which is tied to this spi impl.\n- * Coupled with HedwigMessagingSessionFacade.\n- *\n- */\n-public class HedwigConnectionImpl extends ConnectionImpl {\n-\n-    private ClientConfiguration hedwigClientConfig;\n-\n-    public HedwigConnectionImpl() throws JMSException {\n-        super();\n-        init(getUser(), getPassword());\n-    }\n-\n-    public HedwigConnectionImpl(String user, String password) throws JMSException {\n-        super (user, password);\n-        init(getUser(), getPassword());\n-    }\n-\n-    @Override\n-    protected SessionImpl createSessionInstance(boolean transacted, int acknowledgeMode,\n-                                                MessagingSessionFacade.DestinationType type) throws JMSException {\n-        if (null == type) return new SessionImpl(this, transacted, acknowledgeMode);\n-        switch (type){\n-            case QUEUE:\n-                return new QueueSessionImpl(this, transacted, acknowledgeMode);\n-            case TOPIC:\n-                return new TopicSessionImpl(this, transacted, acknowledgeMode);\n-            default:\n-                throw new JMSException(\"Unknown type \" + type);\n-        }\n-    }\n-\n-    @Override\n-    protected void doStart(String user, String password) throws JMSException {\n-        // noop for now ...\n-    }\n-\n-    protected void init(String user, String password) throws JMSException {\n-        // load to check sanity.\n-        hedwigClientConfig = loadConfig();\n-\n-        // TODO: Set configuration options specified by the user of api - user/passwd/etc.\n-    }\n-\n-    // copied from earlier code ...\n-    private ClientConfiguration loadConfig() throws JMSException {\n-        ClientConfiguration config = new ClientConfiguration();\n-\n-        // TODO: This is not very extensible and useful ... we need to pick the info from\n-        // configuration specified by user, NOT only from static files !\n-        // Also, we need to be able to support multiple configuration in a single client !\n-        // We need a better solution ....\n-\n-        try {\n-            // 1. try to load the client configuration as specified from a\n-            // system property\n-            if (System.getProperty(HEDWIG_CLIENT_CONFIG_FILE) != null) {\n-                File configFile = new File(System.getProperty(HEDWIG_CLIENT_CONFIG_FILE));\n-                if (!configFile.exists()) {\n-                    throw new JMSException(\n-                            \"Cannot create connection: cannot find Hedwig client configuration file specified as [\"\n-                                    + System.getProperty(HEDWIG_CLIENT_CONFIG_FILE) + \"]\");\n-                }\n-                config.loadConf(configFile.toURI().toURL());\n-            } else {\n-                // 2. try to load a \"hedwig-client.cfg\" file from the classpath\n-                config.loadConf(new URL(null, \"classpath://hedwig-client.cfg\", new URLStreamHandler() {\n-                    protected URLConnection openConnection(URL u) throws IOException {\n-                        // rely on the relevant classloader - not system classloader.\n-                        final URL resourceUrl = HedwigConnectionImpl.this.getClass().getClassLoader().\n-                            getResource(u.getPath());\n-                        return resourceUrl.openConnection();\n-                    }\n-                }));\n-            }\n-\n-        } catch (MalformedURLException e) {\n-            JMSException je = new JMSException(\"Cannot load Hedwig client configuration file \" + e);\n-            je.setLinkedException(e);\n-            throw je;\n-        } catch (ConfigurationException e) {\n-            JMSException je = new JMSException(\"Cannot load Hedwig client configuration \" + e);\n-            je.setLinkedException(e);\n-            throw je;\n-        }\n-\n-        /*\n-        System.out.println(\"getConsumedMessagesBufferSize : \" + config.getConsumedMessagesBufferSize());\n-        System.out.println(\"getDefaultServerHost : \" + config.getDefaultServerHost());\n-        System.out.println(\"isSSLEnabled : \" + config.isSSLEnabled());\n-        System.out.println(\"getMaximumMessageSize : \" + config.getMaximumMessageSize());\n-        System.out.println(\"getMaximumOutstandingMessages : \" + config.getMaximumOutstandingMessages());\n-        System.out.println(\"getMaximumServerRedirects : \"  + config.getMaximumServerRedirects());\n-        System.out.println(\"getServerAckResponseTimeout : \"  + config.getServerAckResponseTimeout());\n-        */\n-\n-        return config;\n-    }\n-\n-    public ClientConfiguration getHedwigClientConfig() {\n-        return hedwigClientConfig;\n-    }\n-\n-    @Override\n-    protected void doStop() {\n-        // nothing specific to be done.\n-    }\n-\n-    @Override\n-    protected void doClose(){\n-        // nothing specific to be done.\n-    }\n-\n-    @Override\n-    protected MessagingSessionFacade createMessagingSessionFacade(SessionImpl session) throws JMSException {\n-        return new HedwigMessagingSessionFacade(this, session);\n-    }\n-\n-    @Override\n-    public TopicSessionImpl createTopicSession(boolean transacted, int acknowledgeMode) throws JMSException {\n-        return (TopicSessionImpl) createSessionImpl(transacted, acknowledgeMode,\n-            MessagingSessionFacade.DestinationType.TOPIC);\n-    }\n-\n-    @Override\n-    public QueueSessionImpl createQueueSession(boolean transacted, int acknowledgeMode) throws JMSException {\n-        return (QueueSessionImpl) createSessionImpl(transacted, acknowledgeMode,\n-            MessagingSessionFacade.DestinationType.QUEUE);\n-    }\n-}"},{"sha":"4c23d5ce7b72a9f1aec221a916b485f2b0bbc560","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a13e259eeb6d4974e6d1d837baebe38f961cd875","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageConsumerImpl.java","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageConsumerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageConsumerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageConsumerImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"caf4b3e316804e7355f21ced76d3083abbcfb8e6","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageProducerImpl.java","status":"removed","additions":0,"deletions":117,"changes":117,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageProducerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageProducerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/MessageProducerImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"2beeea753a39889b8d3bf4b415cd5ab4cb2811fc","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/QueueSessionImpl.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/QueueSessionImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/QueueSessionImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/QueueSessionImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"23dfb54126ce2030451f663593defea6d2399fb3","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java","status":"removed","additions":0,"deletions":226,"changes":226,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e96f9984207e7e373ee6d39dc798e6096d8d7f2b","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSessionImpl.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSessionImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSessionImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSessionImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"4a51e8dd8eb2cccd68cfd5661c011fc31bfba520","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSubscriberImpl.java","status":"removed","additions":0,"deletions":323,"changes":323,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSubscriberImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSubscriberImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicSubscriberImpl.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"fe6c1e13359acaa55a5cdce2b5f75188be7282f2","filename":"branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/package-info.html","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/package-info.html","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/package-info.html","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/package-info.html?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"2338587bcc56d2236503ce9c5beecbdbffaac2a9","filename":"branch-4.3/hedwig-client-jms/src/main/protobuf/JmsHeader.proto","status":"removed","additions":0,"deletions":54,"changes":54,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/protobuf/JmsHeader.proto","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/protobuf/JmsHeader.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/protobuf/JmsHeader.proto?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"bae9e0907e7b3177f0ea5e86743e6a2e1dc24aa7","filename":"branch-4.3/hedwig-client-jms/src/main/resources/findbugsExclude.xml","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/resources/findbugsExclude.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/resources/findbugsExclude.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/resources/findbugsExclude.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"27d78f185b3ffd211c918e3f458df6bf0de7a8a2","filename":"branch-4.3/hedwig-client-jms/src/main/resources/log4j.properties","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/resources/log4j.properties","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/main/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/main/resources/log4j.properties?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"f4c0f7ec023e63a073597fa5540b5fb07ecbfda9","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/AutoFailTestSupport.java","status":"removed","additions":0,"deletions":153,"changes":153,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/AutoFailTestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/AutoFailTestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/AutoFailTestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"d4155a767083bb83a664462e7ad3cae49e847bbe","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/CombinationTestSupport.java","status":"removed","additions":0,"deletions":250,"changes":250,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/CombinationTestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/CombinationTestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/CombinationTestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e1e85e5ee3b99c2fea3fc6ac9348ee4af7154619","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ConnectionCleanupTest.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ConnectionCleanupTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ConnectionCleanupTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ConnectionCleanupTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"93e0615c450ef57d921e436dcf4a60006ee6a8d4","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ConsumerReceiveWithTimeoutTest.java","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ConsumerReceiveWithTimeoutTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ConsumerReceiveWithTimeoutTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ConsumerReceiveWithTimeoutTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"685683762a4f04fe6f96461784338e5fba4d7da7","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ExpiryHogTest.java","status":"removed","additions":0,"deletions":61,"changes":61,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ExpiryHogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ExpiryHogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/ExpiryHogTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"408b40e7ff4eac752aa63ac1055cf288976be475","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSConsumerTest.java","status":"removed","additions":0,"deletions":936,"changes":936,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSConsumerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSConsumerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSConsumerTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"343919a9573575613b2779b50fc9e24406dbaebf","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSDurableTopicRedeliverTest.java","status":"removed","additions":0,"deletions":76,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSDurableTopicRedeliverTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSDurableTopicRedeliverTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSDurableTopicRedeliverTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"24551f381c3b57af08a2ebfea57a7955eae2c48e","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSIndividualAckTest.java","status":"removed","additions":0,"deletions":165,"changes":165,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSIndividualAckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSIndividualAckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSIndividualAckTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"cee1698ada8286ea408c2f45ea72f7fe2b4d1a27","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSMessageTest.java","status":"removed","additions":0,"deletions":504,"changes":504,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSMessageTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSMessageTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSMessageTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"cadb071d5ade1de32dbf691998e5acb45b1e8948","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSUsecaseTest.java","status":"removed","additions":0,"deletions":109,"changes":109,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSUsecaseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSUsecaseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JMSUsecaseTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"ec5243f6725bb237f35a5b38d3149793e68470db","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckListenerTest.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckListenerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckListenerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckListenerTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"13eaa2742f91df69d586b5e006eed437160b81d7","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckTest.java","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsAutoAckTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"dd914b5f2fda3e934a93539c8a2bfa35e8d17cb2","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsBenchmark.java","status":"removed","additions":0,"deletions":204,"changes":204,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsBenchmark.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"78d7fb3de4597a348f9cdf381302bdf9d57f1e71","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckListenerTest.java","status":"removed","additions":0,"deletions":127,"changes":127,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckListenerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckListenerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckListenerTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c4aa3c6d70ba91bac5053c95465d44642f8829d0","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckTest.java","status":"removed","additions":0,"deletions":148,"changes":148,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsClientAckTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"36496146654eafde7506438d53f85f762dff51e7","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsConnectionStartStopTest.java","status":"removed","additions":0,"deletions":169,"changes":169,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsConnectionStartStopTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsConnectionStartStopTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsConnectionStartStopTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"aaf47f2d0ad64e2c6ea314250d293bc95b12d689","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsConsumerResetActiveListenerTest.java","status":"removed","additions":0,"deletions":157,"changes":157,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsConsumerResetActiveListenerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsConsumerResetActiveListenerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsConsumerResetActiveListenerTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"218bbe5dcd873f89ed91bc41a0610613f470ad2d","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsCreateConsumerInOnMessageTest.java","status":"removed","additions":0,"deletions":96,"changes":96,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsCreateConsumerInOnMessageTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsCreateConsumerInOnMessageTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsCreateConsumerInOnMessageTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"548e7a81f291df2f8801c50a8f00a43b9b41fdb4","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSelectorTest.java","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSelectorTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSelectorTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSelectorTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b2e2ed736587d087f9d453d4e3374f88e9a494e5","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSendReceiveTest.java","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSendReceiveTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSendReceiveTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicSendReceiveTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c0da42febbbea1aea5d8283dd048cdd3abda121c","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicTransactionTest.java","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicTransactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicTransactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsDurableTopicTransactionTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"3873a0f48525032aa57d90bef4c8c9401cf23665","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsMultipleClientsTestSupport.java","status":"removed","additions":0,"deletions":281,"changes":281,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsMultipleClientsTestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsMultipleClientsTestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsMultipleClientsTestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"fba706456fdcb2fc0e88bd39de9cddae63a53f38","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsRedeliveredTest.java","status":"removed","additions":0,"deletions":380,"changes":380,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsRedeliveredTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsRedeliveredTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsRedeliveredTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"82572be43fb84719989042af5f1c975d059ffd47","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java","status":"removed","additions":0,"deletions":339,"changes":339,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsRollbackRedeliveryTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"62a17150c8d9ffce52e1c493bb68d12fccce4bb9","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveTestSupport.java","status":"removed","additions":0,"deletions":234,"changes":234,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveTestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveTestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveTestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"82d2108baf6b8a132f7066005260a9c479007841","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveWithMessageExpirationTest.java","status":"removed","additions":0,"deletions":239,"changes":239,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveWithMessageExpirationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveWithMessageExpirationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendReceiveWithMessageExpirationTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7b60106ec70858e54dfccb6241ecaac575f5338c","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendWithAsyncCallbackTest.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendWithAsyncCallbackTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendWithAsyncCallbackTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsSendWithAsyncCallbackTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"82ec6aefa3cedf5c078dc571dcbaeb60bd4517e6","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTestSupport.java","status":"removed","additions":0,"deletions":174,"changes":174,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"78afcdde52fe48a38f0e49078714d95386ce0981","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicCompositeSendReceiveTest.java","status":"removed","additions":0,"deletions":101,"changes":101,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicCompositeSendReceiveTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicCompositeSendReceiveTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicCompositeSendReceiveTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"ac25e58e066bd54e8f2b6b32db71fbf8b0757886","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicRedeliverTest.java","status":"removed","additions":0,"deletions":176,"changes":176,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicRedeliverTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicRedeliverTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicRedeliverTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"73dd2edb5d15cfb76e37968fc3a5873bd204132e","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java","status":"removed","additions":0,"deletions":212,"changes":212,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSelectorTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e75d6fe9b31466dd09382b60da5d146e5a63687c","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveSubscriberTest.java","status":"removed","additions":0,"deletions":33,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveSubscriberTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveSubscriberTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveSubscriberTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"dc590d87b982b625e78ca028e3d55f39ec0c2124","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveTest.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"36f4bebede7af8afa02d6bd3b1cbaebfe5fd4f85","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsTest.java","status":"removed","additions":0,"deletions":116,"changes":116,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"f122176289c951b754bacd7f3a0e540bd324da5c","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsWithJMXTest.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsWithJMXTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsWithJMXTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendReceiveWithTwoConnectionsWithJMXTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e7fd5bf03a1bd3fa911adf8617d1e47735288f4f","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendSameMessageTest.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendSameMessageTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendSameMessageTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicSendSameMessageTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"81060f6a270ac32201e4e12c4f22936f0ed59b20","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicTransactionTest.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicTransactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicTransactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTopicTransactionTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"23a9121a3223066fdf673c7eda74f52b4051d6df","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTransactionTestSupport.java","status":"removed","additions":0,"deletions":692,"changes":692,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTransactionTestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTransactionTestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/JmsTransactionTestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"5593dafc59d5e4ab78c40103ac48bc89e36281da","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/LoadTestBurnIn.java","status":"removed","additions":0,"deletions":164,"changes":164,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/LoadTestBurnIn.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/LoadTestBurnIn.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/LoadTestBurnIn.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"735d701ebbbd39d3eebec7ab25188415a81f76b5","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/MessageListenerRedeliveryTest.java","status":"removed","additions":0,"deletions":193,"changes":193,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/MessageListenerRedeliveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/MessageListenerRedeliveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/MessageListenerRedeliveryTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"002fea04116088f13df2060b81bfbd63d83f7921","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java","status":"removed","additions":0,"deletions":145,"changes":145,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/RedeliveryPolicyTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"fd838ab28f9011c6f5b84ce12c0655beba6bf2a6","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/TestSupport.java","status":"removed","additions":0,"deletions":151,"changes":151,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/TestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/TestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/TestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"4b12ccca1f3252d60241601fe39c3946e23e2847","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/TimeStampTest.java","status":"removed","additions":0,"deletions":91,"changes":91,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/TimeStampTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/TimeStampTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/TimeStampTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"1d187240e4c77264422e3640fd14c34e2dbc184b","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleConsumer.java","status":"removed","additions":0,"deletions":129,"changes":129,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleConsumer.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleConsumer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleConsumer.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"4facc3dc3a9baa5280d1f06d3c11864b6c02f380","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleProducer.java","status":"removed","additions":0,"deletions":138,"changes":138,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleProducer.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleProducer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/demo/SimpleProducer.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c5d9b0c2fcf4a1408481b01968e758aaba370a96","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadClient.java","status":"removed","additions":0,"deletions":222,"changes":222,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadClient.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"814981415236fcb587bd5c33c0fed4d4f51706bf","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadController.java","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadController.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadController.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadController.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"66880af9c96463c11a338adba9aab34c2590f127","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadTest.java","status":"removed","additions":0,"deletions":127,"changes":127,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/load/LoadTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a47ba67185180a4a8a114520008840e72fdbd156","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a03fab9671685b343070130722c5a1e96360af3a","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/InactiveDurableTopicTest.java","status":"removed","additions":0,"deletions":171,"changes":171,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/InactiveDurableTopicTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/InactiveDurableTopicTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/InactiveDurableTopicTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"8959de26fe156dff0e393a7405c37d608d9ab331","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/NetworkedSyncTest.java","status":"removed","additions":0,"deletions":212,"changes":212,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/NetworkedSyncTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/NetworkedSyncTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/NetworkedSyncTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"f05e4820e15033e9f71b183396b2f8ecd1b0fe1b","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/NumberOfDestinationsTest.java","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/NumberOfDestinationsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/NumberOfDestinationsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/NumberOfDestinationsTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"9eefad588cdbd246b04b18c5a87bc4696b304ecc","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfConsumer.java","status":"removed","additions":0,"deletions":139,"changes":139,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfConsumer.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfConsumer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfConsumer.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a65b2c0bb70c36a39b39b4c3fb589bd6fc90a452","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfProducer.java","status":"removed","additions":0,"deletions":125,"changes":125,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfProducer.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfProducer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfProducer.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7942667d2b7d284d6a9da8d775599dd9e407d277","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfRate.java","status":"removed","additions":0,"deletions":78,"changes":78,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfRate.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfRate.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/PerfRate.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e9092110d0ca8bd1dd611ea6b6f04e58b8d47169","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicNetworkTest.java","status":"removed","additions":0,"deletions":50,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicNetworkTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicNetworkTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicNetworkTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c10d3bf2cfbf7dd5a3163b96fed853076c8a7f78","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleDurableTopicTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"0d32d490e79bf5ee423b3729a3ab8b1d8d33eed8","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNetworkTest.java","status":"removed","additions":0,"deletions":79,"changes":79,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNetworkTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNetworkTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNetworkTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a2e2b7d4adc8a9b187a1f07a0d0a9cc6324e256e","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNonPersistentTopicTest.java","status":"removed","additions":0,"deletions":37,"changes":37,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNonPersistentTopicTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNonPersistentTopicTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleNonPersistentTopicTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"5df97e5a84237ac364dec016699f2a272ef75130","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java","status":"removed","additions":0,"deletions":181,"changes":181,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SimpleTopicTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c670dbda47351b0daed033b4f2ccaecbdb46bcce","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumer.java","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumer.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumer.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7b66d77ec37e5abef23febb7ecd097abae1a6c0d","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumerTopicTest.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumerTopicTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumerTopicTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowConsumerTopicTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"45bfc2826bc8e6030636e615e167c2c6b4fdc671","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowDurableConsumerTopicTest.java","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowDurableConsumerTopicTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowDurableConsumerTopicTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/perf/SlowDurableConsumerTopicTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e05770edcadf814fb5937f9863b80b68ce9a1da2","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsResourceProvider.java","status":"removed","additions":0,"deletions":237,"changes":237,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsResourceProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsResourceProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsResourceProvider.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"bc150df3461fffad145e0aba43c75f94c17a13a8","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java","status":"removed","additions":0,"deletions":273,"changes":273,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsSendReceiveTestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"0fcde3394ec03d8ddecf0f0b738d2b674ca76bde","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java","status":"removed","additions":0,"deletions":116,"changes":116,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"6f55fcbf3763f80c7ada40cb320916f781115188","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsAndByteSelectorTest.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsAndByteSelectorTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsAndByteSelectorTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsAndByteSelectorTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"2d4a633fa7fe7c79d1496d4ac1eb1785ff4c73a8","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsTest.java","status":"removed","additions":0,"deletions":129,"changes":129,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/JmsTopicSendReceiveWithTwoConnectionsTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"6de9021bee196b87f7301ad9c5ed268463855453","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/TestSupport.java","status":"removed","additions":0,"deletions":261,"changes":261,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/TestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/TestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/TestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"0bc8a8e6b8d6deb0489d60bc9bdc35448cc27ab3","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/rollback/DelegatingTransactionalMessageListener.java","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/rollback/DelegatingTransactionalMessageListener.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/rollback/DelegatingTransactionalMessageListener.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/test/rollback/DelegatingTransactionalMessageListener.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"5bc1a079794352110e84f9a4409554eb16fa341c","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSentMessageTest.java","status":"removed","additions":0,"deletions":62,"changes":62,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSentMessageTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSentMessageTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSentMessageTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b4da7a70e10fdad19d9b8d68ca93043caf49b4cc","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSessionDeliveryModeTest.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSessionDeliveryModeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSessionDeliveryModeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ChangeSessionDeliveryModeTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7ea8cc02573b948e423485472c33262a849d5c52","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositeConsumeTest.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositeConsumeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositeConsumeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositeConsumeTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7833e019c3720720a65ef6aad4e58757ce767044","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java","status":"removed","additions":0,"deletions":145,"changes":145,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"087c5ef4ba9e928700c844dfcf53357248a767da","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ConcurrentProducerDurableConsumerTest.java","status":"removed","additions":0,"deletions":413,"changes":413,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ConcurrentProducerDurableConsumerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ConcurrentProducerDurableConsumerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ConcurrentProducerDurableConsumerTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b14ef718c50552a9ec9ccc5bbbaedd97547e17bb","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DiscriminatingConsumerLoadTest.java","status":"removed","additions":0,"deletions":322,"changes":322,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DiscriminatingConsumerLoadTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DiscriminatingConsumerLoadTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DiscriminatingConsumerLoadTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"fa79d69ea1a85ad6ff7a2840847e267efad82f5e","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DispatchMultipleConsumersTest.java","status":"removed","additions":0,"deletions":214,"changes":214,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DispatchMultipleConsumersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DispatchMultipleConsumersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DispatchMultipleConsumersTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c4fa74de491bf5d9b53c7d747c0212fa5abc7033","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableConsumerCloseAndReconnectTest.java","status":"removed","additions":0,"deletions":192,"changes":192,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableConsumerCloseAndReconnectTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableConsumerCloseAndReconnectTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableConsumerCloseAndReconnectTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a9272793d7575be2bf73cd27c2c61e62fb8311b6","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubProcessTest.java","status":"removed","additions":0,"deletions":628,"changes":628,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubProcessTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubProcessTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubProcessTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b8d12da0fa03c9f4ac7c37eaa16999171a4b242d","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubSelectorDelayTest.java","status":"removed","additions":0,"deletions":256,"changes":256,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubSelectorDelayTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubSelectorDelayTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubSelectorDelayTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"0a9968b50f8f50fadf378ea041ee37363ff2fc8b","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubscriptionHangTestCase.java","status":"removed","additions":0,"deletions":119,"changes":119,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubscriptionHangTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubscriptionHangTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/DurableSubscriptionHangTestCase.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"edf180b819b2f00ab3b59df71831e164a1fef31e","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/MyObject.java","status":"removed","additions":0,"deletions":73,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/MyObject.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/MyObject.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/MyObject.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"adfb47dc7c0df2a11613fd6caf83a89c71a3978d","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/NonBlockingConsumerRedeliveryTest.java","status":"removed","additions":0,"deletions":340,"changes":340,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/NonBlockingConsumerRedeliveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/NonBlockingConsumerRedeliveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/NonBlockingConsumerRedeliveryTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"fa7b0eae6534393d42aecbb1fa09322b966cbc2c","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java","status":"removed","additions":0,"deletions":241,"changes":241,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ObjectMessageNotSerializableTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"3f570df014ca89eccbb5fecd591a58e502dfd194","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ProducerConsumerTestSupport.java","status":"removed","additions":0,"deletions":54,"changes":54,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ProducerConsumerTestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ProducerConsumerTestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/ProducerConsumerTestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"6fd3ef5e618c39df78278dd1ea8def0cd6af91a5","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnDurableTopicConsumedMessageTest.java","status":"removed","additions":0,"deletions":27,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnDurableTopicConsumedMessageTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnDurableTopicConsumedMessageTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnDurableTopicConsumedMessageTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"31d021946de943231020b3c006c4bf29b7293f7b","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnTopicConsumedMessageTest.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnTopicConsumedMessageTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnTopicConsumedMessageTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/PublishOnTopicConsumedMessageTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"0327f664bd02f11b14542e67ce56eb88e6e18d69","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/SubscribeClosePublishThenConsumeTest.java","status":"removed","additions":0,"deletions":107,"changes":107,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/SubscribeClosePublishThenConsumeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/SubscribeClosePublishThenConsumeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/SubscribeClosePublishThenConsumeTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c2902cf85729ce2b6b8535b2ce0c9c7a1d26e129","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TestSupport.java","status":"removed","additions":0,"deletions":157,"changes":157,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TestSupport.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TestSupport.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TestSupport.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"2c1e24ce4287859f7e4c06615bbbc9169e5e3fb1","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TopicRedeliverTest.java","status":"removed","additions":0,"deletions":300,"changes":300,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TopicRedeliverTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TopicRedeliverTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TopicRedeliverTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"375004be89d3a4c498246fe6250c8cf2b72a1517","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionRollbackOrderTest.java","status":"removed","additions":0,"deletions":161,"changes":161,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionRollbackOrderTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionRollbackOrderTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionRollbackOrderTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"6b9a2f9c865a0996080489823d0a307e7cc836f3","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionTest.java","status":"removed","additions":0,"deletions":120,"changes":120,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/TransactionTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"1f9ce8ef91393588580716bb8165eee77ece59f6","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/ConsumerThread.java","status":"removed","additions":0,"deletions":86,"changes":86,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/ConsumerThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/ConsumerThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/ConsumerThread.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c4f55d4cfbb7ab363600cecd5456c090aaba3ebc","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/DefaultTestAppender.java","status":"removed","additions":0,"deletions":82,"changes":82,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/DefaultTestAppender.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/DefaultTestAppender.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/DefaultTestAppender.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"197e3fdb9be75118ff9a11b708052f5e9fae1847","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/IdGenerator.java","status":"removed","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/IdGenerator.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/IdGenerator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/IdGenerator.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a9584a83ce3ab60c753156653be3c63af64dc85a","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/MessageIdList.java","status":"removed","additions":0,"deletions":267,"changes":267,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/MessageIdList.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/MessageIdList.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/MessageIdList.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"12dfe3af8a7081186408c9eced3fe503c3037b3e","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/ProducerThread.java","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/ProducerThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/ProducerThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/ProducerThread.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"49537627247223c489f4085610f28be64f0d5867","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/SimplePojo.java","status":"removed","additions":0,"deletions":77,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/SimplePojo.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/SimplePojo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/SimplePojo.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"1a89fe5ea63cd4e8429aafb376e84da91dce98d3","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/Wait.java","status":"removed","additions":0,"deletions":40,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/Wait.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/Wait.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/activemq/util/Wait.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"ecf8830ea8d0b10d33aef09323a8751a4e3da1fe","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/JmsTestBase.java","status":"removed","additions":0,"deletions":95,"changes":95,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/JmsTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/JmsTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/JmsTestBase.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"be64fc4ce6112546bb5e0332167c6017457e2ee0","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/BasicJMSTest.java","status":"removed","additions":0,"deletions":337,"changes":337,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/BasicJMSTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/BasicJMSTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/BasicJMSTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"918dbbf11b97e4a9b658461b3907e26771df9dc3","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/BasicSelectorGrammarTest.java","status":"removed","additions":0,"deletions":376,"changes":376,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/BasicSelectorGrammarTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/BasicSelectorGrammarTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/BasicSelectorGrammarTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7895b1d73d45caede79d77a8d430d286545cf653","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorParserTest.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorParserTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorParserTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorParserTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"96e4a11649f279bf27e38c74a65338082d8dd155","filename":"branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorTest.java","status":"removed","additions":0,"deletions":399,"changes":399,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client-jms/src/test/java/org/apache/hedwig/jms/selector/activemq/SelectorTest.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"4d4a36d3f2f6ba37b60e2e952704545ab4b92e97","filename":"branch-4.3/hedwig-client/conf/hw_client.conf","status":"removed","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/conf/hw_client.conf","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/conf/hw_client.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/conf/hw_client.conf?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"989f718caa3b2ca8512752e3094dbe6641c9b2c0","filename":"branch-4.3/hedwig-client/pom.xml","status":"removed","additions":0,"deletions":142,"changes":142,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/pom.xml?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"308407cf611e970d9160b3137214d0388872f81a","filename":"branch-4.3/hedwig-client/src/main/cpp/Makefile.am","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/Makefile.am","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/Makefile.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/Makefile.am?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"f6fd377f8d847ea6234b229074ae02e5b6c00083","filename":"branch-4.3/hedwig-client/src/main/cpp/README","status":"removed","additions":0,"deletions":38,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/README","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/README","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/README?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"420049eca3564dd70362b6d980574d0c36cf4fc5","filename":"branch-4.3/hedwig-client/src/main/cpp/aminclude.am","status":"removed","additions":0,"deletions":186,"changes":186,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/aminclude.am","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/aminclude.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/aminclude.am?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"f5ac9c7aa8c15b8ea71b0e2ddc078eca5ace74e9","filename":"branch-4.3/hedwig-client/src/main/cpp/c-doc.Doxyfile","status":"removed","additions":0,"deletions":1267,"changes":1267,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/c-doc.Doxyfile","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/c-doc.Doxyfile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/c-doc.Doxyfile?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"efc6e05c96107f4fd10c20103edc1e36935b4aee","filename":"branch-4.3/hedwig-client/src/main/cpp/configure.ac","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/configure.ac","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/configure.ac","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/configure.ac?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"1e7eea1644da3e9730b75a08a173bdee47efbffc","filename":"branch-4.3/hedwig-client/src/main/cpp/hedwig-0.1.pc.in","status":"removed","additions":0,"deletions":30,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/hedwig-0.1.pc.in","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/hedwig-0.1.pc.in","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/hedwig-0.1.pc.in?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"80e961b077d373a13d31c8acda00f5aa694e8cfb","filename":"branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/callback.h","status":"removed","additions":0,"deletions":84,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/callback.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/callback.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/callback.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7b914bcfa8de97f6075cfb1b7ed94cd3ba48735b","filename":"branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/client.h","status":"removed","additions":0,"deletions":98,"changes":98,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/client.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/client.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/client.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b44fed96eed9bdd3265fadc4bbba063cae683bf1","filename":"branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/exceptions.h","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/exceptions.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/exceptions.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/exceptions.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"ea08838df9130d648be5984a38ca6991287cc8cc","filename":"branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/publish.h","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/publish.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/publish.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/publish.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"4bc718c2a1652fae51c9f1d655a165daa970235e","filename":"branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/subscribe.h","status":"removed","additions":0,"deletions":71,"changes":71,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/subscribe.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/subscribe.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/inc/hedwig/subscribe.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"f19a3da8339280f1f88095b7471b74151c81a1d5","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/Makefile.am","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/Makefile.am","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/Makefile.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/Makefile.am?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b980e53bf0a57532c521547a80bd60230245a6cb","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/channel.cpp","status":"removed","additions":0,"deletions":801,"changes":801,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/channel.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/channel.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/channel.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c9ef2892aed586edeb6d963c9074e3473cdb4a5f","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/channel.h","status":"removed","additions":0,"deletions":438,"changes":438,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/channel.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/channel.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/channel.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e98c45293fa6030c5a2494fbbc7b1aaa8ea89f17","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/client.cpp","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/client.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/client.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/client.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"40114d6e8ec47e0f6ebabe9105173e8ad5b07dc9","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/clientimpl.cpp","status":"removed","additions":0,"deletions":738,"changes":738,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/clientimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/clientimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/clientimpl.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"fd7915ccd53bec12dc5f03e38f61f5f9d6e03bb0","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/clientimpl.h","status":"removed","additions":0,"deletions":493,"changes":493,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/clientimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/clientimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/clientimpl.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"24d458e06d871729e7b3a573da0ba82cd207386c","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/data.cpp","status":"removed","additions":0,"deletions":277,"changes":277,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/data.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/data.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/data.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"0639f4a80fda82e09b8be1a855385089daf49bc7","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/data.h","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/data.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/data.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/data.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"af3560c5d3dc3c91dddceb2e68a86d4238c2a180","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","status":"removed","additions":0,"deletions":131,"changes":131,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b6a75040a4fea40ba4e05adc02f43439b7f6d824","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/eventdispatcher.h","status":"removed","additions":0,"deletions":87,"changes":87,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/eventdispatcher.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/eventdispatcher.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/eventdispatcher.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"9e062dcf03e17e068f61a3dfc8d4d3d83166185d","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/exceptions.cpp","status":"removed","additions":0,"deletions":31,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/exceptions.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/exceptions.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/exceptions.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"07d884c2ce43ad8f3781dc2f76eb009319fa8558","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp","status":"removed","additions":0,"deletions":45,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"2d24bd5c9763e02e324df3ec76fa86f81a16e74d","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/filterablemessagehandler.h","status":"removed","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/filterablemessagehandler.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/filterablemessagehandler.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/filterablemessagehandler.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"8c8767a8be5170f0922fbe481690af68f2a4d00f","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp","status":"removed","additions":0,"deletions":566,"changes":566,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"8e9711e794f403a9b449594f8e5a7fe8a5944a33","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h","status":"removed","additions":0,"deletions":193,"changes":193,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"033f17c4e61ea1157ab8aaa724d7e6960fe9f6ee","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","status":"removed","additions":0,"deletions":134,"changes":134,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/publisherimpl.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"335a219226d7880c83fb8d9d59945d23a158f0c8","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/publisherimpl.h","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/publisherimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/publisherimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/publisherimpl.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"3f59e1b1c01726e275070f1de06a702ae1bd2274","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp","status":"removed","additions":0,"deletions":495,"changes":495,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b73fa81ea703018e9996c200231aec0038658661","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h","status":"removed","additions":0,"deletions":196,"changes":196,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"8573ceabc87c16f5b52da9d04c80eeb675893a50","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","status":"removed","additions":0,"deletions":687,"changes":687,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"0cdf5f17c295276f698b67734804c97f8e1b80ab","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/subscriberimpl.h","status":"removed","additions":0,"deletions":338,"changes":338,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/subscriberimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/subscriberimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/subscriberimpl.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"b5a7cc081b47b5c552e2ac21cf4282079efb6962","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/util.cpp","status":"removed","additions":0,"deletions":183,"changes":183,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/util.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/util.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/util.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a7741e2afc03a9d49c1da971c148841c672293a2","filename":"branch-4.3/hedwig-client/src/main/cpp/lib/util.h","status":"removed","additions":0,"deletions":128,"changes":128,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/lib/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/lib/util.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"8cc46662f6229fea2ccf523e19eb504af87aa66b","filename":"branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_asio.m4","status":"removed","additions":0,"deletions":111,"changes":111,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_asio.m4","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_asio.m4","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_asio.m4?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"8f935f6bc61377ff824f9af0a1d3f44bdd9d8d20","filename":"branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_base.m4","status":"removed","additions":0,"deletions":252,"changes":252,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_base.m4","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_base.m4","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_base.m4?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"fb7e5308610737a97b1e20b71e1cc174dc71cb26","filename":"branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_thread.m4","status":"removed","additions":0,"deletions":149,"changes":149,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_thread.m4","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_thread.m4","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/m4/ax_boost_thread.m4?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"6334fd41223259652f99dc0b9206b65a0eef4fb5","filename":"branch-4.3/hedwig-client/src/main/cpp/m4/ax_doxygen.m4","status":"removed","additions":0,"deletions":533,"changes":533,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/ax_doxygen.m4","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/ax_doxygen.m4","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/m4/ax_doxygen.m4?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"648f43c4abcbf55e901c677013237bc54067f932","filename":"branch-4.3/hedwig-client/src/main/cpp/m4/gtest.m4","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/gtest.m4","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/m4/gtest.m4","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/m4/gtest.m4?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"1917d7e9fa6707e2501b63aff4bb9b92a991e179","filename":"branch-4.3/hedwig-client/src/main/cpp/scripts/log4cxx.conf","status":"removed","additions":0,"deletions":44,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/scripts/log4cxx.conf","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/scripts/log4cxx.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/scripts/log4cxx.conf?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"83fd132fed15de2285c90729e169a8be90109175","filename":"branch-4.3/hedwig-client/src/main/cpp/scripts/network-delays.sh","status":"removed","additions":0,"deletions":68,"changes":68,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/scripts/network-delays.sh","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/scripts/network-delays.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/scripts/network-delays.sh?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"cd8563a620b27007d33b54df1ee3c582e2b287fe","filename":"branch-4.3/hedwig-client/src/main/cpp/scripts/server-control.sh","status":"removed","additions":0,"deletions":170,"changes":170,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/scripts/server-control.sh","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/scripts/server-control.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/scripts/server-control.sh?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"85e1f747fbd498e458a4186da1a3fceb67e6e665","filename":"branch-4.3/hedwig-client/src/main/cpp/scripts/tester.sh","status":"removed","additions":0,"deletions":175,"changes":175,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/scripts/tester.sh","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/scripts/tester.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/scripts/tester.sh?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"d55100cc584e7752daa19330fc9e79a1405beb60","filename":"branch-4.3/hedwig-client/src/main/cpp/test/Makefile.am","status":"removed","additions":0,"deletions":47,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/Makefile.am","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/Makefile.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/Makefile.am?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7c08c9765b4058e53bb79e7cc9a763e070f07fa4","filename":"branch-4.3/hedwig-client/src/main/cpp/test/main.cpp","status":"removed","additions":0,"deletions":88,"changes":88,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/main.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/main.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/main.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"9315e72a2fae3f6ec3f8bbe9983a487ced383223","filename":"branch-4.3/hedwig-client/src/main/cpp/test/messageboundtest.cpp","status":"removed","additions":0,"deletions":216,"changes":216,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/messageboundtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/messageboundtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/messageboundtest.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"907d95da72386364160b455dfae5079db3a738c9","filename":"branch-4.3/hedwig-client/src/main/cpp/test/messagefiltertest.cpp","status":"removed","additions":0,"deletions":248,"changes":248,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/messagefiltertest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/messagefiltertest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/messagefiltertest.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"534d9ef49470d25d142d7b106c416f1cb78ee34c","filename":"branch-4.3/hedwig-client/src/main/cpp/test/multiplextest.cpp","status":"removed","additions":0,"deletions":418,"changes":418,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/multiplextest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/multiplextest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/multiplextest.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"46b146ab8950fd80675d9d2224a4fbefa5545cfc","filename":"branch-4.3/hedwig-client/src/main/cpp/test/publishtest.cpp","status":"removed","additions":0,"deletions":318,"changes":318,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/publishtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/publishtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/publishtest.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"9baba1d8ed2ba82e9e44ed76ba08cc411c25faf2","filename":"branch-4.3/hedwig-client/src/main/cpp/test/pubsubtest.cpp","status":"removed","additions":0,"deletions":735,"changes":735,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/pubsubtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/pubsubtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/pubsubtest.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"3ee736a1a4cd0e1c9a1aecc29e78eb1e76b2a5f4","filename":"branch-4.3/hedwig-client/src/main/cpp/test/subscribetest.cpp","status":"removed","additions":0,"deletions":253,"changes":253,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/subscribetest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/subscribetest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/subscribetest.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"c75bc3f1fb1155d44c2a9aefb2214a5197209a64","filename":"branch-4.3/hedwig-client/src/main/cpp/test/test.sh","status":"removed","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/test.sh","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/test.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/test.sh?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"9dd0d9ff91b6b8d88dc7d5eeb16aef5655e421a6","filename":"branch-4.3/hedwig-client/src/main/cpp/test/throttledeliverytest.cpp","status":"removed","additions":0,"deletions":159,"changes":159,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/throttledeliverytest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/throttledeliverytest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/throttledeliverytest.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"dd5b5bfa7bef7c7d3ccbcb85006343946e886b2f","filename":"branch-4.3/hedwig-client/src/main/cpp/test/util.h","status":"removed","additions":0,"deletions":201,"changes":201,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/util.h?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e5b6d75afb37288a9d338bd193b2a1ac1cfb34c5","filename":"branch-4.3/hedwig-client/src/main/cpp/test/utiltest.cpp","status":"removed","additions":0,"deletions":74,"changes":74,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/utiltest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/cpp/test/utiltest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/cpp/test/utiltest.cpp?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"4092a47f9bafabef8a2da41b0780f8147ed2a6a8","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java","status":"removed","additions":0,"deletions":72,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"891148fe25897d9498167a56f35172a3ea2f6531","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java","status":"removed","additions":0,"deletions":42,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"f312a36bfb358d6eebc32510a552d83dc1e2c511","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java","status":"removed","additions":0,"deletions":48,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"a4fdb043bfa28dfea541a7719f22221dd0008acf","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","status":"removed","additions":0,"deletions":89,"changes":89,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"7e05c0e69997e4a3f3d843dfc7aceabccfeadcd8","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","status":"removed","additions":0,"deletions":380,"changes":380,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"af075c02dae745b39c4d9c244b1f1e9e83bbe87a","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","status":"removed","additions":0,"deletions":141,"changes":141,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"0f8cb7f381c7407e63601cf737cddab530d20123","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","status":"removed","additions":0,"deletions":148,"changes":148,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"3efe22da20938a875dee575044d9c5e4e9d234b0","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","status":"removed","additions":0,"deletions":191,"changes":191,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"e7b15f26a2ffef6e44573adf95a011e296007fd8","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java","status":"removed","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkWorker.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"cc5e93778a041724de8a050276fcc3497f14c21b","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","status":"removed","additions":0,"deletions":165,"changes":165,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"},{"sha":"21ce9d3b34c9bec19eee58fba6001bedb63c2f46","filename":"branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","status":"removed","additions":0,"deletions":171,"changes":171,"blob_url":"https://github.com/apache/bookkeeper/blob/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/d6c94da5751258c7868c7fd3232bafaf55090af9/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/branch-4.3/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java?ref=d6c94da5751258c7868c7fd3232bafaf55090af9"}]}

