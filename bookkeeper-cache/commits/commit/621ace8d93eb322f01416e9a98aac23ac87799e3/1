{"sha":"621ace8d93eb322f01416e9a98aac23ac87799e3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2MjFhY2U4ZDkzZWIzMjJmMDE0MTZlOWE5OGFhYzIzYWM4Nzc5OWUz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T10:09:22Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T10:09:22Z"},"message":"BOOKKEEPER-380: ZkLedgerUnderreplicationManager.markLedgerUnderreplicated() is adding duplicate missingReplicas while multiple bk failed for the same ledger (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377630 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5c1da6b1cde689baaa2c5d6c5eaed777f2447a88","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5c1da6b1cde689baaa2c5d6c5eaed777f2447a88"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/621ace8d93eb322f01416e9a98aac23ac87799e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/621ace8d93eb322f01416e9a98aac23ac87799e3","html_url":"https://github.com/apache/bookkeeper/commit/621ace8d93eb322f01416e9a98aac23ac87799e3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/621ace8d93eb322f01416e9a98aac23ac87799e3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"97c76a36d79d1d96314cd7e832d1dfbd1211965d","url":"https://api.github.com/repos/apache/bookkeeper/commits/97c76a36d79d1d96314cd7e832d1dfbd1211965d","html_url":"https://github.com/apache/bookkeeper/commit/97c76a36d79d1d96314cd7e832d1dfbd1211965d"}],"stats":{"total":125,"additions":120,"deletions":5},"files":[{"sha":"b7424231f64f51b294da55f04ada1e3cf59c709d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/621ace8d93eb322f01416e9a98aac23ac87799e3/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/621ace8d93eb322f01416e9a98aac23ac87799e3/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=621ace8d93eb322f01416e9a98aac23ac87799e3","patch":"@@ -60,6 +60,8 @@ Trunk (unreleased changes)\n  \n         BOOKKEEPER-378: ReplicationWorker may not get ZK watcher notification on UnderReplication ledger lock deletion. (umamaheswararao & ivank via ivank)\n \n+        BOOKKEEPER-380: ZkLedgerUnderreplicationManager.markLedgerUnderreplicated() is adding duplicate missingReplicas while multiple bk failed for the same ledger (rakeshr via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"debff37d04a8940b0383ac28a094a26982c0c0ca","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/621ace8d93eb322f01416e9a98aac23ac87799e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/621ace8d93eb322f01416e9a98aac23ac87799e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=621ace8d93eb322f01416e9a98aac23ac87799e3","patch":"@@ -204,7 +204,7 @@ private String getUrLedgerZnode(long ledgerId) {\n     @Override\n     public void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n             throws ReplicationException.UnavailableException {\n-        LOG.debug(\"markLedgerUnderreplicated {} {}\", ledgerId, missingReplica);\n+        LOG.debug(\"markLedgerUnderreplicated(ledgerId={}, missingReplica={})\", ledgerId, missingReplica);\n         try {\n             String znode = getUrLedgerZnode(ledgerId);\n             while (true) {\n@@ -220,12 +220,11 @@ public void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n                     }\n                     try {\n                         byte[] bytes = zkc.getData(znode, false, s);\n+                        builder.clear();\n                         TextFormat.merge(new String(bytes, UTF8), builder);\n                         UnderreplicatedLedgerFormat data = builder.build();\n-                        for (String r : data.getReplicaList()) {\n-                            if (r.equals(missingReplica)) {\n-                                break; // nothing to add\n-                            }\n+                        if (data.getReplicaList().contains(missingReplica)) {\n+                            return; // nothing to add\n                         }\n                         builder.addReplica(missingReplica);\n                         zkc.setData(znode,"},{"sha":"2daf5e42883a00079307072e0d810c819092d539","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/bookkeeper/blob/621ace8d93eb322f01416e9a98aac23ac87799e3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/621ace8d93eb322f01416e9a98aac23ac87799e3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=621ace8d93eb322f01416e9a98aac23ac87799e3","patch":"@@ -25,7 +25,9 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.nio.charset.Charset;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n@@ -41,15 +43,20 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n+import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.protobuf.TextFormat;\n+\n /**\n  * Test the zookeeper implementation of the ledger replication manager\n  */\n@@ -65,6 +72,9 @@\n     ZooKeeper zkc1 = null;\n     ZooKeeper zkc2 = null;\n \n+    String basePath;\n+    String urLedgerPath;\n+\n     @Before\n     public void setupZooKeeper() throws Exception {\n         zkUtil = new ZooKeeperUtil();\n@@ -78,6 +88,8 @@ public void setupZooKeeper() throws Exception {\n         zkc2 = zkUtil.getNewZooKeeperClient();\n         lmf1 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc1);\n         lmf2 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc2);\n+        basePath = conf.getZkLedgersRootPath() + \"/underreplication\";\n+        urLedgerPath = basePath + \"/ledgers\";\n     }\n \n     @After\n@@ -337,6 +349,18 @@ public void test2reportSame() throws Exception {\n         m1.markLedgerUnderreplicated(ledgerA, missingReplica1);\n         m2.markLedgerUnderreplicated(ledgerA, missingReplica1);\n \n+        // verify duplicate missing replica\n+        UnderreplicatedLedgerFormat.Builder builderA = UnderreplicatedLedgerFormat\n+                .newBuilder();\n+        String znode = getUrLedgerZnode(ledgerA);\n+        byte[] data = zkc1.getData(znode, false, null);\n+        TextFormat.merge(new String(data, Charset.forName(\"UTF-8\")), builderA);\n+        List<String> replicaList = builderA.getReplicaList();\n+        assertEquals(\"Published duplicate missing replica : \" + replicaList, 1,\n+                replicaList.size());\n+        assertTrue(\"Published duplicate missing replica : \" + replicaList,\n+                replicaList.contains(missingReplica1));\n+\n         Future<Long> fA = getLedgerToReplicate(m1);\n         Long lA = fA.get(5, TimeUnit.SECONDS);\n \n@@ -401,6 +425,96 @@ public void run() {\n         latch2.await();\n     }\n \n+    /**\n+     * Test verifies failures of bookies which are resembling each other.\n+     *\n+     * BK servers named like*********************************************\n+     * 1.cluster.com, 2.cluster.com, 11.cluster.com, 12.cluster.com\n+     * *******************************************************************\n+     *\n+     * BKserver IP:HOST like*********************************************\n+     * localhost:3181, localhost:318, localhost:31812\n+     * *******************************************************************\n+     */\n+    @Test\n+    public void testMarkSimilarMissingReplica() throws Exception {\n+        List<String> missingReplica = new ArrayList<String>();\n+        missingReplica.add(\"localhost:3181\");\n+        missingReplica.add(\"localhost:318\");\n+        missingReplica.add(\"localhost:31812\");\n+        missingReplica.add(\"1.cluster.com\");\n+        missingReplica.add(\"2.cluster.com\");\n+        missingReplica.add(\"11.cluster.com\");\n+        missingReplica.add(\"12.cluster.com\");\n+        verifyMarkLedgerUnderreplicated(missingReplica);\n+    }\n+\n+    /**\n+     * Test multiple bookie failures for a ledger and marked as underreplicated\n+     * one after another.\n+     */\n+    @Test\n+    public void testManyFailuresInAnEnsemble() throws Exception {\n+        List<String> missingReplica = new ArrayList<String>();\n+        missingReplica.add(\"localhost:3181\");\n+        missingReplica.add(\"localhost:3182\");\n+        verifyMarkLedgerUnderreplicated(missingReplica);\n+    }\n+\n+    private void verifyMarkLedgerUnderreplicated(Collection<String> missingReplica)\n+            throws KeeperException, InterruptedException,\n+            CompatibilityException, UnavailableException {\n+        Long ledgerA = 0xfeadeefdacL;\n+        String znodeA = getUrLedgerZnode(ledgerA);\n+        LedgerUnderreplicationManager replicaMgr = lmf1\n+                .newLedgerUnderreplicationManager();\n+        for (String replica : missingReplica) {\n+            replicaMgr.markLedgerUnderreplicated(ledgerA, replica);\n+        }\n+\n+        String urLedgerA = getData(znodeA);\n+        UnderreplicatedLedgerFormat.Builder builderA = UnderreplicatedLedgerFormat\n+                .newBuilder();\n+        for (String replica : missingReplica) {\n+            builderA.addReplica(replica);\n+        }\n+        List<String> replicaList = builderA.getReplicaList();\n+\n+        for (String replica : missingReplica) {\n+            assertTrue(\"UrLedger:\" + urLedgerA\n+                    + \" doesn't contain failed bookie :\" + replica, replicaList\n+                    .contains(replica));\n+        }\n+    }\n+\n+    private String getData(String znode) {\n+        try {\n+            byte[] data = zkc1.getData(znode, false, null);\n+            return new String(data);\n+        } catch (KeeperException e) {\n+            LOG.error(\"Exception while reading data from znode :\" + znode);\n+        } catch (InterruptedException e) {\n+            LOG.error(\"Exception while reading data from znode :\" + znode);\n+        }\n+        return \"\";\n+\n+    }\n+\n+    private String getParentZnodePath(String base, long ledgerId) {\n+        String subdir1 = String.format(\"%04x\", ledgerId >> 48 & 0xffff);\n+        String subdir2 = String.format(\"%04x\", ledgerId >> 32 & 0xffff);\n+        String subdir3 = String.format(\"%04x\", ledgerId >> 16 & 0xffff);\n+        String subdir4 = String.format(\"%04x\", ledgerId & 0xffff);\n+\n+        return String.format(\"%s/%s/%s/%s/%s\", base, subdir1, subdir2, subdir3,\n+                subdir4);\n+    }\n+\n+    private String getUrLedgerZnode(long ledgerId) {\n+        return String.format(\"%s/urL%010d\", getParentZnodePath(urLedgerPath,\n+                ledgerId), ledgerId);\n+    }\n+\n     private void takeLedgerAndRelease(final LedgerUnderreplicationManager m,\n             final CountDownLatch latch, int numberOfIterations) {\n         for (int i = 0; i < numberOfIterations; i++) {"}]}

