{"sha":"6379ae858d11bac62a95ccb06675e2bd511f822a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2Mzc5YWU4NThkMTFiYWM2MmE5NWNjYjA2Njc1ZTJiZDUxMWY4MjJh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T17:21:16Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T17:21:16Z"},"message":"BOOKKEEPER-333: server-side message filter (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a9d245a76623807ac38ee524147508e69c732e73","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a9d245a76623807ac38ee524147508e69c732e73"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6379ae858d11bac62a95ccb06675e2bd511f822a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6379ae858d11bac62a95ccb06675e2bd511f822a","html_url":"https://github.com/apache/bookkeeper/commit/6379ae858d11bac62a95ccb06675e2bd511f822a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6379ae858d11bac62a95ccb06675e2bd511f822a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6b44bc232811e379463f71a27293c3f31ed398ba","url":"https://api.github.com/repos/apache/bookkeeper/commits/6b44bc232811e379463f71a27293c3f31ed398ba","html_url":"https://github.com/apache/bookkeeper/commit/6b44bc232811e379463f71a27293c3f31ed398ba"}],"stats":{"total":1910,"additions":1662,"deletions":248},"files":[{"sha":"4d2b18d9995a82e04228525878497fe67af1a90f","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -120,6 +120,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-332: Add SubscriptionPreferences to record all preferences for a subscription (sijie via ivank)\n \n+        BOOKKEEPER-333: server-side message filter (sijie via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"4f3bdb4d93171176947c29553bafdd4095f4ab59","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ReflectionUtils.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ReflectionUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ReflectionUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ReflectionUtils.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -126,4 +126,27 @@\n         }\n         return result;\n     }\n+\n+    /**\n+     * Create an object using the given class name.\n+     *\n+     * @param clsName\n+     *          class name of which an object is created.\n+     * @param xface\n+     *          The interface implemented by the named class.\n+     * @return a new object\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> T newInstance(String clsName, Class<T> xface) {\n+        Class<?> theCls;\n+        try {\n+            theCls = Class.forName(clsName);\n+        } catch (ClassNotFoundException cnfe) {\n+            throw new RuntimeException(cnfe);\n+        }\n+        if (!xface.isAssignableFrom(theCls)) {\n+            throw new RuntimeException(clsName + \" not \" + xface.getName());\n+        }\n+        return newInstance(theCls.asSubclass(xface));\n+    }\n }"},{"sha":"9c5fb3794766e8d168815fad2d1e9f1f0fd69493","filename":"hedwig-client/src/main/cpp/lib/data.cpp","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-client/src/main/cpp/lib/data.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-client/src/main/cpp/lib/data.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.cpp?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -104,6 +104,9 @@ void PubSubData::setPreferencesForSubRequest(SubscribeRequest * subreq,\n   if (options.messagebound() > 0) {\n     preferences->set_messagebound(options.messagebound());\n   }\n+  if (options.has_messagefilter()) {\n+    preferences->set_messagefilter(options.messagefilter());\n+  }\n   if (options.has_options()) {\n     preferences->mutable_options()->CopyFrom(options.options());\n   }"},{"sha":"20f51ff8f5b3cef35a5217793675de562ba5d6fc","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -372,6 +372,11 @@ public void consume(ByteString topic, ByteString subscriberId, MessageSeqId mess\n             preferencesBuilder.setMessageBound(cfg.getSubscriptionMessageBound());\n         }\n \n+        // set message filter\n+        if (options.hasMessageFilter()) {\n+            preferencesBuilder.setMessageFilter(options.getMessageFilter());\n+        }\n+\n         // set user options\n         if (options.hasOptions()) {\n             preferencesBuilder.setOptions(options.getOptions());"},{"sha":"c5c892dc8ce111e1c5cd2f5af1307d20502f8f04","filename":"hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilter.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/filter/MessageFilter.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.filter;\n+\n+import java.io.IOException;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n+\n+public interface MessageFilter {\n+\n+    /**\n+     * Initialize the message filter.\n+     *\n+     * @param conf\n+     *          Configuration Object. An <i>MessageFilter</i> might read settings from it.\n+     * @return message filter\n+     * @throws IOException when failed to initialize message filter\n+     */\n+    public MessageFilter initialize(Configuration conf)\n+    throws ConfigurationException, IOException;\n+\n+    /**\n+     * Uninitialize the message filter.\n+     */\n+    public void uninitialize();\n+\n+    /**\n+     * Set subscription preferences.\n+     *\n+     * <code>preferences</code> of the subscriber will be passed to message filter when\n+     * the message filter attaches to its subscription either in server-side or client-side.\n+     *\n+     * @param topic\n+     *          Topic Name.\n+     * @param subscriberId\n+     *          Subscriber Id.\n+     * @param preferences\n+     *          Subscription Preferences.\n+     * @return message filter\n+     */\n+    public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                                                    SubscriptionPreferences preferences);\n+\n+    /**\n+     * Tests whether a particular message passes the filter or not\n+     *\n+     * @param message\n+     * @return\n+     */\n+    public boolean testMessage(Message message);\n+}"},{"sha":"414b62853cad5b8f39577f581061276334325325","filename":"hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/filter/PipelineFilter.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.filter;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.LinkedList;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.hedwig.filter.MessageFilter;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n+\n+/**\n+ * A filter filters messages in pipeline.\n+ */\n+public class PipelineFilter extends LinkedList<MessageFilter> implements MessageFilter {\n+\n+    @Override\n+    public MessageFilter initialize(Configuration conf)\n+    throws ConfigurationException, IOException {\n+        for (MessageFilter filter : this) {\n+            filter.initialize(conf);\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public void uninitialize() {\n+        while (!isEmpty()) {\n+            MessageFilter filter = removeLast();\n+            filter.uninitialize();\n+        }\n+    }\n+\n+    @Override\n+    public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                                                    SubscriptionPreferences preferences) {\n+        for (MessageFilter filter : this) {\n+            filter.setSubscriptionPreferences(topic, subscriberId, preferences);\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public boolean testMessage(Message message) {\n+        for (MessageFilter filter : this) {\n+            if (!filter.testMessage(message)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+}"},{"sha":"218af1c65e2dcaace9a65ee91ce431588d860f29","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -30,8 +30,13 @@ protected PubSubException(StatusCode code, String msg) {\n         this.code = code;\n     }\n \n-    protected PubSubException(StatusCode code, Exception e) {\n-        super(e);\n+    protected PubSubException(StatusCode code, Throwable t) {\n+        super(t);\n+        this.code = code;\n+    }\n+\n+    protected PubSubException(StatusCode code, String msg, Throwable t) {\n+        super(msg, t);\n         this.code = code;\n     }\n \n@@ -66,6 +71,8 @@ public static PubSubException create(StatusCode code, String msg) {\n             return new NoTopicOwnerInfoException(msg);\n         } else if (code == StatusCode.TOPIC_OWNER_INFO_EXISTS) {\n             return new TopicOwnerInfoExistsException(msg);\n+        } else if (code == StatusCode.INVALID_MESSAGE_FILTER) {\n+            return new InvalidMessageFilterException(msg);\n         }\n         /*\n          * Insert new ones here\n@@ -178,6 +185,16 @@ public TopicOwnerInfoExistsException(String msg) {\n         }\n     }\n \n+    public static class InvalidMessageFilterException extends PubSubException {\n+        public InvalidMessageFilterException(String msg) {\n+            super(StatusCode.INVALID_MESSAGE_FILTER, msg);\n+        }\n+\n+        public InvalidMessageFilterException(String msg, Throwable t) {\n+            super(StatusCode.INVALID_MESSAGE_FILTER, msg, t);\n+        }\n+    }\n+\n     /*\n      * Insert new ones here\n      */\n@@ -192,6 +209,9 @@ public UncertainStateException(String msg) {\n         public UnexpectedConditionException(String msg) {\n             super(StatusCode.UNEXPECTED_CONDITION, msg);\n         }\n+        public UnexpectedConditionException(String msg, Throwable t) {\n+            super(StatusCode.UNEXPECTED_CONDITION, msg, t);\n+        }\n     }\n \n     // The composite exception (for concurrent operations)."},{"sha":"6c2ca5a019bfc40c212739646bc4ff06d283f431","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","status":"modified","additions":982,"deletions":112,"changes":1094,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -167,15 +167,16 @@ private OperationType(int index, int value) {\n     NOT_RESPONSIBLE_FOR_TOPIC(7, 501),\n     SERVICE_DOWN(8, 502),\n     UNCERTAIN_STATE(9, 503),\n-    BAD_VERSION(10, 520),\n-    NO_TOPIC_PERSISTENCE_INFO(11, 521),\n-    TOPIC_PERSISTENCE_INFO_EXISTS(12, 522),\n-    NO_SUBSCRIPTION_STATE(13, 523),\n-    SUBSCRIPTION_STATE_EXISTS(14, 524),\n-    NO_TOPIC_OWNER_INFO(15, 525),\n-    TOPIC_OWNER_INFO_EXISTS(16, 526),\n-    UNEXPECTED_CONDITION(17, 600),\n-    COMPOSITE(18, 700),\n+    INVALID_MESSAGE_FILTER(10, 504),\n+    BAD_VERSION(11, 520),\n+    NO_TOPIC_PERSISTENCE_INFO(12, 521),\n+    TOPIC_PERSISTENCE_INFO_EXISTS(13, 522),\n+    NO_SUBSCRIPTION_STATE(14, 523),\n+    SUBSCRIPTION_STATE_EXISTS(15, 524),\n+    NO_TOPIC_OWNER_INFO(16, 525),\n+    TOPIC_OWNER_INFO_EXISTS(17, 526),\n+    UNEXPECTED_CONDITION(18, 600),\n+    COMPOSITE(19, 700),\n     ;\n     \n     public static final int SUCCESS_VALUE = 0;\n@@ -188,6 +189,7 @@ private OperationType(int index, int value) {\n     public static final int NOT_RESPONSIBLE_FOR_TOPIC_VALUE = 501;\n     public static final int SERVICE_DOWN_VALUE = 502;\n     public static final int UNCERTAIN_STATE_VALUE = 503;\n+    public static final int INVALID_MESSAGE_FILTER_VALUE = 504;\n     public static final int BAD_VERSION_VALUE = 520;\n     public static final int NO_TOPIC_PERSISTENCE_INFO_VALUE = 521;\n     public static final int TOPIC_PERSISTENCE_INFO_EXISTS_VALUE = 522;\n@@ -213,6 +215,7 @@ public static StatusCode valueOf(int value) {\n         case 501: return NOT_RESPONSIBLE_FOR_TOPIC;\n         case 502: return SERVICE_DOWN;\n         case 503: return UNCERTAIN_STATE;\n+        case 504: return INVALID_MESSAGE_FILTER;\n         case 520: return BAD_VERSION;\n         case 521: return NO_TOPIC_PERSISTENCE_INFO;\n         case 522: return TOPIC_PERSISTENCE_INFO_EXISTS;\n@@ -252,7 +255,7 @@ public StatusCode findValueByNumber(int number) {\n     }\n     \n     private static final StatusCode[] VALUES = {\n-      SUCCESS, MALFORMED_REQUEST, NO_SUCH_TOPIC, CLIENT_ALREADY_SUBSCRIBED, CLIENT_NOT_SUBSCRIBED, COULD_NOT_CONNECT, TOPIC_BUSY, NOT_RESPONSIBLE_FOR_TOPIC, SERVICE_DOWN, UNCERTAIN_STATE, BAD_VERSION, NO_TOPIC_PERSISTENCE_INFO, TOPIC_PERSISTENCE_INFO_EXISTS, NO_SUBSCRIPTION_STATE, SUBSCRIPTION_STATE_EXISTS, NO_TOPIC_OWNER_INFO, TOPIC_OWNER_INFO_EXISTS, UNEXPECTED_CONDITION, COMPOSITE, \n+      SUCCESS, MALFORMED_REQUEST, NO_SUCH_TOPIC, CLIENT_ALREADY_SUBSCRIBED, CLIENT_NOT_SUBSCRIBED, COULD_NOT_CONNECT, TOPIC_BUSY, NOT_RESPONSIBLE_FOR_TOPIC, SERVICE_DOWN, UNCERTAIN_STATE, INVALID_MESSAGE_FILTER, BAD_VERSION, NO_TOPIC_PERSISTENCE_INFO, TOPIC_PERSISTENCE_INFO_EXISTS, NO_SUBSCRIPTION_STATE, SUBSCRIPTION_STATE_EXISTS, NO_TOPIC_OWNER_INFO, TOPIC_OWNER_INFO_EXISTS, UNEXPECTED_CONDITION, COMPOSITE, \n     };\n     \n     public static StatusCode valueOf(\n@@ -1261,6 +1264,524 @@ public Builder removeEntries(int index) {\n     // @@protoc_insertion_point(class_scope:Hedwig.Map)\n   }\n   \n+  public interface MessageHeaderOrBuilder\n+      extends com.google.protobuf.MessageOrBuilder {\n+    \n+    // optional .Hedwig.Map properties = 1;\n+    boolean hasProperties();\n+    org.apache.hedwig.protocol.PubSubProtocol.Map getProperties();\n+    org.apache.hedwig.protocol.PubSubProtocol.MapOrBuilder getPropertiesOrBuilder();\n+    \n+    // optional string messageType = 2;\n+    boolean hasMessageType();\n+    String getMessageType();\n+  }\n+  public static final class MessageHeader extends\n+      com.google.protobuf.GeneratedMessage\n+      implements MessageHeaderOrBuilder {\n+    // Use MessageHeader.newBuilder() to construct.\n+    private MessageHeader(Builder builder) {\n+      super(builder);\n+    }\n+    private MessageHeader(boolean noInit) {}\n+    \n+    private static final MessageHeader defaultInstance;\n+    public static MessageHeader getDefaultInstance() {\n+      return defaultInstance;\n+    }\n+    \n+    public MessageHeader getDefaultInstanceForType() {\n+      return defaultInstance;\n+    }\n+    \n+    public static final com.google.protobuf.Descriptors.Descriptor\n+        getDescriptor() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_MessageHeader_descriptor;\n+    }\n+    \n+    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+        internalGetFieldAccessorTable() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_MessageHeader_fieldAccessorTable;\n+    }\n+    \n+    private int bitField0_;\n+    // optional .Hedwig.Map properties = 1;\n+    public static final int PROPERTIES_FIELD_NUMBER = 1;\n+    private org.apache.hedwig.protocol.PubSubProtocol.Map properties_;\n+    public boolean hasProperties() {\n+      return ((bitField0_ & 0x00000001) == 0x00000001);\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.Map getProperties() {\n+      return properties_;\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.MapOrBuilder getPropertiesOrBuilder() {\n+      return properties_;\n+    }\n+    \n+    // optional string messageType = 2;\n+    public static final int MESSAGETYPE_FIELD_NUMBER = 2;\n+    private java.lang.Object messageType_;\n+    public boolean hasMessageType() {\n+      return ((bitField0_ & 0x00000002) == 0x00000002);\n+    }\n+    public String getMessageType() {\n+      java.lang.Object ref = messageType_;\n+      if (ref instanceof String) {\n+        return (String) ref;\n+      } else {\n+        com.google.protobuf.ByteString bs = \n+            (com.google.protobuf.ByteString) ref;\n+        String s = bs.toStringUtf8();\n+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n+          messageType_ = s;\n+        }\n+        return s;\n+      }\n+    }\n+    private com.google.protobuf.ByteString getMessageTypeBytes() {\n+      java.lang.Object ref = messageType_;\n+      if (ref instanceof String) {\n+        com.google.protobuf.ByteString b = \n+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n+        messageType_ = b;\n+        return b;\n+      } else {\n+        return (com.google.protobuf.ByteString) ref;\n+      }\n+    }\n+    \n+    private void initFields() {\n+      properties_ = org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance();\n+      messageType_ = \"\";\n+    }\n+    private byte memoizedIsInitialized = -1;\n+    public final boolean isInitialized() {\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      memoizedIsInitialized = 1;\n+      return true;\n+    }\n+    \n+    public void writeTo(com.google.protobuf.CodedOutputStream output)\n+                        throws java.io.IOException {\n+      getSerializedSize();\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        output.writeMessage(1, properties_);\n+      }\n+      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n+        output.writeBytes(2, getMessageTypeBytes());\n+      }\n+      getUnknownFields().writeTo(output);\n+    }\n+    \n+    private int memoizedSerializedSize = -1;\n+    public int getSerializedSize() {\n+      int size = memoizedSerializedSize;\n+      if (size != -1) return size;\n+    \n+      size = 0;\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeMessageSize(1, properties_);\n+      }\n+      if (((bitField0_ & 0x00000002) == 0x00000002)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(2, getMessageTypeBytes());\n+      }\n+      size += getUnknownFields().getSerializedSize();\n+      memoizedSerializedSize = size;\n+      return size;\n+    }\n+    \n+    private static final long serialVersionUID = 0L;\n+    @java.lang.Override\n+    protected java.lang.Object writeReplace()\n+        throws java.io.ObjectStreamException {\n+      return super.writeReplace();\n+    }\n+    \n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseFrom(\n+        com.google.protobuf.ByteString data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseFrom(\n+        com.google.protobuf.ByteString data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseFrom(byte[] data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseFrom(\n+        byte[] data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseDelimitedFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseDelimitedFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseFrom(\n+        com.google.protobuf.CodedInputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.MessageHeader parseFrom(\n+        com.google.protobuf.CodedInputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    \n+    public static Builder newBuilder() { return Builder.create(); }\n+    public Builder newBuilderForType() { return newBuilder(); }\n+    public static Builder newBuilder(org.apache.hedwig.protocol.PubSubProtocol.MessageHeader prototype) {\n+      return newBuilder().mergeFrom(prototype);\n+    }\n+    public Builder toBuilder() { return newBuilder(this); }\n+    \n+    @java.lang.Override\n+    protected Builder newBuilderForType(\n+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n+      Builder builder = new Builder(parent);\n+      return builder;\n+    }\n+    public static final class Builder extends\n+        com.google.protobuf.GeneratedMessage.Builder<Builder>\n+       implements org.apache.hedwig.protocol.PubSubProtocol.MessageHeaderOrBuilder {\n+      public static final com.google.protobuf.Descriptors.Descriptor\n+          getDescriptor() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_MessageHeader_descriptor;\n+      }\n+      \n+      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+          internalGetFieldAccessorTable() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_MessageHeader_fieldAccessorTable;\n+      }\n+      \n+      // Construct using org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.newBuilder()\n+      private Builder() {\n+        maybeForceBuilderInitialization();\n+      }\n+      \n+      private Builder(BuilderParent parent) {\n+        super(parent);\n+        maybeForceBuilderInitialization();\n+      }\n+      private void maybeForceBuilderInitialization() {\n+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n+          getPropertiesFieldBuilder();\n+        }\n+      }\n+      private static Builder create() {\n+        return new Builder();\n+      }\n+      \n+      public Builder clear() {\n+        super.clear();\n+        if (propertiesBuilder_ == null) {\n+          properties_ = org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance();\n+        } else {\n+          propertiesBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        messageType_ = \"\";\n+        bitField0_ = (bitField0_ & ~0x00000002);\n+        return this;\n+      }\n+      \n+      public Builder clone() {\n+        return create().mergeFrom(buildPartial());\n+      }\n+      \n+      public com.google.protobuf.Descriptors.Descriptor\n+          getDescriptorForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.getDescriptor();\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageHeader getDefaultInstanceForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.getDefaultInstance();\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageHeader build() {\n+        org.apache.hedwig.protocol.PubSubProtocol.MessageHeader result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(result);\n+        }\n+        return result;\n+      }\n+      \n+      private org.apache.hedwig.protocol.PubSubProtocol.MessageHeader buildParsed()\n+          throws com.google.protobuf.InvalidProtocolBufferException {\n+        org.apache.hedwig.protocol.PubSubProtocol.MessageHeader result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(\n+            result).asInvalidProtocolBufferException();\n+        }\n+        return result;\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageHeader buildPartial() {\n+        org.apache.hedwig.protocol.PubSubProtocol.MessageHeader result = new org.apache.hedwig.protocol.PubSubProtocol.MessageHeader(this);\n+        int from_bitField0_ = bitField0_;\n+        int to_bitField0_ = 0;\n+        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n+          to_bitField0_ |= 0x00000001;\n+        }\n+        if (propertiesBuilder_ == null) {\n+          result.properties_ = properties_;\n+        } else {\n+          result.properties_ = propertiesBuilder_.build();\n+        }\n+        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {\n+          to_bitField0_ |= 0x00000002;\n+        }\n+        result.messageType_ = messageType_;\n+        result.bitField0_ = to_bitField0_;\n+        onBuilt();\n+        return result;\n+      }\n+      \n+      public Builder mergeFrom(com.google.protobuf.Message other) {\n+        if (other instanceof org.apache.hedwig.protocol.PubSubProtocol.MessageHeader) {\n+          return mergeFrom((org.apache.hedwig.protocol.PubSubProtocol.MessageHeader)other);\n+        } else {\n+          super.mergeFrom(other);\n+          return this;\n+        }\n+      }\n+      \n+      public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.MessageHeader other) {\n+        if (other == org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.getDefaultInstance()) return this;\n+        if (other.hasProperties()) {\n+          mergeProperties(other.getProperties());\n+        }\n+        if (other.hasMessageType()) {\n+          setMessageType(other.getMessageType());\n+        }\n+        this.mergeUnknownFields(other.getUnknownFields());\n+        return this;\n+      }\n+      \n+      public final boolean isInitialized() {\n+        return true;\n+      }\n+      \n+      public Builder mergeFrom(\n+          com.google.protobuf.CodedInputStream input,\n+          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+          throws java.io.IOException {\n+        com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n+          com.google.protobuf.UnknownFieldSet.newBuilder(\n+            this.getUnknownFields());\n+        while (true) {\n+          int tag = input.readTag();\n+          switch (tag) {\n+            case 0:\n+              this.setUnknownFields(unknownFields.build());\n+              onChanged();\n+              return this;\n+            default: {\n+              if (!parseUnknownField(input, unknownFields,\n+                                     extensionRegistry, tag)) {\n+                this.setUnknownFields(unknownFields.build());\n+                onChanged();\n+                return this;\n+              }\n+              break;\n+            }\n+            case 10: {\n+              org.apache.hedwig.protocol.PubSubProtocol.Map.Builder subBuilder = org.apache.hedwig.protocol.PubSubProtocol.Map.newBuilder();\n+              if (hasProperties()) {\n+                subBuilder.mergeFrom(getProperties());\n+              }\n+              input.readMessage(subBuilder, extensionRegistry);\n+              setProperties(subBuilder.buildPartial());\n+              break;\n+            }\n+            case 18: {\n+              bitField0_ |= 0x00000002;\n+              messageType_ = input.readBytes();\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      \n+      private int bitField0_;\n+      \n+      // optional .Hedwig.Map properties = 1;\n+      private org.apache.hedwig.protocol.PubSubProtocol.Map properties_ = org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance();\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.Map, org.apache.hedwig.protocol.PubSubProtocol.Map.Builder, org.apache.hedwig.protocol.PubSubProtocol.MapOrBuilder> propertiesBuilder_;\n+      public boolean hasProperties() {\n+        return ((bitField0_ & 0x00000001) == 0x00000001);\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.Map getProperties() {\n+        if (propertiesBuilder_ == null) {\n+          return properties_;\n+        } else {\n+          return propertiesBuilder_.getMessage();\n+        }\n+      }\n+      public Builder setProperties(org.apache.hedwig.protocol.PubSubProtocol.Map value) {\n+        if (propertiesBuilder_ == null) {\n+          if (value == null) {\n+            throw new NullPointerException();\n+          }\n+          properties_ = value;\n+          onChanged();\n+        } else {\n+          propertiesBuilder_.setMessage(value);\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder setProperties(\n+          org.apache.hedwig.protocol.PubSubProtocol.Map.Builder builderForValue) {\n+        if (propertiesBuilder_ == null) {\n+          properties_ = builderForValue.build();\n+          onChanged();\n+        } else {\n+          propertiesBuilder_.setMessage(builderForValue.build());\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder mergeProperties(org.apache.hedwig.protocol.PubSubProtocol.Map value) {\n+        if (propertiesBuilder_ == null) {\n+          if (((bitField0_ & 0x00000001) == 0x00000001) &&\n+              properties_ != org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance()) {\n+            properties_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.Map.newBuilder(properties_).mergeFrom(value).buildPartial();\n+          } else {\n+            properties_ = value;\n+          }\n+          onChanged();\n+        } else {\n+          propertiesBuilder_.mergeFrom(value);\n+        }\n+        bitField0_ |= 0x00000001;\n+        return this;\n+      }\n+      public Builder clearProperties() {\n+        if (propertiesBuilder_ == null) {\n+          properties_ = org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance();\n+          onChanged();\n+        } else {\n+          propertiesBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        return this;\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.Map.Builder getPropertiesBuilder() {\n+        bitField0_ |= 0x00000001;\n+        onChanged();\n+        return getPropertiesFieldBuilder().getBuilder();\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.MapOrBuilder getPropertiesOrBuilder() {\n+        if (propertiesBuilder_ != null) {\n+          return propertiesBuilder_.getMessageOrBuilder();\n+        } else {\n+          return properties_;\n+        }\n+      }\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.Map, org.apache.hedwig.protocol.PubSubProtocol.Map.Builder, org.apache.hedwig.protocol.PubSubProtocol.MapOrBuilder> \n+          getPropertiesFieldBuilder() {\n+        if (propertiesBuilder_ == null) {\n+          propertiesBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.Map, org.apache.hedwig.protocol.PubSubProtocol.Map.Builder, org.apache.hedwig.protocol.PubSubProtocol.MapOrBuilder>(\n+                  properties_,\n+                  getParentForChildren(),\n+                  isClean());\n+          properties_ = null;\n+        }\n+        return propertiesBuilder_;\n+      }\n+      \n+      // optional string messageType = 2;\n+      private java.lang.Object messageType_ = \"\";\n+      public boolean hasMessageType() {\n+        return ((bitField0_ & 0x00000002) == 0x00000002);\n+      }\n+      public String getMessageType() {\n+        java.lang.Object ref = messageType_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          messageType_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setMessageType(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000002;\n+        messageType_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearMessageType() {\n+        bitField0_ = (bitField0_ & ~0x00000002);\n+        messageType_ = getDefaultInstance().getMessageType();\n+        onChanged();\n+        return this;\n+      }\n+      void setMessageType(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000002;\n+        messageType_ = value;\n+        onChanged();\n+      }\n+      \n+      // @@protoc_insertion_point(builder_scope:Hedwig.MessageHeader)\n+    }\n+    \n+    static {\n+      defaultInstance = new MessageHeader(true);\n+      defaultInstance.initFields();\n+    }\n+    \n+    // @@protoc_insertion_point(class_scope:Hedwig.MessageHeader)\n+  }\n+  \n   public interface MessageOrBuilder\n       extends com.google.protobuf.MessageOrBuilder {\n     \n@@ -1276,6 +1797,11 @@ public Builder removeEntries(int index) {\n     boolean hasMsgId();\n     org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId getMsgId();\n     org.apache.hedwig.protocol.PubSubProtocol.MessageSeqIdOrBuilder getMsgIdOrBuilder();\n+    \n+    // optional .Hedwig.MessageHeader header = 4;\n+    boolean hasHeader();\n+    org.apache.hedwig.protocol.PubSubProtocol.MessageHeader getHeader();\n+    org.apache.hedwig.protocol.PubSubProtocol.MessageHeaderOrBuilder getHeaderOrBuilder();\n   }\n   public static final class Message extends\n       com.google.protobuf.GeneratedMessage\n@@ -1339,10 +1865,24 @@ public boolean hasMsgId() {\n       return msgId_;\n     }\n     \n+    // optional .Hedwig.MessageHeader header = 4;\n+    public static final int HEADER_FIELD_NUMBER = 4;\n+    private org.apache.hedwig.protocol.PubSubProtocol.MessageHeader header_;\n+    public boolean hasHeader() {\n+      return ((bitField0_ & 0x00000008) == 0x00000008);\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.MessageHeader getHeader() {\n+      return header_;\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.MessageHeaderOrBuilder getHeaderOrBuilder() {\n+      return header_;\n+    }\n+    \n     private void initFields() {\n       body_ = com.google.protobuf.ByteString.EMPTY;\n       srcRegion_ = com.google.protobuf.ByteString.EMPTY;\n       msgId_ = org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.getDefaultInstance();\n+      header_ = org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.getDefaultInstance();\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -1375,6 +1915,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n       if (((bitField0_ & 0x00000004) == 0x00000004)) {\n         output.writeMessage(3, msgId_);\n       }\n+      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n+        output.writeMessage(4, header_);\n+      }\n       getUnknownFields().writeTo(output);\n     }\n     \n@@ -1396,6 +1939,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeMessageSize(3, msgId_);\n       }\n+      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeMessageSize(4, header_);\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -1513,6 +2060,7 @@ private Builder(BuilderParent parent) {\n       private void maybeForceBuilderInitialization() {\n         if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n           getMsgIdFieldBuilder();\n+          getHeaderFieldBuilder();\n         }\n       }\n       private static Builder create() {\n@@ -1531,6 +2079,12 @@ public Builder clear() {\n           msgIdBuilder_.clear();\n         }\n         bitField0_ = (bitField0_ & ~0x00000004);\n+        if (headerBuilder_ == null) {\n+          header_ = org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.getDefaultInstance();\n+        } else {\n+          headerBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000008);\n         return this;\n       }\n       \n@@ -1585,6 +2139,14 @@ public Builder clone() {\n         } else {\n           result.msgId_ = msgIdBuilder_.build();\n         }\n+        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {\n+          to_bitField0_ |= 0x00000008;\n+        }\n+        if (headerBuilder_ == null) {\n+          result.header_ = header_;\n+        } else {\n+          result.header_ = headerBuilder_.build();\n+        }\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -1610,6 +2172,9 @@ public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.Message other\n         if (other.hasMsgId()) {\n           mergeMsgId(other.getMsgId());\n         }\n+        if (other.hasHeader()) {\n+          mergeHeader(other.getHeader());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -1670,6 +2235,15 @@ public Builder mergeFrom(\n               setMsgId(subBuilder.buildPartial());\n               break;\n             }\n+            case 34: {\n+              org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.Builder subBuilder = org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.newBuilder();\n+              if (hasHeader()) {\n+                subBuilder.mergeFrom(getHeader());\n+              }\n+              input.readMessage(subBuilder, extensionRegistry);\n+              setHeader(subBuilder.buildPartial());\n+              break;\n+            }\n           }\n         }\n       }\n@@ -1814,6 +2388,96 @@ public Builder clearMsgId() {\n         return msgIdBuilder_;\n       }\n       \n+      // optional .Hedwig.MessageHeader header = 4;\n+      private org.apache.hedwig.protocol.PubSubProtocol.MessageHeader header_ = org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.getDefaultInstance();\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.MessageHeader, org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageHeaderOrBuilder> headerBuilder_;\n+      public boolean hasHeader() {\n+        return ((bitField0_ & 0x00000008) == 0x00000008);\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageHeader getHeader() {\n+        if (headerBuilder_ == null) {\n+          return header_;\n+        } else {\n+          return headerBuilder_.getMessage();\n+        }\n+      }\n+      public Builder setHeader(org.apache.hedwig.protocol.PubSubProtocol.MessageHeader value) {\n+        if (headerBuilder_ == null) {\n+          if (value == null) {\n+            throw new NullPointerException();\n+          }\n+          header_ = value;\n+          onChanged();\n+        } else {\n+          headerBuilder_.setMessage(value);\n+        }\n+        bitField0_ |= 0x00000008;\n+        return this;\n+      }\n+      public Builder setHeader(\n+          org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.Builder builderForValue) {\n+        if (headerBuilder_ == null) {\n+          header_ = builderForValue.build();\n+          onChanged();\n+        } else {\n+          headerBuilder_.setMessage(builderForValue.build());\n+        }\n+        bitField0_ |= 0x00000008;\n+        return this;\n+      }\n+      public Builder mergeHeader(org.apache.hedwig.protocol.PubSubProtocol.MessageHeader value) {\n+        if (headerBuilder_ == null) {\n+          if (((bitField0_ & 0x00000008) == 0x00000008) &&\n+              header_ != org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.getDefaultInstance()) {\n+            header_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.newBuilder(header_).mergeFrom(value).buildPartial();\n+          } else {\n+            header_ = value;\n+          }\n+          onChanged();\n+        } else {\n+          headerBuilder_.mergeFrom(value);\n+        }\n+        bitField0_ |= 0x00000008;\n+        return this;\n+      }\n+      public Builder clearHeader() {\n+        if (headerBuilder_ == null) {\n+          header_ = org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.getDefaultInstance();\n+          onChanged();\n+        } else {\n+          headerBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00000008);\n+        return this;\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.Builder getHeaderBuilder() {\n+        bitField0_ |= 0x00000008;\n+        onChanged();\n+        return getHeaderFieldBuilder().getBuilder();\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.MessageHeaderOrBuilder getHeaderOrBuilder() {\n+        if (headerBuilder_ != null) {\n+          return headerBuilder_.getMessageOrBuilder();\n+        } else {\n+          return header_;\n+        }\n+      }\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.MessageHeader, org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageHeaderOrBuilder> \n+          getHeaderFieldBuilder() {\n+        if (headerBuilder_ == null) {\n+          headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.MessageHeader, org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.Builder, org.apache.hedwig.protocol.PubSubProtocol.MessageHeaderOrBuilder>(\n+                  header_,\n+                  getParentForChildren(),\n+                  isClean());\n+          header_ = null;\n+        }\n+        return headerBuilder_;\n+      }\n+      \n       // @@protoc_insertion_point(builder_scope:Hedwig.Message)\n     }\n     \n@@ -4967,6 +5631,10 @@ public Builder clearMsg() {\n     // optional uint32 messageBound = 2;\n     boolean hasMessageBound();\n     int getMessageBound();\n+    \n+    // optional string messageFilter = 3;\n+    boolean hasMessageFilter();\n+    String getMessageFilter();\n   }\n   public static final class SubscriptionPreferences extends\n       com.google.protobuf.GeneratedMessage\n@@ -5020,9 +5688,42 @@ public int getMessageBound() {\n       return messageBound_;\n     }\n     \n+    // optional string messageFilter = 3;\n+    public static final int MESSAGEFILTER_FIELD_NUMBER = 3;\n+    private java.lang.Object messageFilter_;\n+    public boolean hasMessageFilter() {\n+      return ((bitField0_ & 0x00000004) == 0x00000004);\n+    }\n+    public String getMessageFilter() {\n+      java.lang.Object ref = messageFilter_;\n+      if (ref instanceof String) {\n+        return (String) ref;\n+      } else {\n+        com.google.protobuf.ByteString bs = \n+            (com.google.protobuf.ByteString) ref;\n+        String s = bs.toStringUtf8();\n+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n+          messageFilter_ = s;\n+        }\n+        return s;\n+      }\n+    }\n+    private com.google.protobuf.ByteString getMessageFilterBytes() {\n+      java.lang.Object ref = messageFilter_;\n+      if (ref instanceof String) {\n+        com.google.protobuf.ByteString b = \n+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n+        messageFilter_ = b;\n+        return b;\n+      } else {\n+        return (com.google.protobuf.ByteString) ref;\n+      }\n+    }\n+    \n     private void initFields() {\n       options_ = org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance();\n       messageBound_ = 0;\n+      messageFilter_ = \"\";\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -5042,6 +5743,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n       if (((bitField0_ & 0x00000002) == 0x00000002)) {\n         output.writeUInt32(2, messageBound_);\n       }\n+      if (((bitField0_ & 0x00000004) == 0x00000004)) {\n+        output.writeBytes(3, getMessageFilterBytes());\n+      }\n       getUnknownFields().writeTo(output);\n     }\n     \n@@ -5059,6 +5763,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeUInt32Size(2, messageBound_);\n       }\n+      if (((bitField0_ & 0x00000004) == 0x00000004)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(3, getMessageFilterBytes());\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -5192,6 +5900,8 @@ public Builder clear() {\n         bitField0_ = (bitField0_ & ~0x00000001);\n         messageBound_ = 0;\n         bitField0_ = (bitField0_ & ~0x00000002);\n+        messageFilter_ = \"\";\n+        bitField0_ = (bitField0_ & ~0x00000004);\n         return this;\n       }\n       \n@@ -5242,6 +5952,10 @@ public Builder clone() {\n           to_bitField0_ |= 0x00000002;\n         }\n         result.messageBound_ = messageBound_;\n+        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {\n+          to_bitField0_ |= 0x00000004;\n+        }\n+        result.messageFilter_ = messageFilter_;\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -5264,6 +5978,9 @@ public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.SubscriptionP\n         if (other.hasMessageBound()) {\n           setMessageBound(other.getMessageBound());\n         }\n+        if (other.hasMessageFilter()) {\n+          setMessageFilter(other.getMessageFilter());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -5309,6 +6026,11 @@ public Builder mergeFrom(\n               messageBound_ = input.readUInt32();\n               break;\n             }\n+            case 26: {\n+              bitField0_ |= 0x00000004;\n+              messageFilter_ = input.readBytes();\n+              break;\n+            }\n           }\n         }\n       }\n@@ -5426,6 +6148,42 @@ public Builder clearMessageBound() {\n         return this;\n       }\n       \n+      // optional string messageFilter = 3;\n+      private java.lang.Object messageFilter_ = \"\";\n+      public boolean hasMessageFilter() {\n+        return ((bitField0_ & 0x00000004) == 0x00000004);\n+      }\n+      public String getMessageFilter() {\n+        java.lang.Object ref = messageFilter_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          messageFilter_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setMessageFilter(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000004;\n+        messageFilter_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearMessageFilter() {\n+        bitField0_ = (bitField0_ & ~0x00000004);\n+        messageFilter_ = getDefaultInstance().getMessageFilter();\n+        onChanged();\n+        return this;\n+      }\n+      void setMessageFilter(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000004;\n+        messageFilter_ = value;\n+        onChanged();\n+      }\n+      \n       // @@protoc_insertion_point(builder_scope:Hedwig.SubscriptionPreferences)\n     }\n     \n@@ -6196,6 +6954,10 @@ public Builder clearPreferences() {\n     boolean hasOptions();\n     org.apache.hedwig.protocol.PubSubProtocol.Map getOptions();\n     org.apache.hedwig.protocol.PubSubProtocol.MapOrBuilder getOptionsOrBuilder();\n+    \n+    // optional string messageFilter = 5;\n+    boolean hasMessageFilter();\n+    String getMessageFilter();\n   }\n   public static final class SubscriptionOptions extends\n       com.google.protobuf.GeneratedMessage\n@@ -6259,10 +7021,43 @@ public boolean hasOptions() {\n       return options_;\n     }\n     \n+    // optional string messageFilter = 5;\n+    public static final int MESSAGEFILTER_FIELD_NUMBER = 5;\n+    private java.lang.Object messageFilter_;\n+    public boolean hasMessageFilter() {\n+      return ((bitField0_ & 0x00000008) == 0x00000008);\n+    }\n+    public String getMessageFilter() {\n+      java.lang.Object ref = messageFilter_;\n+      if (ref instanceof String) {\n+        return (String) ref;\n+      } else {\n+        com.google.protobuf.ByteString bs = \n+            (com.google.protobuf.ByteString) ref;\n+        String s = bs.toStringUtf8();\n+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n+          messageFilter_ = s;\n+        }\n+        return s;\n+      }\n+    }\n+    private com.google.protobuf.ByteString getMessageFilterBytes() {\n+      java.lang.Object ref = messageFilter_;\n+      if (ref instanceof String) {\n+        com.google.protobuf.ByteString b = \n+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n+        messageFilter_ = b;\n+        return b;\n+      } else {\n+        return (com.google.protobuf.ByteString) ref;\n+      }\n+    }\n+    \n     private void initFields() {\n       createOrAttach_ = org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.CREATE_OR_ATTACH;\n       messageBound_ = 0;\n       options_ = org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance();\n+      messageFilter_ = \"\";\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -6285,6 +7080,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n       if (((bitField0_ & 0x00000004) == 0x00000004)) {\n         output.writeMessage(4, options_);\n       }\n+      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n+        output.writeBytes(5, getMessageFilterBytes());\n+      }\n       getUnknownFields().writeTo(output);\n     }\n     \n@@ -6306,6 +7104,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeMessageSize(4, options_);\n       }\n+      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(5, getMessageFilterBytes());\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -6441,6 +7243,8 @@ public Builder clear() {\n           optionsBuilder_.clear();\n         }\n         bitField0_ = (bitField0_ & ~0x00000004);\n+        messageFilter_ = \"\";\n+        bitField0_ = (bitField0_ & ~0x00000008);\n         return this;\n       }\n       \n@@ -6495,6 +7299,10 @@ public Builder clone() {\n         } else {\n           result.options_ = optionsBuilder_.build();\n         }\n+        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {\n+          to_bitField0_ |= 0x00000008;\n+        }\n+        result.messageFilter_ = messageFilter_;\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -6520,6 +7328,9 @@ public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.SubscriptionO\n         if (other.hasOptions()) {\n           mergeOptions(other.getOptions());\n         }\n+        if (other.hasMessageFilter()) {\n+          setMessageFilter(other.getMessageFilter());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -6576,6 +7387,11 @@ public Builder mergeFrom(\n               setOptions(subBuilder.buildPartial());\n               break;\n             }\n+            case 42: {\n+              bitField0_ |= 0x00000008;\n+              messageFilter_ = input.readBytes();\n+              break;\n+            }\n           }\n         }\n       }\n@@ -6717,6 +7533,42 @@ public Builder clearOptions() {\n         return optionsBuilder_;\n       }\n       \n+      // optional string messageFilter = 5;\n+      private java.lang.Object messageFilter_ = \"\";\n+      public boolean hasMessageFilter() {\n+        return ((bitField0_ & 0x00000008) == 0x00000008);\n+      }\n+      public String getMessageFilter() {\n+        java.lang.Object ref = messageFilter_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          messageFilter_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setMessageFilter(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000008;\n+        messageFilter_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearMessageFilter() {\n+        bitField0_ = (bitField0_ & ~0x00000008);\n+        messageFilter_ = getDefaultInstance().getMessageFilter();\n+        onChanged();\n+        return this;\n+      }\n+      void setMessageFilter(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000008;\n+        messageFilter_ = value;\n+        onChanged();\n+      }\n+      \n       // @@protoc_insertion_point(builder_scope:Hedwig.SubscriptionOptions)\n     }\n     \n@@ -13569,6 +14421,11 @@ public Builder clearNumTopics() {\n   private static\n     com.google.protobuf.GeneratedMessage.FieldAccessorTable\n       internal_static_Hedwig_Map_Entry_fieldAccessorTable;\n+  private static com.google.protobuf.Descriptors.Descriptor\n+    internal_static_Hedwig_MessageHeader_descriptor;\n+  private static\n+    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+      internal_static_Hedwig_MessageHeader_fieldAccessorTable;\n   private static com.google.protobuf.Descriptors.Descriptor\n     internal_static_Hedwig_Message_descriptor;\n   private static\n@@ -13691,83 +14548,88 @@ public Builder clearNumTopics() {\n       \"\\n&src/main/protobuf/PubSubProtocol.proto\" +\n       \"\\022\\006Hedwig\\\"N\\n\\003Map\\022\\\"\\n\\007entries\\030\\001 \\003(\\0132\\021.Hedwi\" +\n       \"g.Map.Entry\\032#\\n\\005Entry\\022\\013\\n\\003key\\030\\001 \\001(\\t\\022\\r\\n\\005val\" +\n-      \"ue\\030\\002 \\001(\\014\\\"O\\n\\007Message\\022\\014\\n\\004body\\030\\001 \\002(\\014\\022\\021\\n\\tsrc\" +\n-      \"Region\\030\\002 \\001(\\014\\022#\\n\\005msgId\\030\\003 \\001(\\0132\\024.Hedwig.Mes\" +\n-      \"sageSeqId\\\"4\\n\\023RegionSpecificSeqId\\022\\016\\n\\006regi\" +\n-      \"on\\030\\001 \\002(\\014\\022\\r\\n\\005seqId\\030\\002 \\002(\\004\\\"]\\n\\014MessageSeqId\\022\" +\n-      \"\\026\\n\\016localComponent\\030\\001 \\001(\\004\\0225\\n\\020remoteCompone\" +\n-      \"nts\\030\\002 \\003(\\0132\\033.Hedwig.RegionSpecificSeqId\\\"\\361\" +\n-      \"\\003\\n\\rPubSubRequest\\0220\\n\\017protocolVersion\\030\\001 \\002(\",\n-      \"\\0162\\027.Hedwig.ProtocolVersion\\022#\\n\\004type\\030\\002 \\002(\\016\" +\n-      \"2\\025.Hedwig.OperationType\\022\\024\\n\\014triedServers\\030\" +\n-      \"\\003 \\003(\\014\\022\\r\\n\\005txnId\\030\\004 \\002(\\004\\022\\023\\n\\013shouldClaim\\030\\005 \\001(\" +\n-      \"\\010\\022\\r\\n\\005topic\\030\\006 \\002(\\014\\022.\\n\\016publishRequest\\0304 \\001(\\013\" +\n-      \"2\\026.Hedwig.PublishRequest\\0222\\n\\020subscribeReq\" +\n-      \"uest\\0305 \\001(\\0132\\030.Hedwig.SubscribeRequest\\022.\\n\\016\" +\n-      \"consumeRequest\\0306 \\001(\\0132\\026.Hedwig.ConsumeReq\" +\n-      \"uest\\0226\\n\\022unsubscribeRequest\\0307 \\001(\\0132\\032.Hedwi\" +\n-      \"g.UnsubscribeRequest\\0228\\n\\023stopDeliveryRequ\" +\n-      \"est\\0308 \\001(\\0132\\033.Hedwig.StopDeliveryRequest\\022:\",\n-      \"\\n\\024startDeliveryRequest\\0309 \\001(\\0132\\034.Hedwig.St\" +\n-      \"artDeliveryRequest\\\".\\n\\016PublishRequest\\022\\034\\n\\003\" +\n-      \"msg\\030\\002 \\002(\\0132\\017.Hedwig.Message\\\"M\\n\\027Subscripti\" +\n-      \"onPreferences\\022\\034\\n\\007options\\030\\001 \\001(\\0132\\013.Hedwig.\" +\n-      \"Map\\022\\024\\n\\014messageBound\\030\\002 \\001(\\r\\\"\\243\\002\\n\\020SubscribeR\" +\n-      \"equest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\022Q\\n\\016createOr\" +\n-      \"Attach\\030\\003 \\001(\\0162\\'.Hedwig.SubscribeRequest.C\" +\n-      \"reateOrAttach:\\020CREATE_OR_ATTACH\\022\\032\\n\\013synch\" +\n-      \"ronous\\030\\004 \\001(\\010:\\005false\\022\\024\\n\\014messageBound\\030\\005 \\001(\" +\n-      \"\\r\\0224\\n\\013preferences\\030\\006 \\001(\\0132\\037.Hedwig.Subscrip\",\n-      \"tionPreferences\\\">\\n\\016CreateOrAttach\\022\\n\\n\\006CRE\" +\n-      \"ATE\\020\\000\\022\\n\\n\\006ATTACH\\020\\001\\022\\024\\n\\020CREATE_OR_ATTACH\\020\\002\\\"\" +\n-      \"\\237\\001\\n\\023SubscriptionOptions\\022Q\\n\\016createOrAttac\" +\n-      \"h\\030\\002 \\001(\\0162\\'.Hedwig.SubscribeRequest.Create\" +\n-      \"OrAttach:\\020CREATE_OR_ATTACH\\022\\027\\n\\014messageBou\" +\n-      \"nd\\030\\003 \\001(\\r:\\0010\\022\\034\\n\\007options\\030\\004 \\001(\\0132\\013.Hedwig.Ma\" +\n-      \"p\\\"K\\n\\016ConsumeRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\" +\n-      \"\\014\\022#\\n\\005msgId\\030\\003 \\002(\\0132\\024.Hedwig.MessageSeqId\\\"*\" +\n-      \"\\n\\022UnsubscribeRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002\" +\n-      \"(\\014\\\"+\\n\\023StopDeliveryRequest\\022\\024\\n\\014subscriberI\",\n-      \"d\\030\\002 \\002(\\014\\\",\\n\\024StartDeliveryRequest\\022\\024\\n\\014subsc\" +\n-      \"riberId\\030\\002 \\002(\\014\\\"\\377\\001\\n\\016PubSubResponse\\0220\\n\\017prot\" +\n-      \"ocolVersion\\030\\001 \\002(\\0162\\027.Hedwig.ProtocolVersi\" +\n-      \"on\\022&\\n\\nstatusCode\\030\\002 \\002(\\0162\\022.Hedwig.StatusCo\" +\n-      \"de\\022\\r\\n\\005txnId\\030\\003 \\002(\\004\\022\\021\\n\\tstatusMsg\\030\\004 \\001(\\t\\022 \\n\\007\" +\n-      \"message\\030\\005 \\001(\\0132\\017.Hedwig.Message\\022\\r\\n\\005topic\\030\" +\n-      \"\\006 \\001(\\014\\022\\024\\n\\014subscriberId\\030\\007 \\001(\\014\\022*\\n\\014responseB\" +\n-      \"ody\\030\\010 \\001(\\0132\\024.Hedwig.ResponseBody\\\"?\\n\\017Publi\" +\n-      \"shResponse\\022,\\n\\016publishedMsgId\\030\\001 \\002(\\0132\\024.Hed\" +\n-      \"wig.MessageSeqId\\\"@\\n\\014ResponseBody\\0220\\n\\017publ\",\n-      \"ishResponse\\030\\001 \\001(\\0132\\027.Hedwig.PublishRespon\" +\n-      \"se\\\"N\\n\\021SubscriptionState\\022#\\n\\005msgId\\030\\001 \\002(\\0132\\024\" +\n-      \".Hedwig.MessageSeqId\\022\\024\\n\\014messageBound\\030\\002 \\001\" +\n-      \"(\\r\\\"r\\n\\020SubscriptionData\\022(\\n\\005state\\030\\001 \\001(\\0132\\031.\" +\n-      \"Hedwig.SubscriptionState\\0224\\n\\013preferences\\030\" +\n-      \"\\002 \\001(\\0132\\037.Hedwig.SubscriptionPreferences\\\"O\" +\n-      \"\\n\\013LedgerRange\\022\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020endSe\" +\n-      \"qIdIncluded\\030\\002 \\001(\\0132\\024.Hedwig.MessageSeqId\\\"\" +\n-      \"3\\n\\014LedgerRanges\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.Hedwig\" +\n-      \".LedgerRange\\\":\\n\\013ManagerMeta\\022\\023\\n\\013managerIm\",\n-      \"pl\\030\\002 \\002(\\t\\022\\026\\n\\016managerVersion\\030\\003 \\002(\\r\\\".\\n\\013HubI\" +\n-      \"nfoData\\022\\020\\n\\010hostname\\030\\002 \\002(\\t\\022\\r\\n\\005czxid\\030\\003 \\002(\\004\" +\n-      \"\\\" \\n\\013HubLoadData\\022\\021\\n\\tnumTopics\\030\\002 \\002(\\004*\\\"\\n\\017Pr\" +\n-      \"otocolVersion\\022\\017\\n\\013VERSION_ONE\\020\\001*p\\n\\rOperat\" +\n-      \"ionType\\022\\013\\n\\007PUBLISH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\\022\\013\\n\\007C\" +\n-      \"ONSUME\\020\\002\\022\\017\\n\\013UNSUBSCRIBE\\020\\003\\022\\022\\n\\016START_DELIV\" +\n-      \"ERY\\020\\004\\022\\021\\n\\rSTOP_DELIVERY\\020\\005*\\350\\003\\n\\nStatusCode\\022\" +\n-      \"\\013\\n\\007SUCCESS\\020\\000\\022\\026\\n\\021MALFORMED_REQUEST\\020\\221\\003\\022\\022\\n\\r\" +\n-      \"NO_SUCH_TOPIC\\020\\222\\003\\022\\036\\n\\031CLIENT_ALREADY_SUBSC\" +\n-      \"RIBED\\020\\223\\003\\022\\032\\n\\025CLIENT_NOT_SUBSCRIBED\\020\\224\\003\\022\\026\\n\\021\",\n-      \"COULD_NOT_CONNECT\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\\226\\003\\022\\036\\n\" +\n-      \"\\031NOT_RESPONSIBLE_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SERVICE\" +\n-      \"_DOWN\\020\\366\\003\\022\\024\\n\\017UNCERTAIN_STATE\\020\\367\\003\\022\\020\\n\\013BAD_VE\" +\n-      \"RSION\\020\\210\\004\\022\\036\\n\\031NO_TOPIC_PERSISTENCE_INFO\\020\\211\\004\" +\n-      \"\\022\\\"\\n\\035TOPIC_PERSISTENCE_INFO_EXISTS\\020\\212\\004\\022\\032\\n\\025\" +\n-      \"NO_SUBSCRIPTION_STATE\\020\\213\\004\\022\\036\\n\\031SUBSCRIPTION\" +\n-      \"_STATE_EXISTS\\020\\214\\004\\022\\030\\n\\023NO_TOPIC_OWNER_INFO\\020\" +\n-      \"\\215\\004\\022\\034\\n\\027TOPIC_OWNER_INFO_EXISTS\\020\\216\\004\\022\\031\\n\\024UNEX\" +\n-      \"PECTED_CONDITION\\020\\330\\004\\022\\016\\n\\tCOMPOSITE\\020\\274\\005B\\036\\n\\032o\" +\n-      \"rg.apache.hedwig.protocolH\\001\"\n+      \"ue\\030\\002 \\001(\\014\\\"E\\n\\rMessageHeader\\022\\037\\n\\nproperties\\030\" +\n+      \"\\001 \\001(\\0132\\013.Hedwig.Map\\022\\023\\n\\013messageType\\030\\002 \\001(\\t\\\"\" +\n+      \"v\\n\\007Message\\022\\014\\n\\004body\\030\\001 \\002(\\014\\022\\021\\n\\tsrcRegion\\030\\002 \" +\n+      \"\\001(\\014\\022#\\n\\005msgId\\030\\003 \\001(\\0132\\024.Hedwig.MessageSeqId\" +\n+      \"\\022%\\n\\006header\\030\\004 \\001(\\0132\\025.Hedwig.MessageHeader\\\"\" +\n+      \"4\\n\\023RegionSpecificSeqId\\022\\016\\n\\006region\\030\\001 \\002(\\014\\022\\r\" +\n+      \"\\n\\005seqId\\030\\002 \\002(\\004\\\"]\\n\\014MessageSeqId\\022\\026\\n\\016localCo\",\n+      \"mponent\\030\\001 \\001(\\004\\0225\\n\\020remoteComponents\\030\\002 \\003(\\0132\" +\n+      \"\\033.Hedwig.RegionSpecificSeqId\\\"\\361\\003\\n\\rPubSubR\" +\n+      \"equest\\0220\\n\\017protocolVersion\\030\\001 \\002(\\0162\\027.Hedwig\" +\n+      \".ProtocolVersion\\022#\\n\\004type\\030\\002 \\002(\\0162\\025.Hedwig.\" +\n+      \"OperationType\\022\\024\\n\\014triedServers\\030\\003 \\003(\\014\\022\\r\\n\\005t\" +\n+      \"xnId\\030\\004 \\002(\\004\\022\\023\\n\\013shouldClaim\\030\\005 \\001(\\010\\022\\r\\n\\005topic\" +\n+      \"\\030\\006 \\002(\\014\\022.\\n\\016publishRequest\\0304 \\001(\\0132\\026.Hedwig.\" +\n+      \"PublishRequest\\0222\\n\\020subscribeRequest\\0305 \\001(\\013\" +\n+      \"2\\030.Hedwig.SubscribeRequest\\022.\\n\\016consumeReq\" +\n+      \"uest\\0306 \\001(\\0132\\026.Hedwig.ConsumeRequest\\0226\\n\\022un\",\n+      \"subscribeRequest\\0307 \\001(\\0132\\032.Hedwig.Unsubscr\" +\n+      \"ibeRequest\\0228\\n\\023stopDeliveryRequest\\0308 \\001(\\0132\" +\n+      \"\\033.Hedwig.StopDeliveryRequest\\022:\\n\\024startDel\" +\n+      \"iveryRequest\\0309 \\001(\\0132\\034.Hedwig.StartDeliver\" +\n+      \"yRequest\\\".\\n\\016PublishRequest\\022\\034\\n\\003msg\\030\\002 \\002(\\0132\" +\n+      \"\\017.Hedwig.Message\\\"d\\n\\027SubscriptionPreferen\" +\n+      \"ces\\022\\034\\n\\007options\\030\\001 \\001(\\0132\\013.Hedwig.Map\\022\\024\\n\\014mes\" +\n+      \"sageBound\\030\\002 \\001(\\r\\022\\025\\n\\rmessageFilter\\030\\003 \\001(\\t\\\"\\243\" +\n+      \"\\002\\n\\020SubscribeRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\" +\n+      \"\\014\\022Q\\n\\016createOrAttach\\030\\003 \\001(\\0162\\'.Hedwig.Subsc\",\n+      \"ribeRequest.CreateOrAttach:\\020CREATE_OR_AT\" +\n+      \"TACH\\022\\032\\n\\013synchronous\\030\\004 \\001(\\010:\\005false\\022\\024\\n\\014mess\" +\n+      \"ageBound\\030\\005 \\001(\\r\\0224\\n\\013preferences\\030\\006 \\001(\\0132\\037.He\" +\n+      \"dwig.SubscriptionPreferences\\\">\\n\\016CreateOr\" +\n+      \"Attach\\022\\n\\n\\006CREATE\\020\\000\\022\\n\\n\\006ATTACH\\020\\001\\022\\024\\n\\020CREATE\" +\n+      \"_OR_ATTACH\\020\\002\\\"\\266\\001\\n\\023SubscriptionOptions\\022Q\\n\\016\" +\n+      \"createOrAttach\\030\\002 \\001(\\0162\\'.Hedwig.SubscribeR\" +\n+      \"equest.CreateOrAttach:\\020CREATE_OR_ATTACH\\022\" +\n+      \"\\027\\n\\014messageBound\\030\\003 \\001(\\r:\\0010\\022\\034\\n\\007options\\030\\004 \\001(\" +\n+      \"\\0132\\013.Hedwig.Map\\022\\025\\n\\rmessageFilter\\030\\005 \\001(\\t\\\"K\\n\",\n+      \"\\016ConsumeRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\022#\\n\" +\n+      \"\\005msgId\\030\\003 \\002(\\0132\\024.Hedwig.MessageSeqId\\\"*\\n\\022Un\" +\n+      \"subscribeRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\\"+\" +\n+      \"\\n\\023StopDeliveryRequest\\022\\024\\n\\014subscriberId\\030\\002 \" +\n+      \"\\002(\\014\\\",\\n\\024StartDeliveryRequest\\022\\024\\n\\014subscribe\" +\n+      \"rId\\030\\002 \\002(\\014\\\"\\377\\001\\n\\016PubSubResponse\\0220\\n\\017protocol\" +\n+      \"Version\\030\\001 \\002(\\0162\\027.Hedwig.ProtocolVersion\\022&\" +\n+      \"\\n\\nstatusCode\\030\\002 \\002(\\0162\\022.Hedwig.StatusCode\\022\\r\" +\n+      \"\\n\\005txnId\\030\\003 \\002(\\004\\022\\021\\n\\tstatusMsg\\030\\004 \\001(\\t\\022 \\n\\007mess\" +\n+      \"age\\030\\005 \\001(\\0132\\017.Hedwig.Message\\022\\r\\n\\005topic\\030\\006 \\001(\",\n+      \"\\014\\022\\024\\n\\014subscriberId\\030\\007 \\001(\\014\\022*\\n\\014responseBody\\030\" +\n+      \"\\010 \\001(\\0132\\024.Hedwig.ResponseBody\\\"?\\n\\017PublishRe\" +\n+      \"sponse\\022,\\n\\016publishedMsgId\\030\\001 \\002(\\0132\\024.Hedwig.\" +\n+      \"MessageSeqId\\\"@\\n\\014ResponseBody\\0220\\n\\017publishR\" +\n+      \"esponse\\030\\001 \\001(\\0132\\027.Hedwig.PublishResponse\\\"N\" +\n+      \"\\n\\021SubscriptionState\\022#\\n\\005msgId\\030\\001 \\002(\\0132\\024.Hed\" +\n+      \"wig.MessageSeqId\\022\\024\\n\\014messageBound\\030\\002 \\001(\\r\\\"r\" +\n+      \"\\n\\020SubscriptionData\\022(\\n\\005state\\030\\001 \\001(\\0132\\031.Hedw\" +\n+      \"ig.SubscriptionState\\0224\\n\\013preferences\\030\\002 \\001(\" +\n+      \"\\0132\\037.Hedwig.SubscriptionPreferences\\\"O\\n\\013Le\",\n+      \"dgerRange\\022\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020endSeqIdI\" +\n+      \"ncluded\\030\\002 \\001(\\0132\\024.Hedwig.MessageSeqId\\\"3\\n\\014L\" +\n+      \"edgerRanges\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.Hedwig.Led\" +\n+      \"gerRange\\\":\\n\\013ManagerMeta\\022\\023\\n\\013managerImpl\\030\\002\" +\n+      \" \\002(\\t\\022\\026\\n\\016managerVersion\\030\\003 \\002(\\r\\\".\\n\\013HubInfoD\" +\n+      \"ata\\022\\020\\n\\010hostname\\030\\002 \\002(\\t\\022\\r\\n\\005czxid\\030\\003 \\002(\\004\\\" \\n\\013\" +\n+      \"HubLoadData\\022\\021\\n\\tnumTopics\\030\\002 \\002(\\004*\\\"\\n\\017Protoc\" +\n+      \"olVersion\\022\\017\\n\\013VERSION_ONE\\020\\001*p\\n\\rOperationT\" +\n+      \"ype\\022\\013\\n\\007PUBLISH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\\022\\013\\n\\007CONSU\" +\n+      \"ME\\020\\002\\022\\017\\n\\013UNSUBSCRIBE\\020\\003\\022\\022\\n\\016START_DELIVERY\\020\",\n+      \"\\004\\022\\021\\n\\rSTOP_DELIVERY\\020\\005*\\205\\004\\n\\nStatusCode\\022\\013\\n\\007S\" +\n+      \"UCCESS\\020\\000\\022\\026\\n\\021MALFORMED_REQUEST\\020\\221\\003\\022\\022\\n\\rNO_S\" +\n+      \"UCH_TOPIC\\020\\222\\003\\022\\036\\n\\031CLIENT_ALREADY_SUBSCRIBE\" +\n+      \"D\\020\\223\\003\\022\\032\\n\\025CLIENT_NOT_SUBSCRIBED\\020\\224\\003\\022\\026\\n\\021COUL\" +\n+      \"D_NOT_CONNECT\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\\226\\003\\022\\036\\n\\031NOT\" +\n+      \"_RESPONSIBLE_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SERVICE_DOW\" +\n+      \"N\\020\\366\\003\\022\\024\\n\\017UNCERTAIN_STATE\\020\\367\\003\\022\\033\\n\\026INVALID_ME\" +\n+      \"SSAGE_FILTER\\020\\370\\003\\022\\020\\n\\013BAD_VERSION\\020\\210\\004\\022\\036\\n\\031NO_\" +\n+      \"TOPIC_PERSISTENCE_INFO\\020\\211\\004\\022\\\"\\n\\035TOPIC_PERSI\" +\n+      \"STENCE_INFO_EXISTS\\020\\212\\004\\022\\032\\n\\025NO_SUBSCRIPTION\",\n+      \"_STATE\\020\\213\\004\\022\\036\\n\\031SUBSCRIPTION_STATE_EXISTS\\020\\214\" +\n+      \"\\004\\022\\030\\n\\023NO_TOPIC_OWNER_INFO\\020\\215\\004\\022\\034\\n\\027TOPIC_OWN\" +\n+      \"ER_INFO_EXISTS\\020\\216\\004\\022\\031\\n\\024UNEXPECTED_CONDITIO\" +\n+      \"N\\020\\330\\004\\022\\016\\n\\tCOMPOSITE\\020\\274\\005B\\036\\n\\032org.apache.hedwi\" +\n+      \"g.protocolH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n@@ -13790,176 +14652,184 @@ public Builder clearNumTopics() {\n               new java.lang.String[] { \"Key\", \"Value\", },\n               org.apache.hedwig.protocol.PubSubProtocol.Map.Entry.class,\n               org.apache.hedwig.protocol.PubSubProtocol.Map.Entry.Builder.class);\n-          internal_static_Hedwig_Message_descriptor =\n+          internal_static_Hedwig_MessageHeader_descriptor =\n             getDescriptor().getMessageTypes().get(1);\n+          internal_static_Hedwig_MessageHeader_fieldAccessorTable = new\n+            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n+              internal_static_Hedwig_MessageHeader_descriptor,\n+              new java.lang.String[] { \"Properties\", \"MessageType\", },\n+              org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.class,\n+              org.apache.hedwig.protocol.PubSubProtocol.MessageHeader.Builder.class);\n+          internal_static_Hedwig_Message_descriptor =\n+            getDescriptor().getMessageTypes().get(2);\n           internal_static_Hedwig_Message_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_Message_descriptor,\n-              new java.lang.String[] { \"Body\", \"SrcRegion\", \"MsgId\", },\n+              new java.lang.String[] { \"Body\", \"SrcRegion\", \"MsgId\", \"Header\", },\n               org.apache.hedwig.protocol.PubSubProtocol.Message.class,\n               org.apache.hedwig.protocol.PubSubProtocol.Message.Builder.class);\n           internal_static_Hedwig_RegionSpecificSeqId_descriptor =\n-            getDescriptor().getMessageTypes().get(2);\n+            getDescriptor().getMessageTypes().get(3);\n           internal_static_Hedwig_RegionSpecificSeqId_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_RegionSpecificSeqId_descriptor,\n               new java.lang.String[] { \"Region\", \"SeqId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.RegionSpecificSeqId.class,\n               org.apache.hedwig.protocol.PubSubProtocol.RegionSpecificSeqId.Builder.class);\n           internal_static_Hedwig_MessageSeqId_descriptor =\n-            getDescriptor().getMessageTypes().get(3);\n+            getDescriptor().getMessageTypes().get(4);\n           internal_static_Hedwig_MessageSeqId_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_MessageSeqId_descriptor,\n               new java.lang.String[] { \"LocalComponent\", \"RemoteComponents\", },\n               org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.class,\n               org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId.Builder.class);\n           internal_static_Hedwig_PubSubRequest_descriptor =\n-            getDescriptor().getMessageTypes().get(4);\n+            getDescriptor().getMessageTypes().get(5);\n           internal_static_Hedwig_PubSubRequest_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_PubSubRequest_descriptor,\n               new java.lang.String[] { \"ProtocolVersion\", \"Type\", \"TriedServers\", \"TxnId\", \"ShouldClaim\", \"Topic\", \"PublishRequest\", \"SubscribeRequest\", \"ConsumeRequest\", \"UnsubscribeRequest\", \"StopDeliveryRequest\", \"StartDeliveryRequest\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest.Builder.class);\n           internal_static_Hedwig_PublishRequest_descriptor =\n-            getDescriptor().getMessageTypes().get(5);\n+            getDescriptor().getMessageTypes().get(6);\n           internal_static_Hedwig_PublishRequest_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_PublishRequest_descriptor,\n               new java.lang.String[] { \"Msg\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PublishRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PublishRequest.Builder.class);\n           internal_static_Hedwig_SubscriptionPreferences_descriptor =\n-            getDescriptor().getMessageTypes().get(6);\n+            getDescriptor().getMessageTypes().get(7);\n           internal_static_Hedwig_SubscriptionPreferences_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionPreferences_descriptor,\n-              new java.lang.String[] { \"Options\", \"MessageBound\", },\n+              new java.lang.String[] { \"Options\", \"MessageBound\", \"MessageFilter\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.Builder.class);\n           internal_static_Hedwig_SubscribeRequest_descriptor =\n-            getDescriptor().getMessageTypes().get(7);\n+            getDescriptor().getMessageTypes().get(8);\n           internal_static_Hedwig_SubscribeRequest_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscribeRequest_descriptor,\n               new java.lang.String[] { \"SubscriberId\", \"CreateOrAttach\", \"Synchronous\", \"MessageBound\", \"Preferences\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.Builder.class);\n           internal_static_Hedwig_SubscriptionOptions_descriptor =\n-            getDescriptor().getMessageTypes().get(8);\n+            getDescriptor().getMessageTypes().get(9);\n           internal_static_Hedwig_SubscriptionOptions_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionOptions_descriptor,\n-              new java.lang.String[] { \"CreateOrAttach\", \"MessageBound\", \"Options\", },\n+              new java.lang.String[] { \"CreateOrAttach\", \"MessageBound\", \"Options\", \"MessageFilter\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.Builder.class);\n           internal_static_Hedwig_ConsumeRequest_descriptor =\n-            getDescriptor().getMessageTypes().get(9);\n+            getDescriptor().getMessageTypes().get(10);\n           internal_static_Hedwig_ConsumeRequest_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_ConsumeRequest_descriptor,\n               new java.lang.String[] { \"SubscriberId\", \"MsgId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.ConsumeRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.ConsumeRequest.Builder.class);\n           internal_static_Hedwig_UnsubscribeRequest_descriptor =\n-            getDescriptor().getMessageTypes().get(10);\n+            getDescriptor().getMessageTypes().get(11);\n           internal_static_Hedwig_UnsubscribeRequest_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_UnsubscribeRequest_descriptor,\n               new java.lang.String[] { \"SubscriberId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.UnsubscribeRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.UnsubscribeRequest.Builder.class);\n           internal_static_Hedwig_StopDeliveryRequest_descriptor =\n-            getDescriptor().getMessageTypes().get(11);\n+            getDescriptor().getMessageTypes().get(12);\n           internal_static_Hedwig_StopDeliveryRequest_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_StopDeliveryRequest_descriptor,\n               new java.lang.String[] { \"SubscriberId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.StopDeliveryRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.StopDeliveryRequest.Builder.class);\n           internal_static_Hedwig_StartDeliveryRequest_descriptor =\n-            getDescriptor().getMessageTypes().get(12);\n+            getDescriptor().getMessageTypes().get(13);\n           internal_static_Hedwig_StartDeliveryRequest_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_StartDeliveryRequest_descriptor,\n               new java.lang.String[] { \"SubscriberId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest.Builder.class);\n           internal_static_Hedwig_PubSubResponse_descriptor =\n-            getDescriptor().getMessageTypes().get(13);\n+            getDescriptor().getMessageTypes().get(14);\n           internal_static_Hedwig_PubSubResponse_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_PubSubResponse_descriptor,\n               new java.lang.String[] { \"ProtocolVersion\", \"StatusCode\", \"TxnId\", \"StatusMsg\", \"Message\", \"Topic\", \"SubscriberId\", \"ResponseBody\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse.Builder.class);\n           internal_static_Hedwig_PublishResponse_descriptor =\n-            getDescriptor().getMessageTypes().get(14);\n+            getDescriptor().getMessageTypes().get(15);\n           internal_static_Hedwig_PublishResponse_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_PublishResponse_descriptor,\n               new java.lang.String[] { \"PublishedMsgId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder.class);\n           internal_static_Hedwig_ResponseBody_descriptor =\n-            getDescriptor().getMessageTypes().get(15);\n+            getDescriptor().getMessageTypes().get(16);\n           internal_static_Hedwig_ResponseBody_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_ResponseBody_descriptor,\n               new java.lang.String[] { \"PublishResponse\", },\n               org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.class,\n               org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder.class);\n           internal_static_Hedwig_SubscriptionState_descriptor =\n-            getDescriptor().getMessageTypes().get(16);\n+            getDescriptor().getMessageTypes().get(17);\n           internal_static_Hedwig_SubscriptionState_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionState_descriptor,\n               new java.lang.String[] { \"MsgId\", \"MessageBound\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState.Builder.class);\n           internal_static_Hedwig_SubscriptionData_descriptor =\n-            getDescriptor().getMessageTypes().get(17);\n+            getDescriptor().getMessageTypes().get(18);\n           internal_static_Hedwig_SubscriptionData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionData_descriptor,\n               new java.lang.String[] { \"State\", \"Preferences\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData.Builder.class);\n           internal_static_Hedwig_LedgerRange_descriptor =\n-            getDescriptor().getMessageTypes().get(18);\n+            getDescriptor().getMessageTypes().get(19);\n           internal_static_Hedwig_LedgerRange_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_LedgerRange_descriptor,\n               new java.lang.String[] { \"LedgerId\", \"EndSeqIdIncluded\", },\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRange.class,\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRange.Builder.class);\n           internal_static_Hedwig_LedgerRanges_descriptor =\n-            getDescriptor().getMessageTypes().get(19);\n+            getDescriptor().getMessageTypes().get(20);\n           internal_static_Hedwig_LedgerRanges_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_LedgerRanges_descriptor,\n               new java.lang.String[] { \"Ranges\", },\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges.class,\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges.Builder.class);\n           internal_static_Hedwig_ManagerMeta_descriptor =\n-            getDescriptor().getMessageTypes().get(20);\n+            getDescriptor().getMessageTypes().get(21);\n           internal_static_Hedwig_ManagerMeta_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_ManagerMeta_descriptor,\n               new java.lang.String[] { \"ManagerImpl\", \"ManagerVersion\", },\n               org.apache.hedwig.protocol.PubSubProtocol.ManagerMeta.class,\n               org.apache.hedwig.protocol.PubSubProtocol.ManagerMeta.Builder.class);\n           internal_static_Hedwig_HubInfoData_descriptor =\n-            getDescriptor().getMessageTypes().get(21);\n+            getDescriptor().getMessageTypes().get(22);\n           internal_static_Hedwig_HubInfoData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_HubInfoData_descriptor,\n               new java.lang.String[] { \"Hostname\", \"Czxid\", },\n               org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.class,\n               org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.class);\n           internal_static_Hedwig_HubLoadData_descriptor =\n-            getDescriptor().getMessageTypes().get(22);\n+            getDescriptor().getMessageTypes().get(23);\n           internal_static_Hedwig_HubLoadData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_HubLoadData_descriptor,"},{"sha":"8fea1c0d97b6984c9ab1e39b808dd430b667e82c","filename":"hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -32,13 +32,23 @@ message Map {\n     repeated Entry entries = 1;\n }\n \n+// message header\n+message MessageHeader {\n+    // user customized fields used for message filter\n+    optional Map properties = 1;\n+    // following are system properties in message header\n+    optional string messageType = 2;\n+}\n+\n /*\n  * this is the structure that will be serialized\n  */\n message Message {\n     required bytes body = 1;\n     optional bytes srcRegion = 2;\n     optional MessageSeqId msgId = 3;\n+    // message header\n+    optional MessageHeader header = 4;\n }\n \n message RegionSpecificSeqId {\n@@ -105,6 +115,8 @@ message SubscriptionPreferences {\n \n     // message bound\n     optional uint32 messageBound = 2;\n+    // server-side message filter\n+    optional string messageFilter = 3;\n }\n \n message SubscribeRequest{\n@@ -133,6 +145,8 @@ message SubscriptionOptions {\n     optional uint32 messageBound = 3 [default = 0];\n     // user customized subscription options\n     optional Map options = 4;\n+    // server-side message filter\n+    optional string messageFilter = 5;\n }\n \n message ConsumeRequest{\n@@ -199,6 +213,7 @@ enum StatusCode{\n     NOT_RESPONSIBLE_FOR_TOPIC = 501;\n     SERVICE_DOWN = 502;\n     UNCERTAIN_STATE = 503;\n+    INVALID_MESSAGE_FILTER = 504;\n \n     //server-side meta manager errors (52x)\n     BAD_VERSION = 520;"},{"sha":"9bef0f40549dd1e1eee2f6c27e682365c86eb1e2","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -36,7 +36,7 @@\n import org.apache.hedwig.util.HedwigSocketAddress;\n \n public class ServerConfiguration extends AbstractConfiguration {\n-    protected final static String REGION = \"region\";\n+    public final static String REGION = \"region\";\n     protected final static String MAX_MESSAGE_SIZE = \"max_message_size\";\n     protected final static String READAHEAD_COUNT = \"readahead_count\";\n     protected final static String READAHEAD_SIZE = \"readahead_size\";"},{"sha":"96645e788f6ef8071ac13ac749d4db5163b83a1f","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -19,13 +19,13 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n-import org.apache.hedwig.server.subscriptions.MessageFilter;\n+import org.apache.hedwig.filter.MessageFilter;\n \n public interface DeliveryManager {\n     public void start();\n \n     public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, MessageFilter filter, boolean isHubSubscriber);\n+                                         DeliveryEndPoint endPoint, MessageFilter filter);\n \n     public void stopServingSubscriber(ByteString topic, ByteString subscriberId);\n "},{"sha":"19e6855eec39667edcef6f9fd45ebd46acfb6dca","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":7,"deletions":17,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -36,6 +36,7 @@\n \n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.data.TopicSubscriber;\n+import org.apache.hedwig.filter.MessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;\n@@ -49,7 +50,6 @@\n import org.apache.hedwig.server.persistence.PersistenceManager;\n import org.apache.hedwig.server.persistence.ScanCallback;\n import org.apache.hedwig.server.persistence.ScanRequest;\n-import org.apache.hedwig.server.subscriptions.MessageFilter;\n \n public class FIFODeliveryManager implements Runnable, DeliveryManager {\n \n@@ -135,15 +135,12 @@ protected void enqueueWithoutFailure(DeliveryManagerRequest request) {\n      * @param filter\n      *            Only messages passing this filter should be sent to this\n      *            subscriber\n-     * @param isHubSubscriber\n-     *            There are some seq-id intricacies. To a hub subscriber, we\n-     *            should send only a subset of the seq-id vector\n      */\n     public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, MessageFilter filter, boolean isHubSubscriber) {\n+                                         DeliveryEndPoint endPoint, MessageFilter filter) {\n \n         ActiveSubscriberState subscriber = new ActiveSubscriberState(topic, subscriberId, seqIdToStartFrom\n-                .getLocalComponent() - 1, endPoint, filter, isHubSubscriber);\n+                .getLocalComponent() - 1, endPoint, filter);\n \n         enqueueWithoutFailure(subscriber);\n     }\n@@ -302,19 +299,18 @@ protected void addDeliveryPtr(ActiveSubscriberState subscriber, Long seqId) {\n         long lastScanErrorTime = -1;\n         long localSeqIdDeliveringNow;\n         long lastSeqIdCommunicatedExternally;\n+        MessageFilter filter;\n         // TODO make use of these variables\n \n-        boolean isHubSubscriber;\n         final static int SEQ_ID_SLACK = 10;\n \n         public ActiveSubscriberState(ByteString topic, ByteString subscriberId, long lastLocalSeqIdDelivered,\n-                                     DeliveryEndPoint deliveryEndPoint, MessageFilter filter, boolean isHubSubscriber) {\n+                                     DeliveryEndPoint deliveryEndPoint, MessageFilter filter) {\n             this.topic = topic;\n             this.subscriberId = subscriberId;\n             this.lastLocalSeqIdDelivered = lastLocalSeqIdDelivered;\n             this.deliveryEndPoint = deliveryEndPoint;\n-\n-            this.isHubSubscriber = isHubSubscriber;\n+            this.filter = filter;\n         }\n \n         public void setNotConnected() {\n@@ -366,13 +362,7 @@ public void messageScanned(Object ctx, Message message) {\n                 return;\n             }\n \n-            // We're using a simple all-to-all network topology, so no region\n-            // should ever need to forward messages to any other region.\n-            // Otherwise, with the current logic, messages will end up\n-            // ping-pong-ing back and forth between regions with subscriptions\n-            // to each other without termination (or in any other cyclic\n-            // configuration).\n-            if (isHubSubscriber && !message.getSrcRegion().equals(cfg.getMyRegionByteString())) {\n+            if (!filter.testMessage(message)) {\n                 sendingFinished();\n                 return;\n             }"},{"sha":"2afca82ab305345529124cc9fb398da2da874d33","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","status":"modified","additions":48,"deletions":7,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -27,13 +27,17 @@\n import com.google.protobuf.ByteString;\n \n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;\n+import org.apache.hedwig.filter.MessageFilter;\n+import org.apache.hedwig.filter.PipelineFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData;\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n@@ -44,7 +48,7 @@\n import org.apache.hedwig.server.netty.UmbrellaHandler;\n import org.apache.hedwig.server.persistence.PersistenceManager;\n import org.apache.hedwig.server.subscriptions.SubscriptionManager;\n-import org.apache.hedwig.server.subscriptions.TrueFilter;\n+import org.apache.hedwig.server.subscriptions.AllToAllTopologyFilter;\n import org.apache.hedwig.server.topics.TopicManager;\n import org.apache.hedwig.util.Callback;\n \n@@ -111,7 +115,7 @@ public void handleRequestAtOwner(final PubSubRequest request, final Channel chan\n         MessageSeqId lastSeqIdPublished = MessageSeqId.newBuilder(seqId).setLocalComponent(seqId.getLocalComponent()).build();\n \n         final long requestTime = MathUtils.now();\n-        subMgr.serveSubscribeRequest(topic, subRequest, lastSeqIdPublished, new Callback<MessageSeqId>() {\n+        subMgr.serveSubscribeRequest(topic, subRequest, lastSeqIdPublished, new Callback<SubscriptionData>() {\n \n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n@@ -121,7 +125,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n             }\n \n             @Override\n-            public void operationFinished(Object ctx, MessageSeqId resultOfOperation) {\n+            public void operationFinished(Object ctx, SubscriptionData subData) {\n \n                 TopicSubscriber topicSub = new TopicSubscriber(topic, subscriberId);\n \n@@ -150,18 +154,55 @@ public void operationFinished(Object ctx, MessageSeqId resultOfOperation) {\n                         channel2sub.put(channel, topicSub);\n                     }\n                 }\n+                // initialize the message filter\n+                PipelineFilter filter = new PipelineFilter();\n+                try {\n+                    // the filter pipeline should be\n+                    // 1) AllToAllTopologyFilter to filter cross-region messages\n+                    filter.addLast(new AllToAllTopologyFilter());\n+                    // 2) User-Customized MessageFilter\n+                    if (subData.hasPreferences() &&\n+                        subData.getPreferences().hasMessageFilter()) {\n+                        String messageFilterName = subData.getPreferences().getMessageFilter();\n+                        filter.addLast(ReflectionUtils.newInstance(messageFilterName, MessageFilter.class));\n+                    }\n+                    // initialize the filter\n+                    filter.initialize(cfg.getConf());\n+                    filter.setSubscriptionPreferences(topic, subscriberId,\n+                                                      subData.getPreferences());\n+                } catch (RuntimeException re) {\n+                    String errMsg = \"RuntimeException caught when instantiating message filter for (topic:\"\n+                                  + topic.toStringUtf8() + \", subscriber:\" + subscriberId.toStringUtf8() + \").\"\n+                                  + \"It might be introduced by programming error in message filter.\";\n+                    logger.error(errMsg, re);\n+                    PubSubException pse = new PubSubException.InvalidMessageFilterException(errMsg, re);\n+                    subStats.incrementFailedOps();\n+                    channel.write(PubSubResponseUtils.getResponseForException(pse, request.getTxnId()))\n+                    .addListener(ChannelFutureListener.CLOSE);\n+                    return;\n+                } catch (Throwable t) {\n+                    String errMsg = \"Failed to instantiate message filter for (topic:\" + topic.toStringUtf8()\n+                                  + \", subscriber:\" + subscriberId.toStringUtf8() + \").\";\n+                    logger.error(errMsg, t);\n+                    PubSubException pse = new PubSubException.InvalidMessageFilterException(errMsg, t);\n+                    subStats.incrementFailedOps();\n+                    channel.write(PubSubResponseUtils.getResponseForException(pse, request.getTxnId()))\n+                    .addListener(ChannelFutureListener.CLOSE);\n+                    return;\n+                }\n+\n                 // First write success and then tell the delivery manager,\n                 // otherwise the first message might go out before the response\n                 // to the subscribe\n                 channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n                 subStats.updateLatency(MathUtils.now() - requestTime);\n \n                 // want to start 1 ahead of the consume ptr\n-                MessageSeqId seqIdToStartFrom = MessageSeqId.newBuilder(resultOfOperation).setLocalComponent(\n-                                                    resultOfOperation.getLocalComponent() + 1).build();\n+                MessageSeqId lastConsumedSeqId = subData.getState().getMsgId();\n+                MessageSeqId seqIdToStartFrom = MessageSeqId.newBuilder(lastConsumedSeqId).setLocalComponent(\n+                                                    lastConsumedSeqId.getLocalComponent() + 1).build();\n                 deliveryMgr.startServingSubscription(topic, subscriberId, seqIdToStartFrom,\n-                                                     new ChannelEndPoint(channel), TrueFilter.instance(), SubscriptionStateUtils\n-                                                     .isHubSubscriber(subRequest.getSubscriberId()));\n+                                                     new ChannelEndPoint(channel), filter);\n             }\n         }, null);\n "},{"sha":"496817fc0835991ae596c77fc6176d5439c777d3","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -312,12 +312,12 @@ private void notifyUnsubcribe(ByteString topic) {\n     protected abstract void readSubscriptions(final ByteString topic,\n             final Callback<Map<ByteString, InMemorySubscriptionState>> cb, final Object ctx);\n \n-    private class SubscribeOp extends TopicOpQueuer.AsynchronousOp<MessageSeqId> {\n+    private class SubscribeOp extends TopicOpQueuer.AsynchronousOp<SubscriptionData> {\n         SubscribeRequest subRequest;\n         MessageSeqId consumeSeqId;\n \n         public SubscribeOp(ByteString topic, SubscribeRequest subRequest, MessageSeqId consumeSeqId,\n-                           Callback<MessageSeqId> callback, Object ctx) {\n+                           Callback<SubscriptionData> callback, Object ctx) {\n             queuer.super(topic, callback, ctx);\n             this.subRequest = subRequest;\n             this.consumeSeqId = consumeSeqId;\n@@ -369,7 +369,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n                             }\n                             // update message bound if necessary\n                             updateMessageBound(topic);\n-                            cb.operationFinished(ctx, subscriptionState.getLastConsumeSeqId());\n+                            cb.operationFinished(ctx, subscriptionState.toSubscriptionData());\n                         }\n                     }, ctx);\n                     return;\n@@ -384,7 +384,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n                                  + SubscriptionStateUtils.toString(subscriptionState.getSubscriptionPreferences()));\n                 }\n \n-                cb.operationFinished(ctx, subscriptionState.getLastConsumeSeqId());\n+                cb.operationFinished(ctx, subscriptionState.toSubscriptionData());\n                 return;\n             }\n \n@@ -465,7 +465,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n \n                             updateMessageBound(topic);\n \n-                            cb.operationFinished(ctx, consumeSeqId);\n+                            cb.operationFinished(ctx, subData);\n                         }\n \n                     };\n@@ -505,7 +505,7 @@ public void updateMessageBound(ByteString topic) {\n \n     @Override\n     public void serveSubscribeRequest(ByteString topic, SubscribeRequest subRequest, MessageSeqId consumeSeqId,\n-                                      Callback<MessageSeqId> callback, Object ctx) {\n+                                      Callback<SubscriptionData> callback, Object ctx) {\n         queuer.pushAndMaybeRun(topic, new SubscribeOp(topic, subRequest, consumeSeqId, callback, ctx));\n     }\n "},{"sha":"1baa633001c3b5ed13b870e6cd4c4231d454eb1e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java","status":"modified","additions":38,"deletions":3,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AllToAllTopologyFilter.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -17,19 +17,54 @@\n  */\n package org.apache.hedwig.server.subscriptions;\n \n+import java.io.IOException;\n+\n import com.google.protobuf.ByteString;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.hedwig.filter.MessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n+import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n+import org.apache.hedwig.server.common.ServerConfiguration;\n \n public class AllToAllTopologyFilter implements MessageFilter {\n \n     ByteString subscriberRegion;\n+    boolean isHubSubscriber;\n+\n+    @Override\n+    public MessageFilter initialize(Configuration conf)\n+    throws ConfigurationException, IOException {\n+        String region = conf.getString(ServerConfiguration.REGION, \"standalone\");\n+        if (null == region) {\n+            throw new IOException(\"No region found to run \" + getClass().getName());\n+        }\n+        subscriberRegion = ByteString.copyFromUtf8(region);\n+        return this;\n+    }\n+\n+    @Override\n+    public void uninitialize() {\n+        // do nothing now\n+    }\n \n-    public AllToAllTopologyFilter(ByteString subscriberRegion) {\n-        this.subscriberRegion = subscriberRegion;\n+    @Override\n+    public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                                                    SubscriptionPreferences preferences) {\n+        isHubSubscriber = SubscriptionStateUtils.isHubSubscriber(subscriberId);\n+        return this;\n     }\n \n+    @Override\n     public boolean testMessage(Message message) {\n-        if (message.getSrcRegion().equals(subscriberRegion)) {\n+        // We're using a simple all-to-all network topology, so no region\n+        // should ever need to forward messages to any other region.\n+        // Otherwise, with the current logic, messages will end up\n+        // ping-pong-ing back and forth between regions with subscriptions\n+        // to each other without termination (or in any other cyclic\n+        // configuration).\n+        if (isHubSubscriber && !message.getSrcRegion().equals(subscriberRegion)) {\n             return false;\n         } else {\n             return true;"},{"sha":"b6fdd6b28608561d277f5cb3a6e9d906a0661165","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -54,7 +54,9 @@ public InMemorySubscriptionState(SubscriptionData subscriptionData) {\n     }\n \n     public SubscriptionData toSubscriptionData() {\n-        return SubscriptionData.newBuilder().setState(subscriptionState)\n+        SubscriptionState.Builder stateBuilder =\n+            SubscriptionState.newBuilder(subscriptionState).setMsgId(lastConsumeSeqId);\n+        return SubscriptionData.newBuilder().setState(stateBuilder)\n                                             .setPreferences(subscriptionPreferences)\n                                             .build();\n     }\n@@ -127,6 +129,13 @@ public boolean updatePreferences(SubscriptionPreferences preferences) {\n                 changed = true;\n             }\n         }\n+        if (preferences.hasMessageFilter()) {\n+            if (!subscriptionPreferences.hasMessageFilter() ||\n+                !subscriptionPreferences.getMessageFilter().equals(preferences.getMessageFilter())) {\n+                newPreferencesBuilder.setMessageFilter(preferences.getMessageFilter());\n+                changed = true;\n+            }\n+        }\n         if (preferences.hasOptions()) {\n             Map<String, ByteString> userOptions = SubscriptionStateUtils.buildUserOptions(subscriptionPreferences);\n             Map<String, ByteString> optUpdates = SubscriptionStateUtils.buildUserOptions(preferences);"},{"sha":"03503298c3892b827cf6f88d993cacf57828e957","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/MessageFilter.java","status":"removed","additions":0,"deletions":31,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/6b44bc232811e379463f71a27293c3f31ed398ba/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/MessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/6b44bc232811e379463f71a27293c3f31ed398ba/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/MessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/MessageFilter.java?ref=6b44bc232811e379463f71a27293c3f31ed398ba","patch":"@@ -1,31 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.server.subscriptions;\n-\n-import org.apache.hedwig.protocol.PubSubProtocol.Message;\n-\n-public interface MessageFilter {\n-\n-    /**\n-     * Tests whether a particular message passes the filter or not\n-     *\n-     * @param message\n-     * @return\n-     */\n-    public boolean testMessage(Message message);\n-}"},{"sha":"4ded57fc00b80cbdda6894b2bd159c942eb6592b","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -20,6 +20,7 @@\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData;\n import org.apache.hedwig.util.Callback;\n \n /**\n@@ -43,12 +44,11 @@\n      *            The seqId to start serving the subscription from, if this is a\n      *            brand new subscription\n      * @param callback\n-     *            The seq id returned by the callback is where serving should\n-     *            start from\n+     *            The subscription data returned by the callback.\n      * @param ctx\n      */\n     public void serveSubscribeRequest(ByteString topic, SubscribeRequest subRequest, MessageSeqId consumeSeqId,\n-                                      Callback<MessageSeqId> callback, Object ctx);\n+                                      Callback<SubscriptionData> callback, Object ctx);\n \n     /**\n      * Set the consume position of a given subscriber on a given topic. Note"},{"sha":"fa51bdfe9ed2429786577936767e672829496a0e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java","status":"removed","additions":0,"deletions":32,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/6b44bc232811e379463f71a27293c3f31ed398ba/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/6b44bc232811e379463f71a27293c3f31ed398ba/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java?ref=6b44bc232811e379463f71a27293c3f31ed398ba","patch":"@@ -1,32 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.server.subscriptions;\n-\n-import org.apache.hedwig.protocol.PubSubProtocol.Message;\n-\n-public class TrueFilter implements MessageFilter {\n-    protected final static TrueFilter instance = new TrueFilter();\n-\n-    public static TrueFilter instance() {\n-        return instance;\n-    }\n-\n-    public boolean testMessage(Message message) {\n-        return true;\n-    }\n-}"},{"sha":"4ec0d50721a06a954051155cba957bb675a35856","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -82,6 +82,7 @@ public RegionServerConfiguration(int serverPort, int sslServerPort, String regio\n             this.serverPort = serverPort;\n             this.sslServerPort = sslServerPort;\n             this.regionName = regionName;\n+            conf.setProperty(REGION, regionName);\n             setRegionList();\n         }\n "},{"sha":"9d0021a8987a06322c6d0f79ba4c2e326042440b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -22,8 +22,8 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.data.TopicSubscriber;\n+import org.apache.hedwig.filter.MessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n-import org.apache.hedwig.server.subscriptions.MessageFilter;\n \n public class StubDeliveryManager implements DeliveryManager {\n \n@@ -33,16 +33,14 @@\n         public MessageSeqId seqIdToStartFrom;\n         public DeliveryEndPoint endPoint;\n         public MessageFilter filter;\n-        public boolean isHubSubscriber;\n \n         public StartServingRequest(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                   DeliveryEndPoint endPoint, MessageFilter filter, boolean isHubSubscriber) {\n+                                   DeliveryEndPoint endPoint, MessageFilter filter) {\n             this.topic = topic;\n             this.subscriberId = subscriberId;\n             this.seqIdToStartFrom = seqIdToStartFrom;\n             this.endPoint = endPoint;\n             this.filter = filter;\n-            this.isHubSubscriber = isHubSubscriber;\n         }\n \n     }\n@@ -51,11 +49,8 @@ public StartServingRequest(ByteString topic, ByteString subscriberId, MessageSeq\n \n     @Override\n     public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, MessageFilter filter, boolean isHubSubscriber) {\n-\n-        lastRequest.add(new StartServingRequest(topic, subscriberId, seqIdToStartFrom, endPoint, filter,\n-                                                isHubSubscriber));\n-\n+                                         DeliveryEndPoint endPoint, MessageFilter filter) {\n+        lastRequest.add(new StartServingRequest(topic, subscriberId, seqIdToStartFrom, endPoint, filter));\n     }\n \n     @Override"},{"sha":"0389c342b5cad9ca91873a96838984eeec5a6572","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","status":"added","additions":320,"deletions":0,"changes":320,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -0,0 +1,320 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server.filter;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.MessageHandler;\n+import com.google.protobuf.ByteString;\n+import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.MessageHeader;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n+import org.apache.hedwig.protoextensions.MapUtils;\n+import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n+\n+import org.apache.hedwig.client.api.Client;\n+import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.apache.hedwig.filter.MessageFilter;\n+import org.apache.hedwig.util.Callback;\n+\n+import org.apache.hedwig.server.HedwigHubTestBase;\n+\n+public class TestMessageFilter extends HedwigHubTestBase {\n+\n+    // Client side variables\n+    protected HedwigClient client;\n+    protected Publisher publisher;\n+    protected Subscriber subscriber;\n+\n+    static final String OPT_MOD = \"MOD\";\n+\n+    static class ModMessageFilter implements MessageFilter {\n+\n+        int mod;\n+\n+        @Override\n+        public MessageFilter initialize(Configuration conf) {\n+            // do nothing\n+            return this;\n+        }\n+\n+        @Override\n+        public void uninitialize() {\n+            // do nothing;\n+        }\n+\n+        @Override\n+        public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                                                        SubscriptionPreferences preferences) {\n+            Map<String, ByteString> userOptions = SubscriptionStateUtils.buildUserOptions(preferences);\n+            ByteString modValue = userOptions.get(OPT_MOD);\n+            if (null == modValue) {\n+                mod = 0;\n+            } else {\n+                mod = Integer.valueOf(modValue.toStringUtf8());\n+            }\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean testMessage(Message msg) {\n+            int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+            return 0 == value % mod;\n+        }\n+    }\n+\n+    static class HeaderMessageFilter implements MessageFilter {\n+        int mod;\n+        @Override\n+        public MessageFilter initialize(Configuration conf) {\n+            // do nothing\n+            return this;\n+        }\n+\n+        @Override\n+        public void uninitialize() {\n+            // do nothing\n+        }\n+\n+        @Override\n+        public MessageFilter setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                                                        SubscriptionPreferences preferences) {\n+            // do nothing now\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean testMessage(Message msg) {\n+            if (msg.hasHeader()) {\n+                MessageHeader header = msg.getHeader();\n+                if (header.hasProperties()) {\n+                    Map<String, ByteString> props = MapUtils.buildMap(header.getProperties());\n+                    ByteString value = props.get(OPT_MOD);\n+                    if (null == value) {\n+                        return false;\n+                    }\n+                    int intValue = Integer.valueOf(value.toStringUtf8());\n+                    if (0 != intValue) {\n+                        return false;\n+                    }\n+                    return true;\n+                } else {\n+                    return false;\n+                }\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        numServers = 1;\n+        super.setUp();\n+\n+        client = new HedwigClient(new ClientConfiguration() {\n+            @Override\n+            public boolean isAutoSendConsumeMessageEnabled() {\n+                return false;\n+            }\n+        });\n+        publisher = client.getPublisher();\n+        subscriber = client.getSubscriber();\n+    }\n+\n+    @Override\n+    @After\n+    public void tearDown() throws Exception {\n+        client.close();\n+        super.tearDown();\n+    }\n+\n+    private void publishNums(ByteString topic, int start, int num, int M) throws Exception {\n+        for (int i=1; i<=num; i++) {\n+            PubSubProtocol.Map.Builder propsBuilder = PubSubProtocol.Map.newBuilder()\n+                .addEntries(PubSubProtocol.Map.Entry.newBuilder().setKey(OPT_MOD)\n+                            .setValue(ByteString.copyFromUtf8(String.valueOf((start + i) % M))));\n+            MessageHeader.Builder headerBuilder = MessageHeader.newBuilder().setProperties(propsBuilder);\n+            Message msg = Message.newBuilder().setBody(\n+                          ByteString.copyFromUtf8(String.valueOf((start + i))))\n+                          .setHeader(headerBuilder).build();\n+            publisher.publish(topic, msg);\n+        }\n+    }\n+\n+    private void receiveNumModM(final ByteString topic, final ByteString subid,\n+                                final String filterClassName,\n+                                final int start, final int num, final int M,\n+                                final boolean consume)\n+    throws Exception {\n+        PubSubProtocol.Map userOptions = PubSubProtocol.Map.newBuilder()\n+            .addEntries(PubSubProtocol.Map.Entry.newBuilder().setKey(OPT_MOD)\n+                        .setValue(ByteString.copyFromUtf8(String.valueOf(M)))).build();\n+        SubscriptionOptions options = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.ATTACH)\n+            .setMessageFilter(filterClassName)\n+            .setOptions(userOptions).build();\n+        subscriber.subscribe(topic, subid, options);\n+\n+        final int base = start + M - start % M;\n+\n+        final AtomicInteger expected = new AtomicInteger(base);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        subscriber.startDelivery(topic, subid, new MessageHandler() {\n+            synchronized public void deliver(ByteString topic, ByteString subscriberId,\n+                                             Message msg, Callback<Void> callback, Object context) {\n+                try {\n+                    int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+                    // duplicated messages received, ignore them\n+                    if (value > start) {\n+                        if (value == expected.get()) {\n+                            expected.addAndGet(M);\n+                        } else {\n+                            logger.error(\"Did not receive expected value, expected {}, got {}\",\n+                                         expected.get(), value);\n+                            expected.set(0);\n+                            latch.countDown();\n+                        }\n+                        if (expected.get() == (base + num * M)) {\n+                            latch.countDown();\n+                        }\n+                    }\n+                    callback.operationFinished(context, null);\n+                    if (consume) {\n+                        subscriber.consume(topic, subid, msg.getMsgId());\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Received bad message\", e);\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+        assertTrue(\"Timed out waiting for messages mod \" + M + \" expected is \" + expected.get(),\n+                   latch.await(10, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected message with \" + (base + num * M), (base + num*M), expected.get());\n+        subscriber.stopDelivery(topic, subid);\n+        subscriber.closeSubscription(topic, subid);\n+    }\n+\n+    @Test\n+    public void testMessageFilter() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestMessageFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.closeSubscription(topic, subid);\n+        publishNums(topic, 0, 100, 2);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 50, 2, true);\n+    }\n+\n+    @Test\n+    public void testInvalidMessageFilter() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestInvalidMessageFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        SubscriptionOptions options = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH)\n+            .setMessageFilter(\"Invalid_Message_Filter\").build();\n+        try {\n+            subscriber.subscribe(topic, subid, options);\n+            // coun't reach here\n+            fail(\"Should fail subscribe with invalid message filter\");\n+        } catch (PubSubException pse) {\n+            assertTrue(\"Should respond with INVALID_MESSAGE_FILTER\",\n+                       pse.getMessage().contains(\"INVALID_MESSAGE_FILTER\"));\n+        }\n+    }\n+\n+    @Test\n+    public void testChangeSubscriptionPreferences() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestChangeSubscriptionPreferences\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.closeSubscription(topic, subid);\n+\n+        publishNums(topic, 0, 100, 2);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 50, 2, false);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 25, 4, false);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 33, 3, true);\n+\n+        // change mod to receive numbers mod 5\n+        publishNums(topic, 100, 100, 5);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 100, 20, 5, true);\n+\n+        // change mod to receive numbers mod 7\n+        publishNums(topic, 200, 100, 7);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 200, 14, 7, true);\n+    }\n+\n+    @Test\n+    public void testChangeMessageFilter() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestChangeMessageFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.closeSubscription(topic, subid);\n+\n+        publishNums(topic, 0, 100, 3);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 50, 2, false);\n+        receiveNumModM(topic, subid, ModMessageFilter.class.getName(), 0, 25, 4, false);\n+        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), 0, 33, 3, true);\n+\n+        publishNums(topic, 200, 100, 7);\n+        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), 200, 14, 7, true);\n+    }\n+\n+    @Test\n+    public void testFixMessageFilter() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestFixMessageFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.closeSubscription(topic, subid);\n+\n+        publishNums(topic, 0, 100, 3);\n+        try {\n+            receiveNumModM(topic, subid, \"Invalid_Message_Filter\", 0, 33, 3, true);\n+            // coun't reach here\n+            fail(\"Should fail subscribe with invalid message filter\");\n+        } catch (Exception pse) {\n+            assertTrue(\"Should respond with INVALID_MESSAGE_FILTER\",\n+                       pse.getMessage().contains(\"INVALID_MESSAGE_FILTER\"));\n+        }\n+        receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), 0, 33, 3, true);\n+    }\n+}"},{"sha":"5b53f24554c57c81778ed77f9a71933c498f6688","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -25,13 +25,15 @@\n import org.apache.hedwig.StubCallback;\n import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.filter.PipelineFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData;\n import org.apache.hedwig.protocol.PubSubProtocol.UnsubscribeRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.server.common.ServerConfiguration;\n@@ -41,8 +43,8 @@\n import org.apache.hedwig.server.netty.WriteRecordingChannel;\n import org.apache.hedwig.server.persistence.LocalDBPersistenceManager;\n import org.apache.hedwig.server.persistence.PersistenceManager;\n+import org.apache.hedwig.server.subscriptions.AllToAllTopologyFilter;\n import org.apache.hedwig.server.subscriptions.StubSubscriptionManager;\n-import org.apache.hedwig.server.subscriptions.TrueFilter;\n import org.apache.hedwig.server.topics.TopicManager;\n import org.apache.hedwig.server.topics.TrivialOwnAllTopicManager;\n import org.apache.hedwig.util.ConcurrencyUtils;\n@@ -109,14 +111,16 @@ public void testSuccessCase() {\n         // make sure delivery was started\n         StartServingRequest startRequest = (StartServingRequest) dm.lastRequest.poll();\n         assertEquals(channel, ((ChannelEndPoint) startRequest.endPoint).getChannel());\n-        assertEquals(false, startRequest.isHubSubscriber);\n-        assertEquals(TrueFilter.class, startRequest.filter.getClass());\n+        assertEquals(PipelineFilter.class, startRequest.filter.getClass());\n+        PipelineFilter pfilter = (PipelineFilter)(startRequest.filter);\n+        assertEquals(1, pfilter.size());\n+        assertEquals(AllToAllTopologyFilter.class, pfilter.getFirst().getClass());\n         assertEquals(1, startRequest.seqIdToStartFrom.getLocalComponent());\n         assertEquals(subscriberId, startRequest.subscriberId);\n         assertEquals(topic, startRequest.topic);\n \n         // make sure subscription was registered\n-        StubCallback<MessageSeqId> callback1 = new StubCallback<MessageSeqId>();\n+        StubCallback<SubscriptionData> callback1 = new StubCallback<SubscriptionData>();\n         sm.serveSubscribeRequest(topic, SubscribeRequest.newBuilder(subRequestPrototype).setCreateOrAttach(\n                                      CreateOrAttach.CREATE).build(), MessageSeqId.newBuilder().setLocalComponent(10).build(), callback1,\n                                  null);\n@@ -154,7 +158,7 @@ public void testSuccessCase() {\n         assertEquals(new TopicSubscriber(topic, subscriberId), dm.lastRequest.poll());\n \n         // make sure the info is gone from the sm\n-        StubCallback<MessageSeqId> callback2 = new StubCallback<MessageSeqId>();\n+        StubCallback<SubscriptionData> callback2 = new StubCallback<SubscriptionData>();\n         sm.serveSubscribeRequest(topic, SubscribeRequest.newBuilder(subRequestPrototype).setCreateOrAttach(\n                                      CreateOrAttach.ATTACH).build(), MessageSeqId.newBuilder().setLocalComponent(10).build(), callback2,\n                                  null);"},{"sha":"a9df6a5b8d22e7bf891af31da58753906ae16a06","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/StubSubscriptionManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/StubSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/StubSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/StubSubscriptionManager.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -23,6 +23,7 @@\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.persistence.PersistenceManager;\n import org.apache.hedwig.server.topics.TopicManager;\n@@ -41,7 +42,7 @@ public StubSubscriptionManager(TopicManager tm, PersistenceManager pm, ServerCon\n \n     @Override\n     public void serveSubscribeRequest(ByteString topic, SubscribeRequest subRequest, MessageSeqId consumeSeqId,\n-                                      Callback<MessageSeqId> callback, Object ctx) {\n+                                      Callback<SubscriptionData> callback, Object ctx) {\n         if (fail) {\n             callback.operationFailed(ctx, new PubSubException.ServiceDownException(\"Asked to fail\"));\n             return;"},{"sha":"e06c4730d3d61936986b525e0954292c39ac6355","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java","status":"modified","additions":17,"deletions":16,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/6379ae858d11bac62a95ccb06675e2bd511f822a/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java?ref=6379ae858d11bac62a95ccb06675e2bd511f822a","patch":"@@ -30,6 +30,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.persistence.LocalDBPersistenceManager;\n import org.apache.hedwig.server.topics.TrivialOwnAllTopicManager;\n@@ -43,11 +44,11 @@\n     MetadataManagerFactory mm;\n     MMSubscriptionManager sm;\n     ServerConfiguration cfg = new ServerConfiguration();\n-    SynchronousQueue<Either<MessageSeqId, PubSubException>> msgIdCallbackQueue = new SynchronousQueue<Either<MessageSeqId, PubSubException>>();\n+    SynchronousQueue<Either<SubscriptionData, PubSubException>> subDataCallbackQueue = new SynchronousQueue<Either<SubscriptionData, PubSubException>>();\n     SynchronousQueue<Either<Boolean, PubSubException>> BooleanCallbackQueue = new SynchronousQueue<Either<Boolean, PubSubException>>();\n \n     Callback<Void> voidCallback;\n-    Callback<MessageSeqId> msgIdCallback;\n+    Callback<SubscriptionData> subDataCallback;\n \n     @Before\n     @Override\n@@ -58,21 +59,21 @@ public void setUp() throws Exception {\n         mm = MetadataManagerFactory.newMetadataManagerFactory(cfg, zk);\n         sm = new MMSubscriptionManager(mm, new TrivialOwnAllTopicManager(cfg, scheduler),\n                                        LocalDBPersistenceManager.instance(), cfg, scheduler);\n-        msgIdCallback = new Callback<MessageSeqId>() {\n+        subDataCallback = new Callback<SubscriptionData>() {\n             @Override\n             public void operationFailed(Object ctx, final PubSubException exception) {\n                 scheduler.execute(new Runnable() {\n                     public void run() {\n-                        ConcurrencyUtils.put(msgIdCallbackQueue, Either.of((MessageSeqId) null, exception));\n+                        ConcurrencyUtils.put(subDataCallbackQueue, Either.of((SubscriptionData) null, exception));\n                     }\n                 });\n             }\n \n             @Override\n-            public void operationFinished(Object ctx, final MessageSeqId resultOfOperation) {\n+            public void operationFinished(Object ctx, final SubscriptionData resultOfOperation) {\n                 scheduler.execute(new Runnable() {\n                     public void run() {\n-                        ConcurrencyUtils.put(msgIdCallbackQueue, Either.of(resultOfOperation, (PubSubException) null));\n+                        ConcurrencyUtils.put(subDataCallbackQueue, Either.of(resultOfOperation, (PubSubException) null));\n                     }\n                 });\n             }\n@@ -112,9 +113,9 @@ public void testBasics() throws Exception {\n         SubscribeRequest subRequest = SubscribeRequest.newBuilder().setSubscriberId(sub1).build();\n         MessageSeqId msgId = MessageSeqId.newBuilder().setLocalComponent(100).build();\n \n-        sm.serveSubscribeRequest(topic1, subRequest, msgId, msgIdCallback, null);\n+        sm.serveSubscribeRequest(topic1, subRequest, msgId, subDataCallback, null);\n \n-        Assert.assertEquals(ConcurrencyUtils.take(msgIdCallbackQueue).right().getClass(),\n+        Assert.assertEquals(ConcurrencyUtils.take(subDataCallbackQueue).right().getClass(),\n                             PubSubException.ServerNotResponsibleForTopicException.class);\n \n         sm.unsubscribe(topic1, sub1, voidCallback, null);\n@@ -141,21 +142,21 @@ public void testBasics() throws Exception {\n         subRequest = SubscribeRequest.newBuilder().setCreateOrAttach(CreateOrAttach.ATTACH).setSubscriberId(sub1)\n                      .build();\n \n-        sm.serveSubscribeRequest(topic1, subRequest, msgId, msgIdCallback, null);\n-        Assert.assertEquals(ConcurrencyUtils.take(msgIdCallbackQueue).right().getClass(),\n+        sm.serveSubscribeRequest(topic1, subRequest, msgId, subDataCallback, null);\n+        Assert.assertEquals(ConcurrencyUtils.take(subDataCallbackQueue).right().getClass(),\n                             PubSubException.ClientNotSubscribedException.class);\n \n         // now create\n         subRequest = SubscribeRequest.newBuilder().setCreateOrAttach(CreateOrAttach.CREATE).setSubscriberId(sub1)\n                      .build();\n-        sm.serveSubscribeRequest(topic1, subRequest, msgId, msgIdCallback, null);\n-        Assert.assertEquals(msgId.getLocalComponent(), ConcurrencyUtils.take(msgIdCallbackQueue).left().getLocalComponent());\n+        sm.serveSubscribeRequest(topic1, subRequest, msgId, subDataCallback, null);\n+        Assert.assertEquals(msgId.getLocalComponent(), ConcurrencyUtils.take(subDataCallbackQueue).left().getState().getMsgId().getLocalComponent());\n         Assert.assertEquals(msgId.getLocalComponent(), sm.top2sub2seq.get(topic1).get(sub1).getLastConsumeSeqId()\n                             .getLocalComponent());\n \n         // try to create again\n-        sm.serveSubscribeRequest(topic1, subRequest, msgId, msgIdCallback, null);\n-        Assert.assertEquals(ConcurrencyUtils.take(msgIdCallbackQueue).right().getClass(),\n+        sm.serveSubscribeRequest(topic1, subRequest, msgId, subDataCallback, null);\n+        Assert.assertEquals(ConcurrencyUtils.take(subDataCallbackQueue).right().getClass(),\n                             PubSubException.ClientAlreadySubscribedException.class);\n         Assert.assertEquals(msgId.getLocalComponent(), sm.top2sub2seq.get(topic1).get(sub1).getLastConsumeSeqId()\n                             .getLocalComponent());\n@@ -168,8 +169,8 @@ public void testBasics() throws Exception {\n         subRequest = SubscribeRequest.newBuilder().setCreateOrAttach(CreateOrAttach.ATTACH).setSubscriberId(sub1)\n                      .build();\n         MessageSeqId msgId1 = MessageSeqId.newBuilder().setLocalComponent(msgId.getLocalComponent() + 10).build();\n-        sm.serveSubscribeRequest(topic1, subRequest, msgId1, msgIdCallback, null);\n-        Assert.assertEquals(msgId.getLocalComponent(), msgIdCallbackQueue.take().left().getLocalComponent());\n+        sm.serveSubscribeRequest(topic1, subRequest, msgId1, subDataCallback, null);\n+        Assert.assertEquals(msgId.getLocalComponent(), subDataCallbackQueue.take().left().getState().getMsgId().getLocalComponent());\n         Assert.assertEquals(msgId.getLocalComponent(), sm.top2sub2seq.get(topic1).get(sub1).getLastConsumeSeqId()\n                             .getLocalComponent());\n "}]}

