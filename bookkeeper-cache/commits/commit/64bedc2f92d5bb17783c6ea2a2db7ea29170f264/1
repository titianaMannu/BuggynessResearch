{"sha":"64bedc2f92d5bb17783c6ea2a2db7ea29170f264","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NGJlZGMyZjkyZDViYjE3NzgzYzZlYTJhMmRiN2VhMjkxNzBmMjY0","commit":{"author":{"name":"Alex Yarmula","email":"ak@twitter.com","date":"2017-05-25T12:31:57Z"},"committer":{"name":"eolivelli","email":"eolivelli@apache.org","date":"2017-05-25T12:31:57Z"},"message":"BOOKKEEPER-1075: BK LedgerMetadata: more memory-efficient parsing of configs\n\nIt is the contribution from Alex Yarmula\n\ncommit 9d9d7dd26235a9beda4421b7bed750fea1789076\nAuthor: Alex Yarmula <aktwitter.com>\nDate: Wed Sep 23 05:57:30 2015 -0700\n\nBK LedgerMetadata: more memory-efficient parsing of configs\nLooking at the most prevalent client-side memory allocations, I noticed that we allocate 4KB every time we open a ledger. This is caused by allocating a 4KB buffer (in TextFormat.toStringBuilder) to account for the maximum possible Protobufs message, which is unnecessary in our case: we know the exact size of the metadata ( << 500 B) and don't need to allocate more.\nTextFormat.merge(Readable, Message.Builder) is the current method we use. This changes to use TextFormat.merge(CharSequence, Message.Builder), which avoids the extra 4K allocation conversion + an extra StringBuilder.\n\nRB_ID=745700\n\nAuthor: Alex Yarmula <ak@twitter.com>\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Enrico Olivelli, Sijie Guo\n\nCloses #162 from sijie/bk_ledger_metadata_efficiency","tree":{"sha":"e9c3131704bcf82d4b30ce4462e495e3adca9291","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e9c3131704bcf82d4b30ce4462e495e3adca9291"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/64bedc2f92d5bb17783c6ea2a2db7ea29170f264","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/64bedc2f92d5bb17783c6ea2a2db7ea29170f264","html_url":"https://github.com/apache/bookkeeper/commit/64bedc2f92d5bb17783c6ea2a2db7ea29170f264","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/64bedc2f92d5bb17783c6ea2a2db7ea29170f264/comments","author":null,"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"7b1eec47092d0de6776c5a89575dbfc678165ee7","url":"https://api.github.com/repos/apache/bookkeeper/commits/7b1eec47092d0de6776c5a89575dbfc678165ee7","html_url":"https://github.com/apache/bookkeeper/commit/7b1eec47092d0de6776c5a89575dbfc678165ee7"}],"stats":{"total":10,"additions":9,"deletions":1},"files":[{"sha":"b7521485a31dc4fd7d87f0b5e3228224389d7739","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/64bedc2f92d5bb17783c6ea2a2db7ea29170f264/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/64bedc2f92d5bb17783c6ea2a2db7ea29170f264/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=64bedc2f92d5bb17783c6ea2a2db7ea29170f264","patch":"@@ -29,6 +29,7 @@\n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.StringReader;\n+import java.nio.CharBuffer;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Iterator;\n@@ -393,8 +394,15 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version, Optional\n             return parseVersion1Config(lc, reader);\n         }\n \n+        // remaining size is total minus the length of the version line and '\\n'\n+        char[] configBuffer = new char[config.length() - (versionLine.length() + 1)];\n+        if (configBuffer.length != reader.read(configBuffer, 0, configBuffer.length)) {\n+            throw new IOException(\"Invalid metadata buffer\");\n+        }\n+\n         LedgerMetadataFormat.Builder builder = LedgerMetadataFormat.newBuilder();\n-        TextFormat.merge(reader, builder);\n+\n+        TextFormat.merge((CharSequence) CharBuffer.wrap(configBuffer), builder);\n         LedgerMetadataFormat data = builder.build();\n         lc.writeQuorumSize = data.getQuorumSize();        \n         if (data.hasCtime()) {"}]}

