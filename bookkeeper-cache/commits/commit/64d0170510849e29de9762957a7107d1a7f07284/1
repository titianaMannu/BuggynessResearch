{"sha":"64d0170510849e29de9762957a7107d1a7f07284","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NGQwMTcwNTEwODQ5ZTI5ZGU5NzYyOTU3YTcxMDdkMWE3ZjA3Mjg0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T12:01:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T12:01:34Z"},"message":"BOOKKEEPER-758: Add TryReadLastAddConfirmed API (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1598565 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f1386f7530cb4c522aa18146e5680575df066096","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f1386f7530cb4c522aa18146e5680575df066096"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/64d0170510849e29de9762957a7107d1a7f07284","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/64d0170510849e29de9762957a7107d1a7f07284","html_url":"https://github.com/apache/bookkeeper/commit/64d0170510849e29de9762957a7107d1a7f07284","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/64d0170510849e29de9762957a7107d1a7f07284/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"209dbf4982eb997c9691c4331dcaea3b7e4af6d6","url":"https://api.github.com/repos/apache/bookkeeper/commits/209dbf4982eb997c9691c4331dcaea3b7e4af6d6","html_url":"https://github.com/apache/bookkeeper/commit/209dbf4982eb997c9691c4331dcaea3b7e4af6d6"}],"stats":{"total":386,"additions":383,"deletions":3},"files":[{"sha":"94542cb8db1092aa72c517f1d36782269d3b31b2","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/64d0170510849e29de9762957a7107d1a7f07284/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/64d0170510849e29de9762957a7107d1a7f07284/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=64d0170510849e29de9762957a7107d1a7f07284","patch":"@@ -196,6 +196,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-756: Use HashedwheelTimer for request timeouts for PCBC (sijie via ivank)\n \n+        BOOKKEEPER-758: Add TryReadLastAddConfirmed API (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"e245ea310070cf33099ec803b80d742f298b184c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/64d0170510849e29de9762957a7107d1a7f07284/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/64d0170510849e29de9762957a7107d1a7f07284/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperClientStats.java?ref=64d0170510849e29de9762957a7107d1a7f07284","patch":"@@ -30,6 +30,8 @@\n     public final static String READ_OP = \"READ_ENTRY\";\n     public final static String PENDING_ADDS = \"NUM_PENDING_ADD\";\n     public final static String ENSEMBLE_CHANGES = \"NUM_ENSEMBLE_CHANGE\";\n+    public final static String LAC_UPDATE_HITS = \"LAC_UPDATE_HITS\";\n+    public final static String LAC_UPDATE_MISSES = \"LAC_UPDATE_MISSES\";\n \n     // per channel stats\n     public final static String CHANNEL_SCOPE = \"per_channel_bookie_client\";"},{"sha":"7c5ab3ad56057919e1eeb19cc2bf069a12861c30","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":85,"deletions":3,"changes":88,"blob_url":"https://github.com/apache/bookkeeper/blob/64d0170510849e29de9762957a7107d1a7f07284/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/64d0170510849e29de9762957a7107d1a7f07284/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=64d0170510849e29de9762957a7107d1a7f07284","patch":"@@ -29,6 +29,7 @@\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n@@ -79,6 +80,8 @@\n     final Queue<PendingAddOp> pendingAddOps = new ConcurrentLinkedQueue<PendingAddOp>();\n \n     final Counter ensembleChangeCounter;\n+    final Counter lacUpdateHitsCounter;\n+    final Counter lacUpdateMissesCounter;\n \n     LedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n                  DigestType digestType, byte[] password)\n@@ -104,6 +107,8 @@\n                 metadata.getWriteQuorumSize(), metadata.getAckQuorumSize(), metadata.getEnsembleSize());\n \n         ensembleChangeCounter = bk.getStatsLogger().getCounter(BookKeeperClientStats.ENSEMBLE_CHANGES);\n+        lacUpdateHitsCounter = bk.getStatsLogger().getCounter(BookKeeperClientStats.LAC_UPDATE_HITS);\n+        lacUpdateMissesCounter = bk.getStatsLogger().getCounter(BookKeeperClientStats.LAC_UPDATE_MISSES);\n         bk.getStatsLogger().registerGauge(BookKeeperClientStats.PENDING_ADDS,\n                                           new Gauge<Integer>() {\n                                               public Integer getDefaultValue() {\n@@ -547,6 +552,17 @@ public void safeRun() {\n         }\n     }\n \n+    synchronized void updateLastConfirmed(long lac, long len) {\n+        if (lac > lastAddConfirmed) {\n+            lastAddConfirmed = lac;\n+            lacUpdateHitsCounter.inc();\n+        } else {\n+            lacUpdateMissesCounter.inc();\n+        }\n+        lastAddPushed = Math.max(lastAddPushed, lac);\n+        length = Math.max(length, len);\n+    }\n+\n     /**\n      * Obtains asynchronously the last confirmed write from a quorum of bookies. This\n      * call obtains the the last add confirmed each bookie has received for this ledger\n@@ -577,9 +593,7 @@ public void asyncReadLastConfirmed(final ReadLastConfirmedCallback cb, final Obj\n                 @Override\n                 public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {\n                     if (rc == BKException.Code.OK) {\n-                        lastAddConfirmed = Math.max(lastAddConfirmed, data.lastAddConfirmed);\n-                        lastAddPushed = Math.max(lastAddPushed, data.lastAddConfirmed);\n-                        length = Math.max(length, data.length);\n+                        updateLastConfirmed(data.lastAddConfirmed, data.length);\n                         cb.readLastConfirmedComplete(rc, data.lastAddConfirmed, ctx);\n                     } else {\n                         cb.readLastConfirmedComplete(rc, INVALID_ENTRY_ID, ctx);\n@@ -589,6 +603,49 @@ public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData dat\n         new ReadLastConfirmedOp(this, innercb).initiate();\n     }\n \n+    /**\n+     * Obtains asynchronously the last confirmed write from a quorum of bookies.\n+     * It is similar as\n+     * {@link #asyncTryReadLastConfirmed(org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback, Object)},\n+     * but it doesn't wait all the responses from the quorum. It would callback\n+     * immediately if it received a LAC which is larger than current LAC.\n+     *\n+     * @see #asyncTryReadLastConfirmed(org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback, Object)\n+     *\n+     * @param cb\n+     *          callback to return read last confirmed\n+     * @param ctx\n+     *          callback context\n+     */\n+    public void asyncTryReadLastConfirmed(final ReadLastConfirmedCallback cb, final Object ctx) {\n+        boolean isClosed;\n+        long lastEntryId;\n+        synchronized (this) {\n+            isClosed = metadata.isClosed();\n+            lastEntryId = metadata.getLastEntryId();\n+        }\n+        if (isClosed) {\n+            cb.readLastConfirmedComplete(BKException.Code.OK, lastEntryId, ctx);\n+            return;\n+        }\n+        ReadLastConfirmedOp.LastConfirmedDataCallback innercb = new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n+            AtomicBoolean completed = new AtomicBoolean(false);\n+            @Override\n+            public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {\n+                if (rc == BKException.Code.OK) {\n+                    updateLastConfirmed(data.lastAddConfirmed, data.length);\n+                    if (completed.compareAndSet(false, true)) {\n+                        cb.readLastConfirmedComplete(rc, data.lastAddConfirmed, ctx);\n+                    }\n+                } else {\n+                    if (completed.compareAndSet(false, true)) {\n+                        cb.readLastConfirmedComplete(rc, INVALID_ENTRY_ID, ctx);\n+                    }\n+                }\n+            }\n+        };\n+        new TryReadLastConfirmedOp(this, innercb, getLastAddConfirmed()).initiate();\n+    }\n \n     /**\n      * Context objects for synchronous call to read last confirmed.\n@@ -653,6 +710,31 @@ public long readLastConfirmed()\n         return ctx.getlastConfirmed();\n     }\n \n+    /**\n+     * Obtains synchronously the last confirmed write from a quorum of bookies.\n+     * It is similar as {@link #readLastConfirmed()}, but it doesn't wait all the responses\n+     * from the quorum. It would callback immediately if it received a LAC which is larger\n+     * than current LAC.\n+     *\n+     * @see #readLastConfirmed()\n+     *\n+     * @return The entry id of the last confirmed write or {@link #INVALID_ENTRY_ID INVALID_ENTRY_ID}\n+     *         if no entry has been confirmed\n+     * @throws InterruptedException\n+     * @throws BKException\n+     */\n+    public long tryReadLastConfirmed() throws InterruptedException, BKException {\n+        LastConfirmedCtx ctx = new LastConfirmedCtx();\n+        asyncTryReadLastConfirmed(new SyncReadLastConfirmedCallback(), ctx);\n+        synchronized (ctx) {\n+            while (!ctx.ready()) {\n+                ctx.wait();\n+            }\n+        }\n+        if (ctx.getRC() != BKException.Code.OK) throw BKException.create(ctx.getRC());\n+        return ctx.getlastConfirmed();\n+    }\n+\n     // close the ledger and send fails to all the adds in the pipeline\n     void handleUnrecoverableErrorDuringAdd(int rc) {\n         if (metadata.isInRecovery()) {"},{"sha":"01b81c9ff53c829550d4f906a5182d64638302dd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/apache/bookkeeper/blob/64d0170510849e29de9762957a7107d1a7f07284/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/64d0170510849e29de9762957a7107d1a7f07284/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/TryReadLastConfirmedOp.java?ref=64d0170510849e29de9762957a7107d1a7f07284","patch":"@@ -0,0 +1,107 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import org.apache.bookkeeper.client.DigestManager.RecoveryData;\n+import org.apache.bookkeeper.client.ReadLastConfirmedOp.LastConfirmedDataCallback;\n+import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n+import org.jboss.netty.buffer.ChannelBuffer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+\n+/**\n+ * This op is try to read last confirmed without involving quorum coverage checking.\n+ * Use {@link ReadLastConfirmedOp} if you need quorum coverage checking.\n+ */\n+class TryReadLastConfirmedOp implements ReadEntryCallback {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(TryReadLastConfirmedOp.class);\n+\n+    final LedgerHandle lh;\n+    final LastConfirmedDataCallback cb;\n+\n+    int numResponsesPending;\n+    volatile boolean hasValidResponse = false;\n+    volatile boolean completed = false;\n+    RecoveryData maxRecoveredData;\n+\n+    TryReadLastConfirmedOp(LedgerHandle lh, LastConfirmedDataCallback cb, long lac) {\n+        this.lh = lh;\n+        this.cb = cb;\n+        this.maxRecoveredData = new RecoveryData(lac, 0);\n+        this.numResponsesPending = lh.metadata.getEnsembleSize();\n+    }\n+\n+    public void initiate() {\n+        for (int i = 0; i < lh.metadata.currentEnsemble.size(); i++) {\n+            lh.bk.bookieClient.readEntry(lh.metadata.currentEnsemble.get(i),\n+                                         lh.ledgerId,\n+                                         BookieProtocol.LAST_ADD_CONFIRMED,\n+                                         this, i);\n+        }\n+    }\n+\n+    @Override\n+    public void readEntryComplete(int rc, long ledgerId, long entryId, ChannelBuffer buffer, Object ctx) {\n+        if (LOG.isTraceEnabled()) {\n+            LOG.trace(\"TryReadLastConfirmed received response for (lid={}, eid={}) : {}\",\n+                    new Object[] { ledgerId, entryId, rc });\n+        }\n+\n+        int bookieIndex = (Integer) ctx;\n+        numResponsesPending--;\n+        if (BKException.Code.OK == rc) {\n+            try {\n+                RecoveryData recoveryData = lh.macManager.verifyDigestAndReturnLastConfirmed(buffer);\n+                if (LOG.isTraceEnabled()) {\n+                    LOG.trace(\"Received lastAddConfirmed (lac={}, length={}) from bookie({}) for (lid={}).\",\n+                            new Object[] { recoveryData.lastAddConfirmed, recoveryData.length, bookieIndex, ledgerId });\n+                }\n+                if (recoveryData.lastAddConfirmed > maxRecoveredData.lastAddConfirmed) {\n+                    maxRecoveredData = recoveryData;\n+                    // callback immediately\n+                    cb.readLastConfirmedDataComplete(BKException.Code.OK, maxRecoveredData);\n+                }\n+                hasValidResponse = true;\n+            } catch (BKException.BKDigestMatchException e) {\n+                LOG.error(\"Mac mismatch for ledger: \" + ledgerId + \", entry: \" + entryId\n+                          + \" while reading last entry from bookie: \"\n+                          + lh.metadata.currentEnsemble.get(bookieIndex));\n+            }\n+        } else if (BKException.Code.UnauthorizedAccessException == rc && !completed) {\n+            cb.readLastConfirmedDataComplete(rc, maxRecoveredData);\n+            completed = true;\n+        } else if (BKException.Code.NoSuchLedgerExistsException == rc ||\n+                   BKException.Code.NoSuchEntryException == rc) {\n+            hasValidResponse = true;\n+        }\n+        if (numResponsesPending == 0 && !completed) {\n+            if (!hasValidResponse) {\n+                // no success called\n+                cb.readLastConfirmedDataComplete(BKException.Code.LedgerRecoveryException, maxRecoveredData);\n+            } else {\n+                // callback\n+                cb.readLastConfirmedDataComplete(BKException.Code.OK, maxRecoveredData);\n+            }\n+            completed = true;\n+        }\n+    }\n+}"},{"sha":"314c73d4be70b296d1943fa0ed0a1c6e3a212113","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/apache/bookkeeper/blob/64d0170510849e29de9762957a7107d1a7f07284/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","raw_url":"https://github.com/apache/bookkeeper/raw/64d0170510849e29de9762957a7107d1a7f07284/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java?ref=64d0170510849e29de9762957a7107d1a7f07284","patch":"@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public class TestTryReadLastConfirmed extends BookKeeperClusterTestCase {\n+\n+    static final Logger logger = LoggerFactory.getLogger(TestTryReadLastConfirmed.class);\n+\n+    final DigestType digestType;\n+\n+    public TestTryReadLastConfirmed() {\n+        super(6);\n+        this.digestType = DigestType.CRC32;\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testTryReadLACWhenAllBookiesUp() throws Exception {\n+        final int numEntries = 3;\n+\n+        final LedgerHandle lh = bkc.createLedger(3, 3, 1, digestType, \"\".getBytes());\n+        LedgerHandle readLh = bkc.openLedgerNoRecovery(lh.getId(), digestType, \"\".getBytes());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, readLh.getLastAddConfirmed());\n+        // add entries\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry((\"data\" + i).getBytes());\n+        }\n+        final AtomicBoolean success = new AtomicBoolean(false);\n+        final AtomicInteger numCallbacks = new AtomicInteger(0);\n+        final CountDownLatch latch1 = new CountDownLatch(1);\n+        readLh.asyncTryReadLastConfirmed(new AsyncCallback.ReadLastConfirmedCallback() {\n+            @Override\n+            public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n+                numCallbacks.incrementAndGet();\n+                if (BKException.Code.OK == rc) {\n+                    success.set(true);\n+                } else {\n+                    success.set(false);\n+                }\n+                latch1.countDown();\n+            }\n+        }, null);\n+        latch1.await();\n+        TimeUnit.SECONDS.sleep(2);\n+        assertTrue(success.get());\n+        assertTrue(numCallbacks.get() == 1);\n+        assertEquals(numEntries - 2, readLh.getLastAddConfirmed());\n+        // try read last confirmed again\n+        success.set(false);\n+        numCallbacks.set(0);\n+        final CountDownLatch latch2 = new CountDownLatch(1);\n+        readLh.asyncTryReadLastConfirmed(new AsyncCallback.ReadLastConfirmedCallback() {\n+            @Override\n+            public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n+                numCallbacks.incrementAndGet();\n+                if (BKException.Code.OK == rc && lastConfirmed == (numEntries - 2)) {\n+                    success.set(true);\n+                } else {\n+                    success.set(false);\n+                }\n+                latch2.countDown();\n+            }\n+        }, null);\n+        latch2.await();\n+        TimeUnit.SECONDS.sleep(2);\n+        assertTrue(success.get());\n+        assertTrue(numCallbacks.get() == 1);\n+        assertEquals(numEntries - 2, readLh.getLastAddConfirmed());\n+\n+        lh.close();\n+        readLh.close();\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testTryReadLaCWhenSomeBookiesDown() throws Exception {\n+        final int numEntries = 3;\n+        final int ensembleSize = 3;\n+        final LedgerHandle lh = bkc.createLedger(ensembleSize, 1, 1, digestType, \"\".getBytes());\n+        LedgerHandle readLh = bkc.openLedgerNoRecovery(lh.getId(), digestType, \"\".getBytes());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, readLh.getLastAddConfirmed());\n+        // add entries\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry((\"data\" + i).getBytes());\n+        }\n+        for (int i = 0; i < numEntries; i++) {\n+            ServerConfiguration[] confs = new ServerConfiguration[ensembleSize - 1];\n+            for (int j = 0; j < ensembleSize - 1; j++) {\n+                int idx = (i + 1 + j) % ensembleSize;\n+                confs[j] = killBookie(lh.getLedgerMetadata().currentEnsemble.get(idx));\n+            }\n+\n+            final AtomicBoolean success = new AtomicBoolean(false);\n+            final AtomicInteger numCallbacks = new AtomicInteger(0);\n+            final CountDownLatch latch = new CountDownLatch(1);\n+            final int entryId = i;\n+            readLh.asyncTryReadLastConfirmed(new AsyncCallback.ReadLastConfirmedCallback() {\n+                @Override\n+                public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n+                    numCallbacks.incrementAndGet();\n+                    if (BKException.Code.OK == rc) {\n+                        success.set(lastConfirmed == (entryId - 1));\n+                    } else {\n+                        success.set(false);\n+                    }\n+                    latch.countDown();\n+                }\n+            }, null);\n+            latch.await();\n+            assertTrue(success.get());\n+            assertTrue(numCallbacks.get() == 1);\n+\n+            lh.close();\n+            readLh.close();\n+\n+            // start the bookies\n+            for (ServerConfiguration conf : confs) {\n+                bs.add(startBookie(conf));\n+                bsConfs.add(conf);\n+            }\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testTryReadLACWhenAllBookiesDown() throws Exception {\n+        final int numEntries = 2;\n+        final int ensembleSize = 3;\n+        final LedgerHandle lh = bkc.createLedger(ensembleSize, 1, 1, digestType, \"\".getBytes());\n+        LedgerHandle readLh = bkc.openLedgerNoRecovery(lh.getId(), digestType, \"\".getBytes());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, readLh.getLastAddConfirmed());\n+        // add entries\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry((\"data\" + i).getBytes());\n+        }\n+        for (int i = 0; i < ensembleSize; i++) {\n+            killBookie(lh.getLedgerMetadata().currentEnsemble.get(i));\n+        }\n+        final AtomicBoolean success = new AtomicBoolean(false);\n+        final AtomicInteger numCallbacks = new AtomicInteger(0);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        readLh.asyncTryReadLastConfirmed(new AsyncCallback.ReadLastConfirmedCallback() {\n+            @Override\n+            public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n+                logger.info(\"ReadLastConfirmedComplete : rc = {}, lac = {}.\", rc, lastConfirmed);\n+                numCallbacks.incrementAndGet();\n+                if (BKException.Code.OK == rc) {\n+                    success.set(lastConfirmed == LedgerHandle.INVALID_ENTRY_ID);\n+                } else {\n+                    success.set(false);\n+                }\n+                latch.countDown();\n+            }\n+        }, null);\n+        latch.await();\n+        TimeUnit.SECONDS.sleep(2);\n+        assertFalse(success.get());\n+        assertTrue(numCallbacks.get() == 1);\n+\n+        lh.close();\n+        readLh.close();\n+    }\n+}"}]}

