{"sha":"66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NmEwZGRlMTRmOGQ2OWViZGQ0MDlmM2EyMDExZDAzYmNkNmI2MmNk","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T10:18:30Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T10:18:30Z"},"message":"BOOKKEEPER-431: Duplicate definition of COOKIES_NODE (uma via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1418637 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dbd24e1ca30b5a5d925b9490c9030d8d540ba23d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dbd24e1ca30b5a5d925b9490c9030d8d540ba23d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","html_url":"https://github.com/apache/bookkeeper/commit/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"baef283841c05bcb4ebceaaa5d540f7a30e4af1a","url":"https://api.github.com/repos/apache/bookkeeper/commits/baef283841c05bcb4ebceaaa5d540f7a30e4af1a","html_url":"https://github.com/apache/bookkeeper/commit/baef283841c05bcb4ebceaaa5d540f7a30e4af1a"}],"stats":{"total":255,"additions":151,"deletions":104},"files":[{"sha":"ede78fbc29d8d739b5952c17389d066f1e5abd73","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -124,6 +124,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-475: BookieRecoveryTest#testSyncBookieRecoveryToRandomBookiesCheckForDupes() iterates too much (ivank via fpj)\n \n+\tBOOKKEEPER-431: Duplicate definition of COOKIES_NODE (uma via fpj)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"d3f91228788e98185e61a50972b95bbec9b270cf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -48,6 +48,7 @@\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n@@ -73,8 +74,6 @@\n  */\n \n public class Bookie extends Thread {\n-    public static final String INSTANCEID = \"INSTANCEID\";\n-    public static final String READONLY = \"readonly\";\n \n     static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n \n@@ -93,7 +92,6 @@\n \n     // ZK registration path for this bookie\n     private final String bookieRegistrationPath;\n-    static final String CURRENT_DIR = \"current\";\n \n     private LedgerDirsManager ledgerDirsManager;\n \n@@ -262,7 +260,8 @@ void shutdown() throws InterruptedException {\n     public static void checkDirectoryStructure(File dir) throws IOException {\n         if (!dir.exists()) {\n             File parent = dir.getParentFile();\n-            File preV3versionFile = new File(dir.getParent(), Cookie.VERSION_FILENAME);\n+            File preV3versionFile = new File(dir.getParent(),\n+                    BookKeeperConstants.VERSION_FILENAME);\n \n             final AtomicBoolean oldDataExists = new AtomicBoolean(false);\n             parent.list(new FilenameFilter() {\n@@ -376,7 +375,7 @@ private String getInstanceId(ZooKeeper zk) throws KeeperException,\n         String instanceId = null;\n         try {\n             byte[] data = zk.getData(conf.getZkLedgersRootPath() + \"/\"\n-                    + INSTANCEID, false, null);\n+                    + BookKeeperConstants.INSTANCEID, false, null);\n             instanceId = new String(data);\n         } catch (KeeperException.NoNodeException e) {\n             LOG.warn(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n@@ -389,7 +388,7 @@ public LedgerDirsManager getLedgerDirsManager() {\n     }\n \n     public static File getCurrentDirectory(File dir) {\n-        return new File(dir, CURRENT_DIR);\n+        return new File(dir, BookKeeperConstants.CURRENT_DIR);\n     }\n \n     public static File[] getCurrentDirectories(File[] dirs) {\n@@ -675,19 +674,20 @@ public void transitionToReadOnlyMode() {\n         LOG.info(\"Transitioning Bookie to ReadOnly mode,\"\n                 + \" and will serve only read requests from clients!\");\n         try {\n-            if (null == zk\n-                    .exists(this.bookieRegistrationPath + READONLY, false)) {\n+            if (null == zk.exists(this.bookieRegistrationPath\n+                    + BookKeeperConstants.READONLY, false)) {\n                 try {\n-                    zk.create(this.bookieRegistrationPath + READONLY,\n-                            new byte[0], Ids.OPEN_ACL_UNSAFE,\n-                            CreateMode.PERSISTENT);\n+                    zk.create(this.bookieRegistrationPath\n+                            + BookKeeperConstants.READONLY, new byte[0],\n+                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                 } catch (NodeExistsException e) {\n                     // this node is just now created by someone.\n                 }\n             }\n             // Create the readonly node\n-            zk.create(this.bookieRegistrationPath + READONLY + \"/\" + getMyId(), new byte[0], Ids.OPEN_ACL_UNSAFE,\n-                    CreateMode.EPHEMERAL);\n+            zk.create(this.bookieRegistrationPath\n+                    + BookKeeperConstants.READONLY + \"/\" + getMyId(),\n+                    new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n             // Clear the current registered node\n             zk.delete(zkBookieRegPath, -1);\n         } catch (IOException e) {"},{"sha":"28a8daa8dd103f92befc363160d5b206b97d0aa4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -30,7 +30,6 @@\n import java.io.IOException;\n import java.io.StringReader;\n \n-import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n import org.apache.zookeeper.ZooKeeper;\n@@ -39,6 +38,7 @@\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.DataFormats.CookieFormat;\n@@ -65,8 +65,6 @@\n     static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n \n     static final int CURRENT_COOKIE_LAYOUT_VERSION = 4;\n-    static final String COOKIE_NODE = \"cookies\";\n-    static final String VERSION_FILENAME = \"VERSION\";\n     private int layoutVersion = 0;\n     private String bookieHost = null;\n     private String journalDir = null;\n@@ -155,7 +153,8 @@ private static Cookie parse(BufferedReader reader) throws IOException {\n     }\n \n     void writeToDirectory(File directory) throws IOException {\n-        File versionFile = new File(directory, VERSION_FILENAME);\n+        File versionFile = new File(directory,\n+                BookKeeperConstants.VERSION_FILENAME);\n \n         FileOutputStream fos = new FileOutputStream(versionFile);\n         BufferedWriter bw = null;\n@@ -172,7 +171,8 @@ void writeToDirectory(File directory) throws IOException {\n \n     void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n             throws KeeperException, InterruptedException, UnknownHostException {\n-        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\" + COOKIE_NODE;\n+        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n+                + BookKeeperConstants.COOKIE_NODE;\n         String zkPath = getZkPath(conf);\n         byte[] data = toString().getBytes();\n         if (znodeVersion != -1) {\n@@ -237,7 +237,8 @@ static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n     }\n \n     static Cookie readFromDirectory(File directory) throws IOException {\n-        File versionFile = new File(directory, VERSION_FILENAME);\n+        File versionFile = new File(directory,\n+                BookKeeperConstants.VERSION_FILENAME);\n         BufferedReader reader = new BufferedReader(new FileReader(versionFile));\n         try {\n             return parse(reader);\n@@ -252,7 +253,8 @@ public void setInstanceId(String instanceId) {\n \n     private static String getZkPath(ServerConfiguration conf)\n             throws UnknownHostException {\n-        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\" + COOKIE_NODE;\n+        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n+                + BookKeeperConstants.COOKIE_NODE;\n         return bookieCookiePath + \"/\" + StringUtils.addrToString(Bookie.getBookieAddress(conf));\n     }\n }"},{"sha":"a4d9cdacefbb1de9b2fa095573a23c161bdf4268","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -21,14 +21,14 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.HardLink;\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n-import org.apache.commons.cli.ParseException;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -55,7 +55,6 @@\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.KeeperException;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n  * Application for upgrading the bookkeeper filesystem\n@@ -110,7 +109,8 @@ public boolean accept(File dir, String name) {\n \n     private static int detectPreviousVersion(File directory) throws IOException {\n         String[] files = directory.list(BOOKIE_FILES_FILTER);\n-        File v2versionFile = new File(directory, Cookie.VERSION_FILENAME);\n+        File v2versionFile = new File(directory,\n+                BookKeeperConstants.VERSION_FILENAME);\n         if (files.length == 0 && !v2versionFile.exists()) { // no old data, so we're ok\n             return Cookie.CURRENT_COOKIE_LAYOUT_VERSION;\n         }\n@@ -198,7 +198,7 @@ public static void upgrade(ServerConfiguration conf)\n                     continue;\n                 }\n                 try {\n-                    File curDir = new File(d, Bookie.CURRENT_DIR);\n+                    File curDir = new File(d, BookKeeperConstants.CURRENT_DIR);\n                     File tmpDir = new File(d, \"upgradeTmp.\" + System.nanoTime());\n                     deferredMoves.put(curDir, tmpDir);\n                     if (!tmpDir.mkdirs()) {\n@@ -260,7 +260,8 @@ public static void finalizeUpgrade(ServerConfiguration conf)\n                 int version = detectPreviousVersion(d);\n                 if (version < 3) {\n                     if (version == 2) {\n-                        File v2versionFile = new File(d, Cookie.VERSION_FILENAME);\n+                        File v2versionFile = new File(d,\n+                                BookKeeperConstants.VERSION_FILENAME);\n                         if (!v2versionFile.delete()) {\n                             LOG.warn(\"Could not delete old version file {}\", v2versionFile);\n                         }\n@@ -297,7 +298,8 @@ public static void rollback(ServerConfiguration conf)\n                     int version = detectPreviousVersion(d);\n \n                     if (version <= Cookie.CURRENT_COOKIE_LAYOUT_VERSION) {\n-                        File curDir = new File(d, Bookie.CURRENT_DIR);\n+                        File curDir = new File(d,\n+                                BookKeeperConstants.CURRENT_DIR);\n                         FileUtils.deleteDirectory(curDir);\n                     } else {\n                         throw new BookieException.UpgradeException(\n@@ -334,7 +336,8 @@ public static void main(String[] args) throws Exception {\n         root.addAppender(new org.apache.log4j.ConsoleAppender(\n                                  new org.apache.log4j.PatternLayout(\"%-5p [%t]: %m%n\")));\n         root.setLevel(org.apache.log4j.Level.ERROR);\n-        root.getLogger(FileSystemUpgrade.class).setLevel(org.apache.log4j.Level.INFO);\n+        org.apache.log4j.Logger.getLogger(FileSystemUpgrade.class).setLevel(\n+                org.apache.log4j.Level.INFO);\n \n         final Options opts = new Options();\n         opts.addOption(\"c\", \"conf\", true, \"Configuration for Bookie\");"},{"sha":"c09e67ccde46579a95f478fa806a49a3c0c644a8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -23,7 +23,6 @@\n import java.io.IOException;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Executors;\n-import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n@@ -37,8 +36,6 @@\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;"},{"sha":"8062ad9e016103d66c608a991fcd014d9dce1557","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -30,14 +30,14 @@\n import java.util.Random;\n import java.util.UUID;\n \n-import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.AsyncCallback.RecoverCallback;\n import org.apache.bookkeeper.client.BookKeeper.SyncOpenCallback;\n import org.apache.bookkeeper.client.LedgerFragmentReplicator.SingleFragmentCallback;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n@@ -56,9 +56,6 @@\n  */\n public class BookKeeperAdmin {\n     private static Logger LOG = LoggerFactory.getLogger(BookKeeperAdmin.class);\n-\n-    static final String COLON = \":\";\n-\n     // ZK client instance\n     private ZooKeeper zk;\n     // ZK ledgers related String constants\n@@ -373,11 +370,12 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n                         return;\n                     }\n                     for (String bookieNode : children) {\n-                        if (Bookie.READONLY.equals(bookieNode)) {\n+                        if (BookKeeperConstants.READONLY\n+                                        .equals(bookieNode)) {\n                             // exclude the readonly node from available bookies.\n                             continue;\n                         }\n-                        String parts[] = bookieNode.split(COLON);\n+                        String parts[] = bookieNode.split(BookKeeperConstants.COLON);\n                         if (parts.length < 2) {\n                             LOG.error(\"Bookie Node retrieved from ZK has invalid name format: \" + bookieNode);\n                             cb.recoverComplete(BKException.Code.ZKException, context);\n@@ -754,16 +752,17 @@ public static boolean format(ClientConfiguration conf,\n \n             // Clear the INSTANCEID\n             try {\n-                zkc.delete(conf.getZkLedgersRootPath() + \"/\" + Bookie.INSTANCEID, -1);\n+                zkc.delete(conf.getZkLedgersRootPath() + \"/\"\n+                        + BookKeeperConstants.INSTANCEID, -1);\n             } catch (KeeperException.NoNodeException e) {\n                 LOG.debug(\"INSTANCEID not exists in zookeeper to delete\");\n             }\n \n             // create INSTANCEID\n             String instanceId = UUID.randomUUID().toString();\n-            zkc.create(conf.getZkLedgersRootPath() + \"/\" + Bookie.INSTANCEID,\n-                    instanceId.getBytes(), Ids.OPEN_ACL_UNSAFE,\n-                    CreateMode.PERSISTENT);\n+            zkc.create(conf.getZkLedgersRootPath() + \"/\"\n+                    + BookKeeperConstants.INSTANCEID, instanceId.getBytes(),\n+                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n \n             LOG.info(\"Successfully formatted BookKeeper metadata\");\n         } finally {"},{"sha":"e273ed82ddec7a8bebcdfff5a965109afbb418c8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -30,9 +30,9 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.bookkeeper.util.StringUtils;\n import org.slf4j.Logger;\n@@ -111,7 +111,7 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n \n         // Just exclude the 'readonly' znode to exclude r-o bookies from\n         // available nodes list.\n-        children.remove(Bookie.READONLY);\n+        children.remove(BookKeeperConstants.READONLY);\n \n         HashSet<InetSocketAddress> newBookieAddrs = convertToBookieAddresses(children);\n \n@@ -248,7 +248,8 @@ public InetSocketAddress getAdditionalBookie(List<InetSocketAddress> existingBoo\n         public ReadOnlyBookieWatcher(ClientConfiguration conf, BookKeeper bk) throws KeeperException,\n                 InterruptedException {\n             this.bk = bk;\n-            readOnlyBookieRegPath = conf.getZkAvailableBookiesPath() + \"/\" + Bookie.READONLY;\n+            readOnlyBookieRegPath = conf.getZkAvailableBookiesPath() + \"/\"\n+                    + BookKeeperConstants.READONLY;\n             if (null == bk.getZkHandle().exists(readOnlyBookieRegPath, false)) {\n                 try {\n                     bk.getZkHandle().create(readOnlyBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,"},{"sha":"d3a5bc0639526deeb5270278a5b1c1606b73720b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -23,14 +23,14 @@\n import java.util.Set;\n import java.util.Map;\n \n-import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.versioning.Version;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -51,11 +51,6 @@\n \n     static Logger LOG = LoggerFactory.getLogger(AbstractZkLedgerManager.class);\n \n-    // Ledger Node Prefix\n-    static public final String LEDGER_NODE_PREFIX = \"L\";\n-    static final String AVAILABLE_NODE = \"available\";\n-    static final String COOKIES_NODE = \"cookies\";\n-\n     protected final AbstractConfiguration conf;\n     protected final ZooKeeper zk;\n     protected final String ledgerRootPath;\n@@ -348,12 +343,11 @@ public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n      * @return true  if the znode is a special znode otherwise false\n      */\n     protected boolean isSpecialZnode(String znode) {\n-        if (AVAILABLE_NODE.equals(znode)\n-                || COOKIES_NODE.equals(znode)\n-                || LedgerLayout.LAYOUT_ZNODE.equals(znode)\n-                || Bookie.INSTANCEID.equals(znode)\n-                || ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE\n-                        .equals(znode)) {\n+        if (BookKeeperConstants.AVAILABLE_NODE.equals(znode)\n+                || BookKeeperConstants.COOKIE_NODE.equals(znode)\n+                || BookKeeperConstants.LAYOUT_ZNODE.equals(znode)\n+                || BookKeeperConstants.INSTANCEID.equals(znode)\n+                || BookKeeperConstants.UNDER_REPLICATION_NODE.equals(znode)) {\n             return true;\n         }\n         return false;"},{"sha":"00940e7df2b4d34d9b48d051349b25c73165be6b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -27,6 +27,7 @@\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.AsyncCallback;\n@@ -79,7 +80,8 @@\n     public FlatLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         super(conf, zk);\n \n-        ledgerPrefix = ledgerRootPath + \"/\" + LEDGER_NODE_PREFIX;\n+        ledgerPrefix = ledgerRootPath + \"/\"\n+                + BookKeeperConstants.LEDGER_NODE_PREFIX;\n     }\n \n     @Override"},{"sha":"ad7d4c54885242659a730b59e6fb0e8e616f9dff","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -31,6 +31,7 @@\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.zookeeper.AsyncCallback;\n@@ -198,10 +199,11 @@ public String getLedgerPath(long ledgerId) {\n         String ledgerIdStr = StringUtils.getZKStringId(ledgerId);\n         // do 2-4-4 split\n         StringBuilder sb = new StringBuilder();\n-        sb.append(ledgerRootPath).append(\"/\")\n-          .append(ledgerIdStr.substring(0, 2)).append(\"/\")\n-          .append(ledgerIdStr.substring(2, 6)).append(\"/\")\n-          .append(LEDGER_NODE_PREFIX).append(ledgerIdStr.substring(6, 10));\n+        sb.append(ledgerRootPath).append(\"/\").append(\n+                ledgerIdStr.substring(0, 2)).append(\"/\").append(\n+                ledgerIdStr.substring(2, 6)).append(\"/\").append(\n+                BookKeeperConstants.LEDGER_NODE_PREFIX).append(\n+                ledgerIdStr.substring(6, 10));\n         return sb.toString();\n     }\n \n@@ -215,8 +217,8 @@ public long getLedgerId(String pathName) throws IOException {\n         if (hierarchicalParts.length != 3) {\n             throw new IOException(\"it is not a valid hierarchical path name : \" + pathName);\n         }\n-        hierarchicalParts[2] =\n-            hierarchicalParts[2].substring(LEDGER_NODE_PREFIX.length());\n+        hierarchicalParts[2] = hierarchicalParts[2]\n+                .substring(BookKeeperConstants.LEDGER_NODE_PREFIX.length());\n         return getLedgerId(hierarchicalParts);\n     }\n "},{"sha":"d358ffbec2ecadef0e7becc4ff3f28d96ec4b982","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n \n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooDefs.Ids;\n@@ -36,8 +37,7 @@\n class LedgerLayout {\n     static final Logger LOG = LoggerFactory.getLogger(LedgerLayout.class);\n \n-    // Znode name to store layout information\n-    public static final String LAYOUT_ZNODE = \"LAYOUT\";\n+   \n     // version of compability layout version\n     public static final int LAYOUT_MIN_COMPAT_VERSION = 1;\n     // version of ledger layout metadata\n@@ -52,7 +52,7 @@\n      */\n     public static LedgerLayout readLayout(final ZooKeeper zk, final String ledgersRoot)\n             throws IOException, KeeperException {\n-        String ledgersLayout = ledgersRoot + \"/\" + LAYOUT_ZNODE;\n+        String ledgersLayout = ledgersRoot + \"/\" + BookKeeperConstants.LAYOUT_ZNODE;\n \n         try {\n             LedgerLayout layout;\n@@ -141,17 +141,19 @@ public int getLayoutFormatVersion() {\n      */\n     public void store(final ZooKeeper zk, String ledgersRoot) \n             throws IOException, KeeperException, InterruptedException {\n-        String ledgersLayout = ledgersRoot + \"/\" + LAYOUT_ZNODE;\n-        zk.create(ledgersLayout, serialize(), \n-                  Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        String ledgersLayout = ledgersRoot + \"/\"\n+                + BookKeeperConstants.LAYOUT_ZNODE;\n+        zk.create(ledgersLayout, serialize(), Ids.OPEN_ACL_UNSAFE,\n+                CreateMode.PERSISTENT);\n     }\n \n     /**\n      * Delete the LAYOUT from zookeeper\n      */\n     public void delete(final ZooKeeper zk, String ledgersRoot)\n             throws KeeperException, InterruptedException {\n-        String ledgersLayout = ledgersRoot + \"/\" + LAYOUT_ZNODE;\n+        String ledgersLayout = ledgersRoot + \"/\"\n+                + BookKeeperConstants.LAYOUT_ZNODE;\n         zk.delete(ledgersLayout, -1);\n     }\n "},{"sha":"5d7ee9f58d68b0911483c2f08fcf73463f9c36c6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -21,6 +21,7 @@\n import org.apache.bookkeeper.replication.ReplicationEnableCb;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.DataFormats.LedgerRereplicationLayoutFormat;\n@@ -73,8 +74,6 @@\n public class ZkLedgerUnderreplicationManager implements LedgerUnderreplicationManager {\n     static final Logger LOG = LoggerFactory.getLogger(ZkLedgerUnderreplicationManager.class);\n     static final Charset UTF8 = Charset.forName(\"UTF-8\");\n-    public static final String UNDER_REPLICATION_NODE = \"underreplication\";\n-    static final String DISABLE_NODE = \"disable\";\n     static final String LAYOUT=\"BASIC\";\n     static final int LAYOUT_VERSION=1;\n \n@@ -104,9 +103,10 @@\n     public ZkLedgerUnderreplicationManager(AbstractConfiguration conf, ZooKeeper zkc)\n             throws KeeperException, InterruptedException, ReplicationException.CompatibilityException {\n         basePath = conf.getZkLedgersRootPath() + '/'\n-                + ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE;\n-        layoutZNode = basePath + '/' + LedgerLayout.LAYOUT_ZNODE;\n-        urLedgerPath = basePath + \"/ledgers\";\n+                + BookKeeperConstants.UNDER_REPLICATION_NODE;\n+        layoutZNode = basePath + '/' + BookKeeperConstants.LAYOUT_ZNODE;\n+        urLedgerPath = basePath\n+                + BookKeeperConstants.ZK_LEDGERS_ROOT_PATH_DEFAULT;\n         urLockPath = basePath + \"/locks\";\n \n         idExtractionPattern = Pattern.compile(\"urL(\\\\d+)$\");\n@@ -448,8 +448,8 @@ public void disableLedgerReplication()\n         LOG.debug(\"disableLedegerReplication()\");\n         try {\n             ZkUtils.createFullPathOptimistic(zkc, basePath + '/'\n-                    + ZkLedgerUnderreplicationManager.DISABLE_NODE, \"\"\n-                    .getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                    + BookKeeperConstants.DISABLE_NODE, \"\".getBytes(),\n+                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             LOG.info(\"Auto ledger re-replication is disabled!\");\n         } catch (KeeperException ke) {\n             LOG.error(\"Exception while stopping replication\", ke);\n@@ -467,8 +467,7 @@ public void enableLedgerReplication()\n             throws ReplicationException.UnavailableException {\n         LOG.debug(\"enableLedegerReplication()\");\n         try {\n-            zkc.delete(basePath + '/'\n-                    + ZkLedgerUnderreplicationManager.DISABLE_NODE, -1);\n+            zkc.delete(basePath + '/' + BookKeeperConstants.DISABLE_NODE, -1);\n             LOG.info(\"Resuming automatic ledger re-replication\");\n         } catch (KeeperException ke) {\n             LOG.error(\"Exception while resuming ledger replication\", ke);\n@@ -486,7 +485,8 @@ public boolean isLedgerReplicationEnabled()\n             throws ReplicationException.UnavailableException {\n         LOG.debug(\"isLedgerReplicationEnabled()\");\n         try {\n-            if (null != zkc.exists(basePath + '/' + DISABLE_NODE, false)) {\n+            if (null != zkc.exists(basePath + '/'\n+                    + BookKeeperConstants.DISABLE_NODE, false)) {\n                 return false;\n             }\n             return true;\n@@ -514,7 +514,8 @@ public void process(WatchedEvent e) {\n             }\n         };\n         try {\n-            if (null == zkc.exists(basePath + '/' + DISABLE_NODE, w)) {\n+            if (null == zkc.exists(basePath + '/'\n+                    + BookKeeperConstants.DISABLE_NODE, w)) {\n                 cb.operationComplete(0, null);\n                 return;\n             }"},{"sha":"dd54a71b774b29acc521b7f37db0ab0cce4f1d3e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -22,7 +22,6 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.MalformedURLException;\n import java.net.UnknownHostException;"},{"sha":"68498b7b97bcd34b077cf8eaeecf3e2a8d12779d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -27,6 +27,7 @@\n \n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.commons.lang.StringUtils;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n@@ -86,7 +87,8 @@ public AuditorElector(String bookieId, AbstractConfiguration conf,\n         this.bookieId = bookieId;\n         this.conf = conf;\n         this.zkc = zkc;\n-        basePath = conf.getZkLedgersRootPath() + \"/underreplication\";\n+        basePath = conf.getZkLedgersRootPath() + '/'\n+                + BookKeeperConstants.UNDER_REPLICATION_NODE;\n         electionPath = basePath + \"/auditorelection\";\n         createElectorPath();\n     }"},{"sha":"dec261b9532d71753e4b3546643434819b3174f1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -22,8 +22,6 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n import java.net.MalformedURLException;\n \n import org.apache.bookkeeper.bookie.Bookie;"},{"sha":"f4bb2d09745ee8ee1c732f2ebb16be5b58f23e0b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -75,7 +75,6 @@ public void process(final Long ledgerId,\n                     public void operationComplete(final int rc,\n                             LedgerMetadata ledgerMetadata) {\n                         if (rc == BKException.Code.OK) {\n-                            StringBuilder bookieAddr;\n                             for (Map.Entry<Long, ArrayList<InetSocketAddress>> ensemble : ledgerMetadata\n                                     .getEnsembles().entrySet()) {\n                                 for (InetSocketAddress bookie : ensemble"},{"sha":"a24a1f4b9c993c8efd35e32aa6c3d488b062cdc3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -0,0 +1,45 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+package org.apache.bookkeeper.util;\r\n+\r\n+/**\r\n+ * This class contains constants used in BookKeeper\r\n+ */\r\n+public class BookKeeperConstants {\r\n+\r\n+    // //////////////////////////\r\n+    // /////Basic constants//////\r\n+    // //////////////////////////\r\n+    public static final String LEDGER_NODE_PREFIX = \"L\";\r\n+    public static final String COLON = \":\";\r\n+    public static final String VERSION_FILENAME = \"VERSION\";\r\n+    public final static String PASSWD = \"passwd\";\r\n+    public static final String CURRENT_DIR = \"current\";\r\n+    public static final String READONLY = \"readonly\";\r\n+    \r\n+    // //////////////////////////\r\n+    // ///// Znodes//////////////\r\n+    // //////////////////////////\r\n+    public static final String AVAILABLE_NODE = \"available\";\r\n+    public static final String COOKIE_NODE = \"cookies\";\r\n+    public static final String UNDER_REPLICATION_NODE = \"underreplication\";\r\n+    public static final String DISABLE_NODE = \"disable\";\r\n+    public static final String ZK_LEDGERS_ROOT_PATH_DEFAULT = \"/ledgers\";\r\n+    public static final String LAYOUT_ZNODE = \"LAYOUT\";\r\n+    public static final String INSTANCEID = \"INSTANCEID\";\r\n+}\r"},{"sha":"d37c24e7a6481d3b009dc86a17544614f429c855","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -29,6 +29,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.ActiveLedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n import org.junit.Assert;\n@@ -64,7 +65,7 @@ public void setUp() throws Exception {\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n         // create current dir\n-        new File(ledgerDir, Bookie.CURRENT_DIR).mkdir();\n+        new File(ledgerDir, BookKeeperConstants.CURRENT_DIR).mkdir();\n \n         conf = new ServerConfiguration();\n         conf.setZkServers(null);"},{"sha":"9f6e5b5a862e1b10dca16c33649c05c76ca79387","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -22,19 +22,14 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n-import java.util.Random;\n import java.lang.reflect.Field;\n \n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.junit.After;\n-import org.junit.Before;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.junit.Test;\n-import org.junit.Assert.*;\n \n public class LedgerLayoutTest extends BookKeeperClusterTestCase {\n \n@@ -99,7 +94,8 @@ public void testBadVersionLedgerLayout() throws Exception {\n     @Test\n     public void testAbsentLedgerManagerLayout() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n-        String ledgersLayout = conf.getZkLedgersRootPath() + \"/\" + LedgerLayout.LAYOUT_ZNODE;\n+        String ledgersLayout = conf.getZkLedgersRootPath() + \"/\"\n+                + BookKeeperConstants.LAYOUT_ZNODE;\n         // write bad format ledger layout\n         StringBuilder sb = new StringBuilder();\n         sb.append(LedgerLayout.LAYOUT_FORMAT_VERSION).append(\"\\n\");\n@@ -118,7 +114,8 @@ public void testAbsentLedgerManagerLayout() throws Exception {\n     public void testBaseLedgerManagerLayout() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         String rootPath = conf.getZkLedgersRootPath();\n-        String ledgersLayout = rootPath + \"/\" + LedgerLayout.LAYOUT_ZNODE;\n+        String ledgersLayout = rootPath + \"/\"\n+                + BookKeeperConstants.LAYOUT_ZNODE;\n         // write bad format ledger layout\n         StringBuilder sb = new StringBuilder();\n         sb.append(LedgerLayout.LAYOUT_FORMAT_VERSION).append(\"\\n\")"},{"sha":"faed8a96e5ab9ebbec33dff802cd5254d77edc21","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -22,8 +22,8 @@\n package org.apache.bookkeeper.replication;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.nio.charset.Charset;\n@@ -46,11 +46,11 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n-import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.lang.StringUtils;\n@@ -104,8 +104,9 @@ public void setupZooKeeper() throws Exception {\n         lmf1 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc1);\n         lmf2 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc2);\n         basePath = conf.getZkLedgersRootPath() + '/'\n-                + ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE;\n-        urLedgerPath = basePath + \"/ledgers\";\n+                + BookKeeperConstants.UNDER_REPLICATION_NODE;\n+        urLedgerPath = basePath\n+                + BookKeeperConstants.ZK_LEDGERS_ROOT_PATH_DEFAULT;\n     }\n \n     @After"},{"sha":"e1904249dafee21d7b7e96893463143c29bf0bd3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","patch":"@@ -36,8 +36,8 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n-import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.KeeperException;\n@@ -68,8 +68,8 @@ public TestReplicationWorker(String ledgerManagerFactory) {\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         basePath = baseClientConf.getZkLedgersRootPath() + '/'\n-                + ZkLedgerUnderreplicationManager.UNDER_REPLICATION_NODE\n-                + \"/ledgers\";\n+                + BookKeeperConstants.UNDER_REPLICATION_NODE\n+                + BookKeeperConstants.ZK_LEDGERS_ROOT_PATH_DEFAULT;\n         baseConf.setRereplicationEntryBatchSize(3);\n     }\n "}]}

