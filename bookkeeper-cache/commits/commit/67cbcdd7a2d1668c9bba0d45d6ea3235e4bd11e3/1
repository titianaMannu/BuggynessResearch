{"sha":"67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2N2NiY2RkN2EyZDE2NjhjOWJiYTBkNDVkNmVhMzIzNWU0YmQxMWUz","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-05-24T05:12:56Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-05-24T05:12:56Z"},"message":"BOOKKEEPER-263: ZK ledgers root path is hard coded (Aniruddha via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1342145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95af2580f638dae801d3aa7a936d0ac3f7814942","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/95af2580f638dae801d3aa7a936d0ac3f7814942"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","html_url":"https://github.com/apache/bookkeeper/commit/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"24e7fb03f6c9e3666aa83cc174b5088926eae3d1","url":"https://api.github.com/repos/apache/bookkeeper/commits/24e7fb03f6c9e3666aa83cc174b5088926eae3d1","html_url":"https://github.com/apache/bookkeeper/commit/24e7fb03f6c9e3666aa83cc174b5088926eae3d1"}],"stats":{"total":59,"additions":39,"deletions":20},"files":[{"sha":"841bec1b591263d97c239cd9de4caaad8513fdb9","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","patch":"@@ -176,6 +176,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-241: Add documentation for bookie entry log compaction (sijie via fpj)\n \n+\tBOOKKEEPER-263: ZK ledgers root path is hard coded (Aniruddha via sijie)\n+\n       hedwig-server/\n \n         BOOKKEEPER-77: Add a console client for hedwig (Sijie Guo via ivank)"},{"sha":"59cc32ea590fcb4fd57f4be195b83c3db76bbcb7","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java?ref=67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","patch":"@@ -413,6 +413,7 @@ private static long warmUp(byte[] data, int ledgers, int ensemble, int qSize,\n             throws KeeperException, IOException, InterruptedException, BKException {\n         final CountDownLatch connectLatch = new CountDownLatch(1);\n         final int bookies;\n+        String bookieRegistrationPath = conf.getZkAvailableBookiesPath();\n         ZooKeeper zk = null;\n         try {\n             final String servers = conf.getZkServers();\n@@ -427,7 +428,7 @@ public void process(WatchedEvent event) {\n                 LOG.error(\"Couldn't connect to zookeeper at \" + servers);\n                 throw new IOException(\"Couldn't connect to zookeeper \" + servers);\n             }\n-            bookies = zk.getChildren(\"/ledgers/available\", false).size();\n+            bookies = zk.getChildren(bookieRegistrationPath, false).size();\n         } finally {\n             if (zk != null) {\n                 zk.close();"},{"sha":"eae08a330c227013c401b9693903ae1814ba30e4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","patch":"@@ -74,7 +74,7 @@\n     static final long METAENTRY_ID_LEDGER_KEY = -0x1000;\n \n     // ZK registration path for this bookie\n-    static final String BOOKIE_REGISTRATION_PATH = \"/ledgers/available/\";\n+    private final String bookieRegistrationPath;\n     static final String CURRENT_DIR = \"current\";\n \n     // ZooKeeper client instance for the Bookie\n@@ -342,6 +342,7 @@ public static File getCurrentDirectory(File dir) {\n     public Bookie(ServerConfiguration conf)\n             throws IOException, KeeperException, InterruptedException, BookieException {\n         super(\"Bookie-\" + conf.getBookiePort());\n+        this.bookieRegistrationPath = conf.getZkAvailableBookiesPath() + \"/\";\n         this.conf = conf;\n         this.journalDirectory = getCurrentDirectory(conf.getJournalDir());\n         this.ledgerDirectories = getCurrentDirectories(conf.getLedgerDirs());\n@@ -490,7 +491,7 @@ private void registerBookie(int port) throws IOException {\n         }\n         // Create the ZK ephemeral node for this Bookie.\n         try {\n-            zk.create(BOOKIE_REGISTRATION_PATH + InetAddress.getLocalHost().getHostAddress() + \":\" + port, new byte[0],\n+            zk.create(this.bookieRegistrationPath + InetAddress.getLocalHost().getHostAddress() + \":\" + port, new byte[0],\n                       Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n         } catch (Exception e) {\n             LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\", e);"},{"sha":"3024ff9706ae9396663fedbc79b428a474870863","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","patch":"@@ -60,8 +60,7 @@\n     static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n \n     static final int CURRENT_COOKIE_LAYOUT_VERSION = 3;\n-    static final String BOOKIE_COOKIE_PATH = \"/ledgers/cookies\";\n-\n+    static final String COOKIE_NODE = \"cookies\";\n     static final String VERSION_FILENAME = \"VERSION\";\n     private int layoutVersion = 0;\n     private String bookieHost = null;\n@@ -126,18 +125,19 @@ void writeToDirectory(File directory) throws IOException {\n \n     void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n             throws KeeperException, InterruptedException, UnknownHostException {\n+        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\" + COOKIE_NODE;\n         String zkPath = getZkPath(conf);\n         byte[] data = toString().getBytes();\n         if (znodeVersion != -1) {\n             zk.setData(zkPath, data, znodeVersion);\n         } else {\n-            if (zk.exists(BOOKIE_COOKIE_PATH, false) == null) {\n+            if (zk.exists(bookieCookiePath, false) == null) {\n                 try {\n-                    zk.create(BOOKIE_COOKIE_PATH, new byte[0],\n+                    zk.create(bookieCookiePath, new byte[0],\n                               Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n                 } catch (KeeperException.NodeExistsException nne) {\n                     LOG.info(\"More than one bookie tried to create {} at once. Safe to ignore\",\n-                             BOOKIE_COOKIE_PATH);\n+                             bookieCookiePath);\n                 }\n             }\n             zk.create(zkPath, data,\n@@ -190,6 +190,7 @@ static Cookie readFromDirectory(File directory) throws IOException {\n \n     private static String getZkPath(ServerConfiguration conf)\n             throws UnknownHostException {\n-        return BOOKIE_COOKIE_PATH + \"/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + conf.getBookiePort();\n+        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\" + COOKIE_NODE;\n+        return bookieCookiePath + \"/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + conf.getBookiePort();\n     }\n }"},{"sha":"504c5b7e82036096905decaed0336e0a6c985337","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","patch":"@@ -98,7 +98,7 @@\n      *          A list of one of more servers on which zookeeper is running. The\n      *          client assumes that the running bookies have been registered with\n      *          zookeeper under the path\n-     *          {@link BookieWatcher#BOOKIE_REGISTRATION_PATH}\n+     *          {@link BookieWatcher#bookieRegistrationPath}\n      * @throws IOException\n      * @throws InterruptedException\n      * @throws KeeperException\n@@ -135,7 +135,7 @@ public void process(WatchedEvent event) {\n                 });\n         this.channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                                 Executors.newCachedThreadPool());\n-        bookieWatcher = new BookieWatcher(this);\n+        bookieWatcher = new BookieWatcher(conf, this);\n         bookieWatcher.readBookiesBlocking();\n         mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n@@ -191,7 +191,7 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFac\n         this.conf = conf;\n         this.zk = zk;\n         this.channelFactory = channelFactory;\n-        bookieWatcher = new BookieWatcher(this);\n+        bookieWatcher = new BookieWatcher(conf, this);\n         bookieWatcher.readBookiesBlocking();\n         mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);"},{"sha":"73fe7d4265eb1bd39e2fd506971830020ae10cdf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","patch":"@@ -63,7 +63,7 @@\n     // ZK client instance\n     private ZooKeeper zk;\n     // ZK ledgers related String constants\n-    static final String BOOKIES_PATH = BookieWatcher.BOOKIE_REGISTRATION_PATH;\n+    private final String bookiesPath;\n \n     // BookKeeper client instance\n     private BookKeeper bkc;\n@@ -135,7 +135,8 @@ public void process(WatchedEvent event) {\n                 }\n             }\n         });\n-\n+        // Create the bookie path\n+        bookiesPath = conf.getZkAvailableBookiesPath();\n         // Create the BookKeeper client instance\n         bkc = new BookKeeper(conf);\n         DIGEST_TYPE = conf.getBookieRecoveryDigestType();\n@@ -265,7 +266,7 @@ public void recoverComplete(int rc, Object ctx) {\n     public void asyncRecoverBookieData(final InetSocketAddress bookieSrc, final InetSocketAddress bookieDest,\n                                        final RecoverCallback cb, final Object context) {\n         // Sync ZK to make sure we're reading the latest bookie data.\n-        zk.sync(BOOKIES_PATH, new AsyncCallback.VoidCallback() {\n+        zk.sync(bookiesPath, new AsyncCallback.VoidCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx) {\n                 if (rc != Code.OK.intValue()) {\n@@ -305,7 +306,7 @@ private void getAvailableBookies(final InetSocketAddress bookieSrc, final InetSo\n             // Now poll ZK to get the active ledgers\n             getActiveLedgers(bookieSrc, bookieDest, cb, context, availableBookies);\n         } else {\n-            zk.getChildren(BOOKIES_PATH, null, new AsyncCallback.ChildrenCallback() {\n+            zk.getChildren(bookiesPath, null, new AsyncCallback.ChildrenCallback() {\n                 @Override\n                 public void processResult(int rc, String path, Object ctx, List<String> children) {\n                     if (rc != Code.OK.intValue()) {"},{"sha":"03e02be9cb4d182a5aeeeabcb04825d9a57c21f2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","patch":"@@ -30,6 +30,7 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.bookkeeper.util.StringUtils;\n import org.slf4j.Logger;\n@@ -50,7 +51,8 @@\n class BookieWatcher implements Watcher, ChildrenCallback {\n     static final Logger logger = LoggerFactory.getLogger(BookieWatcher.class);\n \n-    public static final String BOOKIE_REGISTRATION_PATH = \"/ledgers/available\";\n+    // Bookie registration path in ZK\n+    private final String bookieRegistrationPath;\n     static final Set<InetSocketAddress> EMPTY_SET = new HashSet<InetSocketAddress>();\n     public static int ZK_CONNECT_BACKOFF_SEC = 1;\n \n@@ -66,8 +68,10 @@ public void safeRun() {\n         }\n     };\n \n-    public BookieWatcher(BookKeeper bk) {\n+    public BookieWatcher(ClientConfiguration conf, BookKeeper bk) {\n         this.bk = bk;\n+        // ZK bookie registration path\n+        this.bookieRegistrationPath = conf.getZkAvailableBookiesPath();\n         this.scheduler = Executors.newSingleThreadScheduledExecutor();\n     }\n \n@@ -80,7 +84,7 @@ public void readBookies() {\n     }\n \n     public void readBookies(ChildrenCallback callback) {\n-        bk.getZkHandle().getChildren(BOOKIE_REGISTRATION_PATH, this, callback, null);\n+        bk.getZkHandle().getChildren(this.bookieRegistrationPath, this, callback, null);\n     }\n \n     @Override"},{"sha":"bc62d4977eaae9f24ff3ef28bf4071b53f40ce4e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java?ref=67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","patch":"@@ -35,7 +35,7 @@\n     // Ledger Manager\n     protected final static String LEDGER_MANAGER_TYPE = \"ledgerManagerType\";\n     protected final static String ZK_LEDGERS_ROOT_PATH = \"zkLedgersRootPath\";\n-\n+    protected final static String AVAILABLE_NODE = \"available\";\n     protected AbstractConfiguration() {\n         super();\n         // add configuration for system properties\n@@ -102,4 +102,13 @@ public void setZkLedgersRootPath(String zkLedgersPath) {\n     public String getZkLedgersRootPath() {\n         return getString(ZK_LEDGERS_ROOT_PATH, \"/ledgers\");\n     }\n+\n+    /**\n+     * Get the node under which available bookies are stored\n+     *\n+     * @return Node under which available bookies are stored.\n+     */\n+    public String getZkAvailableBookiesPath() {\n+        return getZkLedgersRootPath() + \"/\" + AVAILABLE_NODE;\n+    }\n }"}]}

