{"sha":"6823a35ceafcaf3d8802a8e502883d3d07e891f7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ODIzYTM1Y2VhZmNhZjNkODgwMmE4ZTUwMjg4M2QzZDA3ZTg5MWY3","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-09-16T14:55:38Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-09-16T14:55:38Z"},"message":"BOOKKEEPER-59: Race condition in netty code allocates and orphans resources (BK-5 revisited) (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1171607 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c5d1428af4db94cf7518c7378550594f9ca7536a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c5d1428af4db94cf7518c7378550594f9ca7536a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6823a35ceafcaf3d8802a8e502883d3d07e891f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6823a35ceafcaf3d8802a8e502883d3d07e891f7","html_url":"https://github.com/apache/bookkeeper/commit/6823a35ceafcaf3d8802a8e502883d3d07e891f7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6823a35ceafcaf3d8802a8e502883d3d07e891f7/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba9ebc213c14aa5d16a26f2e0601a39ac5888e10","url":"https://api.github.com/repos/apache/bookkeeper/commits/ba9ebc213c14aa5d16a26f2e0601a39ac5888e10","html_url":"https://github.com/apache/bookkeeper/commit/ba9ebc213c14aa5d16a26f2e0601a39ac5888e10"}],"stats":{"total":41,"additions":22,"deletions":19},"files":[{"sha":"3239183428b23691893c31ca334f91e364898342","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/6823a35ceafcaf3d8802a8e502883d3d07e891f7/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/6823a35ceafcaf3d8802a8e502883d3d07e891f7/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=6823a35ceafcaf3d8802a8e502883d3d07e891f7","patch":"@@ -38,6 +38,8 @@ BUGFIXES:\n \n   BOOKKEEPER-57: NullPointException at bookie.zk@EntryLogger (xulei via ivank)\n \n+  BOOKKEEPER-59: Race condition in netty code allocates and orphans resources (BK-5 revisited) (ivank via fpj)\n+\n  hedwig-server/\n \n   BOOKKEEPER-43: NullPointException when releasing topic (Sijie Guo via breed)"},{"sha":"d70ae27cd58a19209529f35dc62621f3e63b1d17","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/6823a35ceafcaf3d8802a8e502883d3d07e891f7/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/6823a35ceafcaf3d8802a8e502883d3d07e891f7/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=6823a35ceafcaf3d8802a8e502883d3d07e891f7","patch":"@@ -64,8 +64,6 @@ public PerChannelBookieClient lookupClient(InetSocketAddress addr) {\n             PerChannelBookieClient prevChannel = channels.putIfAbsent(addr, channel);\n             if (prevChannel != null) {\n                 channel = prevChannel;\n-            } else {\n-                channel.connect();\n             }\n         }\n "},{"sha":"54b1765414641ad3933e0962675481e4f35fb780","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":20,"deletions":17,"changes":37,"blob_url":"https://github.com/apache/bookkeeper/blob/6823a35ceafcaf3d8802a8e502883d3d07e891f7/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/6823a35ceafcaf3d8802a8e502883d3d07e891f7/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=6823a35ceafcaf3d8802a8e502883d3d07e891f7","patch":"@@ -69,7 +69,6 @@\n     public static int MAX_FRAME_LENGTH = 2 * 1024 * 1024; // 2M\n \n     InetSocketAddress addr;\n-    boolean connected = false;\n     Semaphore opCounterSem = new Semaphore(2000);\n     AtomicLong totalBytesOutstanding;\n     ClientSocketChannelFactory channelFactory;\n@@ -83,18 +82,30 @@\n      * because they are always updated under a lock\n      */\n     Queue<GenericCallback<Void>> pendingOps = new ArrayDeque<GenericCallback<Void>>();\n-    boolean connectionAttemptInProgress;\n     Channel channel = null;\n \n+    private enum ConnectionState {\n+        DISCONNECTED, CONNECTING, CONNECTED\n+            };\n+\n+    private ConnectionState state;\n+            \n     public PerChannelBookieClient(OrderedSafeExecutor executor, ClientSocketChannelFactory channelFactory,\n                                   InetSocketAddress addr, AtomicLong totalBytesOutstanding) {\n         this.addr = addr;\n         this.executor = executor;\n         this.totalBytesOutstanding = totalBytesOutstanding;\n         this.channelFactory = channelFactory;\n+        this.state = ConnectionState.DISCONNECTED;\n     }\n \n-    void connect() {\n+    synchronized private void connect() {\n+        if (state == ConnectionState.CONNECTING) {\n+            return;\n+        } \n+        // Start the connection attempt to the input server host.\n+        state = ConnectionState.CONNECTING;\n+\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Connecting to bookie: \" + addr);\n \n@@ -105,9 +116,6 @@ void connect() {\n         bootstrap.setOption(\"tcpNoDelay\", true);\n         bootstrap.setOption(\"keepAlive\", true);\n \n-        // Start the connection attempt to the input server host.\n-        connectionAttemptInProgress = true;\n-\n         ChannelFuture future = bootstrap.connect(addr);\n \n         future.addListener(new ChannelFutureListener() {\n@@ -122,15 +130,14 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                         LOG.info(\"Successfully connected to bookie: \" + addr);\n                         rc = BKException.Code.OK;\n                         channel = future.getChannel();\n-                        connected = true;\n+                        state = ConnectionState.CONNECTED;\n                     } else {\n                         LOG.error(\"Could not connect to bookie: \" + addr);\n                         rc = BKException.Code.BookieHandleNotAvailableException;\n                         channel = null;\n-                        connected = false;\n+                        state = ConnectionState.DISCONNECTED;\n                     }\n \n-                    connectionAttemptInProgress = false;\n                     PerChannelBookieClient.this.channel = channel;\n \n                     // trick to not do operations under the lock, take the list\n@@ -144,7 +151,6 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 for (GenericCallback<Void> pendingOp : oldPendingOps) {\n                     pendingOp.operationComplete(rc, null);\n                 }\n-\n             }\n         });\n     }\n@@ -153,13 +159,13 @@ void connectIfNeededAndDoOp(GenericCallback<Void> op) {\n         boolean doOpNow;\n \n         // common case without lock first\n-        if (channel != null && connected) {\n+        if (channel != null && state == ConnectionState.CONNECTED) {\n             doOpNow = true;\n         } else {\n \n             synchronized (this) {\n                 // check again under lock\n-                if (channel != null && connected) {\n+                if (channel != null && state == ConnectionState.CONNECTED) {\n                     doOpNow = true;\n                 } else {\n \n@@ -175,10 +181,7 @@ void connectIfNeededAndDoOp(GenericCallback<Void> op) {\n                     // succeeds\n                     pendingOps.add(op);\n \n-                    if (!connectionAttemptInProgress) {\n-                        connect();\n-                    }\n-\n+                    connect();\n                 }\n             }\n         }\n@@ -375,7 +378,7 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n         errorOutOutstandingEntries();\n         channel.close();\n \n-        connected = false;\n+        state = ConnectionState.DISCONNECTED;\n \n         // we don't want to reconnect right away. If someone sends a request to\n         // this address, we will reconnect."}]}

