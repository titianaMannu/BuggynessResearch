{"sha":"685ca079690f8be2cbcfacb615fc0eb5a798b8da","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ODVjYTA3OTY5MGY4YmUyY2JjZmFjYjYxNWZjMGViNWE3OThiOGRh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-26T16:38:02Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-26T16:38:02Z"},"message":"BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1476283 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dc772396ef45aebe17d1624a66f4c65e7de285c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dc772396ef45aebe17d1624a66f4c65e7de285c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/685ca079690f8be2cbcfacb615fc0eb5a798b8da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/685ca079690f8be2cbcfacb615fc0eb5a798b8da","html_url":"https://github.com/apache/bookkeeper/commit/685ca079690f8be2cbcfacb615fc0eb5a798b8da","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/685ca079690f8be2cbcfacb615fc0eb5a798b8da/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"09ec928ee0218caeef5661ba60978fd18b2e553b","url":"https://api.github.com/repos/apache/bookkeeper/commits/09ec928ee0218caeef5661ba60978fd18b2e553b","html_url":"https://github.com/apache/bookkeeper/commit/09ec928ee0218caeef5661ba60978fd18b2e553b"}],"stats":{"total":292,"additions":241,"deletions":51},"files":[{"sha":"3a0223c638728868882a8978d1f7c85017991e51","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/685ca079690f8be2cbcfacb615fc0eb5a798b8da/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/685ca079690f8be2cbcfacb615fc0eb5a798b8da/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=685ca079690f8be2cbcfacb615fc0eb5a798b8da","patch":"@@ -24,6 +24,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-581: Ledger recovery doesn't work correctly when recovery adds force changing ensembles. (sijie via ivank)\n \n+      BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-567: ReadOnlyBookieTest hangs on shutdown (sijie via ivank)"},{"sha":"a588e6c4f1158dfd77574802598b1087c06fd140","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":46,"deletions":26,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=685ca079690f8be2cbcfacb615fc0eb5a798b8da","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,38 +18,34 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n+\n+import static com.google.common.base.Charsets.UTF_8;\n \n import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.Arrays;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n-import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n-import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n+import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n-\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.State;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n import org.apache.bookkeeper.util.SafeRunnable;\n-\n-import static com.google.common.base.Charsets.UTF_8;\n-import com.google.common.util.concurrent.RateLimiter;\n-\n+import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.jboss.netty.buffer.ChannelBuffer;\n+import com.google.common.util.concurrent.RateLimiter;\n \n /**\n  * Ledger handle contains ledger metadata and is used to access the read and\n@@ -298,7 +292,12 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                                         }\n \n                                         metadata.setLength(prevLength);\n-                                        if (metadata.resolveConflict(newMeta)) {\n+                                        if (!metadata.isNewerThan(newMeta)\n+                                                && !metadata.isConflictWith(newMeta)) {\n+                                            // use the new metadata's ensemble, in case re-replication already\n+                                            // replaced some bookies in the ensemble.\n+                                            metadata.setEnsembles(newMeta.getEnsembles());\n+                                            metadata.setVersion(newMeta.version);\n                                             metadata.setLength(length);\n                                             metadata.close(lastAddConfirmed);\n                                             writeLedgerConfig(new CloseCb());\n@@ -486,7 +485,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n         final long currentLength;\n         synchronized(this) {\n             // synchronized on this to ensure that\n-            // the ledger isn't closed between checking and \n+            // the ledger isn't closed between checking and\n             // updating lastAddPushed\n             if (metadata.isClosed()) {\n                 LOG.warn(\"Attempt to add to closed ledger: \" + ledgerId);\n@@ -533,6 +532,7 @@ public void safeRun() {\n \n     public void asyncReadLastConfirmed(final ReadLastConfirmedCallback cb, final Object ctx) {\n         ReadLastConfirmedOp.LastConfirmedDataCallback innercb = new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n+                @Override\n                 public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {\n                     if (rc == BKException.Code.OK) {\n                         lastAddConfirmed = Math.max(lastAddConfirmed, data.lastAddConfirmed);\n@@ -782,6 +782,8 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n         }\n \n         /**\n+         * Specific resolve conflicts happened when multiple bookies failures in same ensemble.\n+         * <p>\n          * Resolving the version conflicts between local ledgerMetadata and zk\n          * ledgerMetadata. This will do the following:\n          * <ul>\n@@ -791,30 +793,44 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n          * if the zk ledgerMetadata still contains the failed bookie, then\n          * update zookeeper with the newBookie otherwise send write request</li>\n          * </ul>\n+         * </p>\n          */\n         private boolean resolveConflict(LedgerMetadata newMeta) {\n-            // close have changed, another client has opened\n-            // the ledger, can't resolve this conflict.\n+            // make sure the ledger isn't closed by other ones.\n             if (metadata.getState() != newMeta.getState()) {\n                 return false;\n             }\n-            // update znode version\n-            metadata.setVersion(newMeta.getVersion());\n-            // Resolve the conflicts if zk metadata still contains failed\n-            // bookie.\n+\n+            // If the failed the bookie is still existed in the metadata (in zookeeper), it means that\n+            // the ensemble change of the failed bookie is failed due to metadata conflicts. so try to\n+            // update the ensemble change metadata again. Otherwise, it means that the ensemble change\n+            // is already succeed, unset the success and re-adding entries.\n             if (newMeta.currentEnsemble.get(ensembleInfo.bookieIndex).equals(\n                     ensembleInfo.addr)) {\n-                // Update ledger metadata in zk, if in-memory metadata doesn't\n-                // contains the failed bookie.\n+                // If the in-memory data doesn't contains the failed bookie, it means the ensemble change\n+                // didn't finish, so try to resolve conflicts with the metadata read from zookeeper and\n+                // update ensemble changed metadata again.\n                 if (!metadata.currentEnsemble.get(ensembleInfo.bookieIndex)\n                         .equals(ensembleInfo.addr)) {\n+                    // if the local metadata is newer than zookeeper metadata, it means that metadata is updated\n+                    // again when it was trying re-reading the metatada, re-kick the reread again\n+                    if (metadata.isNewerThan(newMeta)) {\n+                        rereadMetadata(this);\n+                        return true;\n+                    }\n+                    // make sure the metadata doesn't changed by other ones.\n+                    if (metadata.isConflictWith(newMeta)) {\n+                        return false;\n+                    }\n                     LOG.info(\"Resolve ledger metadata conflict \"\n                             + \"while changing ensemble to: \"\n                             + ensembleInfo.newEnsemble\n                             + \", old meta data is \\n\"\n                             + new String(metadata.serialize(), UTF_8)\n                             + \"\\n, new meta data is \\n\"\n                             + new String(newMeta.serialize(), UTF_8));\n+                    // update znode version\n+                    metadata.setVersion(newMeta.getVersion());\n                     writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n                 }\n             } else {\n@@ -907,6 +923,7 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n          * @param ctx\n          *          control object\n          */\n+        @Override\n         public void readComplete(int rc, LedgerHandle lh,\n                                  Enumeration<LedgerEntry> seq, Object ctx) {\n             \n@@ -935,6 +952,7 @@ public void readComplete(int rc, LedgerHandle lh,\n          * @param ctx\n          *          control object\n          */\n+        @Override\n         public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n \n@@ -948,6 +966,7 @@ public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n         /**\n          * Implementation of  callback interface for synchronous read last confirmed method.\n          */\n+        @Override\n         public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n             LastConfirmedCtx lcCtx = (LastConfirmedCtx) ctx;\n             \n@@ -967,6 +986,7 @@ public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n          * @param lh\n          * @param ctx\n          */\n+        @Override\n         public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setrc(rc);"},{"sha":"ff80611d1f2457c8cf6fa4a96e52c55d39038682","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":25,"deletions":19,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=685ca079690f8be2cbcfacb615fc0eb5a798b8da","patch":"@@ -140,6 +140,10 @@ private LedgerMetadata() {\n         return ensembles;\n     }\n \n+    void setEnsembles(SortedMap<Long, ArrayList<InetSocketAddress>> ensembles) {\n+        this.ensembles = ensembles;\n+    }\n+\n     public int getEnsembleSize() {\n         return ensembleSize;\n     }\n@@ -434,13 +438,26 @@ public Version getVersion() {\n     }\n \n     /**\n-     * Resolve conflict with new updated metadata.\n+     * Is the metadata newer that given <i>newMeta</i>.\n+     *\n+     * @param newMeta\n+     * @return\n+     */\n+    boolean isNewerThan(LedgerMetadata newMeta) {\n+        if (null == version) {\n+            return false;\n+        }\n+        return Version.Occurred.AFTER == version.compare(newMeta.version);\n+    }\n+\n+    /**\n+     * Is the metadata conflict with new updated metadata.\n      *\n      * @param newMeta\n      *          Re-read metadata\n-     * @return true if the conflict has been resolved, otherwise false.\n+     * @return true if the metadata is conflict.\n      */\n-    boolean resolveConflict(LedgerMetadata newMeta) {\n+    boolean isConflictWith(LedgerMetadata newMeta) {\n         /*\n          *  if length & close have changed, then another client has\n          *  opened the ledger, can't resolve this conflict.\n@@ -454,22 +471,17 @@ boolean resolveConflict(LedgerMetadata newMeta) {\n             state != newMeta.state ||\n             !digestType.equals(newMeta.digestType) ||\n             !Arrays.equals(password, newMeta.password)) {\n-            return false;\n+            return true;\n         }\n         if (state == LedgerMetadataFormat.State.CLOSED\n             && lastEntryId != newMeta.lastEntryId) {\n-            return false;\n-        }\n-        // new meta znode version should be larger than old one\n-        if (null != version &&\n-            Version.Occurred.AFTER == version.compare(newMeta.version)) {\n-            return false;\n+            return true;\n         }\n         // if ledger is closed, we can just take the new ensembles\n         if (newMeta.state != LedgerMetadataFormat.State.CLOSED) {\n             // ensemble size should be same\n             if (ensembles.size() != newMeta.ensembles.size()) {\n-                return false;\n+                return true;\n             }\n             // ensemble distribution should be same\n             // we don't check the detail ensemble, since new bookie will be set\n@@ -480,16 +492,10 @@ boolean resolveConflict(LedgerMetadata newMeta) {\n                 Long curKey = keyIter.next();\n                 Long newMetaKey = newMetaKeyIter.next();\n                 if (!curKey.equals(newMetaKey)) {\n-                    return false;\n+                    return true;\n                 }\n             }\n         }\n-        /*\n-         *  if the conflict has been resolved, then update\n-         *  ensemble and znode version\n-         */\n-        ensembles = newMeta.ensembles;\n-        version = newMeta.version;\n-        return true;\n+        return false;\n     }\n }"},{"sha":"654384a476f41877565236a546091016a74360fa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=685ca079690f8be2cbcfacb615fc0eb5a798b8da","patch":"@@ -21,11 +21,11 @@\n import java.util.Set;\n import java.net.InetSocketAddress;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n  * This represents a pending add operation. When it has got success from all\n@@ -132,6 +132,11 @@ void initiate(ChannelBuffer toSend) {\n     public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n         int bookieIndex = (Integer) ctx;\n \n+        if (completed) {\n+            // I am already finished, ignore incoming responses.\n+            // otherwise, we might hit the following error handling logic, which might cause bad things.\n+            return;\n+        }\n \n         switch (rc) {\n         case BKException.Code.OK:"},{"sha":"c129e07584133d6e8736c1de70797f210de7e0c3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java?ref=685ca079690f8be2cbcfacb615fc0eb5a798b8da","patch":"@@ -58,6 +58,7 @@\n \n     private static class SyncObj {\n         volatile int counter;\n+        volatile int rc;\n \n         public SyncObj() {\n             counter = 0;\n@@ -182,13 +183,15 @@ public void testAsyncWritesWithMultipleFailuresInLastEnsemble()\n                 LOG.debug(\"Entries counter = \" + syncObj1.counter);\n                 syncObj1.wait();\n             }\n+            assertEquals(BKException.Code.OK, syncObj1.rc);\n         }\n         // wait for all entries to be acknowledged for the second ledger\n         synchronized (syncObj2) {\n             while (syncObj2.counter < 1) {\n                 LOG.debug(\"Entries counter = \" + syncObj2.counter);\n                 syncObj2.wait();\n             }\n+            assertEquals(BKException.Code.OK, syncObj2.rc);\n         }\n \n         // reading ledger till the last entry\n@@ -217,12 +220,9 @@ private void readEntries(LedgerHandle lh, ArrayList<byte[]> entries)\n \n     @Override\n     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n-        if (rc != BKException.Code.OK)\n-            fail(\"Return code is not OK: \" + rc);\n-\n         SyncObj x = (SyncObj) ctx;\n-\n         synchronized (x) {\n+            x.rc = rc;\n             x.counter++;\n             x.notify();\n         }"},{"sha":"1f3e380c6b4e3b07ff0a95a0bf3550c1fdb04708","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"added","additions":157,"deletions":0,"changes":157,"blob_url":"https://github.com/apache/bookkeeper/blob/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/685ca079690f8be2cbcfacb615fc0eb5a798b8da/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=685ca079690f8be2cbcfacb615fc0eb5a798b8da","patch":"@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class tests the ledger close logic.\n+ */\n+public class LedgerCloseTest extends BookKeeperClusterTestCase {\n+\n+    static Logger LOG = LoggerFactory.getLogger(LedgerCloseTest.class);\n+\n+    static final int READ_TIMEOUT = 1;\n+\n+    final DigestType digestType;\n+\n+    public LedgerCloseTest() {\n+        super(6);\n+        this.digestType = DigestType.CRC32;\n+        // set timeout to a large value which disable it.\n+        baseClientConf.setReadTimeout(99999);\n+        baseConf.setGcWaitTime(999999);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testLedgerCloseDuringUnrecoverableErrors() throws Exception {\n+        int numEntries = 3;\n+        final CountDownLatch addDoneLatch = new CountDownLatch(1);\n+        final CountDownLatch deadIOLatch = new CountDownLatch(1);\n+        final CountDownLatch recoverDoneLatch = new CountDownLatch(1);\n+        final CountDownLatch failedLatch = new CountDownLatch(1);\n+\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n+        // kill first bookie to replace with a unauthorize bookie\n+        InetSocketAddress bookie = lh.getLedgerMetadata().currentEnsemble.get(0);\n+        ServerConfiguration conf = killBookie(bookie);\n+        // replace a unauthorize bookie\n+        startUnauthorizedBookie(conf, addDoneLatch);\n+        // kill second bookie to replace with a dead bookie\n+        bookie = lh.getLedgerMetadata().currentEnsemble.get(1);\n+        conf = killBookie(bookie);\n+        // replace a slow dead bookie\n+        startDeadBookie(conf, deadIOLatch);\n+\n+        // tried to add entries\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.asyncAddEntry(\"data\".getBytes(), new AddCallback() {\n+                @Override\n+                public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                    if (BKException.Code.OK != rc) {\n+                        failedLatch.countDown();\n+                        deadIOLatch.countDown();\n+                    }\n+                    if (0 == entryId) {\n+                        try {\n+                            recoverDoneLatch.await();\n+                        } catch (InterruptedException ie) {\n+                        }\n+                    }\n+                }\n+            }, null);\n+        }\n+        // add finished\n+        addDoneLatch.countDown();\n+        // wait until entries failed due to UnauthorizedAccessException\n+        failedLatch.await();\n+        // simulate the ownership of this ledger is transfer to another host (which is actually\n+        // what we did in Hedwig).\n+        LOG.info(\"Recover ledger {}.\", lh.getId());\n+        ClientConfiguration newConf = new ClientConfiguration();\n+        newConf.addConfiguration(baseClientConf);\n+        BookKeeper newBkc = new BookKeeperTestClient(newConf.setReadTimeout(1));\n+        LedgerHandle recoveredLh = newBkc.openLedger(lh.getId(), digestType, \"\".getBytes());\n+        LOG.info(\"Recover ledger {} done.\", lh.getId());\n+        recoverDoneLatch.countDown();\n+        // wait a bit until add operations failed from second bookie due to IOException\n+        TimeUnit.SECONDS.sleep(5);\n+        // open the ledger again to make sure we ge the right last confirmed.\n+        LedgerHandle newLh = newBkc.openLedger(lh.getId(), digestType, \"\".getBytes());\n+        assertEquals(\"Metadata should be consistent across different opened ledgers\",\n+                recoveredLh.getLastAddConfirmed(), newLh.getLastAddConfirmed());\n+    }\n+\n+    private void startUnauthorizedBookie(ServerConfiguration conf, final CountDownLatch latch)\n+            throws Exception {\n+        Bookie sBookie = new Bookie(conf) {\n+            @Override\n+            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException e) {\n+                }\n+                throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n+            }\n+\n+            @Override\n+            public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                throw new IOException(\"Dead bookie for recovery adds.\");\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, sBookie));\n+    }\n+\n+    // simulate slow adds, then become normal when recover,\n+    // so no ensemble change when recovering ledger on this bookie.\n+    private void startDeadBookie(ServerConfiguration conf, final CountDownLatch latch) throws Exception {\n+        Bookie dBookie = new Bookie(conf) {\n+            @Override\n+            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException e) {\n+                }\n+                // simulate slow adds.\n+                throw new IOException(\"Dead bookie\");\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, dBookie));\n+    }\n+}"}]}

