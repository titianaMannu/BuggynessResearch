{"sha":"68925561dee3e83d5ea76691c3ad196c02d82e06","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ODkyNTU2MWRlZTNlODNkNWVhNzY2OTFjM2FkMTk2YzAyZDgyZTA2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org =  fpj = Flavio Paiva Junqueira fpj@apache.org@apache.org","date":"2014-04-11T23:34:52Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org =  fpj = Flavio Paiva Junqueira fpj@apache.org@apache.org","date":"2014-04-11T23:34:52Z"},"message":"BOOKKEEPER-710. OpenLedgerNoRecovery should watch ensemble change. (sijie, ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1586799 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b8ed0deb271e0d40bceb2d47b113191e354a41d7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b8ed0deb271e0d40bceb2d47b113191e354a41d7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/68925561dee3e83d5ea76691c3ad196c02d82e06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/68925561dee3e83d5ea76691c3ad196c02d82e06","html_url":"https://github.com/apache/bookkeeper/commit/68925561dee3e83d5ea76691c3ad196c02d82e06","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/68925561dee3e83d5ea76691c3ad196c02d82e06/comments","author":null,"committer":null,"parents":[{"sha":"ca8ea972b2094a0055bbca995eeec2cc269f2a3a","url":"https://api.github.com/repos/apache/bookkeeper/commits/ca8ea972b2094a0055bbca995eeec2cc269f2a3a","html_url":"https://github.com/apache/bookkeeper/commit/ca8ea972b2094a0055bbca995eeec2cc269f2a3a"}],"stats":{"total":429,"additions":396,"deletions":33},"files":[{"sha":"00e80c55f29e162222dac3a649a9a8715ac3b5fd","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -17,6 +17,8 @@ Release 4.2.3 - 2013-12-04\n         BOOKKEEPER-714: Logging channel exceptions in PerChannelBookieClient (sijie)\n \n         BOOKKEEPER-726: PerChannelBookieClient should print address that it failed to connect to when it fails to correct (ivank via sijie)\n+       \n+        BOOKKEEPER-710: OpenLedgerNoRecovery should watch ensemble change. (sijie, ivank via fpj)\n \n Release 4.2.2 - 2013-10-02\n "},{"sha":"9e6795c49a3aa9046001cd13df7f9566d398198a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -539,6 +539,16 @@ public void safeRun() {\n      */\n \n     public void asyncReadLastConfirmed(final ReadLastConfirmedCallback cb, final Object ctx) {\n+        boolean isClosed;\n+        long lastEntryId;\n+        synchronized (this) {\n+            isClosed = metadata.isClosed();\n+            lastEntryId = metadata.getLastEntryId();\n+        }\n+        if (isClosed) {\n+            cb.readLastConfirmedComplete(BKException.Code.OK, lastEntryId, ctx);\n+            return;\n+        }\n         ReadLastConfirmedOp.LastConfirmedDataCallback innercb = new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n                 @Override\n                 public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {"},{"sha":"322560bc310eb45d5685d77fb2aae9fe0b1d4725","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -138,7 +138,7 @@ public void operationComplete(int rc, LedgerMetadata metadata) {\n \n         // get the ledger metadata back\n         try {\n-            lh = new ReadOnlyLedgerHandle(bk, ledgerId, metadata, digestType, passwd);\n+            lh = new ReadOnlyLedgerHandle(bk, ledgerId, metadata, digestType, passwd, !doRecovery);\n         } catch (GeneralSecurityException e) {\n             LOG.error(\"Security exception while opening ledger: \" + ledgerId, e);\n             cb.openComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);"},{"sha":"b34de583e4d4e0c1957ea0f08646d915b2d7e689","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":72,"deletions":11,"changes":83,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,46 +18,76 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n+import org.apache.bookkeeper.util.SafeRunnable;\n+import org.apache.bookkeeper.versioning.Version;\n+\n import java.security.GeneralSecurityException;\n import java.net.InetSocketAddress;\n+import java.util.concurrent.RejectedExecutionException;\n \n /**\n- * Read only ledger handle. This ledger handle allows you to \n- * read from a ledger but not to write to it. It overrides all \n+ * Read only ledger handle. This ledger handle allows you to\n+ * read from a ledger but not to write to it. It overrides all\n  * the public write operations from LedgerHandle.\n  * It should be returned for BookKeeper#openLedger operations.\n  */\n-class ReadOnlyLedgerHandle extends LedgerHandle {\n+class ReadOnlyLedgerHandle extends LedgerHandle implements LedgerMetadataListener {\n+\n+    class MetadataUpdater extends SafeRunnable {\n+\n+        final LedgerMetadata m;\n+\n+        MetadataUpdater(LedgerMetadata metadata) {\n+            this.m = metadata;\n+        }\n+\n+        @Override\n+        public void safeRun() {\n+            Version.Occurred occurred =\n+                    ReadOnlyLedgerHandle.this.metadata.getVersion().compare(this.m.getVersion());\n+            if (Version.Occurred.BEFORE == occurred) {\n+                LOG.info(\"Updated ledger metadata for ledger {} to {}.\", ledgerId, this.m);\n+                ReadOnlyLedgerHandle.this.metadata = this.m;\n+            }\n+        }\n+    }\n+\n     ReadOnlyLedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n-                         DigestType digestType, byte[] password)\n+                         DigestType digestType, byte[] password, boolean watch)\n             throws GeneralSecurityException, NumberFormatException {\n         super(bk, ledgerId, metadata, digestType, password);\n+        if (watch) {\n+            bk.getLedgerManager().registerLedgerMetadataListener(ledgerId, this);\n+        }\n     }\n \n     @Override\n-    public void close() \n+    public void close()\n             throws InterruptedException, BKException {\n-        // noop\n+        bk.getLedgerManager().unregisterLedgerMetadataListener(ledgerId, this);\n     }\n \n     @Override\n     public void asyncClose(CloseCallback cb, Object ctx) {\n+        bk.getLedgerManager().unregisterLedgerMetadataListener(ledgerId, this);\n         cb.closeComplete(BKException.Code.OK, this, ctx);\n     }\n-    \n+\n     @Override\n     public long addEntry(byte[] data) throws InterruptedException, BKException {\n         return addEntry(data, 0, data.length);\n     }\n-    \n+\n     @Override\n     public long addEntry(byte[] data, int offset, int length)\n             throws InterruptedException, BKException {\n-        LOG.error(\"Tried to add entry on a Read-Only ledger handle, ledgerid=\" + ledgerId);        \n+        LOG.error(\"Tried to add entry on a Read-Only ledger handle, ledgerid=\" + ledgerId);\n         throw BKException.create(BKException.Code.IllegalOpException);\n     }\n \n@@ -103,4 +131,37 @@ void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n             }\n         }\n     }\n+\n+    @Override\n+    public void onChanged(long lid, LedgerMetadata newMetadata) {\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received ledger metadata update on {} : {}\", lid, newMetadata);\n+        }\n+        if (this.ledgerId != lid) {\n+            return;\n+        }\n+        if (null == newMetadata) {\n+            return;\n+        }\n+        Version.Occurred occurred =\n+                this.metadata.getVersion().compare(newMetadata.getVersion());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Try to update metadata from {} to {} : {}\",\n+                    new Object[] { this.metadata, newMetadata, occurred });\n+        }\n+        if (Version.Occurred.BEFORE == occurred) { // the metadata is updated\n+            try {\n+                bk.mainWorkerPool.submitOrdered(ledgerId, new MetadataUpdater(newMetadata));\n+            } catch (RejectedExecutionException ree) {\n+                LOG.error(\"Failed on submitting updater to update ledger metadata on ledger {} : {}\",\n+                        ledgerId, newMetadata);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"ReadOnlyLedgerHandle(lid = %d, id = %d)\", ledgerId, super.hashCode());\n+    }\n+\n }"},{"sha":"b977ba8cfecb4b43a0f9fa05a3938e9449faefb1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":177,"deletions":2,"changes":179,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -18,15 +18,22 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.NavigableSet;\n import java.util.Set;\n import java.util.TreeSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n@@ -38,22 +45,82 @@\n import org.apache.zookeeper.AsyncCallback.VoidCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n /**\n  * Abstract ledger manager based on zookeeper, which provides common methods such as query zk nodes.\n  */\n-abstract class AbstractZkLedgerManager implements LedgerManager {\n+abstract class AbstractZkLedgerManager implements LedgerManager, Watcher {\n \n     static Logger LOG = LoggerFactory.getLogger(AbstractZkLedgerManager.class);\n \n+    static int ZK_CONNECT_BACKOFF_MS = 200;\n+\n     protected final AbstractConfiguration conf;\n     protected final ZooKeeper zk;\n     protected final String ledgerRootPath;\n \n+    // ledger metadata listeners\n+    protected final ConcurrentMap<Long, Set<LedgerMetadataListener>> listeners =\n+            new ConcurrentHashMap<Long, Set<LedgerMetadataListener>>();\n+    // we use this to prevent long stack chains from building up in callbacks\n+    protected ScheduledExecutorService scheduler;\n+\n+    protected class ReadLedgerMetadataTask implements Runnable, GenericCallback<LedgerMetadata> {\n+\n+        final long ledgerId;\n+\n+        ReadLedgerMetadataTask(long ledgerId) {\n+            this.ledgerId = ledgerId;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (null != listeners.get(ledgerId)) {\n+                LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                readLedgerMetadata(ledgerId, this, AbstractZkLedgerManager.this);\n+            } else {\n+                LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+            }\n+        }\n+\n+        @Override\n+        public void operationComplete(int rc, final LedgerMetadata result) {\n+            if (BKException.Code.OK == rc) {\n+                final Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (null != listenerSet) {\n+                    LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                    scheduler.submit(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            for (LedgerMetadataListener listener : listenerSet) {\n+                                listener.onChanged(ledgerId, result);\n+                            }\n+                        }\n+                    });\n+                }\n+            } else if (BKException.Code.NoSuchLedgerExistsException == rc) {\n+                // the ledger is removed, do nothing\n+                Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                if (null != listenerSet) {\n+                    LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n+                            ledgerId, listenerSet.size());\n+                }\n+            } else {\n+                LOG.warn(\"Failed on read ledger metadata of ledger {} : {}\", ledgerId, rc);\n+                scheduler.schedule(this, ZK_CONNECT_BACKOFF_MS, TimeUnit.MILLISECONDS);\n+            }\n+        }\n+    }\n+\n+\n     /**\n      * ZooKeeper-based Ledger Manager Constructor\n      *\n@@ -66,6 +133,12 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         this.conf = conf;\n         this.zk = zk;\n         this.ledgerRootPath = conf.getZkLedgersRootPath();\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder().setNameFormat(\n+                \"ZkLedgerManagerScheduler-%d\");\n+        this.scheduler = Executors\n+                .newSingleThreadScheduledExecutor(tfb.build());\n+        LOG.debug(\"Using AbstractZkLedgerManager with root path : {}\", ledgerRootPath);\n     }\n \n     /**\n@@ -87,6 +160,53 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n      */\n     protected abstract long getLedgerId(String ledgerPath) throws IOException;\n \n+    @Override\n+    public void process(WatchedEvent event) {\n+        LOG.info(\"Received watched event {} from zookeeper based ledger manager.\", event);\n+        if (Event.EventType.None == event.getType()) {\n+            /** TODO: BOOKKEEPER-537 to handle expire events.\n+            if (Event.KeeperState.Expired == event.getState()) {\n+                LOG.info(\"ZooKeeper client expired on ledger manager.\");\n+                Set<Long> keySet = new HashSet<Long>(listeners.keySet());\n+                for (Long lid : keySet) {\n+                    scheduler.submit(new ReadLedgerMetadataTask(lid));\n+                    LOG.info(\"Re-read ledger metadata for {} after zookeeper session expired.\", lid);\n+                }\n+            }\n+            **/\n+            return;\n+        }\n+        String path = event.getPath();\n+        if (null == path) {\n+            return;\n+        }\n+        final long ledgerId;\n+        try {\n+            ledgerId = getLedgerId(event.getPath());\n+        } catch (IOException ioe) {\n+            LOG.info(\"Received invalid ledger path {} : \", event.getPath(), ioe);\n+            return;\n+        }\n+        switch (event.getType()) {\n+        case NodeDeleted:\n+            Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+            if (null != listenerSet) {\n+                LOG.debug(\"Removed ledger metadata listeners on ledger {} : {}\",\n+                        ledgerId, listenerSet);\n+            } else {\n+                LOG.debug(\"No ledger metadata listeners to remove from ledger {} after it's deleted.\",\n+                        ledgerId);\n+            }\n+            break;\n+        case NodeDataChanged:\n+            new ReadLedgerMetadataTask(ledgerId).run();\n+            break;\n+        default:\n+            LOG.debug(\"Received event {} on {}.\", event.getType(), event.getPath());\n+            break;\n+        }\n+    }\n+\n     /**\n      * Removes ledger metadata from ZooKeeper if version matches.\n      *\n@@ -120,6 +240,15 @@ public void processResult(int rc, String path, Object ctx) {\n                     LOG.warn(\"Ledger node does not exist in ZooKeeper: ledgerId={}\", ledgerId);\n                     bkRc = BKException.Code.NoSuchLedgerExistsException;\n                 } else if (rc == KeeperException.Code.OK.intValue()) {\n+                    // removed listener on ledgerId\n+                    Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Remove registered ledger metadata listeners on ledger {} after ledger is deleted.\",\n+                                ledgerId, listenerSet);\n+                    } else {\n+                        LOG.debug(\"No ledger metadata listeners to remove from ledger {} when it's being deleted.\",\n+                                ledgerId);\n+                    }\n                     bkRc = BKException.Code.OK;\n                 } else {\n                     bkRc = BKException.Code.ZKException;\n@@ -129,9 +258,50 @@ public void processResult(int rc, String path, Object ctx) {\n         }, null);\n     }\n \n+    @Override\n+    public void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+        if (null != listener) {\n+            LOG.info(\"Registered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+            if (listenerSet == null) {\n+                Set<LedgerMetadataListener> newListenerSet = new HashSet<LedgerMetadataListener>();\n+                Set<LedgerMetadataListener> oldListenerSet = listeners.putIfAbsent(ledgerId, newListenerSet);\n+                if (null != oldListenerSet) {\n+                    listenerSet = oldListenerSet;\n+                } else {\n+                    listenerSet = newListenerSet;\n+                }\n+            }\n+            synchronized (listenerSet) {\n+                listenerSet.add(listener);\n+            }\n+            new ReadLedgerMetadataTask(ledgerId).run();\n+        }\n+    }\n+\n+    @Override\n+    public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+        Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+        if (listenerSet != null) {\n+            synchronized (listenerSet) {\n+                if (listenerSet.remove(listener)) {\n+                    LOG.info(\"Unregistered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                }\n+                if (listenerSet.isEmpty()) {\n+                    listeners.remove(ledgerId, listenerSet);\n+                }\n+            }\n+        }\n+    }\n+\n     @Override\n     public void readLedgerMetadata(final long ledgerId, final GenericCallback<LedgerMetadata> readCb) {\n-        zk.getData(getLedgerPath(ledgerId), false, new DataCallback() {\n+        readLedgerMetadata(ledgerId, readCb, null);\n+    }\n+\n+    protected void readLedgerMetadata(final long ledgerId, final GenericCallback<LedgerMetadata> readCb,\n+                                      Watcher watcher) {\n+        zk.getData(getLedgerPath(ledgerId), watcher, new DataCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n                 if (rc == KeeperException.Code.NONODE.intValue()) {\n@@ -296,5 +466,10 @@ protected boolean isSpecialZnode(String znode) {\n \n     @Override\n     public void close() {\n+        try {\n+            scheduler.shutdown();\n+        } catch (Exception e) {\n+            LOG.warn(\"Error when closing zookeeper based ledger manager: \", e);\n+        }\n     }\n }"},{"sha":"2c3c4cd17825f7fc6a20334d24ff8500cf1844ba","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.meta;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n import java.util.Collections;\n@@ -72,9 +71,6 @@\n     // Path to generate global id\n     private final String idGenPath;\n \n-    // we use this to prevent long stack chains from building up in callbacks\n-    ScheduledExecutorService scheduler;\n-\n     /**\n      * Constructor\n      *\n@@ -87,20 +83,9 @@ public HierarchicalLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         super(conf, zk);\n \n         this.idGenPath = ledgerRootPath + IDGENERATION_PREFIX;\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n         LOG.debug(\"Using HierarchicalLedgerManager with root path : {}\", ledgerRootPath);\n     }\n \n-    @Override\n-    public void close() {\n-        try {\n-            scheduler.shutdown();\n-        } catch (Exception e) {\n-            LOG.warn(\"Error when closing HierarchicalLedgerManager : \", e);\n-        }\n-        super.close();\n-    }\n-\n     @Override\n     public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n         ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,"},{"sha":"72290286e1b0227db0b712393411b34a34db0731","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -27,6 +27,7 @@\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.versioning.Version;\n@@ -93,6 +94,26 @@\n      */\n     public void writeLedgerMetadata(long ledgerId, LedgerMetadata metadata, GenericCallback<Void> cb);\n \n+    /**\n+     * Register the ledger metadata <i>listener</i> on <i>ledgerId</i>.\n+     *\n+     * @param ledgerId\n+     *          ledger id.\n+     * @param listener\n+     *          listener.\n+     */\n+    public abstract void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener);\n+\n+    /**\n+     * Unregister the ledger metadata <i>listener</i> on <i>ledgerId</i>.\n+     *\n+     * @param ledgerId\n+     *          ledger id.\n+     * @param listener\n+     *          ledger metadata listener.\n+     */\n+    public abstract void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener);\n+\n     /**\n      * Loop to process all ledgers.\n      * <p>"},{"sha":"f0413dfc13af8634a825f3e9d9d556de239ce272","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -43,6 +43,7 @@\n import org.apache.bookkeeper.metastore.MetastoreTableItem;\n import org.apache.bookkeeper.metastore.Value;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.util.StringUtils;\n@@ -204,6 +205,16 @@ public synchronized T getResult() {\n             this.scheduler = Executors.newSingleThreadScheduledExecutor();\n         }\n \n+        @Override\n+        public void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+            // TODO BOOKKEEPER-747: should provide ledger metadata listener in metadata store.\n+        }\n+\n+        @Override\n+        public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+            // TODO BOOKKEEPER-747: should provide ledger metadata listener in metadata store.\n+        }\n+\n         @Override\n         public void close() {\n             try {"},{"sha":"09f2eccb1b99f09d0ed7f7587608ac1d62802db4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -25,6 +25,7 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.zookeeper.AsyncCallback;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n@@ -45,6 +46,21 @@\n      *\n      */\n \n+    /**\n+     * Listener on ledger metadata changes.\n+     */\n+    public interface LedgerMetadataListener {\n+        /**\n+         * Triggered each time ledger metadata changed.\n+         *\n+         * @param ledgerId\n+         *          ledger id.\n+         * @param metadata\n+         *          new ledger metadata.\n+         */\n+        void onChanged(long ledgerId, LedgerMetadata metadata);\n+    }\n+\n     public interface WriteCallback {\n         void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx);\n     }"},{"sha":"a6524f069bbfa84c1c111241d07d5a53eeb34dd1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -54,7 +54,7 @@ public BookieLedgerIndexer(LedgerManager ledgerManager) {\n     /**\n      * Generating bookie vs its ledgers map by reading all the ledgers in each\n      * bookie and parsing its metadata.\n-     * \n+     *\n      * @return bookie2ledgersMap map of bookie vs ledgers\n      * @throws BKAuditException\n      *             exception while getting bookie-ledgers"},{"sha":"1bb1c07332798f08ddf37c7c6fe9da482724f8bb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.bookie;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,8 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.bookie;\n+\n import java.io.File;\n import java.io.IOException;\n import java.io.IOException;\n@@ -41,6 +41,7 @@\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.versioning.Version;\n \n@@ -344,6 +345,16 @@ public void asyncProcessLedgers(Processor<Long> processor,\n                     unsupported();\n                 }\n                 @Override\n+                public void registerLedgerMetadataListener(long ledgerId,\n+                        LedgerMetadataListener listener) {\n+                    unsupported();\n+                }\n+                @Override\n+                public void unregisterLedgerMetadataListener(long ledgerId,\n+                        LedgerMetadataListener listener) {\n+                    unsupported();\n+                }\n+                @Override\n                 public void close() throws IOException {}\n \n                 void unsupported() {"},{"sha":"57fe2bec4b8747e521bdd96fa9a4a10f38a334bf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/apache/bookkeeper/blob/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","raw_url":"https://github.com/apache/bookkeeper/raw/68925561dee3e83d5ea76691c3ad196c02d82e06/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java?ref=68925561dee3e83d5ea76691c3ad196c02d82e06","patch":"@@ -0,0 +1,71 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+public class TestWatchEnsembleChange extends BookKeeperClusterTestCase {\n+\n+    static Logger LOG = LoggerFactory.getLogger(TestWatchEnsembleChange.class);\n+\n+    final DigestType digestType;\n+\n+    public TestWatchEnsembleChange() {\n+        super(7);\n+        this.digestType = DigestType.CRC32;\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testWatchEnsembleChange() throws Exception {\n+        int numEntries = 10;\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n+        for (int i=0; i<numEntries; i++) {\n+            lh.addEntry((\"data\" + i).getBytes());\n+            LOG.info(\"Added entry {}.\", i);\n+        }\n+        LedgerHandle readLh = bkc.openLedgerNoRecovery(lh.getId(), digestType, \"\".getBytes());\n+        long lastLAC = readLh.getLastAddConfirmed();\n+        assertEquals(numEntries - 2, lastLAC);\n+        ArrayList<InetSocketAddress> ensemble =\n+                lh.getLedgerMetadata().currentEnsemble;\n+        for (InetSocketAddress addr : ensemble) {\n+            killBookie(addr);\n+        }\n+        // write another batch of entries, which will trigger ensemble change\n+        for (int i=0; i<numEntries; i++) {\n+            lh.addEntry((\"data\" + (numEntries + i)).getBytes());\n+            LOG.info(\"Added entry {}.\", (numEntries + i));\n+        }\n+        TimeUnit.SECONDS.sleep(5);\n+        readLh.readLastConfirmed();\n+        assertEquals(2 * numEntries - 2, readLh.getLastAddConfirmed());\n+        readLh.close();\n+        lh.close();\n+    }\n+}"}]}

