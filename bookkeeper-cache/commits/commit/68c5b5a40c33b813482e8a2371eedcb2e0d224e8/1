{"sha":"68c5b5a40c33b813482e8a2371eedcb2e0d224e8","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2OGM1YjVhNDBjMzNiODEzNDgyZThhMjM3MWVlZGNiMmUwZDIyNGU4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-03-18T05:23:37Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-03-18T05:23:37Z"},"message":"BOOKKEEPER-840: Deadlock on flushLock on compaction (sijie)","tree":{"sha":"ffa094b4afa2e132128306eaec4bc32675565542","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ffa094b4afa2e132128306eaec4bc32675565542"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/68c5b5a40c33b813482e8a2371eedcb2e0d224e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/68c5b5a40c33b813482e8a2371eedcb2e0d224e8","html_url":"https://github.com/apache/bookkeeper/commit/68c5b5a40c33b813482e8a2371eedcb2e0d224e8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/68c5b5a40c33b813482e8a2371eedcb2e0d224e8/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"f2928dca4860b3c1461b99b834992e16901c8a87","url":"https://api.github.com/repos/apache/bookkeeper/commits/f2928dca4860b3c1461b99b834992e16901c8a87","html_url":"https://github.com/apache/bookkeeper/commit/f2928dca4860b3c1461b99b834992e16901c8a87"}],"stats":{"total":25,"additions":14,"deletions":11},"files":[{"sha":"e24aa40961b746204036d1744a2636e479b69ede","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/68c5b5a40c33b813482e8a2371eedcb2e0d224e8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/68c5b5a40c33b813482e8a2371eedcb2e0d224e8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=68c5b5a40c33b813482e8a2371eedcb2e0d224e8","patch":"@@ -32,6 +32,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-839: AuditorPeriodicCheckTest timeout (rakeshr via sijie)\n \n+      BOOKKEEPER-840: Deadlock on flushLock on compaction (sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-800: Expose whether a ledger is closed or not (ivank)"},{"sha":"299fb3e6dd5ef296b5aa01de14135eb660584dc2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/68c5b5a40c33b813482e8a2371eedcb2e0d224e8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/68c5b5a40c33b813482e8a2371eedcb2e0d224e8/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=68c5b5a40c33b813482e8a2371eedcb2e0d224e8","patch":"@@ -168,7 +168,7 @@ public void process(final long ledgerId, long offset, ByteBuffer entry)\n             };\n         }\n \n-        Object flushLock = new Object();\n+        final Object flushLock = new Object();\n \n         @Override\n         public void onRotateEntryLog() {\n@@ -183,18 +183,19 @@ synchronized private void waitEntrylogFlushed() throws IOException {\n                     LOG.debug(\"Skipping entry log flushing, as there is no offset!\");\n                     return;\n                 }\n-                synchronized (flushLock) {\n-                    Offset lastOffset = offsets.get(offsets.size()-1);\n-                    long lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.offset);\n-                    while (lastOffsetLogId < entryLogger.getLeastUnflushedLogId() && running) {\n-                        flushLock.wait(1000);\n \n-                        lastOffset = offsets.get(offsets.size()-1);\n-                        lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.offset);\n-                    }\n-                    if (lastOffsetLogId >= entryLogger.getLeastUnflushedLogId() && !running) {\n-                        throw new IOException(\"Shutdown before flushed\");\n+                Offset lastOffset = offsets.get(offsets.size()-1);\n+                long lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.offset);\n+                while (lastOffsetLogId < entryLogger.getLeastUnflushedLogId() && running) {\n+                    synchronized (flushLock) {\n+                        flushLock.wait(1000);\n                     }\n+\n+                    lastOffset = offsets.get(offsets.size()-1);\n+                    lastOffsetLogId = EntryLogger.logIdForOffset(lastOffset.offset);\n+                }\n+                if (lastOffsetLogId >= entryLogger.getLeastUnflushedLogId() && !running) {\n+                    throw new IOException(\"Shutdown before flushed\");\n                 }\n             } catch (InterruptedException ie) {\n                 Thread.currentThread().interrupt();"}]}

