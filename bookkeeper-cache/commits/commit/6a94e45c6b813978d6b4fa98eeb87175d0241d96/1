{"sha":"6a94e45c6b813978d6b4fa98eeb87175d0241d96","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2YTk0ZTQ1YzZiODEzOTc4ZDZiNGZhOThlZWI4NzE3NWQwMjQxZDk2","commit":{"author":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2014-12-04T11:28:25Z"},"committer":{"name":"Ivan Kelly","email":"ivank@apache.org","date":"2014-12-04T11:28:25Z"},"message":"BOOKKEEPER-815: Ledger fence state is lost when the ledger file is evicted (Charles Xie via ivank)\n\nChange-Id: I7de7a893043f1304b75d7545899ec5b022148e6b","tree":{"sha":"3bcf2629f67cfef964d7345dbdd0426767714f9d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3bcf2629f67cfef964d7345dbdd0426767714f9d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6a94e45c6b813978d6b4fa98eeb87175d0241d96","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6a94e45c6b813978d6b4fa98eeb87175d0241d96","html_url":"https://github.com/apache/bookkeeper/commit/6a94e45c6b813978d6b4fa98eeb87175d0241d96","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6a94e45c6b813978d6b4fa98eeb87175d0241d96/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b17a30a46a820a9914bcee713f156698d93ff734","url":"https://api.github.com/repos/apache/bookkeeper/commits/b17a30a46a820a9914bcee713f156698d93ff734","html_url":"https://github.com/apache/bookkeeper/commit/b17a30a46a820a9914bcee713f156698d93ff734"}],"stats":{"total":133,"additions":132,"deletions":1},"files":[{"sha":"5324a4edde6d072ad8451839781c4ad5e5bc00de","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/6a94e45c6b813978d6b4fa98eeb87175d0241d96/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/6a94e45c6b813978d6b4fa98eeb87175d0241d96/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=6a94e45c6b813978d6b4fa98eeb87175d0241d96","patch":"@@ -14,6 +14,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-797: IllegalArgumentException when calling CodahaleOpStatsLogger#toOpStatsData()\n \n+      BOOKKEEPER-815: Ledger fence state is lost when the ledger file is evicted (Charles Xie via ivank)\n+\n     IMPROVEMENTS:\n \n Release 4.3.0 - 2014-10-03"},{"sha":"44f004a431b5cdf7f8b28bc376ed3041233b1fb4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/6a94e45c6b813978d6b4fa98eeb87175d0241d96/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/6a94e45c6b813978d6b4fa98eeb87175d0241d96/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=6a94e45c6b813978d6b4fa98eeb87175d0241d96","patch":"@@ -136,7 +136,7 @@ synchronized public void readHeader() throws IOException {\n         }\n     }\n \n-    synchronized private void checkOpen(boolean create) throws IOException {\n+    synchronized void checkOpen(boolean create) throws IOException {\n         if (fc != null) {\n             return;\n         }\n@@ -259,6 +259,10 @@ private int readAbsolute(ByteBuffer bb, long start) throws IOException {\n     synchronized public void close(boolean force) throws IOException {\n         isClosed = true;\n         checkOpen(force);\n+        // Any time when we force close a file, we should try to flush header. otherwise, we might lose fence bit.\n+        if (force) {\n+            flushHeader();\n+        }\n         if (useCount.get() == 0 && fc != null) {\n             fc.close();\n         }"},{"sha":"d97343c3416c441a13d86ba0aa1b3a22a6a18395","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexPersistenceMgrTest.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/bookkeeper/blob/6a94e45c6b813978d6b4fa98eeb87175d0241d96/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexPersistenceMgrTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/6a94e45c6b813978d6b4fa98eeb87175d0241d96/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexPersistenceMgrTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexPersistenceMgrTest.java?ref=6a94e45c6b813978d6b4fa98eeb87175d0241d96","patch":"@@ -0,0 +1,125 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.util.SnapshotMap;\n+import org.apache.commons.io.FileUtils;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.File;\n+\n+import static com.google.common.base.Charsets.UTF_8;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Test cases for IndexPersistenceMgr\n+ */\n+public class IndexPersistenceMgrTest {\n+\n+    static final Logger logger = LoggerFactory.getLogger(IndexPersistenceMgr.class);\n+\n+    ServerConfiguration conf;\n+    File journalDir, ledgerDir;\n+    LedgerDirsManager ledgerDirsManager;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        journalDir = File.createTempFile(\"IndexPersistenceMgr\", \"Journal\");\n+        journalDir.delete();\n+        journalDir.mkdir();\n+        ledgerDir = File.createTempFile(\"IndexPersistenceMgr\", \"Ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+        // Create current directories\n+        Bookie.getCurrentDirectory(journalDir).mkdir();\n+        Bookie.getCurrentDirectory(ledgerDir).mkdir();\n+\n+        conf = new ServerConfiguration();\n+        conf.setZkServers(null);\n+        conf.setJournalDirName(journalDir.getPath());\n+        conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+\n+        ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        ledgerDirsManager.shutdown();\n+        FileUtils.deleteDirectory(journalDir);\n+        FileUtils.deleteDirectory(ledgerDir);\n+    }\n+\n+    private IndexPersistenceMgr createIndexPersistenceManager(int openFileLimit) throws Exception {\n+        ServerConfiguration newConf = new ServerConfiguration();\n+        newConf.addConfiguration(conf);\n+        newConf.setOpenFileLimit(openFileLimit);\n+\n+        return new IndexPersistenceMgr(\n+                newConf.getPageSize(), newConf.getPageSize() / LedgerEntryPage.getIndexEntrySize(),\n+                newConf, new SnapshotMap<Long, Boolean>(), ledgerDirsManager, NullStatsLogger.INSTANCE);\n+    }\n+\n+    private static void getNumFileInfos(IndexPersistenceMgr indexPersistenceMgr,\n+                                        int numFiles, byte[] masterKey) throws Exception {\n+        for (int i = 0; i < numFiles; i++) {\n+            indexPersistenceMgr.getFileInfo((long) i, masterKey);\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testEvictFileInfoWhenUnderlyingFileExists() throws Exception {\n+        evictFileInfoTest(true);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testEvictFileInfoWhenUnderlyingFileDoesntExist() throws Exception {\n+        evictFileInfoTest(false);\n+    }\n+\n+    private void evictFileInfoTest(boolean createFile) throws Exception {\n+        IndexPersistenceMgr indexPersistenceMgr = createIndexPersistenceManager(5);\n+        try {\n+            long lid = 99999L;\n+            byte[] masterKey = \"evict-file-info\".getBytes(UTF_8);\n+            // get file info and make sure the file created\n+            FileInfo fi = indexPersistenceMgr.getFileInfo(lid, masterKey);\n+            if (createFile) {\n+                fi.checkOpen(true);\n+            }\n+            fi.setFenced();\n+\n+            // fill up the cache to evict file infos\n+            getNumFileInfos(indexPersistenceMgr, 10, masterKey);\n+\n+            // get the file info again, state should have been flushed\n+            fi = indexPersistenceMgr.getFileInfo(lid, masterKey);\n+            assertTrue(\"Fence bit should be persisted\", fi.isFenced());\n+        } finally {\n+            indexPersistenceMgr.close();\n+        }\n+    }\n+}"}]}

