{"sha":"6c6ec2b2f9cb1aff37001f3d9f002cc820096404","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2YzZlYzJiMmY5Y2IxYWZmMzcwMDFmM2Q5ZjAwMmNjODIwMDk2NDA0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-29T09:58:02Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-29T09:58:02Z"},"message":"BOOKKEEPER-615: Twitter stats implementation of stats interface (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1536635 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c7cc1a3407d5c57f0ba9b25c95669aa318c11060","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c7cc1a3407d5c57f0ba9b25c95669aa318c11060"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6c6ec2b2f9cb1aff37001f3d9f002cc820096404","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6c6ec2b2f9cb1aff37001f3d9f002cc820096404","html_url":"https://github.com/apache/bookkeeper/commit/6c6ec2b2f9cb1aff37001f3d9f002cc820096404","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","url":"https://api.github.com/repos/apache/bookkeeper/commits/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","html_url":"https://github.com/apache/bookkeeper/commit/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8"}],"stats":{"total":821,"additions":821,"deletions":0},"files":[{"sha":"bc6a673b919cfc76433984954fcd590246ab5523","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -52,6 +52,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-614: Generic stats interface, which multiple providers can be plugged into (sijie & ivank via ivank)\n \n+      BOOKKEEPER-615: Twitter stats implementation of stats interface (sijie via ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-567: ReadOnlyBookieTest hangs on shutdown (sijie via ivank)"},{"sha":"fd3b42dbced11c565358cdb88034419306489faa","filename":"bookkeeper-stats-providers/pom.xml","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/pom.xml?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,41 @@\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n+                      http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>bookkeeper</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.3.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.apache.bookkeeper</groupId>\n+  <version>4.3.0-SNAPSHOT</version>\n+  <artifactId>bookkeeper-stats-providers</artifactId>\n+  <packaging>pom</packaging>\n+  <name>bookkeeper-stats-providers</name>\n+  <modules>\n+    <module>twitter-science-provider</module>\n+    <module>twitter-ostrich-provider</module>\n+  </modules>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+  </properties>\n+</project>"},{"sha":"bc5229fa6c78bc55fe22d805b39c00595f0e447e","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/pom.xml?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>bookkeeper</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.3.0-SNAPSHOT</version>\n+    <relativePath>../..</relativePath>\n+  </parent>\n+  <groupId>org.apache.bookkeeper.stats</groupId>\n+  <artifactId>twitter-ostrich-provider</artifactId>\n+  <name>Stats provider for twitter-ostrich package</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.libdir>${basedir}/lib</project.libdir>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper.stats</groupId>\n+      <artifactId>bookkeeper-stats-api</artifactId>\n+      <version>${project.parent.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter</groupId>\n+      <artifactId>ostrich_2.9.2</artifactId>\n+      <version>9.1.3</version>\n+    </dependency>\n+  </dependencies>\n+  <repositories>\n+    <repository>\n+      <id>twitter</id>\n+      <name>Twitter repo</name>\n+      <layout>default</layout>\n+      <url>http://maven.twttr.com</url>\n+    </repository>\n+  </repositories>\n+</project> "},{"sha":"903562901b9b294f7ef1b3f824e5504f8b881e1e","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/CounterImpl.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,53 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.ostrich;\n+\n+import org.apache.bookkeeper.stats.Counter;\n+\n+class CounterImpl implements Counter {\n+\n+    private final com.twitter.ostrich.stats.Counter ostrichCounter;\n+\n+    CounterImpl(com.twitter.ostrich.stats.Counter ostrichCounter) {\n+        this.ostrichCounter = ostrichCounter;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        this.ostrichCounter.reset();\n+    }\n+\n+    @Override\n+    public void inc() {\n+        this.ostrichCounter.incr();\n+    }\n+\n+    @Override\n+    public void dec() {\n+        this.ostrichCounter.incr(-1);\n+    }\n+\n+    @Override\n+    public void add(long delta) {\n+        this.ostrichCounter.incr((int)delta);\n+    }\n+\n+    @Override\n+    public Long get() {\n+        return this.ostrichCounter.apply();\n+    }\n+}"},{"sha":"ba969bad79096341d8edf48404010d3fb730e7c5","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,81 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.ostrich;\n+\n+import org.apache.bookkeeper.stats.OpStatsData;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+\n+class OpStatsLoggerImpl implements OpStatsLogger {\n+\n+    static final double[] PERCENTILES = new double[] {\n+            0.1, 0.5, 0.9, 0.99, 0.999, 0.9999\n+    };\n+\n+    private final String scope;\n+    private final com.twitter.ostrich.stats.Counter successCounter;\n+    private final com.twitter.ostrich.stats.Counter failureCounter;\n+    private final com.twitter.ostrich.stats.Metric successMetric;\n+    private final com.twitter.ostrich.stats.Metric failureMetric;\n+\n+    OpStatsLoggerImpl(String scope, com.twitter.ostrich.stats.StatsProvider statsProvider) {\n+        this.scope = scope;\n+        successCounter = statsProvider.getCounter(statName(\"requests/success\"));\n+        failureCounter = statsProvider.getCounter(statName(\"requests/failure\"));\n+        successMetric = statsProvider.getMetric(statName(\"latency/success\"));\n+        failureMetric = statsProvider.getMetric(statName(\"latency/failure\"));\n+    }\n+\n+    private String statName(String statName) {\n+        return String.format(\"%s/%s\", scope, statName);\n+    }\n+\n+    @Override\n+    public void registerFailedEvent(long eventLatencyMillis) {\n+        failureMetric.add((int)eventLatencyMillis);\n+        failureCounter.incr();\n+    }\n+\n+    @Override\n+    public void registerSuccessfulEvent(long eventLatencyMillis) {\n+        successMetric.add((int)eventLatencyMillis);\n+        successCounter.incr();\n+    }\n+\n+    @Override\n+    public OpStatsData toOpStatsData() {\n+        long numSuccess = successCounter.apply();\n+        long numFailures = failureCounter.apply();\n+        com.twitter.ostrich.stats.Distribution distribution = successMetric.apply();\n+        com.twitter.ostrich.stats.Histogram histogram = distribution.histogram();\n+        double avgLatency = distribution.average();\n+        long[] percentiles = new long[PERCENTILES.length];\n+        int i = 0;\n+        for (double percentile : PERCENTILES) {\n+            percentiles[i] = histogram.getPercentile(percentile);\n+            ++i;\n+        }\n+        return new OpStatsData(numSuccess, numFailures, avgLatency, percentiles);\n+    }\n+\n+    @Override\n+    public void clear() {\n+        successCounter.reset();\n+        failureCounter.reset();\n+        successMetric.clear();\n+        failureMetric.clear();\n+    }\n+}"},{"sha":"62246cff8d612f3c21428621b8f85bcdfdc69acb","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,78 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.ostrich;\n+\n+import com.twitter.ostrich.admin.CustomHttpHandler;\n+import com.twitter.ostrich.admin.RuntimeEnvironment;\n+import com.twitter.util.Duration;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.stats.StatsProvider;\n+import org.apache.commons.configuration.Configuration;\n+import scala.Some;\n+import scala.collection.immutable.$colon$colon;\n+import scala.collection.immutable.List;\n+import scala.collection.immutable.List$;\n+import scala.collection.immutable.Map;\n+import scala.collection.immutable.Map$;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public class OstrichProvider implements StatsProvider {\n+\n+    protected final static String STATS_EXPORT = \"statsExport\";\n+    protected final static String STATS_HTTP_PORT = \"statsHttpPort\";\n+\n+    private com.twitter.ostrich.admin.AdminHttpService statsExporter = null;\n+\n+    private static <T> List<T> list(T ... ts) {\n+        List<T> result = List$.MODULE$.empty();\n+        for (int i = ts.length; i > 0; i--) {\n+            result = new $colon$colon<T>(ts[i-1], result);\n+        }\n+        return result;\n+    }\n+\n+    private static <K, V> Map<K, V> emptyMap() {\n+        Map<K, V> result = Map$.MODULE$.empty();\n+        return result;\n+    }\n+\n+    @Override\n+    public void start(Configuration conf) {\n+        if (conf.getBoolean(STATS_EXPORT, false)) {\n+            statsExporter = new com.twitter.ostrich.admin.AdminServiceFactory(\n+                    conf.getInt(STATS_HTTP_PORT, 9002), 20, null, Some.apply(\"\"), null,\n+                    OstrichProvider.<String, CustomHttpHandler>emptyMap(), list(Duration.apply(1, TimeUnit.MINUTES))\n+            ).apply(RuntimeEnvironment.apply(this, new String[0]));\n+        }\n+        if (null != statsExporter) {\n+            statsExporter.start();\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        if (null != statsExporter) {\n+            statsExporter.shutdown();\n+        }\n+    }\n+\n+    @Override\n+    public StatsLogger getStatsLogger(String scope) {\n+        return new OstrichStatsLoggerImpl(scope, com.twitter.ostrich.stats.Stats.get(\"\"));\n+    }\n+}"},{"sha":"483ba0f6f835d6dab783d688e03c04faf2bc1725","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.ostrich;\n+\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import scala.Function0;\n+import scala.runtime.AbstractFunction0;\n+\n+/**\n+ * Implementation of ostrich logger.\n+ */\n+class OstrichStatsLoggerImpl implements StatsLogger {\n+\n+    protected final String scope;\n+    protected final com.twitter.ostrich.stats.StatsProvider ostrichProvider;\n+\n+    OstrichStatsLoggerImpl(String scope, com.twitter.ostrich.stats.StatsProvider ostrichProvider) {\n+        this.scope = scope;\n+        this.ostrichProvider = ostrichProvider;\n+    }\n+\n+    @Override\n+    public OpStatsLogger getOpStatsLogger(String statName) {\n+        return new OpStatsLoggerImpl(getStatName(statName), ostrichProvider);\n+    }\n+\n+    @Override\n+    public Counter getCounter(String statName) {\n+        return new CounterImpl(ostrichProvider.getCounter(getStatName(statName)));\n+    }\n+\n+    @Override\n+    public <T extends Number> void registerGauge(final String statName, final Gauge<T> gauge) {\n+        Function0<Object> gaugeFunc = new AbstractFunction0<Object>() {\n+            @Override\n+            public Object apply() {\n+                return gauge.getSample().doubleValue();\n+            }\n+        };\n+        ostrichProvider.addGauge(getStatName(statName), gaugeFunc);\n+    }\n+\n+    private String getStatName(String statName) {\n+        return String.format(\"%s/%s\", scope, statName);\n+    }\n+\n+    @Override\n+    public StatsLogger scope(String scope) {\n+        return new OstrichStatsLoggerImpl(getStatName(scope), ostrichProvider);\n+    }\n+\n+}"},{"sha":"f076f1ea9fff1a2674b3bda6e8de0deaa6559794","filename":"bookkeeper-stats-providers/twitter-science-provider/pom.xml","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/pom.xml?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,89 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>bookkeeper</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.3.0-SNAPSHOT</version>\n+    <relativePath>../..</relativePath>\n+  </parent>\n+  <groupId>org.apache.bookkeeper.stats</groupId>\n+  <artifactId>twitter-science-provider</artifactId>\n+  <name>Stats provider for twitter-stats package</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.libdir>${basedir}/lib</project.libdir>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper.stats</groupId>\n+      <artifactId>bookkeeper-stats-api</artifactId>\n+      <version>${project.parent.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter.common</groupId>\n+      <artifactId>stats</artifactId>\n+      <version>0.0.64</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter.common</groupId>\n+      <artifactId>net-http-handlers</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>javax.servlet</groupId>\n+          <artifactId>servlet-api</artifactId>\n+        </exclusion>\n+      </exclusions>\n+      <version>0.0.39</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter.common</groupId>\n+      <artifactId>stats-time-series</artifactId>\n+      <version>0.0.36</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter.common</groupId>\n+      <artifactId>stats-jvm</artifactId>\n+      <version>0.0.33</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.jetty</groupId>\n+      <artifactId>jetty-server</artifactId>\n+      <version>8.1.4.v20120524</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.jetty</groupId>\n+      <artifactId>jetty-servlet</artifactId>\n+      <version>8.1.4.v20120524</version>\n+    </dependency>\n+  </dependencies>\n+  <repositories>\n+    <repository>\n+      <id>twitter</id>\n+      <name>Twitter repo</name>\n+      <layout>default</layout>\n+      <url>http://maven.twttr.com</url>\n+    </repository>\n+  </repositories>\n+</project> "},{"sha":"df5c7ad19c93a44a550fdef5b1a57968a872fcba","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/CounterImpl.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,69 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.science;\n+\n+import com.twitter.common.stats.Rate;\n+import com.twitter.common.stats.Stats;\n+import org.apache.bookkeeper.stats.Counter;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+/**\n+ * This will export the value and the rate (per sec) to {@link org.apache.bookkeeper.stats.Stats}\n+ */\n+public class CounterImpl implements Counter {\n+    // The name used to export this stat\n+    private String name;\n+    private AtomicLong value;\n+\n+    public CounterImpl(String name) {\n+        this.name = name;\n+        value = new AtomicLong(0);\n+        setUpStatsExport();\n+    }\n+\n+    @Override\n+    public synchronized void clear() {\n+        value.getAndSet(0);\n+    }\n+\n+    @Override\n+    public Long get() {\n+        return value.get();\n+    }\n+\n+    private void setUpStatsExport() {\n+        // Export the value.\n+        Stats.export(name, value);\n+        // Export the rate of this value.\n+        Stats.export(Rate.of(name + \"_per_sec\", value).build());\n+    }\n+\n+    @Override\n+    public void inc() {\n+        value.incrementAndGet();\n+    }\n+\n+    @Override\n+    public void dec() {\n+        value.decrementAndGet();\n+    }\n+\n+    @Override\n+    public void add(long delta) {\n+        value.addAndGet(delta);\n+    }\n+}"},{"sha":"2ac29da131f51f2733f26395c1b08f98dba554f8","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/HTTPStatsExporter.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,77 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.science;\n+\n+import com.twitter.common.application.ShutdownRegistry;\n+import com.twitter.common.base.Supplier;\n+import com.twitter.common.net.http.handlers.VarsHandler;\n+import com.twitter.common.net.http.handlers.VarsJsonHandler;\n+import com.twitter.common.quantity.Amount;\n+import com.twitter.common.quantity.Time;\n+import com.twitter.common.stats.*;\n+import org.eclipse.jetty.server.Server;\n+import org.eclipse.jetty.servlet.ServletContextHandler;\n+import org.eclipse.jetty.servlet.ServletHolder;\n+\n+/**\n+ * Starts a jetty server on a configurable port and the samplers to export stats.\n+ */\n+public class HTTPStatsExporter {\n+    final Server jettyServer;\n+    final ShutdownRegistry.ShutdownRegistryImpl shutDownRegistry;\n+    final int port;\n+\n+    public HTTPStatsExporter(int port) {\n+        // Create the ShutdownRegistry needed for our sampler\n+        this.shutDownRegistry = new ShutdownRegistry.ShutdownRegistryImpl();\n+        this.port = port;\n+        this.jettyServer = new Server(port);\n+    }\n+\n+    public void start() throws Exception {\n+        // Start the sampler. Sample every 1 second and retain for 1 hour\n+        // TODO(Aniruddha): Make this configurable if needed.\n+        TimeSeriesRepository sampler = new TimeSeriesRepositoryImpl(Stats.STAT_REGISTRY,\n+                Amount.of(1L, Time.SECONDS), Amount.of(1L, Time.HOURS));\n+        sampler.start(this.shutDownRegistry);\n+        // Export JVM stats\n+        JvmStats.export();\n+        // Configure handlers\n+        Supplier<Iterable<Stat<?>>> supplier = new Supplier<Iterable<Stat<?>>>() {\n+            @Override\n+            public Iterable<Stat<?>> get() {\n+                return Stats.getVariables();\n+            }\n+        };\n+\n+        // Start jetty.\n+        ServletContextHandler context = new ServletContextHandler();\n+        context.setContextPath(\"/\");\n+        this.jettyServer.setHandler(context);\n+        context.addServlet(new ServletHolder(new VarsHandler(supplier)), \"/vars\");\n+        context.addServlet(new ServletHolder(new VarsJsonHandler(supplier)), \"/vars.json\");\n+        this.jettyServer.start();\n+    }\n+\n+    public void stop() throws Exception {\n+        this.jettyServer.stop();\n+        if (this.shutDownRegistry != null) {\n+            this.shutDownRegistry.execute();\n+        }\n+    }\n+}"},{"sha":"ac236f6196e0d171d2ee419b715f332c1836c9e6","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/OpStatsLoggerImpl.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.science;\n+\n+import com.twitter.common.stats.*;\n+import org.apache.bookkeeper.stats.OpStatsData;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * An implementation of the OpStatsLogger interface that handles per operation type stats.\n+ * Internals use twitter.common.stats for exporting metrics.\n+ */\n+public class OpStatsLoggerImpl implements OpStatsLogger {\n+    private final RequestStats events;\n+\n+    public OpStatsLoggerImpl(String name) {\n+        this.events = new RequestStats(name);\n+    }\n+\n+    // OpStatsLogger functions\n+    public void registerFailedEvent(long eventLatencyMillis) {\n+        this.events.incErrors(TimeUnit.MILLISECONDS.toMicros(eventLatencyMillis));\n+    }\n+\n+    public void registerSuccessfulEvent(long eventLatencyMillis) {\n+        this.events.requestComplete(TimeUnit.MILLISECONDS.toMicros(eventLatencyMillis));\n+    }\n+\n+    public synchronized void clear() {\n+        //TODO(Aniruddha): Figure out how to clear RequestStats. Till then this is a no-op\n+    }\n+\n+    /**\n+     * This function should go away soon (hopefully).\n+     */\n+    public synchronized OpStatsData toOpStatsData() {\n+        long numFailed = this.events.getErrorCount();\n+        long numSuccess = this.events.getSlidingStats().getEventCounter().get() - numFailed;\n+        double avgLatencyMillis = this.events.getSlidingStats().getPerEventLatency().read() / 1000.0;\n+        double[] default_percentiles = {10, 50, 90, 99, 99.9, 99.99};\n+        long[] latenciesMillis = new long[default_percentiles.length];\n+        Arrays.fill(latenciesMillis, Long.MAX_VALUE);\n+        Map<Double, ? extends Stat> realPercentileLatencies =\n+                this.events.getPercentile().getPercentiles();\n+        for (int i = 0; i < default_percentiles.length; i++) {\n+            if (realPercentileLatencies.containsKey(default_percentiles[i])) {\n+                @SuppressWarnings(\"unchecked\")\n+                Stat<Double> latency = realPercentileLatencies.get(default_percentiles[i]);\n+                latenciesMillis[i] = TimeUnit.MICROSECONDS.toMillis(latency.read().longValue());\n+            }\n+        }\n+        return new OpStatsData(numSuccess, numFailed, avgLatencyMillis, latenciesMillis);\n+    }\n+}"},{"sha":"c30c54529855cf108516143b3eeedaafeda65387","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.science;\n+\n+import com.twitter.common.stats.SampledStat;\n+import com.twitter.common.stats.Stats;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+\n+/**\n+ * Implementation of twitter-stats logger.\n+ */\n+public class TwitterStatsLoggerImpl implements StatsLogger {\n+\n+    protected final String name;\n+\n+    public TwitterStatsLoggerImpl(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public OpStatsLogger getOpStatsLogger(String statName) {\n+        return new OpStatsLoggerImpl(getStatName(statName));\n+    }\n+\n+    @Override\n+    public Counter getCounter(String statName) {\n+        return new CounterImpl(getStatName(statName));\n+    }\n+\n+    @Override\n+    public <T extends Number> void registerGauge(final String statName, final Gauge<T> gauge) {\n+        Stats.export(new SampledStat<Number>(getStatName(statName), gauge.getDefaultValue()) {\n+            @Override\n+            public T doSample() {\n+                return gauge.getSample();\n+            }\n+        });\n+    }\n+\n+    private String getStatName(String statName) {\n+        return (name + \"_\" + statName).toLowerCase();\n+    }\n+\n+    @Override\n+    public StatsLogger scope(String scope) {\n+        String scopeName;\n+        if (0 == name.length()) {\n+            scopeName = scope;\n+        } else {\n+            scopeName = name + \"_\" + scope;\n+        }\n+        return new TwitterStatsLoggerImpl(scopeName);\n+    }\n+\n+}"},{"sha":"cc6e3f064e17261041d49fef1a8691be7e704bb9","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/6c6ec2b2f9cb1aff37001f3d9f002cc820096404/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java?ref=6c6ec2b2f9cb1aff37001f3d9f002cc820096404","patch":"@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.science;\n+\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.stats.StatsProvider;\n+import org.apache.commons.configuration.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class TwitterStatsProvider implements StatsProvider {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(TwitterStatsProvider.class);\n+\n+    protected final static String STATS_EXPORT = \"statsExport\";\n+    protected final static String STATS_HTTP_PORT = \"statsHttpPort\";\n+\n+    private HTTPStatsExporter statsExporter = null;\n+\n+    @Override\n+    public void start(Configuration conf) {\n+        if (conf.getBoolean(STATS_EXPORT, false)) {\n+            statsExporter = new HTTPStatsExporter(conf.getInt(STATS_HTTP_PORT, 9002));\n+        }\n+        if (null != statsExporter) {\n+            try {\n+                statsExporter.start();\n+            } catch (Exception e) {\n+                LOG.error(\"Fail to start stats exporter : \", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        if (null != statsExporter) {\n+            try {\n+                statsExporter.stop();\n+            } catch (Exception e) {\n+                LOG.error(\"Fail to stop stats exporter : \", e);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public StatsLogger getStatsLogger(String name) {\n+        return new TwitterStatsLoggerImpl(name);\n+    }\n+}"}]}

