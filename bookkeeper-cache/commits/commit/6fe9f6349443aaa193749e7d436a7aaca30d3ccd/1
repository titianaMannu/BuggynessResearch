{"sha":"6fe9f6349443aaa193749e7d436a7aaca30d3ccd","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ZmU5ZjYzNDk0NDNhYWExOTM3NDllN2Q0MzZhN2FhY2EzMGQzY2Nk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:58:47Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-06T05:58:47Z"},"message":"BOOKKEEPER-736: Stats for AutoRecovery (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1622832 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f941e722790e145726db0ad505c750cad8b6323","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8f941e722790e145726db0ad505c750cad8b6323"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6fe9f6349443aaa193749e7d436a7aaca30d3ccd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6fe9f6349443aaa193749e7d436a7aaca30d3ccd","html_url":"https://github.com/apache/bookkeeper/commit/6fe9f6349443aaa193749e7d436a7aaca30d3ccd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8abec018fca57d9cee9efd13a7085d8808a3b57e","url":"https://api.github.com/repos/apache/bookkeeper/commits/8abec018fca57d9cee9efd13a7085d8808a3b57e","html_url":"https://github.com/apache/bookkeeper/commit/8abec018fca57d9cee9efd13a7085d8808a3b57e"}],"stats":{"total":214,"additions":173,"deletions":41},"files":[{"sha":"05e2e9196ed8d78718e1641325b99184d5f206c1","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=6fe9f6349443aaa193749e7d436a7aaca30d3ccd","patch":"@@ -222,6 +222,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-718: AuditorLedgerCheckerTest is flakey (ivank via sijie)\n \n+        BOOKKEEPER-736: Stats for AutoRecovery (sijie)\n+\n       bookkeeper-benchmark:\n \n         BOOKKEEPER-768: fix typo 'seconds' to milliseconds in benchmark output (jialin via sijie)"},{"sha":"bf5f438ac28647d885e0630fe3505ba93278533b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=6fe9f6349443aaa193749e7d436a7aaca30d3ccd","patch":"@@ -54,6 +54,7 @@\n \n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.BOOKIE_SCOPE;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.SERVER_SCOPE;\n+import static org.apache.bookkeeper.replication.ReplicationStats.REPLICATION_SCOPE;\n \n /**\n  * Implements the server-side part of the BookKeeper protocol.\n@@ -97,7 +98,7 @@ public BookieServer(ServerConfiguration conf, StatsLogger statsLogger)\n         this.nettyServer = new BookieNettyServer(this.conf, requestProcessor);\n         isAutoRecoveryDaemonEnabled = conf.isAutoRecoveryDaemonEnabled();\n         if (isAutoRecoveryDaemonEnabled) {\n-            this.autoRecoveryMain = new AutoRecoveryMain(conf);\n+            this.autoRecoveryMain = new AutoRecoveryMain(conf, statsLogger.scope(REPLICATION_SCOPE));\n         }\n     }\n "},{"sha":"c4fb77dffa4127f7208450d1ca25fd693e18fc56","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":30,"deletions":4,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=6fe9f6349443aaa193749e7d436a7aaca30d3ccd","patch":"@@ -36,6 +36,9 @@\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.commons.lang.StringUtils;\n import org.apache.zookeeper.CreateMode;\n@@ -52,6 +55,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.bookkeeper.replication.ReplicationStats.ELECTION_ATTEMPTS;\n+\n /**\n  * Performing auditor election using Apache ZooKeeper. Using ZooKeeper as a\n  * coordination service, when a bookie bids for auditor, it creates an ephemeral\n@@ -85,10 +90,12 @@\n     Auditor auditor;\n     private AtomicBoolean running = new AtomicBoolean(false);\n \n+    // Expose Stats\n+    private final Counter electionAttempts;\n \n     /**\n      * AuditorElector for performing the auditor election\n-     * \n+     *\n      * @param bookieId\n      *            - bookie identifier, comprises HostAddress:Port\n      * @param conf\n@@ -100,9 +107,29 @@\n      */\n     public AuditorElector(final String bookieId, ServerConfiguration conf,\n                           ZooKeeper zkc) throws UnavailableException {\n+        this(bookieId, conf, zkc, NullStatsLogger.INSTANCE);\n+    }\n+\n+    /**\n+     * AuditorElector for performing the auditor election\n+     *\n+     * @param bookieId\n+     *            - bookie identifier, comprises HostAddress:Port\n+     * @param conf\n+     *            - configuration\n+     * @param zkc\n+     *            - ZK instance\n+     * @param statsLogger\n+     *            - stats logger\n+     * @throws UnavailableException\n+     *             throws unavailable exception while initializing the elector\n+     */\n+    public AuditorElector(final String bookieId, ServerConfiguration conf,\n+                          ZooKeeper zkc, StatsLogger statsLogger) throws UnavailableException {\n         this.bookieId = bookieId;\n         this.conf = conf;\n         this.zkc = zkc;\n+        this.electionAttempts = statsLogger.getCounter(ELECTION_ATTEMPTS);\n         basePath = conf.getZkLedgersRootPath() + '/'\n                 + BookKeeperConstants.UNDER_REPLICATION_NODE;\n         electionPath = basePath + '/' + ELECTION_ZNODE;\n@@ -115,8 +142,6 @@ public Thread newThread(Runnable r) {\n             });\n     }\n \n-\n-\n     private void createMyVote() throws KeeperException, InterruptedException {\n         if (null == myVote || null == zkc.exists(myVote, false)) {\n             AuditorVoteFormat.Builder builder = AuditorVoteFormat.newBuilder()\n@@ -255,6 +280,7 @@ public void run() {\n                                 // Again going to election.\n                                 submitElectionTask();\n                             }\n+                            electionAttempts.inc();\n                         }\n                     } catch (KeeperException e) {\n                         LOG.error(\"Exception while performing auditor election\", e);\n@@ -323,7 +349,7 @@ public void shutdown() throws InterruptedException {\n     /**\n      * If current bookie is running as auditor, return the status of the\n      * auditor. Otherwise return the status of elector.\n-     * \n+     *\n      * @return\n      */\n     public boolean isRunning() {"},{"sha":"dd08f71b6274e9ec22f9d8770a7779f6fceca095","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=6fe9f6349443aaa193749e7d436a7aaca30d3ccd","patch":"@@ -32,6 +32,8 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.cli.BasicParser;\n@@ -47,6 +49,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.bookkeeper.replication.ReplicationStats.AUDITOR_SCOPE;\n+import static org.apache.bookkeeper.replication.ReplicationStats.REPLICATION_WORKER_SCOPE;\n+\n /**\n  * Class to start/stop the AutoRecovery daemons Auditor and ReplicationWorker\n  */\n@@ -66,6 +71,12 @@\n     public AutoRecoveryMain(ServerConfiguration conf) throws IOException,\n             InterruptedException, KeeperException, UnavailableException,\n             CompatibilityException {\n+        this(conf, NullStatsLogger.INSTANCE);\n+    }\n+\n+    public AutoRecoveryMain(ServerConfiguration conf, StatsLogger statsLogger)\n+            throws IOException, InterruptedException, KeeperException, UnavailableException,\n+            CompatibilityException {\n         this.conf = conf;\n         ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout()) {\n             @Override\n@@ -81,9 +92,10 @@ public void process(WatchedEvent event) {\n             }\n         };\n         zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n-        auditorElector = new AuditorElector(Bookie.getBookieAddress(conf).toString(), conf, zk);\n+        auditorElector = new AuditorElector(Bookie.getBookieAddress(conf).toString(), conf,\n+                zk, statsLogger.scope(AUDITOR_SCOPE));\n         replicationWorker = new ReplicationWorker(zk, conf,\n-                Bookie.getBookieAddress(conf));\n+                Bookie.getBookieAddress(conf), statsLogger.scope(REPLICATION_WORKER_SCOPE));\n         deathWatcher = new AutoRecoveryDeathWatcher(this);\n     }\n "},{"sha":"9e280a79bdde133e0433a1d7f7514a1a0bea656a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationStats.java?ref=6fe9f6349443aaa193749e7d436a7aaca30d3ccd","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+public interface ReplicationStats {\n+\n+    public final static String REPLICATION_SCOPE = \"replication\";\n+\n+    public final static String AUDITOR_SCOPE = \"auditor\";\n+    public final static String ELECTION_ATTEMPTS = \"election_attempts\";\n+\n+    public final static String REPLICATION_WORKER_SCOPE = \"replication_worker\";\n+    public final static String REREPLICATE_OP = \"rereplicate\";\n+\n+    public final static String BK_CLIENT_SCOPE = \"bk_client\";\n+\n+}"},{"sha":"02154e580512d2e3e3577ba3722a6925d4b98bdb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":90,"deletions":34,"changes":124,"blob_url":"https://github.com/apache/bookkeeper/blob/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/6fe9f6349443aaa193749e7d436a7aaca30d3ccd/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=6fe9f6349443aaa193749e7d436a7aaca30d3ccd","patch":"@@ -1,21 +1,21 @@\n /**\n- * Licensed to the Apache Software Foundation (ASF) under one \n- * or more contributor license agreements.  See the NOTICE file \n- * distributed with this work for additional information \n- * regarding copyright ownership.  The ASF licenses this file \n- * to you under the Apache License, Version 2.0 (the \n- * \"License\"); you may not use this file except in compliance \n- * with the License.  You may obtain a copy of the License at \n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0 \n- * \n- * Unless required by applicable law or agreed to in writing, \n- * software distributed under the License is distributed on an \n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY \n- * KIND, either express or implied.  See the License for the \n- * specific language governing permissions and limitations \n- * under the License. \n- * \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n  */\n package org.apache.bookkeeper.replication;\n \n@@ -29,6 +29,7 @@\n import java.util.Collection;\n import java.util.concurrent.CountDownLatch;\n \n+import com.google.common.base.Stopwatch;\n import org.apache.bookkeeper.bookie.BookieThread;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BKException.BKBookieHandleNotAvailableException;\n@@ -48,11 +49,17 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.apache.bookkeeper.replication.ReplicationStats.BK_CLIENT_SCOPE;\n+import static org.apache.bookkeeper.replication.ReplicationStats.REREPLICATE_OP;\n+\n /**\n  * ReplicationWorker will take the fragments one by one from\n  * ZKLedgerUnderreplicationManager and replicates to it.\n@@ -61,22 +68,45 @@\n     private final static Logger LOG = LoggerFactory\n             .getLogger(ReplicationWorker.class);\n     final private LedgerUnderreplicationManager underreplicationManager;\n-    private ServerConfiguration conf;\n-    private ZooKeeper zkc;\n+    private final ServerConfiguration conf;\n+    private final ZooKeeper zkc;\n     private volatile boolean workerRunning = false;\n     final private BookKeeperAdmin admin;\n-    private LedgerChecker ledgerChecker;\n-    private BookieSocketAddress targetBookie;\n-    private BookKeeper bkc;\n-    private Thread workerThread;\n-    private long openLedgerRereplicationGracePeriod;\n-    private Timer pendingReplicationTimer;\n+    private final LedgerChecker ledgerChecker;\n+    private final BookieSocketAddress targetBookie;\n+    private final BookKeeper bkc;\n+    private final Thread workerThread;\n+    private final long openLedgerRereplicationGracePeriod;\n+    private final Timer pendingReplicationTimer;\n+\n+    // Expose Stats\n+    private final OpStatsLogger rereplicateOpStats;\n+\n+    /**\n+     * Replication worker for replicating the ledger fragments from\n+     * UnderReplicationManager to the targetBookie. This target bookie will be a\n+     * local bookie.\n+     *\n+     * @param zkc\n+     *            - ZK instance\n+     * @param conf\n+     *            - configurations\n+     * @param targetBKAddr\n+     *            - to where replication should happen. Ideally this will be\n+     *            local Bookie address.\n+     */\n+    public ReplicationWorker(final ZooKeeper zkc,\n+                             final ServerConfiguration conf, BookieSocketAddress targetBKAddr)\n+            throws CompatibilityException, KeeperException,\n+            InterruptedException, IOException {\n+        this(zkc, conf, targetBKAddr, NullStatsLogger.INSTANCE);\n+    }\n \n     /**\n      * Replication worker for replicating the ledger fragments from\n      * UnderReplicationManager to the targetBookie. This target bookie will be a\n      * local bookie.\n-     * \n+     *\n      * @param zkc\n      *            - ZK instance\n      * @param conf\n@@ -86,7 +116,8 @@\n      *            local Bookie address.\n      */\n     public ReplicationWorker(final ZooKeeper zkc,\n-            final ServerConfiguration conf, BookieSocketAddress targetBKAddr)\n+                             final ServerConfiguration conf, BookieSocketAddress targetBKAddr,\n+                             StatsLogger statsLogger)\n             throws CompatibilityException, KeeperException,\n             InterruptedException, IOException {\n         this.zkc = zkc;\n@@ -96,13 +127,19 @@ public ReplicationWorker(final ZooKeeper zkc,\n                 .newLedgerManagerFactory(this.conf, this.zkc);\n         this.underreplicationManager = mFactory\n                 .newLedgerUnderreplicationManager();\n-        this.bkc = new BookKeeper(new ClientConfiguration(conf), zkc);\n+        this.bkc = BookKeeper.forConfig(new ClientConfiguration(conf))\n+                .setZookeeper(zkc)\n+                .setStatsLogger(statsLogger.scope(BK_CLIENT_SCOPE))\n+                .build();\n         this.admin = new BookKeeperAdmin(bkc);\n         this.ledgerChecker = new LedgerChecker(bkc);\n         this.workerThread = new BookieThread(this, \"ReplicationWorker\");\n         this.openLedgerRereplicationGracePeriod = conf\n                 .getOpenLedgerRereplicationGracePeriod();\n         this.pendingReplicationTimer = new Timer(\"PendingReplicationTimer\");\n+\n+        // Expose Stats\n+        this.rereplicateOpStats = statsLogger.getOpStatsLogger(REREPLICATE_OP);\n     }\n \n     /** Start the replication worker */\n@@ -144,6 +181,23 @@ private void rereplicate() throws InterruptedException, BKException,\n             UnavailableException {\n         long ledgerIdToReplicate = underreplicationManager\n                 .getLedgerToRereplicate();\n+\n+        Stopwatch stopwatch = new Stopwatch().start();\n+        boolean success = false;\n+        try {\n+            success = rereplicate(ledgerIdToReplicate);\n+        } finally {\n+            long latencyMillis = stopwatch.stop().elapsedMillis();\n+            if (success) {\n+                rereplicateOpStats.registerSuccessfulEvent(latencyMillis);\n+            } else {\n+                rereplicateOpStats.registerFailedEvent(latencyMillis);\n+            }\n+        }\n+    }\n+\n+    private boolean rereplicate(long ledgerIdToReplicate) throws InterruptedException, BKException,\n+            UnavailableException {\n         LOG.debug(\"Going to replicate the fragments of the ledger: {}\", ledgerIdToReplicate);\n         LedgerHandle lh;\n         try {\n@@ -155,23 +209,23 @@ private void rereplicate() throws InterruptedException, BKException,\n                     + \"might have deleted the ledger. \"\n                     + \"So, no harm to continue\");\n             underreplicationManager.markLedgerReplicated(ledgerIdToReplicate);\n-            return;\n+            return false;\n         } catch (BKReadException e) {\n             LOG.info(\"BKReadException while\"\n                     + \" opening ledger for replication.\"\n                     + \" Enough Bookies might not have available\"\n                     + \"So, no harm to continue\");\n             underreplicationManager\n                     .releaseUnderreplicatedLedger(ledgerIdToReplicate);\n-            return;\n+            return false;\n         } catch (BKBookieHandleNotAvailableException e) {\n             LOG.info(\"BKBookieHandleNotAvailableException while\"\n                     + \" opening ledger for replication.\"\n                     + \" Enough Bookies might not have available\"\n                     + \"So, no harm to continue\");\n             underreplicationManager\n                     .releaseUnderreplicatedLedger(ledgerIdToReplicate);\n-            return;\n+            return false;\n         }\n         Set<LedgerFragment> fragments = getUnderreplicatedFragments(lh);\n         LOG.debug(\"Founds fragments {} for replication from ledger: {}\", fragments, ledgerIdToReplicate);\n@@ -203,19 +257,21 @@ private void rereplicate() throws InterruptedException, BKException,\n \n         if (foundOpenFragments || isLastSegmentOpenAndMissingBookies(lh)) {\n             deferLedgerLockRelease(ledgerIdToReplicate);\n-            return;\n+            return false;\n         }\n-        \n+\n         fragments = getUnderreplicatedFragments(lh);\n         if (fragments.size() == 0) {\n             LOG.info(\"Ledger replicated successfully. ledger id is: \"\n                     + ledgerIdToReplicate);\n             underreplicationManager.markLedgerReplicated(ledgerIdToReplicate);\n+            return true;\n         } else {\n             // Releasing the underReplication ledger lock and compete\n             // for the replication again for the pending fragments\n             underreplicationManager\n                     .releaseUnderreplicatedLedger(ledgerIdToReplicate);\n+            return false;\n         }\n     }\n \n@@ -329,7 +385,7 @@ public void run() {\n         };\n         pendingReplicationTimer.schedule(timerTask, gracePeriod);\n     }\n-    \n+\n     /**\n      * Stop the replication worker service\n      */"}]}

