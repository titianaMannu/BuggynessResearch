{"sha":"73dc3481846fdc0c97944c6a7c6ce0cef17ee938","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3M2RjMzQ4MTg0NmZkYzBjOTc5NDRjNmE3YzZjZTBjZWYxN2VlOTM4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-05-17T16:32:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-05-17T16:32:05Z"},"message":"BOOKKEEPER-72: Fix warnings issued by FindBugs (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1339691 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"83113a499d4258321dc2b9ab24c584d0f80d46f3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/83113a499d4258321dc2b9ab24c584d0f80d46f3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/73dc3481846fdc0c97944c6a7c6ce0cef17ee938","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/73dc3481846fdc0c97944c6a7c6ce0cef17ee938","html_url":"https://github.com/apache/bookkeeper/commit/73dc3481846fdc0c97944c6a7c6ce0cef17ee938","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f05021f1e9e8461182f082b9ab7819b71703655c","url":"https://api.github.com/repos/apache/bookkeeper/commits/f05021f1e9e8461182f082b9ab7819b71703655c","html_url":"https://github.com/apache/bookkeeper/commit/f05021f1e9e8461182f082b9ab7819b71703655c"}],"stats":{"total":428,"additions":280,"deletions":148},"files":[{"sha":"295eb09be3735ae5dafd1f08f2a4da4c04bef076","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -14,6 +14,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-254: Bump zookeeper version in poms (ivank)\n \n+      BOOKKEEPER-72: Fix warnings issued by FindBugs (ivank)\n+\n       bookkeeper-server/\n \n         BOOKKEEPER-142: Parsing last log id is wrong, which may make entry log files overwritten (Sijie Gou via ivank)"},{"sha":"3bc167bfebad9c968094b5b7a1e057bdc5a74254","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -61,6 +61,8 @@ public void deliver(ByteString topic, ByteString subscriberId, Message msg, Call\n \n         // picking constants arbitarily for warmup phase\n         ThroughputLatencyAggregator agg = new ThroughputLatencyAggregator(\"acked pubs\", nWarmup, 100);\n+        agg.startProgress();\n+\n         Message msg = getMsg(1024);\n         for (int i = 0; i < nWarmup; i++) {\n             publisher.asyncPublish(topic, msg, new BenchmarkCallback(agg), null);\n@@ -100,6 +102,7 @@ public Void call() throws Exception {\n         int myPublishLimit = numMessages / numRegions / numPartitions - myPublishCount;\n         myPublishCount = 0;\n         ThroughputLatencyAggregator agg = new ThroughputLatencyAggregator(\"acked pubs\", myPublishLimit, nParallel);\n+        agg.startProgress();\n \n         int topicLabel = 0;\n "},{"sha":"73b6478775eb4f0e4512401af53efaa33c504ebe","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -59,6 +59,8 @@ public void warmup(int numWarmup) throws InterruptedException {\n     public Void call() throws Exception {\n \n         final ThroughputAggregator agg = new ThroughputAggregator(\"recvs\", numMessages);\n+        agg.startProgress();\n+\n         final Map<String, Long> lastSeqIdSeenMap = new HashMap<String, Long>();\n \n         for (int i = startTopicLabel; i < startTopicLabel + numTopics; i++) {\n@@ -120,6 +122,8 @@ void multiSub(String label, String topicPrefix, int start, final int npar, final\n             throws InterruptedException {\n         long startTime = System.currentTimeMillis();\n         ThroughputLatencyAggregator agg = new ThroughputLatencyAggregator(label, count / numPartitions, npar);\n+        agg.startProgress();\n+\n         int end = start + count;\n         for (int i = start; i < end; ++i) {\n             if (!HedwigBenchmark.amIResponsibleForTopic(i, partitionIndex, numPartitions)) {"},{"sha":"64899235d73fe77adc258450f740493342d1190f","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -60,6 +60,10 @@ public ThroughputLatencyAggregator(String label, int count, int limit) throws In\n             }\n         }\n \n+        public void startProgress() {\n+            tpAgg.startProgress();\n+        }\n+\n         public void reportLatency(long latency) {\n             sum.addAndGet(latency);\n \n@@ -101,6 +105,7 @@ public String summarize(long startTime) {\n         final AtomicInteger done = new AtomicInteger();\n         final AtomicLong earliest = new AtomicLong();\n         final AtomicInteger numFailed = new AtomicInteger();\n+        final Thread progressThread;\n         final LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();\n \n         public ThroughputAggregator(final String label, final int count) {\n@@ -109,7 +114,7 @@ public ThroughputAggregator(final String label, final int count) {\n             if (count == 0)\n                 queue.add(0);\n             if (Boolean.getBoolean(\"progress\")) {\n-                new Thread(new Runnable() {\n+                progressThread = new Thread(new Runnable() {\n                     @Override\n                     public void run() {\n                         try {\n@@ -123,7 +128,15 @@ public void run() {\n                             throw new RuntimeException(ex);\n                         }\n                     }\n-                }).start();\n+                    });\n+            } else {\n+                progressThread = null;\n+            }\n+        }\n+\n+        public void startProgress() {\n+            if (progressThread != null) {\n+                progressThread.start();\n             }\n         }\n "},{"sha":"ba3ee65b57b1b811efef7dc7e22fbd1e3aa48a00","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","status":"modified","additions":42,"deletions":36,"changes":78,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -78,7 +78,7 @@ public SubscribeResponseHandler(ResponseHandler responseHandler) {\n \n     // Public getter to retrieve the original PubSubData used for the Subscribe\n     // request.\n-    public PubSubData getOrigSubData() {\n+    synchronized public PubSubData getOrigSubData() {\n         return origSubData;\n     }\n \n@@ -98,35 +98,37 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n                          + HedwigClientImpl.getHostFromChannel(channel));\n         switch (response.getStatusCode()) {\n         case SUCCESS:\n-            // For successful Subscribe requests, store this Channel locally\n-            // and set it to not be readable initially.\n-            // This way we won't be delivering messages for this topic\n-            // subscription until the client explicitly says so.\n-            subscribeChannel = channel;\n-            subscribeChannel.setReadable(false);\n-            // Store the original PubSubData used to create this successful\n-            // Subscribe request.\n-            origSubData = pubSubData;\n-            // Store the mapping for the TopicSubscriber to the Channel.\n-            // This is so we can control the starting and stopping of\n-            // message deliveries from the server on that Channel. Store\n-            // this only on a successful ack response from the server.\n-            TopicSubscriber topicSubscriber = new TopicSubscriber(pubSubData.topic, pubSubData.subscriberId);\n-            responseHandler.getSubscriber().setChannelForTopic(topicSubscriber, channel);\n-            // Lazily create the Set (from a concurrent hashmap) to keep track\n-            // of outstanding Messages to be consumed by the client app. At this\n-            // stage, delivery for that topic hasn't started yet so creation of \n-            // this Set should be thread safe. We'll create the Set with an initial\n-            // capacity equal to the configured parameter for the maximum number of\n-            // outstanding messages to allow. The load factor will be set to\n-            // 1.0f which means we'll only rehash and allocate more space if\n-            // we ever exceed the initial capacity. That should be okay\n-            // because when that happens, things are slow already and piling\n-            // up on the client app side to consume messages.\n-            \n-            outstandingMsgSet = Collections.newSetFromMap(new ConcurrentHashMap<Message,Boolean>(\n-                responseHandler.getConfiguration().getMaximumOutstandingMessages(), 1.0f));\n-            \n+            synchronized(this) {\n+                // For successful Subscribe requests, store this Channel locally\n+                // and set it to not be readable initially.\n+                // This way we won't be delivering messages for this topic\n+                // subscription until the client explicitly says so.\n+                subscribeChannel = channel;\n+                subscribeChannel.setReadable(false);\n+                // Store the original PubSubData used to create this successful\n+                // Subscribe request.\n+                origSubData = pubSubData;\n+\n+                // Store the mapping for the TopicSubscriber to the Channel.\n+                // This is so we can control the starting and stopping of\n+                // message deliveries from the server on that Channel. Store\n+                // this only on a successful ack response from the server.\n+                TopicSubscriber topicSubscriber = new TopicSubscriber(pubSubData.topic, pubSubData.subscriberId);\n+                responseHandler.getSubscriber().setChannelForTopic(topicSubscriber, channel);\n+                // Lazily create the Set (from a concurrent hashmap) to keep track\n+                // of outstanding Messages to be consumed by the client app. At this\n+                // stage, delivery for that topic hasn't started yet so creation of\n+                // this Set should be thread safe. We'll create the Set with an initial\n+                // capacity equal to the configured parameter for the maximum number of\n+                // outstanding messages to allow. The load factor will be set to\n+                // 1.0f which means we'll only rehash and allocate more space if\n+                // we ever exceed the initial capacity. That should be okay\n+                // because when that happens, things are slow already and piling\n+                // up on the client app side to consume messages.\n+                outstandingMsgSet = Collections.newSetFromMap(\n+                        new ConcurrentHashMap<Message,Boolean>(\n+                                responseHandler.getConfiguration().getMaximumOutstandingMessages(), 1.0f));\n+            }\n             // Response was success so invoke the callback's operationFinished\n             // method.\n             pubSubData.callback.operationFinished(pubSubData.context, null);\n@@ -162,9 +164,11 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n     // Main method to handle consuming a message for a topic that the client is\n     // subscribed to.\n     public void handleSubscribeMessage(PubSubResponse response) {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Handling a Subscribe message in response: \" + response + \", topic: \"\n-                         + origSubData.topic.toStringUtf8() + \", subscriberId: \" + origSubData.subscriberId.toStringUtf8());\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Handling a Subscribe message in response: {}, topic: {}, subscriberId: {}\",\n+                    new Object[] { response, getOrigSubData().topic.toStringUtf8(),\n+                                   getOrigSubData().subscriberId.toStringUtf8() });\n+        }\n         Message message = response.getMessage();\n \n         synchronized (this) {\n@@ -300,9 +304,11 @@ protected synchronized void messageConsumed(Message message) {\n      *            MessageHandler to register for this ResponseHandler instance.\n      */\n     public void setMessageHandler(MessageHandler messageHandler) {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Setting the messageHandler for topic: \" + origSubData.topic.toStringUtf8()\n-                         + \", subscriberId: \" + origSubData.subscriberId.toStringUtf8());\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Setting the messageHandler for topic: {}, subscriberId: {}\",\n+                         getOrigSubData().topic.toStringUtf8(),\n+                         getOrigSubData().subscriberId.toStringUtf8());\n+        }\n         synchronized (this) {\n             this.messageHandler = messageHandler;\n             // Once the MessageHandler is registered, see if we have any queued up"},{"sha":"8bfdadaa97d0d22154906af16a9aefa47b375530","filename":"hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/util/HedwigSocketAddress.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -124,6 +124,11 @@ public boolean equals(Object obj) {\n         return (this.hostname.equals(that.hostname) && (this.port == that.port) && (this.sslPort == that.sslPort));\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return (this.hostname + this.port + this.sslPort).hashCode();\n+    }\n+\n     // Static helper method to return the string representation for an\n     // InetSocketAddress. The HedwigClient can only operate in SSL or non-SSL\n     // mode. So the server hosts it connects to will just be an"},{"sha":"269286caf9057204a4f9431843461812e60cbb8d","filename":"hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/util/PathUtils.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -26,12 +26,12 @@\n     /** Generate all prefixes for a path. \"/a/b/c\" -> [\"/a\",\"/a/b\",\"/a/b/c\"] */\n     public static List<String> prefixes(String path) {\n         List<String> prefixes = new ArrayList<String>();\n-        String prefix = \"\";\n+        StringBuilder prefix = new StringBuilder();\n         for (String comp : path.split(\"/+\")) {\n             // Skip the first (empty) path component.\n             if (!comp.equals(\"\")) {\n-                prefix += \"/\" + comp;\n-                prefixes.add(prefix);\n+                prefix.append(\"/\").append(comp);\n+                prefixes.add(prefix.toString());\n             }\n         }\n         return prefixes;"},{"sha":"e3e1fcd22abfeacec2d8e655f2f5b53f16af4f5a","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protoextensions/PubSubResponseUtils.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -27,7 +27,7 @@\n     /**\n      * Change here if bumping up the version number that the server sends back\n      */\n-    protected static ProtocolVersion serverVersion = ProtocolVersion.VERSION_ONE;\n+    protected final static ProtocolVersion serverVersion = ProtocolVersion.VERSION_ONE;\n \n     static PubSubResponse.Builder getBasicBuilder(StatusCode status) {\n         return PubSubResponse.newBuilder().setProtocolVersion(serverVersion).setStatusCode(status);"},{"sha":"80bcaaee824bb262374a1972a4278acdd1fa2276","filename":"hedwig-server/pom.xml","status":"modified","additions":5,"deletions":23,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/pom.xml?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -137,31 +137,13 @@\n           </descriptors>\n         </configuration>\n       </plugin>\n-<!--\n       <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-shade-plugin</artifactId>\n-        <version>1.2.1</version>\n-        <executions>\n-          <execution>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>shade</goal>\n-            </goals>\n-            <configuration>\n-              <artifactSet>\n-                <excludes>\n-                  <exclude>classworlds:classworlds</exclude>\n-                  <exclude>junit:junit</exclude>\n-                  <exclude>jmock:jmock</exclude>\n-                  <exclude>xml-apis:xml-apis</exclude>\n-                </excludes>\n-              </artifactSet>\n-            </configuration>\n-          </execution>\n-        </executions>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>findbugs-maven-plugin</artifactId>\n+        <configuration>\n+          <excludeFilterFile>${basedir}/src/main/resources/findbugsExclude.xml</excludeFilterFile>\n+        </configuration>\n       </plugin>\n-      -->\n       <plugin>\n         <artifactId>maven-antrun-plugin</artifactId>\n         <executions>"},{"sha":"c0db83ad45c6d6eebbe5221346a34db32adfc9dd","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -18,6 +18,7 @@\n \n package org.apache.hedwig.admin;\n \n+import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n@@ -65,7 +66,7 @@\n     protected ClientConfiguration bkClientConf;\n \n     // Empty watcher\n-    private class MyWatcher implements Watcher {\n+    private static class MyWatcher implements Watcher {\n         public void process(WatchedEvent event) {\n         }\n     }\n@@ -140,7 +141,7 @@ public ServerConfiguration getHubServerConf() {\n      * @return bookeeper passwd\n      */\n     public byte[] getBkPasswd() {\n-        return passwd;\n+        return Arrays.copyOf(passwd, passwd.length);\n     }\n \n     /**\n@@ -187,8 +188,10 @@ public boolean hasTopic(ByteString topic) throws Exception {\n                 if (data != null) {\n                     load = Integer.parseInt(new String(data));\n                 }\n-            } catch (Exception e) {\n-                // igore\n+            } catch (KeeperException ke) {\n+                LOG.warn(\"Couldn't read hub data from ZooKeeper\", ke);\n+            } catch (InterruptedException ie) {\n+                LOG.warn(\"Interrupted during read\", ie);\n             }\n             hubs.put(new HedwigSocketAddress(host), load);\n         }"},{"sha":"1392e71c92f1bc7f13d2bff0c7fc0386ebbfb936","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigCommands.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -336,8 +336,6 @@\n \n         public String getDescription() { return desc; }\n \n-        public String[] getUsage() { return usage; }\n-\n         public Map<String, COMMAND> getSubCommands() { return subCmds; }\n \n         public void addSubCommand(COMMAND c) {\n@@ -364,7 +362,10 @@ private static void addCommand(COMMAND c) {\n         commands.put(c.getName(), c);\n     }\n \n-    static {\n+    static synchronized void init() {\n+        if (commands != null) {\n+            return;\n+        }\n         commands = new LinkedHashMap<String, COMMAND>();\n \n         addCommand(COMMAND.CMD_PUB);"},{"sha":"f3f7f974679fb9832bb5a464709b3c5998621720","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","status":"modified","additions":27,"deletions":15,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -34,7 +34,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.hedwig.admin.HedwigAdmin;\n@@ -100,7 +101,7 @@\n         boolean runCmd(String[] args) throws Exception;\n     }\n \n-    class HelpCmd implements MyCommand {\n+    static class HelpCmd implements MyCommand {\n \n         @Override\n         public boolean runCmd(String[] args) throws Exception {\n@@ -127,7 +128,7 @@ public boolean runCmd(String[] args) throws Exception {\n             printMessage(\"Quitting ...\");\n             hubClient.close();\n             admin.close();\n-            System.exit(0);\n+            Runtime.getRuntime().exit(0);\n             return true;\n         }\n     }\n@@ -223,7 +224,7 @@ public boolean runCmd(String[] args) throws Exception {\n         \n     }\n \n-    class ConsoleMessageHandler implements MessageHandler {\n+    static class ConsoleMessageHandler implements MessageHandler {\n \n         @Override\n         public void deliver(ByteString topic, ByteString subscriberId,\n@@ -444,7 +445,7 @@ public boolean runCmd(String[] args) throws Exception {\n \n             boolean subscribed = false;\n             boolean success = false;\n-            final AtomicBoolean isDone = new AtomicBoolean(false);\n+            final CountDownLatch isDone = new CountDownLatch(1);\n             long elapsedTime = 0L;\n \n             System.out.println(\"Starting PUBSUB test ...\");\n@@ -471,21 +472,15 @@ public void deliver(ByteString thisTopic, ByteString subscriberId,\n                         if (thisTopic.equals(topic) && subscriberId.equals(subId) &&\n                             msg.getBody().equals(message.getBody())) {\n                             System.out.println(\"Received message : \" + message.getBody().toStringUtf8());\n-                            synchronized(isDone) {\n-                                isDone.set(true);\n-                                isDone.notify();\n-                            }\n+                            isDone.countDown();\n                         }\n                         callback.operationFinished(context, null);\n                     }\n \n                 });\n \n                 // wait for the message\n-                synchronized (isDone) {\n-                    isDone.wait(timeoutSecs * 1000L);\n-                }\n-                success = isDone.get();\n+                success = isDone.await(timeoutSecs, TimeUnit.SECONDS);\n                 elapsedTime = System.currentTimeMillis() - startTime;\n             } finally {\n                 try {\n@@ -783,6 +778,7 @@ public void printMessage(String msg) {\n      * @throws InterruptedException \n      */\n     public HedwigConsole(String[] args) throws IOException, InterruptedException {\n+        HedwigCommands.init();\n         cl.parseOptions(args);\n \n         if (cl.getCommand() == null) {\n@@ -970,10 +966,26 @@ void run() throws IOException {\n \n                     historyEnabled = true;\n                     System.out.println(\"JLine history support is enabled\");\n-                } catch (Exception e) {\n+                } catch (ClassNotFoundException e) {\n+                    System.out.println(\"JLine history support is disabled\");\n+                    LOG.debug(\"JLine history disabled with exception\", e);\n                     historyEnabled = false;\n-                    e.printStackTrace();\n+                } catch (NoSuchMethodException e) {\n+                    System.out.println(\"JLine history support is disabled\");\n+                    LOG.debug(\"JLine history disabled with exception\", e);\n+                    historyEnabled = false;\n+                } catch (InvocationTargetException e) {\n                     System.out.println(\"JLine history support is disabled\");\n+                    LOG.debug(\"JLine history disabled with exception\", e);\n+                    historyEnabled = false;\n+                } catch (IllegalAccessException e) {\n+                    System.out.println(\"JLine history support is disabled\");\n+                    LOG.debug(\"JLine history disabled with exception\", e);\n+                    historyEnabled = false;\n+                } catch (InstantiationException e) {\n+                    System.out.println(\"JLine history support is disabled\");\n+                    LOG.debug(\"JLine history disabled with exception\", e);\n+                    historyEnabled = false;\n                 }\n \n                 String line;"},{"sha":"a1481c7f32cf7989ac24795db820478c0954755e","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -72,7 +72,6 @@\n     static final int NUM_MESSAGES_TO_PRINT = 15;\n \n     SortedMap<Long, InMemoryLedgerRange> ledgers = new TreeMap<Long, InMemoryLedgerRange>();\n-    SubscriptionState leastSubscriber = null;\n     \n     static class InMemoryLedgerRange {\n         LedgerRange range;\n@@ -152,7 +151,6 @@ protected int getLeastSubscription() throws Exception {\n             long localMsgId = state.getMsgId().getLocalComponent();\n             if (localMsgId < leastConsumedSeqId) {\n                 leastConsumedSeqId = localMsgId;\n-                this.leastSubscriber = state;\n             }\n         }\n         if (leastConsumedSeqId == Long.MAX_VALUE) {"},{"sha":"3751092896f67dbf46e2daba6d9b49b458d4d70e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/common/TerminateJVMExceptionHandler.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -26,7 +26,7 @@\n     @Override\n     public void uncaughtException(Thread t, Throwable e) {\n         logger.error(\"Uncaught exception in thread \" + t.getName(), e);\n-        System.exit(1);\n+        Runtime.getRuntime().exit(1);\n     }\n \n }"},{"sha":"a37211f1b1d6b6c2d9a96cc20b14aa9f40347cb2","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/ChannelEndPoint.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -78,4 +78,8 @@ public boolean equals(Object obj) {\n         }\n     }\n \n+    @Override\n+    public int hashCode() {\n+        return channel.hashCode();\n+    }\n }"},{"sha":"51db8d60d2d98cb9cdf0e282bf4bef227ed6483c","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -22,6 +22,8 @@\n import org.apache.hedwig.server.subscriptions.MessageFilter;\n \n public interface DeliveryManager {\n+    public void start();\n+\n     public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n                                          DeliveryEndPoint endPoint, MessageFilter filter, boolean isHubSubscriber);\n "},{"sha":"0a47ad5e7744bc5457a141659d541b4a6962fe7d","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -89,15 +89,20 @@\n     // Boolean indicating if this thread should continue running. This is used\n     // when we want to stop the thread during a PubSubServer shutdown.\n     protected boolean keepRunning = true;\n+    private final Thread workerThread;\n \n     public FIFODeliveryManager(PersistenceManager persistenceMgr, ServerConfiguration cfg) {\n         this.persistenceMgr = persistenceMgr;\n         perTopicDeliveryPtrs = new HashMap<ByteString, SortedMap<Long, Set<ActiveSubscriberState>>>();\n         subscriberStates = new HashMap<TopicSubscriber, ActiveSubscriberState>();\n-        new Thread(this, \"DeliveryManagerThread\").start();\n+        workerThread = new Thread(this, \"DeliveryManagerThread\");\n         this.cfg = cfg;\n     }\n \n+    public void start() {\n+        workerThread.start();\n+    }\n+\n     /**\n      * ===================================================================== Our\n      * usual enqueue function, stop if error because of unbounded queue, should\n@@ -296,7 +301,7 @@ protected void addDeliveryPtr(ActiveSubscriberState subscriber, Long seqId) {\n         long localSeqIdDeliveringNow;\n         long lastSeqIdCommunicatedExternally;\n         // TODO make use of these variables\n-        MessageFilter filter;\n+\n         boolean isHubSubscriber;\n         final static int SEQ_ID_SLACK = 10;\n \n@@ -306,7 +311,7 @@ public ActiveSubscriberState(ByteString topic, ByteString subscriberId, long las\n             this.subscriberId = subscriberId;\n             this.lastLocalSeqIdDelivered = lastLocalSeqIdDelivered;\n             this.deliveryEndPoint = deliveryEndPoint;\n-            this.filter = filter;\n+\n             this.isHubSubscriber = isHubSubscriber;\n         }\n "},{"sha":"2262d4f8d4efd546a0bc562ad1448aea99f1fef8","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -30,7 +30,7 @@\n \n     public NettyHandlerBean(Map<OperationType, Handler> handlers) {\n         this.handlers = handlers;\n-        subHandler = (SubscribeHandler) handlers.get(OperationType.SUBSCRIBE);\n+        subHandler = (SubscribeHandler) this.handlers.get(OperationType.SUBSCRIBE);\n     }\n \n     @Override"},{"sha":"cb11955f778a5123f522712d5b06a5c118be2be5","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -107,6 +107,7 @@\n     // JMX Beans\n     NettyHandlerBean jmxNettyBean;\n     PubSubServerBean jmxServerBean;\n+    final ThreadGroup tg;\n \n     protected PersistenceManager instantiatePersistenceManager(TopicManager topicMgr) throws IOException,\n         InterruptedException {\n@@ -311,16 +312,17 @@ protected void unregisterJMX() {\n      * @throws InterruptedException\n      * @throws ConfigurationException\n      */\n-    public PubSubServer(final ServerConfiguration conf, final Thread.UncaughtExceptionHandler exceptionHandler)\n-            throws Exception {\n+    public PubSubServer(final ServerConfiguration conf,\n+                        final Thread.UncaughtExceptionHandler exceptionHandler)\n+            throws ConfigurationException {\n \n         // First validate the conf\n         this.conf = conf;\n         conf.validate();\n \n         // We need a custom thread group, so that we can override the uncaught\n         // exception method\n-        ThreadGroup tg = new ThreadGroup(\"hedwig\") {\n+        tg = new ThreadGroup(\"hedwig\") {\n             @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                 exceptionHandler.uncaughtException(t, e);\n@@ -330,7 +332,9 @@ public void uncaughtException(Thread t, Throwable e) {\n         // we do in ZK threads throws an exception, we want our handler to be\n         // called, not theirs.\n         SafeAsyncCallback.setUncaughtExceptionHandler(exceptionHandler);\n+    }\n \n+    public void start() throws Exception {\n         final SynchronousQueue<Either<Object, Exception>> queue = new SynchronousQueue<Either<Object, Exception>>();\n \n         new Thread(tg, new Runnable() {\n@@ -349,6 +353,8 @@ public void run() {\n                     tm = instantiateTopicManager();\n                     pm = instantiatePersistenceManager(tm);\n                     dm = new FIFODeliveryManager(pm, conf);\n+                    dm.start();\n+\n                     sm = instantiateSubscriptionManager(tm, pm);\n                     rm = instantiateRegionManager(pm, scheduler);\n                     sm.addListener(rm);\n@@ -422,7 +428,7 @@ public static void main(String[] args) {\n             logger.info(\"Using configuration file \" + confFile);\n         }\n         try {\n-            new PubSubServer(conf);\n+            new PubSubServer(conf).start();\n         } catch (Throwable t) {\n             errorMsgAndExit(\"Error during startup\", t, RC_OTHER);\n         }"},{"sha":"641e187198fcaf65396b2a27ed97a3135656d251","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -121,7 +121,7 @@ synchronized public void updateLatency(long latency) {\n             ++latencyBuckets[bucket];\n         }\n \n-        public OpStatData toOpStatData() {\n+        synchronized public OpStatData toOpStatData() {\n             double avgLatency = numSuccessOps > 0 ? totalLatency / numSuccessOps : 0.0f;\n             StringBuilder sb = new StringBuilder();\n             for (int i=0; i<NUM_BUCKETS; i++) {\n@@ -131,7 +131,8 @@ public OpStatData toOpStatData() {\n                 }\n             }\n \n-            return new OpStatData(maxLatency, minLatency, avgLatency, numSuccessOps, numFailedOps, sb.toString());\n+            return new OpStatData(maxLatency, minLatency, avgLatency,\n+                                  numSuccessOps, numFailedOps, sb.toString());\n         }\n \n     }"},{"sha":"a8b9f743922c33f654b8ef3bd76f53a89d2cfbdc","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","status":"modified","additions":50,"deletions":8,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -28,6 +28,10 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import java.math.BigInteger;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n import javax.sql.rowset.serial.SerialBlob;\n \n import org.slf4j.Logger;\n@@ -74,6 +78,18 @@ protected Connection initialValue() {\n             }\n         }\n     };\n+\n+    private static final ThreadLocal<MessageDigest> threadLocalDigest = new ThreadLocal<MessageDigest>() {\n+        @Override\n+        protected MessageDigest initialValue() {\n+            try {\n+                return MessageDigest.getInstance(\"MD5\");\n+            } catch (NoSuchAlgorithmException e) {\n+                logger.error(\"Could not find MD5 hash\", e);\n+                return null;\n+            }\n+        }\n+    };\n     static final String ID_FIELD_NAME = \"id\";\n     static final String MSG_FIELD_NAME = \"msg\";\n     static final String driver = \"org.apache.derby.jdbc.EmbeddedDriver\";\n@@ -246,14 +262,22 @@ public void persistMessage(PersistRequest request) {\n      * sneak in and create the table before us\n      */\n     private void createTable(Connection conn, ByteString topic) {\n-\n+        Statement stmt = null;\n         try {\n-            Statement stmt = conn.createStatement();\n+            stmt = conn.createStatement();\n             String tableName = getTableNameForTopic(topic);\n             stmt.execute(\"CREATE TABLE \" + tableName + \" (\" + ID_FIELD_NAME + \" BIGINT NOT NULL CONSTRAINT ID_PK_\"\n-                         + tableName + \" PRIMARY KEY,\" + MSG_FIELD_NAME + \" BLOB(2M) NOT NULL)\");\n+                    + tableName + \" PRIMARY KEY,\" + MSG_FIELD_NAME + \" BLOB(2M) NOT NULL)\");\n         } catch (SQLException e) {\n             logger.debug(\"Could not create table\", e);\n+        } finally {\n+            try {\n+                if (stmt != null) {\n+                    stmt.close();\n+                }\n+            } catch (SQLException e) {\n+                logger.error(\"Error closing statement\", e);\n+            }\n         }\n     }\n \n@@ -274,7 +298,11 @@ public void scanMessages(RangeScanRequest request) {\n     }\n \n     private String getTableNameForTopic(ByteString topic) {\n-        return (topic.toStringUtf8() + \"_\" + version);\n+        String src = (topic.toStringUtf8() + \"_\" + version);\n+        threadLocalDigest.get().reset();\n+        byte[] digest = threadLocalDigest.get().digest(src.getBytes());\n+        BigInteger bigInt = new BigInteger(1,digest);\n+        return String.format(\"TABLE_%032X\", bigInt);\n     }\n \n     private void scanMessagesInternal(ByteString topic, long startSeqId, int messageLimit, long sizeLimit,\n@@ -290,7 +318,7 @@ private void scanMessagesInternal(ByteString topic, long startSeqId, int message\n         long currentSeqId;\n         currentSeqId = startSeqId;\n \n-        PreparedStatement stmt;\n+        PreparedStatement stmt = null;\n         try {\n             try {\n                 stmt = conn.prepareStatement(\"SELECT * FROM \" + getTableNameForTopic(topic) + \" WHERE \" + ID_FIELD_NAME\n@@ -367,8 +395,15 @@ private void scanMessagesInternal(ByteString topic, long startSeqId, int message\n             logger.error(\"Message stored in derby is not parseable\", e);\n             callback.scanFailed(ctx, new ServiceDownException(e));\n             return;\n+        } finally {\n+            try {\n+                if (stmt != null) {\n+                    stmt.close();\n+                }\n+            } catch (SQLException e) {\n+                logger.error(\"Error closing statement\", e);\n+            }\n         }\n-\n     }\n \n     public void deliveredUntil(ByteString topic, Long seqId) {\n@@ -381,20 +416,27 @@ public void consumedUntil(ByteString topic, Long seqId) {\n             logger.error(\"Not connected to derby\");\n             return;\n         }\n-        PreparedStatement stmt;\n+        PreparedStatement stmt = null;\n         try {\n             stmt = conn.prepareStatement(\"DELETE FROM \" + getTableNameForTopic(topic) + \" WHERE \" + ID_FIELD_NAME\n                                          + \" <= ?\");\n             stmt.setLong(1, seqId);\n             int rowCount = stmt.executeUpdate();\n             logger.debug(\"Deleted \" + rowCount + \" records for topic: \" + topic.toStringUtf8() + \", seqId: \" + seqId);\n-            stmt.close();\n         } catch (SQLException sqle) {\n             String theError = (sqle).getSQLState();\n             if (theError.equals(\"42X05\")) {\n                 logger.warn(\"Table for topic (\" + topic + \") does not exist so no consumed messages to delete!\");\n             } else\n                 logger.error(\"Error while executing derby delete for consumed messages\", sqle);\n+        } finally {\n+            try {\n+                if (stmt != null) {\n+                    stmt.close();\n+                }\n+            } catch (SQLException e) {\n+                logger.error(\"Error closing statement\", e);\n+            }\n         }\n     }\n "},{"sha":"3cca541a0d1228f0e05b3c04da468cc1aaeb5eb8","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -458,15 +458,15 @@ private void enqueueDeleteOfRemainingStubs(Exception reason) {\n     }\n \n     protected static class HashSetCacheKeyFactory implements Factory<Set<CacheKey>> {\n-        protected static HashSetCacheKeyFactory instance = new HashSetCacheKeyFactory();\n+        protected final static HashSetCacheKeyFactory instance = new HashSetCacheKeyFactory();\n \n         public Set<CacheKey> newInstance() {\n             return new HashSet<CacheKey>();\n         }\n     }\n \n     protected static class TreeSetLongFactory implements Factory<SortedSet<Long>> {\n-        protected static TreeSetLongFactory instance = new TreeSetLongFactory();\n+        protected final static TreeSetLongFactory instance = new TreeSetLongFactory();\n \n         public SortedSet<Long> newInstance() {\n             return new TreeSet<Long>();"},{"sha":"5c200c13ecf0a3241aa2f2770a88968e82a4999d","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -53,18 +53,24 @@\n     Map<OperationType, Handler> handlers;\n     ProxyConfiguration cfg;\n     ChannelTracker tracker;\n+    ThreadGroup tg;\n \n-    public HedwigProxy(final ProxyConfiguration cfg, final UncaughtExceptionHandler exceptionHandler)\n-            throws InterruptedException {\n+    public HedwigProxy(final ProxyConfiguration cfg, final UncaughtExceptionHandler exceptionHandler) {\n         this.cfg = cfg;\n \n-        ThreadGroup tg = new ThreadGroup(\"hedwigproxy\") {\n+        tg = new ThreadGroup(\"hedwigproxy\") {\n             @Override\n             public void uncaughtException(Thread t, Throwable e) {\n                 exceptionHandler.uncaughtException(t, e);\n             }\n         };\n+    }\n+\n+    public HedwigProxy(ProxyConfiguration conf) throws InterruptedException {\n+        this(conf, new TerminateJVMExceptionHandler());\n+    }\n \n+    public void start() throws InterruptedException {\n         final LinkedBlockingQueue<Boolean> queue = new LinkedBlockingQueue<Boolean>();\n \n         new Thread(tg, new Runnable() {\n@@ -84,10 +90,6 @@ public void run() {\n         queue.take();\n     }\n \n-    public HedwigProxy(ProxyConfiguration conf) throws InterruptedException {\n-        this(conf, new TerminateJVMExceptionHandler());\n-    }\n-\n     // used for testing\n     public ChannelTracker getChannelTracker() {\n         return tracker;\n@@ -161,7 +163,7 @@ public static void main(String[] args) {\n             logger.info(\"Using configuration file \" + confFile);\n         }\n         try {\n-            new HedwigProxy(conf);\n+            new HedwigProxy(conf).start();\n         } catch (Throwable t) {\n             PubSubServer.errorMsgAndExit(\"Error during startup\", t, PubSubServer.RC_OTHER);\n         }"},{"sha":"051a7829022cfc2c78628cb1731e935f3371252e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyConfiguration.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -21,8 +21,8 @@\n \n public class ProxyConfiguration extends ClientConfiguration {\n \n-    protected static String PROXY_PORT = \"proxy_port\";\n-    protected static String MAX_MESSAGE_SIZE = \"max_message_size\";\n+    protected final static String PROXY_PORT = \"proxy_port\";\n+    protected final static String MAX_MESSAGE_SIZE = \"max_message_size\";\n \n     public int getProxyPort() {\n         return conf.getInt(PROXY_PORT, 9099);"},{"sha":"060560d71089fe3a99b605f54b5039cdc851cef1","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -26,7 +26,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.CountDownLatch;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -93,7 +93,7 @@ public void run() {\n                 if (null == topics || topics.isEmpty()) {\n                     continue;\n                 }\n-                final AtomicBoolean done = new AtomicBoolean(false);\n+                final CountDownLatch done = new CountDownLatch(1);\n                 Callback<Void> postCb = new Callback<Void>() {\n                     @Override\n                     public void operationFinished(Object ctx,\n@@ -106,10 +106,7 @@ public void operationFailed(Object ctx,\n                         finish();\n                     }\n                     void finish() {\n-                        synchronized (done) {\n-                            done.set(true);\n-                            done.notifyAll();\n-                        }\n+                        done.countDown();\n                     }\n                 };\n                 Callback<Void> mcb = CallbackUtils.multiCallback(topics.size(), postCb, null);\n@@ -122,14 +119,10 @@ void finish() {\n                     }\n                     retrySubscribe(client, topic, mcb);\n                 }\n-                synchronized (done) {\n-                    if (done.get()) {\n-                        try {\n-                            done.wait();\n-                        } catch (InterruptedException e) {\n-                            LOGGER.warn(\"Exception during retrying remote subscriptions : \", e);\n-                        }\n-                    }\n+                try {\n+                    done.await();\n+                } catch (InterruptedException e) {\n+                    LOGGER.warn(\"Exception during retrying remote subscriptions : \", e);\n                 }\n             }\n         }"},{"sha":"3c2097683f4ff6a3eb6da41dc690416f5db11139","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","status":"modified","additions":14,"deletions":6,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -71,7 +71,7 @@\n \n     Callback<Void> noopCallback = new NoopCallback<Void>();\n \n-    class NoopCallback<T> implements Callback<T> {\n+    static class NoopCallback<T> implements Callback<T> {\n         @Override\n         public void operationFailed(Object ctx, PubSubException exception) {\n             logger.warn(\"Exception found in AbstractSubscriptionManager : \", exception);\n@@ -110,6 +110,10 @@ public void run() {\n             // so it should be safe to run this fairly often.\n             for (ByteString topic : top2sub2seq.keySet()) {\n                 final Map<ByteString, InMemorySubscriptionState> topicSubscriptions = top2sub2seq.get(topic);\n+                if (topicSubscriptions == null) {\n+                    continue;\n+                }\n+\n                 long minConsumedMessage = Long.MAX_VALUE;\n                 boolean hasBound = true;\n                 // Loop through all subscribers to the current topic to find the\n@@ -126,9 +130,9 @@ public void run() {\n                 // Don't call the PersistenceManager if nobody is subscribed to\n                 // the topic yet, or the consume pointer has not changed since\n                 // the last time, or if this is the initial subscription.\n+                Long minConsumedFromMap = topic2MinConsumedMessagesMap.get(topic);\n                 if (topicSubscriptions.isEmpty()\n-                    || (topic2MinConsumedMessagesMap.containsKey(topic)\n-                        && topic2MinConsumedMessagesMap.get(topic) == minConsumedMessage)\n+                    || (minConsumedFromMap != null && minConsumedFromMap.equals(minConsumedMessage))\n                     || minConsumedMessage == 0) {\n                     topic2MinConsumedMessagesMap.put(topic, minConsumedMessage);\n                     pm.consumedUntil(topic, minConsumedMessage);\n@@ -404,7 +408,8 @@ private void finish() {\n                                         // so the following codes only happened when remote subscription failed.\n                                         // it is safe to decrement the local count so next subscribe op\n                                         // could have the chance to subscribe remote.\n-                                        topic2LocalCounts.get(topic).decrementAndGet();\n+                                        AtomicInteger count = topic2LocalCounts.get(topic);\n+                                        if (count != null) { count.decrementAndGet(); }\n                                     }\n                                     cb.operationFailed(ctx, exception);\n                                 }\n@@ -422,8 +427,10 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n \n                     };\n \n+                    AtomicInteger count = topic2LocalCounts.get(topic);\n                     if (!SubscriptionStateUtils.isHubSubscriber(subRequest.getSubscriberId())\n-                            && topic2LocalCounts.get(topic).incrementAndGet() == 1)\n+                        && count != null\n+                        && count.incrementAndGet() == 1)\n                         notifySubscribe(topic, subRequest.getSynchronous(), cb2, ctx);\n                     else\n                         cb2.operationFinished(ctx, resultOfOperation);\n@@ -537,8 +544,9 @@ public void operationFailed(Object ctx, PubSubException exception) {\n                 public void operationFinished(Object ctx, Void resultOfOperation) {\n                     topicSubscriptions.remove(subscriberId);\n                     // Notify listeners if necessary.\n+                    AtomicInteger count = topic2LocalCounts.get(topic);\n                     if (!SubscriptionStateUtils.isHubSubscriber(subscriberId)\n-                            && topic2LocalCounts.get(topic).decrementAndGet() == 0)\n+                        && count != null && count.decrementAndGet() == 0)\n                         notifyUnsubcribe(topic);\n \n                     updateMessageBound(topic);"},{"sha":"fa51bdfe9ed2429786577936767e672829496a0e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -20,7 +20,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n \n public class TrueFilter implements MessageFilter {\n-    protected static TrueFilter instance = new TrueFilter();\n+    protected final static TrueFilter instance = new TrueFilter();\n \n     public static TrueFilter instance() {\n         return instance;"},{"sha":"f92101a22338ac085c988412e94c6ca667bf208e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -103,7 +103,7 @@ public void process(WatchedEvent event) {\n                 // Check for expired connection.\n                 if (event.getState().equals(Watcher.Event.KeeperState.Expired)) {\n                     logger.error(\"ZK client connection to the ZK server has expired!\");\n-                    System.exit(1);\n+                    Runtime.getRuntime().exit(1);\n                 }\n             }\n         });"},{"sha":"11ca3ff1e4b60a27fab7f7003e38dbdf380e0f06","filename":"hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/SafeAsyncCallback.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -22,7 +22,7 @@\n import org.apache.hedwig.server.common.TerminateJVMExceptionHandler;\n \n public class SafeAsyncCallback {\n-    protected static UncaughtExceptionHandler uncaughtExceptionHandler = new TerminateJVMExceptionHandler();\n+    static UncaughtExceptionHandler uncaughtExceptionHandler = new TerminateJVMExceptionHandler();\n \n     public static void setUncaughtExceptionHandler(UncaughtExceptionHandler uncaughtExceptionHandler) {\n         SafeAsyncCallback.uncaughtExceptionHandler = uncaughtExceptionHandler;"},{"sha":"9d6d431bcd25133b2a5b034319d93d34df77a6df","filename":"hedwig-server/src/main/resources/findbugsExclude.xml","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/resources/findbugsExclude.xml","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/main/resources/findbugsExclude.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/resources/findbugsExclude.xml?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -0,0 +1,25 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+//-->\n+<FindBugsFilter>\n+  <Match>\n+    <Class name=\"org.apache.hedwig.server.persistence.LocalDBPersistenceManager\" />\n+    <Method name=\"createTable\" />\n+    <!-- We make is safe by hashing the input before using //-->\n+    <Bug pattern=\"SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE\" />\n+  </Match>\n+</FindBugsFilter>"},{"sha":"523ecdc5d2a2d92b3ee1a9ebba78868feff374a2","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -118,7 +118,10 @@ protected void startHubServers() throws Exception {\n         // Now create the PubSubServer Hubs\n         serversList = new LinkedList<PubSubServer>();\n         for (int i = 0; i < numServers; i++) {\n-            serversList.add(new PubSubServer(getServerConfiguration(initialServerPort + i, initialSSLServerPort + i)));\n+            PubSubServer s = new PubSubServer(\n+                    getServerConfiguration(initialServerPort + i, initialSSLServerPort + i));\n+            serversList.add(s);\n+            s.start();\n         }\n     }\n     protected void stopHubServers() throws Exception {"},{"sha":"5c44a855dc69d87037341479febc04e16f50c8d9","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -232,9 +232,13 @@ protected void startRegion(int i) throws Exception {\n         // servers. We will basically increment through the port numbers\n         // starting from the initial ones defined.\n         for (int j = 0; j < numServersPerRegion; j++) {\n-            serversList.add(new PubSubServer(getServerConfiguration(initialServerPort\n-                                             + (j + i * numServersPerRegion), initialSSLServerPort + (j + i * numServersPerRegion),\n-                                             regionName)));\n+            PubSubServer s = new PubSubServer(\n+                    getServerConfiguration(initialServerPort\n+                                           + (j + i * numServersPerRegion),\n+                                           initialSSLServerPort + (j + i * numServersPerRegion),\n+                                           regionName));\n+            serversList.add(s);\n+            s.start();\n         }\n         // Store this list of servers created for the current region\n         regionServersMap.put(regionName, serversList);"},{"sha":"8a6122355dd29de0954d6427cc3ff82fdbcfa563","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -48,6 +48,7 @@ public boolean isStandalone() {\n     public void setUp() throws Exception {\n         logger.info(\"STARTING \" + getName());\n         server = new PubSubServer(new StandAloneServerConfiguration());\n+        server.start();\n         logger.info(\"Standalone PubSubServer test setup finished\");\n     }\n "},{"sha":"2bc8d23af05bc73495dd497f0ae58dbe62ffebe2","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -96,6 +96,7 @@ private void instantiateAndDestroyPubSubServer() throws IOException, Interrupted\n         try {\n             logger.info(\"starting hedwig broker!\");\n             hedwigServer = new PubSubServer(serverConf);\n+            hedwigServer.start();\n         } catch (Exception e) {\n             e.printStackTrace();\n         }"},{"sha":"174d6bf51c9cd9f0e4acd7a06a1be67993d36623","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -63,6 +63,10 @@ public void stopServingSubscriber(ByteString topic, ByteString subscriberId) {\n         lastRequest.add(new TopicSubscriber(topic, subscriberId));\n     }\n \n+    @Override\n+    public void start() {\n+    }\n+\n     @Override\n     public void stop() {\n         // do nothing now"},{"sha":"02b45032ff4c1c18ae845f1681f2ae7c679b576c","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -212,6 +212,7 @@ public void setUp() throws Exception {\n         super.setUp();\n         if (mode == Mode.PROXY) {\n             proxy = new HedwigProxy(proxyConf);\n+            proxy.start();\n         }\n         client = new HedwigClient(getClientConfiguration());\n         publisher = client.getPublisher();"},{"sha":"5d64498b59540a84b702382940a578fcfca76961","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/73dc3481846fdc0c97944c6a7c6ce0cef17ee938/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java?ref=73dc3481846fdc0c97944c6a7c6ce0cef17ee938","patch":"@@ -55,6 +55,7 @@ public int getServerPort() {\n                 return super.getServerPort() + 1;\n             }\n         });\n+        server1.start();\n         server1.shutdown();\n     }\n \n@@ -91,7 +92,7 @@ protected TopicManager instantiateTopicManager() throws IOException {\n                 return instantiator.instantiateTopicManager();\n             }\n         };\n-\n+        server.start();\n         return server;\n \n     }"}]}

