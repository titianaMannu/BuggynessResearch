{"sha":"76818a6aadd4aa40a45aca6f5b0acba79cd42515","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3NjgxOGE2YWFkZDRhYTQwYTQ1YWNhNmY1YjBhY2JhNzljZDQyNTE1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-01T14:10:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-01T14:10:17Z"},"message":"BOOKKEEPER-74: Bookkeeper Persistence Manager should give up topic on error (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1295571 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"befb9ed4b93345341687e710085437d357f1dfdf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/befb9ed4b93345341687e710085437d357f1dfdf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/76818a6aadd4aa40a45aca6f5b0acba79cd42515","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/76818a6aadd4aa40a45aca6f5b0acba79cd42515","html_url":"https://github.com/apache/bookkeeper/commit/76818a6aadd4aa40a45aca6f5b0acba79cd42515","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/76818a6aadd4aa40a45aca6f5b0acba79cd42515/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9366322bfe3461a44a8b0444e66cd774ea1ac7d8","url":"https://api.github.com/repos/apache/bookkeeper/commits/9366322bfe3461a44a8b0444e66cd774ea1ac7d8","html_url":"https://github.com/apache/bookkeeper/commit/9366322bfe3461a44a8b0444e66cd774ea1ac7d8"}],"stats":{"total":122,"additions":98,"deletions":24},"files":[{"sha":"4ec5af4fe7ca9c04ea7a6b9e286ad6a379fb3d8a","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/76818a6aadd4aa40a45aca6f5b0acba79cd42515/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/76818a6aadd4aa40a45aca6f5b0acba79cd42515/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=76818a6aadd4aa40a45aca6f5b0acba79cd42515","patch":"@@ -54,6 +54,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-133: Hub server should update subscription state to zookeeper when losing topic or shutting down (Sijie Gou via ivank)\n \n+        BOOKKEEPER-74: Bookkeeper Persistence Manager should give up topic on error (sijie via ivank)\n+\n     IMPROVEMENTS:\n \n       bookkeeper-server/"},{"sha":"f1fd9652a11d2413b6508d035c63a018ba6c2753","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/76818a6aadd4aa40a45aca6f5b0acba79cd42515/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/76818a6aadd4aa40a45aca6f5b0acba79cd42515/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=76818a6aadd4aa40a45aca6f5b0acba79cd42515","patch":"@@ -24,6 +24,7 @@\n import java.util.TreeMap;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n@@ -77,6 +78,7 @@\n     private BookKeeper bk;\n     private ZooKeeper zk;\n     private ServerConfiguration cfg;\n+    private TopicManager tm;\n \n     static class InMemoryLedgerRange {\n         LedgerRange range;\n@@ -125,6 +127,10 @@ public InMemoryLedgerRange(LedgerRange range, long startSeqId) {\n          */\n         InMemoryLedgerRange currentLedgerRange;\n \n+        /**\n+         * Flag to release topic when encountering unrecoverable exceptions\n+         */\n+        AtomicBoolean doRelease = new AtomicBoolean(false);\n     }\n \n     Map<ByteString, TopicInfo> topicInfos = new ConcurrentHashMap<ByteString, TopicInfo>();\n@@ -148,6 +154,7 @@ public BookkeeperPersistenceManager(BookKeeper bk, ZooKeeper zk, TopicManager tm\n         this.bk = bk;\n         this.zk = zk;\n         this.cfg = cfg;\n+        this.tm = tm;\n         queuer = new TopicOpQueuer(executor);\n         tm.addTopicOwnershipChangeListener(this);\n     }\n@@ -359,6 +366,12 @@ public void runInternal() {\n                 return;\n             }\n \n+            if (topicInfo.doRelease.get()) {\n+                request.callback.operationFailed(request.ctx, new PubSubException.ServiceDownException(\n+                    \"The ownership of the topic is releasing due to unrecoverable issue.\"));\n+                return;\n+            }\n+\n             final long localSeqId = topicInfo.lastSeqIdPushed.getLocalComponent() + 1;\n             MessageSeqId.Builder builder = MessageSeqId.newBuilder();\n             if (request.message.hasMsgId()) {\n@@ -383,6 +396,20 @@ public void safeAddComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n                         // To preserve ordering guarantees, we\n                         // should give up the topic and not let\n                         // other operations through\n+                        if (topicInfo.doRelease.compareAndSet(false, true)) {\n+                            tm.releaseTopic(request.topic, new Callback<Void>() {\n+                                @Override\n+                                public void operationFailed(Object ctx, PubSubException exception) {\n+                                    logger.error(\"Exception found on releasing topic \" + request.topic.toStringUtf8()\n+                                               + \" when encountering exception from bookkeeper:\", exception);\n+                                }\n+                                @Override\n+                                public void operationFinished(Object ctx, Void resultOfOperation) {\n+                                    logger.debug(\"successfully releasing topic {} when encountering\"\n+                                                 + \" exception from bookkeeper\", request.topic.toStringUtf8());\n+                                }\n+                            }, null);\n+                        }\n                         request.callback.operationFailed(ctx, new PubSubException.ServiceDownException(bke));\n                         return;\n                     }"},{"sha":"51ee739fc66b0ffc516c07eac7126e81a295b71e","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/76818a6aadd4aa40a45aca6f5b0acba79cd42515/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","raw_url":"https://github.com/apache/bookkeeper/raw/76818a6aadd4aa40a45aca6f5b0acba79cd42515/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java?ref=76818a6aadd4aa40a45aca6f5b0acba79cd42515","patch":"@@ -254,23 +254,12 @@ protected void startDelivery(Subscriber subscriber, ByteString topic, ByteString\n         }\n     }\n \n-    protected void publishFirstBatch(int batchSize, boolean messagesToBeConsumed) throws Exception {\n+    protected void publishBatch(int batchSize, boolean expected, boolean messagesToBeConsumed, int loop) throws Exception {\n         if (logger.isDebugEnabled())\n-            logger.debug(\"Publishing first batch of messages.\");\n+            logger.debug(\"Publishing \" + loop + \" batch of messages.\");\n         for (int i = 0; i < batchSize; i++) {\n-            publisher.asyncPublish(getTopic(i), getMsg(i), new TestCallback(queue), null);\n-            assertTrue(queue.take());\n-            if (messagesToBeConsumed)\n-                assertTrue(consumeQueue.take());\n-        }\n-    }\n-\n-    protected void publishSecondBatch(int batchSize, boolean messagesToBeConsumed) throws Exception {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Publishing second batch of messages.\");\n-        for (int i = 0; i < batchSize; i++) {\n-            publisher.asyncPublish(getTopic(i), getMsg(i + batchSize), new TestCallback(queue), null);\n-            assertTrue(queue.take());\n+            publisher.asyncPublish(getTopic(i), getMsg(i + loop * batchSize), new TestCallback(queue), null);\n+            assertTrue(expected == queue.take());\n             if (messagesToBeConsumed)\n                 assertTrue(consumeQueue.take());\n         }\n@@ -387,31 +376,31 @@ public void testAttachToSubscriptionSuccess() throws Exception {\n     @Test\n     public void testServerRedirect() throws Exception {\n         int batchSize = 10;\n-        publishFirstBatch(batchSize, false);\n+        publishBatch(batchSize, true, false, 0);\n     }\n \n     @Test\n     public void testSubscribeAndConsume() throws Exception {\n         int batchSize = 10;\n         subscribeToTopics(batchSize);\n-        publishFirstBatch(batchSize, true);\n+        publishBatch(batchSize, true, true, 0);\n     }\n \n     @Test\n     public void testServerFailoverPublishOnly() throws Exception {\n         int batchSize = 10;\n-        publishFirstBatch(batchSize, false);\n+        publishBatch(batchSize, true, false, 0);\n         shutDownLastServer();\n-        publishSecondBatch(batchSize, false);\n+        publishBatch(batchSize, true, false, 1);\n     }\n \n     @Test\n     public void testServerFailover() throws Exception {\n         int batchSize = 10;\n         subscribeToTopics(batchSize);\n-        publishFirstBatch(batchSize, true);\n+        publishBatch(batchSize, true, true, 0);\n         shutDownLastServer();\n-        publishSecondBatch(batchSize, true);\n+        publishBatch(batchSize, true, true, 1);\n     }\n \n     @Test\n@@ -690,4 +679,17 @@ public void testAsyncHubUnsubscribeWithInvalidSubscriberId() throws Exception {\n         hubClient.close();\n     }\n \n+    @Test\n+    public void testPublishWithBookKeeperError() throws Exception {\n+        int batchSize = 10;\n+        publishBatch(batchSize, true, false, 0);\n+        // stop all bookie servers\n+        bktb.stopAllBookieServers();\n+        // following publish would failed with NotEnoughBookies\n+        publishBatch(batchSize, false, false, 1);\n+        // start all bookie servers\n+        bktb.startAllBookieServers();\n+        // following publish should succeed\n+        publishBatch(batchSize, true, false, 1);\n+    }\n }"},{"sha":"21ccf5553c8b2046e7d4b68dbec170ab7b9b42cc","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":46,"deletions":3,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/76818a6aadd4aa40a45aca6f5b0acba79cd42515/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/76818a6aadd4aa40a45aca6f5b0acba79cd42515/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=76818a6aadd4aa40a45aca6f5b0acba79cd42515","patch":"@@ -17,6 +17,7 @@\n  */\n package org.apache.hedwig.server.persistence;\n \n+import java.net.InetAddress;\n import java.io.File;\n import java.util.LinkedList;\n import java.util.List;\n@@ -49,6 +50,7 @@\n \n     // BookKeeper Server variables\n     private List<BookieServer> bookiesList;\n+    private List<ServerConfiguration> bkConfsList;\n     private int initialPort = 5000;\n     private int nextPort = initialPort;\n \n@@ -101,6 +103,7 @@ public void setUp() throws Exception {\n \n         // Create Bookie Servers\n         bookiesList = new LinkedList<BookieServer>();\n+        bkConfsList = new LinkedList<ServerConfiguration>();\n \n         for (int i = 0; i < numBookies; i++) {\n             startUpNewBookieServer();\n@@ -129,6 +132,27 @@ public void tearDown() throws Exception {\n         bk.close();\n         super.tearDown();\n     }\n+\n+    public void stopAllBookieServers() throws Exception {\n+        try {\n+            for (BookieServer bs : bookiesList) {\n+                bs.shutdown();\n+            }\n+            bookiesList.clear();\n+        } catch (InterruptedException e) {\n+            LOG.error(\"Error stopping all bookie servers\", e);\n+        }\n+    }\n+\n+    public void startAllBookieServers() throws Exception {\n+        try {\n+            for (ServerConfiguration conf : bkConfsList) {\n+                bookiesList.add(startBookie(conf));\n+            }\n+        } catch (InterruptedException e) {\n+            LOG.error(\"Error starting all bookie servers\", e);\n+        }\n+    }\n     \n     public void tearDownOneBookieServer() throws Exception {\n         Random r = new Random();\n@@ -140,16 +164,35 @@ public void tearDownOneBookieServer() throws Exception {\n             LOG.error(\"Error tearing down\", e);\n         }\n         bookiesList.remove(bi);\n+        bkConfsList.remove(bi);\n     }\n     \n     public void startUpNewBookieServer() throws Exception {\n         File tmpDir = FileUtils.createTempDirectory(\n                 PREFIX + (nextPort - initialPort), SUFFIX);\n         ServerConfiguration conf = newServerConfiguration(\n                 nextPort++, hostPort, tmpDir, new File[] { tmpDir });\n-        BookieServer bs = new BookieServer(conf);\n-        bs.start();\n-        bookiesList.add(bs);\n+        bookiesList.add(startBookie(conf));\n+        bkConfsList.add(conf);\n+    }\n+\n+    /**\n+     * Helper method to startup a bookie server using a configuration object\n+     *\n+     * @param conf\n+     *            Server Configuration Object\n+     *\n+     */\n+    private BookieServer startBookie(ServerConfiguration conf) throws Exception {\n+        BookieServer server = new BookieServer(conf);\n+        server.start();\n+\n+        int port = conf.getBookiePort();\n+        while(zk.exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null) {\n+            Thread.sleep(500);\n+        }\n+\n+        return server;\n     }\n \n     protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {"}]}

