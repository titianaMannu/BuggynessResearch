{"sha":"79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3OWVhMDVhM2NiY2M5NTNiZDg2ZjAyNGViNDE0M2U0Yjg1ZmNkOGYx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-09-05T10:32:39Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-09-05T10:32:39Z"},"message":"BOOKKEEPER-63: Hedwig PubSubServer must wait for its Zookeeper client to be connected upon startup (morel via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1165231 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f143c0ce5fb4ed8a01d3a5f18f3137c5175a20f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6f143c0ce5fb4ed8a01d3a5f18f3137c5175a20f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1","html_url":"https://github.com/apache/bookkeeper/commit/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"28377803242f8514fcdf17f7a808aa756fa158b9","url":"https://api.github.com/repos/apache/bookkeeper/commits/28377803242f8514fcdf17f7a808aa756fa158b9","html_url":"https://github.com/apache/bookkeeper/commit/28377803242f8514fcdf17f7a808aa756fa158b9"}],"stats":{"total":145,"additions":144,"deletions":1},"files":[{"sha":"5558df99c26018da7aa7aea618a91ab5c8d328e5","filename":"CHANGES.txt","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1","patch":"@@ -44,6 +44,7 @@ BUGFIXES:\n   \n   BOOKKEEPER-51: NullPointException at FIFODeliveryManager#deliveryPtrs (xulei via ivank)\n \n+  BOOKKEEPER-63: Hedwig PubSubServer must wait for its Zookeeper client to be connected upon startup (morel via ivank)\n \n  hedwig-client/\n  "},{"sha":"ed8dff018aa6f481e3e00963c379f47a82682f29","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":15,"deletions":1,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1","patch":"@@ -24,9 +24,11 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.commons.configuration.ConfigurationException;\n@@ -140,13 +142,25 @@ protected RegionManager instantiateRegionManager(PersistenceManager pm, Schedule\n         return new RegionManager(pm, conf, zk, scheduler, new HedwigHubClientFactory(conf, clientChannelFactory));\n     }\n \n-    protected void instantiateZookeeperClient() throws IOException {\n+    protected void instantiateZookeeperClient() throws Exception {\n         if (!conf.isStandalone()) {\n+            final CountDownLatch signalZkReady = new CountDownLatch(1);\n+\n             zk = new ZooKeeper(conf.getZkHost(), conf.getZkTimeout(), new Watcher() {\n                 @Override\n                 public void process(WatchedEvent event) {\n+                    if(Event.KeeperState.SyncConnected.equals(event.getState())) {\n+                        signalZkReady.countDown();\n+                    }\n                 }\n             });\n+            // wait until connection is effective\n+            if (!signalZkReady.await(conf.getZkTimeout()*2, TimeUnit.MILLISECONDS)) {\n+                logger.fatal(\"Could not establish connection with ZooKeeper after zk_timeout*2 = \" +\n+                        conf.getZkTimeout()*2 + \" ms. (Default value for zk_timeout is 2000).\");\n+                throw new Exception(\"Could not establish connection with ZooKeeper after zk_timeout*2 = \" +\n+                        conf.getZkTimeout()*2 + \" ms. (Default value for zk_timeout is 2000).\");\n+            }\n         }\n     }\n "},{"sha":"60475e3bcd8095e513e18d5bc17ed6a0e0c60036","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/apache/bookkeeper/blob/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","raw_url":"https://github.com/apache/bookkeeper/raw/79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java?ref=79ea05a3cbcc953bd86f024eb4143e4b85fcd8f1","patch":"@@ -0,0 +1,128 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.netty.PubSubServer;\n+import org.apache.log4j.Logger;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.ZooDefs;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.server.NIOServerCnxnFactory;\n+import org.apache.zookeeper.server.ZooKeeperServer;\n+import org.apache.zookeeper.test.ClientBase;\n+import org.junit.Test;\n+\n+public class TestPubSubServerStartup {\n+\n+    private static Logger logger = Logger.getLogger(TestPubSubServerStartup.class);\n+\n+    /**\n+     * Start-up zookeeper + pubsubserver reading from a config URL. Then stop\n+     * and cleanup.\n+     *\n+     * Loop over that.\n+     *\n+     * If the pubsub server does not wait for its zookeeper client to be\n+     * connected, the pubsub server will fail at startup.\n+     *\n+     */\n+    @Test\n+    public void testPubSubServerInstantiationWithConfig() throws Exception {\n+        for (int i = 0; i < 10; i++) {\n+            logger.info(\"iteration \" + i);\n+            instantiateAndDestroyPubSubServer();\n+        }\n+    }\n+\n+    private void instantiateAndDestroyPubSubServer() throws IOException, InterruptedException, ConfigurationException,\n+            MalformedURLException, Exception {\n+        String hedwigParams = \"default_server_host=localhost:4080\\n\" + \"zookeeper_connection_string=localhost:2181\\n\"\n+                + \"zk_timeout=2000\\n\";\n+\n+        File hedwigConfigFile = new File(System.getProperty(\"java.io.tmpdir\") + \"/hedwig.cfg\");\n+        writeStringToFile(hedwigParams, hedwigConfigFile);\n+\n+        ClientBase.setupTestEnv();\n+        File zkTmpDir = File.createTempFile(\"zookeeper\", \"test\");\n+        zkTmpDir.delete();\n+        zkTmpDir.mkdir();\n+\n+        ZooKeeperServer zks = new ZooKeeperServer(zkTmpDir, zkTmpDir, 2181);\n+\n+        NIOServerCnxnFactory serverFactory = new NIOServerCnxnFactory();\n+        serverFactory.configure(new InetSocketAddress(2181), 100);\n+        serverFactory.startup(zks);\n+\n+        boolean b = ClientBase.waitForServerUp(\"127.0.0.1:2181\", 5000);\n+        ServerConfiguration serverConf = new ServerConfiguration();\n+        serverConf.loadConf(hedwigConfigFile.toURI().toURL());\n+\n+        logger.info(\"Zookeeper server up and running!\");\n+\n+        ZooKeeper zkc = new ZooKeeper(\"127.0.0.1\", 2181, null);\n+\n+        // initialize the zk client with (fake) values\n+        zkc.create(\"/ledgers\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        zkc.create(\"/ledgers/available\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+\n+        zkc.close();\n+        PubSubServer hedwigServer = null;\n+        try {\n+            logger.info(\"starting hedwig broker!\");\n+            hedwigServer = new PubSubServer(serverConf);\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        Assert.assertNotNull(\"failed to instantiate hedwig pub sub server\", hedwigServer);\n+\n+        hedwigServer.shutdown();\n+        serverFactory.shutdown();\n+\n+        zks.shutdown();\n+\n+        zkTmpDir.delete();\n+\n+        ClientBase.waitForServerDown(\"localhost:2181\", 10000);\n+\n+    }\n+\n+    public static void writeStringToFile(String string, File f) throws IOException {\n+        if (f.exists()) {\n+            if (!f.delete()) {\n+                throw new RuntimeException(\"cannot create file \" + f.getAbsolutePath());\n+            }\n+        }\n+        if (!f.createNewFile()) {\n+            throw new RuntimeException(\"cannot create new file \" + f.getAbsolutePath());\n+        }\n+\n+        FileWriter fw = new FileWriter(f);\n+        fw.write(string);\n+        fw.close();\n+    }\n+}"}]}

