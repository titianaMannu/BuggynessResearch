{"sha":"7b2b91579000bc99d6fdded3aefb349975058c6f","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YjJiOTE1NzkwMDBiYzk5ZDZmZGRlZDNhZWZiMzQ5OTc1MDU4YzZm","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-29T15:31:46Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-29T15:31:46Z"},"message":"BOOKKEEPER-523: Every test should have a timeout (ivank, sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1426772 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46f5cd6e18bf3e901c815746df3467c608cf82f8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/46f5cd6e18bf3e901c815746df3467c608cf82f8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7b2b91579000bc99d6fdded3aefb349975058c6f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7b2b91579000bc99d6fdded3aefb349975058c6f","html_url":"https://github.com/apache/bookkeeper/commit/7b2b91579000bc99d6fdded3aefb349975058c6f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7b2b91579000bc99d6fdded3aefb349975058c6f/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea36e59a1c314bf698d572e5f714e0b68e554a6e","url":"https://api.github.com/repos/apache/bookkeeper/commits/ea36e59a1c314bf698d572e5f714e0b68e554a6e","html_url":"https://github.com/apache/bookkeeper/commit/ea36e59a1c314bf698d572e5f714e0b68e554a6e"}],"stats":{"total":572,"additions":287,"deletions":285},"files":[{"sha":"2559c7bd246a61d028849415e8e093741f13973c","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -219,6 +219,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-495: Revise BK config doc (fpj, ivank via fpj)\n \n+      BOOKKEEPER-523: Every test should have a timeout (ivank, sijie via fpj)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-328: Bookie DeathWatcher is missing thread name (Rakesh via sijie)"},{"sha":"269ea5894f9a01bcda5c44e1cbac8e582dc1dc6b","filename":"bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -53,7 +53,7 @@ public TestBenchmark() {\n         super(5);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testThroughputLatency() throws Exception {\n         String latencyFile = System.getProperty(\"test.latency.file\", \"latencyDump.dat\");\n         BenchThroughputLatency.main(new String[] {\n@@ -66,7 +66,7 @@ public void testThroughputLatency() throws Exception {\n             });\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBookie() throws Exception {\n         InetSocketAddress bookie = getBookie(0);\n         BenchBookie.main(new String[] {\n@@ -76,7 +76,7 @@ public void testBookie() throws Exception {\n                 });\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadThroughputLatency() throws Exception {\n         final AtomicBoolean threwException = new AtomicBoolean(false);\n         Thread t = new Thread() {"},{"sha":"965b95568ab368e74fb0e5bff22868adb172f3a1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -200,7 +200,7 @@ private JournalChannel writePostV3Journal(File journalDir, int numEntries, byte[\n      * word at the start. This is for versions of bookkeeper before\n      * the magic word was introduced\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testPreV2Journal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -239,7 +239,7 @@ public void testPreV2Journal() throws Exception {\n      * start the bookie. An admin should look to see what has\n      * happened in this case\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAllJunkJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -277,7 +277,7 @@ public void testAllJunkJournal() throws Exception {\n      * the magic word existed, if the bookie started but nothing was\n      * ever written.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testEmptyJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -303,7 +303,7 @@ public void testEmptyJournal() throws Exception {\n      * Test that a journal can load if only the magic word and\n      * version are there.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testHeaderOnlyJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -329,7 +329,7 @@ public void testHeaderOnlyJournal() throws Exception {\n      * Test that if a journal has junk at the end, it does not load.\n      * If the journal is corrupt like this, admin intervention is needed\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testJunkEndedJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -368,7 +368,7 @@ public void testJunkEndedJournal() throws Exception {\n      * should be fine here. The bookie has crashed while writing\n      * but so the client has not be notified of success.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testTruncatedInLenJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -416,7 +416,7 @@ public void testTruncatedInLenJournal() throws Exception {\n      * This is ok, as the client will disregard the entry after looking\n      * at its checksum.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testTruncatedInEntryJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -473,15 +473,15 @@ public void testTruncatedInEntryJournal() throws Exception {\n     /**\n      * Test partial index (truncate master key) with pre-v3 journals\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testPartialFileInfoPreV3Journal1() throws Exception {\n         testPartialFileInfoPreV3Journal(true);\n     }\n \n     /**\n      * Test partial index with pre-v3 journals\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testPartialFileInfoPreV3Journal2() throws Exception {\n         testPartialFileInfoPreV3Journal(false);\n     }\n@@ -533,15 +533,15 @@ private void testPartialFileInfoPreV3Journal(boolean truncateMasterKey)\n     /**\n      * Test partial index (truncate master key) with post-v3 journals\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testPartialFileInfoPostV3Journal1() throws Exception {\n         testPartialFileInfoPostV3Journal(true);\n     }\n \n     /**\n      * Test partial index with post-v3 journals\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testPartialFileInfoPostV3Journal2() throws Exception {\n         testPartialFileInfoPostV3Journal(false);\n     }"},{"sha":"bc2b0837a468c26fb2317055c94453b9855e6fff","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -133,7 +133,7 @@ private void verifyLedger(long lid, long startEntryId, long endEntryId) throws E\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testDisableCompaction() throws Exception {\n         // prepare data\n         LedgerHandle[] lhs = prepareData(3, false);\n@@ -160,7 +160,7 @@ public void testDisableCompaction() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testMinorCompaction() throws Exception {\n         // prepare data\n         LedgerHandle[] lhs = prepareData(3, false);\n@@ -194,7 +194,7 @@ public void testMinorCompaction() throws Exception {\n         verifyLedger(lhs[0].getId(), 0, lhs[0].getLastAddConfirmed());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testMajorCompaction() throws Exception {\n \n         // prepare data\n@@ -229,7 +229,7 @@ public void testMajorCompaction() throws Exception {\n         verifyLedger(lhs[1].getId(), 0, lhs[1].getLastAddConfirmed());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testMajorCompactionAboveThreshold() throws Exception {\n         // prepare data\n         LedgerHandle[] lhs = prepareData(3, false);\n@@ -252,7 +252,7 @@ public void testMajorCompactionAboveThreshold() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCompactionSmallEntryLogs() throws Exception {\n \n         // create a ledger to write a few entries"},{"sha":"ea961fe54374f2c9d1dd88951fcf64adc3cc41d5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -73,7 +73,7 @@ private static String newDirectory(boolean createCurDir) throws IOException {\n     /**\n      * Test starting bookie with clean state.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testCleanStart() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n@@ -92,7 +92,7 @@ public void testCleanStart() throws Exception {\n      * is different to a local cookie, the bookie\n      * will fail to start\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBadJournalCookie() throws Exception {\n         ServerConfiguration conf1 = new ServerConfiguration()\n             .setJournalDirName(newDirectory())\n@@ -125,7 +125,7 @@ public void testBadJournalCookie() throws Exception {\n      * the configuration, the bookie will fail to\n      * start\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testDirectoryMissing() throws Exception {\n         String[] ledgerDirs = new String[] {\n             newDirectory(), newDirectory(), newDirectory() };\n@@ -167,7 +167,7 @@ public void testDirectoryMissing() throws Exception {\n      * preexisting bookie, the bookie will fail\n      * to start\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testDirectoryAdded() throws Exception {\n         String ledgerDir0 = newDirectory();\n         String journalDir = newDirectory();\n@@ -199,7 +199,7 @@ public void testDirectoryAdded() throws Exception {\n      * Test that if a directory's contents\n      * are emptied, the bookie will fail to start\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testDirectoryCleared() throws Exception {\n         String ledgerDir0 = newDirectory();\n         String journalDir = newDirectory();\n@@ -226,7 +226,7 @@ public void testDirectoryCleared() throws Exception {\n      * Test that if a bookie's port is changed\n      * the bookie will fail to start\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBookiePortChanged() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n@@ -252,7 +252,7 @@ public void testBookiePortChanged() throws Exception {\n      * existed in the system, then the bookie will fail\n      * to start\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n@@ -279,7 +279,7 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n     /*\n      * Test Cookie verification with format.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testVerifyCookieWithFormat() throws Exception {\n         ClientConfiguration adminConf = new ClientConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString());\n@@ -317,7 +317,7 @@ public void testVerifyCookieWithFormat() throws Exception {\n      * Test that if a bookie is started with directories with\n      * version 2 data, that it will fail to start (it needs upgrade)\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testV2data() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n@@ -337,7 +337,7 @@ public void testV2data() throws Exception {\n      * Test that if a bookie is started with directories with\n      * version 1 data, that it will fail to start (it needs upgrade)\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testV1data() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())"},{"sha":"6ec48e5c7ebfbcf743ccc701c63473adab6d6904","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -75,7 +75,7 @@ private void deleteRecursive(File f) {\n      * \n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateNewLog() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n                      "},{"sha":"5d9eeb55b7999eb2031e7d17bbcb388095d7575d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -46,7 +46,7 @@\n     public void setUp() throws Exception {\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCorruptEntryLog() throws Exception {\n         File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n         tmpDir.delete();\n@@ -98,7 +98,7 @@ private ByteBuffer generateEntry(long ledger, long entry) {\n         return bb;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testMissingLogId() throws Exception {\n         File tmpDir = File.createTempFile(\"entryLogTest\", \".dir\");\n         tmpDir.delete();\n@@ -161,7 +161,7 @@ public void testMissingLogId() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     /** Test that EntryLogger Should fail with FNFE, if entry logger directories does not exist*/\n     public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n             throws Exception {\n@@ -186,7 +186,7 @@ public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n     /**\n      * Test to verify the DiskFull during addEntry\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAddEntryFailureOnDiskFull() throws Exception {\n         File ledgerDir1 = File.createTempFile(\"bkTest\", \".dir\");\n         ledgerDir1.delete();"},{"sha":"294295fdb48389d5381d51b56c81475cacb3cd1b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -53,7 +53,7 @@ public void setUp() throws Exception {\n         dirsManager = new LedgerDirsManager(conf);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testPickWritableDirExclusive() throws Exception {\n         try {\n             dirsManager.pickRandomWritableDir(curDir);\n@@ -64,7 +64,7 @@ public void testPickWritableDirExclusive() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testNoWritableDir() throws Exception {\n         try {\n             dirsManager.addToFilledDirs(curDir);"},{"sha":"6825e8fb71b7357c36cb6bbd0ccdc0fac88209c0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -201,21 +201,21 @@ private static void testUpgradeProceedure(String zkServers, String journalDir, S\n         b = null;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testUpgradeV1toCurrent() throws Exception {\n         String journalDir = newV1JournalDirectory();\n         String ledgerDir = newV1LedgerDirectory();\n         testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testUpgradeV2toCurrent() throws Exception {\n         String journalDir = newV2JournalDirectory();\n         String ledgerDir = newV2LedgerDirectory();\n         testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testUpgradeCurrent() throws Exception {\n         String journalDir = newV2JournalDirectory();\n         String ledgerDir = newV2LedgerDirectory();\n@@ -232,7 +232,7 @@ public void testUpgradeCurrent() throws Exception {\n         b.shutdown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCommandLine() throws Exception {\n         PrintStream origerr = System.err;\n         PrintStream origout = System.out;"},{"sha":"aa04b8698b2f813081b12e43963ae500f136e572","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -52,7 +52,7 @@ public BookKeeperTest(DigestType digestType) {\n         this.digestType = digestType;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testConstructionZkDelay() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration()\n             .setZkServers(zkUtil.getZooKeeperConnectString())\n@@ -67,7 +67,7 @@ public void testConstructionZkDelay() throws Exception {\n         bkc.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testConstructionNotConnectedExplicitZk() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration()\n             .setZkServers(zkUtil.getZooKeeperConnectString())\n@@ -96,7 +96,7 @@ public void process(WatchedEvent event) {\n      * Test that bookkeeper is not able to open ledgers if\n      * it provides the wrong password or wrong digest\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBookkeeperPassword() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration()\n             .setZkServers(zkUtil.getZooKeeperConnectString());\n@@ -156,7 +156,7 @@ public void testBookkeeperPassword() throws Exception {\n      * a callback error and not an InterruptedException.\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncReadWithError() throws Exception {\n         LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"testPasswd\".getBytes());\n         bkc.close();"},{"sha":"95a00f300ff8740d470210bcb24a272067c07d75","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -236,7 +236,7 @@ private void verifyRecoveredLedgers(List<LedgerHandle> oldLhs, long startEntryId\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncBookieRecoveryToSpecificBookie() throws Exception {\n         // Create the ledgers\n         int numLedgers = 3;\n@@ -290,7 +290,7 @@ public void testAsyncBookieRecoveryToSpecificBookie() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncBookieRecoveryToRandomBookies() throws Exception {\n         // Create the ledgers\n         int numLedgers = 3;\n@@ -345,7 +345,7 @@ public void testAsyncBookieRecoveryToRandomBookies() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncBookieRecoveryToSpecificBookie() throws Exception {\n         // Create the ledgers\n         int numLedgers = 3;\n@@ -389,7 +389,7 @@ public void testSyncBookieRecoveryToSpecificBookie() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncBookieRecoveryToRandomBookies() throws Exception {\n         // Create the ledgers\n         int numLedgers = 3;\n@@ -558,7 +558,7 @@ private boolean findDupesInEnsembles(List<LedgerHandle> lhs) throws Exception {\n     /**\n      * Test recoverying the closed ledgers when the failed bookie server is in the last ensemble\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBookieRecoveryOnClosedLedgers() throws Exception {\n         // Create the ledgers\n         int numLedgers = 3;\n@@ -590,7 +590,7 @@ public void testBookieRecoveryOnClosedLedgers() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBookieRecoveryOnOpenedLedgers() throws Exception {\n         // Create the ledgers\n         int numLedgers = 3;\n@@ -627,7 +627,7 @@ public void testBookieRecoveryOnOpenedLedgers() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBookieRecoveryOnInRecoveryLedger() throws Exception {\n         int numMsgs = 10;\n         // Create the ledgers\n@@ -689,7 +689,7 @@ public void testBookieRecoveryOnInRecoveryLedger() throws Exception {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncBookieRecoveryToRandomBookiesNotEnoughBookies() throws Exception {\n         // Create the ledgers\n         int numLedgers = 3;\n@@ -720,7 +720,7 @@ public void testAsyncBookieRecoveryToRandomBookiesNotEnoughBookies() throws Exce\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncBookieRecoveryToRandomBookiesCheckForDupes() throws Exception {\n         Random r = new Random();\n \n@@ -764,7 +764,7 @@ public void testSyncBookieRecoveryToRandomBookiesCheckForDupes() throws Exceptio\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void recoverWithoutPasswordInConf() throws Exception {\n         byte[] passwdCorrect = \"AAAAAA\".getBytes();\n         byte[] passwdBad = \"BBBBBB\".getBytes();\n@@ -833,7 +833,7 @@ public void recoverWithoutPasswordInConf() throws Exception {\n      * Test that when we try to recover a ledger which doesn't have\n      * the password stored in the configuration, we don't succeed\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void ensurePasswordUsedForOldLedgers() throws Exception {\n         // This test bases on creating old ledgers in version 4.1.0, which only\n         // supports ZooKeeper based flat and hierarchical LedgerManagerFactory."},{"sha":"50242fb8fc493f248259b59eb4073ae2df3ec44c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -87,7 +87,7 @@ public BookieWriteLedgerTest(String ledgerManagerFactory,\n      * Verify write when few bookie failures in last ensemble and forcing\n      * ensemble reformation\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testWithMultipleBookieFailuresInLastEnsemble() throws Exception {\n         // Create a ledger\n         lh = bkc.createLedger(5, 4, digestType, ledgerPassword);\n@@ -130,7 +130,7 @@ public void testWithMultipleBookieFailuresInLastEnsemble() throws Exception {\n     /**\n      * Verify asynchronous writing when few bookie failures in last ensemble.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncWritesWithMultipleFailuresInLastEnsemble()\n             throws Exception {\n         // Create ledgers"},{"sha":"3570216d5d962d38ed69de17cf54efceaf84eb1f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -82,23 +82,23 @@ private void testInternal(int numEntries) throws Exception {\n                    afterlh.getLength() == length);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerRecovery() throws Exception {\n         testInternal(100);\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testEmptyLedgerRecoveryOne() throws Exception {\n         testInternal(1);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testEmptyLedgerRecovery() throws Exception {\n         testInternal(0);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerRecoveryWithWrongPassword() throws Exception {\n         // Create a ledger\n         byte[] ledgerPassword = \"aaaa\".getBytes();\n@@ -122,7 +122,7 @@ public void testLedgerRecoveryWithWrongPassword() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerRecoveryWithNotEnoughBookies() throws Exception {\n         int numEntries = 3;\n \n@@ -160,7 +160,7 @@ public void testLedgerRecoveryWithNotEnoughBookies() throws Exception {\n         assertEquals(numEntries - 1, afterlh.getLastAddConfirmed());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerRecoveryWithSlowBookie() throws Exception {\n         for (int i = 0; i < 3; i++) {\n             LOG.info(\"TestLedgerRecoveryWithAckQuorum @ slow bookie {}\", i);"},{"sha":"8f173ef2c9ad3b7c814a29b7a384339125afd814","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -32,7 +32,7 @@\n public class RoundRobinDistributionScheduleTest {\n     static Logger LOG = LoggerFactory.getLogger(RoundRobinDistributionScheduleTest.class);\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testDistributionSchedule() throws Exception {\n         RoundRobinDistributionSchedule schedule = new RoundRobinDistributionSchedule(3, 2, 5);\n "},{"sha":"071b5e4e086963f37925917db1eab2bc1e17d483","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -46,7 +46,7 @@ public SlowBookieTest() {\n         super(4);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSlowBookie() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         conf.setZkServers(zkUtil.getZooKeeperConnectString()).setReadTimeout(360);\n@@ -89,7 +89,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBookieFailureWithSlowBookie() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         conf.setZkServers(zkUtil.getZooKeeperConnectString()).setReadTimeout(5);\n@@ -144,7 +144,7 @@ public void operationComplete(int rc, Set<LedgerFragment> fragments) {\n         assertEquals(\"There should be no missing fragments\", 0, numFragments.get());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testManyBookieFailureWithSlowBookies() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         conf.setZkServers(zkUtil.getZooKeeperConnectString()).setReadTimeout(5);"},{"sha":"d175fec8ebe35ce560bb9ec028b284c8b2e8ff48","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -56,7 +56,7 @@ public TestFencing(DigestType digestType) {\n      * Basic fencing test. Create ledger, write to it,\n      * open ledger, write again (should fail).\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBasicFencing() throws Exception {\n         /*\n          * Create ledger.\n@@ -155,7 +155,7 @@ long getLastConfirmedEntry() {\n      * All opens should result in a ledger with an equals number of \n      * entries.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testManyOpenParallel() throws Exception {\n         /*\n          * Create ledger.\n@@ -204,7 +204,7 @@ public void run() {\n      * Test that opening a ledger in norecovery mode\n      * doesn't fence off a ledger\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testNoRecoveryOpen() throws Exception {\n         /*\n          * Create ledger.\n@@ -250,7 +250,7 @@ public void testNoRecoveryOpen() throws Exception {\n      * kill a bookie in the ensemble. Recover.\n      * Fence the ledger. Kill another bookie. Recover.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testFencingInteractionWithBookieRecovery() throws Exception {\n         System.setProperty(\"digestType\", digestType.toString());\n         System.setProperty(\"passwd\", \"testPasswd\");\n@@ -305,7 +305,7 @@ public void testFencingInteractionWithBookieRecovery() throws Exception {\n      * Fence the ledger. Kill a bookie. Recover.\n      * Ensure that recover doesn't reallow adding\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testFencingInteractionWithBookieRecovery2() throws Exception {\n         System.setProperty(\"digestType\", digestType.toString());\n         System.setProperty(\"passwd\", \"testPasswd\");\n@@ -350,7 +350,7 @@ public void testFencingInteractionWithBookieRecovery2() throws Exception {\n     /**\n      * Test that fencing doesn't work with a bad password\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testFencingBadPassword() throws Exception {\n         /*\n          * Create ledger."},{"sha":"f5733b279684c2132822dc4f8c44736f9ff3f80a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -64,7 +64,7 @@ public void operationComplete(int rc, Set<LedgerFragment> result) {\n      * Tests that the LedgerChecker should detect the underReplicated fragments\n      * on multiple Bookie crashes\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testChecker() throws Exception {\n \n         LedgerHandle lh = bkc.createLedger(BookKeeper.DigestType.CRC32,"},{"sha":"b250777827c6a0988e3590d65d7469cbde2495fa","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -71,7 +71,7 @@ public void operationComplete(int rc, Set<LedgerFragment> result) {\n      * Tests that replicate method should replicate the failed bookie fragments\n      * to target bookie passed.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testReplicateLFShouldCopyFailedBookieFragmentsToTargetBookie()\n             throws Exception {\n         byte[] data = \"TestLedgerFragmentReplication\".getBytes();\n@@ -128,7 +128,7 @@ public void testReplicateLFShouldCopyFailedBookieFragmentsToTargetBookie()\n      * Tests that fragment re-replication fails on last unclosed ledger\n      * fragments.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testReplicateLFFailsOnlyOnLastUnClosedFragments()\n             throws Exception {\n         byte[] data = \"TestLedgerFragmentReplication\".getBytes();\n@@ -186,7 +186,7 @@ public void testReplicateLFFailsOnlyOnLastUnClosedFragments()\n      * Tests that ReplicateLedgerFragment should return false if replication\n      * fails\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testReplicateLFShouldReturnFalseIfTheReplicationFails()\n             throws Exception {\n         byte[] data = \"TestLedgerFragmentReplication\".getBytes();"},{"sha":"9b48aa1038d084802133c93cb764263abd23568a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -57,7 +57,7 @@ public TestReadTimeout() {\n         this.digestType = DigestType.CRC32;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadTimeout() throws Exception {\n         final AtomicBoolean completed = new AtomicBoolean(false);\n "},{"sha":"64cd5dc1ab02ad85ca943e38d24ccdd3d2bad322","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -120,7 +120,7 @@ void expectTimeout(int milliseconds) throws Exception {\n      * - read second bookie, spec client should find on bookie three,\n      *   non spec client should hang.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSpeculativeRead() throws Exception {\n         long id = getLedgerToRead(3,2);\n         BookKeeper bknospec = createClient(0); // disabled\n@@ -164,7 +164,7 @@ public void testSpeculativeRead() throws Exception {\n      * Test that if more than one replica is down, we can still read, as long as the quorum\n      * size is larger than the number of down replicas.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSpeculativeReadMultipleReplicasDown() throws Exception {\n         long id = getLedgerToRead(5,5);\n         int timeout = 5000;\n@@ -235,7 +235,7 @@ public void testSpeculativeReadMultipleReplicasDown() throws Exception {\n      * Test that if after a speculative read is kicked off, the original read completes\n      * nothing bad happens.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSpeculativeReadFirstReadCompleteIsOk() throws Exception {\n         long id = getLedgerToRead(2,2);\n         int timeout = 1000;\n@@ -278,7 +278,7 @@ public void testSpeculativeReadFirstReadCompleteIsOk() throws Exception {\n     /**\n      * Unit test for the speculative read scheduling method\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSpeculativeReadScheduling() throws Exception {\n         long id = getLedgerToRead(3,2);\n         int timeout = 1000;"},{"sha":"bc3c8995248900648354ffb2f16b704167780bd9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -85,7 +85,7 @@ public void operationComplete(int rc, Long ledgerId) {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testGarbageCollectLedgers() throws Exception {\n         int numLedgers = 100;\n         int numRemovedLedgers = 10;"},{"sha":"fcc6d90524e7a2a9f02487f2dc78f375af72df8f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -37,7 +37,7 @@ public LedgerLayoutTest() {\n         super(0);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerLayout() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         conf.setLedgerManagerFactoryClass(HierarchicalLedgerManagerFactory.class);\n@@ -74,7 +74,7 @@ private void writeLedgerLayout(\n         layout.store(zkc, ledgersRootPath);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBadVersionLedgerLayout() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         // write bad version ledger layout\n@@ -91,7 +91,7 @@ public void testBadVersionLedgerLayout() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAbsentLedgerManagerLayout() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         String ledgersLayout = conf.getZkLedgersRootPath() + \"/\"\n@@ -110,7 +110,7 @@ public void testAbsentLedgerManagerLayout() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBaseLedgerManagerLayout() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         String rootPath = conf.getZkLedgersRootPath();\n@@ -131,7 +131,7 @@ public void testBaseLedgerManagerLayout() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadV1LedgerManagerLayout() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         // write v1 ledger layout"},{"sha":"d6af24c911b84cafe172eba2af2bbd8b5a61afcf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -65,7 +65,7 @@ private void writeLedgerLayout(String ledgersRootPath,\n     /** \n      * Test bad client configuration\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBadConf() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         \n@@ -111,7 +111,7 @@ public void testBadConf() throws Exception {\n     /**\n      * Test bad client configuration\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBadConfV1() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n \n@@ -152,7 +152,7 @@ public void testBadConfV1() throws Exception {\n     /**\n      * Test bad zk configuration\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBadZkContents() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n         \n@@ -240,7 +240,7 @@ public void close() throws Exception {\n     }\n \n     // test concurrent\n-    @Test\n+    @Test(timeout=60000)\n     public void testConcurrent1() throws Exception {\n         /// everyone creates the same\n         int numThreads = 50;\n@@ -270,7 +270,7 @@ public void testConcurrent1() throws Exception {\n         assertTrue(\"Not all ledger managers created\", success);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testConcurrent2() throws Exception {\n         /// odd create different\n         int numThreadsEach = 25;"},{"sha":"366735652729cc096ad1d7121cc1ce8c5aed7f90","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -28,7 +28,7 @@\n \n public class TestZkVersion {\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testNullZkVersion() {\n         ZkVersion zkVersion = new ZkVersion(99);\n         try {\n@@ -38,7 +38,7 @@ public void testNullZkVersion() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testInvalidVersion() {\n         ZkVersion zkVersion = new ZkVersion(99);\n         try {\n@@ -53,7 +53,7 @@ public Occurred compare(Version v) {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCompare() {\n         ZkVersion zv = new ZkVersion(99);\n         Assert.assertEquals(Occurred.AFTER, zv.compare(new ZkVersion(98)));"},{"sha":"2752bcf85311f67841b16b88667a48d58340a43d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -295,7 +295,7 @@ protected void clearTable() throws Exception {\n     /**\n      * Test (get, get partial field, remove) on non-existent element.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testNonExistent() throws Exception {\n         // get\n         try {\n@@ -324,7 +324,7 @@ public void testNonExistent() throws Exception {\n     /**\n      * Test usage of get operation on (full and partial) fields.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testGet() throws Exception {\n         Versioned<Value> vv;\n \n@@ -371,7 +371,7 @@ public void testGet() throws Exception {\n     /**\n      * Test usage of put operation with (full and partial) fields.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testPut() throws Exception {\n         final Integer counter = getRandom();\n         final String name = \"put\";\n@@ -462,7 +462,7 @@ protected void illegalPut(Value value, Version version) throws MSException {\n      * Test usage of (unconditional remove, BadVersion remove, CorrectVersion\n      * remove) operation.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testRemove() throws Exception {\n         final Integer counter = getRandom();\n         final String name = \"remove\";\n@@ -541,7 +541,7 @@ void openRangeCursorTest(String firstKey, boolean firstInclusive,\n     /**\n      * Test usage of (scan) operation on (full and partial) fields.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testOpenCursor() throws Exception {\n \n         TreeMap<String, Value> allValues = Maps.newTreeMap();"},{"sha":"3aed8cb0c1b838b5580d80c28c6d8c0dcc52d9f4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -32,7 +32,7 @@\n      * Tests that updatLatency should not fail with\n      * ArrayIndexOutOfBoundException when latency time coming as negative.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testUpdateLatencyShouldNotFailWithAIOBEWithNegativeLatency()\n             throws Exception {\n         OpStats opStat = new OpStats();"},{"sha":"d8afee89fe3e13ac736f5dc8a0121e807166c375","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -103,7 +103,7 @@ public void readEntryComplete(int rc, long ledgerId, long entryId, ChannelBuffer\n         bc.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testVersions() throws Exception {\n         testVersion(BookieProtocol.LOWEST_COMPAT_PROTOCOL_VERSION-1, BKException.Code.ProtocolVersionException);\n         testVersion(BookieProtocol.LOWEST_COMPAT_PROTOCOL_VERSION, BKException.Code.NoSuchEntryException);"},{"sha":"737ed6e98fc8c45ec82739731bb6d3000dbea59a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -80,7 +80,7 @@ public void tearDown() throws Exception {\n      * other than auditor bookie shouldn't initiate re-election and multiple\n      * auditors.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testEnsureOnlySingleAuditor() throws Exception {\n         BookieServer auditor = verifyAuditor();\n \n@@ -107,7 +107,7 @@ public void testEnsureOnlySingleAuditor() throws Exception {\n      * Test Auditor crashes should trigger re-election and another bookie should\n      * take over the auditor ship\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSuccessiveAuditorCrashes() throws Exception {\n         BookieServer auditor = verifyAuditor();\n         shutdownBookie(auditor);\n@@ -127,7 +127,7 @@ public void testSuccessiveAuditorCrashes() throws Exception {\n      * Test restarting the entire bookie cluster. It shouldn't create multiple\n      * bookie auditors\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBookieClusterRestart() throws Exception {\n         BookieServer auditor = verifyAuditor();\n         for (AuditorElector auditorElector : auditorElectors.values()) {\n@@ -148,7 +148,7 @@ public void testBookieClusterRestart() throws Exception {\n     /**\n      * Test the vote is deleting from the ZooKeeper during shutdown.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testShutdown() throws Exception {\n         BookieServer auditor = verifyAuditor();\n         shutdownBookie(auditor);\n@@ -176,7 +176,7 @@ public void testShutdown() throws Exception {\n      * Test restart of the previous Auditor bookie shouldn't initiate\n      * re-election and should create new vote after restarting.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testRestartAuditorBookieAfterCrashing() throws Exception {\n         BookieServer auditor = verifyAuditor();\n \n@@ -211,7 +211,7 @@ public void testRestartAuditorBookieAfterCrashing() throws Exception {\n      * Test that, if an auditor looses its ZK connection/session\n      * it will shutdown.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAuditorZKSessionLoss() throws Exception {\n         stopZKCluster();\n         for (AuditorElector e : auditorElectors.values()) {"},{"sha":"01e099b8643ad63155fe2825b148e46d25228f76","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -128,7 +128,7 @@ private void stopAuditorElectors() throws Exception {\n     /**\n      * Test publishing of under replicated ledgers by the auditor bookie\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSimpleLedger() throws Exception {\n         LedgerHandle lh1 = createAndAddEntriesToLedger();\n         Long ledgerId = lh1.getId();\n@@ -166,7 +166,7 @@ public void testSimpleLedger() throws Exception {\n      * Test once published under replicated ledger should exists even after\n      * restarting respective bookie\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testRestartBookie() throws Exception {\n         LedgerHandle lh1 = createAndAddEntriesToLedger();\n         ledgerList.add(lh1.getId());\n@@ -215,7 +215,7 @@ public void testRestartBookie() throws Exception {\n      * Test publishing of under replicated ledgers when multiple bookie failures\n      * one after another.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testMultipleBookieFailures() throws Exception {\n         LedgerHandle lh1 = createAndAddEntriesToLedger();\n         ledgerList.add(lh1.getId());"},{"sha":"a9b99678e79edb8c4198a0608c16c2937c337556","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -102,7 +102,7 @@ public void tearDown() throws Exception {\n      * Verify the bookie-ledger mapping with minimum number of bookies and few\n      * ledgers\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSimpleBookieLedgerMapping() throws Exception {\n \n         for (int i = 0; i < numberOfLedgers; i++) {\n@@ -131,7 +131,7 @@ public void testSimpleBookieLedgerMapping() throws Exception {\n     /**\n      * Verify ledger index with failed bookies and throws exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testWithoutZookeeper() throws Exception {\n         // This test case is for ledger metadata that stored in ZooKeeper. As\n         // far as MSLedgerManagerFactory, ledger metadata are stored in other\n@@ -158,7 +158,7 @@ public void testWithoutZookeeper() throws Exception {\n     /**\n      * Verify indexing with multiple ensemble reformation\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testEnsembleReformation() throws Exception {\n         try {\n             LedgerHandle lh1 = createAndAddEntriesToLedger();"},{"sha":"df552ad024e1c8d9c7f2477c95b680fe83729ea2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -157,7 +157,7 @@ public Long call() {\n      * Ensure that getLedgerToReplicate will block until it a ledger\n      * becomes available.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBasicInteraction() throws Exception {\n         Set<Long> ledgers = new HashSet<Long>();\n         ledgers.add(0xdeadbeefL);\n@@ -203,7 +203,7 @@ public void testBasicInteraction() throws Exception {\n      * client shouldn't be able to get it. If the first client dies\n      * however, the second client should be able to get it.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testLocking() throws Exception {\n         String missingReplica = \"localhost:3181\";\n \n@@ -240,7 +240,7 @@ public void testLocking() throws Exception {\n      * acquire a ledger, and that it's not the one that was previously\n      * marked as replicated.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testMarkingAsReplicated() throws Exception {\n         String missingReplica = \"localhost:3181\";\n \n@@ -284,7 +284,7 @@ public void testMarkingAsReplicated() throws Exception {\n      * When a client releases a previously acquired ledger, another\n      * client should then be able to acquire it.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testRelease() throws Exception {\n         String missingReplica = \"localhost:3181\";\n \n@@ -326,7 +326,7 @@ public void testRelease() throws Exception {\n      * under replicated ledger list when first rereplicating client marks\n      * it as replicated.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testManyFailures() throws Exception {\n         String missingReplica1 = \"localhost:3181\";\n         String missingReplica2 = \"localhost:3182\";\n@@ -356,7 +356,7 @@ public void testManyFailures() throws Exception {\n      * the same missing replica twice, only marking as replicated\n      * will be enough to remove it from the list.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void test2reportSame() throws Exception {\n         String missingReplica1 = \"localhost:3181\";\n \n@@ -454,7 +454,7 @@ public void run() {\n      * localhost:3181, localhost:318, localhost:31812\n      * *******************************************************************\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testMarkSimilarMissingReplica() throws Exception {\n         List<String> missingReplica = new ArrayList<String>();\n         missingReplica.add(\"localhost:3181\");\n@@ -471,7 +471,7 @@ public void testMarkSimilarMissingReplica() throws Exception {\n      * Test multiple bookie failures for a ledger and marked as underreplicated\n      * one after another.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testManyFailuresInAnEnsemble() throws Exception {\n         List<String> missingReplica = new ArrayList<String>();\n         missingReplica.add(\"localhost:3181\");\n@@ -596,7 +596,7 @@ public void run() {\n      * Test that the hierarchy gets cleaned up as ledgers\n      * are marked as fully replicated\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testHierarchyCleanup() throws Exception {\n         final LedgerUnderreplicationManager replicaMgr = lmf1\n             .newLedgerUnderreplicationManager();"},{"sha":"1e07348e497f8215f9b539c0e2a175e16ee181ea","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -101,7 +101,7 @@ LedgerHandle getLh() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncCreateClose() throws IOException, BKException {\n         try {\n "},{"sha":"34c14ab484905e59f8d41b35435a73a19c617b28","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -124,7 +124,7 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n         }\n     };\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testWriteGaps() throws Exception {\n         final Object notifyObject = new Object();\n         byte[] passwd = new byte[20];\n@@ -229,7 +229,7 @@ private ChannelBuffer createByteBuffer(int i, long lid, long eid) {\n         return ChannelBuffers.wrappedBuffer(bb);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testNoLedger() throws Exception {\n         ResultStruct arc = new ResultStruct();\n         InetSocketAddress addr = new InetSocketAddress(\"127.0.0.1\", port);"},{"sha":"d3149eb1aa96f67153af36c43ad3d85dfaab34eb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -96,31 +96,31 @@ public BookieFailureTest(String ledgerManagerFactory, DigestType digestType) {\n      *\n      * @throws {@link IOException}\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncBK1() throws IOException {\n         LOG.info(\"#### BK1 ####\");\n         auxTestReadWriteAsyncSingleClient(bs.get(0));\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncBK2() throws IOException {\n         LOG.info(\"#### BK2 ####\");\n         auxTestReadWriteAsyncSingleClient(bs.get(1));\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncBK3() throws IOException {\n         LOG.info(\"#### BK3 ####\");\n         auxTestReadWriteAsyncSingleClient(bs.get(2));\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncBK4() throws IOException {\n         LOG.info(\"#### BK4 ####\");\n         auxTestReadWriteAsyncSingleClient(bs.get(3));\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBookieRecovery() throws Exception {\n         //Shutdown all but 1 bookie\n         bs.get(0).shutdown();\n@@ -284,7 +284,7 @@ public void setUp() throws Exception {\n         zkc.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerNoRecoveryOpenAfterBKCrashed() throws Exception {\n         // Create a ledger\n         LedgerHandle beforelh = bkc.createLedger(numBookies, numBookies, digestType, \"\".getBytes());\n@@ -322,7 +322,7 @@ public void testLedgerNoRecoveryOpenAfterBKCrashed() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerOpenAfterBKCrashed() throws Exception {\n         // Create a ledger\n         LedgerHandle beforelh = bkc.createLedger(numBookies, numBookies, digestType, \"\".getBytes());\n@@ -370,7 +370,7 @@ public void testLedgerOpenAfterBKCrashed() throws Exception {\n      * \n      * BOOKKEEPER-326\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testReadLastConfirmedOp() throws Exception {\n         startNewBookie();\n         startNewBookie();"},{"sha":"5e0a92c1adaf0cb994caa6416237473d1edd5f8b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -153,7 +153,7 @@ private void validLedgerEntries(long[] ledgerIds, int msgSize, int numMsgs) thro\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testJournalRolling() throws Exception {\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Testing Journal Rolling\");\n@@ -193,7 +193,7 @@ public void testJournalRolling() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testJournalRollingWithoutSyncup() throws Exception {\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Testing Journal Rolling without sync up\");\n@@ -225,7 +225,7 @@ public void testJournalRollingWithoutSyncup() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testReplayDeletedLedgerJournalEntries() throws Exception {\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Testing replaying journal entries whose ledger has been removed.\");"},{"sha":"d6d78107a6dd63ad4479746e6eca65790cec553e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -120,7 +120,7 @@ void setLedgerEntries(Enumeration<LedgerEntry> ls) {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testOpenException() throws IOException, InterruptedException {\n         try {\n             lh = bkc.openLedger(0, digestType, ledgerPassword);\n@@ -135,7 +135,7 @@ public void testOpenException() throws IOException, InterruptedException {\n      *\n      * @throws {@link IOException}\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testStreamingClients() throws IOException, BKException, InterruptedException {\n         lh = bkc.createLedger(digestType, ledgerPassword);\n         // write a string so that we cna\n@@ -183,7 +183,7 @@ public void testStreamingClients() throws IOException, BKException, InterruptedE\n         lh.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadWriteAsyncSingleClient() throws IOException {\n         SyncObj sync = new SyncObj();\n         try {\n@@ -269,7 +269,7 @@ public void testReadWriteAsyncSingleClient() throws IOException {\n      * First try varying the offset. Then the length with a fixed non-zero\n      * offset.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testReadWriteRangeAsyncSingleClient() throws IOException {\n         SyncObj sync = new SyncObj();\n         try {\n@@ -415,7 +415,7 @@ public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncReadAsyncWriteStringsSingleClient() throws IOException {\n         SyncObj sync = new SyncObj();\n         LOG.info(\"TEST READ WRITE STRINGS MIXED SINGLE CLIENT\");\n@@ -490,7 +490,7 @@ public void testSyncReadAsyncWriteStringsSingleClient() throws IOException {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadWriteSyncSingleClient() throws IOException {\n         try {\n             // Create a ledger\n@@ -533,7 +533,7 @@ public void testReadWriteSyncSingleClient() throws IOException {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadWriteZero() throws IOException {\n         try {\n             // Create a ledger\n@@ -577,7 +577,7 @@ public void testReadWriteZero() throws IOException {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testMultiLedger() throws IOException {\n         try {\n             // Create a ledger\n@@ -633,7 +633,7 @@ public void testMultiLedger() throws IOException {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadWriteAsyncLength() throws IOException {\n         SyncObj sync = new SyncObj();\n         try {\n@@ -684,7 +684,7 @@ public void testReadWriteAsyncLength() throws IOException {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadFromOpenLedger() throws IOException {\n         try {\n             // Create a ledger\n@@ -775,7 +775,7 @@ public void testReadFromOpenLedger() throws IOException {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadFromOpenLedgerOpenOnce() throws Exception {\n         try {\n             // Create a ledger\n@@ -835,7 +835,7 @@ public void testReadFromOpenLedgerOpenOnce() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadFromOpenLedgerZeroAndOne() throws Exception {\n         try {\n             // Create a ledger\n@@ -903,7 +903,7 @@ public void testReadFromOpenLedgerZeroAndOne() throws Exception {\n     }\n \n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLastConfirmedAdd() throws IOException {\n         try {\n             // Create a ledger"},{"sha":"ad2391a97dd875de58f37e7c06678a85efe893fc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -42,7 +42,7 @@ public BookieZKExpireTest() {\n         baseClientConf.setZkTimeout(6000);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBookieServerZKExpireBehaviour() throws Exception {\n         BookieServer server = null;\n         try {"},{"sha":"e21dc7b10dd58e3d33fad2bff9e544f053f36e6a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -42,7 +42,7 @@ public CloseTest(DigestType digestType) {\n         this.digestType = digestType;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testClose() throws Exception {\n \n         /*\n@@ -73,7 +73,7 @@ public void testClose() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCloseByOthers() throws Exception {\n \n         int numLedgers = 1;"},{"sha":"1ddabe79cb1d97f245dd17348241843ab95af5d2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -114,7 +114,7 @@ public void tearDown() {\n             iterationStep = Integer.parseInt(iterationsString);\n         }\n     }\n-    @Test\n+    @Test(timeout=60000)\n     public void testConcurrentWrite() throws IOException, InterruptedException, BookieException {\n         int size = 1024;\n         int totalwrites = 128;"},{"sha":"ac1b69b76cc87cc454d1f05c821e77d528e8e9f2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -82,7 +82,7 @@ public void setUp() throws IOException, Exception {\n      * @throws KeeperException\n      */\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testConditionalSet() throws IOException, InterruptedException,\n                                     BKException, KeeperException {\n         LedgerHandle lhWrite = bkc.createLedger(digestType, new byte[] { 'a',"},{"sha":"377bf9b7c42cf43c6cd98e60ba8f30a49a6f0d05","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -28,7 +28,7 @@\n import org.junit.Test;\n \n public class ConfigurationTest extends TestCase {\n-    @Test\n+    @Test(timeout=60000)\n     public void testConfigurationOverwrite() {\n         System.clearProperty(\"zkServers\");\n \n@@ -54,7 +54,7 @@ public void testConfigurationOverwrite() {\n         assertEquals(\"newserver\", conf2.getZkServers());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testGetZkServers() {\n         System.setProperty(\"zkServers\", \"server1:port1,server2:port2\");\n         ServerConfiguration conf = new ServerConfiguration();"},{"sha":"6cb530aa2ff182c7cccf9bcd943d3c10f5262d0c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -63,7 +63,7 @@ private Thread findSyncThread() {\n         return null;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testNoSuchLedger() throws Exception {\n         LOG.debug(\"Testing NoSuchLedger\");\n \n@@ -106,7 +106,7 @@ public void testNoSuchLedger() throws Exception {\n         assertEquals(entryId, numMsgs);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testEmptyIndexPage() throws Exception {\n         LOG.debug(\"Testing EmptyIndexPage\");\n "},{"sha":"9af6cb6ea6d4b21890f1d790470bc53d08aa39a1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -45,7 +45,7 @@ public void setUp() throws Exception {\n         super.setUp();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateDeleteLedgers() throws Exception {\n         int numLedgers = 3;\n         ArrayList<Long> ledgers = new ArrayList<Long>();"},{"sha":"2279d3ee1a255d4c02881b44b83f1d9ba2703a6b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -92,7 +92,7 @@ public void setUp() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerDelete() throws Exception {\n         // Write enough ledger entries so that we roll over the initial entryLog (0.log)\n         LedgerHandle[] lhs = writeLedgerEntries(3, 1024, 1024);\n@@ -119,7 +119,7 @@ public void testLedgerDelete() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerDeleteWithExistingEntryLogs() throws Exception {\n         // Write enough ledger entries so that we roll over the initial entryLog (0.log)\n         LedgerHandle[] lhs = writeLedgerEntries(3, 1024, 1024);"},{"sha":"b68d0554eed0f0d273438b54cffde1106a79aa67","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -44,7 +44,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n \n     };\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testProblemProcessor() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n         int port = PortManager.nextFreePort();"},{"sha":"0a5274ee76c3073b56ca3fc94e98d95fefacf9ea","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -357,7 +357,7 @@ void close() throws Exception {\n     /*\n      * Test old cookie accessing the new version formatted cluster.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testOldCookieAccessingNewCluster() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -415,7 +415,7 @@ public void testOldCookieAccessingNewCluster() throws Exception {\n      *  - 4.0.0 client will not be able to fence ledgers on current server.\n      *  - Current server won't start with 4.0.0 server directories without upgrade.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testCompat400() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n@@ -503,7 +503,7 @@ public void testCompat400() throws Exception {\n      *    version due to a change in the ledger metadata format.\n      *  - Otherwise, they should be compatible.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testCompat410() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();"},{"sha":"7ab1b90dedf5f9d827e5824a8be20437d57428c9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -83,7 +83,7 @@ public void testCheckDiskErrorForFile() throws Exception {\n     /**\n      * Check disk error for valid dir.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testCheckDiskErrorForDir() throws Exception {\n         File parent = File.createTempFile(\"DiskCheck\", \"test\");\n         parent.delete();"},{"sha":"09b3b736ad4f1b64412308c6a0fe3f884410e0c0","filename":"hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -25,7 +25,7 @@\n \n public class TestFileUtils extends TestCase {\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateTmpDirectory() throws Exception {\n         String prefix = \"abc\";\n         String suffix = \"def\";"},{"sha":"bc417951a1d0921ac565b0733995088540dec95e","filename":"hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -32,35 +32,35 @@\n     private int invalidPort = -9999;\n     private String COLON = \":\";\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateWithSSLPort() throws Exception {\n         HedwigSocketAddress addr = new HedwigSocketAddress(hostname, port, sslPort);\n         assertTrue(addr.getSocketAddress().equals(new InetSocketAddress(hostname, port)));\n         assertTrue(addr.getSSLSocketAddress().equals(new InetSocketAddress(hostname, sslPort)));\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateWithNoSSLPort() throws Exception {\n         HedwigSocketAddress addr = new HedwigSocketAddress(hostname, port);\n         assertTrue(addr.getSocketAddress().equals(new InetSocketAddress(hostname, port)));\n         assertTrue(addr.getSSLSocketAddress() == null);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateFromStringWithSSLPort() throws Exception {\n         HedwigSocketAddress addr = new HedwigSocketAddress(hostname+COLON+port+COLON+sslPort);\n         assertTrue(addr.getSocketAddress().equals(new InetSocketAddress(hostname, port)));\n         assertTrue(addr.getSSLSocketAddress().equals(new InetSocketAddress(hostname, sslPort)));\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateFromStringWithNoSSLPort() throws Exception {\n         HedwigSocketAddress addr = new HedwigSocketAddress(hostname+COLON+port);\n         assertTrue(addr.getSocketAddress().equals(new InetSocketAddress(hostname, port)));\n         assertTrue(addr.getSSLSocketAddress() == null);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateWithInvalidRegularPort() throws Exception {\n         boolean success = false;\n         try {\n@@ -72,7 +72,7 @@ public void testCreateWithInvalidRegularPort() throws Exception {\n         assertTrue(success);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateWithInvalidSSLPort() throws Exception {\n         boolean success = false;\n         try {\n@@ -84,7 +84,7 @@ public void testCreateWithInvalidSSLPort() throws Exception {\n         assertTrue(success);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testToStringConversion() throws Exception {\n         HedwigSocketAddress addr = new HedwigSocketAddress(hostname, port, sslPort);\n         HedwigSocketAddress addr2 = new HedwigSocketAddress(addr.toString());\n@@ -93,7 +93,7 @@ public void testToStringConversion() throws Exception {\n         addr.toString().equals(addr2.toString());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testIsSSLEnabledFlag() throws Exception {\n         HedwigSocketAddress sslAddr = new HedwigSocketAddress(hostname, port, sslPort);\n         assertTrue(sslAddr.isSSLEnabled());"},{"sha":"0bad1438d7efac501caebbb361589cee77518a16","filename":"hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -25,14 +25,14 @@\n \n public class TestPathUtils extends TestCase {\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testPrefixes() {\n         assertEquals(Arrays.asList(new String[] { \"/a\", \"/a/b\", \"/a/b/c\" }), PathUtils.prefixes(\"/a/b/c\"));\n         assertEquals(Arrays.asList(new String[] { \"/a\", \"/a/b\", \"/a/b/c\" }), PathUtils.prefixes(\"///a///b///c\"));\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testIsPrefix() {\n         String[] paths = new String[] { \"/\", \"/a\", \"/a/b\" };\n         for (int i = 0; i < paths.length; i++) {"},{"sha":"23629c84714a7116b6452796e0479a24a5c61c4a","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -194,7 +194,7 @@ public void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncPublish() throws Exception {\n         boolean publishSuccess = true;\n         try {\n@@ -206,7 +206,7 @@ public void testSyncPublish() throws Exception {\n         assertTrue(publishSuccess);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncPublishWithResponse() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"testSyncPublishWithResponse\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysubid\");\n@@ -261,14 +261,14 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncPublish() throws Exception {\n         publisher.asyncPublish(ByteString.copyFromUtf8(\"myAsyncTopic\"), Message.newBuilder().setBody(\n                                    ByteString.copyFromUtf8(\"Hello Async World!\")).build(), new TestCallback(), null);\n         assertTrue(queue.take());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncPublishWithResponse() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"testAsyncPublishWithResponse\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysubid\");\n@@ -341,7 +341,7 @@ public void operationFailed(Object ctx, final PubSubException exception) {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testMultipleAsyncPublish() throws Exception {\n         ByteString topic1 = ByteString.copyFromUtf8(\"myFirstTopic\");\n         ByteString topic2 = ByteString.copyFromUtf8(\"myNewTopic\");\n@@ -357,7 +357,7 @@ public void testMultipleAsyncPublish() throws Exception {\n         assertTrue(queue.take());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncSubscribe() throws Exception {\n         boolean subscribeSuccess = true;\n         try {\n@@ -368,14 +368,14 @@ public void testSyncSubscribe() throws Exception {\n         assertTrue(subscribeSuccess);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncSubscribe() throws Exception {\n         subscriber.asyncSubscribe(ByteString.copyFromUtf8(\"myAsyncSubscribeTopic\"), ByteString.copyFromUtf8(\"1\"),\n                                   CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(), null);\n         assertTrue(queue.take());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testStartDeliveryAfterCloseSub() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"testStartDeliveryAfterCloseSub\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysubid\");\n@@ -402,7 +402,7 @@ public void testStartDeliveryAfterCloseSub() throws Exception {\n         assertTrue(consumeQueue.take());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSubscribeAndConsume() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"myConsumeTopic\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"1\");\n@@ -436,7 +436,7 @@ public void testSubscribeAndConsume() throws Exception {\n         assertTrue(consumeQueue.take());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncSubscribeAndUnsubscribe() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"myAsyncUnsubTopic\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"1\");\n@@ -446,7 +446,7 @@ public void testAsyncSubscribeAndUnsubscribe() throws Exception {\n         assertTrue(queue.take());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncUnsubscribeWithoutSubscription() throws Exception {\n         boolean unsubscribeSuccess = false;\n         try {\n@@ -459,7 +459,7 @@ public void testSyncUnsubscribeWithoutSubscription() throws Exception {\n         assertTrue(unsubscribeSuccess);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncSubscribeAndCloseSubscription() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"myAsyncSubAndCloseSubTopic\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"1\");\n@@ -469,7 +469,7 @@ public void testAsyncSubscribeAndCloseSubscription() throws Exception {\n         assertTrue(true);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncSubscribeWithListener() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"mySyncSubscribeWithListener\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"mysub\");\n@@ -488,7 +488,7 @@ public void testSyncSubscribeWithListener() throws Exception {\n         assertEquals(SubscriptionEvent.TOPIC_MOVED, eventQueue.take());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncSubscribeWithListener() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"myAsyncSubscribeWithListener\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"mysub\");\n@@ -505,7 +505,7 @@ public void testAsyncSubscribeWithListener() throws Exception {\n         assertEquals(SubscriptionEvent.TOPIC_MOVED, eventQueue.take());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncSubscribeForceAttach() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"mySyncSubscribeForceAttach\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"mysub\");\n@@ -562,7 +562,7 @@ public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n         client2.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncSubscribeWithListenerWhenReleasingTopic() throws Exception {\n         client.close();\n "},{"sha":"bfe96e3fdf148599529e1e664b792f1fe9df4c2b","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -252,7 +252,7 @@ protected ServerConfiguration getServerConfiguration(int port, int sslPort) {\n         return new TestServerConfiguration(port, sslPort);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testStopDelivery() throws Exception {\n         ByteString topic1 = ByteString.copyFromUtf8(\"testStopDelivery-1\");\n         ByteString topic2 = ByteString.copyFromUtf8(\"testStopDelivery-2\");\n@@ -312,7 +312,7 @@ public void testStopDelivery() throws Exception {\n         csHandler21.checkSecondRun();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCloseSubscription() throws Exception {\n         ByteString topic1 = ByteString.copyFromUtf8(\"testCloseSubscription-1\");\n         ByteString topic2 = ByteString.copyFromUtf8(\"testCloseSubscription-2\");\n@@ -372,7 +372,7 @@ public void testCloseSubscription() throws Exception {\n         csHandler21.checkSecondRun();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testThrottle() throws Exception {\n         ByteString topic1 = ByteString.copyFromUtf8(\"testThrottle-1\");\n         ByteString topic2 = ByteString.copyFromUtf8(\"testThrottle-2\");"},{"sha":"e8a2bb9e707a94a46a4e509fa621f3efd02f353b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -872,7 +872,7 @@ public synchronized void deliver(ByteString topic, ByteString subscriberId,\n      * 1) message bound doesn't take effects on 4.0.0 server.\n      * 2) message bound take effects on both 4.1.0 and current server\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testMessageBoundCompat() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"testMessageBoundCompat\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -945,7 +945,7 @@ public void testMessageBoundCompat() throws Exception {\n      * 2) current client could talk with 4.1.0 server,\n      *    but no message seq id would be returned\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testPublishCompat410() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestPublishCompat410\");\n         ByteString data = ByteString.copyFromUtf8(\"testdata\");\n@@ -996,7 +996,7 @@ public void testPublishCompat410() throws Exception {\n      *\n      * A current server could read subscription data recorded by 4.1.0 server.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSubscriptionDataCompat410() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestCompat410\");\n         ByteString sub410 = ByteString.copyFromUtf8(\"sub410\");\n@@ -1058,7 +1058,7 @@ public void testSubscriptionDataCompat410() throws Exception {\n      *\n      * A 4.1.0 client could not update message bound, while current could do it.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testUpdateMessageBoundCompat410() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestUpdateMessageBoundCompat410\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -1119,7 +1119,7 @@ public void testUpdateMessageBoundCompat410() throws Exception {\n      *\n      * A current client running message filter would fail on 4.1.0 hub servers.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testClientMessageFilterCompat410() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestUpdateMessageBoundCompat410\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -1160,7 +1160,7 @@ public void testClientMessageFilterCompat410() throws Exception {\n      * Server side throttling does't work when current client connects to old version\n      * server.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testServerSideThrottleCompat410() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestServerSideThrottleCompat410\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");"},{"sha":"0893a3d8b09f70d9c058bc1f860e958109145d5c","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -55,7 +55,7 @@\n      * connected, the pubsub server will fail at startup.\n      *\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testPubSubServerInstantiationWithConfig() throws Exception {\n         for (int i = 0; i < 10; i++) {\n             logger.info(\"iteration \" + i);"},{"sha":"1386a9cf39c2814a83eb07ad7e2c6a666eeb4ac8","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -188,7 +188,7 @@ protected ServerConfiguration getServerConfiguration(int port, int sslPort) {\n         return new ThrottleDeliveryServerConfiguration(port, sslPort);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testServerSideThrottle() throws Exception {\n         int messageWindowSize = DEFAULT_MESSAGE_WINDOW_SIZE;\n         ThrottleDeliveryClientConfiguration conf ="},{"sha":"fbbdebd5fc6d253daab0bbce3db45c74e9c54fe0","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -248,7 +248,7 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n         subscriber.closeSubscription(topic, subid);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -259,7 +259,7 @@ public void testServerSideMessageFilter() throws Exception {\n         receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 0, 50, 2, true);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testInvalidServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestInvalidMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -277,7 +277,7 @@ public void testInvalidServerSideMessageFilter() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testChangeSubscriptionPreferences() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeSubscriptionPreferences\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -299,7 +299,7 @@ public void testChangeSubscriptionPreferences() throws Exception {\n         receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 200, 14, 7, true);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testChangeServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -316,7 +316,7 @@ public void testChangeServerSideMessageFilter() throws Exception {\n         receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), null, 200, 14, 7, true);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testFixInvalidServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestFixMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -336,7 +336,7 @@ public void testFixInvalidServerSideMessageFilter() throws Exception {\n         receiveNumModM(topic, subid, HeaderMessageFilter.class.getName(), null, 0, 33, 3, true);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testNullClientMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestNullClientMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -359,7 +359,7 @@ public void deliver(ByteString topic, ByteString subscriberId,\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testClientSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestClientMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -370,7 +370,7 @@ public void testClientSideMessageFilter() throws Exception {\n         receiveNumModM(topic, subid, null, new ModMessageFilter(), 0, 50, 2, true);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testChangeSubscriptionPreferencesForClientFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeSubscriptionPreferencesForClientFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n@@ -384,7 +384,7 @@ public void testChangeSubscriptionPreferencesForClientFilter() throws Exception\n         receiveNumModM(topic, subid, null, new ModMessageFilter(), 0, 33, 3, true);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testChangeClientSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeClientSideMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");"},{"sha":"dfdc80d8b96d9aae1500451877cbebbaa97de098","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -78,7 +78,7 @@ public PubSubResponse getPubSubResponse(WriteRecordingChannel channel) {\n         return (PubSubResponse) message;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testHandleRequestOnRedirect() throws Exception {\n         tm.setShouldOwnEveryNewTopic(false);\n         handler.handleRequest(request, channel);\n@@ -90,7 +90,7 @@ public void testHandleRequestOnRedirect() throws Exception {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testHandleRequestOnOwner() throws Exception {\n \n         tm.setShouldOwnEveryNewTopic(true);\n@@ -100,7 +100,7 @@ public void testHandleRequestOnOwner() throws Exception {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testHandleRequestOnError() throws Exception {\n \n         tm.setShouldError(true);"},{"sha":"175c363b4bf5782d017dafa069c4a934b933f4a3","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -91,15 +91,15 @@ protected void setUp() throws Exception {\n         ush = new UnsubscribeHandler(conf, tm, sm, dm, subChannelMgr);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testNoSubscribeRequest() {\n         sh.handleRequestAtOwner(PubSubRequest.newBuilder(pubSubRequestPrototype).clearSubscribeRequest().build(),\n                                 channel);\n         assertEquals(StatusCode.MALFORMED_REQUEST, ((PubSubResponse) channel.getMessagesWritten().get(0))\n                      .getStatusCode());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSuccessCase() {\n         StubCallback<Void> callback = new StubCallback<Void>();\n         sm.acquiredTopic(topic, callback, null);"},{"sha":"e20b55051cff7d8911166709e3d691eac6482d99","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -109,7 +109,7 @@ public void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testMultiRegionSubscribeAndConsume() throws Exception {\n         int batchSize = 10;\n         // Subscribe to topics for clients in all regions\n@@ -152,7 +152,7 @@ public void testMultiRegionSubscribeAndConsume() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testSubscribeAndConsumeWhenARegionDown() throws Exception {\n         int batchSize = 10;\n \n@@ -217,7 +217,7 @@ public void testSubscribeAndConsumeWhenARegionDown() throws Exception {\n      *\n      * @throws Exception\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testAttachExistingSubscriptionsWhenARegionDown() throws Exception {\n         int batchSize = 10;\n         "},{"sha":"b11500f905847a9ad9a8b197ba9cb27f6f481201","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestFactoryLayout.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestFactoryLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestFactoryLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestFactoryLayout.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -36,7 +36,7 @@\n \n public class TestFactoryLayout extends ZooKeeperTestBase {\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testFactoryLayout() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n         conf.setMetadataManagerFactoryName(\n@@ -66,7 +66,7 @@ private void writeFactoryLayout(ServerConfiguration conf, String managerCls,\n         layout.store(zk, conf);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCorruptedFactoryLayout() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n         StringBuilder msb = new StringBuilder();"},{"sha":"7e395e944ca4b6d0c97f799cd070e2b4afab4b1e","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -47,7 +47,7 @@ public TestMetadataManager(String metadataManagerFactoryCls) {\n         super(metadataManagerFactoryCls);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testOwnerInfo() throws Exception {\n         TopicOwnershipManager toManager = metadataManagerFactory.newTopicOwnershipManager();\n \n@@ -133,7 +133,7 @@ public void testOwnerInfo() throws Exception {\n         toManager.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testPersistenceInfo() throws Exception {\n         TopicPersistenceManager tpManager = metadataManagerFactory.newTopicPersistenceManager();\n \n@@ -226,7 +226,7 @@ public void testPersistenceInfo() throws Exception {\n         tpManager.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSubscriptionData() throws Exception {\n         SubscriptionDataManager subManager = metadataManagerFactory.newSubscriptionDataManager();\n "},{"sha":"f8167297e2a3a7c8ef943344e9b83c72b8e0ca9b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -115,7 +115,7 @@ private void writeFactoryLayout(ServerConfiguration conf,\n     /**\n      * Test bad server configuration\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBadConf() throws Exception {\n         TestServerConfiguration conf = new TestServerConfiguration();\n \n@@ -153,7 +153,7 @@ public void testBadConf() throws Exception {\n     /**\n      * Test bad zk configuration\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testBadZkContents() throws Exception {\n         TestServerConfiguration conf = new TestServerConfiguration();\n \n@@ -228,7 +228,7 @@ public void close() throws Exception {\n     }\n \n     // test concurrent\n-    @Test\n+    @Test(timeout=60000)\n     public void testConcurrent1() throws Exception {\n         /// everyone creates the same\n         int numThreads = 50;\n@@ -255,7 +255,7 @@ public void testConcurrent1() throws Exception {\n         Assert.assertTrue(\"Not all metadata manager factories created\", success);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testConcurrent2() throws Exception {\n         /// odd create different\n         int numThreadsEach = 25;"},{"sha":"a9affd777a5d0d1dab37d8f0c464744b66db1d8f","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -49,7 +49,7 @@\n \n public class TestPubSubServer extends PubSubServerStandAloneTestBase {\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSecondServer() throws Exception {\n         PubSubServer server1 = new PubSubServer(new StandAloneServerConfiguration() {\n                 @Override\n@@ -122,7 +122,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n         }, null);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testUncaughtExceptionInNettyThread() throws Exception {\n \n         SynchronousQueue<Throwable> queue = new SynchronousQueue<Throwable>();\n@@ -152,7 +152,7 @@ protected void postReleaseCleanup(ByteString topic, Callback<Void> cb, Object ct\n         server.shutdown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testUncaughtExceptionInZKThread() throws Exception {\n \n         SynchronousQueue<Throwable> queue = new SynchronousQueue<Throwable>();\n@@ -204,7 +204,7 @@ protected void postReleaseCleanup(ByteString topic, Callback<Void> cb, Object ct\n         server.shutdown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testInvalidServerConfiguration() throws Exception {\n         boolean success = false;\n         ServerConfiguration conf = new ServerConfiguration() {\n@@ -232,7 +232,7 @@ public boolean isInterRegionSSLEnabled() {\n         assertTrue(success);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testValidServerConfiguration() throws Exception {\n         boolean success = true;\n         ServerConfiguration conf = new ServerConfiguration() {"},{"sha":"08f5ad88ea458673118a5bc7159e0e888959d64a","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestServerStats.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -29,7 +29,7 @@\n      * Tests that updatLatency should not fail with\n      * ArrayIndexOutOfBoundException when latency time coming as negative.\n      */\n-    @Test\n+    @Test(timeout=60000)\n     public void testUpdateLatencyShouldNotFailWithAIOBEWithNegativeLatency()\n             throws Exception {\n         OpStats opStat = new OpStats();"},{"sha":"cac7bf4912ec864ffe2a4b52588612cd8c72e849","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -128,7 +128,7 @@ protected ZooKeeper getZooKeeperClient() {\n     }\n \n     // Give junit a fake test so that its happy\n-    @Test\n+    @Test(timeout=60000)\n     public void testNothing() throws Exception {\n \n     }"},{"sha":"e54452a737f3d1a1ff41da9df1ae51f1a90d8203","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -132,7 +132,7 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n         sub.closeSubscription(topic, subid);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBasicBounding() throws Exception {\n         Client client = new HedwigClient(new MessageBoundClientConfiguration(5));\n         Publisher pub = client.getPublisher();\n@@ -148,7 +148,7 @@ public void testBasicBounding() throws Exception {\n         client.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testMultipleSubscribers() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"multiSubTopic\");\n \n@@ -190,7 +190,7 @@ public void testMultipleSubscribers() throws Exception {\n         client.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testUpdateMessageBound() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"UpdateMessageBound\");\n \n@@ -229,7 +229,7 @@ public void testUpdateMessageBound() throws Exception {\n         client.close();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLedgerGC() throws Exception {\n         Client client = new HedwigClient(new MessageBoundClientConfiguration());\n         Publisher pub = client.getPublisher();"},{"sha":"688c685c6ced03528418eb42a29c8c86638cf0cd","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -367,12 +367,12 @@ public void scanFinished(Object ctx, ReasonForFinish reason) {\n         return result;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testScanMessagesOnClosedLedgerAfterDeleteLedger() throws Exception {\n         scanMessagesAfterDeleteLedgerTest(2);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testScanMessagesOnUnclosedLedgerAfterDeleteLedger() throws Exception {\n         scanMessagesAfterDeleteLedgerTest(1);\n     }\n@@ -408,7 +408,7 @@ private void scanMessagesAfterDeleteLedgerTest(int numLedgers) throws Exception\n         assertTrue(\"Should succeed to scan messages after deleted consumed ledger.\", b);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testScanMessagesOnEmptyLedgerAfterDeleteLedger() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestScanMessagesOnEmptyLedgerAfterDeleteLedger\");\n \n@@ -446,12 +446,12 @@ public void testScanMessagesOnEmptyLedgerAfterDeleteLedger() throws Exception {\n         assertTrue(\"Should succeed to scan messages after deleted consumed ledger.\", b);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testFailedToDeleteLedger1() throws Exception {\n         failedToDeleteLedgersTest(1);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testFailedToDeleteLedger2() throws Exception {\n         // succeed to delete second ledger\n         failedToDeleteLedgersTest(2);\n@@ -525,7 +525,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n         assertNull(\"Should not fail with exception.\", failureException);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testScanMessagesOnTwoLedgers() throws Exception {\n         stopCluster();\n         startCluster(readDelay);\n@@ -558,7 +558,7 @@ public void testScanMessagesOnTwoLedgers() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testInconsistentSubscriptionStateAndLedgerRanges1() throws Exception {\n         // See the comment of inconsistentSubscriptionStateAndLedgerRanges.\n         // For this case, Step (2) failed to update subscription state metadata,\n@@ -567,7 +567,7 @@ public void testInconsistentSubscriptionStateAndLedgerRanges1() throws Exception\n         inconsistentSubscriptionStateAndLedgerRanges(1);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testInconsistentSubscriptionStateAndLedgerRanges2() throws Exception {\n         // See the comment of inconsistentSubscriptionStateAndLedgerRanges.\n         // For this case, step (2) failed to update subscription state metadata,\n@@ -649,7 +649,7 @@ public void inconsistentSubscriptionStateAndLedgerRanges(int failedCount) throws\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     // Add this test case for BOOKKEEPER-458\n     public void testReadWhenTopicChangeLedger() throws Exception {\n         final ByteString topic = ByteString.copyFromUtf8(\"testReadWhenTopicChangeLedger\");"},{"sha":"1b30f5af718ae29469e89d8db2cddeec9dc740f6","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -84,7 +84,7 @@ protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testEmptyDirtyLedger() throws Exception {\n \n         StubCallback<Void> stubCallback = new StubCallback<Void>();\n@@ -99,7 +99,7 @@ public void testEmptyDirtyLedger() throws Exception {\n         assertEquals(0, bkpm.topicInfos.get(topic).ledgerRanges.size());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testNonEmptyDirtyLedger() throws Exception {\n \n         Random r = new Random();\n@@ -155,7 +155,7 @@ public long getMaxEntriesPerLedger() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testSyncChangeLedgers() throws Exception {\n         int NUM_MESSAGES_TO_TEST = 101;\n         int SIZE_OF_MESSAGES_TO_TEST = 100;\n@@ -249,7 +249,7 @@ public void operationFinished(Object ctx, final MessageSeqId seqId) {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAsyncChangeLedgers() throws Exception {\n         int NUM_MESSAGES_TO_TEST = 101;\n         int SIZE_OF_MESSAGES_TO_TEST = 100;\n@@ -330,7 +330,7 @@ public void operationFinished(Object ctx, final MessageSeqId msgId) {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testChangeLedgerFailure() throws Exception {\n         int NUM_MESSAGES_TO_TEST = 101;\n         int SIZE_OF_MESSAGES_TO_TEST = 100;"},{"sha":"b4c396023289941074a522d5a420d9c5d6427c06","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -210,7 +210,7 @@ protected ServerConfiguration getServerConfiguration(int serverPort, int sslServ\n         return serverConf;\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testDeadlock() throws Exception {\n         int numMessages = 5;\n "},{"sha":"7a865ee98a1caafd10d36ea46f74d6c097328d7b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -239,7 +239,7 @@ protected ByteString getTopicName(int number) {\n         return ByteString.copyFromUtf8(\"topic\" + number);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testPersistenceManager() throws Exception {\n         List<Thread> publisherThreads = new LinkedList<Thread>();\n         List<Thread> scannerThreads = new LinkedList<Thread>();"},{"sha":"397edeca9800a104e6cd3e3f54aa24b5f6b0f61a","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -97,7 +97,7 @@ public void tearDown() throws Exception {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testPersistMessage() throws Exception {\n         StubCallback<PubSubProtocol.MessageSeqId> callback = new StubCallback<PubSubProtocol.MessageSeqId>();\n         PersistRequest request = new PersistRequest(topic, messages.get(0), callback, null);\n@@ -128,7 +128,7 @@ private void persistMessage(Message msg) throws Exception {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testScanSingleMessage() throws Exception {\n         StubScanCallback callback = new StubScanCallback();\n         ScanRequest request = new ScanRequest(topic, 1, callback, null);\n@@ -147,7 +147,7 @@ public void testScanSingleMessage() throws Exception {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testDeliveredUntil() throws Exception {\n         for (Message m : messages) {\n             persistMessage(m);\n@@ -173,7 +173,7 @@ public void testDeliveredUntil() throws Exception {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testDoReadAhead() {\n         StubScanCallback callback = new StubScanCallback();\n         ScanRequest request = new ScanRequest(topic, 1, callback, null);\n@@ -191,7 +191,7 @@ public void testDoReadAhead() {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadAheadSizeLimit() throws Exception {\n         for (Message m : messages) {\n             persistMessage(m);\n@@ -207,7 +207,7 @@ public void testReadAheadSizeLimit() throws Exception {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testDoReadAheadStartingFrom() throws Exception {\n         persistMessage(messages.get(0));\n         int readAheadCount = 5;\n@@ -235,7 +235,7 @@ public void testDoReadAheadStartingFrom() throws Exception {\n         assertEquals(readAheadRequest.messageLimit, readAheadCount);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testAddMessageToCache() {\n         CacheKey key = new CacheKey(topic, 1);\n         cacheBasedPersistenceManager.addMessageToCache(key, messages.get(0), MathUtils.now());\n@@ -248,7 +248,7 @@ public void testAddMessageToCache() {\n         assertTrue(cacheBasedPersistenceManager.timeIndexOfAddition.get(value.timeOfAddition).contains(key));\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testRemoveMessageFromCache() {\n         CacheKey key = new CacheKey(topic, 1);\n         cacheBasedPersistenceManager.addMessageToCache(key, messages.get(0), MathUtils.now());\n@@ -258,7 +258,7 @@ public void testRemoveMessageFromCache() {\n         assertTrue(cacheBasedPersistenceManager.timeIndexOfAddition.isEmpty());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCollectOldCacheEntries() {\n         int i = 1;\n         for (Message m : messages) {"},{"sha":"0e0f670fdcd32dfba2587be95ca1467cf0229752","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestMMSubscriptionManager.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -101,7 +101,7 @@ public void run() {\n \n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBasics() throws Exception {\n \n         ByteString topic1 = ByteString.copyFromUtf8(\"topic1\");"},{"sha":"10484a194d1df121a26c3fc5cde0724469bb3615","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -153,7 +153,7 @@ public void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testConsumeWhenTopicRelease() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestConsumeWhenTopicRelease\");\n         ByteString subId = ByteString.copyFromUtf8(\"mysub\");\n@@ -198,7 +198,7 @@ public void testConsumeWhenTopicRelease() throws Exception {\n         assertTrue(ocm.isInOrder());\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testConsumeWhenHubShutdown() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestConsumeWhenHubShutdown\");\n         ByteString subId = ByteString.copyFromUtf8(\"mysub\");"},{"sha":"274578ceb5547653f57b3662d7c4a2c70f450125","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -100,7 +100,7 @@ public void tearDown() throws Exception {\n         super.tearDown();\n     }\n     \n-    @Test\n+    @Test(timeout=60000)\n     public void testTopicAcquistion() throws Exception {\n         logger.info(\"Start concurrent topic acquistion test.\");\n         "},{"sha":"77c6fad49e0d2195d2ef1a16c0b457a4fec21bd6","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubInfo.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubInfo.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -25,7 +25,7 @@\n \n public class TestHubInfo {\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testParseHubInfo() throws Exception {\n         HedwigSocketAddress addr = new HedwigSocketAddress(\"localhost\", 9086, 9087);\n         HubInfo hubInfo1 = new HubInfo(addr, 9999);"},{"sha":"f14d6014e5221e67ec86b2255086c43eff7750f1","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubLoad.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubLoad.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubLoad.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestHubLoad.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -23,7 +23,7 @@\n \n public class TestHubLoad {\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testParseHubLoad() throws Exception {\n         HubLoad hubLoad1 = new HubLoad(9999);\n "},{"sha":"e86d1622453737003221f600f9a24b033d87eb02","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -115,7 +115,7 @@ public void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testGetOwnerSingle() throws Exception {\n         tm.getOwner(topic, false, addrCbq, null);\n         Assert.assertEquals(me, check(addrCbq.take()));\n@@ -145,7 +145,7 @@ public int getServerPort() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testGetOwnerMulti() throws Exception {\n         ServerConfiguration conf1 = new CustomServerConfiguration(conf.getServerPort() + 1),\n                             conf2 = new CustomServerConfiguration(conf.getServerPort() + 2);\n@@ -179,7 +179,7 @@ public void testGetOwnerMulti() throws Exception {\n         tm2.stop();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLoadBalancing() throws Exception {\n         tm.getOwner(topic, false, addrCbq, null);\n \n@@ -232,7 +232,7 @@ public void run() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testOwnershipChange() throws Exception {\n         SynchronousQueue<Pair<ByteString, Boolean>> bsQueue = new SynchronousQueue<Pair<ByteString, Boolean>>();\n \n@@ -296,7 +296,7 @@ public void assertOwnershipNodeDoesntExist() throws Exception {\n         Assert.assertEquals(null, hubInfo);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testZKClientDisconnected() throws Exception {\n         // First assert ownership of the topic\n         tm.getOwner(topic, true, addrCbq, null);"},{"sha":"575e5cab1de7732b977bb939558b48d967bd909b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -105,7 +105,7 @@ public void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testGetOwnerSingle() throws Exception {\n         tm.getOwner(topic, false, addrCbq, null);\n         Assert.assertEquals(me, check(addrCbq.take()));\n@@ -135,7 +135,7 @@ public int getServerPort() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testGetOwnerMulti() throws Exception {\n         ServerConfiguration cfg1 = new CustomServerConfiguration(cfg.getServerPort() + 1), cfg2 = new CustomServerConfiguration(\n             cfg.getServerPort() + 2);\n@@ -186,7 +186,7 @@ else if (owner.getPort() == cfg2.getServerPort())\n         tm2.stop();\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testLoadBalancing() throws Exception {\n         tm.getOwner(topic, false, addrCbq, null);\n \n@@ -239,7 +239,7 @@ public void run() {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testOwnershipChange() throws Exception {\n         SynchronousQueue<Pair<ByteString, Boolean>> bsQueue = new SynchronousQueue<Pair<ByteString, Boolean>>();\n \n@@ -304,7 +304,7 @@ public void assertOwnershipNodeDoesntExist() throws Exception {\n         }\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testZKClientDisconnected() throws Exception {\n         // First assert ownership of the topic\n         tm.getOwner(topic, true, addrCbq, null);"},{"sha":"e025e769f688af8afb1c880ecfc1696fadbc3924","filename":"hedwig-server/src/test/java/org/apache/hedwig/zookeeper/TestZkUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/zookeeper/TestZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/7b2b91579000bc99d6fdded3aefb349975058c6f/hedwig-server/src/test/java/org/apache/hedwig/zookeeper/TestZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/zookeeper/TestZkUtils.java?ref=7b2b91579000bc99d6fdded3aefb349975058c6f","patch":"@@ -26,7 +26,7 @@\n \n public class TestZkUtils extends ZooKeeperTestBase {\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testCreateFullPathOptimistic() throws Exception {\n         testPath(\"/a/b/c\", CreateMode.EPHEMERAL);\n "}]}

