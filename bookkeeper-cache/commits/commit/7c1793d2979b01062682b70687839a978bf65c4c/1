{"sha":"7c1793d2979b01062682b70687839a978bf65c4c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YzE3OTNkMjk3OWIwMTA2MjY4MmI3MDY4NzgzOWE5NzhiZjY1YzRj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-10T14:19:56Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-10T14:19:56Z"},"message":"BOOKKEEPER-530: data might be lost during compaction. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1431378 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ce3f78e450b3a027a7ab0f7d0e24c46a562e04a2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ce3f78e450b3a027a7ab0f7d0e24c46a562e04a2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7c1793d2979b01062682b70687839a978bf65c4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7c1793d2979b01062682b70687839a978bf65c4c","html_url":"https://github.com/apache/bookkeeper/commit/7c1793d2979b01062682b70687839a978bf65c4c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7c1793d2979b01062682b70687839a978bf65c4c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"40de140171a26b0943909900d6af4a73b31a641e","url":"https://api.github.com/repos/apache/bookkeeper/commits/40de140171a26b0943909900d6af4a73b31a641e","html_url":"https://github.com/apache/bookkeeper/commit/40de140171a26b0943909900d6af4a73b31a641e"}],"stats":{"total":141,"additions":110,"deletions":31},"files":[{"sha":"f946ed4f2487ae653a6acde6dddaa740e71a8c17","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7c1793d2979b01062682b70687839a978bf65c4c/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/7c1793d2979b01062682b70687839a978bf65c4c/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=7c1793d2979b01062682b70687839a978bf65c4c","patch":"@@ -168,6 +168,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-542: Remove trailing spaces in IndexCorruptionTest (fpj via ivank)\n \n+        BOOKKEEPER-530: data might be lost during compaction. (ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"1f848f55279d12c20472f2600142c366ed656481","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":36,"deletions":1,"changes":37,"blob_url":"https://github.com/apache/bookkeeper/blob/7c1793d2979b01062682b70687839a978bf65c4c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c1793d2979b01062682b70687839a978bf65c4c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=7c1793d2979b01062682b70687839a978bf65c4c","patch":"@@ -42,13 +42,15 @@\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.bookie.GarbageCollectorThread.SafeEntryAdder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n@@ -524,7 +526,9 @@ public Bookie(ServerConfiguration conf)\n         LOG.info(\"instantiate ledger manager {}\", ledgerManagerFactory.getClass().getName());\n         ledgerManager = ledgerManagerFactory.newLedgerManager();\n         syncThread = new SyncThread(conf);\n-        ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager, ledgerDirsManager);\n+        ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager,\n+                                                     ledgerDirsManager,\n+                                                     new BookieSafeEntryAdder());\n         handles = new HandleFactoryImpl(ledgerStorage);\n         // instantiate the journal\n         journal = new Journal(conf, ledgerDirsManager);\n@@ -1180,6 +1184,37 @@ private static boolean cleanDir(File dir) {\n         return true;\n     }\n \n+    private class BookieSafeEntryAdder implements SafeEntryAdder {\n+        @Override\n+        public void safeAddEntry(final long ledgerId, final ByteBuffer buffer,\n+                                 final GenericCallback<Void> cb) {\n+            journal.logAddEntry(buffer, new WriteCallback() {\n+                    @Override\n+                    public void writeComplete(int rc, long ledgerId2, long entryId,\n+                                              InetSocketAddress addr, Object ctx) {\n+                        if (rc != BookieException.Code.OK) {\n+                            LOG.error(\"Error rewriting to journal (ledger {}, entry {})\", ledgerId2, entryId);\n+                            cb.operationComplete(rc, null);\n+                            return;\n+                        }\n+                        try {\n+                            addEntryByLedgerId(ledgerId, buffer);\n+                            cb.operationComplete(rc, null);\n+                        } catch (IOException ioe) {\n+                            LOG.error(\"Error adding to ledger storage (ledger \" + ledgerId2\n+                                      + \", entry \" + entryId + \")\", ioe);\n+                            // couldn't add to ledger storage\n+                            cb.operationComplete(BookieException.Code.IllegalOpException, null);\n+                        } catch (BookieException bke) {\n+                            LOG.error(\"Bookie error adding to ledger storage (ledger \" + ledgerId2\n+                                      + \", entry \" + entryId + \")\", bke);\n+                            // couldn't add to ledger storage\n+                            cb.operationComplete(bke.getCode(), null);\n+                        }\n+                    }\n+                }, null);\n+        }\n+    }\n     /**\n      * @param args\n      * @throws IOException"},{"sha":"c9f5adebdb2b6a4993d58c8716113856c4f68f64","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":67,"deletions":8,"changes":75,"blob_url":"https://github.com/apache/bookkeeper/blob/7c1793d2979b01062682b70687839a978bf65c4c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c1793d2979b01062682b70687839a978bf65c4c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=7c1793d2979b01062682b70687839a978bf65c4c","patch":"@@ -30,7 +30,9 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.GarbageCollector.GarbageCleaner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -46,7 +48,7 @@\n  */\n public class GarbageCollectorThread extends Thread {\n     private static final Logger LOG = LoggerFactory.getLogger(GarbageCollectorThread.class);\n-\n+    private static final int COMPACTION_MAX_OUTSTANDING_REQUESTS = 1000;\n     private static final int SECOND = 1000;\n \n     // Maps entry log files to the set of ledgers that comprise the file and the size usage per ledger\n@@ -69,7 +71,7 @@\n \n     // Entry Logger Handle\n     final EntryLogger entryLogger;\n-    final EntryLogScanner scanner;\n+    final SafeEntryAdder safeEntryAdder;\n \n     // Ledger Cache Handle\n     final LedgerCache ledgerCache;\n@@ -87,25 +89,77 @@\n     final GarbageCollector garbageCollector;\n     final GarbageCleaner garbageCleaner;\n \n+\n+    /**\n+     * Interface for adding entries. When the write callback is triggered, the\n+     * entry must be guaranteed to be presisted.\n+     */\n+    interface SafeEntryAdder {\n+        public void safeAddEntry(long ledgerId, ByteBuffer buffer, GenericCallback<Void> cb);\n+    }\n+\n     /**\n      * A scanner wrapper to check whether a ledger is alive in an entry log file\n      */\n     class CompactionScanner implements EntryLogScanner {\n         EntryLogMetadata meta;\n+        Object completionLock = new Object();\n+        AtomicInteger outstandingRequests = new AtomicInteger(0);\n+        AtomicBoolean allSuccessful = new AtomicBoolean(true);\n \n         public CompactionScanner(EntryLogMetadata meta) {\n             this.meta = meta;\n         }\n \n         @Override\n         public boolean accept(long ledgerId) {\n-            return meta.containsLedger(ledgerId) && scanner.accept(ledgerId);\n+            return meta.containsLedger(ledgerId);\n         }\n \n         @Override\n-        public void process(long ledgerId, long offset, ByteBuffer entry)\n+        public void process(final long ledgerId, long offset, ByteBuffer entry)\n             throws IOException {\n-            scanner.process(ledgerId, offset, entry);\n+            if (!allSuccessful.get()) {\n+                return;\n+            }\n+\n+            outstandingRequests.incrementAndGet();\n+            synchronized (completionLock) {\n+                while (outstandingRequests.get() >= COMPACTION_MAX_OUTSTANDING_REQUESTS) {\n+                    try {\n+                        completionLock.wait();\n+                    } catch (InterruptedException ie) {\n+                        LOG.error(\"Interrupted while waiting to re-add entry\", ie);\n+                        Thread.currentThread().interrupt();\n+                        throw new IOException(\"Interrupted while waiting to re-add entry\", ie);\n+                    }\n+                }\n+            }\n+            safeEntryAdder.safeAddEntry(ledgerId, entry, new GenericCallback<Void>() {\n+                    @Override\n+                    public void operationComplete(int rc, Void result) {\n+                        if (rc != BookieException.Code.OK) {\n+                            LOG.error(\"Error {} re-adding entry for ledger {})\",\n+                                      rc, ledgerId);\n+                            allSuccessful.set(false);\n+                        }\n+                        synchronized(completionLock) {\n+                            outstandingRequests.decrementAndGet();\n+                            completionLock.notifyAll();\n+                        }\n+                    }\n+                });\n+        }\n+\n+        void awaitComplete() throws InterruptedException, IOException {\n+            synchronized(completionLock) {\n+                while (outstandingRequests.get() > 0) {\n+                    completionLock.wait();\n+                }\n+                if (allSuccessful.get() == false) {\n+                    throw new IOException(\"Couldn't re-add all entries\");\n+                }\n+            }\n         }\n     }\n \n@@ -121,15 +175,15 @@ public GarbageCollectorThread(ServerConfiguration conf,\n                                   final LedgerCache ledgerCache,\n                                   EntryLogger entryLogger,\n                                   SnapshotMap<Long, Boolean> activeLedgers,\n-                                  EntryLogScanner scanner,\n+                                  SafeEntryAdder safeEntryAdder,\n                                   LedgerManager ledgerManager)\n         throws IOException {\n         super(\"GarbageCollectorThread\");\n \n         this.ledgerCache = ledgerCache;\n         this.entryLogger = entryLogger;\n         this.activeLedgers = activeLedgers;\n-        this.scanner = scanner;\n+        this.safeEntryAdder = safeEntryAdder;\n \n         this.gcWaitTime = conf.getGcWaitTime();\n \n@@ -366,11 +420,16 @@ protected void compactEntryLog(long entryLogId) {\n         LOG.info(\"Compacting entry log : \" + entryLogId);\n \n         try {\n-            entryLogger.scanEntryLog(entryLogId, new CompactionScanner(entryLogMeta));\n+            CompactionScanner scanner = new CompactionScanner(entryLogMeta);\n+            entryLogger.scanEntryLog(entryLogId, scanner);\n+            scanner.awaitComplete();\n             // after moving entries to new entry log, remove this old one\n             removeEntryLog(entryLogId);\n         } catch (IOException e) {\n             LOG.info(\"Premature exception when compacting \" + entryLogId, e);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            LOG.warn(\"Interrupted while compacting\", ie);\n         } finally {\n             // clear compacting flag\n             compacting.set(false);"},{"sha":"fd834c393093bf24465d110203dfb69697c66e2a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":3,"deletions":21,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/7c1793d2979b01062682b70687839a978bf65c4c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c1793d2979b01062682b70687839a978bf65c4c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=7c1793d2979b01062682b70687839a978bf65c4c","patch":"@@ -57,13 +57,14 @@\n     private volatile boolean somethingWritten = false;\n \n     InterleavedLedgerStorage(ServerConfiguration conf,\n-            LedgerManager ledgerManager, LedgerDirsManager ledgerDirsManager)\n+                             LedgerManager ledgerManager, LedgerDirsManager ledgerDirsManager,\n+                             GarbageCollectorThread.SafeEntryAdder safeEntryAdder)\n \t\t\tthrows IOException {\n         activeLedgers = new SnapshotMap<Long, Boolean>();\n         entryLogger = new EntryLogger(conf, ledgerDirsManager);\n         ledgerCache = new LedgerCacheImpl(conf, activeLedgers, ledgerDirsManager);\n         gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n-                activeLedgers, new EntryLogCompactionScanner(), ledgerManager);\n+                activeLedgers, safeEntryAdder, ledgerManager);\n     }\n \n     @Override\n@@ -184,23 +185,4 @@ public synchronized void flush() throws IOException {\n     public BKMBeanInfo getJMXBean() {\n         return ledgerCache.getJMXBean();\n     }\n-\n-    /**\n-     * Scanner used to do entry log compaction\n-     */\n-    class EntryLogCompactionScanner implements EntryLogger.EntryLogScanner {\n-        @Override\n-        public boolean accept(long ledgerId) {\n-            // bookie has no knowledge about which ledger is deleted\n-            // so just accept all ledgers.\n-            return true;\n-        }\n-\n-        @Override\n-        public void process(long ledgerId, long offset, ByteBuffer buffer)\n-            throws IOException {\n-            addEntry(buffer);\n-        }\n-    }\n-\n }"},{"sha":"bfdb02e1ab3fac98473dc6869d38c4741666d1af","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/7c1793d2979b01062682b70687839a978bf65c4c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c1793d2979b01062682b70687839a978bf65c4c/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=7c1793d2979b01062682b70687839a978bf65c4c","patch":"@@ -503,7 +503,8 @@ public void run() {\n                             lastFlushPosition = bc.position();\n                             lastLogMark.setLastLogMark(logId, lastFlushPosition);\n                             for (QueueEntry e : toFlush) {\n-                                e.cb.writeComplete(0, e.ledgerId, e.entryId, null, e.ctx);\n+                                e.cb.writeComplete(BookieException.Code.OK,\n+                                                   e.ledgerId, e.entryId, null, e.ctx);\n                             }\n                             toFlush.clear();\n "}]}

