{"sha":"7c7e009691bc24642018e4f5c81123a0667d4e8b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YzdlMDA5NjkxYmMyNDY0MjAxOGU0ZjVjODExMjNhMDY2N2Q0ZThi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-12-02T17:45:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-12-02T17:45:13Z"},"message":"BOOKKEEPER-565: Make an option to separate storing entry log files from index files. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1547123 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7239e3019c48d73e0a15078affeca281e82da06f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7239e3019c48d73e0a15078affeca281e82da06f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7c7e009691bc24642018e4f5c81123a0667d4e8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7c7e009691bc24642018e4f5c81123a0667d4e8b","html_url":"https://github.com/apache/bookkeeper/commit/7c7e009691bc24642018e4f5c81123a0667d4e8b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7c7e009691bc24642018e4f5c81123a0667d4e8b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"67dccebdbee27476657898a370c4f1808231fc4b","url":"https://api.github.com/repos/apache/bookkeeper/commits/67dccebdbee27476657898a370c4f1808231fc4b","html_url":"https://github.com/apache/bookkeeper/commit/67dccebdbee27476657898a370c4f1808231fc4b"}],"stats":{"total":128,"additions":110,"deletions":18},"files":[{"sha":"bc5a2ecd555aef2ba3e431380ae35748efa6dec2","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -124,6 +124,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-678: BookieServer shutdown hangs indefinitely at NioServerSocketChannelFactory.releaseExternalResources (rakeshr via ivank)\n \n+        BOOKKEEPER-565: Make an option to separate storing entry log files from index files. (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"fe407150cedd18b6da9f966f177046c0d3c6faab","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":45,"deletions":5,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -101,6 +101,7 @@\n     private final String bookieRegistrationPath;\n \n     private LedgerDirsManager ledgerDirsManager;\n+    private LedgerDirsManager indexDirsManager;\n \n     // ZooKeeper client instance for the Bookie\n     ZooKeeper zk;\n@@ -273,9 +274,15 @@ public boolean accept(File dir, String name) {\n      * first run and the filesystem structure is up to date.\n      */\n     private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException {\n+        List<File> allLedgerDirs = new ArrayList<File>(ledgerDirsManager.getAllLedgerDirs().size()\n+                                                     + indexDirsManager.getAllLedgerDirs().size());\n+        allLedgerDirs.addAll(ledgerDirsManager.getAllLedgerDirs());\n+        if (indexDirsManager != ledgerDirsManager) {\n+            allLedgerDirs.addAll(indexDirsManager.getAllLedgerDirs());\n+        }\n         if (zk == null) { // exists only for testing, just make sure directories are correct\n             checkDirectoryStructure(journalDirectory);\n-            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n+            for (File dir : allLedgerDirs) {\n                     checkDirectoryStructure(dir);\n             }\n             return;\n@@ -303,7 +310,7 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n             } catch (FileNotFoundException fnf) {\n                 missedCookieDirs.add(journalDirectory);\n             }\n-            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n+            for (File dir : allLedgerDirs) {\n                 checkDirectoryStructure(dir);\n                 try {\n                     Cookie c = Cookie.readFromDirectory(dir);\n@@ -322,7 +329,7 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n                 if (missedCookieDirs.size() > 0) {\n                     LOG.debug(\"Directories missing cookie file are {}\", missedCookieDirs);\n                     masterCookie.writeToDirectory(journalDirectory);\n-                    for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n+                    for (File dir : allLedgerDirs) {\n                         masterCookie.writeToDirectory(dir);\n                     }\n                 }\n@@ -387,6 +394,10 @@ public LedgerDirsManager getLedgerDirsManager() {\n         return ledgerDirsManager;\n     }\n \n+    LedgerDirsManager getIndexDirsManager() {\n+        return indexDirsManager;\n+    }\n+\n     public static File getCurrentDirectory(File dir) {\n         return new File(dir, BookKeeperConstants.CURRENT_DIR);\n     }\n@@ -406,7 +417,14 @@ public Bookie(ServerConfiguration conf)\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath() + \"/\";\n         this.conf = conf;\n         this.journalDirectory = getCurrentDirectory(conf.getJournalDir());\n-        this.ledgerDirsManager = new LedgerDirsManager(conf);\n+        this.ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        File[] idxDirs = conf.getIndexDirs();\n+        if (null == idxDirs) {\n+            this.indexDirsManager = this.ledgerDirsManager;\n+        } else {\n+            this.indexDirsManager = new LedgerDirsManager(conf, idxDirs);\n+        }\n+\n         // instantiate zookeeper client to initialize ledger manager\n         this.zk = instantiateZookeeperClient(conf);\n         checkEnvironment(this.zk);\n@@ -421,7 +439,8 @@ public Bookie(ServerConfiguration conf)\n         // instantiate the journal\n         journal = new Journal(conf, ledgerDirsManager);\n         ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager,\n-                                                     ledgerDirsManager, journal);\n+                                                     ledgerDirsManager, indexDirsManager,\n+                                                     journal);\n         syncThread = new SyncThread(conf, getLedgerDirsListener(),\n                                     ledgerStorage, journal);\n \n@@ -492,6 +511,9 @@ synchronized public void start() {\n         LOG.debug(\"I'm starting a bookie with journal directory {}\", journalDirectory.getName());\n         //Start DiskChecker thread\n         ledgerDirsManager.start();\n+        if (indexDirsManager != ledgerDirsManager) {\n+            indexDirsManager.start();\n+        }\n         // replay journals\n         try {\n             readJournal();\n@@ -511,6 +533,9 @@ synchronized public void start() {\n         // After successful bookie startup, register listener for disk\n         // error/full notifications.\n         ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+        if (indexDirsManager != ledgerDirsManager) {\n+            indexDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+        }\n \n         ledgerStorage.start();\n \n@@ -853,6 +878,9 @@ synchronized int shutdown(int exitCode) {\n \n                 //Shutdown disk checker\n                 ledgerDirsManager.shutdown();\n+                if (indexDirsManager != ledgerDirsManager) {\n+                    indexDirsManager.shutdown();\n+                }\n \n                 // Shutdown the ZK client\n                 if(zk != null) zk.close();\n@@ -1068,6 +1096,18 @@ public static boolean format(ServerConfiguration conf,\n                 return false;\n             }\n         }\n+\n+        // Clean up index directories if they are separate from the ledger dirs\n+        File[] indexDirs = conf.getIndexDirs();\n+        if (null != indexDirs) {\n+            for (File dir : indexDirs) {\n+                if (!cleanDir(dir)) {\n+                    LOG.error(\"Formatting ledger directory \" + dir + \" failed\");\n+                    return false;\n+                }\n+            }\n+        }\n+\n         LOG.info(\"Bookie format completed successfully\");\n         return true;\n     }"},{"sha":"ea002b4fc24a6adb82bd5bc8c3ffb8b505a43d5d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -796,7 +796,7 @@ protected void scanEntryLog(long logId, EntryLogScanner scanner) throws IOExcept\n \n     private synchronized Journal getJournal() throws IOException {\n         if (null == journal) {\n-            journal = new Journal(bkConf, new LedgerDirsManager(bkConf));\n+            journal = new Journal(bkConf, new LedgerDirsManager(bkConf, bkConf.getLedgerDirs()));\n         }\n         return journal;\n     }"},{"sha":"507bd7c185f2732100e08732f58327d0fc6bf9f5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -82,10 +82,18 @@ synchronized Checkpoint getLastCheckpoint() {\n     InterleavedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager,\n                              LedgerDirsManager ledgerDirsManager, CheckpointSource checkpointSource)\n             throws IOException {\n+        this(conf, ledgerManager, ledgerDirsManager, ledgerDirsManager, checkpointSource);\n+    }\n+\n+    InterleavedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager,\n+                             LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n+                             CheckpointSource checkpointSource)\n+            throws IOException {\n         activeLedgers = new SnapshotMap<Long, Boolean>();\n         this.checkpointSource = checkpointSource;\n         entryLogger = new EntryLogger(conf, ledgerDirsManager, this);\n-        ledgerCache = new LedgerCacheImpl(conf, activeLedgers, ledgerDirsManager);\n+        ledgerCache = new LedgerCacheImpl(conf, activeLedgers,\n+                null == indexDirsManager ? ledgerDirsManager : indexDirsManager);\n         gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n                 activeLedgers, ledgerManager);\n     }"},{"sha":"e552237962b59bcb70ba7b94582c75a668e25ed6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -50,9 +50,9 @@\n     private LedgerDirsMonitor monitor;\n     private final Random rand = new Random();\n \n-    public LedgerDirsManager(ServerConfiguration conf) {\n+    public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n         this.ledgerDirectories = Arrays.asList(Bookie\n-                .getCurrentDirectories(conf.getLedgerDirs()));\n+                .getCurrentDirectories(dirs));\n         this.writableLedgerDirectories = new ArrayList<File>(ledgerDirectories);\n         this.filledDirs = new ArrayList<File>();\n         listeners = new ArrayList<LedgerDirsManager.LedgerDirsListener>();"},{"sha":"a2ce9e3cb94ecfc4116fa6279373393e6495ae1e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -32,7 +32,7 @@\n public class ReadOnlyEntryLogger extends EntryLogger {\n \n     public ReadOnlyEntryLogger(ServerConfiguration conf) throws IOException {\n-        super(conf, new LedgerDirsManager(conf));\n+        super(conf, new LedgerDirsManager(conf, conf.getLedgerDirs()));\n     }\n \n     @Override"},{"sha":"88caed45ef2448294029c97b83638f76a4754ba0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -67,6 +67,7 @@\n \n     protected final static String JOURNAL_DIR = \"journalDirectory\";\n     protected final static String LEDGER_DIRS = \"ledgerDirectories\";\n+    protected final static String INDEX_DIRS = \"indexDirectories\";\n     // NIO Parameters\n     protected final static String SERVER_TCP_NODELAY = \"serverTcpNoDelay\";\n     // Zookeeper Parameters\n@@ -459,6 +460,47 @@ public ServerConfiguration setLedgerDirNames(String[] ledgerDirs) {\n         return ledgerDirs;\n     }\n \n+    /** \n+     * Get dir name to store index files.\n+     *   \n+     * @return ledger index dir name, if no index dirs provided return null\n+     */  \n+    public String[] getIndexDirNames() {\n+        if (!this.containsKey(INDEX_DIRS)) {\n+            return null;\n+        }\n+        return this.getStringArray(INDEX_DIRS);\n+    }   \n+\n+    /** \n+     * Set dir name to store index files.\n+     *\n+     * @param indexDirs\n+     *          Index dir names\n+     * @return server configuration.\n+     */\n+    public ServerConfiguration setIndexDirName(String[] indexDirs) {\n+        this.setProperty(INDEX_DIRS, indexDirs);\n+        return this;\n+    }\n+\n+    /**\n+     * Get index dir to store ledger index files.\n+     *\n+     * @return index dirs, if no index dirs provided return null\n+     */\n+    public File[] getIndexDirs() {\n+        String[] idxDirNames = getIndexDirNames();\n+        if (null == idxDirNames) {\n+            return null;\n+        }\n+        File[] idxDirs = new File[idxDirNames.length];\n+        for (int i=0; i<idxDirNames.length; i++) {\n+            idxDirs[i] = new File(idxDirNames[i]);\n+        }\n+        return idxDirs;\n+    }\n+\n     /**\n      * Is tcp connection no delay.\n      *"},{"sha":"25b2a46ad6302db89c6625d3b3586727d459fdf7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -374,7 +374,7 @@ public void testWithDiskError() throws Exception {\n         try {\n             // LedgerDirsManager#init() is used in Bookie instantiation.\n             // Simulating disk errors by directly calling #init\n-            LedgerDirsManager ldm = new LedgerDirsManager(conf);\n+            LedgerDirsManager ldm = new LedgerDirsManager(conf, conf.getLedgerDirs());\n             ldm.init();\n         } finally {\n             FileUtils.deleteDirectory(parent);"},{"sha":"c303cd86a0a40dc3596295609bdec8ae4f4354ff","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -363,7 +363,7 @@ public void checkpointComplete(CheckpointSource.Checkpoint checkpoint, boolean c\n             };\n         final byte[] KEY = \"foobar\".getBytes();\n         File log0 = new File(curDir, \"0.log\");\n-        LedgerDirsManager dirs = new LedgerDirsManager(conf);\n+        LedgerDirsManager dirs = new LedgerDirsManager(conf, conf.getLedgerDirs());\n         assertFalse(\"Log shouldnt exist\", log0.exists());\n         InterleavedLedgerStorage storage = new InterleavedLedgerStorage(conf, manager,\n                                                                         dirs, checkpointSource);\n@@ -470,7 +470,7 @@ public void testWhenNoLogsToCompact() throws Exception {\n         Bookie.checkDirectoryStructure(curDir);\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n \n-        LedgerDirsManager dirs = new LedgerDirsManager(conf);\n+        LedgerDirsManager dirs = new LedgerDirsManager(conf, conf.getLedgerDirs());\n         final Set<Long> ledgers = Collections\n                 .newSetFromMap(new ConcurrentHashMap<Long, Boolean>());\n         LedgerManager manager = getLedgerManager(ledgers);"},{"sha":"51b25bc297d90cb20cd95f07c0ad7afe1c4c957b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -82,7 +82,7 @@ public void testCreateNewLog() throws Exception {\n         // Creating a new configuration with a number of \n         // ledger directories.\n         conf.setLedgerDirNames(ledgerDirs);\n-        LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf);\n+        LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n         EntryLogger el = new EntryLogger(conf, ledgerDirsManager);\n         \n         // Extracted from createNewLog()"},{"sha":"30db747a74c3f9acbe7b07f1274fb14475027828","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -171,7 +171,7 @@ public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n         EntryLogger entryLogger = null;\n         try {\n-            entryLogger = new EntryLogger(conf, new LedgerDirsManager(conf));\n+            entryLogger = new EntryLogger(conf, new LedgerDirsManager(conf, conf.getLedgerDirs()));\n             fail(\"Expecting FileNotFoundException\");\n         } catch (FileNotFoundException e) {\n             assertEquals(\"Entry log directory does not exist\", e"},{"sha":"b593158c60c186b160aa3a1d270d0bb4a2a8215e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -103,7 +103,7 @@ private void newLedgerCache() throws IOException {\n             ledgerCache.close();\n         }\n         ledgerCache = ((InterleavedLedgerStorage) bookie.ledgerStorage).ledgerCache = new LedgerCacheImpl(\n-                conf, activeLedgers, bookie.getLedgerDirsManager());\n+                conf, activeLedgers, bookie.getIndexDirsManager());\n         flushThread = new Thread() {\n                 public void run() {\n                     while (true) {\n@@ -280,7 +280,7 @@ public void testLedgerCacheFlushFailureOnDiskFull() throws Exception {\n \n         ledgerStorage.addEntry(generateEntry(1, 3));\n         // add the dir to failed dirs\n-        bookie.getLedgerDirsManager().addToFilledDirs(\n+        bookie.getIndexDirsManager().addToFilledDirs(\n                 newFileInfo.getLf().getParentFile().getParentFile().getParentFile());\n         File before = newFileInfo.getLf();\n         // flush after disk is added as failed."},{"sha":"ed68a4c09a090fb2fb74676c4bcba967d2f55621","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7c7e009691bc24642018e4f5c81123a0667d4e8b/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=7c7e009691bc24642018e4f5c81123a0667d4e8b","patch":"@@ -50,7 +50,7 @@ public void setUp() throws Exception {\n         ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n \n-        dirsManager = new LedgerDirsManager(conf);\n+        dirsManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n     }\n \n     @Test(timeout=60000)"}]}

