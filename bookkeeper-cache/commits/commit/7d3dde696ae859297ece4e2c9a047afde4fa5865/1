{"sha":"7d3dde696ae859297ece4e2c9a047afde4fa5865","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZDNkZGU2OTZhZTg1OTI5N2VjZTRlMmM5YTA0N2FmZGU0ZmE1ODY1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-10T10:04:18Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-10T10:04:18Z"},"message":"BOOKKEEPER-465: CreateNewLog may overwrite lastLogId with smaller value (yixue, fpj via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1419311 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"50eb0de4931e1eee1186b7e7747433643097d8ce","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/50eb0de4931e1eee1186b7e7747433643097d8ce"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7d3dde696ae859297ece4e2c9a047afde4fa5865","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7d3dde696ae859297ece4e2c9a047afde4fa5865","html_url":"https://github.com/apache/bookkeeper/commit/7d3dde696ae859297ece4e2c9a047afde4fa5865","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7d3dde696ae859297ece4e2c9a047afde4fa5865/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"a063f9b19d035d8c2d9e76e3741368cf41e7d292","url":"https://api.github.com/repos/apache/bookkeeper/commits/a063f9b19d035d8c2d9e76e3741368cf41e7d292","html_url":"https://github.com/apache/bookkeeper/commit/a063f9b19d035d8c2d9e76e3741368cf41e7d292"}],"stats":{"total":138,"additions":122,"deletions":16},"files":[{"sha":"d9f1659832f3b4dab547729455adb05d73789b5a","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7d3dde696ae859297ece4e2c9a047afde4fa5865/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/7d3dde696ae859297ece4e2c9a047afde4fa5865/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=7d3dde696ae859297ece4e2c9a047afde4fa5865","patch":"@@ -128,6 +128,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-474:  BookieReadWriteTest#testShutdown doesn't make sense (ivank via fpj)\n \n+\tBOOKKEEPER-465: CreateNewLog may overwrite lastLogId with smaller value (yixue, fpj via fpj)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"281c40562f39771f64b6ea54620aead78cdb26d8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":18,"deletions":16,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/7d3dde696ae859297ece4e2c9a047afde4fa5865/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/7d3dde696ae859297ece4e2c9a047afde4fa5865/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=7d3dde696ae859297ece4e2c9a047afde4fa5865","patch":"@@ -63,6 +63,7 @@\n     private AtomicBoolean shouldCreateNewEntryLog = new AtomicBoolean(false);\n \n     private long logId;\n+\n     /**\n      * The maximum size of a entry logger file.\n      */\n@@ -121,6 +122,7 @@ public EntryLogger(ServerConfiguration conf,\n         // so there can be race conditions when entry logs are rolled over and\n         // this header buffer is cleared before writing it into the new logChannel.\n         LOGFILE_HEADER.put(\"BKLO\".getBytes());\n+\n         // Find the largest logId\n         logId = -1;\n         for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n@@ -190,28 +192,28 @@ void createNewLog() throws IOException {\n         }\n \n         // It would better not to overwrite existing entry log files\n-        File newLogFile = null;\n+        String logFileName = null;\n         do {\n-            String logFileName = Long.toHexString(++logId) + \".log\";\n-            File dir = ledgerDirsManager.pickRandomWritableDir();\n-            newLogFile = new File(dir, logFileName);\n-            currentDir = dir;\n-            if (newLogFile.exists()) {\n-                LOG.warn(\"Found existed entry log \" + newLogFile\n-                        + \" when trying to create it as a new log.\");\n-                newLogFile = null;\n-                continue;\n+            logFileName = Long.toHexString(++logId) + \".log\";\n+            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n+                File newLogFile = new File(dir, logFileName);\n+                if (newLogFile.exists()) {\n+                    LOG.warn(\"Found existed entry log \" + newLogFile\n+                           + \" when trying to create it as a new log.\");\n+                    logFileName = null;\n+                    break;\n+                }\n             }\n-        } while (newLogFile == null);\n+        } while (logFileName == null);\n \n+        // Update last log id first\n+        currentDir = ledgerDirsManager.pickRandomWritableDir();\n+        setLastLogId(currentDir, logId);\n+\n+        File newLogFile = new File(currentDir, logFileName);\n         logChannel = new BufferedChannel(new RandomAccessFile(newLogFile, \"rw\").getChannel(), 64*1024);\n         logChannel.write((ByteBuffer) LOGFILE_HEADER.clear());\n         channels.put(logId, logChannel);\n-\n-        List<File> listOfDirs = ledgerDirsManager.getWritableLedgerDirs();\n-        for (File f : listOfDirs) {\n-            setLastLogId(f, logId);\n-        }\n     }\n \n     /**"},{"sha":"05de389368732d04d423f42ca1f5e0a88a95185c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/bookkeeper/blob/7d3dde696ae859297ece4e2c9a047afde4fa5865/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7d3dde696ae859297ece4e2c9a047afde4fa5865/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java?ref=7d3dde696ae859297ece4e2c9a047afde4fa5865","patch":"@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+import org.junit.Test;\n+import org.junit.After;\n+import org.junit.Before;\n+import junit.framework.Assert;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CreateNewLogTest {\n+    private static final Logger LOG = LoggerFactory\n+    .getLogger(CreateNewLogTest.class);\n+        \n+    private String[] ledgerDirs; \n+    private int numDirs = 100;\n+    \n+    @Before\n+    public void setUp() throws Exception{\n+        ledgerDirs = new String[numDirs];\n+        for(int i = 0; i < numDirs; i++){\n+            File temp = File.createTempFile(\"bookie\", \"test\");\n+            temp.delete();\n+            temp.mkdir();\n+            File currentTemp = new File(temp.getAbsoluteFile() + \"/current\");\n+            currentTemp.mkdir();\n+            ledgerDirs[i] = temp.getPath();\n+        }        \n+    }\n+    \n+    @After\n+    public void tearDown() throws Exception{\n+        for(int i = 0; i < numDirs; i++){\n+            File f = new File(ledgerDirs[i]);\n+            deleteRecursive(f);\n+        }\n+    }\n+    \n+    private void deleteRecursive(File f) {\n+        if (f.isDirectory()){\n+            for (File c : f.listFiles()){\n+                deleteRecursive(c);\n+            }\n+        }\n+        \n+        f.delete();\n+    }\n+    \n+    /**\n+     * Checks if new log file id is verified against all directories.\n+     * \n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-465}\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testCreateNewLog() throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration();\n+                     \n+        // Creating a new configuration with a number of \n+        // ledger directories.\n+        conf.setLedgerDirNames(ledgerDirs);\n+        LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf);\n+        EntryLogger el = new EntryLogger(conf, ledgerDirsManager);\n+        \n+        // Extracted from createNewLog()\n+        String logFileName = Long.toHexString(1) + \".log\";\n+        File dir = ledgerDirsManager.pickRandomWritableDir();\n+        LOG.info(\"Picked this directory: \" + dir);\n+        File newLogFile = new File(dir, logFileName);\n+        newLogFile.createNewFile();\n+        \n+        // Calls createNewLog, and with the number of directories we\n+        // are using, if it picks one at random it will fail.\n+        el.createNewLog();\n+        LOG.info(\"This is the current log id: \" + el.getCurrentLogId());\n+        Assert.assertTrue(\"Wrong log id\", el.getCurrentLogId() > 1);\n+    }\n+\n+}\n\\ No newline at end of file"}]}

