{"sha":"7d8079c446110872d8f6d50eff86268a3cb4e989","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZDgwNzljNDQ2MTEwODcyZDhmNmQ1MGVmZjg2MjY4YTNjYjRlOTg5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T12:45:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T12:45:49Z"},"message":"BOOKKEEPER-513: TestMessageFilter fails periodically (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1432902 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5fe48e63acea48298dee3da4b223b6396a60d4c4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5fe48e63acea48298dee3da4b223b6396a60d4c4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7d8079c446110872d8f6d50eff86268a3cb4e989","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7d8079c446110872d8f6d50eff86268a3cb4e989","html_url":"https://github.com/apache/bookkeeper/commit/7d8079c446110872d8f6d50eff86268a3cb4e989","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7d8079c446110872d8f6d50eff86268a3cb4e989/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"96b5aa8e6463c36a0421e47f9892479aa63f885b","url":"https://api.github.com/repos/apache/bookkeeper/commits/96b5aa8e6463c36a0421e47f9892479aa63f885b","html_url":"https://github.com/apache/bookkeeper/commit/96b5aa8e6463c36a0421e47f9892479aa63f885b"}],"stats":{"total":100,"additions":94,"deletions":6},"files":[{"sha":"da2c7556a6516af8dedb8d509b7b40e221a026cd","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7d8079c446110872d8f6d50eff86268a3cb4e989/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/7d8079c446110872d8f6d50eff86268a3cb4e989/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=7d8079c446110872d8f6d50eff86268a3cb4e989","patch":"@@ -200,6 +200,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-55: SubscribeReconnectRetryTask might retry subscription endlessly when another subscription is already successfully created previously (sijie via ivank)\n \n+        BOOKKEEPER-513: TestMessageFilter fails periodically (ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)"},{"sha":"63547a0fdafff58646fe83f713c16d9741aa0abd","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","raw_url":"https://github.com/apache/bookkeeper/raw/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java?ref=7d8079c446110872d8f6d50eff86268a3cb4e989","patch":"@@ -104,7 +104,7 @@ public void setCallback(Callback<PubSubProtocol.ResponseBody> callback) {\n         this.callback = callback;\n     }\n \n-    public Callback<?> getCallback() {\n+    public Callback<PubSubProtocol.ResponseBody> getCallback() {\n         return callback;\n     }\n "},{"sha":"ad5c2cd8f745800098faa3e564916bf34f27bcba","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java?ref=7d8079c446110872d8f6d50eff86268a3cb4e989","patch":"@@ -180,9 +180,11 @@ public void handleResponse(PubSubResponse response, PubSubData pubSubData,\n             // Consider all other status codes as errors, operation failed\n             // cases.\n             logger.error(\"Unexpected error response from server for PubSubResponse: \" + response);\n-            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n-                                                     \"Server responded with a status code of: \"\n-                                                     + response.getStatusCode()));\n+            pubSubData.getCallback().operationFailed(pubSubData.context,\n+                    new ServiceDownException(\"Server responded with a status code of: \"\n+                            + response.getStatusCode(),\n+                            PubSubException.create(response.getStatusCode(),\n+                                                   \"Original Exception\")));\n             break;\n         }\n     }"},{"sha":"36a6925361a7e3db804d74d772c58f6fb9d5f61f","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleHChannelManager.java","status":"modified","additions":44,"deletions":2,"changes":46,"blob_url":"https://github.com/apache/bookkeeper/blob/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleHChannelManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleHChannelManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleHChannelManager.java?ref=7d8079c446110872d8f6d50eff86268a3cb4e989","patch":"@@ -18,6 +18,7 @@\n package org.apache.hedwig.client.netty.impl.simple;\n \n import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n@@ -28,6 +29,7 @@\n import org.jboss.netty.channel.ChannelFuture;\n import org.jboss.netty.channel.ChannelFutureListener;\n \n+import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.data.TopicSubscriber;\n@@ -44,9 +46,9 @@\n import org.apache.hedwig.client.netty.impl.HChannelImpl;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n-import org.apache.hedwig.filter.ClientMessageFilter;\n+import org.apache.hedwig.exceptions.PubSubException.TopicBusyException;\n import org.apache.hedwig.protocol.PubSubProtocol.ResponseBody;\n-import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.Either;\n import static org.apache.hedwig.util.VarArgs.va;\n@@ -82,6 +84,46 @@ public SimpleHChannelManager(ClientConfiguration cfg,\n             new SimpleSubscriptionChannelPipelineFactory(cfg, this);\n     }\n \n+    @Override\n+    public void submitOp(final PubSubData pubSubData) {\n+        /**\n+         * In the simple hchannel implementation that if a client closes a subscription\n+         * and tries to attach to it immediately, it could get a TOPIC_BUSY response. This\n+         * is because, a subscription is closed simply by closing the channel, and the hub\n+         * side may not have been notified of the channel disconnection event by the time\n+         * the new subscription request comes in. To solve this, retry up to 5 times.\n+         * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-513}\n+         */\n+        if (OperationType.SUBSCRIBE.equals(pubSubData.operationType)) {\n+            final Callback<ResponseBody> origCb = pubSubData.getCallback();\n+            final AtomicInteger retries = new AtomicInteger(5);\n+            final Callback<ResponseBody> wrapperCb\n+                = new Callback<ResponseBody>() {\n+                @Override\n+                public void operationFinished(Object ctx,\n+                                              ResponseBody resultOfOperation) {\n+                    origCb.operationFinished(ctx, resultOfOperation);\n+                }\n+\n+                @Override\n+                public void operationFailed(Object ctx, PubSubException exception) {\n+                    if (exception instanceof ServiceDownException\n+                        && exception.getCause() instanceof TopicBusyException\n+                        && retries.decrementAndGet() > 0) {\n+                        logger.warn(\"TOPIC_DOWN from server using simple channel scheme.\"\n+                                    + \"This could be due to the channel disconnection from a close\"\n+                                    + \" not having been triggered on the server side. Retrying\");\n+                        SimpleHChannelManager.super.submitOp(pubSubData);\n+                        return;\n+                    }\n+                    origCb.operationFailed(ctx, exception);\n+                }\n+            };\n+            pubSubData.setCallback(wrapperCb);\n+        }\n+        super.submitOp(pubSubData);\n+    }\n+\n     @Override\n     protected ClientChannelPipelineFactory getSubscriptionChannelPipelineFactory() {\n         return subscriptionChannelPipelineFactory;"},{"sha":"2e8dc0909ae31d579f61c57aa2b05e65ffd72d4b","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java","raw_url":"https://github.com/apache/bookkeeper/raw/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/exceptions/PubSubException.java?ref=7d8079c446110872d8f6d50eff86268a3cb4e989","patch":"@@ -144,6 +144,10 @@ public ServiceDownException(String msg) {\n         public ServiceDownException(Exception e) {\n             super(StatusCode.SERVICE_DOWN, e);\n         }\n+\n+        public ServiceDownException(String msg, Throwable t) {\n+            super(StatusCode.SERVICE_DOWN, msg, t);\n+        }\n     }\n \n     public static class CouldNotConnectException extends PubSubException {"},{"sha":"4f506b6ea49cdbd80c2761175a6395bb27c00bcc","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","raw_url":"https://github.com/apache/bookkeeper/raw/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java?ref=7d8079c446110872d8f6d50eff86268a3cb4e989","patch":"@@ -165,5 +165,34 @@ public void operationFailed(Object ctx, PubSubException exception) {\n         }\n     }\n \n+    /**\n+     * Test that if we close a subscription and open again immediately, we don't\n+     * get a TOPIC_BUSY. This race existed because the simple client simply closed\n+     * the connection when closing a subscription, and another client could try to\n+     * attach to the subscription before the channel disconnected event occurs.\n+     *\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-513}\n+     */\n+    @Test(timeout=15000)\n+    public void testSimpleClientDoesntGetTopicBusy() throws Exception {\n+        // run ten times to increase chance of hitting race\n+        for (int i = 0; i < 10; i++) {\n+            HedwigClient client1 = new HedwigClient(new TestClientConfiguration(false));\n+            Subscriber subscriber1 = client1.getSubscriber();\n+            HedwigClient client2 = new HedwigClient(new TestClientConfiguration(false));\n+            Subscriber subscriber2 = client2.getSubscriber();\n+\n+            final ByteString topic = ByteString.copyFromUtf8(\"TestSimpleClientTopicBusy\");\n+            final ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+            subscriber1.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+            subscriber1.closeSubscription(topic, subid);\n+            subscriber2.subscribe(topic, subid, CreateOrAttach.ATTACH);\n+            subscriber2.closeSubscription(topic, subid);\n+\n+            client1.close();\n+            client2.close();\n+        }\n+    }\n }\n "},{"sha":"e54c5f8aa0ff0b860ec74a2a6fc370aebb3bd11e","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/7d8079c446110872d8f6d50eff86268a3cb4e989/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=7d8079c446110872d8f6d50eff86268a3cb4e989","patch":"@@ -434,6 +434,7 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n             assertEquals(\"Should be expected message with \" + x, x, expected.get());\n             subscriber.stopDelivery(topic, subid);\n             subscriber.closeSubscription(topic, subid);\n+            Thread.sleep(1000); // give server time to run disconnect logic (BOOKKEEPER-513)\n         }\n \n         void subscribe(ByteString topic, ByteString subscriberId) throws Exception {\n@@ -450,6 +451,7 @@ void subscribe(ByteString topic, ByteString subscriberId,\n \n         void closeSubscription(ByteString topic, ByteString subscriberId) throws Exception {\n             subscriber.closeSubscription(topic, subscriberId);\n+            Thread.sleep(1000); // give server time to run disconnect logic (BOOKKEEPER-513)\n         }\n \n         void receiveInts(ByteString topic, ByteString subscriberId, int start, int num) throws Exception {\n@@ -1016,6 +1018,7 @@ public void testSubscriptionDataCompat410() throws Exception {\n         Client410 c410 = new Client410(\"localhost:\"+port+\":\"+sslPort);\n         c410.subscribe(topic, sub410);\n         c410.closeSubscription(topic, sub410);\n+        Thread.sleep(1000); // give server time to run disconnect logic (BOOKKEEPER-513)\n \n         ClientCurrent ccur = new ClientCurrent(\"localhost:\"+port+\":\"+sslPort);\n         ccur.subscribe(topic, subcur);\n@@ -1091,16 +1094,22 @@ public void testUpdateMessageBoundCompat410() throws Exception {\n         Client410 c410 = new Client410(\"localhost:\"+port+\":\"+sslPort);\n         c410.subscribe(topic, subid, options20v410);\n         c410.closeSubscription(topic, subid);\n+        Thread.sleep(1000); // give server time to run disconnect logic (BOOKKEEPER-513)\n+\n         c410.sendXExpectLastY(topic, subid, 50, 20);\n \n         c410.subscribe(topic, subid, options5v410);\n         c410.closeSubscription(topic, subid);\n+        Thread.sleep(1000); // give server time to run disconnect logic (BOOKKEEPER-513)\n+\n         // the message bound isn't updated.\n         c410.sendXExpectLastY(topic, subid, 50, 20);\n \n         ClientCurrent ccur = new ClientCurrent(\"localhost:\"+port+\":\"+sslPort);\n         ccur.subscribe(topic, subid, options5cur);\n         ccur.closeSubscription(topic, subid);\n+        Thread.sleep(1000); // give server time to run disconnect logic (BOOKKEEPER-513)\n+\n         // the message bound should be updated.\n         c410.sendXExpectLastY(topic, subid, 50, 5);\n "}]}

