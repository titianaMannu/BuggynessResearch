{"sha":"7e12629ed7a2006e4805dac0e5c006324a52d5db","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZTEyNjI5ZWQ3YTIwMDZlNDgwNWRhYzBlNWMwMDYzMjRhNTJkNWRi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-02-01T11:06:32Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-02-01T11:06:32Z"},"message":"BOOKKEEPER-23: Timeout requests (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1239068 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eb0d55ddde8d5a721e80a972b23dd0628eb74726","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/eb0d55ddde8d5a721e80a972b23dd0628eb74726"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7e12629ed7a2006e4805dac0e5c006324a52d5db","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7e12629ed7a2006e4805dac0e5c006324a52d5db","html_url":"https://github.com/apache/bookkeeper/commit/7e12629ed7a2006e4805dac0e5c006324a52d5db","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7e12629ed7a2006e4805dac0e5c006324a52d5db/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f56e596d70c66dac170008ffbe19489eee05be08","url":"https://api.github.com/repos/apache/bookkeeper/commits/f56e596d70c66dac170008ffbe19489eee05be08","html_url":"https://github.com/apache/bookkeeper/commit/f56e596d70c66dac170008ffbe19489eee05be08"}],"stats":{"total":171,"additions":170,"deletions":1},"files":[{"sha":"e53f0b77093f8431e2a915ccf03ce9ffd25fe84b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7e12629ed7a2006e4805dac0e5c006324a52d5db/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/7e12629ed7a2006e4805dac0e5c006324a52d5db/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=7e12629ed7a2006e4805dac0e5c006324a52d5db","patch":"@@ -26,6 +26,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-153: Ledger can't be opened or closed due to zero-length metadata (Sijie Guo via ivank)\n \n+        BOOKKEEPER-23: Timeout requests (ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"fecc6262978786018b5de209e1f469fa6e08e266","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=7e12629ed7a2006e4805dac0e5c006324a52d5db","patch":"@@ -245,6 +245,7 @@ void shutdown() throws InterruptedException {\n \n     public Bookie(ServerConfiguration conf) \n             throws IOException, KeeperException, InterruptedException {\n+        super(\"Bookie-\" + conf.getBookiePort());\n         this.conf = conf;\n         this.journalDirectory = conf.getJournalDir();\n         this.ledgerDirectories = conf.getLedgerDirs();"},{"sha":"c9ba81248b645b95c8d65244fb0f826e118fb393","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=7e12629ed7a2006e4805dac0e5c006324a52d5db","patch":"@@ -38,6 +38,7 @@\n \n     // NIO Parameters\n     protected final static String CLIENT_TCP_NODELAY = \"clientTcpNoDelay\";\n+    protected final static String READ_TIMEOUT = \"readTimeout\";\n \n     /**\n      * Construct a default client-side configuration\n@@ -213,4 +214,25 @@ public ClientConfiguration setZkTimeout(int zkTimeout) {\n         return this;\n     }\n \n+    /**\n+     * Get the socket read timeout. This is the number of\n+     * seconds we wait without hearing a response from a bookie\n+     * before we consider it failed.\n+     *\n+     * @return the current read timeout in seconds\n+     */\n+    public int getReadTimeout() {\n+        return getInt(READ_TIMEOUT, 5);\n+    }\n+\n+    /**\n+     * Set the socket read timeout.\n+     * @see #getReadTimeout()\n+     * @param timeout The new read timeout in seconds\n+     * @return client configuration\n+     */\n+    public ClientConfiguration setReadTimeout(int timeout) {\n+        setProperty(READ_TIMEOUT, Integer.toString(timeout));\n+        return this;\n+    }\n }"},{"sha":"c1b587d2b408d847ad5537a25eb05faa1d1783e7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=7e12629ed7a2006e4805dac0e5c006324a52d5db","patch":"@@ -75,7 +75,7 @@\n     ServerConfiguration conf;\n \n     public NIOServerFactory(ServerConfiguration conf, PacketProcessor processor) throws IOException {\n-        super(\"NIOServerFactory\");\n+        super(\"NIOServerFactory-\" + conf.getBookiePort());\n         setDaemon(true);\n         this.processor = processor;\n         this.conf = conf;"},{"sha":"ded137969a05b791c6cc6f1395fa2c0849ecac93","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=7e12629ed7a2006e4805dac0e5c006324a52d5db","patch":"@@ -36,6 +36,8 @@\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.jboss.netty.util.Timer;\n+import org.jboss.netty.util.HashedWheelTimer;\n import org.jboss.netty.bootstrap.ClientBootstrap;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n@@ -56,6 +58,8 @@\n import org.jboss.netty.handler.codec.frame.CorruptedFrameException;\n import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;\n import org.jboss.netty.handler.codec.frame.TooLongFrameException;\n+import org.jboss.netty.handler.timeout.ReadTimeoutHandler;\n+import org.jboss.netty.handler.timeout.ReadTimeoutException;\n \n /**\n  * This class manages all details of connection to a particular bookie. It also\n@@ -76,6 +80,7 @@\n     AtomicLong totalBytesOutstanding;\n     ClientSocketChannelFactory channelFactory;\n     OrderedSafeExecutor executor;\n+    private Timer readTimeoutTimer;\n \n     ConcurrentHashMap<CompletionKey, AddCompletion> addCompletions = new ConcurrentHashMap<CompletionKey, AddCompletion>();\n     ConcurrentHashMap<CompletionKey, ReadCompletion> readCompletions = new ConcurrentHashMap<CompletionKey, ReadCompletion>();\n@@ -107,6 +112,7 @@ public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor exec\n         this.totalBytesOutstanding = totalBytesOutstanding;\n         this.channelFactory = channelFactory;\n         this.state = ConnectionState.DISCONNECTED;\n+        this.readTimeoutTimer = new HashedWheelTimer();\n     }\n \n     synchronized private void connect() {\n@@ -375,6 +381,9 @@ void errorOutOutstandingEntries() {\n     @Override\n     public ChannelPipeline getPipeline() throws Exception {\n         ChannelPipeline pipeline = Channels.pipeline();\n+\n+        pipeline.addLast(\"readTimeout\", new ReadTimeoutHandler(readTimeoutTimer, \n+                                                               conf.getReadTimeout()));\n         pipeline.addLast(\"lengthbasedframedecoder\", new LengthFieldBasedFrameDecoder(MAX_FRAME_LENGTH, 0, 4, 0, 4));\n         pipeline.addLast(\"mainhandler\", this);\n         return pipeline;\n@@ -388,6 +397,7 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n         LOG.info(\"Disconnected from bookie: \" + addr);\n         errorOutOutstandingEntries();\n         channel.close();\n+        readTimeoutTimer.stop();\n \n         state = ConnectionState.DISCONNECTED;\n \n@@ -407,6 +417,11 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws\n                       + e.getChannel().getRemoteAddress());\n             return;\n         }\n+        if (t instanceof ReadTimeoutException) {\n+            ctx.getChannel().disconnect();\n+            return;\n+        }\n+ \n         if (t instanceof IOException) {\n             // these are thrown when a bookie fails, logging them just pollutes\n             // the logs (the failure is logged from the listeners on the write"},{"sha":"8da000ecd461bd818c34b52cb3a1936d42254da2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/apache/bookkeeper/blob/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","raw_url":"https://github.com/apache/bookkeeper/raw/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java?ref=7e12629ed7a2006e4805dac0e5c006324a52d5db","patch":"@@ -0,0 +1,101 @@\n+package org.apache.bookkeeper.client;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+import org.junit.*;\n+import java.net.InetSocketAddress;\n+import java.util.Enumeration;\n+import java.util.concurrent.CyclicBarrier;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.LedgerEntry;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.test.BaseTestCase;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This unit test tests ledger fencing;\n+ *\n+ */\n+public class TestReadTimeout extends BaseTestCase {\n+    static Logger LOG = LoggerFactory.getLogger(TestReadTimeout.class);\n+\n+    DigestType digestType;\n+\n+    public TestReadTimeout(DigestType digestType) {\n+        super(10);\n+        this.digestType = digestType;\n+    }\n+\n+    @Test\n+    public void testReadTimeout() throws Exception {\n+        final AtomicBoolean completed = new AtomicBoolean(false);\n+\n+        LedgerHandle writelh = bkc.createLedger(3,3,digestType, \"testPasswd\".getBytes());\n+        String tmp = \"Foobar\";\n+        \n+        final int numEntries = 10;\n+        for (int i = 0; i < numEntries; i++) {\n+            writelh.addEntry(tmp.getBytes());\n+        }\n+        \n+        Set<InetSocketAddress> beforeSet = new HashSet<InetSocketAddress>();\n+        for (InetSocketAddress addr : writelh.getLedgerMetadata().getEnsemble(numEntries)) {\n+            beforeSet.add(addr);\n+        }\n+\n+        final InetSocketAddress bookieToSleep \n+            = writelh.getLedgerMetadata().getEnsemble(numEntries).get(0);\n+        int sleeptime = baseClientConf.getReadTimeout()*3;\n+        CountDownLatch latch = new CountDownLatch(1);\n+        sleepBookie(bookieToSleep, sleeptime, latch);\n+        latch.await();\n+\n+        writelh.asyncAddEntry(tmp.getBytes(), \n+                new AddCallback() {\n+                    public void addComplete(int rc, LedgerHandle lh, \n+                                            long entryId, Object ctx) {\n+                        completed.set(true);\n+                    }\n+                }, null);\n+        Thread.sleep((baseClientConf.getReadTimeout()*2)*1000);\n+        Assert.assertTrue(\"Write request did not finish\", completed.get());\n+\n+        Set<InetSocketAddress> afterSet = new HashSet<InetSocketAddress>();\n+        for (InetSocketAddress addr : writelh.getLedgerMetadata().getEnsemble(numEntries+1)) {\n+            afterSet.add(addr);\n+        }\n+        beforeSet.removeAll(afterSet);\n+        Assert.assertTrue(\"Bookie set should not match\", beforeSet.size() != 0);\n+    }\n+}"},{"sha":"db1a76357c3fd2f2a3f88fe1085535d41dfe8f9a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/7e12629ed7a2006e4805dac0e5c006324a52d5db/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=7e12629ed7a2006e4805dac0e5c006324a52d5db","patch":"@@ -29,6 +29,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n \n import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -166,6 +167,33 @@ public void killBookie(InetSocketAddress addr) throws InterruptedException {\n         }\n     }\n \n+    public void sleepBookie(InetSocketAddress addr, final int seconds,\n+                            final CountDownLatch l)\n+            throws InterruptedException, IOException {\n+        final String name = \"Bookie-\" + addr.getPort();\n+        Thread[] allthreads = new Thread[Thread.activeCount()];\n+        Thread.enumerate(allthreads);\n+        for (final Thread t : allthreads) {\n+            if (t.getName().equals(name)) {\n+                Thread sleeper = new Thread() {\n+                    public void run() {\n+                        try {\n+                            t.suspend();\n+                            l.countDown();\n+                            Thread.sleep(seconds*1000);\n+                            t.resume();\n+                        } catch (Exception e) {\n+                            LOG.error(\"Error suspending thread\", e);\n+                        }\n+                    }\n+                };\n+                sleeper.start();\n+                return;\n+            }\n+        }\n+        throw new IOException(\"Bookie thread not found\");\n+    }\n+\n     /**\n      * Restart bookie servers\n      *"}]}

