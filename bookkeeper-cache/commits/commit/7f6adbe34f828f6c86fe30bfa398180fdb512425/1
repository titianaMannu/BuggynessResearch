{"sha":"7f6adbe34f828f6c86fe30bfa398180fdb512425","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZjZhZGJlMzRmODI4ZjZjODZmZTMwYmZhMzk4MTgwZmRiNTEyNDI1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T16:59:04Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T16:59:04Z"},"message":"BOOKKEEPER-347: Provide mechanism to detect r-o bookie by the bookie clients (Vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416590 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d36581ecdcc72309aebc26af1c02a8046d3f39c6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d36581ecdcc72309aebc26af1c02a8046d3f39c6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7f6adbe34f828f6c86fe30bfa398180fdb512425","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7f6adbe34f828f6c86fe30bfa398180fdb512425","html_url":"https://github.com/apache/bookkeeper/commit/7f6adbe34f828f6c86fe30bfa398180fdb512425","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7f6adbe34f828f6c86fe30bfa398180fdb512425/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ea460606e4a45a07a79c356ad1d58a6119e0d31","url":"https://api.github.com/repos/apache/bookkeeper/commits/0ea460606e4a45a07a79c356ad1d58a6119e0d31","html_url":"https://github.com/apache/bookkeeper/commit/0ea460606e4a45a07a79c356ad1d58a6119e0d31"}],"stats":{"total":171,"additions":155,"deletions":16},"files":[{"sha":"9140dcff8aa063f271c890690d09ae3fa0c4da21","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/7f6adbe34f828f6c86fe30bfa398180fdb512425/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/7f6adbe34f828f6c86fe30bfa398180fdb512425/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=7f6adbe34f828f6c86fe30bfa398180fdb512425","patch":"@@ -118,6 +118,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-459: Rename metastore mock implementation to InMemory implementation (jiannan via ivank)\n \n+        BOOKKEEPER-347: Provide mechanism to detect r-o bookie by the bookie clients (Vinay via ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"b3b979b19981666a4455702d2339edce93e6b77c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=7f6adbe34f828f6c86fe30bfa398180fdb512425","patch":"@@ -65,6 +65,8 @@\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.Watcher.Event.EventType;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n /**\n  * Implements a bookie.\n  *\n@@ -657,7 +659,8 @@ public void process(WatchedEvent event) {\n     /*\n      * Transition the bookie to readOnly mode\n      */\n-    void transitionToReadOnlyMode() {\n+    @VisibleForTesting\n+    public void transitionToReadOnlyMode() {\n         if (!readOnly.compareAndSet(false, true)) {\n             return;\n         }\n@@ -682,11 +685,11 @@ void transitionToReadOnlyMode() {\n                     // this node is just now created by someone.\n                 }\n             }\n+            // Create the readonly node\n+            zk.create(this.bookieRegistrationPath + READONLY + \"/\" + getMyId(), new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                    CreateMode.EPHEMERAL);\n             // Clear the current registered node\n             zk.delete(zkBookieRegPath, -1);\n-            // Create the readonly node\n-            zk.create(this.bookieRegistrationPath + READONLY + \"/\" + getMyId(),\n-                    new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n         } catch (IOException e) {\n             LOG.error(\"Error in transition to ReadOnly Mode.\"\n                     + \" Shutting down\", e);"},{"sha":"749fdb981c498ef23dddbb4c9db2b239679a2257","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","raw_url":"https://github.com/apache/bookkeeper/raw/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java?ref=7f6adbe34f828f6c86fe30bfa398180fdb512425","patch":"@@ -84,6 +84,8 @@ public static BKException create(int code) {\n             return new BKUnauthorizedAccessException();\n         case Code.UnclosedFragmentException:\n             return new BKUnclosedFragmentException();\n+        case Code.WriteOnReadOnlyBookieException:\n+            return new BKWriteOnReadOnlyBookieException();\n         default:\n             return new BKIllegalOpException();\n         }\n@@ -117,6 +119,7 @@ public static BKException create(int code) {\n         int LedgerFencedException = -101;\n         int UnauthorizedAccessException = -102;\n         int UnclosedFragmentException = -103;\n+        int WriteOnReadOnlyBookieException = -104;\n     }\n \n     public void setCode(int code) {\n@@ -171,6 +174,8 @@ public static String getMessage(int code) {\n             return \"Attempted to access ledger using the wrong password\";\n         case Code.UnclosedFragmentException:\n             return \"Attempting to use an unclosed fragment; This is not safe\";\n+        case Code.WriteOnReadOnlyBookieException:\n+            return \"Attempting to write on ReadOnly bookie\";\n         default:\n             return \"Invalid operation\";\n         }\n@@ -301,4 +306,10 @@ public BKUnclosedFragmentException() {\n             super(Code.UnclosedFragmentException);\n         }\n     }\n+\n+    public static class BKWriteOnReadOnlyBookieException extends BKException {\n+        public BKWriteOnReadOnlyBookieException() {\n+            super(Code.WriteOnReadOnlyBookieException);\n+        }\n+    }\n }"},{"sha":"32f8808ad496bb615e0577a8e87fb3a821ddc355","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=7f6adbe34f828f6c86fe30bfa398180fdb512425","patch":"@@ -373,6 +373,10 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n                         return;\n                     }\n                     for (String bookieNode : children) {\n+                        if (Bookie.READONLY.equals(bookieNode)) {\n+                            // exclude the readonly node from available bookies.\n+                            continue;\n+                        }\n                         String parts[] = bookieNode.split(COLON);\n                         if (parts.length < 2) {\n                             LOG.error(\"Bookie Node retrieved from ZK has invalid name format: \" + bookieNode);"},{"sha":"c4524d70b11dd8278d5ab73ec4b2d11702224e83","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":111,"deletions":12,"changes":123,"blob_url":"https://github.com/apache/bookkeeper/blob/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=7f6adbe34f828f6c86fe30bfa398180fdb512425","patch":"@@ -29,17 +29,22 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.bookkeeper.util.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.AsyncCallback.ChildrenCallback;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.KeeperException.NodeExistsException;\n+import org.apache.zookeeper.ZooDefs.Ids;\n \n /**\n  * This class is responsible for maintaining a consistent view of what bookies\n@@ -67,12 +72,14 @@ public void safeRun() {\n             readBookies();\n         }\n     };\n+    private ReadOnlyBookieWatcher readOnlyBookieWatcher;\n \n-    public BookieWatcher(ClientConfiguration conf, BookKeeper bk) {\n+    public BookieWatcher(ClientConfiguration conf, BookKeeper bk) throws KeeperException, InterruptedException {\n         this.bk = bk;\n         // ZK bookie registration path\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath();\n         this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        readOnlyBookieWatcher = new ReadOnlyBookieWatcher(conf, bk);\n     }\n \n     public void halt() {\n@@ -102,6 +109,27 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n             return;\n         }\n \n+        // Just exclude the 'readonly' znode to exclude r-o bookies from\n+        // available nodes list.\n+        children.remove(Bookie.READONLY);\n+\n+        HashSet<InetSocketAddress> newBookieAddrs = convertToBookieAddresses(children);\n+\n+        final HashSet<InetSocketAddress> deadBookies;\n+        synchronized (this) {\n+            deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n+            deadBookies.removeAll(newBookieAddrs);\n+            // No need to close readonly bookie clients.\n+            deadBookies.removeAll(readOnlyBookieWatcher.getReadOnlyBookies());\n+            knownBookies = newBookieAddrs;\n+        }\n+\n+        if (bk.getBookieClient() != null) {\n+            bk.getBookieClient().closeClients(deadBookies);\n+        }\n+    }\n+\n+    private static HashSet<InetSocketAddress> convertToBookieAddresses(List<String> children) {\n         // Read the bookie addresses into a set for efficient lookup\n         HashSet<InetSocketAddress> newBookieAddrs = new HashSet<InetSocketAddress>();\n         for (String bookieAddrString : children) {\n@@ -114,17 +142,7 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n             }\n             newBookieAddrs.add(bookieAddr);\n         }\n-\n-        final HashSet<InetSocketAddress> deadBookies;\n-        synchronized (this) {\n-            deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n-            deadBookies.removeAll(newBookieAddrs);\n-            knownBookies = newBookieAddrs;\n-        }\n-\n-        if (bk.getBookieClient() != null) {\n-            bk.getBookieClient().closeClients(deadBookies);\n-        }\n+        return newBookieAddrs;\n     }\n \n     /**\n@@ -133,6 +151,9 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n      * @throws KeeperException\n      */\n     public void readBookiesBlocking() throws InterruptedException, KeeperException {\n+        // Read readonly bookies first\n+        readOnlyBookieWatcher.readROBookiesBlocking();\n+\n         final LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();\n         readBookies(new ChildrenCallback() {\n             public void processResult(int rc, String path, Object ctx, List<String> children) {\n@@ -213,4 +234,82 @@ public InetSocketAddress getAdditionalBookie(List<InetSocketAddress> existingBoo\n         throw new BKNotEnoughBookiesException();\n     }\n \n+    /**\n+     * Watcher implementation to watch the readonly bookies under\n+     * &lt;available&gt;/readonly\n+     */\n+    private static class ReadOnlyBookieWatcher implements Watcher, ChildrenCallback {\n+\n+        private final static Logger LOG = LoggerFactory.getLogger(ReadOnlyBookieWatcher.class);\n+        private HashSet<InetSocketAddress> readOnlyBookies = new HashSet<InetSocketAddress>();\n+        private BookKeeper bk;\n+        private String readOnlyBookieRegPath;\n+\n+        public ReadOnlyBookieWatcher(ClientConfiguration conf, BookKeeper bk) throws KeeperException,\n+                InterruptedException {\n+            this.bk = bk;\n+            readOnlyBookieRegPath = conf.getZkAvailableBookiesPath() + \"/\" + Bookie.READONLY;\n+            if (null == bk.getZkHandle().exists(readOnlyBookieRegPath, false)) {\n+                try {\n+                    bk.getZkHandle().create(readOnlyBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                            CreateMode.PERSISTENT);\n+                } catch (NodeExistsException e) {\n+                    // this node is just now created by someone.\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void process(WatchedEvent event) {\n+            readROBookies();\n+        }\n+\n+        // read the readonly bookies in blocking fashion. Used only for first\n+        // time.\n+        void readROBookiesBlocking() throws InterruptedException, KeeperException {\n+\n+            final LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();\n+            readROBookies(new ChildrenCallback() {\n+                public void processResult(int rc, String path, Object ctx, List<String> children) {\n+                    try {\n+                        ReadOnlyBookieWatcher.this.processResult(rc, path, ctx, children);\n+                        queue.put(rc);\n+                    } catch (InterruptedException e) {\n+                        logger.error(\"Interruped when trying to read readonly bookies in a blocking fashion\");\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            });\n+            int rc = queue.take();\n+\n+            if (rc != KeeperException.Code.OK.intValue()) {\n+                throw KeeperException.create(Code.get(rc));\n+            }\n+        }\n+\n+        // Read children and register watcher for readonly bookies path\n+        void readROBookies(ChildrenCallback callback) {\n+            bk.getZkHandle().getChildren(this.readOnlyBookieRegPath, this, callback, null);\n+        }\n+\n+        void readROBookies() {\n+            readROBookies(this);\n+        }\n+\n+        @Override\n+        public void processResult(int rc, String path, Object ctx, List<String> children) {\n+            if (rc != Code.OK.intValue()) {\n+                LOG.error(\"Not able to read readonly bookies : \", KeeperException.create(Code.get(rc)));\n+                return;\n+            }\n+\n+            HashSet<InetSocketAddress> newReadOnlyBookies = convertToBookieAddresses(children);\n+            readOnlyBookies = newReadOnlyBookies;\n+        }\n+\n+        // returns the readonly bookies\n+        public HashSet<InetSocketAddress> getReadOnlyBookies() {\n+            return readOnlyBookies;\n+        }\n+    }\n }"},{"sha":"43e94df00677ed003b2b5de96b3284a32b8fbbf1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=7f6adbe34f828f6c86fe30bfa398180fdb512425","patch":"@@ -558,6 +558,9 @@ void handleAddResponse(long ledgerId, long entryId, int rc) {\n         case BookieProtocol.EUA:\n             rc = BKException.Code.UnauthorizedAccessException;\n             break;\n+        case BookieProtocol.EREADONLY:\n+            rc = BKException.Code.WriteOnReadOnlyBookieException;\n+            break;\n         default:\n             LOG.error(\"Add for ledger: \" + ledgerId + \", entry: \" + entryId + \" failed on bookie: \" + addr\n                       + \" with code: \" + rc);"},{"sha":"969f35fa8f01ef728366ba06c07f32c278f5c751","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/7f6adbe34f828f6c86fe30bfa398180fdb512425/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java?ref=7f6adbe34f828f6c86fe30bfa398180fdb512425","patch":"@@ -167,4 +167,21 @@ private void startNewBookieWithMultipleLedgerDirs(int numOfLedgerDirs)\n         bsConfs.add(newConf);\n         bs.add(startBookie(newConf));\n     }\n+\n+    /**\n+     * Test ledger creation with readonly bookies\n+     */\n+    public void testLedgerCreationShouldFailWithReadonlyBookie() throws Exception {\n+        killBookie(1);\n+        baseConf.setReadOnlyModeEnabled(true);\n+        startNewBookie();\n+        bs.get(1).getBookie().transitionToReadOnlyMode();\n+        try {\n+            bkc.readBookiesBlocking();\n+            bkc.createLedger(2, 2, DigestType.CRC32, \"\".getBytes());\n+            fail(\"Must throw exception, as there is one readonly bookie\");\n+        } catch (BKException e) {\n+            // Expected\n+        }\n+    }\n }"}]}

