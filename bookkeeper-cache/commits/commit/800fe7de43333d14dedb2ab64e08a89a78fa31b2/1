{"sha":"800fe7de43333d14dedb2ab64e08a89a78fa31b2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MDBmZTdkZTQzMzMzZDE0ZGVkYjJhYjY0ZTA4YTg5YTc4ZmEzMWIy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-04T08:39:15Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-04T08:39:15Z"},"message":"BOOKKEEPER-386: It should not be possible to replicate a ledger fragment which is at the end of an open ledger (ivank & umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1380488 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b53dd68bbbb372e6c68c7e090e4c15c28386044","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2b53dd68bbbb372e6c68c7e090e4c15c28386044"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/800fe7de43333d14dedb2ab64e08a89a78fa31b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/800fe7de43333d14dedb2ab64e08a89a78fa31b2","html_url":"https://github.com/apache/bookkeeper/commit/800fe7de43333d14dedb2ab64e08a89a78fa31b2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/800fe7de43333d14dedb2ab64e08a89a78fa31b2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"504369377af29b6d09a801243ead58805784765a","url":"https://api.github.com/repos/apache/bookkeeper/commits/504369377af29b6d09a801243ead58805784765a","html_url":"https://github.com/apache/bookkeeper/commit/504369377af29b6d09a801243ead58805784765a"}],"stats":{"total":169,"additions":136,"deletions":33},"files":[{"sha":"910e8af68657492d5ffada1a4a264faafe12a958","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/800fe7de43333d14dedb2ab64e08a89a78fa31b2/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/800fe7de43333d14dedb2ab64e08a89a78fa31b2/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=800fe7de43333d14dedb2ab64e08a89a78fa31b2","patch":"@@ -74,6 +74,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-385: replicateLedgerFragment should throw Exceptions in error conditions (umamahesh via ivank)\n \n+        BOOKKEEPER-386: It should not be possible to replicate a ledger fragment which is at the end of an open ledger (ivank & umamahesh via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"e6a3807117b3b0b4843248d481b150d48a0e9018","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","raw_url":"https://github.com/apache/bookkeeper/raw/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java?ref=800fe7de43333d14dedb2ab64e08a89a78fa31b2","patch":"@@ -82,6 +82,8 @@ public static BKException create(int code) {\n             return new BKLedgerFencedException();\n         case Code.UnauthorizedAccessException:\n             return new BKUnauthorizedAccessException();\n+        case Code.UnclosedFragmentException:\n+            return new BKUnclosedFragmentException();\n         default:\n             return new BKIllegalOpException();\n         }\n@@ -114,6 +116,7 @@ public static BKException create(int code) {\n         int IllegalOpException = -100;\n         int LedgerFencedException = -101;\n         int UnauthorizedAccessException = -102;\n+        int UnclosedFragmentException = -103;\n     }\n \n     public void setCode(int code) {\n@@ -166,6 +169,8 @@ public static String getMessage(int code) {\n             return \"Ledger has been fenced off. Some other client must have opened it to read\";\n         case Code.UnauthorizedAccessException:\n             return \"Attempted to access ledger using the wrong password\";\n+        case Code.UnclosedFragmentException:\n+            return \"Attempting to use an unclosed fragment; This is not safe\";\n         default:\n             return \"Invalid operation\";\n         }\n@@ -290,4 +295,10 @@ public BKUnauthorizedAccessException() {\n             super(Code.UnauthorizedAccessException);\n         }\n     }\n+\n+    public static class BKUnclosedFragmentException extends BKException {\n+        public BKUnclosedFragmentException() {\n+            super(Code.UnclosedFragmentException);\n+        }\n+    }\n }"},{"sha":"fe9476f0a4e44a614ba2aa9ce4172016f52f82c3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=800fe7de43333d14dedb2ab64e08a89a78fa31b2","patch":"@@ -614,9 +614,8 @@ public void openComplete(int newrc, final LedgerHandle newlh, Object newctx) {\n                                 }\n                             }\n                         }\n-                        LedgerFragment ledgerFragment = new LedgerFragment(lh.ledgerId,\n-                        startEntryId, endEntryId, bookieIndex,\n-                        currentEnsemble, lh.distributionSchedule);\n+                        LedgerFragment ledgerFragment = new LedgerFragment(lh,\n+                                startEntryId, endEntryId, bookieIndex);\n                         asyncRecoverLedgerFragment(lh, ledgerFragment, cb, newBookie);\n                     } catch(InterruptedException e) {\n                         Thread.currentThread().interrupt();"},{"sha":"53a6d20aa4f5988a0036f6862a64b23eb6948c31","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java?ref=800fe7de43333d14dedb2ab64e08a89a78fa31b2","patch":"@@ -19,7 +19,6 @@\n  */\n package org.apache.bookkeeper.client;\n \n-import java.util.Enumeration;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.Set;\n@@ -183,9 +182,8 @@ public void checkLedger(LedgerHandle lh,\n                 .getLedgerMetadata().getEnsembles().entrySet()) {\n             if (curEntryId != null) {\n                 for (int i = 0; i < curEnsemble.size(); i++) {\n-                    fragments.add(new LedgerFragment(lh.getId(), curEntryId, e\n-                            .getKey() - 1, i, curEnsemble, lh\n-                            .getDistributionSchedule()));\n+                    fragments.add(new LedgerFragment(lh, curEntryId,\n+                            e.getKey() - 1, i));\n                 }\n             }\n             curEntryId = e.getKey();\n@@ -214,9 +212,8 @@ public void checkLedger(LedgerHandle lh,\n \n             final Set<LedgerFragment> finalSegmentFragments = new HashSet<LedgerFragment>();\n             for (int i = 0; i < curEnsemble.size(); i++) {\n-                finalSegmentFragments.add(new LedgerFragment(lh.getId(), curEntryId,\n-                                                  lastEntry, i, curEnsemble,\n-                                                  lh.getDistributionSchedule()));\n+                finalSegmentFragments.add(new LedgerFragment(lh, curEntryId,\n+                        lastEntry, i));\n             }\n \n             // Check for the case that no last confirmed entry has"},{"sha":"9f8145512207747bd6de23298a4cab95462287e3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","status":"modified","additions":47,"deletions":19,"changes":66,"blob_url":"https://github.com/apache/bookkeeper/blob/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","raw_url":"https://github.com/apache/bookkeeper/raw/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java?ref=800fe7de43333d14dedb2ab64e08a89a78fa31b2","patch":"@@ -19,8 +19,10 @@\n  */\n package org.apache.bookkeeper.client;\n \n-import java.util.List;\n import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n \n /**\n  * Represents the entries of a segment of a ledger which are stored on a single\n@@ -29,28 +31,54 @@\n  * Used for checking and recovery\n  */\n public class LedgerFragment {\n-    final int bookieIndex;\n-    final List<InetSocketAddress> ensemble;\n-    final long firstEntryId;\n-    final long lastEntryId;\n-    final long ledgerId;\n-    final DistributionSchedule schedule;\n+    private final int bookieIndex;\n+    private final List<InetSocketAddress> ensemble;\n+    private final long firstEntryId;\n+    private final long lastKnownEntryId;\n+    private final long ledgerId;\n+    private final DistributionSchedule schedule;\n+    private final boolean isLedgerClosed;\n \n-    LedgerFragment(long ledgerId, long firstEntryId, long lastEntryId,\n-            int bookieIndex, List<InetSocketAddress> ensemble,\n-            DistributionSchedule schedule) {\n-        this.ledgerId = ledgerId;\n+    LedgerFragment(LedgerHandle lh, long firstEntryId,\n+            long lastKnownEntryId, int bookieIndex) {\n+        this.ledgerId = lh.getId();\n         this.firstEntryId = firstEntryId;\n-        this.lastEntryId = lastEntryId;\n+        this.lastKnownEntryId = lastKnownEntryId;\n         this.bookieIndex = bookieIndex;\n-        this.ensemble = ensemble;\n-        this.schedule = schedule;\n+        this.ensemble = lh.getLedgerMetadata().getEnsemble(firstEntryId);\n+        this.schedule = lh.getDistributionSchedule();\n+        SortedMap<Long, ArrayList<InetSocketAddress>> ensembles = lh\n+                .getLedgerMetadata().getEnsembles();\n+        this.isLedgerClosed = lh.getLedgerMetadata().isClosed()\n+                || !ensemble.equals(ensembles.get(ensembles.lastKey()));\n+    }\n+\n+    /**\n+     * Returns true, if and only if the ledger fragment will never be modified\n+     * by any of the clients in future, otherwise false. i.e,\n+     * <ol>\n+     * <li>If ledger is in closed state, then no other clients can modify this\n+     * fragment.</li>\n+     * <li>If ledger is not in closed state and the current fragment is not a\n+     * last fragment, then no one will modify this fragment.</li>\n+     * </ol>\n+     */\n+    boolean isClosed() {\n+        return isLedgerClosed;\n     }\n \n     long getLedgerId() {\n         return ledgerId;\n     }\n \n+    long getFirstEntryId() {\n+        return firstEntryId;\n+    }\n+\n+    long getLastKnownEntryId() {\n+        return lastKnownEntryId;\n+    }\n+\n     /**\n      * Gets the failedBookie address\n      */\n@@ -66,7 +94,7 @@ public InetSocketAddress getAddress() {\n     public long getFirstStoredEntryId() {\n         long firstEntry = firstEntryId;\n \n-        for (int i = 0; i < ensemble.size() && firstEntry <= lastEntryId; i++) {\n+        for (int i = 0; i < ensemble.size() && firstEntry <= lastKnownEntryId; i++) {\n             if (schedule.hasEntry(firstEntry, bookieIndex)) {\n                 return firstEntry;\n             } else {\n@@ -82,7 +110,7 @@ public long getFirstStoredEntryId() {\n      * @return entryId\n      */\n     public long getLastStoredEntryId() {\n-        long lastEntry = lastEntryId;\n+        long lastEntry = lastKnownEntryId;\n         for (int i = 0; i < ensemble.size() && lastEntry >= firstEntryId; i++) {\n             if (schedule.hasEntry(lastEntry, bookieIndex)) {\n                 return lastEntry;\n@@ -105,8 +133,8 @@ public long getLastStoredEntryId() {\n     @Override\n     public String toString() {\n         return String.format(\"Fragment(LedgerID: %d, FirstEntryID: %d[%d], \"\n-                + \"LastEntryID: %d[%d], Host: %s)\", ledgerId, firstEntryId,\n-                getFirstStoredEntryId(), lastEntryId, getLastStoredEntryId(),\n-                getAddress());\n+                + \"LastKnownEntryID: %d[%d], Host: %s, Closed: %s)\", ledgerId, firstEntryId,\n+                getFirstStoredEntryId(), lastKnownEntryId, getLastStoredEntryId(),\n+                getAddress(), isLedgerClosed);\n     }\n }\n\\ No newline at end of file"},{"sha":"60c398527a5a1668f7973e75f57e0470ab5e11dd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","raw_url":"https://github.com/apache/bookkeeper/raw/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java?ref=800fe7de43333d14dedb2ab64e08a89a78fa31b2","patch":"@@ -68,10 +68,18 @@ public LedgerFragmentReplicator(BookKeeper bkc) {\n      *            entries that were stored on the failed bookie.\n      */\n     void replicate(final LedgerHandle lh, final LedgerFragment lf,\n-            final SingleFragmentCallback ledgerFragmentMcb,\n-            final InetSocketAddress newBookie) throws InterruptedException {\n-        Long startEntryId = lf.firstEntryId;\n-        Long endEntryId = lf.lastEntryId;\n+                   final SingleFragmentCallback ledgerFragmentMcb,\n+                   final InetSocketAddress newBookie)\n+            throws InterruptedException {\n+        if (!lf.isClosed()) {\n+            LOG.error(\"Trying to replicate an unclosed fragment;\"\n+                      + \" This is not safe {}\", lf);\n+            ledgerFragmentMcb.processResult(BKException.Code.UnclosedFragmentException,\n+                                            null, null);\n+            return;\n+        }\n+        Long startEntryId = lf.getFirstStoredEntryId();\n+        Long endEntryId = lf.getLastStoredEntryId();\n         if (endEntryId == null) {\n             /*\n              * Ideally this should never happen if bookie failure is taken care"},{"sha":"f1e00a374431a318f5b59f21e492b3fe87333bec","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","raw_url":"https://github.com/apache/bookkeeper/raw/800fe7de43333d14dedb2ab64e08a89a78fa31b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java?ref=800fe7de43333d14dedb2ab64e08a89a78fa31b2","patch":"@@ -121,6 +121,64 @@ public void testReplicateLFShouldCopyFailedBookieFragmentsToTargetBookie()\n         verifyRecoveredLedgers(lh, 0, 9);\n     }\n \n+    /**\n+     * Tests that fragment re-replication fails on last unclosed ledger\n+     * fragments.\n+     */\n+    @Test\n+    public void testReplicateLFFailsOnlyOnLastUnClosedFragments()\n+            throws Exception {\n+        byte[] data = \"TestLedgerFragmentReplication\".getBytes();\n+        LedgerHandle lh = bkc.createLedger(3, 3, BookKeeper.DigestType.CRC32,\n+                \"testpasswd\".getBytes());\n+\n+        for (int i = 0; i < 10; i++) {\n+            lh.addEntry(data);\n+        }\n+        InetSocketAddress replicaToKill = lh.getLedgerMetadata().getEnsembles()\n+                .get(0L).get(0);\n+\n+        startNewBookie();\n+        LOG.info(\"Killing Bookie\", replicaToKill);\n+        killBookie(replicaToKill);\n+\n+        // Lets reform ensemble\n+        for (int i = 0; i < 10; i++) {\n+            lh.addEntry(data);\n+        }\n+\n+        InetSocketAddress replicaToKill2 = lh.getLedgerMetadata()\n+                .getEnsembles().get(0L).get(1);\n+\n+        int startNewBookie2 = startNewBookie();\n+        LOG.info(\"Killing Bookie\", replicaToKill2);\n+        killBookie(replicaToKill2);\n+\n+        InetSocketAddress newBkAddr = new InetSocketAddress(InetAddress\n+                .getLocalHost().getHostAddress(), startNewBookie2);\n+        LOG.info(\"New Bookie addr :\" + newBkAddr);\n+        Set<LedgerFragment> result = getFragmentsToReplicate(lh);\n+\n+        BookKeeperAdmin admin = new BookKeeperAdmin(baseClientConf);\n+        // 0-9 entries should be copy to new bookie\n+\n+        int unclosedCount = 0;\n+        for (LedgerFragment lf : result) {\n+            if (lf.isClosed()) {\n+                admin.replicateLedgerFragment(lh, lf, newBkAddr);\n+            } else {\n+                unclosedCount++;\n+                try {\n+                    admin.replicateLedgerFragment(lh, lf, newBkAddr);\n+                    fail(\"Shouldn't be able to rereplicate unclosed ledger\");\n+                } catch (BKException bke) {\n+                    // correct behaviour\n+                }\n+            }\n+        }\n+        assertEquals(\"Should be only one unclosed fragment\", 1, unclosedCount);\n+    }\n+    \n     /**\n      * Tests that ReplicateLedgerFragment should return false if replication\n      * fails"}]}

