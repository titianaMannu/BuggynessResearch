{"sha":"80c6e5526c63409e4f359905d0fd319ac7d2b129","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MGM2ZTU1MjZjNjM0MDllNGYzNTk5MDVkMGZkMzE5YWM3ZDJiMTI5","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-06T13:29:47Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-06T13:29:47Z"},"message":"BOOKKEEPER-767: Allow loopback in tests (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1600881 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3a2c7733cb0f2022f8039e945cd780eaf3f2e15d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3a2c7733cb0f2022f8039e945cd780eaf3f2e15d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/80c6e5526c63409e4f359905d0fd319ac7d2b129","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/80c6e5526c63409e4f359905d0fd319ac7d2b129","html_url":"https://github.com/apache/bookkeeper/commit/80c6e5526c63409e4f359905d0fd319ac7d2b129","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/80c6e5526c63409e4f359905d0fd319ac7d2b129/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"68deb96d2d1de45eea0c358c0eab39847d51e1f8","url":"https://api.github.com/repos/apache/bookkeeper/commits/68deb96d2d1de45eea0c358c0eab39847d51e1f8","html_url":"https://github.com/apache/bookkeeper/commit/68deb96d2d1de45eea0c358c0eab39847d51e1f8"}],"stats":{"total":37,"additions":22,"deletions":15},"files":[{"sha":"e945bddd2d61e69ef60db1b9166965783d5baeae","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -61,6 +61,8 @@ Trunk (unreleased changes)\n       BOOKKEEPER-763: findbugs fails to run on jenkins (ivank)\n \n       BOOKKEEPER-766: Update notice.txt files to include 2014 (ivank via fpj)\n+      \n+      BOOKKEEPER-767: Allow loopback in tests (ivank via fpj)\n \n       bookkeeper-server:\n "},{"sha":"f19583f51fa9e82b56727d5d2c49c6873d6ea8c4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -98,7 +98,7 @@ public void testExitCodeZK_REG_FAIL() throws Exception {\n         tmpDir.delete();\n         tmpDir.mkdir();\n \n-        final ServerConfiguration conf = new ServerConfiguration()\n+        final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(null).setJournalDirName(tmpDir.getPath())\n                 .setLedgerDirNames(new String[] { tmpDir.getPath() });\n \n@@ -370,7 +370,7 @@ public void testWithDiskFull() throws Exception {\n         tempDir.mkdir();\n         long usableSpace = tempDir.getUsableSpace();\n         long totalSpace = tempDir.getTotalSpace();\n-        final ServerConfiguration conf = new ServerConfiguration()\n+        final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(zkutil.getZooKeeperConnectString())\n                 .setZkTimeout(5000).setJournalDirName(tempDir.getPath())\n                 .setLedgerDirNames(new String[] { tempDir.getPath() });\n@@ -392,7 +392,7 @@ public void testWithDiskError() throws Exception {\n         parent.delete();\n         parent.mkdir();\n         File child = File.createTempFile(\"DiskCheck\", \"test\", parent);\n-        final ServerConfiguration conf = new ServerConfiguration()\n+        final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(zkutil.getZooKeeperConnectString())\n                 .setZkTimeout(5000).setJournalDirName(child.getPath())\n                 .setLedgerDirNames(new String[] { child.getPath() });"},{"sha":"e1811cf1f1f104e60750e227d28c6c8eaaebf740","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -34,6 +34,7 @@\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n@@ -362,7 +363,7 @@ public void testCompactionSmallEntryLogs() throws Exception {\n     @Test(timeout=60000)\n     public void testCompactionSafety() throws Exception {\n         tearDown(); // I dont want the test infrastructure\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         final Set<Long> ledgers = Collections.newSetFromMap(new ConcurrentHashMap<Long, Boolean>());\n         LedgerManager manager = getLedgerManager(ledgers);\n \n@@ -516,7 +517,7 @@ public boolean hasNext() throws IOException {\n     @Test(timeout = 60000)\n     public void testWhenNoLogsToCompact() throws Exception {\n         tearDown(); // I dont want the test infrastructure\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n         tmpDir.delete();\n         tmpDir.mkdir();"},{"sha":"f5cb4c6fdcd22d84f7c54607f64cc8a275983d62","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -366,7 +366,7 @@ public void testRestartWithHostNameAsBookieID() throws Exception {\n         String[] ledgerDirs = new String[] { newDirectory(), newDirectory(),\n                 newDirectory() };\n         String journalDir = newDirectory();\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(zkutil.getZooKeeperConnectString())\n                 .setJournalDirName(journalDir).setLedgerDirNames(ledgerDirs)\n                 .setBookiePort(bookiePort);\n@@ -390,7 +390,7 @@ public void testRestartWithIpAddressAsBookieID() throws Exception {\n         String[] ledgerDirs = new String[] { newDirectory(), newDirectory(),\n                 newDirectory() };\n         String journalDir = newDirectory();\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(zkutil.getZooKeeperConnectString())\n                 .setJournalDirName(journalDir).setLedgerDirNames(ledgerDirs)\n                 .setBookiePort(bookiePort);\n@@ -412,7 +412,7 @@ public void testRestartWithIpAddressAsBookieID() throws Exception {\n      */\n     @Test(timeout = 60000)\n     public void testV2dataWithHostNameAsBookieID() throws Exception {\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(zkutil.getZooKeeperConnectString())\n                 .setJournalDirName(newV2JournalDirectory())\n                 .setLedgerDirNames(new String[] { newV2LedgerDirectory() })"},{"sha":"d947dff97514d2177a72a0d9224c277b8bec9ed6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -33,6 +33,7 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n@@ -75,7 +76,7 @@ public void teardownExecutor() {\n     @Test(timeout=60000)\n     public void testSyncThreadLongShutdown() throws Exception {\n         int flushInterval = 100;\n-        ServerConfiguration conf = new ServerConfiguration().setFlushInterval(flushInterval);\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         CheckpointSource checkpointSource = new DummyCheckpointSource();\n         LedgerDirsListener listener = new DummyLedgerDirsListener();\n \n@@ -150,7 +151,7 @@ public Boolean call() {\n     @Test(timeout=60000)\n     public void testSyncThreadSuspension() throws Exception {\n         int flushInterval = 100;\n-        ServerConfiguration conf = new ServerConfiguration().setFlushInterval(flushInterval);\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         CheckpointSource checkpointSource = new DummyCheckpointSource();\n         LedgerDirsListener listener = new DummyLedgerDirsListener();\n \n@@ -194,7 +195,7 @@ public Checkpoint checkpoint(Checkpoint checkpoint)\n     @Test(timeout=60000)\n     public void testSyncThreadShutdownOnError() throws Exception {\n         int flushInterval = 100;\n-        ServerConfiguration conf = new ServerConfiguration().setFlushInterval(flushInterval);\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         CheckpointSource checkpointSource = new DummyCheckpointSource();\n         final CountDownLatch fatalLatch = new CountDownLatch(1);\n         LedgerDirsListener listener = new DummyLedgerDirsListener() {\n@@ -225,7 +226,7 @@ public Checkpoint checkpoint(Checkpoint checkpoint)\n     @Test(timeout=60000)\n     public void testSyncThreadDisksFull() throws Exception {\n         int flushInterval = 100;\n-        ServerConfiguration conf = new ServerConfiguration().setFlushInterval(flushInterval);\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         CheckpointSource checkpointSource = new DummyCheckpointSource();\n         final CountDownLatch diskFullLatch = new CountDownLatch(1);\n         LedgerDirsListener listener = new DummyLedgerDirsListener() {"},{"sha":"9522ae12e2230a95135f0ae123029f0a16031c0f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/conf/TestBKConfiguration.java?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -28,6 +28,7 @@ public static ServerConfiguration newServerConfiguration() {\n         confReturn.setJournalFlushWhenQueueEmpty(true);\n         // enable journal format version\n         confReturn.setJournalFormatVersionToWrite(5);\n+        confReturn.setAllowLoopback(true);\n         return confReturn;\n     }\n "},{"sha":"91aae77fe2e00487c929b69cfd1be416f6e0c67d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -31,6 +31,7 @@\n import org.apache.bookkeeper.client.LedgerHandleAdapter;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n@@ -62,16 +63,14 @@\n     public AuditorPeriodicBookieCheckTest() {\n         super(3);\n         baseConf.setPageLimit(1); // to make it easy to push ledger out of cache\n-        baseConf.setAllowLoopback(true);\n     }\n \n     @Before\n     @Override\n     public void setUp() throws Exception {\n         super.setUp();\n \n-        ServerConfiguration conf = new ServerConfiguration(bsConfs.get(0));\n-        conf.setAllowLoopback(true);\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setAuditorPeriodicBookieCheckInterval(CHECK_INTERVAL);\n         String addr = bs.get(0).getLocalAddress().toString();\n "},{"sha":"69d1fa7003e194f7934f3e12b8e1fdd605a87f39","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -502,6 +502,7 @@ protected void startBookieServer() throws Exception {\n                 getClass().getName() + port, \"test\");\n             org.apache.bookkeeper.conf.ServerConfiguration conf = newServerConfiguration(\n                 port, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n+            conf.setAllowLoopback(true);\n             bks.add(startBookie(conf));\n             bkConfs.add(conf);\n         }\n@@ -510,6 +511,7 @@ protected void startBookieServer() throws Exception {\n             int port, String zkServers, File journalDir, File[] ledgerDirs) {\n             org.apache.bookkeeper.conf.ServerConfiguration conf =\n                 new org.apache.bookkeeper.conf.ServerConfiguration();\n+            conf.setAllowLoopback(true);\n             conf.setBookiePort(port);\n             conf.setZkServers(zkServers);\n             conf.setJournalDirName(journalDir.getPath());"},{"sha":"a932ffd7b8d7eec231a8922bf6f09957d5819152","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/80c6e5526c63409e4f359905d0fd319ac7d2b129/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/80c6e5526c63409e4f359905d0fd319ac7d2b129/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=80c6e5526c63409e4f359905d0fd319ac7d2b129","patch":"@@ -252,6 +252,7 @@ private static ServerConfiguration newServerConfiguration() {\n \n     protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {\n         ServerConfiguration conf = new ServerConfiguration(baseConf);\n+        conf.setAllowLoopback(true);\n         conf.setBookiePort(port);\n         conf.setZkServers(zkServers);\n         conf.setJournalDirName(journalDir.getPath());"}]}

