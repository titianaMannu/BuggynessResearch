{"sha":"83e8672a10fab050a5bbcc1beeb9a210c1b2b90b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4M2U4NjcyYTEwZmFiMDUwYTViYmNjMWJlZWI5YTIxMGMxYjJiOTBi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-29T13:41:21Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-29T13:41:21Z"},"message":"BOOKKEEPER-194: Get correct latency for addEntry operations for JMX. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1306857 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ba9d90997ffd331f8bf38471370cfd2cc907ae6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7ba9d90997ffd331f8bf38471370cfd2cc907ae6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/83e8672a10fab050a5bbcc1beeb9a210c1b2b90b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/83e8672a10fab050a5bbcc1beeb9a210c1b2b90b","html_url":"https://github.com/apache/bookkeeper/commit/83e8672a10fab050a5bbcc1beeb9a210c1b2b90b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/83e8672a10fab050a5bbcc1beeb9a210c1b2b90b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"48304c7c07513a15d26cb61f311c9f4b998fd8fc","url":"https://api.github.com/repos/apache/bookkeeper/commits/48304c7c07513a15d26cb61f311c9f4b998fd8fc","html_url":"https://github.com/apache/bookkeeper/commit/48304c7c07513a15d26cb61f311c9f4b998fd8fc"}],"stats":{"total":41,"additions":36,"deletions":5},"files":[{"sha":"ceffb9cd6ed81830bfc4f355f07f31c2adda38e7","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/83e8672a10fab050a5bbcc1beeb9a210c1b2b90b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/83e8672a10fab050a5bbcc1beeb9a210c1b2b90b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=83e8672a10fab050a5bbcc1beeb9a210c1b2b90b","patch":"@@ -66,6 +66,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-190: Add entries would fail when number of open ledgers reaches more than openFileLimit. (sijie via ivank)\n \n+        BOOKKEEPER-194: Get correct latency for addEntry operations for JMX. (sijie via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"c5c14227174833d20b12d198756f6e5a59fd119b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":34,"deletions":5,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/83e8672a10fab050a5bbcc1beeb9a210c1b2b90b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/83e8672a10fab050a5bbcc1beeb9a210c1b2b90b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=83e8672a10fab050a5bbcc1beeb9a210c1b2b90b","patch":"@@ -352,11 +352,12 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n         case BookieProtocol.ADDENTRY:\n             statType = BKStats.STATS_ADD;\n             try {\n+                TimedCnxn tsrc = new TimedCnxn(src, startTime);\n                 // LOG.debug(\"Master key: \" + new String(masterKey));\n                 if ((flags & BookieProtocol.FLAG_RECOVERY_ADD) == BookieProtocol.FLAG_RECOVERY_ADD) {\n-                    bookie.recoveryAddEntry(packet.slice(), this, src, masterKey);\n+                    bookie.recoveryAddEntry(packet.slice(), this, tsrc, masterKey);\n                 } else {\n-                    bookie.addEntry(packet.slice(), this, src, masterKey);\n+                    bookie.addEntry(packet.slice(), this, tsrc, masterKey);\n                 }\n                 success = true;\n             } catch (IOException e) {\n@@ -421,8 +422,11 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n         }\n         if (isStatsEnabled) {\n             if (success) {\n-                long elapsedTime = System.currentTimeMillis() - startTime;\n-                bkStats.getOpStats(statType).updateLatency(elapsedTime);\n+                // for add operations, we compute latency in writeComplete callbacks.\n+                if (statType != BKStats.STATS_ADD) {\n+                    long elapsedTime = System.currentTimeMillis() - startTime;\n+                    bkStats.getOpStats(statType).updateLatency(elapsedTime);\n+                }\n             } else {\n                 bkStats.getOpStats(statType).incrementFailedOps();\n             }\n@@ -442,7 +446,9 @@ private ByteBuffer buildResponse(int errorCode, byte version, byte opCode, long\n     }\n \n     public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n-        Cnxn src = (Cnxn) ctx;\n+        TimedCnxn tcnxn = (TimedCnxn) ctx;\n+        Cnxn src = tcnxn.cnxn;\n+        long startTime = tcnxn.time;\n         ByteBuffer bb = ByteBuffer.allocate(24);\n         bb.putInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n                                    BookieProtocol.ADDENTRY, (short)0).toInt());\n@@ -454,6 +460,29 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n             LOG.trace(\"Add entry rc = \" + rc + \" for \" + entryId + \"@\" + ledgerId);\n         }\n         src.sendResponse(new ByteBuffer[] { bb });\n+        if (isStatsEnabled) {\n+            // compute the latency\n+            if (0 == rc) {\n+                // for add operations, we compute latency in writeComplete callbacks.\n+                long elapsedTime = System.currentTimeMillis() - startTime;\n+                bkStats.getOpStats(BKStats.STATS_ADD).updateLatency(elapsedTime);\n+            } else {\n+                bkStats.getOpStats(BKStats.STATS_ADD).incrementFailedOps();                \n+            }\n+        }\n+    }\n+\n+    /**\n+     * A cnxn wrapper for time\n+     */\n+    class TimedCnxn {\n+        Cnxn cnxn;\n+        long time;\n+\n+        public TimedCnxn(Cnxn cnxn, long startTime) {\n+            this.cnxn = cnxn;\n+            this.time = startTime;\n+        }\n     }\n \n }"}]}

