{"sha":"86480a21d366210eec96a7f47f2d43f1313705cc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4NjQ4MGEyMWQzNjYyMTBlZWM5NmE3ZjQ3ZjJkNDNmMTMxMzcwNWNj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:57:17Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-09-18T04:57:17Z"},"message":"BOOKKEEPER-782: Use builder pattern for Cookie (rakeshr via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1625888 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e2037712e927654eab4f912586c244f51f5764d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1e2037712e927654eab4f912586c244f51f5764d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/86480a21d366210eec96a7f47f2d43f1313705cc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/86480a21d366210eec96a7f47f2d43f1313705cc","html_url":"https://github.com/apache/bookkeeper/commit/86480a21d366210eec96a7f47f2d43f1313705cc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/86480a21d366210eec96a7f47f2d43f1313705cc/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4","url":"https://api.github.com/repos/apache/bookkeeper/commits/4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4","html_url":"https://github.com/apache/bookkeeper/commit/4a2174a91fbd6b85fed640ef58f1c98fd28ee2d4"}],"stats":{"total":249,"additions":200,"deletions":49},"files":[{"sha":"4a97baeb59741c8053abe8f3a7e41e2f6487df1f","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/86480a21d366210eec96a7f47f2d43f1313705cc/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/86480a21d366210eec96a7f47f2d43f1313705cc/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=86480a21d366210eec96a7f47f2d43f1313705cc","patch":"@@ -234,6 +234,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-784: BookKeeperCloseTest#testLedgerCheck is failing intermittently (ivank via sijie)\n \n+        BOOKKEEPER-782: Use builder pattern for Cookie (rakeshr via sijie)\n+\n       bookkeeper-benchmark:\n \n         BOOKKEEPER-768: fix typo 'seconds' to milliseconds in benchmark output (jialin via sijie)"},{"sha":"ae0ea65a86e41779ea4cba82bcd579f9f9d0dc44","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/86480a21d366210eec96a7f47f2d43f1313705cc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/86480a21d366210eec96a7f47f2d43f1313705cc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=86480a21d366210eec96a7f47f2d43f1313705cc","patch":"@@ -316,10 +316,11 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n                 missedCookieDirs.add(journalDirectory);\n             }\n             String instanceId = getInstanceId(zk);\n-            Cookie masterCookie = Cookie.generateCookie(conf);\n+            Cookie.Builder builder = Cookie.generateCookie(conf);\n             if (null != instanceId) {\n-                masterCookie.setInstanceId(instanceId);\n+                builder.setInstanceId(instanceId);\n             }\n+            Cookie masterCookie = builder.build();\n             try {\n                 Cookie zkCookie = Cookie.readFromZooKeeper(zk, conf);\n                 masterCookie.verify(zkCookie);"},{"sha":"82bd4559ef9260d368ff1ca9a3c6647d704cb779","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":189,"deletions":44,"changes":233,"blob_url":"https://github.com/apache/bookkeeper/blob/86480a21d366210eec96a7f47f2d43f1313705cc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/86480a21d366210eec96a7f47f2d43f1313705cc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=86480a21d366210eec96a7f47f2d43f1313705cc","patch":"@@ -65,14 +65,22 @@\n     private final static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n \n     static final int CURRENT_COOKIE_LAYOUT_VERSION = 4;\n-    private int layoutVersion = 0;\n-    private String bookieHost = null;\n-    private String journalDir = null;\n-    private String ledgerDirs = null;\n-    private int znodeVersion = -1;\n-    private String instanceId = null;\n-\n-    private Cookie() {\n+    private static final int DEFAULT_COOKIE_ZNODE_VERSION = Integer.MIN_VALUE;\n+    private final int layoutVersion;\n+    private final String bookieHost;\n+    private final String journalDir;\n+    private final String ledgerDirs;\n+    private int znodeVersion = DEFAULT_COOKIE_ZNODE_VERSION;\n+    private final String instanceId;\n+\n+    private Cookie(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs, int znodeVersion,\n+            String instanceId) {\n+        this.layoutVersion = layoutVersion;\n+        this.bookieHost = bookieHost;\n+        this.journalDir = journalDir;\n+        this.ledgerDirs = ledgerDirs;\n+        this.znodeVersion = znodeVersion;\n+        this.instanceId = instanceId;\n     }\n \n     public void verify(Cookie c) throws BookieException.InvalidCookieException {\n@@ -121,35 +129,37 @@ private String toStringVersion3() {\n         return b.toString();\n     }\n \n-    private static Cookie parse(BufferedReader reader) throws IOException {\n-        Cookie c = new Cookie();\n+    private static Builder parse(BufferedReader reader) throws IOException {\n+        Builder cBuilder = Cookie.newBuilder();\n+        int layoutVersion = 0;\n         String line = reader.readLine();\n         if (null == line) {\n             throw new EOFException(\"Exception in parsing cookie\");\n         }\n         try {\n-            c.layoutVersion = Integer.parseInt(line.trim());\n+            layoutVersion = Integer.parseInt(line.trim());\n+            cBuilder.setLayoutVersion(layoutVersion);\n         } catch (NumberFormatException e) {\n             throw new IOException(\"Invalid string '\" + line.trim()\n                     + \"', cannot parse cookie.\");\n         }\n-        if (c.layoutVersion == 3) {\n-            c.bookieHost = reader.readLine();\n-            c.journalDir = reader.readLine();\n-            c.ledgerDirs = reader.readLine();\n-        } else if (c.layoutVersion >= 4) {\n-            CookieFormat.Builder builder = CookieFormat.newBuilder();\n-            TextFormat.merge(reader, builder);\n-            CookieFormat data = builder.build();\n-            c.bookieHost = data.getBookieHost();\n-            c.journalDir = data.getJournalDir();\n-            c.ledgerDirs = data.getLedgerDirs();\n+        if (layoutVersion == 3) {\n+            cBuilder.setBookieHost(reader.readLine());\n+            cBuilder.setJournalDir(reader.readLine());\n+            cBuilder.setLedgerDirs(reader.readLine());\n+        } else if (layoutVersion >= 4) {\n+            CookieFormat.Builder cfBuilder = CookieFormat.newBuilder();\n+            TextFormat.merge(reader, cfBuilder);\n+            CookieFormat data = cfBuilder.build();\n+            cBuilder.setBookieHost(data.getBookieHost());\n+            cBuilder.setJournalDir(data.getJournalDir());\n+            cBuilder.setLedgerDirs(data.getLedgerDirs());\n             // Since InstanceId is optional\n             if (null != data.getInstanceId() && !data.getInstanceId().isEmpty()) {\n-                c.instanceId = data.getInstanceId();\n+                cBuilder.setInstanceId(data.getInstanceId());\n             }\n         }\n-        return c;\n+        return cBuilder;\n     }\n \n     void writeToDirectory(File directory) throws IOException {\n@@ -169,13 +179,25 @@ void writeToDirectory(File directory) throws IOException {\n         }\n     }\n \n+    /**\n+     * Writes cookie details to ZooKeeper\n+     *\n+     * @param zk\n+     *            ZooKeeper instance\n+     * @param conf\n+     *            configuration\n+     *\n+     * @throws KeeperException\n+     * @throws InterruptedException\n+     * @throws UnknownHostException\n+     */\n     void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n             throws KeeperException, InterruptedException, UnknownHostException {\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n                 + BookKeeperConstants.COOKIE_NODE;\n         String zkPath = getZkPath(conf);\n         byte[] data = toString().getBytes(UTF_8);\n-        if (znodeVersion != -1) {\n+        if (znodeVersion != DEFAULT_COOKIE_ZNODE_VERSION) {\n             zk.setData(zkPath, data, znodeVersion);\n         } else {\n             if (zk.exists(bookieCookiePath, false) == null) {\n@@ -194,31 +216,68 @@ void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n         }\n     }\n \n-    void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n-            throws KeeperException, InterruptedException, UnknownHostException {\n+    /**\n+     * Deletes cookie from ZooKeeper and sets znode version to DEFAULT_COOKIE_ZNODE_VERSION\n+     *\n+     * @param zk\n+     *            ZooKeeper instance\n+     * @param conf\n+     *            configuration\n+     *\n+     * @throws KeeperException\n+     * @throws InterruptedException\n+     * @throws UnknownHostException\n+     */\n+    void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf) throws KeeperException, InterruptedException,\n+            UnknownHostException {\n         String zkPath = getZkPath(conf);\n-        if (znodeVersion != -1) {\n+        if (znodeVersion != DEFAULT_COOKIE_ZNODE_VERSION) {\n             zk.delete(zkPath, znodeVersion);\n         }\n-        znodeVersion = -1;\n+        znodeVersion = DEFAULT_COOKIE_ZNODE_VERSION;\n     }\n \n-    static Cookie generateCookie(ServerConfiguration conf)\n+    /**\n+     * Generate cookie from the given configuration\n+     *\n+     * @param conf\n+     *            configuration\n+     *\n+     * @return cookie builder object\n+     *\n+     * @throws UnknownHostException\n+     */\n+    static Builder generateCookie(ServerConfiguration conf)\n             throws UnknownHostException {\n-        Cookie c = new Cookie();\n-        c.layoutVersion = CURRENT_COOKIE_LAYOUT_VERSION;\n-        c.bookieHost = Bookie.getBookieAddress(conf).toString();\n-        c.journalDir = conf.getJournalDirName();\n         StringBuilder b = new StringBuilder();\n         String[] dirs = conf.getLedgerDirNames();\n         b.append(dirs.length);\n         for (String d : dirs) {\n             b.append(\"\\t\").append(d);\n         }\n-        c.ledgerDirs = b.toString();\n-        return c;\n+        Builder builder = Cookie.newBuilder();\n+        builder.setLayoutVersion(CURRENT_COOKIE_LAYOUT_VERSION);\n+        builder.setBookieHost(Bookie.getBookieAddress(conf).toString());\n+        builder.setJournalDir(conf.getJournalDirName());\n+        builder.setLedgerDirs(b.toString());\n+        return builder;\n     }\n \n+    /**\n+     * Read cookie from ZooKeeper.\n+     *\n+     * @param zk\n+     *            ZooKeeper instance\n+     * @param conf\n+     *            configuration\n+     *\n+     * @return cookie object\n+     *\n+     * @throws KeeperException\n+     * @throws InterruptedException\n+     * @throws IOException\n+     * @throws UnknownHostException\n+     */\n     static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n             throws KeeperException, InterruptedException, IOException, UnknownHostException {\n         String zkPath = getZkPath(conf);\n@@ -227,30 +286,36 @@ static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n         byte[] data = zk.getData(zkPath, false, stat);\n         BufferedReader reader = new BufferedReader(new StringReader(new String(data, UTF_8)));\n         try {\n-            Cookie c = parse(reader);\n-            c.znodeVersion = stat.getVersion();\n-            return c;\n+            Builder builder = parse(reader);\n+            builder.setZnodeVersion(stat.getVersion()); // sets stat version from ZooKeeper\n+            return builder.build();\n         } finally {\n             reader.close();\n         }\n     }\n \n+    /**\n+     * Returns cookie from the given directory\n+     *\n+     * @param directory\n+     *            directory\n+     *\n+     * @return cookie object\n+     *\n+     * @throws IOException\n+     */\n     static Cookie readFromDirectory(File directory) throws IOException {\n         File versionFile = new File(directory,\n                 BookKeeperConstants.VERSION_FILENAME);\n         BufferedReader reader = new BufferedReader(\n                 new InputStreamReader(new FileInputStream(versionFile), UTF_8));\n         try {\n-            return parse(reader);\n+            return parse(reader).build();\n         } finally {\n             reader.close();\n         }\n     }\n \n-    public void setInstanceId(String instanceId) {\n-        this.instanceId = instanceId;\n-    }\n-\n     private static String getZkPath(ServerConfiguration conf)\n             throws UnknownHostException {\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n@@ -282,4 +347,84 @@ public boolean isBookieHostCreatedFromIp() throws IOException {\n         InetSocketAddress addr = new InetSocketAddress(parts[0], port);\n         return addr.toString().startsWith(\"/\");\n     }\n+\n+    /**\n+     * Cookie builder\n+     */\n+    public static class Builder {\n+        private int layoutVersion = 0;\n+        private String bookieHost = null;\n+        private String journalDir = null;\n+        private String ledgerDirs = null;\n+        private int znodeVersion = DEFAULT_COOKIE_ZNODE_VERSION;\n+        private String instanceId = null;\n+\n+        private Builder() {\n+        }\n+\n+        private Builder(int layoutVersion, String bookieHost, String journalDir, String ledgerDirs,\n+                int znodeVersion, String instanceId) {\n+            this.layoutVersion = layoutVersion;\n+            this.bookieHost = bookieHost;\n+            this.journalDir = journalDir;\n+            this.ledgerDirs = ledgerDirs;\n+            this.znodeVersion = znodeVersion;\n+            this.instanceId = instanceId;\n+        }\n+\n+        public Builder setLayoutVersion(int layoutVersion) {\n+            this.layoutVersion = layoutVersion;\n+            return this;\n+        }\n+\n+        public Builder setBookieHost(String bookieHost) {\n+            this.bookieHost = bookieHost;\n+            return this;\n+        }\n+\n+        public Builder setJournalDir(String journalDir) {\n+            this.journalDir = journalDir;\n+            return this;\n+        }\n+\n+        public Builder setLedgerDirs(String ledgerDirs) {\n+            this.ledgerDirs = ledgerDirs;\n+            return this;\n+        }\n+\n+        public Builder setZnodeVersion(int znodeVersion) {\n+            this.znodeVersion = znodeVersion;\n+            return this;\n+        }\n+\n+        public Builder setInstanceId(String instanceId) {\n+            this.instanceId = instanceId;\n+            return this;\n+        }\n+\n+        public Cookie build() {\n+            return new Cookie(layoutVersion, bookieHost, journalDir, ledgerDirs, znodeVersion, instanceId);\n+        }\n+    }\n+\n+    /**\n+     * Returns Cookie builder\n+     * \n+     * @return cookie builder\n+     */\n+    static Builder newBuilder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Returns Cookie builder with the copy of given oldCookie\n+     *\n+     * @param oldCookie\n+     *            build new cookie from this cookie\n+     * @return cookie builder\n+     */\n+    static Builder newBuilder(Cookie oldCookie) {\n+        return new Builder(oldCookie.layoutVersion, oldCookie.bookieHost, oldCookie.journalDir, oldCookie.ledgerDirs,\n+                oldCookie.znodeVersion, oldCookie.instanceId);\n+    }\n }"},{"sha":"7e893741a4856a2b589d5547cdf503554506f0cd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/86480a21d366210eec96a7f47f2d43f1313705cc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/86480a21d366210eec96a7f47f2d43f1313705cc/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=86480a21d366210eec96a7f47f2d43f1313705cc","patch":"@@ -191,7 +191,8 @@ public static void upgrade(ServerConfiguration conf)\n         ZooKeeper zk = newZookeeper(conf);\n         try {\n             Map<File,File> deferredMoves = new HashMap<File, File>();\n-            Cookie c = Cookie.generateCookie(conf);\n+            Cookie.Builder cookieBuilder = Cookie.generateCookie(conf);\n+            Cookie c = cookieBuilder.build();\n             for (File d : getAllDirectories(conf)) {\n                 LOG.info(\"Upgrading {}\", d);\n                 int version = detectPreviousVersion(d);"},{"sha":"31a56409fc47412e34b0f45253a77146496339f5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/86480a21d366210eec96a7f47f2d43f1313705cc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/86480a21d366210eec96a7f47f2d43f1313705cc/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=86480a21d366210eec96a7f47f2d43f1313705cc","patch":"@@ -102,7 +102,8 @@ public void testBadJournalCookie() throws Exception {\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() })\n             .setBookiePort(bookiePort);\n-        Cookie c = Cookie.generateCookie(conf1);\n+        Cookie.Builder cookieBuilder = Cookie.generateCookie(conf1);\n+        Cookie c = cookieBuilder.build();\n         c.writeToZooKeeper(zkc, conf1);\n \n         String journalDir = newDirectory();\n@@ -112,7 +113,8 @@ public void testBadJournalCookie() throws Exception {\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n             .setBookiePort(bookiePort);\n-        Cookie c2 = Cookie.generateCookie(conf2);\n+        Cookie.Builder cookieBuilder2 = Cookie.generateCookie(conf2);\n+        Cookie c2 = cookieBuilder2.build();\n         c2.writeToDirectory(new File(journalDir, \"current\"));\n         c2.writeToDirectory(new File(ledgerDir, \"current\"));\n "}]}

