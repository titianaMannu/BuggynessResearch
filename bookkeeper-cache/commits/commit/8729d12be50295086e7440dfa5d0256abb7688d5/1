{"sha":"8729d12be50295086e7440dfa5d0256abb7688d5","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4NzI5ZDEyYmU1MDI5NTA4NmU3NDQwZGZhNWQwMjU2YWJiNzY4OGQ1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-02-09T07:12:03Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-02-09T07:12:03Z"},"message":"BOOKKEEPER-883: Test timeout in bookkeeper-benchmark\n\nProblem:\n\nThe BenchReadThroughputLatency is tight with FlatLedgerManager. so lots of assumptions are made based on how the znodes are changed when ledgers are created. There was a change introduced LedgerIdGenerator, which broke the assumptions that made by BenchReadThroughputLatency.\n\nFix:\n\n- Use a hashset to cache processed ledgers on reacting on children changes\n- Remove unpredictable test on next ledger\n- Fix an error logging on FlatLedgerManager processing ledgers\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Matteo Merli <mmerli@apache.org>\n\nCloses #10 from sijie/BOOKKEEPER-883","tree":{"sha":"881d2f575817c9d5869d1b8df3e2a3b11f1afe85","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/881d2f575817c9d5869d1b8df3e2a3b11f1afe85"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8729d12be50295086e7440dfa5d0256abb7688d5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8729d12be50295086e7440dfa5d0256abb7688d5","html_url":"https://github.com/apache/bookkeeper/commit/8729d12be50295086e7440dfa5d0256abb7688d5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8729d12be50295086e7440dfa5d0256abb7688d5/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"92722ee9c34b069e23d1a87d7fc78256b8540268","url":"https://api.github.com/repos/apache/bookkeeper/commits/92722ee9c34b069e23d1a87d7fc78256b8540268","html_url":"https://github.com/apache/bookkeeper/commit/92722ee9c34b069e23d1a87d7fc78256b8540268"}],"stats":{"total":131,"additions":45,"deletions":86},"files":[{"sha":"1cdd5640b45625138e89b3d829e97c3fa99d023c","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","status":"modified","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/apache/bookkeeper/blob/8729d12be50295086e7440dfa5d0256abb7688d5/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/8729d12be50295086e7440dfa5d0256abb7688d5/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java?ref=8729d12be50295086e7440dfa5d0256abb7688d5","patch":"@@ -19,42 +19,34 @@\n  */\n package org.apache.bookkeeper.benchmark;\n \n-import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.LedgerEntry;\n-import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.CommandLineParser;\n+import org.apache.commons.cli.PosixParser;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher.Event;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.util.Enumeration;\n-import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.ArrayList;\n+import java.util.Set;\n import java.util.regex.Pattern;\n import java.util.regex.Matcher;\n-\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.commons.cli.HelpFormatter;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.Options;\n-import org.apache.commons.cli.CommandLine;\n-import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.PosixParser;\n-import org.apache.commons.cli.ParseException;\n-\n import static com.google.common.base.Charsets.UTF_8;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n public class BenchReadThroughputLatency {\n     static final Logger LOG = LoggerFactory.getLogger(BenchReadThroughputLatency.class);\n \n@@ -90,7 +82,7 @@ private static void readLedger(ClientConfiguration conf, long ledgerId, byte[] p\n         try {\n             bk = new BookKeeper(conf);\n             while (true) {\n-                lh = bk.openLedgerNoRecovery(ledgerId, BookKeeper.DigestType.CRC32, \n+                lh = bk.openLedgerNoRecovery(ledgerId, BookKeeper.DigestType.CRC32,\n                                              passwd);\n                 long lastConfirmed = Math.min(lh.getLastAddConfirmed(), absoluteLimit);\n                 if (lastConfirmed == lastRead) {\n@@ -154,7 +146,7 @@ private static void usage(Options options) {\n     @SuppressWarnings(\"deprecation\")\n     public static void main(String[] args) throws Exception {\n         Options options = new Options();\n-        options.addOption(\"ledger\", true, \"Ledger to read. If empty, read all ledgers which come available. \" \n+        options.addOption(\"ledger\", true, \"Ledger to read. If empty, read all ledgers which come available. \"\n                           + \" Cannot be used with -listen\");\n         options.addOption(\"listen\", true, \"Listen for creation of <arg> ledgers, and read each one fully\");\n         options.addOption(\"password\", true, \"Password used to access ledgers (default 'benchPasswd')\");\n@@ -207,11 +199,12 @@ public void process(WatchedEvent event) {\n                     }\n                 }\n             });\n+        final Set<String> processedLedgers = new HashSet<String>();\n         try {\n             zk.register(new Watcher() {\n                     public void process(WatchedEvent event) {\n                         try {\n-                            if (event.getState() == Event.KeeperState.SyncConnected \n+                            if (event.getState() == Event.KeeperState.SyncConnected\n                                 && event.getType() == Event.EventType.None) {\n                                 connectedLatch.countDown();\n                             } else if (event.getType() == Event.EventType.NodeCreated\n@@ -229,22 +222,29 @@ public void process(WatchedEvent event) {\n                                         ledgers.add(child);\n                                     }\n                                 }\n-                                Collections.sort(ledgers, ZK_LEDGER_COMPARE);\n-                                String last = ledgers.get(ledgers.size() - 1);\n-                                final Matcher m = LEDGER_PATTERN.matcher(last);\n-                                if (m.find()) {\n-                                    int ledgersLeft = numLedgers.decrementAndGet();\n-                                    Thread t = new Thread() {\n-                                            public void run() {\n-                                                readLedger(conf, Long.valueOf(m.group(1)), passwd);\n+                                for (String ledger : ledgers) {\n+                                    synchronized (processedLedgers) {\n+                                        if (processedLedgers.contains(ledger)) {\n+                                            continue;\n+                                        }\n+                                        final Matcher m = LEDGER_PATTERN.matcher(ledger);\n+                                        if (m.find()) {\n+                                            int ledgersLeft = numLedgers.decrementAndGet();\n+                                            final Long ledgerId = Long.valueOf(m.group(1));\n+                                            processedLedgers.add(ledger);\n+                                            Thread t = new Thread() {\n+                                                public void run() {\n+                                                    readLedger(conf, ledgerId, passwd);\n+                                                }\n+                                            };\n+                                            t.start();\n+                                            if (ledgersLeft <= 0) {\n+                                                shutdownLatch.countDown();\n                                             }\n-                                        };\n-                                    t.start();\n-                                    if (ledgersLeft <= 0) {\n-                                        shutdownLatch.countDown();\n+                                        } else {\n+                                            LOG.error(\"Cant file ledger id in {}\", ledger);\n+                                        }\n                                     }\n-                                } else {\n-                                    LOG.error(\"Cant file ledger id in {}\", last);\n                                 }\n                             } else {\n                                 LOG.warn(\"Unknown event {}\", event);"},{"sha":"f5108ec715b2bfe48ec094883239d5428e3f8b3b","filename":"bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","status":"modified","additions":3,"deletions":51,"changes":54,"blob_url":"https://github.com/apache/bookkeeper/blob/8729d12be50295086e7440dfa5d0256abb7688d5/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/8729d12be50295086e7440dfa5d0256abb7688d5/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java?ref=8729d12be50295086e7440dfa5d0256abb7688d5","patch":"@@ -19,29 +19,16 @@\n  */\n package org.apache.bookkeeper.benchmark;\n \n-import org.junit.BeforeClass;\n-import org.junit.AfterClass;\n-import org.junit.Test;\n-import org.junit.Assert;\n-\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.apache.bookkeeper.util.LocalBookKeeper;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.Watcher.Event.EventType;\n-import org.apache.zookeeper.Watcher.Event.KeeperState;\n-import org.apache.zookeeper.ZooKeeper;\n+import org.junit.Test;\n+import org.junit.Assert;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.util.Arrays;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n public class TestBenchmark extends BookKeeperClusterTestCase {\n@@ -114,48 +101,13 @@ public void run() {\n             if (!t.isAlive()) {\n                 break;\n             }\n-            Thread.sleep(1000); // wait for 10 seconds for reading to finish\n+            Thread.sleep(100);\n         }\n \n         Assert.assertFalse(\"Thread should be finished\", t.isAlive());\n \n         BenchReadThroughputLatency.main(new String[] {\n                 \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                 \"--ledger\", String.valueOf(lastLedgerId)});\n-\n-        final long nextLedgerId = lastLedgerId+1;\n-        t = new Thread() {\n-                public void run() {\n-                    try {\n-                        BenchReadThroughputLatency.main(new String[] {\n-                                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n-                                \"--ledger\", String.valueOf(nextLedgerId)});\n-                    } catch (Throwable t) {\n-                        LOG.error(\"Error reading\", t);\n-                        threwException.set(true);\n-                    }\n-                }\n-            };\n-        t.start();\n-\n-        Assert.assertTrue(\"Thread should be running\", t.isAlive());\n-        BookKeeper bk = new BookKeeper(zkUtil.getZooKeeperConnectString());\n-        LedgerHandle lh = bk.createLedger(BookKeeper.DigestType.CRC32, \"benchPasswd\".getBytes());\n-        try {\n-            for (int j = 0; j < 100; j++) {\n-                lh.addEntry(data);\n-            }\n-        } finally {\n-            lh.close();\n-            bk.close();\n-        }\n-        for (int i = 0; i < 60; i++) {\n-            if (!t.isAlive()) {\n-                break;\n-            }\n-            Thread.sleep(1000); // wait for 10 seconds for reading to finish\n-        }\n-        Assert.assertFalse(\"Thread should be finished\", t.isAlive());\n-        Assert.assertFalse(\"A thread has thrown an exception, check logs\", threwException.get());\n     }\n }"},{"sha":"3172247e60bc8a8a3f64b23037ed58d54c018459","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/8729d12be50295086e7440dfa5d0256abb7688d5/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/8729d12be50295086e7440dfa5d0256abb7688d5/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=8729d12be50295086e7440dfa5d0256abb7688d5","patch":"@@ -87,6 +87,11 @@ public void asyncProcessLedgers(final Processor<Long> processor,\n         asyncProcessLedgersInSingleNode(ledgerRootPath, processor, finalCb, ctx, successRc, failureRc);\n     }\n \n+    @Override\n+    protected boolean isSpecialZnode(String znode) {\n+        return znode.startsWith(ZkLedgerIdGenerator.LEDGER_ID_GEN_PREFIX) || super.isSpecialZnode(znode);\n+    }\n+\n     @Override\n     public LedgerRangeIterator getLedgerRanges() {\n         return new LedgerRangeIterator() {"},{"sha":"b54c8918150efe015680352788af302ef2ac863d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/8729d12be50295086e7440dfa5d0256abb7688d5/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","raw_url":"https://github.com/apache/bookkeeper/raw/8729d12be50295086e7440dfa5d0256abb7688d5/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerIdGenerator.java?ref=8729d12be50295086e7440dfa5d0256abb7688d5","patch":"@@ -42,6 +42,8 @@\n public class ZkLedgerIdGenerator implements LedgerIdGenerator {\n     static final Logger LOG = LoggerFactory.getLogger(ZkLedgerIdGenerator.class);\n \n+    static final String LEDGER_ID_GEN_PREFIX = \"ID-\";\n+\n     final ZooKeeper zk;\n     final String ledgerIdGenPath;\n     final String ledgerPrefix;\n@@ -55,7 +57,7 @@ public ZkLedgerIdGenerator(ZooKeeper zk,\n         } else {\n             this.ledgerIdGenPath = ledgersPath + \"/\" + idGenZnodeName;\n         }\n-        this.ledgerPrefix = this.ledgerIdGenPath + \"/ID-\";\n+        this.ledgerPrefix = this.ledgerIdGenPath + \"/\" + LEDGER_ID_GEN_PREFIX;\n     }\n \n     @Override"}]}

