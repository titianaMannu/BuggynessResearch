{"sha":"8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4YTNiNGFjOWE3MGVjYTVlNTVmN2M1MTYzYzljNjJkNjc3YzA2YWE3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-27T09:50:56Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-27T09:50:56Z"},"message":"BOOKKEEPER-471: Add scripts for preCommit testing (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1414044 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fed261039baf5240034d1879a86b6693d7e8d8c0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fed261039baf5240034d1879a86b6693d7e8d8c0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","html_url":"https://github.com/apache/bookkeeper/commit/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e2d624f8b09beca1f3a5c9224aad1aa254642f28","url":"https://api.github.com/repos/apache/bookkeeper/commits/e2d624f8b09beca1f3a5c9224aad1aa254642f28","html_url":"https://github.com/apache/bookkeeper/commit/e2d624f8b09beca1f3a5c9224aad1aa254642f28"}],"stats":{"total":1572,"additions":1572,"deletions":0},"files":[{"sha":"29f25457bc3a415134aea803c5bbad73dd4ca6a7","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -152,6 +152,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-467: Allocate ports for testing dynamically (ivank)\n \n+      BOOKKEEPER-471: Add scripts for preCommit testing (ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-328: Bookie DeathWatcher is missing thread name (Rakesh via sijie)"},{"sha":"1515495912bf8ed4769de164e3769e14cc69adb2","filename":"bin/find-new-patch-available-jiras","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/find-new-patch-available-jiras","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/find-new-patch-available-jiras","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/find-new-patch-available-jiras?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,129 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TEMPDIR=${BASEDIR}/tmp\n+\n+JIRAAVAILPATCHQUERY=\"https://issues.apache.org/jira/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?jqlQuery=project+in+%28BOOKKEEPER%29+AND+status+%3D+%22Patch+Available%22+ORDER+BY+updated+DESC&tempMax=1000\"\n+TESTPATCHJOBURL=\"https://builds.apache.org/job/bookkeeper-trunk-precommit-build\"\n+TOKEN=\"\"\n+SUBMIT=\"false\"\n+DELETEHISTORYFILE=\"false\"\n+\n+RUNTESTSFILE=${BASEDIR}/TESTED_PATCHES.txt\n+\n+printUsage() {\n+    echo \"Usage: $0 <OPTIONS>\"\n+    echo \"          --submit --token=<BOOKKEEPER PRECOMMIT JOB TOKEN>\"\n+    echo \"          [--delete-history-file]\"\n+    echo \"          [--script-debug]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --submit)\n+            SUBMIT=\"true\"\n+            ;;\n+        --token=*)\n+            TOKEN=${i#*=}\n+            ;;\n+        --script-debug)\n+            DEBUG=\"-x\"\n+            ;;\n+        --delete-history-file)\n+            DELETEHISTORYFILE=\"true\"\n+            ;;\n+        *)\n+            echo \"Invalid option\"\n+            echo\n+            printUsage\n+            exit 1\n+            ;;\n+        esac\n+    done\n+    if [[ \"$SUBMIT\" == \"true\" && \"${TOKEN}\" == \"\" ]] ; then\n+        echo \"Token has not been specified\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+}\n+\n+###############################################################################\n+findAndSubmitAvailablePatches() {\n+    ## Grab all the key (issue numbers) and largest attachment id for each item in the XML\n+    curl --fail --location --retry 3 \"${JIRAAVAILPATCHQUERY}\" > ${TEMPDIR}/patch-availables.xml\n+    if [ \"$?\" != \"0\" ] ; then\n+        echo \"Could not retrieve available patches from JIRA\"\n+        exit 1\n+    fi\n+    xpath -e \"//item/key/text() | //item/attachments/attachment[not(../attachment/@id > @id)]/@id\" \\\n+        ${TEMPDIR}/patch-availables.xml > ${TEMPDIR}/patch-attachments.element\n+\n+    ### Replace newlines with nothing, then replace id=\" with =, then replace \" with newline\n+    ### to yield lines with pairs (issueNumber,largestAttachmentId). Example: BOOKKEEPER-123,456984\n+    cat ${TEMPDIR}/patch-attachments.element \\\n+        | awk '{ if ( $1 ~ /^BOOKKEEPER\\-/) {JIRA=$1 }; if ($1 ~ /id=/) { print JIRA\",\"$1} }' \\\n+        | sed 's/id\\=\"//' | sed 's/\"//' > ${TEMPDIR}/patch-availables.pair\n+\n+    ### Iterate through issue list and find the (issueNumber,largestAttachmentId) pairs that have\n+    ### not been tested (ie don't already exist in the patch_tested.txt file\n+    touch ${RUNTESTSFILE}\n+    cat ${TEMPDIR}/patch-availables.pair | while read PAIR ; do\n+        set +e\n+        COUNT=`grep -c \"$PAIR\" ${RUNTESTSFILE}`\n+        set -e\n+        if [ \"$COUNT\" -lt \"1\" ] ; then\n+        ### Parse $PAIR into project, issue number, and attachment id\n+            ISSUE=`echo $PAIR | sed -e \"s/,.*$//\"`\n+            echo \"Found new patch for issue $ISSUE\"\n+            if [ \"$SUBMIT\" == \"true\" ]; then\n+            ### Kick off job\n+                echo \"Submitting job for issue $ISSUE\"\n+                curl --fail --location --retry 3 \\\n+                    \"${TESTPATCHJOBURL}/buildWithParameters?token=${TOKEN}&JIRA_NUMBER=${ISSUE}\" > /dev/null\n+                if [ \"$?\" != \"0\" ] ; then\n+                    echo \"Could not submit precommit job for $ISSUE\"\n+                    exit 1\n+                fi\n+            fi\n+            ### Mark this pair as tested by appending to file\n+            echo \"$PAIR\" >> ${RUNTESTSFILE}\n+        fi\n+    done\n+}\n+###############################################################################\n+\n+mkdir -p ${TEMPDIR} 2>&1 $STDOUT\n+\n+parseArgs \"$@\"\n+\n+if [ -n \"${DEBUG}\" ] ; then\n+    set -x\n+fi\n+\n+if [ \"${DELETEHISTORYFILE}\" == \"true\" ] ; then\n+    rm ${RUNTESTSFILE}\n+fi\n+\n+findAndSubmitAvailablePatches\n+\n+exit 0"},{"sha":"065810b27612df33a199fc79a4ea3892eb329068","filename":"bin/test-patch","status":"added","additions":415,"deletions":0,"changes":415,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,415 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TESTPATCHDIRNAME=test-patch\n+TESTPATCHDIR=${BASEDIR}/${TESTPATCHDIRNAME}\n+TOOLSDIR=${TESTPATCHDIR}/tools\n+TEMPDIR=${TESTPATCHDIR}/tmp\n+REPORTDIR=${TESTPATCHDIR}/reports\n+SUMMARYFILE=${REPORTDIR}/TEST-SUMMARY.jira\n+SUMMARYFILETXT=${REPORTDIR}/TEST-SUMMARY.txt\n+\n+JIRAHOST=\"https://issues.apache.org\"\n+JIRAURL=\"${JIRAHOST}/jira\"\n+JIRAURLISSUEPREFIX=\"${JIRAURL}/browse/\"\n+\n+JIRAUPDATE=\"false\"\n+JIRAUSER=\"\"\n+JIRAPASSWORD=\"\"\n+\n+\n+VERBOSEOPTION=\"\"\n+JIRAISSUE=\"\"\n+PATCHFILE=\"\"\n+TASKSTORUN=\"\"\n+TASKSTOSKIP=\"\"\n+RESETSCM=\"false\"\n+DIRTYSCM=\"false\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+gitOrSvn() {\n+    SCM=\"NONE\"\n+    which git &> /dev/null\n+    if [[ $? == 0 ]] ; then\n+        git status &> /dev/null\n+        if [[ $? == 0 ]] ; then\n+            SCM=\"git\"\n+        fi\n+    fi\n+    if [ \"${SCM}\" == \"NONE\" ] ; then\n+        which svn &> /dev/null\n+        if [[ $? == 0 ]] ; then\n+            svnOutput=`svn status 2>&1`\n+            if [[  \"$svnOutput\" != *\"is not a working copy\" ]] ; then\n+                SCM=\"svn\"\n+            fi\n+        fi\n+    fi\n+    if [ \"${SCM}\" == \"NONE\" ] ; then\n+        echo \"The current workspace is not under Source Control (GIT or SVN)\"\n+        exit 1\n+    fi\n+}\n+###############################################################################\n+prepareSCM() {\n+    gitOrSvn\n+    if [ \"${DIRTYSCM}\" != \"true\" ] ; then\n+        if [ \"${RESETSCM}\" == \"true\" ] ; then\n+            if [ \"${SCM}\" == \"git\" ] ; then\n+                git reset --hard HEAD > /dev/null\n+                git clean -f -d -e $TESTPATCHDIRNAME > /dev/null\n+            fi\n+            if [ \"${SCM}\" == \"svn\" ] ; then\n+                svn revert -R . > /dev/null\n+                svn status | grep \"\\?\" | awk '{print $2}' | xargs rm -rf\n+            fi\n+        else\n+            echo \"It should not happen DIRTYSCM=false & RESETSCM=false\"\n+            exit 1\n+        fi\n+        echo \"Cleaning local ${SCM} workspace\" >> ${SUMMARYFILE}\n+    else\n+        echo \"WARNING: Running test-patch on a dirty local ${SCM} workspace\" >> ${SUMMARYFILE}\n+    fi\n+}\n+###############################################################################\n+prepareTestPatchDirs() {\n+    mkdir -p ${TESTPATCHDIR} 2> /dev/null\n+    rm -rf ${REPORTDIR} 2> /dev/null\n+    rm -rf ${TEMPDIR} 2> /dev/null\n+    mkdir -p ${TOOLSDIR} 2> /dev/null\n+    mkdir -p ${TEMPDIR} 2> /dev/null\n+    mkdir -p ${REPORTDIR} 2> /dev/null\n+    if [ ! -e \"${TESTPATCHDIR}\" ] ; then\n+        echo \"Could not create test-patch/ dir\"\n+        exit 1\n+    fi\n+}\n+###############################################################################\n+updateJira() {\n+    if [[ \"${JIRAUPDATE}\" != \"\" && \"${JIRAISSUE}\" != \"\" ]] ; then\n+        if [[ \"$JIRAPASSWORD\" != \"\" ]] ; then\n+            JIRACLI=${TOOLSDIR}/jira-cli/jira.sh\n+            if [ ! -e \"${JIRACLI}\" ] ; then\n+                curl https://bobswift.atlassian.net/wiki/download/attachments/16285777/jira-cli-2.6.0-distribution.zip > ${TEMPDIR}/jira-cli.zip\n+                if [ $? != 0 ] ; then\n+                    echo\n+                    echo \"Could not download jira-cli tool, thus no JIRA updating\"\n+                    echo\n+                    exit 1\n+                fi\n+                mkdir ${TEMPDIR}/jira-cli-tmp\n+                (cd ${TEMPDIR}/jira-cli-tmp;jar xf ${TEMPDIR}/jira-cli.zip; mv jira-cli-2.6.0 ${TOOLSDIR}/jira-cli)\n+                chmod u+x ${JIRACLI}\n+            fi\n+            echo \"Adding comment to JIRA\"\n+            comment=`cat ${SUMMARYFILE}`\n+            $JIRACLI -s $JIRAURL -a addcomment -u $JIRAUSER -p \"$JIRAPASSWORD\" --comment \"$comment\" --issue $JIRAISSUE\n+            echo\n+        else\n+            echo \"Skipping JIRA update\"\n+            echo\n+        fi\n+    fi\n+}\n+###############################################################################\n+cleanupAndExit() {\n+    updateJira\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 <OPTIONS>\"\n+    echo \"          (--jira=<JIRA ISSUE> | --patch=<PATCH PATH>)\"\n+    echo \"          (--reset-scm | --dirty-scm)\"\n+    echo \"          [--tasks=<TASK,...>]\"\n+    echo \"          [--skip-tasks=<TASK,...>]\"\n+    echo \"          [--jira-cli=<JIRA CLIENT>]\"\n+    echo \"          [--jira-user=<JIRA USER>]\"\n+    echo \"          [--jira-password=<JIRA PASSWORD>]\"\n+    echo \"          [-D<MVN PROPERTY>...]\"\n+    echo \"          [-P<MVN PROFILE>...]\"\n+    echo \"          [--list-tasks]\"\n+    echo \"          [--verbose]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --jira=*)\n+            JIRAISSUE=${i#*=}\n+            ;;\n+        --patch=*)\n+            PATCHFILE=${i#*=}\n+            ;;\n+        --tasks=*)\n+            TASKSTORUN=${i#*=}\n+            ;;\n+        --skip-tasks=*)\n+            TASKSTOSKIP=${i#*=}\n+            ;;\n+        --list-tasks)\n+            listTasks\n+            cleanupAndExit 0\n+            ;;\n+        --jira-cli=*)\n+            JIRACLI=${i#*=}\n+            ;;\n+        --jira-user=*)\n+            JIRAUSER=${i#*=}\n+            ;;\n+        --jira-password=*)\n+            JIRAPASSWORD=${i#*=}\n+            JIRAUPDATE=\"true\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        --reset-scm)\n+            RESETSCM=\"true\"\n+            ;;\n+        --dirty-scm)\n+            DIRTYSCM=\"true\"\n+            ;;\n+        --verbose)\n+            VERBOSEOPTION=\"--verbose\"\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        *)\n+            echo \"Invalid option\"\n+            echo\n+            printUsage\n+            exit 1\n+            ;;\n+        esac\n+    done\n+\n+    if [[ \"${JIRAISSUE}\" == \"\" && \"${PATCHFILE}\" == \"\" ]] ; then\n+        echo \"Either --jira or --patch option must be specified\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+    if [[ \"${JIRAISSUE}\" != \"\" && \"${PATCHFILE}\" != \"\" ]] ; then\n+        echo \"Cannot specify --jira or --patch options together\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+    if [[ \"${RESETSCM}\" == \"false\" && \"${DIRTYSCM}\" == \"false\" ]] ; then\n+        echo \"Either --reset-scm or --dirty-scm option must be specified\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+    if [[ \"${RESETSCM}\" == \"true\" && \"${DIRTYSCM}\" == \"true\" ]] ; then\n+        echo \"Cannot specify --reset-scm and --dirty-scm options together\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+}\n+\n+###############################################################################\n+listTasks() {\n+    echo \"Available Tasks:\"\n+    echo \"\"\n+    getAllTasks\n+    for taskFile in ${TASKFILES} ; do\n+        taskName=`bash $taskFile --taskname`\n+        echo \"  $taskName\"\n+    done\n+    echo\n+}\n+###############################################################################\n+downloadPatch () {\n+    PATCHFILE=${TEMPDIR}/test.patch\n+    jiraPage=${TEMPDIR}/jira.txt\n+    curl \"${JIRAURLISSUEPREFIX}${JIRAISSUE}\" > ${jiraPage}\n+    if [[ `grep -c 'Patch Available' ${jiraPage}` == 0 ]] ; then\n+        echo \"$JIRAISSUE is not \\\"Patch Available\\\".  Exiting.\"\n+        echo\n+        cleanupAndExit 1\n+    fi\n+    relativePatchURL=`grep -o '\"/jira/secure/attachment/[0-9]*/[^\"]*' ${jiraPage} \\\n+        | grep -v -e 'htm[l]*$' | sort | tail -1 \\\n+        | grep -o '/jira/secure/attachment/[0-9]*/[^\"]*'`\n+    patchURL=\"${JIRAHOST}${relativePatchURL}\"\n+    patchNum=`echo $patchURL | grep -o '[0-9]*/' | grep -o '[0-9]*'`\n+    curl ${patchURL} > ${PATCHFILE}\n+    if [[ $? != 0 ]] ; then\n+        echo \"Could not download patch for ${JIRAISSUE} from ${patchURL}\"\n+        echo\n+        cleanupAndExit 1\n+    fi\n+    echo \"JIRA ${JIRAISSUE}, patch downloaded at `date` from ${patchURL}\" \n+    echo\n+    echo \"Patch <a href=\\\"$relativePatchURL\\\">$relativePatchURL</a> downloaded at $(date)\" >> ${SUMMARYFILE}\n+    echo \"\" >> ${SUMMARYFILE}\n+}\n+###############################################################################\n+applyPatch() {\n+    echo \"Applying patch\" >> $STDOUT\n+    echo \"\" >> $STDOUT\n+    patch -f -E --dry-run -p0 < ${PATCHFILE} | tee ${REPORTDIR}/APPLY-PATCH.txt \\\n+        >> $STDOUT\n+    if [[  ${PIPESTATUS[0]} != 0 ]] ; then\n+        echo \"Patch failed to apply to head of branch\"\n+        echo \"{color:red}-1{color} Patch failed to apply to head of branch\" >> ${SUMMARYFILE}\n+        echo \"\" >> ${SUMMARYFILE}\n+        echo \"----------------------------\" >> ${SUMMARYFILE}\n+        echo\n+        cleanupAndExit 1\n+    fi\n+    patch -f -E -p0 < ${PATCHFILE} > ${REPORTDIR}/APPLY-PATCH.txt\n+    if [[ $? != 0 ]] ; then\n+        echo \"ODD!, dry run passed, but patch failed to apply to head of branch\"\n+        echo\n+        cleanupAndExit 1\n+    fi\n+    echo \"\" >> $STDOUT\n+    echo \"Patch applied\"\n+    echo \"{color:green}+1 PATCH_APPLIES{color}\" >> $SUMMARYFILE\n+    echo\n+}\n+###############################################################################\n+run() {\n+    task=`bash $1 --taskname`\n+    if [[ \"${TASKSTORUN}\" == \"\" || \"${TASKSTORUN}\" =~ \"${task}\" ]] ; then\n+        if [[ ! \"${TASKSTOSKIP}\" =~ \"${task}\" ]] ; then\n+            echo \"  Running test-patch task ${task}\"\n+            outputFile=\"`basename $1`-$2.out\"\n+            $1 --op=$2 --tempdir=${TEMPDIR} --reportdir=${REPORTDIR} \\\n+                --summaryfile=${SUMMARYFILE} --patchfile=${PATCHFILE} ${MVNPASSTHRU} \\\n+                ${VERBOSEOPTION} | tee ${TEMPDIR}/${outputFile} >> $STDOUT\n+            if [[ $? != 0 ]] ; then\n+                echo \"  Failure, check for details ${TEMPDIR}/${outputFile}\"\n+                echo\n+                cleanupAndExit 1\n+            fi\n+        fi\n+    fi\n+}\n+###############################################################################\n+getAllTasks() {\n+    TASKFILES=`ls -a bin/test\\-patch\\-[0-9][0-9]\\-*`\n+}\n+###############################################################################\n+prePatchRun() {\n+    echo \"Pre patch\"\n+    for taskFile in ${TASKFILES} ; do\n+        run $taskFile pre\n+    done\n+    echo\n+}\n+###############################################################################\n+postPatchRun() {\n+    echo \"Post patch\"\n+    for taskFile in ${TASKFILES} ; do\n+        run $taskFile post\n+    done\n+    echo\n+}\n+###############################################################################\n+createReports() {\n+    echo \"Reports\"\n+    for taskFile in ${TASKFILES} ; do\n+        run $taskFile report\n+    done\n+    echo\n+}\n+###############################################################################\n+\n+echo\n+\n+parseArgs \"$@\"\n+\n+prepareTestPatchDirs\n+\n+echo \"\" > ${SUMMARYFILE}\n+\n+if [ \"${PATCHFILE}\" == \"\" ] ; then\n+    echo \"Testing JIRA ${JIRAISSUE}\"\n+    echo\n+    echo \"Testing JIRA ${JIRAISSUE}\" >> ${SUMMARYFILE}\n+    echo \"\" >> ${SUMMARYFILE}\n+else\n+    if [ ! -e ${PATCHFILE} ] ; then\n+        echo \"Patch file does not exist\"\n+        cleanupAndExit 1\n+    fi\n+    echo \"Testing patch ${PATCHFILE}\"\n+    echo\n+    echo \"Testing patch ${PATCHFILE}\" >> ${SUMMARYFILE}\n+    echo \"\" >> ${SUMMARYFILE}\n+fi\n+\n+prepareSCM\n+\n+echo \"\" >> ${SUMMARYFILE}\n+\n+if [ \"${PATCHFILE}\" == \"\" ] ; then\n+    downloadPatch ${JIRAISSUE}\n+fi\n+\n+echo \"----------------------------\" >> ${SUMMARYFILE}\n+echo \"\" >> ${SUMMARYFILE}\n+getAllTasks\n+prePatchRun\n+applyPatch\n+postPatchRun\n+createReports\n+echo \"\" >> ${SUMMARYFILE}\n+echo \"----------------------------\" >> ${SUMMARYFILE}\n+MINUSONES=`grep -c \"\\}\\-1\" ${SUMMARYFILE}`\n+if [[ $MINUSONES == 0 ]]; then\n+    echo \"{color:green}*+1 Overall result, good!, no -1s*{color}\" >> ${SUMMARYFILE}\n+else\n+    echo \"{color:red}*-1 Overall result, please check the reported -1(s)*{color}\" >> ${SUMMARYFILE}\n+fi\n+echo \"\" >> ${SUMMARYFILE}\n+WARNINGS=`grep -c \"\\}WARNING\" ${SUMMARYFILE}`\n+if [[ $WARNINGS != 0 ]]; then\n+    echo \"{color:red}.   There is at least one warning, please check{color}\" >> ${SUMMARYFILE}\n+fi\n+echo \"\" >> ${SUMMARYFILE}\n+\n+if [ ! -z \"${JIRAISSUE}\" ]; then\n+    echo \"The full output of the test-patch run is available at\"  >> ${SUMMARYFILE}\n+    echo \"\"  >> ${SUMMARYFILE}\n+    echo \".   ${BUILD_URL}\"  >> ${SUMMARYFILE}\n+    echo \"\"  >> ${SUMMARYFILE}\n+else\n+    echo\n+    echo \"Refer to ${REPORTDIR} for detailed test-patch reports\"\n+    echo\n+fi\n+\n+cat ${SUMMARYFILE} | sed -e 's/{color}//' -e 's/{color:green}//' -e 's/{color:red}//' -e 's/^\\.//' -e 's/^\\*//' -e 's/\\*$//' > ${SUMMARYFILETXT}\n+\n+cat ${SUMMARYFILETXT}\n+\n+cleanupAndExit `expr $MINUSONES != 0`"},{"sha":"84fc616758e8d89c2aa50693330f86e32ed6febc","filename":"bin/test-patch-00-clean","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-00-clean","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-00-clean","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-00-clean?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,98 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"CLEAN\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR>) [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    mvn clean ${MVNPASSTHRU} > ${TEMPDIR}/${TASKNAME}.txt\n+    EXITCODE=$?\n+    # removing files created by dependency:copy-dependencies\n+    rm -f */lib/*\n+    exit $EXITCODE\n+    ;;\n+post)\n+    ;;\n+report)\n+    echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"ea4055227682b07066005e170fbf11230d17875a","filename":"bin/test-patch-05-patch-raw-analysis","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-05-patch-raw-analysis","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-05-patch-raw-analysis","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-05-patch-raw-analysis?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,153 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"RAW_PATCH_ANALYSIS\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+PATCHFILE=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>)\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --patchfile=*)\n+            PATCHFILE=${i#*=}\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" || \"${PATCHFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkNoAuthors() {\n+    authorTags=`grep \"^+ \" ${PATCHFILE} | grep -c -i -e \".*\\*.* @author\"`\n+    if [[ ${authorTags} != 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch seems to contain ${authorTags} line(s) with @author tags\")\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does not introduce any @author tags\")\n+    fi\n+}\n+###############################################################################\n+checkNoTabs() {\n+    tabs=`grep \"^+ \" ${PATCHFILE} | grep -c -P \"\\t\"`\n+    if [[ ${tabs} != 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch contains ${tabs} line(s) with tabs\")\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does not introduce any tabs\")\n+    fi\n+}\n+###############################################################################\n+checkNoTrailingSpaces() {\n+    trailingSpaces=`grep \"^+ \" ${PATCHFILE} | grep -c -e \" $\"`\n+    if [[ ${trailingSpaces} != 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch contains ${trailingSpaces} line(s) with trailing spaces\")\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does not introduce any trailing spaces\")\n+    fi\n+}\n+###############################################################################\n+checkLinesLength() {\n+  # We check for > 120 to account for the \"+\" sign\n+    longLines=`grep \"^+ \" ${PATCHFILE} | awk 'BEGIN{count=0}{if ( length > 121 ) { count=count+1} }END{ print count}'`\n+    if [[ ${longLines} != 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch contains ${longLines} line(s) longer than 120 characters\")\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does not introduce any line longer than 120\")\n+    fi\n+}\n+###############################################################################\n+checkForTestcases() {\n+    testcases=`grep -c -i -e '^+++.*/test' ${PATCHFILE}`\n+    if [[ ${testcases} == 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch does not add/modify any testcase\")\n+    #reverting for summary +1 calculation\n+        testcases=1\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does adds/modifies ${testcases} testcase(s)\")\n+    #reverting for summary +1 calculation\n+        testcases=0\n+    fi\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    ;;\n+post)\n+    ;;\n+report)\n+    REPORT=()\n+    checkNoAuthors\n+    checkNoTabs\n+    checkNoTrailingSpaces\n+    checkLinesLength\n+    checkForTestcases\n+    total=`expr $authorTags + $tabs + $trailingSpaces + $longLines + $testcases`\n+    if [[ $total == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"6f20a65bfe80e7d2a28e7681e25217ff2ebe3d27","filename":"bin/test-patch-08-rat","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-08-rat","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-08-rat","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-08-rat?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,125 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"RAT\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkForWarnings() {\n+    cleanWarns=`grep -c '\\!?????' ${REPORTDIR}/${TASKNAME}-clean.txt`\n+    patchWarns=`grep -c '\\!?????' ${REPORTDIR}/${TASKNAME}-patch.txt`\n+    newWarns=`expr $patchWarns - $cleanWarns`\n+    if [[ $newWarns -le 0 ]] ; then\n+        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new RAT warnings\")\n+        newWarns=0\n+    else\n+        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new RAT warning(s)\")\n+        newWarns=1\n+    fi\n+    if [[ $cleanWarns != 0 ]] ; then\n+        REPORT+=(\"{color:red}WARNING: the current HEAD has $cleanWarns RAT warning(s), they should be addressed ASAP{color}\")\n+    fi\n+}\n+###############################################################################\n+\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    mvn apache-rat:check ${MVNPASSTHRU} > $STDOUT\n+    cp target/rat.txt ${REPORTDIR}/${TASKNAME}-clean.txt\n+    ;;\n+post)\n+    mvn apache-rat:check ${MVNPASSTHRU} > $STDOUT\n+    cp target/rat.txt ${REPORTDIR}/${TASKNAME}-patch.txt\n+    ;;\n+report)\n+    checkForWarnings\n+    if [[ $newWarns == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"54bbf93419e2604a1f2d01fe8a20528db94d7b1a","filename":"bin/test-patch-09-javadoc","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-09-javadoc","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-09-javadoc","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-09-javadoc?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,118 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"JAVADOC\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkForWarnings() {\n+    cleanWarns=`grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-clean.txt | awk '/Javadoc Warnings/,EOF' | grep warning | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n+    patchWarns=`grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-patch.txt | awk '/Javadoc Warnings/,EOF' | grep warning | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n+    newWarns=`expr $patchWarns - $cleanWarns`\n+    if [[ $newWarns -le 0 ]] ; then\n+        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Javadoc warnings\")\n+        newWarns=0\n+    else\n+        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new Javadoc warning(s)\")\n+        newWarns=1\n+    fi\n+    if [[ $cleanWarns != 0 ]] ; then\n+        REPORT+=(\"{color:red}WARNING{color}: the current HEAD has $cleanWarns Javadoc warning(s)\")\n+    fi\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    mvn clean javadoc:aggregate ${MVNPASSTHRU} > ${REPORTDIR}/${TASKNAME}-clean.txt\n+    ;;\n+post)\n+    mvn clean javadoc:aggregate ${MVNPASSTHRU} > ${REPORTDIR}/${TASKNAME}-patch.txt\n+    ;;\n+report)\n+    checkForWarnings\n+    if [[ $newWarns == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"751bfc61923afcc1090dea4d6eaa6a6b4c5639c1","filename":"bin/test-patch-10-compile","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-10-compile","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-10-compile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-10-compile?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,144 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"COMPILE\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkForWarnings() {\n+    grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-clean.txt > ${TEMPDIR}/${TASKNAME}-javacwarns-clean.txt\n+    grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-patch.txt > ${TEMPDIR}/${TASKNAME}-javacwarns-patch.txt\n+    cleanWarns=`cat ${TEMPDIR}/${TASKNAME}-javacwarns-clean.txt | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n+    patchWarns=`cat ${TEMPDIR}/${TASKNAME}-javacwarns-patch.txt | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n+    newWarns=`expr $patchWarns - $cleanWarns`\n+    if [[ $newWarns -le 0 ]] ; then\n+        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new javac warnings\")\n+        newWarns=0\n+    else\n+        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new javac warning(s)\")\n+        newWarns=1\n+    fi\n+    if [[ $cleanWarns != 0 ]] ; then\n+        REPORT+=(\"{color:red}WARNING{color}: the current HEAD has $cleanWarns javac warning(s)\")\n+    fi\n+}\n+###############################################################################\n+\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    mvn clean package -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-clean.txt >> $STDOUT\n+    if [[ ${PIPESTATUS[0]} == 0 ]] ; then\n+        echo \"{color:green}+1{color} HEAD compiles\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n+    else\n+        echo \"{color:red}-1{color} HEAD does not compile\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n+    fi\n+    ;;\n+post)\n+    mvn clean package -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-patch.txt >> $STDOUT\n+    if [[ ${PIPESTATUS[0]} == 0 ]] ; then\n+        echo \"{color:green}+1{color} patch compiles\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n+    else\n+        echo \"{color:red}-1{color} patch does not compile\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n+    fi\n+    ;;\n+report)\n+    REPORT=()\n+    compileErrors=0\n+    while read line; do\n+        REPORT+=(\"$line\")\n+        if [[ \"$line\" =~ \"-1\" ]] ; then\n+            compileErrors=1\n+        fi\n+    done < ${TEMPDIR}/${TASKNAME}-compile.txt\n+    checkForWarnings\n+    total=`expr $compileErrors + $newWarns`\n+    if [[ $total == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"c91daffd03156963ff01b363aa5034a6a1194efb","filename":"bin/test-patch-11-findbugs","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-11-findbugs","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-11-findbugs","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-11-findbugs?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,156 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"FINDBUGS\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkForWarnings() {\n+    cleanBugs=0\n+    patchBugs=0\n+    for m in $(getModules); do\n+        MODNAME=$(echo $m | sed 's/\\///')\n+\n+        m_cleanBugs=$(cat ${REPORTDIR}/${TASKNAME}-${MODNAME}-clean.xml \\\n+            | sed 's/<\\/BugInstance>/<\\/BugInstance>\\n/g' | grep BugInstance | wc -l)\n+        m_patchBugs=$(cat ${REPORTDIR}/${TASKNAME}-${MODNAME}-patch.xml \\\n+            | sed 's/<\\/BugInstance>/<\\/BugInstance>\\n/g' | grep BugInstance | wc -l)\n+        m_newBugs=`expr $m_patchBugs - $m_cleanBugs`\n+        if [[ $m_newBugs != 0 ]] ; then\n+            BUGMODULES=\"$MODNAME $BUGMODULES\"\n+        fi\n+\n+        cleanBugs=$(($cleanBugs+$m_cleanBugs))\n+        patchBugs=$(($patchBugs+$m_patchBugs))\n+    done\n+\n+    BUGMODULES=$(echo $BUGMODULES | sed 's/^ *//' | sed 's/ *$//')\n+    newBugs=`expr $patchBugs - $cleanBugs`\n+    if [[ $newBugs -le 0 ]] ; then\n+        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Findbugs warnings\")\n+        newBugs=0\n+    else\n+        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $patchBugs new Findbugs warning(s) in module(s) [$BUGMODULES]\")\n+        newBugs=1\n+    fi\n+    if [[ $cleanBugs != 0 ]] ; then\n+        REPORT+=(\"{color:red}WARNING: the current HEAD has $cleanWarns Findbugs warning(s), they should be addressed ASAP{color}\")\n+    fi\n+}\n+\n+###############################################################################\n+\n+getModules() {\n+    find . -name pom.xml | sed 's/^.\\///' | sed 's/pom.xml$//' | grep -v compat\n+}\n+###############################################################################\n+\n+copyFindbugsXml() {\n+    TAG=$1\n+    for m in $(getModules); do\n+        MODNAME=$(echo $m | sed 's/\\///')\n+        cp ${m}target/findbugsXml.xml ${REPORTDIR}/${TASKNAME}-${MODNAME}-$TAG.xml\n+    done\n+}\n+\n+parseArgs \"$@\"\n+\n+\n+case $OP in\n+pre)\n+    mvn findbugs:findbugs ${MVNPASSTHRU} > $STDOUT\n+    copyFindbugsXml clean\n+    ;;\n+post)\n+    mvn findbugs:findbugs ${MVNPASSTHRU} > $STDOUT\n+    copyFindbugsXml patch\n+    ;;\n+report)\n+    checkForWarnings\n+    if [[ $newBugs == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"ab77bcdcea2a4711f964f887829f1b42464b85c7","filename":"bin/test-patch-20-tests","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-20-tests","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-20-tests","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-20-tests?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,125 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"TESTS\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    ;;\n+post)\n+    # must use package instead of test so that compat-deps shaded jars are correct\n+    mvn package ${MVNPASSTHRU} -Dmaven.test.failure.ignore=true \\\n+        -Dmaven.test.error.ignore=true -fae \\\n+        -Dtest.timeout=7200 | tee ${TEMPDIR}/${TASKNAME}.out >> $STDOUT\n+    exitCode=${PIPESTATUS[0]}\n+    echo \"$exitCode\" >  ${TEMPDIR}/${TASKNAME}.exitCode\n+    ;;\n+report)\n+    failedTests=` find . -name '*\\.txt' | grep target/surefire-reports | xargs grep  \"<<< FAILURE\" | grep -v \"Tests run:\" | sed 's/.*\\.txt\\://' | sed 's/ .*//'`\n+    testsRun=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $3}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n+    testsFailed=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $5}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n+    testsErrors=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $7}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n+    hasFailures=`expr $testsFailed + $testsErrors`\n+    testsExitCode=`cat ${TEMPDIR}/${TASKNAME}.exitCode`\n+    if [[ $hasFailures != 0 ]] ; then\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+        echo \".    Tests run: $testsRun\" >> $SUMMARYFILE\n+        echo \".    Tests failed: $testsFailed\" >> $SUMMARYFILE\n+        echo \".    Tests errors: $testsErrors\" >> $SUMMARYFILE\n+        echo \"\" >> ${SUMMARYFILE}\n+        echo \".    The patch failed the following testcases:\" >> $SUMMARYFILE\n+        echo \"\" >> ${SUMMARYFILE}\n+        echo \"${failedTests}\" | sed 's/^/.      /' >> $SUMMARYFILE\n+        echo \"\" >> ${SUMMARYFILE}\n+    else\n+        if [[ \"$testsExitCode\" != \"0\" ]] ; then\n+            echo \"{color:red}-1 ${TASKNAME}{color} - patch does not compile, cannot run testcases\" >> $SUMMARYFILE\n+        else\n+            echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+            echo \".    Tests run: $testsRun\" >> $SUMMARYFILE\n+        fi\n+    fi\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"33d4d6c0789320383e46b464b964f8babb9c493b","filename":"bin/test-patch-30-dist","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-30-dist","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/bin/test-patch-30-dist","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-30-dist?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -0,0 +1,106 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"DISTRO\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    ;;\n+post)\n+    mvn package assembly:single -DskipTests | tee ${REPORTDIR}/${TASKNAME}.out >> $STDOUT\n+    exitCode=${PIPESTATUS[0]}\n+    echo \"$exitCode\" >  ${TEMPDIR}/${TASKNAME}.exitCode\n+    ;;\n+report)\n+    exitCode=`cat ${TEMPDIR}/${TASKNAME}.exitCode`\n+    if [[ \"$exitCode\" != \"0\" ]] ; then\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+        echo \".    {color:red}-1{color} distro tarball fails with the patch\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+        echo \".    {color:green}+1{color} distro tarball builds with the patch \" >> $SUMMARYFILE\n+    fi\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"e0548ace88664764627a5bd937ff1a237982236e","filename":"pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","patch":"@@ -115,6 +115,7 @@\n             <exclude>CHANGES.txt</exclude>\n             <exclude>**/README</exclude>\n             <exclude>**/apidocs/*</exclude>\n+\t    <exclude>test-patch/**/*</exclude>\n           </excludes>\n         </configuration>\n       </plugin>"}]}

