{"sha":"8f09334e24deaa8e80674a702c498d802986f3c8","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4ZjA5MzM0ZTI0ZGVhYThlODA2NzRhNzAyYzQ5OGQ4MDI5ODZmM2M4","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-07-23T23:41:19Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-07-23T23:41:19Z"},"message":"BOOKKEEPER-739: Test timeouts mostly ignored (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1612972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d6326435122e5b8fb124f603eb94e5c8382c4a00","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d6326435122e5b8fb124f603eb94e5c8382c4a00"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8f09334e24deaa8e80674a702c498d802986f3c8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8f09334e24deaa8e80674a702c498d802986f3c8","html_url":"https://github.com/apache/bookkeeper/commit/8f09334e24deaa8e80674a702c498d802986f3c8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8f09334e24deaa8e80674a702c498d802986f3c8/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"37fda574a530eedc6bd3ba5030e2f3e0805c10f8","url":"https://api.github.com/repos/apache/bookkeeper/commits/37fda574a530eedc6bd3ba5030e2f3e0805c10f8","html_url":"https://github.com/apache/bookkeeper/commit/37fda574a530eedc6bd3ba5030e2f3e0805c10f8"}],"stats":{"total":640,"additions":308,"deletions":332},"files":[{"sha":"d56d7dafbb469d7738ac4982860162fcd32c83e5","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -296,6 +296,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)\n \n+      BOOKKEEPER-739: Test timeouts mostly ignored (sijie via fpj)\n+\n     NEW FEATURE:\n \n       BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)"},{"sha":"17460435ab1a9a25b0cc162d4ffd49f96130c09c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -35,6 +35,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n public class BookieShutdownTest extends BookKeeperClusterTestCase {\n \n     private final static Logger LOG = LoggerFactory.getLogger(BookieShutdownTest.class);\n@@ -106,7 +108,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId,\n \n     /**\n      * Test whether Bookie can be shutdown when the call comes inside bookie thread.\n-     * \n+     *\n      * @throws Exception\n      */\n     @Test(timeout = 60000)"},{"sha":"ef4cea8d93f0443ee49f7e9df82ff79711ae1497","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -52,6 +52,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This class tests the entry log compaction functionality.\n  */"},{"sha":"8f59b54495485c0152b1d3c3cb9fe6ad784d226c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -26,8 +26,6 @@\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.bookie.GarbageCollectorThread.EntryLogMetadata;\n import org.apache.bookkeeper.bookie.GarbageCollectorThread.ExtractionScanner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -39,7 +37,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class EntryLogTest extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class EntryLogTest {\n     private final static Logger LOG = LoggerFactory.getLogger(EntryLogTest.class);\n \n     @Before"},{"sha":"151feaeb2dc9b5462afd29b1fd536b33e9aecf47","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -22,9 +22,7 @@\n  */\n \n import java.util.Enumeration;\n-import java.util.List;\n \n-import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -36,6 +34,8 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This class tests that index corruption cases\n  */"},{"sha":"b62c69508379f99df5506904bb2598c91de87b00","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -25,10 +25,6 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n \n-import junit.framework.TestCase;\n-\n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.bookie.Bookie.NoLedgerException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n@@ -46,10 +42,12 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * LedgerCache related test cases\n  */\n-public class LedgerCacheTest extends TestCase {\n+public class LedgerCacheTest {\n     private final static Logger LOG = LoggerFactory.getLogger(LedgerCacheTest.class);\n \n     SnapshotMap<Long, Boolean> activeLedgers;\n@@ -61,7 +59,6 @@\n \n     private Bookie bookie;\n \n-    @Override\n     @Before\n     public void setUp() throws Exception {\n         txnDir = File.createTempFile(\"ledgercache\", \"txn\");\n@@ -85,7 +82,6 @@ public void setUp() throws Exception {\n         ledgerCache = ((InterleavedLedgerStorage) bookie.ledgerStorage).ledgerCache;\n     }\n \n-    @Override\n     @After\n     public void tearDown() throws Exception {\n         if (flushThread != null) {"},{"sha":"fb48f3f259dff26cb63a0704e1d17f556aa4a96f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -22,8 +22,6 @@\n \n import java.io.File;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.TestBKConfiguration;\n@@ -32,7 +30,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TestLedgerDirsManager extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class TestLedgerDirsManager {\n     private final static Logger LOG = LoggerFactory.getLogger(TestLedgerDirsManager.class);\n \n     ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();"},{"sha":"24590162abe72f0a60bc86cff3333faba24c8d4b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperCloseTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -45,6 +45,8 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This unit test verifies the behavior of bookkeeper apis, where the operations\n  * are being executed through a closed bookkeeper client"},{"sha":"364e48eb6e5e1eba3d2d2aa6f80ac24a93feeb47","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -40,6 +40,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests of the main BookKeeper client\n  */\n@@ -218,7 +220,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n             assertTrue(\"Close was not successful\", success.get());\n         }\n     }\n-    \n+\n     @Test(timeout=60000)\n     public void testIsClosed() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration()"},{"sha":"f18e159d6be69128475c9c6d95c5ff16200ccd12","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -50,6 +50,8 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This class tests the bookie recovery admin functionality.\n  */"},{"sha":"7b77c485555047c5aa466326e1ebdd8c0bccc173","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -34,6 +34,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Testing ledger write entry cases\n  */"},{"sha":"4e3e78b1dfb16771079fe74b93ee49cf30b2cad8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -38,6 +38,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This class tests the ledger close logic.\n  */"},{"sha":"f54cde1048db8865bbda7db978618744c7313066","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -39,6 +39,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This unit test tests ledger recovery.\n  *"},{"sha":"ce9aab91b4b25f95578ac4b58d1b054e8bcce3fb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -25,7 +25,6 @@\n import org.junit.Test;\n import static org.junit.Assert.*;\n \n-import junit.framework.TestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n "},{"sha":"521d1e3cb33abcffd4fe7c4090bfffd34aa26ff4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -36,6 +36,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n @SuppressWarnings(\"deprecation\")\n public class SlowBookieTest extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(SlowBookieTest.class);"},{"sha":"ba51175e2fde93203ebd3b60761a83484ec157a1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -32,6 +32,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This unit test tests ledger fencing;\n  *\n@@ -68,19 +70,19 @@ public void testBasicFencing() throws Exception {\n          */\n         LedgerHandle readlh = bkc.openLedger(writelh.getId(), digestType, \"password\".getBytes());\n         // should have triggered recovery and fencing\n-        \n+\n         try {\n             writelh.addEntry(tmp.getBytes());\n             LOG.error(\"Should have thrown an exception\");\n             fail(\"Should have thrown an exception when trying to write\");\n         } catch (BKException.BKLedgerFencedException e) {\n             // correct behaviour\n         }\n-                \n+\n         /*\n          * Check if has recovered properly.\n          */\n-        assertTrue(\"Has not recovered correctly: \" + readlh.getLastAddConfirmed() \n+        assertTrue(\"Has not recovered correctly: \" + readlh.getLastAddConfirmed()\n                    + \" original \" + writelh.getLastAddConfirmed(),\n                    readlh.getLastAddConfirmed() == writelh.getLastAddConfirmed());\n     }\n@@ -91,7 +93,7 @@ public void testBasicFencing() throws Exception {\n         private final long ledgerId;\n         private long lastConfirmedEntry = 0;\n \n-        \n+\n         private final DigestType digestType;\n         private final CyclicBarrier barrier;\n \n@@ -102,7 +104,7 @@ public void testBasicFencing() throws Exception {\n             this.digestType = digestType;\n             this.barrier = barrier;\n         }\n-        \n+\n         @Override\n         public void run() {\n             LedgerHandle lh = null;\n@@ -112,8 +114,8 @@ public void run() {\n                 while(true) {\n                     try {\n                         bk = new BookKeeper(new ClientConfiguration(baseClientConf), bkc.getZkHandle());\n-                        \n-                        lh = bk.openLedger(ledgerId, \n+\n+                        lh = bk.openLedger(ledgerId,\n                                            digestType, \"\".getBytes());\n                         lastConfirmedEntry = lh.getLastAddConfirmed();\n                         lh.close();\n@@ -146,7 +148,7 @@ long getLastConfirmedEntry() {\n \n     /**\n      * Try to open a ledger many times in parallel.\n-     * All opens should result in a ledger with an equals number of \n+     * All opens should result in a ledger with an equals number of\n      * entries.\n      */\n     @Test(timeout=60000)\n@@ -186,10 +188,10 @@ public void run() {\n \n         writethread.join();\n         long lastConfirmed = writelh.getLastAddConfirmed();\n-        \n+\n         for (int i = 0; i < numRecovery; i++) {\n             threads[i].join();\n-            assertTrue(\"Added confirmed is incorrect\", \n+            assertTrue(\"Added confirmed is incorrect\",\n                        lastConfirmed <= threads[i].getLastConfirmedEntry());\n         }\n     }\n@@ -215,10 +217,10 @@ public void testNoRecoveryOpen() throws Exception {\n         /*\n          * Try to open ledger.\n          */\n-        LedgerHandle readlh = bkc.openLedgerNoRecovery(writelh.getId(), \n+        LedgerHandle readlh = bkc.openLedgerNoRecovery(writelh.getId(),\n                                                         digestType, \"\".getBytes());\n         // should not have triggered recovery and fencing\n-        \n+\n         writelh.addEntry(tmp.getBytes());\n         long numReadable = readlh.getLastAddConfirmed();\n         LOG.error(\"numRead \" + numReadable);\n@@ -240,7 +242,7 @@ public void testNoRecoveryOpen() throws Exception {\n     }\n \n     /**\n-     * create a ledger and write entries. \n+     * create a ledger and write entries.\n      * kill a bookie in the ensemble. Recover.\n      * Fence the ledger. Kill another bookie. Recover.\n      */\n@@ -252,9 +254,9 @@ public void testFencingInteractionWithBookieRecovery() throws Exception {\n         BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.getZooKeeperConnectString());\n \n         LedgerHandle writelh = bkc.createLedger(digestType, \"testPasswd\".getBytes());\n-        \n+\n         String tmp = \"Foobar\";\n-        \n+\n         final int numEntries = 10;\n         for (int i = 0; i < numEntries; i++) {\n             writelh.addEntry(tmp.getBytes());\n@@ -270,12 +272,12 @@ public void testFencingInteractionWithBookieRecovery() throws Exception {\n         }\n \n         admin.recoverBookieData(bookieToKill, null);\n-        \n+\n         for (int i = 0; i < numEntries; i++) {\n             writelh.addEntry(tmp.getBytes());\n         }\n \n-        LedgerHandle readlh = bkc.openLedger(writelh.getId(), \n+        LedgerHandle readlh = bkc.openLedger(writelh.getId(),\n                                              digestType, \"testPasswd\".getBytes());\n         try {\n             writelh.addEntry(tmp.getBytes());\n@@ -290,7 +292,7 @@ public void testFencingInteractionWithBookieRecovery() throws Exception {\n     }\n \n     /**\n-     * create a ledger and write entries. \n+     * create a ledger and write entries.\n      * Fence the ledger. Kill a bookie. Recover.\n      * Ensure that recover doesn't reallow adding\n      */\n@@ -302,15 +304,15 @@ public void testFencingInteractionWithBookieRecovery2() throws Exception {\n         BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.getZooKeeperConnectString());\n \n         LedgerHandle writelh = bkc.createLedger(digestType, \"testPasswd\".getBytes());\n-        \n+\n         String tmp = \"Foobar\";\n-        \n+\n         final int numEntries = 10;\n         for (int i = 0; i < numEntries; i++) {\n             writelh.addEntry(tmp.getBytes());\n         }\n \n-        LedgerHandle readlh = bkc.openLedger(writelh.getId(), \n+        LedgerHandle readlh = bkc.openLedger(writelh.getId(),\n                                              digestType, \"testPasswd\".getBytes());\n         // should be fenced by now\n         BookieSocketAddress bookieToKill"},{"sha":"eb61c2120790af7058997dfcd9942240b6a1d039","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","status":"modified","additions":20,"deletions":18,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -1,22 +1,22 @@\n /**\n- * \n- * Licensed to the Apache Software Foundation (ASF) under one \n- * or more contributor license agreements.  See the NOTICE file \n- * distributed with this work for additional information \n- * regarding copyright ownership.  The ASF licenses this file \n- * to you under the Apache License, Version 2.0 (the \n- * \"License\"); you may not use this file except in compliance \n- * with the License.  You may obtain a copy of the License at \n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0 \n- * \n- * Unless required by applicable law or agreed to in writing, \n- * software distributed under the License is distributed on an \n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY \n- * KIND, either express or implied.  See the License for the \n- * specific language governing permissions and limitations \n- * under the License. \n- * \n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n  */\n package org.apache.bookkeeper.client;\n \n@@ -31,6 +31,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests the functionality of LedgerChecker. This Ledger checker should be able\n  * to detect the correct underReplicated fragment"},{"sha":"e4f744f1baf113cf537f5cfbdc7467af9e448c2e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","status":"modified","additions":22,"deletions":20,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -1,21 +1,21 @@\n /**\n- * Licensed to the Apache Software Foundation (ASF) under one \n- * or more contributor license agreements.  See the NOTICE file \n- * distributed with this work for additional information \n- * regarding copyright ownership.  The ASF licenses this file \n- * to you under the Apache License, Version 2.0 (the \n- * \"License\"); you may not use this file except in compliance \n- * with the License.  You may obtain a copy of the License at \n- * \n- *   http://www.apache.org/licenses/LICENSE-2.0 \n- * \n- * Unless required by applicable law or agreed to in writing, \n- * software distributed under the License is distributed on an \n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY \n- * KIND, either express or implied.  See the License for the \n- * specific language governing permissions and limitations \n- * under the License. \n- * \n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n  */\n package org.apache.bookkeeper.client;\n \n@@ -35,6 +35,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests BKAdmin that it should be able to replicate the failed bookie fragments\n  * to target bookie.\n@@ -100,7 +102,7 @@ public void testReplicateLFShouldCopyFailedBookieFragmentsToTargetBookie()\n         BookKeeperAdmin admin = new BookKeeperAdmin(baseClientConf);\n         lh.close();\n         // 0-9 entries should be copy to new bookie\n-        \n+\n         for (LedgerFragment lf : result) {\n             admin.replicateLedgerFragment(lh, lf, newBkAddr);\n         }\n@@ -181,7 +183,7 @@ public void testReplicateLFFailsOnlyOnLastUnClosedFragments()\n         }\n         assertEquals(\"Should be only one unclosed fragment\", 1, unclosedCount);\n     }\n-    \n+\n     /**\n      * Tests that ReplicateLedgerFragment should return false if replication\n      * fails\n@@ -225,7 +227,7 @@ public void testReplicateLFShouldReturnFalseIfTheReplicationFails()\n             }\n         }\n     }\n-    \n+\n     /**\n      * Tests that splitIntoSubFragment should be able to split the original\n      * passed fragment into sub fragments at correct boundaries"},{"sha":"b5f5e322af75b7139aa6686da2cb9bdb4a42d412","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -24,28 +24,29 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.NetworkTopology;\n import org.apache.bookkeeper.util.StaticDNSResolver;\n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.Configuration;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TestRackawareEnsemblePlacementPolicy extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class TestRackawareEnsemblePlacementPolicy {\n \n     static final Logger LOG = LoggerFactory.getLogger(TestRackawareEnsemblePlacementPolicy.class);\n \n     RackawareEnsemblePlacementPolicy repp;\n     Configuration conf = new CompositeConfiguration();\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    @Before\n+    public void setUp() throws Exception {\n         StaticDNSResolver.reset();\n         StaticDNSResolver.addNodeToRack(InetAddress.getLocalHost().getHostAddress(), NetworkTopology.DEFAULT_RACK);\n         StaticDNSResolver.addNodeToRack(\"127.0.0.1\", NetworkTopology.DEFAULT_RACK);\n@@ -56,10 +57,9 @@ protected void setUp() throws Exception {\n         repp.initialize(conf);\n     }\n \n-    @Override\n-    protected void tearDown() throws Exception {\n+    @After\n+    public void tearDown() throws Exception {\n         repp.uninitalize();\n-        super.tearDown();\n     }\n \n     @Test(timeout = 60000)"},{"sha":"2a6c71d3a57a1f0ec69142e60278b8a70c705939","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -37,6 +37,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This unit test tests ledger fencing;\n  *"},{"sha":"b004b5d3015acd395e9cbce246765847a8600935","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestTryReadLastConfirmed.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -29,6 +29,8 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import static org.junit.Assert.*;\n+\n public class TestTryReadLastConfirmed extends BookKeeperClusterTestCase {\n \n     static final Logger logger = LoggerFactory.getLogger(TestTryReadLastConfirmed.class);"},{"sha":"eb833a3e0d554ff223024e5ada540d4911d91a16","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -47,6 +47,8 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n+import static org.junit.Assert.*;\n+\n @RunWith(Parameterized.class)\n public class TestWatchEnsembleChange extends BookKeeperClusterTestCase {\n \n@@ -99,7 +101,7 @@ public void testWatchEnsembleChange() throws Exception {\n         readLh.close();\n         lh.close();\n     }\n-    \n+\n     @Test(timeout = 60000)\n     public void testWatchMetadataRemoval() throws Exception {\n        LedgerManagerFactory factory = ReflectionUtils.newInstance(lmFactoryCls);\n@@ -108,34 +110,34 @@ public void testWatchMetadataRemoval() throws Exception {\n        final ByteBuffer bbLedgerId = ByteBuffer.allocate(8);\n        final CountDownLatch createLatch = new CountDownLatch(1);\n        final CountDownLatch removeLatch = new CountDownLatch(1);\n-       \n-       manager.createLedger( new LedgerMetadata(4, 2, 2, digestType, \"fpj was here\".getBytes()), \n+\n+       manager.createLedger( new LedgerMetadata(4, 2, 2, digestType, \"fpj was here\".getBytes()),\n                 new BookkeeperInternalCallbacks.GenericCallback<Long>(){\n-          \n+\n            @Override\n            public void operationComplete(int rc, Long result) {\n                bbLedgerId.putLong(result);\n                bbLedgerId.flip();\n                createLatch.countDown();\n            }\n-       }); \n+       });\n        assertTrue(createLatch.await(2000, TimeUnit.MILLISECONDS));\n        final long createdLid = bbLedgerId.getLong();\n-       \n-       manager.registerLedgerMetadataListener( createdLid, \n+\n+       manager.registerLedgerMetadataListener( createdLid,\n                new LedgerMetadataListener() {\n \n            @Override\n            public void onChanged( long ledgerId, LedgerMetadata metadata ) {\n                assertEquals(ledgerId, createdLid);\n                assertEquals(metadata, null);\n                removeLatch.countDown();\n-           }   \n+           }\n        });\n-       \n+\n        manager.removeLedgerMetadata( createdLid, Version.ANY,\n                new BookkeeperInternalCallbacks.GenericCallback<Void>() {\n-           \n+\n            @Override\n            public void operationComplete(int rc, Void result) {\n                assertEquals(rc, BKException.Code.OK);"},{"sha":"19aab44e772d5ecaa83acf9ebc83d6f54ac56f13","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -48,6 +48,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Test garbage collection ledgers in ledger manager\n  */"},{"sha":"18a818aeaab3c1709a0dce06c7bece06bc171f96","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -31,6 +31,8 @@\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n public class LedgerLayoutTest extends BookKeeperClusterTestCase {\n \n     public LedgerLayoutTest() {\n@@ -43,7 +45,7 @@ public void testLedgerLayout() throws Exception {\n         conf.setLedgerManagerFactoryClass(HierarchicalLedgerManagerFactory.class);\n         String ledgerRootPath = \"/testLedgerLayout\";\n \n-        zkc.create(ledgerRootPath, new byte[0], \n+        zkc.create(ledgerRootPath, new byte[0],\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n \n         LedgerLayout layout = LedgerLayout.readLayout(zkc, ledgerRootPath);\n@@ -82,7 +84,7 @@ public void testBadVersionLedgerLayout() throws Exception {\n                           FlatLedgerManagerFactory.class.getName(),\n                           FlatLedgerManagerFactory.CUR_VERSION,\n                           LedgerLayout.LAYOUT_FORMAT_VERSION + 1);\n-        \n+\n         try {\n             LedgerLayout.readLayout(zkc, conf.getZkLedgersRootPath());\n             fail(\"Shouldn't reach here!\");"},{"sha":"1a581866ab26361a9d1f0baf8ae3fbf6c0936ce0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerIteratorTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -24,6 +24,8 @@\n import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n public class LedgerManagerIteratorTest extends LedgerManagerTestCase {\n     public LedgerManagerIteratorTest(Class<? extends LedgerManagerFactory> lmFactoryCls) {\n         super(lmFactoryCls);"},{"sha":"8fd40c9e57e25de43ca35f92b6546bff5e837a05","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":25,"deletions":27,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -20,7 +20,6 @@\n  */\n package org.apache.bookkeeper.meta;\n \n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -34,14 +33,13 @@\n import java.lang.reflect.Field;\n \n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.junit.Assert.*;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n public class TestLedgerManager extends BookKeeperClusterTestCase {\n     private final static Logger LOG = LoggerFactory.getLogger(TestLedgerManager.class);\n \n@@ -62,21 +60,21 @@ private void writeLedgerLayout(String ledgersRootPath,\n         layout.store(zkc, ledgersRootPath);\n     }\n \n-    /** \n+    /**\n      * Test bad client configuration\n      */\n     @Test(timeout=60000)\n     public void testBadConf() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n-        \n+\n         // success case\n         String root0 = \"/goodconf0\";\n-        zkc.create(root0, new byte[0], \n+        zkc.create(root0, new byte[0],\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n         conf.setZkLedgersRootPath(root0);\n \n         LedgerManagerFactory m = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc);\n-        assertTrue(\"Ledger manager is unexpected type\", \n+        assertTrue(\"Ledger manager is unexpected type\",\n                    (m instanceof FlatLedgerManagerFactory));\n         m.uninitialize();\n \n@@ -87,13 +85,13 @@ public void testBadConf() throws Exception {\n             fail(\"Shouldn't reach here\");\n         } catch (Exception e) {\n             LOG.error(\"Received exception\", e);\n-            assertTrue(\"Invalid exception\", \n+            assertTrue(\"Invalid exception\",\n                        e.getMessage().contains(\"does not match existing layout\"));\n         }\n \n         // invalid ledger manager\n         String root1 = \"/badconf1\";\n-        zkc.create(root1, new byte[0], \n+        zkc.create(root1, new byte[0],\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n         conf.setZkLedgersRootPath(root1);\n \n@@ -145,7 +143,7 @@ public void testBadConfV1() throws Exception {\n             fail(\"Shouldn't reach here\");\n         } catch (Exception e) {\n             LOG.error(\"Received exception\", e);\n-            assertTrue(\"Invalid exception\", \n+            assertTrue(\"Invalid exception\",\n                        e.getMessage().contains(\"does not match existing layout\"));\n         }\n     }\n@@ -156,40 +154,40 @@ public void testBadConfV1() throws Exception {\n     @Test(timeout=60000)\n     public void testBadZkContents() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();\n-        \n+\n         // bad type in zookeeper\n         String root0 = \"/badzk0\";\n-        zkc.create(root0, new byte[0], \n+        zkc.create(root0, new byte[0],\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n         conf.setZkLedgersRootPath(root0);\n-        \n+\n         new LedgerLayout(\"DoesNotExist\",\n                          0xdeadbeef).store(zkc, root0);\n-        \n+\n         try {\n             LedgerManagerFactory.newLedgerManagerFactory(conf, zkc);\n             fail(\"Shouldn't reach here\");\n         } catch (Exception e) {\n             LOG.error(\"Received exception\", e);\n-            assertTrue(\"Invalid exception\", \n+            assertTrue(\"Invalid exception\",\n                     e.getMessage().contains(\"Failed to instantiate ledger manager factory\"));\n         }\n \n         // bad version in zookeeper\n         String root1 = \"/badzk1\";\n-        zkc.create(root1, new byte[0], \n+        zkc.create(root1, new byte[0],\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n         conf.setZkLedgersRootPath(root1);\n-        \n+\n         new LedgerLayout(FlatLedgerManagerFactory.class.getName(),\n                          0xdeadbeef).store(zkc, root1);\n-        \n+\n         try {\n             LedgerManagerFactory.newLedgerManagerFactory(conf, zkc);\n             fail(\"Shouldn't reach here\");\n         } catch (Exception e) {\n             LOG.error(\"Received exception\", e);\n-            assertTrue(\"Invalid exception\", \n+            assertTrue(\"Invalid exception\",\n                     e.getMessage().contains(\"Incompatible layout version found\"));\n         }\n     }\n@@ -200,7 +198,7 @@ public void testBadZkContents() throws Exception {\n         private final String root;\n         private final CyclicBarrier barrier;\n         private ZooKeeper zkc;\n-        \n+\n         CreateLMThread(String zkConnectString, String root,\n                        String factoryCls, CyclicBarrier barrier) throws Exception {\n             this.factoryCls = factoryCls;\n@@ -224,7 +222,7 @@ public void run() {\n                 LedgerManagerFactory factory =\n                     LedgerManagerFactory.newLedgerManagerFactory(conf, zkc);\n                 factory.uninitialize();\n-                \n+\n                 success = true;\n             } catch (Exception e) {\n                 LOG.error(\"Failed to create ledger manager\", e);\n@@ -234,7 +232,7 @@ public void run() {\n         public boolean isSuccessful() {\n             return success;\n         }\n-        \n+\n         public void close() throws Exception {\n             zkc.close();\n         }\n@@ -245,10 +243,10 @@ public void close() throws Exception {\n     public void testConcurrent1() throws Exception {\n         /// everyone creates the same\n         int numThreads = 50;\n-        \n+\n         // bad version in zookeeper\n         String root0 = \"/lmroot0\";\n-        zkc.create(root0, new byte[0], \n+        zkc.create(root0, new byte[0],\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n \n         CyclicBarrier barrier = new CyclicBarrier(numThreads+1);\n@@ -275,10 +273,10 @@ public void testConcurrent1() throws Exception {\n     public void testConcurrent2() throws Exception {\n         /// odd create different\n         int numThreadsEach = 25;\n-        \n+\n         // bad version in zookeeper\n         String root0 = \"/lmroot0\";\n-        zkc.create(root0, new byte[0], \n+        zkc.create(root0, new byte[0],\n                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n \n         CyclicBarrier barrier = new CyclicBarrier(numThreadsEach*2+1);"},{"sha":"8b52bf5c18135ddb516e0837c39835f5e09b8fc5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -29,8 +29,6 @@\n import java.util.Set;\n import java.util.TreeMap;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.metastore.InMemoryMetastoreTable.MetadataVersion;\n import org.apache.bookkeeper.metastore.MSException.Code;\n import org.apache.bookkeeper.metastore.MetastoreScannableTable.Order;\n@@ -48,7 +46,9 @@\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n \n-public class TestMetaStore extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class TestMetaStore {\n     private final static Logger logger = LoggerFactory.getLogger(TestMetaStore.class);\n \n     protected final static String TABLE = \"myTable\";\n@@ -190,7 +190,6 @@ protected boolean isEqualVersion(Version v1, Version v2) {\n         return v1.compare(v2) == Version.Occurred.CONCURRENTLY;\n     }\n \n-    @Override\n     @Before\n     public void setUp() throws Exception {\n         metastore = MetastoreFactory.createMetaStore(getMetaStoreName());\n@@ -204,7 +203,6 @@ public void setUp() throws Exception {\n         clearTable();\n     }\n \n-    @Override\n     @After\n     public void tearDown() throws Exception {\n         // also clear table after test"},{"sha":"9b90887f63e44e884341635dcdfb7ff29ea0e053","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -29,6 +29,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests for the BookieServer death watcher\n  */"},{"sha":"675c2fd564bce54f97c39d6cb03746205a09d4ac","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -45,6 +45,8 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests for PerChannelBookieClient. Historically, this class has\n  * had a few race conditions, so this is what these tests focus on."},{"sha":"6fbfdb0a4c535b23f7aebc576bbd0276b970eab2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -36,6 +36,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This test verifies the auditor bookie scenarios which will be monitoring the\n  * bookie failures"},{"sha":"b1a53e598df7ed0cad3dfa2785bb52f708bad35e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -54,6 +54,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests publishing of under replicated ledgers by the Auditor bookie node when\n  * corresponding bookies identifes as not running\n@@ -153,7 +155,7 @@ public void testSimpleLedger() throws Exception {\n \n         /*\n          * Sample data format present in the under replicated ledger path\n-         * \n+         *\n          * {4=replica: \"10.18.89.153:5002\"}\n          */\n         assertTrue(\"Ledger is not marked as underreplicated:\" + ledgerId,"},{"sha":"a18d0f691745582c2598788a442fd3da746b7734","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -53,6 +53,8 @@\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This test verifies that the period check on the auditor\n  * will pick up on missing data in the client"},{"sha":"1d4bb00b7ea348c4fa85038c2711a5d99f3af087","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -32,6 +32,8 @@\n \n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Test auditor behaviours during a rolling restart\n  */"},{"sha":"5a50568d2af234d4acbd877ac9419242cf02cb44","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -20,11 +20,12 @@\n  */\n package org.apache.bookkeeper.replication;\n \n-import java.util.concurrent.CountDownLatch;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n \n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /*\n  * Test the AuditorPeer\n  */"},{"sha":"72fd11c55c97de80b49ad7e6a843f1711fbb92a5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -50,6 +50,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Integration tests verifies the complete functionality of the\n  * Auditor-rereplication process: Auditor will publish the bookie failures,"},{"sha":"2872397118ad0d9941d625bbc98ff0c9e0816131","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -43,6 +43,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests verifies bookie vs ledger mapping generating by the BookieLedgerIndexer\n  */"},{"sha":"e1ccf6895eba5f8c4ecffe3ab637cbd20bf902d2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -35,6 +35,8 @@\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n public class TestAutoRecoveryAlongWithBookieServers extends\n         BookKeeperClusterTestCase {\n "},{"sha":"d47e4b1ed4cf6c050062b11a4c5cc2fb97a2ba08","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -45,6 +45,8 @@\n import java.util.Map.Entry;\n import java.util.Set;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Test the ReplicationWroker, where it has to replicate the fragments from\n  * failed Bookies to given target Bookie."},{"sha":"28eff34681b77e92de95ffc29959def33e4b6ca8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -42,6 +42,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This test tests read and write, synchronous and asynchronous, strings and\n  * integers for a BookKeeper client. The test deployment uses a ZooKeeper server"},{"sha":"9662777b5201aca9d4ecb80ba7c3ec52470bad57","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -32,8 +32,6 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n@@ -59,7 +57,7 @@\n /**\n  * A class runs several bookie servers for testing.\n  */\n-public abstract class BookKeeperClusterTestCase extends TestCase {\n+public abstract class BookKeeperClusterTestCase {\n \n     static final Logger LOG = LoggerFactory.getLogger(BookKeeperClusterTestCase.class);\n \n@@ -86,9 +84,8 @@ public BookKeeperClusterTestCase(int numBookies) {\n     }\n \n     @Before\n-    @Override\n     public void setUp() throws Exception {\n-        LOG.info(\"Setting up test {}\", getName());\n+        LOG.info(\"Setting up test {}\", getClass());\n         InMemoryMetaStore.reset();\n         setMetastoreImplClass(baseConf);\n         setMetastoreImplClass(baseClientConf);\n@@ -105,14 +102,13 @@ public void setUp() throws Exception {\n     }\n \n     @After\n-    @Override\n     public void tearDown() throws Exception {\n         LOG.info(\"TearDown\");\n         // stop bookkeeper service\n         stopBKCluster();\n         // stop zookeeper service\n         stopZKCluster();\n-        LOG.info(\"Tearing down test {}\", getName());\n+        LOG.info(\"Tearing down test {}\", getClass());\n     }\n \n     /**\n@@ -304,7 +300,7 @@ public void run() {\n      *\n      * @param addr\n      *          Socket Address\n-     * @param latch\n+     * @param l\n      *          Latch to wait on\n      * @throws InterruptedException\n      * @throws IOException\n@@ -379,8 +375,6 @@ public void restartBookies(ServerConfiguration newConf)\n      * number. Also, starts the auto recovery process, if the\n      * isAutoRecoveryEnabled is set true.\n      *\n-     * @param port\n-     *            Port to start the new bookie server on\n      * @throws IOException\n      */\n     public int startNewBookie()\n@@ -560,7 +554,7 @@ public Auditor getAuditor(int timeout, TimeUnit unit) throws Exception {\n      * address. Represent as 'hostname/IPaddress' if the InetSocketAddress was\n      * created using hostname. Represent as '/IPaddress' if the\n      * InetSocketAddress was created using an IPaddress\n-     * \n+     *\n      * @param addr\n      *            inetaddress\n      * @return true if the address was created using an IP address, false if the"},{"sha":"ef7ac5d26c011902facf6feb8ff0d5022b78370c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -26,8 +26,6 @@\n import java.util.Arrays;\n import java.util.concurrent.Executors;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -43,11 +41,15 @@\n import org.jboss.netty.buffer.ChannelBuffers;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class BookieClientTest extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class BookieClientTest {\n     private final static Logger LOG = LoggerFactory.getLogger(BookieClientTest.class);\n     BookieServer bs;\n     File tmpDir;\n@@ -56,7 +58,7 @@\n     public OrderedSafeExecutor executor;\n     ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n \n-    @Override\n+    @Before\n     public void setUp() throws Exception {\n         tmpDir = File.createTempFile(\"bookie\", \"test\");\n         tmpDir.delete();\n@@ -76,7 +78,7 @@ public void setUp() throws Exception {\n         executor = new OrderedSafeExecutor(2, \"BKClientOrderedSafeExecutor\");\n     }\n \n-    @Override\n+    @After\n     public void tearDown() throws Exception {\n         bs.shutdown();\n         recursiveDelete(tmpDir);"},{"sha":"2ece28dd2d2eec2f2fd8aa11221915b9c1eddc1f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -26,7 +26,6 @@\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.Random;\n-import java.util.Set;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BKException;\n@@ -42,6 +41,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This test tests read and write, synchronous and asynchronous, strings and\n  * integers for a BookKeeper client. The test deployment uses a ZooKeeper server\n@@ -366,7 +367,7 @@ public void testLedgerOpenAfterBKCrashed() throws Exception {\n      * the future.addlistener() in PerChannelBookieClient after the connection\n      * establishment. Now the future.addlistener() will notify back in the same\n      * thread and simultaneously invoke the pendingOp.operationComplete() event.\n-     * \n+     *\n      * BOOKKEEPER-326\n      */\n     @Test(timeout=60000)"},{"sha":"a72bf578cddb3bd34526a9b1c107eabf541dff49","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -39,6 +39,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This class tests that bookie rolling journals\n  */\n@@ -181,7 +183,7 @@ public void testJournalRolling() throws Exception {\n         // Sleep for a while to ensure data are flushed\n         Thread.sleep(2000);\n \n-        // verify that we only keep at most journal files \n+        // verify that we only keep at most journal files\n         for (File journalDir : tmpDirs) {\n             File[] journals = journalDir.listFiles();\n             int numJournals = 0;\n@@ -194,7 +196,7 @@ public void testJournalRolling() throws Exception {\n             assertTrue(numJournals <= 2);\n         }\n \n-        // restart bookies \n+        // restart bookies\n         // ensure after restart we can read the entries since journals rolls\n         restartBookies();\n         validLedgerEntries(ledgerIds, 1024, 1024);"},{"sha":"4d29ff48d152d0335e764e018a32ac36c8dd142e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -23,25 +23,19 @@\n \n import java.io.File;\n import java.io.IOException;\n-import java.lang.NoSuchFieldException;\n-import java.lang.IllegalAccessException;\n-import java.lang.reflect.Field;\n import java.nio.ByteBuffer;\n import java.nio.charset.Charset;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.Random;\n-import java.util.Set;\n import java.util.Arrays;\n-import java.util.concurrent.Semaphore;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -55,6 +49,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This test tests read and write, synchronous and asynchronous, strings and\n  * integers for a BookKeeper client. The test deployment uses a ZooKeeper server"},{"sha":"93256a7c3dec8714b8c42dd3e41f2d23b60624db","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -29,7 +29,6 @@\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n import java.util.HashSet;\n-import junit.framework.TestCase;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.bookie.Bookie;\n "},{"sha":"caf1c3d0c456821c583a36926d2be065da84de42","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -27,8 +27,6 @@\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -41,10 +39,12 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests writing to concurrent ledgers\n  */\n-public class ConcurrentLedgerTest extends TestCase {\n+public class ConcurrentLedgerTest {\n     private final static Logger LOG = LoggerFactory.getLogger(ConcurrentLedgerTest.class);\n \n     Bookie bookie;\n@@ -53,7 +53,6 @@\n     Semaphore throttle;\n     ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n \n-    @Override\n     @Before\n     public void setUp() throws Exception {\n         String txnDirName = System.getProperty(\"txnDir\");\n@@ -91,7 +90,6 @@ static void recursiveDelete(File f) {\n         }\n     }\n \n-    @Override\n     @After\n     public void tearDown() {\n         bookie.shutdown();"},{"sha":"a06accd77058a221616015f9fb4ed0bf0cbb032d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -41,10 +41,11 @@\n import org.junit.Before;\n import org.junit.Test;\n \n-import junit.framework.TestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Tests conditional set of the ledger metadata znode.\n  */\n@@ -72,8 +73,8 @@ public void setUp() throws IOException, Exception {\n      * Opens a ledger before the ledger writer, which triggers ledger recovery.\n      * When the ledger writer tries to close the ledger, the close operation\n      * should fail.\n-     * \n-     * \n+     *\n+     *\n      * @throws IOException\n      * @throws InterruptedException\n      * @throws BKException"},{"sha":"ac4e0e0af08c34291bb394fd5e6573ae9db7a20a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -23,11 +23,11 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n \n-import junit.framework.TestCase;\n-\n import org.junit.Test;\n \n-public class ConfigurationTest extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class ConfigurationTest {\n     @Test(timeout=60000)\n     public void testConfigurationOverwrite() {\n         System.clearProperty(\"zkServers\");"},{"sha":"d45a2f31003e3fd5f24810a73ca5415cb42e843c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -34,6 +34,8 @@\n import org.junit.Before;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * This class tests the ledger delete functionality both from the BookKeeper\n  * client and the server side."},{"sha":"b747b51c5e86056c611670d919969aa22da90aca","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -40,6 +40,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.junit.Assert.*;\n+\n public class MultipleThreadReadTest extends BookKeeperClusterTestCase {\n     static Logger LOG = LoggerFactory.getLogger(MultipleThreadReadTest.class);\n     BookKeeper.DigestType digestType;"},{"sha":"8ccd07d851b0af5293ffb6a68827da586927aa81","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -32,6 +32,8 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.junit.Test;\n \n+import static org.junit.Assert.*;\n+\n /**\n  * Test to verify the readonly feature of bookies\n  */"},{"sha":"08b8c6773a299e33a1bd573231445901f4f88f39","filename":"hedwig-client/src/test/java/org/apache/hedwig/client/AppTest.java","status":"removed","additions":0,"deletions":51,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/37fda574a530eedc6bd3ba5030e2f3e0805c10f8/hedwig-client/src/test/java/org/apache/hedwig/client/AppTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/37fda574a530eedc6bd3ba5030e2f3e0805c10f8/hedwig-client/src/test/java/org/apache/hedwig/client/AppTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/test/java/org/apache/hedwig/client/AppTest.java?ref=37fda574a530eedc6bd3ba5030e2f3e0805c10f8","patch":"@@ -1,51 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig.client;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-/**\n- * Unit test for simple App.\n- */\n-public class AppTest extends TestCase {\n-    /**\n-     * Create the test case\n-     *\n-     * @param testName\n-     *            name of the test case\n-     */\n-    public AppTest(String testName) {\n-        super(testName);\n-    }\n-\n-    /**\n-     * @return the suite of tests being tested\n-     */\n-    public static Test suite() {\n-        return new TestSuite(AppTest.class);\n-    }\n-\n-    /**\n-     * Rigourous Test :-)\n-     */\n-    public void testApp() {\n-        assertTrue(true);\n-    }\n-}"},{"sha":"53e99b36ecc3f815a4b8ae31d94f9e038161d203","filename":"hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/test/java/org/apache/hedwig/util/TestFileUtils.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -21,9 +21,9 @@\n \n import org.junit.Test;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n-public class TestFileUtils extends TestCase {\n+public class TestFileUtils {\n \n     @Test(timeout=60000)\n     public void testCreateTmpDirectory() throws Exception {"},{"sha":"b6bb78a5ae44b5ccadc2bf229928d6ad4fa5956b","filename":"hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/test/java/org/apache/hedwig/util/TestHedwigSocketAddress.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -19,11 +19,11 @@\n \n import java.net.InetSocketAddress;\n \n-import junit.framework.TestCase;\n-\n import org.junit.Test;\n \n-public class TestHedwigSocketAddress extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class TestHedwigSocketAddress {\n \n     // Common values used by tests\n     private String hostname = \"localhost\";"},{"sha":"a596841eecd44f82c0b237d1b1205a06aa59d451","filename":"hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/test/java/org/apache/hedwig/util/TestPathUtils.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -19,11 +19,11 @@\n \n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n-\n import org.junit.Test;\n \n-public class TestPathUtils extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class TestPathUtils {\n \n     @Test(timeout=60000)\n     public void testPrefixes() {"},{"sha":"c206ce41f7603e7fab815d1703bd63717eae6b84","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -36,7 +36,6 @@\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n@@ -53,6 +52,8 @@\n import org.apache.hedwig.util.SubscriptionListener;\n import org.apache.hedwig.util.HedwigSocketAddress;\n \n+import static org.junit.Assert.*;\n+\n @RunWith(Parameterized.class)\n public class TestPubSubClient extends PubSubServerStandAloneTestBase {\n \n@@ -230,7 +231,7 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n                                              Message msg, Callback<Void> callback,\n                                              Object context) {\n                 String str = msg.getBody().toStringUtf8();\n-                receivedMsgs.put(str, msg.getMsgId()); \n+                receivedMsgs.put(str, msg.getMsgId());\n                 if (numMessages == numReceived.incrementAndGet()) {\n                     receiveLatch.countDown();\n                 }\n@@ -296,7 +297,7 @@ synchronized public void deliver(ByteString topic, ByteString subscriberId,\n                                              Message msg, Callback<Void> callback,\n                                              Object context) {\n                 String str = msg.getBody().toStringUtf8();\n-                receivedMsgs.put(str, msg.getMsgId()); \n+                receivedMsgs.put(str, msg.getMsgId());\n                 if (numMessages == numReceived.incrementAndGet()) {\n                     receiveLatch.countDown();\n                 }"},{"sha":"6fa34076133dc90b3495637459cbffe4b18284ba","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -37,6 +37,8 @@\n \n import com.google.protobuf.ByteString;\n \n+import static org.junit.Assert.*;\n+\n public class TestSubAfterCloseSub extends HedwigHubTestBase {\n \n     class TestClientConfiguration extends HubClientConfiguration {"},{"sha":"e93ecae64810a8dd79adaac3f22a1e8f92d56b28","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -26,7 +26,6 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.api.MessageHandler;\n-import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.api.Subscriber;\n@@ -38,6 +37,8 @@\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.util.Callback;\n \n+import static org.junit.Assert.*;\n+\n public class TestMultiplexing extends HedwigHubTestBase {\n \n     private static final int DEFAULT_MSG_WINDOW_SIZE = 10;"},{"sha":"ecc444e1fe9984c931cbc344214b52d0eff8c3d4","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -21,7 +21,6 @@\n import java.util.List;\n \n import junit.framework.TestCase;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.junit.After;\n@@ -74,7 +73,6 @@ protected HedwigHubTestBase(int numServers) {\n     }\n \n     public HedwigHubTestBase(String name, int numServers) {\n-        super(name);\n         this.numServers = numServers;\n         init();\n     }\n@@ -172,10 +170,9 @@ protected void stopHubServers() throws Exception {\n         serversList.clear();\n     }\n \n-    @Override\n     @Before\n     protected void setUp() throws Exception {\n-        logger.info(\"STARTING \" + getName());\n+        logger.info(\"STARTING \" + getClass());\n         if (! standalone) {\n             bktb = new BookKeeperTestBase(numBookies, readDelay);\n             bktb.setUp();\n@@ -184,13 +181,12 @@ protected void setUp() throws Exception {\n         logger.info(\"HedwigHub test setup finished\");\n     }\n \n-    @Override\n     @After\n     protected void tearDown() throws Exception {\n         logger.info(\"tearDown starting\");\n         stopHubServers();\n         if (null != bktb) bktb.tearDown();\n-        logger.info(\"FINISHED \" + getName());\n+        logger.info(\"FINISHED \" + getClass());\n     }\n \n }"},{"sha":"adb4ea9aa9924c2154e807870995468d793fa7c6","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -22,8 +22,6 @@\n import java.util.List;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.junit.After;\n@@ -35,7 +33,6 @@\n import org.apache.hedwig.server.netty.PubSubServer;\n import org.apache.hedwig.server.persistence.BookKeeperTestBase;\n import org.apache.hedwig.util.HedwigSocketAddress;\n-import org.apache.hedwig.server.LoggingExceptionHandler;\n \n import org.apache.bookkeeper.test.PortManager;\n \n@@ -45,7 +42,7 @@\n  * the required BookKeeper and ZooKeeper instances.\n  *\n  */\n-public abstract class HedwigRegionTestBase extends TestCase {\n+public abstract class HedwigRegionTestBase {\n \n     protected static Logger logger = LoggerFactory.getLogger(HedwigRegionTestBase.class);\n \n@@ -182,10 +179,9 @@ public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n         };\n     }\n \n-    @Override\n     @Before\n     public void setUp() throws Exception {\n-        logger.info(\"STARTING \" + getName());\n+        logger.info(\"STARTING \" + getClass());\n         bktb = new BookKeeperTestBase(numBookies);\n         bktb.setUp();\n \n@@ -211,7 +207,6 @@ public void setUp() throws Exception {\n         logger.info(\"HedwigRegion test setup finished\");\n     }\n \n-    @Override\n     @After\n     public void tearDown() throws Exception {\n         logger.info(\"tearDown starting\");\n@@ -230,7 +225,7 @@ public void tearDown() throws Exception {\n         regionServersMap.clear();\n         // Shutdown the BookKeeper and ZooKeeper stuff\n         bktb.tearDown();\n-        logger.info(\"FINISHED \" + getName());\n+        logger.info(\"FINISHED \" + getClass());\n     }\n \n     protected void stopRegion(int regionIdx) throws Exception {"},{"sha":"be5722bf30faaedc6829c7f10ce49bee74abcc55","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -17,8 +17,6 @@\n  */\n package org.apache.hedwig.server;\n \n-import junit.framework.TestCase;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.junit.After;\n@@ -27,15 +25,14 @@\n import org.apache.bookkeeper.test.PortManager;\n \n import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.server.LoggingExceptionHandler;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.netty.PubSubServer;\n import org.apache.hedwig.util.HedwigSocketAddress;\n \n /**\n  * This is a base class for any tests that need a StandAlone PubSubServer setup.\n  */\n-public abstract class PubSubServerStandAloneTestBase extends TestCase {\n+public abstract class PubSubServerStandAloneTestBase {\n \n     protected static Logger logger = LoggerFactory.getLogger(PubSubServerStandAloneTestBase.class);\n \n@@ -67,22 +64,20 @@ public ServerConfiguration getStandAloneServerConfiguration() {\n     protected ServerConfiguration conf;\n     protected HedwigSocketAddress defaultAddress;\n \n-    @Override\n     @Before\n     public void setUp() throws Exception {\n-        logger.info(\"STARTING \" + getName());\n+        logger.info(\"STARTING \" + getClass());\n         conf = getStandAloneServerConfiguration();\n         startHubServer(conf);\n         logger.info(\"Standalone PubSubServer test setup finished\");\n     }\n \n \n-    @Override\n     @After\n     public void tearDown() throws Exception {\n         logger.info(\"tearDown starting\");\n         tearDownHubServer();\n-        logger.info(\"FINISHED \" + getName());\n+        logger.info(\"FINISHED \" + getClass());\n     }\n \n     protected HedwigSocketAddress getDefaultHedwigAddress() {"},{"sha":"43739e7cb878a653ae404fdfed6ea0e5ae395120","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -19,7 +19,6 @@\n \n import java.net.InetAddress;\n import java.io.File;\n-import java.io.IOException;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n@@ -28,8 +27,6 @@\n \n import com.google.protobuf.ByteString;\n \n-import junit.framework.TestCase;\n-\n import org.junit.Test;\n import static org.junit.Assert.*;\n \n@@ -39,14 +36,13 @@\n import org.apache.hedwig.util.HedwigSocketAddress;\n \n import org.apache.commons.configuration.Configuration;\n-import org.apache.commons.configuration.ConfigurationException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * Test Backward Compatability between different versions\n  */\n-public class TestBackwardCompat extends TestCase {\n+public class TestBackwardCompat {\n \n     private static Logger logger = LoggerFactory.getLogger(TestBackwardCompat.class);\n "},{"sha":"46c0c17758af78a9dd540af9baa96effbb8791c4","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -54,6 +54,8 @@\n \n import com.google.protobuf.ByteString;\n \n+import static org.junit.Assert.*;\n+\n @RunWith(Parameterized.class)\n public class TestThrottlingDelivery extends HedwigHubTestBase {\n "},{"sha":"4a5c63d4b35b6848c6cc90dd0ff6838482be2fd9","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestBaseHandler.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -18,7 +18,6 @@\n package org.apache.hedwig.server.handlers;\n \n import java.util.List;\n-import junit.framework.TestCase;\n \n import org.jboss.netty.channel.Channel;\n import org.junit.Before;\n@@ -32,7 +31,9 @@\n import org.apache.hedwig.server.topics.StubTopicManager;\n import org.apache.hedwig.server.topics.TopicManager;\n \n-public class TestBaseHandler extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class TestBaseHandler {\n \n     MyBaseHandler handler;\n     StubTopicManager tm;\n@@ -58,7 +59,6 @@ public void handleRequestAtOwner(PubSubRequest request, Channel channel) {\n \n     }\n \n-    @Override\n     @Before\n     public void setUp() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();"},{"sha":"93f5c2e720cea96656117dedde47891f10f8ba17","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -21,6 +21,8 @@\n import java.util.Set;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.junit.Before;\n import org.junit.Test;\n \n import com.google.protobuf.ByteString;\n@@ -51,9 +53,9 @@\n import org.apache.hedwig.server.topics.TrivialOwnAllTopicManager;\n import org.apache.hedwig.util.ConcurrencyUtils;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n-public class TestSubUnsubHandler extends TestCase {\n+public class TestSubUnsubHandler {\n \n     SubscribeHandler sh;\n     StubDeliveryManager dm;\n@@ -67,10 +69,8 @@\n     ByteString subscriberId;\n     UnsubscribeHandler ush;\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-\n+    @Before\n+    public void setUp() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n         ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n "},{"sha":"1867f9c27d52dd309eadf5d0078e6b267686a25e","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -18,8 +18,6 @@\n package org.apache.hedwig.server.integration;\n \n import java.net.InetSocketAddress;\n-import java.util.Arrays;\n-import java.util.Collection;\n import java.util.HashSet;\n import java.util.concurrent.SynchronousQueue;\n \n@@ -36,7 +34,6 @@\n import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.client.api.Client;\n import org.apache.hedwig.client.api.Publisher;\n-import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n@@ -62,6 +59,8 @@\n import org.apache.bookkeeper.test.PortManager;\n import org.apache.hedwig.server.LoggingExceptionHandler;\n \n+import static org.junit.Assert.*;\n+\n public abstract class TestHedwigHub extends HedwigHubTestBase {\n \n     // Client side variables"},{"sha":"bce41e57525dc593e9fe65a45e32004b99ee0cfc","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -23,7 +23,6 @@\n import java.util.Random;\n import java.util.concurrent.SynchronousQueue;\n \n-import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -43,6 +42,8 @@\n import org.apache.hedwig.server.integration.TestHedwigHub.TestMessageHandler;\n import org.apache.hedwig.util.HedwigSocketAddress;\n \n+import static org.junit.Assert.*;\n+\n @RunWith(Parameterized.class)\n public class TestHedwigRegion extends HedwigRegionTestBase {\n \n@@ -220,7 +221,7 @@ public void testSubscribeAndConsumeWhenARegionDown() throws Exception {\n     @Test(timeout=60000)\n     public void testAttachExistingSubscriptionsWhenARegionDown() throws Exception {\n         int batchSize = 10;\n-        \n+\n         SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n             .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n \n@@ -286,7 +287,7 @@ public void testAttachExistingSubscriptionsWhenARegionDown() throws Exception {\n \n         // Now start publishing messages for the subscribed topics in one of the\n         // regions and verify that it gets delivered and consumed in all of the\n-        // other ones.        \n+        // other ones.\n         Publisher publisher = client.getPublisher();\n         for (int i = 0; i < batchSize; i++) {\n             publisher.asyncPublish(ByteString.copyFromUtf8(\"Topic\" + i), Message.newBuilder().setBody("},{"sha":"241f45bbcb88e54f96be30c222ab1a9c6b65924b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -47,6 +47,8 @@\n import org.apache.hedwig.util.HedwigSocketAddress;\n import org.apache.hedwig.zookeeper.SafeAsyncZKCallback;\n \n+import static org.junit.Assert.*;\n+\n public class TestPubSubServer extends PubSubServerStandAloneTestBase {\n \n     @Test(timeout=60000)"},{"sha":"045935912951da96ad42aad36a6ef9a4ba6fac9d","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -31,8 +31,6 @@\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.TimeUnit;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n \n@@ -70,8 +68,10 @@\n \n import com.google.protobuf.ByteString;\n \n+import static org.junit.Assert.*;\n+\n @RunWith(Parameterized.class)\n-public class TestBookKeeperPersistenceManager extends TestCase {\n+public class TestBookKeeperPersistenceManager {\n     static Logger logger = LoggerFactory.getLogger(TestPersistenceManagerBlackBox.class);\n \n     BookKeeperTestBase bktb;\n@@ -300,18 +300,14 @@ private void stopCluster() throws Exception {\n         bktb.tearDown();\n     }\n \n-    @Override\n     @Before\n     public void setUp() throws Exception {\n-        super.setUp();\n         startCluster(0L);\n     }\n \n-    @Override\n     @After\n     public void tearDown() throws Exception {\n         stopCluster();\n-        super.tearDown();\n     }\n \n     class RangeScanVerifier implements ScanCallback {\n@@ -497,7 +493,7 @@ private void failedToDeleteLedgersTest(int numLedgers) throws Exception {\n         Boolean b = statusQueue.poll(10 * readDelay, TimeUnit.MILLISECONDS);\n         assertTrue(\"Should succeed to scan messages after deleted consumed ledger.\", b);\n \n-        // consumed \n+        // consumed\n         consumedUntil(topic, (numLedgers + 1) * 2L);\n         // Wait until ledger ranges is updated.\n         Thread.sleep(2000L);"},{"sha":"f7bcac89782cd0ee59b4ae8d41b85ba23d687966","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManagerBlackBox.java","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManagerBlackBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManagerBlackBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManagerBlackBox.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -36,19 +36,20 @@\n \n     MetadataManagerFactory metadataManagerFactory = null;\n \n-    @Override\n     @Before\n-    protected void setUp() throws Exception {\n+    @Override\n+    public void setUp() throws Exception {\n         // We need to setUp this class first since the super.setUp() method will\n         // need the BookKeeperTestBase to be instantiated.\n         bktb = new BookKeeperTestBase(numBookies);\n         bktb.setUp();\n         super.setUp();\n     }\n \n-    @Override\n+\n     @After\n-    protected void tearDown() throws Exception {\n+    @Override\n+    public void tearDown() throws Exception {\n         bktb.tearDown();\n         super.tearDown();\n         if (null != metadataManagerFactory) {\n@@ -79,8 +80,4 @@ public long getExpectedSeqId(int numPublished) {\n         return numPublished;\n     }\n \n-    public static Test suite() {\n-        return new TestSuite(TestBookKeeperPersistenceManagerBlackBox.class);\n-    }\n-\n }"},{"sha":"f9dde4fb86f2d8f613542bfb85a254820c8ec5aa","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookkeeperPersistenceManagerWhiteBox.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -22,8 +22,6 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n \n-import junit.framework.TestCase;\n-\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.hedwig.protocol.PubSubProtocol;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n@@ -46,7 +44,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TestBookkeeperPersistenceManagerWhiteBox extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public class TestBookkeeperPersistenceManagerWhiteBox {\n \n     protected static Logger logger =\n         LoggerFactory.getLogger(TestBookkeeperPersistenceManagerWhiteBox.class);\n@@ -60,10 +60,8 @@\n     TopicManager tm;\n     ByteString topic = ByteString.copyFromUtf8(\"topic0\");\n \n-    @Override\n     @Before\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    public void setUp() throws Exception {\n         bktb = new BookKeeperTestBase(numBookies);\n         bktb.setUp();\n \n@@ -76,12 +74,10 @@ protected void setUp() throws Exception {\n         bkpm = new BookkeeperPersistenceManager(bktb.bk, mm, tm, conf, scheduler);\n     }\n \n-    @Override\n     @After\n-    protected void tearDown() throws Exception {\n+    public void tearDown() throws Exception {\n         mm.shutdown();\n         bktb.tearDown();\n-        super.tearDown();\n     }\n \n     @Test(timeout=60000)"},{"sha":"6e81fc7d6c2e64f301f7f1b55aa4bc2719896a30","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -33,7 +33,6 @@\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n-import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;"},{"sha":"6a872597ec273491793e2dc56e6425505f8ad84f","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestLocalDBPersistenceManagerBlackBox.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestLocalDBPersistenceManagerBlackBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestLocalDBPersistenceManagerBlackBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestLocalDBPersistenceManagerBlackBox.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -20,17 +20,24 @@\n import junit.framework.Test;\n import junit.framework.TestSuite;\n \n-import org.apache.hedwig.server.persistence.LocalDBPersistenceManager;\n-import org.apache.hedwig.server.persistence.PersistenceManager;\n+import org.junit.After;\n+import org.junit.Before;\n \n public class TestLocalDBPersistenceManagerBlackBox extends TestPersistenceManagerBlackBox {\n \n+    @After\n     @Override\n-    protected void tearDown() throws Exception {\n+    public void tearDown() throws Exception {\n         super.tearDown();\n         ((LocalDBPersistenceManager) persistenceManager).reset();\n     }\n \n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n     @Override\n     long getLowestSeqId() {\n         return 1;\n@@ -46,8 +53,4 @@ public long getExpectedSeqId(int numPublished) {\n         return numPublished;\n     }\n \n-    public static Test suite() {\n-        return new TestSuite(TestLocalDBPersistenceManagerBlackBox.class);\n-    }\n-\n }"},{"sha":"0133d10e0b4129a764632af48f5e4e0b76e219b9","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestPersistenceManagerBlackBox.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -23,8 +23,6 @@\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.TimeUnit;\n \n-import junit.framework.TestCase;\n-\n import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -37,7 +35,9 @@\n import org.apache.hedwig.server.topics.TopicOwnershipChangeListener;\n import org.apache.hedwig.util.Callback;\n \n-public abstract class TestPersistenceManagerBlackBox extends TestCase {\n+import static org.junit.Assert.*;\n+\n+public abstract class TestPersistenceManagerBlackBox {\n     protected PersistenceManager persistenceManager;\n     protected int NUM_MESSAGES_TO_TEST = 5;\n     protected int NUM_TOPICS_TO_TEST = 5;\n@@ -215,9 +215,8 @@ public void run() {\n \n     }\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        logger.info(\"STARTING \" + getName());\n+    public void setUp() throws Exception {\n+        logger.info(\"STARTING \" + getClass());\n         persistenceManager = instantiatePersistenceManager();\n         failureException = null;\n         logger.info(\"Persistence Manager test setup finished\");\n@@ -227,12 +226,10 @@ protected void setUp() throws Exception {\n \n     abstract PersistenceManager instantiatePersistenceManager() throws Exception;\n \n-    @Override\n-    protected void tearDown() throws Exception {\n+    public void tearDown() throws Exception {\n         logger.info(\"tearDown starting\");\n         persistenceManager.stop();\n-        super.tearDown();\n-        logger.info(\"FINISHED \" + getName());\n+        logger.info(\"FINISHED \" + getClass());\n     }\n \n     protected ByteString getTopicName(int number) {"},{"sha":"2e59a8a2e43e37cca7768efb5f9061593ddf6a20","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheBlackBox.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheBlackBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheBlackBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheBlackBox.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -21,18 +21,24 @@\n import junit.framework.TestSuite;\n \n import org.apache.hedwig.server.common.ServerConfiguration;\n-import org.apache.hedwig.server.persistence.LocalDBPersistenceManager;\n-import org.apache.hedwig.server.persistence.PersistenceManager;\n-import org.apache.hedwig.server.persistence.ReadAheadCache;\n+import org.junit.After;\n+import org.junit.Before;\n \n public class TestReadAheadCacheBlackBox extends TestPersistenceManagerBlackBox {\n \n+    @After\n     @Override\n-    protected void tearDown() throws Exception {\n+    public void tearDown() throws Exception {\n         super.tearDown();\n         LocalDBPersistenceManager.instance().reset();\n     }\n \n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n     @Override\n     long getExpectedSeqId(int numPublished) {\n         return numPublished;\n@@ -48,7 +54,4 @@ PersistenceManager instantiatePersistenceManager() {\n         return new ReadAheadCache(LocalDBPersistenceManager.instance(), new ServerConfiguration()).start();\n     }\n \n-    public static Test suite() {\n-        return new TestSuite(TestReadAheadCacheBlackBox.class);\n-    }\n }"},{"sha":"2179030c6f6684723c9931caa776b1f0f9b6da38","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestReadAheadCacheWhiteBox.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -94,11 +94,6 @@ public void setUp() throws Exception {\n         cacheBasedPersistenceManager = new MyReadAheadCache(stubPersistenceManager, myConf).start();\n     }\n \n-    @After\n-    public void tearDown() throws Exception {\n-\n-    }\n-\n     @Test(timeout=60000)\n     public void testPersistMessage() throws Exception {\n         StubCallback<PubSubProtocol.MessageSeqId> callback = new StubCallback<PubSubProtocol.MessageSeqId>();"},{"sha":"f185bb4ce11b6e22495afce584c2bdea0c2121f5","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","raw_url":"https://github.com/apache/bookkeeper/raw/8f09334e24deaa8e80674a702c498d802986f3c8/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java?ref=8f09334e24deaa8e80674a702c498d802986f3c8","patch":"@@ -23,21 +23,21 @@\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.api.Subscriber;\n-import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.server.HedwigHubTestBase;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.ConcurrencyUtils;\n-import org.apache.hedwig.util.HedwigSocketAddress;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n import com.google.protobuf.ByteString;\n \n+import static org.junit.Assert.*;\n+\n public class TestUpdateSubscriptionState extends HedwigHubTestBase {\n \n     private static final int RETENTION_SECS_VALUE = 100;"}]}

