{"sha":"91595fc04ac6168b5a652e803e55caadae757f74","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5MTU5NWZjMDRhYzYxNjhiNWE2NTJlODAzZTU1Y2FhZGFlNzU3Zjc0","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-04-27T07:00:34Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-04-27T07:00:34Z"},"message":"BOOKKEEPER-911: Fix TestReplicationWorker tests in master\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>, Flavio Junqueira <fpj@apache.org>\n\nCloses #29 from merlimat/bk-911","tree":{"sha":"0832ca87b8b7d574092b7246fd0f7453ce6dbcc8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0832ca87b8b7d574092b7246fd0f7453ce6dbcc8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/91595fc04ac6168b5a652e803e55caadae757f74","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/91595fc04ac6168b5a652e803e55caadae757f74","html_url":"https://github.com/apache/bookkeeper/commit/91595fc04ac6168b5a652e803e55caadae757f74","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/91595fc04ac6168b5a652e803e55caadae757f74/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"10cab08d0a8b4ca4b182554dee95834dc42175d2","url":"https://api.github.com/repos/apache/bookkeeper/commits/10cab08d0a8b4ca4b182554dee95834dc42175d2","html_url":"https://github.com/apache/bookkeeper/commit/10cab08d0a8b4ca4b182554dee95834dc42175d2"}],"stats":{"total":33,"additions":23,"deletions":10},"files":[{"sha":"e686e115c61b005ae72f621cbaa883c5d4a45add","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/91595fc04ac6168b5a652e803e55caadae757f74/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/91595fc04ac6168b5a652e803e55caadae757f74/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=91595fc04ac6168b5a652e803e55caadae757f74","patch":"@@ -73,6 +73,7 @@\n     private final ServerConfiguration conf;\n     private final ZooKeeper zkc;\n     private volatile boolean workerRunning = false;\n+    private volatile boolean isInReadOnlyMode = false;\n     final private BookKeeperAdmin admin;\n     private final LedgerChecker ledgerChecker;\n     private final BookieSocketAddress targetBookie;\n@@ -186,9 +187,12 @@ private static void waitBackOffTime() {\n \n     private void waitTillTargetBookieIsWritable() {\n         LOG.info(\"Waiting for target bookie {} to be back in read/write mode\", targetBookie);\n-        while (admin.getReadOnlyBookies().contains(targetBookie)) {\n+        while (workerRunning && admin.getReadOnlyBookies().contains(targetBookie)) {\n+            isInReadOnlyMode = true;\n             waitBackOffTime();\n         }\n+\n+        isInReadOnlyMode = false;\n         LOG.info(\"Target bookie {} is back in read/write mode\", targetBookie);\n     }\n \n@@ -451,6 +455,10 @@ boolean isRunning() {\n         return workerRunning && workerThread.isAlive();\n     }\n \n+    boolean isInReadOnlyMode() {\n+        return isInReadOnlyMode;\n+    }\n+\n     private boolean isTargetBookieExistsInFragmentEnsemble(LedgerHandle lh,\n             LedgerFragment ledgerFragment) {\n         List<BookieSocketAddress> ensemble = ledgerFragment.getEnsemble();"},{"sha":"93890fac08681b89ae3cae32294abd1e3fe11ea9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/91595fc04ac6168b5a652e803e55caadae757f74/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/91595fc04ac6168b5a652e803e55caadae757f74/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=91595fc04ac6168b5a652e803e55caadae757f74","patch":"@@ -506,10 +506,10 @@ public void testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsNotUR()\n     }\n \n     /**\n-     * Test that if the local bookie turns out to be readonly, then no point in running RW. So RW should shutdown.\n+     * Test that if the local bookie turns out to be read-only, then the replicator will pause but not shutdown.\n      */\n     @Test(timeout = 20000)\n-    public void testRWShutdownOnLocalBookieReadonlyTransition() throws Exception {\n+    public void testRWOnLocalBookieReadonlyTransition() throws Exception {\n         LedgerHandle lh = bkc.createLedger(3, 3, BookKeeper.DigestType.CRC32, TESTPASSWD);\n \n         for (int i = 0; i < 10; i++) {\n@@ -537,21 +537,22 @@ public void testRWShutdownOnLocalBookieReadonlyTransition() throws Exception {\n             bsConfs.get(bsConfs.size() - 1).setReadOnlyModeEnabled(true);\n             newBk.getBookie().doTransitionToReadOnlyMode();\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(), replicaToKill.toString());\n-            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh.getId(), basePath) && rw.isRunning()) {\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh.getId(), basePath) && rw.isRunning()\n+                    && !rw.isInReadOnlyMode()) {\n                 Thread.sleep(100);\n             }\n             assertNull(zkc.exists(String.format(\"%s/urL%010d\", baseLockPath, lh.getId()), false));\n-            assertFalse(\"RW should shutdown if the bookie is readonly\", rw.isRunning());\n+            assertTrue(\"RW should continue even if the bookie is readonly\", rw.isRunning());\n         } finally {\n             rw.shutdown();\n         }\n     }\n \n     /**\n-     * Test that the replication worker will shutdown if it lose its zookeeper session\n+     * Test that the replication worker will not shutdown on a simple ZK disconnection\n      */\n     @Test(timeout=30000)\n-    public void testRWZKSessionLost() throws Exception {\n+    public void testRWZKConnectionLost() throws Exception {\n         ZooKeeper zk = ZooKeeperClient.newBuilder()\n                 .connectString(zkUtil.getZooKeeperConnectString())\n                 .sessionTimeoutMs(10000)\n@@ -567,15 +568,19 @@ public void testRWZKSessionLost() throws Exception {\n                 Thread.sleep(1000);\n             }\n             assertTrue(\"Replication worker should be running\", rw.isRunning());\n-            stopZKCluster();\n \n+            stopZKCluster();\n+            // Wait for disconnection to be picked up\n             for (int i = 0; i < 10; i++) {\n-                if (!rw.isRunning()) {\n+                if (!zk.getState().isConnected()) {\n                     break;\n                 }\n                 Thread.sleep(1000);\n             }\n-            assertFalse(\"Replication worker should have shut down\", rw.isRunning());\n+            assertFalse(zk.getState().isConnected());\n+            startZKCluster();\n+\n+            assertTrue(\"Replication worker should still be running\", rw.isRunning());\n         } finally {\n             zk.close();\n         }"}]}

