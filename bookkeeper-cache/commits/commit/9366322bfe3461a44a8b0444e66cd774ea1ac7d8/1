{"sha":"9366322bfe3461a44a8b0444e66cd774ea1ac7d8","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5MzY2MzIyYmZlMzQ2MWE0NGE4YjA0NDRlNjZjZDc3NGVhMWFjN2Q4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-02-24T19:07:57Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-02-24T19:07:57Z"},"message":"BOOKKEEPER-113: NPE In BookKeeper test (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1293383 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e4303493549ba49fb724c494bc7f24064ef79be","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9e4303493549ba49fb724c494bc7f24064ef79be"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9366322bfe3461a44a8b0444e66cd774ea1ac7d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9366322bfe3461a44a8b0444e66cd774ea1ac7d8","html_url":"https://github.com/apache/bookkeeper/commit/9366322bfe3461a44a8b0444e66cd774ea1ac7d8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2ec70d4dbf2266b17bdb99975f974f30afa65593","url":"https://api.github.com/repos/apache/bookkeeper/commits/2ec70d4dbf2266b17bdb99975f974f30afa65593","html_url":"https://github.com/apache/bookkeeper/commit/2ec70d4dbf2266b17bdb99975f974f30afa65593"}],"stats":{"total":94,"additions":50,"deletions":44},"files":[{"sha":"ce6184a3cf16fc29e5be1b1ae59878306b3ff375","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9366322bfe3461a44a8b0444e66cd774ea1ac7d8","patch":"@@ -46,6 +46,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-177: Index file is lost or some index pages aren't flushed. (sijie via ivank)\n \n+        BOOKKEEPER-113: NPE In BookKeeper test (fpj via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"75a8e8cdbba384a84a4549daa53270f0fd8bf840","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":48,"deletions":44,"changes":92,"blob_url":"https://github.com/apache/bookkeeper/blob/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9366322bfe3461a44a8b0444e66cd774ea1ac7d8/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=9366322bfe3461a44a8b0444e66cd774ea1ac7d8","patch":"@@ -225,11 +225,6 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n                   Object ctx, final int options) {\n         final int entrySize = toSend.readableBytes();\n \n-        // if (totalBytesOutstanding.get() > maxMemory) {\n-        // // TODO: how to throttle, throw an exception, or call the callback?\n-        // // Maybe this should be done at the layer above?\n-        // }\n-\n         final CompletionKey completionKey = new CompletionKey(ledgerId, entryId);\n \n         addCompletions.put(completionKey, new AddCompletion(cb, entrySize, ctx));\n@@ -238,30 +233,35 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n                               + 4 // for the type of request\n                               + masterKey.length; // for the master key\n \n-        ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n-        header.writeInt(totalHeaderSize - 4 + entrySize);\n-        header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n-                                         BookieProtocol.ADDENTRY, (short)options).toInt());\n-        header.writeBytes(masterKey);\n+        try{\n+            ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n \n-        ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n+            header.writeInt(totalHeaderSize - 4 + entrySize);\n+            header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n+                                             BookieProtocol.ADDENTRY, (short)options).toInt());\n+            header.writeBytes(masterKey);\n \n-        ChannelFuture future = channel.write(wrappedBuffer);\n-        future.addListener(new ChannelFutureListener() {\n-            @Override\n-            public void operationComplete(ChannelFuture future) throws Exception {\n-                if (future.isSuccess()) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n-                                  + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+            ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n+\n+            ChannelFuture future = channel.write(wrappedBuffer);\n+            future.addListener(new ChannelFutureListener() {\n+                @Override\n+                public void operationComplete(ChannelFuture future) throws Exception {\n+                    if (future.isSuccess()) {\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n+                                                            + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+                        }\n+                        // totalBytesOutstanding.addAndGet(entrySize);\n+                    } else {\n+                        errorOutAddKey(completionKey);\n                     }\n-                    // totalBytesOutstanding.addAndGet(entrySize);\n-                } else {\n-                    errorOutAddKey(completionKey);\n                 }\n-            }\n-        });\n-\n+            });\n+        } catch (Throwable e) {\n+            LOG.warn(\"Read entry operation failed\", e);\n+            errorOutReadKey(completionKey);\n+        }\n     }\n \n     public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback cb, Object ctx, final int options) {\n@@ -273,29 +273,33 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n                               + 8 // for ledgerId\n                               + 8; // for entryId\n \n-        ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n-        tmpEntry.writeInt(totalHeaderSize - 4);\n+        try{\n+            ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n+            tmpEntry.writeInt(totalHeaderSize - 4);\n \n-        tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n-                                           BookieProtocol.READENTRY, (short)options).toInt());\n-        tmpEntry.writeLong(ledgerId);\n-        tmpEntry.writeLong(entryId);\n+            tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION,\n+                                               BookieProtocol.READENTRY, (short)options).toInt());\n+            tmpEntry.writeLong(ledgerId);\n+            tmpEntry.writeLong(entryId);\n \n-        ChannelFuture future = channel.write(tmpEntry);\n-        future.addListener(new ChannelFutureListener() {\n-            @Override\n-            public void operationComplete(ChannelFuture future) throws Exception {\n-                if (future.isSuccess()) {\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n-                                  + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+            ChannelFuture future = channel.write(tmpEntry);\n+            future.addListener(new ChannelFutureListener() {\n+                @Override\n+                public void operationComplete(ChannelFuture future) throws Exception {\n+                    if (future.isSuccess()) {\n+                        if (LOG.isDebugEnabled()) {\n+                            LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n+                                                            + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+                        }\n+                    } else {\n+                        errorOutReadKey(key);\n                     }\n-                } else {\n-                    errorOutReadKey(key);\n                 }\n-            }\n-        });\n-\n+            });\n+        } catch(Throwable e) {\n+            LOG.warn(\"Read entry operation failed\", e);\n+            errorOutReadKey(key);\n+        }\n     }\n \n     public void close() {"}]}

