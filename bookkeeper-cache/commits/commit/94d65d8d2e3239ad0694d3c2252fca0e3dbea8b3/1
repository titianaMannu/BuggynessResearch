{"sha":"94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NGQ2NWQ4ZDJlMzIzOWFkMDY5NGQzYzIyNTJmY2EwZTNkYmVhOGIz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-13T12:32:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-13T12:32:37Z"},"message":"BOOKKEEPER-667: Client write will fail with BadMetadataVersion in case of multiple Bookie failures with AutoRecovery enabled (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1513459 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fa865c5567f6c52d7ef685c7ff2ebcc705bf56cf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fa865c5567f6c52d7ef685c7ff2ebcc705bf56cf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","html_url":"https://github.com/apache/bookkeeper/commit/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d1ad860f8e83530e0d8f1498a35da2e9fbb85962","url":"https://api.github.com/repos/apache/bookkeeper/commits/d1ad860f8e83530e0d8f1498a35da2e9fbb85962","html_url":"https://github.com/apache/bookkeeper/commit/d1ad860f8e83530e0d8f1498a35da2e9fbb85962"}],"stats":{"total":142,"additions":117,"deletions":25},"files":[{"sha":"4109471fd7dcb948a5507c470a88b58471d74d88","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","patch":"@@ -86,6 +86,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-604: Ledger storage can log an exception if GC happens concurrently. (sijie & ivank via ivank)\n \n+        BOOKKEEPER-667: Client write will fail with BadMetadataVersion in case of multiple Bookie failures with AutoRecovery enabled (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"c27a8cd30924967de3a017c66013a85b3b21c076","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":42,"deletions":20,"changes":62,"blob_url":"https://github.com/apache/bookkeeper/blob/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","patch":"@@ -801,6 +801,24 @@ private boolean resolveConflict(LedgerMetadata newMeta) {\n                 return false;\n             }\n \n+            // We should check number of ensembles since there are two kinds of metadata conflicts:\n+            // - Case 1: Multiple bookies involved in ensemble change.\n+            //           Number of ensembles should be same in this case.\n+            // - Case 2: Recovery (Auto/Manually) replaced ensemble and ensemble changed.\n+            //           The metadata changed due to ensemble change would have one more ensemble\n+            //           than the metadata changed by recovery.\n+            int diff = newMeta.getEnsembles().size() - metadata.getEnsembles().size();\n+            if (0 != diff) {\n+                if (-1 == diff) {\n+                    // Case 1: metadata is changed by other ones (e.g. Recovery)\n+                    return updateMetadataIfPossible(newMeta);\n+                }\n+                return false;\n+            }\n+\n+            //\n+            // Case 2:\n+            //\n             // If the failed the bookie is still existed in the metadata (in zookeeper), it means that\n             // the ensemble change of the failed bookie is failed due to metadata conflicts. so try to\n             // update the ensemble change metadata again. Otherwise, it means that the ensemble change\n@@ -812,26 +830,7 @@ private boolean resolveConflict(LedgerMetadata newMeta) {\n                 // update ensemble changed metadata again.\n                 if (!metadata.currentEnsemble.get(ensembleInfo.bookieIndex)\n                         .equals(ensembleInfo.addr)) {\n-                    // if the local metadata is newer than zookeeper metadata, it means that metadata is updated\n-                    // again when it was trying re-reading the metatada, re-kick the reread again\n-                    if (metadata.isNewerThan(newMeta)) {\n-                        rereadMetadata(this);\n-                        return true;\n-                    }\n-                    // make sure the metadata doesn't changed by other ones.\n-                    if (metadata.isConflictWith(newMeta)) {\n-                        return false;\n-                    }\n-                    LOG.info(\"Resolve ledger metadata conflict \"\n-                            + \"while changing ensemble to: \"\n-                            + ensembleInfo.newEnsemble\n-                            + \", old meta data is \\n\"\n-                            + new String(metadata.serialize(), UTF_8)\n-                            + \"\\n, new meta data is \\n\"\n-                            + new String(newMeta.serialize(), UTF_8));\n-                    // update znode version\n-                    metadata.setVersion(newMeta.getVersion());\n-                    writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n+                    return updateMetadataIfPossible(newMeta);\n                 }\n             } else {\n                 // the failed bookie has been replaced\n@@ -841,6 +840,29 @@ private boolean resolveConflict(LedgerMetadata newMeta) {\n             return true;\n         }\n \n+        private boolean updateMetadataIfPossible(LedgerMetadata newMeta) {\n+            // if the local metadata is newer than zookeeper metadata, it means that metadata is updated\n+            // again when it was trying re-reading the metatada, re-kick the reread again\n+            if (metadata.isNewerThan(newMeta)) {\n+                rereadMetadata(this);\n+                return true;\n+            }\n+            // make sure the metadata doesn't changed by other ones.\n+            if (metadata.isConflictWith(newMeta)) {\n+                return false;\n+            }\n+            LOG.info(\"Resolve ledger metadata conflict while changing ensemble to: {},\"\n+                    + \" old meta data is \\n {} \\n, new meta data is \\n {}.\", new Object[] {\n+                    ensembleInfo.newEnsemble, metadata, newMeta });\n+            // update znode version\n+            metadata.setVersion(newMeta.getVersion());\n+            // merge ensemble infos from new meta except last ensemble\n+            // since they might be modified by recovery tool.\n+            metadata.mergeEnsembles(newMeta.getEnsembles());\n+            writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n+            return true;\n+        }\n+\n     };\n \n     void unsetSuccessAndSendWriteRequest(final int bookieIndex) {"},{"sha":"181c6d771053ef2d877b2de176789655cd7a7840","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":34,"deletions":5,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n \n import static com.google.common.base.Charsets.UTF_8;\n \n@@ -479,16 +478,18 @@ boolean isConflictWith(LedgerMetadata newMeta) {\n         }\n         // if ledger is closed, we can just take the new ensembles\n         if (newMeta.state != LedgerMetadataFormat.State.CLOSED) {\n-            // ensemble size should be same\n-            if (ensembles.size() != newMeta.ensembles.size()) {\n+            // allow new metadata to be one ensemble less than current metadata\n+            // since ensemble change might kick in when recovery changed metadata\n+            int diff = ensembles.size() - newMeta.ensembles.size();\n+            if (0 != diff && 1 != diff) {\n                 return true;\n             }\n             // ensemble distribution should be same\n             // we don't check the detail ensemble, since new bookie will be set\n             // using recovery tool.\n             Iterator<Long> keyIter = ensembles.keySet().iterator();\n             Iterator<Long> newMetaKeyIter = newMeta.ensembles.keySet().iterator();\n-            for (int i=0; i<ensembles.size(); i++) {\n+            for (int i=0; i<newMeta.ensembles.size(); i++) {\n                 Long curKey = keyIter.next();\n                 Long newMetaKey = newMetaKeyIter.next();\n                 if (!curKey.equals(newMetaKey)) {\n@@ -498,4 +499,32 @@ boolean isConflictWith(LedgerMetadata newMeta) {\n         }\n         return false;\n     }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"(meta:\").append(new String(serialize(), UTF_8)).append(\", version:\").append(version).append(\")\");\n+        return sb.toString();\n+    }\n+\n+    void mergeEnsembles(SortedMap<Long, ArrayList<InetSocketAddress>> newEnsembles) {\n+        // allow new metadata to be one ensemble less than current metadata\n+        // since ensemble change might kick in when recovery changed metadata\n+        int diff = ensembles.size() - newEnsembles.size();\n+        if (0 != diff && 1 != diff) {\n+            return;\n+        }\n+        int i = 0;\n+        for (Entry<Long, ArrayList<InetSocketAddress>> entry : newEnsembles.entrySet()) {\n+            ++i;\n+            if (ensembles.size() != i) {\n+                // we should use last ensemble from current metadata\n+                // not the new metadata read from zookeeper\n+                long key = entry.getKey();\n+                ArrayList<InetSocketAddress> ensemble = entry.getValue();\n+                ensembles.put(key, ensemble);\n+            }\n+        }\n+    }\n+\n }"},{"sha":"f0432c18d43307f9075f69d0c2f11cafb1081100","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=94d65d8d2e3239ad0694d3c2252fca0e3dbea8b3","patch":"@@ -227,6 +227,45 @@ private void verifyRecoveredLedgers(List<LedgerHandle> oldLhs, long startEntryId\n \n     }\n \n+    /**\n+     * This tests the bookie recovery functionality with ensemble changes.\n+     * We'll verify that:\n+     * - bookie recovery should not affect ensemble change.\n+     * - ensemble change should not erase changes made by recovery.\n+     *\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-667}\n+     */\n+    @Test(timeout = 60000)\n+    public void testMetadataConflictWithRecovery() throws Exception {\n+        int numEntries = 10;\n+        byte[] data = \"testMetadataConflictWithRecovery\".getBytes();\n+\n+        LedgerHandle lh = bkc.createLedger(2, 2, digestType, baseClientConf.getBookieRecoveryPasswd());\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry(data);\n+        }\n+        InetSocketAddress bookieToKill = lh.getLedgerMetadata().getEnsemble(numEntries - 1).get(1);\n+        killBookie(bookieToKill);\n+        startNewBookie();\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry(data);\n+        }\n+        bkAdmin.recoverBookieData(bookieToKill, null);\n+        // fail another bookie to cause ensemble change again\n+        bookieToKill = lh.getLedgerMetadata().getEnsemble(2 * numEntries - 1).get(1);\n+        ServerConfiguration confOfKilledBookie = killBookie(bookieToKill);\n+        startNewBookie();\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry(data);\n+        }\n+        // start the killed bookie again\n+        bsConfs.add(confOfKilledBookie);\n+        bs.add(startBookie(confOfKilledBookie));\n+        // all ensembles should be fully replicated since it is recovered\n+        assertTrue(\"Not fully replicated\", verifyFullyReplicated(lh, 3 * numEntries));\n+        lh.close();\n+    }\n+\n     /**\n      * This tests the asynchronous bookie recovery functionality by writing\n      * entries into 3 bookies, killing one bookie, starting up a new one to"}]}

