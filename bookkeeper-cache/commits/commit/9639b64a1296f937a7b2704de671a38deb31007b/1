{"sha":"9639b64a1296f937a7b2704de671a38deb31007b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NjM5YjY0YTEyOTZmOTM3YTdiMjcwNGRlNjcxYTM4ZGViMzEwMDdi","commit":{"author":{"name":"Benjamin Reed","email":"breed@apache.org","date":"2011-10-07T22:24:21Z"},"committer":{"name":"Benjamin Reed","email":"breed@apache.org","date":"2011-10-07T22:24:21Z"},"message":"  BOOKKEEPER-61: BufferedChannel read endless when the remaining bytes of file is less than the capacity of read buffer\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1180266 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb7456c6e7e6a669e8dac021df51ed1261e6d0c9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cb7456c6e7e6a669e8dac021df51ed1261e6d0c9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9639b64a1296f937a7b2704de671a38deb31007b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9639b64a1296f937a7b2704de671a38deb31007b","html_url":"https://github.com/apache/bookkeeper/commit/9639b64a1296f937a7b2704de671a38deb31007b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9639b64a1296f937a7b2704de671a38deb31007b/comments","author":{"login":"breed","id":143779,"node_id":"MDQ6VXNlcjE0Mzc3OQ==","avatar_url":"https://avatars.githubusercontent.com/u/143779?v=4","gravatar_id":"","url":"https://api.github.com/users/breed","html_url":"https://github.com/breed","followers_url":"https://api.github.com/users/breed/followers","following_url":"https://api.github.com/users/breed/following{/other_user}","gists_url":"https://api.github.com/users/breed/gists{/gist_id}","starred_url":"https://api.github.com/users/breed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/breed/subscriptions","organizations_url":"https://api.github.com/users/breed/orgs","repos_url":"https://api.github.com/users/breed/repos","events_url":"https://api.github.com/users/breed/events{/privacy}","received_events_url":"https://api.github.com/users/breed/received_events","type":"User","site_admin":false},"committer":{"login":"breed","id":143779,"node_id":"MDQ6VXNlcjE0Mzc3OQ==","avatar_url":"https://avatars.githubusercontent.com/u/143779?v=4","gravatar_id":"","url":"https://api.github.com/users/breed","html_url":"https://github.com/breed","followers_url":"https://api.github.com/users/breed/followers","following_url":"https://api.github.com/users/breed/following{/other_user}","gists_url":"https://api.github.com/users/breed/gists{/gist_id}","starred_url":"https://api.github.com/users/breed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/breed/subscriptions","organizations_url":"https://api.github.com/users/breed/orgs","repos_url":"https://api.github.com/users/breed/repos","events_url":"https://api.github.com/users/breed/events{/privacy}","received_events_url":"https://api.github.com/users/breed/received_events","type":"User","site_admin":false},"parents":[{"sha":"06eea6791177f3d9dcb116ceccff2f6c3f619a39","url":"https://api.github.com/repos/apache/bookkeeper/commits/06eea6791177f3d9dcb116ceccff2f6c3f619a39","html_url":"https://github.com/apache/bookkeeper/commit/06eea6791177f3d9dcb116ceccff2f6c3f619a39"}],"stats":{"total":22,"additions":17,"deletions":5},"files":[{"sha":"9088ad4005c209770f1d8f498600e69eb815f79f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/9639b64a1296f937a7b2704de671a38deb31007b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/9639b64a1296f937a7b2704de671a38deb31007b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java?ref=9639b64a1296f937a7b2704de671a38deb31007b","patch":"@@ -37,7 +37,8 @@\n     int capacity;\n     long readBufferStartPosition;\n     long writeBufferStartPosition;\n-    BufferedChannel(FileChannel bc, int capacity) throws IOException {\n+    // make constructor to be public for unit test\n+    public BufferedChannel(FileChannel bc, int capacity) throws IOException {\n         this.bc = bc;\n         this.capacity = capacity;\n         position = bc.position();\n@@ -114,7 +115,7 @@ synchronized public int read(ByteBuffer buff, long pos) throws IOException {\n             readBuffer = ByteBuffer.allocateDirect(capacity);\n             readBufferStartPosition = Long.MIN_VALUE;\n         }\n-        int rc = buff.remaining();\n+        long prevPos = pos;\n         while(buff.remaining() > 0) {\n             // check if it is in the write buffer\n             if (writeBuffer != null && writeBufferStartPosition <= pos) {\n@@ -131,6 +132,9 @@ synchronized public int read(ByteBuffer buff, long pos) throws IOException {\n                 src.limit((int) (positionInBuffer+bytesToCopy));\n                 buff.put(src);\n                 pos+= bytesToCopy;\n+            } else if (writeBuffer == null && writeBufferStartPosition <= pos) {\n+                // here we reach the end\n+                break;\n                 // first check if there is anything we can grab from the readBuffer\n             } else if (readBufferStartPosition <= pos && pos < readBufferStartPosition+readBuffer.capacity()) {\n                 long positionInBuffer = pos - readBufferStartPosition;\n@@ -163,6 +167,6 @@ synchronized public int read(ByteBuffer buff, long pos) throws IOException {\n                 readBuffer.clear();\n             }\n         }\n-        return rc;\n+        return (int)(pos - prevPos);\n     }\n }"},{"sha":"b38604ab552b4b13025bd25596b584006d9c4b98","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/9639b64a1296f937a7b2704de671a38deb31007b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9639b64a1296f937a7b2704de671a38deb31007b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=9639b64a1296f937a7b2704de671a38deb31007b","patch":"@@ -351,7 +351,11 @@ public int getSessionTimeout() {\n         public Cnxn(SocketChannel sock, SelectionKey sk) throws IOException {\n             this.sock = sock;\n             this.sk = sk;\n-            sock.socket().setTcpNoDelay(true);\n+            if (System.getProperty(\"server.tcpnodelay\", \"true\").equals(\"true\")) {\n+                sock.socket().setTcpNoDelay(true);\n+            } else {\n+                sock.socket().setTcpNoDelay(false);\n+            }\n             sock.socket().setSoLinger(true, 2);\n             sk.interestOps(SelectionKey.OP_READ);\n             if (LOG.isTraceEnabled()) {"},{"sha":"914106703b0e114090b6ac94495932bc98958ac9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/9639b64a1296f937a7b2704de671a38deb31007b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9639b64a1296f937a7b2704de671a38deb31007b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=9639b64a1296f937a7b2704de671a38deb31007b","patch":"@@ -113,7 +113,11 @@ synchronized private void connect() {\n         // to the bookie.\n         ClientBootstrap bootstrap = new ClientBootstrap(channelFactory);\n         bootstrap.setPipelineFactory(this);\n-        bootstrap.setOption(\"tcpNoDelay\", true);\n+        if (System.getProperty(\"server.tcpnodelay\", \"true\").equals(\"true\")) {\n+            bootstrap.setOption(\"tcpNoDelay\", true);\n+        } else {\n+            bootstrap.setOption(\"tcpNoDelay\", false);\n+        }\n         bootstrap.setOption(\"keepAlive\", true);\n \n         ChannelFuture future = bootstrap.connect(addr);"}]}

