{"sha":"9c937f5d814d4079b6134db361a0e2de1e37cd05","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5YzkzN2Y1ZDgxNGQ0MDc5YjYxMzRkYjM2MWEwZTJkZTFlMzdjZDA1","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-02-09T07:39:50Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-02-09T07:39:50Z"},"message":"BOOKKEEPER-891: Read entries failure should trigger callback only once\n\nWhen reading multiple entries with `LedgerHandle.asyncReadEntries()`, in case there is a read error, the callback is currently being invoked for each of the requested entries.\nSince a single \"success\" callback is expected, we should also have a single \"failure\" callback invocation.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #12 from merlimat/bk-891-read-callbacks","tree":{"sha":"43b03c3435a1c5a94b3d16a31fb234b6c7afc8b6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/43b03c3435a1c5a94b3d16a31fb234b6c7afc8b6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9c937f5d814d4079b6134db361a0e2de1e37cd05","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9c937f5d814d4079b6134db361a0e2de1e37cd05","html_url":"https://github.com/apache/bookkeeper/commit/9c937f5d814d4079b6134db361a0e2de1e37cd05","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9c937f5d814d4079b6134db361a0e2de1e37cd05/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"63395a3e3d9bb253ea2745042631e44a3d195ea0","url":"https://api.github.com/repos/apache/bookkeeper/commits/63395a3e3d9bb253ea2745042631e44a3d195ea0","html_url":"https://github.com/apache/bookkeeper/commit/63395a3e3d9bb253ea2745042631e44a3d195ea0"}],"stats":{"total":56,"additions":56,"deletions":0},"files":[{"sha":"cafe8f7168ae0f08a6329144d7576c1d546fcd58","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/9c937f5d814d4079b6134db361a0e2de1e37cd05/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9c937f5d814d4079b6134db361a0e2de1e37cd05/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=9c937f5d814d4079b6134db361a0e2de1e37cd05","patch":"@@ -375,6 +375,11 @@ public void readEntryComplete(int rc, long ledgerId, final long entryId, final C\n     }\n \n     private void submitCallback(int code) {\n+        if (cb == null) {\n+            // Callback had already been triggered before\n+            return;\n+        }\n+\n         long latencyNanos = MathUtils.elapsedNanos(requestTimeNanos);\n         if (code != BKException.Code.OK) {\n             long firstUnread = LedgerHandle.INVALID_ENTRY_ID;\n@@ -392,6 +397,7 @@ private void submitCallback(int code) {\n         }\n         cancelSpeculativeTask(true);\n         cb.readComplete(code, lh, PendingReadOp.this, PendingReadOp.this.ctx);\n+        cb = null;\n     }\n \n     @Override"},{"sha":"a0eab35cc444cb986de4c19b73f844cd0ee145b2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/9c937f5d814d4079b6134db361a0e2de1e37cd05/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9c937f5d814d4079b6134db361a0e2de1e37cd05/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=9c937f5d814d4079b6134db361a0e2de1e37cd05","patch":"@@ -1,5 +1,7 @@\n package org.apache.bookkeeper.client;\n \n+import java.util.Enumeration;\n+\n /*\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n@@ -28,6 +30,8 @@\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n+import org.apache.bookkeeper.client.BKException.BKBookieHandleNotAvailableException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.test.BaseTestCase;\n import org.apache.zookeeper.ZooKeeper;\n@@ -240,4 +244,50 @@ public void testIsClosed() throws Exception {\n \n         bkc.close();\n     }\n+\n+    @Test(timeout = 60000)\n+    public void testReadFailureCallback() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration().setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        LedgerHandle lh = bkc.createLedger(digestType, \"testPasswd\".getBytes());\n+\n+        final int numEntries = 10;\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry((\"entry-\" + i).getBytes());\n+        }\n+\n+        stopBKCluster();\n+\n+        try {\n+            lh.readEntries(0, numEntries - 1);\n+            fail(\"Read operation should have failed\");\n+        } catch (BKBookieHandleNotAvailableException e) {\n+            // expected\n+        }\n+\n+        final CountDownLatch counter = new CountDownLatch(1);\n+        final AtomicInteger receivedResponses = new AtomicInteger(0);\n+        final AtomicInteger returnCode = new AtomicInteger();\n+        lh.asyncReadEntries(0, numEntries - 1, new ReadCallback() {\n+            @Override\n+            public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n+                returnCode.set(rc);\n+                receivedResponses.incrementAndGet();\n+                counter.countDown();\n+            }\n+        }, null);\n+\n+        counter.await();\n+\n+        // Wait extra time to ensure no extra responses received\n+        Thread.sleep(1000);\n+\n+        assertEquals(1, receivedResponses.get());\n+        assertEquals(BKException.Code.BookieHandleNotAvailableException, returnCode.get());\n+\n+        bkc.close();\n+\n+        startBKCluster();\n+    }\n }"}]}

