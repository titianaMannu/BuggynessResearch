{"sha":"9d63795db30a3d75f7ec9b8c42d2030f357eedf2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZDYzNzk1ZGIzMGEzZDc1ZjdlYzliOGM0MmQyMDMwZjM1N2VlZGYy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-02T15:54:33Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-02T15:54:33Z"},"message":"BOOKKEEPER-745: Fix for false reports of ledger unreplication during rolling restarts. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1599251 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"df68d577fa9f21edec0cbc080271bb841c44974a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/df68d577fa9f21edec0cbc080271bb841c44974a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9d63795db30a3d75f7ec9b8c42d2030f357eedf2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9d63795db30a3d75f7ec9b8c42d2030f357eedf2","html_url":"https://github.com/apache/bookkeeper/commit/9d63795db30a3d75f7ec9b8c42d2030f357eedf2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"55ec48dd14b7c97adb9b1bb7aa4b7a276aded962","url":"https://api.github.com/repos/apache/bookkeeper/commits/55ec48dd14b7c97adb9b1bb7aa4b7a276aded962","html_url":"https://github.com/apache/bookkeeper/commit/55ec48dd14b7c97adb9b1bb7aa4b7a276aded962"}],"stats":{"total":311,"additions":223,"deletions":88},"files":[{"sha":"f1edf8049a8104193f59bf31bd66355433b4d95e","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9d63795db30a3d75f7ec9b8c42d2030f357eedf2","patch":"@@ -34,6 +34,8 @@ Release 4.2.3 - 2013-12-04\n \n         BOOKKEEPER-751: Ensure all the bookkeeper callbacks not run under ledger handle lock (sijie via ivank)\n \n+        BOOKKEEPER-745: Fix for false reports of ledger unreplication during rolling restarts. (ivank)\n+\n     IMPROVEMENT:\n \n         BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)"},{"sha":"4f1e29127e1574426eda57f1b7a502e3e6145074","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=9d63795db30a3d75f7ec9b8c42d2030f357eedf2","patch":"@@ -38,6 +38,7 @@\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.protobuf.TextFormat;\n import com.google.common.base.Joiner;\n import static com.google.common.base.Charsets.UTF_8;\n@@ -210,6 +211,15 @@ private String getUrLedgerZnode(long ledgerId) {\n         return getUrLedgerZnode(urLedgerPath, ledgerId);\n     }\n \n+    @VisibleForTesting\n+    public UnderreplicatedLedgerFormat getLedgerUnreplicationInfo(long ledgerId)\n+            throws KeeperException, TextFormat.ParseException, InterruptedException {\n+        String znode = getUrLedgerZnode(ledgerId);\n+        UnderreplicatedLedgerFormat.Builder builder = UnderreplicatedLedgerFormat.newBuilder();\n+        byte[] data = zkc.getData(znode, false, null);\n+        TextFormat.merge(new String(data, UTF_8), builder);\n+        return builder.build();\n+    }\n \n     @Override\n     public void markLedgerUnderreplicated(long ledgerId, String missingReplica)"},{"sha":"c01d226fba36f14b161b0be1d5710a4dcacfcda3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":59,"deletions":28,"changes":87,"blob_url":"https://github.com/apache/bookkeeper/blob/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=9d63795db30a3d75f7ec9b8c42d2030f357eedf2","patch":"@@ -176,8 +176,8 @@ public void run() {\n \n                         if (lostBookies.size() > 0) {\n                             knownBookies.removeAll(lostBookies);\n-                            Map<String, Set<Long>> ledgerDetails = generateBookie2LedgersIndex();\n-                            handleLostBookies(lostBookies, ledgerDetails);\n+\n+                            auditBookies();\n                         }\n                     } catch (BKException bke) {\n                         LOG.error(\"Exception getting bookie list\", bke);\n@@ -188,6 +188,8 @@ public void run() {\n                         LOG.error(\"Exception while watching available bookies\", bke);\n                     } catch (UnavailableException ue) {\n                         LOG.error(\"Exception while watching available bookies\", ue);\n+                    } catch (KeeperException ke) {\n+                        LOG.error(\"Exception reading bookie list\", ke);\n                     }\n                 }\n             });\n@@ -238,37 +240,21 @@ public void run() {\n             } else {\n                 LOG.info(\"Periodic checking disabled\");\n             }\n-\n-            Runnable bookieCheck = new Runnable() {\n-                    public void run() {\n-                        try {\n-                            knownBookies = getAvailableBookies();\n-                            auditingBookies(knownBookies);\n-                        } catch (BKException bke) {\n-                            LOG.error(\"Exception getting bookie list\", bke);\n-                            submitShutdownTask();\n-                        } catch (KeeperException ke) {\n-                            LOG.error(\"Exception while watching available bookies\", ke);\n-                            submitShutdownTask();\n-                        } catch (InterruptedException ie) {\n-                            Thread.currentThread().interrupt();\n-                            LOG.error(\"Interrupted while watching available bookies \", ie);\n-                            submitShutdownTask();\n-                        } catch (BKAuditException bke) {\n-                            LOG.error(\"Exception while watching available bookies\", bke);\n-                            submitShutdownTask();\n-                        }\n-                    }\n-                };\n+            try {\n+                knownBookies = getAvailableBookies();\n+            } catch (BKException bke) {\n+                LOG.error(\"Couldn't get bookie list, exiting\", bke);\n+                submitShutdownTask();\n+            }\n \n             long bookieCheckInterval = conf.getAuditorPeriodicBookieCheckInterval();\n             if (bookieCheckInterval == 0) {\n                 LOG.info(\"Auditor periodic bookie checking disabled, running once check now anyhow\");\n-                executor.submit(bookieCheck);\n+                executor.submit(BOOKIE_CHECK);\n             } else {\n                 LOG.info(\"Auditor periodic bookie checking enabled\"\n                          + \" 'auditorPeriodicBookieCheckInterval' {} seconds\", bookieCheckInterval);\n-                executor.scheduleAtFixedRate(bookieCheck, 0, bookieCheckInterval, TimeUnit.SECONDS);\n+                executor.scheduleAtFixedRate(BOOKIE_CHECK, 0, bookieCheckInterval, TimeUnit.SECONDS);\n             }\n         }\n     }\n@@ -298,11 +284,34 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n         return availableBookies;\n     }\n \n-    private void auditingBookies(List<String> availableBookies)\n-            throws BKAuditException, KeeperException, InterruptedException {\n+    @SuppressWarnings(\"unchecked\")\n+    private void auditBookies()\n+            throws BKAuditException, KeeperException,\n+            InterruptedException, BKException {\n+        try {\n+            waitIfLedgerReplicationDisabled();\n+        } catch (UnavailableException ue) {\n+            LOG.error(\"Underreplication unavailable, skipping audit.\"\n+                      + \"Will retry after a period\");\n+            return;\n+        }\n \n+        // put exit cases here\n         Map<String, Set<Long>> ledgerDetails = generateBookie2LedgersIndex();\n+        try {\n+            if (!ledgerUnderreplicationManager.isLedgerReplicationEnabled()) {\n+                // has been disabled while we were generating the index\n+                // discard this run, and schedule a new one\n+                executor.submit(BOOKIE_CHECK);\n+                return;\n+            }\n+        } catch (UnavailableException ue) {\n+            LOG.error(\"Underreplication unavailable, skipping audit.\"\n+                      + \"Will retry after a period\");\n+            return;\n+        }\n \n+        List<String> availableBookies = getAvailableBookies();\n         // find lost bookies\n         Set<String> knownBookies = ledgerDetails.keySet();\n         Collection<String> lostBookies = CollectionUtils.subtract(knownBookies,\n@@ -528,4 +537,26 @@ public void shutdown() {\n     public boolean isRunning() {\n         return !executor.isShutdown();\n     }\n+\n+    private final Runnable BOOKIE_CHECK = new Runnable() {\n+            public void run() {\n+                try {\n+                    auditBookies();\n+                } catch (BKException bke) {\n+                    LOG.error(\"Couldn't get bookie list, exiting\", bke);\n+                    submitShutdownTask();\n+                } catch (KeeperException ke) {\n+                    LOG.error(\"Exception while watching available bookies\", ke);\n+                    submitShutdownTask();\n+                } catch (InterruptedException ie) {\n+                    Thread.currentThread().interrupt();\n+                    LOG.error(\"Interrupted while watching available bookies \", ie);\n+                    submitShutdownTask();\n+                } catch (BKAuditException bke) {\n+                    LOG.error(\"Exception while watching available bookies\", bke);\n+                    submitShutdownTask();\n+                }\n+            }\n+        };\n+\n }"},{"sha":"3f5e16431d8a6a2281293aaa53ec64985169408b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=9d63795db30a3d75f7ec9b8c42d2030f357eedf2","patch":"@@ -24,6 +24,8 @@\n import java.util.Comparator;\n import java.util.List;\n import java.io.Serializable;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n \n import org.apache.bookkeeper.proto.DataFormats.AuditorVoteFormat;\n import com.google.common.annotations.VisibleForTesting;\n@@ -68,6 +70,7 @@\n     private static final String VOTE_PREFIX = \"V_\";\n     // Represents path Separator\n     private static final String PATH_SEPARATOR = \"/\";\n+    private static final String ELECTION_ZNODE = \"auditorelection\";\n     // Represents urLedger path in zk\n     private final String basePath;\n     // Represents auditor election path in zk\n@@ -102,7 +105,7 @@ public AuditorElector(final String bookieId, ServerConfiguration conf,\n         this.zkc = zkc;\n         basePath = conf.getZkLedgersRootPath() + '/'\n                 + BookKeeperConstants.UNDER_REPLICATION_NODE;\n-        electionPath = basePath + \"/auditorelection\";\n+        electionPath = basePath + '/' + ELECTION_ZNODE;\n         createElectorPath();\n         executor = Executors.newSingleThreadExecutor(new ThreadFactory() {\n                 @Override\n@@ -274,6 +277,31 @@ Auditor getAuditor() {\n         return auditor;\n     }\n \n+    /**\n+     * Query zookeeper for the currently elected auditor\n+     * @return the bookie id of the current auditor\n+     */\n+    public static InetSocketAddress getCurrentAuditor(ServerConfiguration conf, ZooKeeper zk)\n+            throws KeeperException, InterruptedException, IOException {\n+        String electionRoot = conf.getZkLedgersRootPath() + '/'\n+            + BookKeeperConstants.UNDER_REPLICATION_NODE + '/' + ELECTION_ZNODE;\n+\n+        List<String> children = zk.getChildren(electionRoot, false);\n+        Collections.sort(children, new AuditorElector.ElectionComparator());\n+        if (children.size() < 1) {\n+            return null;\n+        }\n+        String ledger = electionRoot + \"/\" + children.get(AUDITOR_INDEX);\n+        byte[] data = zk.getData(ledger, false, null);\n+\n+        AuditorVoteFormat.Builder builder = AuditorVoteFormat.newBuilder();\n+        TextFormat.merge(new String(data, UTF_8), builder);\n+        AuditorVoteFormat v = builder.build();\n+        String[] parts = v.getBookieId().split(\":\");\n+        return new InetSocketAddress(parts[0],\n+                                       Integer.valueOf(parts[1]));\n+    }\n+\n     /**\n      * Shutting down AuditorElector\n      */"},{"sha":"75f84326b431b60e652fb65f6148b345c9f9800a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":34,"deletions":58,"changes":92,"blob_url":"https://github.com/apache/bookkeeper/blob/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=9d63795db30a3d75f7ec9b8c42d2030f357eedf2","patch":"@@ -37,9 +37,10 @@\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+\n import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n@@ -73,7 +74,7 @@\n             .getZkLedgersRootPath()\n             + \"/underreplication/ledgers\";\n     private HashMap<String, AuditorElector> auditorElectors = new HashMap<String, AuditorElector>();\n-    private LedgerUnderreplicationManager urLedgerMgr;\n+    private ZkLedgerUnderreplicationManager urLedgerMgr;\n     private Set<Long> urLedgerList;\n \n     private List<Long> ledgerList;\n@@ -169,46 +170,19 @@ public void testSimpleLedger() throws Exception {\n     @Test(timeout=60000)\n     public void testRestartBookie() throws Exception {\n         LedgerHandle lh1 = createAndAddEntriesToLedger();\n-        ledgerList.add(lh1.getId());\n         LedgerHandle lh2 = createAndAddEntriesToLedger();\n-        ledgerList.add(lh2.getId());\n-        LOG.debug(\"Created following ledgers : \" + ledgerList);\n \n-        // 2 is added to the latch, since after the ledger reformation, again\n-        // the reformed bookie is stopped. So auditor will modify the zk\n-        // underreplicated metadata\n-        int count = ledgerList.size() + 2;\n-        final CountDownLatch underReplicaLatch = registerUrLedgerWatcher(count);\n+        LOG.debug(\"Created following ledgers : {}, {}\", lh1, lh2);\n \n         int bkShutdownIndex = bs.size() - 1;\n         ServerConfiguration bookieConf1 = bsConfs.get(bkShutdownIndex);\n         String shutdownBookie = shutdownBookie(bkShutdownIndex);\n \n-        // restart the failed bookie and simulate previously listed ledgers are\n-        // rereplicated\n+        // restart the failed bookie\n         bs.add(startBookie(bookieConf1));\n \n-        // grace period for publishing the bk-ledger\n-        LOG.debug(\"Waiting for ledgers to be marked as under replicated\");\n-        underReplicaLatch.await(5, TimeUnit.SECONDS);\n-        Map<Long, String> urLedgerData = getUrLedgerData(urLedgerList);\n-\n-        assertEquals(\"Missed identifying under replicated ledgers\", 2,\n-                urLedgerList.size());\n-\n-        /*\n-         * Sample data format present in the under replicated ledger path\n-         * \n-         * {4=replica: \"10.18.89.153:5002\", 5=replica: \"10.18.89.153:5003\"}\n-         */\n-        for (Long ledgerId : ledgerList) {\n-            assertTrue(\"Ledger is not marked as underreplicated:\" + ledgerId,\n-                    urLedgerList.contains(ledgerId));\n-            String data = urLedgerData.get(ledgerId);\n-            assertTrue(\"Bookie \" + shutdownBookie\n-                    + \" is not listed in the ledger as missing \" + data, data\n-                    .contains(shutdownBookie));\n-        }\n+        waitForLedgerMissingReplicas(lh1.getId(), 10, shutdownBookie);\n+        waitForLedgerMissingReplicas(lh2.getId(), 10, shutdownBookie);\n     }\n \n     /**\n@@ -218,41 +192,20 @@ public void testRestartBookie() throws Exception {\n     @Test(timeout=60000)\n     public void testMultipleBookieFailures() throws Exception {\n         LedgerHandle lh1 = createAndAddEntriesToLedger();\n-        ledgerList.add(lh1.getId());\n-        LedgerHandle lh2 = createAndAddEntriesToLedger();\n-        ledgerList.add(lh2.getId());\n-        LOG.debug(\"Created following ledgers : \" + ledgerList);\n \n         // failing first bookie\n         shutdownBookie(bs.size() - 1);\n+\n         // simulate re-replication\n-        doLedgerRereplication(lh1.getId(), lh2.getId());\n+        doLedgerRereplication(lh1.getId());\n \n         // failing another bookie\n-        CountDownLatch underReplicaLatch = registerUrLedgerWatcher(ledgerList\n-                .size());\n         String shutdownBookie = shutdownBookie(bs.size() - 1);\n \n         // grace period for publishing the bk-ledger\n         LOG.debug(\"Waiting for ledgers to be marked as under replicated\");\n-        underReplicaLatch.await(5, TimeUnit.SECONDS);\n-        Map<Long, String> urLedgerData = getUrLedgerData(urLedgerList);\n-\n-        assertEquals(\"Missed identifying under replicated ledgers\", 2,\n-                urLedgerList.size());\n-\n-        /*\n-         * Sample data format present in the under replicated ledger path\n-         * {4=replica: \"10.18.89.153:5002\", 5=replica: \"10.18.89.153:5003\"}\n-         */\n-        for (Long ledgerId : ledgerList) {\n-            assertTrue(\"Ledger is not marked as underreplicated:\" + ledgerId,\n-                    urLedgerList.contains(ledgerId));\n-            String data = urLedgerData.get(ledgerId);\n-            assertTrue(\"Bookie \" + shutdownBookie\n-                    + \" is not listed in the ledger as missing \" + data, data\n-                    .contains(shutdownBookie));\n-        }\n+        assertTrue(\"Ledger should be missing second replica\",\n+                   waitForLedgerMissingReplicas(lh1.getId(), 10, shutdownBookie));\n     }\n \n     @Test(timeout = 30000)\n@@ -323,6 +276,29 @@ public void testReadOnlyBookieExclusionFromURLedgersCheck() throws Exception {\n         assertFalse(\"latch should not have completed\", underReplicaLatch.await(5, TimeUnit.SECONDS));\n     }\n \n+    /**\n+     * Wait for ledger to be underreplicated, and to be missing all replicas specified\n+     */\n+    private boolean waitForLedgerMissingReplicas(Long ledgerId, long secondsToWait, String... replicas)\n+            throws Exception {\n+        for (int i = 0; i < secondsToWait; i++) {\n+            try {\n+                UnderreplicatedLedgerFormat data = urLedgerMgr.getLedgerUnreplicationInfo(ledgerId);\n+                boolean all = true;\n+                for (String r : replicas) {\n+                    all = all && data.getReplicaList().contains(r);\n+                }\n+                if (all) {\n+                    return true;\n+                }\n+            } catch (Exception e) {\n+                // may not find node\n+            }\n+            Thread.sleep(1000);\n+        }\n+        return false;\n+    }\n+\n     private CountDownLatch registerUrLedgerWatcher(int count)\n             throws KeeperException, InterruptedException {\n         final CountDownLatch underReplicaLatch = new CountDownLatch(count);"},{"sha":"27e65c306e0a9f3583285e02a6d7013cb8e5f97d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java?ref=9d63795db30a3d75f7ec9b8c42d2030f357eedf2","patch":"@@ -81,7 +81,8 @@ public void setUp() throws Exception {\n         auditorZookeeper = ZkUtils.createConnectedZookeeperClient(\n                 zkUtil.getZooKeeperConnectString(), w);\n \n-        auditorElector = new AuditorElector(addr, conf, auditorZookeeper);\n+        auditorElector = new AuditorElector(addr, conf,\n+                auditorZookeeper);\n         auditorElector.start();\n     }\n "},{"sha":"a34283ef3b24a0a06204b46179fb858dfe7c3c80","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java?ref=9d63795db30a3d75f7ec9b8c42d2030f357eedf2","patch":"@@ -0,0 +1,73 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.test.TestCallbacks;\n+\n+import java.net.InetSocketAddress;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test auditor behaviours during a rolling restart\n+ */\n+public class AuditorRollingRestartTest extends BookKeeperClusterTestCase {\n+\n+    public AuditorRollingRestartTest() {\n+        super(3);\n+        // run the daemon within the bookie\n+        baseConf.setAutoRecoveryDaemonEnabled(true);\n+    }\n+\n+    /**\n+     * Test no auditing during restart if disabled\n+     */\n+    @Test(timeout=600000) // 10 minutes\n+    public void testAuditingDuringRollingRestart() throws Exception {\n+        LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bsConfs.get(0), zkc);\n+        final LedgerUnderreplicationManager underReplicationManager = mFactory.newLedgerUnderreplicationManager();\n+\n+        LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"passwd\".getBytes());\n+        for (int i = 0; i < 10; i++) {\n+            lh.asyncAddEntry(\"foobar\".getBytes(), new TestCallbacks.AddCallbackFuture(), null);\n+        }\n+        lh.addEntry(\"foobar\".getBytes());\n+        lh.close();\n+\n+        assertEquals(\"shouldn't be anything under replicated\",\n+                     underReplicationManager.pollLedgerToRereplicate(), -1);\n+        underReplicationManager.disableLedgerReplication();\n+\n+        InetSocketAddress auditor = AuditorElector.getCurrentAuditor(baseConf, zkc);\n+        ServerConfiguration conf = killBookie(auditor);\n+        Thread.sleep(2000);\n+        startBookie(conf);\n+        Thread.sleep(2000); // give it time to run\n+        assertEquals(\"shouldn't be anything under replicated\", -1,\n+                underReplicationManager.pollLedgerToRereplicate());\n+    }\n+}"},{"sha":"61217f0d973869d027a6d9de6cf3df0b6b175641","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java?ref=9d63795db30a3d75f7ec9b8c42d2030f357eedf2","patch":"@@ -20,7 +20,9 @@\n  */\n package org.apache.bookkeeper.test;\n \n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import com.google.common.util.concurrent.AbstractFuture;\n \n@@ -39,5 +41,17 @@ public void operationComplete(int rc, T value) {\n             }\n         }\n     }\n+\n+    public static class AddCallbackFuture\n+        extends AbstractFuture<Long> implements AddCallback {\n+        @Override\n+        public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+            if (rc != BKException.Code.OK) {\n+                setException(BKException.create(rc));\n+            } else {\n+                set(entryId);\n+            }\n+        }\n+    }\n }\n "}]}

