{"sha":"9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZGFlYjYwYmMyNzRhNDI1YjllOTBlZDUwZDM0NTRhNmJmYjNjZjMx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-28T15:17:48Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-28T15:17:48Z"},"message":"BOOKKEEPER-117: Support multi threads in hedwig cpp client to leverage multi-core hardware (Sijie Guo via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1207289 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d311f6606c6c1988425d0310ebe0cfc679b487bd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d311f6606c6c1988425d0310ebe0cfc679b487bd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","html_url":"https://github.com/apache/bookkeeper/commit/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e110067476eb55289d6dd86a94a6a1b0ab1a2ad8","url":"https://api.github.com/repos/apache/bookkeeper/commits/e110067476eb55289d6dd86a94a6a1b0ab1a2ad8","html_url":"https://github.com/apache/bookkeeper/commit/e110067476eb55289d6dd86a94a6a1b0ab1a2ad8"}],"stats":{"total":196,"additions":160,"deletions":36},"files":[{"sha":"8439f37e1417df71baef16a4b8619e512e19834d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -110,6 +110,8 @@ BUGFIXES:\n \n   BOOKKEEPER-118: Hedwig client doesn't kill and remove old subscription channel after redirection. (Sijie Guo via ivank)\n \n+  BOOKKEEPER-117: Support multi threads in hedwig cpp client to leverage multi-core hardware (Sijie Guo via ivank)\n+\n IMPROVEMENTS:\n \n  BOOKKEEPER-28: Create useful startup scripts for bookkeeper and hedwig (ivank)"},{"sha":"f37ef9822e48f54c4452c3a3e615581e4103bf9a","filename":"hedwig-client/src/main/cpp/inc/hedwig/client.h","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/inc/hedwig/client.h","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/inc/hedwig/client.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/client.h?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -46,6 +46,7 @@ namespace Hedwig {\n     static const std::string RECONNECT_SUBSCRIBE_RETRY_WAIT_TIME;\n     static const std::string SYNC_REQUEST_TIMEOUT;\n     static const std::string SUBSCRIBER_AUTOCONSUME;\n+    static const std::string NUM_DISPATCH_THREADS;\n \n   public:\n     Configuration() {};"},{"sha":"ada1e58538ee98b86bc8ddf1fa76db99d1c88ac7","filename":"hedwig-client/src/main/cpp/lib/channel.cpp","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/channel.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/channel.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/channel.cpp?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -50,8 +50,8 @@ using namespace Hedwig;\n \n DuplexChannel::DuplexChannel(EventDispatcher& dispatcher, const HostAddress& addr, \n \t\t\t     const Configuration& cfg, const ChannelHandlerPtr& handler)\n-  : dispatcher(dispatcher), address(addr), handler(handler), \n-    socket(dispatcher.getService()), instream(&in_buf), copy_buf(NULL), copy_buf_length(0),\n+  : dispatcher(dispatcher), address(addr), handler(handler), service(dispatcher.getService()),\n+    socket(service), instream(&in_buf), copy_buf(NULL), copy_buf_length(0),\n     state(UNINITIALISED), receiving(false), reading(false), sending(false)\n {\n   LOG4CXX_DEBUG(logger, \"Creating DuplexChannel(\" << this << \")\");"},{"sha":"0649cbfcf9c1179b9267aae77f48a1f930cedcbe","filename":"hedwig-client/src/main/cpp/lib/channel.h","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/channel.h","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/channel.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/channel.h?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -38,6 +38,7 @@\n #include <boost/shared_ptr.hpp>\n #include <boost/enable_shared_from_this.hpp>\n \n+#include <boost/asio.hpp>\n #include <boost/asio/ip/tcp.hpp>\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/shared_mutex.hpp>\n@@ -110,6 +111,10 @@ namespace Hedwig {\n     void channelDisconnected(const std::exception& e);\n     virtual void kill();\n \n+    inline boost::asio::io_service & getService() {\n+      return service;\n+    }\n+\n     virtual ~DuplexChannel();\n   private:\n     enum State { UNINITIALISED, CONNECTING, CONNECTED, DEAD };\n@@ -121,6 +126,7 @@ namespace Hedwig {\n     HostAddress address;\n     ChannelHandlerPtr handler;\n \n+    boost::asio::io_service &service;\n     boost::asio::ip::tcp::socket socket;\n     boost::asio::streambuf in_buf;\n     std::istream instream;"},{"sha":"6d70ad99fe1ba19d388abbb89830c87f11848070","filename":"hedwig-client/src/main/cpp/lib/client.cpp","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/client.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/client.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/client.cpp?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -37,6 +37,7 @@ const std::string Configuration::MAX_MESSAGE_QUEUE_SIZE = \"hedwig.cpp.max_msgque\n const std::string Configuration::RECONNECT_SUBSCRIBE_RETRY_WAIT_TIME = \"hedwig.cpp.reconnect_subscribe_retry_wait_time\";\n const std::string Configuration::SYNC_REQUEST_TIMEOUT = \"hedwig.cpp.sync_request_timeout\";\n const std::string Configuration::SUBSCRIBER_AUTOCONSUME = \"hedwig.cpp.subscriber_autoconsume\";\n+const std::string Configuration::NUM_DISPATCH_THREADS = \"hedwig.cpp.num_dispatch_threads\";\n \n Client::Client(const Configuration& conf) {\n   LOG4CXX_DEBUG(logger, \"Client::Client (\" << this << \")\");"},{"sha":"712de015500563ea00e652c3a64fe527a3214385","filename":"hedwig-client/src/main/cpp/lib/clientimpl.cpp","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/clientimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/clientimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.cpp?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -30,6 +30,7 @@ static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n using namespace Hedwig;\n \n const std::string DEFAULT_SERVER_DEFAULT_VAL = \"\";\n+const int DEFAULT_NUM_DISPATCH_THREADS = 1;\n \n void SyncOperationCallback::wait() {\n   boost::unique_lock<boost::mutex> lock(mut);\n@@ -182,15 +183,15 @@ ClientImplPtr ClientImpl::Create(const Configuration& conf) {\n   ClientImplPtr impl(new ClientImpl(conf));\n   LOG4CXX_DEBUG(logger, \"Creating Clientimpl \" << impl);\n \n-  impl->dispatcher.start();\n+  impl->dispatcher->start();\n \n   return impl;\n }\n \n void ClientImpl::Destroy() {\n   LOG4CXX_DEBUG(logger, \"destroying Clientimpl \" << this);\n \n-  dispatcher.stop();\n+  dispatcher->stop();\n   {\n     boost::lock_guard<boost::shared_mutex> lock(allchannels_lock);\n     \n@@ -217,6 +218,7 @@ ClientImpl::ClientImpl(const Configuration& conf)\n   : conf(conf), publisher(NULL), subscriber(NULL), counterobj(), shuttingDownFlag(false)\n {\n   defaultHost = HostAddress::fromString(conf.get(Configuration::DEFAULT_SERVER, DEFAULT_SERVER_DEFAULT_VAL));\n+  dispatcher = EventDispatcherPtr(new EventDispatcher(conf.getInt(Configuration::NUM_DISPATCH_THREADS, DEFAULT_NUM_DISPATCH_THREADS)));\n }\n \n Subscriber& ClientImpl::getSubscriber() {\n@@ -312,7 +314,7 @@ DuplexChannelPtr ClientImpl::createChannel(const std::string& topic, const Chann\n     setHostForTopic(topic, addr);\n   }\n \n-  DuplexChannelPtr channel(new DuplexChannel(dispatcher, addr, conf, handler));\n+  DuplexChannelPtr channel(new DuplexChannel(*dispatcher, addr, conf, handler));\n \n   boost::lock_guard<boost::shared_mutex> lock(allchannels_lock);\n   if (shuttingDownFlag) {\n@@ -392,5 +394,5 @@ const Configuration& ClientImpl::getConfiguration() {\n }\n \n boost::asio::io_service& ClientImpl::getService() {\n-  return dispatcher.getService();\n+  return dispatcher->getService();\n }"},{"sha":"40e063ca7ca8424d1a6673eedcfd08ffd3476a32","filename":"hedwig-client/src/main/cpp/lib/clientimpl.h","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/clientimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/clientimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.h?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -134,7 +134,8 @@ namespace Hedwig {\n \n     ClientTxnCounter counterobj;\n \n-    EventDispatcher dispatcher;\n+    typedef boost::shared_ptr<EventDispatcher> EventDispatcherPtr;\n+    EventDispatcherPtr dispatcher;\n     \n     typedef std::tr1::unordered_multimap<HostAddress, std::string, HostAddressHash > Host2TopicsMap;\n     Host2TopicsMap host2topics;"},{"sha":"2e66270fe891d4073f9ee9df6d2c41ea05d28459","filename":"hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","status":"modified","additions":46,"deletions":19,"changes":65,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -27,49 +27,76 @@ static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n \n using namespace Hedwig;\n \n-EventDispatcher::EventDispatcher() : service(), dummy_work(NULL), t(NULL) {\n+EventDispatcher::EventDispatcher(int numThreads)\n+  : num_threads(numThreads), running(false), next_io_service(0) {\n+  if (0 == num_threads) {\n+    throw std::runtime_error(\"number of threads in dispatcher is zero\");\n+  }\n+  for (size_t i = 0; i < num_threads; i++) {\n+    io_service_ptr service(new boost::asio::io_service);\n+    services.push_back(service);\n+  }\n }\n \n-void EventDispatcher::run_forever() {\n-  LOG4CXX_DEBUG(logger, \"Starting event dispatcher\");\n+void EventDispatcher::run_forever(io_service_ptr service, size_t idx) {\n+  LOG4CXX_DEBUG(logger, \"Starting event dispatcher \" << idx);\n \n   while (true) {\n     try {\n-      service.run();\n+      service->run();\n       break;\n     } catch (std::exception &e) {\n-    LOG4CXX_ERROR(logger, \"Exception in dispatch handler. \" << e.what());\n+    LOG4CXX_ERROR(logger, \"Exception in dispatch handler \" << idx << \" : \" << e.what());\n     }\n   }\n-  LOG4CXX_DEBUG(logger, \"Event dispatcher done\");\n+  LOG4CXX_DEBUG(logger, \"Event dispatcher \" << idx << \" done\");\n }\n \n void EventDispatcher::start() {\n-  if (t) {\n+  if (running) {\n     return;\n   }\n-  dummy_work = new boost::asio::io_service::work(service);\n-  t = new boost::thread(boost::bind(&EventDispatcher::run_forever, this));\n+  for (size_t i = 0; i < num_threads; i++) {\n+    io_service_ptr service = services[i];\n+    work_ptr work(new boost::asio::io_service::work(*service));\n+    works.push_back(work);\n+    // new thread\n+    thread_ptr t(new boost::thread(boost::bind(&EventDispatcher::run_forever, this, service, i)));\n+    threads.push_back(t);\n+  }\n+  running = true;\n }\n \n void EventDispatcher::stop() {\n-  if (!t) {\n+  if (!running) {\n     return;\n   }\n-  delete dummy_work;\n-  dummy_work = NULL;\n-  \n-  service.stop();\n-  \n-  t->join();\n-  delete t;\n-  t = NULL;\n+\n+  works.clear();\n+\n+  for (size_t i = 0; i < num_threads; i++) {\n+    services[i]->stop();\n+  }\n+\n+  for (size_t i = 0; i < num_threads; i++) {\n+    threads[i]->join();\n+  }\n+  threads.clear();\n+\n+  running = false;\n }\n \n EventDispatcher::~EventDispatcher() {\n-  delete dummy_work;\n+  services.clear();\n }\n \n boost::asio::io_service& EventDispatcher::getService() {\n+  size_t next = 0;\n+  {\n+    boost::lock_guard<boost::mutex> lock(next_lock);\n+    next = next_io_service;\n+    next_io_service = (next_io_service + 1) % num_threads;\n+  }\n+  boost::asio::io_service& service = *services[next];\n   return service;\n }"},{"sha":"27c86b20abf5bb7921e1827e2a7643cd2a3c8b4d","filename":"hedwig-client/src/main/cpp/lib/eventdispatcher.h","status":"modified","additions":23,"deletions":5,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/eventdispatcher.h","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/eventdispatcher.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/eventdispatcher.h?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -18,13 +18,21 @@\n #ifndef EVENTDISPATCHER_H\n #define EVENTDISPATCHER_H\n \n+#include <vector>\n+\n #include <boost/asio.hpp>\n #include <boost/thread.hpp>\n+#include <boost/thread/mutex.hpp>\n+#include <boost/shared_ptr.hpp>\n \n namespace Hedwig {\n+  typedef boost::shared_ptr<boost::asio::io_service> io_service_ptr;\n+  typedef boost::shared_ptr<boost::asio::io_service::work> work_ptr;\n+  typedef boost::shared_ptr<boost::thread> thread_ptr;\n+\n   class EventDispatcher {\n   public:  \n-    EventDispatcher();\n+    EventDispatcher(int numThreads = 1);\n     ~EventDispatcher();\n     \n     void start();\n@@ -33,11 +41,21 @@ namespace Hedwig {\n     boost::asio::io_service& getService();\n     \n   private:\n-    void run_forever();\n+    void run_forever(io_service_ptr service, size_t idx);\n \n-    boost::asio::io_service service;\n-    boost::asio::io_service::work* dummy_work;\n-    boost::thread* t;\n+    // number of threads\n+    size_t num_threads;\n+    // running flag\n+    bool running;\n+    // pool of io_services.\n+    std::vector<io_service_ptr> services;\n+    // pool of works\n+    std::vector<work_ptr> works;\n+    // threads\n+    std::vector<thread_ptr> threads;\n+    // next io_service used for a connection\n+    boost::mutex next_lock;\n+    std::size_t next_io_service;\n   };\n }\n "},{"sha":"32075c4ab83801406e275a88bf5eabbe52087bb5","filename":"hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -127,7 +127,7 @@ void SubscriberConsumeCallback::operationFailed(const std::exception& exception)\n   LOG4CXX_ERROR(logger, \"Error passing message to client transaction: \" << data->getTxnId() << \" error: \" << exception.what() \n \t\t<< \" retrying in \" << retrywait << \" Microseconds\");\n \n-  boost::asio::deadline_timer t(client->getService(), boost::posix_time::milliseconds(retrywait));\n+  boost::asio::deadline_timer t(handler->getChannel()->getService(), boost::posix_time::milliseconds(retrywait));\n \n   t.async_wait(boost::bind(&SubscriberConsumeCallback::timerComplete, handler, m, boost::asio::placeholders::error));  \n }\n@@ -207,7 +207,7 @@ void SubscriberClientChannelHandler::channelDisconnected(const DuplexChannelPtr&\n     int retrywait = client->getConfiguration().getInt(Configuration::RECONNECT_SUBSCRIBE_RETRY_WAIT_TIME,\n \t\t\t\t\t\t      DEFAULT_RECONNECT_SUBSCRIBE_RETRY_WAIT_TIME);\n     \n-    boost::asio::deadline_timer t(client->getService(), boost::posix_time::milliseconds(retrywait));\n+    boost::asio::deadline_timer t(channel->getService(), boost::posix_time::milliseconds(retrywait));\n     t.async_wait(boost::bind(&SubscriberClientChannelHandler::reconnectTimerComplete, shared_from_this(), \n \t\t\t     channel, e, boost::asio::placeholders::error));  \n     return;"},{"sha":"b06178a49a3d11949750431bd57f484467919204","filename":"hedwig-client/src/main/cpp/test/pubsubtest.cpp","status":"modified","additions":64,"deletions":1,"changes":65,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/test/pubsubtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/test/pubsubtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/pubsubtest.cpp?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -48,6 +48,7 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n   CPPUNIT_TEST(testMultiTopic);\n   CPPUNIT_TEST(testBigMessage);\n   CPPUNIT_TEST(testMultiTopicMultiSubscriber);\n+  CPPUNIT_TEST(testPubSubInMultiDispatchThreads);\n   CPPUNIT_TEST_SUITE_END();\n \n public:\n@@ -160,7 +161,7 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n   // Publisher integer until finished\n   class IntegerPublisher {\n   public:\n-    IntegerPublisher(std::string &topic, int startMsgId, int numMsgs, int sleepTime, Hedwig::Publisher &pub, long runTime)\n+    IntegerPublisher(const std::string &topic, int startMsgId, int numMsgs, int sleepTime, Hedwig::Publisher &pub, long runTime)\n       : topic(topic), startMsgId(startMsgId), numMsgs(numMsgs), sleepTime(sleepTime), pub(pub), running(true), runTime(runTime) {\n     }\n \n@@ -308,6 +309,68 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n     CPPUNIT_ASSERT(cb->inOrder());\n   }\n \n+  // check message ordering\n+  void testPubSubInMultiDispatchThreads() {\n+    std::string topic = \"PubSubInMultiDispatchThreadsTopic-\";\n+    std::string sid = \"mysub-0\";\n+\n+    int syncTimeout = 10000;\n+    int numDispatchThreads = 4;\n+    int numMessages = 100;\n+    int numTopics = 20;\n+\n+    Hedwig::Configuration* conf = new TestServerConfiguration(syncTimeout, numDispatchThreads);\n+    std::auto_ptr<Hedwig::Configuration> confptr(conf);\n+\n+    Hedwig::Client* client = new Hedwig::Client(*conf);\n+    std::auto_ptr<Hedwig::Client> clientptr(client);\n+\n+    Hedwig::Subscriber& sub = client->getSubscriber();\n+    Hedwig::Publisher& pub = client->getPublisher();\n+\n+    std::vector<Hedwig::MessageHandlerCallbackPtr> callbacks;\n+\n+    for (int i=0; i<numTopics; i++) {\n+      std::stringstream ss;\n+      ss << topic << i;\n+      sub.subscribe(ss.str(), sid, Hedwig::SubscribeRequest::CREATE_OR_ATTACH);\n+\n+      MyOrderCheckingMessageHandlerCallback* cb = new MyOrderCheckingMessageHandlerCallback(ss.str(), sid, 0, 0);\n+      Hedwig::MessageHandlerCallbackPtr handler(cb);\n+      sub.startDelivery(ss.str(), sid, handler);\n+      callbacks.push_back(handler);\n+    }\n+\n+    std::vector<boost::shared_ptr<boost::thread> > threads;\n+\n+    for (int i=0; i<numTopics; i++) {\n+      std::stringstream ss;\n+      ss << topic << i;\n+      boost::shared_ptr<boost::thread> t = boost::shared_ptr<boost::thread>(\n+        new boost::thread(IntegerPublisher(ss.str(), 0, numMessages, 0, pub, 0)));\n+      threads.push_back(t);\n+    }\n+\n+    for (int i=0; i<numTopics; i++) {\n+      threads[i]->join();\n+    }\n+    threads.clear();\n+\n+    for (int j=0; j<numTopics; j++) {\n+      MyOrderCheckingMessageHandlerCallback *cb =\n+        (MyOrderCheckingMessageHandlerCallback *)(callbacks[j].get());\n+      for (int i = 0; i < 10; i++) {\n+        if (cb->numMessagesReceived() == numMessages) {\n+          break;\n+        }\n+        sleep(3);\n+      }\n+      CPPUNIT_ASSERT(cb->inOrder());\n+    }\n+    callbacks.clear();\n+  }\n+\n+\n   void testPubSubContinuousOverClose() {\n     std::string topic = \"pubSubTopic\";\n     std::string sid = \"MySubscriberid-1\";"},{"sha":"780a466eceb1cbf8480801070a704c583d78b34f","filename":"hedwig-client/src/main/cpp/test/util.h","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/test/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/9daeb60bc274a425b9e90ed50d3454a6bfb3cf31/hedwig-client/src/main/cpp/test/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/util.h?ref=9daeb60bc274a425b9e90ed50d3454a6bfb3cf31","patch":"@@ -95,13 +95,15 @@ class TestCallback : public Hedwig::OperationCallback {\n \n class TestServerConfiguration : public Hedwig::Configuration {\n public:\n-  TestServerConfiguration() : address(\"localhost:4081\"), syncTimeout(10000) {}\n+  TestServerConfiguration() : address(\"localhost:4081\"), syncTimeout(10000), numThreads(2) {}\n \n-  TestServerConfiguration(int syncTimeout) : address(\"localhost:4081\"), syncTimeout(syncTimeout) {}\n+  TestServerConfiguration(int syncTimeout, int numThreads = 2) : address(\"localhost:4081\"), syncTimeout(syncTimeout), numThreads(numThreads) {}\n   \n   virtual int getInt(const std::string& key, int defaultVal) const {\n     if (key == Configuration::SYNC_REQUEST_TIMEOUT) {\n       return syncTimeout;\n+    } else if (key == Configuration::NUM_DISPATCH_THREADS) {\n+      return numThreads;\n     }\n     return defaultVal;\n   }\n@@ -121,6 +123,7 @@ class TestServerConfiguration : public Hedwig::Configuration {\n private:\n   const std::string address;\n   const int syncTimeout;\n+  const int numThreads;\n };\n \n "}]}

