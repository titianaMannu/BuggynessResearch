{"sha":"9f0d2a3e2f4279921f8fa1df8aad708773124cd5","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZjBkMmEzZTJmNDI3OTkyMWY4ZmExZGY4YWFkNzA4NzczMTI0Y2Q1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-17T23:33:57Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-17T23:33:57Z"},"message":" BOOKKEEPER-585: Auditor logs noisily when a ledger has been deleted (ivank via sijie) \n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1457596 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d0c1c374282495eddb9ee53af66c9719316e5df4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d0c1c374282495eddb9ee53af66c9719316e5df4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9f0d2a3e2f4279921f8fa1df8aad708773124cd5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9f0d2a3e2f4279921f8fa1df8aad708773124cd5","html_url":"https://github.com/apache/bookkeeper/commit/9f0d2a3e2f4279921f8fa1df8aad708773124cd5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c","url":"https://api.github.com/repos/apache/bookkeeper/commits/1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c","html_url":"https://github.com/apache/bookkeeper/commit/1b7cb6fa9704d10a3a6134edfd0b12d85bf0012c"}],"stats":{"total":59,"additions":58,"deletions":1},"files":[{"sha":"09796d52501e8f961e2110a21c7ee56a9bda0dcd","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9f0d2a3e2f4279921f8fa1df8aad708773124cd5","patch":"@@ -46,6 +46,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-576: Bookie client should use netty Decoder/Encoder (ivank via sijie)\n \n+      BOOKKEEPER-585: Auditor logs noisily when a ledger has been deleted (ivank via sijie)\n+\n Release 4.2.0 - 2013-01-14\n \n   Non-backward compatible changes:"},{"sha":"556de7a6e5a61538c2f9d1f42104014d19978a42","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=9f0d2a3e2f4279921f8fa1df8aad708773124cd5","patch":"@@ -377,7 +377,7 @@ public void operationComplete(int rc, Set<LedgerFragment> fragments) {\n      * List all the ledgers and check them individually. This should not\n      * be run very often.\n      */\n-    private void checkAllLedgers() throws BKAuditException, BKException,\n+    void checkAllLedgers() throws BKAuditException, BKException,\n             IOException, InterruptedException, KeeperException {\n         ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n         ZooKeeper newzk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n@@ -413,6 +413,11 @@ public void process(final Long ledgerId,\n                     try {\n                         lh = admin.openLedgerNoRecovery(ledgerId);\n                         checker.checkLedger(lh, new ProcessLostFragmentsCb(lh, callback));\n+                    } catch (BKException.BKNoSuchLedgerExistsException bknsle) {\n+                        LOG.debug(\"Ledger was deleted before we could check it\", bknsle);\n+                        callback.processResult(BKException.Code.OK,\n+                                               null, null);\n+                        return;\n                     } catch (BKException bke) {\n                         LOG.error(\"Couldn't open ledger \" + ledgerId, bke);\n                         callback.processResult(BKException.Code.BookieHandleNotAvailableException,"},{"sha":"9b4a14e7e5eb734b9abc92520394667000e1f05d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=9f0d2a3e2f4279921f8fa1df8aad708773124cd5","patch":"@@ -246,6 +246,8 @@ public void run() {\n                     Thread.currentThread().interrupt();\n                     LOG.info(\"InterruptedException \"\n                             + \"while replicating fragments\", e);\n+                } catch (BKNoSuchLedgerExistsException bknsle) {\n+                    LOG.debug(\"Ledger was deleted, safe to continue\", bknsle);\n                 } catch (BKException e) {\n                     LOG.error(\"BKException while fencing the ledger\"\n                             + \" for rereplication of postponed ledgers\", e);"},{"sha":"0a2bad2ec1f5561799dd2b5ef7dbbf3ae4d1743e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9f0d2a3e2f4279921f8fa1df8aad708773124cd5/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java?ref=9f0d2a3e2f4279921f8fa1df8aad708773124cd5","patch":"@@ -23,6 +23,8 @@\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n \n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.CountDownLatch;\n import java.util.HashMap;\n import java.util.List;\n import java.util.LinkedList;\n@@ -270,4 +272,50 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n         assertTrue(\"All should be underreplicated\",\n                 numUnderreplicated <= numLedgers && numUnderreplicated > 0);\n     }\n+\n+    /**\n+     * Test that the period check will succeed if a ledger is deleted midway\n+     */\n+    @Test(timeout=60000)\n+    public void testPeriodicCheckWhenLedgerDeleted() throws Exception {\n+        for (AuditorElector e : auditorElectors.values()) {\n+            e.shutdown();\n+        }\n+\n+        final int numLedgers = 100;\n+        List<Long> ids = new LinkedList<Long>();\n+        for (int i = 0; i < numLedgers; i++) {\n+            LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"passwd\".getBytes());\n+            ids.add(lh.getId());\n+            for (int j = 0; j < 10; j++) {\n+                lh.addEntry(\"testdata\".getBytes());\n+            }\n+            lh.close();\n+        }\n+        final Auditor auditor = new Auditor(\n+                StringUtils.addrToString(Bookie.getBookieAddress(bsConfs.get(0))),\n+                bsConfs.get(0), zkc);\n+        final AtomicBoolean exceptionCaught = new AtomicBoolean(false);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        Thread t = new Thread() {\n+                public void run() {\n+                    try {\n+                        latch.countDown();\n+                        for (int i = 0; i < numLedgers; i++) {\n+                            auditor.checkAllLedgers();\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"Caught exception while checking all ledgers\", e);\n+                        exceptionCaught.set(true);\n+                    }\n+                }\n+            };\n+        t.start();\n+        latch.await();\n+        for (Long id : ids) {\n+            bkc.deleteLedger(id);\n+        }\n+        t.join();\n+        assertFalse(\"Shouldn't have thrown exception\", exceptionCaught.get());\n+    }\n }"}]}

