{"sha":"9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZmNiN2MwY2RkZWU4Yjc4ZTFjM2FhOGRiNWY3NDc4ZDlhMTMzOTdj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-31T13:25:39Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-31T13:25:39Z"},"message":"BOOKKEEPER-384: Clean up LedgerManagerFactory and LedgerManager usage in tests (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1379445 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a30e219df4d027c9819520a93aed8242b1e0cfc4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a30e219df4d027c9819520a93aed8242b1e0cfc4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","html_url":"https://github.com/apache/bookkeeper/commit/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"fbfd10fa94d909144c369e1514db31669a16872b","url":"https://api.github.com/repos/apache/bookkeeper/commits/fbfd10fa94d909144c369e1514db31669a16872b","html_url":"https://github.com/apache/bookkeeper/commit/fbfd10fa94d909144c369e1514db31669a16872b"}],"stats":{"total":141,"additions":64,"deletions":77},"files":[{"sha":"d98643345132ad05fdc518d96d6c6b432a7d6da3","filename":"CHANGES.txt","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","patch":"@@ -70,14 +70,16 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-376: LedgerManagers should consider 'underreplication' node as a special Znode (Uma via sijie)\n \n-        BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie)\n+        BOOKKEEPER-384: Clean up LedgerManagerFactory and LedgerManager usage in tests (rakeshr via ivank)\n \n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)\n \n         BOOKKEEPER-320: Let hedwig cpp client could publish messages using Message object instead of string. (jiannan via ivank)\n \n+        BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie)\n+\n       hedwig-server:\n \n         BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)"},{"sha":"ead34944c767f7b83c1fe7adf7a0d741c10a918f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","status":"modified","additions":36,"deletions":47,"changes":83,"blob_url":"https://github.com/apache/bookkeeper/blob/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java?ref=9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","patch":"@@ -35,6 +35,8 @@\n import org.apache.bookkeeper.replication.ReplicationException.BKAuditException;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n import org.apache.commons.io.FileUtils;\n+import org.apache.zookeeper.KeeperException;\n+import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -51,16 +53,19 @@\n     private static final Logger LOG = LoggerFactory\n             .getLogger(BookieLedgerIndexTest.class);\n \n-    private byte[] ledgerPassword = \"admin\".getBytes();\n     private Random rng; // Random Number Generator\n     private ArrayList<byte[]> entries; // generated entries\n-    private DigestType digestType;\n-\n-    public BookieLedgerIndexTest(String ledgerManagerFactory) {\n+    private final DigestType digestType = DigestType.CRC32;\n+    private int numberOfLedgers = 3;\n+    private List<Long> ledgerList;\n+    private LedgerManagerFactory newLedgerManagerFactory;\n+    private LedgerManager ledgerManager;\n+\n+    public BookieLedgerIndexTest(String ledgerManagerFactory)\n+            throws IOException, KeeperException, InterruptedException {\n         super(3);\n         LOG.info(\"Running test case using ledger manager : \"\n                 + ledgerManagerFactory);\n-        this.digestType = DigestType.CRC32;\n         // set ledger manager name\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n@@ -72,6 +77,24 @@ public void setUp() throws Exception {\n         rng = new Random(System.currentTimeMillis()); // Initialize the Random\n         // Number Generator\n         entries = new ArrayList<byte[]>(); // initialize the entries list\n+        ledgerList = new ArrayList<Long>(3);\n+        // initialize ledger manager\n+        newLedgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(\n+                baseConf, zkc);\n+        ledgerManager = newLedgerManagerFactory.newLedgerManager();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        if (null != newLedgerManagerFactory) {\n+            newLedgerManagerFactory.uninitialize();\n+            newLedgerManagerFactory = null;\n+        }\n+        if (null != ledgerManager) {\n+            ledgerManager.close();\n+            ledgerManager = null;\n+        }\n     }\n \n     /**\n@@ -80,23 +103,10 @@ public void setUp() throws Exception {\n      */\n     @Test\n     public void testSimpleBookieLedgerMapping() throws Exception {\n-        LedgerManagerFactory newLedgerManagerFactory = LedgerManagerFactory\n-                .newLedgerManagerFactory(baseConf, zkc);\n-        LedgerManager ledgerManager = newLedgerManagerFactory\n-                .newLedgerManager();\n-\n-        List<Long> ledgerList = new ArrayList<Long>(3);\n-        LedgerHandle lh = createAndAddEntriesToLedger();\n-        lh.close();\n-        ledgerList.add(lh.getId());\n-\n-        lh = createAndAddEntriesToLedger();\n-        lh.close();\n-        ledgerList.add(lh.getId());\n \n-        lh = createAndAddEntriesToLedger();\n-        lh.close();\n-        ledgerList.add(lh.getId());\n+        for (int i = 0; i < numberOfLedgers; i++) {\n+            createAndAddEntriesToLedger().close();\n+        }\n \n         BookieLedgerIndexer bookieLedgerIndex = new BookieLedgerIndexer(\n                 ledgerManager);\n@@ -122,23 +132,9 @@ public void testSimpleBookieLedgerMapping() throws Exception {\n      */\n     @Test\n     public void testWithoutZookeeper() throws Exception {\n-        LedgerManagerFactory newLedgerManagerFactory = LedgerManagerFactory\n-                .newLedgerManagerFactory(baseConf, zkc);\n-        LedgerManager ledgerManager = newLedgerManagerFactory\n-                .newLedgerManager();\n-\n-        List<Long> ledgerList = new ArrayList<Long>(3);\n-        LedgerHandle lh = createAndAddEntriesToLedger();\n-        lh.close();\n-        ledgerList.add(lh.getId());\n-\n-        lh = createAndAddEntriesToLedger();\n-        lh.close();\n-        ledgerList.add(lh.getId());\n-\n-        lh = createAndAddEntriesToLedger();\n-        lh.close();\n-        ledgerList.add(lh.getId());\n+        for (int i = 0; i < numberOfLedgers; i++) {\n+            createAndAddEntriesToLedger().close();\n+        }\n \n         BookieLedgerIndexer bookieLedgerIndex = new BookieLedgerIndexer(\n                 ledgerManager);\n@@ -157,16 +153,8 @@ public void testWithoutZookeeper() throws Exception {\n     @Test\n     public void testEnsembleReformation() throws Exception {\n         try {\n-            LedgerManagerFactory newLedgerManagerFactory = LedgerManagerFactory\n-                    .newLedgerManagerFactory(baseConf, zkc);\n-            LedgerManager ledgerManager = newLedgerManagerFactory\n-                    .newLedgerManager();\n-\n-            List<Long> ledgerList = new ArrayList<Long>(3);\n             LedgerHandle lh1 = createAndAddEntriesToLedger();\n-            ledgerList.add(lh1.getId());\n             LedgerHandle lh2 = createAndAddEntriesToLedger();\n-            ledgerList.add(lh2.getId());\n \n             startNewBookie();\n             shutdownBookie(bs.size() - 2);\n@@ -218,7 +206,7 @@ private LedgerHandle createAndAddEntriesToLedger() throws BKException,\n             InterruptedException {\n         int numEntriesToWrite = 20;\n         // Create a ledger\n-        LedgerHandle lh = bkc.createLedger(digestType, ledgerPassword);\n+        LedgerHandle lh = bkc.createLedger(digestType, \"admin\".getBytes());\n         LOG.info(\"Ledger ID: \" + lh.getId());\n         for (int i = 0; i < numEntriesToWrite; i++) {\n             ByteBuffer entry = ByteBuffer.allocate(4);\n@@ -228,6 +216,7 @@ private LedgerHandle createAndAddEntriesToLedger() throws BKException,\n             entries.add(entry.array());\n             lh.addEntry(entry.array());\n         }\n+        ledgerList.add(lh.getId());\n         return lh;\n     }\n }"},{"sha":"02cde3e76018beda5fb3d4b9d910cd92d8c91fe6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":25,"deletions":29,"changes":54,"blob_url":"https://github.com/apache/bookkeeper/blob/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","patch":"@@ -49,9 +49,11 @@\n  */\n public class TestReplicationWorker extends MultiLedgerManagerTestCase {\n \n-    private static Logger LOG = LoggerFactory\n+    private static final Logger LOG = LoggerFactory\n             .getLogger(TestReplicationWorker.class);\n     private String basePath = \"\";\n+    private LedgerManagerFactory mFactory;\n+    private LedgerUnderreplicationManager underReplicationManager;\n \n     public TestReplicationWorker(String ledgerManagerFactory) {\n         super(3);\n@@ -65,6 +67,28 @@ public TestReplicationWorker(String ledgerManagerFactory) {\n                 + \"/ledgers\";\n     }\n \n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        // initialize urReplicationManager\n+        mFactory = LedgerManagerFactory.newLedgerManagerFactory(baseClientConf,\n+                zkc);\n+        underReplicationManager = mFactory.newLedgerUnderreplicationManager();\n+    }\n+\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        if(null != mFactory){\n+            mFactory.uninitialize();\n+            mFactory = null;\n+        }\n+        if(null != underReplicationManager){\n+            underReplicationManager.close();\n+            underReplicationManager = null;\n+        }\n+    }\n+    \n     /**\n      * Tests that replication worker should replicate the failed bookie\n      * fragments to target bookie given to the worker.\n@@ -96,11 +120,6 @@ public void testRWShouldReplicateFragmentsToTargetBookie() throws Exception {\n         ReplicationWorker rw = new ReplicationWorker(zkc, baseClientConf,\n                 newBkAddr);\n \n-        LedgerManagerFactory mFactory = LedgerManagerFactory\n-                .newLedgerManagerFactory(baseClientConf, zkc);\n-        LedgerUnderreplicationManager underReplicationManager = mFactory\n-                .newLedgerUnderreplicationManager();\n-\n         rw.start();\n         try {\n \n@@ -117,7 +136,6 @@ public void testRWShouldReplicateFragmentsToTargetBookie() throws Exception {\n             verifyRecoveredLedgers(lh, 0, 9);\n         } finally {\n             rw.shutdown();\n-            underReplicationManager.close();\n         }\n     }\n \n@@ -150,11 +168,6 @@ public void testRWShouldRetryUntilThereAreEnoughBksAvailableForReplication()\n         ReplicationWorker rw = new ReplicationWorker(zkc, baseClientConf,\n                 newBkAddr);\n \n-        LedgerManagerFactory mFactory = LedgerManagerFactory\n-                .newLedgerManagerFactory(baseClientConf, zkc);\n-        LedgerUnderreplicationManager underReplicationManager = mFactory\n-                .newLedgerUnderreplicationManager();\n-\n         rw.start();\n         try {\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n@@ -175,7 +188,6 @@ public void testRWShouldRetryUntilThereAreEnoughBksAvailableForReplication()\n             verifyRecoveredLedgers(lh, 0, 9);\n         } finally {\n             rw.shutdown();\n-            underReplicationManager.close();\n         }\n     }\n \n@@ -219,10 +231,6 @@ public void test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplicatio\n         rw1.start();\n         rw2.start();\n \n-        LedgerManagerFactory mFactory = LedgerManagerFactory\n-                .newLedgerManagerFactory(baseClientConf, zkc);\n-        LedgerUnderreplicationManager underReplicationManager = mFactory\n-                .newLedgerUnderreplicationManager();\n         try {\n             underReplicationManager.markLedgerUnderreplicated(lh.getId(),\n                     replicaToKill.toString());\n@@ -244,7 +252,6 @@ public void test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplicatio\n             rw1.shutdown();\n             rw2.shutdown();\n             zkc1.close();\n-            underReplicationManager.close();\n         }\n     }\n \n@@ -276,10 +283,6 @@ public void testRWShouldCleanTheLedgerFromUnderReplicationIfLedgerAlreadyDeleted\n                 newBkAddr);\n         rw.start();\n \n-        LedgerManagerFactory mFactory = LedgerManagerFactory\n-                .newLedgerManagerFactory(baseClientConf, zkc);\n-        LedgerUnderreplicationManager underReplicationManager = mFactory\n-                .newLedgerUnderreplicationManager();\n         try {\n             bkc.deleteLedger(lh.getId()); // Deleting the ledger\n             // Also mark ledger as in UnderReplication\n@@ -290,7 +293,6 @@ public void testRWShouldCleanTheLedgerFromUnderReplicationIfLedgerAlreadyDeleted\n             }\n         } finally {\n             rw.shutdown();\n-            underReplicationManager.close();\n         }\n \n     }\n@@ -341,11 +343,6 @@ public void testMultipleLedgerReplicationWithReplicationWorker()\n         ReplicationWorker rw = new ReplicationWorker(zkc, baseClientConf,\n                 newBkAddr);\n \n-        LedgerManagerFactory mFactory = LedgerManagerFactory\n-                .newLedgerManagerFactory(baseClientConf, zkc);\n-        LedgerUnderreplicationManager underReplicationManager = mFactory\n-                .newLedgerUnderreplicationManager();\n-\n         rw.start();\n         try {\n \n@@ -370,7 +367,6 @@ public void testMultipleLedgerReplicationWithReplicationWorker()\n             verifyRecoveredLedgers(lh2, 0, 9);\n         } finally {\n             rw.shutdown();\n-            underReplicationManager.close();\n         }\n \n     }"}]}

