{"sha":"a1eac18799ddc640bd42e6c038a31e1e26769056","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMWVhYzE4Nzk5ZGRjNjQwYmQ0MmU2YzAzOGEzMWUxZTI2NzY5MDU2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-05-25T15:13:44Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-05-25T15:13:44Z"},"message":"BOOKKEEPER-260: Define constant for -1 (invalid entry id) (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1342678 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a598a5582c1388ac1a962cfb29d975cc968e498a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a598a5582c1388ac1a962cfb29d975cc968e498a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a1eac18799ddc640bd42e6c038a31e1e26769056","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a1eac18799ddc640bd42e6c038a31e1e26769056","html_url":"https://github.com/apache/bookkeeper/commit/a1eac18799ddc640bd42e6c038a31e1e26769056","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a1eac18799ddc640bd42e6c038a31e1e26769056/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"cc28541520136968edd3258861e88c5433c5e154","url":"https://api.github.com/repos/apache/bookkeeper/commits/cc28541520136968edd3258861e88c5433c5e154","html_url":"https://github.com/apache/bookkeeper/commit/cc28541520136968edd3258861e88c5433c5e154"}],"stats":{"total":105,"additions":64,"deletions":41},"files":[{"sha":"d1408d12f7dca8f8bbabe23f94dd3cfc42b09604","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -184,6 +184,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-263: ZK ledgers root path is hard coded (Aniruddha via sijie)\n \n+\tBOOKKEEPER-260: Define constant for -1 (invalid entry id) (ivank via fpj)\n+\n       hedwig-server/\n \n         BOOKKEEPER-77: Add a console client for hedwig (Sijie Guo via ivank)"},{"sha":"3c4f339778a6a9f72dfdda68dac668d7866ab061","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -27,6 +27,7 @@\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.proto.BookieProtocol;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -116,9 +117,9 @@ synchronized public long addEntry(ByteBuffer entry) throws IOException {\n     public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n         long offset;\n         /*\n-         * If entryId is -1, then return the last written.\n+         * If entryId is BookieProtocol.LAST_ADD_CONFIRMED, then return the last written.\n          */\n-        if (entryId == -1) {\n+        if (entryId == BookieProtocol.LAST_ADD_CONFIRMED) {\n             entryId = ledgerCache.getLastEntry(ledgerId);\n         }\n "},{"sha":"8395a2f776feadd87652fcad8b2e59d0b64190de","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerEntryPage.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -24,6 +24,8 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n \n+import org.apache.bookkeeper.proto.BookieProtocol;\n+\n /**\n  * This is a page in the LedgerCache. It holds the locations\n  * (entrylogfile, offset) for entry ids.\n@@ -32,7 +34,7 @@\n     private final int pageSize;\n     private final int entriesPerPage;\n     private long ledger = -1;\n-    private long firstEntry = -1;\n+    private long firstEntry = BookieProtocol.INVALID_ENTRY_ID;\n     private final ByteBuffer page;\n     private boolean clean = true;\n     private boolean pinned = false;"},{"sha":"632b162590ec26afd52933d331919eb910b67c6c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -31,7 +31,7 @@\n          * @param entryId\n          *          entry identifier\n          * @param ctx\n-         *          control object\n+         *          context object\n          */\n         void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx);\n     }\n@@ -45,7 +45,7 @@\n          * @param lh\n          *          ledger handle\n          * @param ctx\n-         *          control object\n+         *          context object\n          */\n         void closeComplete(int rc, LedgerHandle lh, Object ctx);\n     }\n@@ -59,7 +59,7 @@\n          * @param lh\n          *          ledger handle\n          * @param ctx\n-         *          control object\n+         *          context object\n          */\n \n         void createComplete(int rc, LedgerHandle lh, Object ctx);\n@@ -74,7 +74,7 @@\n          * @param lh\n          *          ledger handle\n          * @param ctx\n-         *          control object\n+         *          context object\n          */\n \n         public void openComplete(int rc, LedgerHandle lh, Object ctx);\n@@ -92,7 +92,7 @@\n          * @param seq\n          *          sequence of entries\n          * @param ctx\n-         *          control object\n+         *          context object\n          */\n \n         void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n@@ -106,7 +106,7 @@ void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n          * @param rc\n          *          return code\n          * @param ctx\n-         *          control object\n+         *          context object\n          */\n         void deleteComplete(int rc, Object ctx);\n     }\n@@ -115,10 +115,12 @@ void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n         /**\n          * Callback definition for bookie recover operations\n          *\n-         * @param rc\n-         *          return code\n+         * @param rc Return code\n+         * @param lastConfirmed The entry id of the last confirmed write or\n+         *                      {@link LedgerHandle#INVALID_ENTRY_ID INVALID_ENTRY_ID}\n+         *                      if no entry has been confirmed\n          * @param ctx\n-         *          control object\n+         *          context object\n          */\n         void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx);\n     }\n@@ -130,7 +132,7 @@ void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n          * @param rc\n          *          return code\n          * @param ctx\n-         *          control object\n+         *          context object\n          */\n         void recoverComplete(int rc, Object ctx);\n     }"},{"sha":"99d8f679a53e11c4753ba9e0be987f1687e3bb94","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -103,7 +103,7 @@ public ChannelBuffer computeDigestAndPackageForSending(long entryId, long lastAd\n     }\n \n     private void verifyDigest(ChannelBuffer dataReceived) throws BKDigestMatchException {\n-        verifyDigest(-1, dataReceived, true);\n+        verifyDigest(LedgerHandle.INVALID_ENTRY_ID, dataReceived, true);\n     }\n \n     private void verifyDigest(long entryId, ChannelBuffer dataReceived) throws BKDigestMatchException {"},{"sha":"fd4ff032c30a97d6a8ca7bf3f2fd7a2fa2d6551e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":20,"deletions":11,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -40,6 +40,7 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.util.SafeRunnable;\n \n import org.slf4j.Logger;\n@@ -71,6 +72,12 @@\n     final Semaphore opCounterSem;\n     private final Integer throttling;\n \n+    /**\n+     * Invalid entry id. This value is returned from methods which\n+     * should return an entry id but there is no valid entry available.\n+     */\n+    final static public long INVALID_ENTRY_ID = BookieProtocol.INVALID_ENTRY_ID;\n+\n     final Queue<PendingAddOp> pendingAddOps = new ConcurrentLinkedQueue<PendingAddOp>();\n \n     LedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n@@ -83,7 +90,7 @@\n             lastAddConfirmed = lastAddPushed = metadata.close;\n             length = metadata.length;\n         } else {\n-            lastAddConfirmed = lastAddPushed = -1;\n+            lastAddConfirmed = lastAddPushed = INVALID_ENTRY_ID;\n             length = 0;\n         }\n \n@@ -113,11 +120,11 @@ public long getId() {\n      * from the readLastConfirmed call. In the case the ledger\n      * is not closed and the client is a reader, it is necessary\n      * to call readLastConfirmed to obtain an estimate of the\n-     * last add operation that has been confirmed.  \n-     * \n+     * last add operation that has been confirmed.\n+     *\n      * @see #readLastConfirmed()\n      *\n-     * @return the last confirmed entry id\n+     * @return the last confirmed entry id or {@link #INVALID_ENTRY_ID INVALID_ENTRY_ID} if no entry has been confirmed\n      */\n     public long getLastAddConfirmed() {\n         return lastAddConfirmed;\n@@ -127,7 +134,7 @@ public long getLastAddConfirmed() {\n      * Get the entry id of the last entry that has been enqueued for addition (but\n      * may not have possibly been persited to the ledger)\n      *\n-     * @return the id of the last entry pushed\n+     * @return the id of the last entry pushed or {@link #INVALID_ENTRY_ID INVALID_ENTRY_ID} if no entry has been pushed\n      */\n     synchronized public long getLastAddPushed() {\n         return lastAddPushed;\n@@ -481,7 +488,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n             opCounterSem.acquire();\n         } catch (InterruptedException e) {\n             cb.addComplete(BKException.Code.InterruptedException,\n-                           LedgerHandle.this, -1, ctx);\n+                           LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n         }\n \n         final long entryId;\n@@ -494,7 +501,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n                 LOG.warn(\"Attempt to add to closed ledger: \" + ledgerId);\n                 LedgerHandle.this.opCounterSem.release();\n                 cb.addComplete(BKException.Code.LedgerClosedException,\n-                               LedgerHandle.this, -1, ctx);\n+                               LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n                 return;\n             }\n \n@@ -543,7 +550,7 @@ public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData dat\n                         length = Math.max(length, data.length);\n                         cb.readLastConfirmedComplete(rc, data.lastAddConfirmed, ctx);\n                     } else {\n-                        cb.readLastConfirmedComplete(rc, -1, ctx);\n+                        cb.readLastConfirmedComplete(rc, INVALID_ENTRY_ID, ctx);\n                     }\n                 }\n             };\n@@ -555,11 +562,12 @@ public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData dat\n      * Context objects for synchronous call to read last confirmed.\n      */\n     static class LastConfirmedCtx {\n+        final static long ENTRY_ID_PENDING = -10;\n         long response;\n         int rc;\n \n         LastConfirmedCtx() {\n-            this.response = -10;\n+            this.response = ENTRY_ID_PENDING;\n         }\n \n         void setLastConfirmed(long lastConfirmed) {\n@@ -579,7 +587,7 @@ int getRC() {\n         }\n \n         boolean ready() {\n-            return (this.response != -10);\n+            return (this.response != ENTRY_ID_PENDING);\n         }\n     }\n \n@@ -594,7 +602,8 @@ boolean ready() {\n      * \n      * @see #getLastAddConfirmed()\n      * \n-     * @return\n+     * @return The entry id of the last confirmed write or {@link #INVALID_ENTRY_ID INVALID_ENTRY_ID}\n+     *         if no entry has been confirmed\n      * @throws InterruptedException\n      * @throws BKException\n      */"},{"sha":"35a867600d30126238b3decb326e70af5ac969fb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -37,7 +37,7 @@\n \n /**\n  * This class encapsulated the ledger recovery operation. It first does a read\n- * with entry-id of -1 (LedgerHandle.LAST_ADD_CONFIRMED) to all bookies. Then\n+ * with entry-id of -1 (BookieProtocol.LAST_ADD_CONFIRMED) to all bookies. Then\n  * starting from the last confirmed entry (from hints in the ledger entries),\n  * it reads forward until it is not able to find a particular entry. It closes\n  * the ledger at that entry.\n@@ -48,8 +48,8 @@\n     LedgerHandle lh;\n     int numResponsesPending;\n     boolean proceedingWithRecovery = false;\n-    long maxAddPushed = -1;\n-    long maxAddConfirmed = -1;\n+    long maxAddPushed = LedgerHandle.INVALID_ENTRY_ID;\n+    long maxAddConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n     long maxLength = 0;\n \n     GenericCallback<Void> cb;"},{"sha":"d61000eb991f70e92f541956abdb883a1f113134","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -51,7 +51,7 @@\n         this.lh = lh;\n         this.cb = cb;\n         this.ctx = ctx;\n-        this.entryId = -1;\n+        this.entryId = LedgerHandle.INVALID_ENTRY_ID;\n         \n         successesSoFar = new boolean[lh.metadata.quorumSize];\n         numResponsesPending = successesSoFar.length;"},{"sha":"f20ee8882cd24509eb346fd878077d3a969171e2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -49,7 +49,7 @@\n \n     public ReadLastConfirmedOp(LedgerHandle lh, LastConfirmedDataCallback cb) {\n         this.cb = cb;\n-        this.maxRecoveredData = new RecoveryData(-1,0);\n+        this.maxRecoveredData = new RecoveryData(LedgerHandle.INVALID_ENTRY_ID, 0);\n         this.lh = lh;\n         this.numResponsesPending = lh.metadata.ensembleSize;\n         this.coverageSet = lh.distributionSchedule.getCoverageSet();"},{"sha":"e5739ef6c1320da296229da7e1e0a1b00039ec95","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -73,6 +73,7 @@ public void asyncAddEntry(final byte[] data, final AddCallback cb,\n     public void asyncAddEntry(final byte[] data, final int offset, final int length,\n                               final AddCallback cb, final Object ctx) {\n         LOG.error(\"Tried to add entry on a Read-Only ledger handle, ledgerid=\" + ledgerId);\n-        cb.addComplete(BKException.Code.IllegalOpException, this, -1, ctx);\n+        cb.addComplete(BKException.Code.IllegalOpException, this,\n+                       LedgerHandle.INVALID_ENTRY_ID, ctx);\n     }\n }"},{"sha":"2b5b21ae499ae4802b5de59a488d4f1feffe08cd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -69,7 +69,6 @@ public void loadConf(AbstractConfiguration baseConf) {\n      *\n      * @param lmType\n      *          Ledger Manager Type\n-     * @return void\n      */\n     public void setLedgerManagerType(String lmType) {\n         setProperty(LEDGER_MANAGER_TYPE, lmType); "},{"sha":"9f77d8a7cb90d90a4ffff8617d1b79e7198939d2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -39,6 +39,11 @@\n      */\n     public static final byte CURRENT_PROTOCOL_VERSION = 2;\n \n+    /**\n+     * Entry Entry ID. To be used when no valid entry id can be assigned.\n+     */\n+    public static final long INVALID_ENTRY_ID = -1;\n+\n     /**\n      * Entry identifier representing a request to obtain the last add entry confirmed\n      */"},{"sha":"125b3fa4ed4d5c3b0b8a9c79cba0f3cbfe9c779e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -328,7 +328,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n \n         // packet format is different between ADDENTRY and READENTRY\n         long ledgerId = -1;\n-        long entryId = -1;\n+        long entryId = BookieProtocol.INVALID_ENTRY_ID;\n         byte[] masterKey = null;\n         switch (h.getOpCode()) {\n         case BookieProtocol.ADDENTRY:"},{"sha":"3c6d99b6d5670eb023699c7402b89c0b2a24ba2d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -129,7 +129,7 @@ private void writePreV2Journal(File journalDir, int numEntries) throws Exception\n         fc.position(0);\n \n         byte[] data = \"JournalTestData\".getBytes();\n-        long lastConfirmed = -1;\n+        long lastConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n         for (int i = 1; i <= numEntries; i++) {\n             ByteBuffer packet = ClientUtil.generatePacket(1, i, lastConfirmed, i*data.length, data).toByteBuffer();\n             lastConfirmed = i;\n@@ -150,7 +150,7 @@ private JournalChannel writePostV2Journal(File journalDir, int numEntries) throw\n \n         byte[] data = new byte[1024];\n         Arrays.fill(data, (byte)'X');\n-        long lastConfirmed = -1;\n+        long lastConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n         for (int i = 1; i <= numEntries; i++) {\n             ByteBuffer packet = ClientUtil.generatePacket(1, i, lastConfirmed, i*data.length, data).toByteBuffer();\n             lastConfirmed = i;\n@@ -174,7 +174,7 @@ private JournalChannel writePostV3Journal(File journalDir, int numEntries, byte[\n \n         byte[] data = new byte[1024];\n         Arrays.fill(data, (byte)'X');\n-        long lastConfirmed = -1;\n+        long lastConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n         for (int i = 0; i <= numEntries; i++) {\n             ByteBuffer packet;\n             if (i == 0) {"},{"sha":"2e35f452289a8c7ad24d57b50641204f5a279c3b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -41,6 +41,7 @@\n import static org.junit.Assert.*;\n \n import org.apache.bookkeeper.client.ClientUtil;\n+import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n \n import org.apache.zookeeper.ZooKeeper;\n@@ -98,7 +99,7 @@ static JournalChannel writeJournal(File journalDir, int numEntries, byte[] maste\n         long ledgerId = 1;\n         byte[] data = new byte[1024];\n         Arrays.fill(data, (byte)'X');\n-        long lastConfirmed = -1;\n+        long lastConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n \n         for (int i = 1; i <= numEntries; i++) {\n             ByteBuffer packet = ClientUtil.generatePacket(ledgerId, i, lastConfirmed,"},{"sha":"384cc3b65ac925470692c7fbc43a4073a0900169","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a1eac18799ddc640bd42e6c038a31e1e26769056/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=a1eac18799ddc640bd42e6c038a31e1e26769056","patch":"@@ -99,7 +99,7 @@ public BookieReadWriteTest(DigestType digestType) {\n \n         public SyncObj() {\n             counter = 0;\n-            lastConfirmed = -1;\n+            lastConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n             value = false;\n         }\n     }\n@@ -980,7 +980,8 @@ public void testReadFromOpenLedgerZeroAndOne() throws Exception {\n              */\n             LOG.debug(\"Checking that it is empty\");\n             long readLastConfirmed = lhOpen.readLastConfirmed();\n-            assertTrue(\"Last confirmed has the wrong value\", readLastConfirmed == -1L);\n+            assertTrue(\"Last confirmed has the wrong value\",\n+                       readLastConfirmed == LedgerHandle.INVALID_ENTRY_ID);\n             \n             /*\n              * Writing one entry.\n@@ -1000,7 +1001,7 @@ public void testReadFromOpenLedgerZeroAndOne() throws Exception {\n              */\n             LOG.debug(\"Checking that it is still empty even after writing one entry\");\n             readLastConfirmed = lhOpen.readLastConfirmed();\n-            assertTrue(readLastConfirmed == -1L);\n+            assertTrue(readLastConfirmed == LedgerHandle.INVALID_ENTRY_ID);\n \n             /*\n              * Adding one more, and this time we should expect to \n@@ -1079,7 +1080,7 @@ public void testLastConfirmedAdd() throws IOException {\n \n             // Wait for for last confirmed\n             synchronized (sync) {\n-                while (sync.lastConfirmed == -1) {\n+                while (sync.lastConfirmed == LedgerHandle.INVALID_ENTRY_ID) {\n                     LOG.debug(\"Counter = \" + sync.lastConfirmed);\n                     sync.wait();\n                 }"}]}

