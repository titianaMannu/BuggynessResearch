{"sha":"a2cd9899405ef7313a50e87a370aecef543ae4eb","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMmNkOTg5OTQwNWVmNzMxM2E1MGU4N2EzNzBhZWNlZjU0M2FlNGVi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-13T14:57:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-13T14:57:54Z"},"message":"BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1349896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55da59ec2e47c89f9cff2d5a1fb30b95525593c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/55da59ec2e47c89f9cff2d5a1fb30b95525593c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a2cd9899405ef7313a50e87a370aecef543ae4eb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a2cd9899405ef7313a50e87a370aecef543ae4eb","html_url":"https://github.com/apache/bookkeeper/commit/a2cd9899405ef7313a50e87a370aecef543ae4eb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a2cd9899405ef7313a50e87a370aecef543ae4eb/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"aa7f37c6095f61e89a290fc608fd14a50bc7b0e0","url":"https://api.github.com/repos/apache/bookkeeper/commits/aa7f37c6095f61e89a290fc608fd14a50bc7b0e0","html_url":"https://github.com/apache/bookkeeper/commit/aa7f37c6095f61e89a290fc608fd14a50bc7b0e0"}],"stats":{"total":1137,"additions":1126,"deletions":11},"files":[{"sha":"e5a413fc33d01f60cb794922ef75e87fec18a8d6","filename":"CHANGES.txt","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -12,6 +12,10 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-289: mvn clean doesn't remove test output files (sijie via ivank)\n \n+      bookkeeper-server:\n+\n+        BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"151f53bcc613ccc5c86cf03d3e4fe681c630c4cb","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -78,6 +78,7 @@ where command is one of:\n     bookie              Run a bookie server\n     localbookie <n>     Run a test ensemble of <n> bookies locally\n     upgrade             Upgrade bookie filesystem\n+    shell               Run admin shell to read/check bookie files\n     help                This help message\n \n or command is the full name of a class with a defined main() method.\n@@ -87,6 +88,7 @@ Environment variables:\n    BOOKIE_CONF            Configuration file (default: $DEFAULT_CONF)\n    BOOKIE_EXTRA_OPTS      Extra options to be passed to the jvm\n    BOOKIE_EXTRA_CLASSPATH Add extra paths to the bookkeeper classpath\n+   ENTRY_FORMATTER_CLASS  Entry formatter class to format entries.\n \n These variable can also be set in conf/bkenv.sh\n EOF\n@@ -155,6 +157,9 @@ elif [ $COMMAND == \"localbookie\" ]; then\n     exec java $OPTS $JMX_ARGS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $BOOKIE_CONF $@\n elif [ $COMMAND == \"upgrade\" ]; then\n     exec java $OPTS org.apache.bookkeeper.bookie.FileSystemUpgrade --conf $BOOKIE_CONF $@\n+elif [ $COMMAND == \"shell\" ]; then\n+    ENTRY_FORMATTER_ARG=\"-DentryFormatterClass=${ENTRY_FORMATTER_CLASS:-org.apache.bookkeeper.util.StringEntryFormatter}\"\n+    exec java $OPTS $ENTRY_FORMATTER_ARG org.apache.bookkeeper.bookie.BookieShell -conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"help\" ]; then\n     bookkeeper_help;\n else"},{"sha":"3116ae51d858358e0a6ddb1cd9260b4da145ad06","filename":"bookkeeper-server/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -31,6 +31,12 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n   </properties>\n   <dependencies>\n+    <dependency>\n+      <groupId>com.google.protobuf</groupId>\n+      <artifactId>protobuf-java</artifactId>\n+      <version>2.3.0</version>\n+      <scope>compile</scope>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>"},{"sha":"3a4754ba69f5ea4d054b98f8851078ef20253d57","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"added","additions":684,"deletions":0,"changes":684,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -0,0 +1,684 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.util.Formatter;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n+import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n+import org.apache.bookkeeper.bookie.Journal.LastLogMark;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.util.EntryFormatter;\n+import org.apache.bookkeeper.util.Tool;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.cli.BasicParser;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.ParseException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bookie Shell to read/check bookie files.\n+ */\n+public class BookieShell implements Tool {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(BookieShell.class);\n+\n+    static final String ENTRY_FORMATTER_CLASS = \"entryFormatterClass\";\n+\n+    static final String CMD_LEDGER = \"ledger\";\n+    static final String CMD_READLOG = \"readlog\";\n+    static final String CMD_READJOURNAL = \"readjournal\";\n+    static final String CMD_LASTMARK = \"lastmark\";\n+    static final String CMD_HELP = \"help\";\n+\n+    final ServerConfiguration bkConf = new ServerConfiguration();\n+    File[] ledgerDirectories;\n+    File journalDirectory;\n+\n+    EntryLogger entryLogger = null;\n+    Journal journal = null;\n+    EntryFormatter formatter;\n+\n+    int pageSize;\n+    int entriesPerPage;\n+\n+    interface Command {\n+        public int runCmd(String[] args) throws Exception;\n+        public void printUsage();\n+    }\n+\n+    abstract class MyCommand implements Command {\n+        abstract Options getOptions();\n+        abstract String getDescription();\n+        abstract String getUsage();\n+        abstract int runCmd(CommandLine cmdLine) throws Exception;\n+\n+        String cmdName;\n+\n+        MyCommand(String cmdName) {\n+            this.cmdName = cmdName;\n+        }\n+\n+        @Override\n+        public int runCmd(String[] args) throws Exception {\n+            try {\n+                BasicParser parser = new BasicParser();\n+                CommandLine cmdLine = parser.parse(getOptions(), args);\n+                return runCmd(cmdLine);\n+            } catch (ParseException e) {\n+                LOG.error(\"Error parsing command line arguments : \", e);\n+                printUsage();\n+                return -1;\n+            }\n+        }\n+\n+        @Override\n+        public void printUsage() {\n+            HelpFormatter hf = new HelpFormatter();\n+            System.err.println(cmdName + \": \" + getDescription());\n+            hf.printHelp(getUsage(), getOptions());\n+        }\n+    }\n+\n+    /**\n+     * Ledger Command Handles ledger related operations\n+     */\n+    class LedgerCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        LedgerCmd() {\n+            super(CMD_LEDGER);\n+            lOpts.addOption(\"m\", \"meta\", false, \"Print meta information\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] leftArgs = cmdLine.getArgs();\n+            if (leftArgs.length <= 0) {\n+                System.err.println(\"ERROR: missing ledger id\");\n+                printUsage();\n+                return -1;\n+            }\n+\n+            boolean printMeta = false;\n+            if (cmdLine.hasOption(\"m\")) {\n+                printMeta = true;\n+            }\n+            long ledgerId;\n+            try {\n+                ledgerId = Long.parseLong(leftArgs[0]);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid ledger id \" + leftArgs[0]);\n+                printUsage();\n+                return -1;\n+            }\n+            if (printMeta) {\n+                // print meta\n+                readLedgerMeta(ledgerId);\n+            }\n+            // dump ledger info\n+            readLedgerIndexEntries(ledgerId);\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Dump ledger index entries into readable format.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"ledger [-m] <ledger_id>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command to read entry log files.\n+     */\n+    class ReadLogCmd extends MyCommand {\n+        Options rlOpts = new Options();\n+\n+        ReadLogCmd() {\n+            super(CMD_READLOG);\n+            rlOpts.addOption(\"m\", \"msg\", false, \"Print message body\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] leftArgs = cmdLine.getArgs();\n+            if (leftArgs.length <= 0) {\n+                System.err.println(\"ERROR: missing entry log id or entry log file name\");\n+                printUsage();\n+                return -1;\n+            }\n+\n+            boolean printMsg = false;\n+            if (cmdLine.hasOption(\"m\")) {\n+                printMsg = true;\n+            }\n+            long logId;\n+            try {\n+                logId = Long.parseLong(leftArgs[0]);\n+            } catch (NumberFormatException nfe) {\n+                // not a entry log id\n+                File f = new File(leftArgs[0]);\n+                String name = f.getName();\n+                if (!name.endsWith(\".log\")) {\n+                    // not a log file\n+                    System.err.println(\"ERROR: invalid entry log file name \" + leftArgs[0]);\n+                    printUsage();\n+                    return -1;\n+                }\n+                String idString = name.split(\"\\\\.\")[0];\n+                logId = Long.parseLong(idString, 16);\n+            }\n+            // scan entry log\n+            scanEntryLog(logId, printMsg);\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Scan an entry file and format the entries into readable format.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"readlog [-m] <entry_log_id | entry_log_file_name>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return rlOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command to read journal files\n+     */\n+    class ReadJournalCmd extends MyCommand {\n+        Options rjOpts = new Options();\n+\n+        ReadJournalCmd() {\n+            super(CMD_READJOURNAL);\n+            rjOpts.addOption(\"m\", \"msg\", false, \"Print message body\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] leftArgs = cmdLine.getArgs();\n+            if (leftArgs.length <= 0) {\n+                System.err.println(\"ERROR: missing journal id or journal file name\");\n+                printUsage();\n+                return -1;\n+            }\n+\n+            boolean printMsg = false;\n+            if (cmdLine.hasOption(\"m\")) {\n+                printMsg = true;\n+            }\n+            long journalId;\n+            try {\n+                journalId = Long.parseLong(leftArgs[0]);\n+            } catch (NumberFormatException nfe) {\n+                // not a journal id\n+                File f = new File(leftArgs[0]);\n+                String name = f.getName();\n+                if (!name.endsWith(\".txn\")) {\n+                    // not a journal file\n+                    System.err.println(\"ERROR: invalid journal file name \" + leftArgs[0]);\n+                    printUsage();\n+                    return -1;\n+                }\n+                String idString = name.split(\"\\\\.\")[0];\n+                journalId = Long.parseLong(idString, 16);\n+            }\n+            // scan journal\n+            scanJournal(journalId, printMsg);\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Scan a journal file and format the entries into readable format.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"readjournal [-m] <journal_id | journal_file_name>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return rjOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command to print last log mark\n+     */\n+    class LastMarkCmd implements Command {\n+        @Override\n+        public int runCmd(String[] args) throws Exception {\n+            printLastLogMark();\n+            return 0;\n+        }\n+\n+        @Override\n+        public void printUsage() {\n+            System.err.println(\"lastmark: Print last log marker.\");\n+        }\n+    }\n+\n+    /**\n+     * Command to print help message\n+     */\n+    class HelpCmd implements Command {\n+        @Override\n+        public int runCmd(String[] args) throws Exception {\n+            if (args.length == 0) {\n+                printShellUsage();\n+                return 0;\n+            }\n+            String cmdName = args[0];\n+            Command cmd = commands.get(cmdName);\n+            if (null == cmd) {\n+                System.err.println(\"Unknown command \" + cmdName);\n+                printShellUsage();\n+                return -1;\n+            }\n+            cmd.printUsage();\n+            return 0;\n+        }\n+\n+        @Override\n+        public void printUsage() {\n+            System.err.println(\"help: Describe the usage of this program or its subcommands.\");\n+            System.err.println(\"usage: help [COMMAND]\");\n+        }\n+    }\n+\n+    final Map<String, Command> commands;\n+    {\n+        commands = new HashMap<String, Command>();\n+        commands.put(CMD_LEDGER, new LedgerCmd());\n+        commands.put(CMD_READLOG, new ReadLogCmd());\n+        commands.put(CMD_READJOURNAL, new ReadJournalCmd());\n+        commands.put(CMD_LASTMARK, new LastMarkCmd());\n+        commands.put(CMD_HELP, new HelpCmd());\n+    }\n+\n+    @Override\n+    public void setConf(Configuration conf) throws Exception {\n+        bkConf.loadConf(conf);\n+        journalDirectory = Bookie.getCurrentDirectory(bkConf.getJournalDir());\n+        ledgerDirectories = Bookie.getCurrentDirectories(bkConf.getLedgerDirs());\n+        formatter = EntryFormatter.newEntryFormatter(bkConf, ENTRY_FORMATTER_CLASS);\n+        LOG.info(\"Using entry formatter \" + formatter.getClass().getName());\n+        pageSize = bkConf.getPageSize();\n+        entriesPerPage = pageSize / 8;\n+    }\n+\n+    private static void printShellUsage() {\n+        System.err.println(\"Usage: BookieShell [-conf configuration] <command>\");\n+        System.err.println();\n+        System.err.println(\"       ledger      [-meta] <ledger_id>\");\n+        System.err.println(\"       readlog     [-msg] <entry_log_id|entry_log_file_name>\");\n+        System.err.println(\"       readjournal [-msg] <journal_id|journal_file_name>\");\n+        System.err.println(\"       lastmark\");\n+        System.err.println(\"       help\");\n+    }\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        if (args.length <= 0) {\n+            printShellUsage();\n+            return -1;\n+        }\n+        String cmdName = args[0];\n+        Command cmd = commands.get(cmdName);\n+        if (null == cmd) {\n+            System.err.println(\"ERROR: Unknown command \" + cmdName);\n+            printShellUsage();\n+            return -1;\n+        }\n+        // prepare new args\n+        String[] newArgs = new String[args.length - 1];\n+        System.arraycopy(args, 1, newArgs, 0, newArgs.length);\n+        return cmd.runCmd(newArgs);\n+    }\n+\n+    public static void main(String argv[]) throws Exception {\n+        if (argv.length <= 0) {\n+            printShellUsage();\n+            System.exit(-1);\n+        }\n+\n+        CompositeConfiguration conf = new CompositeConfiguration();\n+        // load configuration\n+        if (\"-conf\".equals(argv[0])) {\n+            if (argv.length <= 1) {\n+                printShellUsage();\n+                System.exit(-1);\n+            }\n+            conf.addConfiguration(new PropertiesConfiguration(\n+                                  new File(argv[1]).toURI().toURL()));\n+\n+            String[] newArgv = new String[argv.length - 2];\n+            System.arraycopy(argv, 2, newArgv, 0, newArgv.length);\n+            argv = newArgv;\n+        }\n+\n+        BookieShell shell = new BookieShell();\n+        shell.setConf(conf);\n+        int res = shell.run(argv);\n+        System.exit(res);\n+    }\n+\n+    ///\n+    /// Bookie File Operations\n+    ///\n+\n+    /**\n+     * Get the ledger file of a specified ledger.\n+     *\n+     * @param ledgerId\n+     *          Ledger Id\n+     *\n+     * @return file object.\n+     */\n+    private File getLedgerFile(long ledgerId) {\n+        String ledgerName = LedgerCacheImpl.getLedgerName(ledgerId);\n+        File lf = null;\n+        for (File d : ledgerDirectories) {\n+            lf = new File(d, ledgerName);\n+            if (lf.exists()) {\n+                break;\n+            }\n+            lf = null;\n+        }\n+        return lf;\n+    }\n+\n+    /**\n+     * Get FileInfo for a specified ledger.\n+     *\n+     * @param ledgerId\n+     *          Ledger Id\n+     * @return read only file info instance\n+     */\n+    ReadOnlyFileInfo getFileInfo(long ledgerId) throws IOException {\n+        File ledgerFile = getLedgerFile(ledgerId);\n+        if (null == ledgerFile) {\n+            throw new FileNotFoundException(\"No index file found for ledger \" + ledgerId + \". It may be not flushed yet.\");\n+        }\n+        ReadOnlyFileInfo fi = new ReadOnlyFileInfo(ledgerFile, null);\n+        fi.readHeader();\n+        return fi;\n+    }\n+\n+    private synchronized void initEntryLogger() throws IOException {\n+        if (null == entryLogger) {\n+            // provide read only entry logger\n+            entryLogger = new ReadOnlyEntryLogger(bkConf);\n+        }\n+    }\n+\n+    /**\n+     * scan over entry log\n+     *\n+     * @param logId\n+     *          Entry Log Id\n+     * @param scanner\n+     *          Entry Log Scanner\n+     */\n+    protected void scanEntryLog(long logId, EntryLogScanner scanner) throws IOException {\n+        initEntryLogger();\n+        entryLogger.scanEntryLog(logId, scanner);\n+    }\n+\n+    private synchronized void initJournal() throws IOException {\n+        if (null == journal) {\n+            journal = new Journal(bkConf);\n+        }\n+    }\n+\n+    /**\n+     * Scan journal file\n+     *\n+     * @param journalId\n+     *          Journal File Id\n+     * @param scanner\n+     *          Journal File Scanner\n+     */\n+    protected void scanJournal(long journalId, JournalScanner scanner) throws IOException {\n+        initJournal();\n+        journal.scanJournal(journalId, 0L, scanner);\n+    }\n+\n+    ///\n+    /// Bookie Shell Commands\n+    ///\n+\n+    /**\n+     * Read ledger meta\n+     *\n+     * @param ledgerId\n+     *          Ledger Id\n+     */\n+    protected void readLedgerMeta(long ledgerId) throws Exception {\n+        System.out.println(\"===== LEDGER: \" + ledgerId + \" =====\");\n+        FileInfo fi = getFileInfo(ledgerId);\n+        byte[] masterKey = fi.getMasterKey();\n+        if (null == masterKey) {\n+            System.out.println(\"master key  : NULL\");\n+        } else {\n+            System.out.println(\"master key  : \" + bytes2Hex(fi.getMasterKey()));\n+        }\n+        long size = fi.size();\n+        if (size % 8 == 0) {\n+            System.out.println(\"size        : \" + size);\n+        } else {\n+            System.out.println(\"size : \" + size + \" (not aligned with 8, may be corrupted or under flushing now)\");\n+        }\n+        System.out.println(\"entries     : \" + (size / 8));\n+    }\n+\n+    /**\n+     * Read ledger index entires\n+     *\n+     * @param ledgerId\n+     *          Ledger Id\n+     * @throws IOException\n+     */\n+    protected void readLedgerIndexEntries(long ledgerId) throws IOException {\n+        System.out.println(\"===== LEDGER: \" + ledgerId + \" =====\");\n+        FileInfo fi = getFileInfo(ledgerId);\n+        long size = fi.size();\n+        System.out.println(\"size        : \" + size);\n+        long curSize = 0;\n+        long curEntry = 0;\n+        LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n+        lep.usePage();\n+        try {\n+            while (curSize < size) {\n+                lep.setLedger(ledgerId);\n+                lep.setFirstEntry(curEntry);\n+                lep.readPage(fi);\n+\n+                // process a page\n+                for (int i=0; i<entriesPerPage; i++) {\n+                    long offset = lep.getOffset(i * 8);\n+                    if (0 == offset) {\n+                        System.out.println(\"entry \" + curEntry + \"\\t:\\tN/A\");\n+                    } else {\n+                        long entryLogId = offset >> 32L;\n+                        long pos = offset & 0xffffffffL;\n+                        System.out.println(\"entry \" + curEntry + \"\\t:\\t(log:\" + entryLogId + \", pos: \" + pos + \")\");\n+                    }\n+                    ++curEntry;\n+                }\n+\n+                curSize += pageSize;\n+            }\n+        } catch (IOException ie) {\n+            LOG.error(\"Failed to read index page : \", ie);\n+            if (curSize + pageSize < size) {\n+                System.out.println(\"Failed to read index page @ \" + curSize + \", the index file may be corrupted : \" + ie.getMessage());\n+            } else {\n+                System.out.println(\"Failed to read last index page @ \" + curSize\n+                                 + \", the index file may be corrupted or last index page is not fully flushed yet : \" + ie.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scan over an entry log file.\n+     *\n+     * @param logId\n+     *          Entry Log File id.\n+     * @param printMsg\n+     *          Whether printing the entry data.\n+     */\n+    protected void scanEntryLog(long logId, final boolean printMsg) throws Exception {\n+        System.out.println(\"Scan entry log \" + logId + \" (\" + Long.toHexString(logId) + \".log)\");\n+        scanEntryLog(logId, new EntryLogScanner() {\n+            @Override\n+            public boolean accept(long ledgerId) {\n+                return true;\n+            }\n+            @Override\n+            public void process(long ledgerId, long startPos, ByteBuffer entry) {\n+                formatEntry(startPos, entry, printMsg);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Scan a journal file\n+     *\n+     * @param journalId\n+     *          Journal File Id\n+     * @param printMsg\n+     *          Whether printing the entry data.\n+     */\n+    protected void scanJournal(long journalId, final boolean printMsg) throws Exception {\n+        System.out.println(\"Scan journal \" + journalId + \" (\" + Long.toHexString(journalId) + \".txn)\");\n+        scanJournal(journalId, new JournalScanner() {\n+            boolean printJournalVersion = false;\n+            @Override\n+            public void process(int journalVersion, long offset, ByteBuffer entry) throws IOException {\n+                if (!printJournalVersion) {\n+                    System.out.println(\"Journal Version : \" + journalVersion);\n+                    printJournalVersion = true;\n+                }\n+                formatEntry(offset, entry, printMsg);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Print last log mark\n+     */\n+    protected void printLastLogMark() throws IOException {\n+        initJournal();\n+        LastLogMark lastLogMark = journal.getLastLogMark();\n+        System.out.println(\"LastLogMark: Journal Id - \" + lastLogMark.txnLogId + \"(\"\n+                         + Long.toHexString(lastLogMark.txnLogId) + \".txn), Pos - \"\n+                         + lastLogMark.txnLogPosition);\n+    }\n+\n+    /**\n+     * Format the message into a readable format.\n+     *\n+     * @param pos\n+     *          File offset of the message stored in entry log file\n+     * @param recBuff\n+     *          Entry Data\n+     * @param printMsg\n+     *          Whether printing the message body\n+     */\n+    private void formatEntry(long pos, ByteBuffer recBuff, boolean printMsg) {\n+        long ledgerId = recBuff.getLong();\n+        long entryId = recBuff.getLong();\n+        int entrySize = recBuff.limit();\n+\n+        System.out.println(\"--------- Lid=\" + ledgerId + \", Eid=\" + entryId\n+                         + \", ByteOffset=\" + pos + \", EntrySize=\" + entrySize + \" ---------\");\n+        if (entryId == Bookie.METAENTRY_ID_LEDGER_KEY) {\n+            int masterKeyLen = recBuff.getInt();\n+            byte[] masterKey = new byte[masterKeyLen];\n+            recBuff.get(masterKey);\n+            System.out.println(\"Type:           META\");\n+            System.out.println(\"MasterKey:      \" + bytes2Hex(masterKey));\n+            System.out.println();\n+            return;\n+        }\n+        // process a data entry\n+        long lastAddConfirmed = recBuff.getLong();\n+        long length = recBuff.getLong();\n+        System.out.println(\"Type:           DATA\");\n+        System.out.println(\"LastConfirmed:  \" + lastAddConfirmed);\n+        if (!printMsg) {\n+            System.out.println();\n+            return;\n+        }\n+        // skip digest checking\n+        recBuff.position(32 + 8);\n+        System.out.println(\"Data:\");\n+        System.out.println();\n+        try {\n+            byte[] ret = new byte[recBuff.remaining()];\n+            recBuff.get(ret);\n+            formatter.formatEntry(ret);\n+        } catch (Exception e) {\n+            System.out.println(\"N/A. Corrupted.\");\n+        }\n+        System.out.println();\n+    }\n+\n+    static String bytes2Hex(byte[] data) {\n+        StringBuilder sb = new StringBuilder(data.length * 2);\n+        Formatter formatter = new Formatter(sb);\n+        for (byte b : data) {\n+            formatter.format(\"%02x\", b);\n+        }\n+        return sb.toString();\n+    }\n+}"},{"sha":"cb70698c4a0ecdd104a6b15ae8379a97205b9d84","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -91,11 +91,13 @@\n          *\n          * @param ledgerId\n          *          Ledger ID.\n+         * @param offset\n+         *          File offset of this entry.\n          * @param entry\n          *          Entry ByteBuffer\n          * @throws IOException\n          */\n-        public void process(long ledgerId, ByteBuffer entry) throws IOException;\n+        public void process(long ledgerId, long offset, ByteBuffer entry) throws IOException;\n     }\n \n     /**\n@@ -125,7 +127,8 @@ public EntryLogger(ServerConfiguration conf) throws IOException {\n                 logId = lastLogId;\n             }\n         }\n-        createNewLog();\n+\n+        initialize();\n     }\n \n     /**\n@@ -137,10 +140,15 @@ synchronized long getCurrentLogId() {\n         return logId;\n     }\n \n+    protected void initialize() throws IOException {\n+        // create a new log to write\n+        createNewLog();\n+    }\n+\n     /**\n      * Creates a new log file\n      */\n-    private void createNewLog() throws IOException {\n+    void createNewLog() throws IOException {\n         List<File> list = Arrays.asList(dirs);\n         Collections.shuffle(list);\n         if (logChannel != null) {\n@@ -416,6 +424,7 @@ protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOE\n             if (bc.read(sizeBuff, pos) != sizeBuff.capacity()) {\n                 throw new IOException(\"Short read for entry size from entrylog \" + entryLogId);\n             }\n+            long offset = pos;\n             pos += 4;\n             sizeBuff.flip();\n             int entrySize = sizeBuff.getInt();\n@@ -446,7 +455,7 @@ protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOE\n             }\n             buff.flip();\n             // process the entry\n-            scanner.process(lid, buff);\n+            scanner.process(lid, offset, buff);\n             // Advance position to the next entry\n             pos += entrySize;\n         }"},{"sha":"77e08bfe4aa9fd2aa903439c03e359b0d87c5577","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -68,10 +68,14 @@\n     private int useCount;\n     private boolean isClosed;\n \n+    // file access mode\n+    protected String mode;\n+\n     public FileInfo(File lf, byte[] masterKey) throws IOException {\n         this.lf = lf;\n \n         this.masterKey = masterKey;\n+        mode = \"rw\";\n     }\n \n     synchronized public void readHeader() throws IOException {\n@@ -80,7 +84,7 @@ synchronized public void readHeader() throws IOException {\n                 return;\n             }\n \n-            fc = new RandomAccessFile(lf, \"rw\").getChannel();\n+            fc = new RandomAccessFile(lf, mode).getChannel();\n             size = fc.size();\n \n             // avoid hang on reading partial index\n@@ -122,7 +126,7 @@ synchronized private void checkOpen(boolean create) throws IOException {\n             if (create) {\n                 // delayed the creation of parents directories\n                 checkParents(lf);\n-                fc = new RandomAccessFile(lf, \"rw\").getChannel();\n+                fc = new RandomAccessFile(lf, mode).getChannel();\n                 size = fc.size();\n                 if (size == 0) {\n                     writeHeader();"},{"sha":"f8fab4ec1936a98b9f9698fce7198c0c512ca63d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -100,8 +100,9 @@ public boolean accept(long ledgerId) {\n         }\n \n         @Override\n-        public void process(long ledgerId, ByteBuffer entry) throws IOException {\n-            scanner.process(ledgerId, entry);\n+        public void process(long ledgerId, long offset, ByteBuffer entry)\n+            throws IOException {\n+            scanner.process(ledgerId, offset, entry);\n         }\n     }\n \n@@ -442,7 +443,7 @@ public boolean accept(long ledgerId) {\n             return true;\n         }\n         @Override\n-        public void process(long ledgerId, ByteBuffer entry) {\n+        public void process(long ledgerId, long offset, ByteBuffer entry) {\n             // add new entry size of a ledger to entry log meta\n             meta.addLedgerSize(ledgerId, entry.limit() + 4);\n         }"},{"sha":"7cb24796d7ec8d5c22d5d938e1555b67285ec5df","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -178,10 +178,10 @@ public boolean accept(long ledgerId) {\n         }\n \n         @Override\n-        public void process(long ledgerId, ByteBuffer buffer)\n+        public void process(long ledgerId, long offset, ByteBuffer buffer)\n             throws IOException {\n             addEntry(buffer);\n         }\n     }\n \n-}\n\\ No newline at end of file\n+}"},{"sha":"ac697e8b482b5c8497d9a3ab89266b60fb33a263","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -0,0 +1,58 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+/**\n+ * Read Only Entry Logger\n+ */\n+public class ReadOnlyEntryLogger extends EntryLogger {\n+\n+    public ReadOnlyEntryLogger(ServerConfiguration conf) throws IOException {\n+        super(conf);\n+    }\n+\n+    @Override\n+    protected void initialize() throws IOException {\n+        // do nothing for read only entry logger\n+    }\n+\n+    @Override\n+    void createNewLog() throws IOException {\n+        throw new IOException(\"Can't create new entry log using a readonly entry logger.\");\n+    }\n+\n+    @Override\n+    protected boolean removeEntryLog(long entryLogId) {\n+        // can't remove entry log in readonly mode\n+        return false;\n+    }\n+\n+    @Override\n+    synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n+        throw new IOException(\"Can't add entry to a readonly entry logger.\");\n+    }\n+}"},{"sha":"0040fa6124dc3fb6f7402a38d0435b45c26d211f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -0,0 +1,44 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.nio.BufferUnderflowException;\n+import java.nio.channels.FileChannel;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provide a readonly file info.\n+ */\n+class ReadOnlyFileInfo extends FileInfo {\n+\n+    public ReadOnlyFileInfo(File lf, byte[] masterKey) throws IOException {\n+        super(lf, masterKey);\n+        mode = \"r\";\n+    }\n+\n+}"},{"sha":"e59d37934cec3acea2691eb2e0ecb32e6ba0a3b9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -64,6 +64,16 @@ public void loadConf(AbstractConfiguration baseConf) {\n         addConfiguration(baseConf); \n     }\n \n+    /**\n+     * Load configuration from other configuration object\n+     *\n+     * @param otherConf\n+     *          Other configuration object\n+     */\n+    public void loadConf(Configuration otherConf) {\n+        addConfiguration(otherConf);\n+    }\n+\n     /**\n      * Set Ledger Manager Type.\n      *"},{"sha":"d8abcdf589f4cefce22b32937521bf8e540d8e7c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -0,0 +1,77 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.util;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Formatter to format an entry\n+ */\n+public abstract class EntryFormatter {\n+\n+    static Logger LOG = LoggerFactory.getLogger(EntryFormatter.class);\n+\n+    protected Configuration conf;\n+\n+    public void setConf(Configuration conf) {\n+        this.conf = conf;\n+    }\n+\n+    /**\n+     * Format an entry into a readable format\n+     *\n+     * @param data\n+     *          Data Payload\n+     */\n+    public abstract void formatEntry(byte[] data);\n+\n+    /**\n+     * Format an entry from a string into a readable format\n+     *\n+     * @param input\n+     *          Input Stream\n+     */\n+    public abstract void formatEntry(java.io.InputStream input);\n+\n+    public final static EntryFormatter STRING_FORMATTER = new StringEntryFormatter();\n+\n+    public static EntryFormatter newEntryFormatter(Configuration conf, String clsProperty) {\n+        String cls = conf.getString(clsProperty, StringEntryFormatter.class.getName());\n+        ClassLoader classLoader = EntryFormatter.class.getClassLoader();\n+        EntryFormatter formatter;\n+        try {\n+            Class aCls = classLoader.loadClass(cls);\n+            formatter = (EntryFormatter) aCls.newInstance();\n+            formatter.setConf(conf);\n+        } catch (Exception e) {\n+            LOG.warn(\"No formatter class found : \" + cls, e);\n+            LOG.warn(\"Using Default String Formatter.\");\n+            formatter = STRING_FORMATTER;\n+        }\n+        return formatter;\n+    }\n+}"},{"sha":"43a5fc9a5d1dbf86d90e83867c4244bd5eba567d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -0,0 +1,47 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.util;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+import com.google.protobuf.ByteString;\n+\n+public class StringEntryFormatter extends EntryFormatter {\n+    @Override\n+    public void formatEntry(byte[] data) {\n+        System.out.println(ByteString.copyFrom(data).toStringUtf8());\n+    }\n+\n+    @Override\n+    public void formatEntry(java.io.InputStream input) {\n+        try {\n+            byte[] data = new byte[input.available()];\n+            input.read(data, 0, data.length);\n+            formatEntry(data);\n+        } catch (IOException ie) {\n+            System.out.println(\"Warn: Unreadable entry : \" + ie.getMessage());\n+        }\n+    }\n+\n+};"},{"sha":"22c56e998a52822e798ff680b2069949a498bac1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Tool.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Tool.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Tool.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Tool.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -0,0 +1,43 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.util;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+/**\n+ * A tool interface that supports handling of generic command-line options.\n+ */\n+public interface Tool {\n+    /**\n+     * Exectue the command with given arguments\n+     *\n+     * @param args command specific arguments\n+     * @return exit code.\n+     * @throws Exception\n+     */\n+    public int run(String[] args) throws Exception;\n+\n+    /**\n+     * Passe a configuration object to the tool.\n+     *\n+     * @param conf configuration object\n+     * @throws Exception\n+     */\n+    public void setConf(Configuration conf) throws Exception;\n+}"},{"sha":"8bd56032cb14132916d35eca7800ce7b07d1829e","filename":"hedwig-server/src/main/java/org/apache/hedwig/data/MessageFormatter.java","status":"added","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/bookkeeper/blob/a2cd9899405ef7313a50e87a370aecef543ae4eb/hedwig-server/src/main/java/org/apache/hedwig/data/MessageFormatter.java","raw_url":"https://github.com/apache/bookkeeper/raw/a2cd9899405ef7313a50e87a370aecef543ae4eb/hedwig-server/src/main/java/org/apache/hedwig/data/MessageFormatter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/data/MessageFormatter.java?ref=a2cd9899405ef7313a50e87a370aecef543ae4eb","patch":"@@ -0,0 +1,123 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.hedwig.data;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.apache.bookkeeper.util.EntryFormatter;\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.RegionSpecificSeqId;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Format a pub sub message into a readable format.\n+ */\n+public class MessageFormatter extends EntryFormatter {\n+    static Logger logger = LoggerFactory.getLogger(MessageFormatter.class);\n+\n+    static final String MESSAGE_PAYLOAD_FORMATTER_CLASS = \"message_payload_formatter_class\";\n+\n+    EntryFormatter dataFormatter = EntryFormatter.STRING_FORMATTER;\n+\n+    @Override\n+    public void setConf(Configuration conf) {\n+        super.setConf(conf);\n+        dataFormatter = EntryFormatter.newEntryFormatter(conf, MESSAGE_PAYLOAD_FORMATTER_CLASS);\n+    }\n+\n+    @Override\n+    public void formatEntry(java.io.InputStream input) {\n+        Message message;\n+        try {\n+            message = Message.parseFrom(input);\n+        } catch (IOException e) {\n+            System.out.println(\"WARN: Unreadable message found\\n\");\n+            EntryFormatter.STRING_FORMATTER.formatEntry(input);\n+            return;\n+        }\n+        formatMessage(message);\n+    }\n+\n+    @Override\n+    public void formatEntry(byte[] data) {\n+        Message message;\n+        try {\n+            message = Message.parseFrom(data);\n+        } catch (IOException e) {\n+            System.out.println(\"WARN: Unreadable message found\\n\");\n+            EntryFormatter.STRING_FORMATTER.formatEntry(data);\n+            return;\n+        }\n+        formatMessage(message);\n+    }\n+\n+    void formatMessage(Message message) {\n+        // print msg id\n+        String msgId;\n+        if (!message.hasMsgId()) {\n+            msgId = \"N/A\";\n+        } else {\n+            MessageSeqId seqId = message.getMsgId();\n+            StringBuilder idBuilder = new StringBuilder();\n+            if (seqId.hasLocalComponent()) {\n+                idBuilder.append(\"LOCAL(\").append(seqId.getLocalComponent()).append(\")\");\n+            } else {\n+                List<RegionSpecificSeqId> remoteIds = seqId.getRemoteComponentsList();\n+                int i = 0, numRegions = remoteIds.size();\n+                idBuilder.append(\"REMOTE(\");\n+                for (RegionSpecificSeqId rssid : remoteIds) {\n+                    idBuilder.append(rssid.getRegion().toStringUtf8());\n+                    idBuilder.append(\"[\");\n+                    idBuilder.append(rssid.getSeqId());\n+                    idBuilder.append(\"]\");\n+                    ++i;\n+                    if (i < numRegions) {\n+                        idBuilder.append(\",\");\n+                    }\n+                }\n+                idBuilder.append(\")\");\n+            }\n+            msgId = idBuilder.toString();\n+        }\n+        System.out.println(\"****** MSGID=\" + msgId + \" ******\");\n+        System.out.println(\"MessageId:      \" + msgId);\n+        // print source region\n+        if (message.hasSrcRegion()) {\n+            System.out.println(\"SrcRegion:      \" + message.getSrcRegion().toStringUtf8());\n+        } else {\n+            System.out.println(\"SrcRegion:      N/A\");\n+        }\n+        // print message body\n+        if (message.hasBody()) {\n+            System.out.println(\"Body:\");\n+            dataFormatter.formatEntry(message.getBody().toByteArray());\n+        } else {\n+            System.out.println(\"Body:           N/A\");\n+        }\n+        System.out.println();\n+    }\n+}"}]}

