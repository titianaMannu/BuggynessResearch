{"sha":"a3575c3ebcb323a53d7a193488453aa44557c97a","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMzU3NWMzZWJjYjMyM2E1M2Q3YTE5MzQ4ODQ1M2FhNDQ1NTdjOTdh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T15:38:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-14T15:38:44Z"},"message":"BOOKKEEPER-676: Make add asynchrounous in ledger recovery (aniruddha via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531944 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31159222716de7454c6d40d162f071d7538ca956","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/31159222716de7454c6d40d162f071d7538ca956"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a3575c3ebcb323a53d7a193488453aa44557c97a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a3575c3ebcb323a53d7a193488453aa44557c97a","html_url":"https://github.com/apache/bookkeeper/commit/a3575c3ebcb323a53d7a193488453aa44557c97a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a3575c3ebcb323a53d7a193488453aa44557c97a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"16978d671b8d6d9e563edb3a6119a4be574245af","url":"https://api.github.com/repos/apache/bookkeeper/commits/16978d671b8d6d9e563edb3a6119a4be574245af","html_url":"https://github.com/apache/bookkeeper/commit/16978d671b8d6d9e563edb3a6119a4be574245af"}],"stats":{"total":81,"additions":53,"deletions":28},"files":[{"sha":"e903d8b45abac58616cc8ce6699e1b3ab9762ffe","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a3575c3ebcb323a53d7a193488453aa44557c97a/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a3575c3ebcb323a53d7a193488453aa44557c97a/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a3575c3ebcb323a53d7a193488453aa44557c97a","patch":"@@ -108,6 +108,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-638: Two bookies could start at the same time to access bookie data. (sijie via ivank)\n \n+        BOOKKEEPER-676: Make add asynchrounous in ledger recovery (aniruddha via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"7ed7aa251751f78f691e46be9d16fe605c33ca33","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":51,"deletions":28,"changes":79,"blob_url":"https://github.com/apache/bookkeeper/blob/a3575c3ebcb323a53d7a193488453aa44557c97a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/a3575c3ebcb323a53d7a193488453aa44557c97a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=a3575c3ebcb323a53d7a193488453aa44557c97a","patch":"@@ -20,6 +20,8 @@\n \n import java.util.Enumeration;\n import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n@@ -41,11 +43,10 @@\n class LedgerRecoveryOp implements ReadCallback, AddCallback {\n     static final Logger LOG = LoggerFactory.getLogger(LedgerRecoveryOp.class);\n     LedgerHandle lh;\n-    int numResponsesPending;\n-    boolean proceedingWithRecovery = false;\n-    long maxAddPushed = LedgerHandle.INVALID_ENTRY_ID;\n-    long maxAddConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n-    long maxLength = 0;\n+    AtomicLong readCount, writeCount;\n+    AtomicBoolean readDone;\n+    AtomicBoolean callbackDone;\n+    long entryToRead;\n     // keep a copy of metadata for recovery.\n     LedgerMetadata metadataForRecovery;\n \n@@ -66,9 +67,12 @@ protected LedgerMetadata getLedgerMetadata() {\n     }\n \n     public LedgerRecoveryOp(LedgerHandle lh, GenericCallback<Void> cb) {\n+        readCount = new AtomicLong(0);\n+        writeCount = new AtomicLong(0);\n+        readDone = new AtomicBoolean(false);\n+        callbackDone = new AtomicBoolean(false);\n         this.cb = cb;\n         this.lh = lh;\n-        numResponsesPending = lh.metadata.getEnsembleSize();\n     }\n \n     public void initiate() {\n@@ -78,6 +82,7 @@ public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n                         if (rc == BKException.Code.OK) {\n                             lh.lastAddPushed = lh.lastAddConfirmed = data.lastAddConfirmed;\n                             lh.length = data.length;\n+                            entryToRead = lh.lastAddConfirmed;\n                             // keep a copy of ledger metadata before proceeding\n                             // ledger recovery\n                             metadataForRecovery = new LedgerMetadata(lh.getLedgerMetadata());\n@@ -102,17 +107,38 @@ public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n      * Try to read past the last confirmed.\n      */\n     private void doRecoveryRead() {\n-        long nextEntry = lh.lastAddConfirmed + 1;\n-        try {\n-            new RecoveryReadOp(lh, lh.bk.scheduler, nextEntry, nextEntry, this, null).initiate();\n-        } catch (InterruptedException e) {\n-            readComplete(BKException.Code.InterruptedException, lh, null, null);\n+        if (!callbackDone.get()) {\n+            entryToRead++;\n+            try {\n+                new RecoveryReadOp(lh, lh.bk.scheduler, entryToRead, entryToRead, this, null).initiate();\n+            } catch (InterruptedException e) {\n+                readComplete(BKException.Code.InterruptedException, lh, null, null);\n+            }\n+        }\n+    }\n+\n+    private void closeAndCallback() {\n+        if (callbackDone.compareAndSet(false, true)) {\n+            lh.asyncCloseInternal(new CloseCallback() {\n+                @Override\n+                public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n+                    if (rc != BKException.Code.OK) {\n+                        LOG.warn(\"Close ledger {} failed during recovery: \",\n+                            LedgerRecoveryOp.this.lh.getId(), BKException.getMessage(rc));\n+                        cb.operationComplete(rc, null);\n+                    } else {\n+                        cb.operationComplete(BKException.Code.OK, null);\n+                        LOG.debug(\"After closing length is: {}\", lh.getLength());\n+                    }\n+                }\n+            }, null, BKException.Code.LedgerClosedException);\n         }\n     }\n \n     @Override\n     public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n         if (rc == BKException.Code.OK) {\n+            readCount.incrementAndGet();\n             LedgerEntry entry = seq.nextElement();\n             byte[] data = entry.getEntry();\n \n@@ -125,27 +151,20 @@ public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n                 lh.length = entry.getLength() - (long) data.length;\n             }\n             lh.asyncRecoveryAddEntry(data, 0, data.length, this, null);\n+            doRecoveryRead();\n             return;\n         }\n \n         if (rc == BKException.Code.NoSuchEntryException || rc == BKException.Code.NoSuchLedgerExistsException) {\n-            lh.asyncCloseInternal(new CloseCallback() {\n-                @Override\n-                public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n-                    if (rc != BKException.Code.OK) {\n-                        LOG.warn(\"Close failed: \" + BKException.getMessage(rc));\n-                        cb.operationComplete(rc, null);\n-                    } else {\n-                        cb.operationComplete(BKException.Code.OK, null);\n-                        LOG.debug(\"After closing length is: {}\", lh.getLength());\n-                    }\n-                }\n-                }, null, BKException.Code.LedgerClosedException);\n+            readDone.set(true);\n+            if (readCount.get() == writeCount.get()) {\n+                closeAndCallback();\n+            }\n             return;\n         }\n \n         // otherwise, some other error, we can't handle\n-        LOG.error(\"Failure \" + BKException.getMessage(rc) + \" while reading entry: \" + (lh.lastAddConfirmed + 1)\n+        LOG.error(\"Failure \" + BKException.getMessage(rc) + \" while reading entry: \" + entryToRead\n                   + \" ledger: \" + lh.ledgerId + \" while recovering ledger\");\n         cb.operationComplete(rc, null);\n         return;\n@@ -154,14 +173,18 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n     @Override\n     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n         if (rc != BKException.Code.OK) {\n-            // Give up, we can't recover from this error\n-\n             LOG.error(\"Failure \" + BKException.getMessage(rc) + \" while writing entry: \" + (lh.lastAddConfirmed + 1)\n                       + \" ledger: \" + lh.ledgerId + \" while recovering ledger\");\n-            cb.operationComplete(rc, null);\n+            if (callbackDone.compareAndSet(false, true)) {\n+                // Give up, we can't recover from this error\n+                cb.operationComplete(rc, null);\n+            }\n             return;\n         }\n-        doRecoveryRead();\n+        long numAdd = writeCount.incrementAndGet();\n+        if (readDone.get() && readCount.get() == numAdd) {\n+            closeAndCallback();\n+        }\n     }\n \n }"}]}

