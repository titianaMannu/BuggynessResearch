{"sha":"a3da8c74c4226b7d92e9d0eba9591334351afa45","node_id":"MDY6Q29tbWl0MTU3NTk1NjphM2RhOGM3NGM0MjI2YjdkOTJlOWQwZWJhOTU5MTMzNDM1MWFmYTQ1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-20T05:48:56Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-20T05:48:56Z"},"message":"BOOKKEEPER-520: BookieFailureTest hangs on precommit build (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1424335 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7132c650a73f586cee9b6195739246b153aa4437","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7132c650a73f586cee9b6195739246b153aa4437"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a3da8c74c4226b7d92e9d0eba9591334351afa45","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a3da8c74c4226b7d92e9d0eba9591334351afa45","html_url":"https://github.com/apache/bookkeeper/commit/a3da8c74c4226b7d92e9d0eba9591334351afa45","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a3da8c74c4226b7d92e9d0eba9591334351afa45/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d69986c4df6b51ed6ed27c5f45a7b6850e69dacd","url":"https://api.github.com/repos/apache/bookkeeper/commits/d69986c4df6b51ed6ed27c5f45a7b6850e69dacd","html_url":"https://github.com/apache/bookkeeper/commit/d69986c4df6b51ed6ed27c5f45a7b6850e69dacd"}],"stats":{"total":58,"additions":33,"deletions":25},"files":[{"sha":"397dcb2c29fd935848dff68b5794b9894756e10d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a3da8c74c4226b7d92e9d0eba9591334351afa45/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a3da8c74c4226b7d92e9d0eba9591334351afa45/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a3da8c74c4226b7d92e9d0eba9591334351afa45","patch":"@@ -150,6 +150,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-500: Fencing doesn't work when restarting bookies. (sijie via ivank)\n \n+        BOOKKEEPER-520: BookieFailureTest hangs on precommit build (ivank via sijie)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"791cd2917ac5323046208eca72f9fa707de2c847","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/a3da8c74c4226b7d92e9d0eba9591334351afa45/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/a3da8c74c4226b7d92e9d0eba9591334351afa45/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=a3da8c74c4226b7d92e9d0eba9591334351afa45","patch":"@@ -672,6 +672,14 @@ void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n \n         // avoid parallel ensemble changes to same ensemble.\n         synchronized (metadata) {\n+            if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n+                // ensemble has already changed, failure of this addr is immaterial\n+                LOG.warn(\"Write did not succeed to {}, bookieIndex {}, but we have already fixed it.\",\n+                         addr, bookieIndex);\n+                blockAddCompletions.decrementAndGet();\n+                return;\n+            }\n+\n             try {\n                 newBookie = bk.bookieWatcher\n                         .getAdditionalBookie(metadata.currentEnsemble);"},{"sha":"7f8f29c2c9cd2f11826f4cb749deaa63a847e25f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/a3da8c74c4226b7d92e9d0eba9591334351afa45/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/a3da8c74c4226b7d92e9d0eba9591334351afa45/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=a3da8c74c4226b7d92e9d0eba9591334351afa45","patch":"@@ -111,11 +111,6 @@ void initiate(ChannelBuffer toSend) {\n     public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n         int bookieIndex = (Integer) ctx;\n \n-        if (!lh.metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n-            // ensemble has already changed, failure of this addr is immaterial\n-            LOG.warn(\"Write did not succeed: \" + ledgerId + \", \" + entryId + \". But we have already fixed it.\");\n-            return;\n-        }\n \n         switch (rc) {\n         case BKException.Code.OK:"},{"sha":"304a4cb60ed7ec330c2bdf0335a5764d9760d3bb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":23,"deletions":20,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/a3da8c74c4226b7d92e9d0eba9591334351afa45/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a3da8c74c4226b7d92e9d0eba9591334351afa45/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=a3da8c74c4226b7d92e9d0eba9591334351afa45","patch":"@@ -60,7 +60,6 @@\n     byte[] ledgerPassword = \"aaa\".getBytes();\n     LedgerHandle lh, lh2;\n     long ledgerId;\n-    Enumeration<LedgerEntry> ls;\n \n     // test related variables\n     int numEntriesToWrite = 200;\n@@ -70,17 +69,17 @@\n     ArrayList<Integer> entriesSize;\n     DigestType digestType;\n \n-    // Synchronization\n-    SyncObj sync;\n-    Set<Object> syncObjs;\n-\n     class SyncObj {\n         int counter;\n         boolean value;\n+        boolean failureOccurred;\n+        Enumeration<LedgerEntry> ls;\n \n         public SyncObj() {\n             counter = 0;\n             value = false;\n+            failureOccurred = false;\n+            ls = null;\n         }\n     }\n \n@@ -151,11 +150,10 @@ public void testBookieRecovery() throws Exception {\n             numScanned++;\n         }\n         assertEquals(numEntries, numScanned);\n-\n-\n     }\n \n     void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n+        SyncObj sync = new SyncObj();\n         try {\n             // Create a ledger\n             lh = bkc.createLedger(3, 2, digestType, ledgerPassword);\n@@ -181,7 +179,8 @@ void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n             synchronized (sync) {\n                 while (sync.counter < numEntriesToWrite) {\n                     LOG.debug(\"Entries counter = \" + sync.counter);\n-                    sync.wait();\n+                    sync.wait(10000);\n+                    assertFalse(\"Failure occurred during write\", sync.failureOccurred);\n                 }\n             }\n \n@@ -206,6 +205,7 @@ void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n                 while (sync.value == false) {\n                     sync.wait(10000);\n                     assertTrue(\"Haven't received entries\", sync.value);\n+                    assertFalse(\"Failure occurred during read\", sync.failureOccurred);\n                 }\n             }\n \n@@ -214,10 +214,10 @@ void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n             // at this point, Enumeration<LedgerEntry> ls is filled with the returned\n             // values\n             int i = 0;\n-            while (ls.hasMoreElements()) {\n+            while (sync.ls.hasMoreElements()) {\n                 ByteBuffer origbb = ByteBuffer.wrap(entries.get(i));\n                 Integer origEntry = origbb.getInt();\n-                byte[] entry = ls.nextElement().getEntry();\n+                byte[] entry = sync.ls.nextElement().getEntry();\n                 ByteBuffer result = ByteBuffer.wrap(entry);\n \n                 Integer retrEntry = result.getInt();\n@@ -246,9 +246,11 @@ void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n \n     @Override\n     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n-        if (rc != 0)\n-            fail(\"Failed to write entry: \" + entryId);\n         SyncObj x = (SyncObj) ctx;\n+        if (rc != 0) {\n+            LOG.error(\"Failure during add {} {}\", entryId, rc);\n+            x.failureOccurred = true;\n+        }\n         synchronized (x) {\n             x.counter++;\n             x.notify();\n@@ -257,14 +259,16 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n \n     @Override\n     public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n-        if (rc != 0)\n-            fail(\"Failed to write entry\");\n-        ls = seq;\n-        synchronized (sync) {\n-            sync.value = true;\n-            sync.notify();\n+        SyncObj x = (SyncObj) ctx;\n+        if (rc != 0) {\n+            LOG.error(\"Failure during add {}\", rc);\n+            x.failureOccurred = true;\n+        }\n+        synchronized (x) {\n+            x.value = true;\n+            x.ls = seq;\n+            x.notify();\n         }\n-\n     }\n \n     @Before\n@@ -276,7 +280,6 @@ public void setUp() throws Exception {\n         // Number Generator\n         entries = new ArrayList<byte[]>(); // initialize the entries list\n         entriesSize = new ArrayList<Integer>();\n-        sync = new SyncObj(); // initialize the synchronization data structure\n \n         zkc.close();\n     }"}]}

