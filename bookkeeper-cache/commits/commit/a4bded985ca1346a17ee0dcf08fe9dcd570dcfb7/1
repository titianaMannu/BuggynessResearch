{"sha":"a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","node_id":"MDY6Q29tbWl0MTU3NTk1NjphNGJkZWQ5ODVjYTEzNDZhMTdlZTBkY2YwOGZlOWRjZDU3MGRjZmI3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-15T09:37:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-15T09:37:43Z"},"message":"BOOKKEEPER-184: CompactionTest failing on Jenkins (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1300862 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab0b317c5b73203ce7da15ff1a269bac84b30afe","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ab0b317c5b73203ce7da15ff1a269bac84b30afe"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","html_url":"https://github.com/apache/bookkeeper/commit/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e8a1dec3fbea9b2f8c59c32e2f189d60c1864688","url":"https://api.github.com/repos/apache/bookkeeper/commits/e8a1dec3fbea9b2f8c59c32e2f189d60c1864688","html_url":"https://github.com/apache/bookkeeper/commit/e8a1dec3fbea9b2f8c59c32e2f189d60c1864688"}],"stats":{"total":652,"additions":378,"deletions":274},"files":[{"sha":"7ef11f14b522b18d8ce19ddaeca2b1a8d01d5baa","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -54,6 +54,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-185: Remove bookkeeper-server dependency on hadoop-common (ivank)\n \n+        BOOKKEEPER-184: CompactionTest failing on Jenkins (sijie via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"8ba99639f8298cb369af4486a75fd7a8267dc12c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":14,"deletions":12,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -27,7 +27,7 @@\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -38,11 +38,12 @@\n /**\n  * This class tests the entry log compaction functionality.\n  */\n-public class CompactionTest extends BaseTestCase {\n+public class CompactionTest extends BookKeeperClusterTestCase {\n     static Logger LOG = LoggerFactory.getLogger(CompactionTest.class);\n     DigestType digestType;\n \n     static int ENTRY_SIZE = 1024;\n+    static int NUM_BOOKIES = 1;\n \n     int numEntries;\n     int gcWaitTime;\n@@ -53,11 +54,12 @@\n \n     String msg;\n \n-    public CompactionTest(DigestType digestType) {\n-        super(3);\n-        this.digestType = digestType;\n+    public CompactionTest() {\n+        super(NUM_BOOKIES);\n \n-        numEntries = 2048;\n+        this.digestType = DigestType.CRC32;\n+\n+        numEntries = 100;\n         gcWaitTime = 1000;\n         minorCompactionThreshold = 0.1f;\n         majorCompactionThreshold = 0.5f;\n@@ -88,7 +90,7 @@ public void setUp() throws Exception {\n \n     LedgerHandle[] prepareData(int numEntryLogs, boolean changeNum)\n         throws Exception {\n-        // since an entry log file can hold at most 2048 entries\n+        // since an entry log file can hold at most 100 entries\n         // first ledger write 2 entries, which is less than low water mark\n         int num1 = 2;\n         // third ledger write more than high water mark entries\n@@ -99,7 +101,7 @@ public void setUp() throws Exception {\n \n         LedgerHandle[] lhs = new LedgerHandle[3];\n         for (int i=0; i<3; ++i) {\n-            lhs[i] = bkc.createLedger(3, 3, digestType, \"\".getBytes());\n+            lhs[i] = bkc.createLedger(NUM_BOOKIES, NUM_BOOKIES, digestType, \"\".getBytes());\n         }\n \n         for (int n = 0; n < numEntryLogs; n++) {\n@@ -161,7 +163,7 @@ public void testDisableCompaction() throws Exception {\n         baseConf.setMajorCompactionThreshold(0.0f);\n \n         // restart bookies\n-        restartBookies();\n+        restartBookies(baseConf);\n \n         // remove ledger2 and ledger3\n         // so entry log 1 and 2 would have ledger1 entries left\n@@ -191,7 +193,7 @@ public void testMinorCompaction() throws Exception {\n         baseConf.setMajorCompactionThreshold(0.0f);\n \n         // restart bookies\n-        restartBookies();\n+        restartBookies(baseConf);\n \n         // remove ledger2 and ledger3\n         bkc.deleteLedger(lhs[1].getId());\n@@ -226,7 +228,7 @@ public void testMajorCompaction() throws Exception {\n         baseConf.setMinorCompactionThreshold(0.0f);\n \n         // restart bookies\n-        restartBookies();\n+        restartBookies(baseConf);\n \n         // remove ledger1 and ledger3\n         bkc.deleteLedger(lhs[0].getId());\n@@ -276,7 +278,7 @@ public void testMajorCompactionAboveThreshold() throws Exception {\n     public void testCompactionSmallEntryLogs() throws Exception {\n \n         // create a ledger to write a few entries\n-        LedgerHandle alh = bkc.createLedger(3, 3, digestType, \"\".getBytes());\n+        LedgerHandle alh = bkc.createLedger(NUM_BOOKIES, NUM_BOOKIES, digestType, \"\".getBytes());\n         for (int i=0; i<3; i++) {\n            alh.addEntry(msg.getBytes());\n         }"},{"sha":"df2c36f663e803974f48b916388a76f26e77c7d3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -36,7 +36,7 @@\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import java.util.HashSet;\n import java.util.Set;\n \n@@ -47,14 +47,14 @@\n  * This unit test tests ledger fencing;\n  *\n  */\n-public class TestReadTimeout extends BaseTestCase {\n+public class TestReadTimeout extends BookKeeperClusterTestCase {\n     static Logger LOG = LoggerFactory.getLogger(TestReadTimeout.class);\n \n     DigestType digestType;\n \n-    public TestReadTimeout(DigestType digestType) {\n+    public TestReadTimeout() {\n         super(10);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     @Test"},{"sha":"dbcd65ae5f010744c2044f7b3c2d068b38d8638d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalLedgerDeleteTest.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalLedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalLedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalLedgerDeleteTest.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -32,10 +32,6 @@\n  */\n public class HierarchicalLedgerDeleteTest extends LedgerDeleteTest {\n \n-    public HierarchicalLedgerDeleteTest(DigestType digestType) {\n-        super(digestType);\n-    }\n-\n     @Before\n     @Override\n     public void setUp() throws Exception {"},{"sha":"4784854e8765a5fb81d58bc70c5e5156846e57be","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -30,18 +30,16 @@\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n-import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.Assert.*;\n \n-public class LedgerLayoutTest extends BaseTestCase {\n-    DigestType digestType;\n+public class LedgerLayoutTest extends BookKeeperClusterTestCase {\n \n-    public LedgerLayoutTest(DigestType digestType) {\n+    public LedgerLayoutTest() {\n         super(0);\n-        this.digestType = digestType;\n     }\n \n     @Test"},{"sha":"e07c756114b84b7ee872cacfa239e69622bebdba","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -33,7 +33,7 @@\n import java.util.List;\n import java.util.ArrayList;\n \n-import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -42,10 +42,10 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class TestLedgerManager extends BaseTestCase {\n+public class TestLedgerManager extends BookKeeperClusterTestCase {\n     static Logger LOG = LoggerFactory.getLogger(TestLedgerManager.class);\n \n-    public TestLedgerManager(DigestType digestType) {\n+    public TestLedgerManager() {\n         super(0);\n     }\n \n@@ -258,4 +258,4 @@ public void testConcurrent2() throws Exception {\n         assertEquals(\"Incorrect number of successes\", numThreadsEach, numSuccess);\n         assertEquals(\"Incorrect number of failures\", numThreadsEach, numFails);\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"437f0aebeade22edd847840e9544c754447dbc07","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":3,"deletions":232,"changes":235,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -21,258 +21,29 @@\n \n package org.apache.bookkeeper.test;\n \n-import org.apache.commons.io.FileUtils;\n-\n-import java.io.IOException;\n-import java.io.File;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n \n-import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.bookkeeper.bookie.BookieException;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.KeeperException;\n-\n-import org.junit.After;\n-import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import org.junit.runners.Parameterized.Parameters;\n \n-import junit.framework.TestCase;\n-\n @RunWith(Parameterized.class)\n-public abstract class BaseTestCase extends TestCase {\n+public abstract class BaseTestCase extends BookKeeperClusterTestCase {\n     static final Logger LOG = LoggerFactory.getLogger(BaseTestCase.class);\n \n-    protected ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n-    protected ZooKeeper zkc;\n-\n-    // BookKeeper\n-    protected List<File> tmpDirs = new ArrayList<File>();\n-    protected List<BookieServer> bs = new ArrayList<BookieServer>();\n-    protected List<ServerConfiguration> bsConfs = new ArrayList<ServerConfiguration>();\n-    protected Integer initialPort = 5000;\n-    private Integer nextPort = initialPort;\n-    protected int numBookies;\n-    protected BookKeeperTestClient bkc;\n-\n-    protected ServerConfiguration baseConf = new ServerConfiguration();\n-    protected ClientConfiguration baseClientConf = new ClientConfiguration();\n-\n     public BaseTestCase(int numBookies) {\n-        this.numBookies = numBookies;\n+        super(numBookies);\n     }\n \n     @Parameters\n     public static Collection<Object[]> configs() {\n         return Arrays.asList(new Object[][] { {DigestType.MAC }, {DigestType.CRC32}});\n     }\n \n-    protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {\n-        ServerConfiguration conf = new ServerConfiguration(baseConf);\n-        conf.setBookiePort(port);\n-        conf.setZkServers(zkServers);\n-        conf.setJournalDirName(journalDir.getPath());\n-        String[] ledgerDirNames = new String[ledgerDirs.length];\n-        for (int i=0; i<ledgerDirs.length; i++) {\n-            ledgerDirNames[i] = ledgerDirs[i].getPath();\n-        }\n-        conf.setLedgerDirNames(ledgerDirNames);\n-        return conf;\n-    }\n-\n-    @Before\n-    @Override\n-    public void setUp() throws Exception {\n-        try {\n-            zkUtil.startServer();\n-            zkc = zkUtil.getZooKeeperClient();\n-\n-            baseClientConf.setZkServers(zkUtil.getZooKeeperConnectString());\n-            if (numBookies > 0) {\n-                bkc = new BookKeeperTestClient(baseClientConf);\n-            }\n-\n-            // Create Bookie Servers (B1, B2, B3)\n-            for (int i = 0; i < numBookies; i++) {\n-                File f = File.createTempFile(\"bookie\", \"test\");\n-                tmpDirs.add(f);\n-                f.delete();\n-                f.mkdir();\n-\n-                ServerConfiguration conf = newServerConfiguration(\n-                        nextPort++, zkUtil.getZooKeeperConnectString(), f, new File[] { f });\n-                bsConfs.add(conf);\n-\n-                bs.add(startBookie(conf));\n-            }\n-        } catch(Exception e) {\n-            LOG.error(\"Error setting up\", e);\n-            throw e;\n-        }\n-    }\n-\n-    public void killBookie(InetSocketAddress addr) throws InterruptedException {\n-        BookieServer toRemove = null;\n-        for (BookieServer server : bs) {\n-            if (server.getLocalAddress().equals(addr)) {\n-                server.shutdown();\n-                toRemove = server;\n-            }\n-        }\n-        if (toRemove != null) {\n-            bs.remove(toRemove);\n-        }\n-    }\n-\n-    public void killBookie(int index) throws InterruptedException, IOException {\n-        if (index >= bs.size()) {\n-            throw new IOException(\"Bookie does not exist\");\n-        }\n-        BookieServer server = bs.get(index);\n-        server.shutdown();\n-        bs.remove(server);\n-    }\n-\n-    public void sleepBookie(InetSocketAddress addr, final int seconds,\n-                            final CountDownLatch l)\n-            throws InterruptedException, IOException {\n-        final String name = \"Bookie-\" + addr.getPort();\n-        Thread[] allthreads = new Thread[Thread.activeCount()];\n-        Thread.enumerate(allthreads);\n-        for (final Thread t : allthreads) {\n-            if (t.getName().equals(name)) {\n-                Thread sleeper = new Thread() {\n-                    public void run() {\n-                        try {\n-                            t.suspend();\n-                            l.countDown();\n-                            Thread.sleep(seconds*1000);\n-                            t.resume();\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error suspending thread\", e);\n-                        }\n-                    }\n-                };\n-                sleeper.start();\n-                return;\n-            }\n-        }\n-        throw new IOException(\"Bookie thread not found\");\n-    }\n-\n-    /**\n-     * Restart bookie servers\n-     *\n-     * @throws InterruptedException\n-     * @throws IOException\n-     */\n-    protected void restartBookies() \n-            throws InterruptedException, IOException, KeeperException, BookieException {\n-        restartBookies(null);\n-    }\n-\n-    /**\n-     * Restart bookie servers add new configuration settings\n-     */\n-    protected void restartBookies(ServerConfiguration newConf)\n-            throws InterruptedException, IOException, KeeperException, BookieException {\n-        // shut down bookie server\n-        for (BookieServer server : bs) {\n-            server.shutdown();\n-        }\n-        bs.clear();\n-        Thread.sleep(1000);\n-        // restart them to ensure we can't \n-        int j = 0;\n-        for (File f : tmpDirs) {\n-            ServerConfiguration conf = bsConfs.get(j);\n-            if (null != newConf) {\n-                conf.loadConf(newConf);\n-            }\n-            bs.add(startBookie(conf));\n-            j++;\n-        }\n-    }\n-\n-    /**\n-     * Helper method to startup a new bookie server with the indicated port\n-     * number\n-     *\n-     * @param port\n-     *            Port to start the new bookie server on\n-     * @throws IOException\n-     */\n-    protected int startNewBookie()\n-            throws IOException, InterruptedException, KeeperException, BookieException {\n-        File f = File.createTempFile(\"bookie\", \"test\");\n-        tmpDirs.add(f);\n-        f.delete();\n-        f.mkdir();\n-\n-        int port = nextPort++;\n-        ServerConfiguration conf = newServerConfiguration(port, zkUtil.getZooKeeperConnectString(),\n-                                                          f, new File[] { f });\n-\n-        bs.add(startBookie(conf));\n-\n-        return port;\n-    }\n-\n-    /**\n-     * Helper method to startup a bookie server using a configuration object\n-     *\n-     * @param conf\n-     *            Server Configuration Object\n-     *\n-     */\n-    private BookieServer startBookie(ServerConfiguration conf)\n-            throws IOException, InterruptedException, KeeperException, BookieException {\n-        BookieServer server = new BookieServer(conf);\n-        server.start();\n-\n-        int port = conf.getBookiePort();\n-        while(bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null) {\n-            Thread.sleep(500);\n-        }\n-\n-        bkc.readBookiesBlocking();\n-        LOG.info(\"New bookie on port \" + port + \" has been created.\");\n-\n-        return server;\n-    }\n-\n-    @After\n-    @Override\n-    public void tearDown() throws Exception {\n-        LOG.info(\"TearDown\");\n-\n-        if (bkc != null) {\n-            bkc.close();;\n-        }\n-\n-        for (BookieServer server : bs) {\n-            server.shutdown();\n-        }\n-\n-        for (File f : tmpDirs) {\n-            FileUtils.deleteDirectory(f);\n-        }\n-\n-        zkUtil.killServer();\n-    }\n-\n }"},{"sha":"0b882c663969a4d25b75d42416f7afcc5dce427f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"added","additions":336,"deletions":0,"changes":336,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -0,0 +1,336 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.test;\n+\n+import java.io.IOException;\n+import java.io.File;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.apache.bookkeeper.client.BookKeeperTestClient;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.junit.After;\n+import org.junit.Before;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * A class runs several bookie servers for testing.\n+ */\n+public abstract class BookKeeperClusterTestCase extends TestCase {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(BookKeeperClusterTestCase.class);\n+\n+    // ZooKeeper related variables\n+    protected ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n+    protected ZooKeeper zkc;\n+\n+    // BookKeeper related variables\n+    protected List<File> tmpDirs = new LinkedList<File>();\n+    protected List<BookieServer> bs = new LinkedList<BookieServer>();\n+    protected List<ServerConfiguration> bsConfs = new LinkedList<ServerConfiguration>();\n+    protected Integer initialPort = 5000;\n+    private Integer nextPort = initialPort;\n+    protected int numBookies;\n+    protected BookKeeperTestClient bkc;\n+\n+    protected ServerConfiguration baseConf = new ServerConfiguration();\n+    protected ClientConfiguration baseClientConf = new ClientConfiguration();\n+\n+    public BookKeeperClusterTestCase(int numBookies) {\n+        this.numBookies = numBookies;\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        try {\n+            // start zookeeper service\n+            startZKCluster();\n+            // start bookkeeper service\n+            startBKCluster();\n+        } catch (Exception e) {\n+            LOG.error(\"Error setting up\", e);\n+            throw e;\n+        }\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        LOG.info(\"TearDown\");\n+        // stop bookkeeper service\n+        stopBKCluster();\n+        // stop zookeeper service\n+        stopZKCluster();\n+    }\n+\n+    /**\n+     * Start zookeeper cluster\n+     *\n+     * @throws Exception\n+     */\n+    protected void startZKCluster() throws Exception {\n+        zkUtil.startServer();\n+        zkc = zkUtil.getZooKeeperClient();\n+    }\n+\n+    /**\n+     * Stop zookeeper cluster\n+     *\n+     * @throws Exception\n+     */\n+    protected void stopZKCluster() throws Exception {\n+        zkUtil.killServer();\n+    }\n+\n+    /**\n+     * Start cluster\n+     *\n+     * @throws Exception\n+     */\n+    protected void startBKCluster() throws Exception {\n+        baseClientConf.setZkServers(zkUtil.getZooKeeperConnectString());\n+        if (numBookies > 0) {\n+            bkc = new BookKeeperTestClient(baseClientConf);\n+        }\n+\n+        // Create Bookie Servers (B1, B2, B3)\n+        for (int i = 0; i < numBookies; i++) {\n+            startNewBookie();\n+        }\n+    }\n+\n+    /**\n+     * Stop cluster\n+     *\n+     * @throws Exception\n+     */\n+    protected void stopBKCluster() throws Exception {\n+        if (bkc != null) {\n+            bkc.close();;\n+        }\n+\n+        for (BookieServer server : bs) {\n+            server.shutdown();\n+        }\n+\n+        for (File f : tmpDirs) {\n+            FileUtils.deleteDirectory(f);\n+        }\n+    }\n+\n+    protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {\n+        ServerConfiguration conf = new ServerConfiguration(baseConf);\n+        conf.setBookiePort(port);\n+        conf.setZkServers(zkServers);\n+        conf.setJournalDirName(journalDir.getPath());\n+        String[] ledgerDirNames = new String[ledgerDirs.length];\n+        for (int i=0; i<ledgerDirs.length; i++) {\n+            ledgerDirNames[i] = ledgerDirs[i].getPath();\n+        }\n+        conf.setLedgerDirNames(ledgerDirNames);\n+        return conf;\n+    }\n+\n+    /**\n+     * Kill a bookie by its socket address\n+     *\n+     * @param addr\n+     *          Socket Address\n+     * @throws InterruptedException\n+     */\n+    public void killBookie(InetSocketAddress addr) throws InterruptedException {\n+        BookieServer toRemove = null;\n+        int toRemoveIndex = 0;\n+        for (BookieServer server : bs) {\n+            if (server.getLocalAddress().equals(addr)) {\n+                server.shutdown();\n+                toRemove = server;\n+                break;\n+            }\n+            ++toRemoveIndex;\n+        }\n+        if (toRemove != null) {\n+            bs.remove(toRemove);\n+            bsConfs.remove(toRemoveIndex);\n+        }\n+    }\n+\n+    /**\n+     * Kill a bookie by index\n+     *\n+     * @param index\n+     *          Bookie Index\n+     * @throws InterruptedException\n+     * @throws IOException\n+     */\n+    public void killBookie(int index) throws InterruptedException, IOException {\n+        if (index >= bs.size()) {\n+            throw new IOException(\"Bookie does not exist\");\n+        }\n+        BookieServer server = bs.get(index);\n+        server.shutdown();\n+        bs.remove(server);\n+        bsConfs.remove(index);\n+    }\n+\n+    /**\n+     * Sleep a bookie\n+     *\n+     * @param addr\n+     *          Socket Address\n+     * @param seconds\n+     *          Sleep seconds\n+     * @param l\n+     *          Count Down Latch\n+     * @throws InterruptedException\n+     * @throws IOException\n+     */\n+    public void sleepBookie(InetSocketAddress addr, final int seconds,\n+                            final CountDownLatch l)\n+            throws InterruptedException, IOException {\n+        final String name = \"Bookie-\" + addr.getPort();\n+        Thread[] allthreads = new Thread[Thread.activeCount()];\n+        Thread.enumerate(allthreads);\n+        for (final Thread t : allthreads) {\n+            if (t.getName().equals(name)) {\n+                Thread sleeper = new Thread() {\n+                    public void run() {\n+                        try {\n+                            t.suspend();\n+                            l.countDown();\n+                            Thread.sleep(seconds*1000);\n+                            t.resume();\n+                        } catch (Exception e) {\n+                            LOG.error(\"Error suspending thread\", e);\n+                        }\n+                    }\n+                };\n+                sleeper.start();\n+                return;\n+            }\n+        }\n+        throw new IOException(\"Bookie thread not found\");\n+    }\n+\n+    /**\n+     * Restart bookie servers\n+     *\n+     * @throws InterruptedException\n+     * @throws IOException\n+     * @throws KeeperException\n+     * @throws BookieException\n+     */\n+    public void restartBookies()\n+            throws InterruptedException, IOException, KeeperException, BookieException {\n+        restartBookies(null);\n+    }\n+\n+    /**\n+     * Restart bookie servers using new configuration settings\n+     *\n+     * @param newConf\n+     *          New Configuration Settings\n+     * @throws InterruptedException\n+     * @throws IOException\n+     * @throws KeeperException\n+     * @throws BookieException\n+     */\n+    public void restartBookies(ServerConfiguration newConf)\n+        throws InterruptedException, IOException, KeeperException, BookieException {\n+        // shut down bookie server\n+        for (BookieServer server : bs) {\n+            server.shutdown();\n+        }\n+        bs.clear();\n+        Thread.sleep(1000);\n+        // restart them to ensure we can't\n+        int j = 0;\n+        for (ServerConfiguration conf : bsConfs) {\n+            if (null != newConf) {\n+                conf.loadConf(newConf);\n+            }\n+            bs.add(startBookie(conf));\n+            j++;\n+        }\n+    }\n+\n+    /**\n+     * Helper method to startup a new bookie server with the indicated port\n+     * number\n+     *\n+     * @param port\n+     *            Port to start the new bookie server on\n+     * @throws IOException\n+     */\n+    public int startNewBookie()\n+            throws IOException, InterruptedException, KeeperException, BookieException {\n+        File f = File.createTempFile(\"bookie\", \"test\");\n+        tmpDirs.add(f);\n+        f.delete();\n+        f.mkdir();\n+\n+        int port = nextPort++;\n+        ServerConfiguration conf = newServerConfiguration(port, zkUtil.getZooKeeperConnectString(),\n+                                                          f, new File[] { f });\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf));\n+\n+        return port;\n+    }\n+\n+    /**\n+     * Helper method to startup a bookie server using a configuration object\n+     *\n+     * @param conf\n+     *            Server Configuration Object\n+     *\n+     */\n+    private BookieServer startBookie(ServerConfiguration conf)\n+            throws IOException, InterruptedException, KeeperException, BookieException {\n+        BookieServer server = new BookieServer(conf);\n+        server.start();\n+\n+        int port = conf.getBookiePort();\n+        while(bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null) {\n+            Thread.sleep(500);\n+        }\n+\n+        bkc.readBookiesBlocking();\n+        LOG.info(\"New bookie on port \" + port + \" has been created.\");\n+\n+        return server;\n+    }\n+}"},{"sha":"e795fcebc25faaf7bd900ad7e7b94c45d98096e4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -43,14 +43,14 @@\n /**\n  * This class tests that bookie rolling journals\n  */\n-public class BookieJournalRollingTest extends BaseTestCase {\n+public class BookieJournalRollingTest extends BookKeeperClusterTestCase {\n     static Logger LOG = LoggerFactory.getLogger(BookieJournalRollingTest.class);\n \n     DigestType digestType;\n \n-    public BookieJournalRollingTest(DigestType digestType) {\n+    public BookieJournalRollingTest() {\n         super(3);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     @Before"},{"sha":"de1db36d757bc9910639cbcf92c8eb8a5ec8ae53","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -28,20 +28,19 @@\n import static org.junit.Assert.*;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import java.util.HashSet;\n import junit.framework.TestCase;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.bookie.Bookie;\n \n-public class BookieZKExpireTest extends BaseTestCase {\n+public class BookieZKExpireTest extends BookKeeperClusterTestCase {\n \n-    public BookieZKExpireTest(DigestType digestType) {\n+    public BookieZKExpireTest() {\n         super(0);\n     }\n \n     @Test\n-    public void runBookieServerZKExpireBehaviourTest() throws Exception {\n+    public void testBookieServerZKExpireBehaviour() throws Exception {\n         BookieServer server = null;\n         try {\n             File f = File.createTempFile(\"bookieserver\", \"test\");"},{"sha":"6bbc8e3a3445f822332c5528e7675c7d4c053de2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -38,16 +38,16 @@\n /**\n  * This class tests that index corruption cases\n  */\n-public class IndexCorruptionTest extends BaseTestCase {\n+public class IndexCorruptionTest extends BookKeeperClusterTestCase {\n     static Logger LOG = LoggerFactory.getLogger(IndexCorruptionTest.class);\n \n     DigestType digestType;\n \n     int pageSize = 1024;\n \n-    public IndexCorruptionTest(DigestType digestType) {\n+    public IndexCorruptionTest() {\n         super(1);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n         baseConf.setPageSize(pageSize);\n     }\n "},{"sha":"2d3593ea04da2b5800ed404c1d342ef0aed8e0f0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java?ref=a4bded985ca1346a17ee0dcf08fe9dcd570dcfb7","patch":"@@ -35,13 +35,13 @@\n  * This class tests the ledger delete functionality both from the BookKeeper\n  * client and the server side.\n  */\n-public class LedgerDeleteTest extends BaseTestCase {\n+public class LedgerDeleteTest extends BookKeeperClusterTestCase {\n     static Logger LOG = LoggerFactory.getLogger(LedgerDeleteTest.class);\n     DigestType digestType;\n \n-    public LedgerDeleteTest(DigestType digestType) {\n+    public LedgerDeleteTest() {\n         super(3);\n-        this.digestType = digestType;\n+        this.digestType = DigestType.CRC32;\n     }\n \n     @Before"}]}

