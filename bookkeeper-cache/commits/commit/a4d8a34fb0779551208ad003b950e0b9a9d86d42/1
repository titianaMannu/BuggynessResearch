{"sha":"a4d8a34fb0779551208ad003b950e0b9a9d86d42","node_id":"MDY6Q29tbWl0MTU3NTk1NjphNGQ4YTM0ZmIwNzc5NTUxMjA4YWQwMDNiOTUwZTBiOWE5ZDg2ZDQy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-18T10:55:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-18T10:55:34Z"},"message":"BOOKKEEPER-509: TestBookKeeperPersistenceManager failed on latest trunk (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1423405 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"086eb1787480cf02e09007b678efaff48727971a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/086eb1787480cf02e09007b678efaff48727971a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a4d8a34fb0779551208ad003b950e0b9a9d86d42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a4d8a34fb0779551208ad003b950e0b9a9d86d42","html_url":"https://github.com/apache/bookkeeper/commit/a4d8a34fb0779551208ad003b950e0b9a9d86d42","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a4d8a34fb0779551208ad003b950e0b9a9d86d42/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c784b602325361a7606f2f53b677996e2c23f730","url":"https://api.github.com/repos/apache/bookkeeper/commits/c784b602325361a7606f2f53b677996e2c23f730","html_url":"https://github.com/apache/bookkeeper/commit/c784b602325361a7606f2f53b677996e2c23f730"}],"stats":{"total":60,"additions":45,"deletions":15},"files":[{"sha":"03f62aee38342d14d74032bf38a58941f8e7111b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a4d8a34fb0779551208ad003b950e0b9a9d86d42/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a4d8a34fb0779551208ad003b950e0b9a9d86d42/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a4d8a34fb0779551208ad003b950e0b9a9d86d42","patch":"@@ -144,6 +144,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-512: BookieZkExpireTest fails periodically (ivank via sijie)\n \n+        BOOKKEEPER-509: TestBookKeeperPersistenceManager failed on latest trunk (sijie via ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"ffd8b3675aa91362ab0c2618e68a1f88e7caf518","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/a4d8a34fb0779551208ad003b950e0b9a9d86d42/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4d8a34fb0779551208ad003b950e0b9a9d86d42/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=a4d8a34fb0779551208ad003b950e0b9a9d86d42","patch":"@@ -208,6 +208,7 @@ synchronized void logErrorAndReattemptRead(InetSocketAddress host, String errMsg\n         }\n \n         // return true if we managed to complete the entry\n+        // return false if the read entry is not complete or it is already completed before\n         boolean complete(InetSocketAddress host, final ChannelBuffer buffer) {\n             ChannelBufferInputStream is;\n             try {\n@@ -263,11 +264,20 @@ public void initiate() throws InterruptedException {\n         if (speculativeReadTimeout > 0) {\n             speculativeTask = scheduler.scheduleWithFixedDelay(new Runnable() {\n                     public void run() {\n+                        int x = 0;\n                         for (LedgerEntryRequest r : seq) {\n                             if (!r.isComplete()) {\n-                                r.maybeSendSpeculativeRead(heardFromHosts);\n+                                if (null != r.maybeSendSpeculativeRead(heardFromHosts)) {\n+                                    LOG.debug(\"Send speculative read for {}. Hosts heard are {}.\",\n+                                              r, heardFromHosts);\n+                                    ++x;\n+                                }\n                             }\n                         }\n+                        if (x > 0) {\n+                            LOG.info(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n+                                     new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n+                        }\n                     }\n                 }, speculativeReadTimeout, speculativeReadTimeout, TimeUnit.MILLISECONDS);\n         }\n@@ -320,10 +330,9 @@ public void readEntryComplete(int rc, long ledgerId, final long entryId, final C\n \n         if (entry.complete(rctx.to, buffer)) {\n             numPendingEntries--;\n-        }\n-\n-        if (numPendingEntries == 0) {\n-            submitCallback(BKException.Code.OK);\n+            if (numPendingEntries == 0) {\n+                submitCallback(BKException.Code.OK);\n+            }\n         }\n \n         if(numPendingEntries < 0)\n@@ -333,6 +342,7 @@ public void readEntryComplete(int rc, long ledgerId, final long entryId, final C\n     private void submitCallback(int code) {\n         if (speculativeTask != null) {\n             speculativeTask.cancel(true);\n+            speculativeTask = null;\n         }\n         cb.readComplete(code, lh, PendingReadOp.this, PendingReadOp.this.ctx);\n     }"},{"sha":"c8872b7593a862ab7bafe5a9ce6518587293157d","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/a4d8a34fb0779551208ad003b950e0b9a9d86d42/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4d8a34fb0779551208ad003b950e0b9a9d86d42/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=a4d8a34fb0779551208ad003b950e0b9a9d86d42","patch":"@@ -283,6 +283,10 @@ public void safeOpenComplete(int rc, LedgerHandle ledgerHandle, Object ctx) {\n                 @Override\n                 public void safeReadComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n                     if (rc != BKException.Code.OK || !seq.hasMoreElements()) {\n+                        if (rc == BKException.Code.OK) {\n+                            // means that there is no entries read, provide a meaningful exception\n+                            rc = BKException.Code.NoSuchEntryException;\n+                        }\n                         BKException bke = BKException.create(rc);\n                         logger.error(\"Error while reading from ledger: \" + imlr.range.getLedgerId() + \" for topic: \"\n                                      + topic.toStringUtf8(), bke);\n@@ -965,6 +969,11 @@ public void safeOpenComplete(int rc, LedgerHandle ledgerHandle, Object ctx) {\n                         public void safeReadComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n                         Object ctx) {\n                             if (rc != BKException.Code.OK || !seq.hasMoreElements()) {\n+                                if (rc == BKException.Code.OK) {\n+                                    // means that there is no entries read, provide a meaningful exception\n+                                    rc = BKException.Code.NoSuchEntryException;\n+                                }\n+                                logger.info(\"Received error code {}\", rc);\n                                 BKException bke = BKException.create(rc);\n                                 logger.error(\"While recovering ledger: \" + ledgerId + \" for topic: \"\n                                              + topic.toStringUtf8() + \", could not read last entry\", bke);"},{"sha":"5c1fe64e641296a2492f02f0c5c989d72d60024e","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","status":"modified","additions":19,"deletions":10,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/a4d8a34fb0779551208ad003b950e0b9a9d86d42/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/a4d8a34fb0779551208ad003b950e0b9a9d86d42/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java?ref=a4d8a34fb0779551208ad003b950e0b9a9d86d42","patch":"@@ -255,13 +255,8 @@ public TestBookKeeperPersistenceManager(boolean removeStartSeqId) {\n         });\n     }\n \n-    @Override\n-    @Before\n-    public void setUp() throws Exception {\n-        super.setUp();\n-\n-        // delay read response for 2s.\n-        bktb = new BookKeeperTestBase(numBookies, readDelay);\n+    private void startCluster(long delay) throws Exception {\n+        bktb = new BookKeeperTestBase(numBookies, 0L);\n         bktb.setUp();\n \n         conf = new ServerConfiguration() {\n@@ -294,16 +289,27 @@ public long getMaxEntriesPerLedger() {\n         sm = new MMSubscriptionManager(conf, metadataManagerFactory, tm, manager, null, scheduler);\n     }\n \n-    @Override\n-    @After\n-    public void tearDown() throws Exception {\n+    private void stopCluster() throws Exception {\n         tm.stop();\n         manager.stop();\n         sm.stop();\n         tpManager.close();\n         metadataManagerFactory.shutdown();\n         scheduler.shutdown();\n         bktb.tearDown();\n+    }\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        startCluster(0L);\n+    }\n+\n+    @Override\n+    @After\n+    public void tearDown() throws Exception {\n+        stopCluster();\n         super.tearDown();\n     }\n \n@@ -521,6 +527,9 @@ public void operationFailed(Object ctx, PubSubException exception) {\n \n     @Test\n     public void testScanMessagesOnTwoLedgers() throws Exception {\n+        stopCluster();\n+        startCluster(readDelay);\n+\n         ByteString topic = ByteString.copyFromUtf8(\"TestScanMessagesOnTwoLedgers\");\n \n         List<Message> msgs = new ArrayList<Message>();"}]}

