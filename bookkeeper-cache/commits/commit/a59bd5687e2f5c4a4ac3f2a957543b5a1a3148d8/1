{"sha":"a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8","node_id":"MDY6Q29tbWl0MTU3NTk1NjphNTliZDU2ODdlMmY1YzRhNGFjM2YyYTk1NzU0M2I1YTFhMzE0OGQ4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-09-07T15:58:26Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-09-07T15:58:26Z"},"message":"BOOKKEEPER-802: Bookkeeper protocol documentation (ivank via sijie)","tree":{"sha":"bd0231354bf4571eb9adef58cea6d82854922593","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bd0231354bf4571eb9adef58cea6d82854922593"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8","html_url":"https://github.com/apache/bookkeeper/commit/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"c29a4f2601f72f8543cc4b1db419c84b01de75ce","url":"https://api.github.com/repos/apache/bookkeeper/commits/c29a4f2601f72f8543cc4b1db419c84b01de75ce","html_url":"https://github.com/apache/bookkeeper/commit/c29a4f2601f72f8543cc4b1db419c84b01de75ce"}],"stats":{"total":117,"additions":117,"deletions":0},"files":[{"sha":"046fab3be3a39b24f2048fe2cb20c679fc750f65","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8","patch":"@@ -89,6 +89,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-863: Potential resource leak with unclosed LedgerManager in BookieShell (Ted Yu via sijie)\n \n+      BOOKKEEPER-802: Bookkeeper protocol documentation (ivank via sijie)\n+\n       bookkeeper-client:\n \n         BOOKKEEPER-810: Allow to configure TCP connect timeout (Charles Xie via sijie)"},{"sha":"d424c98f455cb5bb67315114ce5cbf7fd2b3bfda","filename":"doc/bookkeeperProtocol.textile","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/bookkeeper/blob/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8/doc/bookkeeperProtocol.textile","raw_url":"https://github.com/apache/bookkeeper/raw/a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8/doc/bookkeeperProtocol.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperProtocol.textile?ref=a59bd5687e2f5c4a4ac3f2a957543b5a1a3148d8","patch":"@@ -0,0 +1,115 @@\n+Title:     BookKeeper Replication Protocol\n+Notice:    Licensed to the Apache Software Foundation (ASF) under one\n+           or more contributor license agreements.  See the NOTICE file\n+           distributed with this work for additional information\n+           regarding copyright ownership.  The ASF licenses this file\n+           to you under the Apache License, Version 2.0 (the\n+           \"License\"); you may not use this file except in compliance\n+           with the License.  You may obtain a copy of the License at\n+           .\n+             http://www.apache.org/licenses/LICENSE-2.0\n+           .\n+           Unless required by applicable law or agreed to in writing,\n+           software distributed under the License is distributed on an\n+           \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+           KIND, either express or implied.  See the License for the\n+           specific language governing permissions and limitations\n+           under the License.\n+\n+This documents describes the bookkeeper replication protocol, and the guarantees it gives. It assumes you have a general idea about leader election and log replication and how you can use these in your system. If not, have a look at the bookkeeper \"tutorial\":./bookkeeperTutorial.html first.\n+\n+h1. Ledgers\n+\n+A ledger is the basic building block in Bookkeeper. All guarantees we provide are on ledgers. A replicated log is composed of an ordered list of ledgers. See \"From Ledgers to Logs\":./bookkeeperLedgers2Logs.html on how to build a replicated log from ledgers.\n+\n+Ledgers are composed of metadata and entries. The metadata is stored in a datastore which provides a compare-and-swap operation (generally ZooKeeper). Entries are stored on storage nodes known as bookies.\n+\n+A ledger has a single write and multiple readers (SWMR).\n+\n+A ledger's metadata contains:\n+\n+* id: a 64bit integer, unique within the system\n+* ensemble size (E): the number of nodes the ledger is stored on.\n+* write quorum size (Q[~w~]): the number of nodes each entry is written. In effect, the max replication for an entry.\n+* ack quorum size (Q[~a~]): the number of nodes a entry must be acknowledge on. In effect, the min replication for an entry.\n+* state: OPEN, CLOSED or IN_RECOVERY\n+* last entry: the last entry in the ledger, or NULL if state != CLOSED\n+* one or more fragments, which each consist of:\n+** First entry of fragment, list of bookies for fragment\n+\n+When creating the ledger, the following invariant must hold.\n+\n+   E >= Q[~w~] >= Q[~a~]\n+\n+h4. Ensembles\n+\n+When the ledger is created, E bookies are chosen for the entries of that ledger. The bookies are the initial ensemble of the ledger. A ledger can have multiple ensembles, but an entry has only one ensemble. Changes in the ensemble, involves a new fragment being added to the ledger.\n+\n+Take the following example. In this ledger, with ensemble size of 3, there are two fragments and thus two ensembles, one starting at entry 0, the second at entry 12. The second ensemble differs from the first only by its first element. This could be because bookie1 has failed and therefore had to be replaced.\n+\n+table(table table-bordered table-hover).\n+|_. FirstEntry |_. Bookies  |\n+| 0            | B1, B2, B3 |\n+| 12           | B4, B2, B3 |\n+\n+h4. Write Quorums\n+\n+Each entry in the log is written to Q[~w~] nodes. This is considered the write quorum for that entry. The write quorum is the subsequence of the ensemble, Q[~w~] in length, and starting at the bookie at index (entryid % E).\n+\n+For example, in a ledger of E = 4, Q[~w~] = 3 & Q[~a~] = 2, with an ensemble consisting of B1, B2, B3 & B4, the write quorums for the first 6 entries will be.\n+\n+table(table table-bordered table-hover).\n+|_. Entry |_. Write quorum |\n+| 0       | B1, B2, B3     |\n+| 1       | B2, B3, B4     |\n+| 2       | B3, B4, B1     |\n+| 3       | B4, B1, B2     |\n+| 4       | B1, B2, B3     |\n+| 5       | B2, B3, B4     |\n+\n+There are only E distinct write quorums in any ensemble. If Q[~w~] = Q[~a~], then there is only one, as no striping occurs.  \n+\n+h4. Ack Quorums\n+\n+The ack quorum for an entry is any subset of the write quorum of size Q[~a~]. If Q[~a~] bookies acknowledge an entry, it means it has been fully replicated.\n+\n+h4. Guarantees\n+\n+The system can tolerate Q[~a~] - 1 failures without data loss.\n+\n+Bookkeeper guarantees that:\n+ 1. all updates to a ledger will be read in the same order as they  were written \n+ 2. all clients will read the same sequence of updates from the ledger\n+\n+h1. Writing to the ledger\n+\n+When an entry is written to a ledger, it is assigned an entry id the write quorum is calculated. As there is only a single writer, ensuring that entry ids are sequential is trivial. A bookie acknowledges a write once it has been persisted to disk and is therefore durable. Once Q[~a~] bookies from the write quorum acknowledge the write, the write is acknowledged to the client, but only if all entries with lower entry ids in the ledger have already been acknowledged to the client.\n+\n+The entry written contains the ledger id, the entry id, the last add confirmed and the payload. The last add confirmed is the last entry which had been acknowledged to the client when this entry was written. Sending this with the entry speeds up recovery of the ledger in the case that the writer crashes.\n+\n+Another client can also read entries in the ledger up as far as the last add confirmed, as we guarantee that all entries thus far have been replicated on Q[~a~] nodes, and therefore all future readers will be able to also read it. However, to read like this, the ledger should be opened with a non-fencing open. Otherwise, it would kill the writer.\n+\n+If a node fails to acknowledge a write, the writer will create a new ensemble by replacing the failed node in the current ensemble. It creates a new fragment with this ensemble, starting from the first message that has not been acknowledged to the client. Creating the new fragment involves making a CAS write to the metadata. If the CAS write fails, someone else has modified something in the ledger metadata. This concurrent modification could have been caused by recovery or rereplication[1]. We reread the metadata. If the state of the ledger is no longer OPEN, we send an error to the client for any outstanding writes. Otherwise, we try to replace the failed node again.\n+\n+h1. Closing a ledger as a writer\n+\n+Closing a ledger is straight forward for a writer. The writer makes a CAS write to the metadata, changing the state to CLOSED, and setting the last entry of the ledger to the last entry which we have acknowledged to the client.\n+\n+If the CAS write fails, it means someone else has modified the metadata. We reread the metadata, and retry closing as long as the state of the ledger is still OPEN. If the state is IN_RECOVERY we send an error to the client. If the state is CLOSED and the last entry is the same as the last entry we have acknowledged to the client, we complete the close operation successfully. If the last entry is different to what we have acknowledged to the client, we send an error to the client.\n+\n+h1. Closing a ledger as a reader\n+\n+A reader can also force a ledger to close. Forcing the ledger to close will prevent any writer from adding new entries to the ledger. This is called *Fencing*. This can occur when a writer has crashed or has become unavailable, and a new writer wants to take over writing to the log. The new writer must ensure that it has seen all updates from the previous writer, and prevent the previous writer from making any new updates before making any updates of its own.\n+\n+To recover a ledger, we first update the state in the metadata to IN_RECOVERY. We then send a fence message to all the bookies in the last fragment of the ledger. When a bookie receives a fence message for a ledger, the fenced state of the ledger is persisted to disk. Once we receive a response from at least (Q[~w~]-Q[~a~])+1 bookies from each write quorum in the ensemble, the ledger is fenced.\n+\n+By ensuring we have received a response from at last (Q[~w~]-Q[~a~])+1 bookies in each write quorum, we ensure that, if the old writer is alive and tries to add a new entry there will be no write quorum in which Q[~a~] bookies will accept the write. If the old writer tries to update the ensemble, it will fail on the CAS metadata write, and then see that the ledger is in IN_RECOVERY state, and that it therefore shouldn't try to write to it.\n+\n+The old writer will be able to write entries to individual bookies (we can't guarantee that the fence message reaches all bookies), but as it will not be able reach ack quorum, it will not be able to send a success response to its client. The client will get a LedgerFenced error instead.\n+\n+It is important to note that when you get a ledger fenced message for an entry, it doesn't mean that the entry has _not_ been written. It means that the entry may or may not have been written, and this can only be determined after the ledger is recovered. In effect, LedgerFenced should be treated like a timeout.\n+\n+Once the ledger is fenced, recovery can begin. Recovery means finding the last entry of the ledger and closing the ledger. To find the last entry of the ledger, the client asks all bookies for the highest last add confirmed value they have seen. It waits until it has received a response at least (Q[~w~]-Q[~a~])+1 bookies from each write quorum, and takes the highest response as the entry id to start reading forward from. It then starts reading forward in the ledger, one entry at a time, replicating all entries it sees to the entire write quorum for that entry. Once it can no longer read any more entries, it updates the state in the metadata to CLOSED, and sets the last entry of the ledger to the last entry it wrote. Multiple readers can try to recovery a ledger at the same time, but as the metadata write is CAS, they will all converge on the same last entry of the ledger.\n+\n+fn1. Rereplication is a subsystem that runs in the background on bookies to ensure that ledgers are fully replicated even if one bookie from their ensemble is down\n+"}]}

