{"sha":"a77042db1b024b5cb2bdd2a5f49ea18a43bc036b","node_id":"MDY6Q29tbWl0MTU3NTk1NjphNzcwNDJkYjFiMDI0YjVjYjJiZGQyYTVmNDllYTE4YTQzYmMwMzZi","commit":{"author":{"name":"Siddharth Boobna","email":"sboobna@yahoo-inc.com","date":"2016-03-08T06:18:12Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-03-08T06:18:12Z"},"message":"BOOKKEEPER-898: listen to read only bookie changes also in auditor\n\nAuthor: Siddharth Boobna <sboobna@yahoo-inc.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #19 from sboobna/BOOKKEEPER-898","tree":{"sha":"a2edeada552c98edfcdef8f78f50db19ebafd826","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a2edeada552c98edfcdef8f78f50db19ebafd826"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b","html_url":"https://github.com/apache/bookkeeper/commit/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"fe52b500cfec1c93725fa967ad2d5e0e7350580c","url":"https://api.github.com/repos/apache/bookkeeper/commits/fe52b500cfec1c93725fa967ad2d5e0e7350580c","html_url":"https://github.com/apache/bookkeeper/commit/fe52b500cfec1c93725fa967ad2d5e0e7350580c"}],"stats":{"total":125,"additions":106,"deletions":19},"files":[{"sha":"ff339dbe5884a2da73b993a45fb2e7c6fcb4986c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":27,"deletions":15,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=a77042db1b024b5cb2bdd2a5f49ea18a43bc036b","patch":"@@ -20,6 +20,21 @@\n  */\n package org.apache.bookkeeper.client;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n+import java.io.IOException;\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Random;\n+import java.util.UUID;\n+\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.AsyncCallback.RecoverCallback;\n import org.apache.bookkeeper.client.BookKeeper.SyncOpenCallback;\n@@ -42,21 +57,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.IOException;\n-import java.net.UnknownHostException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.NoSuchElementException;\n-import java.util.Random;\n-import java.util.UUID;\n-\n-import static com.google.common.base.Charsets.UTF_8;\n-\n /**\n  * Admin client for BookKeeper clusters\n  */\n@@ -212,6 +212,18 @@ public void notifyBookiesChanged(final BookiesListener listener)\n         bkc.bookieWatcher.notifyBookiesChanged(listener);\n     }\n \n+    /**\n+     * Notify when the available list of read only bookies changes.\n+     * This is a one-shot notification. To receive subsequent notifications\n+     * the listener must be registered again.\n+     *\n+     * @param listener the listener to notify\n+     */\n+    public void notifyReadOnlyBookiesChanged(final BookiesListener listener)\n+            throws BKException {\n+        bkc.bookieWatcher.notifyReadOnlyBookiesChanged(listener);\n+    }\n+\n     /**\n      * Open a ledger as an administrator. This means that no digest password\n      * checks are done. Otherwise, the call is identical to BookKeeper#asyncOpenLedger"},{"sha":"6f8e20d8e3475454028553e73ef2785126b7625a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=a77042db1b024b5cb2bdd2a5f49ea18a43bc036b","patch":"@@ -125,6 +125,10 @@ public void process(WatchedEvent event) {\n         }\n     }\n \n+    void notifyReadOnlyBookiesChanged(final BookiesListener listener) throws BKException {\n+        readOnlyBookieWatcher.notifyBookiesChanged(listener);\n+    }\n+\n     public Collection<BookieSocketAddress> getBookies() throws BKException {\n         try {\n             List<String> children = bk.getZkHandle().getChildren(this.bookieRegistrationPath, false);\n@@ -357,6 +361,26 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n             }\n         }\n \n+        void notifyBookiesChanged(final BookiesListener listener) throws BKException {\n+            try {\n+                bk.getZkHandle().getChildren(this.readOnlyBookieRegPath, new Watcher() {\n+                    public void process(WatchedEvent event) {\n+                        // listen children changed event from ZooKeeper\n+                        if (event.getType() == EventType.NodeChildrenChanged) {\n+                            listener.availableBookiesChanged();\n+                        }\n+                    }\n+                });\n+            } catch (KeeperException ke) {\n+                logger.error(\"Error registering watcher with zookeeper\", ke);\n+                throw new BKException.ZKException();\n+            } catch (InterruptedException ie) {\n+                Thread.currentThread().interrupt();\n+                logger.error(\"Interrupted registering watcher with zookeeper\", ie);\n+                throw new BKException.BKInterruptedException();\n+            }\n+        }\n+\n         // Read children and register watcher for readonly bookies path\n         void readROBookies(ChildrenCallback callback) {\n             bk.getZkHandle().getChildren(this.readOnlyBookieRegPath, this, callback, null);"},{"sha":"2e9e048994966ffc7122d121577b12ea36fa782a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=a77042db1b024b5cb2bdd2a5f49ea18a43bc036b","patch":"@@ -237,6 +237,7 @@ public void run() {\n                 LOG.info(\"Periodic checking disabled\");\n             }\n             try {\n+                notifyBookieChanges();\n                 knownBookies = getAvailableBookies();\n             } catch (BKException bke) {\n                 LOG.error(\"Couldn't get bookie list, exiting\", bke);\n@@ -265,10 +266,7 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n     }\n \n     private List<String> getAvailableBookies() throws BKException {\n-        // Get the available bookies, also watch for further changes\n-        // Watching on only available bookies is sufficient, as changes in readonly bookies also changes in available\n-        // bookies\n-        admin.notifyBookiesChanged(this);\n+        // Get the available bookies\n         Collection<BookieSocketAddress> availableBkAddresses = admin.getAvailableBookies();\n         Collection<BookieSocketAddress> readOnlyBkAddresses = admin.getReadOnlyBookies();\n         availableBkAddresses.addAll(readOnlyBkAddresses);\n@@ -280,6 +278,11 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n         return availableBookies;\n     }\n \n+    private void notifyBookieChanges() throws BKException {\n+        admin.notifyBookiesChanged(this);\n+        admin.notifyReadOnlyBookiesChanged(this);\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     private void auditBookies()\n             throws BKAuditException, KeeperException,\n@@ -501,6 +504,12 @@ public void processResult(int rc, String s, Object obj) {\n \n     @Override\n     public void availableBookiesChanged() {\n+        // since a watch is triggered, we need to watch again on the bookies\n+        try {\n+            notifyBookieChanges();\n+        } catch (BKException bke) {\n+            LOG.error(\"Exception while registering for a bookie change notification\", bke);\n+        }\n         submitAuditTask();\n     }\n "},{"sha":"8b0c344167424b02c80afa91963ef709acca8ce1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a77042db1b024b5cb2bdd2a5f49ea18a43bc036b/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=a77042db1b024b5cb2bdd2a5f49ea18a43bc036b","patch":"@@ -279,6 +279,48 @@ public void testReadOnlyBookieExclusionFromURLedgersCheck() throws Exception {\n         assertFalse(\"latch should not have completed\", underReplicaLatch.await(5, TimeUnit.SECONDS));\n     }\n \n+    /**\n+     * Test Auditor should consider Readonly bookie fail and publish ur ledgers for readonly bookies.\n+     */\n+    @Test(timeout = 20000)\n+    public void testReadOnlyBookieShutdown() throws Exception {\n+        LedgerHandle lh = createAndAddEntriesToLedger();\n+        long ledgerId = lh.getId();\n+        ledgerList.add(ledgerId);\n+        LOG.debug(\"Created following ledgers : \" + ledgerList);\n+\n+        int count = ledgerList.size();\n+        final CountDownLatch underReplicaLatch = registerUrLedgerWatcher(count);\n+\n+        int bkIndex = bs.size() - 1;\n+        ServerConfiguration bookieConf = bsConfs.get(bkIndex);\n+        BookieServer bk = bs.get(bkIndex);\n+        bookieConf.setReadOnlyModeEnabled(true);\n+        bk.getBookie().doTransitionToReadOnlyMode();\n+\n+        // grace period for publishing the bk-ledger\n+        LOG.debug(\"Waiting for Auditor to finish ledger check.\");\n+        assertFalse(\"latch should not have completed\", underReplicaLatch.await(5, TimeUnit.SECONDS));\n+\n+        String shutdownBookie = shutdownBookie(bkIndex);\n+\n+        // grace period for publishing the bk-ledger\n+        LOG.debug(\"Waiting for ledgers to be marked as under replicated\");\n+        underReplicaLatch.await(5, TimeUnit.SECONDS);\n+        Map<Long, String> urLedgerData = getUrLedgerData(urLedgerList);\n+        assertEquals(\"Missed identifying under replicated ledgers\", 1, urLedgerList.size());\n+\n+        /*\n+         * Sample data format present in the under replicated ledger path\n+         * \n+         * {4=replica: \"10.18.89.153:5002\"}\n+         */\n+        assertTrue(\"Ledger is not marked as underreplicated:\" + ledgerId, urLedgerList.contains(ledgerId));\n+        String data = urLedgerData.get(ledgerId);\n+        assertTrue(\"Bookie \" + shutdownBookie + \"is not listed in the ledger as missing replica :\" + data,\n+                data.contains(shutdownBookie));\n+    }\n+\n     /**\n      * Wait for ledger to be underreplicated, and to be missing all replicas specified\n      */"}]}

