{"sha":"a7d658179db3226dc33d53f4d25afd64ea90c061","node_id":"MDY6Q29tbWl0MTU3NTk1NjphN2Q2NTgxNzlkYjMyMjZkYzMzZDUzZjRkMjVhZmQ2NGVhOTBjMDYx","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-05-08T07:35:47Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-05-08T07:35:47Z"},"message":"BOOKKEEPER-229: Deleted entry log files would be garbage collected again and again. (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1335367 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6da36b026d653c255b2eb2ee3f26912aca8e2bd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e6da36b026d653c255b2eb2ee3f26912aca8e2bd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a7d658179db3226dc33d53f4d25afd64ea90c061","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a7d658179db3226dc33d53f4d25afd64ea90c061","html_url":"https://github.com/apache/bookkeeper/commit/a7d658179db3226dc33d53f4d25afd64ea90c061","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a7d658179db3226dc33d53f4d25afd64ea90c061/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"6fc326ebd647afbbcc0beab6764b5d3748e50088","url":"https://api.github.com/repos/apache/bookkeeper/commits/6fc326ebd647afbbcc0beab6764b5d3748e50088","html_url":"https://github.com/apache/bookkeeper/commit/6fc326ebd647afbbcc0beab6764b5d3748e50088"}],"stats":{"total":47,"additions":25,"deletions":22},"files":[{"sha":"bb7140587dacd474303479d33d8fd22a6d7d7fae","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a7d658179db3226dc33d53f4d25afd64ea90c061/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a7d658179db3226dc33d53f4d25afd64ea90c061/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a7d658179db3226dc33d53f4d25afd64ea90c061","patch":"@@ -94,6 +94,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-232: AsyncBK tests failing (umamaheswararao via ivank)\n \n+\tBOOKKEEPER-229: Deleted entry log files would be garbage collected again and again. (sijie via fpj)\n+\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)"},{"sha":"b35ec77bde136dc1031b646cda4246c78c8359e8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":14,"deletions":20,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/a7d658179db3226dc33d53f4d25afd64ea90c061/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/a7d658179db3226dc33d53f4d25afd64ea90c061/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=a7d658179db3226dc33d53f4d25afd64ea90c061","patch":"@@ -186,11 +186,7 @@ public void run() {\n \n             // Extract all of the ledger ID's that comprise all of the entry logs\n             // (except for the current new one which is still being written to).\n-            try {\n-                entryLogMetaMap = extractMetaFromEntryLogs(entryLogMetaMap);\n-            } catch (IOException ie) {\n-                LOG.warn(\"Exception when extracting entry log meta from entry logs : \", ie);\n-            }\n+            entryLogMetaMap = extractMetaFromEntryLogs(entryLogMetaMap);\n \n             // gc inactive/deleted ledgers\n             doGcLedgers();\n@@ -457,8 +453,7 @@ public void process(long ledgerId, ByteBuffer entry) {\n      *          Existing EntryLogs to Meta\n      * @throws IOException\n      */\n-    protected Map<Long, EntryLogMetadata> extractMetaFromEntryLogs(Map<Long, EntryLogMetadata> entryLogMetaMap)\n-            throws IOException {\n+    protected Map<Long, EntryLogMetadata> extractMetaFromEntryLogs(Map<Long, EntryLogMetadata> entryLogMetaMap) {\n         // Extract it for every entry log except for the current one.\n         // Entry Log ID's are just a long value that starts at 0 and increments\n         // by 1 when the log fills up and we roll to a new one.\n@@ -470,9 +465,14 @@ public void process(long ledgerId, ByteBuffer entry) {\n             }\n             LOG.info(\"Extracting entry log meta from entryLogId: \" + entryLogId);\n \n-            // Read through the entry log file and extract the entry log meta\n-            entryLogMetaMap.put(entryLogId,\n-                                extractMetaFromEntryLog(entryLogger, entryLogId));\n+            try {\n+                // Read through the entry log file and extract the entry log meta\n+                EntryLogMetadata entryLogMeta = extractMetaFromEntryLog(entryLogger, entryLogId);\n+                entryLogMetaMap.put(entryLogId, entryLogMeta);\n+            } catch (IOException e) {\n+                LOG.warn(\"Premature exception when processing \" + entryLogId +\n+                         \"recovery will take care of the problem\", e);\n+            }\n         }\n         return entryLogMetaMap;\n     }\n@@ -481,16 +481,10 @@ static EntryLogMetadata extractMetaFromEntryLog(EntryLogger entryLogger, long en\n             throws IOException {\n         EntryLogMetadata entryLogMeta = new EntryLogMetadata(entryLogId);\n         ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);\n-        try {\n-            // Read through the entry log file and extract the entry log meta\n-            entryLogger.scanEntryLog(entryLogId, scanner);\n-            LOG.info(\"Retrieved entry log meta data entryLogId: \"\n-                     + entryLogId + \", meta: \" + entryLogMeta);\n-        } catch(IOException e) {\n-            LOG.warn(\"Premature exception when processing \" + entryLogId +\n-                     \"recovery will take care of the problem\", e);\n-        }\n-\n+        // Read through the entry log file and extract the entry log meta\n+        entryLogger.scanEntryLog(entryLogId, scanner);\n+        LOG.info(\"Retrieved entry log meta data entryLogId: \"\n+                 + entryLogId + \", meta: \" + entryLogMeta);\n         return entryLogMeta;\n     }\n }"},{"sha":"a0d2215d41926f5a6bbd970ec4bd76bedb5a92e2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/a7d658179db3226dc33d53f4d25afd64ea90c061/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/a7d658179db3226dc33d53f4d25afd64ea90c061/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=a7d658179db3226dc33d53f4d25afd64ea90c061","patch":"@@ -30,6 +30,7 @@\n import junit.framework.TestCase;\n \n import org.apache.bookkeeper.bookie.GarbageCollectorThread.EntryLogMetadata;\n+import org.apache.bookkeeper.bookie.GarbageCollectorThread.ExtractionScanner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.junit.After;\n import org.junit.Before;\n@@ -71,8 +72,14 @@ public void testCorruptEntryLog() throws Exception {\n         // now see which ledgers are in the log\n         logger = new EntryLogger(conf);\n \n-        EntryLogMetadata meta =\n-            GarbageCollectorThread.extractMetaFromEntryLog(logger, 0L);\n+        EntryLogMetadata meta = new EntryLogMetadata(0L);\n+        ExtractionScanner scanner = new ExtractionScanner(meta);\n+\n+        try {\n+            logger.scanEntryLog(0L, scanner);\n+            fail(\"Should not reach here!\");\n+        } catch (IOException ie) {\n+        }\n \n         LOG.info(\"Extracted Meta From Entry Log {}\", meta);\n         assertNotNull(meta.ledgersMap.get(1L));"}]}

