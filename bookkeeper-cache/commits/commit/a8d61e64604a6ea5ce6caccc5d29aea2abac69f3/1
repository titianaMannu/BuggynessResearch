{"sha":"a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","node_id":"MDY6Q29tbWl0MTU3NTk1NjphOGQ2MWU2NDYwNGE2ZWE1Y2U2Y2FjY2M1ZDI5YWVhMmFiYWM2OWYz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-17T14:42:23Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-17T14:42:23Z"},"message":"BOOKKEEPER-375: Document about Auto replication service in BK (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1422952 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c8906609850184b38bbb4819e773baeeec24b5e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7c8906609850184b38bbb4819e773baeeec24b5e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","html_url":"https://github.com/apache/bookkeeper/commit/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696","url":"https://api.github.com/repos/apache/bookkeeper/commits/d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696","html_url":"https://github.com/apache/bookkeeper/commit/d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696"}],"stats":{"total":91,"additions":78,"deletions":13},"files":[{"sha":"476b1eb5d065a72322be0ce87fb4f4a8fe32481b","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","patch":"@@ -258,6 +258,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-511: BookieShell is very noisy (ivank via sijie)\n \n+        BOOKKEEPER-375: Document about Auto replication service in BK (umamahesh via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)"},{"sha":"59adbb2cff67e042192c5b16381e43c7ce0b6d36","filename":"doc/bookieRecovery.textile","status":"modified","additions":51,"deletions":13,"changes":64,"blob_url":"https://github.com/apache/bookkeeper/blob/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3/doc/bookieRecovery.textile","raw_url":"https://github.com/apache/bookkeeper/raw/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3/doc/bookieRecovery.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookieRecovery.textile?ref=a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","patch":"@@ -15,27 +15,65 @@ Notice:    Licensed to the Apache Software Foundation (ASF) under one\n            KIND, either express or implied.  See the License for the\n            specific language governing permissions and limitations\n            under the License.\n+h1. Bookie Ledger Recovery\n \n-h1. Bookie Recovery\n+p. When a Bookie crashes, any ledgers with data on that Bookie become underreplicated. There are two options for bringing the ledgers back to full replication, Autorecovery and Manual Bookie Recovery.\n \n-p. When a bookie crashes, any ledgers with entries on the bookie potentially become under-replicated. For this reason, we provide a recovery tool which will ensure that all ledgers which had entries on the bookie are fully replicated. At the moment, this is not an automatic process. The administrator must run this tool manually when he sees that the bookie has died. \n+h2. Autorecovery\n+\n+p. Autorecovery runs as a daemon alongside the Bookie daemon on each Bookie. Autorecovery detects when a bookie in the cluster has become unavailable, and rereplicates all the ledgers which were on that bookie, so that those ledgers are brough back to full replication. See the \"Admin Guide\":./bookkeeperConfig.html for instructions on how to start autorecovery.\n+\n+h2. Manual Bookie Recovery\n+\n+p. If autorecovery is not enabled, it is possible for the adminisatrator to manually rereplicate the data from the failed bookie.\n \n To run recovery, with zk1.example.com as the zookeeper ensemble, and 192.168.1.10 as the failed bookie, do the following:\n \n @bookkeeper-server/bin/bookkeeper org.apache.bookkeeper.tools.BookKeeperTools zk1.example.com:2181 192.168.1.10:3181@\n \n-It is necessary to specify the host and port portion of failed bookie, as this is how it identifies itself to zookeeper. It is possible to specify a third argument, which is the bookie to replicate to. If this is omitted, as in our example, a random bookie is chosen for each ledger fragment. A ledger fragment is a continuous sequence of entries in a bookie, which share the same ensemble. \n+It is necessary to specify the host and port portion of failed bookie, as this is how it identifies itself to zookeeper. It is possible to specify a third argument, which is the bookie to replicate to. If this is omitted, as in our example, a random bookie is chosen for each ledger segment. A ledger segment is a continuous sequence of entries in a bookie, which share the same ensemble.\n+\n+h2. AutoRecovery Internals\n+\n+Auto-Recovery has two components:\n+\n+* *Auditor*, a singleton node which watches for bookie failure, and creates rereplication tasks for the ledgers on failed bookies.\n+* *ReplicationWorker*, runs on each Bookie, takes rereplication tasks and executes them.\n+\n+Both the components run as threads in the the *AutoRecoveryMain* process. The *AutoRecoveryMain* process runs on each Bookie in the cluster. All recovery nodes will participate in leader election to decide which node becomes the auditor. Those which fail to become the auditor will watch the elected auditor, and will run election again if they see that it has failed.\n+\n+h3. Auditor\n+\n+The auditor watches the the list of bookies registered with ZooKeeper in the cluster. A Bookie registers with ZooKeeper during startup. If the bookie crashes or is killed, the bookie's registration disappears. The auditor is notified of changes in the registered bookies list.\n+\n+When the auditor sees that a bookie has disappeared from the list, it immediately scans the complete ledger list to find ledgers which have stored data on the failed bookie. Once it has a list of ledgers which need to be rereplicated, it will publish a rereplication task for each ledger under the /underreplicated/ znode in ZooKeeeper.\n+\n+h3. ReplicationWorker\n+\n+Each replication worker watches for tasks being published in the /underreplicated/ znode. When a new task appears, it will try to get a lock on it. If it cannot acquire the lock, it tries the next entry. The locks are implemented using ZooKeeper ephemeral znodes.\n+\n+The replication worker will scan through the rereplication task's ledger for segments of which its local bookie is not a member. When it finds segments matching this criteria it will replicate the entries of that segment to the local bookie.  If, after this process, the ledger is fully replicated, the ledgers entry under /underreplicated/ is deleted, and the lock is released. If there is a problem replicating, or there are still segments in the ledger which are still underreplicated (due to the local bookie already being part of the ensemble for the segment), then the lock is simply released.\n+\n+If the replication worker finds a segment which needs rereplication, but does not have a defined endpoint (i.e. the final segment of a ledger currently being written to), it will wait for a grace period before attempting rereplication. If the segment needing rereplciation still does not have a defined endpoint, the ledger is fenced and rereplication then takes place. This avoids the case where a client is writing to a ledger, and one of the bookies goes down, but the client has not written an entry to that bookie before rereplication takes place. The client could continue writing to the old segment, even though the ensemble for the segment had changed. This could lead to data loss. Fencing prevents this scenario from happening. In the normal case, the client will try to write to the failed bookie within the grace period, and will have started a new segment before rereplication starts. See the \"Admin Guide\":./bookkeeperConfig.html for how to configure this grace period.\n+\n+h2. The Rereplication process\n+\n+The ledger rereplication process is as follows.\n+\n+# The client goes through all ledger segments in the ledger, selecting those which contain the failed bookie;\n+# A recovery process is initiated for each ledger segment in this list;\n+## The client selects a bookie to which all entries in the ledger segment will be replicated; In the case of autorecovery, this will always be the local bookie;\n+## the client reads entries that belong to the ledger segment from other bookies in the ensemble and writes them to the selected bookie;\n+## Once all entries have been replicated, the zookeeper metadata for the segment is updated to reflect the new ensemble;\n+## The segment is marked as fully replicated in the recovery tool;\n+# Once all ledger segments are marked as fully replicated, the ledger is marked as fully replicated.\n+\n+h2. The Manual Bookie Recovery process\n \n-The recovery process is as follows.\n+The manual bookie recovery process is as follows.\n \n # The client reads the metadata of active ledgers from zookeeper;\n-# From this, the ledgers which contain fragments using the failed bookie in their ensemble are selected;\n+# From this, the ledgers which contain segments using the failed bookie in their ensemble are selected;\n # A recovery process is initiated for each ledger in this list;\n-## The client goes through all ledger fragments in the ledger, selecting those which contain the failed bookie;\n-## A recovery process is initiated for each ledger fragment in this list;\n-### The client selects a bookie to which all entries in the ledger fragment will be replicated;\n-### the client reads entries that belong to the ledger fragment from other bookies in the ensemble and writes them to the selected bookie;\n-### Once all entries have been replicated, the zookeeper metadata for the fragment is updated to reflect the new ensemble;\n-### The fragment is marked as fully replicated in the recovery tool;\n-## Once all ledger fragments are marked as fully replicated, the ledger is marked as fully replicated;\n-# Once all ledgers are marked as fully replicated, bookie recovery is finished.\n\\ No newline at end of file\n+## The Ledger rereplication process is run for each ledger;\n+# Once all ledgers are marked as fully replicated, bookie recovery is finished."},{"sha":"46b02ca83e01b07840a03c4cb5bd602116957b01","filename":"doc/bookkeeperConfig.textile","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3/doc/bookkeeperConfig.textile","raw_url":"https://github.com/apache/bookkeeper/raw/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3/doc/bookkeeperConfig.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperConfig.textile?ref=a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","patch":"@@ -115,6 +115,31 @@ The mechanism to prevent the bookie from starting up in the case of configuratio\n # A strict subset of the ledger devices (among multiple ledger devices) has been replaced, consequently making the content of the replaced devices unavailable;\n # A strict subset of the ledger directories has been accidentally deleted.\n \n+h2. Running Autorecovery nodes\n+\n+To run autorecovery nodes, we execute the following command in every Bookie node:\n+ @bookkeeper-server/bin/bookkeeper autorecovery@\n+\n+Configuration parameters for autorecovery can be set in *bookkeeper-server/conf/bk_server.conf*.\n+\n+Important parameters are:\n+\n+* @rereplicationEntryBatchSize@ specifies the number of entries which a replication will rereplicate in parallel. The default value is 10. A larger value for this parameter will increase the speed at which autorecovery occurs but will increate the memory requirement of the autorecovery process, and create more load on the cluster.\n+\n+* @openLedgerRereplicationGracePeriod@, is the amount of time, in milliseconds, which a recovery worker will wait before recovering a ledger segment which has no defined ended, i.e. the client is still writing to that segment. If the client is still active, it should detect the bookie failure, and start writing to a new ledger segment, and a new ensemble, which doesn't include the failed bookie. Creating new ledger segment will define the end of the previous segment. If, after the grace period, the ledger segment's end has not been defined, we assume the writing client has crashed. The ledger is fenced and the client is blocked from writing any more entries to the ledger. The default value is 30000ms.\n+\n+h3. Disabling Autorecovery during maintenance\n+\n+It is useful to disable autorecovery during maintenance, for example, to avoid a Bookie's data being unnecessarily rereplicated when it is only being taken down for a short period to update the software, or change the configuration.\n+\n+To disable autorecovery, run:\n+@bookkeeper-server/bin/bookkeeper shell autorecovery -disable@\n+\n+To reenable, run:\n+@bookkeeper-server/bin/bookkeeper shell autorecovery -enable@\n+\n+Autorecovery enable/disable only needs to be run once for the whole cluster, and not individually on each Bookie in the cluster.\n+\n h2. Setting up a test ensemble\n \n Sometimes it is useful to run a ensemble of bookies on your local machine for testing. We provide a utility for doing this. It will set up N bookies, and a zookeeper instance locally. The data on these bookies and of the zookeeper instance are not persisted over restarts, so obviously this should never be used in a production environment. To run a test ensemble of 10 bookies, do the following:"}]}

