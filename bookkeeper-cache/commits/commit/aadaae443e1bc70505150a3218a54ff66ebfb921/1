{"sha":"aadaae443e1bc70505150a3218a54ff66ebfb921","node_id":"MDY6Q29tbWl0MTU3NTk1NjphYWRhYWU0NDNlMWJjNzA1MDUxNTBhMzIxOGE1NGZmNjZlYmZiOTIx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T13:14:40Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T13:14:40Z"},"message":"BOOKKEEPER-446: BookKeeper.createLedger(..) should not mask the error with ZKException (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1521474 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"767838f3a63010b61a246903d44ab2a5c7b95cdd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/767838f3a63010b61a246903d44ab2a5c7b95cdd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/aadaae443e1bc70505150a3218a54ff66ebfb921","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/aadaae443e1bc70505150a3218a54ff66ebfb921","html_url":"https://github.com/apache/bookkeeper/commit/aadaae443e1bc70505150a3218a54ff66ebfb921","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/aadaae443e1bc70505150a3218a54ff66ebfb921/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"98d6dcec7403c523cfd07cf48ed878e1ab13eae0","url":"https://api.github.com/repos/apache/bookkeeper/commits/98d6dcec7403c523cfd07cf48ed878e1ab13eae0","html_url":"https://github.com/apache/bookkeeper/commit/98d6dcec7403c523cfd07cf48ed878e1ab13eae0"}],"stats":{"total":101,"additions":74,"deletions":27},"files":[{"sha":"c431ca21281e757e1531285ee793b80e71f63257","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/aadaae443e1bc70505150a3218a54ff66ebfb921/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/aadaae443e1bc70505150a3218a54ff66ebfb921/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=aadaae443e1bc70505150a3218a54ff66ebfb921","patch":"@@ -98,6 +98,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-580: improve close logic (sijie & ivank via ivank)\n \n+        BOOKKEEPER-446: BookKeeper.createLedger(..) should not mask the error with ZKException (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"ace1409018ee6af17d288a43b325a25b0a1271b1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","raw_url":"https://github.com/apache/bookkeeper/raw/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java?ref=aadaae443e1bc70505150a3218a54ff66ebfb921","patch":"@@ -88,8 +88,12 @@ public static BKException create(int code) {\n             return new BKUnclosedFragmentException();\n         case Code.WriteOnReadOnlyBookieException:\n             return new BKWriteOnReadOnlyBookieException();\n-        default:\n+        case Code.ReplicationException:\n+            return new BKReplicationException();\n+        case Code.IllegalOpException:\n             return new BKIllegalOpException();\n+        default:\n+            return new BKUnexpectedConditionException();\n         }\n     }\n \n@@ -123,6 +127,12 @@ public static BKException create(int code) {\n         int UnauthorizedAccessException = -102;\n         int UnclosedFragmentException = -103;\n         int WriteOnReadOnlyBookieException = -104;\n+\n+        // generic exception code used to propagate in replication pipeline\n+        int ReplicationException = -200;\n+\n+        // For all unexpected error conditions\n+        int UnexpectedConditionException = -999;\n     }\n \n     public void setCode(int code) {\n@@ -181,8 +191,12 @@ public static String getMessage(int code) {\n             return \"Attempting to use an unclosed fragment; This is not safe\";\n         case Code.WriteOnReadOnlyBookieException:\n             return \"Attempting to write on ReadOnly bookie\";\n-        default:\n+        case Code.ReplicationException:\n+            return \"Errors in replication pipeline\";\n+        case Code.IllegalOpException:\n             return \"Invalid operation\";\n+        default:\n+            return \"Unexpected condition\";\n         }\n     }\n \n@@ -228,6 +242,12 @@ public BKIllegalOpException() {\n         }\n     }\n \n+    public static class BKUnexpectedConditionException extends BKException {\n+        public BKUnexpectedConditionException() {\n+            super(Code.UnexpectedConditionException);\n+        }\n+    }\n+\n     public static class BKNotEnoughBookiesException extends BKException {\n         public BKNotEnoughBookiesException() {\n             super(Code.NotEnoughBookiesException);\n@@ -323,4 +343,10 @@ public BKWriteOnReadOnlyBookieException() {\n             super(Code.WriteOnReadOnlyBookieException);\n         }\n     }\n+\n+    public static class BKReplicationException extends BKException {\n+        public BKReplicationException() {\n+            super(Code.ReplicationException);\n+        }\n+    }\n }"},{"sha":"1f6431f5b82d816fafc6773ae5e5c78af681d735","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=aadaae443e1bc70505150a3218a54ff66ebfb921","patch":"@@ -396,9 +396,12 @@ public LedgerHandle createLedger(int ensSize, int writeQuorumSize, int ackQuorum\n          * Wait\n          */\n         counter.block(0);\n-        if (counter.getLh() == null) {\n-            LOG.error(\"ZooKeeper error: \" + counter.getrc());\n-            throw BKException.create(Code.ZKException);\n+        if (counter.getrc() != BKException.Code.OK) {\n+            LOG.error(\"Error while creating ledger : {}\", counter.getrc());\n+            throw BKException.create(counter.getrc());\n+        } else if (counter.getLh() == null) {\n+            LOG.error(\"Unexpected condition : no ledger handle returned for a success ledger creation\");\n+            throw BKException.create(BKException.Code.UnexpectedConditionException);\n         }\n \n         return counter.getLh();"},{"sha":"8861c1a3b283fcca2697c1e788ea7f8a8cfb5b52","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=aadaae443e1bc70505150a3218a54ff66ebfb921","patch":"@@ -132,9 +132,9 @@ public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n             lh.asyncCloseInternal(new CloseCallback() {\n                 @Override\n                 public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n-                    if (rc != KeeperException.Code.OK.intValue()) {\n+                    if (rc != BKException.Code.OK) {\n                         LOG.warn(\"Close failed: \" + BKException.getMessage(rc));\n-                        cb.operationComplete(BKException.Code.ZKException, null);\n+                        cb.operationComplete(rc, null);\n                     } else {\n                         cb.operationComplete(BKException.Code.OK, null);\n                         LOG.debug(\"After closing length is: {}\", lh.getLength());"},{"sha":"2bc42580f4ae87784f44910009821c5c77553e9c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=aadaae443e1bc70505150a3218a54ff66ebfb921","patch":"@@ -79,13 +79,13 @@ public void processResult(int rc, String path, Object ctx,\n                 if (Code.OK.intValue() != rc) {\n                     LOG.error(\"Could not create node for ledger\",\n                               KeeperException.create(KeeperException.Code.get(rc), path));\n-                    cb.operationComplete(rc, null);\n+                    cb.operationComplete(BKException.Code.ZKException, null);\n                 } else {\n                     // update znode status\n                     metadata.setVersion(new ZkVersion(0));\n                     try {\n                         long ledgerId = getLedgerId(name);\n-                        cb.operationComplete(rc, ledgerId);\n+                        cb.operationComplete(BKException.Code.OK, ledgerId);\n                     } catch (IOException ie) {\n                         LOG.error(\"Could not extract ledger-id from path:\" + name, ie);\n                         cb.operationComplete(BKException.Code.ZKException, null);"},{"sha":"171fd3adb895c714f08ea2df18b6ffd14f9241e9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=aadaae443e1bc70505150a3218a54ff66ebfb921","patch":"@@ -28,6 +28,7 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -109,7 +110,7 @@ public void processResult(int rc, String path, Object ctx, final String idPathNa\n                 if (rc != KeeperException.Code.OK.intValue()) {\n                     LOG.error(\"Could not generate new ledger id\",\n                               KeeperException.create(KeeperException.Code.get(rc), path));\n-                    ledgerCb.operationComplete(rc, null);\n+                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                     return;\n                 }\n                 /*\n@@ -120,7 +121,7 @@ public void processResult(int rc, String path, Object ctx, final String idPathNa\n                     ledgerId = getLedgerIdFromGenPath(idPathName);\n                 } catch (IOException e) {\n                     LOG.error(\"Could not extract ledger-id from id gen path:\" + path, e);\n-                    ledgerCb.operationComplete(KeeperException.Code.SYSTEMERROR.intValue(), null);\n+                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                     return;\n                 }\n                 String ledgerPath = getLedgerPath(ledgerId);\n@@ -132,11 +133,11 @@ public void processResult(int rc, String path,\n                         if (rc != KeeperException.Code.OK.intValue()) {\n                             LOG.error(\"Could not create node for ledger\",\n                                       KeeperException.create(KeeperException.Code.get(rc), path));\n-                            ledgerCb.operationComplete(rc, null);\n+                            ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                         } else {\n                             // update version\n                             metadata.setVersion(new ZkVersion(0));\n-                            ledgerCb.operationComplete(rc, lid);\n+                            ledgerCb.operationComplete(BKException.Code.OK, lid);\n                         }\n                     }\n                 };"},{"sha":"011508f71b1d6bb4721955b5daca9eb1d297f082","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":4,"deletions":14,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=aadaae443e1bc70505150a3218a54ff66ebfb921","patch":"@@ -64,10 +64,8 @@\n import com.google.common.collect.Sets;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.AsyncCallback;\n-import org.apache.zookeeper.Watcher.Event.KeeperState;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -179,8 +177,6 @@ public void run() {\n                             }\n                         } catch (BKException bke) {\n                             LOG.error(\"Exception getting bookie list\", bke);\n-                        } catch (KeeperException ke) {\n-                            LOG.error(\"Exception while watching available bookies\", ke);\n                         } catch (InterruptedException ie) {\n                             Thread.currentThread().interrupt();\n                             LOG.error(\"Interrupted while watching available bookies \", ie);\n@@ -308,8 +304,7 @@ private void auditingBookies(List<String> availableBookies)\n     }\n \n     private void handleLostBookies(Collection<String> lostBookies,\n-            Map<String, Set<Long>> ledgerDetails) throws BKAuditException,\n-            KeeperException, InterruptedException {\n+            Map<String, Set<Long>> ledgerDetails) throws BKAuditException {\n         LOG.info(\"Following are the failed bookies: \" + lostBookies\n                 + \" and searching its ledgers for re-replication\");\n \n@@ -321,7 +316,7 @@ private void handleLostBookies(Collection<String> lostBookies,\n     }\n \n     private void publishSuspectedLedgers(String bookieIP, Set<Long> ledgers)\n-            throws KeeperException, InterruptedException, BKAuditException {\n+            throws BKAuditException {\n         if (null == ledgers || ledgers.size() == 0) {\n             // there is no ledgers available for this bookie and just\n             // ignoring the bookie failures\n@@ -370,12 +365,7 @@ public void operationComplete(int rc, Set<LedgerFragment> fragments) {\n             } catch (BKException bke) {\n                 LOG.error(\"Error closing lh\", bke);\n                 if (rc == BKException.Code.OK) {\n-                    rc = BKException.Code.ZKException;\n-                }\n-            } catch (KeeperException ke) {\n-                LOG.error(\"Couldn't publish suspected ledger\", ke);\n-                if (rc == BKException.Code.OK) {\n-                    rc = BKException.Code.ZKException;\n+                    rc = BKException.Code.ReplicationException;\n                 }\n             } catch (InterruptedException ie) {\n                 LOG.error(\"Interrupted publishing suspected ledger\", ie);\n@@ -386,7 +376,7 @@ public void operationComplete(int rc, Set<LedgerFragment> fragments) {\n             } catch (BKAuditException bkae) {\n                 LOG.error(\"Auditor exception publishing suspected ledger\", bkae);\n                 if (rc == BKException.Code.OK) {\n-                    rc = BKException.Code.ZKException;\n+                    rc = BKException.Code.ReplicationException;\n                 }\n             }\n "},{"sha":"e3107c31b778c51c9e1d6a44368df8ed1996d203","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/aadaae443e1bc70505150a3218a54ff66ebfb921/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java?ref=aadaae443e1bc70505150a3218a54ff66ebfb921","patch":"@@ -21,9 +21,12 @@\n  *\n  */\n \n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n \n import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n \n import org.junit.Before;\n@@ -71,4 +74,26 @@ public void testCreateDeleteLedgers() throws Exception {\n             lh.close();\n         }\n     }\n+\n+    @Test(timeout = 60000)\n+    public void testCreateLedgerWithBKNotEnoughBookiesException() throws Exception {\n+        try {\n+            bkc.createLedger(2, 2, DigestType.CRC32, \"bk is cool\".getBytes());\n+            fail(\"Should be able to throw BKNotEnoughBookiesException\");\n+        } catch (BKException.BKNotEnoughBookiesException bkn) {\n+            // expected\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testCreateLedgerWithZKException() throws Exception {\n+        stopZKCluster();\n+        try {\n+            bkc.createLedger(1, 1, DigestType.CRC32, \"bk is cool\".getBytes());\n+            fail(\"Should be able to throw ZKException\");\n+        } catch (BKException.ZKException zke) {\n+            // expected\n+        }\n+    }\n+\n }"}]}

