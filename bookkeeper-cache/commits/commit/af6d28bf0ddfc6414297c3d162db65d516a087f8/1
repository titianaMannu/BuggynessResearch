{"sha":"af6d28bf0ddfc6414297c3d162db65d516a087f8","node_id":"MDY6Q29tbWl0MTU3NTk1NjphZjZkMjhiZjBkZGZjNjQxNDI5N2MzZDE2MmRiNjVkNTE2YTA4N2Y4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T19:42:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T19:42:49Z"},"message":"BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490797 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4cddfe0b7826621b472e02986432e0e5004e47c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a4cddfe0b7826621b472e02986432e0e5004e47c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/af6d28bf0ddfc6414297c3d162db65d516a087f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/af6d28bf0ddfc6414297c3d162db65d516a087f8","html_url":"https://github.com/apache/bookkeeper/commit/af6d28bf0ddfc6414297c3d162db65d516a087f8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/af6d28bf0ddfc6414297c3d162db65d516a087f8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2aef72b65f06e823be04f862b4fa45b35ca8f5ec","url":"https://api.github.com/repos/apache/bookkeeper/commits/2aef72b65f06e823be04f862b4fa45b35ca8f5ec","html_url":"https://github.com/apache/bookkeeper/commit/2aef72b65f06e823be04f862b4fa45b35ca8f5ec"}],"stats":{"total":112,"additions":75,"deletions":37},"files":[{"sha":"3080a0e5478fbc0007f1ad2c62e8aa0ca03edca7","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/af6d28bf0ddfc6414297c3d162db65d516a087f8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/af6d28bf0ddfc6414297c3d162db65d516a087f8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=af6d28bf0ddfc6414297c3d162db65d516a087f8","patch":"@@ -20,6 +20,8 @@ Release 4.2.2 - Unreleased\n \n         BOOKKEEPER-596: Ledgers are gc'ed by mistake in MSLedgerManagerFactory. (sijie via ivank)\n \n+        BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank)"},{"sha":"c1b2ab756cfad91f5e110a3ac7101753a81ed5cb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":37,"deletions":12,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/af6d28bf0ddfc6414297c3d162db65d516a087f8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/af6d28bf0ddfc6414297c3d162db65d516a087f8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=af6d28bf0ddfc6414297c3d162db65d516a087f8","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,7 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n@@ -297,7 +296,12 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                                         }\n \n                                         metadata.setLength(prevLength);\n-                                        if (metadata.resolveConflict(newMeta)) {\n+                                        if (!metadata.isNewerThan(newMeta)\n+                                                && !metadata.isConflictWith(newMeta)) {\n+                                            // use the new metadata's ensemble, in case re-replication already\n+                                            // replaced some bookies in the ensemble.\n+                                            metadata.setEnsembles(newMeta.getEnsembles());\n+                                            metadata.setVersion(newMeta.version);\n                                             metadata.setLength(length);\n                                             metadata.close(lastAddConfirmed);\n                                             writeLedgerConfig(new CloseCb());\n@@ -485,7 +489,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n         final long currentLength;\n         synchronized(this) {\n             // synchronized on this to ensure that\n-            // the ledger isn't closed between checking and \n+            // the ledger isn't closed between checking and\n             // updating lastAddPushed\n             if (metadata.isClosed()) {\n                 LOG.warn(\"Attempt to add to closed ledger: \" + ledgerId);\n@@ -532,6 +536,7 @@ public void safeRun() {\n \n     public void asyncReadLastConfirmed(final ReadLastConfirmedCallback cb, final Object ctx) {\n         ReadLastConfirmedOp.LastConfirmedDataCallback innercb = new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n+                @Override\n                 public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {\n                     if (rc == BKException.Code.OK) {\n                         lastAddConfirmed = Math.max(lastAddConfirmed, data.lastAddConfirmed);\n@@ -781,6 +786,8 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n         }\n \n         /**\n+         * Specific resolve conflicts happened when multiple bookies failures in same ensemble.\n+         * <p>\n          * Resolving the version conflicts between local ledgerMetadata and zk\n          * ledgerMetadata. This will do the following:\n          * <ul>\n@@ -790,30 +797,44 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n          * if the zk ledgerMetadata still contains the failed bookie, then\n          * update zookeeper with the newBookie otherwise send write request</li>\n          * </ul>\n+         * </p>\n          */\n         private boolean resolveConflict(LedgerMetadata newMeta) {\n-            // close have changed, another client has opened\n-            // the ledger, can't resolve this conflict.\n+            // make sure the ledger isn't closed by other ones.\n             if (metadata.getState() != newMeta.getState()) {\n                 return false;\n             }\n-            // update znode version\n-            metadata.setVersion(newMeta.getVersion());\n-            // Resolve the conflicts if zk metadata still contains failed\n-            // bookie.\n+\n+            // If the failed the bookie is still existed in the metadata (in zookeeper), it means that\n+            // the ensemble change of the failed bookie is failed due to metadata conflicts. so try to\n+            // update the ensemble change metadata again. Otherwise, it means that the ensemble change\n+            // is already succeed, unset the success and re-adding entries.\n             if (newMeta.currentEnsemble.get(ensembleInfo.bookieIndex).equals(\n                     ensembleInfo.addr)) {\n-                // Update ledger metadata in zk, if in-memory metadata doesn't\n-                // contains the failed bookie.\n+                // If the in-memory data doesn't contains the failed bookie, it means the ensemble change\n+                // didn't finish, so try to resolve conflicts with the metadata read from zookeeper and\n+                // update ensemble changed metadata again.\n                 if (!metadata.currentEnsemble.get(ensembleInfo.bookieIndex)\n                         .equals(ensembleInfo.addr)) {\n+                    // if the local metadata is newer than zookeeper metadata, it means that metadata is updated\n+                    // again when it was trying re-reading the metatada, re-kick the reread again\n+                    if (metadata.isNewerThan(newMeta)) {\n+                        rereadMetadata(this);\n+                        return true;\n+                    }\n+                    // make sure the metadata doesn't changed by other ones.\n+                    if (metadata.isConflictWith(newMeta)) {\n+                        return false;\n+                    }\n                     LOG.info(\"Resolve ledger metadata conflict \"\n                             + \"while changing ensemble to: \"\n                             + ensembleInfo.newEnsemble\n                             + \", old meta data is \\n\"\n                             + new String(metadata.serialize())\n                             + \"\\n, new meta data is \\n\"\n                             + new String(newMeta.serialize()));\n+                    // update znode version\n+                    metadata.setVersion(newMeta.getVersion());\n                     writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n                 }\n             } else {\n@@ -906,6 +927,7 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n          * @param ctx\n          *          control object\n          */\n+        @Override\n         public void readComplete(int rc, LedgerHandle lh,\n                                  Enumeration<LedgerEntry> seq, Object ctx) {\n             \n@@ -934,6 +956,7 @@ public void readComplete(int rc, LedgerHandle lh,\n          * @param ctx\n          *          control object\n          */\n+        @Override\n         public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n \n@@ -947,6 +970,7 @@ public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n         /**\n          * Implementation of  callback interface for synchronous read last confirmed method.\n          */\n+        @Override\n         public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n             LastConfirmedCtx lcCtx = (LastConfirmedCtx) ctx;\n             \n@@ -966,6 +990,7 @@ public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n          * @param lh\n          * @param ctx\n          */\n+        @Override\n         public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setrc(rc);"},{"sha":"ea86f44c0bbe5787257c2998b8a803bc6553772a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":25,"deletions":19,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/af6d28bf0ddfc6414297c3d162db65d516a087f8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/af6d28bf0ddfc6414297c3d162db65d516a087f8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=af6d28bf0ddfc6414297c3d162db65d516a087f8","patch":"@@ -139,6 +139,10 @@ private LedgerMetadata() {\n         return ensembles;\n     }\n \n+    void setEnsembles(SortedMap<Long, ArrayList<InetSocketAddress>> ensembles) {\n+        this.ensembles = ensembles;\n+    }\n+\n     public int getEnsembleSize() {\n         return ensembleSize;\n     }\n@@ -433,13 +437,26 @@ public Version getVersion() {\n     }\n \n     /**\n-     * Resolve conflict with new updated metadata.\n+     * Is the metadata newer that given <i>newMeta</i>.\n+     *\n+     * @param newMeta\n+     * @return\n+     */\n+    boolean isNewerThan(LedgerMetadata newMeta) {\n+        if (null == version) {\n+            return false;\n+        }\n+        return Version.Occurred.AFTER == version.compare(newMeta.version);\n+    }\n+\n+    /**\n+     * Is the metadata conflict with new updated metadata.\n      *\n      * @param newMeta\n      *          Re-read metadata\n-     * @return true if the conflict has been resolved, otherwise false.\n+     * @return true if the metadata is conflict.\n      */\n-    boolean resolveConflict(LedgerMetadata newMeta) {\n+    boolean isConflictWith(LedgerMetadata newMeta) {\n         /*\n          *  if length & close have changed, then another client has\n          *  opened the ledger, can't resolve this conflict.\n@@ -453,22 +470,17 @@ boolean resolveConflict(LedgerMetadata newMeta) {\n             state != newMeta.state ||\n             !digestType.equals(newMeta.digestType) ||\n             !Arrays.equals(password, newMeta.password)) {\n-            return false;\n+            return true;\n         }\n         if (state == LedgerMetadataFormat.State.CLOSED\n             && lastEntryId != newMeta.lastEntryId) {\n-            return false;\n-        }\n-        // new meta znode version should be larger than old one\n-        if (null != version &&\n-            Version.Occurred.AFTER == version.compare(newMeta.version)) {\n-            return false;\n+            return true;\n         }\n         // if ledger is closed, we can just take the new ensembles\n         if (newMeta.state != LedgerMetadataFormat.State.CLOSED) {\n             // ensemble size should be same\n             if (ensembles.size() != newMeta.ensembles.size()) {\n-                return false;\n+                return true;\n             }\n             // ensemble distribution should be same\n             // we don't check the detail ensemble, since new bookie will be set\n@@ -479,16 +491,10 @@ boolean resolveConflict(LedgerMetadata newMeta) {\n                 Long curKey = keyIter.next();\n                 Long newMetaKey = newMetaKeyIter.next();\n                 if (!curKey.equals(newMetaKey)) {\n-                    return false;\n+                    return true;\n                 }\n             }\n         }\n-        /*\n-         *  if the conflict has been resolved, then update\n-         *  ensemble and znode version\n-         */\n-        ensembles = newMeta.ensembles;\n-        version = newMeta.version;\n-        return true;\n+        return false;\n     }\n }"},{"sha":"654384a476f41877565236a546091016a74360fa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/af6d28bf0ddfc6414297c3d162db65d516a087f8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/af6d28bf0ddfc6414297c3d162db65d516a087f8/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=af6d28bf0ddfc6414297c3d162db65d516a087f8","patch":"@@ -21,11 +21,11 @@\n import java.util.Set;\n import java.net.InetSocketAddress;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n  * This represents a pending add operation. When it has got success from all\n@@ -132,6 +132,11 @@ void initiate(ChannelBuffer toSend) {\n     public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n         int bookieIndex = (Integer) ctx;\n \n+        if (completed) {\n+            // I am already finished, ignore incoming responses.\n+            // otherwise, we might hit the following error handling logic, which might cause bad things.\n+            return;\n+        }\n \n         switch (rc) {\n         case BKException.Code.OK:"},{"sha":"c129e07584133d6e8736c1de70797f210de7e0c3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/af6d28bf0ddfc6414297c3d162db65d516a087f8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/af6d28bf0ddfc6414297c3d162db65d516a087f8/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java?ref=af6d28bf0ddfc6414297c3d162db65d516a087f8","patch":"@@ -58,6 +58,7 @@\n \n     private static class SyncObj {\n         volatile int counter;\n+        volatile int rc;\n \n         public SyncObj() {\n             counter = 0;\n@@ -182,13 +183,15 @@ public void testAsyncWritesWithMultipleFailuresInLastEnsemble()\n                 LOG.debug(\"Entries counter = \" + syncObj1.counter);\n                 syncObj1.wait();\n             }\n+            assertEquals(BKException.Code.OK, syncObj1.rc);\n         }\n         // wait for all entries to be acknowledged for the second ledger\n         synchronized (syncObj2) {\n             while (syncObj2.counter < 1) {\n                 LOG.debug(\"Entries counter = \" + syncObj2.counter);\n                 syncObj2.wait();\n             }\n+            assertEquals(BKException.Code.OK, syncObj2.rc);\n         }\n \n         // reading ledger till the last entry\n@@ -217,12 +220,9 @@ private void readEntries(LedgerHandle lh, ArrayList<byte[]> entries)\n \n     @Override\n     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n-        if (rc != BKException.Code.OK)\n-            fail(\"Return code is not OK: \" + rc);\n-\n         SyncObj x = (SyncObj) ctx;\n-\n         synchronized (x) {\n+            x.rc = rc;\n             x.counter++;\n             x.notify();\n         }"}]}

