{"sha":"afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","node_id":"MDY6Q29tbWl0MTU3NTk1NjphZmRkM2RkMWU3ZTA2Zjk3ZTI5ZmY1YmNhYTIwMDFmODFmNmQ5MjEw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-08-30T08:34:31Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-08-30T08:34:31Z"},"message":"BOOKKEEPER-28: Create useful startup scripts for bookkeeper and hedwig (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1163137 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f55e7dd4934f07df13225f14663137df62f7d903","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f55e7dd4934f07df13225f14663137df62f7d903"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","html_url":"https://github.com/apache/bookkeeper/commit/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","url":"https://api.github.com/repos/apache/bookkeeper/commits/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","html_url":"https://github.com/apache/bookkeeper/commit/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8"}],"stats":{"total":1821,"additions":352,"deletions":1469},"files":[{"sha":"9fe5c2748b40a2fa15faffbc388e110779658f82","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -42,6 +42,8 @@ BUGFIXES:\n \n IMPROVEMENTS:\n \n+ BOOKKEEPER-28: Create useful startup scripts for bookkeeper and hedwig (ivank)\n+\n  hedwig-client/\n \n   BOOKKEEPER-44: Reuse publish channel to default server to avoid too many connect requests to default server when lots of producers came in same time (Sijie Guo via breed)"},{"sha":"e22c9c0ab6cad7be9bb3d1f50f46c1b8d701576f","filename":"bookkeeper-server/bin/bookkeeper","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -0,0 +1,140 @@\n+#!/bin/sh\n+#\n+#/**\n+# * Copyright 2007 The Apache Software Foundation\n+# *\n+# * Licensed to the Apache Software Foundation (ASF) under one\n+# * or more contributor license agreements.  See the NOTICE file\n+# * distributed with this work for additional information\n+# * regarding copyright ownership.  The ASF licenses this file\n+# * to you under the Apache License, Version 2.0 (the\n+# * \"License\"); you may not use this file except in compliance\n+# * with the License.  You may obtain a copy of the License at\n+# *\n+# *     http://www.apache.org/licenses/LICENSE-2.0\n+# *\n+# * Unless required by applicable law or agreed to in writing, software\n+# * distributed under the License is distributed on an \"AS IS\" BASIS,\n+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# * See the License for the specific language governing permissions and\n+# * limitations under the License.\n+# */\n+\n+BINDIR=`dirname \"$0\"`\n+BK_HOME=`cd $BINDIR/..;pwd`\n+\n+DEFAULT_ZOOKEEPER=localhost:2181\n+DEFAULT_PORT=3181\n+DEFAULT_TXN_DIR=/tmp/bk-txn\n+DEFAULT_DATA_DIR=/tmp/bk-data\n+\n+source $BK_HOME/conf/bkenv.sh\n+\n+RELEASE_JAR=`ls $BK_HOME/bookkeeper-server-*.jar 2> /dev/null | tail -1` \n+if [ $? == 0 ]; then\n+    BOOKIE_JAR=$RELEASE_JAR\n+fi\n+\n+BUILT_JAR=`ls $BK_HOME/target/bookkeeper-server-*.jar 2> /dev/null | tail -1`\n+if [ $? != 0 ] && [ ! -e \"$BOOKIE_JAR\" ]; then \n+    echo \"\\nCouldn't find bookkeeper jar.\";\n+    echo \"Make sure you've run 'mvn package'\\n\";\n+    exit 1;\n+elif [ -e \"$BUILT_JAR\" ]; then\n+    BOOKIE_JAR=$BUILT_JAR\n+fi\n+\n+bookkeeper_help() {\n+    cat <<EOF\n+Usage: bookkeeper <command>\n+where command is one of:\n+    bookie              Run a bookie server\n+    localbookie <n>     Run a test ensemble of <n> bookies locally\n+    help                This help message\n+\n+or command is the full name of a class with a defined main() method.\n+\n+Environment variables:\n+   BOOKIE_ZOOKEEPER       Zookeeper ensemble (default: $DEFAULT_ZOOKEEPER)\n+   BOOKIE_PORT            Port to listen on (default: $DEFAULT_PORT)\n+   BOOKIE_TXN_LOGDIR      Directory for transaction logs (default: $DEFAULT_TXN_DIR)\n+   BOOKIE_DATA_DIR        Directory for data (default: $DEFAULT_DATA_DIR)\n+   BOOKIE_LOG_CONF        Log4j configuration file\n+   BOOKIE_EXTRA_OPTS      Extra options to be passed to the jvm\n+\n+These variable can also be set in conf/bkenv.sh\n+EOF\n+}\n+\n+add_maven_deps_to_classpath() {\n+    MVN=\"mvn\"\n+    if [ \"$MAVEN_HOME\" != \"\" ]; then\n+\tMVN=${MAVEN_HOME}/bin/mvn\n+    fi\n+    \n+    # Need to generate classpath from maven pom. This is costly so generate it\n+    # and cache it. Save the file into our target dir so a mvn clean will get\n+    # clean it up and force us create a new one.\n+    f=\"${BK_HOME}/target/cached_classpath.txt\"\n+    if [ ! -f \"${f}\" ]\n+    then\n+\t${MVN} -f \"${BK_HOME}/pom.xml\" dependency:build-classpath -Dmdep.outputFile=\"${f}\" &> /dev/null\n+    fi\n+    BOOKIE_CLASSPATH=${CLASSPATH}:`cat \"${f}\"`\n+}\n+\n+if [ -d \"$BK_HOME/lib\" ]; then\n+    for i in $BK_HOME/lib/*.jar; do\n+\tBOOKIE_CLASSPATH=$BOOKIE_CLASSPATH:$i\n+    done\n+else\n+    add_maven_deps_to_classpath\n+fi\n+\n+# if no args specified, show usage\n+if [ $# = 0 ]; then\n+    bookkeeper_help;\n+    exit 1;\n+fi\n+\n+# get arguments\n+COMMAND=$1\n+shift\n+\n+if [ \"$BOOKIE_ZOOKEEPER\" == \"\" ]; then\n+    BOOKIE_ZOOKEEPER=$DEFAULT_ZOOKEEPER\n+fi\n+\n+if [ \"$BOOKIE_PORT\" == \"\" ]; then\n+    BOOKIE_PORT=$DEFAULT_PORT\n+fi\n+\n+if [ \"$BOOKIE_TXN_LOGDIR\" == \"\" ]; then\n+    BOOKIE_TXN_LOGDIR=$DEFAULT_TXN_DIR\n+fi\n+\n+if [ \"$BOOKIE_DATA_DIR\" == \"\" ]; then\n+    BOOKIE_DATA_DIR=$DEFAULT_DATA_DIR\n+fi\n+\n+BOOKIE_CLASSPATH=\"$BOOKIE_JAR:$BOOKIE_CLASSPATH\"\n+if [ \"$BOOKIE_LOG_CONF\" != \"\" ]; then\n+    BOOKIE_CLASSPATH=\"`dirname $BOOKIE_LOG_CONF`:$BOOKIE_CLASSPATH\"\n+    OPTS=\"$OPTS -Dlog4j.configuration=`basename $BOOKIE_LOG_CONF`\"\n+fi\n+OPTS=\"-cp $BOOKIE_CLASSPATH $OPTS $BOOKIE_EXTRA_OPTS\"\n+\n+OPTS=\"$OPTS $BOOKIE_EXTRA_OPTS\"\n+\n+if [ $COMMAND == \"bookie\" ]; then\n+    exec java $OPTS org.apache.bookkeeper.proto.BookieServer $BOOKIE_PORT $BOOKIE_ZOOKEEPER $BOOKIE_TXN_LOGDIR $BOOKIE_DATA_DIR $@\n+elif [ $COMMAND == \"localbookie\" ]; then\n+    NUMBER=$1\n+    shift\n+    exec java $OPTS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $@\n+elif [ $COMMAND == \"help\" ]; then\n+    bookkeeper_help;\n+else\n+    exec java $OPTS $COMMAND $@\n+fi\n+"},{"sha":"3ddf651d7b9e6c6a0ca2a1f3607e91526d61c42d","filename":"bookkeeper-server/conf/bkenv.sh","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/bookkeeper-server/conf/bkenv.sh","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/bookkeeper-server/conf/bkenv.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bkenv.sh?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -0,0 +1,35 @@\n+#!/bin/sh\n+#\n+#/**\n+# * Copyright 2007 The Apache Software Foundation\n+# *\n+# * Licensed to the Apache Software Foundation (ASF) under one\n+# * or more contributor license agreements.  See the NOTICE file\n+# * distributed with this work for additional information\n+# * regarding copyright ownership.  The ASF licenses this file\n+# * to you under the Apache License, Version 2.0 (the\n+# * \"License\"); you may not use this file except in compliance\n+# * with the License.  You may obtain a copy of the License at\n+# *\n+# *     http://www.apache.org/licenses/LICENSE-2.0\n+# *\n+# * Unless required by applicable law or agreed to in writing, software\n+# * distributed under the License is distributed on an \"AS IS\" BASIS,\n+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# * See the License for the specific language governing permissions and\n+# * limitations under the License.\n+# */\n+\n+# default settings for starting bookkeeper\n+\n+# Zookeeper ensemble for bookkeeper to use\n+#BOOKIE_ZOOKEEPER=\n+\n+# Port for bookie to listen on\n+#BOOKIE_PORT=\n+\n+# Directory Bookkeeper outputs its write ahead log\n+#BOOKIE_TXN_LOGDIR=\n+\n+# Directory Bookkeeper outputs ledger snapshots\n+#BOOKIE_DATA_DIR="},{"sha":"be2b9cf3f3b9c525fb5d70791bfb57e5c83d386a","filename":"bookkeeper-server/lib/README","status":"removed","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/bookkeeper-server/lib/README","raw_url":"https://github.com/apache/bookkeeper/raw/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/bookkeeper-server/lib/README","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/lib/README?ref=da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","patch":"@@ -1,5 +0,0 @@\n-the zookeeper test classes are not part of the standard distribution,\n-so we need to manually install a jar file with the test classes.\n-use the following command:\n-\n-mvn -q install:install-file -Dfile=zookeeper-test-3.3.3.jar -DgroupId=org.apache.zookeeper -DartifactId=zookeeper-test -Dpackaging=jar  -Dversion=3.3.3"},{"sha":"be6896fd507cffb5e984a011c94564ed77d323a9","filename":"bookkeeper-server/pom.xml","status":"modified","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -57,28 +57,6 @@\n \t  <forkMode>pertest</forkMode>\n \t</configuration>\n       </plugin>\n-      <plugin>\n-        <artifactId>maven-assembly-plugin</artifactId>\n-        <configuration>\n-          <descriptorRefs>\n-            <descriptorRef>jar-with-dependencies</descriptorRef>\n-          </descriptorRefs>\n-          <archive>\n-            <manifest>\n-              <mainClass>${mainclass}</mainClass>\n-            </manifest>\n-          </archive>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>make-assembly</id>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>attached</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n     </plugins>\n   </build>\n   <repositories>"},{"sha":"38066b64c6f9bc426a5aa24378114199b7ba8639","filename":"doc/bookkeeperConfig.textile","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/bookkeeperConfig.textile","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/bookkeeperConfig.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperConfig.textile?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -30,15 +30,14 @@ h1. Running bookies\n \n p. To run a bookie, we execute the following command: \n \n- @java -cp .:./zookeeper-<version>-bookkeeper.jar:./zookeeper-<version>.jar\\ :../log4j/apache-log4j-1.2.15/log4j-1.2.15.jar -Dlog4j.configuration=log4j.properties\\ org.apache.bookkeeper.proto.BookieServer 3181 127.0.0.1:2181 /path_to_log_device/\\ /path_to_ledger_device/ @ \n+ @ bookkeeper-server/bin/bookkeeper bookie\n \n-p. The parameters are: \n-\n-* Port number that the bookie listens on; \n-* Comma separated list of ZooKeeper servers with a hostname:port format; \n-* Path for Log Device (stores bookie write-ahead log); \n-* Path for Ledger Device (stores ledger entries); \n+p. The configuration parameters, which can be set in bookkeeper-server/conf/bkenv.sh\n \n+* BOOKIE_PORT: Port number that the bookie listens on; \n+* BOOKIE_ZOOKEEPER: Comma separated list of ZooKeeper servers with a hostname:port format; \n+* BOOKIE_TXN_LOGDIR: Path for Log Device (stores bookie write-ahead log); \n+* BOOKIE_DATA_DIR: Path for Ledger Device (stores ledger entries); \n \n p. Ideally, @/path_to_log_device/@ and @/path_to_ledger_device/@ are each in a different device. \n "},{"sha":"0d030b715c582f74bdcefe45500cea78ae0cdd5f","filename":"doc/bookkeeperStarted.textile","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/bookkeeperStarted.textile","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/bookkeeperStarted.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperStarted.textile?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -20,25 +20,33 @@ p. This document contains information to get you started quickly with BookKeeper\n \n h1. Pre-requisites\n \n-p. See \"System Requirements\":bookkeeperConfig.html#bk_sysReqin the Admin guide.\n+p. See \"System Requirements\":./bookkeeperConfig.html#bk_sysReqin the Admin guide.\n \n h1. Download\n \n-p. BookKeeper is distributed along with ZooKeeper. To get a ZooKeeper distribution, download a recent  \"stable\":http://hadoop.apache.org/zookeeper/releases.htmlrelease from one of the Apache Download Mirrors.\n+p. BookKeeper trunk can be downloaded from subversion. See \"Version Control:http://zookeeper.apache.org/bookkeeper/svn.html. \n \n h1. LocalBookKeeper\n \n-p. Under org.apache.bookkeeper.util, you'll find a java program called LocalBookKeeper.java that sets you up to run BookKeeper on a single machine. This is far from ideal from a performance perspective, but the program is useful for both test and educational purposes. \n+p. BookKeeper provides a utility program to start a standalone ZooKeeper ensemble and a number of bookies on a local machine. As this all runs on a local machine, throughput will be very low. It should only be used for testing.\n+\n+p. To start a local bookkeeper ensemble with 5 bookies:\n+\n+@ bookkeeper-server/bin/bookkeeper localbookie 5\n \n h1. Setting up bookies\n \n p. If you're bold and you want more than just running things locally, then you'll need to run bookies in different servers. You'll need at least three bookies to start with. \n \n p. For each bookie, we need to execute a command like the following: \n \n- @java -cp .:./zookeeper-<version>-bookkeeper.jar:./zookeeper-<version>.jar\\ :lib/slf4j-api-1.6.1.jar:lib/slf4j-log4j12-1.6.1.jar:lib/log4j-1.2.15.jar -Dlog4j.configuration=log4j.properties\\ org.apache.bookkeeper.proto.BookieServer 3181 127.0.0.1:2181 /path_to_log_device/\\ /path_to_ledger_device/ @ \n+ @ bookkeeper-server/bin/bookkeeper bookie\n+\n+p. This command will use the default directories for storing ledgers and the write ahead log, and will look for a zookeeper server on localhost:2181. To modify this you must edit bookkeeper-server/conf/bkenv.sh. BOOKIE_TXN_LOGDIR and BOOKIE_DATA_DIR should be configured to used different physical devices for best performance. BOOKIE_ZOOKEEPER should be a comma separated list of zookeeper servers.\n \n-p. \"/path_to_log_device/\" and \"/path_to_ledger_device/\" are different paths. Also, port 3181 is the port that a bookie listens on for connection requests from clients. 127.0.0.1:2181 is the hostname:port for the ZooKeeper server. In this example, the standalone ZooKeeper server is running locally on port 2181. If we had multiple ZooKeeper servers, this parameter would be a comma separated list of all the hostname:port values corresponding to them. \n+p. To see the default values of these configuration variables, run:\n+\n+ @ bookkeeper-server/bin/bookkeeper help\n \n h1. Setting up ZooKeeper\n \n@@ -48,7 +56,6 @@ p. ZooKeeper stores metadata on behalf of BookKeeper clients and bookies. To get\n #  @/ledgers/available @ \n # For each bookie, we add one znode such that the name of the znode is the concatenation of the machine name and the port number that the bookie is listening on. For example, if a bookie is running on bookie.foo.com an is listening on port 3181, we add a znode  @/ledgers/available/bookie.foo.com:3181@ . \n \n-\n h1. Example\n \n p. In the following excerpt of code, we: "},{"sha":"e71fd77299c487778e1cf891db8829b5c36b6c06","filename":"doc/hedwigBuild.textile","status":"modified","additions":2,"deletions":63,"changes":65,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/hedwigBuild.textile","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/hedwigBuild.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/hedwigBuild.textile?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -5,54 +5,13 @@ For the core itself:\n * JDK 6: \"http://java.sun.com/\":http://java.sun.com/. Ensure @$JAVA_HOME@ is correctly set.\n * Maven 2: \"http://maven.apache.org/\":http://maven.apache.org/.\n * Protocol Buffers 2.3.0: \"http://protobuf.googlecode.com/\":http://protobuf.googlecode.com/.\n-* Zookeeper 3.4.0: \"http://hadoop.apache.org/zookeeper/\":http://hadoop.apache.org/zookeeper/. See below.\n-* Bookkeeper 3.4.0: \"http://hadoop.apache.org/zookeeper/\":http://hadoop.apache.org/zookeeper/. See below.\n+* Zookeeper 3.4.0: \"http://zookeeper.apache.org/\":http://zookeeper.apache.org/.\n \n Hedwig has been tested on Windows XP, Linux 2.6, and OS X.\n \n-For the deployment and distributed support scripts in @hw.bash@:\n-\n-* Ant: \"http://ant.apache.org/\":http://ant.apache.org/, if you want to build Zookeeper.\n-* Bash: \"http://www.gnu.org/software/bash/\":http://www.gnu.org/software/bash/.\n-* Coreutils: \"http://www.gnu.org/software/coreutils/\":http://www.gnu.org/software/coreutils/.\n-* Expect: \"http://expect.nist.gov/\":http://expect.nist.gov/, if you want @unbuffer@.\n-* Findutils: \"http://www.gnu.org/software/findutils/\":http://www.gnu.org/software/findutils/.\n-* OpenSSH: \"http://www.openssh.com/\":http://www.openssh.com/.\n-* Python 2.6: \"http://python.org/\":http://python.org/.\n-\n-h2. Protocol Buffers\n-\n-Hedwig requires the use of the Java runtime libraries of Protocol Buffers 2.3.0. These libraries need to be installed into your local maven repository. (Maven allows multiple versions to be installed.) To install protocol buffels to your local repository, you have to download the tarball and follow the README.txt instructions. Note that you must first install the C++ package which contains the compiler (protoc) before you can build the java libraries. That will install the library jar's in the local maven repository where Hedwig is currently configured to point to.\n-\n-h2. Zookeeper and Bookkeeper\n-\n-Hedwig currently requires the version of Bookkeeper maintained in Apache's current trunk SVN respository (version 3.4.0). This is not a released version yet but certain features needed for BookKeeper are only available there.\n-\n-Hedwig also depends on ZK testing code for its own testing code.\n-\n-Since Hedwig is a Maven project, all these dependencies must be made available as Maven artifacts. However, neither ZK nor BK are currently Mavenized. Hedwig provides some bash scripts to ease the installation of ZK, ZK tests, and BK, all as Maven artifacts.\n-\n-Currently, we have included the necessary ZooKeeper and BookKeeper jars in the Hedwig source itself in the $HEDWIG&#95;DIR/server/lib directory. There is no need to retrieve them directly from the Apache download site as they are non-released trunk versions.\n-\n-h1. Not relevant right now since we already have the ZK jars already in the Hedwig source.\n-\n-To fetch and build ZK 3.4.0 (and its tests) in the current directory, run:\n-\n-$HEDWIG&#95;DIR/scripts/hw.bash get-zk\n-\n-h1. Not relevant right now, but when we start using the apache version of BK, to\n-\n-build the local version of BK:\n-\n-$HEDWIG&#95;DIR/scripts/hw.bash get-bk\n-\n-The $HEDWIG&#95;DIR/server/lib directory contains all of the the class and source jars for ZK, ZK tests, and BK. To install these, go to that directory and run the following command to install them into your local maven repository:\n-\n-$HEDWIG&#95;DIR/scripts/hw.bash install-zk-bk\n-\n h1. Command-Line Instructions\n \n-From the main Hedwig directory, run @mvn package@. This will produce the executable jars for both the client and server, as well as a server &quot;assembly jar&quot; containing all dependencies as well for easier deployment.\n+From the top level bookkeeper directory, run @mvn package@. This will compile and package the jars necessary for running hedwig. \n \n See the User's Guide for instructions on running and usage.\n \n@@ -70,23 +29,3 @@ To check out, build, and develop using Eclipse:\n \n You are now ready to run and debug the client and server code. See the User's Guide for instructions on running and usage.\n \n-h1. Utilities\n-\n-h2. Removing Conflicting Files in Jars\n-\n-The Maven assembly plugin that produces the fat assembly jar may end up putting into the jar files with the same conflicting paths from multiple dependencies. This makes working with the files from certain tools (like @jar@) a bit jarring. In our case, these files are not things like class files, but rather README and LICENSE files, so we can safely remove conflicts by choosing an arbitrary winner. To do so, run:\n-\n-$HEDWIG&#95;DIR/scripts/hw.bash strip-jar\n-\n-h2. Adjusting Logging\n-\n-The logging level is something that is baked into the jar in the @log4j.properties@ resource. However, it would be wasteful to go through a Maven build cycle to update and adjust this. If you're working from a source tree, it's also annoying to have to edit a source file to adjust the logging.\n-\n-We have a little script for tweaking the logging level. After running @strip-jar@, run:\n-\n-$HEDWIG&#95;DIR/scripts/hw.bash set-logging WARN\n-\n-To see what the current logging level is:\n-\n-$HEDWIG&#95;DIR/scripts/hw.bash get-logging\n-"},{"sha":"58aa5b89748776fd09f472721eb94c7a3cb36d95","filename":"doc/hedwigDesign.textile","status":"modified","additions":0,"deletions":121,"changes":121,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/hedwigDesign.textile","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/hedwigDesign.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/hedwigDesign.textile?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -20,127 +20,6 @@ h2. Handler Pipeline\n \n A pipeline implements the intercepting filter pattern. A pipeline is a sequence of handlers. Whenever a packet is read from the wire, it travels up the stream, stopping at each handler that can handle upstream events. Vice-versa for writes. Between each filter, control flows back through the centralized pipeline, and a linked list of contexts keeps track of where we are in the pipeline (one context object per handler).\n \n-h1. Distributed Performance Evaluation\n-\n-We've included some scripts to repeatedly run varying configurations of Hedwig on a distributed testbed and collect the resulting data. The experiments use the @org.apache.hedwig.client.App@ client application and are driven by @scripts/hw.bash@ (via the @app@ command).\n-\n-Currently, we have two types of experiments: subscription benchmarks and publishing benchmarks.\n-\n-h2. Subscription Benchmarks\n-\n-The subscription benchmark compares synchronous and asynchronous subscriptions. Because the synchronicity of subscriptions is a server configuration parameter, the servers must be restarted to change this. The benchmarks varies the maximum number of outstanding subscription requests.\n-\n-To run the subscription benchmark with wilbur6 as the subscriber and wilbur1 as its default hub:\n-\n-hosts=wilbur6 scripts/hw.bash sub-exp wilbur1\n-\n-This produces log files into the @sub@ directory, which may then be analyzed using the analysis scripts.\n-\n-h2. Publishing Benchmarks\n-\n-The publishing benchmark measures the throughput and latency of publishing messages within a LAN and across a WAN. It varies the following parameters:\n-\n-* maximum number of outstanding publish requests\n-* number of publishers\n-* number of (local) receivers\n-\n-We vary each dimension separately (and have default settings) to avoid a combinatorial explosion in the number of configurations to explore.\n-\n-First, start a (standalone) instance:\n-\n-scripts/hw.bash start-region '' $hwhost $zkhost $bk1host $bk2host $bk3host\n-\n-To run this over @$host1@ through @$host3@, with the number of publishers/subscribers varying linearly over this set:\n-\n-npars=&quot;20 40 60 80 100&quot; scripts/hw.bash pub-exps &quot;$host1 $host2 $host3&quot; $hwhost $zkhost\n-\n-This will vary the number of outstanding publish requests as specified in @npars@.\n-\n-You may also optionally run this experiment with a second subscribing region:\n-\n-scripts/hw.bash start-zk-bks $zkhost $bk1host $bk2host <span class=\"math\">bk3host npars=&quot;...&quot; scripts/hw.bash pub-exps &quot;</math>host1 $host2 $host3&quot; $hwhost $zkhost $rrecv $rhwhost $rzkhost\n-\n-where the final three extra arguments specify the client receiver, Hedwig, and Zookeeper hosts, in that order.\n-\n-This command will produce files into @./pub/@, which can then be process using @analyze.py@.\n-\n-h1. Analysis and Visualization\n-\n-@scripts/analyze.py@ produces plots from the collected experimental data. It has just a few immediate dependencies. In the following, the indentation signifies nested dependencies, like an upside-down tree:\n-\n-bc.   component AAA that component AA requires\n-  component AAB that component AA requires\n-component AA that component A requires\n-  component ABA that component AB requires\n-  component ABB that component AB requires\n-component AB that component A requires\n-\n-\n-component A that analysis tools depend on component BAA that component BA requires component BAB that component BA requires component BA that component B requires component BBA that component BB requires component BBB that component BB requires component BB that component B requires component B that analysis tools depend on\n-\n-The reason the tree is upside-down is so that you can treat this whole thing as a chunk of bash script.\n-\n-\"toast\":http://toastball.net/toast/ is a utility that makes it a breeze to install all this software, but you do need to make sure your environment is set up correctly (e.g. @PKG_CONFIG_PATH@ must point to @~/.toast/armed/lib/pkgconfig/@).\n-\n-Setup:\n-\n-wget -O- http://toastball.net/toast/toast&#124;perl -x - arm toast\n-\n-toast arm &quot;http://www.python.org/ftp/python/2.6.2/Python-2.6.2.tar.bz2&quot;\n-\n-toast arm numpy\n-\n-<pre>\n-    toast arm libpng\n-\n-    toast arm pixman\n-\n-    toast arm freetype\n-\n-      toast arm 'ftp://xmlsoft.org/libxml2/libxml2-2.7.3.tar.gz'\n-\n-    toast arm fontconfig\n-\n-  toast arm cairo\n-\n-toast arm pycairo\n-</pre>\n-\n-hg clone https://yang&#64;bitbucket.org/yang/pycha/ pycha/setup.bash -d -p $path&#95;to&#95;install&#95;to\n-\n-svn co https://assorted.svn.sourceforge.net/svnroot/assorted/python-commons/trunk/ python-commons/ python-commons/setup.bash -d -p $path&#95;to&#95;install&#95;to\n-\n-To analyze the publishing experiments, change to the @pub@ data directory and run:\n-\n-scripts/analyze.py pub\n-\n-To analyze the subscription experiments, change to the @sub@ data directory and run:\n-\n-scripts/analyze.py sub\n-\n-h1. Debugging\n-\n-You can attach an Eclipse debugger (or any debugger) to a Java process running on a remote host, as long as it has been started with the appropriate JVM flags. (See the Building Hedwig document to set up your Eclipse environment.) To launch something using @hw.bash@ with debugger attachment enabled, prefix the command with @attach=true@, e.g.:\n-\n-attach=true scripts/hw.bash start-regions myregions.cfg\n-\n-h1. Profiling\n-\n-The scripts we have provided include ways for you to launch with YourKit profiling enabled.\n-\n-To deploy YourKit onto a number of machines:\n-\n-hosts=&quot;...&quot; scripts/hw.bash setup-yjp $path&#95;to&#95;yjp\n-\n-where the path points to the \"YourKit Linux zip archive\":http://www.yourkit.com/download/yjp-8.0.15.zip (which is freely available and doesn't require any license to use).\n-\n-Now when using the scripts to run distributed experiments, to profile anything with YourKit, prefix the command with @use_yjp=true@. E.g.:\n-\n-use&#95;yjp=true scripts/hw.bash start-regions regions.cfg\n-\n-Now you may start on your local machine the YourKit GUI and connect to the hosts that you're interested in.\n-\n-Note that you may want to disable the default set of filters in YourKit.\n \n h1. Pseudocode\n "},{"sha":"52e0b8b238ee4eaa6523eb73120991e575311c3f","filename":"doc/hedwigUser.textile","status":"modified","additions":13,"deletions":119,"changes":132,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/hedwigUser.textile","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/doc/hedwigUser.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/hedwigUser.textile?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -20,138 +20,32 @@ The main class for running the server is @org.apache.hedwig.server.netty.PubSubS\n \n The client is a library intended to be consumed by user applications. It takes a Commons Configuration object, for which the source/documentation is in @org.apache.hedwig.client.conf.ClientConfiguration@.\n \n-We have provided a simple client application, @org.apache.hedwig.client.App@, that can drive a number of benchmarks. This also takes a single configuration file argument, which is fed to the client library.\n-\n-We've provided a number of scripts to faciliate running servers and clients in a variety of configurations, including over distributed hosts. These are all consolidated in @scripts/hw.bash@. Although the snippets in this documentation run the script from the hedwig main directory, you can run it from any location. Apologies in advance for these being bash scripts; time permitting, a more robust and maintainable support/tooling infrastructure would be ideal.\n-\n h1. Deployment\n \n-When ssh-ing into a new host, you are requested to verify and accept the host key. In order to automatically accept the host keys for many new hosts (dangerous), use:\n-\n-hosts=&quot;$host1 $host2 ...&quot; scripts/hw.bash warmup\n-\n-The @hosts@ variable is set here to the list of hosts that you would like to warm up.\n-\n-To set up JDK6 on some hosts, use:\n-\n-hosts=&quot;...&quot; scripts/hw.bash setup-java $path&#95;to&#95;modified&#95;jdk6\n-\n-The argument must point to a JDK6 binary self-extracting executable, but with the @more@ command that displays the License agreement replaced with @cat@. Unfortunately, this step must be performed manually. This script will extract the JDK directly into the home directory and update @$PATH@ in @~/.bashrc@ (in an idempotent fashion).\n-\n-Because the current implementation uses a single socket per subscription, the Hedwig launching scripts all require a high @ulimit@ on the number of open file descriptors. Non-root users can only use up to the limit specified in @/etc/security/limits.conf@; to raise this to 1024^2, run:\n-\n-hosts=&quot;...&quot; scripts/hw.bash setup-limits\n-\n-This uses @ssh@ so that you need to enter your password for @sudo@ just once.\n-\n-For most of the commands presented in the next section, you may prefix the command with:\n-\n-push&#95;jar=true ...\n-\n-to first push the assembly jar (assumed to be available in @server/target/@) to all hosts.\n-\n-h1. Running Servers\n-\n-To start three BK bookies on ports 3181-3183 on localhost (directories must all exist):\n-\n-scripts/hw.bash bk 3181 $bk1&#95;journal&#95;dir $bk1&#95;ledger&#95;dir &amp; scripts/hw.bash bk 3182 $bk2&#95;journal&#95;dir $bk2&#95;ledger&#95;dir &amp; scripts/hw.bash bk 3183 $bk3&#95;journal&#95;dir $bk3&#95;ledger&#95;dir &amp;\n-\n-To start a ZK on port 2181 (directory must exist):\n-\n-scripts/hw.bash zk 2181 /path/for/zk/ &amp;\n-\n-To register the BKs with the ZK (so that Hedwig knows where to find the bookies):\n-\n-scripts/hw.bash setup-bk localhost:2181 @hostname@:3181 @hostname@:3182 @hostname@:3183\n-\n-Everything up to this point may be done using a single command over a set of hosts, with ZK on port 9877 and BK on port 9878. The following function takes 2 arguments. The first is the ZK host. The second is a string list of BK hosts:\n-\n-scripts/hw.bash start-zk-bks <span class=\"math\">zkhost &quot;</math>bk1host $bk2host $bk3host ...&quot;\n-\n-Note that the hosts may be SSH profile aliases in your @~/.ssh/config@; the script will parse this file and look up their hostnames where necessary. This applies for the hosts specified in the other commands.\n-\n-Also, the scripts use the @bk-journal@ and @bk-ledger@ functions in @hw.bash@ to determine where to place the BK journal and ledger, given a hostname.\n-\n-To start a Hedwig server locally:\n-\n-scripts/hw.bash hw server.conf &amp;\n-\n-To start Hedwig servers on some hosts &quot;$hw1host $hw2host $hw3host ...&quot; on port 9876, using $zkhost as the ZK server:\n-\n-scripts/hw.bash start-hw '' &quot;$hw1host $hw2host $hw3host ...&quot; $zkhost\n-\n-Above, the first empty string argument is the list of default servers to each of the other regions. You may run multiple connected instances of Hedwig this way.\n-E.g., to start three regions each with a single Hedwig hub that talk to each other, and using the hw.bash default server ports of 9875 (non-SSL) and 9876 (SSL):\n-\n-scripts/hw.bash start-hw &quot;$hw2host:9875:9876 <span class=\"math\">hw3host:9875:9876&quot; &quot;</math>hw1host&quot; <span class=\"math\">zk1host scripts/hw.bash start-hw &quot;</math>hw1host:9875:9876 <span class=\"math\">hw3host:9875:9876&quot; &quot;</math>hw2host&quot; <span class=\"math\">zk2host scripts/hw.bash start-hw &quot;</math>hw1host:9875:9876 <span class=\"math\">hw2host:9875:9876&quot; &quot;</math>hw3host&quot; $zk3host\n-\n-Everything up to this point may be done using a single command over a set of hosts:\n-\n-scripts/hw.bash start-region '' &quot;$hw1host $hw2host $hw3host ...&quot; <span class=\"math\">zkhost &quot;</math>bk1host $bk2host $bk3host ...&quot;\n-\n-The first three arguments are the same as for @start-hw@.\n-\n-You may start multiple regions as well:\n-\n-scripts/hw.bash start-regions regions.cfg\n-\n-&quot;regions.cfg&quot; is a list of all regions, one per line, with each region having the following format:\n-\n-region=<Region name>, hub=<list of hub servers>, default=<single hub server>, zk=<single ZK server>, bk=<list of BK servers>\n-\n-This will create all of the regions with an all-to-all topology. Each region is connected to the default hub server of every other region. The &quot;, &quot; delimiter is used to separate out the different parts of a region along with the hard-coded parameter names. There also needs to be a newline after the last region line. Here is an example file specifying three regions:\n-\n-region=wilbur, hub=wilbur90 wilbur91, default=wilbur90, zk=wilbur93, bk=wilbur93 wilbur94 wilbur95 region=re1, hub=sherpa7 sherpa8, default=sherpa7, zk=sherpa9, bk=sherpa9 sherpa10 sherpa11 region=peanuts, hub=peanuts1 peanuts2, default=peanuts2, zk=peanuts3, bk=peanuts3 peanuts4 peanuts5\n-\n-h1. Running the Client\n-\n-To run the test client:\n-\n-JAVAFLAGS=&quot;...&quot; scripts/hw.bash hwc $conf&#95;path\n-\n-where @$conf_path@ is a client configuration file.\n-\n-To run the test client on some other hosts:\n-\n-hosts=&quot;...&quot; JAVAFLAGS=&quot;...&quot; scripts/hw.bash app $hwhost\n-\n-This will generate a simple configuration file assuming $hwhost is listening on the default SSL and non-SSL ports which are specified as global variables in hw.bash. Currently these are 9875 for non-SSL and 9876 for SSL.\n-\n-Client usage is currently documented in the source. To run a subscription benchmark, set @JAVAFLAGS@ to:\n-\n--Dmode=sub -Dcount=10000 -Dnpar=100 -Dstart=5 -Dnwarmups=30\n-\n-This will first create 30 warm-up subscriptions to topics &quot;warmup-5&quot; through &quot;warmup-34&quot;, then 10,000 benchmarked subscriptions to topics &quot;topic-5&quot; through &quot;topic-10,004&quot;. It will have a pipeline depth of 100 requests, meaning that there will be at most 100 outstanding (unresponded) messages in flight at any moment.\n-\n-To run a publishing benchmark, set @JAVAFLAGS@ to:\n-\n--Dmode=pub -Dcount=10000 -Dnpar=100 -Dstart=5\n-\n-This will publish 10,000 messages to topic &quot;topic-5&quot;, with a pipeline depth of 100 requests.\n+h2. Limits\n \n-At the end, the programs will print throughput and latency information.\n+Because the current implementation uses a single socket per subscription, the Hedwig requires a high @ulimit@ on the number of open file descriptors. Non-root users can only use up to the limit specified in @/etc/security/limits.conf@; to raise this to 1024^2, as root, modify the &quot;nofile&quot; line in /etc/security/limits.conf on all hubs.\n \n-h1. Utilities\n+h2. Running Servers\n \n-To kill all the user's Java processes running on some machines, use:\n+Hedwig requires BookKeeper to run. For BookKeeper setup instructions see \"BookKeeper Getting Started\":./bookkeeperStarted.html.\n \n-hosts=&quot;...&quot; scripts/hw.bash dkill\n+To start a Hedwig hub server:\n \n-To check if any processes are running and are using ports of interest (esp. 9876-9878):\n+ @ hedwig-server/bin/hedwig server\n \n-hosts=&quot;...&quot; scripts/hw.bash dstatus\n+Hedwig takes its configuration from hedwig-server/conf/hw_server.conf by default. To change location of the conf file, modify the HEDWIG_SERVER_CONF environment variable.\n \n-Add an argument to @dstatus@ (may be anything) to get a more detailed listing.\n+h1. Debugging\n \n-To check if there's anything consuming the CPU on some machines:\n+You can attach an Eclipse debugger (or any debugger) to a Java process running on a remote host, as long as it has been started with the appropriate JVM flags. (See the Building Hedwig document to set up your Eclipse environment.) To launch something using @bin/hedwig@ with debugger attachment enabled, prefix the command with @HEDWIG_EXTRA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,address=5000@, e.g.:\n \n-hosts=&quot;...&quot; scripts/hw.bash tops\n+@ HEDWIG_EXTRA_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,address=5000 hedwig-server/bin/hedwig server\n \n-To run an arbitrary command on multiple hosts in parallel:\n+h1. Logging\n \n-hosts=&quot;...&quot; scripts/hw.bash parssh $command\n+To control the logging in Hedwig server, set HEDWIG_LOG_CONF to the location of a log4j.properties file.\n \n-To do this in sequence:\n+@ HEDWIG_LOG_CONF=../hw_testing/log4j.properties hedwig-server/bin/hedwig server\n \n-hosts=&quot;...&quot; xargs= scripts/hw.bash parssh $command\n "},{"sha":"332c42f9c16b5c65e0cd7b3b61694024ad5d4be9","filename":"hedwig-client/conf/hw_client.conf","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-client/conf/hw_client.conf","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-client/conf/hw_client.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/conf/hw_client.conf?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -1,6 +1,6 @@\n # The default Hedwig server host to contact (this ideally should be a VIP \n # that fronts all of the Hedwig server hubs).\n-default_server_host=hwServer1:4080:9876\n+default_server_host=localhost:4080:9876\n # This parameter is a boolean flag indicating if communication with the\n # server should be done via SSL for encryption. The Hedwig server hubs also\n # need to be SSL enabled for this to work.","previous_filename":"conf/hw_client_sample.conf"},{"sha":"9b76b62ae4317b97d5239a5eee162e8a7309e928","filename":"hedwig-server/bin/hedwig","status":"added","additions":115,"deletions":0,"changes":115,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-server/bin/hedwig","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-server/bin/hedwig","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/bin/hedwig?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -0,0 +1,115 @@\n+#!/bin/sh\n+#\n+#/**\n+# * Copyright 2007 The Apache Software Foundation\n+# *\n+# * Licensed to the Apache Software Foundation (ASF) under one\n+# * or more contributor license agreements.  See the NOTICE file\n+# * distributed with this work for additional information\n+# * regarding copyright ownership.  The ASF licenses this file\n+# * to you under the Apache License, Version 2.0 (the\n+# * \"License\"); you may not use this file except in compliance\n+# * with the License.  You may obtain a copy of the License at\n+# *\n+# *     http://www.apache.org/licenses/LICENSE-2.0\n+# *\n+# * Unless required by applicable law or agreed to in writing, software\n+# * distributed under the License is distributed on an \"AS IS\" BASIS,\n+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# * See the License for the specific language governing permissions and\n+# * limitations under the License.\n+# */\n+\n+BINDIR=`dirname \"$0\"`\n+HW_HOME=`cd $BINDIR/..;pwd`\n+\n+DEFAULT_CONF=$HW_HOME/conf/hw_server.conf\n+\n+RELEASE_JAR=`ls $HW_HOME/hedwig-server-*.jar 2> /dev/null | tail -1`\n+if [ $? == 0 ]; then\n+    HEDWIG_JAR=$RELEASE_JAR\n+fi\n+\n+BUILT_JAR=`ls $HW_HOME/target/hedwig-server-*.jar 2> /dev/null | tail -1`\n+if [ $? != 0 ] && [ ! -e \"$HEDWIG_JAR\" ]; then \n+    echo \"\\nCouldn't find hedwig jar.\";\n+    echo \"Make sure you've run 'mvn package'\\n\";\n+    exit 1;\n+elif [ -e \"$BUILT_JAR\" ]; then\n+    HEDWIG_JAR=$BUILT_JAR\n+fi\n+\n+add_maven_deps_to_classpath() {\n+    MVN=\"mvn\"\n+    if [ \"$MAVEN_HOME\" != \"\" ]; then\n+\tMVN=${MAVEN_HOME}/bin/mvn\n+    fi\n+    \n+    # Need to generate classpath from maven pom. This is costly so generate it\n+    # and cache it. Save the file into our target dir so a mvn clean will get\n+    # clean it up and force us create a new one.\n+    f=\"${HW_HOME}/target/cached_classpath.txt\"\n+    if [ ! -f \"${f}\" ]\n+    then\n+\t${MVN} -f \"${HW_HOME}/pom.xml\" dependency:build-classpath -Dmdep.outputFile=\"${f}\" &> /dev/null\n+    fi\n+    HEDWIG_CLASSPATH=${CLASSPATH}:`cat \"${f}\"`\n+}\n+\n+if [ -d \"$HW_HOME/lib\" ]; then\n+    for i in $HW_HOME/lib/*.jar; do\n+\tHEDWIG_CLASSPATH=$HEDWIG_CLASSPATH:$i\n+    done\n+else\n+    add_maven_deps_to_classpath\n+fi\n+\n+hedwig_help() {\n+    cat <<EOF\n+Usage: hedwig <command>\n+where command is one of:\n+    server           Run the hedwig server\n+    help             This help message\n+\n+or command is the full name of a class with a defined main() method.\n+\n+Environment variables:\n+   HEDWIG_SERVER_CONF     Hedwig server configuration file (default $DEFAULT_CONF)\n+   HEDWIG_LOG_CONF        Log4j configuration file\n+   HEDWIG_EXTRA_OPTS      Extra options to be passed to the jvm\n+\n+These variable can also be set in conf/hwenv.sh\n+EOF\n+}\n+\n+# if no args specified, show usage\n+if [ $# = 0 ]; then\n+    hedwig_help;\n+    exit 1;\n+fi\n+\n+# get arguments\n+COMMAND=$1\n+shift\n+\n+if [ \"$HEDWIG_SERVER_CONF\" == \"\" ]; then\n+    HEDWIG_SERVER_CONF=$DEFAULT_CONF;\n+fi\n+\n+HEDWIG_CLASSPATH=\"$HEDWIG_JAR:$HEDWIG_CLASSPATH\"\n+\n+if [ \"$HEDWIG_LOG_CONF\" != \"\" ]; then\n+    HEDWIG_CLASSPATH=\"`dirname $HEDWIG_LOG_CONF`:$HEDWIG_CLASSPATH\"\n+    OPTS=\"$OPTS -Dlog4j.configuration=`basename $HEDWIG_LOG_CONF`\"\n+fi\n+OPTS=\"-cp $HEDWIG_CLASSPATH $OPTS $HEDWIG_EXTRA_OPTS\"\n+\n+if [ $COMMAND == \"server\" ]; then\n+    exec java $OPTS org.apache.hedwig.server.netty.PubSubServer $HEDWIG_SERVER_CONF $@\n+elif [ $COMMAND == \"help\" ]; then\n+    hedwig_help;\n+else\n+    exec java $OPTS $COMMAND $@\n+fi\n+\n+"},{"sha":"4b5385115dea28051990d6e91d2eaaf27c3c3687","filename":"hedwig-server/conf/hw_server.conf","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-server/conf/hw_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-server/conf/hw_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/conf/hw_server.conf?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -1,5 +1,5 @@\n # The ZooKeeper server host(s) for the Hedwig Server to use.\n-zk_host=zkServer1:2181\n+zk_host=localhost:2181\n # The number of milliseconds of each tick in ZooKeeper.\n zk_timeout=2000\n # The port at which the clients will connect.","previous_filename":"conf/hw_server_sample.conf"},{"sha":"a3836b8acade6ef7ec562aa35501e75619066c45","filename":"hedwig-server/conf/hwenv.sh","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-server/conf/hwenv.sh","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-server/conf/hwenv.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/conf/hwenv.sh?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -0,0 +1,24 @@\n+#!/bin/sh\n+#\n+#/**\n+# * Copyright 2007 The Apache Software Foundation\n+# *\n+# * Licensed to the Apache Software Foundation (ASF) under one\n+# * or more contributor license agreements.  See the NOTICE file\n+# * distributed with this work for additional information\n+# * regarding copyright ownership.  The ASF licenses this file\n+# * to you under the Apache License, Version 2.0 (the\n+# * \"License\"); you may not use this file except in compliance\n+# * with the License.  You may obtain a copy of the License at\n+# *\n+# *     http://www.apache.org/licenses/LICENSE-2.0\n+# *\n+# * Unless required by applicable law or agreed to in writing, software\n+# * distributed under the License is distributed on an \"AS IS\" BASIS,\n+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# * See the License for the specific language governing permissions and\n+# * limitations under the License.\n+# */\n+\n+# default settings for starting hedwig\n+#HEDWIG_SERVER_CONF=\n\\ No newline at end of file"},{"sha":"e9930a260f624b4e05948922b762c4ead94320ac","filename":"hedwig-server/lib/README","status":"removed","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/hedwig-server/lib/README","raw_url":"https://github.com/apache/bookkeeper/raw/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/hedwig-server/lib/README","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/lib/README?ref=da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","patch":"@@ -1,4 +0,0 @@\n-The Zookeeper and BookKeeper jars included in this server/lib directory were\n-created off the zookeeper Apache trunk at revision 947756. They have new \n-features that haven't been put into a release version yet so just putting it\n-here temporarily."},{"sha":"628ae41c66cc0a68bf9a3137f6c095966e6b6fef","filename":"hedwig-server/pom.xml","status":"modified","additions":0,"deletions":22,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210/hedwig-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/pom.xml?ref=afdd3dd1e7e06f97e29ff5bcaa2001f81f6d9210","patch":"@@ -72,28 +72,6 @@\n   </dependencies>\n   <build>\n     <plugins>\n-      <plugin>\n-        <artifactId>maven-assembly-plugin</artifactId>\n-        <configuration>\n-          <descriptorRefs>\n-            <descriptorRef>jar-with-dependencies</descriptorRef>\n-          </descriptorRefs>\n-          <archive>\n-            <manifest>\n-              <mainClass>${mainclass}</mainClass>\n-            </manifest>\n-          </archive>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <id>make-assembly</id>\n-            <phase>package</phase>\n-            <goals>\n-              <goal>attached</goal>\n-            </goals>\n-          </execution>\n-        </executions>\n-      </plugin>\n <!--\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>"},{"sha":"346da2ccfb4794f6c084b1409b188af077251f83","filename":"scripts/README.txt","status":"removed","additions":0,"deletions":39,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/README.txt","raw_url":"https://github.com/apache/bookkeeper/raw/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/README.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/scripts/README.txt?ref=da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","patch":"@@ -1,39 +0,0 @@\n-To start up a Hedwig server, you can make use of the scripts in this directory.\n-The hw.bash script is used to setup a Hedwig region cluster on remote boxes.\n-It contains methods that allow the user to start up a ZooKeeper server\n-(currently only a single quorum) and also any number of Bookkeeper servers.\n-It can also startup any number of Hedwig server hubs that point to this\n-ZooKeeper/Bookkeeper setup.\n-\n-To simplify and generalize things, the hwServer.sh script is used to start\n-up a single Hedwig server hub on the current local machine. It assumes that\n-the ZooKeeper and Bookkeeper servers are setup and running already. The order\n-of operations prior to starting up the Hedwig server hub(s) is:\n-\n-1. Startup a quorum of ZooKeeper servers (could be a single one).\n-2. Using a ZooKeeper client to connect to the servers, create the following \n-ZK nodes to be used by Bookkeeper as directory path nodes.\n-\t/ledgers and /ledgers/available\n-3. Startup Bookkeeper servers pointing them to this ZooKeeper quorum.\n-4. For each machine you want to run a Hedwig server hub on, the Hedwig code\n-needs to be there. Compile/build it from the top level with the command: \n-\tmvn install -Dmaven.test.skip=true\n-In the server/target directory, this creates the following fat jar that\n-contains all dependencies the Hedwig server needs to run:\n-\tserver-1.0-SNAPSHOT-jar-with-dependencies.jar\n-5. Define your Hedwig server configuration before you start the server. The\n-default location and file for this is: \n-\tconf/hw_server.conf\n-However, you can override this by setting the appropriate environment\n-variables or passing in your config file directly when invoking the\n-hwServer.sh script. A sample config file is available for you at:\n-\tconf/hw_server_sample.conf\n-The important config parameter is the \"zk_host\" one which will point the\n-Hedwig server hub to the ZooKeeper quorum which manages and coordinates all of\n-the hubs.\n-6. Run the hwServer.sh script to start up the server:\n-\tscripts/hwServer.sh start\n-OR\tscripts/hwServer.sh start <path to your Hedwig server config file>\n-7. Stop or restart the Hedwig server hub using the following commands:\n-\tscripts/hwServer.sh stop\n-\tscripts/hwServer.sh restart"},{"sha":"6a468c9c406dddb72ca0557db9041dd929ea4e60","filename":"scripts/analyze.py","status":"removed","additions":0,"deletions":201,"changes":201,"blob_url":"https://github.com/apache/bookkeeper/blob/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/analyze.py","raw_url":"https://github.com/apache/bookkeeper/raw/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/analyze.py","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/scripts/analyze.py?ref=da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","patch":"@@ -1,201 +0,0 @@\n-#!/usr/bin/env python\n-\n-#  Licensed to the Apache Software Foundation (ASF) under one or more\n-#  contributor license agreements.  See the NOTICE file distributed with\n-#  this work for additional information regarding copyright ownership.\n-#  The ASF licenses this file to You under the Apache License, Version 2.0\n-#  (the \"License\"); you may not use this file except in compliance with\n-#  the License.  You may obtain a copy of the License at\n-#\n-#      http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#  Unless required by applicable law or agreed to in writing, software\n-#  distributed under the License is distributed on an \"AS IS\" BASIS,\n-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#  See the License for the specific language governing permissions and\n-#  limitations under the License.\n-\n-from __future__ import with_statement\n-import sys, os, glob, re, collections, math, subprocess, unittest\n-from numpy import *\n-from commons import seqs, startup, strs, structs\n-import cairo\n-from pycha.bar import *\n-\n-def sub():\n-\n-  #\n-  # Parse/aggregate.\n-  #\n-\n-  tputs = collections.defaultdict(list)\n-  lats = collections.defaultdict(list)\n-  for fname in glob.glob('sync-*-count-*-npar-*-rep-*.out'):\n-    m = re.match(r'sync-(\\d+)-count-(\\d+)-npar-(\\d+)-rep-(\\d+)\\.out', fname)\n-    sync, count, npar, rep = map(int, m.groups())\n-    with file(fname) as f:\n-      m = re.search(r'finished subs, tput = ([\\d\\.]+) ops/s, avg latency = (\\d+)', f.readlines()[-2])\n-      tput, lat = map(float, m.groups())\n-    tputs[sync, count, npar].append(tput)\n-    lats[sync, count, npar].append(lat)\n-  for d in tputs, lats:\n-    for k in d:\n-      d[k] = array(d[k]).mean(), array(d[k]).std()\n-      print k, d[k]\n-\n-  #\n-  # Plot.\n-  #\n-\n-  for title, ylabel, fname, d in [ ('Subscription throughput over three trials', 'Subscriptions per second', 'tput', tputs),\n-                                   ('Subscription latency over three trials', 'Round-trip time in ms', 'lat', lats) ]:\n-    means = dict((k, v[0]) for k,v in d.iteritems())\n-    sdevs = dict((k, v[1]) for k,v in d.iteritems())\n-\n-    surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 500, 400)\n-    syncs, counts, npars = [ sorted(set(x[i] for x in means))\n-                                for i in xrange(3) ]\n-    print syncs, counts, npars\n-    dataset = [ ( '%d topics, %s' %\n-                    ( count, 'synchronous' if sync else 'asynchronous' ),\n-                  [ ( npar/10, means[sync, count, npar], sdevs[sync, count, npar] )\n-                    for npar in npars ] )\n-                for count in counts\n-                for sync in syncs ]\n-    options = {'legend.position':\n-                {'top': None, 'left': None, 'bottom': 100, 'right': 20},\n-               'axis.x.ticks': [{'v': x, 'label': max(1,10*x)}\n-                                for i,(x,y,e) in enumerate(dataset[0][1])],\n-               'axis.x.label': 'Number of outstanding subscription requests',\n-               'axis.y.label': ylabel,\n-               'padding.left': 50,\n-               'title': title,\n-               'background.color': '#f0f0f0'}\n-    chart = VerticalBarChart(surface, structs.sparse_dict(options))\n-    chart.addDataset(dataset)\n-    chart.render()\n-    surface.write_to_png(fname + '.png')\n-\n-def pub():\n-\n-  def helper(do_pubs):\n-\n-    def subhelper(keyname, pat, xlabel):\n-\n-      #\n-      # Parse/aggregate.\n-      #\n-\n-      print 'Analyzing', keyname, 'for', 'publishers' if do_pubs else 'receivers'\n-      print '========================'\n-      print\n-\n-      tputs = collections.defaultdict(list)\n-      lats = collections.defaultdict(list)\n-      fnames = [ ( fname, tuple(map(int, m.groups())) )\n-                 for fname, m in filter( lambda m: m[1] is not None,\n-                                         ( ( fname, re.match(pat, fname) )\n-                                           for fname in os.listdir('.') ) ) ]\n-      tup2fname = dict( (tup, fname) for fname, tup in fnames )\n-      keys, reps, nodes = map(lambda xs: sorted(set(xs)),\n-                              zip(*(tup for fname, tup in fnames)))\n-\n-      raw_table = []\n-      print '== raw data =='\n-      raw_table.append( [ keyname, 'rep', 'node', 'tput' ] + ( ['lat'] if do_pubs else [] ) + ['sum/mean tput', 'mean lat'] )\n-      for key in keys:\n-        for rep in reps:\n-          tmptputs = []\n-          tmplats = []\n-          for node in nodes:\n-            if (key, rep, node) in tup2fname:\n-              with file(tup2fname[key, rep, node]) as f:\n-                try:\n-                  if do_pubs:\n-                    m = re.search(r'finished acked pubs, tput = ([\\d\\.]+) ops/s, avg latency = (\\d+)', f.readlines()[-2])\n-                    tput, lat = map(float, m.groups())\n-                  else:\n-                    m = re.search(r'finished recvs, tput = ([\\d\\.]+) ops/s', f.read())\n-                    [tput] = map(float, m.groups())\n-                except AttributeError:\n-                  print >> sys.stderr, \"While processing\", tup2fname[key, rep, node]\n-                  raise\n-              raw_table.append( [ key, rep, node, tput ] + ( [lat] if do_pubs else [] ) + ['',''] )\n-              tmptputs.append(tput)\n-              if do_pubs: tmplats.append(lat)\n-          if keyname == 'npubs': tputs[key].append(sum(tmptputs))\n-          else: tputs[key].append(array(tmptputs).mean())\n-          if do_pubs: lats[key].append(array(tmplats).mean())\n-          if len(nodes) > 1:\n-            raw_table.append( [''] * (len(raw_table[0]) - 2) + [tputs[key][-1]] + ( [lats[key][-1]] if do_pubs else [] ) )\n-      print strs.show_table_by_rows(raw_table)\n-      print\n-\n-      print '== aggregated over reps =='\n-      agg_table = []\n-      agg_table.append( ( keyname, 'mean', 'sd' ) )\n-      for d in tputs, lats:\n-        for k in d:\n-          d[k] = array(d[k]).mean(), array(d[k]).std()\n-          agg_table.append( ( k, d[k][0], d[k][1] ) )\n-      print strs.show_table_by_rows(agg_table)\n-      print\n-\n-      #\n-      # Plot.\n-      #\n-\n-      if do_pubs:\n-        plots = [ ('Publishing throughput over three trials', 'Publishes per second', '%s-pub-tput' % keyname, tputs),\n-                  ('Publishing latency over three trials', 'Round-trip time in ms', '%s-pub-lat' % keyname, lats) ]\n-      else:\n-        plots = [ ('Receiving throughput over three trials', 'Receives per second', '%s-recv-tput' % keyname, tputs) ]\n-      for title, ylabel, fname, d in plots:\n-        means = dict((k, v[0]) for k,v in d.iteritems())\n-        sdevs = dict((k, v[1]) for k,v in d.iteritems())\n-\n-        surface = cairo.ImageSurface(cairo.FORMAT_ARGB32, 500, 400)\n-        dataset = [ ( 'main',\n-                      [ ( i, means[key], sdevs[key] )\n-                        for i, key in enumerate(keys) ] ) ]\n-        options = {'legend.position':\n-                    {'top': None, 'left': None, 'bottom': 100, 'right': 20},\n-                   'axis.x.ticks': [{'v': x, 'label': k}\n-                                    for k,(x,y,e) in zip(keys, dataset[0][1])],\n-                   'axis.x.label': xlabel,\n-                   'axis.y.label': ylabel,\n-                   'padding.left': 50,\n-                   'title': title,\n-                   'background.color': '#f0f0f0'}\n-        chart = VerticalBarChart(surface, structs.sparse_dict(options))\n-        chart.addDataset(dataset)\n-        chart.render()\n-        surface.write_to_png(fname + '.png')\n-\n-      print\n-      print\n-      print\n-\n-    nodetype = 'pub' if do_pubs else 'recv'\n-    mode_npar = seqs.mode(\n-        int(m.group(1)) for m in\n-        [re.search('npar-(\\d+)', fname) for fname in os.listdir('.')]\n-        if m is not None )\n-    subhelper('nrecvs', 'nrecvs-(\\d+)-npubs-1-npar-%s-rep-(\\d+)-%s-(\\d+)' % (mode_npar, nodetype),\n-              'Number of receivers')\n-    subhelper('npubs', 'nrecvs-1-npubs-(\\d+)-npar-%s-rep-(\\d+)-%s-(\\d+)' % (mode_npar, nodetype),\n-              'Number of publishers')\n-    subhelper('npar', 'nrecvs-1-npubs-1-npar-(\\d+)-rep-(\\d+)-%s-(0)' % nodetype,\n-              'Number of outstanding publish requests')\n-\n-  helper(True)\n-  helper(False)\n-\n-def main(argv):\n-  if argv[1] == 'sub': sub()\n-  elif argv[1] == 'pub': pub()\n-  else: return unittest.main()\n-\n-startup.run_main()\n-\n-# vim: et sw=2 ts=2"},{"sha":"d31d73f4ebd0c928894754c878a83de972690b6e","filename":"scripts/hw.bash","status":"removed","additions":0,"deletions":734,"changes":734,"blob_url":"https://github.com/apache/bookkeeper/blob/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/hw.bash","raw_url":"https://github.com/apache/bookkeeper/raw/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/hw.bash","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/scripts/hw.bash?ref=da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","patch":"@@ -1,734 +0,0 @@\n-#!/usr/bin/env bash\n-\n-#  Licensed to the Apache Software Foundation (ASF) under one or more\n-#  contributor license agreements.  See the NOTICE file distributed with\n-#  this work for additional information regarding copyright ownership.\n-#  The ASF licenses this file to You under the Apache License, Version 2.0\n-#  (the \"License\"); you may not use this file except in compliance with\n-#  the License.  You may obtain a copy of the License at\n-#\n-#      http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#  Unless required by applicable law or agreed to in writing, software\n-#  distributed under the License is distributed on an \"AS IS\" BASIS,\n-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#  See the License for the specific language governing permissions and\n-#  limitations under the License.\n-\n-# This file is a collection of script functions. To use, just run this file\n-# with the function you want to execute as the first argument and arguments to\n-# the function following that.\n-#\n-# For instance, to install the prereq jars:\n-#\n-#   ./hw.bash install-zk\n-#\n-# Or to run BookKeeper:\n-#\n-#   ./hw.bash bk 3181 /tmp/bk/{journal,ledgers}\n-\n-# Note: unbuffer can cause all sorts of funky problems, especially when dealing\n-# with high volumes of output from multiple sources!  Problems aren't just\n-# about causing your terminal to get garbled; they may be as severe as killing\n-# this script itself.\n-\n-set -o errexit # -o nounset\n-\n-dark_blue=\"\\e[0;34m\";     bright_blue=\"\\e[1;34m\"\n-dark_green=\"\\e[0;32m\";    bright_green=\"\\e[1;32m\"\n-dark_cyan=\"\\e[0;36m\";     bright_cyan=\"\\e[1;36m\"\n-dark_red=\"\\e[0;31m\";      bright_red=\"\\e[1;31m\"\n-dark_magenta=\"\\e[0;35m\";  bright_magenta=\"\\e[1;35m\"\n-brown=\"\\e[0;33m\";         yellow=\"\\e[1;33m\"\n-black=\"\\e[0;30m\";         dark_gray=\"\\e[1;30m\";\n-bold_white=\"\\e[1;37m\"     white=\"\\e[0;37m\"\n-normal_color=\"\\e[0m\"\n-\n-# Default server ports used\n-PROFILER_PORT=9874\n-SERVER_PORT=9875\n-SSL_SERVER_PORT=9876\n-ZOOKEEPER_PORT=9877\n-BOOKKEEPER_PORT=9878\n-\n-: ${script:=$0}\n-serverdir=\"$(readlink -f \"$(dirname \"$script\")/../server/\")\" || serverdir=\n-cmd=\"$(basename \"$script\")\"\n-jarbase=server-1.0-SNAPSHOT-jar-with-dependencies.jar\n-if [[ -f \"$(dirname \"$script\")/$jarbase\" ]]\n-then jar=\"$(readlink -f \"$(dirname \"$script\")/$jarbase\")\"\n-else jar=\"$serverdir/target/$jarbase\"\n-fi\n-already_pushed=false\n-: ${push_jar:=false} ${push_script:=true} ${use_yjp=false} ${unbuffer:=false}\n-: ${loglevel:=} ${dbg:=false} ${attach:=false} ${logconf:=} ${asserts:=false}\n-if $unbuffer\n-then unbuffercmd='unbuffer -p'\n-else unbuffercmd=\n-fi\n-if $dbg\n-then set -x\n-fi\n-if $asserts\n-then JAVAFLAGS=-ea\n-fi\n-\n-#\n-# General utilities.\n-#\n-\n-trace() { echo \"$@\" ; eval \"$@\" ; }\n-\n-# Add the given prefix (first arg) to all subsequent words (latter args).\n-prefix-words() {\n-  local prefix=\"$1\"\n-  shift\n-  for i in \"$@\"\n-  do echo \"$prefix\" \"$i\"\n-  done\n-}\n-\n-quote(){\n-  \"$(dirname \"$script\")/quote\" \"$@\"\n-}\n-\n-# Retrieve the substring of a string with a given prefix and suffix.\n-# For example, substr \"Hello World!\" \"ell\" \"rld\" returns \"o Wo\".\n-# Everything before the prefix and after the suffix (inclusive)\n-# is stripped off and the remaining substring is returned.\n-substr() {\n-    if [ $# == 3 ]\n-\tthen\n-\tnopref=\"${1#${1%${2}*}${2}}\"\n-\techo \"${nopref%${3}*}\"\n-    else\n-\techo \"Usage: substr string prefix suffix\"\n-    fi\n-}\n-\n-# Must test connectivity via ssh because we may be firewalled.\n-wait-connect() {\n-  local prof=\"${1%:*}\" port=\"${1#*:}\"\n-  local host=\"$(ssh-hosts $prof)\"\n-  while ! echo | ssh \"$prof\" nc -w 1 localhost \"$port\"\n-  do sleep 1\n-  done\n-}\n-\n-#\n-# Java runners.\n-#\n-\n-# Launch with yourkit profiler.\n-java-yjp() {\n-  if $use_yjp\n-  then LD_LIBRARY_PATH=\"${YJP:-$HOME/yjp-8.0.15}/bin/linux-x86-32/\" \\\n-       java -agentlib:yjpagent $JAVAFLAGS \"$@\"\n-  else java $JAVAFLAGS \"$@\"\n-  fi\n-}\n-\n-with-attach() {\n-  if $attach\n-  then JAVAFLAGS=\"-agentlib:jdwp=transport=dt_socket,server=y,address=$PROFILER_PORT $JAVAFLAGS\" \"$@\"\n-  else \"$@\"\n-  fi\n-}\n-\n-with-logging() {\n-  if [[ $loglevel ]] ; then\n-    logconf=\"\n-log4j.rootLogger=$loglevel, A1\n-log4j.logger.org.apache.zookeeper = ERROR\n-log4j.logger.org.apache.bookkeeper.client.QuorumOpMonitor = ERROR\n-log4j.logger.org.apache.bookkeeper.proto.BookieClient = ERROR\n-\n-# A1 is set to be a ConsoleAppender.\n-log4j.appender.A1=org.apache.log4j.ConsoleAppender\n-\n-# A1 uses PatternLayout.\n-log4j.appender.A1.layout=org.apache.log4j.PatternLayout\n-log4j.appender.A1.layout.ConversionPattern=%d %-4r [%t] %-5p %c %x - %m%n\n-\"\n-  fi\n-  if [[ \"$logconf\" ]] ; then\n-    mkdir -p /tmp/$USER/logging/\n-    local logdir=\"$(mktemp -d -p /tmp/$USER/logging/)\"\n-    echo \"$logconf\" > \"$logdir/log4j.properties\"\n-    CLASSPATH=\"$logdir:$CLASSPATH\" \"$@\"\n-  else\n-    \"$@\"\n-  fi\n-}\n-\n-try-ulimit() { ulimit -n $((1024**2)) || true ; }\n-j() { CLASSPATH=\"$jar\" with-logging with-attach java-yjp \"$@\" ; }\n-bk() { j org.apache.bookkeeper.proto.BookieServer \"$@\" ; }\n-#bk() { j com.yahoo.pubsub.client.benchmark.FakeBookie \"$@\" ; }\n-zk() { j org.apache.zookeeper.server.quorum.QuorumPeerMain \"$@\" ; }\n-zkc() { j org.apache.zookeeper.ZooKeeperMain -server \"$@\" ; }\n-hw() { try-ulimit; j org.apache.hedwig.server.netty.PubSubServer \"$@\" ; }\n-hwc() { try-ulimit; hwc-soft \"$@\" ; }\n-hwc-soft() { j org.apache.hedwig.client.benchmark.HedwigBenchmark \"$@\" ; }\n-\n-ssh-zkc() {\n-  local server=\"$1\" port=\"$2\"\n-  ssh \"$server\" \"hedwig/hw.bash zkc localhost:$port\"\n-}\n-\n-#\n-# Setup\n-#\n-\n-# Get/build the ZK dependencies that must be manually installed and place those\n-# jars in the current directory.\n-get-zk() {\n-  local stagedir=\"$(pwd)\" dstdir=\"$(pwd)\" ver=3.2.0\n-  local unpacked=\"$stagedir/zookeeper-$ver/\"\n-  local url=\"http://archive.apache.org/dist/hadoop/zookeeper/zookeeper-$ver/zookeeper-$ver.tar.gz\"\n-\n-  if [[ ! -d \"$unpacked\" ]]\n-  then \n-       echo $url\n-       wget -q -O - \"$url\" | tar xzf - -C \"$stagedir\"\n-  fi\n-  ant -q -buildfile \"$unpacked/build.xml\" compile-test\n-  cp -r \"$unpacked/src/java/test/\"{config,data}/ \"$unpacked/build/testclasses/\"\n-  jar cf zookeeper-test-$ver.jar -C \"$(readlink -f \"$unpacked/build/testclasses/\")\" .\n-  cp \"$unpacked/zookeeper-$ver.jar\" .\n-  cp \"$unpacked/contrib/bookkeeper/zookeeper-$ver-bookkeeper.jar\" bookkeeper-$ver.jar\n-  jar cf zookeeper-test-$ver-sources.jar -C \"$(readlink -f \"$unpacked/src/java/test/\")\" .\n-  jar cf zookeeper-$ver-sources.jar -C \"$(readlink -f \"$unpacked/src/java/main/\")\" .\n-  jar cf bookkeeper-$ver-sources.jar -C \"$(readlink -f \"$unpacked/src/contrib/bookkeeper/src/java/\")\" .\n-}\n-\n-get-bk() {\n-  local svn=\"$serverdir/../Zookeeper/\" svnver=3.3.0-SNAPSHOT\n-  ant -q -buildfile \"$svn/build.xml\" compile-test\n-  ant -q -buildfile \"$svn/src/contrib/bookkeeper/build.xml\"\n-  jar cf bookkeeper-$svnver-sources.jar -C \"$(readlink -f \"$svn/src/contrib/bookkeeper/src/java/\")\" .\n-  cp \"$svn/build/contrib/bookkeeper/zookeeper-dev-bookkeeper.jar\" bookkeeper-$svnver.jar\n-}\n-\n-# Install the jars from the current directory, as obtained by get-zk.\n-# For now, we will use the checked in ZK/BK jars in the server/lib directory.\n-# When an official ZK/BK release for those changes is done, then we can \n-# modify the get-zk function to get the latest code.\n-install-zk-bk() {\n-  for pkg in zookeeper zookeeper-test bookkeeper ; do\n-    local grp=\"${pkg%-*}\" ver=SNAPSHOT\n-    for srcs in '' -sources\n-    do trace mvn -q install:install-file -Dfile=\"$pkg-$ver$srcs.jar\" \\\n-        -DgroupId=org.apache.$grp -DartifactId=$pkg -Dpackaging=jar \\\n-        -Dversion=$ver ${srcs:+-Dclassifier=sources}\n-    done\n-  done\n-}\n-\n-setup-java() {\n-  # wget 'http://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/VerifyItem-Start/jdk-7-ea-linux-i586.bin?BundledLineItemUUID=dXBIBe.m0.UAAAEiZUUKrYfz&OrderID=BnZIBe.mencAAAEiU0UKrYfz&ProductID=O29IBe.py.oAAAEhK1kP50GU&FileName=/jdk-7-ea-linux-i586.bin'\n-  local jdk=\"$1\"\n-  parscp \"$jdk\" ^:/tmp/jdk6\n-  parssh \"\n-    echo yes | /tmp/jdk6 > /tmp/java-install-log &&\n-    if ! fgrep jdk1.6.0 ~/.bashrc > /dev/null\n-    then echo 'export PATH=~/jdk1.6.0_14/bin/:\\$PATH' >> ~/.bashrc\n-    fi\n-  \"\n-}\n-\n-setup-yjp() {\n-  local pkg=\"$1\"\n-  parscp \"$pkg\" ^:/tmp/yjp.zip\n-  parssh \"\n-    yes A | unzip -q /tmp/yjp.zip\n-    if ! fgrep YJP= ~/.bashrc > /dev/null\n-    then echo 'export YJP=~/yjp-8.0.15/' >> ~/.bashrc\n-    fi\n-  \"\n-}\n-\n-# Usage: setup-bk ZKSERVER ZKSERVER_PORT\n-#\n-# Create the /ledgers and /ledgers/available ZK nodes on the given ZK server.\n-# The bookie servers will register themselves once they are up on ZK but they\n-# need these nodes to exist first.\n-setup-bk() {\n-  local server=\"$1\" port=\"$2\"\n-  shift 2\n-  ssh-zkc \"$server\" \"$port\" << EOF || true\n-create /ledgers 0\n-create /ledgers/available 0\n-EOF\n-}\n-\n-# Get rid of duplicate files in a jar.\n-strip-jar() {\n-  local jar=\"${1:-$jar}\" tmpdir=/tmp/$USER/jar\n-  rm -rf \"$tmpdir\"\n-  mkdir -p \"$tmpdir\"\n-  (\n-    cd \"$tmpdir\"\n-    jar xf \"$jar\"\n-    jar cf \"$jar\" .\n-  )\n-}\n-\n-# Inspect the current logging level.\n-get-logging() {\n-  local jar=\"${1:-$jar}\" tmpdir=/tmp/$USER/jar\n-  mkdir -p \"$tmpdir\"\n-  (\n-    cd \"$tmpdir\"\n-    jar xf \"$jar\" log4j.properties\n-    grep rootLogger= log4j.properties\n-  )\n-}\n-\n-# Adjust the log level but without modifying the original source tree or going\n-# through the full rebuild process.\n-set-logging() {\n-  local level=\"$1\" tmpdir=/tmp/$USER/jarlog\n-  mkdir -p \"$tmpdir\"\n-  (\n-    cd \"$tmpdir\"\n-    jar xf \"$jar\" log4j.properties\n-    sed -i \"s/\\(rootLogger\\)=[[:alpha:]]\\+/\\1=$level/\" log4j.properties\n-    jar uf \"$jar\" log4j.properties\n-  )\n-}\n-\n-#\n-# General testbed tools.\n-#\n-\n-hosts() {\n-  if [[ ! \"$hosts\" ]]\n-  then echo '$hosts not set' 1>&2 ; return 1\n-  fi\n-  echo $hosts | sed 's/[[:space:]]\\+/\\n/g' | sort -u\n-}\n-\n-hostargs() { \"$@\" $hosts ; }\n-tagssh() {\n-  local prof=\"$1\"\n-  shift\n-  {\n-    ssh \"$prof\" \"export use_yjp=$use_yjp loglevel=$loglevel asserts=$asserts logconf=$(quote \"$logconf\"); attach=$attach; $@\" 2>&1 &&\n-    echo -e \"$bright_green[SUCCESS]$normal_color\" ||\n-    echo -e \"$bright_red[FAILURE: $?]$normal_color\" && false\n-  } | $unbuffercmd sed \"s/^/$prof: /g\"\n-}\n-parssh() { hosts | xargs ${xargs--P0} -i^ \"$script\" tagssh ^ \"$@\" ; }\n-parscp() { hosts | xargs ${xargs--P0} -i^ scp \"$@\" ; }\n-\n-# Resolves profile names to actual hostnames according to the user's .ssh/config.\n-ssh-hosts() {\n-  python -c \"\n-from __future__ import with_statement\n-import sys, os\n-hosts = {}\n-with file(os.environ['HOME'] + '/.ssh/config') as f:\n-  for line in f:\n-    words = line.split('#')[0].split()\n-    if len(words) == 2:\n-      if words[0] == 'Host': key = words[1]\n-      if words[0] == 'HostName': hosts[key] = words[1]\n-for profile in sys.argv[1:]:\n-  parts = profile.split(':', 1)\n-  key, rest = parts[0], ('' if len(parts) == 1 else ':' + parts[1])\n-  print hosts.get(key, key) + rest,\n-\" \"$@\"\n-}\n-\n-#\n-# Hedwig testbed tools.\n-#\n-\n-# Usage: hosts='wilbur2 wilbur3 wilbur4' ./hw.bash push\n-push() {\n-  if ! $already_pushed ; then\n-    if $push_jar || $push_script\n-    then parssh 'mkdir -p hedwig/'\n-    fi\n-    if $push_jar && $push_script\n-    then parscp -q \"$script\" \"$jar\" ^:hedwig/\n-    elif $push_jar && ! $push_script\n-    then parscp -q \"$jar\" ^:hedwig/\n-    elif ! $push_jar && $push_script\n-    then parscp -q \"$script\" ^:hedwig/\n-    else :\n-    fi\n-    already_pushed=true\n-  fi\n-}\n-\n-# Kill processes and garbage-collect the log4j temp directories.\n-dkill() { parssh 'pkill java; rm -rf /tmp/$USER/logging/' ; }\n-\n-# Pass in any argument to get a long listing.\n-lstatus() {\n-  for port in 2181 3181 4080 {9874..9878} ; do\n-    if /usr/sbin/lsof -i tcp:$port 2>&1 | fgrep 'LISTEN' > /dev/null ; then\n-      if (( $# > 0 )) ; then\n-        echo \"$port:\"\n-        ps u $(/usr/sbin/lsof -t -i tcp:$port) | cat\n-      else\n-        echo -n \"$port \"\n-      fi\n-    fi\n-  done\n-  (( $# > 0 )) || echo\n-}\n-\n-# Pass in any argument to get a long listing.\n-dstatus() {\n-  push\n-  xargs= parssh \"hedwig/hw.bash lstatus $@\"\n-}\n-\n-# See if anything is running on each machine.\n-tops() {\n-  xargs= parssh '\n-    echo\n-    hostname\n-    echo =====\n-    top -b -n 1 | fgrep -A3 COMMAND\n-  '\n-}\n-\n-# Familiarize this machine with the given hosts' keys.\n-warmup() {\n-  hosts | xargs -P0 -i^ ssh -o StrictHostKeyChecking=no ^ hostname\n-}\n-\n-# Add yourself to nopasswd sudoers for all hosts in $hosts.\n-setup-sudo() {\n-  local cmd='sudo su - -c \"\n-  if ! fgrep \\\"$USER ALL=(yahoo) NOPASSWD:ALL\\\" /etc/sudoers >& /dev/null\n-  then echo -e \\\"$USER ALL=(ALL) ALL\\n$USER ALL=(yahoo) NOPASSWD:ALL\\\" >> /etc/sudoers\n-  fi\"'\n-  python -c '\n-import getpass, os, pexpect, sys\n-pw = getpass.getpass()\n-for host in os.environ[\"hosts\"].split():\n-  c = pexpect.spawn(sys.argv[1], [host] + sys.argv[2:])\n-  i = c.expect([\"Password:\", pexpect.EOF])\n-  if i == 0: c.sendline(pw); c.read()\n-  filtered = filter(lambda x: pw not in x, c.before.split(\"\\n\"))\n-  sys.stdout.write(\"\\n\".join(filtered).lstrip(\"\\n\"))\n-  ' ssh \"$cmd\"\n-}\n-\n-setup-limits() {\n-  ssh '\n-    if ! sudo fgrep \"* hard nofile $((1024**2))\" /etc/security/limits.conf >& /dev/null\n-    then sudo su - -c \"echo \\\"* hard nofile $((1024**2))\\\" >> /etc/security/limits.conf\"\n-    fi\n-  '\n-}\n-\n-mkhomes() {\n-  ssh 'sudo mkdir -p /home/yang && sudo chown -R yang /home/yang'\n-}\n-\n-#\n-# Distributed launchers.\n-#\n-\n-# Given a hostname (*not* an ssh profile), figure out how to utilize the\n-# machine's disks for BK.\n-bk-journal() {\n-  case \"$@\" in\n-    * ) echo '\"/d1/$USER/bk/journal\"' ;;\n-  esac\n-}\n-bk-ledger() {\n-  case \"$@\" in\n-    * ) echo '\"/home/$USER/bk/ledger\"' ;;\n-  esac\n-}\n-bk-paths() {\n-  echo \"$(bk-journal \"$@\") $(bk-ledger \"$@\")\"\n-}\n-\n-# Start ZK on the first arg host and BKs on the second argument which is\n-# a string list of hosts.\n-start-zk-bks() {\n-  hosts=\"$*\" push jar\n-  local zk=\"$1\" abks=( $2 )\n-  shift\n-  tagssh $zk \"\n-    rm -rf /tmp/$USER/zk/\n-    mkdir -p /tmp/$USER/zk/\n-    cat > /tmp/$USER/zoo.cfg << EOF\n-tickTime=2000\n-dataDir=/tmp/$USER/zk/\n-clientPort=$ZOOKEEPER_PORT\n-EOF\n-    hedwig/hw.bash eval 'set -x; zk /tmp/$USER/zoo.cfg'\n-  \" &\n-  wait-connect $zk:$ZOOKEEPER_PORT\n-  setup-bk $(ssh-hosts $zk) $ZOOKEEPER_PORT\n-  hosts=\"$*\" parssh \"\n-    rm -rf $(bk-paths \"$1\")\n-    mkdir -p $(bk-paths \"$1\")\n-    hedwig/hw.bash eval $(quote \"set -x; bk $BOOKKEEPER_PORT $( ssh-hosts $zk ):$ZOOKEEPER_PORT $(bk-paths \"$1\")\")\n-  \" &\n-  for bk in \"${abks[@]}\" ; do\n-    wait-connect $bk:$BOOKKEEPER_PORT\n-  done\n-}\n-\n-# The first argument is a string list of remote region default Hedwig servers\n-# in a multi-region setup (if any). The second argument is a string list of\n-# Hedwig hubs to start for this local region. The third argument is the single\n-# ZooKeeper server host the hubs should connect to.\n-start-hw() {\n-  local allhws=\"$1\" ahws=( $2 ) zk=\"$3\"\n-  if [[ $region ]]\n-  then regionconf=\"region=$region\"\n-  fi\n-  shift\n-  hosts=\"$@\" push\n-  for hw in \"${ahws[@]}\" ; do\n-    tagssh $hw \"\n-    mkdir -p /tmp/$USER/\n-    cat > /tmp/$USER/hw.conf << EOF\n-zk_host=$( ssh-hosts $zk ):$ZOOKEEPER_PORT\n-regions=$( ssh-hosts $allhws )\n-server_port=$SERVER_PORT\n-ssl_server_port=$SSL_SERVER_PORT\n-ssl_enabled=true\n-inter_region_ssl_enabled=true\n-cert_name=/server.p12\n-password=eUySvp2phM2Wk\n-$regionconf\n-$extraconf\n-EOF\n-    hedwig/hw.bash eval 'set -x; hw /tmp/$USER/hw.conf'\n-  \" &\n-    wait-connect $hw:$SERVER_PORT\n-    wait-connect $hw:$SSL_SERVER_PORT\n-  done\n-}\n-\n-# The arguments are similar to those for start-hw() above.\n-# The additional 4th argument is a string list of BookKeeper servers to start up.\n-start-region() {\n-  local allhws=\"$1\" hws=\"$2\" zk=\"$3\" bks=\"$4\"\n-  shift\n-  hosts=\"$*\" push jar\n-  start-zk-bks \"$zk\" \"$bks\"\n-  start-hw \"$allhws\" \"$hws\" \"$zk\"\n-}\n-\n-# Start multiple regions from a file configuration. The format that is expected\n-# is to have each region on a separate line with the following format:\n-# region=<Region name>, hub=<list of hub servers>, default=<single hub server>, zk=<single ZK server>, bk=<list of BK servers>\n-# This will create all of the regions with an all-to-all topology. Each region \n-# is connected to the default hub server of every other region.\n-start-regions() {\n-  local cfg=\"$1\"\n-  local regionPref=\"region=\" hubPref=\", hub=\" defaultPref=\", default=\" zkPref=\", zk=\" bkPref=\", bk=\"\n-  while read line ; do\n-    local otherhws=\n-    while read subline ; do\n-      local profile=\"$(substr \"$subline\" \"$defaultPref\" \"$zkPref\")\"\n-      if [[ $profile != \"$(substr \"$line\" \"$defaultPref\" \"$zkPref\")\" ]]\n-      then otherhws=\"$otherhws $profile:$SERVER_PORT:$SSL_SERVER_PORT\"\n-      fi\n-    done < \"$cfg\"    \n-    local curRegion=\"$(substr \"$line\" \"$regionPref\" \"$hubPref\")\" \n-    local curHub=\"$(substr \"$line\" \"$hubPref\" \"$defaultPref\")\"\n-    local curZk=\"$(substr \"$line\" \"$zkPref\" \"$bkPref\")\" \n-    local curBk=\"$(substr \"$line\" \"$bkPref\" \"\")\"\n-    hosts=\"$curHub $curZk $curBk\" push jar\n-    region=\"$curRegion\" start-region \"$otherhws\" \"$curHub\" \"$curZk\" \"$curBk\" &\n-  done < \"$cfg\"\n-  wait\n-}\n-\n-app() {\n-  local hw=\"$1\" # the server to connect to\n-  push\n-  parssh \"\n-    set -o errexit -x\n-    mkdir -p /tmp/\\$USER/\n-    echo $(quote \"default_server_host=$(ssh-hosts \"$hw\"):$SERVER_PORT:$SSL_SERVER_PORT\") > /tmp/\\$USER/hwc.conf\n-    JAVAFLAGS=$(quote \"$JAVAFLAGS\") hedwig/hw.bash hwc /tmp/\\$USER/hwc.conf\n-  \"\n-}\n-\n-#\n-# Experiments.\n-#\n-\n-sub-exp() {\n-  : ${start:=0}\n-  push\n-  for sync in ${syncs:-true false} ; do\n-    for count in ${counts:-1000} ; do\n-      for npar in ${npars:-1 10 20 30 40 50} ; do\n-        if (( $npar <= $count )) ; then\n-          for rep in {1..3} ; do\n-            echo JAVAFLAGS=\"-Dmode=sub -Dsynchronous=$sync -Dcount=$count -Dnpar=$npar -Dstart=$start $JAVAFLAGS\" app \"$@\"\n-            JAVAFLAGS=\"-Dmode=sub -Dcount=$count -Dnpar=$npar -Dstart=$start $JAVAFLAGS\" app \"$@\" >& ${outfile:-sub/sync-$sync-count-$count-npar-$npar-rep-$rep.out}\n-            let start+=$count\n-          done\n-        fi\n-      done\n-    done\n-  done\n-}\n-\n-wait-sub() {\n-  local zk=\"$1\" topic=\"$2\" subid=\"$3\" region=\"$4\"\n-  while ! echo \"ls /hedwig/$region/topics/$topic/subscribers/$subid\" | \\\n-          ssh-zkc \"$zk\" $ZOOKEEPER_PORT 2>&1 | \\\n-          tee \"${dbgfile:-/dev/null}\" | \\\n-          grep '^\\[\\]$' > /dev/null\n-  do sleep 1\n-  done\n-}\n-\n-# Note: this code waits for subscribers to show up in ZK, so when running this\n-# multiple times on the same servers, adjust `start` to use a different topic\n-# each time; otherwise, you'll immediately see the subscribers from last time,\n-# thus causing the script to not wait for the current session's subscribers.\n-# Alternatively, adjust recvid.\n-#\n-# Params:\n-#\n-# recvs: the list of local receivers\n-# pubs: the list of publishers\n-# hw: the local hedwig node\n-# zk: the local zookeeper node (used to wait for receivers to join)\n-#\n-# Optional group of params:\n-#\n-# rrecv: the remote receiver\n-# rhw: the remote hedwig node\n-# rzk: the remote zookeeper node\n-pub-exp() {\n-  (( $# >= 4 ))\n-  local recvs=\"$1\" pubs=\"$2\" hw=\"$3\" zk=\"$4\"\n-  # Optional remote args.\n-  if (( $# > 4 ))\n-  then local remote=true rrecv=\"$5\" rhw=\"$6\" rzk=\"$7\"\n-  else local remote=false\n-  fi\n-  : ${start:=0} ${count:=100000} ${recvid:=0} ${dir=\"pub\"}\n-  hosts=\"$recvs $pubs $rrecv\" push\n-  # Convert to arrays.\n-  local arecvs=( $recvs ) apubs=( $pubs )\n-  mkdir -p \"$dir\"\n-\n-  #rregion=\"$(ssh $rhw cat /tmp/$USER/hw.conf)\"\n-  region=$hw rregion=$rhw\n-\n-  # Default to only using all recvs (rather than iterating over subsets).\n-  for nrecvs in ${nrecvss:-${#arecvs[*]}} ; do\n-    # Ditto for publishers.\n-    for npubs in ${npubss:-${#apubs[*]}} ; do\n-      # Default to only using a single value of npar.\n-      for npar in ${npars:-100} ; do\n-        # Default to repeating each trial thrice.\n-        for rep in $(seq ${nreps:-3}) ; do\n-\n-          echo -n \"nrecvs=$nrecvs npubs=$npubs npar=$npar rep=$rep\"\n-\n-          local outbase=\"$dir/nrecvs-$nrecvs-npubs-$npubs-npar-$npar-rep-$rep\"\n-\n-          # Skip if already done.\n-          if [[ -f \"$outbase\"* ]]\n-          then echo '...skipped' ; continue\n-          else echo\n-          fi\n-\n-          if $remote ; then\n-            # Start remote receiver.\n-            hosts=$rrecv JAVAFLAGS=\"-Dmode=recv -DsubId=recv-$recvid -Dstart=$start -Dcount=$((count/npubs*npubs)) $JAVAFLAGS\" app \"$rhw\" >& \"${outfile:-$outbase-rrecv.out}\" &\n-          fi\n-\n-          # Start all receivers.\n-          for ((irecv = 0; irecv < nrecvs; irecv++)) ; do\n-            hosts=\"${arecvs[$irecv]}\" JAVAFLAGS=\"-Dmode=recv -DsubId=recv-$((recvid+irecv)) -Dstart=$start -Dcount=$((count/npubs*npubs)) $JAVAFLAGS\" app \"$hw\" >& \"${outfile:-$outbase-recv-$irecv.out}\" &\n-          done\n-\n-          # Wait till subscribed.\n-          sleep 1\n-          for ((irecv = 0; irecv < nrecvs; irecv++))\n-          do wait-sub $zk topic-$start recv-$((recvid+irecv)) $region\n-          done\n-          if $remote ; then\n-            # Wait till remote subscribed.\n-            wait-sub $rzk topic-$start recv-$recvid $rregion\n-            # Wait till cross-region subscribed, since default is async subs.\n-            # This should only happen once.\n-            wait-sub $zk topic-$start hub-$rregion $region\n-          fi\n-\n-          # Launch all publishers.\n-          for ((ipub = 0; ipub < npubs; ipub++)) ; do\n-            hosts=\"${apubs[$ipub]}\" JAVAFLAGS=\"-Dmode=pub -Dnpar=$npar -Dstart=$start -Dcount=$((count/npubs)) $JAVAFLAGS\" app \"$hw\" >& \"${outfile:-$outbase-pub-$ipub.out}\" &\n-          done\n-\n-          # Wait for everyone to terminate.\n-          wait\n-\n-          # To avoid reusing the same subscriber ID.\n-          let recvid+=$nrecvs\n-\n-        done\n-      done\n-    done\n-  done\n-}\n-\n-pub-exps() {\n-  local pool=\"$1\" hw=\"$2\" zk=\"$3\" rrecv=\"$4\" rhw=\"$5\" rzk=\"$6\"\n-  local apool=( $pool ) npool=${#apool[*]}\n-  echo $apool $npool\n-  : ${start:=0}\n-  hosts=\"$pool $rrecv $rhw\" push\n-\n-  quote start=$start npars=\"${npars:-20 40 60 80 100}\" pub-exp ${apool[0]} ${apool[1]} \"$hw\" \"$zk\" $rrecv $rhw $rzk\n-  start=$start npars=\"${npars:-20 40 60 80 100}\" pub-exp ${apool[0]} ${apool[1]} \"$hw\" \"$zk\" $rrecv $rhw $rzk\n-\n-  pubs=${apool[0]}\n-  for ((i = 1; i < npool; i++))\n-  do recvs=\"${recvs:-} ${apool[$i]}\"\n-  done\n-  quote start=$((start+1)) nrecvss=\"$( seq -s' ' $(( npool - 1 )) )\" pub-exp \"$recvs\" \"$pubs\" \"$hw\" \"$zk\" $rrecv $rhw $rzk\n-  start=$((start+1)) nrecvss=\"$( seq -s' ' $(( npool - 1 )) )\" pub-exp \"$recvs\" \"$pubs\" \"$hw\" \"$zk\" $rrecv $rhw $rzk\n-\n-  recvs=${apool[0]}\n-  for ((i = 1; i < npool; i++))\n-  do pubs=\"${pubs:-} ${apool[$i]}\"\n-  done\n-  quote start=$((start+2)) npubss=\"$( seq -s' ' $(( npool - 1 )) )\" pub-exp \"$recvs\" \"$pubs\" \"$hw\" \"$zk\" $rrecv $rhw $rzk\n-  start=$((start+2)) npubss=\"$( seq -s' ' $(( npool - 1 )) )\" pub-exp \"$recvs\" \"$pubs\" \"$hw\" \"$zk\" $rrecv $rhw $rzk\n-}\n-\n-#\n-# Post-processing\n-#\n-\n-# Consolidate to a directory.\n-sub-agg() {\n-  local dst=\"$1\"\n-  mkdir -p \"$dst\"\n-  for s in 0 1 ; do\n-    for i in sync$s/*.out\n-    do cp \"$i\" \"$dst/sync-$s-$(basename \"$i\")\"\n-    done\n-  done\n-}\n-\n-if [[ \"$(type -t \"$cmd\")\" == function ]]\n-then \"$cmd\" \"$@\"\n-else \"$@\"\n-fi\n-\n-# vim: et sw=2 ts=2"},{"sha":"face753a907fdd4dc01d226ba60a588db99b4169","filename":"scripts/hwServer.sh","status":"removed","additions":0,"deletions":101,"changes":101,"blob_url":"https://github.com/apache/bookkeeper/blob/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/hwServer.sh","raw_url":"https://github.com/apache/bookkeeper/raw/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/hwServer.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/scripts/hwServer.sh?ref=da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","patch":"@@ -1,101 +0,0 @@\n-#!/bin/sh\n-\n-# Licensed to the Apache Software Foundation (ASF) under one or more\n-# contributor license agreements.  See the NOTICE file distributed with\n-# this work for additional information regarding copyright ownership.\n-# The ASF licenses this file to You under the Apache License, Version 2.0\n-# (the \"License\"); you may not use this file except in compliance with\n-# the License.  You may obtain a copy of the License at\n-#\n-#     http://www.apache.org/licenses/LICENSE-2.0\n-#\n-# Unless required by applicable law or agreed to in writing, software\n-# distributed under the License is distributed on an \"AS IS\" BASIS,\n-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-# See the License for the specific language governing permissions and\n-# limitations under the License.\n-\n-#\n-# If this scripted is run out of /usr/bin or some other system bin directory\n-# it should be linked to and not copied. Things like java jar files are found\n-# relative to the canonical path of this script.\n-#\n-\n-# Only follow symlinks if readlink supports it. Find the directory path\n-# for where this script is being executed from.\n-if readlink -f \"$0\" > /dev/null 2>&1\n-then\n-  HWBIN=`readlink -f \"$0\"`\n-else\n-  HWBIN=\"$0\"\n-fi\n-HWBINDIR=`dirname \"$HWBIN\"`\n-\n-# We use HWCFGDIR if defined, otherwise we use /etc/hedwig\n-# or the conf directory that is a sibling of this script's directory.\n-# This is to find out where the Hedwig server config file resides.\n-if [ \"x$HWCFGDIR\" = \"x\" ]\n-then\n-    if [ -d \"/etc/hedwig\" ]\n-    then\n-        HWCFGDIR=\"/etc/hedwig\"\n-    else\n-        HWCFGDIR=\"$HWBINDIR/../conf\"\n-    fi\n-fi\n-\n-# We use HWCFG as the name of the Hedwig server config file if defined,\n-# otherwise use the default file name \"hw_server.conf\".\n-if [ \"x$HWCFG\" = \"x\" ]\n-then\n-    HWCFG=\"hw_server.conf\"\n-fi\n-HWCFG=\"$HWCFGDIR/$HWCFG\"\n-\n-# If a config file is passed in directly when invoking the script,\n-# use that instead.\n-if [ \"x$2\" != \"x\" ]\n-then\n-    HWCFG=\"$HWCFGDIR/$2\"\n-fi\n-\n-# Find the Hedwig server jar and setup the CLASSPATH. We assume it to be\n-# located in a standard place relative to the location of where this script\n-# is executed from.\n-HWJAR=\"$HWBINDIR/../server/target/server-1.0-SNAPSHOT-jar-with-dependencies.jar\"\n-CLASSPATH=\"$HWJAR:$CLASSPATH\"\n-\n-# Store the Hedwig server's PID (java process) in the same $HWBINDIR. \n-# This is used for us to stop the server later on via this same script.\n-if [ -z $HWPIDFILE ]\n-    then HWPIDFILE=$HWBINDIR/hedwig_server.pid\n-fi\n-\n-case $1 in\n-start)\n-    echo  \"Starting Hedwig server ... \"\n-    java  -cp \"$CLASSPATH\" org.apache.hedwig.server.netty.PubSubServer \"$HWCFG\" &\n-    /bin/echo -n $! > \"$HWPIDFILE\"\n-    echo STARTED\n-    ;;\n-stop)\n-    echo \"Stopping Hedwig server ... \"\n-    if [ ! -f \"$HWPIDFILE\" ]\n-    then\n-    echo \"error: could not find file $HWPIDFILE\"\n-    exit 1\n-    else\n-    kill -9 $(cat \"$HWPIDFILE\")\n-    rm \"$HWPIDFILE\"\n-    echo STOPPED\n-    fi\n-    ;;\n-restart)\n-    shift\n-    \"$0\" stop ${@}\n-    sleep 3\n-    \"$0\" start ${@}\n-    ;;\n-*)\n-    echo \"Usage: $0 {start|stop|restart}\" >&2\n-esac"},{"sha":"6fe3e1765523f55a1e0e9304ba5492743a192388","filename":"scripts/quote","status":"removed","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/quote","raw_url":"https://github.com/apache/bookkeeper/raw/da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8/scripts/quote","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/scripts/quote?ref=da1df6bcf4f3a1cc2ed4d3798764e855555ab8f8","patch":"@@ -1,23 +0,0 @@\n-#!/usr/bin/env python\n-# vim:et:sw=2:ts=2\n-#  Licensed to the Apache Software Foundation (ASF) under one or more\n-#  contributor license agreements.  See the NOTICE file distributed with\n-#  this work for additional information regarding copyright ownership.\n-#  The ASF licenses this file to You under the Apache License, Version 2.0\n-#  (the \"License\"); you may not use this file except in compliance with\n-#  the License.  You may obtain a copy of the License at\n-#\n-#      http://www.apache.org/licenses/LICENSE-2.0\n-#\n-#  Unless required by applicable law or agreed to in writing, software\n-#  distributed under the License is distributed on an \"AS IS\" BASIS,\n-#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-#  See the License for the specific language governing permissions and\n-#  limitations under the License.\n-\n-import sys\n-\n-def quote(s):\n-  return r'\"%s\"' % s.replace('\\\\', r'\\\\').replace('\"', r'\\\"').replace('$', r'\\$')\n-\n-print ' '.join( map( quote, sys.argv[1:] ) )"}]}

