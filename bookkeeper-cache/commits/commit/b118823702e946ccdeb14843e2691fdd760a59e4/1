{"sha":"b118823702e946ccdeb14843e2691fdd760a59e4","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiMTE4ODIzNzAyZTk0NmNjZGViMTQ4NDNlMjY5MWZkZDc2MGE1OWU0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-04T09:21:26Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-04-04T09:21:26Z"},"message":"BOOKKEEPER-596: Ledgers are gc'ed by mistake in MSLedgerManagerFactory. (sijie & ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1464385 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"268f594f124ad00f1f62fb3162cfa8d5b40ff1ed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/268f594f124ad00f1f62fb3162cfa8d5b40ff1ed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b118823702e946ccdeb14843e2691fdd760a59e4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b118823702e946ccdeb14843e2691fdd760a59e4","html_url":"https://github.com/apache/bookkeeper/commit/b118823702e946ccdeb14843e2691fdd760a59e4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b118823702e946ccdeb14843e2691fdd760a59e4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c8f9135e7d3147a2a474df31b430b8c403e2792a","url":"https://api.github.com/repos/apache/bookkeeper/commits/c8f9135e7d3147a2a474df31b430b8c403e2792a","html_url":"https://github.com/apache/bookkeeper/commit/c8f9135e7d3147a2a474df31b430b8c403e2792a"}],"stats":{"total":239,"additions":163,"deletions":76},"files":[{"sha":"c6fae1fea2e9f446637a9d2e6cc671022a06a743","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -10,6 +10,8 @@ Trunk (unreleased changes)\n \n     BUGFIXES:\n \n+      BOOKKEEPER-596: Ledgers are gc'ed by mistake in MSLedgerManagerFactory. (sijie & ivank)\n+\n       BOOKKEEPER-595: Crash of inprocess autorecovery daemon should not take down the bookie (ivank)\n \n       BOOKKEEPER-597: Add flag to output test logs to stdout (ivank)"},{"sha":"d8a87e4b31ac44676599d9227f0e096ec3bdac51","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -72,31 +72,31 @@ public void gc(GarbageCleaner garbageCleaner) {\n                     garbageCleaner.clean(bkLid);\n                 }\n             }\n+            long lastEnd = -1;\n+\n             while(ledgerRangeIterator.hasNext()) {\n                 LedgerRange lRange = ledgerRangeIterator.next();\n                 Map<Long, Boolean> subBkActiveLedgers = null;\n-                Long start = lRange.start();\n+\n+                Long start = lastEnd + 1;\n                 Long end = lRange.end();\n-                if (end != LedgerRange.NOLIMIT) {\n-                    subBkActiveLedgers = bkActiveLedgersSnapshot.subMap(start,\n-                            true, end, true);\n-                } else {\n-                    if (start != LedgerRange.NOLIMIT) {\n-                        subBkActiveLedgers = bkActiveLedgersSnapshot.tailMap(start);\n-                    } else {\n-                        subBkActiveLedgers = bkActiveLedgersSnapshot;\n-                    }\n+                if (!ledgerRangeIterator.hasNext()) {\n+                    end = Long.MAX_VALUE;\n                 }\n-                Set<Long> globalActiveLedgers = lRange.getLedgers();\n-                LOG.debug(\"All active ledgers for hash node {}, Current active ledgers from Bookie for hash node {}\",\n-                        globalActiveLedgers, subBkActiveLedgers.keySet());\n+                subBkActiveLedgers = bkActiveLedgersSnapshot.subMap(\n+                        start, true, end, true);\n+\n+                Set<Long> ledgersInMetadata = lRange.getLedgers();\n+                LOG.debug(\"Active in metadata {}, Active in bookie {}\",\n+                          ledgersInMetadata, subBkActiveLedgers.keySet());\n                 for (Long bkLid : subBkActiveLedgers.keySet()) {\n-                    if (!globalActiveLedgers.contains(bkLid)) {\n+                    if (!ledgersInMetadata.contains(bkLid)) {\n                         // remove it from current active ledger\n                         subBkActiveLedgers.remove(bkLid);\n                         garbageCleaner.clean(bkLid);\n                     }\n                 }\n+                lastEnd = end;\n             }\n         } catch (Exception e) {\n             // ignore exception, collecting garbage next time"},{"sha":"3fc322539ad7038d42e7c484a3f0c4a589753159","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -18,7 +18,8 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n-import java.util.HashSet;\n+import java.util.TreeSet;\n+import java.util.SortedSet;\n import java.util.List;\n import java.util.Set;\n \n@@ -275,8 +276,8 @@ protected boolean isSpecialZnode(String znode) {\n      *          the prefix path of the ledger nodes\n      * @return ledger id hash set\n      */\n-    protected Set<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n-        Set<Long> zkActiveLedgers = new HashSet<Long>(ledgerNodes.size(), 1.0f);\n+    protected SortedSet<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n+        SortedSet<Long> zkActiveLedgers = new TreeSet<Long>();\n         for (String ledgerNode : ledgerNodes) {\n             if (isSpecialZnode(ledgerNode)) {\n                 continue;"},{"sha":"d87383c236db0e6919f9997ca583c527820ab462","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":27,"deletions":14,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -128,25 +128,38 @@ public void asyncProcessLedgers(final Processor<Long> processor,\n     public LedgerRangeIterator getLedgerRanges() {\n         return new LedgerRangeIterator() {\n             // single iterator, can visit only one time\n-            boolean hasMoreElement = true;\n-            @Override\n-            public boolean hasNext() {\n-                return hasMoreElement;\n-            }\n-            @Override\n-            public LedgerRange next() throws IOException {\n-                if (!hasMoreElement) {\n-                    throw new NoSuchElementException();\n+            boolean nextCalled = false;\n+            LedgerRange nextRange = null;\n+\n+            synchronized private void preload() throws IOException {\n+                if (nextRange != null) {\n+                    return;\n                 }\n-                hasMoreElement = false;\n-                Set<Long> zkActiveLedgers;\n+                Set<Long> zkActiveLedgers = null;\n+\n                 try {\n                     zkActiveLedgers = ledgerListToSet(\n                             ZkUtils.getChildrenInSingleNode(zk, ledgerRootPath), ledgerRootPath);\n-                } catch (InterruptedException e) {\n-                    throw new IOException(\"Error when get child nodes from zk\", e);\n+                    nextRange = new LedgerRange(zkActiveLedgers);\n+                } catch (InterruptedException ie) {\n+                    Thread.currentThread().interrupt();\n+                    throw new IOException(\"Error when get child nodes from zk\", ie);\n+                }\n+            }\n+\n+            @Override\n+            synchronized public boolean hasNext() throws IOException {\n+                preload();\n+                return nextRange != null && nextRange.size() > 0 && !nextCalled;\n+            }\n+\n+            @Override\n+            synchronized public LedgerRange next() throws IOException {\n+                if (!hasNext()) {\n+                    throw new NoSuchElementException();\n                 }\n-                return new LedgerRange(zkActiveLedgers);\n+                nextCalled = true;\n+                return nextRange;\n             }\n         };\n     }"},{"sha":"aa52710ea269739eeeba623a592dc0c48e732c21","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":40,"deletions":19,"changes":59,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -25,7 +25,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.NoSuchElementException;\n-import java.util.Set;\n+import java.util.SortedSet;\n \n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n@@ -381,7 +381,8 @@ public LedgerRangeIterator getLedgerRanges() {\n         private Iterator<String> l1NodesIter = null;\n         private Iterator<String> l2NodesIter = null;\n         private String curL1Nodes = \"\";\n-        private boolean hasMoreElement = true;\n+        private boolean iteratorDone = false;\n+        private LedgerRange nextRange = null;\n \n         /**\n          * iterate next level1 znode\n@@ -410,27 +411,47 @@ private boolean nextL1Node() throws KeeperException, InterruptedException {\n             return true;\n         }\n \n-        @Override\n-        public boolean hasNext() throws IOException {\n-            try {\n-                if (l1NodesIter == null) {\n-                    l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();\n-                    hasMoreElement = nextL1Node();\n-                } else if (l2NodesIter == null || !l2NodesIter.hasNext()) {\n-                    hasMoreElement = nextL1Node();\n+        synchronized private void preload() throws IOException {\n+            while (nextRange == null && !iteratorDone) {\n+                boolean hasMoreElements = false;\n+                try {\n+                    if (l1NodesIter == null) {\n+                        l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();\n+                        hasMoreElements = nextL1Node();\n+                    } else if (l2NodesIter == null || !l2NodesIter.hasNext()) {\n+                        hasMoreElements = nextL1Node();\n+                    }\n+                } catch (KeeperException ke) {\n+                    throw new IOException(\"Error preloading next range\", ke);\n+                } catch (InterruptedException ie) {\n+                    Thread.currentThread().interrupt();\n+                    throw new IOException(\"Interrupted while preloading\", ie);\n+                }\n+                if (hasMoreElements) {\n+                    nextRange = getLedgerRangeByLevel(curL1Nodes, l2NodesIter.next());\n+                    if (nextRange.size() == 0) {\n+                        nextRange = null;\n+                    }\n+                } else {\n+                    iteratorDone = true;\n                 }\n-            } catch (Exception e) {\n-                throw new IOException(\"Error when check more elements\", e);\n             }\n-            return hasMoreElement;\n         }\n \n         @Override\n-        public LedgerRange next() throws IOException {\n-            if (!hasMoreElement) {\n+        synchronized public boolean hasNext() throws IOException {\n+            preload();\n+            return nextRange != null && !iteratorDone;\n+        }\n+\n+        @Override\n+        synchronized public LedgerRange next() throws IOException {\n+            if (!hasNext()) {\n                 throw new NoSuchElementException();\n             }\n-            return getLedgerRangeByLevel(curL1Nodes, l2NodesIter.next());\n+            LedgerRange r = nextRange;\n+            nextRange = null;\n+            return r;\n         }\n \n         /**\n@@ -454,13 +475,13 @@ LedgerRange getLedgerRangeByLevel(final String level1, final String level2)\n             } catch (InterruptedException e) {\n                 throw new IOException(\"Error when get child nodes from zk\", e);\n             }\n-            Set<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n+            SortedSet<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"All active ledgers from ZK for hash node \"\n                           + level1 + \"/\" + level2 + \" : \" + zkActiveLedgers);\n             }\n-            return new LedgerRange(zkActiveLedgers,\n-                    getStartLedgerIdByLevel(level1, level2), getEndLedgerIdByLevel(level1, level2));\n+            return new LedgerRange(zkActiveLedgers.subSet(getStartLedgerIdByLevel(level1, level2),\n+                                                          getEndLedgerIdByLevel(level1, level2)));\n         }\n     }\n }"},{"sha":"4e552a519b73f6d7c7f37583082d9e264e112458","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","status":"modified","additions":8,"deletions":17,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -21,6 +21,8 @@\n import java.io.Closeable;\n import java.io.IOException;\n import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n \n import org.apache.zookeeper.AsyncCallback;\n import org.apache.bookkeeper.client.BKException;\n@@ -127,34 +129,23 @@ public void asyncProcessLedgers(Processor<Long> processor, AsyncCallback.VoidCal\n      * current scan.\n      */\n     public static class LedgerRange {\n-        // ledger start and end ranges\n-        private final long start;\n-        private final long end;\n-        public final static long NOLIMIT = -1;\n-\n         // returned ledgers\n-        private Set<Long> ledgers;\n+        private final SortedSet<Long> ledgers;\n \n         public LedgerRange(Set<Long> ledgers) {\n-            this(ledgers, NOLIMIT, NOLIMIT);\n-        }\n-\n-        public LedgerRange(Set<Long> ledgers, long start) {\n-            this(ledgers, start, NOLIMIT);\n+            this.ledgers = new TreeSet<Long>(ledgers);\n         }\n \n-        public LedgerRange(Set<Long> ledgers, long start, long end) {\n-            this.ledgers = ledgers;\n-            this.start = start;\n-            this.end = end;\n+        public int size() {\n+            return this.ledgers.size();\n         }\n \n         public Long start() {\n-            return this.start;\n+            return ledgers.first();\n         }\n \n         public Long end() {\n-            return this.end;\n+            return ledgers.last();\n         }\n \n         public Set<Long> getLedgers() {"},{"sha":"dfc13754550f511b8e795e5e233e4360d0b59fa2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -463,6 +463,7 @@ public void processResult(int rc, String path, Object ctx) {\n         class MSLedgerRangeIterator implements LedgerRangeIterator {\n             final CountDownLatch openCursorLatch = new CountDownLatch(1);\n             MetastoreCursor cursor = null;\n+            // last ledger id in previous range\n \n             MSLedgerRangeIterator() {\n                 MetastoreCallback<MetastoreCursor> openCursorCb = new MetastoreCallback<MetastoreCursor>() {\n@@ -480,24 +481,24 @@ public void complete(int rc, MetastoreCursor newCursor, Object ctx) {\n             }\n \n             @Override\n-            public boolean hasNext() {\n+            public boolean hasNext() throws IOException {\n                 try {\n                     openCursorLatch.await();\n                 } catch (InterruptedException ie) {\n                     LOG.error(\"Interrupted waiting for cursor to open\", ie);\n                     Thread.currentThread().interrupt();\n-                    return false;\n+                    throw new IOException(\"Interrupted waiting to read range\", ie);\n                 }\n                 if (cursor == null) {\n-                    return false;\n+                    throw new IOException(\"Failed to open ledger range cursor, check logs\");\n                 }\n                 return cursor.hasMoreEntries();\n             }\n \n             @Override\n             public LedgerRange next() throws IOException {\n                 try {\n-                    Set<Long> ledgerIds = new TreeSet<Long>();\n+                    SortedSet<Long> ledgerIds = new TreeSet<Long>();\n                     Iterator<MetastoreTableItem> iter = cursor.readEntries(maxEntriesPerScan);\n                     while (iter.hasNext()) {\n                         ledgerIds.add(key2LedgerId(iter.next().getKey()));"},{"sha":"a7cc953a33c59dc946af2786c1399d9787463103","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -24,22 +24,25 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.NavigableMap;\n import java.util.Set;\n+import java.util.SortedMap;\n import java.util.concurrent.ScheduledExecutorService;\n \n import org.apache.bookkeeper.metastore.MSException.Code;\n import org.apache.bookkeeper.versioning.Versioned;\n \n+import com.google.common.collect.ImmutableSortedMap;\n+\n class InMemoryMetastoreCursor implements MetastoreCursor {\n \n     private final ScheduledExecutorService scheduler;\n     private final Iterator<Map.Entry<String, Versioned<Value>>> iter;\n     private final Set<String> fields;\n \n-    public InMemoryMetastoreCursor(NavigableMap<String, Versioned<Value>> map, Set<String> fields,\n+    public InMemoryMetastoreCursor(SortedMap<String, Versioned<Value>> map, Set<String> fields,\n             ScheduledExecutorService scheduler) {\n-        this.iter = map.entrySet().iterator();\n+        // copy an map for iterator to avoid concurrent modification problem.\n+        this.iter = ImmutableSortedMap.copyOfSorted(map).entrySet().iterator();\n         this.fields = fields;\n         this.scheduler = scheduler;\n     }"},{"sha":"de85b58addb337751011be522cc3dbc67807220a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":55,"deletions":1,"changes":56,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -27,7 +27,12 @@\n import java.util.HashSet;\n import java.util.Random;\n import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.Queue;\n+import java.util.LinkedList;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.bookie.GarbageCollector;\n@@ -85,6 +90,21 @@ public void operationComplete(int rc, Long ledgerId) {\n         }\n     }\n \n+    private void removeLedger(long ledgerId) throws Exception {\n+        final AtomicInteger rc = new AtomicInteger(0);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        getLedgerManager().removeLedgerMetadata(ledgerId, Version.ANY,\n+                new GenericCallback<Void>() {\n+                    @Override\n+                    public void operationComplete(int rc2, Void result) {\n+                        rc.set(rc2);\n+                        latch.countDown();\n+                    }\n+                   });\n+        assertTrue(latch.await(10, TimeUnit.SECONDS));\n+        assertEquals(\"Remove should have succeeded\", 0, rc.get());\n+    }\n+\n     @Test(timeout=60000)\n     public void testGarbageCollectLedgers() throws Exception {\n         int numLedgers = 100;\n@@ -112,7 +132,7 @@ public void operationComplete(int rc, Void result) {\n                                 removedLedgers.notify();\n                             }\n                         }\n-                    });\n+                   });\n                 removedLedgers.wait();\n             }\n             removedLedgers.add(ledgerId);\n@@ -175,4 +195,38 @@ public void run() {\n             assertTrue(activeLedgers.containsKey(ledger));\n         }\n     }\n+\n+    @Test(timeout=60000)\n+    public void testGcLedgersOutsideRange() throws Exception {\n+        final SortedSet<Long> createdLedgers = Collections.synchronizedSortedSet(new TreeSet<Long>());\n+        final Queue<Long> cleaned = new LinkedList<Long>();\n+        int numLedgers = 100;\n+\n+        createLedgers(numLedgers, createdLedgers);\n+\n+        final GarbageCollector garbageCollector =\n+                new ScanAndCompareGarbageCollector(getLedgerManager(), activeLedgers);\n+        GarbageCollector.GarbageCleaner cleaner = new GarbageCollector.GarbageCleaner() {\n+                @Override\n+                public void clean(long ledgerId) {\n+                    LOG.info(\"Cleaned {}\", ledgerId);\n+                    cleaned.add(ledgerId);\n+                }\n+            };\n+\n+        garbageCollector.gc(cleaner);\n+        assertNull(\"Should have cleaned nothing\", cleaned.poll());\n+\n+        long last = createdLedgers.last();\n+        removeLedger(last);\n+        garbageCollector.gc(cleaner);\n+        assertNotNull(\"Should have cleaned something\", cleaned.peek());\n+        assertEquals(\"Should have cleaned last ledger\" + last, (long)last, (long)cleaned.poll());\n+\n+        long first = createdLedgers.first();\n+        removeLedger(first);\n+        garbageCollector.gc(cleaner);\n+        assertNotNull(\"Should have cleaned something\", cleaned.peek());\n+        assertEquals(\"Should have cleaned first ledger\" + first, (long)first, (long)cleaned.poll());\n+    }\n }"},{"sha":"b95d2db4574c5c1a7f6c60907b7e6f12c511e84f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/b118823702e946ccdeb14843e2691fdd760a59e4/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java?ref=b118823702e946ccdeb14843e2691fdd760a59e4","patch":"@@ -64,7 +64,8 @@ public LedgerManager getLedgerManager() {\n     public static Collection<Object[]> configs() {\n         return Arrays.asList(new Object[][] {\n             { FlatLedgerManagerFactory.class },\n-            { HierarchicalLedgerManagerFactory.class }\n+            { HierarchicalLedgerManagerFactory.class },\n+            { MSLedgerManagerFactory.class }\n         });\n     }\n "}]}

