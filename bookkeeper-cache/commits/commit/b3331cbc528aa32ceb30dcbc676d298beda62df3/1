{"sha":"b3331cbc528aa32ceb30dcbc676d298beda62df3","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiMzMzMWNiYzUyOGFhMzJjZWIzMGRjYmM2NzZkMjk4YmVkYTYyZGYz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-24T19:51:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-24T19:51:17Z"},"message":"BOOKKEEPER-378: ReplicationWorker may not get ZK watcher notification on UnderReplication ledger lock deletion. (umamaheswararao & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377075 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e4b34dab2dbfa3cfb5631c2c02be2016cbaee453","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e4b34dab2dbfa3cfb5631c2c02be2016cbaee453"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b3331cbc528aa32ceb30dcbc676d298beda62df3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b3331cbc528aa32ceb30dcbc676d298beda62df3","html_url":"https://github.com/apache/bookkeeper/commit/b3331cbc528aa32ceb30dcbc676d298beda62df3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b3331cbc528aa32ceb30dcbc676d298beda62df3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c0746ba1c9569427d5839e3f350f4d8394f01320","url":"https://api.github.com/repos/apache/bookkeeper/commits/c0746ba1c9569427d5839e3f350f4d8394f01320","html_url":"https://github.com/apache/bookkeeper/commit/c0746ba1c9569427d5839e3f350f4d8394f01320"}],"stats":{"total":115,"additions":88,"deletions":27},"files":[{"sha":"41bdf9208e264d8b18587565dc831727958381a2","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/b3331cbc528aa32ceb30dcbc676d298beda62df3/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/b3331cbc528aa32ceb30dcbc676d298beda62df3/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=b3331cbc528aa32ceb30dcbc676d298beda62df3","patch":"@@ -58,6 +58,8 @@ Trunk (unreleased changes)\n \n  \tBOOKKEEPER-354: [BOOKKEEPER-296] [Documentation] Modify the bookkeeper start script and document the bookkeeper stop command in bookkeeperConfig.xml (Kiran BC via ivank)\n  \n+        BOOKKEEPER-378: ReplicationWorker may not get ZK watcher notification on UnderReplication ledger lock deletion. (umamaheswararao & ivank via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"8b4796f84ae1a78697ae8dcfc9a71f9bb7560fe1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/b3331cbc528aa32ceb30dcbc676d298beda62df3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3331cbc528aa32ceb30dcbc676d298beda62df3/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=b3331cbc528aa32ceb30dcbc676d298beda62df3","patch":"@@ -335,7 +335,8 @@ public long getLedgerToRereplicate() throws ReplicationException.UnavailableExce\n                 Watcher w = new Watcher() {\n                         public void process(WatchedEvent e) {\n                             if (e.getType() == Watcher.Event.EventType.NodeChildrenChanged\n-                                || e.getType() == Watcher.Event.EventType.NodeDeleted) {\n+                                || e.getType() == Watcher.Event.EventType.NodeDeleted\n+                                || e.getType() == Watcher.Event.EventType.NodeCreated) {\n                                 changedLatch.countDown();\n                             }\n                         }"},{"sha":"4036a7076673bc567ead92aae6787744c71e9720","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":84,"deletions":26,"changes":110,"blob_url":"https://github.com/apache/bookkeeper/blob/b3331cbc528aa32ceb30dcbc676d298beda62df3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3331cbc528aa32ceb30dcbc676d298beda62df3/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=b3331cbc528aa32ceb30dcbc676d298beda62df3","patch":"@@ -21,37 +21,34 @@\n \n package org.apache.bookkeeper.replication;\n \n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.ZooDefs.Ids;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n-\n-import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n-import org.apache.bookkeeper.meta.LedgerManagerFactory;\n-import org.apache.bookkeeper.test.ZooKeeperUtil;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.junit.Test;\n-import org.junit.Before;\n-import org.junit.After;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n+import java.util.ArrayList;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.ArrayList;\n import java.util.Set;\n-import java.util.HashSet;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Test the zookeeper implementation of the ledger replication manager\n@@ -157,7 +154,7 @@ public void testBasicInteraction() throws Exception {\n             assertTrue(ledgers.remove(l));\n         }\n \n-        Future f = getLedgerToReplicate(m);\n+        Future<Long> f = getLedgerToReplicate(m);\n         try {\n             f.get(5, TimeUnit.SECONDS);\n             fail(\"Shouldn't be able to find a ledger to replicate\");\n@@ -305,7 +302,6 @@ public void testManyFailures() throws Exception {\n         String missingReplica2 = \"localhost:3182\";\n \n         LedgerUnderreplicationManager m1 = lmf1.newLedgerUnderreplicationManager();\n-        LedgerUnderreplicationManager m2 = lmf2.newLedgerUnderreplicationManager();\n \n         Long ledgerA = 0xfeadeefdacL;\n         m1.markLedgerUnderreplicated(ledgerA, missingReplica1);\n@@ -356,4 +352,66 @@ public void test2reportSame() throws Exception {\n             // correct behaviour\n         }\n     }\n+\n+    /**\n+     * Test that multiple LedgerUnderreplicationManagers should be able to take\n+     * lock and release for same ledger\n+     */\n+    @Test(timeout = 30000)\n+    public void testMultipleManagersShouldBeAbleToTakeAndReleaseLock()\n+            throws Exception {\n+        String missingReplica1 = \"localhost:3181\";\n+        final LedgerUnderreplicationManager m1 = lmf1\n+                .newLedgerUnderreplicationManager();\n+        final LedgerUnderreplicationManager m2 = lmf2\n+                .newLedgerUnderreplicationManager();\n+        Long ledgerA = 0xfeadeefdacL;\n+        m1.markLedgerUnderreplicated(ledgerA, missingReplica1);\n+        final int iterationCount = 100;\n+        final CountDownLatch latch1 = new CountDownLatch(iterationCount);\n+        final CountDownLatch latch2 = new CountDownLatch(iterationCount);\n+        Thread thread1 = new Thread() {\n+            @Override\n+            public void run() {\n+                takeLedgerAndRelease(m1, latch1, iterationCount);\n+            }\n+        };\n+\n+        Thread thread2 = new Thread() {\n+            @Override\n+            public void run() {\n+                takeLedgerAndRelease(m2, latch2, iterationCount);\n+            }\n+        };\n+        thread1.start();\n+        thread2.start();\n+\n+        // wait until at least one thread completed\n+        while (!latch1.await(50, TimeUnit.MILLISECONDS)\n+                && !latch2.await(50, TimeUnit.MILLISECONDS)) {\n+            Thread.sleep(50);\n+        }\n+\n+        m1.close();\n+        m2.close();\n+\n+        // After completing 'lock acquire,release' job, it should notify below\n+        // wait\n+        latch1.await();\n+        latch2.await();\n+    }\n+\n+    private void takeLedgerAndRelease(final LedgerUnderreplicationManager m,\n+            final CountDownLatch latch, int numberOfIterations) {\n+        for (int i = 0; i < numberOfIterations; i++) {\n+            try {\n+                long ledgerToRereplicate = m.getLedgerToRereplicate();\n+                m.releaseUnderreplicatedLedger(ledgerToRereplicate);\n+            } catch (UnavailableException e) {\n+                LOG.error(\"UnavailableException when \"\n+                        + \"taking or releasing lock\", e);\n+            }\n+            latch.countDown();\n+        }\n+    }\n }"}]}

