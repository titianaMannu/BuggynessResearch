{"sha":"b3a05cd74652affe4a69f40609de0b92769e05a4","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiM2EwNWNkNzQ2NTJhZmZlNGE2OWY0MDYwOWRlMGI5Mjc2OWUwNWE0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-23T10:49:51Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-23T10:49:51Z"},"message":"BOOKKEEPER-467: Allocate ports for testing dynamically (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1412818 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f1b349ba934f9efa75c9e5f91f631af57f220cd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1f1b349ba934f9efa75c9e5f91f631af57f220cd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b3a05cd74652affe4a69f40609de0b92769e05a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b3a05cd74652affe4a69f40609de0b92769e05a4","html_url":"https://github.com/apache/bookkeeper/commit/b3a05cd74652affe4a69f40609de0b92769e05a4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b3a05cd74652affe4a69f40609de0b92769e05a4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"afa7a082a6f8ab6936729fb68d84bcebf09e1f19","url":"https://api.github.com/repos/apache/bookkeeper/commits/afa7a082a6f8ab6936729fb68d84bcebf09e1f19","html_url":"https://github.com/apache/bookkeeper/commit/afa7a082a6f8ab6936729fb68d84bcebf09e1f19"}],"stats":{"total":623,"additions":422,"deletions":201},"files":[{"sha":"57a879ce6c794fa79509726bb0851f8cfce0c03e","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -146,6 +146,8 @@ Trunk (unreleased changes)\n \n     IMPROVEMENTS:\n \n+      BOOKKEEPER-467: Allocate ports for testing dynamically (ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-328: Bookie DeathWatcher is missing thread name (Rakesh via sijie)"},{"sha":"e51d2cc3e34778b85968d69088858d8a55d1abb5","filename":"bookkeeper-benchmark/pom.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-benchmark/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-benchmark/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/pom.xml?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -118,6 +118,13 @@\n       <type>jar</type>\n       <scope>compile</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server</artifactId>\n+      <version>${project.parent.version}</version>\n+      <scope>test</scope>\n+      <type>test-jar</type>\n+    </dependency>\n     <!--\n \tAnnoying dependency we need to include because\n \tzookeeper uses log4j and so we transatively do, but"},{"sha":"a944aa30be42db9f4ffb87ddb135e23cc3c40d68","filename":"bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","status":"modified","additions":19,"deletions":72,"changes":91,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -24,9 +24,11 @@\n import org.junit.Test;\n import org.junit.Assert;\n \n+import java.net.InetSocketAddress;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.util.LocalBookKeeper;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -44,78 +46,18 @@\n import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n \n-public class TestBenchmark {\n+public class TestBenchmark extends BookKeeperClusterTestCase {\n     protected static final Logger LOG = LoggerFactory.getLogger(TestBenchmark.class);\n \n-    private static Thread ensembleThread = null;\n-    private final static String zkString = \"localhost:2181\";\n-    private static List<String> bookies = null;\n-\n-    @BeforeClass\n-    public static void startEnsemble() throws Exception {\n-        final int numBookies = 5;\n-\n-        ensembleThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        LocalBookKeeper.main(new String[]{String.valueOf(numBookies)});\n-                    } catch (InterruptedException ie) {\n-                        LOG.info(\"Shutting down ensemble thread\");\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error running bookkeeper ensemble\", e);\n-                    }\n-                }\n-            };\n-        ensembleThread.start();\n-\n-        if (!LocalBookKeeper.waitForServerUp(zkString, 5000)) {\n-            throw new Exception(\"Failed to start zookeeper\");\n-        }\n-        ZooKeeper zk = null;\n-        try {\n-            final CountDownLatch connectLatch = new CountDownLatch(1);\n-\n-            zk = new ZooKeeper(zkString, 15000, new Watcher() {\n-                    @Override\n-                    public void process(WatchedEvent event) {\n-                        if (event.getState() == KeeperState.SyncConnected) {\n-                            connectLatch.countDown();\n-                        }\n-                    }});\n-            if (!connectLatch.await(10, TimeUnit.SECONDS)) {\n-                LOG.error(\"Couldn't connect to zookeeper at \" + zkString);\n-            } else {\n-                for (int i = 0; i < 10; i++) {\n-                    try {\n-                        bookies = zk.getChildren(\"/ledgers/available\", false);\n-                        if (zk.getChildren(\"/ledgers/available\", false).size()\n-                            == numBookies) {\n-                            return;\n-                        }\n-                    } catch (Exception e) {\n-                        // do nothing\n-                    }\n-                    Thread.sleep(1000);\n-                }\n-                throw new Exception(\"Not enough bookies started\");\n-            }\n-        } finally {\n-            zk.close();\n-        }\n-    }\n-\n-    @AfterClass\n-    public static void stopEnsemble() throws Exception {\n-        if (ensembleThread != null) {\n-            ensembleThread.interrupt();\n-            ensembleThread.join();\n-        }\n+    public TestBenchmark() {\n+        super(5);\n     }\n \n     @Test\n     public void testThroughputLatency() throws Exception {\n         String latencyFile = System.getProperty(\"test.latency.file\", \"latencyDump.dat\");\n         BenchThroughputLatency.main(new String[] {\n+                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                 \"--time\", \"10\",\n                 \"--skipwarmup\",\n                 \"--throttle\", \"1\",\n@@ -126,25 +68,26 @@ public void testThroughputLatency() throws Exception {\n \n     @Test\n     public void testBookie() throws Exception {\n-        String bookie = bookies.get(0);\n-        String[] parts = bookie.split(\":\");\n+        InetSocketAddress bookie = getBookie(0);\n         BenchBookie.main(new String[] {\n-                \"--host\", parts[0],\n-                \"--port\", parts[1],\n-                \"--zookeeper\", zkString\n+                \"--host\", bookie.getHostName(),\n+                \"--port\", String.valueOf(bookie.getPort()),\n+                \"--zookeeper\", zkUtil.getZooKeeperConnectString()\n                 });\n     }\n \n     @Test\n     public void testReadThroughputLatency() throws Exception {\n-        AtomicBoolean threwException = new AtomicBoolean(false);\n+        final AtomicBoolean threwException = new AtomicBoolean(false);\n         Thread t = new Thread() {\n                 public void run() {\n                     try {\n                         BenchReadThroughputLatency.main(new String[] {\n+                                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                                 \"--listen\", \"10\"});\n                     } catch (Throwable t) {\n                         LOG.error(\"Error reading\", t);\n+                        threwException.set(true);\n                     }\n                 }\n             };\n@@ -157,7 +100,7 @@ public void run() {\n         long lastLedgerId = 0;\n         Assert.assertTrue(\"Thread should be running\", t.isAlive());\n         for (int i = 0; i < 10; i++) {\n-            BookKeeper bk = new BookKeeper(zkString);\n+            BookKeeper bk = new BookKeeper(zkUtil.getZooKeeperConnectString());\n             LedgerHandle lh = bk.createLedger(BookKeeper.DigestType.CRC32, \"benchPasswd\".getBytes());\n             lastLedgerId = lh.getId();\n             try {\n@@ -179,23 +122,26 @@ public void run() {\n         Assert.assertFalse(\"Thread should be finished\", t.isAlive());\n \n         BenchReadThroughputLatency.main(new String[] {\n+                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                 \"--ledger\", String.valueOf(lastLedgerId)});\n \n         final long nextLedgerId = lastLedgerId+1;\n         t = new Thread() {\n                 public void run() {\n                     try {\n                         BenchReadThroughputLatency.main(new String[] {\n+                                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                                 \"--ledger\", String.valueOf(nextLedgerId)});\n                     } catch (Throwable t) {\n                         LOG.error(\"Error reading\", t);\n+                        threwException.set(true);\n                     }\n                 }\n             };\n         t.start();\n \n         Assert.assertTrue(\"Thread should be running\", t.isAlive());\n-        BookKeeper bk = new BookKeeper(zkString);\n+        BookKeeper bk = new BookKeeper(zkUtil.getZooKeeperConnectString());\n         LedgerHandle lh = bk.createLedger(BookKeeper.DigestType.CRC32, \"benchPasswd\".getBytes());\n         try {\n             for (int j = 0; j < 100; j++) {\n@@ -212,5 +158,6 @@ public void run() {\n             Thread.sleep(1000); // wait for 10 seconds for reading to finish\n         }\n         Assert.assertFalse(\"Thread should be finished\", t.isAlive());\n+        Assert.assertFalse(\"A thread has thrown an exception, check logs\", threwException.get());\n     }\n }"},{"sha":"453b6bfdf6bd73af00f1e07f5d48b93e790158b9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":17,"deletions":13,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -26,6 +26,7 @@\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.bookkeeper.test.PortManager;\n import org.apache.zookeeper.ZooKeeper;\n \n import java.io.File;\n@@ -41,6 +42,7 @@\n public class CookieTest {\n     ZooKeeperUtil zkutil;\n     ZooKeeper zkc = null;\n+    final int bookiePort = PortManager.nextFreePort();\n \n     @Before\n     public void setupZooKeeper() throws Exception {\n@@ -77,7 +79,7 @@ public void testCleanStart() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory(false))\n             .setLedgerDirNames(new String[] { newDirectory(false) })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         try {\n             Bookie b = new Bookie(conf);\n         } catch (Exception e) {\n@@ -95,7 +97,7 @@ public void testBadJournalCookie() throws Exception {\n         ServerConfiguration conf1 = new ServerConfiguration()\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         Cookie c = Cookie.generateCookie(conf1);\n         c.writeToZooKeeper(zkc, conf1);\n \n@@ -105,7 +107,7 @@ public void testBadJournalCookie() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         Cookie c2 = Cookie.generateCookie(conf2);\n         c2.writeToDirectory(new File(journalDir, \"current\"));\n         c2.writeToDirectory(new File(ledgerDir, \"current\"));\n@@ -132,7 +134,7 @@ public void testDirectoryMissing() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(ledgerDirs)\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n \n         Bookie b = new Bookie(conf); // should work fine\n         b.start();\n@@ -173,7 +175,7 @@ public void testDirectoryAdded() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir0 })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n \n         Bookie b = new Bookie(conf); // should work fine\n         b.start();\n@@ -205,7 +207,7 @@ public void testDirectoryCleared() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir0 , newDirectory() })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n \n         Bookie b = new Bookie(conf); // should work fine\n         b.start();\n@@ -230,7 +232,7 @@ public void testBookiePortChanged() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         Bookie b = new Bookie(conf); // should work fine\n         b.start();\n         b.shutdown();\n@@ -256,7 +258,7 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         Bookie b = new Bookie(conf); // should work fine\n         b.start();\n         b.shutdown();\n@@ -265,7 +267,7 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         try {\n             b = new Bookie(conf);\n             fail(\"Shouldn't have been able to start\");\n@@ -279,7 +281,9 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n      */\n     @Test\n     public void testVerifyCookieWithFormat() throws Exception {\n-        ClientConfiguration adminConf = new ClientConfiguration();\n+        ClientConfiguration adminConf = new ClientConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString());\n+\n         adminConf.setProperty(\"bookkeeper.format\", true);\n         // Format the BK Metadata and generate INSTANCEID\n         BookKeeperAdmin.format(adminConf, false, true);\n@@ -288,7 +292,7 @@ public void testVerifyCookieWithFormat() throws Exception {\n                 .setZkServers(zkutil.getZooKeeperConnectString())\n                 .setJournalDirName(newDirectory(false))\n                 .setLedgerDirNames(new String[] { newDirectory(false) })\n-                .setBookiePort(3181);\n+                .setBookiePort(bookiePort);\n         // Bookie should start successfully for fresh env.\n         new Bookie(bookieConf);\n \n@@ -319,7 +323,7 @@ public void testV2data() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newV2JournalDirectory())\n             .setLedgerDirNames(new String[] { newV2LedgerDirectory() })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         try {\n             Bookie b = new Bookie(conf);\n             fail(\"Shouldn't have been able to start\");\n@@ -339,7 +343,7 @@ public void testV1data() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newV1JournalDirectory())\n             .setLedgerDirNames(new String[] { newV1LedgerDirectory() })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         try {\n             Bookie b = new Bookie(conf);\n             fail(\"Shouldn't have been able to start\");"},{"sha":"febccabf3faa6475954cea938dc9e96ba84627bc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -46,6 +46,7 @@\n \n import org.apache.zookeeper.ZooKeeper;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.bookkeeper.test.PortManager;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -55,6 +56,7 @@\n \n     ZooKeeperUtil zkutil;\n     ZooKeeper zkc = null;\n+    final static int bookiePort = PortManager.nextFreePort();\n \n     @Before\n     public void setupZooKeeper() throws Exception {\n@@ -166,7 +168,7 @@ private static void testUpgradeProceedure(String zkServers, String journalDir, S\n             .setZkServers(zkServers)\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         Bookie b = null;\n         try {\n             b = new Bookie(conf);\n@@ -223,7 +225,7 @@ public void testUpgradeCurrent() throws Exception {\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n-            .setBookiePort(3181);\n+            .setBookiePort(bookiePort);\n         FileSystemUpgrade.upgrade(conf); // should work fine with current directory\n         Bookie b = new Bookie(conf);\n         b.start();"},{"sha":"9d38dd037b9d8d639289bf466eaaa5c87953b6f2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -245,6 +245,7 @@ public void testAsyncBookieRecoveryToSpecificBookie() throws Exception {\n \n         // Shutdown the first bookie server\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n+        int initialPort = bsConfs.get(0).getBookiePort();\n         bs.get(0).shutdown();\n         bs.remove(0);\n \n@@ -298,6 +299,7 @@ public void testAsyncBookieRecoveryToRandomBookies() throws Exception {\n \n         // Shutdown the first bookie server\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n+        int initialPort = bsConfs.get(0).getBookiePort();\n         bs.get(0).shutdown();\n         bs.remove(0);\n \n@@ -352,6 +354,7 @@ public void testSyncBookieRecoveryToSpecificBookie() throws Exception {\n \n         // Shutdown the first bookie server\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n+        int initialPort = bsConfs.get(0).getBookiePort();\n         bs.get(0).shutdown();\n         bs.remove(0);\n \n@@ -395,6 +398,7 @@ public void testSyncBookieRecoveryToRandomBookies() throws Exception {\n \n         // Shutdown the first bookie server\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n+        int initialPort = bsConfs.get(0).getBookiePort();\n         bs.get(0).shutdown();\n         bs.remove(0);\n \n@@ -694,6 +698,7 @@ public void testAsyncBookieRecoveryToRandomBookiesNotEnoughBookies() throws Exce\n \n         // Shutdown the first bookie server\n         LOG.info(\"Finished writing all ledger entries so shutdown one of the bookies.\");\n+        int initialPort = bsConfs.get(0).getBookiePort();\n         bs.get(0).shutdown();\n         bs.remove(0);\n "},{"sha":"a7f06f1d2c05e7e3b341719819d23be7e689fe8c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -196,12 +196,13 @@ public void testBadZkContents() throws Exception {\n         private final CyclicBarrier barrier;\n         private ZooKeeper zkc;\n         \n-        CreateLMThread(String root, String factoryCls, CyclicBarrier barrier) throws Exception {\n+        CreateLMThread(String zkConnectString, String root,\n+                       String factoryCls, CyclicBarrier barrier) throws Exception {\n             this.factoryCls = factoryCls;\n             this.barrier = barrier;\n             this.root = root;\n             final CountDownLatch latch = new CountDownLatch(1);\n-            zkc = new ZooKeeper(\"127.0.0.1\", 10000, new Watcher() {\n+            zkc = new ZooKeeper(zkConnectString, 10000, new Watcher() {\n                     public void process(WatchedEvent event) {\n                         latch.countDown();\n                     }\n@@ -248,7 +249,8 @@ public void testConcurrent1() throws Exception {\n         CyclicBarrier barrier = new CyclicBarrier(numThreads+1);\n         List<CreateLMThread> threads = new ArrayList<CreateLMThread>(numThreads);\n         for (int i = 0; i < numThreads; i++) {\n-            CreateLMThread t = new CreateLMThread(root0, FlatLedgerManagerFactory.class.getName(), barrier);\n+            CreateLMThread t = new CreateLMThread(zkUtil.getZooKeeperConnectString(),\n+                    root0, FlatLedgerManagerFactory.class.getName(), barrier);\n             t.start();\n             threads.add(t);\n         }\n@@ -277,14 +279,15 @@ public void testConcurrent2() throws Exception {\n         CyclicBarrier barrier = new CyclicBarrier(numThreadsEach*2+1);\n         List<CreateLMThread> threadsA = new ArrayList<CreateLMThread>(numThreadsEach);\n         for (int i = 0; i < numThreadsEach; i++) {\n-            CreateLMThread t = new CreateLMThread(root0, FlatLedgerManagerFactory.class.getName(), barrier);\n+            CreateLMThread t = new CreateLMThread(zkUtil.getZooKeeperConnectString(),\n+                    root0, FlatLedgerManagerFactory.class.getName(), barrier);\n             t.start();\n             threadsA.add(t);\n         }\n         List<CreateLMThread> threadsB = new ArrayList<CreateLMThread>(numThreadsEach);\n         for (int i = 0; i < numThreadsEach; i++) {\n-            CreateLMThread t = new CreateLMThread(root0, \n-                    HierarchicalLedgerManagerFactory.class.getName(), barrier);\n+            CreateLMThread t = new CreateLMThread(zkUtil.getZooKeeperConnectString(),\n+                    root0, HierarchicalLedgerManagerFactory.class.getName(), barrier);\n             t.start();\n             threadsB.add(t);\n         }"},{"sha":"d2ad1de269a170fa6b778d7f8136af622b02687e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -60,8 +60,6 @@\n     protected List<File> tmpDirs = new LinkedList<File>();\n     protected List<BookieServer> bs = new LinkedList<BookieServer>();\n     protected List<ServerConfiguration> bsConfs = new LinkedList<ServerConfiguration>();\n-    protected Integer initialPort = 5000;\n-    private Integer nextPort = initialPort;\n     protected int numBookies;\n     protected BookKeeperTestClient bkc;\n \n@@ -351,7 +349,7 @@ public int startNewBookie()\n         f.delete();\n         f.mkdir();\n \n-        int port = nextPort++;\n+        int port = PortManager.nextFreePort();\n         ServerConfiguration conf = newServerConfiguration(port, zkUtil.getZooKeeperConnectString(),\n                                                           f, new File[] { f });\n         bsConfs.add(conf);"},{"sha":"789b4f2617136316d75ee8be66dc37e12dec6637","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -57,7 +57,7 @@ public void testBookieServerZKExpireBehaviour() throws Exception {\n                 }\n             }\n \n-            ServerConfiguration conf = newServerConfiguration(initialPort + 1,\n+            ServerConfiguration conf = newServerConfiguration(PortManager.nextFreePort(),\n                                                               zkUtil.getZooKeeperConnectString(), f, new File[] { f });\n             server = new BookieServer(conf);\n             server.start();"},{"sha":"9b86851dbfa34c2bbdb2b13bee598cfae7d8b1d7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -47,10 +47,11 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n     @Test\n     public void testProblemProcessor() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n-        conf.setBookiePort(22334);\n+        int port = PortManager.nextFreePort();\n+        conf.setBookiePort(port);\n         NIOServerFactory factory = new NIOServerFactory(conf, problemProcessor);\n         factory.start();\n-        Socket s = new Socket(\"127.0.0.1\", 22334);\n+        Socket s = new Socket(\"127.0.0.1\", port);\n         s.setSoTimeout(5000);\n         try {\n             s.getOutputStream().write(\"\\0\\0\\0\\4\\0\\0\\0\\1\".getBytes());"},{"sha":"fe68e29ae582be31fcafbed92eec66a397a50e0e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -0,0 +1,55 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.test;\n+\n+import java.net.ServerSocket;\n+import java.io.IOException;\n+/**\n+ * Port manager allows a base port to be specified on the commandline.\n+ * Tests will then use ports, counting up from this base port.\n+ * This allows multiple instances of the bookkeeper tests to run at once.\n+ */\n+public class PortManager {\n+    private static int nextPort = getBasePort();\n+\n+    public synchronized static int nextFreePort() {\n+        while (true) {\n+            ServerSocket ss = null;\n+            try {\n+                int port = nextPort++;\n+                ss = new ServerSocket(port);\n+                ss.setReuseAddress(true);\n+                return port;\n+            } catch (IOException ioe) {\n+            } finally {\n+                if (ss != null) {\n+                    try {\n+                        ss.close();\n+                    } catch (IOException ioe) {}\n+                }\n+            }\n+        }\n+    }\n+\n+    private static int getBasePort() {\n+        return Integer.valueOf(System.getProperty(\"test.basePort\", \"15000\"));\n+    }\n+}\n\\ No newline at end of file"},{"sha":"c0a54faa3aa6c93fde41378078f6561f8c109e0c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -44,7 +44,6 @@\n     static Logger LOG = LoggerFactory.getLogger(TestBackwardCompat.class);\n \n     private static ZooKeeperUtil zkUtil = new ZooKeeperUtil();;\n-    private static int nextPort = 3181;\n     private static byte[] ENTRY_DATA = \"ThisIsAnEntry\".getBytes();\n \n     static void waitUp(int port) throws Exception {\n@@ -367,7 +366,7 @@ public void testOldCookieAccessingNewCluster() throws Exception {\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n \n-        int port = nextPort++;\n+        int port = PortManager.nextFreePort();\n \n         // start old server\n         Server410 s410 = new Server410(journalDir, ledgerDir, port);\n@@ -425,7 +424,7 @@ public void testCompat400() throws Exception {\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n \n-        int port = nextPort++;\n+        int port = PortManager.nextFreePort();\n         // start server, upgrade\n         Server400 s400 = new Server400(journalDir, ledgerDir, port);\n         s400.start();\n@@ -513,7 +512,7 @@ public void testCompat410() throws Exception {\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n \n-        int port = nextPort++;\n+        int port = PortManager.nextFreePort();\n         // start server, upgrade\n         Server410 s410 = new Server410(journalDir, ledgerDir, port);\n         s410.start();"},{"sha":"f81adb433a29e0bc9067989347dfae318c05c0b7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -49,7 +49,7 @@\n     static final Logger LOG = LoggerFactory.getLogger(ZooKeeperUtil.class);\n \n     // ZooKeeper related variables\n-    protected static Integer ZooKeeperDefaultPort = 2181;\n+    protected final static Integer zooKeeperPort = PortManager.nextFreePort();\n     private final InetSocketAddress zkaddr;\n \n     protected ZooKeeperServer zks;\n@@ -59,8 +59,8 @@\n     private final String connectString;\n \n     public ZooKeeperUtil() {\n-        zkaddr = new InetSocketAddress(ZooKeeperDefaultPort);\n-        connectString= \"localhost:\" + ZooKeeperDefaultPort;\n+        zkaddr = new InetSocketAddress(zooKeeperPort);\n+        connectString= \"localhost:\" + zooKeeperPort;\n     }\n \n     public ZooKeeper getZooKeeperClient() {"},{"sha":"043e45639576c1e6e91aa21f83765b40ffd5a525","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","status":"modified","additions":28,"deletions":1,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -51,6 +51,7 @@\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.ConcurrencyUtils;\n import org.apache.hedwig.util.SubscriptionListener;\n+import org.apache.hedwig.util.HedwigSocketAddress;\n \n @RunWith(Parameterized.class)\n public class TestPubSubClient extends PubSubServerStandAloneTestBase {\n@@ -172,6 +173,11 @@ public TestPubSubClient(boolean isSubscriptionChannelSharingEnabled) {\n     public void setUp() throws Exception {\n         super.setUp();\n         client = new HedwigClient(new ClientConfiguration() {\n+            @Override\n+            public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n+                return getDefaultHedwigAddress();\n+            }\n+\n             @Override\n             public boolean isSubscriptionChannelSharingEnabled() {\n                 return TestPubSubClient.this.isSubscriptionChannelSharingEnabled;\n@@ -516,7 +522,12 @@ public void testSyncSubscribeForceAttach() throws Exception {\n         subscriber.startDelivery(topic, subscriberId, new TestMessageHandler());\n \n         // new a client\n-        HedwigClient client2 = new HedwigClient(new ClientConfiguration());\n+        HedwigClient client2 = new HedwigClient(new ClientConfiguration() {\n+                @Override\n+                public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n+                    return getDefaultHedwigAddress();\n+                }\n+            });\n         Subscriber subscriber2 = client2.getSubscriber();\n         Publisher publisher2 = client2.getPublisher();\n         SynchronousQueue<SubscriptionEvent> eventQueue2 =\n@@ -553,8 +564,24 @@ public void testSyncSubscribeForceAttach() throws Exception {\n \n     @Test\n     public void testSyncSubscribeWithListenerWhenReleasingTopic() throws Exception {\n+        client.close();\n+\n         tearDownHubServer();\n         startHubServer(new RetentionServerConfiguration());\n+        client = new HedwigClient(new ClientConfiguration() {\n+            @Override\n+            public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n+                return getDefaultHedwigAddress();\n+            }\n+\n+            @Override\n+            public boolean isSubscriptionChannelSharingEnabled() {\n+                return TestPubSubClient.this.isSubscriptionChannelSharingEnabled;\n+            }\n+        });\n+        publisher = client.getPublisher();\n+        subscriber = client.getSubscriber();\n+\n         ByteString topic = ByteString.copyFromUtf8(\"mySyncSubscribeWithListenerWhenReleasingTopic\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"mysub\");\n         subscriber.addSubscriptionListener(new TestSubscriptionListener());"},{"sha":"857456769ab776c5da544cfca4e36c0d03cdd277","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -225,9 +225,8 @@ public void checkAfterThrottle() throws Exception {\n     @Override\n     @Before\n     public void setUp() throws Exception {\n-        numServers = 1;\n         super.setUp();\n-        client = new HedwigClient(new ClientConfiguration() {\n+        client = new HedwigClient(new HubClientConfiguration() {\n             @Override\n             public boolean isSubscriptionChannelSharingEnabled() {\n                 return true;"},{"sha":"93ce4f7a165ae2a5c407801585284d6e1ec3be09","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","status":"modified","additions":23,"deletions":5,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigHubTestBase.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -27,9 +27,13 @@\n import org.junit.After;\n import org.junit.Before;\n \n+import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.netty.PubSubServer;\n import org.apache.hedwig.server.persistence.BookKeeperTestBase;\n+import org.apache.hedwig.util.HedwigSocketAddress;\n+\n+import org.apache.bookkeeper.test.PortManager;\n \n /**\n  * This is a base class for any tests that need a Hedwig Hub(s) setup with an\n@@ -50,17 +54,22 @@\n     // PubSubServer variables\n     // Default number of PubSubServer hubs to setup. Extending classes can\n     // override this.\n-    protected int numServers = 1;\n-    protected int initialServerPort = 4080;\n-    protected int initialSSLServerPort = 9876;\n+    protected final int numServers;\n     protected List<PubSubServer> serversList;\n+    protected List<HedwigSocketAddress> serverAddresses;\n \n     public HedwigHubTestBase() {\n         this(1);\n     }\n \n     protected HedwigHubTestBase(int numServers) {\n         this.numServers = numServers;\n+\n+        serverAddresses = new LinkedList<HedwigSocketAddress>();\n+        for (int i = 0; i < numServers; i++) {\n+            serverAddresses.add(new HedwigSocketAddress(\"localhost\",\n+                                        PortManager.nextFreePort(), PortManager.nextFreePort()));\n+        }\n     }\n \n     // Default child class of the ServerConfiguration to be used here.\n@@ -106,6 +115,13 @@ public String getPassword() {\n         }\n     }\n \n+    public class HubClientConfiguration extends ClientConfiguration {\n+        @Override\n+        public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n+            return serverAddresses.get(0);\n+        }\n+    }\n+\n     // Method to get a ServerConfiguration for the PubSubServers created using\n     // the specified ports. Extending child classes can override this. This\n     // default implementation will return the HubServerConfiguration object\n@@ -117,9 +133,11 @@ protected ServerConfiguration getServerConfiguration(int serverPort, int sslServ\n     protected void startHubServers() throws Exception {\n         // Now create the PubSubServer Hubs\n         serversList = new LinkedList<PubSubServer>();\n+\n         for (int i = 0; i < numServers; i++) {\n-            PubSubServer s = new PubSubServer(\n-                    getServerConfiguration(initialServerPort + i, initialSSLServerPort + i));\n+            ServerConfiguration conf = getServerConfiguration(serverAddresses.get(i).getPort(),\n+                                                              serverAddresses.get(i).getSSLPort());\n+            PubSubServer s = new PubSubServer(conf);\n             serversList.add(s);\n             s.start();\n         }"},{"sha":"304d37391d6f8cd1ff05cb573d22503785701280","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","status":"modified","additions":39,"deletions":12,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -36,6 +36,8 @@\n import org.apache.hedwig.server.persistence.BookKeeperTestBase;\n import org.apache.hedwig.util.HedwigSocketAddress;\n \n+import org.apache.bookkeeper.test.PortManager;\n+\n /**\n  * This is a base class for any tests that need a Hedwig Region(s) setup with a\n  * number of Hedwig hubs per region, an associated HedwigClient per region and\n@@ -58,15 +60,17 @@\n     // override this.\n     protected int numRegions = 2;\n     protected int numServersPerRegion = 1;\n-    protected int initialServerPort = 4080;\n-    protected int initialSSLServerPort = 9876;\n+\n     // Map with keys being Region names and values being the list of Hedwig\n     // Hubs (PubSubServers) for that particular region.\n     protected Map<String, List<PubSubServer>> regionServersMap;\n     // Map with keys being Region names and values being the Hedwig Client\n     // instance.\n     protected Map<String, HedwigClient> regionClientsMap;\n \n+    protected Map<String, Integer> regionNameToIndexMap;\n+    protected Map<Integer, List<HedwigSocketAddress>> regionHubAddresses;\n+\n     // String constant used as the prefix for the region names.\n     protected static final String REGION_PREFIX = \"region\";\n \n@@ -89,14 +93,15 @@ public RegionServerConfiguration(int serverPort, int sslServerPort, String regio\n         protected void setRegionList() {\n             List<String> myRegionList = new LinkedList<String>();\n             for (int i = 0; i < numRegions; i++) {\n-                int curDefaultServerPort = initialServerPort + (i * numServersPerRegion);\n-                int curDefaultSSLServerPort = initialSSLServerPort + (i * numServersPerRegion);\n+                int curDefaultServerPort = regionHubAddresses.get(i).get(0).getPort();\n+                int curDefaultSSLServerPort = regionHubAddresses.get(i).get(0).getSSLPort();\n                 // Add this region default server port if it is for a region\n                 // other than its own.\n-                if (curDefaultServerPort > serverPort\n-                        || Math.abs(serverPort - curDefaultServerPort) >= numServersPerRegion)\n+                if (regionNameToIndexMap.get(regionName) != i) {\n                     myRegionList.add(\"localhost:\" + curDefaultServerPort + \":\" + curDefaultSSLServerPort);\n+                }\n             }\n+\n             regionList = myRegionList;\n         }\n \n@@ -168,7 +173,12 @@ protected ClientConfiguration getClientConfiguration(int serverPort, int sslServ\n \n     // Method to get a ClientConfiguration for the Cross Region Hedwig Client.\n     protected ClientConfiguration getRegionClientConfiguration() {\n-        return new ClientConfiguration();\n+        return new ClientConfiguration() {\n+            @Override\n+            public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n+                return regionHubAddresses.get(0).get(0);\n+            }\n+        };\n     }\n \n     @Override\n@@ -181,6 +191,19 @@ public void setUp() throws Exception {\n         // Create the Hedwig PubSubServer Hubs for all of the regions\n         regionServersMap = new HashMap<String, List<PubSubServer>>(numRegions, 1.0f);\n         regionClientsMap = new HashMap<String, HedwigClient>(numRegions, 1.0f);\n+\n+        regionHubAddresses = new HashMap<Integer, List<HedwigSocketAddress>>(numRegions, 1.0f);\n+        for (int i = 0; i < numRegions; i++) {\n+            List<HedwigSocketAddress> addresses = new LinkedList<HedwigSocketAddress>();\n+            for (int j = 0; j < numServersPerRegion; j++) {\n+                HedwigSocketAddress a = new HedwigSocketAddress(\"localhost\",\n+                        PortManager.nextFreePort(), PortManager.nextFreePort());\n+                addresses.add(a);\n+            }\n+            regionHubAddresses.put(i, addresses);\n+        }\n+        regionNameToIndexMap = new HashMap<String, Integer>();\n+\n         for (int i = 0; i < numRegions; i++) {\n             startRegion(i);\n         }\n@@ -230,18 +253,21 @@ protected void stopRegion(int regionIdx) throws Exception {\n \n     protected void startRegion(int i) throws Exception {\n         String regionName = REGION_PREFIX + i;\n+        regionNameToIndexMap.put(regionName, i);\n+\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"Start region : \" + regionName);\n         }\n+\n         List<PubSubServer> serversList = new LinkedList<PubSubServer>();\n         // For the current region, create the necessary amount of hub\n         // servers. We will basically increment through the port numbers\n         // starting from the initial ones defined.\n         for (int j = 0; j < numServersPerRegion; j++) {\n+            HedwigSocketAddress a = regionHubAddresses.get(i).get(j);\n             PubSubServer s = new PubSubServer(\n-                    getServerConfiguration(initialServerPort\n-                                           + (j + i * numServersPerRegion),\n-                                           initialSSLServerPort + (j + i * numServersPerRegion),\n+                    getServerConfiguration(a.getPort(),\n+                                           a.getSSLPort(),\n                                            regionName),\n                     getRegionClientConfiguration());\n             serversList.add(s);\n@@ -251,8 +277,9 @@ protected void startRegion(int i) throws Exception {\n         regionServersMap.put(regionName, serversList);\n         // Create a Hedwig Client that points to the first Hub server\n         // created in the loop above for the current region.\n-        HedwigClient regionClient = new HedwigClient(getClientConfiguration(initialServerPort\n-                + (i * numServersPerRegion), initialSSLServerPort + (i * numServersPerRegion)));\n+        HedwigClient regionClient = new HedwigClient(\n+                getClientConfiguration(regionHubAddresses.get(i).get(0).getPort(),\n+                                       regionHubAddresses.get(i).get(0).getSSLPort()));\n         regionClientsMap.put(regionName, regionClient);\n     }\n }"},{"sha":"21d75ea06813a53899b0314b9cdf0d08be2c5e55","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","status":"modified","additions":27,"deletions":1,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/PubSubServerStandAloneTestBase.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -24,8 +24,11 @@\n import org.junit.After;\n import org.junit.Before;\n \n+import org.apache.bookkeeper.test.PortManager;\n+\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.netty.PubSubServer;\n+import org.apache.hedwig.util.HedwigSocketAddress;\n \n /**\n  * This is a base class for any tests that need a StandAlone PubSubServer setup.\n@@ -35,17 +38,31 @@\n     protected static Logger logger = LoggerFactory.getLogger(PubSubServerStandAloneTestBase.class);\n \n     protected class StandAloneServerConfiguration extends ServerConfiguration {\n+        final int port = PortManager.nextFreePort();\n+        final int sslPort = PortManager.nextFreePort();\n+\n         @Override\n         public boolean isStandalone() {\n             return true;\n         }\n+\n+        @Override\n+        public int getServerPort() {\n+            return port;\n+        }\n+\n+        @Override\n+        public int getSSLServerPort() {\n+            return sslPort;\n+        }\n     }\n \n     public ServerConfiguration getStandAloneServerConfiguration() {\n         return new StandAloneServerConfiguration();\n     }\n \n     protected PubSubServer server;\n+    protected HedwigSocketAddress defaultAddress;\n \n     @Override\n     @Before\n@@ -65,10 +82,19 @@ public void tearDown() throws Exception {\n     }\n \n     protected void startHubServer() throws Exception {\n-        startHubServer(getStandAloneServerConfiguration());\n+        ServerConfiguration conf = getStandAloneServerConfiguration();\n+        defaultAddress = new HedwigSocketAddress(\"localhost\", conf.getServerPort(),\n+                                                 conf.getSSLServerPort());\n+        startHubServer(conf);\n+    }\n+\n+    protected HedwigSocketAddress getDefaultHedwigAddress() {\n+        return defaultAddress;\n     }\n \n     protected void startHubServer(ServerConfiguration conf) throws Exception {\n+        defaultAddress = new HedwigSocketAddress(\"localhost\", conf.getServerPort(),\n+                                                 conf.getSSLServerPort());\n         server = new PubSubServer(conf);\n         server.start();\n     }"},{"sha":"395f993ed8e2d1965a24937ae3c3ecd7ac77bbc6","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":106,"deletions":42,"changes":148,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -34,6 +34,10 @@\n import static org.junit.Assert.*;\n \n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.bookkeeper.test.PortManager;\n+\n+import org.apache.hedwig.util.HedwigSocketAddress;\n+\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.ConfigurationException;\n import org.slf4j.Logger;\n@@ -55,9 +59,6 @@\n         List<org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration> bkConfs;\n         List<org.apache.hw_v4_0_0.bookkeeper.proto.BookieServer> bks;\n \n-        private int initialPort = 5000;\n-        private int nextPort = initialPort;\n-\n         BookKeeperCluster400(int numBookies) {\n             this.numBookies = numBookies;\n         }\n@@ -83,10 +84,11 @@ public void stop() throws Exception {\n         }\n \n         protected void startBookieServer() throws Exception {\n+            int port = PortManager.nextFreePort();\n             File tmpDir = org.apache.hw_v4_0_0.hedwig.util.FileUtils.createTempDirectory(\n-                getClass().getName() + (nextPort - initialPort), \"test\");\n+                getClass().getName() + port, \"test\");\n             org.apache.hw_v4_0_0.bookkeeper.conf.ServerConfiguration conf = newServerConfiguration(\n-                nextPort++, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n+                port, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n             bks.add(startBookie(conf));\n             bkConfs.add(conf);\n         }\n@@ -129,12 +131,22 @@ protected void startBookieServer() throws Exception {\n         org.apache.hw_v4_0_0.hedwig.server.common.ServerConfiguration conf;\n         org.apache.hw_v4_0_0.hedwig.server.netty.PubSubServer server;\n \n-        Server400(final String zkHosts) {\n+        Server400(final String zkHosts, final int port, final int sslPort) {\n             conf = new org.apache.hw_v4_0_0.hedwig.server.common.ServerConfiguration() {\n                 @Override\n                 public String getZkHost() {\n                     return zkHosts;\n                 }\n+\n+                @Override\n+                public int getServerPort() {\n+                    return port;\n+                }\n+\n+                @Override\n+                public int getSSLServerPort() {\n+                    return sslPort;\n+                }\n             };\n         }\n \n@@ -155,8 +167,14 @@ void stop() throws Exception {\n         org.apache.hw_v4_0_0.hedwig.client.api.Publisher publisher;\n         org.apache.hw_v4_0_0.hedwig.client.api.Subscriber subscriber;\n \n-        Client400() {\n-            conf = new org.apache.hw_v4_0_0.hedwig.client.conf.ClientConfiguration();\n+        Client400(final String connectString) {\n+            conf = new org.apache.hw_v4_0_0.hedwig.client.conf.ClientConfiguration() {\n+                    @Override\n+                    protected org.apache.hw_v4_0_0.hedwig.util.HedwigSocketAddress\n+                        getDefaultServerHedwigSocketAddress() {\n+                        return new org.apache.hw_v4_0_0.hedwig.util.HedwigSocketAddress(connectString);\n+                    }\n+                };\n             client = new org.apache.hw_v4_0_0.hedwig.client.HedwigClient(conf);\n             publisher = client.getPublisher();\n             subscriber = client.getSubscriber();\n@@ -184,9 +202,6 @@ void close() throws Exception {\n         List<org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration> bkConfs;\n         List<org.apache.hw_v4_1_0.bookkeeper.proto.BookieServer> bks;\n \n-        private int initialPort = 5000;\n-        private int nextPort = initialPort;\n-\n         BookKeeperCluster410(int numBookies) {\n             this.numBookies = numBookies;\n         }\n@@ -212,10 +227,11 @@ public void stop() throws Exception {\n         }\n \n         protected void startBookieServer() throws Exception {\n+            int port = PortManager.nextFreePort();\n             File tmpDir = org.apache.hw_v4_1_0.hedwig.util.FileUtils.createTempDirectory(\n-                getClass().getName() + (nextPort - initialPort), \"test\");\n+                getClass().getName() + port, \"test\");\n             org.apache.hw_v4_1_0.bookkeeper.conf.ServerConfiguration conf = newServerConfiguration(\n-                nextPort++, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n+                    port, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n             bks.add(startBookie(conf));\n             bkConfs.add(conf);\n         }\n@@ -258,7 +274,7 @@ protected void startBookieServer() throws Exception {\n         org.apache.hw_v4_1_0.hedwig.server.common.ServerConfiguration conf;\n         org.apache.hw_v4_1_0.hedwig.server.netty.PubSubServer server;\n \n-        Server410(final String zkHosts) {\n+        Server410(final String zkHosts, final int port, final int sslPort) {\n             conf = new org.apache.hw_v4_1_0.hedwig.server.common.ServerConfiguration() {\n                 @Override\n                 public int getConsumeInterval() {\n@@ -268,6 +284,16 @@ public int getConsumeInterval() {\n                 public String getZkHost() {\n                     return zkHosts;\n                 }\n+\n+                @Override\n+                public int getServerPort() {\n+                    return port;\n+                }\n+\n+                @Override\n+                public int getSSLServerPort() {\n+                    return sslPort;\n+                }\n             };\n         }\n \n@@ -324,7 +350,7 @@ public boolean await(long timeout, TimeUnit unit)\n             }\n         }\n \n-        Client410() {\n+        Client410(final String connectString) {\n             conf = new org.apache.hw_v4_1_0.hedwig.client.conf.ClientConfiguration() {\n                 @Override\n                 public boolean isAutoSendConsumeMessageEnabled() {\n@@ -334,6 +360,11 @@ public boolean isAutoSendConsumeMessageEnabled() {\n                 public int getConsumedMessagesBufferSize() {\n                     return 1;\n                 }\n+                @Override\n+                protected org.apache.hw_v4_1_0.hedwig.util.HedwigSocketAddress\n+                    getDefaultServerHedwigSocketAddress() {\n+                    return new org.apache.hw_v4_1_0.hedwig.util.HedwigSocketAddress(connectString);\n+                }\n             };\n             client = new org.apache.hw_v4_1_0.hedwig.client.HedwigClient(conf);\n             publisher = client.getPublisher();\n@@ -438,8 +469,6 @@ void receiveInts(ByteString topic, ByteString subscriberId, int start, int num)\n         List<org.apache.bookkeeper.conf.ServerConfiguration> bkConfs;\n         List<org.apache.bookkeeper.proto.BookieServer> bks;\n \n-        private int initialPort = 5000;\n-        private int nextPort = initialPort;\n \n         BookKeeperClusterCurrent(int numBookies) {\n             this.numBookies = numBookies;\n@@ -466,10 +495,11 @@ public void stop() throws Exception {\n         }\n \n         protected void startBookieServer() throws Exception {\n+            int port = PortManager.nextFreePort();\n             File tmpDir = org.apache.hedwig.util.FileUtils.createTempDirectory(\n-                getClass().getName() + (nextPort - initialPort), \"test\");\n+                getClass().getName() + port, \"test\");\n             org.apache.bookkeeper.conf.ServerConfiguration conf = newServerConfiguration(\n-                nextPort++, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n+                port, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n             bks.add(startBookie(conf));\n             bkConfs.add(conf);\n         }\n@@ -509,7 +539,7 @@ protected void startBookieServer() throws Exception {\n         org.apache.hedwig.server.common.ServerConfiguration conf;\n         org.apache.hedwig.server.netty.PubSubServer server;\n \n-        ServerCurrent(final String zkHosts) {\n+        ServerCurrent(final String zkHosts, final int port, final int sslPort) {\n             conf = new org.apache.hedwig.server.common.ServerConfiguration() {\n                 @Override\n                 public int getConsumeInterval() {\n@@ -520,6 +550,16 @@ public int getConsumeInterval() {\n                 public String getZkHost() {\n                     return zkHosts;\n                 }\n+\n+                @Override\n+                public int getServerPort() {\n+                    return port;\n+                }\n+\n+                @Override\n+                public int getSSLServerPort() {\n+                    return sslPort;\n+                }\n             };\n         }\n \n@@ -576,11 +616,11 @@ public boolean await(long timeout, TimeUnit unit)\n             }\n         }\n \n-        ClientCurrent() {\n-            this(true);\n+        ClientCurrent(final String connectString) {\n+            this(true, connectString);\n         }\n \n-        ClientCurrent(final boolean autoConsumeEnabled) {\n+        ClientCurrent(final boolean autoConsumeEnabled, final String connectString) {\n             conf = new org.apache.hedwig.client.conf.ClientConfiguration() {\n                 @Override\n                 public boolean isAutoSendConsumeMessageEnabled() {\n@@ -590,6 +630,10 @@ public boolean isAutoSendConsumeMessageEnabled() {\n                 public int getConsumedMessagesBufferSize() {\n                     return 1;\n                 }\n+                @Override\n+                protected HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n+                    return new HedwigSocketAddress(connectString);\n+                }\n             };\n             client = new org.apache.hedwig.client.HedwigClient(conf);\n             publisher = client.getPublisher();\n@@ -833,20 +877,23 @@ public void testMessageBoundCompat() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"testMessageBoundCompat\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n+        int port = PortManager.nextFreePort();\n+        int sslPort = PortManager.nextFreePort();\n+\n         // start bookkeeper 400\n         BookKeeperCluster400 bkc400 = new BookKeeperCluster400(3);\n         bkc400.start();\n \n         // start 400 server\n-        Server400 s400 = new Server400(zkUtil.getZooKeeperConnectString());\n+        Server400 s400 = new Server400(zkUtil.getZooKeeperConnectString(), port, sslPort);\n         s400.start();\n \n         org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions options5cur =\n             org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.newBuilder()\n             .setCreateOrAttach(org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.CREATE_OR_ATTACH)\n             .setMessageBound(5).build();\n \n-        ClientCurrent ccur = new ClientCurrent();\n+        ClientCurrent ccur = new ClientCurrent(\"localhost:\" + port + \":\" + sslPort);\n         ccur.subscribe(topic, subid, options5cur);\n         ccur.closeSubscription(topic, subid);\n         ccur.sendXExpectLastY(topic, subid, 50, 50);\n@@ -860,7 +907,7 @@ public void testMessageBoundCompat() throws Exception {\n         bkc410.start();\n \n         // start 410 server\n-        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString(), port, sslPort);\n         s410.start();\n \n         ccur.subscribe(topic, subid, options5cur);\n@@ -876,7 +923,7 @@ public void testMessageBoundCompat() throws Exception {\n         bkccur.start();\n \n         // start current server\n-        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString());\n+        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString(), port, sslPort);\n         scur.start();\n \n         ccur.subscribe(topic, subid, options5cur);\n@@ -907,12 +954,15 @@ public void testPublishCompat410() throws Exception {\n         BookKeeperCluster410 bkc410 = new BookKeeperCluster410(3);\n         bkc410.start();\n \n+        int port = PortManager.nextFreePort();\n+        int sslPort = PortManager.nextFreePort();\n+\n         // start 410 server\n-        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString(), port, sslPort);\n         s410.start();\n \n-        ClientCurrent ccur = new ClientCurrent();\n-        Client410 c410 = new Client410();\n+        ClientCurrent ccur = new ClientCurrent(\"localhost:\"+port+\":\"+sslPort);\n+        Client410 c410 = new Client410(\"localhost:\"+port+\":\"+sslPort);\n \n         // client c410 could publish message to 410 server\n         assertNull(c410.publish(topic, data));\n@@ -924,7 +974,7 @@ public void testPublishCompat410() throws Exception {\n         s410.stop();\n \n         // start current server\n-        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString());\n+        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString(), port, sslPort);\n         scur.start();\n \n         // client c410 could publish message to 410 server\n@@ -956,15 +1006,18 @@ public void testSubscriptionDataCompat410() throws Exception {\n         BookKeeperCluster410 bkc410 = new BookKeeperCluster410(3);\n         bkc410.start();\n \n+        int port = PortManager.nextFreePort();\n+        int sslPort = PortManager.nextFreePort();\n+\n         // start 410 server\n-        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString(), port, sslPort);\n         s410.start();\n \n-        Client410 c410 = new Client410();\n+        Client410 c410 = new Client410(\"localhost:\"+port+\":\"+sslPort);\n         c410.subscribe(topic, sub410);\n         c410.closeSubscription(topic, sub410);\n \n-        ClientCurrent ccur = new ClientCurrent();\n+        ClientCurrent ccur = new ClientCurrent(\"localhost:\"+port+\":\"+sslPort);\n         ccur.subscribe(topic, subcur);\n         ccur.closeSubscription(topic, subcur);\n \n@@ -974,7 +1027,8 @@ public void testSubscriptionDataCompat410() throws Exception {\n         s410.stop();\n \n         // start current server\n-        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString());\n+        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString(),\n+                                               port, sslPort);\n         scur.start();\n \n         c410.subscribe(topic, sub410);\n@@ -1013,8 +1067,12 @@ public void testUpdateMessageBoundCompat410() throws Exception {\n         BookKeeperClusterCurrent bkccur= new BookKeeperClusterCurrent(3);\n         bkccur.start();\n \n+        int port = PortManager.nextFreePort();\n+        int sslPort = PortManager.nextFreePort();\n+\n         // start hub server\n-        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString());\n+        ServerCurrent scur = new ServerCurrent(zkUtil.getZooKeeperConnectString(),\n+                                               port, sslPort);\n         scur.start();\n \n         org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions options5cur =\n@@ -1030,7 +1088,7 @@ public void testUpdateMessageBoundCompat410() throws Exception {\n             .setCreateOrAttach(org.apache.hw_v4_1_0.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.CREATE_OR_ATTACH)\n             .setMessageBound(20).build();\n \n-        Client410 c410 = new Client410();\n+        Client410 c410 = new Client410(\"localhost:\"+port+\":\"+sslPort);\n         c410.subscribe(topic, subid, options20v410);\n         c410.closeSubscription(topic, subid);\n         c410.sendXExpectLastY(topic, subid, 50, 20);\n@@ -1040,7 +1098,7 @@ public void testUpdateMessageBoundCompat410() throws Exception {\n         // the message bound isn't updated.\n         c410.sendXExpectLastY(topic, subid, 50, 20);\n \n-        ClientCurrent ccur = new ClientCurrent();\n+        ClientCurrent ccur = new ClientCurrent(\"localhost:\"+port+\":\"+sslPort);\n         ccur.subscribe(topic, subid, options5cur);\n         ccur.closeSubscription(topic, subid);\n         // the message bound should be updated.\n@@ -1070,11 +1128,14 @@ public void testClientMessageFilterCompat410() throws Exception {\n         BookKeeperCluster410 bkc410 = new BookKeeperCluster410(3);\n         bkc410.start();\n \n+        int port = PortManager.nextFreePort();\n+        int sslPort = PortManager.nextFreePort();\n+\n         // start hub server 410\n-        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString(), port, sslPort);\n         s410.start();\n \n-        ClientCurrent ccur = new ClientCurrent();\n+        ClientCurrent ccur = new ClientCurrent(\"localhost:\"+port+\":\"+sslPort);\n         ccur.subscribe(topic, subid);\n         ccur.closeSubscription(topic, subid);\n \n@@ -1108,11 +1169,14 @@ public void testServerSideThrottleCompat410() throws Exception {\n         BookKeeperCluster410 bkc410 = new BookKeeperCluster410(3);\n         bkc410.start();\n \n+        int port = PortManager.nextFreePort();\n+        int sslPort = PortManager.nextFreePort();\n+\n         // start hub server 410\n-        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString(), port, sslPort);\n         s410.start();\n \n-        ClientCurrent ccur = new ClientCurrent(false);\n+        ClientCurrent ccur = new ClientCurrent(false, \"localhost:\"+port+\":\"+sslPort);\n         ccur.throttleX41(topic, subid, 10);\n \n         ccur.close();"},{"sha":"6944a49b759c7de1d9d978d448bfec9b6952d68d","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestPubSubServerStartup.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -25,6 +25,7 @@\n \n import junit.framework.Assert;\n \n+import org.apache.bookkeeper.test.PortManager;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.netty.PubSubServer;\n@@ -62,8 +63,14 @@ public void testPubSubServerInstantiationWithConfig() throws Exception {\n \n     private void instantiateAndDestroyPubSubServer() throws IOException, InterruptedException, ConfigurationException,\n         MalformedURLException, Exception {\n-        String hedwigParams = \"default_server_host=localhost:4080\\n\" + \"zookeeper_connection_string=localhost:2181\\n\"\n-                              + \"zk_timeout=2000\\n\";\n+        int zkPort = PortManager.nextFreePort();\n+        int hwPort = PortManager.nextFreePort();\n+        int hwSSLPort = PortManager.nextFreePort();\n+        String hedwigParams = \"default_server_host=localhost:\" + hwPort + \"\\n\"\n+            + \"zk_host=localhost:\" + zkPort + \"\\n\"\n+            + \"server_port=\" + hwPort + \"\\n\"\n+            + \"ssl_server_port=\" + hwSSLPort + \"\\n\"\n+            + \"zk_timeout=2000\\n\";\n \n         File hedwigConfigFile = new File(System.getProperty(\"java.io.tmpdir\") + \"/hedwig.cfg\");\n         writeStringToFile(hedwigParams, hedwigConfigFile);\n@@ -73,19 +80,19 @@ private void instantiateAndDestroyPubSubServer() throws IOException, Interrupted\n         zkTmpDir.delete();\n         zkTmpDir.mkdir();\n \n-        ZooKeeperServer zks = new ZooKeeperServer(zkTmpDir, zkTmpDir, 2181);\n+        ZooKeeperServer zks = new ZooKeeperServer(zkTmpDir, zkTmpDir, zkPort);\n \n         NIOServerCnxnFactory serverFactory = new NIOServerCnxnFactory();\n-        serverFactory.configure(new InetSocketAddress(2181), 100);\n+        serverFactory.configure(new InetSocketAddress(zkPort), 100);\n         serverFactory.startup(zks);\n \n-        boolean b = ClientBase.waitForServerUp(\"127.0.0.1:2181\", 5000);\n+        boolean b = ClientBase.waitForServerUp(\"127.0.0.1:\" + zkPort, 5000);\n         ServerConfiguration serverConf = new ServerConfiguration();\n         serverConf.loadConf(hedwigConfigFile.toURI().toURL());\n \n         logger.info(\"Zookeeper server up and running!\");\n \n-        ZooKeeper zkc = new ZooKeeper(\"127.0.0.1\", 2181, null);\n+        ZooKeeper zkc = new ZooKeeper(\"127.0.0.1:\" + zkPort, 5000, null);\n \n         // initialize the zk client with (fake) values\n         zkc.create(\"/ledgers\", new byte[0], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n@@ -109,7 +116,7 @@ private void instantiateAndDestroyPubSubServer() throws IOException, Interrupted\n \n         zkTmpDir.delete();\n \n-        ClientBase.waitForServerDown(\"localhost:2181\", 10000);\n+        ClientBase.waitForServerDown(\"localhost:\" + zkPort, 10000);\n \n     }\n "},{"sha":"e94a18748c2c6b30282edaf9858a0db5ab452920","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -66,7 +66,7 @@ public int getDefaultMessageWindowSize() {\n         }\n     }\n \n-    protected class ThrottleDeliveryClientConfiguration extends ClientConfiguration {\n+    protected class ThrottleDeliveryClientConfiguration extends HubClientConfiguration {\n \n         int messageWindowSize;\n \n@@ -173,13 +173,13 @@ public synchronized void deliver(ByteString topic, ByteString subscriberId,\n     protected boolean isSubscriptionChannelSharingEnabled;\n \n     public TestThrottlingDelivery(boolean isSubscriptionChannelSharingEnabled) {\n+        super(1);\n         this.isSubscriptionChannelSharingEnabled = isSubscriptionChannelSharingEnabled;\n     }\n \n     @Override\n     @Before\n     public void setUp() throws Exception {\n-        numServers = 1;\n         super.setUp();\n     }\n "},{"sha":"d4dbca78cb01e92961b83b32883271d69211c6a9","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -146,13 +146,16 @@ public boolean testMessage(Message msg) {\n         }\n     }\n \n+    public TestMessageFilter() {\n+        super(1);\n+    }\n+\n     @Override\n     @Before\n     public void setUp() throws Exception {\n-        numServers = 1;\n         super.setUp();\n \n-        conf = new ClientConfiguration() {\n+        conf = new HubClientConfiguration() {\n             @Override\n             public boolean isAutoSendConsumeMessageEnabled() {\n                 return false;"},{"sha":"64ddc7ad38d177aebe83b36c5374e8a2592d18e5","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","status":"modified","additions":21,"deletions":7,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -60,6 +60,8 @@\n import org.apache.hedwig.server.regions.HedwigHubClient;\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.ConcurrencyUtils;\n+import org.apache.hedwig.util.HedwigSocketAddress;\n+import org.apache.bookkeeper.test.PortManager;\n \n @RunWith(Parameterized.class)\n public class TestHedwigHub extends HedwigHubTestBase {\n@@ -94,12 +96,25 @@\n     protected boolean isSubscriptionChannelSharingEnabled;\n \n     public TestHedwigHub(Mode mode, boolean isSubscriptionChannelSharingEnabled) {\n+        super(3);\n         this.mode = mode;\n         this.isSubscriptionChannelSharingEnabled = isSubscriptionChannelSharingEnabled;\n     }\n \n     protected HedwigProxy proxy;\n-    protected ProxyConfiguration proxyConf = new ProxyConfiguration();\n+    protected ProxyConfiguration proxyConf = new ProxyConfiguration() {\n+            final int proxyPort = PortManager.nextFreePort();\n+\n+            @Override\n+            public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n+                return serverAddresses.get(0);\n+            }\n+\n+            @Override\n+            public int getProxyPort() {\n+                return proxyPort;\n+            }\n+        };\n \n     // SynchronousQueues to verify async calls\n     private final SynchronousQueue<Boolean> queue = new SynchronousQueue<Boolean>();\n@@ -190,7 +205,7 @@ public void run() {\n         }\n     }\n \n-    class TestClientConfiguration extends ClientConfiguration {\n+    class TestClientConfiguration extends HubClientConfiguration {\n \n         @Override\n         public InetSocketAddress getDefaultServerHost() {\n@@ -223,7 +238,6 @@ protected ClientConfiguration getClientConfiguration() {\n     @Override\n     @Before\n     public void setUp() throws Exception {\n-        numServers = 3;\n         super.setUp();\n         if (mode == Mode.PROXY) {\n             proxy = new HedwigProxy(proxyConf);\n@@ -676,7 +690,7 @@ public void testAsyncUnsubscribeWithInvalidSubscriberId() throws Exception {\n     // subscriberId to be in the \"hub\" specific format.\n     @Test\n     public void testSyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n-        Client hubClient = new HedwigHubClient(new ClientConfiguration());\n+        Client hubClient = new HedwigHubClient(new HubClientConfiguration());\n         Subscriber hubSubscriber = hubClient.getSubscriber();\n         boolean subscribeSuccess = false;\n         try {\n@@ -692,7 +706,7 @@ public void testSyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n \n     @Test\n     public void testAsyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n-        Client hubClient = new HedwigHubClient(new ClientConfiguration());\n+        Client hubClient = new HedwigHubClient(new HubClientConfiguration());\n         Subscriber hubSubscriber = hubClient.getSubscriber();\n         hubSubscriber.asyncSubscribe(getTopic(0), localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(\n                                          queue), null);\n@@ -702,7 +716,7 @@ public void testAsyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n \n     @Test\n     public void testSyncHubUnsubscribeWithInvalidSubscriberId() throws Exception {\n-        Client hubClient = new HedwigHubClient(new ClientConfiguration());\n+        Client hubClient = new HedwigHubClient(new HubClientConfiguration());\n         Subscriber hubSubscriber = hubClient.getSubscriber();\n         boolean unsubscribeSuccess = false;\n         try {\n@@ -718,7 +732,7 @@ public void testSyncHubUnsubscribeWithInvalidSubscriberId() throws Exception {\n \n     @Test\n     public void testAsyncHubUnsubscribeWithInvalidSubscriberId() throws Exception {\n-        Client hubClient = new HedwigHubClient(new ClientConfiguration());\n+        Client hubClient = new HedwigHubClient(new HubClientConfiguration());\n         Subscriber hubSubscriber = hubClient.getSubscriber();\n         hubSubscriber.asyncUnsubscribe(getTopic(0), localSubscriberId, new TestCallback(queue), null);\n         assertFalse(queue.take());"},{"sha":"22d2bfa116ab7f68091f5d9ab6a246b520da22aa","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -40,6 +40,7 @@\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.integration.TestHedwigHub.TestCallback;\n import org.apache.hedwig.server.integration.TestHedwigHub.TestMessageHandler;\n+import org.apache.hedwig.util.HedwigSocketAddress;\n \n @RunWith(Parameterized.class)\n public class TestHedwigRegion extends HedwigRegionTestBase {\n@@ -69,6 +70,10 @@ public int getRetryRemoteSubscribeThreadRunInterval() {\n         public boolean isSubscriptionChannelSharingEnabled() {\n             return isSubscriptionChannelSharingEnabled;\n         }\n+        @Override\n+        public HedwigSocketAddress getDefaultServerHedwigSocketAddress() {\n+            return regionHubAddresses.get(0).get(0);\n+        }\n     }\n \n     protected ServerConfiguration getServerConfiguration(int serverPort, int sslServerPort, String regionName) {"},{"sha":"0d913b8fc6f432f09ba6185f3098aac902702a18","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -31,6 +31,7 @@\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.Test;\n \n+import org.apache.bookkeeper.test.PortManager;\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.HedwigClient;\n@@ -125,7 +126,7 @@ public void testUncaughtExceptionInNettyThread() throws Exception {\n \n         SynchronousQueue<Throwable> queue = new SynchronousQueue<Throwable>();\n         RecordingUncaughtExceptionHandler uncaughtExceptionHandler = new RecordingUncaughtExceptionHandler(queue);\n-        final int port = 9876;\n+        final int port = PortManager.nextFreePort();\n \n         PubSubServer server = startServer(uncaughtExceptionHandler, port, new TopicManagerInstantiator() {\n \n@@ -155,8 +156,8 @@ public void testUncaughtExceptionInZKThread() throws Exception {\n \n         SynchronousQueue<Throwable> queue = new SynchronousQueue<Throwable>();\n         RecordingUncaughtExceptionHandler uncaughtExceptionHandler = new RecordingUncaughtExceptionHandler(queue);\n-        final int port = 9876;\n-        final String hostPort = \"127.0.0.1:33221\";\n+        final int port = PortManager.nextFreePort();\n+        final String hostPort = \"127.0.0.1:\" + PortManager.nextFreePort();\n \n         PubSubServer server = startServer(uncaughtExceptionHandler, port, new TopicManagerInstantiator() {\n "},{"sha":"6c5746f8518698e509fb71d541aabccc70b3c5cb","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -25,6 +25,8 @@\n import java.util.List;\n import java.util.Random;\n \n+import org.apache.bookkeeper.test.PortManager;\n+\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n@@ -89,8 +91,6 @@ protected Bookie newBookie(ServerConfiguration conf)\n     // BookKeeper Server variables\n     private List<BookieServer> bookiesList;\n     private List<ServerConfiguration> bkConfsList;\n-    private int initialPort = 5000;\n-    private int nextPort = initialPort;\n \n     // String constants used for creating the bookie server files.\n     private static final String PREFIX = \"bookie\";\n@@ -198,10 +198,11 @@ public void tearDownOneBookieServer() throws Exception {\n     }\n     \n     public void startUpNewBookieServer() throws Exception {\n+        int port = PortManager.nextFreePort();\n         File tmpDir = FileUtils.createTempDirectory(\n-                PREFIX + (nextPort - initialPort), SUFFIX);\n+                PREFIX + port, SUFFIX);\n         ServerConfiguration conf = newServerConfiguration(\n-                nextPort++, hostPort, tmpDir, new File[] { tmpDir });\n+                port, hostPort, tmpDir, new File[] { tmpDir });\n         bookiesList.add(startBookie(conf));\n         bkConfsList.add(conf);\n     }"},{"sha":"bb98032c0c96a0718477deacc4f57530ff11bc49","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -71,7 +71,7 @@ protected ServerConfiguration getServerConfiguration(int serverPort, int sslServ\n         return new SmallReadAheadServerConfiguration(serverPort, sslServerPort);\n     }\n \n-    private class MessageBoundClientConfiguration extends ClientConfiguration {\n+    private class MessageBoundClientConfiguration extends HubClientConfiguration {\n         final int messageBound;\n \n         public MessageBoundClientConfiguration(int bound) {\n@@ -152,7 +152,7 @@ public void testBasicBounding() throws Exception {\n     public void testMultipleSubscribers() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"multiSubTopic\");\n \n-        Client client = new HedwigClient(new ClientConfiguration());\n+        Client client = new HedwigClient(new HubClientConfiguration());\n         Publisher pub = client.getPublisher();\n         Subscriber sub = client.getSubscriber();\n \n@@ -194,7 +194,7 @@ public void testMultipleSubscribers() throws Exception {\n     public void testUpdateMessageBound() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"UpdateMessageBound\");\n \n-        Client client = new HedwigClient(new ClientConfiguration());\n+        Client client = new HedwigClient(new HubClientConfiguration());\n         Publisher pub = client.getPublisher();\n         Subscriber sub = client.getSubscriber();\n "},{"sha":"ca8cec62883c7bc6a68363ae3eedb0f1cb63cf37","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -54,14 +54,17 @@\n     ByteString topic = ByteString.copyFromUtf8(\"DeadLockTopic\");\n     ByteString subscriberId = ByteString.copyFromUtf8(\"dl\");\n \n+    public TestDeadlock() {\n+        super(1);\n+    }\n+\n     @Override\n     @Before\n     public void setUp() throws Exception {\n-        numServers = 1;\n         numBookies = 1;\n         readDelay = 1000L; // 1s\n         super.setUp();\n-        client = new HedwigClient(new ClientConfiguration());\n+        client = new HedwigClient(new HubClientConfiguration());\n         publisher = client.getPublisher();\n         subscriber = client.getSubscriber();\n     }"},{"sha":"384da849f7fffc9dc971156883d6ddbdaf832029","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -30,6 +30,7 @@\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.ConcurrencyUtils;\n+import org.apache.hedwig.util.HedwigSocketAddress;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -129,7 +130,7 @@ protected ServerConfiguration getServerConfiguration(int serverPort, int sslServ\n         return new NewHubServerConfiguration(serverPort, sslServerPort);\n     }\n \n-    protected class TestClientConfiguration extends ClientConfiguration {\n+    protected class TestClientConfiguration extends HubClientConfiguration {\n         @Override\n         public boolean isAutoSendConsumeMessageEnabled() {\n             return true;"},{"sha":"cfe110bb7f54b8f0df505fcf9c3f4ed9e2d2a34e","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -85,7 +85,7 @@ public void operationFailed(Object ctx,\n     @Override\n     public void setUp() throws Exception {\n         super.setUp();\n-        client = new HedwigClient(new ClientConfiguration());\n+        client = new HedwigClient(new HubClientConfiguration());\n \n         publisher = client.getPublisher();\n         subscriber = client.getSubscriber();"},{"sha":"4213059af0fb2cfedc21b1cfe7d1684637735846","filename":"hedwig-server/src/test/java/org/apache/hedwig/zookeeper/ZooKeeperTestBase.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/zookeeper/ZooKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/b3a05cd74652affe4a69f40609de0b92769e05a4/hedwig-server/src/test/java/org/apache/hedwig/zookeeper/ZooKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/zookeeper/ZooKeeperTestBase.java?ref=b3a05cd74652affe4a69f40609de0b92769e05a4","patch":"@@ -29,6 +29,7 @@\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.util.ConcurrencyUtils;\n import org.apache.hedwig.util.Callback;\n+import org.apache.bookkeeper.test.PortManager;\n \n /**\n  * This is a base class for any tests that need a ZooKeeper client/server setup.\n@@ -78,6 +79,7 @@ public void processResult(int rc, String path, Object ctx) {\n     @Override\n     @Before\n     public void setUp() throws Exception {\n+        hostPort = \"127.0.0.1:\" + PortManager.nextFreePort();\n         super.setUp();\n         zk = createClient();\n     }"}]}

