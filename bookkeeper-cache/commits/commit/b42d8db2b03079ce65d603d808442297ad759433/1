{"sha":"b42d8db2b03079ce65d603d808442297ad759433","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiNDJkOGRiMmIwMzA3OWNlNjVkNjAzZDgwODQ0MjI5N2FkNzU5NDMz","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-04-10T03:58:40Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-04-10T03:58:40Z"},"message":"BOOKKEEPER-917: LocalBookKeeperTest seems to be silently failing\n\nFixing the `AuthHandler` to use localhost address when passed a `LocalChannel`\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #34 from merlimat/bk-917","tree":{"sha":"4398e5e5bb1568e1033510114a059121028dd29c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4398e5e5bb1568e1033510114a059121028dd29c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b42d8db2b03079ce65d603d808442297ad759433","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b42d8db2b03079ce65d603d808442297ad759433","html_url":"https://github.com/apache/bookkeeper/commit/b42d8db2b03079ce65d603d808442297ad759433","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b42d8db2b03079ce65d603d808442297ad759433/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"f2bc62b85e9bb855416fa4ea424cfd19ae9944e5","url":"https://api.github.com/repos/apache/bookkeeper/commits/f2bc62b85e9bb855416fa4ea424cfd19ae9944e5","html_url":"https://github.com/apache/bookkeeper/commit/f2bc62b85e9bb855416fa4ea424cfd19ae9944e5"}],"stats":{"total":39,"additions":23,"deletions":16},"files":[{"sha":"ab49da70f331f5a098749450e779db56688edabb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java","status":"modified","additions":23,"deletions":16,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/b42d8db2b03079ce65d603d808442297ad759433/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/b42d8db2b03079ce65d603d808442297ad759433/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/AuthHandler.java?ref=b42d8db2b03079ce65d603d808442297ad759433","patch":"@@ -21,29 +21,25 @@\n package org.apache.bookkeeper.proto;\n \n import java.io.IOException;\n+import java.net.Inet4Address;\n import java.net.InetSocketAddress;\n import java.net.SocketAddress;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.concurrent.atomic.AtomicLong;\n \n-import org.jboss.netty.channel.SimpleChannelHandler;\n-import org.jboss.netty.channel.ChannelHandlerContext;\n-import org.jboss.netty.channel.MessageEvent;\n-import org.jboss.netty.channel.ChannelStateEvent;\n-import org.jboss.netty.channel.Channel;\n-import org.jboss.netty.channel.DefaultExceptionEvent;\n-import org.jboss.netty.channel.ExceptionEvent;\n-\n import org.apache.bookkeeper.auth.BookieAuthProvider;\n import org.apache.bookkeeper.auth.ClientAuthProvider;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.AddRequest;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.AddResponse;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.OperationType;\n-import org.apache.bookkeeper.proto.BookkeeperProtocol.StatusCode;\n+import org.apache.bookkeeper.proto.BookkeeperProtocol.AuthMessage;\n+import org.jboss.netty.channel.Channel;\n+import org.jboss.netty.channel.ChannelHandlerContext;\n+import org.jboss.netty.channel.ChannelStateEvent;\n+import org.jboss.netty.channel.DefaultExceptionEvent;\n+import org.jboss.netty.channel.MessageEvent;\n+import org.jboss.netty.channel.SimpleChannelHandler;\n+import org.jboss.netty.channel.local.LocalChannel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -68,8 +64,12 @@ public void channelOpen(ChannelHandlerContext ctx,\n             if (remote instanceof InetSocketAddress) {\n                 authProvider = authProviderFactory.newProvider((InetSocketAddress)remote,\n                         new AuthHandshakeCompleteCallback());\n+            } else if (ctx.getChannel() instanceof LocalChannel) {\n+                authProvider = authProviderFactory.newProvider(new InetSocketAddress(Inet4Address.getLocalHost(), 0),\n+                        new AuthHandshakeCompleteCallback());\n             } else {\n-                LOG.error(\"Unknown socket type {} for {}\", remote.getClass(), remote);\n+                LOG.error(\"Unknown channel ({}) or socket type {} for {}\",\n+                        new Object[] { ctx.getChannel(), remote != null ? remote.getClass() : null, remote });\n             }\n             super.channelOpen(ctx, e);\n         }\n@@ -229,9 +229,16 @@ public void channelConnected(ChannelHandlerContext ctx,\n             if (remote instanceof InetSocketAddress) {\n                 authProvider = authProviderFactory.newProvider((InetSocketAddress)remote,\n                         new AuthHandshakeCompleteCallback(ctx));\n-                authProvider.init(new AuthRequestCallback(ctx));\n+            } else if (ctx.getChannel() instanceof LocalChannel) {\n+                authProvider = authProviderFactory.newProvider(new InetSocketAddress(Inet4Address.getLocalHost(), 0),\n+                        new AuthHandshakeCompleteCallback(ctx));\n             } else {\n-                LOG.error(\"Unknown socket type {} for {}\", remote.getClass(), remote);\n+                LOG.error(\"Unknown channel ({}) or socket type {} for {}\",\n+                        new Object[] { ctx.getChannel(), remote != null ? remote.getClass() : null, remote });\n+            }\n+\n+            if (authProvider != null) {\n+                authProvider.init(new AuthRequestCallback(ctx));\n             }\n             super.channelConnected(ctx, e);\n         }"}]}

