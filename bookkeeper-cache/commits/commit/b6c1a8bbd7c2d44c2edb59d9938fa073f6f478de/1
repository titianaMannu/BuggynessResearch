{"sha":"b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiNmMxYThiYmQ3YzJkNDRjMmVkYjU5ZDk5MzhmYTA3M2Y2ZjQ3OGRl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T11:33:11Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T11:33:11Z"},"message":"BOOKKEEPER-365: Ledger will never recover if one of the quorum bookie is down forever and others dont have entry (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421235 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f077dfa20f89257cf601590e4132c3eb08fd53b2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f077dfa20f89257cf601590e4132c3eb08fd53b2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","html_url":"https://github.com/apache/bookkeeper/commit/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d","url":"https://api.github.com/repos/apache/bookkeeper/commits/1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d","html_url":"https://github.com/apache/bookkeeper/commit/1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d"}],"stats":{"total":136,"additions":118,"deletions":18},"files":[{"sha":"c0655c22d8c32e507529a7f6b20b1203534f62cb","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","patch":"@@ -136,6 +136,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-493: moveLedgerIndexFile might have chance pickup same directory (sijie via ivank)\n \n+        BOOKKEEPER-365: Ledger will never recover if one of the quorum bookie is down forever and others dont have entry (sijie via ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"cf01f26b5a2fbabedfb673d2f03fe0a671c70832","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/apache/bookkeeper/blob/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","patch":"@@ -52,12 +52,14 @@\n     long numPendingEntries;\n     long startEntryId;\n     long endEntryId;\n+    final int maxMissedReadsAllowed;\n \n     private class LedgerEntryRequest extends LedgerEntry {\n         int nextReplicaIndexToReadFrom = 0;\n         AtomicBoolean complete = new AtomicBoolean(false);\n \n         int firstError = BKException.Code.OK;\n+        int numMissedEntryReads = 0;\n \n         final ArrayList<InetSocketAddress> ensemble;\n \n@@ -71,6 +73,14 @@ void sendNextRead() {\n             if (nextReplicaIndexToReadFrom >= lh.metadata.getWriteQuorumSize()) {\n                 // we are done, the read has failed from all replicas, just fail the\n                 // read\n+\n+                // Do it a bit perssimistically, only when finished trying all replicas\n+                // to check whether we received more missed reads than maxMissedReadsAllowed\n+                if (BKException.Code.BookieHandleNotAvailableException == firstError &&\n+                    numMissedEntryReads > maxMissedReadsAllowed) {\n+                    firstError = BKException.Code.NoSuchEntryException;\n+                }\n+\n                 submitCallback(firstError);\n                 return;\n             }\n@@ -88,8 +98,17 @@ void sendNextRead() {\n         }\n \n         void logErrorAndReattemptRead(String errMsg, int rc) {\n-            if (firstError == BKException.Code.OK) {\n+            if (BKException.Code.OK == firstError ||\n+                BKException.Code.NoSuchEntryException == firstError) {\n                 firstError = rc;\n+            } else if (BKException.Code.BookieHandleNotAvailableException == firstError &&\n+                       BKException.Code.NoSuchEntryException != rc) {\n+                // if other exception rather than NoSuchEntryException is returned\n+                // we need to update firstError to indicate that it might be a valid read but just failed.\n+                firstError = rc;\n+            }\n+            if (BKException.Code.NoSuchEntryException == rc) {\n+                ++numMissedEntryReads;\n             }\n \n             int bookieIndex = lh.distributionSchedule.getWriteSet(entryId).get(nextReplicaIndexToReadFrom - 1);\n@@ -141,6 +160,7 @@ public String toString() {\n         this.startEntryId = startEntryId;\n         this.endEntryId = endEntryId;\n         numPendingEntries = endEntryId - startEntryId + 1;\n+        maxMissedReadsAllowed = lh.metadata.getWriteQuorumSize() - lh.metadata.getAckQuorumSize();\n     }\n \n     public void initiate() throws InterruptedException {\n@@ -175,20 +195,6 @@ public void readEntryComplete(int rc, long ledgerId, final long entryId, final C\n \n         lh.opCounterSem.release();\n \n-        // if we just read only one entry, and this entry is not existed (in recoveryRead case)\n-        // we don't need to do ReattemptRead, otherwise we could not handle following case:\n-        //\n-        // an empty ledger with quorum (bk1, bk2), bk2 is failed forever.\n-        // bk1 return NoLedgerException, client do ReattemptRead to bk2 but bk2 isn't connected\n-        // so the read 0 entry would failed. this ledger could never be closed.\n-        if (startEntryId == endEntryId) {\n-            if (BKException.Code.NoSuchLedgerExistsException == rc ||\n-                BKException.Code.NoSuchEntryException == rc) {\n-                submitCallback(rc);\n-                return;\n-            }\n-        }\n-\n         if (rc != BKException.Code.OK) {\n             entry.logErrorAndReattemptRead(\"Error: \" + BKException.getMessage(rc), rc);\n             return;"},{"sha":"b78bacccddb485cb97ddb9c74fcacbf635bae189","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","status":"renamed","additions":69,"deletions":1,"changes":70,"blob_url":"https://github.com/apache/bookkeeper/blob/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java?ref=b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","patch":"@@ -1,4 +1,4 @@\n-package org.apache.bookkeeper.test;\n+package org.apache.bookkeeper.client;\n \n /*\n  *\n@@ -21,10 +21,21 @@\n  *\n  */\n \n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+\n import org.junit.*;\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.test.BaseTestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -149,4 +160,61 @@ public void testLedgerRecoveryWithNotEnoughBookies() throws Exception {\n         assertEquals(numEntries - 1, afterlh.getLastAddConfirmed());\n     }\n \n+    @Test\n+    public void testLedgerRecoveryWithSlowBookie() throws Exception {\n+        for (int i = 0; i < 3; i++) {\n+            LOG.info(\"TestLedgerRecoveryWithAckQuorum @ slow bookie {}\", i);\n+            ledgerRecoveryWithSlowBookie(3, 3, 2, 1, i);\n+        }\n+    }\n+\n+    private void ledgerRecoveryWithSlowBookie(int ensembleSize, int writeQuorumSize,\n+        int ackQuorumSize, int numEntries, int slowBookieIdx) throws Exception {\n+\n+        // Create a ledger\n+        LedgerHandle beforelh = null;\n+        beforelh = bkc.createLedger(ensembleSize, writeQuorumSize, ackQuorumSize,\n+                                    digestType, \"\".getBytes());\n+\n+        // kill first bookie server to start a fake one to simulate a slow bookie\n+        // and failed to add entry on crash\n+        // until write succeed\n+        InetSocketAddress host = beforelh.getLedgerMetadata().currentEnsemble.get(slowBookieIdx);\n+        ServerConfiguration conf = killBookie(host);\n+\n+        Bookie fakeBookie = new Bookie(conf) {\n+            @Override\n+            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                // drop request to simulate a slow and failed bookie\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, fakeBookie));\n+\n+        // avoid not-enough-bookies case\n+        startNewBookie();\n+\n+        // write would still succeed with 2 bookies ack\n+        String tmp = \"BookKeeper is cool!\";\n+        for (int i = 0; i < numEntries; i++) {\n+            beforelh.addEntry(tmp.getBytes());\n+        }\n+\n+        conf = killBookie(host);\n+        bsConfs.add(conf);\n+        // the bookie goes normally\n+        bs.add(startBookie(conf));\n+\n+        /*\n+         * Try to open ledger.\n+         */\n+        LedgerHandle afterlh = bkc.openLedger(beforelh.getId(), digestType, \"\".getBytes());\n+\n+        /*\n+         * Check if has recovered properly.\n+         */\n+        assertEquals(numEntries - 1, afterlh.getLastAddConfirmed());\n+    }\n+\n }","previous_filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java"},{"sha":"749fb12f48cd7f9fbc7f1d80f6ef8b01f41e60c4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":26,"deletions":2,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","patch":"@@ -29,13 +29,14 @@\n import java.util.List;\n import java.util.concurrent.CountDownLatch;\n \n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.metastore.InMemoryMetaStore;\n import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n@@ -389,8 +390,31 @@ protected BookieServer startBookie(ServerConfiguration conf)\n         return server;\n     }\n \n+    /**\n+     * Start a bookie with the given bookie instance.\n+     */\n+    protected BookieServer startBookie(ServerConfiguration conf, final Bookie b)\n+            throws IOException, InterruptedException, KeeperException, BookieException {\n+        BookieServer server = new BookieServer(conf) {\n+            @Override\n+            protected Bookie newBookie(ServerConfiguration conf) {\n+                return b;\n+            }\n+        };\n+        server.start();\n+\n+        int port = conf.getBookiePort();\n+        while(bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null) {\n+            Thread.sleep(500);\n+        }\n+\n+        bkc.readBookiesBlocking();\n+        LOG.info(\"New bookie on port \" + port + \" has been created.\");\n+\n+        return server;\n+    }\n+\n     public void setMetastoreImplClass(AbstractConfiguration conf) {\n         conf.setMetastoreImplClass(InMemoryMetaStore.class.getName());\n     }\n-\n }"}]}

