{"sha":"ba01aed276fc847926310376520d3ec513503c61","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYTAxYWVkMjc2ZmM4NDc5MjYzMTAzNzY1MjBkM2VjNTEzNTAzYzYx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T16:31:09Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T16:31:09Z"},"message":"BOOKKEEPER-319: Manage auditing and replication processes (Vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1394145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5c171f708b96ee07ebbd07adf97e54fc0aa70d8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a5c171f708b96ee07ebbd07adf97e54fc0aa70d8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ba01aed276fc847926310376520d3ec513503c61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ba01aed276fc847926310376520d3ec513503c61","html_url":"https://github.com/apache/bookkeeper/commit/ba01aed276fc847926310376520d3ec513503c61","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ba01aed276fc847926310376520d3ec513503c61/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f57cbe507d0f366fa76e0e163e867e4a7f93d958","url":"https://api.github.com/repos/apache/bookkeeper/commits/f57cbe507d0f366fa76e0e163e867e4a7f93d958","html_url":"https://github.com/apache/bookkeeper/commit/f57cbe507d0f366fa76e0e163e867e4a7f93d958"}],"stats":{"total":356,"additions":355,"deletions":1},"files":[{"sha":"f590ee3536d5c5e86225295366cdee893f6f1f90","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ba01aed276fc847926310376520d3ec513503c61/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/ba01aed276fc847926310376520d3ec513503c61/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=ba01aed276fc847926310376520d3ec513503c61","patch":"@@ -148,6 +148,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-278: Ability to disable auto recovery temporarily (rakeshr via ivank)\n \n+        BOOKKEEPER-319: Manage auditing and replication processes (Vinay via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)"},{"sha":"d77414195079d4d23b7e817393e5c6cc67b90ce3","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=ba01aed276fc847926310376520d3ec513503c61","patch":"@@ -78,6 +78,7 @@ bookkeeper_help() {\n Usage: bookkeeper <command>\n where command is one of:\n     bookie              Run a bookie server\n+    autorecovery        Run AutoRecovery service daemon\n     localbookie <n>     Run a test ensemble of <n> bookies locally\n     upgrade             Upgrade bookie filesystem\n     shell               Run shell for admin commands\n@@ -165,6 +166,8 @@ OPTS=\"$OPTS -Dbookkeeper.log.file=$BOOKIE_LOG_FILE\"\n cd \"$BK_HOME\"\n if [ $COMMAND == \"bookie\" ]; then\n     exec java $OPTS $JMX_ARGS org.apache.bookkeeper.proto.BookieServer --conf $BOOKIE_CONF $@\n+elif [ $COMMAND == \"autorecovery\" ]; then\n+    exec java $OPTS $JMX_ARGS org.apache.bookkeeper.replication.AutoRecoveryMain --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"localbookie\" ]; then\n     NUMBER=$1\n     shift"},{"sha":"92df65b485705245c4d66d3d4413d075cc10e45a","filename":"bookkeeper-server/bin/bookkeeper-daemon.sh","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/bin/bookkeeper-daemon.sh","raw_url":"https://github.com/apache/bookkeeper/raw/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/bin/bookkeeper-daemon.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper-daemon.sh?ref=ba01aed276fc847926310376520d3ec513503c61","patch":"@@ -61,6 +61,9 @@ case $command in\n     (bookie)\n         echo \"doing $startStop $command ...\"\n         ;;\n+    (autorecovery)\n+        echo \"doing $startStop $command ...\"\n+        ;;\n     (*)\n         echo \"Error: unknown service name $command\"\n         usage"},{"sha":"067832cd25c3eed1e6ceb0595039fe090414cce9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=ba01aed276fc847926310376520d3ec513503c61","patch":"@@ -66,7 +66,7 @@\n     private final ZooKeeper zkc;\n \n     private String myVote;\n-    private Auditor auditor;\n+    Auditor auditor;\n     private volatile boolean running = true;\n \n     /**"},{"sha":"acba7c23a1afcdf581253ea220d5d35e19de6e76","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"added","additions":267,"deletions":0,"changes":267,"blob_url":"https://github.com/apache/bookkeeper/blob/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=ba01aed276fc847926310376520d3ec513503c61","patch":"@@ -0,0 +1,267 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.MalformedURLException;\n+import java.net.UnknownHostException;\n+\n+import org.apache.bookkeeper.bookie.ExitCode;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.commons.cli.BasicParser;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.ParseException;\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Class to start/stop the AutoRecovery daemons Auditor and ReplicationWorker\n+ */\n+public class AutoRecoveryMain {\n+    private static final Logger LOG = LoggerFactory\n+            .getLogger(AutoRecoveryMain.class);\n+\n+    private ServerConfiguration conf;\n+    private ZooKeeper zk;\n+    AuditorElector auditorElector;\n+    ReplicationWorker replicationWorker;\n+    private AutoRecoveryDeathWatcher deathWatcher;\n+    private int exitCode;\n+    private volatile boolean shuttingDown = false;\n+\n+    public AutoRecoveryMain(ServerConfiguration conf) throws IOException,\n+            InterruptedException, KeeperException, UnavailableException,\n+            CompatibilityException {\n+        this.conf = conf;\n+        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(),\n+                conf.getZkTimeout());\n+        Watcher watcher = new Watcher() {\n+            @Override\n+            public void process(WatchedEvent event) {\n+                // Check for expired connection.\n+                if (event.getState().equals(Watcher.Event.KeeperState.Expired)) {\n+                    LOG.error(\"ZK client connection to the\"\n+                            + \" ZK server has expired!\");\n+                    shutdown(ExitCode.ZK_EXPIRED);\n+                }\n+            }\n+        };\n+        zk.register(watcher);\n+        auditorElector = new AuditorElector(\n+                getMyBookieAddress(conf).toString(), conf, zk);\n+        replicationWorker = new ReplicationWorker(zk, conf,\n+                getMyBookieAddress(conf));\n+        deathWatcher = new AutoRecoveryDeathWatcher(this);\n+    }\n+\n+    private static InetSocketAddress getMyBookieAddress(ServerConfiguration conf)\n+            throws UnknownHostException {\n+        return new InetSocketAddress(InetAddress.getLocalHost()\n+                .getHostAddress(), conf.getBookiePort());\n+    }\n+\n+    /*\n+     * Start daemons\n+     */\n+    public void start() throws UnavailableException {\n+        auditorElector.doElection();\n+        replicationWorker.start();\n+        deathWatcher.start();\n+    }\n+\n+    /*\n+     * Waits till all daemons joins\n+     */\n+    public void join() throws InterruptedException {\n+        deathWatcher.join();\n+    }\n+\n+    /*\n+     * Shutdown all daemons gracefully\n+     */\n+    public void shutdown() {\n+        shutdown(ExitCode.OK);\n+    }\n+\n+    private void shutdown(int exitCode) {\n+        if (shuttingDown) {\n+            return;\n+        }\n+        shuttingDown = true;\n+        this.exitCode = exitCode;\n+        try {\n+            deathWatcher.interrupt();\n+            deathWatcher.join();\n+        } catch (InterruptedException e) {\n+            // Ignore\n+        }\n+        auditorElector.shutdown();\n+        replicationWorker.shutdown();\n+        try {\n+            zk.close();\n+        } catch (InterruptedException e) {\n+            // Ignore\n+        }\n+    }\n+\n+    private int getExitCode() {\n+        return exitCode;\n+    }\n+\n+    /*\n+     * DeathWatcher for AutoRecovery daemons.\n+     */\n+    private static class AutoRecoveryDeathWatcher extends Thread {\n+        private int watchInterval;\n+        private AutoRecoveryMain autoRecoveryMain;\n+\n+        public AutoRecoveryDeathWatcher(AutoRecoveryMain autoRecoveryMain) {\n+            super(\"AutoRecoveryDeathWatcher-\"\n+                    + autoRecoveryMain.conf.getBookiePort());\n+            this.autoRecoveryMain = autoRecoveryMain;\n+            watchInterval = autoRecoveryMain.conf.getDeathWatchInterval();\n+        }\n+\n+        @Override\n+        public void run() {\n+            while (true) {\n+                try {\n+                    Thread.sleep(watchInterval);\n+                } catch (InterruptedException ie) {\n+                    break;\n+                }\n+                // If any one service not running, then shutdown peer.\n+                if (!autoRecoveryMain.auditorElector.isRunning()\n+                        || !autoRecoveryMain.replicationWorker.isRunning()) {\n+                    autoRecoveryMain.shutdown();\n+                    break;\n+                }\n+            }\n+        }\n+    }\n+\n+    private static final Options opts = new Options();\n+    static {\n+        opts.addOption(\"c\", \"conf\", true, \"Bookie server configuration\");\n+        opts.addOption(\"h\", \"help\", false, \"Print help message\");\n+    }\n+\n+    /*\n+     * Print usage\n+     */\n+    private static void printUsage() {\n+        HelpFormatter hf = new HelpFormatter();\n+        hf.printHelp(\"AutoRecoveryMain [options]\\n\", opts);\n+    }\n+\n+    /*\n+     * load configurations from file.\n+     */\n+    private static void loadConfFile(ServerConfiguration conf, String confFile)\n+            throws IllegalArgumentException {\n+        try {\n+            conf.loadConf(new File(confFile).toURI().toURL());\n+        } catch (MalformedURLException e) {\n+            LOG.error(\"Could not open configuration file: \" + confFile, e);\n+            throw new IllegalArgumentException();\n+        } catch (ConfigurationException e) {\n+            LOG.error(\"Malformed configuration file: \" + confFile, e);\n+            throw new IllegalArgumentException();\n+        }\n+        LOG.info(\"Using configuration file \" + confFile);\n+    }\n+\n+    /*\n+     * Parse console args\n+     */\n+    private static ServerConfiguration parseArgs(String[] args)\n+            throws IllegalArgumentException {\n+        try {\n+            BasicParser parser = new BasicParser();\n+            CommandLine cmdLine = parser.parse(opts, args);\n+\n+            if (cmdLine.hasOption('h')) {\n+                throw new IllegalArgumentException();\n+            }\n+\n+            ServerConfiguration conf = new ServerConfiguration();\n+            String[] leftArgs = cmdLine.getArgs();\n+\n+            if (cmdLine.hasOption('c')) {\n+                if (null != leftArgs && leftArgs.length > 0) {\n+                    throw new IllegalArgumentException();\n+                }\n+                String confFile = cmdLine.getOptionValue(\"c\");\n+                loadConfFile(conf, confFile);\n+            }\n+\n+            if (null != leftArgs && leftArgs.length > 0) {\n+                throw new IllegalArgumentException();\n+            }\n+            return conf;\n+        } catch (ParseException e) {\n+            throw new IllegalArgumentException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        ServerConfiguration conf = null;\n+        try {\n+            conf = parseArgs(args);\n+        } catch (IllegalArgumentException iae) {\n+            LOG.error(\"Error parsing command line arguments : \", iae);\n+            System.err.println(iae.getMessage());\n+            printUsage();\n+            System.exit(ExitCode.INVALID_CONF);\n+        }\n+\n+        try {\n+            final AutoRecoveryMain autoRecoveryMain = new AutoRecoveryMain(conf);\n+            autoRecoveryMain.start();\n+            Runtime.getRuntime().addShutdownHook(new Thread() {\n+                @Override\n+                public void run() {\n+                    autoRecoveryMain.shutdown();\n+                    LOG.info(\"Shutdown AutoRecoveryMain successfully\");\n+                }\n+            });\n+            LOG.info(\"Register shutdown hook successfully\");\n+            autoRecoveryMain.join();\n+            System.exit(autoRecoveryMain.getExitCode());\n+        } catch (Exception e) {\n+            LOG.error(\"Exception running AutoRecoveryMain : \", e);\n+            System.exit(ExitCode.SERVER_EXCEPTION);\n+        }\n+    }\n+}"},{"sha":"463f394b9708b671f72bdf755a6c40f68217dd3e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=ba01aed276fc847926310376520d3ec513503c61","patch":"@@ -284,6 +284,9 @@ public void run() {\n      * Stop the replication worker service\n      */\n     public void shutdown() {\n+        if (!workerRunning) {\n+            return;\n+        }\n         workerRunning = false;\n         try {\n             underreplicationManager.close();\n@@ -310,6 +313,13 @@ public void shutdown() {\n         }\n     }\n \n+    /**\n+     * Gives the running status of ReplicationWorker\n+     */\n+    boolean isRunning() {\n+        return workerRunning;\n+    }\n+\n     private boolean isTargetBookieExistsInFragmentEnsemble(LedgerHandle lh,\n             LedgerFragment ledgerFragment) {\n         List<InetSocketAddress> ensemble = ledgerFragment.getEnsemble();"},{"sha":"069a171a079f7eb3b87ef033cadaf4146f07952d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/ba01aed276fc847926310376520d3ec513503c61/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java?ref=ba01aed276fc847926310376520d3ec513503c61","patch":"@@ -0,0 +1,69 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+\n+/*\n+ * Test the AuditorPeer\n+ */\n+public class AutoRecoveryMainTest extends BookKeeperClusterTestCase {\n+\n+    public AutoRecoveryMainTest() {\n+        super(3);\n+    }\n+\n+    /*\n+     * test the startup of the auditorElector and RW.\n+     */\n+    public void testStartup() throws Exception {\n+        AutoRecoveryMain main = new AutoRecoveryMain(bsConfs.get(0));\n+        try {\n+            main.start();\n+            Thread.sleep(500);\n+            assertTrue(\"AuditorElector should be running\",\n+                    main.auditorElector.isRunning());\n+            assertTrue(\"Replication worker should be running\",\n+                    main.replicationWorker.isRunning());\n+        } finally {\n+            main.shutdown();\n+        }\n+    }\n+\n+    /*\n+     * Test the shutdown of all daemons\n+     */\n+    public void testShutdown() throws Exception {\n+        AutoRecoveryMain main = new AutoRecoveryMain(bsConfs.get(0));\n+        main.start();\n+        Thread.sleep(500);\n+        assertTrue(\"AuditorElector should be running\",\n+                main.auditorElector.isRunning());\n+        assertTrue(\"Replication worker should be running\",\n+                main.replicationWorker.isRunning());\n+\n+        main.shutdown();\n+        assertFalse(\"AuditorElector should not be running\",\n+                main.auditorElector.isRunning());\n+        assertFalse(\"Replication worker should not be running\",\n+                main.replicationWorker.isRunning());\n+    }\n+}"}]}

