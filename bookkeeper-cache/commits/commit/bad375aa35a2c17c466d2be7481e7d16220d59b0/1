{"sha":"bad375aa35a2c17c466d2be7481e7d16220d59b0","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYWQzNzVhYTM1YTJjMTdjNDY2ZDJiZTc0ODFlN2QxNjIyMGQ1OWIw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-02-17T10:18:00Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-02-17T10:18:00Z"},"message":"BOOKKEEPER-169: bookie hangs on reading header when encountering partial header index file (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1245369 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da458bc6e691dd6f8b5d12496c73d0d5aad2eb77","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/da458bc6e691dd6f8b5d12496c73d0d5aad2eb77"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bad375aa35a2c17c466d2be7481e7d16220d59b0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bad375aa35a2c17c466d2be7481e7d16220d59b0","html_url":"https://github.com/apache/bookkeeper/commit/bad375aa35a2c17c466d2be7481e7d16220d59b0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bad375aa35a2c17c466d2be7481e7d16220d59b0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"633a23b3a20b27a551328be2efe5f057be3c99e2","url":"https://api.github.com/repos/apache/bookkeeper/commits/633a23b3a20b27a551328be2efe5f057be3c99e2","html_url":"https://github.com/apache/bookkeeper/commit/633a23b3a20b27a551328be2efe5f057be3c99e2"}],"stats":{"total":216,"additions":206,"deletions":10},"files":[{"sha":"c4f5f55f85ba7809cf2ed6dc689520d2aba17259","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/bad375aa35a2c17c466d2be7481e7d16220d59b0/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/bad375aa35a2c17c466d2be7481e7d16220d59b0/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=bad375aa35a2c17c466d2be7481e7d16220d59b0","patch":"@@ -40,6 +40,8 @@ Trunk (unreleased changes)\n \t\n \tBOOKKEEPER-170: Bookie constructor starts a number of threads. (ivank via fpj)\n \n+        BOOKKEEPER-169: bookie hangs on reading header when encountering partial header index file (sijie via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"8ae3a307be833a87753813de895c1c8385823c9a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":30,"deletions":10,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/bad375aa35a2c17c466d2be7481e7d16220d59b0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/bad375aa35a2c17c466d2be7481e7d16220d59b0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=bad375aa35a2c17c466d2be7481e7d16220d59b0","patch":"@@ -25,6 +25,7 @@\n import java.io.IOException;\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n+import java.nio.BufferUnderflowException;\n import java.nio.channels.FileChannel;\n \n import org.slf4j.Logger;\n@@ -82,7 +83,8 @@ synchronized public void readHeader() throws IOException {\n             fc = new RandomAccessFile(lf, \"rw\").getChannel();\n             size = fc.size();\n \n-            ByteBuffer bb = ByteBuffer.allocate(1024);\n+            // avoid hang on reading partial index\n+            ByteBuffer bb = ByteBuffer.allocate((int)(Math.min(size, START_OF_DATA)));\n             while(bb.hasRemaining()) {\n                 fc.read(bb);\n             }\n@@ -95,8 +97,10 @@ synchronized public void readHeader() throws IOException {\n                 throw new IOException(\"Incompatible ledger version \" + version);\n             }\n             int length = bb.getInt();\n-            if (length < 0 || length > bb.remaining()) {\n+            if (length < 0) {\n                 throw new IOException(\"Length \" + length + \" is invalid\");\n+            } else if (length > bb.remaining()) {\n+                throw new BufferUnderflowException();\n             }\n             masterKey = new byte[length];\n             bb.get(masterKey);\n@@ -113,25 +117,41 @@ synchronized private void checkOpen(boolean create) throws IOException {\n         if (masterKey == null && !exists) {\n             throw new IOException(lf + \" not found\");\n         }\n-        ByteBuffer bb = ByteBuffer.allocate(1024);\n+\n         if (!exists) { \n             if (create) {\n                 fc = new RandomAccessFile(lf, \"rw\").getChannel();\n                 size = fc.size();\n                 if (size == 0) {\n-                    bb.putInt(signature);\n-                    bb.putInt(headerVersion);\n-                    bb.putInt(masterKey.length);\n-                    bb.put(masterKey);\n-                    bb.rewind();\n-                    fc.write(bb);\n+                    writeHeader();\n                 }\n             }\n         } else {\n-            readHeader();\n+            try {\n+                readHeader();\n+            } catch (BufferUnderflowException buf) {\n+                LOG.warn(\"Exception when reading header of {} : {}\", lf, buf);\n+                if (null != masterKey) {\n+                    LOG.warn(\"Attempting to write header of {} again.\", lf);\n+                    writeHeader();\n+                } else {\n+                    throw new IOException(\"Error reading header \" + lf);\n+                }\n+            }\n         }\n     }\n \n+    private void writeHeader() throws IOException {\n+        ByteBuffer bb = ByteBuffer.allocate((int)START_OF_DATA);\n+        bb.putInt(signature);\n+        bb.putInt(headerVersion);\n+        bb.putInt(masterKey.length);\n+        bb.put(masterKey);\n+        bb.rewind();\n+        fc.position(0);\n+        fc.write(bb);\n+    }\n+\n     synchronized public long size() throws IOException {\n         checkOpen(false);\n         long rc = size-START_OF_DATA;"},{"sha":"bc7a703de5490b1159206228726f2f4e2ede0d7b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":174,"deletions":0,"changes":174,"blob_url":"https://github.com/apache/bookkeeper/blob/bad375aa35a2c17c466d2be7481e7d16220d59b0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bad375aa35a2c17c466d2be7481e7d16220d59b0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=bad375aa35a2c17c466d2be7481e7d16220d59b0","patch":"@@ -54,6 +54,8 @@\n public class BookieJournalTest {\n     static Logger LOG = LoggerFactory.getLogger(BookieJournalTest.class);\n \n+    final Random r = new Random(System.currentTimeMillis());\n+\n     private void writeIndexFileForLedger(File indexDir, long ledgerId,\n                                          byte[] masterKey)\n             throws Exception {\n@@ -65,6 +67,42 @@ private void writeIndexFileForLedger(File indexDir, long ledgerId,\n         fi.close();\n     }\n \n+    private void writePartialIndexFileForLedger(File indexDir, long ledgerId,\n+                                                byte[] masterKey, boolean truncateToMasterKey)\n+            throws Exception {\n+        File fn = new File(indexDir, LedgerCache.getLedgerName(ledgerId));\n+        fn.getParentFile().mkdirs();\n+        FileInfo fi = new FileInfo(fn, masterKey);\n+        // force creation of index file\n+        fi.write(new ByteBuffer[]{ ByteBuffer.allocate(0) }, 0);\n+        fi.close();\n+        // file info header\n+        int headerLen = 8 + 4 + masterKey.length;\n+        // truncate the index file\n+        int leftSize;\n+        if (truncateToMasterKey) {\n+            leftSize = r.nextInt(headerLen);\n+        } else {\n+            leftSize = headerLen + r.nextInt(1024 - headerLen);\n+        }\n+        FileChannel fc = new RandomAccessFile(fn, \"rw\").getChannel();\n+        fc.truncate(leftSize);\n+        fc.close();\n+    }\n+\n+    /**\n+     * Generate meta entry with given master key\n+     */\n+    private ByteBuffer generateMetaEntry(long ledgerId, byte[] masterKey) {\n+        ByteBuffer bb = ByteBuffer.allocate(8 + 8 + 4 + masterKey.length);\n+        bb.putLong(ledgerId);\n+        bb.putLong(Bookie.METAENTRY_ID_LEDGER_KEY);\n+        bb.putInt(masterKey.length);\n+        bb.put(masterKey);\n+        bb.flip();\n+        return bb;\n+    }\n+\n     private void writeJunkJournal(File journalDir) throws Exception {\n         long logId = System.currentTimeMillis();\n         File fn = new File(journalDir, Long.toHexString(logId) + \".txn\");\n@@ -128,6 +166,35 @@ private JournalChannel writePostV2Journal(File journalDir, int numEntries) throw\n         return jc;\n     }\n \n+    private JournalChannel writePostV3Journal(File journalDir, int numEntries, byte[] masterKey) throws Exception {\n+        long logId = System.currentTimeMillis();\n+        JournalChannel jc = new JournalChannel(journalDir, logId);\n+\n+        BufferedChannel bc = jc.getBufferedChannel();\n+\n+        byte[] data = new byte[1024];\n+        Arrays.fill(data, (byte)'X');\n+        long lastConfirmed = -1;\n+        for (int i = 0; i <= numEntries; i++) {\n+            ByteBuffer packet;\n+            if (i == 0) {\n+                packet = generateMetaEntry(1, masterKey);\n+            } else {\n+                packet = ClientUtil.generatePacket(1, i, lastConfirmed, i*data.length, data).toByteBuffer();\n+            }\n+            lastConfirmed = i;\n+            ByteBuffer lenBuff = ByteBuffer.allocate(4);\n+            lenBuff.putInt(packet.remaining());\n+            lenBuff.flip();\n+\n+            bc.write(lenBuff);\n+            bc.write(packet);\n+        }\n+        bc.flush(true);\n+\n+        return jc;\n+    }\n+\n     /**\n      * test that we can open a journal written without the magic\n      * word at the start. This is for versions of bookkeeper before\n@@ -383,4 +450,111 @@ public void testTruncatedInEntryJournal() throws Exception {\n         }\n     }\n \n+    /**\n+     * Test partial index (truncate master key) with pre-v3 journals\n+     */\n+    @Test\n+    public void testPartialFileInfoPreV3Journal1() throws Exception {\n+        testPartialFileInfoPreV3Journal(true);\n+    }\n+\n+    /**\n+     * Test partial index with pre-v3 journals\n+     */\n+    @Test\n+    public void testPartialFileInfoPreV3Journal2() throws Exception {\n+        testPartialFileInfoPreV3Journal(false);\n+    }\n+\n+    /**\n+     * Test partial index file with pre-v3 journals.\n+     */\n+    private void testPartialFileInfoPreV3Journal(boolean truncateMasterKey)\n+        throws Exception {\n+        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n+        journalDir.delete();\n+        journalDir.mkdir();\n+\n+        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+\n+        writePreV2Journal(journalDir, 100);\n+        writePartialIndexFileForLedger(ledgerDir, 1, \"testPasswd\".getBytes(),\n+                                       truncateMasterKey);\n+\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(null)\n+            .setJournalDirName(journalDir.getPath())\n+            .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+\n+        if (truncateMasterKey) {\n+            try {\n+                Bookie b = new Bookie(conf);\n+                fail(\"Should not reach here!\");\n+            } catch (IOException ie) {\n+            }\n+        } else {\n+            Bookie b = new Bookie(conf);\n+\n+            b.readEntry(1, 100);\n+            try {\n+                b.readEntry(1, 101);\n+                fail(\"Shouldn't have found entry 101\");\n+            } catch (Bookie.NoEntryException e) {\n+                // correct behaviour\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test partial index (truncate master key) with post-v3 journals\n+     */\n+    @Test\n+    public void testPartialFileInfoPostV3Journal1() throws Exception {\n+        testPartialFileInfoPostV3Journal(true);\n+    }\n+\n+    /**\n+     * Test partial index with post-v3 journals\n+     */\n+    @Test\n+    public void testPartialFileInfoPostV3Journal2() throws Exception {\n+        testPartialFileInfoPostV3Journal(false);\n+    }\n+\n+    /**\n+     * Test partial index file with post-v3 journals.\n+     */\n+    private void testPartialFileInfoPostV3Journal(boolean truncateMasterKey)\n+        throws Exception {\n+        File journalDir = File.createTempFile(\"bookie\", \"journal\");\n+        journalDir.delete();\n+        journalDir.mkdir();\n+\n+        File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n+        ledgerDir.delete();\n+        ledgerDir.mkdir();\n+\n+        byte[] masterKey = \"testPasswd\".getBytes();\n+\n+        writePostV3Journal(journalDir, 100, masterKey);\n+        writePartialIndexFileForLedger(ledgerDir, 1, masterKey,\n+                                       truncateMasterKey);\n+\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(null)\n+            .setJournalDirName(journalDir.getPath())\n+            .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n+\n+        Bookie b = new Bookie(conf);\n+\n+        b.readEntry(1, 100);\n+        try {\n+            b.readEntry(1, 101);\n+            fail(\"Shouldn't have found entry 101\");\n+        } catch (Bookie.NoEntryException e) {\n+            // correct behaviour\n+        }\n+    }\n }"}]}

