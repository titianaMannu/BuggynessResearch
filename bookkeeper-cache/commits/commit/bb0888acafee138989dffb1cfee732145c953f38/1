{"sha":"bb0888acafee138989dffb1cfee732145c953f38","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYjA4ODhhY2FmZWUxMzg5ODlkZmZiMWNmZWU3MzIxNDVjOTUzZjM4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T13:56:32Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T13:56:32Z"},"message":"BOOKKEEPER-283: Improve Hedwig Console to use Hedwig Metadata Manager. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374265 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5940df2bc5c83a0b214bef5bef9b1e935f60f885","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5940df2bc5c83a0b214bef5bef9b1e935f60f885"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bb0888acafee138989dffb1cfee732145c953f38","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bb0888acafee138989dffb1cfee732145c953f38","html_url":"https://github.com/apache/bookkeeper/commit/bb0888acafee138989dffb1cfee732145c953f38","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bb0888acafee138989dffb1cfee732145c953f38/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"fbba5c91318c00d77bd62c211066ae13a14d9d00","url":"https://api.github.com/repos/apache/bookkeeper/commits/fbba5c91318c00d77bd62c211066ae13a14d9d00","html_url":"https://github.com/apache/bookkeeper/commit/fbba5c91318c00d77bd62c211066ae13a14d9d00"}],"stats":{"total":607,"additions":369,"deletions":238},"files":[{"sha":"14116232529dbc8b0d9a1741b1c06c4bb9f31a2d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/bb0888acafee138989dffb1cfee732145c953f38/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/bb0888acafee138989dffb1cfee732145c953f38/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=bb0888acafee138989dffb1cfee732145c953f38","patch":"@@ -96,6 +96,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-340: Test backward compatibility for hedwig between different versions. (sijie via ivank)\n \n+        BOOKKEEPER-283: Improve Hedwig Console to use Hedwig Metadata Manager. (sijie via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"affabffba5f3de69707f1a3f49aa6e664697a412","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","status":"modified","additions":222,"deletions":105,"changes":327,"blob_url":"https://github.com/apache/bookkeeper/blob/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java?ref=bb0888acafee138989dffb1cfee732145c953f38","patch":"@@ -24,19 +24,31 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.versioning.Versioned;\n+import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.LedgerRange;\n import org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.meta.MetadataManagerFactory;\n+import org.apache.hedwig.server.meta.SubscriptionDataManager;\n+import org.apache.hedwig.server.meta.TopicOwnershipManager;\n+import org.apache.hedwig.server.meta.TopicPersistenceManager;\n+import org.apache.hedwig.server.subscriptions.InMemorySubscriptionState;\n+import org.apache.hedwig.server.topics.HubInfo;\n+import org.apache.hedwig.server.topics.HubLoad;\n+import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.HedwigSocketAddress;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -58,16 +70,82 @@\n     // NOTE: now it is fixed passwd used in hedwig\n     static byte[] passwd = \"sillysecret\".getBytes();\n \n-    protected ZooKeeper zk;\n-    protected BookKeeper bk;\n+    protected final ZooKeeper zk;\n+    protected final BookKeeper bk;\n+    protected final MetadataManagerFactory mmFactory;\n+    protected final SubscriptionDataManager sdm;\n+    protected final TopicOwnershipManager tom;\n+    protected final TopicPersistenceManager tpm;\n+\n     // hub configurations\n-    protected ServerConfiguration serverConf;\n+    protected final ServerConfiguration serverConf;\n     // bookkeeper configurations\n-    protected ClientConfiguration bkClientConf;\n+    protected final ClientConfiguration bkClientConf;\n+\n+    protected final CountDownLatch zkReadyLatch = new CountDownLatch(1);\n \n     // Empty watcher\n-    private static class MyWatcher implements Watcher {\n+    private class MyWatcher implements Watcher {\n         public void process(WatchedEvent event) {\n+            if (Event.KeeperState.SyncConnected.equals(event.getState())) {\n+                zkReadyLatch.countDown();\n+            }\n+        }\n+    }\n+\n+    static class SyncObj<T> {\n+        boolean finished = false;\n+        boolean success = false;\n+        T value = null;\n+        PubSubException exception = null;\n+\n+        synchronized void success(T v) {\n+            finished = true;\n+            success = true;\n+            value = v;\n+            notify();\n+        }\n+\n+        synchronized void fail(PubSubException pse) {\n+            finished = true;\n+            success = false;\n+            exception = pse;\n+            notify();\n+        }\n+\n+        synchronized void block() {\n+            try {\n+                while (!finished) {\n+                    wait();\n+                }\n+            } catch (InterruptedException ie) {\n+            }\n+        }\n+\n+        synchronized boolean isSuccess() {\n+            return success;\n+        }\n+    }\n+\n+    /**\n+     * Stats of a hub\n+     */\n+    public static class HubStats {\n+        HubInfo hubInfo;\n+        HubLoad hubLoad;\n+\n+        public HubStats(HubInfo info, HubLoad load) {\n+            this.hubInfo = info;\n+            this.hubLoad = load;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"info : [\").append(hubInfo.toString().trim().replaceAll(\"\\n\", \", \"))\n+              .append(\"], load : [\").append(hubLoad.toString().trim().replaceAll(\"\\n\", \", \"))\n+              .append(\"]\");\n+            return sb.toString();\n         }\n     }\n \n@@ -90,6 +168,16 @@ public HedwigAdmin(ClientConfiguration bkConf, ServerConfiguration hubConf) thro\n             LOG.debug(\"Connecting to zookeeper \" + hubConf.getZkHost() + \", timeout = \"\n                     + hubConf.getZkTimeout());\n         }\n+        // wait until connection is ready\n+        if (!zkReadyLatch.await(hubConf.getZkTimeout() * 2, TimeUnit.MILLISECONDS)) {\n+            throw new Exception(\"Count not establish connection with ZooKeeper after \" + hubConf.getZkTimeout() * 2 + \" ms.\");\n+        }\n+\n+        // construct the metadata manager factory\n+        mmFactory = MetadataManagerFactory.newMetadataManagerFactory(hubConf, zk);\n+        tpm = mmFactory.newTopicPersistenceManager();\n+        tom = mmFactory.newTopicOwnershipManager();\n+        sdm = mmFactory.newSubscriptionDataManager();\n \n         // connect to bookkeeper\n         bk = new BookKeeper(bkClientConf, zk);\n@@ -104,6 +192,10 @@ public HedwigAdmin(ClientConfiguration bkConf, ServerConfiguration hubConf) thro\n      * @throws Exception\n      */\n     public void close() throws Exception {\n+        tpm.close();\n+        tom.close();\n+        sdm.close();\n+        mmFactory.shutdown();\n         bk.close();\n         zk.close();\n     }\n@@ -162,9 +254,31 @@ public DigestType getBkDigestType() {\n      * @throws Exception\n      */\n     public boolean hasTopic(ByteString topic) throws Exception {\n-        String topicPath = serverConf.getZkTopicPath(new StringBuilder(), topic).toString();\n-        Stat stat = zk.exists(topicPath, false);\n-        return null != stat;\n+        // current persistence info is bound with a topic, so if there is persistence info\n+        // there is topic.\n+        final SyncObj<Boolean> syncObj = new SyncObj<Boolean>();\n+        tpm.readTopicPersistenceInfo(topic, new Callback<Versioned<LedgerRanges>>() {\n+            @Override\n+            public void operationFinished(Object ctx, Versioned<LedgerRanges> result) {\n+                if (null == result) {\n+                    syncObj.success(false);\n+                } else {\n+                    syncObj.success(true);\n+                }\n+            }\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException pse) {\n+                syncObj.fail(pse);\n+            }\n+        }, syncObj);\n+\n+        syncObj.block();\n+\n+        if (!syncObj.isSuccess()) {\n+            throw syncObj.exception;\n+        }\n+\n+        return syncObj.value;\n     }\n \n     /**\n@@ -173,27 +287,29 @@ public boolean hasTopic(ByteString topic) throws Exception {\n      * @return available hubs and their loads\n      * @throws Exception\n      */\n-    public Map<HedwigSocketAddress, Integer> getAvailableHubs() throws Exception {\n+    public Map<HedwigSocketAddress, HubStats> getAvailableHubs() throws Exception {\n         String zkHubsPath = serverConf.getZkHostsPrefix(new StringBuilder()).toString();\n-        Map<HedwigSocketAddress, Integer> hubs =\n-            new HashMap<HedwigSocketAddress, Integer>();\n+        Map<HedwigSocketAddress, HubStats> hubs =\n+            new HashMap<HedwigSocketAddress, HubStats>();\n         List<String> hosts = zk.getChildren(zkHubsPath, false);\n         for (String host : hosts) {\n             String zkHubPath = serverConf.getZkHostsPrefix(new StringBuilder())\n                                          .append(\"/\").append(host).toString();\n-            int load = 0;\n+            HedwigSocketAddress addr = new HedwigSocketAddress(host);\n             try {\n                 Stat stat = new Stat();\n                 byte[] data = zk.getData(zkHubPath, false, stat);\n-                if (data != null) {\n-                    load = Integer.parseInt(new String(data));\n+                if (data == null) {\n+                    continue;\n                 }\n+                HubLoad load = HubLoad.parse(new String(data));\n+                HubInfo info = new HubInfo(addr, stat.getCzxid());\n+                hubs.put(addr, new HubStats(info, load));\n             } catch (KeeperException ke) {\n                 LOG.warn(\"Couldn't read hub data from ZooKeeper\", ke);\n             } catch (InterruptedException ie) {\n                 LOG.warn(\"Interrupted during read\", ie);\n             }\n-            hubs.put(new HedwigSocketAddress(host), load);\n         }\n         return hubs;\n     }\n@@ -204,19 +320,8 @@ public boolean hasTopic(ByteString topic) throws Exception {\n      * @return list of topics\n      * @throws Exception\n      */\n-    public List<String> getTopics() throws Exception {\n-        return zk.getChildren(serverConf.getZkTopicsPrefix(new StringBuilder()).toString(), false);\n-    }\n-\n-    /**\n-     * Return the znode path of owner of a topic\n-     *\n-     * @param topic\n-     *            Topic name\n-     * @return znode path of owner of a topic\n-     */\n-    String hubPath(ByteString topic) {\n-        return serverConf.getZkTopicPath(new StringBuilder(), topic).append(\"/hub\").toString();\n+    public Iterator<ByteString> getTopics() throws Exception {\n+        return mmFactory.getTopics();\n     }\n \n     /**\n@@ -227,28 +332,30 @@ String hubPath(ByteString topic) {\n      * @return the address of the owner of a topic\n      * @throws Exception\n      */\n-    public HedwigSocketAddress getTopicOwner(ByteString topic) throws Exception {\n-        Stat stat = new Stat();\n-        byte[] owner = null;\n-        try {\n-            owner = zk.getData(hubPath(topic), false, stat);\n-        } catch (KeeperException.NoNodeException nne) {\n-        }\n-        if (null == owner) {\n-            return null;\n+    public HubInfo getTopicOwner(ByteString topic) throws Exception {\n+        final SyncObj<HubInfo> syncObj = new SyncObj<HubInfo>();\n+        tom.readOwnerInfo(topic, new Callback<Versioned<HubInfo>>() {\n+            @Override\n+            public void operationFinished(Object ctx, Versioned<HubInfo> result) {\n+                if (null == result) {\n+                    syncObj.success(null);\n+                } else {\n+                    syncObj.success(result.getValue());\n+                }\n+            }\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException pse) {\n+                syncObj.fail(pse);\n+            }\n+        }, syncObj);\n+\n+        syncObj.block();\n+\n+        if (!syncObj.isSuccess()) {\n+            throw syncObj.exception;\n         }\n-        return new HedwigSocketAddress(new String(owner));\n-    }\n \n-    /**\n-     * Return the znode path to store ledgers info of a topic\n-     *\n-     * @param topic\n-     *          Topic name\n-     * @return znode path to store ledgers info of a topic\n-     */\n-    String ledgersPath(ByteString topic) {\n-        return serverConf.getZkTopicPath(new StringBuilder(), topic).append(\"/ledgers\").toString();\n+        return syncObj.value;\n     }\n \n     /**\n@@ -260,15 +367,29 @@ String ledgersPath(ByteString topic) {\n      * @throws Exception\n      */\n     public List<LedgerRange> getTopicLedgers(ByteString topic) throws Exception {\n-        LedgerRanges ranges = null;\n-        try {\n-            Stat stat = new Stat();\n-            byte[] ledgersData = zk.getData(ledgersPath(topic), false, stat);\n-            if (null != ledgersData) {\n-                ranges = LedgerRanges.parseFrom(ledgersData);\n+        final SyncObj<LedgerRanges> syncObj = new SyncObj<LedgerRanges>();\n+        tpm.readTopicPersistenceInfo(topic, new Callback<Versioned<LedgerRanges>>() {\n+            @Override\n+            public void operationFinished(Object ctx, Versioned<LedgerRanges> result) {\n+                if (null == result) {\n+                    syncObj.success(null);\n+                } else {\n+                    syncObj.success(result.getValue());\n+                }\n             }\n-        } catch (KeeperException.NoNodeException nne) {\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException pse) {\n+                syncObj.fail(pse);\n+            }\n+        }, syncObj);\n+\n+        syncObj.block();\n+\n+        if (!syncObj.isSuccess()) {\n+            throw syncObj.exception;\n         }\n+\n+        LedgerRanges ranges = syncObj.value;\n         if (null == ranges) {\n             return null;\n         }\n@@ -317,32 +438,6 @@ LedgerRange refreshLastLedgerRange(MessageSeqId lastSeqId, LedgerRange oldRange)\n         return LedgerRange.newBuilder().mergeFrom(oldRange).setEndSeqIdIncluded(newSeqId).build();\n     }\n \n-    /**\n-     * Return the znode path store all the subscribers of a topic.\n-     *\n-     * @param sb\n-     *          String builder to hold the znode path\n-     * @param topic\n-     *          Topic name\n-     */\n-    private StringBuilder topicSubscribersPath(StringBuilder sb, ByteString topic) {\n-        return serverConf.getZkTopicPath(sb, topic).append(\"/subscribers\");\n-    }\n-\n-    /**\n-     * Return the znode path of a subscriber of a topic.\n-     *\n-     * @param topic\n-     *          Topic name\n-     * @param subscriber\n-     *          Subscriber name\n-     */\n-\n-    private String topicSubscriberPath(ByteString topic, ByteString subscriber) {\n-        return topicSubscribersPath(new StringBuilder(), topic).append(\"/\")\n-               .append(subscriber.toStringUtf8()).toString();\n-    }\n-\n     /**\n      * Return subscriptions of a topic\n      *\n@@ -355,22 +450,36 @@ private String topicSubscriberPath(ByteString topic, ByteString subscriber) {\n         throws Exception {\n         Map<ByteString, SubscriptionState> states =\n             new HashMap<ByteString, SubscriptionState>();\n-        try {\n-            String subsPath = topicSubscribersPath(new StringBuilder(), topic).toString();\n-            List<String> children = zk.getChildren(subsPath, false);\n-            for (String child : children) {\n-                ByteString subscriberId = ByteString.copyFromUtf8(child);\n-                String subPath = topicSubscriberPath(topic, subscriberId);\n-                Stat stat = new Stat();\n-                byte[] subData = zk.getData(subPath, false, stat);\n-                if (null == subData) {\n-                    continue;\n-                }\n-                SubscriptionState state = SubscriptionState.parseFrom(subData);\n-                states.put(subscriberId, state);\n+\n+        final SyncObj<Map<ByteString, InMemorySubscriptionState>> syncObj =\n+            new SyncObj<Map<ByteString, InMemorySubscriptionState>>();\n+        sdm.readSubscriptions(topic, new Callback<Map<ByteString, InMemorySubscriptionState>>() {\n+            @Override\n+            public void operationFinished(Object ctx, Map<ByteString, InMemorySubscriptionState> result) {\n+                syncObj.success(result);\n+            }\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException pse) {\n+                syncObj.fail(pse);\n             }\n-        } catch (KeeperException.NoNodeException nne) {\n+        }, syncObj);\n+\n+        syncObj.block();\n+\n+        if (!syncObj.isSuccess()) {\n+            throw syncObj.exception;\n         }\n+\n+        Map<ByteString, InMemorySubscriptionState> subStats = syncObj.value;\n+\n+        if (null == subStats) {\n+            return states;\n+        }\n+\n+        for (Map.Entry<ByteString, InMemorySubscriptionState> entry : subStats.entrySet()) {\n+            states.put(entry.getKey(), entry.getValue().getSubscriptionState());\n+        }\n+\n         return states;\n     }\n \n@@ -385,16 +494,24 @@ private String topicSubscriberPath(ByteString topic, ByteString subscriber) {\n      * @throws Exception\n      */\n     public SubscriptionState getSubscription(ByteString topic, ByteString subscriber) throws Exception {\n-        String subPath = topicSubscriberPath(topic, subscriber);\n-        Stat stat = new Stat();\n-        byte[] subData = null;\n-        try {\n-            subData = zk.getData(subPath, false, stat);\n-        } catch (KeeperException.NoNodeException nne) {\n-        }\n-        if (null == subData) {\n-            return null;\n+        final SyncObj<SubscriptionState> syncObj = new SyncObj<SubscriptionState>();\n+        sdm.readSubscriptionState(topic, subscriber, new Callback<SubscriptionState>() {\n+            @Override\n+            public void operationFinished(Object ctx, SubscriptionState result) {\n+                syncObj.success(result);\n+            }\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException pse) {\n+                syncObj.fail(pse);\n+            }\n+        }, syncObj);\n+\n+        syncObj.block();\n+\n+        if (!syncObj.isSuccess()) {\n+            throw syncObj.exception;\n         }\n-        return SubscriptionState.parseFrom(subData);\n+\n+        return syncObj.value;\n     }\n }"},{"sha":"d3bcf5714a940a481042ae352b06e77879b4a213","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","status":"modified","additions":85,"deletions":130,"changes":215,"blob_url":"https://github.com/apache/bookkeeper/blob/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","raw_url":"https://github.com/apache/bookkeeper/raw/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java?ref=bb0888acafee138989dffb1cfee732145c953f38","patch":"@@ -18,19 +18,19 @@\n \n package org.apache.hedwig.admin.console;\n \n+import jline.ConsoleReader;\n+import jline.History;\n+import jline.Terminal;\n+\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStreamReader;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n-import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.NoSuchElementException;\n@@ -46,26 +46,22 @@\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.protocol.PubSubProtocol.LedgerRange;\n-import org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.topics.HubInfo;\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.HedwigSocketAddress;\n-import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.data.Stat;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n-import com.google.protobuf.InvalidProtocolBufferException;\n \n import static org.apache.hedwig.admin.console.HedwigCommands.*;\n import static org.apache.hedwig.admin.console.HedwigCommands.COMMAND.*;\n@@ -81,20 +77,24 @@\n     // history file name\n     static final String HW_HISTORY_FILE = \".hw_history\";\n \n+    static final char[] CONTINUE_OR_QUIT = new char[] { 'Q', 'q', '\\n' };\n+\n     protected MyCommandOptions cl = new MyCommandOptions();\n     protected HashMap<Integer, String> history = new LinkedHashMap<Integer, String>();\n     protected int commandCount = 0;\n     protected boolean printWatches = true;\n     protected Map<String, MyCommand> myCommands;\n \n     protected boolean inConsole = true;\n+    protected ConsoleReader console = null;\n \n     protected HedwigAdmin admin;\n     protected HedwigClient hubClient;\n     protected Publisher publisher;\n     protected Subscriber subscriber;\n     protected ConsoleMessageHandler consoleHandler =\n             new ConsoleMessageHandler();\n+    protected Terminal terminal;\n \n     protected String myRegion;\n \n@@ -524,6 +524,8 @@ public boolean runCmd(String[] args) throws Exception {\n \n     class ShowCmd implements MyCommand {\n \n+        static final int MAX_TOPICS_PER_SHOW = 100;\n+\n         @Override\n         public boolean runCmd(String[] args) throws Exception {\n             if (args.length < 2) {\n@@ -551,18 +553,37 @@ public boolean runCmd(String[] args) throws Exception {\n         }\n \n         protected void showHubs() throws Exception {\n-            Map<HedwigSocketAddress, Integer> hubs = admin.getAvailableHubs();\n+            Map<HedwigSocketAddress, HedwigAdmin.HubStats> hubs = admin.getAvailableHubs();\n             System.out.println(\"Available Hub Servers:\");\n-            for (Map.Entry<HedwigSocketAddress, Integer> entry : hubs.entrySet()) {\n+            for (Map.Entry<HedwigSocketAddress, HedwigAdmin.HubStats> entry : hubs.entrySet()) {\n                 System.out.println(\"\\t\" + entry.getKey() + \" :\\t\" + entry.getValue());\n             }\n         }\n \n         protected void showTopics() throws Exception {\n-            List<String> topics = admin.getTopics();\n+            List<String> topics = new ArrayList<String>();\n+            Iterator<ByteString> iter = admin.getTopics();\n+\n             System.out.println(\"Topic List:\");\n-            System.out.println(topics);\n+            boolean stop = false;\n+            while (iter.hasNext()) {\n+                if (topics.size() >= MAX_TOPICS_PER_SHOW) {\n+                    System.out.println(topics);\n+                    topics.clear();\n+                    stop = !continueOrQuit();\n+                    if (stop) {\n+                        break;\n+                    }\n+                }\n+                ByteString t = iter.next();\n+                topics.add(t.toStringUtf8());\n+            }\n+            if (!stop) {\n+                System.out.println(topics);\n+            }\n         }\n+\n+        \n         \n     }\n \n@@ -582,13 +603,14 @@ public boolean runCmd(String[] args) throws Exception {\n \n         protected boolean describeTopic(String topic) throws Exception {\n             ByteString btopic = ByteString.copyFromUtf8(topic);\n-            HedwigSocketAddress owner = admin.getTopicOwner(btopic);\n+            HubInfo owner = admin.getTopicOwner(btopic);\n             List<LedgerRange> ranges = admin.getTopicLedgers(btopic);\n             Map<ByteString, SubscriptionState> states = admin.getTopicSubscriptions(btopic);\n \n             System.out.println(\"===== Topic Information : \" + topic + \" =====\");\n             System.out.println();\n-            System.out.println(\"Owner : \" + (owner == null ? \"NULL\" : owner));\n+            System.out.println(\"Owner : \" + (owner == null ? \"NULL\" :\n+                               owner.toString().trim().replaceAll(\"\\n\", \", \")));\n             System.out.println();\n \n             // print ledgers\n@@ -779,6 +801,8 @@ public void printMessage(String msg) {\n      * @throws InterruptedException \n      */\n     public HedwigConsole(String[] args) throws IOException, InterruptedException {\n+        // Setup Terminal\n+        terminal = Terminal.setupTerminal();\n         HedwigCommands.init();\n         cl.parseOptions(args);\n \n@@ -815,8 +839,6 @@ public HedwigConsole(String[] args) throws IOException, InterruptedException {\n             }\n         }\n \n-\n-\n         printMessage(\"Connecting to zookeeper/bookkeeper using HedwigAdmin\");\n         try {\n             admin = new HedwigAdmin(bkClientConf, hubServerConf);\n@@ -844,6 +866,23 @@ protected String getPrompt() {\n         return sb.toString();\n     }\n \n+    protected boolean continueOrQuit() throws IOException {\n+        System.out.println(\"Press <Return> for more, or Q to cancel ...\");\n+        int ch;\n+        if (null != console) {\n+            ch = console.readCharacter(CONTINUE_OR_QUIT);\n+        } else {\n+            do {\n+                ch = terminal.readCharacter(System.in);\n+            } while (ch != 'q' && ch != 'Q' && ch != '\\n');\n+        }\n+        if (ch == 'q' ||\n+            ch == 'Q') {\n+            return false;\n+        }\n+        return true;\n+    }\n+\n     protected void addToHistory(int i, String cmd) {\n         history.put(i, cmd);\n     }\n@@ -908,122 +947,38 @@ void run() throws IOException {\n         myCommands = buildMyCommands();\n         if (cl.getCommand() == null) {\n             System.out.println(\"Welcome to Hedwig!\");\n-\n-            boolean jlinemissing = false;\n-            // only use jline if it's in the classpath\n-            try {\n-                Class consoleC = Class.forName(\"jline.ConsoleReader\");\n-                Class completorC =\n-                    Class.forName(\"org.apache.hedwig.admin.console.JLineHedwigCompletor\");\n-\n-                System.out.println(\"JLine support is enabled\");\n-\n-                Object console =\n-                    consoleC.getConstructor().newInstance();\n-\n-                Object completor =\n-                    completorC.getConstructor(HedwigAdmin.class).newInstance(admin);\n-                Method addCompletor = consoleC.getMethod(\"addCompletor\",\n-                        Class.forName(\"jline.Completor\"));\n-                addCompletor.invoke(console, completor);\n-\n-                // load history file\n-                boolean historyEnabled = false;\n-                Object history = null;\n-                Method addHistory = null;\n-                // Method flushHistory = null;\n-                try {\n-                    Class historyC = Class.forName(\"jline.History\");\n-                    history = historyC.getConstructor().newInstance();\n-\n-                    File file = new File(System.getProperty(\"hw.history\",\n-                                         new File(System.getProperty(\"user.home\"), HW_HISTORY_FILE).toString()));\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"History file is \" + file.toString());\n-                    }\n-                    Method setHistoryFile = historyC.getMethod(\"setHistoryFile\", File.class);\n-                    setHistoryFile.invoke(history, file);\n-\n-                    // set history to console reader\n-                    Method setHistory = consoleC.getMethod(\"setHistory\", historyC);\n-                    setHistory.invoke(console, history);\n-\n-                    // load history from history file\n-                    Method moveToFirstEntry = historyC.getMethod(\"moveToFirstEntry\");\n-                    moveToFirstEntry.invoke(history);\n-\n-                    addHistory = historyC.getMethod(\"addToHistory\", String.class);\n-                    // flushHistory = historyC.getMethod(\"flushBuffer\");\n-\n-                    Method nextEntry = historyC.getMethod(\"next\");\n-                    Method current = historyC.getMethod(\"current\");\n-                    while ((Boolean)(nextEntry.invoke(history))) {\n-                        String entry = (String)current.invoke(history);\n-                        if (!entry.equals(\"\")) {\n-                            addToHistory(commandCount, entry);\n-                        }\n-                        commandCount++;\n-                    }\n-\n-                    historyEnabled = true;\n-                    System.out.println(\"JLine history support is enabled\");\n-                } catch (ClassNotFoundException e) {\n-                    System.out.println(\"JLine history support is disabled\");\n-                    LOG.debug(\"JLine history disabled with exception\", e);\n-                    historyEnabled = false;\n-                } catch (NoSuchMethodException e) {\n-                    System.out.println(\"JLine history support is disabled\");\n-                    LOG.debug(\"JLine history disabled with exception\", e);\n-                    historyEnabled = false;\n-                } catch (InvocationTargetException e) {\n-                    System.out.println(\"JLine history support is disabled\");\n-                    LOG.debug(\"JLine history disabled with exception\", e);\n-                    historyEnabled = false;\n-                } catch (IllegalAccessException e) {\n-                    System.out.println(\"JLine history support is disabled\");\n-                    LOG.debug(\"JLine history disabled with exception\", e);\n-                    historyEnabled = false;\n-                } catch (InstantiationException e) {\n-                    System.out.println(\"JLine history support is disabled\");\n-                    LOG.debug(\"JLine history disabled with exception\", e);\n-                    historyEnabled = false;\n+            System.out.println(\"JLine support is enabled\");\n+\n+            console = new ConsoleReader();\n+            JLineHedwigCompletor completor = new JLineHedwigCompletor(admin);\n+            console.addCompletor(completor);\n+\n+            // load history file\n+            History history = new History();\n+            File file = new File(System.getProperty(\"hw.history\",\n+                                 new File(System.getProperty(\"user.home\"), HW_HISTORY_FILE).toString()));\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"History file is \" + file.toString());\n+            }\n+            history.setHistoryFile(file);\n+            // set history to console reader\n+            console.setHistory(history);\n+            // load history from history file\n+            history.moveToFirstEntry();\n+\n+            while (history.next()) {\n+                String entry = history.current();\n+                if (!entry.equals(\"\")) {\n+                    addToHistory(commandCount, entry);\n                 }\n-\n-                String line;\n-                Method readLine = consoleC.getMethod(\"readLine\", String.class);\n-                while ((line = (String)readLine.invoke(console, getPrompt())) != null) {\n-                    executeLine(line);\n-                    if (historyEnabled) {\n-                        addHistory.invoke(history, line);\n-                        // flushHistory.invoke(history);\n-                    }\n-                }\n-            } catch (ClassNotFoundException e) {\n-                LOG.debug(\"Unable to start jline\", e);\n-                jlinemissing = true;\n-            } catch (NoSuchMethodException e) {\n-                LOG.debug(\"Unable to start jline\", e);\n-                jlinemissing = true;\n-            } catch (InvocationTargetException e) {\n-                LOG.debug(\"Unable to start jline\", e);\n-                jlinemissing = true;\n-            } catch (IllegalAccessException e) {\n-                LOG.debug(\"Unable to start jline\", e);\n-                jlinemissing = true;\n-            } catch (InstantiationException e) {\n-                LOG.debug(\"Unable to start jline\", e);\n-                jlinemissing = true;\n+                commandCount++;\n             }\n+            System.out.println(\"JLine history support is enabled\");\n \n-            if (jlinemissing) {\n-                System.out.println(\"JLine support is disabled\");\n-                BufferedReader br =\n-                    new BufferedReader(new InputStreamReader(System.in));\n-\n-                String line;\n-                while ((line = br.readLine()) != null) {\n-                    executeLine(line);\n-                }\n+            String line;\n+            while ((line = console.readLine(getPrompt())) != null) {\n+                executeLine(line);\n+                history.addToHistory(line);\n             }\n         }\n "},{"sha":"e2da62883ba2c63b2f231a077789bc249c68c580","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java","raw_url":"https://github.com/apache/bookkeeper/raw/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java?ref=bb0888acafee138989dffb1cfee732145c953f38","patch":"@@ -18,11 +18,14 @@\n \n package org.apache.hedwig.admin.console;\n \n+import java.util.Iterator;\n import java.util.List;\n \n import org.apache.zookeeper.KeeperException;\n import org.apache.hedwig.admin.HedwigAdmin;\n \n+import com.google.protobuf.ByteString;\n+\n import jline.Completor;\n \n import static org.apache.hedwig.admin.console.HedwigCommands.*;\n@@ -31,6 +34,9 @@\n  * A jline completor for hedwig console\n  */\n public class JLineHedwigCompletor implements Completor {\n+    // for topic completion\n+    static final int MAX_TOPICS_TO_SEARCH = 1000;\n+\n     private HedwigAdmin admin;\n \n     public JLineHedwigCompletor(HedwigAdmin admin) {\n@@ -78,11 +84,14 @@ private int completeCommand(String buffer, String token,\n \n     private int completeTopic(String buffer, String token, List<String> candidates) {\n         try {\n-            List<String> children = admin.getTopics();\n-            for (String child : children) {\n+            Iterator<ByteString> children = admin.getTopics();\n+            int i = 0;\n+            while (children.hasNext() && i <= MAX_TOPICS_TO_SEARCH) {\n+                String child = children.next().toStringUtf8();\n                 if (child.startsWith(token)) {\n                     candidates.add(child);\n                 }\n+                ++i;\n             }\n         } catch (Exception e) {\n             return buffer.length();"},{"sha":"bca37d274dd027e9b384342283d3fb866c6d0e8e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/MetadataManagerFactory.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/server/meta/MetadataManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/server/meta/MetadataManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/MetadataManagerFactory.java?ref=bb0888acafee138989dffb1cfee732145c953f38","patch":"@@ -18,6 +18,7 @@\n package org.apache.hedwig.server.meta;\n \n import java.io.IOException;\n+import java.util.Iterator;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -28,6 +29,8 @@\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n \n+import com.google.protobuf.ByteString;\n+\n /**\n  * Metadata Manager used to manage metadata used by hedwig.\n  */\n@@ -66,6 +69,15 @@ protected abstract MetadataManagerFactory initialize(\n      */\n     public abstract void shutdown() throws IOException;\n \n+    /**\n+     * Iterate over the topics list.\n+     * Used by HedwigConsole to list available topics.\n+     *\n+     * @return iterator of the topics list.\n+     * @throws IOException\n+     */\n+    public abstract Iterator<ByteString> getTopics() throws IOException;\n+\n     /**\n      * Create topic persistence manager.\n      *"},{"sha":"c9b32eb54ff1eb92d3b520e57c1897007a54852e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java?ref=bb0888acafee138989dffb1cfee732145c953f38","patch":"@@ -20,6 +20,7 @@\n import java.io.IOException;\n import java.util.List;\n import java.util.Map;\n+import java.util.Iterator;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -85,6 +86,34 @@ public void shutdown() {\n         // we don't need to stop it.\n     }\n \n+    @Override\n+    public Iterator<ByteString> getTopics() throws IOException {\n+        List<String> topics;\n+        try {\n+            topics = zk.getChildren(cfg.getZkTopicsPrefix(new StringBuilder()).toString(), false);\n+        } catch (KeeperException ke) {\n+            throw new IOException(\"Failed to get topics list : \", ke);\n+        } catch (InterruptedException ie) {\n+            throw new IOException(\"Interrupted on getting topics list : \", ie);\n+        }\n+        final Iterator<String> iter = topics.iterator();\n+        return new Iterator<ByteString>() {\n+            @Override\n+            public boolean hasNext() {\n+                return iter.hasNext();\n+            }\n+            @Override\n+            public ByteString next() {\n+                String t = iter.next();\n+                return ByteString.copyFromUtf8(t);\n+            }\n+            @Override\n+            public void remove() {\n+                iter.remove();\n+            }\n+        };\n+    }\n+\n     @Override\n     public TopicPersistenceManager newTopicPersistenceManager() {\n         return new ZkTopicPersistenceManagerImpl(cfg, zk);"},{"sha":"79f7922dcaeb377d4aa30723c7ef96072735b67a","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubLoad.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubLoad.java","raw_url":"https://github.com/apache/bookkeeper/raw/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubLoad.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/HubLoad.java?ref=bb0888acafee138989dffb1cfee732145c953f38","patch":"@@ -32,7 +32,7 @@\n /**\n  * This class encapsulates metrics for determining the load on a hub server.\n  */\n-class HubLoad implements Comparable<HubLoad> {\n+public class HubLoad implements Comparable<HubLoad> {\n \n     public static final HubLoad MAX_LOAD = new HubLoad(Long.MAX_VALUE);\n     public static final HubLoad MIN_LOAD = new HubLoad(0);"},{"sha":"44c30d71d1016d6f4da2b4faa1d0346218292223","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/bb0888acafee138989dffb1cfee732145c953f38/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManagerFactory.java?ref=bb0888acafee138989dffb1cfee732145c953f38","patch":"@@ -29,9 +29,12 @@\n import java.util.concurrent.CyclicBarrier;\n import java.util.concurrent.CountDownLatch;\n import java.util.ArrayList;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n+import com.google.protobuf.ByteString;\n+\n import org.apache.hedwig.protocol.PubSubProtocol.ManagerMeta;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.zookeeper.ZooKeeperTestBase;\n@@ -78,6 +81,10 @@ public MetadataManagerFactory initialize(ServerConfiguration cfg,\n \n         public void shutdown() {}\n \n+        public Iterator<ByteString> getTopics() {\n+            return null;\n+        }\n+\n         public TopicPersistenceManager newTopicPersistenceManager() {\n             return null;\n         }"}]}

