{"sha":"bc0eb8b14278999a5c6550fbca6531b862beb12b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYzBlYjhiMTQyNzg5OTlhNWM2NTUwZmJjYTY1MzFiODYyYmViMTJi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T22:34:06Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T22:34:06Z"},"message":"BOOKKEEPER-675: Log noise fixup before cutting 4.2.2 (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1521667 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"68d3938f83ff50a377bdf2e7bde951b27a2f5802","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/68d3938f83ff50a377bdf2e7bde951b27a2f5802"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bc0eb8b14278999a5c6550fbca6531b862beb12b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bc0eb8b14278999a5c6550fbca6531b862beb12b","html_url":"https://github.com/apache/bookkeeper/commit/bc0eb8b14278999a5c6550fbca6531b862beb12b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bc0eb8b14278999a5c6550fbca6531b862beb12b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"aadaae443e1bc70505150a3218a54ff66ebfb921","url":"https://api.github.com/repos/apache/bookkeeper/commits/aadaae443e1bc70505150a3218a54ff66ebfb921","html_url":"https://github.com/apache/bookkeeper/commit/aadaae443e1bc70505150a3218a54ff66ebfb921"}],"stats":{"total":93,"additions":66,"deletions":27},"files":[{"sha":"36bbac4b9be854582f31372394416409e9367121","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -100,6 +100,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-446: BookKeeper.createLedger(..) should not mask the error with ZKException (sijie via ivank)\n \n+        BOOKKEEPER-675: Log noise fixup before cutting 4.2.2 (ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"8807f7077f589240b5833d378a6c99119a91ffa6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -377,7 +377,7 @@ private String getInstanceId(ZooKeeper zk) throws KeeperException,\n                     + BookKeeperConstants.INSTANCEID, false, null);\n             instanceId = new String(data, UTF_8);\n         } catch (KeeperException.NoNodeException e) {\n-            LOG.warn(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n+            LOG.info(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n         }\n         return instanceId;\n     }\n@@ -498,6 +498,7 @@ synchronized public void start() {\n             shutdown(ExitCode.BOOKIE_EXCEPTION);\n             return;\n         }\n+        LOG.info(\"Finished reading journal, starting bookie\");\n         // start bookie thread\n         super.start();\n "},{"sha":"bf4db0ea02c9031276137e01228a08be06674dde","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -542,7 +542,7 @@ public void process(long ledgerId, long offset, ByteBuffer entry) {\n                 continue;\n             }\n \n-            LOG.info(\"Extracting entry log meta from entryLogId: \" + entryLogId);\n+            LOG.info(\"Extracting entry log meta from entryLogId: {}\", entryLogId);\n \n             try {\n                 // Read through the entry log file and extract the entry log meta\n@@ -570,8 +570,8 @@ static EntryLogMetadata extractMetaFromEntryLog(EntryLogger entryLogger, long en\n         ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);\n         // Read through the entry log file and extract the entry log meta\n         entryLogger.scanEntryLog(entryLogId, scanner);\n-        LOG.info(\"Retrieved entry log meta data entryLogId: \"\n-                 + entryLogId + \", meta: \" + entryLogMeta);\n+        LOG.debug(\"Retrieved entry log meta data entryLogId: {}, meta: {}\",\n+                  entryLogId, entryLogMeta);\n         return entryLogMeta;\n     }\n }"},{"sha":"466bf94f3d03a557cd85a7b443a91fad9eae71af","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -438,6 +438,7 @@ public boolean accept(long journalId) {\n             if(id == markedLog.getLogFileId()) {\n                 logPosition = markedLog.getLogFileOffset();\n             }\n+            LOG.info(\"Replaying journal {} from position {}\", id, logPosition);\n             scanJournal(id, logPosition, scanner);\n         }\n     }"},{"sha":"5ea00108a1dbce9a839476ab6d5cef582a1740f1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -800,8 +800,10 @@ private void evictFileInfoIfNecessary() throws IOException {\n         synchronized (fileInfoCache) {\n             if (openLedgers.size() > openFileLimit) {\n                 long ledgerToRemove = openLedgers.removeFirst();\n-                LOG.info(\"Ledger {} is evicted from file info cache.\",\n-                         ledgerToRemove);\n+                // TODO Add a statistic here, we don't care really which\n+                // ledger is evicted, but the rate at which they get evicted\n+                LOG.debug(\"Ledger {} is evicted from file info cache.\",\n+                          ledgerToRemove);\n                 fileInfoCache.remove(ledgerToRemove).close(true);\n             }\n         }"},{"sha":"6c6a79fe94d283bdb914b65dec3e1bad9fbc19ba","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -624,6 +624,7 @@ void handleUnrecoverableErrorDuringAdd(int rc) {\n             errorOutPendingAdds(rc);\n             return;\n         }\n+        LOG.error(\"Closing ledger {} due to error {}\", ledgerId, rc);\n         asyncCloseInternal(NoopCloseCallback.instance, null, rc);\n     }\n "},{"sha":"3bc488564839744669aae3cc5f8b1ebd385525b3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -143,15 +143,18 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n             // continue\n             break;\n         case BKException.Code.LedgerFencedException:\n-            LOG.warn(\"Fencing exception on write: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Fencing exception on write: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleUnrecoverableErrorDuringAdd(rc);\n             return;\n         case BKException.Code.UnauthorizedAccessException:\n-            LOG.warn(\"Unauthorized access exception on write: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Unauthorized access exception on write: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleUnrecoverableErrorDuringAdd(rc);\n             return;\n         default:\n-            LOG.warn(\"Write did not succeed: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Write did not succeed: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleBookieFailure(addr, bookieIndex);\n             return;\n         }\n@@ -172,6 +175,11 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n     }\n \n     void submitCallback(final int rc) {\n+        if (rc != BKException.Code.OK) {\n+            LOG.error(\"Write of ledger entry to quorum failed: L{} E{}\",\n+                      lh.getId(), entryId);\n+        }\n+\n         cb.addComplete(rc, lh, entryId, ctx);\n     }\n "},{"sha":"0f6ef3fc8ed0eaafe8448af43e3e83e933f18b1d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":17,"deletions":6,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -190,11 +190,11 @@ synchronized void logErrorAndReattemptRead(InetSocketAddress host, String errMsg\n             }\n             if (BKException.Code.NoSuchEntryException == rc) {\n                 ++numMissedEntryReads;\n-                LOG.info(\"No such entry found on bookie. entry: {} ledgerId: {} bookie: {}\", new Object[] { entryId,\n-                        lh.ledgerId, host });\n+                LOG.debug(\"No such entry found on bookie.  L{} E{} bookie: {}\",\n+                        new Object[] { lh.ledgerId, entryId, host });\n             } else {\n-                LOG.error(errMsg + \" while reading entry: \" + entryId + \" ledgerId: \" + lh.ledgerId + \" from bookie: \"\n-                        + host);\n+                LOG.debug(errMsg + \" while reading L{} E{} from bookie: {}\",\n+                          new Object[] { lh.ledgerId, entryId, host });\n             }\n \n             int replica = getReplicaIndex(host);\n@@ -282,8 +282,8 @@ public void run() {\n                             }\n                         }\n                         if (x > 0) {\n-                            LOG.info(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n-                                     new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n+                            LOG.debug(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n+                                      new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n                         }\n                     }\n                 }, speculativeReadTimeout, speculativeReadTimeout, TimeUnit.MILLISECONDS);\n@@ -347,6 +347,17 @@ private void submitCallback(int code) {\n             speculativeTask.cancel(true);\n             speculativeTask = null;\n         }\n+        if (code != BKException.Code.OK) {\n+            long firstUnread = LedgerHandle.INVALID_ENTRY_ID;\n+            for (LedgerEntryRequest req : seq) {\n+                if (!req.isComplete()) {\n+                    firstUnread = req.getEntryId();\n+                    break;\n+                }\n+            }\n+            LOG.error(\"Read of ledger entry failed: L{} E{}-E{}, Heard from {}. First unread entry is {}\",\n+                    new Object[] { lh.getId(), startEntryId, endEntryId, heardFromHosts, firstUnread });\n+        }\n         cb.readComplete(code, lh, PendingReadOp.this, PendingReadOp.this.ctx);\n     }\n     public boolean hasMoreElements() {"},{"sha":"cc1cf1506c8917ad65d1e83f611d9c06aeb67d4e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -84,8 +84,8 @@ void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n             try {\n                 if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n                     // ensemble has already changed, failure of this addr is immaterial\n-                    LOG.warn(\"Write did not succeed to {}, bookieIndex {}, but we have already fixed it.\",\n-                             addr, bookieIndex);\n+                    LOG.debug(\"Write did not succeed to {}, bookieIndex {},\"\n+                              +\" but we have already fixed it.\", addr, bookieIndex);\n                     blockAddCompletions.decrementAndGet();\n                     return;\n                 }"},{"sha":"7921a84cb2bf38b655fb2e73219189d5ed022f6d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -205,6 +205,7 @@ public void close() {\n             for (PerChannelBookieClient channel: channels.values()) {\n                 channel.close();\n             }\n+            channels.clear();\n         } finally {\n             closeLock.writeLock().unlock();\n         }"},{"sha":"1301c4bff92b41903485259bb7485a4955de34de","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieRequestHandler.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -23,6 +23,7 @@\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.nio.ByteBuffer;\n+import java.nio.channels.ClosedChannelException;\n \n import java.util.concurrent.ExecutionException;\n import java.util.concurrent.Future;\n@@ -74,6 +75,10 @@ public void channelOpen(ChannelHandlerContext ctx,\n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {\n         Throwable throwable = e.getCause();\n+        if (throwable instanceof ClosedChannelException) {\n+            LOG.debug(\"Client died before request could be completed\", throwable);\n+            return;\n+        }\n         LOG.error(\"Unhandled exception occurred in I/O thread or handler\", throwable);\n     }\n "},{"sha":"9c27cbf896c582024591a433a1c1a2ed9d32c16f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":17,"deletions":10,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/bc0eb8b14278999a5c6550fbca6531b862beb12b/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=bc0eb8b14278999a5c6550fbca6531b862beb12b","patch":"@@ -372,7 +372,7 @@ public void safeRun() {\n                 }\n \n                 if (readCompletion != null) {\n-                    LOG.error(\"Could not write request for reading entry: {}\"\n+                    LOG.debug(\"Could not write request for reading entry: {}\"\n                               + \" ledger-id: {} bookie: {}\",\n                               new Object[] { key.entryId, key.ledgerId, bAddress });\n \n@@ -397,12 +397,12 @@ public void safeRun() {\n                     if(c != null) {\n                         bAddress = c.getRemoteAddress().toString();\n                     }\n-                    LOG.error(\"Could not write request for adding entry: {} ledger-id: {} bookie: {}\",\n+                    LOG.debug(\"Could not write request for adding entry: {} ledger-id: {} bookie: {}\",\n                               new Object[] { key.entryId, key.ledgerId, bAddress });\n \n                     addCompletion.cb.writeComplete(BKException.Code.BookieHandleNotAvailableException, key.ledgerId,\n                                                    key.entryId, addr, addCompletion.ctx);\n-                    LOG.error(\"Invoked callback method: \" + key.entryId);\n+                    LOG.debug(\"Invoked callback method: {}\", key.entryId);\n                 }\n             }\n \n@@ -489,8 +489,8 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n     public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {\n         Throwable t = e.getCause();\n         if (t instanceof CorruptedFrameException || t instanceof TooLongFrameException) {\n-            LOG.error(\"Corrupted fram received from bookie: \"\n-                      + e.getChannel().getRemoteAddress());\n+            LOG.error(\"Corrupted frame received from bookie: {}\",\n+                      e.getChannel().getRemoteAddress());\n             return;\n         }\n         if (t instanceof ReadTimeoutException) {\n@@ -514,7 +514,14 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws\n             return;\n         }\n \n-        LOG.error(\"Unexpected exception caught by bookie client channel handler\", t);\n+        synchronized (this) {\n+            if (state == ConnectionState.CLOSED) {\n+                LOG.debug(\"Unexpected exception caught by bookie client channel handler, \"\n+                          + \"but the client is closed, so it isn't important\", t);\n+            } else {\n+                LOG.error(\"Unexpected exception caught by bookie client channel handler\", t);\n+            }\n+        }\n         // Since we are a library, cant terminate App here, can we?\n     }\n \n@@ -574,7 +581,7 @@ void handleAddResponse(BookieProtocol.AddResponse a) {\n             rc = BKException.Code.WriteOnReadOnlyBookieException;\n             break;\n         default:\n-            LOG.error(\"Add failed {}\", a);\n+            LOG.warn(\"Add failed {}\", a);\n             rc = BKException.Code.WriteException;\n             break;\n         }\n@@ -583,7 +590,7 @@ void handleAddResponse(BookieProtocol.AddResponse a) {\n         ac = addCompletions.remove(new CompletionKey(a.getLedgerId(),\n                                                      a.getEntryId()));\n         if (ac == null) {\n-            LOG.error(\"Unexpected add response from bookie {} for {}\", addr, a);\n+            LOG.debug(\"Unexpected add response from bookie {} for {}\", addr, a);\n             return;\n         }\n \n@@ -615,7 +622,7 @@ void handleReadResponse(BookieProtocol.ReadResponse rr) {\n             rc = BKException.Code.UnauthorizedAccessException;\n             break;\n         default:\n-            LOG.error(\"Read error for {}\", rr);\n+            LOG.warn(\"Read error for {}\", rr);\n             rc = BKException.Code.ReadException;\n             break;\n         }\n@@ -635,7 +642,7 @@ void handleReadResponse(BookieProtocol.ReadResponse rr) {\n         }\n \n         if (readCompletion == null) {\n-            LOG.error(\"Unexpected read response received from bookie: {} for {}\", addr, rr);\n+            LOG.debug(\"Unexpected read response received from bookie: {} for {}\", addr, rr);\n             return;\n         }\n "}]}

