{"sha":"bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZWRmZWJmOTNmOGM5ZjkzZmFjMTliZDU4MDA1ZGNlNmUwZmZiZDE3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-12T03:42:21Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-12T03:42:21Z"},"message":"BOOKKEEPER-657: Journal Improvement (Robin Dhamankar via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1531494 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e8f913c6b740b2e679ef53d140fcc34081a0d3b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2e8f913c6b740b2e679ef53d140fcc34081a0d3b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","html_url":"https://github.com/apache/bookkeeper/commit/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d9f4e60c850291d17e12ed44776b88cf02335701","url":"https://api.github.com/repos/apache/bookkeeper/commits/d9f4e60c850291d17e12ed44776b88cf02335701","html_url":"https://github.com/apache/bookkeeper/commit/d9f4e60c850291d17e12ed44776b88cf02335701"}],"stats":{"total":919,"additions":723,"deletions":196},"files":[{"sha":"013f06032b3bae25d405e31b37cb8aec50860002","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -166,6 +166,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-658: ledger cache refactor (Robin Dhamankar via sijie)\n \n+      BOOKKEEPER-657: Journal Improvement (Robin Dhamankar via sijie)\n+\n     NEW FEATURE:\n \n       BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)"},{"sha":"d9fdddcc69cc49a093f1977e7e9dec2b23beb00b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -21,64 +21,64 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.io.File;\n import java.io.FileNotFoundException;\n-import java.io.IOException;\n import java.io.FilenameFilter;\n+import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Map;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.apache.bookkeeper.meta.LedgerManager;\n-import org.apache.bookkeeper.meta.LedgerManagerFactory;\n-import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.GarbageCollectorThread.SafeEntryAdder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n-import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.util.net.DNS;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.NodeExistsException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n-import static com.google.common.base.Charsets.UTF_8;\n import com.google.common.annotations.VisibleForTesting;\n \n /**\n  * Implements a bookie.\n  *\n  */\n \n-public class Bookie extends Thread {\n+public class Bookie extends BookieThread {\n \n     static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n "},{"sha":"e67f5745f2551a9c57fc559adc96110cfc4e5e93","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieThread.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/*\n+* Wrapper that wraps bookie threads\n+* Any common handing that we require for all bookie threads\n+* should be implemented here\n+*/\n+public class BookieThread extends Thread {\n+\n+    private static class BookieUncaughtExceptionHandler implements Thread.UncaughtExceptionHandler {\n+        static Logger logger = LoggerFactory.getLogger(BookieUncaughtExceptionHandler.class);\n+\n+        @Override\n+        public void uncaughtException(Thread t, Throwable e) {\n+            logger.error(\"Uncaught exception in thread \" + t.getName(), e);\n+            Runtime.getRuntime().exit(1);\n+        }\n+\n+    }\n+\n+    public BookieThread (String name) {\n+        super(name);\n+        setUncaughtExceptionHandler(new BookieUncaughtExceptionHandler());\n+    }\n+}"},{"sha":"f8ca18ceb0e89b756ad5e8d994e0ead691b23f80","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","status":"modified","additions":26,"deletions":9,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BufferedChannel.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -100,21 +100,38 @@ public long size() throws IOException {\n         return bc.size();\n     }\n \n-    public void flush(boolean sync) throws IOException {\n+    /**\n+     * Write any data in the buffer to the file. If sync is set to true, force a sync operation so that\n+     * data is persisted to the disk.\n+     * @param shouldForceWrite\n+     * @throws IOException if the write or sync operation fails.\n+     */\n+    public void flush(boolean shouldForceWrite) throws IOException {\n         synchronized(this) {\n-            if (writeBuffer == null) {\n-                return;\n-            }\n-            writeBuffer.flip();\n-            bc.write(writeBuffer);\n-            writeBuffer.clear();\n-            writeBufferStartPosition = bc.position();\n+            flushInternal();\n         }\n-        if (sync) {\n+        if (shouldForceWrite) {\n             forceWrite(false);\n         }\n     }\n \n+    /**\n+     * Write any data in the buffer to the file and advance the writeBufferPosition\n+     * Callers are expected to synchronize appropriately\n+     * @throws IOException if the write fails.\n+     */\n+    private void flushInternal() throws IOException {\n+        if (writeBuffer == null) {\n+            return;\n+        }\n+        writeBuffer.flip();\n+        do {\n+            bc.write(writeBuffer);\n+        } while (writeBuffer.hasRemaining());\n+        writeBuffer.clear();\n+        writeBufferStartPosition = bc.position();\n+    }\n+\n     public long forceWrite(boolean forceMetadata) throws IOException {\n         // This is the point up to which we had flushed to the file system page cache\n         // before issuing this force write hence is guaranteed to be made durable by"},{"sha":"ce8f878342c63b3631817a30bc9e196ab3a18e8e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":270,"deletions":29,"changes":299,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -30,19 +30,24 @@\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.util.DaemonThreadFactory;\n import org.apache.bookkeeper.util.IOUtils;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * Provide journal related management.\n  */\n-class Journal extends Thread implements CheckpointSource {\n+class Journal extends BookieThread implements CheckpointSource {\n \n     static Logger LOG = LoggerFactory.getLogger(Journal.class);\n \n@@ -115,13 +120,19 @@ public boolean equals(Object o) {\n         public int hashCode() {\n             return mark.hashCode();\n         }\n+\n+        @Override\n+        public String toString() {\n+            return mark.toString();\n+        }\n     }\n \n     /**\n      * Last Log Mark\n      */\n     class LastLogMark {\n-        private LogMark curMark;\n+        private final LogMark curMark;\n+\n         LastLogMark(long logId, long logPosition) {\n             this.curMark = new LogMark(logId, logPosition);\n         }\n@@ -200,6 +211,11 @@ synchronized void readLog() {\n                 }\n             }\n         }\n+\n+        @Override\n+        public String toString() {\n+            return curMark.toString();\n+        }\n     }\n \n     /**\n@@ -245,52 +261,240 @@ public boolean accept(long journalId) {\n      * Journal Entry to Record\n      */\n     private static class QueueEntry {\n+        ByteBuffer entry;\n+        long ledgerId;\n+        long entryId;\n+        WriteCallback cb;\n+        Object ctx;\n+        long enqueueTime;\n+\n         QueueEntry(ByteBuffer entry, long ledgerId, long entryId,\n-                   WriteCallback cb, Object ctx) {\n+                   WriteCallback cb, Object ctx, long enqueueTime) {\n             this.entry = entry.duplicate();\n             this.cb = cb;\n             this.ctx = ctx;\n             this.ledgerId = ledgerId;\n             this.entryId = entryId;\n+            this.enqueueTime = enqueueTime;\n         }\n \n-        ByteBuffer entry;\n+        public void callback() {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Acknowledge Ledger: {}, Entry: {}\", ledgerId, entryId);\n+            }\n+            cb.writeComplete(0, ledgerId, entryId, null, ctx);\n+        }\n+    }\n \n-        long ledgerId;\n+    private class ForceWriteRequest implements Runnable {\n+        private final JournalChannel logFile;\n+        private final LinkedList<QueueEntry> forceWriteWaiters;\n+        private boolean shouldClose;\n+        private final boolean isMarker;\n+        private final long lastFlushedPosition;\n+        private final long logId;\n+\n+        private ForceWriteRequest(JournalChannel logFile,\n+                          long logId,\n+                          long lastFlushedPosition,\n+                          LinkedList<QueueEntry> forceWriteWaiters,\n+                          boolean shouldClose,\n+                          boolean isMarker) {\n+            this.forceWriteWaiters = forceWriteWaiters;\n+            this.logFile = logFile;\n+            this.logId = logId;\n+            this.lastFlushedPosition = lastFlushedPosition;\n+            this.shouldClose = shouldClose;\n+            this.isMarker = isMarker;\n+        }\n \n-        long entryId;\n+        public int process(boolean shouldForceWrite) throws IOException {\n+            if (isMarker) {\n+                return 0;\n+            }\n \n-        WriteCallback cb;\n+            try {\n+                if (shouldForceWrite) {\n+                    this.logFile.forceWrite(false);\n+                }\n+                lastLogMark.setCurLogMark(this.logId, this.lastFlushedPosition);\n \n-        Object ctx;\n+                // Notify the waiters that the force write succeeded\n+                cbThreadPool.submit(this);\n+\n+                return this.forceWriteWaiters.size();\n+            }\n+            finally {\n+                closeFileIfNecessary();\n+            }\n+        }\n+\n+        @Override\n+        public void run() {\n+            for (QueueEntry e : this.forceWriteWaiters) {\n+                e.callback();    // Process cbs inline\n+            }\n+        }\n+\n+        public void closeFileIfNecessary() {\n+            // Close if shouldClose is set\n+            if (shouldClose) {\n+                // We should guard against exceptions so its\n+                // safe to call in catch blocks\n+                try {\n+                    logFile.close();\n+                    // Call close only once\n+                    shouldClose = false;\n+                }\n+                catch (IOException ioe) {\n+                    LOG.error(\"I/O exception while closing file\", ioe);\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * ForceWriteThread is a background thread which makes the journal durable periodically\n+     *\n+     */\n+    private class ForceWriteThread extends BookieThread {\n+        volatile boolean running = true;\n+        // This holds the queue entries that should be notified after a\n+        // successful force write\n+        Thread threadToNotifyOnEx;\n+        // should we group force writes\n+        private final boolean enableGroupForceWrites;\n+        // make flush interval as a parameter\n+        public ForceWriteThread(Thread threadToNotifyOnEx, boolean enableGroupForceWrites) {\n+            super(\"ForceWriteThread\");\n+            this.threadToNotifyOnEx = threadToNotifyOnEx;\n+            this.enableGroupForceWrites = enableGroupForceWrites;\n+        }\n+        @Override\n+        public void run() {\n+            LOG.info(\"ForceWrite Thread started\");\n+            boolean shouldForceWrite = true;\n+            int numReqInLastForceWrite = 0;\n+            while(running) {\n+                ForceWriteRequest req = null;\n+                try {\n+                    req = forceWriteRequests.take();\n+\n+                    // Force write the file and then notify the write completions\n+                    //\n+                    if (!req.isMarker) {\n+                        if (shouldForceWrite) {\n+                            // if we are going to force write, any request that is already in the\n+                            // queue will benefit from this force write - post a marker prior to issuing\n+                            // the flush so until this marker is encountered we can skip the force write\n+                            if (enableGroupForceWrites) {\n+                                forceWriteRequests.put(new ForceWriteRequest(req.logFile, 0, 0, null, false, true));\n+                            }\n+\n+                            // If we are about to issue a write, record the number of requests in\n+                            // the last force write and then reset the counter so we can accumulate\n+                            // requests in the write we are about to issue\n+                            if (numReqInLastForceWrite > 0) {\n+                                numReqInLastForceWrite = 0;\n+                            }\n+                        }\n+                        numReqInLastForceWrite += req.process(shouldForceWrite);\n+                    }\n+\n+                    if (enableGroupForceWrites &&\n+                        // if its a marker we should switch back to flushing\n+                        !req.isMarker &&\n+                        // This indicates that this is the last request in a given file\n+                        // so subsequent requests will go to a different file so we should\n+                        // flush on the next request\n+                        !req.shouldClose) {\n+                        shouldForceWrite = false;\n+                    }\n+                    else {\n+                        shouldForceWrite = true;\n+                    }\n+                } catch (IOException ioe) {\n+                    LOG.error(\"I/O exception in ForceWrite thread\", ioe);\n+                    running = false;\n+                } catch (InterruptedException e) {\n+                    LOG.error(\"ForceWrite thread interrupted\", e);\n+                    // close is idempotent\n+                    if (null != req) {\n+                        req.closeFileIfNecessary();\n+                    }\n+                    running = false;\n+                }\n+            }\n+            // Regardless of what caused us to exit, we should notify the\n+            // the parent thread as it should either exit or be in the process\n+            // of exiting else we will have write requests hang\n+            threadToNotifyOnEx.interrupt();\n+        }\n+        // shutdown sync thread\n+        void shutdown() throws InterruptedException {\n+            running = false;\n+            this.interrupt();\n+            this.join();\n+        }\n     }\n \n     final static long MB = 1024 * 1024L;\n+    final static int KB = 1024;\n     // max journal file size\n     final long maxJournalSize;\n+    // pre-allocation size for the journal files\n+    final long journalPreAllocSize;\n+    // write buffer size for the journal files\n+    final int journalWriteBufferSize;\n     // number journal files kept before marked journal\n     final int maxBackupJournals;\n \n     final File journalDirectory;\n     final ServerConfiguration conf;\n+    ForceWriteThread forceWriteThread;\n+    // should we group force writes\n+    private final boolean enableGroupForceWrites;\n+    // Time after which we will stop grouping and issue the flush\n+    private final long maxGroupWaitInMSec;\n+    // Threshold after which we flush any buffered journal writes\n+    private final long bufferedWritesThreshold;\n+    // should we flush if the queue is empty\n+    private final boolean flushWhenQueueEmpty;\n     // should we hint the filesystem to remove pages from cache after force write\n     private final boolean removePagesFromCache;\n \n-    private LastLogMark lastLogMark = new LastLogMark(0, 0);\n+    private final LastLogMark lastLogMark = new LastLogMark(0, 0);\n+\n+    /**\n+     * The thread pool used to handle callback.\n+     */\n+    private final ExecutorService cbThreadPool;\n \n     // journal entry queue to commit\n     LinkedBlockingQueue<QueueEntry> queue = new LinkedBlockingQueue<QueueEntry>();\n+    LinkedBlockingQueue<ForceWriteRequest> forceWriteRequests = new LinkedBlockingQueue<ForceWriteRequest>();\n \n     volatile boolean running = true;\n-    private LedgerDirsManager ledgerDirsManager;\n+    private final LedgerDirsManager ledgerDirsManager;\n \n     public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager) {\n         super(\"BookieJournal-\" + conf.getBookiePort());\n         this.ledgerDirsManager = ledgerDirsManager;\n         this.conf = conf;\n         this.journalDirectory = Bookie.getCurrentDirectory(conf.getJournalDir());\n-        this.maxJournalSize = conf.getMaxJournalSize() * MB;\n+        this.maxJournalSize = conf.getMaxJournalSizeMB() * MB;\n+        this.journalPreAllocSize = conf.getJournalPreAllocSizeMB() * MB;\n+        this.journalWriteBufferSize = conf.getJournalWriteBufferSizeKB() * KB;\n         this.maxBackupJournals = conf.getMaxBackupJournals();\n+        this.enableGroupForceWrites = conf.getJournalAdaptiveGroupWrites();\n+        this.forceWriteThread = new ForceWriteThread(this, enableGroupForceWrites);\n+        this.maxGroupWaitInMSec = conf.getJournalMaxGroupWaitMSec();\n+        this.bufferedWritesThreshold = conf.getJournalBufferedWritesThreshold();\n+        this.cbThreadPool = Executors.newFixedThreadPool(conf.getNumAddWorkerThreads(), new DaemonThreadFactory());\n+\n+        // Unless there is a cap on the max wait (which requires group force writes)\n+        // we cannot skip flushing for queue empty\n+        this.flushWhenQueueEmpty = !enableGroupForceWrites || conf.getJournalFlushWhenQueueEmpty();\n \n         this.removePagesFromCache = conf.getJournalRemovePagesFromCache();\n         // read last log mark\n@@ -362,9 +566,9 @@ public void scanJournal(long journalId, long journalPos, JournalScanner scanner)\n         throws IOException {\n         JournalChannel recLog;\n         if (journalPos <= 0) {\n-            recLog = new JournalChannel(journalDirectory, journalId);\n+            recLog = new JournalChannel(journalDirectory, journalId, journalPreAllocSize, journalWriteBufferSize);\n         } else {\n-            recLog = new JournalChannel(journalDirectory, journalId, journalPos);\n+            recLog = new JournalChannel(journalDirectory, journalId, journalPreAllocSize, journalWriteBufferSize, journalPos);\n         }\n         int journalVersion = recLog.getFormatVersion();\n         try {\n@@ -448,7 +652,7 @@ public void logAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx) {\n         long ledgerId = entry.getLong();\n         long entryId = entry.getLong();\n         entry.rewind();\n-        queue.add(new QueueEntry(entry, ledgerId, entryId, cb, ctx));\n+        queue.add(new QueueEntry(entry, ledgerId, entryId, cb, ctx, MathUtils.nowInNano()));\n     }\n \n     /**\n@@ -480,6 +684,7 @@ public void run() {\n         LinkedList<QueueEntry> toFlush = new LinkedList<QueueEntry>();\n         ByteBuffer lenBuff = ByteBuffer.allocate(4);\n         JournalChannel logFile = null;\n+        forceWriteThread.start();\n         try {\n             List<Long> journalIds = listJournalIds(journalDirectory, null);\n             // Should not use MathUtils.now(), which use System.nanoTime() and\n@@ -494,7 +699,11 @@ public void run() {\n                 // new journal file to write\n                 if (null == logFile) {\n                     logId = logId + 1;\n-                    logFile = new JournalChannel(journalDirectory, logId, removePagesFromCache);\n+                    logFile = new JournalChannel(journalDirectory,\n+                                        logId,\n+                                        journalPreAllocSize,\n+                                        journalWriteBufferSize,\n+                                        removePagesFromCache);\n                     bc = logFile.getBufferedChannel();\n \n                     lastFlushPosition = 0;\n@@ -504,25 +713,43 @@ public void run() {\n                     if (toFlush.isEmpty()) {\n                         qe = queue.take();\n                     } else {\n-                        qe = queue.poll();\n-                        if (qe == null || bc.position() > lastFlushPosition + 512*1024) {\n-                            //logFile.force(false);\n+                        long pollWaitTime = maxGroupWaitInMSec - MathUtils.elapsedMSec(toFlush.getFirst().enqueueTime);\n+                        if (flushWhenQueueEmpty || pollWaitTime < 0) {\n+                            pollWaitTime = 0;\n+                        }\n+                        qe = queue.poll(pollWaitTime, TimeUnit.MILLISECONDS);\n+                        boolean shouldFlush = false;\n+                        // We should issue a forceWrite if any of the three conditions below holds good\n+                        // 1. If the oldest pending entry has been pending for longer than the max wait time\n+                        if (enableGroupForceWrites && (MathUtils.elapsedMSec(toFlush.getFirst().enqueueTime) > maxGroupWaitInMSec)) {\n+                            shouldFlush = true;\n+                        } else if ((bc.position() > lastFlushPosition + bufferedWritesThreshold)) {\n+                            // 2. If we have buffered more than the buffWriteThreshold\n+                            shouldFlush = true;\n+                        } else if (qe == null) {\n+                            // We should get here only if we flushWhenQueueEmpty is true else we would wait\n+                            // for timeout that would put is past the maxWait threshold\n+                            // 3. If the queue is empty i.e. no benefit of grouping. This happens when we have one\n+                            // publish at a time - common case in tests.\n+                            shouldFlush = true;\n+                        }\n+\n+                        // toFlush is non null and not empty so should be safe to access getFirst\n+                        if (shouldFlush) {\n                             bc.flush(false);\n-                            // This separation of flush and force is useful when adaptive group\n-                            // force write is used where the flush thread does not block while\n-                            // the force is issued by a separate thread\n-                            logFile.forceWrite(false);\n                             lastFlushPosition = bc.position();\n-                            lastLogMark.setCurLogMark(logId, lastFlushPosition);\n-                            for (QueueEntry e : toFlush) {\n-                                e.cb.writeComplete(BookieException.Code.OK,\n-                                                   e.ledgerId, e.entryId, null, e.ctx);\n+\n+                            // Trace the lifetime of entries through persistence\n+                            if (LOG.isDebugEnabled()) {\n+                                for (QueueEntry e : toFlush) {\n+                                    LOG.debug(\"Written and queuing for flush Ledger:\" + e.ledgerId + \" Entry:\" + e.entryId);\n+                                }\n                             }\n-                            toFlush.clear();\n \n+                            forceWriteRequests.put(new ForceWriteRequest(logFile, logId, lastFlushPosition, toFlush, (lastFlushPosition > maxJournalSize), false));\n+                            toFlush = new LinkedList<QueueEntry>();\n                             // check whether journal file is over file limit\n                             if (bc.position() > maxJournalSize) {\n-                                logFile.close();\n                                 logFile = null;\n                                 continue;\n                             }\n@@ -548,8 +775,10 @@ public void run() {\n                 bc.write(lenBuff);\n                 bc.write(qe.entry);\n \n+                // NOTE: preAlloc depends on the fact that we don't change file size while this is\n+                // called or useful parts of the file will be zeroed out - in other words\n+                // it depends on single threaded flushes to the JournalChannel\n                 logFile.preAllocIfNeeded();\n-\n                 toFlush.add(qe);\n                 qe = null;\n             }\n@@ -560,6 +789,11 @@ public void run() {\n         } catch (InterruptedException ie) {\n             LOG.warn(\"Journal exits when shutting down\", ie);\n         } finally {\n+            // There could be packets queued for forceWrite on this logFile\n+            // That is fine as this exception is going to anyway take down the\n+            // the bookie. If we execute this as a part of graceful shutdown,\n+            // close will flush the file system cache making any previous\n+            // cached writes durable so this is fine as well.\n             IOUtils.close(LOG, logFile);\n         }\n         LOG.info(\"Journal exited loop!\");\n@@ -574,6 +808,13 @@ public synchronized void shutdown() {\n                 return;\n             }\n             LOG.info(\"Shutting down Journal\");\n+            forceWriteThread.shutdown();\n+            cbThreadPool.shutdown();\n+            if (!cbThreadPool.awaitTermination(5, TimeUnit.SECONDS)) {\n+                LOG.warn(\"Couldn't shutdown journal callback thread gracefully. Forcing\");\n+            }\n+            cbThreadPool.shutdownNow();\n+\n             running = false;\n             this.interrupt();\n             this.join();"},{"sha":"b7e70e1100226f10d18c97c7142541191dc9d05b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":23,"deletions":10,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -33,6 +33,7 @@\n \n import static com.google.common.base.Charsets.UTF_8;\n \n+import org.apache.bookkeeper.util.NativeIO;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -57,25 +58,35 @@\n     int MIN_COMPAT_JOURNAL_FORMAT_VERSION = 1;\n     int CURRENT_JOURNAL_FORMAT_VERSION = 4;\n \n-    public final static long preAllocSize = 4*1024*1024;\n-    public final static ByteBuffer zeros = ByteBuffer.allocate(512);\n+    private long preAllocSize;\n     private boolean fRemoveFromPageCache;\n+    public final static ByteBuffer zeros = ByteBuffer.allocate(512);\n+\n     // The position of the file channel's last force write.\n     private long lastForceWritePosition = 0;\n \n+    // Mostly used by tests\n     JournalChannel(File journalDirectory, long logId) throws IOException {\n-        this(journalDirectory, logId, START_OF_FILE, false);\n+        this(journalDirectory, logId, 4*1024*1024, 65536, START_OF_FILE);\n     }\n \n-    JournalChannel(File journalDirectory, long logId, long position) throws IOException {\n-        this(journalDirectory, logId, position, false);\n+    JournalChannel(File journalDirectory, long logId, long preAllocSize, int writeBufferSize) throws IOException {\n+        this(journalDirectory, logId, preAllocSize, writeBufferSize, START_OF_FILE);\n     }\n \n-    JournalChannel(File journalDirectory, long logId, boolean fRemoveFromPageCache) throws IOException {\n-        this(journalDirectory, logId, START_OF_FILE, fRemoveFromPageCache);\n+    JournalChannel(File journalDirectory, long logId,\n+                   long preAllocSize, int writeBufferSize, long position) throws IOException {\n+         this(journalDirectory, logId, preAllocSize, writeBufferSize, position, false);\n     }\n \n-    JournalChannel(File journalDirectory, long logId, long position, boolean fRemoveFromPageCache) throws IOException {\n+    JournalChannel(File journalDirectory, long logId,\n+                   long preAllocSize, int writeBufferSize, boolean fRemoveFromPageCache) throws IOException {\n+        this(journalDirectory, logId, preAllocSize, writeBufferSize, START_OF_FILE, fRemoveFromPageCache);\n+    }\n+\n+    JournalChannel(File journalDirectory, long logId,\n+                   long preAllocSize, int writeBufferSize, long position, boolean fRemoveFromPageCache) throws IOException {\n+        this.preAllocSize = preAllocSize;\n         this.fRemoveFromPageCache = fRemoveFromPageCache;\n         File fn = new File(journalDirectory, Long.toHexString(logId) + \".txn\");\n \n@@ -97,8 +108,7 @@\n             bb.flip();\n             fc.write(bb);\n \n-            bc = new BufferedChannel(fc, 65536);\n-\n+            bc = new BufferedChannel(fc, writeBufferSize);\n             forceWrite(true);\n             nextPrealloc = preAllocSize;\n             fc.write(zeros, nextPrealloc);\n@@ -184,6 +194,9 @@ public void close() throws IOException {\n     }\n \n     public void forceWrite(boolean forceMetadata) throws IOException {\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Journal ForceWrite\");\n+        }\n         long newForceWritePosition = bc.forceWrite(forceMetadata);\n         if (newForceWritePosition > lastForceWritePosition) {\n             if (fRemoveFromPageCache) {"},{"sha":"10a3d0fc45cf5dc0b200101b997037ecda0d8f76","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -21,25 +21,22 @@\n \n package org.apache.bookkeeper.bookie;\n \n-import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+import java.io.IOException;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.Executors;\n \n-import org.apache.bookkeeper.util.MathUtils;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n-\n-import com.google.common.annotations.VisibleForTesting;\n-\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n-\n-import java.io.IOException;\n-\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n /**\n  * SyncThread is a background thread which help checkpointing ledger storage\n  * when a checkpoint is requested. After a ledger storage is checkpointed,"},{"sha":"d243cd594f8b59840bab4c9d6f09f1f49f973a6e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":153,"deletions":23,"changes":176,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -24,6 +24,8 @@\n \n import org.apache.commons.lang.StringUtils;\n \n+import com.google.common.annotations.Beta;\n+\n /**\n  * Configuration manages server-side settings\n  */\n@@ -48,7 +50,13 @@\n     // Journal Parameters\n     protected final static String MAX_JOURNAL_SIZE = \"journalMaxSizeMB\";\n     protected final static String MAX_BACKUP_JOURNALS = \"journalMaxBackups\";\n+    protected final static String JOURNAL_ADAPTIVE_GROUP_WRITES = \"journalAdaptiveGroupWrites\";\n+    protected final static String JOURNAL_MAX_GROUP_WAIT_MSEC = \"journalMaxGroupWaitMSec\";\n+    protected final static String JOURNAL_BUFFERED_WRITES_THRESHOLD = \"journalBufferedWritesThreshold\";\n+    protected final static String JOURNAL_FLUSH_WHEN_QUEUE_EMPTY = \"journalFlushWhenQueueEmpty\";\n     protected final static String JOURNAL_REMOVE_FROM_PAGE_CACHE = \"journalRemoveFromPageCache\";\n+    protected final static String JOURNAL_PRE_ALLOC_SIZE = \"journalPreAllocSizeMB\";\n+    protected final static String JOURNAL_WRITE_BUFFER_SIZE = \"journalWriteBufferSizeKB\";\n     // Bookie Parameters\n     protected final static String BOOKIE_PORT = \"bookiePort\";\n     protected final static String LISTENING_INTERFACE = \"listeningInterface\";\n@@ -72,6 +80,12 @@\n     protected final static String AUDITOR_PERIODIC_CHECK_INTERVAL = \"auditorPeriodicCheckInterval\";\n     protected final static String AUTO_RECOVERY_DAEMON_ENABLED = \"autoRecoveryDaemonEnabled\";\n \n+    // Worker Thread parameters.\n+    protected final static String NUM_ADD_WORKER_THREADS = \"numAddWorkerThreads\";\n+\n+    protected final static String READ_BUFFER_SIZE = \"readBufferSizeBytes\";\n+    protected final static String WRITE_BUFFER_SIZE = \"writeBufferSizeBytes\";\n+\n     /**\n      * Construct a default configuration object\n      */\n@@ -231,7 +245,7 @@ public ServerConfiguration setPageSize(int pageSize) {\n      *\n      * @return max journal file size\n      */\n-    public long getMaxJournalSize() {\n+    public long getMaxJournalSizeMB() {\n         return this.getLong(MAX_JOURNAL_SIZE, 2 * 1024);\n     }\n \n@@ -242,11 +256,29 @@ public long getMaxJournalSize() {\n      *          new max journal file size\n      * @return server configuration\n      */\n-    public ServerConfiguration setMaxJournalSize(long maxJournalSize) {\n+    public ServerConfiguration setMaxJournalSizeMB(long maxJournalSize) {\n         this.setProperty(MAX_JOURNAL_SIZE, Long.toString(maxJournalSize));\n         return this;\n     }\n \n+    /**\n+     * How much space should we pre-allocate at a time in the journal\n+     *\n+     * @return journal pre-allocation size in MB\n+     */\n+    public int getJournalPreAllocSizeMB() {\n+        return this.getInt(JOURNAL_PRE_ALLOC_SIZE, 16);\n+    }\n+\n+    /**\n+     * Size of the write buffers used for the journal\n+     *\n+     * @return journal write buffer size in KB\n+     */\n+    public int getJournalWriteBufferSizeKB() {\n+        return this.getInt(JOURNAL_WRITE_BUFFER_SIZE, 64);\n+    }\n+\n     /**\n      * Max number of older journal files kept\n      *\n@@ -647,6 +679,125 @@ public long getOpenLedgerRereplicationGracePeriod() {\n         return getLong(OPEN_LEDGER_REREPLICATION_GRACE_PERIOD, 30000);\n     }\n \n+    /**\n+     * Get the number of threads that should handle write requests.\n+     * @return\n+     */\n+    public int getNumAddWorkerThreads() {\n+        return getInt(NUM_ADD_WORKER_THREADS, 1);\n+    }\n+\n+    /**\n+     * Get the number of bytes we should use as capacity for the {@link\n+     * org.apache.bookkeeper.bookie.BufferedReadChannel}\n+     * Default is 512 bytes\n+     * @return read buffer size\n+     */\n+    public int getReadBufferBytes() {\n+        return getInt(READ_BUFFER_SIZE, 512);\n+    }\n+\n+    /**\n+     * Set the number of bytes we should use as capacity for the {@link\n+     * org.apache.bookkeeper.bookie.BufferedReadChannel}\n+     *\n+     * @param readBufferSize\n+     *          Read Buffer Size\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setReadBufferBytes(int readBufferSize) {\n+        setProperty(READ_BUFFER_SIZE, readBufferSize);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the number of bytes used as capacity for the write buffer. Default is\n+     * 64KB.\n+     * NOTE: Make sure this value is greater than the maximum message size.\n+     * @return\n+     */\n+    public int getWriteBufferBytes() {\n+        return getInt(WRITE_BUFFER_SIZE, 65536);\n+    }\n+\n+    /**\n+     * Set the number of bytes used as capacity for the write buffer.\n+     *\n+     * @param writeBufferBytes\n+     *          Write Buffer Bytes\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setWriteBufferBytes(int writeBufferBytes) {\n+        setProperty(WRITE_BUFFER_SIZE, writeBufferBytes);\n+        return this;\n+    }\n+\n+\n+    /**\n+     * Should we group journal force writes\n+     *\n+     * @return group journal force writes\n+     */\n+    public boolean getJournalAdaptiveGroupWrites() {\n+        return getBoolean(JOURNAL_ADAPTIVE_GROUP_WRITES, true);\n+    }\n+\n+    /**\n+     * Enable/disable group journal force writes\n+     *\n+     * @param enabled flag to enable/disable group journal force writes\n+     */\n+    public ServerConfiguration setJournalAdaptiveGroupWrites(boolean enabled) {\n+        setProperty(JOURNAL_ADAPTIVE_GROUP_WRITES, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Maximum latency to impose on a journal write to achieve grouping\n+     *\n+     * @return max wait for grouping\n+     */\n+    public long getJournalMaxGroupWaitMSec() {\n+        return getLong(JOURNAL_MAX_GROUP_WAIT_MSEC, 200);\n+    }\n+\n+    /**\n+     * Maximum latency to impose on a journal write to achieve grouping\n+     *\n+     * @return max wait for grouping\n+     */\n+    public long getJournalBufferedWritesThreshold() {\n+        return getLong(JOURNAL_BUFFERED_WRITES_THRESHOLD, 512 * 1024);\n+    }\n+\n+\n+    /**\n+     * Set if we should flush the journal when queue is empty\n+     */\n+    public ServerConfiguration setJournalFlushWhenQueueEmpty(boolean enabled) {\n+        setProperty(JOURNAL_FLUSH_WHEN_QUEUE_EMPTY, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Should we flush the journal when queue is empty\n+     *\n+     * @return flush when queue is empty\n+     */\n+    public boolean getJournalFlushWhenQueueEmpty() {\n+        return getBoolean(JOURNAL_FLUSH_WHEN_QUEUE_EMPTY, false);\n+    }\n+\n+    /**\n+     * Should we remove pages from page cache after force write\n+     *\n+     * @return remove pages from cache\n+     */\n+    @Beta\n+    public boolean getJournalRemovePagesFromCache() {\n+        return getBoolean(JOURNAL_REMOVE_FROM_PAGE_CACHE, false);\n+    }\n+\n     /**\n      * Set whether the bookie is able to go into read-only mode.\n      * If this is set to false, the bookie will shutdown on encountering\n@@ -757,25 +908,4 @@ public boolean isAutoRecoveryDaemonEnabled() {\n         return getBoolean(AUTO_RECOVERY_DAEMON_ENABLED, false);\n     }\n \n-    /**\n-     * Should we remove pages from page cache after force write\n-     *\n-     * @return remove pages from cache\n-     */\n-    @Beta\n-    public boolean getJournalRemovePagesFromCache() {\n-        return getBoolean(JOURNAL_REMOVE_FROM_PAGE_CACHE, false);\n-    }\n-\n-    /**\n-     * Sets that whether should we remove pages from page cache after force write.\n-     *\n-     * @param enabled\n-     *            - true if we need to remove pages from page cache. otherwise, false\n-     * @return ServerConfiguration\n-     */\n-    public ServerConfiguration setJournalRemovePagesFromCache(boolean enabled) {\n-        setProperty(JOURNAL_REMOVE_FROM_PAGE_CACHE, enabled);\n-        return this;\n-    }\n }"},{"sha":"ad805cfdee98ca055e0c6f4dea19e28a59188b00","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DaemonThreadFactory.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DaemonThreadFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DaemonThreadFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DaemonThreadFactory.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -0,0 +1,39 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.util;\n+\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.Executors;\n+\n+public class DaemonThreadFactory implements ThreadFactory {\n+    private ThreadFactory defaultThreadFactory = Executors.defaultThreadFactory();\n+    private int priority = Thread.NORM_PRIORITY;\n+    public DaemonThreadFactory() {\n+    }\n+    public DaemonThreadFactory(int priority) {\n+        assert priority >= Thread.MIN_PRIORITY && priority <= Thread.MAX_PRIORITY;\n+        this.priority = priority;\n+    }\n+    public Thread newThread(Runnable r) {\n+        Thread thread = defaultThreadFactory.newThread(r);\n+        thread.setDaemon(true);\n+        thread.setPriority(priority);\n+        return thread;\n+    }\n+}"},{"sha":"32571fa59f8d7c7715d6b2bc8459c8a45b33a99c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -48,4 +48,29 @@ public static long now() {\n         return System.nanoTime() / NANOSECONDS_PER_MILLISECOND;\n     }\n \n+    /**\n+     * Current time from some arbitrary time base in the past, counting in\n+     * nanoseconds, and not affected by settimeofday or similar system clock\n+     * changes. This is appropriate to use when computing how much longer to\n+     * wait for an interval to expire.\n+     *\n+     * NOTE: only use it for measuring.\n+     * http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#nanoTime%28%29\n+     *\n+     * @return current time in nanoseconds.\n+     */\n+    public static long nowInNano() {\n+        return System.nanoTime();\n+    }\n+\n+    /**\n+     * Milliseconds elapsed since the time specified, the input is nanoTime\n+     * the only conversion happens when computing the elapsed time\n+     *\n+     * @param startNanoTime the start of the interval that we are measuring\n+     * @return elapsed time in milliseconds.\n+     */\n+    public static long elapsedMSec (long startNanoTime) {\n+       return (System.nanoTime() - startNanoTime)/ NANOSECONDS_PER_MILLISECOND;\n+    }\n }"},{"sha":"2544c72ca66eb94b88e0d0fe2aff9322734acb78","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -35,6 +35,7 @@\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n@@ -132,7 +133,7 @@ public void testBookieRegistration() throws Exception {\n         tmpDir.delete();\n         tmpDir.mkdir();\n \n-        final ServerConfiguration conf = new ServerConfiguration()\n+        final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(null).setJournalDirName(tmpDir.getPath())\n                 .setLedgerDirNames(new String[] { tmpDir.getPath() });\n \n@@ -198,7 +199,7 @@ public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n         tmpDir.delete();\n         tmpDir.mkdir();\n \n-        ServerConfiguration conf = new ServerConfiguration().setZkServers(null)\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration().setZkServers(null)\n                 .setJournalDirName(tmpDir.getPath()).setLedgerDirNames(\n                         new String[] { tmpDir.getPath() });\n \n@@ -253,7 +254,7 @@ public void testDuplicateBookieServerStartup() throws Exception {\n         tmpDir.delete();\n         tmpDir.mkdir();\n \n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         int port = 12555;\n         conf.setZkServers(null).setBookiePort(port).setJournalDirName(\n                 tmpDir.getPath()).setLedgerDirNames(\n@@ -285,7 +286,7 @@ public void testStartBookieWithoutZKServer() throws Exception {\n         tmpDir.delete();\n         tmpDir.mkdir();\n \n-        final ServerConfiguration conf = new ServerConfiguration()\n+        final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(zkutil.getZooKeeperConnectString())\n                 .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n                 .setLedgerDirNames(new String[] { tmpDir.getPath() });\n@@ -310,7 +311,7 @@ public void testStartBookieWithoutZKInitialized() throws Exception {\n         tmpDir.mkdir();\n         final String ZK_ROOT = \"/ledgers2\";\n \n-        final ServerConfiguration conf = new ServerConfiguration()\n+        final ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n             .setLedgerDirNames(new String[] { tmpDir.getPath() });"},{"sha":"836cd8f1b2a8a1341e1e7709efdb78f7551b914e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -36,6 +36,7 @@\n import org.apache.bookkeeper.client.ClientUtil;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -204,7 +205,7 @@ public void testPreV2Journal() throws Exception {\n         writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 100);\n         writeIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir), 1, \"testPasswd\".getBytes());\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -242,7 +243,7 @@ public void testAllJunkJournal() throws Exception {\n \n         writeJunkJournal(Bookie.getCurrentDirectory(journalDir));\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -280,7 +281,7 @@ public void testEmptyJournal() throws Exception {\n \n         writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -306,7 +307,7 @@ public void testHeaderOnlyJournal() throws Exception {\n \n         writePostV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -336,7 +337,7 @@ public void testJunkEndedJournal() throws Exception {\n \n         writeIndexFileForLedger(ledgerDir, 1, \"testPasswd\".getBytes());\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -380,7 +381,7 @@ public void testTruncatedInLenJournal() throws Exception {\n         writeIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir),\n                                 1, \"testPasswd\".getBytes());\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -428,7 +429,7 @@ public void testTruncatedInEntryJournal() throws Exception {\n         writeIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir),\n                                 1, \"testPasswd\".getBytes());\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -494,7 +495,7 @@ private void testPartialFileInfoPreV3Journal(boolean truncateMasterKey)\n         writePartialIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir),\n                                        1, \"testPasswd\".getBytes(), truncateMasterKey);\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -556,7 +557,7 @@ private void testPartialFileInfoPostV3Journal(boolean truncateMasterKey)\n         writePartialIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir), 1, masterKey,\n                                        truncateMasterKey);\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });"},{"sha":"60e6708e3ad079fa10a03e8f6250baa108347d10","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":26,"deletions":22,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -21,23 +21,27 @@\n \n package org.apache.bookkeeper.bookie;\n \n-import org.apache.commons.io.FileUtils;\n+import static org.apache.bookkeeper.bookie.UpgradeTest.newV1JournalDirectory;\n+import static org.apache.bookkeeper.bookie.UpgradeTest.newV1LedgerDirectory;\n+import static org.apache.bookkeeper.bookie.UpgradeTest.newV2JournalDirectory;\n+import static org.apache.bookkeeper.bookie.UpgradeTest.newV2LedgerDirectory;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.test.PortManager;\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.ZooKeeper;\n-\n-import java.io.File;\n-import java.io.IOException;\n-\n-import org.junit.Test;\n import org.junit.After;\n import org.junit.Before;\n-import static org.junit.Assert.*;\n-\n-import static org.apache.bookkeeper.bookie.UpgradeTest.*;\n+import org.junit.Test;\n \n public class CookieTest {\n     ZooKeeperUtil zkutil;\n@@ -75,7 +79,7 @@ private static String newDirectory(boolean createCurDir) throws IOException {\n      */\n     @Test(timeout=60000)\n     public void testCleanStart() throws Exception {\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory(false))\n             .setLedgerDirNames(new String[] { newDirectory(false) })\n@@ -94,7 +98,7 @@ public void testCleanStart() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testBadJournalCookie() throws Exception {\n-        ServerConfiguration conf1 = new ServerConfiguration()\n+        ServerConfiguration conf1 = TestBKConfiguration.newServerConfiguration()\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() })\n             .setBookiePort(bookiePort);\n@@ -103,7 +107,7 @@ public void testBadJournalCookie() throws Exception {\n \n         String journalDir = newDirectory();\n         String ledgerDir = newDirectory();\n-        ServerConfiguration conf2 = new ServerConfiguration()\n+        ServerConfiguration conf2 = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n@@ -130,7 +134,7 @@ public void testDirectoryMissing() throws Exception {\n         String[] ledgerDirs = new String[] {\n             newDirectory(), newDirectory(), newDirectory() };\n         String journalDir = newDirectory();\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(ledgerDirs)\n@@ -171,7 +175,7 @@ public void testDirectoryMissing() throws Exception {\n     public void testDirectoryAdded() throws Exception {\n         String ledgerDir0 = newDirectory();\n         String journalDir = newDirectory();\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir0 })\n@@ -203,7 +207,7 @@ public void testDirectoryAdded() throws Exception {\n     public void testDirectoryCleared() throws Exception {\n         String ledgerDir0 = newDirectory();\n         String journalDir = newDirectory();\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir0 , newDirectory() })\n@@ -228,7 +232,7 @@ public void testDirectoryCleared() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testBookiePortChanged() throws Exception {\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n@@ -254,7 +258,7 @@ public void testBookiePortChanged() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n@@ -263,7 +267,7 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n         b.start();\n         b.shutdown();\n \n-        conf = new ServerConfiguration()\n+        conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n@@ -288,7 +292,7 @@ public void testVerifyCookieWithFormat() throws Exception {\n         // Format the BK Metadata and generate INSTANCEID\n         BookKeeperAdmin.format(adminConf, false, true);\n \n-        ServerConfiguration bookieConf = new ServerConfiguration()\n+        ServerConfiguration bookieConf = TestBKConfiguration.newServerConfiguration()\n                 .setZkServers(zkutil.getZooKeeperConnectString())\n                 .setJournalDirName(newDirectory(false))\n                 .setLedgerDirNames(new String[] { newDirectory(false) })\n@@ -319,7 +323,7 @@ public void testVerifyCookieWithFormat() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testV2data() throws Exception {\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newV2JournalDirectory())\n             .setLedgerDirNames(new String[] { newV2LedgerDirectory() })\n@@ -339,7 +343,7 @@ public void testV2data() throws Exception {\n      */\n     @Test(timeout=60000)\n     public void testV1data() throws Exception {\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newV1JournalDirectory())\n             .setLedgerDirNames(new String[] { newV1LedgerDirectory() })"},{"sha":"012c5fcac0c10e135d9de9ccee6f5cfd7cd94a1c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -19,14 +19,14 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.File;\n-import java.io.IOException;\n \n-import org.apache.bookkeeper.conf.ServerConfiguration;\n+import junit.framework.Assert;\n \n-import org.junit.Test;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.junit.After;\n import org.junit.Before;\n-import junit.framework.Assert;\n+import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -77,7 +77,7 @@ private void deleteRecursive(File f) {\n      */\n     @Test(timeout=60000)\n     public void testCreateNewLog() throws Exception {\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n                      \n         // Creating a new configuration with a number of \n         // ledger directories.\n@@ -99,4 +99,4 @@ public void testCreateNewLog() throws Exception {\n         Assert.assertTrue(\"Wrong log id\", el.getCurrentLogId() > 1);\n     }\n \n-}\n\\ No newline at end of file\n+}"},{"sha":"95469aec18501828d0a3d7fb77c0b33f0ba6a47a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -31,11 +31,11 @@\n import org.apache.bookkeeper.bookie.GarbageCollectorThread.EntryLogMetadata;\n import org.apache.bookkeeper.bookie.GarbageCollectorThread.ExtractionScanner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.junit.After;\n import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -55,7 +55,7 @@ public void testCorruptEntryLog() throws Exception {\n         Bookie.checkDirectoryStructure(curDir);\n \n         int gcWaitTime = 1000;\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setGcWaitTime(gcWaitTime);\n         conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n         Bookie bookie = new Bookie(conf);\n@@ -106,7 +106,7 @@ public void testMissingLogId() throws Exception {\n         File curDir = Bookie.getCurrentDirectory(tmpDir);\n         Bookie.checkDirectoryStructure(curDir);\n \n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n         Bookie bookie = new Bookie(conf);\n         // create some entries\n@@ -167,7 +167,7 @@ public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n             throws Exception {\n         File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n         tmpDir.delete();\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n         EntryLogger entryLogger = null;\n         try {\n@@ -192,7 +192,7 @@ public void testAddEntryFailureOnDiskFull() throws Exception {\n         ledgerDir1.delete();\n         File ledgerDir2 = File.createTempFile(\"bkTest\", \".dir\");\n         ledgerDir2.delete();\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(),\n                 ledgerDir2.getAbsolutePath() });\n         Bookie bookie = new Bookie(conf);"},{"sha":"50d196d215d8948803f01fc2af747e0f2523a170","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -27,8 +27,11 @@\n \n import junit.framework.TestCase;\n \n+import junit.framework.TestCase;\n+\n import org.apache.bookkeeper.bookie.Bookie.NoLedgerException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.SnapshotMap;\n@@ -70,7 +73,7 @@ public void setUp() throws Exception {\n         // create current dir\n         new File(ledgerDir, BookKeeperConstants.CURRENT_DIR).mkdir();\n \n-        conf = new ServerConfiguration();\n+        conf = TestBKConfiguration.newServerConfiguration();\n         conf.setZkServers(null);\n         conf.setJournalDirName(txnDir.getPath());\n         conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -256,7 +259,7 @@ public void testLedgerCacheFlushFailureOnDiskFull() throws Exception {\n         ledgerDir1.delete();\n         File ledgerDir2 = File.createTempFile(\"bkTest\", \".dir\");\n         ledgerDir2.delete();\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(), ledgerDir2.getAbsolutePath() });\n \n         Bookie bookie = new Bookie(conf);\n@@ -312,7 +315,7 @@ public void testIndexPageEvictionWriteOrder() throws Exception {\n         ledgerDir.mkdir();\n         Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() })\n@@ -326,7 +329,7 @@ public void testIndexPageEvictionWriteOrder() throws Exception {\n             b.addEntry(packet, new Bookie.NopWriteCallback(), null, \"passwd\".getBytes());\n         }\n \n-        conf = new ServerConfiguration()\n+        conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });"},{"sha":"f8aa1a0ca4a5de1449d484b1205996eecda7a7be","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -26,16 +26,16 @@\n \n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.junit.Before;\n import org.junit.Test;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n public class TestLedgerDirsManager extends TestCase {\n     static Logger LOG = LoggerFactory.getLogger(TestLedgerDirsManager.class);\n \n-    ServerConfiguration conf = new ServerConfiguration();\n+    ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n     File curDir;\n     LedgerDirsManager dirsManager;\n \n@@ -47,7 +47,7 @@ public void setUp() throws Exception {\n         curDir = Bookie.getCurrentDirectory(tmpDir);\n         Bookie.checkDirectoryStructure(curDir);\n \n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n \n         dirsManager = new LedgerDirsManager(conf);"},{"sha":"c66c31ef081b032a634ee4e1ca497f010674dce2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -37,6 +37,7 @@\n import org.apache.bookkeeper.client.ClientUtil;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.test.PortManager;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.zookeeper.ZooKeeper;\n@@ -159,7 +160,7 @@ static String newV2LedgerDirectory() throws Exception {\n     }\n \n     private static void testUpgradeProceedure(String zkServers, String journalDir, String ledgerDir) throws Exception {\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkServers)\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n@@ -216,7 +217,7 @@ public void testUpgradeCurrent() throws Exception {\n         String ledgerDir = newV2LedgerDirectory();\n         testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n         // Upgrade again\n-        ServerConfiguration conf = new ServerConfiguration()\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })"},{"sha":"ff1bb0f0574c6b18e8d3d5b3c748606b397c6729","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -44,6 +44,7 @@\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n@@ -58,8 +59,8 @@\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.ZooKeeper;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -92,7 +93,7 @@ public void setupZooKeeper() throws Exception {\n         zkUtil = new ZooKeeperUtil();\n         zkUtil.startServer();\n \n-        conf = new ServerConfiguration().setZkServers(zkUtil.getZooKeeperConnectString());\n+        conf = TestBKConfiguration.newServerConfiguration().setZkServers(zkUtil.getZooKeeperConnectString());\n \n         executor = Executors.newCachedThreadPool();\n "},{"sha":"426c30a7eb561b51aa3b15b98dd3c79676dc9a7d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -40,6 +40,7 @@\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.metastore.InMemoryMetaStore;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.replication.AutoRecoveryMain;\n@@ -71,7 +72,7 @@\n     protected int numBookies;\n     protected BookKeeperTestClient bkc;\n \n-    protected ServerConfiguration baseConf = new ServerConfiguration();\n+    protected ServerConfiguration baseConf = TestBKConfiguration.newServerConfiguration();\n     protected ClientConfiguration baseClientConf = new ClientConfiguration();\n \n     private Map<BookieServer, AutoRecoveryMain> autoRecoveryProcesses = new HashMap<BookieServer, AutoRecoveryMain>();\n@@ -363,13 +364,11 @@ public void restartBookies(ServerConfiguration newConf)\n         bs.clear();\n         Thread.sleep(1000);\n         // restart them to ensure we can't\n-        int j = 0;\n         for (ServerConfiguration conf : bsConfs) {\n             if (null != newConf) {\n                 conf.loadConf(newConf);\n             }\n             bs.add(startBookie(conf));\n-            j++;\n         }\n     }\n "},{"sha":"1d8d2627900bd24c5009d2182c11b13f325502a8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -27,33 +27,34 @@\n import java.util.Arrays;\n import java.util.concurrent.Executors;\n \n-import org.jboss.netty.buffer.ChannelBuffer;\n-import org.jboss.netty.buffer.ChannelBuffers;\n-import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n-import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n-import org.junit.Test;\n+import junit.framework.TestCase;\n+\n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+import org.jboss.netty.buffer.ChannelBuffer;\n+import org.jboss.netty.buffer.ChannelBuffers;\n+import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n+import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n+import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import junit.framework.TestCase;\n-\n public class BookieClientTest extends TestCase {\n     static Logger LOG = LoggerFactory.getLogger(BookieClientTest.class);\n     BookieServer bs;\n     File tmpDir;\n     public int port = 13645;\n     public ClientSocketChannelFactory channelFactory;\n     public OrderedSafeExecutor executor;\n-    ServerConfiguration conf = new ServerConfiguration();\n+    ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n \n     @Override\n     public void setUp() throws Exception {\n@@ -64,7 +65,7 @@ public void setUp() throws Exception {\n         // Since this test does not rely on the BookKeeper client needing to\n         // know via ZooKeeper which Bookies are available, okay, so pass in null\n         // for the zkServers input parameter when constructing the BookieServer.\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n         conf.setZkServers(null).setBookiePort(port)\n             .setJournalDirName(tmpDir.getPath())\n             .setLedgerDirNames(new String[] { tmpDir.getPath() });"},{"sha":"042ce7937528a79bfad307466658f1c12936bf2c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":12,"deletions":15,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -22,25 +22,22 @@\n  */\n import java.io.File;\n import java.util.Enumeration;\n-\n-import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.junit.Assert;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.junit.After;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This class tests that bookie rolling journals\n@@ -59,7 +56,7 @@ public BookieJournalRollingTest() {\n     @Override\n     public void setUp() throws Exception {\n         // Set up the configuration properties needed.\n-        baseConf.setMaxJournalSize(1);\n+        baseConf.setMaxJournalSizeMB(1);\n         baseConf.setMaxBackupJournals(1);\n         super.setUp();\n     }\n@@ -216,7 +213,7 @@ public void testJournalRollingWithoutSyncup() throws Exception {\n         }\n \n         // set flush interval to a large value\n-        ServerConfiguration newConf = new ServerConfiguration();\n+        ServerConfiguration newConf = TestBKConfiguration.newServerConfiguration();\n         newConf.setFlushInterval(999999999);\n         // restart bookies\n         restartBookies(newConf);\n@@ -254,7 +251,7 @@ public void testReplayDeletedLedgerJournalEntries() throws Exception {\n         Thread.sleep(3 * baseConf.getFlushInterval());\n \n         // restart bookies with flush interval set to a large value\n-        ServerConfiguration newConf = new ServerConfiguration();\n+        ServerConfiguration newConf = TestBKConfiguration.newServerConfiguration();\n         newConf.setFlushInterval(999999999);\n         // restart bookies\n         restartBookies(newConf);"},{"sha":"47576f6c426ecfa25d049cd9808d67a2c6546aab","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -28,15 +28,16 @@\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import junit.framework.TestCase;\n+\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-\n-import junit.framework.TestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -50,7 +51,7 @@\n     File txnDir, ledgerDir;\n     int recvTimeout = 10000;\n     Semaphore throttle;\n-    ServerConfiguration conf = new ServerConfiguration();\n+    ServerConfiguration conf = TestBKConfiguration.newServerConfiguration();\n \n     @Override\n     @Before"},{"sha":"6718e54062e18e76f24fb7ee43cf9c269650efb1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -20,25 +20,26 @@\n  */\n package org.apache.bookkeeper.test;\n \n-import java.io.File;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n-import java.util.Enumeration;\n-import java.util.Arrays;\n+import java.io.File;\n import java.net.InetAddress;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.junit.Test;\n-import org.junit.Before;\n-import org.junit.After;\n-import static org.junit.Assert.*;\n+import java.util.Arrays;\n+import java.util.Enumeration;\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.FileSystemUpgrade;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.TestBKConfiguration;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class TestBackwardCompat {\n     static Logger LOG = LoggerFactory.getLogger(TestBackwardCompat.class);\n@@ -265,7 +266,7 @@ void close() throws Exception {\n         org.apache.bookkeeper.proto.BookieServer server = null;\n \n         ServerCurrent(File journalDir, File ledgerDir, int port) throws Exception {\n-            conf = new org.apache.bookkeeper.conf.ServerConfiguration();\n+            conf = TestBKConfiguration.newServerConfiguration();\n             conf.setBookiePort(port);\n             conf.setZkServers(zkUtil.getZooKeeperConnectString());\n             conf.setJournalDirName(journalDir.getPath());"},{"sha":"bed942e5af8ffbedf533df173882857a928bca6b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/bedfebf93f8c9f93fac19bd58005dce6e0ffbd17/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=bedfebf93f8c9f93fac19bd58005dce6e0ffbd17","patch":"@@ -108,7 +108,7 @@ protected Bookie newBookie(ServerConfiguration conf)\n     // BookKeeper client instance\n     protected BookKeeper bk;\n \n-    protected ServerConfiguration baseConf = new ServerConfiguration();\n+    protected ServerConfiguration baseConf = newServerConfiguration();\n     protected ClientConfiguration baseClientConf = new ClientConfiguration();\n \n     // Constructor\n@@ -242,6 +242,14 @@ private BookieServer startBookie(ServerConfiguration conf) throws Exception {\n         return server;\n     }\n \n+    // construct the basic server configuration for bookkeeper testing\n+    private static ServerConfiguration newServerConfiguration() {\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setJournalFlushWhenQueueEmpty(true);\n+        conf.setJournalAdaptiveGroupWrites(false);\n+        return conf;\n+    }\n+\n     protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {\n         ServerConfiguration conf = new ServerConfiguration(baseConf);\n         conf.setBookiePort(port);"}]}

