{"sha":"bf3d55f0cbd3461626148ad436a78923047dd797","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZjNkNTVmMGNiZDM0NjE2MjYxNDhhZDQzNmE3ODkyMzA0N2RkNzk3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-16T15:01:08Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-16T15:01:08Z"},"message":"BOOKKEEPER-417: Hierarchical zk underreplication manager should clean up its hierarchy when done to allow for fast acquisition of underreplicated entries (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1398834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a6c014dffadcd33907ee035a586751311bd846c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0a6c014dffadcd33907ee035a586751311bd846c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bf3d55f0cbd3461626148ad436a78923047dd797","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bf3d55f0cbd3461626148ad436a78923047dd797","html_url":"https://github.com/apache/bookkeeper/commit/bf3d55f0cbd3461626148ad436a78923047dd797","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bf3d55f0cbd3461626148ad436a78923047dd797/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"de64ff31f01e2a6e7889bae8d75681d2176f21bc","url":"https://api.github.com/repos/apache/bookkeeper/commits/de64ff31f01e2a6e7889bae8d75681d2176f21bc","html_url":"https://github.com/apache/bookkeeper/commit/de64ff31f01e2a6e7889bae8d75681d2176f21bc"}],"stats":{"total":177,"additions":172,"deletions":5},"files":[{"sha":"fb165f2a811a2cf7e63497dadeef0207f65924f6","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/bf3d55f0cbd3461626148ad436a78923047dd797/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/bf3d55f0cbd3461626148ad436a78923047dd797/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=bf3d55f0cbd3461626148ad436a78923047dd797","patch":"@@ -92,6 +92,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-418: Store hostname of locker in replication lock (ivank)\n \n+        BOOKKEEPER-417: Hierarchical zk underreplication manager should clean up its hierarchy when done to allow for fast acquisition of underreplicated entries (ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"4e5458e7b1c085106f145e4a851b72a87239a239","filename":"bookkeeper-server/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/bf3d55f0cbd3461626148ad436a78923047dd797/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/bf3d55f0cbd3461626148ad436a78923047dd797/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=bf3d55f0cbd3461626148ad436a78923047dd797","patch":"@@ -37,6 +37,11 @@\n       <version>2.4.1</version>\n       <scope>compile</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+      <version>13.0.1</version>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>"},{"sha":"f241dc7f40213bdfbb5698efcdb6678c63c872ef","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":38,"deletions":2,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/bf3d55f0cbd3461626148ad436a78923047dd797/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf3d55f0cbd3461626148ad436a78923047dd797/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=bf3d55f0cbd3461626148ad436a78923047dd797","patch":"@@ -36,6 +36,7 @@\n import org.apache.zookeeper.ZooDefs.Ids;\n \n import com.google.protobuf.TextFormat;\n+import com.google.common.base.Joiner;\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n@@ -46,6 +47,7 @@\n import java.util.Map;\n import java.util.List;\n import java.util.Collections;\n+import java.util.Arrays;\n \n import java.util.regex.Pattern;\n import java.util.regex.Matcher;\n@@ -260,6 +262,24 @@ public void markLedgerReplicated(long ledgerId) throws ReplicationException.Unav\n             Lock l = heldLocks.get(ledgerId);\n             if (l != null) {\n                 zkc.delete(getUrLedgerZnode(ledgerId), l.getLedgerZNodeVersion());\n+\n+                try {\n+                    // clean up the hierarchy\n+                    String parts[] = getUrLedgerZnode(ledgerId).split(\"/\");\n+                    for (int i = 1; i <= 4; i++) {\n+                        String p[] = Arrays.copyOf(parts, parts.length - i);\n+                        String path = Joiner.on(\"/\").join(p);\n+                        Stat s = zkc.exists(path, null);\n+                        if (s != null) {\n+                            zkc.delete(path, s.getVersion());\n+                        }\n+                    }\n+                } catch (KeeperException.NotEmptyException nee) {\n+                    // This can happen when cleaning up the hierarchy.\n+                    // It's safe to ignore, it simply means another\n+                    // ledger in the same hierarchy has been marked as\n+                    // underreplicated.\n+                }\n             }\n         } catch (KeeperException.NoNodeException nne) {\n             // this is ok\n@@ -281,7 +301,15 @@ public void markLedgerReplicated(long ledgerId) throws ReplicationException.Unav\n     private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watcher w)\n             throws KeeperException, InterruptedException {\n         if (depth == 4) {\n-            List<String> children = zkc.getChildren(parent, w);\n+            List<String> children;\n+            try {\n+                children = zkc.getChildren(parent, w);\n+            } catch (KeeperException.NoNodeException nne) {\n+                // can occur if another underreplicated ledger's\n+                // hierarchy is being cleaned up\n+                return -1;\n+            }\n+\n             Collections.shuffle(children);\n \n             while (children.size() > 0) {\n@@ -314,7 +342,15 @@ private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watc\n             return -1;\n         }\n \n-        List<String> children = zkc.getChildren(parent, w);\n+        List<String> children;\n+        try {\n+            children = zkc.getChildren(parent, w);\n+        } catch (KeeperException.NoNodeException nne) {\n+            // can occur if another underreplicated ledger's\n+            // hierarchy is being cleaned up\n+            return -1;\n+        }\n+\n         Collections.shuffle(children);\n \n         while (children.size() > 0) {"},{"sha":"65690f4d58ce73126f479c2d1bc5c6f2c1eb4800","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/bookkeeper/blob/bf3d55f0cbd3461626148ad436a78923047dd797/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf3d55f0cbd3461626148ad436a78923047dd797/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=bf3d55f0cbd3461626148ad436a78923047dd797","patch":"@@ -23,6 +23,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.fail;\n \n import java.nio.charset.Charset;\n@@ -39,6 +40,8 @@\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n@@ -584,6 +587,117 @@ public void run() {\n         }\n     }\n \n+    /**\n+     * Test that the hierarchy gets cleaned up as ledgers\n+     * are marked as fully replicated\n+     */\n+    @Test\n+    public void testHierarchyCleanup() throws Exception {\n+        final LedgerUnderreplicationManager replicaMgr = lmf1\n+            .newLedgerUnderreplicationManager();\n+        // 4 ledgers, 2 in the same hierarchy\n+        long[] ledgers = { 0x00000000deadbeefL, 0x00000000deadbeeeL,\n+                           0x00000000beefcafeL, 0x00000000cafed00dL };\n+\n+        for (long l : ledgers) {\n+            replicaMgr.markLedgerUnderreplicated(l, \"localhost:3181\");\n+        }\n+        // can't simply test top level as we are limited to ledger\n+        // ids no larger than an int\n+        String testPath = urLedgerPath + \"/0000/0000\";\n+        List<String> children = zkc1.getChildren(testPath, false);\n+        assertEquals(\"Wrong number of hierarchies\", 3, children.size());\n+\n+        int marked = 0;\n+        while (marked < 3) {\n+            long l = replicaMgr.getLedgerToRereplicate();\n+            if (l != ledgers[0]) {\n+                replicaMgr.markLedgerReplicated(l);\n+                marked++;\n+            } else {\n+                replicaMgr.releaseUnderreplicatedLedger(l);\n+            }\n+        }\n+        children = zkc1.getChildren(testPath, false);\n+        assertEquals(\"Wrong number of hierarchies\", 1, children.size());\n+\n+        long l = replicaMgr.getLedgerToRereplicate();\n+        assertEquals(\"Got wrong ledger\", ledgers[0], l);\n+        replicaMgr.markLedgerReplicated(l);\n+\n+        children = zkc1.getChildren(urLedgerPath, false);\n+        assertEquals(\"All hierarchies should be cleaned up\", 0, children.size());\n+    }\n+\n+    /**\n+     * Test that as the hierarchy gets cleaned up, it doesn't interfere\n+     * with the marking of other ledgers as underreplicated\n+     */\n+    @Test(timeout = 90000)\n+    public void testHierarchyCleanupInterference() throws Exception {\n+        final LedgerUnderreplicationManager replicaMgr1 = lmf1\n+            .newLedgerUnderreplicationManager();\n+        final LedgerUnderreplicationManager replicaMgr2 = lmf2\n+            .newLedgerUnderreplicationManager();\n+\n+        final int iterations = 1000;\n+        final AtomicBoolean threadFailed = new AtomicBoolean(false);\n+        Thread markUnder = new Thread() {\n+                public void run() {\n+                    long l = 1;\n+                    try {\n+                        for (int i = 0; i < iterations; i++) {\n+                            replicaMgr1.markLedgerUnderreplicated(l, \"localhost:3181\");\n+                            l += 10000;\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"markUnder Thread failed with exception\", e);\n+                        threadFailed.set(true);\n+                        return;\n+                    }\n+                }\n+            };\n+        final AtomicInteger processed = new AtomicInteger(0);\n+        Thread markRepl = new Thread() {\n+                public void run() {\n+                    try {\n+                        for (int i = 0; i < iterations; i++) {\n+                            long l = replicaMgr2.getLedgerToRereplicate();\n+                            replicaMgr2.markLedgerReplicated(l);\n+                            processed.incrementAndGet();\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"markRepl Thread failed with exception\", e);\n+                        threadFailed.set(true);\n+                        return;\n+                    }\n+                }\n+            };\n+        markRepl.setDaemon(true);\n+        markUnder.setDaemon(true);\n+\n+        markRepl.start();\n+        markUnder.start();\n+        markUnder.join();\n+        assertFalse(\"Thread failed to complete\", threadFailed.get());\n+\n+        int lastProcessed = 0;\n+        while (true) {\n+            markRepl.join(10000);\n+            if (!markRepl.isAlive()) {\n+                break;\n+            }\n+            assertFalse(\"markRepl thread not progressing\", lastProcessed == processed.get());\n+        }\n+        assertFalse(\"Thread failed to complete\", threadFailed.get());\n+\n+        List<String> children = zkc1.getChildren(urLedgerPath, false);\n+        for (String s : children) {\n+            LOG.info(\"s: {}\", s);\n+        }\n+        assertEquals(\"All hierarchies should be cleaned up\", 0, children.size());\n+    }\n+\n     private void verifyMarkLedgerUnderreplicated(Collection<String> missingReplica)\n             throws KeeperException, InterruptedException,\n             CompatibilityException, UnavailableException {"},{"sha":"e18028610e30720102c3cd42adef583a4489499b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/bf3d55f0cbd3461626148ad436a78923047dd797/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf3d55f0cbd3461626148ad436a78923047dd797/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=bf3d55f0cbd3461626148ad436a78923047dd797","patch":"@@ -502,16 +502,26 @@ private void killAllBookies(LedgerHandle lh, InetSocketAddress excludeBK)\n \n     private boolean isLedgerInUnderReplication(long id, String basePath)\n             throws KeeperException, InterruptedException {\n-        List<String> children = zkc.getChildren(basePath, true);\n+        List<String> children;\n+        try {\n+            children = zkc.getChildren(basePath, true);\n+        } catch (KeeperException.NoNodeException nne) {\n+            return false;\n+        }\n+\n         boolean isMatched = false;\n         for (String child : children) {\n             if (child.startsWith(\"urL\") && child.contains(String.valueOf(id))) {\n                 isMatched = true;\n                 break;\n             } else {\n                 String path = basePath + '/' + child;\n-                if (zkc.getChildren(path, false).size() > 0) {\n-                    isMatched = isLedgerInUnderReplication(id, path);\n+                try {\n+                    if (zkc.getChildren(path, false).size() > 0) {\n+                        isMatched = isLedgerInUnderReplication(id, path);\n+                    }\n+                } catch (KeeperException.NoNodeException nne) {\n+                    return false;\n                 }\n             }\n "}]}

