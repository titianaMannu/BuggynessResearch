{"sha":"bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZjhlZjE0YmMxYmZkZGU2YzZjOGVkY2Q3ZjM4MGI0YmVjYTAyM2Y2","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2017-03-28T20:37:16Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-03-28T20:37:16Z"},"message":"BOOKKEEPER-852: Release LedgerDescriptor and master-key objects when not used anymore\n\nMaps with ledger descriptors and master-keys are not cleaned after a ledger gets deleted.\n\nFor this PR, please only take a look at the last commit 18e3455. The other 2 commits are already in separate PRs. I'll rebase this PR once they'll get merged.\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #78 from merlimat/bk-ledger-descriptor","tree":{"sha":"2c97b7f92b675bc96be336141b7913ffbda35fcb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2c97b7f92b675bc96be336141b7913ffbda35fcb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","html_url":"https://github.com/apache/bookkeeper/commit/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"0583175de72446d00088611000310b000e8e61df","url":"https://api.github.com/repos/apache/bookkeeper/commits/0583175de72446d00088611000310b000e8e61df","html_url":"https://github.com/apache/bookkeeper/commit/0583175de72446d00088611000310b000e8e61df"}],"stats":{"total":297,"additions":256,"deletions":41},"files":[{"sha":"61ba9b14faf69ee98e143446c2eb53eeb126af30","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":16,"deletions":15,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","patch":"@@ -32,8 +32,6 @@\n import java.nio.ByteBuffer;\n import java.util.*;\n import java.util.concurrent.Callable;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n@@ -56,7 +54,6 @@\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.DNS;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteLacCallback;\n import org.apache.bookkeeper.stats.Counter;\n import org.apache.bookkeeper.stats.Gauge;\n import org.apache.bookkeeper.stats.NullStatsLogger;\n@@ -65,6 +62,7 @@\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.collections.ConcurrentLongHashMap;\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n import org.apache.bookkeeper.zookeeper.BoundExponentialBackoffRetryPolicy;\n@@ -141,7 +139,7 @@\n     BookieBean jmxBookieBean;\n     BKMBeanInfo jmxLedgerStorageBean;\n \n-    final ConcurrentMap<Long, byte[]> masterKeyCache = new ConcurrentHashMap<Long, byte[]>();\n+    private final ConcurrentLongHashMap<byte[]> masterKeyCache = new ConcurrentLongHashMap<>();\n \n     final protected String zkBookieRegPath;\n     final protected String zkBookieReadOnlyPath;\n@@ -1345,23 +1343,26 @@ synchronized int shutdown(int exitCode) {\n      *\n      * @throws BookieException if masterKey does not match the master key of the ledger\n      */\n-    private LedgerDescriptor getLedgerForEntry(ByteBuffer entry, byte[] masterKey)\n+    private LedgerDescriptor getLedgerForEntry(ByteBuffer entry, final byte[] masterKey)\n             throws IOException, BookieException {\n-        long ledgerId = entry.getLong();\n+        final long ledgerId = entry.getLong();\n         LedgerDescriptor l = handles.getHandle(ledgerId, masterKey);\n-        if (!masterKeyCache.containsKey(ledgerId)) {\n-            // new handle, we should add the key to journal ensure we can rebuild\n-            ByteBuffer bb = ByteBuffer.allocate(8 + 8 + 4 + masterKey.length);\n-            bb.putLong(ledgerId);\n-            bb.putLong(METAENTRY_ID_LEDGER_KEY);\n-            bb.putInt(masterKey.length);\n-            bb.put(masterKey);\n-            bb.flip();\n+        if (masterKeyCache.get(ledgerId) == null) {\n+            // Force the load into masterKey cache\n+            byte[] oldValue = masterKeyCache.putIfAbsent(ledgerId, masterKey);\n+            if (oldValue == null) {\n+                // new handle, we should add the key to journal ensure we can rebuild\n+                ByteBuffer bb = ByteBuffer.allocate(8 + 8 + 4 + masterKey.length);\n+                bb.putLong(ledgerId);\n+                bb.putLong(METAENTRY_ID_LEDGER_KEY);\n+                bb.putInt(masterKey.length);\n+                bb.put(masterKey);\n+                bb.flip();\n \n-            if (null == masterKeyCache.putIfAbsent(ledgerId, masterKey)) {\n                 getJournal(ledgerId).logAddEntry(bb, new NopWriteCallback(), null);\n             }\n         }\n+\n         return l;\n     }\n "},{"sha":"2bc72e23eb92d820749ca626fb1449f8d53e2190","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","status":"modified","additions":30,"deletions":25,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/HandleFactoryImpl.java?ref=bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","patch":"@@ -22,47 +22,52 @@\n package org.apache.bookkeeper.bookie;\n \n import java.io.IOException;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.ConcurrentMap;\n \n-class HandleFactoryImpl implements HandleFactory {\n-    ConcurrentMap<Long, LedgerDescriptor> ledgers = new ConcurrentHashMap<Long, LedgerDescriptor>();\n-    ConcurrentMap<Long, LedgerDescriptor> readOnlyLedgers\n-        = new ConcurrentHashMap<Long, LedgerDescriptor>();\n+import org.apache.bookkeeper.bookie.LedgerStorage.LedgerDeletionListener;\n+import org.apache.bookkeeper.util.collections.ConcurrentLongHashMap;\n+\n+class HandleFactoryImpl implements HandleFactory, LedgerDeletionListener {\n+    private final ConcurrentLongHashMap<LedgerDescriptor> ledgers;\n+    private final ConcurrentLongHashMap<LedgerDescriptor> readOnlyLedgers;\n \n     final LedgerStorage ledgerStorage;\n \n     HandleFactoryImpl(LedgerStorage ledgerStorage) {\n         this.ledgerStorage = ledgerStorage;\n+        this.ledgers = new ConcurrentLongHashMap<>();\n+        this.readOnlyLedgers = new ConcurrentLongHashMap<>();\n+\n+        ledgerStorage.registerLedgerDeletionListener(this);\n     }\n \n     @Override\n-    public LedgerDescriptor getHandle(long ledgerId, byte[] masterKey)\n-            throws IOException, BookieException {\n-        LedgerDescriptor handle = null;\n-        if (null == (handle = ledgers.get(ledgerId))) {\n-            // LedgerDescriptor#create sets the master key in the ledger storage, calling it\n-            // twice on the same ledgerId is safe because it eventually puts a value in the ledger cache\n-            // that guarantees synchronized access across all cached entries.\n-            handle = ledgers.putIfAbsent(ledgerId, LedgerDescriptor.create(masterKey, ledgerId, ledgerStorage));\n-            if (null == handle) {\n-                handle = ledgers.get(ledgerId);\n-            }\n+    public LedgerDescriptor getHandle(final long ledgerId, final byte[] masterKey) throws IOException, BookieException {\n+        LedgerDescriptor handle = ledgers.get(ledgerId);\n+\n+        if (handle == null) {\n+            handle = LedgerDescriptor.create(masterKey, ledgerId, ledgerStorage);\n+            ledgers.putIfAbsent(ledgerId, handle);\n         }\n+\n         handle.checkAccess(masterKey);\n         return handle;\n     }\n \n     @Override\n-    public LedgerDescriptor getReadOnlyHandle(long ledgerId)\n-            throws IOException, Bookie.NoLedgerException {\n-        LedgerDescriptor handle = null;\n-        if (null == (handle = readOnlyLedgers.get(ledgerId))) {\n-            handle = readOnlyLedgers.putIfAbsent(ledgerId, LedgerDescriptor.createReadOnly(ledgerId, ledgerStorage));\n-            if (null == handle) {\n-                handle = readOnlyLedgers.get(ledgerId);\n-            }\n+    public LedgerDescriptor getReadOnlyHandle(final long ledgerId) throws IOException, Bookie.NoLedgerException {\n+        LedgerDescriptor handle = readOnlyLedgers.get(ledgerId);\n+\n+        if (handle == null) {\n+            handle = LedgerDescriptor.createReadOnly(ledgerId, ledgerStorage);\n+            readOnlyLedgers.putIfAbsent(ledgerId, handle);\n         }\n+\n         return handle;\n     }\n+\n+    @Override\n+    public void ledgerDeleted(long ledgerId) {\n+        ledgers.remove(ledgerId);\n+        readOnlyLedgers.remove(ledgerId);\n+    }\n }"},{"sha":"afd65dc53b5122a6295f76e2bc2b79d374fec3a2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","patch":"@@ -30,6 +30,7 @@\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n \n+import java.util.concurrent.CopyOnWriteArrayList;\n import java.util.concurrent.TimeUnit;\n \n import java.util.Map;\n@@ -46,6 +47,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.Lists;\n+\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.STORAGE_GET_ENTRY;\n import static org.apache.bookkeeper.bookie.BookKeeperServerStats.STORAGE_GET_OFFSET;\n \n@@ -82,6 +85,7 @@ protected synchronized Checkpoint getLastCheckpoint() {\n     LedgerCache ledgerCache;\n     private CheckpointSource checkpointSource;\n     protected final CheckpointHolder checkpointHolder = new CheckpointHolder();\n+    private final CopyOnWriteArrayList<LedgerDeletionListener> ledgerDeletionListeners = Lists.newCopyOnWriteArrayList();\n \n     // A sorted map to stored all active ledger ids\n     protected final SnapshotMap<Long, Boolean> activeLedgers;\n@@ -374,6 +378,10 @@ synchronized public void flush() throws IOException {\n     public void deleteLedger(long ledgerId) throws IOException {\n         activeLedgers.remove(ledgerId);\n         ledgerCache.deleteLedger(ledgerId);\n+\n+        for (LedgerDeletionListener listener : ledgerDeletionListeners) {\n+            listener.ledgerDeleted(ledgerId);\n+        }\n     }\n \n     @Override\n@@ -414,6 +422,11 @@ public BKMBeanInfo getJMXBean() {\n         return ledgerCache.getJMXBean();\n     }\n \n+    @Override\n+    public void registerLedgerDeletionListener(LedgerDeletionListener listener) {\n+        ledgerDeletionListeners.add(listener);\n+    }\n+\n     protected void processEntry(long ledgerId, long entryId, ByteBuffer entry) throws IOException {\n         processEntry(ledgerId, entryId, entry, true);\n     }"},{"sha":"fbdd6b94b018b873aba47c387db3b2b9ac6a1792","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java?ref=bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","patch":"@@ -145,6 +145,18 @@ public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n      */\n     void deleteLedger(long ledgerId) throws IOException;\n \n+    public static interface LedgerDeletionListener {\n+        void ledgerDeleted(long ledgerId);\n+    }\n+\n+    /**\n+     * Register a listener for ledgers deletion notifications\n+     *\n+     * @param listener\n+     *            object that will be notified every time a ledger is deleted\n+     */\n+    void registerLedgerDeletionListener(LedgerDeletionListener listener);\n+\n     /**\n      * Get the JMX management bean for this LedgerStorage\n      */"},{"sha":"d81e4d0163e169e75e175431363aac8235eab0e5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageTest.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/bookkeeper/blob/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerStorageTest.java?ref=bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","patch":"@@ -0,0 +1,53 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class LedgerStorageTest extends BookKeeperClusterTestCase {\n+    public LedgerStorageTest() {\n+        super(1);\n+    }\n+\n+    @Test(timeout = 20000)\n+    public void testLedgerDeleteNotification() throws Exception {\n+        LedgerStorage ledgerStorage = bs.get(0).getBookie().ledgerStorage;\n+\n+        long deletedLedgerId = 5;\n+        ledgerStorage.setMasterKey(deletedLedgerId, new byte[0]);\n+\n+        CountDownLatch counter = new CountDownLatch(1);\n+\n+        ledgerStorage.registerLedgerDeletionListener(ledgerId -> {\n+            Assert.assertEquals(deletedLedgerId, ledgerId);\n+\n+            counter.countDown();\n+        });\n+\n+        ledgerStorage.deleteLedger(deletedLedgerId);\n+\n+        counter.await();\n+    }\n+}"},{"sha":"3672985b4dcafcdcc3f888b0bb6ba3c0848caaf0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java?ref=bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","patch":"@@ -350,6 +350,10 @@ public Checkpoint checkpoint(Checkpoint checkpoint)\n \n         @Override\n         public BKMBeanInfo getJMXBean() { return null; }\n+\n+        @Override\n+        public void registerLedgerDeletionListener(LedgerDeletionListener listener) {\n+        }\n     }\n \n     private static class DummyLedgerDirsListener"},{"sha":"280db05ad153acb3b37c22dfa08a8411bbcfc561","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":123,"deletions":1,"changes":124,"blob_url":"https://github.com/apache/bookkeeper/blob/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java?ref=bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","patch":"@@ -28,11 +28,14 @@\n import static org.junit.Assert.assertTrue;\n \n import java.io.IOException;\n+import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n import java.util.Queue;\n import java.util.Random;\n import java.util.Set;\n@@ -42,15 +45,24 @@\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.bookie.CheckpointSource;\n+import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.bookie.CompactableLedgerStorage;\n+import org.apache.bookkeeper.bookie.EntryLocation;\n+import org.apache.bookkeeper.bookie.EntryLogger;\n import org.apache.bookkeeper.bookie.GarbageCollector;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager;\n import org.apache.bookkeeper.bookie.ScanAndCompareGarbageCollector;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.versioning.Version;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -299,6 +311,116 @@ public void clean(long ledgerId) {\n         removeLedger(first);\n         garbageCollector.gc(cleaner);\n         assertEquals(\"Should have cleaned something\", 1, cleaned.size());\n-        assertEquals(\"Should have cleaned first ledger\" + first, (long)first, (long)cleaned.get(0));\n+        assertEquals(\"Should have cleaned first ledger\" + first, (long) first, (long) cleaned.get(0));\n+    }\n+\n+    class MockLedgerStorage implements CompactableLedgerStorage {\n+\n+        @Override\n+        public void initialize(ServerConfiguration conf, LedgerManager ledgerManager,\n+                LedgerDirsManager ledgerDirsManager, LedgerDirsManager indexDirsManager,\n+                CheckpointSource checkpointSource, StatsLogger statsLogger) throws IOException {\n+        }\n+\n+        @Override\n+        public void start() {\n+        }\n+\n+        @Override\n+        public void shutdown() throws InterruptedException {\n+        }\n+\n+        @Override\n+        public long getLastAddConfirmed(long ledgerId) throws IOException {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void setExplicitlac(long ledgerId, ByteBuffer lac) throws IOException {\n+        }\n+\n+        @Override\n+        public ByteBuffer getExplicitLac(long ledgerId) {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean ledgerExists(long ledgerId) throws IOException {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean setFenced(long ledgerId) throws IOException {\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean isFenced(long ledgerId) throws IOException {\n+            return false;\n+        }\n+\n+        @Override\n+        public void setMasterKey(long ledgerId, byte[] masterKey) throws IOException {\n+        }\n+\n+        @Override\n+        public byte[] readMasterKey(long ledgerId) throws IOException, BookieException {\n+            return null;\n+        }\n+\n+        @Override\n+        public long addEntry(ByteBuffer entry) throws IOException {\n+            return 0;\n+        }\n+\n+        @Override\n+        public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n+            return null;\n+        }\n+\n+        @Override\n+        public void flush() throws IOException {\n+        }\n+\n+        @Override\n+        public Checkpoint checkpoint(Checkpoint checkpoint) throws IOException {\n+            return null;\n+        }\n+\n+        @Override\n+        public void deleteLedger(long ledgerId) throws IOException {\n+            activeLedgers.remove(ledgerId);\n+        }\n+\n+        @Override\n+        public Iterable<Long> getActiveLedgersInRange(long firstLedgerId, long lastLedgerId) {\n+            NavigableMap<Long, Boolean> bkActiveLedgersSnapshot = activeLedgers.snapshot();\n+            Map<Long, Boolean> subBkActiveLedgers = bkActiveLedgersSnapshot\n+                    .subMap(firstLedgerId, true, lastLedgerId, false);\n+\n+            return subBkActiveLedgers.keySet();\n+        }\n+\n+        @Override\n+        public BKMBeanInfo getJMXBean() {\n+            return null;\n+        }\n+\n+        @Override\n+        public EntryLogger getEntryLogger() {\n+            return null;\n+        }\n+\n+        @Override\n+        public void updateEntriesLocations(Iterable<EntryLocation> locations) throws IOException {\n+        }\n+\n+        @Override\n+        public void registerLedgerDeletionListener(LedgerDeletionListener listener) {\n+        }\n+\n+        @Override\n+        public void flushEntriesLocationsIndex() throws IOException {\n+        }\n     }\n }"},{"sha":"8d13102a1dc3ac398566d0eca6c0aaeea2b250a4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java?ref=bf8ef14bc1bfdde6c6c8edcd7f380b4beca023f6","patch":"@@ -35,6 +35,7 @@\n import org.apache.bookkeeper.bookie.EntryLocation;\n import org.apache.bookkeeper.bookie.EntryLogger;\n import org.apache.bookkeeper.bookie.LedgerDirsManager;\n+import org.apache.bookkeeper.bookie.LedgerStorage.LedgerDeletionListener;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.stats.StatsLogger;\n@@ -175,6 +176,10 @@ public Checkpoint checkpoint(Checkpoint checkpoint) throws IOException {\n             return null;\n         }\n \n+        @Override\n+        public void registerLedgerDeletionListener(LedgerDeletionListener listener) {\n+        }\n+\n         @Override\n         public void deleteLedger(long ledgerId) throws IOException {\n             activeLedgers.remove(ledgerId);"}]}

