{"sha":"c1024f84c8502c77ef42dad1123a87e3dbd629fc","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMTAyNGY4NGM4NTAyYzc3ZWY0MmRhZDExMjNhODdlM2RiZDYyOWZj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T06:21:07Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T06:21:07Z"},"message":"BOOKKEEPER-281: BKClient is failing when zkclient connection delays (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.1@1346253 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9eaecaf0bef2e78dc1025d6a47642f3622e8da21","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9eaecaf0bef2e78dc1025d6a47642f3622e8da21"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c1024f84c8502c77ef42dad1123a87e3dbd629fc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c1024f84c8502c77ef42dad1123a87e3dbd629fc","html_url":"https://github.com/apache/bookkeeper/commit/c1024f84c8502c77ef42dad1123a87e3dbd629fc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c1024f84c8502c77ef42dad1123a87e3dbd629fc/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"fb9d5f35a4edf2d241362a579de759c79598c0e7","url":"https://api.github.com/repos/apache/bookkeeper/commits/fb9d5f35a4edf2d241362a579de759c79598c0e7","html_url":"https://github.com/apache/bookkeeper/commit/fb9d5f35a4edf2d241362a579de759c79598c0e7"}],"stats":{"total":234,"additions":162,"deletions":72},"files":[{"sha":"939285e35ccbb4fb5c60a08b2eecd5c092b74ae5","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c1024f84c8502c77ef42dad1123a87e3dbd629fc/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c1024f84c8502c77ef42dad1123a87e3dbd629fc/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c1024f84c8502c77ef42dad1123a87e3dbd629fc","patch":"@@ -120,6 +120,8 @@ Release 4.1.0 - 2012-05-31\n \n         BOOKKEEPER-273: LedgerHandle.deleteLedger() should be idempotent (Matteo Merli via ivank)\n \n+        BOOKKEEPER-281: BKClient is failing when zkclient connection delays (ivank via sijie)\n+\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)"},{"sha":"fd879ed8feb3596d99bb1d1890b64b6255650d22","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":31,"deletions":67,"changes":98,"blob_url":"https://github.com/apache/bookkeeper/blob/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=c1024f84c8502c77ef42dad1123a87e3dbd629fc","patch":"@@ -119,27 +119,35 @@ public BookKeeper(String servers) throws IOException, InterruptedException,\n      * @throws InterruptedException\n      * @throws KeeperException\n      */\n-    public BookKeeper(ClientConfiguration conf)\n+    public BookKeeper(final ClientConfiguration conf)\n             throws IOException, InterruptedException, KeeperException {\n         this.conf = conf;\n+\n+        final CountDownLatch zkConnectLatch = new CountDownLatch(1);\n         this.zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(),\n                 new Watcher() {\n                     @Override\n                     public void process(WatchedEvent event) {\n-                        if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {\n-                            connectLatch.countDown();\n-                        }\n+                        // countdown the latch on all events, even if we haven't\n+                        // successfully connected.\n+                        zkConnectLatch.countDown();\n+\n                         // TODO: handle session disconnects and expires\n                         LOG.debug(\"Process: {} {}\", event.getType(), event.getPath());\n                     }\n                 });\n+        if (!zkConnectLatch.await(conf.getZkTimeout(), TimeUnit.MILLISECONDS)\n+            || !zk.getState().isConnected()) {\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n+\n         this.channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                                 Executors.newCachedThreadPool());\n-        bookieWatcher = new BookieWatcher(conf, this);\n-        bookieWatcher.readBookiesBlocking();\n         mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        // initialize ledger meta manager\n+        bookieWatcher = new BookieWatcher(conf, this);\n+        bookieWatcher.readBookiesBlocking();\n+\n         ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n \n         ownChannelFactory = true;\n@@ -176,49 +184,33 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n      *          {@link ClientConfiguration}\n      * @param zk\n      *          Zookeeper client instance connected to the zookeeper with which\n-     *          the bookies have registered\n+     *          the bookies have registered. The ZooKeeper client must be connected\n+     *          before it is passed to BookKeeper. Otherwise a KeeperException is thrown.\n      * @param channelFactory\n      *          A factory that will be used to create connections to the bookies\n      * @throws IOException\n      * @throws InterruptedException\n-     * @throws KeeperException\n+     * @throws KeeperException if the passed zk handle is not connected\n      */\n     public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFactory channelFactory)\n             throws IOException, InterruptedException, KeeperException {\n         if (zk == null || channelFactory == null) {\n             throw new NullPointerException();\n         }\n+        if (!zk.getState().isConnected()) {\n+            LOG.error(\"Unconnected zookeeper handle passed to bookkeeper\");\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n         this.conf = conf;\n         this.zk = zk;\n         this.channelFactory = channelFactory;\n-        bookieWatcher = new BookieWatcher(conf, this);\n-        bookieWatcher.readBookiesBlocking();\n+\n         mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        // initialize ledger meta manager\n-        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n-    }\n+        bookieWatcher = new BookieWatcher(conf, this);\n+        bookieWatcher.readBookiesBlocking();\n \n-    void withZKConnected(final ZKConnectCallback cb) {\n-        if (ownZKHandle) {\n-            mainWorkerPool.submit(new SafeRunnable() {\n-                    @Override\n-                    public void safeRun() {\n-                        try {\n-                            if (!connectLatch.await(zkConnectTimeoutMs, TimeUnit.MILLISECONDS)) {\n-                                cb.connectionFailed(BKException.Code.ZKException);\n-                            } else {\n-                                cb.connected();\n-                            }\n-                        } catch (InterruptedException ie) {\n-                            // someone trying to kill the process\n-                            cb.connectionFailed(BKException.Code.InterruptedException);\n-                        }\n-                    }\n-                });\n-        } else {\n-            cb.connected();\n-        }\n+        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n     }\n \n     LedgerManager getLedgerManager() {\n@@ -278,15 +270,8 @@ BookieClient getBookieClient() {\n      */\n     public void asyncCreateLedger(final int ensSize, final int qSize, final DigestType digestType,\n                                   final byte[] passwd, final CreateCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerCreateOp(BookKeeper.this, ensSize, qSize, digestType, passwd, cb, ctx)\n-                        .initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.createComplete(code, null, ctx);\n-                }\n-            });\n+        new LedgerCreateOp(BookKeeper.this, ensSize, qSize, digestType, passwd, cb, ctx)\n+            .initiate();\n     }\n \n \n@@ -370,14 +355,7 @@ public LedgerHandle createLedger(int ensSize, int qSize,\n      */\n     public void asyncOpenLedger(final long lId, final DigestType digestType, final byte passwd[],\n                                 final OpenCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.openComplete(code, null, ctx);\n-                }\n-            });\n+        new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n     }\n \n     /**\n@@ -409,14 +387,7 @@ public void connectionFailed(int code) {\n      */\n     public void asyncOpenLedgerNoRecovery(final long lId, final DigestType digestType, final byte passwd[],\n                                           final OpenCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.openComplete(code, null, ctx);\n-                }\n-            });\n+        new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n     }\n \n \n@@ -502,14 +473,7 @@ public LedgerHandle openLedgerNoRecovery(long lId, DigestType digestType, byte p\n      *            optional control object\n      */\n     public void asyncDeleteLedger(final long lId, final DeleteCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.deleteComplete(code, ctx);\n-                }\n-            });\n+        new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n     }\n \n "},{"sha":"8423de9b38d8845e9d2a07c1884ccb0ff9e12f4d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=c1024f84c8502c77ef42dad1123a87e3dbd629fc","patch":"@@ -30,6 +30,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Random;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n@@ -127,18 +129,25 @@ public BookKeeperAdmin(String zkServers) throws IOException, InterruptedExceptio\n      */\n     public BookKeeperAdmin(ClientConfiguration conf) throws IOException, InterruptedException, KeeperException {\n         // Create the ZooKeeper client instance\n+        final CountDownLatch latch = new CountDownLatch(1);\n         zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {\n             @Override\n             public void process(WatchedEvent event) {\n+                latch.countDown();\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Process: \" + event.getType() + \" \" + event.getPath());\n                 }\n             }\n         });\n+        if (!latch.await(conf.getZkTimeout(), TimeUnit.MILLISECONDS)\n+            || !zk.getState().isConnected()) {\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n         // Create the bookie path\n         bookiesPath = conf.getZkAvailableBookiesPath();\n         // Create the BookKeeper client instance\n-        bkc = new BookKeeper(conf);\n+        bkc = new BookKeeper(conf, zk);\n+\n         DIGEST_TYPE = conf.getBookieRecoveryDigestType();\n         PASSWD = conf.getBookieRecoveryPasswd();\n     }"},{"sha":"7ce7ee1a163968a4446262d859d7f808483564b2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=c1024f84c8502c77ef42dad1123a87e3dbd629fc","patch":"@@ -115,10 +115,10 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n             newBookieAddrs.add(bookieAddr);\n         }\n \n-        HashSet<InetSocketAddress> deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n-        deadBookies.removeAll(newBookieAddrs);\n-\n+        final HashSet<InetSocketAddress> deadBookies;\n         synchronized (this) {\n+            deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n+            deadBookies.removeAll(newBookieAddrs);\n             knownBookies = newBookieAddrs;\n         }\n "},{"sha":"1f46e1cf2e2e0d6926c15c24aaa8f51f856a0813","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/apache/bookkeeper/blob/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=c1024f84c8502c77ef42dad1123a87e3dbd629fc","patch":"@@ -0,0 +1,88 @@\n+package org.apache.bookkeeper.client;\n+\n+/*\n+*\n+* Licensed to the Apache Software Foundation (ASF) under one\n+* or more contributor license agreements.  See the NOTICE file\n+* distributed with this work for additional information\n+* regarding copyright ownership.  The ASF licenses this file\n+* to you under the Apache License, Version 2.0 (the\n+* \"License\"); you may not use this file except in compliance\n+* with the License.  You may obtain a copy of the License at\n+*\n+*   http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing,\n+* software distributed under the License is distributed on an\n+* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+* KIND, either express or implied.  See the License for the\n+* specific language governing permissions and limitations\n+* under the License.\n+*\n+*/\n+\n+import java.util.Enumeration;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.KeeperException;\n+\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests of the main BookKeeper client\n+ */\n+public class BookKeeperTest extends BookKeeperClusterTestCase {\n+    public BookKeeperTest() {\n+        super(4);\n+    }\n+\n+    @Test\n+    public void testConstructionZkDelay() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setZkTimeout(20000);\n+\n+        CountDownLatch l = new CountDownLatch(1);\n+        zkUtil.sleepServer(5, l);\n+        l.await();\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        bkc.createLedger(DigestType.CRC32, \"testPasswd\".getBytes()).close();\n+        bkc.close();\n+    }\n+\n+    @Test\n+    public void testConstructionNotConnectedExplicitZk() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+            .setZkServers(zkUtil.getZooKeeperConnectString())\n+            .setZkTimeout(20000);\n+\n+        CountDownLatch l = new CountDownLatch(1);\n+        zkUtil.sleepServer(5, l);\n+        l.await();\n+\n+        ZooKeeper zk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), 10000,\n+                            new Watcher() {\n+                                @Override\n+                                public void process(WatchedEvent event) {\n+                                }\n+                            });\n+        assertFalse(\"ZK shouldn't have connected yet\", zk.getState().isConnected());\n+        try {\n+            BookKeeper bkc = new BookKeeper(conf, zk);\n+            fail(\"Shouldn't be able to construct with unconnected zk\");\n+        } catch (KeeperException.ConnectionLossException cle) {\n+            // correct behaviour\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"eed9905dee872829e2987d640e7d8025689851bd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","raw_url":"https://github.com/apache/bookkeeper/raw/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java?ref=c1024f84c8502c77ef42dad1123a87e3dbd629fc","patch":"@@ -88,7 +88,7 @@ public void addComplete(int rc, LedgerHandle lh,\n                         completed.set(true);\n                     }\n                 }, null);\n-        Thread.sleep((baseClientConf.getReadTimeout()*2)*1000);\n+        Thread.sleep((baseClientConf.getReadTimeout()*3)*1000);\n         Assert.assertTrue(\"Write request did not finish\", completed.get());\n \n         Set<InetSocketAddress> afterSet = new HashSet<InetSocketAddress>();"},{"sha":"905ab6dead6526afe63225cb5402c55a555cfa5c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/c1024f84c8502c77ef42dad1123a87e3dbd629fc/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=c1024f84c8502c77ef42dad1123a87e3dbd629fc","patch":"@@ -22,6 +22,8 @@\n package org.apache.bookkeeper.test;\n \n import java.io.File;\n+import java.io.IOException;\n+\n import java.net.InetSocketAddress;\n \n import org.apache.commons.io.FileUtils;\n@@ -115,6 +117,31 @@ public void process(WatchedEvent event) {\n         zkc.create(\"/ledgers/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n     }\n \n+    public void sleepServer(final int seconds, final CountDownLatch l)\n+            throws InterruptedException, IOException {\n+        Thread[] allthreads = new Thread[Thread.activeCount()];\n+        Thread.enumerate(allthreads);\n+        for (final Thread t : allthreads) {\n+            if (t.getName().contains(\"SyncThread:0\")) {\n+                Thread sleeper = new Thread() {\n+                    public void run() {\n+                        try {\n+                            t.suspend();\n+                            l.countDown();\n+                            Thread.sleep(seconds*1000);\n+                            t.resume();\n+                        } catch (Exception e) {\n+                            LOG.error(\"Error suspending thread\", e);\n+                        }\n+                    }\n+                };\n+                sleeper.start();\n+                return;\n+            }\n+        }\n+        throw new IOException(\"ZooKeeper thread not found\");\n+    }\n+\n     public void killServer() throws Exception {\n         if (zkc != null) {\n             zkc.close();"}]}

