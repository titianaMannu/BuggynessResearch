{"sha":"c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMTdkZmI5YWEyYWViNmQzZDFjNmZhOTM0ZGM5ZWYxNWJmNmI1YmMy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-04T10:46:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-04T10:46:44Z"},"message":"BOOKKEEPER-50: NullPointException at LedgerDescriptor#cmpMasterKey (Sijie Guo via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1197495 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"83183f42f4973e79f8f6e5aa1394fb130a4fd2ad","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/83183f42f4973e79f8f6e5aa1394fb130a4fd2ad"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","html_url":"https://github.com/apache/bookkeeper/commit/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e7184063b0fa20fbbb9802863143a11183858656","url":"https://api.github.com/repos/apache/bookkeeper/commits/e7184063b0fa20fbbb9802863143a11183858656","html_url":"https://github.com/apache/bookkeeper/commit/e7184063b0fa20fbbb9802863143a11183858656"}],"stats":{"total":154,"additions":143,"deletions":11},"files":[{"sha":"20ec93a4de311d787551572c8a3c2ba8dac68906","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","patch":"@@ -60,6 +60,8 @@ BUGFIXES:\n \n   BOOKKEEPER-103: ledgerId and entryId is parsed wrong when addEntry (Sijie Guo via ivank)\n \n+  BOOKKEEPER-50: NullPointException at LedgerDescriptor#cmpMasterKey (Sijie Guo via ivank)\n+\n  hedwig-server/\n \n   BOOKKEEPER-43: NullPointException when releasing topic (Sijie Guo via breed)"},{"sha":"d651894fd937a09b82239ee43654579803c99f01","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":41,"deletions":10,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","patch":"@@ -193,7 +193,6 @@ public Bookie(int port, String zkServers, File journalDirectory, File ledgerDire\n                     }\n                     recBuff.flip();\n                     long ledgerId = recBuff.getLong();\n-                    // XXX we net to make sure we set the master keys appropriately!\n                     LedgerDescriptor handle = getHandle(ledgerId, false);\n                     try {\n                         recBuff.rewind();\n@@ -317,12 +316,29 @@ private LedgerDescriptor getHandle(long ledgerId, boolean readonly, byte[] maste\n         synchronized (ledgers) {\n             handle = ledgers.get(ledgerId);\n             if (handle == null) {\n-                if (readonly) {\n-                    throw new NoLedgerException(ledgerId);\n+                FileInfo fi = null;\n+                try {\n+                    // get file info will throw NoLedgerException\n+                    fi = ledgerCache.getFileInfo(ledgerId, !readonly);\n+\n+                    // if an existed ledger index file, we can get its master key\n+                    // if an new created ledger index file, we will get a null master key\n+                    byte[] existingMasterKey = fi.readMasterKey();\n+                    ByteBuffer masterKeyToSet = ByteBuffer.wrap(masterKey);\n+                    if (existingMasterKey == null) {\n+                        // no master key set before\n+                        fi.writeMasterKey(masterKey);\n+                    } else if (!masterKeyToSet.equals(ByteBuffer.wrap(existingMasterKey))) {\n+                        throw new IOException(\"Wrong master key for ledger \" + ledgerId);\n+                    }\n+                    handle = createHandle(ledgerId, readonly);\n+                    ledgers.put(ledgerId, handle);\n+                    handle.setMasterKey(masterKeyToSet);\n+                } finally {\n+                    if (fi != null) {\n+                        fi.release();\n+                    }\n                 }\n-                handle = createHandle(ledgerId, readonly);\n-                ledgers.put(ledgerId, handle);\n-                handle.setMasterKey(ByteBuffer.wrap(masterKey));\n             }\n             handle.incRef();\n         }\n@@ -334,11 +350,26 @@ private LedgerDescriptor getHandle(long ledgerId, boolean readonly) throws IOExc\n         synchronized (ledgers) {\n             handle = ledgers.get(ledgerId);\n             if (handle == null) {\n-                if (readonly) {\n-                    throw new NoLedgerException(ledgerId);\n+                FileInfo fi = null;\n+                try {\n+                    // get file info will throw NoLedgerException\n+                    fi = ledgerCache.getFileInfo(ledgerId, !readonly);\n+\n+                    // if an existed ledger index file, we can get its master key\n+                    // if an new created ledger index file, we will get a null master key\n+                    byte[] existingMasterKey = fi.readMasterKey();\n+                    if (existingMasterKey == null) {\n+                        throw new IOException(\"Weird! No master key found in ledger \" + ledgerId);\n+                    }\n+\n+                    handle = createHandle(ledgerId, readonly);\n+                    ledgers.put(ledgerId, handle);\n+                    handle.setMasterKey(ByteBuffer.wrap(existingMasterKey));\n+                } finally {\n+                    if (fi != null) {\n+                        fi.release();\n+                    }\n                 }\n-                handle = createHandle(ledgerId, readonly);\n-                ledgers.put(ledgerId, handle);\n             }\n             handle.incRef();\n         }"},{"sha":"7c4f2508f21ee205885f1c77b819658a57bbd55e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":76,"deletions":1,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","patch":"@@ -32,10 +32,25 @@\n /**\n  * This is the file handle for a ledger's index file that maps entry ids to location.\n  * It is used by LedgerCache.\n+ *\n+ * <p>\n+ * Ledger index file is made of a header and several fixed-length index pages, which records the offsets of data stored in entry loggers\n+ * <pre>&lt;header&gt;&lt;index pages&gt;</pre>\n+ * <b>Header</b> is formated as below:\n+ * <pre>&lt;magic bytes&gt;&lt;len of master key&gt;&lt;master key&gt;</pre>\n+ * <ul>\n+ * <li>magic bytes: 8 bytes, 'BKLE\\0\\0\\0\\0'\n+ * <li>len of master key: indicates length of master key. -1 means no master key stored in header.\n+ * <li>master key: master key\n+ * </ul>\n+ * <b>Index page</b> is a fixed-length page, which contains serveral entries which point to the offsets of data stored in entry loggers.\n+ * </p>\n  */\n class FileInfo {\n     static Logger LOG = Logger.getLogger(FileInfo.class);\n \n+    static final int NO_MASTER_KEY = -1;\n+\n     private FileChannel fc;\n     private final File lf;\n     /**\n@@ -52,7 +67,61 @@ public FileInfo(File lf) throws IOException {\n         size = fc.size();\n         if (size == 0) {\n             fc.write(ByteBuffer.wrap(header));\n+            // write NO_MASTER_KEY, which means there is no master key\n+            ByteBuffer buf = ByteBuffer.allocate(4);\n+            buf.putInt(NO_MASTER_KEY);\n+            buf.flip();\n+            fc.write(buf);\n+        }\n+    }\n+\n+    /**\n+     * Write master key to index file header\n+     *\n+     * @param masterKey master key to store\n+     * @return void\n+     * @throws IOException\n+     */\n+    synchronized public void writeMasterKey(byte[] masterKey) throws IOException {\n+        // write master key\n+        if (masterKey == null ||\n+            masterKey.length + 4 + header.length > START_OF_DATA) {\n+            throw new IOException(\"master key is more than \" + (START_OF_DATA - 4 - header.length));\n+        }\n+\n+        int len = masterKey.length;\n+        ByteBuffer lenBuf = ByteBuffer.allocate(4);\n+        lenBuf.putInt(len);\n+        lenBuf.flip();\n+        fc.position(header.length);\n+        fc.write(lenBuf);\n+        fc.write(ByteBuffer.wrap(masterKey));\n+    }\n+\n+    /**\n+     * Read master key\n+     *\n+     * @return master key. null means no master key stored in index header\n+     * @throws IOException\n+     */\n+    synchronized public byte[] readMasterKey() throws IOException {\n+        ByteBuffer lenBuf = ByteBuffer.allocate(4);\n+        int total = readAbsolute(lenBuf, header.length);\n+        if (total != 4) {\n+            throw new IOException(\"Short read during reading master key length\");\n+        }\n+        lenBuf.rewind();\n+        int len = lenBuf.getInt();\n+        if (len == NO_MASTER_KEY) {\n+            return null;\n         }\n+\n+        byte[] masterKey = new byte[len];\n+        total = readAbsolute(ByteBuffer.wrap(masterKey), header.length + 4);\n+        if (total != len) {\n+            throw new IOException(\"Short read during reading master key\");\n+        }\n+        return masterKey;\n     }\n \n     synchronized public long size() {\n@@ -64,13 +133,19 @@ synchronized public long size() {\n     }\n \n     synchronized public int read(ByteBuffer bb, long position) throws IOException {\n+        return readAbsolute(bb, position + START_OF_DATA);\n+    }\n+\n+    private int readAbsolute(ByteBuffer bb, long start) throws IOException {\n         int total = 0;\n         while(bb.remaining() > 0) {\n-            int rc = fc.read(bb, position+START_OF_DATA);\n+            int rc = fc.read(bb, start);\n             if (rc <= 0) {\n                 throw new IOException(\"Short read\");\n             }\n             total += rc;\n+            // should move read position\n+            start += rc;\n         }\n         return total;\n     }"},{"sha":"6bac56974635d77f7757bcfe6a53bf12759d913d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=c17dfb9aa2aeb6d3d1c6fa934dc9ef15bf6b5bc2","patch":"@@ -21,6 +21,7 @@\n \n package org.apache.bookkeeper.test;\n \n+import java.io.IOException;\n import java.io.File;\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n@@ -124,6 +125,29 @@ public void setUp() throws Exception {\n         }\n     }\n \n+    /**\n+     * Restart bookie servers\n+     *\n+     * @throws InterruptedException\n+     * @throws IOException\n+     */\n+    protected void restartBookies() throws InterruptedException, IOException {\n+        // shut down bookie server\n+        for (BookieServer server : bs) {\n+            server.shutdown();\n+        }\n+        bs.clear();\n+        Thread.sleep(1000);\n+        // restart them to ensure we can't \n+        int j = 0;\n+        for (File f : tmpDirs) {\n+            BookieServer server = new BookieServer(initialPort + j, HOSTPORT, f, new File[] { f });\n+            server.start();\n+            bs.add(server);\n+            j++;\n+        }\n+    }\n+\n     @After\n     @Override\n     public void tearDown() throws Exception {"}]}

