{"sha":"c2bb7ffb366d5c1942ee2e040516af749a705115","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMmJiN2ZmYjM2NmQ1YzE5NDJlZTJlMDQwNTE2YWY3NDlhNzA1MTE1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-09T09:41:35Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-05-09T09:41:35Z"},"message":"BOOKKEEPER-608: Make SyncThread a reusable component (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1480580 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"458851943da6950179fec0204eb72ea588e365c8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/458851943da6950179fec0204eb72ea588e365c8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c2bb7ffb366d5c1942ee2e040516af749a705115","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c2bb7ffb366d5c1942ee2e040516af749a705115","html_url":"https://github.com/apache/bookkeeper/commit/c2bb7ffb366d5c1942ee2e040516af749a705115","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c2bb7ffb366d5c1942ee2e040516af749a705115/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f86e4929ef9c0ddfa7d26d230caefa369a2a0dde","url":"https://api.github.com/repos/apache/bookkeeper/commits/f86e4929ef9c0ddfa7d26d230caefa369a2a0dde","html_url":"https://github.com/apache/bookkeeper/commit/f86e4929ef9c0ddfa7d26d230caefa369a2a0dde"}],"stats":{"total":347,"additions":200,"deletions":147},"files":[{"sha":"e4226b46ebdeebb7c83c39ed4e97b068e3f92577","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c2bb7ffb366d5c1942ee2e040516af749a705115/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c2bb7ffb366d5c1942ee2e040516af749a705115/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c2bb7ffb366d5c1942ee2e040516af749a705115","patch":"@@ -56,6 +56,8 @@ Trunk (unreleased changes)\n \n     IMPROVEMENTS:\n \n+      BOOKKEEPER-608: Make SyncThread a reusable component (ivank)\n+\n       BOOKKEEPER-555: Make BookieServer use Netty rather than a custom IO server (ivank)\n \n       BOOKKEEPER-526: multiple threads for delivery manager (sijie via ivank)"},{"sha":"6ef86ab8bcd481cb79824bea6bf1d07df3d0c2ea","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":4,"deletions":145,"changes":149,"blob_url":"https://github.com/apache/bookkeeper/blob/c2bb7ffb366d5c1942ee2e040516af749a705115/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/c2bb7ffb366d5c1942ee2e040516af749a705115/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=c2bb7ffb366d5c1942ee2e040516af749a705115","patch":"@@ -45,7 +45,6 @@\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.bookie.GarbageCollectorThread.SafeEntryAdder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n-import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -239,149 +238,6 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n         }\n     }\n \n-    /**\n-     * SyncThread is a background thread which help checkpointing ledger storage\n-     * when a checkpoint is requested. After a ledger storage is checkpointed,\n-     * the journal files added before checkpoint will be garbage collected.\n-     * <p>\n-     * After all data has been persisted to ledger index files and entry\n-     * loggers, it is safe to complete a checkpoint by persisting the log marker\n-     * to disk. If bookie failed after persist log mark, bookie is able to relay\n-     * journal entries started from last log mark without losing any entries.\n-     * </p>\n-     * <p>\n-     * Those journal files whose id are less than the log id in last log mark,\n-     * could be removed safely after persisting last log mark. We provide a\n-     * setting to let user keeping number of old journal files which may be used\n-     * for manual recovery in critical disaster.\n-     * </p>\n-     */\n-    class SyncThread extends Thread {\n-        volatile boolean running = true;\n-        // flag to ensure sync thread will not be interrupted during flush\n-        final AtomicBoolean flushing = new AtomicBoolean(false);\n-        final int flushInterval;\n-\n-        public SyncThread(ServerConfiguration conf) {\n-            super(\"SyncThread\");\n-            flushInterval = conf.getFlushInterval();\n-            LOG.debug(\"Flush Interval : {}\", flushInterval);\n-        }\n-\n-        /**\n-         * flush data up to given logMark and roll log if success\n-         * @param checkpoint\n-         */\n-        @VisibleForTesting\n-        public void checkpoint(Checkpoint checkpoint) {\n-            boolean flushFailed = false;\n-            try {\n-                if (running) {\n-                    checkpoint = ledgerStorage.checkpoint(checkpoint);\n-                } else {\n-                    ledgerStorage.flush();\n-                }\n-            } catch (NoWritableLedgerDirException e) {\n-                LOG.error(\"No writeable ledger directories\");\n-                flushFailed = true;\n-                flushing.set(false);\n-                transitionToReadOnlyMode();\n-            } catch (IOException e) {\n-                LOG.error(\"Exception flushing Ledger\", e);\n-                flushFailed = true;\n-            }\n-\n-            // if flush failed, we should not roll last mark, otherwise we would\n-            // have some ledgers are not flushed and their journal entries were lost\n-            if (!flushFailed) {\n-                try {\n-                    journal.checkpointComplete(checkpoint, running);\n-                } catch (IOException e) {\n-                    flushing.set(false);\n-                    LOG.error(\"Marking checkpoint as complete failed\", e);\n-                    transitionToReadOnlyMode();\n-                }\n-            }\n-        }\n-\n-        private Object suspensionLock = new Object();\n-        private boolean suspended = false;\n-\n-        /**\n-         * Suspend sync thread. (for testing)\n-         */\n-        @VisibleForTesting\n-        public void suspendSync() {\n-            synchronized(suspensionLock) {\n-                suspended = true;\n-            }\n-        }\n-\n-        /**\n-         * Resume sync thread. (for testing)\n-         */\n-        @VisibleForTesting\n-        public void resumeSync() {\n-            synchronized(suspensionLock) {\n-                suspended = false;\n-                suspensionLock.notify();\n-            }\n-        }\n-\n-        @Override\n-        public void run() {\n-            try {\n-                while(running) {\n-                    synchronized (this) {\n-                        try {\n-                            wait(flushInterval);\n-                        } catch (InterruptedException e) {\n-                            Thread.currentThread().interrupt();\n-                            continue;\n-                        }\n-                    }\n-\n-                    synchronized (suspensionLock) {\n-                        while (suspended) {\n-                            try {\n-                                suspensionLock.wait();\n-                            } catch (InterruptedException e) {\n-                                Thread.currentThread().interrupt();\n-                                continue;\n-                            }\n-                        }\n-                    }\n-\n-                    // try to mark flushing flag to check if interrupted\n-                    if (!flushing.compareAndSet(false, true)) {\n-                        // set flushing flag failed, means flushing is true now\n-                        // indicates another thread wants to interrupt sync thread to exit\n-                        break;\n-                    }\n-                    checkpoint(journal.newCheckpoint());\n-\n-                    flushing.set(false);\n-                }\n-            } catch (Throwable t) {\n-                LOG.error(\"Exception in SyncThread\", t);\n-                flushing.set(false);\n-                triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n-            }\n-        }\n-\n-        // shutdown sync thread\n-        void shutdown() throws InterruptedException {\n-            // Wake up and finish sync thread\n-            running = false;\n-            // make a checkpoint when shutdown\n-            if (flushing.compareAndSet(false, true)) {\n-                // it is safe to interrupt itself now \n-                this.interrupt();\n-            }\n-            this.join();\n-        }\n-    }\n-\n     public static void checkDirectoryStructure(File dir) throws IOException {\n         if (!dir.exists()) {\n             File parent = dir.getParentFile();\n@@ -538,12 +394,15 @@ public Bookie(ServerConfiguration conf)\n         ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, this.zk);\n         LOG.info(\"instantiate ledger manager {}\", ledgerManagerFactory.getClass().getName());\n         ledgerManager = ledgerManagerFactory.newLedgerManager();\n-        syncThread = new SyncThread(conf);\n+\n         // instantiate the journal\n         journal = new Journal(conf, ledgerDirsManager);\n         ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager,\n                                                      ledgerDirsManager, journal,\n                                                      new BookieSafeEntryAdder());\n+        syncThread = new SyncThread(conf, getLedgerDirsListener(),\n+                                    ledgerStorage, journal);\n+\n         handles = new HandleFactoryImpl(ledgerStorage);\n \n         // ZK ephemeral node for this Bookie."},{"sha":"871913dbe94ac3a41a1cd5a49a8aa686db96c64a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","status":"added","additions":192,"deletions":0,"changes":192,"blob_url":"https://github.com/apache/bookkeeper/blob/c2bb7ffb366d5c1942ee2e040516af749a705115/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/c2bb7ffb366d5c1942ee2e040516af749a705115/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/SyncThread.java?ref=c2bb7ffb366d5c1942ee2e040516af749a705115","patch":"@@ -0,0 +1,192 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n+\n+import java.io.IOException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * SyncThread is a background thread which help checkpointing ledger storage\n+ * when a checkpoint is requested. After a ledger storage is checkpointed,\n+ * the journal files added before checkpoint will be garbage collected.\n+ * <p>\n+ * After all data has been persisted to ledger index files and entry\n+ * loggers, it is safe to complete a checkpoint by persisting the log marker\n+ * to disk. If bookie failed after persist log mark, bookie is able to relay\n+ * journal entries started from last log mark without losing any entries.\n+ * </p>\n+ * <p>\n+ * Those journal files whose id are less than the log id in last log mark,\n+ * could be removed safely after persisting last log mark. We provide a\n+ * setting to let user keeping number of old journal files which may be used\n+ * for manual recovery in critical disaster.\n+ * </p>\n+ */\n+class SyncThread extends Thread {\n+    static Logger LOG = LoggerFactory.getLogger(SyncThread.class);\n+\n+    volatile boolean running = true;\n+    // flag to ensure sync thread will not be interrupted during flush\n+    final AtomicBoolean flushing = new AtomicBoolean(false);\n+    final int flushInterval;\n+    final LedgerStorage ledgerStorage;\n+    final LedgerDirsListener dirsListener;\n+    final CheckpointSource checkpointSource;\n+\n+    public SyncThread(ServerConfiguration conf,\n+                      LedgerDirsListener dirsListener,\n+                      LedgerStorage ledgerStorage,\n+                      CheckpointSource checkpointSource) {\n+        super(\"SyncThread\");\n+        this.dirsListener = dirsListener;\n+        this.ledgerStorage = ledgerStorage;\n+        this.checkpointSource = checkpointSource;\n+\n+        flushInterval = conf.getFlushInterval();\n+        LOG.debug(\"Flush Interval : {}\", flushInterval);\n+    }\n+\n+    /**\n+     * flush data up to given logMark and roll log if success\n+     * @param checkpoint\n+     */\n+    @VisibleForTesting\n+    public void checkpoint(Checkpoint checkpoint) {\n+        boolean flushFailed = false;\n+        try {\n+            if (running) {\n+                checkpoint = ledgerStorage.checkpoint(checkpoint);\n+            } else {\n+                ledgerStorage.flush();\n+            }\n+        } catch (NoWritableLedgerDirException e) {\n+            LOG.error(\"No writeable ledger directories\");\n+            flushFailed = true;\n+            flushing.set(false);\n+            dirsListener.allDisksFull();\n+        } catch (IOException e) {\n+            LOG.error(\"Exception flushing Ledger\", e);\n+            flushFailed = true;\n+        }\n+\n+        // if flush failed, we should not roll last mark, otherwise we would\n+        // have some ledgers are not flushed and their journal entries were lost\n+        if (!flushFailed) {\n+            try {\n+                checkpointSource.checkpointComplete(checkpoint, running);\n+            } catch (IOException e) {\n+                flushing.set(false);\n+                LOG.error(\"Marking checkpoint as complete failed\", e);\n+                dirsListener.allDisksFull();\n+            }\n+        }\n+    }\n+\n+    private Object suspensionLock = new Object();\n+    private boolean suspended = false;\n+\n+    /**\n+     * Suspend sync thread. (for testing)\n+     */\n+    @VisibleForTesting\n+    public void suspendSync() {\n+        synchronized(suspensionLock) {\n+            suspended = true;\n+        }\n+    }\n+\n+    /**\n+     * Resume sync thread. (for testing)\n+     */\n+    @VisibleForTesting\n+    public void resumeSync() {\n+        synchronized(suspensionLock) {\n+            suspended = false;\n+            suspensionLock.notify();\n+        }\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            while(running) {\n+                synchronized (this) {\n+                    try {\n+                        wait(flushInterval);\n+                    } catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();\n+                        continue;\n+                    }\n+                }\n+\n+                synchronized (suspensionLock) {\n+                    while (suspended) {\n+                        try {\n+                            suspensionLock.wait();\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n+                            continue;\n+                        }\n+                    }\n+                }\n+\n+                // try to mark flushing flag to check if interrupted\n+                if (!flushing.compareAndSet(false, true)) {\n+                    // set flushing flag failed, means flushing is true now\n+                    // indicates another thread wants to interrupt sync thread to exit\n+                    break;\n+                }\n+                checkpoint(checkpointSource.newCheckpoint());\n+\n+                flushing.set(false);\n+            }\n+        } catch (Throwable t) {\n+            LOG.error(\"Exception in SyncThread\", t);\n+            flushing.set(false);\n+            dirsListener.fatalError();\n+        }\n+    }\n+\n+    // shutdown sync thread\n+    void shutdown() throws InterruptedException {\n+        // Wake up and finish sync thread\n+        running = false;\n+        // make a checkpoint when shutdown\n+        if (flushing.compareAndSet(false, true)) {\n+            // it is safe to interrupt itself now\n+            this.interrupt();\n+        }\n+        this.join();\n+    }\n+}"},{"sha":"85d77307bf6e07061b9472acae897bc0db7c9136","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/c2bb7ffb366d5c1942ee2e040516af749a705115/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c2bb7ffb366d5c1942ee2e040516af749a705115/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java?ref=c2bb7ffb366d5c1942ee2e040516af749a705115","patch":"@@ -56,7 +56,7 @@ public IndexCorruptionTest() {\n     public void testNoSuchLedger() throws Exception {\n         LOG.debug(\"Testing NoSuchLedger\");\n \n-        Bookie.SyncThread syncThread = bs.get(0).getBookie().syncThread;\n+        SyncThread syncThread = bs.get(0).getBookie().syncThread;\n         syncThread.suspendSync();\n         // Create a ledger\n         LedgerHandle lh = bkc.createLedger(1, 1, digestType, \"\".getBytes());\n@@ -97,7 +97,7 @@ public void testNoSuchLedger() throws Exception {\n     public void testEmptyIndexPage() throws Exception {\n         LOG.debug(\"Testing EmptyIndexPage\");\n \n-        Bookie.SyncThread syncThread = bs.get(0).getBookie().syncThread;\n+        SyncThread syncThread = bs.get(0).getBookie().syncThread;\n         assertNotNull(\"Not found SyncThread.\", syncThread);\n \n         syncThread.suspendSync();"}]}

