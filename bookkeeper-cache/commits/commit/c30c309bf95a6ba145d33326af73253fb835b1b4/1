{"sha":"c30c309bf95a6ba145d33326af73253fb835b1b4","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMzBjMzA5YmY5NWE2YmExNDVkMzMzMjZhZjczMjUzZmI4MzViMWI0","commit":{"author":{"name":"Benjamin Reed","email":"breed@apache.org","date":"2011-08-23T22:43:46Z"},"committer":{"name":"Benjamin Reed","email":"breed@apache.org","date":"2011-08-23T22:43:46Z"},"message":"forgot to add test from BOOKKEEPER-38\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1160918 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a450cfbc5d31070898f35e28b3cf5770ad6eb545","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a450cfbc5d31070898f35e28b3cf5770ad6eb545"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c30c309bf95a6ba145d33326af73253fb835b1b4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c30c309bf95a6ba145d33326af73253fb835b1b4","html_url":"https://github.com/apache/bookkeeper/commit/c30c309bf95a6ba145d33326af73253fb835b1b4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c30c309bf95a6ba145d33326af73253fb835b1b4/comments","author":{"login":"breed","id":143779,"node_id":"MDQ6VXNlcjE0Mzc3OQ==","avatar_url":"https://avatars.githubusercontent.com/u/143779?v=4","gravatar_id":"","url":"https://api.github.com/users/breed","html_url":"https://github.com/breed","followers_url":"https://api.github.com/users/breed/followers","following_url":"https://api.github.com/users/breed/following{/other_user}","gists_url":"https://api.github.com/users/breed/gists{/gist_id}","starred_url":"https://api.github.com/users/breed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/breed/subscriptions","organizations_url":"https://api.github.com/users/breed/orgs","repos_url":"https://api.github.com/users/breed/repos","events_url":"https://api.github.com/users/breed/events{/privacy}","received_events_url":"https://api.github.com/users/breed/received_events","type":"User","site_admin":false},"committer":{"login":"breed","id":143779,"node_id":"MDQ6VXNlcjE0Mzc3OQ==","avatar_url":"https://avatars.githubusercontent.com/u/143779?v=4","gravatar_id":"","url":"https://api.github.com/users/breed","html_url":"https://github.com/breed","followers_url":"https://api.github.com/users/breed/followers","following_url":"https://api.github.com/users/breed/following{/other_user}","gists_url":"https://api.github.com/users/breed/gists{/gist_id}","starred_url":"https://api.github.com/users/breed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/breed/subscriptions","organizations_url":"https://api.github.com/users/breed/orgs","repos_url":"https://api.github.com/users/breed/repos","events_url":"https://api.github.com/users/breed/events{/privacy}","received_events_url":"https://api.github.com/users/breed/received_events","type":"User","site_admin":false},"parents":[{"sha":"5095045d969a5fb4b7849cce89e3fa24ee830320","url":"https://api.github.com/repos/apache/bookkeeper/commits/5095045d969a5fb4b7849cce89e3fa24ee830320","html_url":"https://github.com/apache/bookkeeper/commit/5095045d969a5fb4b7849cce89e3fa24ee830320"}],"stats":{"total":90,"additions":90,"deletions":0},"files":[{"sha":"ee4856476f3e44cfd8f163ec46a537b12ef95be1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/bookkeeper/blob/c30c309bf95a6ba145d33326af73253fb835b1b4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c30c309bf95a6ba145d33326af73253fb835b1b4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=c30c309bf95a6ba145d33326af73253fb835b1b4","patch":"@@ -0,0 +1,90 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.test;\n+\n+import java.io.File;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+import static org.junit.Assert.*;\n+\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import java.util.HashSet;\n+import junit.framework.TestCase;\n+import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.bookie.Bookie;\n+\n+public class BookieZKExpireTest extends BaseTestCase {\n+\n+    public BookieZKExpireTest(DigestType digestType) {\n+        super(0);\n+    }\n+\n+    @Test\n+    public void runBookieServerZKExpireBehaviourTest() throws Exception {\n+        BookieServer server = null;\n+        try {\n+            File f = File.createTempFile(\"bookieserver\", \"test\");\n+            f.delete();\n+            f.mkdir();\n+            \n+            HashSet<Thread> threadset = new HashSet<Thread>();\n+            int threadCount = Thread.activeCount();\n+            Thread threads[] = new Thread[threadCount*2];\n+            threadCount = Thread.enumerate(threads);\n+            for(int i = 0; i < threadCount; i++) {\n+                if (threads[i].getName().indexOf(\"SendThread\") != -1) {\n+                    threadset.add(threads[i]);\n+                }\n+            }\n+            \n+            server = new BookieServer(initialPort + 1, HOSTPORT, f, new File[] { f });\n+            server.start();\n+            \n+            Thread.sleep(10);\n+            Thread sendthread = null;\n+            threadCount = Thread.activeCount();\n+            threads = new Thread[threadCount*2];\n+            threadCount = Thread.enumerate(threads);\n+            for(int i = 0; i < threadCount; i++) {\n+                if (threads[i].getName().indexOf(\"SendThread\") != -1\n+                    && !threadset.contains(threads[i])) {\n+                    sendthread = threads[i];\n+                    break;\n+                }\n+            }\n+            assertNotNull(\"Send thread not found\", sendthread);\n+            \n+            sendthread.suspend();\n+            Thread.sleep(2*10000);\n+            sendthread.resume();\n+            \n+            // allow watcher thread to run\n+            Thread.sleep(3000);\n+            assertFalse(\"Bookie should have shutdown on losing zk session\", server.isBookieRunning());\n+            assertFalse(\"Nio Server should have shutdown on losing zk session\", server.isNioServerRunning());\n+            assertFalse(\"Bookie Server should have shutdown on losing zk session\", server.isRunning());\n+        } finally {\n+            server.shutdown();\n+        }\n+    }\n+}"}]}

