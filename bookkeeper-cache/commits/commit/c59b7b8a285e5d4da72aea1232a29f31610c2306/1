{"sha":"c59b7b8a285e5d4da72aea1232a29f31610c2306","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjNTliN2I4YTI4NWU1ZDRkYTcyYWVhMTIzMmEyOWYzMTYxMGMyMzA2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-05-25T09:48:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-05-25T09:48:05Z"},"message":"BOOKKEEPER-146: TestConcurrentTopicAcquisition sometimes hangs (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1342550 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dbccb44cea89f28853217fe35482b8a77e37db0b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dbccb44cea89f28853217fe35482b8a77e37db0b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c59b7b8a285e5d4da72aea1232a29f31610c2306","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c59b7b8a285e5d4da72aea1232a29f31610c2306","html_url":"https://github.com/apache/bookkeeper/commit/c59b7b8a285e5d4da72aea1232a29f31610c2306","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c59b7b8a285e5d4da72aea1232a29f31610c2306/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","url":"https://api.github.com/repos/apache/bookkeeper/commits/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3","html_url":"https://github.com/apache/bookkeeper/commit/67cbcdd7a2d1668c9bba0d45d6ea3235e4bd11e3"}],"stats":{"total":70,"additions":55,"deletions":15},"files":[{"sha":"58f1d65de2e178d15b7b022b7699f751b9b1d298","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c59b7b8a285e5d4da72aea1232a29f31610c2306/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c59b7b8a285e5d4da72aea1232a29f31610c2306/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c59b7b8a285e5d4da72aea1232a29f31610c2306","patch":"@@ -138,6 +138,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-209: Typo in ServerConfiguration for READAHEAD_ENABLED (ivank)\n \n+        BOOKKEEPER-146: TestConcurrentTopicAcquisition sometimes hangs (ivank)\n+\n       bookkeeper-benchmark/\n \t\n \tBOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj)"},{"sha":"db38fa06705052e4e87dc16befeea0ee7a983ef2","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java?ref=c59b7b8a285e5d4da72aea1232a29f31610c2306","patch":"@@ -58,12 +58,17 @@ public ConnectCallback(PubSubData pubSubData, InetSocketAddress host, HedwigClie\n     public void operationComplete(ChannelFuture future) throws Exception {\n         // If the client has stopped, there is no need to proceed with any\n         // callback logic here.\n-        if (client.hasStopped())\n+        if (client.hasStopped()) {\n+            future.getChannel().close();\n             return;\n+        }\n \n         // Check if the connection to the server was done successfully.\n         if (!future.isSuccess()) {\n             logger.error(\"Error connecting to host: \" + host);\n+\n+            future.getChannel().close();\n+\n             // If we were not able to connect to the host, it could be down.\n             ByteString hostString = ByteString.copyFromUtf8(HedwigSocketAddress.sockAddrStr(host));\n             if (pubSubData.connectFailedServers != null && pubSubData.connectFailedServers.contains(hostString)) {\n@@ -83,6 +88,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 pubSubData.connectFailedServers.add(hostString);\n                 client.doConnect(pubSubData, cfg.getDefaultServerHost());\n             }\n+\n             // Finished with failure logic so just return.\n             return;\n         }"},{"sha":"0b99238b91f0049a41ef7d9d6f12e65393eb2d0d","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=c59b7b8a285e5d4da72aea1232a29f31610c2306","patch":"@@ -214,20 +214,14 @@ public void close() {\n         isStopped = true;\n         // Stop the timer and all timer task threads.\n         clientTimer.cancel();\n-        // Close all of the open Channels.\n-        for (Channel channel : pub.host2Channel.values()) {\n-            getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n-            channel.close().awaitUninterruptibly();\n-        }\n-        for (Channel channel : sub.topicSubscriber2Channel.values()) {\n-            getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n-            channel.close().awaitUninterruptibly();\n-        }\n+\n+        pub.close();\n+        sub.close();\n+\n         // Clear out all Maps.\n         topic2Host.clear();\n         host2Topics.clear();\n-        pub.host2Channel.clear();\n-        sub.topicSubscriber2Channel.clear();\n+\n         // Release resources used by the ChannelFactory on the client if we are\n         // the owner that created it.\n         if (ownChannelFactory) {"},{"sha":"fac5b443150729ea2f5fd7c207b06cb6a3b25ad6","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=c59b7b8a285e5d4da72aea1232a29f31610c2306","patch":"@@ -58,6 +58,7 @@\n \n     private final HedwigClientImpl client;\n     private final ClientConfiguration cfg;\n+    private boolean closed = false;\n \n     protected HedwigPublisher(HedwigClientImpl client) {\n         this.client = client;\n@@ -194,7 +195,7 @@ protected void doPublish(PubSubData pubSubData, Channel channel) {\n     // RemoteAddress tied to it.\n     protected synchronized void storeHost2ChannelMapping(Channel channel) {\n         InetSocketAddress host = HedwigClientImpl.getHostFromChannel(channel);\n-        if (!host2Channel.containsKey(host)) {\n+        if (!closed && !host2Channel.containsKey(host)) {\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Storing a new Channel mapping for host: \" + host);\n             host2Channel.put(host, channel);\n@@ -228,4 +229,14 @@ public Channel getChannelForHost(InetSocketAddress host) {\n         return host2Channel.get(host);\n     }\n \n+    void close() {\n+        synchronized(this) {\n+            closed = true;\n+        }\n+        for (Channel channel : host2Channel.values()) {\n+            client.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            channel.close().awaitUninterruptibly();\n+        }\n+        host2Channel.clear();\n+    }\n }"},{"sha":"e77e4211929afc299ab7c222a26596eff10cf6f0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=c59b7b8a285e5d4da72aea1232a29f31610c2306","patch":"@@ -76,6 +76,8 @@\n \n     protected final HedwigClientImpl client;\n     protected final ClientConfiguration cfg;\n+    private Object closeLock = new Object();\n+    private boolean closed = false;\n \n     public HedwigSubscriber(HedwigClientImpl client) {\n         this.client = client;\n@@ -649,11 +651,32 @@ public Channel getChannelForTopic(TopicSubscriber topic) {\n     }\n \n     public void setChannelForTopic(TopicSubscriber topic, Channel channel) {\n-        topicSubscriber2Channel.put(topic, channel);\n+        synchronized (closeLock) {\n+            if (closed) {\n+                channel.close();\n+                return;\n+            }\n+            Channel oldc = topicSubscriber2Channel.putIfAbsent(topic, channel);\n+            if (oldc != null) {\n+                channel.close();\n+            }\n+        }\n     }\n \n     public void removeChannelForTopic(TopicSubscriber topic) {\n         topicSubscriber2Channel.remove(topic);\n     }\n \n+    void close() {\n+        synchronized (closeLock) {\n+            closed = true;\n+        }\n+\n+        // Close all of the open Channels.\n+        for (Channel channel : topicSubscriber2Channel.values()) {\n+            client.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            channel.close().awaitUninterruptibly();\n+        }\n+        topicSubscriber2Channel.clear();\n+    }\n }"},{"sha":"515e8f343134683f89807977b603166efd469f6b","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/c59b7b8a285e5d4da72aea1232a29f31610c2306/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java?ref=c59b7b8a285e5d4da72aea1232a29f31610c2306","patch":"@@ -51,8 +51,10 @@ public WriteCallback(PubSubData pubSubData, HedwigClientImpl client) {\n     public void operationComplete(ChannelFuture future) throws Exception {\n         // If the client has stopped, there is no need to proceed\n         // with any callback logic here.\n-        if (client.hasStopped())\n+        if (client.hasStopped()) {\n+            future.getChannel().close();\n             return;\n+        }\n \n         // When the write operation to the server is done, we just need to check\n         // if it was successful or not.\n@@ -65,6 +67,8 @@ public void operationComplete(ChannelFuture future) throws Exception {\n             // so there is no point storing that information there anymore.\n             HedwigClientImpl.getResponseHandlerFromChannel(future.getChannel()).txn2PubSubData.remove(pubSubData.txnId);\n \n+            future.getChannel().close();\n+\n             // If we were not able to write on the channel to the server host,\n             // the host could have died or something is wrong with the channel\n             // connection where we can connect to the host, but not write to it."}]}

