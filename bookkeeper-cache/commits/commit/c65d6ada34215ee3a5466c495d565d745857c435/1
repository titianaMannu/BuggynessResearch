{"sha":"c65d6ada34215ee3a5466c495d565d745857c435","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjNjVkNmFkYTM0MjE1ZWUzYTU0NjZjNDk1ZDU2NWQ3NDU4NTdjNDM1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-02-09T17:14:29Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-02-09T17:14:29Z"},"message":"BOOKKEEPER-137: Do not create Ledger index files until absolutely necessary. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1242404 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3f53fe162a136968ec19a642394a9c9d423fd850","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3f53fe162a136968ec19a642394a9c9d423fd850"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c65d6ada34215ee3a5466c495d565d745857c435","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c65d6ada34215ee3a5466c495d565d745857c435","html_url":"https://github.com/apache/bookkeeper/commit/c65d6ada34215ee3a5466c495d565d745857c435","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c65d6ada34215ee3a5466c495d565d745857c435/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"beca5951f73cb9c39be10a4166a90dee9fff3c1c","url":"https://api.github.com/repos/apache/bookkeeper/commits/beca5951f73cb9c39be10a4166a90dee9fff3c1c","html_url":"https://github.com/apache/bookkeeper/commit/beca5951f73cb9c39be10a4166a90dee9fff3c1c"}],"stats":{"total":369,"additions":209,"deletions":160},"files":[{"sha":"81f60d2f45163c86b475257d93b4bdd484f3c2b7","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -49,6 +49,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-165: Add versioning support for journal files (ivank)\n \n+        BOOKKEEPER-137: Do not create Ledger index files until absolutely necessary. (ivank)\n+\n       hedwig-server/\n \n         BOOKKEEPER-77: Add a console client for hedwig (Sijie Guo via ivank)"},{"sha":"57a6c29e2095670da442b6ff081a0b1beacfc75f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":67,"deletions":66,"changes":133,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -87,9 +87,12 @@\n      * when you make a change to the format of any of the files in \n      * this directory or to the general layout of the directory.\n      */\n-    static final int CURRENT_DIRECTORY_LAYOUT_VERSION = 1;\n+    static final int MIN_COMPAT_DIRECTORY_LAYOUT_VERSION = 1;\n+    static final int CURRENT_DIRECTORY_LAYOUT_VERSION = 2;\n     static final String VERSION_FILENAME = \"VERSION\";\n-    \n+\n+    static final long METAENTRY_ID_LEDGER_KEY = -0x1000;\n+\n     // ZK registration path for this bookie\n     static final String BOOKIE_REGISTRATION_PATH = \"/ledgers/available/\";\n \n@@ -250,7 +253,7 @@ void shutdown() throws InterruptedException {\n     }\n \n     public Bookie(ServerConfiguration conf) \n-            throws IOException, KeeperException, InterruptedException {\n+            throws IOException, KeeperException, InterruptedException, BookieException {\n         super(\"Bookie-\" + conf.getBookiePort());\n         this.conf = conf;\n         this.journalDirectory = conf.getJournalDir();\n@@ -336,12 +339,28 @@ public boolean accept(long journalId) {\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Relay journal - ledger id : \" + ledgerId);\n                 }\n-                LedgerDescriptor handle = getHandle(ledgerId, false);\n-                try {\n-                    recBuff.rewind();\n-                    handle.addEntry(recBuff);\n-                } finally {\n-                    putHandle(handle);\n+                LedgerDescriptor handle = getHandle(ledgerId);\n+                long entryId = recBuff.getLong();\n+                if (entryId == METAENTRY_ID_LEDGER_KEY) {\n+                    if (recLog.getFormatVersion() >= 3) {\n+                        int masterKeyLen = recBuff.getInt();\n+                        byte[] masterKey = new byte[masterKeyLen];\n+                        recBuff.get(masterKey);\n+                        \n+                        handle.checkAccess(masterKey);\n+                        putHandle(handle);\n+                    } else {\n+                        throw new IOException(\"Invalid journal. Contains journalKey \"\n+                                + \" but layout version (\" + recLog.getFormatVersion() \n+                                + \") is too old to hold this\");\n+                    }\n+                } else {\n+                    try {\n+                        recBuff.rewind();\n+                        handle.addEntry(recBuff);\n+                    } finally {\n+                        putHandle(handle);\n+                    }\n                 }\n             }\n             recLog.close();\n@@ -540,7 +559,7 @@ public void process(WatchedEvent event) {\n      * @throws IOException if layout version if is outside usable range\n      *               or if there is a problem reading the version file\n      */\n-    private void checkDirectoryLayoutVersion(File dir) \n+    private void checkDirectoryLayoutVersion(File dir)\n             throws IOException {\n         if (!dir.isDirectory()) {\n             throw new IOException(\"Directory(\"+dir+\") isn't a directory\");\n@@ -566,8 +585,10 @@ private void checkDirectoryLayoutVersion(File dir)\n         try {\n             String layoutVersionStr = br.readLine();\n             int layoutVersion = Integer.parseInt(layoutVersionStr);\n-            if (layoutVersion != CURRENT_DIRECTORY_LAYOUT_VERSION) {\n-                String errmsg = \"Directory has an invalid version, expected \" \n+            if (layoutVersion < MIN_COMPAT_DIRECTORY_LAYOUT_VERSION\n+                || layoutVersion > CURRENT_DIRECTORY_LAYOUT_VERSION) {\n+                String errmsg = \"Directory has an invalid version, expected between \"\n+                    + MIN_COMPAT_DIRECTORY_LAYOUT_VERSION + \" and \"\n                     + CURRENT_DIRECTORY_LAYOUT_VERSION + \", found \" + layoutVersion;\n                 LOG.error(errmsg);\n                 throw new IOException(errmsg);\n@@ -620,73 +641,38 @@ private void putHandle(LedgerDescriptor handle) {\n         }\n     }\n \n-    private LedgerDescriptor getHandle(long ledgerId, boolean readonly, byte[] masterKey) throws IOException {\n+    private LedgerDescriptor getHandle(long ledgerId, boolean readonly, byte[] masterKey) \n+            throws IOException, BookieException {\n         LedgerDescriptor handle = null;\n         synchronized (ledgers) {\n             handle = ledgers.get(ledgerId);\n             if (handle == null) {\n-                FileInfo fi = null;\n-                try {\n-                    // get file info will throw NoLedgerException\n-                    fi = ledgerCache.getFileInfo(ledgerId, !readonly);\n-\n-                    // if an existed ledger index file, we can get its master key\n-                    // if an new created ledger index file, we will get a null master key\n-                    byte[] existingMasterKey = fi.readMasterKey();\n-                    ByteBuffer masterKeyToSet = ByteBuffer.wrap(masterKey);\n-                    if (existingMasterKey == null) {\n-                        // no master key set before\n-                        fi.writeMasterKey(masterKey);\n-                    } else if (!masterKeyToSet.equals(ByteBuffer.wrap(existingMasterKey))) {\n-                        throw new IOException(\"Wrong master key for ledger \" + ledgerId);\n-                    }\n-                    handle = createHandle(ledgerId, readonly);\n-                    ledgers.put(ledgerId, handle);\n-                    handle.setMasterKey(masterKeyToSet);\n-                } finally {\n-                    if (fi != null) {\n-                        fi.release();\n-                    }\n+                if (readonly) {\n+                    throw new NoLedgerException(ledgerId);\n                 }\n+                handle = createHandle(ledgerId);\n+                ledgers.put(ledgerId, handle);\n             }\n+            handle.checkAccess(masterKey);\n             handle.incRef();\n         }\n         return handle;\n     }\n \n-    private LedgerDescriptor getHandle(long ledgerId, boolean readonly) throws IOException {\n+    private LedgerDescriptor getHandle(long ledgerId) throws IOException {\n         LedgerDescriptor handle = null;\n         synchronized (ledgers) {\n             handle = ledgers.get(ledgerId);\n             if (handle == null) {\n-                FileInfo fi = null;\n-                try {\n-                    // get file info will throw NoLedgerException\n-                    fi = ledgerCache.getFileInfo(ledgerId, !readonly);\n-\n-                    // if an existed ledger index file, we can get its master key\n-                    // if an new created ledger index file, we will get a null master key\n-                    byte[] existingMasterKey = fi.readMasterKey();\n-                    if (existingMasterKey == null) {\n-                        throw new IOException(\"Weird! No master key found in ledger \" + ledgerId);\n-                    }\n-\n-                    handle = createHandle(ledgerId, readonly);\n-                    ledgers.put(ledgerId, handle);\n-                    handle.setMasterKey(ByteBuffer.wrap(existingMasterKey));\n-                } finally {\n-                    if (fi != null) {\n-                        fi.release();\n-                    }\n-                }\n+                handle = createHandle(ledgerId);\n+                ledgers.put(ledgerId, handle);\n             }\n             handle.incRef();\n         }\n         return handle;\n     }\n \n-\n-    private LedgerDescriptor createHandle(long ledgerId, boolean readOnly) throws IOException {\n+    private LedgerDescriptor createHandle(long ledgerId) throws IOException {\n         return new LedgerDescriptor(ledgerId, entryLogger, ledgerCache);\n     }\n \n@@ -920,13 +906,28 @@ public synchronized void shutdown() throws InterruptedException {\n     private LedgerDescriptor getLedgerForEntry(ByteBuffer entry, byte[] masterKey) \n             throws IOException, BookieException {\n         long ledgerId = entry.getLong();\n-        LedgerDescriptor handle = getHandle(ledgerId, false, masterKey);\n-\n-        if(!handle.cmpMasterKey(ByteBuffer.wrap(masterKey))) {\n-            putHandle(handle);\n-            throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n+        LedgerDescriptor l = getHandle(ledgerId, false, masterKey);\n+        if (!l.isMasterKeyPersisted()) {\n+            // new handle, we should add the key to journal ensure we can rebuild\n+            ByteBuffer bb = ByteBuffer.allocate(8 + 8 + 4 + masterKey.length);\n+            bb.putLong(ledgerId);\n+            bb.putLong(METAENTRY_ID_LEDGER_KEY);\n+            bb.putInt(masterKey.length);\n+            bb.put(masterKey);\n+            bb.flip();\n+\n+            queue.add(new QueueEntry(bb,\n+                                     ledgerId, METAENTRY_ID_LEDGER_KEY,\n+                                     new WriteCallback() {\n+                                         public void writeComplete(int rc, long ledgerId, \n+                                                 long entryId, InetSocketAddress addr,\n+                                                 Object ctx) {\n+                                             // do nothing\n+                                         }\n+                                     }, null));\n+            l.setMasterKeyPersisted();\n         }\n-        return handle;\n+        return l;\n     }\n \n     /**\n@@ -991,14 +992,14 @@ public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] mast\n      * never be unfenced. Fencing a fenced ledger has no effect.\n      */\n     public void fenceLedger(long ledgerId) throws IOException {\n-        LedgerDescriptor handle = getHandle(ledgerId, true);\n+        LedgerDescriptor handle = getHandle(ledgerId);\n         synchronized (handle) {\n             handle.setFenced();\n         }\n     }\n \n     public ByteBuffer readEntry(long ledgerId, long entryId) throws IOException {\n-        LedgerDescriptor handle = getHandle(ledgerId, true);\n+        LedgerDescriptor handle = getHandle(ledgerId);\n         try {\n             if (LOG.isTraceEnabled()) {\n                 LOG.trace(\"Reading \" + entryId + \"@\" + ledgerId);"},{"sha":"773ba5afcee43d7593d37b33b9d62407de8c2fb5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":75,"deletions":64,"changes":139,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -40,7 +40,7 @@\n  * <b>Header</b> is formated as below:\n  * <pre>&lt;magic bytes&gt;&lt;len of master key&gt;&lt;master key&gt;</pre>\n  * <ul>\n- * <li>magic bytes: 8 bytes, 'BKLE\\0\\0\\0\\0'\n+ * <li>magic bytes: 4 bytes, 'BKLE', version: 4 bytes\n  * <li>len of master key: indicates length of master key. -1 means no master key stored in header.\n  * <li>master key: master key\n  * </ul>\n@@ -54,78 +54,86 @@\n \n     private FileChannel fc;\n     private final File lf;\n+    byte[] masterKey;\n+\n     /**\n      * The fingerprint of a ledger index file\n      */\n-    private byte header[] = \"BKLE\\0\\0\\0\\0\".getBytes();\n+    static final public int signature = ByteBuffer.wrap(\"BKLE\".getBytes()).getInt();\n+    static final public int headerVersion = 0;\n+\n     static final long START_OF_DATA = 1024;\n     private long size;\n     private int useCount;\n     private boolean isClosed;\n-    public FileInfo(File lf) throws IOException {\n+\n+    public FileInfo(File lf, byte[] masterKey) throws IOException {\n         this.lf = lf;\n-        fc = new RandomAccessFile(lf, \"rws\").getChannel();\n-        size = fc.size();\n-        if (size == 0) {\n-            fc.write(ByteBuffer.wrap(header));\n-            // write NO_MASTER_KEY, which means there is no master key\n-            ByteBuffer buf = ByteBuffer.allocate(4);\n-            buf.putInt(NO_MASTER_KEY);\n-            buf.flip();\n-            fc.write(buf);\n-        }\n+\n+        this.masterKey = masterKey;\n     }\n \n-    /**\n-     * Write master key to index file header\n-     *\n-     * @param masterKey master key to store\n-     * @return void\n-     * @throws IOException\n-     */\n-    synchronized public void writeMasterKey(byte[] masterKey) throws IOException {\n-        // write master key\n-        if (masterKey == null ||\n-            masterKey.length + 4 + header.length > START_OF_DATA) {\n-            throw new IOException(\"master key is more than \" + (START_OF_DATA - 4 - header.length));\n-        }\n+    synchronized public void readHeader() throws IOException {\n+        if (lf.exists()) {\n+            if (fc != null) {\n+                return;\n+            }\n \n-        int len = masterKey.length;\n-        ByteBuffer lenBuf = ByteBuffer.allocate(4);\n-        lenBuf.putInt(len);\n-        lenBuf.flip();\n-        fc.position(header.length);\n-        fc.write(lenBuf);\n-        fc.write(ByteBuffer.wrap(masterKey));\n+            fc = new RandomAccessFile(lf, \"rw\").getChannel();\n+            size = fc.size();\n+\n+            ByteBuffer bb = ByteBuffer.allocate(1024);\n+            while(bb.hasRemaining()) {\n+                fc.read(bb);\n+            }\n+            bb.flip();\n+            if (bb.getInt() != signature) {\n+                throw new IOException(\"Missing ledger signature\");\n+            }\n+            int version = bb.getInt();\n+            if (version != headerVersion) {\n+                throw new IOException(\"Incompatible ledger version \" + version);\n+            }\n+            int length = bb.getInt();\n+            if (length < 0 || length > bb.remaining()) {\n+                throw new IOException(\"Length \" + length + \" is invalid\");\n+            }\n+            masterKey = new byte[length];\n+            bb.get(masterKey);\n+        } else {\n+            throw new IOException(\"Ledger index file does not exist\");\n+        }\n     }\n \n-    /**\n-     * Read master key\n-     *\n-     * @return master key. null means no master key stored in index header\n-     * @throws IOException\n-     */\n-    synchronized public byte[] readMasterKey() throws IOException {\n-        ByteBuffer lenBuf = ByteBuffer.allocate(4);\n-        int total = readAbsolute(lenBuf, header.length);\n-        if (total != 4) {\n-            throw new IOException(\"Short read during reading master key length\");\n+    synchronized private void checkOpen(boolean create) throws IOException {\n+        if (fc != null) {\n+            return;\n         }\n-        lenBuf.rewind();\n-        int len = lenBuf.getInt();\n-        if (len == NO_MASTER_KEY) {\n-            return null;\n+        boolean exists = lf.exists();\n+        if (masterKey == null && !exists) {\n+            throw new IOException(lf + \" not found\");\n         }\n-\n-        byte[] masterKey = new byte[len];\n-        total = readAbsolute(ByteBuffer.wrap(masterKey), header.length + 4);\n-        if (total != len) {\n-            throw new IOException(\"Short read during reading master key\");\n+        ByteBuffer bb = ByteBuffer.allocate(1024);\n+        if (!exists) { \n+            if (create) {\n+                fc = new RandomAccessFile(lf, \"rw\").getChannel();\n+                size = fc.size();\n+                if (size == 0) {\n+                    bb.putInt(signature);\n+                    bb.putInt(headerVersion);\n+                    bb.putInt(masterKey.length);\n+                    bb.put(masterKey);\n+                    bb.rewind();\n+                    fc.write(bb);\n+                }\n+            }\n+        } else {\n+            readHeader();\n         }\n-        return masterKey;\n     }\n \n-    synchronized public long size() {\n+    synchronized public long size() throws IOException {\n+        checkOpen(false);\n         long rc = size-START_OF_DATA;\n         if (rc < 0) {\n             rc = 0;\n@@ -138,6 +146,7 @@ synchronized public int read(ByteBuffer bb, long position) throws IOException {\n     }\n \n     private int readAbsolute(ByteBuffer bb, long start) throws IOException {\n+        checkOpen(false);\n         int total = 0;\n         while(bb.remaining() > 0) {\n             int rc = fc.read(bb, start);\n@@ -153,12 +162,13 @@ private int readAbsolute(ByteBuffer bb, long start) throws IOException {\n \n     synchronized public void close() throws IOException {\n         isClosed = true;\n-        if (useCount == 0) {\n+        if (useCount == 0 && fc != null) {\n             fc.close();\n         }\n     }\n \n     synchronized public long write(ByteBuffer[] buffs, long position) throws IOException {\n+        checkOpen(true);\n         long total = 0;\n         try {\n             fc.position(position+START_OF_DATA);\n@@ -170,6 +180,7 @@ synchronized public long write(ByteBuffer[] buffs, long position) throws IOExcep\n                 total += rc;\n             }\n         } finally {\n+            fc.force(true);\n             long newsize = position+START_OF_DATA+total;\n             if (newsize > size) {\n                 size = newsize;\n@@ -178,13 +189,18 @@ synchronized public long write(ByteBuffer[] buffs, long position) throws IOExcep\n         return total;\n     }\n \n+    synchronized public byte[] getMasterKey() throws IOException {\n+        checkOpen(false);\n+        return masterKey;\n+    }\n+\n     synchronized public void use() {\n         useCount++;\n     }\n \n     synchronized public void release() {\n         useCount--;\n-        if (isClosed && useCount == 0) {\n+        if (isClosed && useCount == 0 && fc != null) {\n             try {\n                 fc.close();\n             } catch (IOException e) {\n@@ -193,12 +209,7 @@ synchronized public void release() {\n         }\n     }\n \n-    /**\n-     * Getter to a handle on the actual ledger index file.\n-     * This is used when we are deleting a ledger and want to physically remove the index file.\n-     */\n-    File getFile() {\n-        return lf;\n+    public boolean delete() {\n+        return lf.delete();\n     }\n-\n }"},{"sha":"56942c2780257c80ba62f98fa1f6a1446b724217","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -50,7 +50,7 @@\n \n     int HEADER_SIZE = 8; // 4byte magic word, 4 byte version\n     int MIN_COMPAT_JOURNAL_FORMAT_VERSION = 1;\n-    int CURRENT_JOURNAL_FORMAT_VERSION = 2;\n+    int CURRENT_JOURNAL_FORMAT_VERSION = 3;\n \n     public final static long preAllocSize = 4*1024*1024;\n     public final static ByteBuffer zeros = ByteBuffer.allocate(512);"},{"sha":"3e96d4656cecf162d75d95820adeb2895fa55c41","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -226,7 +226,7 @@ static final private File pickDirs(File dirs[]) {\n         return dirs[rand.nextInt(dirs.length)];\n     }\n \n-    FileInfo getFileInfo(Long ledger, boolean create) throws IOException {\n+    FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n         synchronized(fileInfoCache) {\n             FileInfo fi = fileInfoCache.get(ledger);\n             if (fi == null) {\n@@ -240,7 +240,7 @@ FileInfo getFileInfo(Long ledger, boolean create) throws IOException {\n                     lf = null;\n                 }\n                 if (lf == null) {\n-                    if (!create) {\n+                    if (masterKey == null) {\n                         throw new Bookie.NoLedgerException(ledger);\n                     }\n                     File dir = pickDirs(ledgerDirectories);\n@@ -256,7 +256,7 @@ FileInfo getFileInfo(Long ledger, boolean create) throws IOException {\n                 if (openLedgers.size() > openFileLimit) {\n                     fileInfoCache.remove(openLedgers.removeFirst()).close();\n                 }\n-                fi = new FileInfo(lf);\n+                fi = new FileInfo(lf, masterKey);\n                 fileInfoCache.put(ledger, fi);\n                 openLedgers.add(ledger);\n             }\n@@ -272,7 +272,7 @@ private void updatePage(LedgerEntryPage lep) throws IOException {\n         }\n         FileInfo fi = null;\n         try {\n-            fi = getFileInfo(lep.getLedger(), true);\n+            fi = getFileInfo(lep.getLedger(), null);\n             long pos = lep.getFirstEntry()*8;\n             if (pos >= fi.size()) {\n                 lep.zeroPage();\n@@ -338,7 +338,7 @@ public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n                         }\n                     });\n                     ArrayList<Integer> versions = new ArrayList<Integer>(entries.size());\n-                    fi = getFileInfo(l, true);\n+                    fi = getFileInfo(l, null);\n                     int start = 0;\n                     long lastOffset = -1;\n                     for(int i = 0; i < entries.size(); i++) {\n@@ -427,6 +427,7 @@ private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOExceptio\n                 LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n                 lep.setLedger(ledger);\n                 lep.setFirstEntry(entry);\n+\n                 // note, this will not block since it is a new page\n                 lep.usePage();\n                 pageCount++;\n@@ -536,8 +537,8 @@ void deleteLedger(long ledgerId) throws IOException {\n         if (LOG.isDebugEnabled())\n             LOG.debug(\"Deleting ledgerId: \" + ledgerId);\n         // Delete the ledger's index file and close the FileInfo\n-        FileInfo fi = getFileInfo(ledgerId, false);\n-        fi.getFile().delete();\n+        FileInfo fi = getFileInfo(ledgerId, null);\n+        fi.delete();\n         fi.close();\n \n         // Remove it from the active ledger manager"},{"sha":"9da4aeccb66515733d19daaf940da042b0805849","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","status":"modified","additions":36,"deletions":6,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -23,6 +23,7 @@\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n+import java.util.Arrays;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -43,17 +44,46 @@\n         this.ledgerCache = ledgerCache;\n     }\n \n-    private ByteBuffer masterKey = null;\n+    private byte[] masterKey = null;\n     volatile private boolean fenced = false;\n+    private boolean masterKeyPersisted = false;\n \n-    void setMasterKey(ByteBuffer masterKey) {\n-        this.masterKey = masterKey;\n+    synchronized boolean isMasterKeyPersisted() {\n+        if (masterKeyPersisted) {\n+            return true;\n+        }\n+\n+        try {\n+            FileInfo fi = ledgerCache.getFileInfo(ledgerId, masterKey);\n+            fi.readHeader();\n+            masterKeyPersisted = true;\n+            return true;\n+        } catch (IOException ioe) {\n+            return false;\n+        }\n     }\n \n-    boolean cmpMasterKey(ByteBuffer masterKey) {\n-        return this.masterKey.equals(masterKey);\n+    void setMasterKeyPersisted() {\n+        masterKeyPersisted = true;\n     }\n \n+    void checkAccess(byte masterKey[]) throws BookieException, IOException {\n+        if (this.masterKey == null) {\n+            FileInfo fi = ledgerCache.getFileInfo(ledgerId, masterKey);\n+            try {\n+                if (fi == null) {\n+                    throw new IOException(ledgerId + \" does not exist\");\n+                }\n+                this.masterKey = fi.getMasterKey();\n+            } finally {\n+                fi.release();\n+            }\n+        }\n+        if (!Arrays.equals(this.masterKey, masterKey)) {\n+            throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n+        }\n+    } \n+\n     private long ledgerId;\n     public long getLedgerId() {\n         return ledgerId;\n@@ -109,7 +139,7 @@ ByteBuffer readEntry(long entryId) throws IOException {\n             long lastEntry = ledgerCache.getLastEntry(ledgerId);\n             FileInfo fi = null;\n             try {\n-                fi = ledgerCache.getFileInfo(ledgerId, false);\n+                fi = ledgerCache.getFileInfo(ledgerId, null);\n                 long size = fi.size();\n                 // we may not have the last entry in the cache\n                 if (size > lastEntry*8) {"},{"sha":"7217da6023ce0103b005114d8ce250767944a48b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -67,7 +67,7 @@\n     protected BookieServerBean jmxBkServerBean;\n \n     public BookieServer(ServerConfiguration conf) \n-            throws IOException, KeeperException, InterruptedException {\n+            throws IOException, KeeperException, InterruptedException, BookieException {\n         this.conf = conf;\n         this.bookie = new Bookie(conf);\n \n@@ -261,7 +261,7 @@ private static ServerConfiguration parseArgs(String[] args)\n      * @throws InterruptedException\n      */\n     public static void main(String[] args) \n-            throws IOException, KeeperException, InterruptedException {\n+            throws IOException, KeeperException, InterruptedException, BookieException {\n         ServerConfiguration conf = null;\n         try {\n             conf = parseArgs(args);"},{"sha":"1d476432aa7939d5c638d87dd23a0ecf816d791e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -27,6 +27,7 @@\n import java.net.InetSocketAddress;\n import java.net.Socket;\n \n+import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.slf4j.Logger;\n@@ -123,7 +124,7 @@ private void initializeZookeper() {\n         }\n     }\n     private void runBookies(ServerConfiguration baseConf) \n-            throws IOException, KeeperException, InterruptedException {\n+            throws IOException, KeeperException, InterruptedException, BookieException {\n         LOG.info(\"Starting Bookie(s)\");\n         // Create Bookie Servers (B1, B2, B3)\n \n@@ -150,7 +151,7 @@ private void runBookies(ServerConfiguration baseConf)\n     }\n \n     public static void main(String[] args)\n-            throws IOException, KeeperException, InterruptedException {\n+            throws IOException, KeeperException, InterruptedException, BookieException {\n         if(args.length < 1) {\n             usage();\n             System.exit(-1);"},{"sha":"51c574af5aa0c0812ff120117bb749c9fc2cc1a2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -59,8 +59,9 @@ private void writeIndexFileForLedger(File indexDir, long ledgerId,\n             throws Exception {\n         File fn = new File(indexDir, LedgerCache.getLedgerName(ledgerId));\n         fn.getParentFile().mkdirs();\n-        FileInfo fi = new FileInfo(fn);\n-        fi.writeMasterKey(masterKey);\n+        FileInfo fi = new FileInfo(fn, masterKey);\n+        // force creation of index file\n+        fi.write(new ByteBuffer[]{ ByteBuffer.allocate(0) }, 0);\n         fi.close();\n     }\n "},{"sha":"10f95383955a58c688cd576c006ef0bb22bf286c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -126,7 +126,7 @@ public void testTooOldVersion() throws Exception {\n         try {\n             Bookie b = new Bookie(newServerConfiguration(\n                 BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1) }));\n+                new File[] { newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1) }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -136,7 +136,7 @@ public void testTooOldVersion() throws Exception {\n         // test with bad data dir\n         try {\n             Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n+                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1),\n                 new File[] { newDirectoryWithoutVersion() }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n@@ -147,8 +147,8 @@ public void testTooOldVersion() throws Exception {\n         // test with both bad        \n         try {\n             Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n-                new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1) }));\n+                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1),\n+                new File[] { newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1) }));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", \n@@ -162,11 +162,11 @@ public void testSomeOldSomeCurrent() throws Exception {\n         try {\n             Bookie b = new Bookie(newServerConfiguration(\n                     BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n-                    new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),\n+                    new File[] { newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1),\n                                  newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n                                  newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n                                  newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n-                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION - 1),}));\n+                                 newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1),}));\n             fail(\"Shouldn't reach here\");\n         } catch (IOException ioe) {\n             assertTrue(\"Invalid exception\", "},{"sha":"cbd2277424ac6049f10fdecefa62b183ab80c2b2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -50,6 +50,7 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"da52ca59983d91ff2aff64067a25109908a064f8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/c65d6ada34215ee3a5466c495d565d745857c435/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=c65d6ada34215ee3a5466c495d565d745857c435","patch":"@@ -36,6 +36,7 @@\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.bookie.BookieException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n@@ -199,15 +200,15 @@ public void run() {\n      * @throws IOException\n      */\n     protected void restartBookies() \n-            throws InterruptedException, IOException, KeeperException {\n+            throws InterruptedException, IOException, KeeperException, BookieException {\n         restartBookies(null);\n     }\n \n     /**\n      * Restart bookie servers add new configuration settings\n      */\n     protected void restartBookies(ServerConfiguration newConf)\n-            throws InterruptedException, IOException, KeeperException {\n+            throws InterruptedException, IOException, KeeperException, BookieException {\n         // shut down bookie server\n         for (BookieServer server : bs) {\n             server.shutdown();\n@@ -235,7 +236,7 @@ protected void restartBookies(ServerConfiguration newConf)\n      * @throws IOException\n      */\n     protected void startNewBookie(int port)\n-            throws IOException, InterruptedException, KeeperException {\n+            throws IOException, InterruptedException, KeeperException, BookieException {\n         File f = File.createTempFile(\"bookie\", \"test\");\n         tmpDirs.add(f);\n         f.delete();\n@@ -254,7 +255,7 @@ protected void startNewBookie(int port)\n      *\n      */\n     private BookieServer startBookie(ServerConfiguration conf)\n-            throws IOException, InterruptedException, KeeperException {\n+            throws IOException, InterruptedException, KeeperException, BookieException {\n         BookieServer server = new BookieServer(conf);\n         server.start();\n "}]}

