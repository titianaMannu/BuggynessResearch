{"sha":"c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjNmNjN2NjYTNhODU2MDNjOGU5MzViYTZkMDZmYmYzZDhkN2E3ZWI1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-03-13T06:31:36Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-03-13T06:31:36Z"},"message":"BOOKKEEPER-163: Prevent incorrect NoSuchLedgerException for readLastConfirmed. (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1299984 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6dbc0c9a54c4e1dcf680f6457f1ad5982339748b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6dbc0c9a54c4e1dcf680f6457f1ad5982339748b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","html_url":"https://github.com/apache/bookkeeper/commit/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8207445ea25bef37e3369e749913acc0d597d9b2","url":"https://api.github.com/repos/apache/bookkeeper/commits/8207445ea25bef37e3369e749913acc0d597d9b2","html_url":"https://github.com/apache/bookkeeper/commit/8207445ea25bef37e3369e749913acc0d597d9b2"}],"stats":{"total":1923,"additions":1411,"deletions":512},"files":[{"sha":"fb8f427ec3bdc90e3d8a74b712d5757df09882bc","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -60,6 +60,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-74: Bookkeeper Persistence Manager should give up topic on error (sijie via ivank)\n \n+        BOOKKEEPER-163: Prevent incorrect NoSuchLedgerException for readLastConfirmed. (ivank via sijie)\n+\n     IMPROVEMENTS:\n \n       bookkeeper-server/"},{"sha":"9d67777478d9f05333380e2ab6bde4f8ed0e90c3","filename":"bookkeeper-server/pom.xml","status":"modified","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -76,6 +76,190 @@\n       <artifactId>commons-cli</artifactId>\n       <version>1.2</version>\n     </dependency>\n+    <dependency>\n+      <groupId>commons-io</groupId>\n+      <artifactId>commons-io</artifactId>\n+      <version>2.1</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.hadoop</groupId>\n+      <artifactId>hadoop-common</artifactId>\n+      <version>0.23.1</version>\n+      <exclusions>\n+\t<exclusion>\n+\t  <groupId>com.google.guava</groupId>\n+\t  <artifactId>guava</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.google.guava</groupId>\n+\t  <artifactId>guava</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.apache.commons</groupId>\n+\t  <artifactId>commons-math</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>xmlenc</groupId>\n+\t  <artifactId>xmlenc</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-httpclient</groupId>\n+\t  <artifactId>commons-httpclient</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-codec</groupId>\n+\t  <artifactId>commons-codec</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-net</groupId>\n+\t  <artifactId>commons-net</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>javax.servlet</groupId>\n+\t  <artifactId>servlet-api</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.mortbay.jetty</groupId>\n+\t  <artifactId>jetty</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.mortbay.jetty</groupId>\n+\t  <artifactId>jetty-util</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>asm</groupId>\n+\t  <artifactId>asm</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jersey</groupId>\n+\t  <artifactId>jersey-core</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jersey</groupId>\n+\t  <artifactId>jersey-json</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.sun.jersey</groupId>\n+\t  <artifactId>jersey-server</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>tomcat</groupId>\n+\t  <artifactId>jasper-compiler</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>tomcat</groupId>\n+\t  <artifactId>jasper-runtime</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>javax.servlet.jsp</groupId>\n+\t  <artifactId>jsp-api</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-el</groupId>\n+\t  <artifactId>commons-el</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-logging</groupId>\n+\t  <artifactId>commons-logging</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-logging</groupId>\n+\t  <artifactId>commons-logging-api</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>log4j</groupId>\n+\t  <artifactId>log4j</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>net.java.dev.jets3t</groupId>\n+\t  <artifactId>jets3t</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.apache.mina</groupId>\n+\t  <artifactId>mina-core</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.apache.ftpserver</groupId>\n+\t  <artifactId>ftplet-api</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.apache.ftpserver</groupId>\n+\t  <artifactId>ftpserver-core</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.apache.ftpserver</groupId>\n+\t  <artifactId>ftpserver-deprecated</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>junit</groupId>\n+\t  <artifactId>junit</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-lang</groupId>\n+\t  <artifactId>commons-lang</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-collections</groupId>\n+\t  <artifactId>commons-collections</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>commons-configuration</groupId>\n+\t  <artifactId>commons-configuration</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>hsqldb</groupId>\n+\t  <artifactId>hsqldb</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.slf4j</groupId>\n+\t  <artifactId>slf4j-api</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.slf4j</groupId>\n+\t  <artifactId>slf4j-log4j12</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.eclipse.jdt</groupId>\n+\t  <artifactId>core</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>oro</groupId>\n+\t  <artifactId>oro</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.codehaus.jackson</groupId>\n+\t  <artifactId>jackson-mapper-asl</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.aspectj</groupId>\n+\t  <artifactId>aspectjrt</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.apache.avro</groupId>\n+\t  <artifactId>avro</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.apache.avro</groupId>\n+\t  <artifactId>avro-ipc</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>net.sf.kosmosfs</groupId>\n+\t  <artifactId>kfs</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.google.protobuf</groupId>\n+\t  <artifactId>protobuf-java</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>org.apache.hadoop</groupId>\n+\t  <artifactId>hadoop-auth</artifactId>\n+\t</exclusion>\n+\t<exclusion>\n+\t  <groupId>com.googlecode.json-simple</groupId>\n+\t  <artifactId>json-simple</artifactId>\n+\t</exclusion>\n+      </exclusions>\n+    </dependency>\n     <!--\n \tAnnoying dependency we need to include because\n \tzookeeper uses log4j and so we transatively do, but"},{"sha":"6e47c084c7592e9d76be9ec891afe9c03f9a85fd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":106,"deletions":97,"changes":203,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -31,8 +31,10 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.RandomAccessFile;\n+import java.io.FilenameFilter;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n import java.util.ArrayList;\n@@ -83,19 +85,11 @@\n     final SyncThread syncThread;\n     final LedgerManager ledgerManager;\n \n-    /**\n-     * Current directory layout version. Increment this \n-     * when you make a change to the format of any of the files in \n-     * this directory or to the general layout of the directory.\n-     */\n-    static final int MIN_COMPAT_DIRECTORY_LAYOUT_VERSION = 1;\n-    static final int CURRENT_DIRECTORY_LAYOUT_VERSION = 2;\n-    static final String VERSION_FILENAME = \"VERSION\";\n-\n     static final long METAENTRY_ID_LEDGER_KEY = -0x1000;\n \n     // ZK registration path for this bookie\n     static final String BOOKIE_REGISTRATION_PATH = \"/ledgers/available/\";\n+    static final String CURRENT_DIR = \"current\";\n \n     // ZooKeeper client instance for the Bookie\n     ZooKeeper zk;\n@@ -273,6 +267,100 @@ void shutdown() throws InterruptedException {\n         }\n     }\n \n+    public static void checkDirectoryStructure(File dir) throws IOException {\n+        if (!dir.exists()) {\n+            File parent = dir.getParentFile();\n+            File preV3versionFile = new File(dir.getParent(), Cookie.VERSION_FILENAME);\n+\n+            final AtomicBoolean oldDataExists = new AtomicBoolean(false);\n+            parent.list(new FilenameFilter() {\n+                    public boolean accept(File dir, String name) {\n+                        if (name.endsWith(\".txn\") || name.endsWith(\".idx\") || name.endsWith(\".log\")) {\n+                            oldDataExists.set(true);\n+                        }\n+                        return true;\n+                    }\n+                });\n+            if (preV3versionFile.exists() || oldDataExists.get()) {\n+                String err = \"Directory layout version is less than 3, upgrade needed\";\n+                LOG.error(err);\n+                throw new IOException(err);\n+            }\n+            dir.mkdirs();\n+        }\n+    }\n+\n+    /**\n+     * Check that the environment for the bookie is correct.\n+     * This means that the configuration has stayed the same as the\n+     * first run and the filesystem structure is up to date.\n+     */\n+    private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException {\n+        if (zk == null) { // exists only for testing, just make sure directories are correct\n+            checkDirectoryStructure(journalDirectory);\n+            for (File dir : ledgerDirectories) {\n+                    checkDirectoryStructure(dir);\n+            }\n+            return;\n+        }\n+        try {\n+            boolean newEnv = false;\n+            Cookie masterCookie = Cookie.generateCookie(conf);\n+            try {\n+                Cookie zkCookie = Cookie.readFromZooKeeper(zk, conf);\n+                masterCookie.verify(zkCookie);\n+            } catch (KeeperException.NoNodeException nne) {\n+                newEnv = true;\n+            }\n+            try {\n+                checkDirectoryStructure(journalDirectory);\n+\n+                Cookie journalCookie = Cookie.readFromDirectory(journalDirectory);\n+                journalCookie.verify(masterCookie);\n+                for (File dir : ledgerDirectories) {\n+                    checkDirectoryStructure(dir);\n+                    Cookie c = Cookie.readFromDirectory(dir);\n+                    c.verify(masterCookie);\n+                }\n+            } catch (FileNotFoundException fnf) {\n+                if (!newEnv){\n+                    LOG.error(\"Cookie exists in zookeeper, but not in all local directories\", fnf);\n+                    throw new BookieException.InvalidCookieException();\n+                }\n+\n+                masterCookie.writeToDirectory(journalDirectory);\n+                for (File dir : ledgerDirectories) {\n+                    masterCookie.writeToDirectory(dir);\n+                }\n+                masterCookie.writeToZooKeeper(zk, conf);\n+            }\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Couldn't access cookie in zookeeper\", ke);\n+            throw new BookieException.InvalidCookieException(ke);\n+        } catch (UnknownHostException uhe) {\n+            LOG.error(\"Couldn't check cookies, networking is broken\", uhe);\n+            throw new BookieException.InvalidCookieException(uhe);\n+        } catch (IOException ioe) {\n+            LOG.error(\"Error accessing cookie on disks\", ioe);\n+            throw new BookieException.InvalidCookieException(ioe);\n+        } catch (InterruptedException ie) {\n+            LOG.error(\"Thread interrupted while checking cookies, exiting\", ie);\n+            throw new BookieException.InvalidCookieException(ie);\n+        }\n+    }\n+\n+    public static File getCurrentDirectory(File dir) {\n+        return new File(dir, CURRENT_DIR);\n+    }\n+\n+    public static File[] getCurrentDirectories(File[] dirs) {\n+        File[] currentDirs = new File[dirs.length];\n+        for (int i = 0; i < dirs.length; i++) {\n+            currentDirs[i] = getCurrentDirectory(dirs[i]);\n+        }\n+        return currentDirs;\n+    }\n+\n     /**\n      * Scanner used to do entry log compaction\n      */\n@@ -295,23 +383,19 @@ public void process(long ledgerId, ByteBuffer buffer)\n         }\n     }\n \n-    public Bookie(ServerConfiguration conf) \n+    public Bookie(ServerConfiguration conf)\n             throws IOException, KeeperException, InterruptedException, BookieException {\n         super(\"Bookie-\" + conf.getBookiePort());\n         this.conf = conf;\n-        this.journalDirectory = conf.getJournalDir();\n-        this.ledgerDirectories = conf.getLedgerDirs();\n+        this.journalDirectory = getCurrentDirectory(conf.getJournalDir());\n+        this.ledgerDirectories = getCurrentDirectories(conf.getLedgerDirs());\n         this.maxJournalSize = conf.getMaxJournalSize() * MB;\n         this.maxBackupJournals = conf.getMaxBackupJournals();\n \n-        // check directory layouts\n-        checkDirectoryLayoutVersion(journalDirectory);\n-        for (File dir : ledgerDirectories) {\n-            checkDirectoryLayoutVersion(dir);\n-        }\n-\n         // instantiate zookeeper client to initialize ledger manager\n-        this.zk = instantiateZookeeperClient(conf.getZkServers());\n+        this.zk = instantiateZookeeperClient(conf);\n+        checkEnvironment(this.zk);\n+\n         ledgerManager = LedgerManagerFactory.newLedgerManager(conf, this.zk);\n \n         syncThread = new SyncThread(conf);\n@@ -520,15 +604,14 @@ public void unregisterJMX() {\n     /**\n      * Instantiate the ZooKeeper client for the Bookie.\n      */\n-    private ZooKeeper instantiateZookeeperClient(String zkServers) throws IOException {\n-        if (zkServers == null) {\n+    private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf) throws IOException {\n+        if (conf.getZkServers() == null) {\n             LOG.warn(\"No ZK servers passed to Bookie constructor so BookKeeper clients won't know about this server!\");\n             isZkExpired = false;\n             return null;\n         }\n-        int zkTimeout = conf.getZkTimeout();\n         // Create the ZooKeeper client instance\n-        return newZookeeper(zkServers, zkTimeout);\n+        return newZookeeper(conf.getZkServers(), conf.getZkTimeout());\n     }\n \n     /**\n@@ -602,80 +685,6 @@ public void process(WatchedEvent event) {\n         return newZk;\n     }\n \n-    /**\n-     * Check the layout version of a directory. If it is outside of the \n-     * range which this version of the software can handle, throw an\n-     * exception.\n-     *\n-     * @param dir Directory to check\n-     * @throws IOException if layout version if is outside usable range\n-     *               or if there is a problem reading the version file\n-     */\n-    private void checkDirectoryLayoutVersion(File dir)\n-            throws IOException {\n-        if (!dir.isDirectory()) {\n-            throw new IOException(\"Directory(\"+dir+\") isn't a directory\");\n-        }\n-        File versionFile = new File(dir, VERSION_FILENAME);\n-        \n-        FileInputStream fis;\n-        try {\n-            fis = new FileInputStream(versionFile);\n-        } catch (FileNotFoundException e) {\n-            /* \n-             * If the version file is not found, this must\n-             * either be the first time we've used this directory,\n-             * or it must date from before layout versions were introduced.\n-             * In both cases, we just create the version file\n-             */\n-            LOG.info(\"No version file found, creating\");\n-            createDirectoryLayoutVersionFile(dir);\n-            return;\n-        }\n-        \n-        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n-        try {\n-            String layoutVersionStr = br.readLine();\n-            int layoutVersion = Integer.parseInt(layoutVersionStr);\n-            if (layoutVersion < MIN_COMPAT_DIRECTORY_LAYOUT_VERSION\n-                || layoutVersion > CURRENT_DIRECTORY_LAYOUT_VERSION) {\n-                String errmsg = \"Directory has an invalid version, expected between \"\n-                    + MIN_COMPAT_DIRECTORY_LAYOUT_VERSION + \" and \"\n-                    + CURRENT_DIRECTORY_LAYOUT_VERSION + \", found \" + layoutVersion;\n-                LOG.error(errmsg);\n-                throw new IOException(errmsg);\n-            }\n-        } catch(NumberFormatException e) {\n-            throw new IOException(\"Version file has invalid content\", e);\n-        } finally {\n-            try {\n-                fis.close();\n-            } catch (IOException e) {\n-                LOG.warn(\"Error closing version file\", e);\n-            }\n-        }\n-    }\n-    \n-    /**\n-     * Create the directory layout version file with the current\n-     * directory layout version\n-     */\n-    private void createDirectoryLayoutVersionFile(File dir) throws IOException {\n-        File versionFile = new File(dir, VERSION_FILENAME);\n-\n-        FileOutputStream fos = new FileOutputStream(versionFile);\n-        BufferedWriter bw = null;\n-        try {\n-            bw = new BufferedWriter(new OutputStreamWriter(fos));\n-            bw.write(String.valueOf(CURRENT_DIRECTORY_LAYOUT_VERSION));\n-        } finally {\n-            if (bw != null) {\n-                bw.close();\n-            }\n-            fos.close();\n-        }\n-    }\n-\n     private static int fullRead(JournalChannel fc, ByteBuffer bb) throws IOException {\n         int total = 0;\n         while(bb.remaining() > 0) {"},{"sha":"714f70fab3e3383702a06316700c081886670994","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","status":"modified","additions":58,"deletions":5,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -32,12 +32,24 @@ public BookieException(int code) {\n         this.code = code;\n     }\n \n+    public BookieException(int code, Throwable t) {\n+        super(t);\n+    }\n+\n+    public BookieException(int code, String reason) {\n+        super(reason);\n+    }\n+\n     public static BookieException create(int code) {\n         switch(code) {\n         case Code.UnauthorizedAccessException:\n             return new BookieUnauthorizedAccessException();\n         case Code.LedgerFencedException:\n             return new LedgerFencedException();\n+        case Code.InvalidCookieException:\n+            return new InvalidCookieException();\n+        case Code.UpgradeException:\n+            return new UpgradeException();\n         default:\n             return new BookieIllegalOpException();\n         }\n@@ -49,6 +61,9 @@ public static BookieException create(int code) {\n \n         int IllegalOpException = -100;\n         int LedgerFencedException = -101;\n+\n+        int InvalidCookieException = -102;\n+        int UpgradeException = -103;\n     }\n \n     public void setCode(int code) {\n@@ -60,15 +75,29 @@ public int getCode() {\n     }\n \n     public String getMessage(int code) {\n+        String err = \"Invalid operation\";\n         switch(code) {\n         case Code.OK:\n-            return \"No problem\";\n+            err = \"No problem\";\n         case Code.UnauthorizedAccessException:\n-            return \"Error while reading ledger\";\n+            err = \"Error while reading ledger\";\n         case Code.LedgerFencedException:\n-            return \"Ledger has been fenced; No more entries can be added\";\n-        default:\n-            return \"Invalid operation\";\n+            err = \"Ledger has been fenced; No more entries can be added\";\n+        case Code.InvalidCookieException:\n+            err = \"Invalid environment cookie found\";\n+        case Code.UpgradeException:\n+            err = \"Error performing an upgrade operation \";\n+        }\n+        String reason = super.getMessage();\n+        if (reason == null) {\n+            if (super.getCause() != null) {\n+                reason = super.getCause().getMessage();\n+            }\n+        }\n+        if (reason == null) {\n+            return err;\n+        } else {\n+            return String.format(\"%s [%s]\", err, reason);\n         }\n     }\n \n@@ -89,4 +118,28 @@ public LedgerFencedException() {\n             super(Code.LedgerFencedException);\n         }\n     }\n+\n+    public static class InvalidCookieException extends BookieException {\n+        public InvalidCookieException() {\n+            this(null);\n+        }\n+\n+        public InvalidCookieException(Throwable cause) {\n+            super(Code.InvalidCookieException, cause);\n+        }\n+    }\n+\n+    public static class UpgradeException extends BookieException {\n+        public UpgradeException() {\n+            super(Code.UpgradeException);\n+        }\n+\n+        public UpgradeException(Throwable cause) {\n+            super(Code.UpgradeException, cause);\n+        }\n+\n+        public UpgradeException(String reason) {\n+            super(Code.UpgradeException, reason);\n+        }\n+    }\n }"},{"sha":"a39d49c28b3e8ebaf118849888e32363858533be","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -0,0 +1,195 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.util.Scanner;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.Stat;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * When a bookie starts for the first time it generates  a cookie, and stores\n+ * the cookie in zookeeper as well as in the each of the local filesystem\n+ * directories it uses. This cookie is used to ensure that for the life of the\n+ * bookie, its configuration stays the same. If any of the bookie directories\n+ * becomes unavailable, the bookie becomes unavailable. If the bookie changes\n+ * port, it must also reset all of its data.\n+ *\n+ * This is done to ensure data integrity. Without the cookie a bookie could\n+ * start with one of its ledger directories missing, so data would be missing,\n+ * but the bookie would be up, so the client would think that everything is ok\n+ * with the cluster. It's better to fail early and obviously.\n+ */\n+class Cookie {\n+    static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n+\n+    static final int CURRENT_COOKIE_LAYOUT_VERSION = 3;\n+    static final String BOOKIE_COOKIE_PATH = \"/ledgers/cookies\";\n+\n+    static final String VERSION_FILENAME = \"VERSION\";\n+    private int layoutVersion = 0;\n+    private String bookieHost = null;\n+    private String journalDir = null;\n+    private String ledgerDirs = null;\n+    private int znodeVersion = -1;\n+\n+    private Cookie() {\n+    }\n+\n+    public void verify(Cookie c)\n+            throws BookieException.InvalidCookieException {\n+        if (!(c.layoutVersion == layoutVersion\n+              && c.layoutVersion >= 3\n+              && c.bookieHost.equals(bookieHost)\n+              && c.journalDir.equals(journalDir)\n+              && c.ledgerDirs.equals(ledgerDirs))) {\n+            throw new BookieException.InvalidCookieException();\n+        }\n+    }\n+\n+    public String toString() {\n+        StringBuilder b = new StringBuilder();\n+        b.append(CURRENT_COOKIE_LAYOUT_VERSION).append(\"\\n\")\n+            .append(bookieHost).append(\"\\n\")\n+            .append(journalDir).append(\"\\n\")\n+            .append(ledgerDirs).append(\"\\n\");\n+        return b.toString();\n+    }\n+\n+    private static Cookie parse(Scanner s) throws IOException {\n+        Cookie c  = new Cookie();\n+        if (!s.hasNextInt()) {\n+            throw new IOException(\"Invalid string, cannot parse cookie.\");\n+        }\n+        c.layoutVersion = s.nextInt();\n+        if (c.layoutVersion >= 3) {\n+            s.nextLine();\n+            c.bookieHost = s.nextLine();\n+            c.journalDir = s.nextLine();\n+            c.ledgerDirs = s.nextLine();\n+        }\n+        s.close();\n+        return c;\n+    }\n+\n+    void writeToDirectory(File directory) throws IOException {\n+        File versionFile = new File(directory, VERSION_FILENAME);\n+\n+        FileOutputStream fos = new FileOutputStream(versionFile);\n+        BufferedWriter bw = null;\n+        try {\n+            bw = new BufferedWriter(new OutputStreamWriter(fos));\n+            bw.write(toString());\n+        } finally {\n+            if (bw != null) {\n+                bw.close();\n+            }\n+            fos.close();\n+        }\n+    }\n+\n+    void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n+            throws KeeperException, InterruptedException, UnknownHostException {\n+        String zkPath = getZkPath(conf);\n+        byte[] data = toString().getBytes();\n+        if (znodeVersion != -1) {\n+            zk.setData(zkPath, data, znodeVersion);\n+        } else {\n+            if (zk.exists(BOOKIE_COOKIE_PATH, false) == null) {\n+                try {\n+                    zk.create(BOOKIE_COOKIE_PATH, new byte[0],\n+                              Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                } catch (KeeperException.NodeExistsException nne) {\n+                    LOG.info(\"More than one bookie tried to create {} at once. Safe to ignore\",\n+                             BOOKIE_COOKIE_PATH);\n+                }\n+            }\n+            zk.create(zkPath, data,\n+                      Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            Stat stat = zk.exists(zkPath, false);\n+            this.znodeVersion = stat.getVersion();\n+        }\n+    }\n+\n+    void deleteFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n+            throws KeeperException, InterruptedException, UnknownHostException {\n+        String zkPath = getZkPath(conf);\n+        if (znodeVersion != -1) {\n+            zk.delete(zkPath, znodeVersion);\n+        }\n+        znodeVersion = -1;\n+    }\n+\n+    static Cookie generateCookie(ServerConfiguration conf)\n+            throws UnknownHostException {\n+        Cookie c = new Cookie();\n+        c.layoutVersion = CURRENT_COOKIE_LAYOUT_VERSION;\n+        c.bookieHost = InetAddress.getLocalHost().getHostAddress() + \":\" + conf.getBookiePort();\n+        c.journalDir = conf.getJournalDirName();\n+        StringBuilder b = new StringBuilder();\n+        String[] dirs = conf.getLedgerDirNames();\n+        b.append(dirs.length);\n+        for (String d : dirs) {\n+            b.append(\"\\t\").append(d);\n+        }\n+        c.ledgerDirs = b.toString();\n+        return c;\n+    }\n+\n+    static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n+            throws KeeperException, InterruptedException, IOException, UnknownHostException {\n+        String zkPath = getZkPath(conf);\n+\n+        Stat stat = zk.exists(zkPath, false);\n+        byte[] data = zk.getData(zkPath, false, stat);\n+        Cookie c = parse(new Scanner(new String(data)));\n+        c.znodeVersion = stat.getVersion();\n+        return c;\n+    }\n+\n+    static Cookie readFromDirectory(File directory) throws IOException {\n+        File versionFile = new File(directory, VERSION_FILENAME);\n+        return parse(new Scanner(versionFile));\n+    }\n+\n+    private static String getZkPath(ServerConfiguration conf)\n+            throws UnknownHostException {\n+        return BOOKIE_COOKIE_PATH + \"/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + conf.getBookiePort();\n+    }\n+}"},{"sha":"12e0592a241def3ded45b5bc510800de565e584c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -163,7 +163,7 @@ public String toString() {\n      * directories\n      */\n     public EntryLogger(ServerConfiguration conf) throws IOException {\n-        this.dirs = conf.getLedgerDirs();\n+        this.dirs = Bookie.getCurrentDirectories(conf.getLedgerDirs());\n         // log size limit\n         this.logSizeLimit = conf.getEntryLogSizeLimit();\n "},{"sha":"f20d3603901206ba8bbced84a95d1939d8ed3562","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":227,"deletions":16,"changes":243,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -21,6 +21,9 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import org.apache.hadoop.fs.HardLink;\n+\n+import org.apache.commons.io.FileUtils;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.CommandLine;\n@@ -33,13 +36,25 @@\n import java.io.File;\n import java.io.FilenameFilter;\n import java.io.IOException;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.ArrayList;\n import java.util.Scanner;\n import java.util.NoSuchElementException;\n \n import java.net.MalformedURLException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.commons.configuration.ConfigurationException;\n \n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.KeeperException;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n@@ -49,21 +64,57 @@\n public class FileSystemUpgrade {\n     static Logger LOG = LoggerFactory.getLogger(FileSystemUpgrade.class);\n \n-    private int detectPreviousVersion(File directory) throws IOException {\n-        final AtomicBoolean oldDataExists = new AtomicBoolean(false);\n-        directory.list(new FilenameFilter() {\n-                public boolean accept(File dir, String name) {\n-                    if (name.endsWith(\".txn\") || name.endsWith(\".idx\") || name.endsWith(\".log\")\n-                        || name.equals(Bookie.VERSION_FILENAME)) {\n-                        oldDataExists.set(true);\n+    static FilenameFilter BOOKIE_FILES_FILTER = new FilenameFilter() {\n+            private boolean containsIndexFiles(File dir, String name) {\n+                if (name.endsWith(\".idx\")) {\n+                    return true;\n+                }\n+\n+                try {\n+                    Long.parseLong(name, 16);\n+                    File d = new File(dir, name);\n+                    if (d.isDirectory()) {\n+                        String[] files = d.list();\n+                        for (String f : files) {\n+                            if (containsIndexFiles(d, f)) {\n+                                return true;\n+                            }\n+                        }\n                     }\n+                } catch (NumberFormatException nfe) {\n+                    return false;\n+                }\n+                return false;\n+            }\n+\n+            public boolean accept(File dir, String name) {\n+                if (name.endsWith(\".txn\") || name.endsWith(\".log\")\n+                    || name.equals(\"lastId\") || name.equals(\"lastMark\")) {\n+                    return true;\n+                }\n+                if (containsIndexFiles(dir, name)) {\n                     return true;\n                 }\n-            });\n-        if (!oldDataExists.get()) { // no old data, so we're ok\n-            return Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION;\n+                return false;\n+            }\n+        };\n+\n+    private static List<File> getAllDirectories(ServerConfiguration conf) {\n+        List<File> dirs = new ArrayList<File>();\n+        dirs.add(conf.getJournalDir());\n+        for (File d: conf.getLedgerDirs()) {\n+            dirs.add(d);\n         }\n-        File v2versionFile = new File(directory, Bookie.VERSION_FILENAME);\n+        return dirs;\n+    }\n+\n+    private static int detectPreviousVersion(File directory) throws IOException {\n+        String[] files = directory.list(BOOKIE_FILES_FILTER);\n+        File v2versionFile = new File(directory, Cookie.VERSION_FILENAME);\n+        if (files.length == 0 && !v2versionFile.exists()) { // no old data, so we're ok\n+            return Cookie.CURRENT_COOKIE_LAYOUT_VERSION;\n+        }\n+\n         if (!v2versionFile.exists()) {\n             return 1;\n         }\n@@ -81,21 +132,181 @@ public boolean accept(File dir, String name) {\n         }\n     }\n \n-    public static void upgrade(ServerConfiguration conf) {\n+    private static ZooKeeper newZookeeper(final ServerConfiguration conf)\n+            throws BookieException.UpgradeException {\n+        try {\n+            final CountDownLatch latch = new CountDownLatch(1);\n+            ZooKeeper zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(),\n+                    new Watcher() {\n+                        @Override\n+                        public void process(WatchedEvent event) {\n+                            // handle session disconnects and expires\n+                            if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {\n+                                latch.countDown();\n+                            }\n+                        }\n+                    });\n+            if (!latch.await(conf.getZkTimeout()*2, TimeUnit.MILLISECONDS)) {\n+                zk.close();\n+                throw new BookieException.UpgradeException(\"Couldn't connect to zookeeper\");\n+            }\n+            return zk;\n+        } catch (InterruptedException ie) {\n+            throw new BookieException.UpgradeException(ie);\n+        } catch (IOException ioe) {\n+            throw new BookieException.UpgradeException(ioe);\n+        }\n+    }\n+\n+    private static void linkIndexDirectories(File srcPath, File targetPath) throws IOException {\n+        String[] files = srcPath.list();\n+\n+        for (String f : files) {\n+            if (f.endsWith(\".idx\")) { // this is an index dir, create the links\n+                targetPath.mkdirs();\n+                HardLink.createHardLinkMult(srcPath, files, targetPath);\n+                return;\n+            }\n+            File newSrcPath = new File(srcPath, f);\n+            if (newSrcPath.isDirectory()) {\n+                try {\n+                    Long.parseLong(f, 16);\n+                    linkIndexDirectories(newSrcPath, new File(targetPath, f));\n+                } catch (NumberFormatException nfe) {\n+                    // filename does not parse to a hex Long, so\n+                    // it will not contain idx files. Ignoring\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void upgrade(ServerConfiguration conf)\n+            throws BookieException.UpgradeException, InterruptedException {\n         LOG.info(\"Upgrading...\");\n-        // noop at the moment\n+\n+        ZooKeeper zk = newZookeeper(conf);\n+        try {\n+            Map<File,File> deferredMoves = new HashMap<File, File>();\n+            Cookie c = Cookie.generateCookie(conf);\n+            for (File d : getAllDirectories(conf)) {\n+                LOG.info(\"Upgrading {}\", d);\n+                int version = detectPreviousVersion(d);\n+                if (version == Cookie.CURRENT_COOKIE_LAYOUT_VERSION) {\n+                    LOG.info(\"Directory is current, no need to upgrade\");\n+                }\n+                try {\n+                    File curDir = new File(d, Bookie.CURRENT_DIR);\n+                    File tmpDir = new File(d, \"upgradeTmp.\" + System.nanoTime());\n+                    deferredMoves.put(curDir, tmpDir);\n+                    tmpDir.mkdirs();\n+                    c.writeToDirectory(tmpDir);\n+\n+                    String[] files = d.list(new FilenameFilter() {\n+                            public boolean accept(File dir, String name) {\n+                                return BOOKIE_FILES_FILTER.accept(dir, name)\n+                                    && !(new File(dir, name).isDirectory());\n+                            }\n+                        });\n+                    HardLink.createHardLinkMult(d, files, tmpDir);\n+\n+                    linkIndexDirectories(d, tmpDir);\n+                } catch (IOException ioe) {\n+                    LOG.error(\"Error upgrading {}\", d);\n+                    throw new BookieException.UpgradeException(ioe);\n+                }\n+            }\n+\n+            for (Map.Entry<File,File> e : deferredMoves.entrySet()) {\n+                try {\n+                    FileUtils.moveDirectory(e.getValue(), e.getKey());\n+                } catch (IOException ioe) {\n+                    String err = String.format(\"Error moving upgraded directories into place %s -> %s \",\n+                                               e.getValue(), e.getKey());\n+                    LOG.error(err, ioe);\n+                    throw new BookieException.UpgradeException(ioe);\n+                }\n+            }\n+            try {\n+                c.writeToZooKeeper(zk, conf);\n+            } catch (KeeperException ke) {\n+                LOG.error(\"Error writing cookie to zookeeper\");\n+                throw new BookieException.UpgradeException(ke);\n+            }\n+        } catch (IOException ioe) {\n+            throw new BookieException.UpgradeException(ioe);\n+        } finally {\n+            zk.close();\n+        }\n         LOG.info(\"Done\");\n     }\n \n-    public static void finalizeUpgrade(ServerConfiguration conf) {\n+    public static void finalizeUpgrade(ServerConfiguration conf)\n+            throws BookieException.UpgradeException, InterruptedException {\n         LOG.info(\"Finalizing upgrade...\");\n+        // verify that upgrade is correct\n+        for (File d : getAllDirectories(conf)) {\n+            LOG.info(\"Finalizing {}\", d);\n+            try {\n+                int version = detectPreviousVersion(d);\n+                if (version < 3) {\n+                    if (version == 2) {\n+                        File v2versionFile = new File(d, Cookie.VERSION_FILENAME);\n+                        v2versionFile.delete();\n+                    }\n+                    File[] files = d.listFiles(BOOKIE_FILES_FILTER);\n+                    for (File f : files) {\n+                        if (f.isDirectory()) {\n+                            FileUtils.deleteDirectory(f);\n+                        } else{\n+                            f.delete();\n+                        }\n+                    }\n+                }\n+            } catch (IOException ioe) {\n+                LOG.error(\"Error finalizing {}\", d);\n+                throw new BookieException.UpgradeException(ioe);\n+            }\n+        }\n         // noop at the moment\n         LOG.info(\"Done\");\n     }\n \n-    public static void rollback(ServerConfiguration conf) {\n+    public static void rollback(ServerConfiguration conf)\n+            throws BookieException.UpgradeException, InterruptedException {\n         LOG.info(\"Rolling back upgrade...\");\n-        // noop at the moment\n+        ZooKeeper zk = newZookeeper(conf);\n+        try {\n+            for (File d : getAllDirectories(conf)) {\n+                LOG.info(\"Rolling back {}\", d);\n+                try {\n+                    // ensure there is a previous version before rollback\n+                    int version = detectPreviousVersion(d);\n+\n+                    if (version <= Cookie.CURRENT_COOKIE_LAYOUT_VERSION) {\n+                        File curDir = new File(d, Bookie.CURRENT_DIR);\n+                        FileUtils.deleteDirectory(curDir);\n+                    } else {\n+                        throw new BookieException.UpgradeException(\n+                                \"Cannot rollback as previous data does not exist\");\n+                    }\n+                } catch (IOException ioe) {\n+                    LOG.error(\"Error rolling back {}\", d);\n+                    throw new BookieException.UpgradeException(ioe);\n+                }\n+            }\n+            try {\n+                Cookie c = Cookie.readFromZooKeeper(zk, conf);\n+                c.deleteFromZooKeeper(zk, conf);\n+            } catch (KeeperException ke) {\n+                LOG.error(\"Error deleting cookie from ZooKeeper\");\n+                throw new BookieException.UpgradeException(ke);\n+            } catch (IOException ioe) {\n+                LOG.error(\"I/O Error deleting cookie from ZooKeeper\");\n+                throw new BookieException.UpgradeException(ioe);\n+            }\n+        } finally {\n+            zk.close();\n+        }\n         LOG.info(\"Done\");\n     }\n "},{"sha":"ba9c6d4288c17bc3266405b64c9fa5ff7c414fbb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -50,7 +50,7 @@\n     final File ledgerDirectories[];\n \n     public LedgerCache(ServerConfiguration conf, LedgerManager alm) {\n-        this.ledgerDirectories = conf.getLedgerDirs();\n+        this.ledgerDirectories = Bookie.getCurrentDirectories(conf.getLedgerDirs());\n         this.openFileLimit = conf.getOpenFileLimit();\n         this.pageSize = conf.getPageSize();\n         this.entriesPerPage = pageSize / 8;"},{"sha":"6e64932185e7610400a0a2ac625dfa696ec07c76","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":37,"deletions":15,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -205,13 +205,15 @@ public void testPreV2Journal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n-        writePreV2Journal(journalDir, 100);\n-        writeIndexFileForLedger(ledgerDir, 1, \"testPasswd\".getBytes());\n+        writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 100);\n+        writeIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir), 1, \"testPasswd\".getBytes());\n \n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(null)\n@@ -242,12 +244,14 @@ public void testAllJunkJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n-        writeJunkJournal(journalDir);\n+        writeJunkJournal(Bookie.getCurrentDirectory(journalDir));\n \n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(null)\n@@ -278,12 +282,14 @@ public void testEmptyJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n-        writePreV2Journal(journalDir, 0);\n+        writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n \n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(null)\n@@ -302,12 +308,14 @@ public void testHeaderOnlyJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n-        writePostV2Journal(journalDir, 0);\n+        writePostV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n \n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(null)\n@@ -326,12 +334,14 @@ public void testJunkEndedJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n-        JournalChannel jc = writePostV2Journal(journalDir, 0);\n+        JournalChannel jc = writePostV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n         jc.getBufferedChannel().write(ByteBuffer.wrap(\"JunkJunkJunk\".getBytes()));\n         jc.getBufferedChannel().flush(true);\n \n@@ -363,19 +373,23 @@ public void testTruncatedInLenJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n-        JournalChannel jc = writePostV2Journal(journalDir, 100);\n+        JournalChannel jc = writePostV2Journal(\n+                Bookie.getCurrentDirectory(journalDir), 100);\n         ByteBuffer zeros = ByteBuffer.allocate(2048);\n \n         jc.fc.position(jc.getBufferedChannel().position() - 0x429);\n         jc.fc.write(zeros);\n         jc.fc.force(false);\n \n-        writeIndexFileForLedger(ledgerDir, 1, \"testPasswd\".getBytes());\n+        writeIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir),\n+                                1, \"testPasswd\".getBytes());\n \n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(null)\n@@ -406,19 +420,23 @@ public void testTruncatedInEntryJournal() throws Exception {\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n-        JournalChannel jc = writePostV2Journal(journalDir, 100);\n+        JournalChannel jc = writePostV2Journal(\n+                Bookie.getCurrentDirectory(journalDir), 100);\n         ByteBuffer zeros = ByteBuffer.allocate(2048);\n \n         jc.fc.position(jc.getBufferedChannel().position() - 0x300);\n         jc.fc.write(zeros);\n         jc.fc.force(false);\n \n-        writeIndexFileForLedger(ledgerDir, 1, \"testPasswd\".getBytes());\n+        writeIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir),\n+                                1, \"testPasswd\".getBytes());\n \n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(null)\n@@ -474,14 +492,16 @@ private void testPartialFileInfoPreV3Journal(boolean truncateMasterKey)\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n-        writePreV2Journal(journalDir, 100);\n-        writePartialIndexFileForLedger(ledgerDir, 1, \"testPasswd\".getBytes(),\n-                                       truncateMasterKey);\n+        writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 100);\n+        writePartialIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir),\n+                                       1, \"testPasswd\".getBytes(), truncateMasterKey);\n \n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(null)\n@@ -531,15 +551,17 @@ private void testPartialFileInfoPostV3Journal(boolean truncateMasterKey)\n         File journalDir = File.createTempFile(\"bookie\", \"journal\");\n         journalDir.delete();\n         journalDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(journalDir));\n \n         File ledgerDir = File.createTempFile(\"bookie\", \"ledger\");\n         ledgerDir.delete();\n         ledgerDir.mkdir();\n+        Bookie.checkDirectoryStructure(Bookie.getCurrentDirectory(ledgerDir));\n \n         byte[] masterKey = \"testPasswd\".getBytes();\n \n-        writePostV3Journal(journalDir, 100, masterKey);\n-        writePartialIndexFileForLedger(ledgerDir, 1, masterKey,\n+        writePostV3Journal(Bookie.getCurrentDirectory(journalDir), 100, masterKey);\n+        writePartialIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir), 1, masterKey,\n                                        truncateMasterKey);\n \n         ServerConfiguration conf = new ServerConfiguration()"},{"sha":"10f95383955a58c688cd576c006ef0bb22bf286c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","status":"removed","additions":0,"deletions":261,"changes":261,"blob_url":"https://github.com/apache/bookkeeper/blob/8207445ea25bef37e3369e749913acc0d597d9b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/8207445ea25bef37e3369e749913acc0d597d9b2/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieLayoutVersionTest.java?ref=8207445ea25bef37e3369e749913acc0d597d9b2","patch":"@@ -1,261 +0,0 @@\n-/*\n- *\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- *\n- */\n-\n-package org.apache.bookkeeper.bookie;\n-\n-import java.io.IOException;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.BufferedWriter;\n-import java.io.OutputStreamWriter;\n-\n-import org.junit.*;\n-import static org.junit.Assert.*;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-\n-import org.apache.bookkeeper.test.BaseTestCase;\n-\n-public class BookieLayoutVersionTest extends BaseTestCase {\n-    static Logger LOG = LoggerFactory.getLogger(BookieLayoutVersionTest.class);\n-    \n-    final int BOOKIE_PORT = 3181;\n-\n-    public BookieLayoutVersionTest(DigestType digestType) {\n-        super(0);\n-    }\n-\n-    private static void writeTextToVersionFile(File dir, String text) throws IOException {\n-        File versionFile = new File(dir, Bookie.VERSION_FILENAME);\n-\n-        FileOutputStream fos = new FileOutputStream(versionFile);\n-        BufferedWriter bw = null;\n-        try {\n-            bw = new BufferedWriter(new OutputStreamWriter(fos));\n-            bw.write(text);\n-        } finally {\n-            if (bw != null) {\n-                bw.close();\n-            }\n-            fos.close();\n-        }\n-    }\n-\n-    private static void writeDirectoryLayoutVersionFile(File dir, int version) throws IOException {\n-        writeTextToVersionFile(dir, String.valueOf(version));\n-    }\n-\n-    private static File newDirectory(int version) throws IOException {\n-        File d = newDirectoryWithoutVersion();\n-        writeDirectoryLayoutVersionFile(d, version);\n-        return d;\n-    }\n-    \n-    private static File newDirectoryWithoutVersion() throws IOException {\n-        File d = File.createTempFile(\"bookie\", \"dir\");\n-        d.delete();\n-        d.mkdirs();\n-        return d;\n-    }\n-\n-    @Test\n-    public void testTooNewVersion() throws Exception {\n-        // test with bad ledger dir\n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1) }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n-        }\n-        \n-        // test with bad data dir\n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n-                new File[] { newDirectoryWithoutVersion() }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n-        }\n-\n-        // test with both bad        \n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n-                new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1) }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n-        }\n-\n-        // test with neither bad, both with good version\n-        Bookie b = new Bookie(newServerConfiguration(\n-            BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION ),\n-            new File[] { newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION) }));\n-        b.shutdown();\n-    }\n-\n-    @Test\n-    public void testTooOldVersion() throws Exception {\n-        // test with bad ledger dir\n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                new File[] { newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1) }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n-        }\n-        \n-        // test with bad data dir\n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1),\n-                new File[] { newDirectoryWithoutVersion() }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n-        }\n-\n-        // test with both bad        \n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1),\n-                new File[] { newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1) }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n-        }\n-    }\n-    \n-    @Test\n-    public void testSomeOldSomeCurrent() throws Exception {\n-        // test with both bad        \n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                    BOOKIE_PORT, HOSTPORT, newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n-                    new File[] { newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1),\n-                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n-                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION + 1),\n-                                 newDirectory(Bookie.CURRENT_DIRECTORY_LAYOUT_VERSION),\n-                                 newDirectory(Bookie.MIN_COMPAT_DIRECTORY_LAYOUT_VERSION - 1),}));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Directory has an invalid version,\"));\n-        }\n-    }\n-\n-    @Test\n-    public void testInvalidVersionFile() throws Exception {\n-        // invalid data\n-        File junkDir = newDirectoryWithoutVersion();\n-        writeTextToVersionFile(junkDir, \"JunkText\");\n-        File junkDir2 = newDirectoryWithoutVersion();\n-        writeTextToVersionFile(junkDir2, \"JunkText2\");\n-\n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                new File[] { junkDir }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Version file has invalid content\"));\n-        }\n-        \n-        // test with bad data dir\n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, junkDir,\n-                new File[] { newDirectoryWithoutVersion() }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Version file has invalid content\"));\n-        }\n-\n-        // test with both bad        \n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, junkDir,\n-                new File[] { junkDir2 }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Version file has invalid content\"));\n-        }\n-    }\n-    \n-    @Test \n-    public void directoryIsReadOnly() throws Exception {\n-        // invalid data\n-        File roDir = newDirectoryWithoutVersion();\n-        roDir.setWritable(false);\n-        File roDir2 = newDirectoryWithoutVersion();\n-        roDir2.setWritable(false);\n-\n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, newDirectoryWithoutVersion(),\n-                new File[] { roDir }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Permission denied\"));\n-        }\n-        \n-        // test with bad data dir\n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, roDir,\n-                new File[] { newDirectoryWithoutVersion() }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Permission denied\"));\n-        }\n-\n-        // test with both bad        \n-        try {\n-            Bookie b = new Bookie(newServerConfiguration(\n-                BOOKIE_PORT, HOSTPORT, roDir,\n-                new File[] { roDir2 }));\n-            fail(\"Shouldn't reach here\");\n-        } catch (IOException ioe) {\n-            assertTrue(\"Invalid exception\", \n-                       ioe.getMessage().contains(\"Permission denied\"));\n-        }\n-\n-    } \n-\n-\n-}"},{"sha":"34dcc74b46245c5f75e9e99f36115e7c92bca038","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -133,7 +133,7 @@ private void verifyLedger(long lid, long startEntryId, long endEntryId) throws E\n     private boolean[] checkLogFiles(File ledgerDirectory, int numFiles) {\n         boolean[] hasLogFiles = new boolean[numFiles];\n         Arrays.fill(hasLogFiles, false);\n-        for (File f : ledgerDirectory.listFiles()) {\n+        for (File f : Bookie.getCurrentDirectory(ledgerDirectory).listFiles()) {\n             LOG.info(\"Checking file : \" + f);\n             if (f.isFile()) {\n                 String name = f.getName();"},{"sha":"e729c329124f3eb23f4f9d3f8ace66bf6a4fb809","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"added","additions":298,"deletions":0,"changes":298,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -0,0 +1,298 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+import java.io.FileOutputStream;\n+import java.io.BufferedWriter;\n+import java.io.OutputStreamWriter;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.junit.Test;\n+import org.junit.After;\n+import org.junit.Before;\n+import static org.junit.Assert.*;\n+\n+import static org.apache.bookkeeper.bookie.UpgradeTest.*;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CookieTest {\n+    ZooKeeperUtil zkutil;\n+    ZooKeeper zkc = null;\n+\n+    @Before\n+    public void setupZooKeeper() throws Exception {\n+        zkutil = new ZooKeeperUtil();\n+        zkutil.startServer();\n+        zkc = zkutil.getZooKeeperClient();\n+    }\n+\n+    @After\n+    public void tearDownZooKeeper() throws Exception {\n+        zkutil.killServer();\n+    }\n+\n+    private static String newDirectory() throws IOException {\n+        File d = File.createTempFile(\"bookie\", \"tmpdir\");\n+        d.delete();\n+        d.mkdirs();\n+        new File(d, \"current\").mkdirs();\n+        return d.getPath();\n+    }\n+\n+    /**\n+     * Test that if a zookeeper cookie\n+     * is different to a local cookie, the bookie\n+     * will fail to start\n+     */\n+    @Test\n+    public void testBadJournalCookie() throws Exception {\n+        ServerConfiguration conf1 = new ServerConfiguration()\n+            .setJournalDirName(newDirectory())\n+            .setLedgerDirNames(new String[] { newDirectory() })\n+            .setBookiePort(3181);\n+        Cookie c = Cookie.generateCookie(conf1);\n+        c.writeToZooKeeper(zkc, conf1);\n+\n+        String journalDir = newDirectory();\n+        String ledgerDir = newDirectory();\n+        ServerConfiguration conf2 = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir)\n+            .setLedgerDirNames(new String[] { ledgerDir })\n+            .setBookiePort(3181);\n+        Cookie c2 = Cookie.generateCookie(conf2);\n+        c2.writeToDirectory(new File(journalDir, \"current\"));\n+        c2.writeToDirectory(new File(ledgerDir, \"current\"));\n+\n+        try {\n+            Bookie b = new Bookie(conf2);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+        }\n+    }\n+\n+    /**\n+     * Test that if a directory is removed from\n+     * the configuration, the bookie will fail to\n+     * start\n+     */\n+    @Test\n+    public void testDirectoryMissing() throws Exception {\n+        String[] ledgerDirs = new String[] {\n+            newDirectory(), newDirectory(), newDirectory() };\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir)\n+            .setLedgerDirNames(ledgerDirs)\n+            .setBookiePort(3181);\n+\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+\n+        conf.setLedgerDirNames(new String[] { ledgerDirs[0], ledgerDirs[1] });\n+        try {\n+            Bookie b2 = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+        }\n+\n+        conf.setJournalDirName(newDirectory()).setLedgerDirNames(ledgerDirs);\n+        try {\n+            Bookie b2 = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+        }\n+\n+        conf.setJournalDirName(journalDir);\n+        b = new Bookie(conf);\n+        b.start();\n+        b.shutdown();\n+    }\n+\n+    /**\n+     * Test that if a directory is added to a\n+     * preexisting bookie, the bookie will fail\n+     * to start\n+     */\n+    @Test\n+    public void testDirectoryAdded() throws Exception {\n+        String ledgerDir0 = newDirectory();\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir)\n+            .setLedgerDirNames(new String[] { ledgerDir0 })\n+            .setBookiePort(3181);\n+\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+\n+        conf.setLedgerDirNames(new String[] { ledgerDir0, newDirectory() });\n+        try {\n+            Bookie b2 = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+        }\n+\n+        conf.setLedgerDirNames(new String[] { ledgerDir0 });\n+        b = new Bookie(conf);\n+        b.start();\n+        b.shutdown();\n+    }\n+\n+    /**\n+     * Test that if a directory's contents\n+     * are emptied, the bookie will fail to start\n+     */\n+    @Test\n+    public void testDirectoryCleared() throws Exception {\n+        String ledgerDir0 = newDirectory();\n+        String journalDir = newDirectory();\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(journalDir)\n+            .setLedgerDirNames(new String[] { ledgerDir0 , newDirectory() })\n+            .setBookiePort(3181);\n+\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+\n+        FileUtils.deleteDirectory(new File(ledgerDir0));\n+        try {\n+            Bookie b2 = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+        }\n+    }\n+\n+    /**\n+     * Test that if a bookie's port is changed\n+     * the bookie will fail to start\n+     */\n+    @Test\n+    public void testBookiePortChanged() throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(newDirectory())\n+            .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n+            .setBookiePort(3181);\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+\n+        conf.setBookiePort(3182);\n+        try {\n+            b = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+        }\n+    }\n+\n+    /**\n+     * Test that if a bookie tries to start\n+     * with the address of a bookie which has already\n+     * existed in the system, then the bookie will fail\n+     * to start\n+     */\n+    @Test\n+    public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(newDirectory())\n+            .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n+            .setBookiePort(3181);\n+        Bookie b = new Bookie(conf); // should work fine\n+        b.start();\n+        b.shutdown();\n+\n+        conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(newDirectory())\n+            .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n+            .setBookiePort(3181);\n+        try {\n+            b = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+        }\n+    }\n+\n+    /**\n+     * Test that if a bookie is started with directories with\n+     * version 2 data, that it will fail to start (it needs upgrade)\n+     */\n+    @Test\n+    public void testV2data() throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(newV2JournalDirectory())\n+            .setLedgerDirNames(new String[] { newV2LedgerDirectory() })\n+            .setBookiePort(3181);\n+        try {\n+            Bookie b = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+            assertTrue(\"wrong exception\", ice.getCause().getMessage().contains(\"upgrade needed\"));\n+        }\n+    }\n+\n+    /**\n+     * Test that if a bookie is started with directories with\n+     * version 1 data, that it will fail to start (it needs upgrade)\n+     */\n+    @Test\n+    public void testV1data() throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(newV1JournalDirectory())\n+            .setLedgerDirNames(new String[] { newV1LedgerDirectory() })\n+            .setBookiePort(3181);\n+        try {\n+            Bookie b = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException ice) {\n+            // correct behaviour\n+            assertTrue(\"wrong exception\", ice.getCause().getMessage().contains(\"upgrade needed\"));\n+        }\n+    }\n+}\n\\ No newline at end of file"},{"sha":"442aa9d7642fac7e552bab5c8d73328d77d8909d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -50,6 +50,9 @@ public void testCorruptEntryLog() throws Exception {\n         File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n         tmpDir.delete();\n         tmpDir.mkdir();\n+        File curDir = Bookie.getCurrentDirectory(tmpDir);\n+        Bookie.checkDirectoryStructure(curDir);\n+\n         int gcWaitTime = 1000;\n         ServerConfiguration conf = new ServerConfiguration();\n         conf.setGcWaitTime(gcWaitTime);\n@@ -61,7 +64,7 @@ public void testCorruptEntryLog() throws Exception {\n         logger.addEntry(2, generateEntry(2, 1));\n         logger.flush();\n         // now lets truncate the file to corrupt the last entry, which simulates a partial write\n-        File f = new File(tmpDir, \"0.log\");\n+        File f = new File(curDir, \"0.log\");\n         RandomAccessFile raf = new RandomAccessFile(f, \"rw\");\n         raf.setLength(raf.length()-10);\n         raf.close();"},{"sha":"c4eacdaa3f50aca5933eb5cf94702877629f9a95","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":143,"deletions":10,"changes":153,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -21,38 +21,118 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import java.util.Arrays;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n+\n import java.io.File;\n import java.io.IOException;\n \n import java.io.FileOutputStream;\n import java.io.OutputStreamWriter;\n import java.io.BufferedWriter;\n import java.io.PrintStream;\n+import java.io.RandomAccessFile;\n \n-\n+import org.junit.Before;\n+import org.junit.After;\n import org.junit.Test;\n import static org.junit.Assert.*;\n \n+import org.apache.bookkeeper.client.ClientUtil;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n \n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n public class UpgradeTest {\n-    static String newV1JournalDirectory() throws IOException {\n+    static Logger LOG = LoggerFactory.getLogger(FileInfo.class);\n+\n+    ZooKeeperUtil zkutil;\n+    ZooKeeper zkc = null;\n+\n+    @Before\n+    public void setupZooKeeper() throws Exception {\n+        zkutil = new ZooKeeperUtil();\n+        zkutil.startServer();\n+        zkc = zkutil.getZooKeeperClient();\n+    }\n+\n+    @After\n+    public void tearDownZooKeeper() throws Exception {\n+        zkutil.killServer();\n+    }\n+\n+    static void writeLedgerDir(File dir,\n+                               byte[] masterKey)\n+            throws Exception {\n+        long ledgerId = 1;\n+\n+        File fn = new File(dir, LedgerCache.getLedgerName(ledgerId));\n+        fn.getParentFile().mkdirs();\n+        FileInfo fi = new FileInfo(fn, masterKey);\n+        // force creation of index file\n+        fi.write(new ByteBuffer[]{ ByteBuffer.allocate(0) }, 0);\n+        fi.close();\n+\n+        long logId = 0;\n+        ByteBuffer LOGFILE_HEADER = ByteBuffer.allocate(1024);\n+        LOGFILE_HEADER.put(\"BKLO\".getBytes());\n+        FileChannel logfile = new RandomAccessFile(\n+                new File(dir, Long.toHexString(logId)+\".log\"), \"rw\").getChannel();\n+        logfile.write((ByteBuffer) LOGFILE_HEADER.clear());\n+        logfile.close();\n+    }\n+\n+    static JournalChannel writeJournal(File journalDir, int numEntries, byte[] masterKey)\n+            throws Exception {\n+        long logId = System.currentTimeMillis();\n+        JournalChannel jc = new JournalChannel(journalDir, logId);\n+\n+        BufferedChannel bc = jc.getBufferedChannel();\n+\n+        long ledgerId = 1;\n+        byte[] data = new byte[1024];\n+        Arrays.fill(data, (byte)'X');\n+        long lastConfirmed = -1;\n+\n+        for (int i = 1; i <= numEntries; i++) {\n+            ByteBuffer packet = ClientUtil.generatePacket(ledgerId, i, lastConfirmed,\n+                                                          i*data.length, data).toByteBuffer();\n+            lastConfirmed = i;\n+            ByteBuffer lenBuff = ByteBuffer.allocate(4);\n+            lenBuff.putInt(packet.remaining());\n+            lenBuff.flip();\n+\n+            bc.write(lenBuff);\n+            bc.write(packet);\n+        }\n+        bc.flush(true);\n+\n+        return jc;\n+    }\n+\n+    static String newV1JournalDirectory() throws Exception {\n         File d = File.createTempFile(\"bookie\", \"tmpdir\");\n         d.delete();\n         d.mkdirs();\n-        new File(d, Long.toHexString(System.currentTimeMillis()) + \".txn\").createNewFile();\n+        writeJournal(d, 100, \"foobar\".getBytes()).close();\n         return d.getPath();\n     }\n \n-    static String newV1LedgerDirectory() throws IOException {\n+    static String newV1LedgerDirectory() throws Exception {\n         File d = File.createTempFile(\"bookie\", \"tmpdir\");\n         d.delete();\n         d.mkdirs();\n-        new File(d, Long.toHexString(System.currentTimeMillis()) + \".log\").createNewFile();\n+        writeLedgerDir(d, \"foobar\".getBytes());\n         return d.getPath();\n     }\n \n-    static void createVersion2File(String dir) throws IOException {\n+    static void createVersion2File(String dir) throws Exception {\n         File versionFile = new File(dir, \"VERSION\");\n \n         FileOutputStream fos = new FileOutputStream(versionFile);\n@@ -68,26 +148,79 @@ static void createVersion2File(String dir) throws IOException {\n         }\n     }\n \n-    static String newV2JournalDirectory() throws IOException {\n+    static String newV2JournalDirectory() throws Exception {\n         String d = newV1JournalDirectory();\n         createVersion2File(d);\n         return d;\n     }\n \n-    static String newV2LedgerDirectory() throws IOException {\n+    static String newV2LedgerDirectory() throws Exception {\n         String d = newV1LedgerDirectory();\n         createVersion2File(d);\n         return d;\n     }\n \n+    private static void testUpgradeProceedure(String zkServers, String journalDir, String ledgerDir) throws Exception {\n+        ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkServers)\n+            .setJournalDirName(journalDir)\n+            .setLedgerDirNames(new String[] { ledgerDir })\n+            .setBookiePort(3181);\n+        Bookie b = null;\n+        try {\n+            b = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException e) {\n+            // correct behaviour\n+            assertTrue(\"wrong exception\", e.getMessage().contains(\"upgrade needed\"));\n+        }\n+\n+        FileSystemUpgrade.upgrade(conf); // should work fine\n+        b = new Bookie(conf);\n+        b.start();\n+        b.shutdown();\n+        b = null;\n+\n+        FileSystemUpgrade.rollback(conf);\n+        try {\n+            b = new Bookie(conf);\n+            fail(\"Shouldn't have been able to start\");\n+        } catch (BookieException.InvalidCookieException e) {\n+            // correct behaviour\n+            assertTrue(\"wrong exception\", e.getMessage().contains(\"upgrade needed\"));\n+        }\n+\n+        FileSystemUpgrade.upgrade(conf);\n+        FileSystemUpgrade.finalizeUpgrade(conf);\n+        b = new Bookie(conf);\n+        b.start();\n+        b.shutdown();\n+        b = null;\n+    }\n+\n+    @Test\n+    public void testUpgradeV1toCurrent() throws Exception {\n+        String journalDir = newV1JournalDirectory();\n+        String ledgerDir = newV1LedgerDirectory();\n+        testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n+    }\n+\n+    @Test\n+    public void testUpgradeV2toCurrent() throws Exception {\n+        String journalDir = newV2JournalDirectory();\n+        String ledgerDir = newV2LedgerDirectory();\n+        testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n+    }\n+\n     @Test\n     public void testCommandLine() throws Exception {\n         PrintStream origerr = System.err;\n         PrintStream origout = System.out;\n \n-        File output = File.createTempFile(\"bookie\", \"tmpout\");\n+        File output = File.createTempFile(\"bookie\", \"stdout\");\n+        File erroutput = File.createTempFile(\"bookie\", \"stderr\");\n         System.setOut(new PrintStream(output));\n-        System.setErr(new PrintStream(output));\n+        System.setErr(new PrintStream(erroutput));\n         try {\n             FileSystemUpgrade.main(new String[] { \"-h\" });\n             try {"},{"sha":"b8923e889fa98032747e60a4f49497f7c326c7d8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -114,7 +114,7 @@ public void setUp() throws Exception {\n         sync = new SyncObject();\n         bookieRecoverCb = new BookieRecoverCallback();\n         ClientConfiguration adminConf = new ClientConfiguration(baseClientConf);\n-        adminConf.setZkServers(HOSTPORT);\n+        adminConf.setZkServers(zkUtil.getZooKeeperConnectString());\n         bkAdmin = new BookKeeperAdmin(adminConf);\n     }\n "},{"sha":"7de1c102641b34ffc586af0d3babdea9d77416dd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -255,7 +255,7 @@ public void testFencingInteractionWithBookieRecovery() throws Exception {\n         System.setProperty(\"digestType\", digestType.toString());\n         System.setProperty(\"passwd\", \"testPasswd\");\n \n-        BookKeeperAdmin admin = new BookKeeperAdmin(HOSTPORT);\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.getZooKeeperConnectString());\n \n         LedgerHandle writelh = bkc.createLedger(digestType, \"testPasswd\".getBytes());\n         \n@@ -308,7 +308,7 @@ public void testFencingInteractionWithBookieRecovery2() throws Exception {\n         System.setProperty(\"digestType\", digestType.toString());\n         System.setProperty(\"passwd\", \"testPasswd\");\n \n-        BookKeeperAdmin admin = new BookKeeperAdmin(HOSTPORT);\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.getZooKeeperConnectString());\n \n         LedgerHandle writelh = bkc.createLedger(digestType, \"testPasswd\".getBytes());\n         "},{"sha":"0fe5aba76478c060501ca538c1f50b88fcb4d841","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":16,"deletions":77,"changes":93,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -21,6 +21,8 @@\n \n package org.apache.bookkeeper.test;\n \n+import org.apache.commons.io.FileUtils;\n+\n import java.io.IOException;\n import java.io.File;\n import java.net.InetAddress;\n@@ -39,15 +41,10 @@\n import org.apache.bookkeeper.bookie.BookieException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n+\n import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.ZooDefs.Ids;\n-import org.apache.zookeeper.server.NIOServerCnxnFactory;\n-import org.apache.zookeeper.server.ZooKeeperServer;\n-import org.apache.zookeeper.test.ClientBase;\n+import org.apache.zookeeper.KeeperException;\n+\n import org.junit.After;\n import org.junit.Before;\n import org.junit.runner.RunWith;\n@@ -59,13 +56,9 @@\n @RunWith(Parameterized.class)\n public abstract class BaseTestCase extends TestCase {\n     static final Logger LOG = LoggerFactory.getLogger(BaseTestCase.class);\n-    // ZooKeeper related variables\n-    protected static final String HOSTPORT = \"127.0.0.1:2181\";\n-    protected static Integer ZooKeeperDefaultPort = 2181;\n-    protected ZooKeeperServer zks;\n-    protected ZooKeeper zkc; // zookeeper client\n-    protected NIOServerCnxnFactory serverFactory;\n-    protected File ZkTmpDir;\n+\n+    protected ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n+    protected ZooKeeper zkc;\n \n     // BookKeeper\n     protected List<File> tmpDirs = new ArrayList<File>();\n@@ -105,32 +98,10 @@ protected ServerConfiguration newServerConfiguration(int port, String zkServers,\n     @Override\n     public void setUp() throws Exception {\n         try {\n-            // create a ZooKeeper server(dataDir, dataLogDir, port)\n-            LOG.debug(\"Running ZK server\");\n-            // ServerStats.registerAsConcrete();\n-            ClientBase.setupTestEnv();\n-            ZkTmpDir = File.createTempFile(\"zookeeper\", \"test\");\n-            ZkTmpDir.delete();\n-            ZkTmpDir.mkdir();\n+            zkUtil.startServer();\n+            zkc = zkUtil.getZooKeeperClient();\n \n-            zks = new ZooKeeperServer(ZkTmpDir, ZkTmpDir, ZooKeeperDefaultPort);\n-            serverFactory = new NIOServerCnxnFactory();\n-            serverFactory.configure(new InetSocketAddress(ZooKeeperDefaultPort), 100);\n-            serverFactory.startup(zks);\n-\n-            boolean b = ClientBase.waitForServerUp(HOSTPORT, ClientBase.CONNECTION_TIMEOUT);\n-\n-            LOG.debug(\"Server up: \" + b);\n-\n-            // create a zookeeper client\n-            LOG.debug(\"Instantiate ZK Client\");\n-            zkc = new ZooKeeper(\"127.0.0.1\", ZooKeeperDefaultPort, new emptyWatcher());\n-\n-            // initialize the zk client with values\n-            zkc.create(\"/ledgers\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-            zkc.create(\"/ledgers/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-\n-            baseClientConf.setZkServers(\"127.0.0.1\");\n+            baseClientConf.setZkServers(zkUtil.getZooKeeperConnectString());\n             if (numBookies > 0) {\n                 bkc = new BookKeeperTestClient(baseClientConf);\n             }\n@@ -143,7 +114,7 @@ public void setUp() throws Exception {\n                 f.mkdir();\n \n                 ServerConfiguration conf = newServerConfiguration(\n-                    nextPort++, HOSTPORT, f, new File[] { f });\n+                        nextPort++, zkUtil.getZooKeeperConnectString(), f, new File[] { f });\n                 bsConfs.add(conf);\n \n                 bs.add(startBookie(conf));\n@@ -253,7 +224,8 @@ protected int startNewBookie()\n         f.mkdir();\n \n         int port = nextPort++;\n-        ServerConfiguration conf = newServerConfiguration(port, HOSTPORT, f, new File[] { f });\n+        ServerConfiguration conf = newServerConfiguration(port, zkUtil.getZooKeeperConnectString(),\n+                                                          f, new File[] { f });\n \n         bs.add(startBookie(conf));\n \n@@ -296,44 +268,11 @@ public void tearDown() throws Exception {\n             server.shutdown();\n         }\n \n-        if (zkc != null) {\n-            zkc.close();\n-        }\n-\n         for (File f : tmpDirs) {\n-            cleanUpDir(f);\n-        }\n-\n-        // shutdown ZK server\n-        if (serverFactory != null) {\n-            serverFactory.shutdown();\n-            assertTrue(\"waiting for server down\", ClientBase.waitForServerDown(HOSTPORT, ClientBase.CONNECTION_TIMEOUT));\n+            FileUtils.deleteDirectory(f);\n         }\n-        // ServerStats.unregister();\n-        cleanUpDir(ZkTmpDir);\n-\n-\n-    }\n \n-    /* Clean up a directory recursively */\n-    protected boolean cleanUpDir(File dir) {\n-        if (dir.isDirectory()) {\n-            LOG.info(\"Cleaning up \" + dir.getName());\n-            String[] children = dir.list();\n-            for (String string : children) {\n-                boolean success = cleanUpDir(new File(dir, string));\n-                if (!success)\n-                    return false;\n-            }\n-        }\n-        // The directory is now empty so delete it\n-        return dir.delete();\n-    }\n-\n-    /* User for testing purposes, void */\n-    class emptyWatcher implements Watcher {\n-        public void process(WatchedEvent event) {\n-        }\n+        zkUtil.killServer();\n     }\n \n }"},{"sha":"e647d6876d0afc40c6e88211cf53195d428c7154","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -279,29 +279,6 @@ public void setUp() throws Exception {\n         zkc.close();\n     }\n \n-\n-    /* Clean up a directory recursively */\n-    @Override\n-    protected boolean cleanUpDir(File dir) {\n-        if (dir.isDirectory()) {\n-            LOG.info(\"Cleaning up \" + dir.getName());\n-            String[] children = dir.list();\n-            for (String string : children) {\n-                boolean success = cleanUpDir(new File(dir, string));\n-                if (!success)\n-                    return false;\n-            }\n-        }\n-        // The directory is now empty so delete it\n-        return dir.delete();\n-    }\n-\n-    /* User for testing purposes, void */\n-    class emptyWatcher implements Watcher {\n-        public void process(WatchedEvent event) {\n-        }\n-    }\n-\n     @Test\n     public void testLedgerNoRecoveryOpenAfterBKCrashed() throws Exception {\n         // Create a ledger"},{"sha":"ee5d24e5a451b3e1a8823fd464d7cc06de38984a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -58,7 +58,8 @@ public void runBookieServerZKExpireBehaviourTest() throws Exception {\n                 }\n             }\n \n-            ServerConfiguration conf = newServerConfiguration(initialPort + 1, HOSTPORT, f, new File[] { f });\n+            ServerConfiguration conf = newServerConfiguration(initialPort + 1,\n+                                                              zkUtil.getZooKeeperConnectString(), f, new File[] { f });\n             server = new BookieServer(conf);\n             server.start();\n "},{"sha":"0b0fb927981f17acc30aef57404c4c309316a21f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/apache/bookkeeper/blob/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=c6cc7cca3a85603c8e935ba6d06fbf3d8d7a7eb5","patch":"@@ -0,0 +1,133 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.test;\n+\n+import java.io.File;\n+import java.net.InetSocketAddress;\n+\n+import org.apache.commons.io.FileUtils;\n+\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+\n+import org.apache.zookeeper.server.NIOServerCnxnFactory;\n+import org.apache.zookeeper.server.ZooKeeperServer;\n+import org.apache.zookeeper.test.ClientBase;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.Assert.*;\n+\n+public class ZooKeeperUtil {\n+    static final Logger LOG = LoggerFactory.getLogger(ZooKeeperUtil.class);\n+\n+    // ZooKeeper related variables\n+    protected static Integer ZooKeeperDefaultPort = 2181;\n+    private final InetSocketAddress zkaddr;\n+\n+    protected ZooKeeperServer zks;\n+    protected ZooKeeper zkc; // zookeeper client\n+    protected NIOServerCnxnFactory serverFactory;\n+    protected File ZkTmpDir;\n+    private final String connectString;\n+\n+    public ZooKeeperUtil() {\n+        zkaddr = new InetSocketAddress(ZooKeeperDefaultPort);\n+        connectString= \"localhost:\" + ZooKeeperDefaultPort;\n+    }\n+\n+    public ZooKeeper getZooKeeperClient() {\n+        return zkc;\n+    }\n+\n+    public String getZooKeeperConnectString() {\n+        return connectString;\n+    }\n+\n+    public void startServer() throws Exception {\n+        // create a ZooKeeper server(dataDir, dataLogDir, port)\n+        LOG.debug(\"Running ZK server\");\n+        // ServerStats.registerAsConcrete();\n+        ClientBase.setupTestEnv();\n+        ZkTmpDir = File.createTempFile(\"zookeeper\", \"test\");\n+        ZkTmpDir.delete();\n+        ZkTmpDir.mkdir();\n+\n+        zks = new ZooKeeperServer(ZkTmpDir, ZkTmpDir, ZooKeeperDefaultPort);\n+        serverFactory = new NIOServerCnxnFactory();\n+        serverFactory.configure(zkaddr, 100);\n+        serverFactory.startup(zks);\n+\n+        boolean b = ClientBase.waitForServerUp(getZooKeeperConnectString(),\n+                                               ClientBase.CONNECTION_TIMEOUT);\n+        LOG.debug(\"Server up: \" + b);\n+\n+        // create a zookeeper client\n+        LOG.debug(\"Instantiate ZK Client\");\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        zkc = new ZooKeeper(getZooKeeperConnectString(), 10000,\n+                            new Watcher() {\n+                                @Override\n+                                public void process(WatchedEvent event) {\n+                                    // handle session disconnects and expires\n+                                    if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {\n+                                        latch.countDown();\n+                                    }\n+                                }\n+                            });\n+        if (!latch.await(10000, TimeUnit.MILLISECONDS)) {\n+            zkc.close();\n+            fail(\"Could not connect to zookeeper server\");\n+        }\n+\n+        // initialize the zk client with values\n+        zkc.create(\"/ledgers\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        zkc.create(\"/ledgers/available\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+    }\n+\n+    public void killServer() throws Exception {\n+        if (zkc != null) {\n+            zkc.close();\n+        }\n+\n+        // shutdown ZK server\n+        if (serverFactory != null) {\n+            serverFactory.shutdown();\n+            assertTrue(\"waiting for server down\",\n+                       ClientBase.waitForServerDown(getZooKeeperConnectString(),\n+                                                    ClientBase.CONNECTION_TIMEOUT));\n+        }\n+        // ServerStats.unregister();\n+        FileUtils.deleteDirectory(ZkTmpDir);\n+    }\n+}\n\\ No newline at end of file"}]}

