{"sha":"c7a0c1c43e7beea9969b149cd796a712a0c6330d","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjN2EwYzFjNDNlN2JlZWE5OTY5YjE0OWNkNzk2YTcxMmEwYzYzMzBk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T14:32:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T14:32:47Z"},"message":"BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1598614 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6402692290d0429bcc736b7fadce55336eeac739","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6402692290d0429bcc736b7fadce55336eeac739"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c7a0c1c43e7beea9969b149cd796a712a0c6330d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c7a0c1c43e7beea9969b149cd796a712a0c6330d","html_url":"https://github.com/apache/bookkeeper/commit/c7a0c1c43e7beea9969b149cd796a712a0c6330d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c7a0c1c43e7beea9969b149cd796a712a0c6330d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0a925975e9a09839e4501479cade955eb1963695","url":"https://api.github.com/repos/apache/bookkeeper/commits/0a925975e9a09839e4501479cade955eb1963695","html_url":"https://github.com/apache/bookkeeper/commit/0a925975e9a09839e4501479cade955eb1963695"}],"stats":{"total":42,"additions":38,"deletions":4},"files":[{"sha":"eb4a88461de39d531ad2e6455f10b0d18569e346","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c7a0c1c43e7beea9969b149cd796a712a0c6330d/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c7a0c1c43e7beea9969b149cd796a712a0c6330d/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c7a0c1c43e7beea9969b149cd796a712a0c6330d","patch":"@@ -30,6 +30,8 @@ Release 4.2.3 - 2013-12-04\n \n         BOOKKEEPER-752: Deadlock on NIOServer shutdown (sijie via ivank)\n \n+        BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n+\n     IMPROVEMENT:\n \n         BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)"},{"sha":"44fee394f31b7a2d3b91b98f73f97cae38597555","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/c7a0c1c43e7beea9969b149cd796a712a0c6330d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/c7a0c1c43e7beea9969b149cd796a712a0c6330d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=c7a0c1c43e7beea9969b149cd796a712a0c6330d","patch":"@@ -262,13 +262,14 @@ public void safeRun() {\n                     prevLastEntryId = metadata.getLastEntryId();\n                     prevLength = metadata.getLength();\n \n+                    // error out pending adds first\n+                    errorOutPendingAdds(rc);\n+\n                     // synchronized on LedgerHandle.this to ensure that \n                     // lastAddPushed can not be updated after the metadata \n                     // is closed. \n                     metadata.setLength(length);\n-\n                     metadata.close(lastAddConfirmed);\n-                    errorOutPendingAdds(rc);\n                     lastAddPushed = lastAddConfirmed;\n                 }\n \n@@ -514,7 +515,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n                 public void safeRun() {\n                     ChannelBuffer toSend = macManager.computeDigestAndPackageForSending(\n                                                entryId, lastAddConfirmed, currentLength, data, offset, length);\n-                    op.initiate(toSend);\n+                    op.initiate(toSend, length);\n                 }\n             });\n         } catch (RuntimeException e) {\n@@ -645,6 +646,7 @@ void handleUnrecoverableErrorDuringAdd(int rc) {\n     void errorOutPendingAdds(int rc) {\n         PendingAddOp pendingAddOp;\n         while ((pendingAddOp = pendingAddOps.poll()) != null) {\n+            addToLength(-pendingAddOp.entryLength);\n             pendingAddOp.submitCallback(rc);\n         }\n     }"},{"sha":"de4452499a9a15830eb10e903d07d095ef3e3d7c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/c7a0c1c43e7beea9969b149cd796a712a0c6330d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/c7a0c1c43e7beea9969b149cd796a712a0c6330d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=c7a0c1c43e7beea9969b149cd796a712a0c6330d","patch":"@@ -43,6 +43,7 @@\n     AddCallback cb;\n     Object ctx;\n     long entryId;\n+    int entryLength;\n     Set<Integer> writeSet;\n \n     DistributionSchedule.AckSet ackSet;\n@@ -121,8 +122,9 @@ void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n         sendWriteRequest(bookieIndex);\n     }\n \n-    void initiate(ChannelBuffer toSend) {\n+    void initiate(ChannelBuffer toSend, int entryLength) {\n         this.toSend = toSend;\n+        this.entryLength = entryLength;\n         for (int bookieIndex : writeSet) {\n             sendWriteRequest(bookieIndex);\n         }"},{"sha":"85cd27169e98d933d7f392c3c803a689937eba28","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/c7a0c1c43e7beea9969b149cd796a712a0c6330d/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c7a0c1c43e7beea9969b149cd796a712a0c6330d/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=c7a0c1c43e7beea9969b149cd796a712a0c6330d","patch":"@@ -23,6 +23,7 @@\n import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n@@ -57,6 +58,33 @@ public LedgerCloseTest() {\n         baseConf.setGcWaitTime(999999);\n     }\n \n+    @Test(timeout = 60000)\n+    public void testLedgerCloseWithConsistentLength() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration();\n+        conf.setZkServers(zkUtil.getZooKeeperConnectString()).setReadTimeout(1);\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        LedgerHandle lh = bkc.createLedger(6, 3, DigestType.CRC32, new byte[] {});\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        stopBKCluster();\n+        final AtomicInteger i = new AtomicInteger(0xdeadbeef);\n+        AsyncCallback.AddCallback cb = new AsyncCallback.AddCallback() {\n+            @Override\n+            public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                i.set(rc);\n+                latch.countDown();\n+            }\n+        };\n+        lh.asyncAddEntry(\"Test Entry\".getBytes(), cb, null);\n+        latch.await();\n+        assertEquals(i.get(), BKException.Code.NotEnoughBookiesException);\n+        assertEquals(0, lh.getLength());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, lh.getLastAddConfirmed());\n+        LedgerHandle newLh = bkc.openLedger(lh.getId(), DigestType.CRC32, new byte[] {});\n+        assertEquals(0, newLh.getLength());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, newLh.getLastAddConfirmed());\n+    }\n+\n     @Test(timeout = 60000)\n     public void testLedgerCloseDuringUnrecoverableErrors() throws Exception {\n         int numEntries = 3;"}]}

