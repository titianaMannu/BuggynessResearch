{"sha":"c7c8af741a2f532b554dcdabf85237c23ea14aaa","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjN2M4YWY3NDFhMmY1MzJiNTU0ZGNkYWJmODUyMzdjMjNlYTE0YWFh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-01-17T15:52:16Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-01-17T15:52:16Z"},"message":"BOOKKEEPER-150: Entry is lost when recovering a ledger with not enough bookies. (Sijie Guo via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1232448 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8187c27471a8edbc2602f76a136e0c30fa79a5d2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8187c27471a8edbc2602f76a136e0c30fa79a5d2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c7c8af741a2f532b554dcdabf85237c23ea14aaa","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c7c8af741a2f532b554dcdabf85237c23ea14aaa","html_url":"https://github.com/apache/bookkeeper/commit/c7c8af741a2f532b554dcdabf85237c23ea14aaa","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c7c8af741a2f532b554dcdabf85237c23ea14aaa/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0d43f404ea145a35d46371967975f9590649a033","url":"https://api.github.com/repos/apache/bookkeeper/commits/0d43f404ea145a35d46371967975f9590649a033","html_url":"https://github.com/apache/bookkeeper/commit/0d43f404ea145a35d46371967975f9590649a033"}],"stats":{"total":110,"additions":81,"deletions":29},"files":[{"sha":"91b3aaf9f0d3fa662bf26565fd4f76c50ac05d3f","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c7c8af741a2f532b554dcdabf85237c23ea14aaa/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c7c8af741a2f532b554dcdabf85237c23ea14aaa/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c7c8af741a2f532b554dcdabf85237c23ea14aaa","patch":"@@ -20,6 +20,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-40: BookieClientTest fails intermittantly (fpj via ivank)\n \n+\tBOOKKEEPER-150: Entry is lost when recovering a ledger with not enough bookies. (Sijie Guo via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"547e2401b1a82ed304a848ddec84a34803ec928b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=c7c8af741a2f532b554dcdabf85237c23ea14aaa","patch":"@@ -525,6 +525,12 @@ public long readLastConfirmed()\n \n     // close the ledger and send fails to all the adds in the pipeline\n     void handleUnrecoverableErrorDuringAdd(int rc) {\n+        if (metadata.isInRecovery()) {\n+            // we should not close ledger if ledger is recovery mode\n+            // otherwise we may lose entry.\n+            errorOutPendingAdds(rc);\n+            return;\n+        }\n         asyncCloseInternal(NoopCloseCallback.instance, null, rc);\n     }\n "},{"sha":"b8a56d497b78b31dfec72fa7afc5b5b2a5fb271e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=c7c8af741a2f532b554dcdabf85237c23ea14aaa","patch":"@@ -93,6 +93,10 @@ boolean isClosed() {\n         return close != NOTCLOSED \n             && close != IN_RECOVERY;\n     }\n+\n+    boolean isInRecovery() {\n+        return IN_RECOVERY == close;\n+    }\n     \n     void markLedgerInRecovery() {\n         close = IN_RECOVERY;"},{"sha":"8526db50f0a4bbe08c936b317a0cfa4db08bbfe6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":0,"deletions":29,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=c7c8af741a2f532b554dcdabf85237c23ea14aaa","patch":"@@ -179,35 +179,6 @@ private void writeEntriestoLedgers(int numEntries, long startEntryId, List<Ledge\n         }\n     }\n \n-    /**\n-     * Helper method to startup a new bookie server with the indicated port\n-     * number\n-     *\n-     * @param port\n-     *            Port to start the new bookie server on\n-     * @throws IOException\n-     */\n-    private void startNewBookie(int port)\n-            throws IOException, InterruptedException, KeeperException {\n-        File f = File.createTempFile(\"bookie\", \"test\");\n-        tmpDirs.add(f);\n-        f.delete();\n-        f.mkdir();\n-\n-        ServerConfiguration conf = newServerConfiguration(port, HOSTPORT, f, new File[] { f });\n-\n-        BookieServer server = new BookieServer(conf);\n-        server.start();\n-        bs.add(server);\n-\n-        while(bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null) {\n-            Thread.sleep(500);\n-        }\n-\n-        bkc.readBookiesBlocking();\n-        LOG.info(\"New bookie on port \" + port + \" has been created.\");\n-    }\n-\n     /**\n      * Helper method to verify that we can read the recovered ledger entries.\n      *"},{"sha":"7403604c12cfe55ebf7e66492bf002127e0908b0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BaseTestCase.java?ref=c7c8af741a2f532b554dcdabf85237c23ea14aaa","patch":"@@ -23,6 +23,7 @@\n \n import java.io.IOException;\n import java.io.File;\n+import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -201,6 +202,35 @@ protected void restartBookies(ServerConfiguration newConf)\n         }\n     }\n \n+    /**\n+     * Helper method to startup a new bookie server with the indicated port\n+     * number\n+     *\n+     * @param port\n+     *            Port to start the new bookie server on\n+     * @throws IOException\n+     */\n+    protected void startNewBookie(int port)\n+            throws IOException, InterruptedException, KeeperException {\n+        File f = File.createTempFile(\"bookie\", \"test\");\n+        tmpDirs.add(f);\n+        f.delete();\n+        f.mkdir();\n+\n+        ServerConfiguration conf = newServerConfiguration(port, HOSTPORT, f, new File[] { f });\n+\n+        BookieServer server = new BookieServer(conf);\n+        server.start();\n+        bs.add(server);\n+\n+        while(bkc.getZkHandle().exists(\"/ledgers/available/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + port, false) == null) {\n+            Thread.sleep(500);\n+        }\n+\n+        bkc.readBookiesBlocking();\n+        LOG.info(\"New bookie on port \" + port + \" has been created.\");\n+    }\n+\n     @After\n     @Override\n     public void tearDown() throws Exception {"},{"sha":"77a2f6957746293e7e7438a0e9082f4e350b138d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c7c8af741a2f532b554dcdabf85237c23ea14aaa/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java?ref=c7c8af741a2f532b554dcdabf85237c23ea14aaa","patch":"@@ -111,4 +111,43 @@ public void testLedgerRecoveryWithWrongPassword() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testLedgerRecoveryWithNotEnoughBookies() throws Exception {\n+        int numEntries = 3;\n+\n+        // Create a ledger\n+        LedgerHandle beforelh = null;\n+        beforelh = bkc.createLedger(3, 3, digestType, \"\".getBytes());\n+\n+        String tmp = \"BookKeeper is cool!\";\n+        for (int i = 0; i < numEntries; i++) {\n+            beforelh.addEntry(tmp.getBytes());\n+        }\n+\n+        // shutdown first bookie server\n+        bs.get(0).shutdown();\n+        bs.remove(0);\n+\n+        /*\n+         * Try to open ledger.\n+         */\n+        try {\n+            bkc.openLedger(beforelh.getId(), digestType, \"\".getBytes());\n+            fail(\"should not reach here!\");\n+        } catch (Exception e) {\n+            // should thrown recovery exception\n+        }\n+\n+        // start a new bookie server\n+        int newBookiePort = initialPort + numBookies;\n+        startNewBookie(newBookiePort);\n+\n+        LedgerHandle afterlh = bkc.openLedger(beforelh.getId(), digestType, \"\".getBytes());\n+\n+        /*\n+         * Check if has recovered properly.\n+         */\n+        assertEquals(numEntries - 1, afterlh.getLastAddConfirmed());\n+    }\n+\n }"}]}

