{"sha":"c805430253c6e6bb4341ad51b406ceabeafcd4e8","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjODA1NDMwMjUzYzZlNmJiNDM0MWFkNTFiNDA2Y2VhYmVhZmNkNGU4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-29T12:07:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-29T12:07:13Z"},"message":"BOOKKEEPER-97: collect pub/sub/consume statistics on hub server (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1306798 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"691c1298cc367b504c03099f2d38fe45d21d820b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/691c1298cc367b504c03099f2d38fe45d21d820b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c805430253c6e6bb4341ad51b406ceabeafcd4e8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c805430253c6e6bb4341ad51b406ceabeafcd4e8","html_url":"https://github.com/apache/bookkeeper/commit/c805430253c6e6bb4341ad51b406ceabeafcd4e8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c805430253c6e6bb4341ad51b406ceabeafcd4e8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6d56d60831a63fe9520ce156686d0cb1142e44f5","url":"https://api.github.com/repos/apache/bookkeeper/commits/6d56d60831a63fe9520ce156686d0cb1142e44f5","html_url":"https://github.com/apache/bookkeeper/commit/6d56d60831a63fe9520ce156686d0cb1142e44f5"}],"stats":{"total":655,"additions":653,"deletions":2},"files":[{"sha":"77a548fd2a121f9c7b27dce4bf39acdbd7745018","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -108,6 +108,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-96: extends zookeeper JMX to monitor and manage hedwig server (sijie via ivank)\n \n+        BOOKKEEPER-97: collect pub/sub/consume statistics on hub server (sijie via ivank)\n+\n       bookkeeper-benchmark/\n \tBOOKKEEPER-158: Move latest benchmarking code into trunk (ivank via fpj)\n "},{"sha":"7cc950cf49035f5993cb70dc0790717ba0321572","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -41,6 +41,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.common.UnexpectedError;\n+import org.apache.hedwig.server.netty.ServerStats;\n import org.apache.hedwig.server.persistence.Factory;\n import org.apache.hedwig.server.persistence.MapMethods;\n import org.apache.hedwig.server.persistence.PersistenceManager;\n@@ -416,6 +417,8 @@ public void sendingFinished() {\n                 lastSeqIdCommunicatedExternally = lastLocalSeqIdDelivered;\n                 moveDeliveryPtrForward(this, prevId, lastLocalSeqIdDelivered);\n             }\n+            // increment deliveried message\n+            ServerStats.getInstance().incrementMessagesDelivered();\n             deliverNextMessage();\n         }\n "},{"sha":"4189eb66e11887c207a4b9b1ff30285f8f244ae9","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/BaseHandler.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -24,6 +24,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.netty.ServerStats;\n import org.apache.hedwig.server.topics.TopicManager;\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.HedwigSocketAddress;\n@@ -45,13 +46,15 @@ public void handleRequest(final PubSubRequest request, final Channel channel) {\n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n                 channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));\n+                ServerStats.getInstance().getOpStats(request.getType()).incrementFailedOps();\n             }\n \n             @Override\n             public void operationFinished(Object ctx, HedwigSocketAddress owner) {\n                 if (!owner.equals(cfg.getServerAddr())) {\n                     channel.write(PubSubResponseUtils.getResponseForException(\n                                       new ServerNotResponsibleForTopicException(owner.toString()), request.getTxnId()));\n+                    ServerStats.getInstance().incrementRequestsRedirect();\n                     return;\n                 }\n                 handleRequestAtOwner(request, channel);"},{"sha":"5042a37eea8cbba676750750cda1cdad2e62194e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/ConsumeHandler.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -21,9 +21,12 @@\n \n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.ConsumeRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.netty.ServerStats;\n import org.apache.hedwig.server.netty.UmbrellaHandler;\n+import org.apache.hedwig.server.netty.ServerStats.OpStats;\n import org.apache.hedwig.server.subscriptions.SubscriptionManager;\n import org.apache.hedwig.server.topics.TopicManager;\n import org.apache.hedwig.util.Callback;\n@@ -32,13 +35,17 @@\n \n     SubscriptionManager sm;\n     Callback<Void> noopCallback = new NoopCallback<Void>();\n+    final OpStats consumeStats = ServerStats.getInstance().getOpStats(OperationType.CONSUME);\n \n     class NoopCallback<T> implements Callback<T> {\n         @Override\n         public void operationFailed(Object ctx, PubSubException exception) {\n+            consumeStats.incrementFailedOps();\n         }\n \n         public void operationFinished(Object ctx, T resultOfOperation) {\n+            // we don't collect consume process time\n+            consumeStats.updateLatency(0);\n         };\n     }\n \n@@ -47,6 +54,7 @@ public void handleRequestAtOwner(PubSubRequest request, Channel channel) {\n         if (!request.hasConsumeRequest()) {\n             UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),\n                     \"Missing consume request data\");\n+            consumeStats.incrementFailedOps();\n             return;\n         }\n "},{"sha":"71c481ed34acbe7f27399dd8313ac305f8d62736","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerBean.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -0,0 +1,51 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hedwig.server.handlers;\n+\n+import java.util.Map;\n+\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n+import org.apache.hedwig.server.jmx.HedwigMBeanInfo;\n+\n+public class NettyHandlerBean implements NettyHandlerMXBean, HedwigMBeanInfo {\n+\n+    Map<OperationType, Handler> handlers;\n+    SubscribeHandler subHandler;\n+\n+    public NettyHandlerBean(Map<OperationType, Handler> handlers) {\n+        this.handlers = handlers;\n+        subHandler = (SubscribeHandler) handlers.get(OperationType.SUBSCRIBE);\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"NettyHandlers\";\n+    }\n+\n+    @Override\n+    public boolean isHidden() {\n+        return false;\n+    }\n+\n+    @Override\n+    public int getNumSubscriptionChannels() {\n+        return subHandler.sub2Channel.size();\n+    }\n+\n+}"},{"sha":"ab8af29648879b66d0bd2f939dfe02dface4a630","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerMXBean.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerMXBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerMXBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/NettyHandlerMXBean.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -0,0 +1,31 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hedwig.server.handlers;\n+\n+/**\n+ * Netty Handler MBean\n+ */\n+public interface NettyHandlerMXBean {\n+\n+    /**\n+     * @return number of subscription channels\n+     */\n+    public int getNumSubscriptionChannels();\n+\n+}"},{"sha":"3548b70d4d2471d1e0f53f1c8ac61eff8bcfa10f","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/PublishHandler.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -20,9 +20,12 @@\n import org.jboss.netty.channel.Channel;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.netty.ServerStats;\n+import org.apache.hedwig.server.netty.ServerStats.OpStats;\n import org.apache.hedwig.server.netty.UmbrellaHandler;\n import org.apache.hedwig.server.persistence.PersistRequest;\n import org.apache.hedwig.server.persistence.PersistenceManager;\n@@ -32,33 +35,39 @@\n public class PublishHandler extends BaseHandler {\n \n     private PersistenceManager persistenceMgr;\n+    private final OpStats pubStats;\n \n     public PublishHandler(TopicManager topicMgr, PersistenceManager persistenceMgr, ServerConfiguration cfg) {\n         super(topicMgr, cfg);\n         this.persistenceMgr = persistenceMgr;\n+        this.pubStats = ServerStats.getInstance().getOpStats(OperationType.PUBLISH);\n     }\n \n     @Override\n     public void handleRequestAtOwner(final PubSubRequest request, final Channel channel) {\n         if (!request.hasPublishRequest()) {\n             UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),\n                     \"Missing publish request data\");\n+            pubStats.incrementFailedOps();\n             return;\n         }\n \n         Message msgToSerialize = Message.newBuilder(request.getPublishRequest().getMsg()).setSrcRegion(\n                                      cfg.getMyRegionByteString()).build();\n \n+        final long requestTime = System.currentTimeMillis();\n         PersistRequest persistRequest = new PersistRequest(request.getTopic(), msgToSerialize,\n         new Callback<Long>() {\n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n                 channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));\n+                pubStats.incrementFailedOps();\n             }\n \n             @Override\n             public void operationFinished(Object ctx, Long resultOfOperation) {\n                 channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n+                pubStats.updateLatency(System.currentTimeMillis() - requestTime);\n             }\n         }, null);\n "},{"sha":"76e0c14a3867432768b352096a86d4291ae7b30b","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -29,13 +29,16 @@\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.delivery.ChannelEndPoint;\n import org.apache.hedwig.server.delivery.DeliveryManager;\n+import org.apache.hedwig.server.netty.ServerStats;\n+import org.apache.hedwig.server.netty.ServerStats.OpStats;\n import org.apache.hedwig.server.netty.UmbrellaHandler;\n import org.apache.hedwig.server.persistence.PersistenceManager;\n import org.apache.hedwig.server.subscriptions.SubscriptionManager;\n@@ -51,6 +54,8 @@\n     private SubscriptionManager subMgr;\n     ConcurrentHashMap<TopicSubscriber, Channel> sub2Channel;\n     ConcurrentHashMap<Channel, TopicSubscriber> channel2sub;\n+    // op stats\n+    private final OpStats subStats;\n \n     public SubscribeHandler(TopicManager topicMgr, DeliveryManager deliveryManager, PersistenceManager persistenceMgr,\n                             SubscriptionManager subMgr, ServerConfiguration cfg) {\n@@ -60,6 +65,7 @@ public SubscribeHandler(TopicManager topicMgr, DeliveryManager deliveryManager,\n         this.subMgr = subMgr;\n         sub2Channel = new ConcurrentHashMap<TopicSubscriber, Channel>();\n         channel2sub = new ConcurrentHashMap<Channel, TopicSubscriber>();\n+        subStats = ServerStats.getInstance().getOpStats(OperationType.SUBSCRIBE);\n     }\n \n     public void channelDisconnected(Channel channel) {\n@@ -80,6 +86,7 @@ public void handleRequestAtOwner(final PubSubRequest request, final Channel chan\n         if (!request.hasSubscribeRequest()) {\n             UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),\n                     \"Missing subscribe request data\");\n+            subStats.incrementFailedOps();\n             return;\n         }\n \n@@ -91,6 +98,8 @@ public void handleRequestAtOwner(final PubSubRequest request, final Channel chan\n         } catch (ServerNotResponsibleForTopicException e) {\n             channel.write(PubSubResponseUtils.getResponseForException(e, request.getTxnId())).addListener(\n                 ChannelFutureListener.CLOSE);\n+            subStats.incrementFailedOps();\n+            ServerStats.getInstance().incrementRequestsRedirect();\n             return;\n         }\n \n@@ -99,12 +108,14 @@ public void handleRequestAtOwner(final PubSubRequest request, final Channel chan\n \n         MessageSeqId lastSeqIdPublished = MessageSeqId.newBuilder(seqId).setLocalComponent(seqId.getLocalComponent()).build();\n \n+        final long requestTime = System.currentTimeMillis();\n         subMgr.serveSubscribeRequest(topic, subRequest, lastSeqIdPublished, new Callback<MessageSeqId>() {\n \n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n                 channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId())).addListener(\n                     ChannelFutureListener.CLOSE);\n+                subStats.incrementFailedOps();\n             }\n \n             @Override\n@@ -119,6 +130,7 @@ public void operationFinished(Object ctx, MessageSeqId resultOfOperation) {\n                         // channel got disconnected while we were processing the\n                         // subscribe request,\n                         // nothing much we can do in this case\n+                        subStats.incrementFailedOps();\n                         return;\n                     }\n \n@@ -128,6 +140,7 @@ public void operationFinished(Object ctx, MessageSeqId resultOfOperation) {\n                             \"subscription for this topic, subscriberId is already being served on a different channel\");\n                         channel.write(PubSubResponseUtils.getResponseForException(pse, request.getTxnId()))\n                         .addListener(ChannelFutureListener.CLOSE);\n+                        subStats.incrementFailedOps();\n                         return;\n                     } else {\n                         // channel2sub is just a cache, so we can add to it\n@@ -139,6 +152,7 @@ public void operationFinished(Object ctx, MessageSeqId resultOfOperation) {\n                 // otherwise the first message might go out before the response\n                 // to the subscribe\n                 channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n+                subStats.updateLatency(System.currentTimeMillis() - requestTime);\n \n                 // want to start 1 ahead of the consume ptr\n                 MessageSeqId seqIdToStartFrom = MessageSeqId.newBuilder(resultOfOperation).setLocalComponent("},{"sha":"1e679e174eef5f791bacd82479a5e7077b2d1f59","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -20,11 +20,14 @@\n import org.jboss.netty.channel.Channel;\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.UnsubscribeRequest;\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.delivery.DeliveryManager;\n+import org.apache.hedwig.server.netty.ServerStats;\n+import org.apache.hedwig.server.netty.ServerStats.OpStats;\n import org.apache.hedwig.server.netty.UmbrellaHandler;\n import org.apache.hedwig.server.subscriptions.SubscriptionManager;\n import org.apache.hedwig.server.topics.TopicManager;\n@@ -33,37 +36,43 @@\n public class UnsubscribeHandler extends BaseHandler {\n     SubscriptionManager subMgr;\n     DeliveryManager deliveryMgr;\n+    // op stats\n+    final OpStats unsubStats;\n \n     public UnsubscribeHandler(TopicManager tm, ServerConfiguration cfg, SubscriptionManager subMgr,\n                               DeliveryManager deliveryMgr) {\n         super(tm, cfg);\n         this.subMgr = subMgr;\n         this.deliveryMgr = deliveryMgr;\n+        unsubStats = ServerStats.getInstance().getOpStats(OperationType.UNSUBSCRIBE);\n     }\n \n     @Override\n     public void handleRequestAtOwner(final PubSubRequest request, final Channel channel) {\n         if (!request.hasUnsubscribeRequest()) {\n             UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),\n                     \"Missing unsubscribe request data\");\n+            unsubStats.incrementFailedOps();\n             return;\n         }\n \n         final UnsubscribeRequest unsubRequest = request.getUnsubscribeRequest();\n         final ByteString topic = request.getTopic();\n         final ByteString subscriberId = unsubRequest.getSubscriberId();\n \n+        final long requestTime = System.currentTimeMillis();\n         subMgr.unsubscribe(topic, subscriberId, new Callback<Void>() {\n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n                 channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));\n+                unsubStats.incrementFailedOps();\n             }\n \n             @Override\n             public void operationFinished(Object ctx, Void resultOfOperation) {\n                 deliveryMgr.stopServingSubscriber(topic, subscriberId);\n                 channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n-\n+                unsubStats.updateLatency(System.currentTimeMillis() - requestTime);\n             }\n         }, null);\n "},{"sha":"52089f540a7ee5d2386835b8271b465bc8a9bb44","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -58,9 +58,11 @@\n import org.apache.hedwig.server.delivery.FIFODeliveryManager;\n import org.apache.hedwig.server.handlers.ConsumeHandler;\n import org.apache.hedwig.server.handlers.Handler;\n+import org.apache.hedwig.server.handlers.NettyHandlerBean;\n import org.apache.hedwig.server.handlers.PublishHandler;\n import org.apache.hedwig.server.handlers.SubscribeHandler;\n import org.apache.hedwig.server.handlers.UnsubscribeHandler;\n+import org.apache.hedwig.server.jmx.HedwigMBeanRegistry;\n import org.apache.hedwig.server.persistence.BookkeeperPersistenceManager;\n import org.apache.hedwig.server.persistence.LocalDBPersistenceManager;\n import org.apache.hedwig.server.persistence.PersistenceManager;\n@@ -102,6 +104,10 @@\n     // we use this to prevent long stack chains from building up in callbacks\n     ScheduledExecutorService scheduler;\n \n+    // JMX Beans\n+    NettyHandlerBean jmxNettyBean;\n+    PubSubServerBean jmxServerBean;\n+\n     protected PersistenceManager instantiatePersistenceManager(TopicManager topicMgr) throws IOException,\n         InterruptedException {\n \n@@ -248,6 +254,51 @@ public void shutdown() {\n         serverChannelFactory.releaseExternalResources();\n         clientChannelFactory.releaseExternalResources();\n         scheduler.shutdown();\n+\n+        // unregister jmx\n+        unregisterJMX();\n+    }\n+\n+    protected void registerJMX(Map<OperationType, Handler> handlers) {\n+        try {\n+            jmxServerBean = new PubSubServerBean();\n+            HedwigMBeanRegistry.getInstance().register(jmxServerBean, null);\n+            try {\n+                jmxNettyBean = new NettyHandlerBean(handlers);\n+                HedwigMBeanRegistry.getInstance().register(jmxNettyBean, jmxServerBean);\n+            } catch (Exception e) {\n+                logger.warn(\"Failed to register with JMX\", e);\n+                jmxNettyBean = null;\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Failed to register with JMX\", e);\n+            jmxServerBean = null;\n+        }\n+        if (pm instanceof ReadAheadCache) {\n+            ((ReadAheadCache)pm).registerJMX(jmxServerBean);\n+        }\n+    }\n+\n+    protected void unregisterJMX() {\n+        if (pm != null && pm instanceof ReadAheadCache) {\n+            ((ReadAheadCache)pm).unregisterJMX();\n+        }\n+        try {\n+            if (jmxNettyBean != null) {\n+                HedwigMBeanRegistry.getInstance().unregister(jmxNettyBean);\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Failed to unregister with JMX\", e);\n+        }\n+        try {\n+            if (jmxServerBean != null) {\n+                HedwigMBeanRegistry.getInstance().unregister(jmxServerBean);\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Failed to unregister with JMX\", e);\n+        }\n+        jmxNettyBean = null;\n+        jmxServerBean = null;\n     }\n \n     /**\n@@ -312,6 +363,8 @@ public void run() {\n                     if (conf.isSSLEnabled()) {\n                         initializeNetty(new SslServerContextFactory(conf), handlers);\n                     }\n+                    // register jmx\n+                    registerJMX(handlers);\n                 } catch (Exception e) {\n                     ConcurrencyUtils.put(queue, Either.right(e));\n                     return;"},{"sha":"db9befc44481b328ca18781478b1029ee8217c77","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerBean.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerBean.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -0,0 +1,77 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hedwig.server.netty;\n+\n+import org.apache.hedwig.server.jmx.HedwigMBeanInfo;\n+import org.apache.hedwig.server.netty.ServerStats.OpStatData;\n+\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n+\n+/**\n+ * PubSub Server Bean\n+ */\n+public class PubSubServerBean implements PubSubServerMXBean, HedwigMBeanInfo {\n+\n+    @Override\n+    public String getName() {\n+        return \"PubSubServer\";\n+    }\n+\n+    @Override\n+    public boolean isHidden() {\n+        return false;\n+    }\n+\n+    @Override\n+    public OpStatData getPubStats() {\n+        return ServerStats.getInstance().getOpStats(OperationType.PUBLISH).toOpStatData();\n+    }\n+\n+    @Override\n+    public OpStatData getSubStats() {\n+        return ServerStats.getInstance().getOpStats(OperationType.SUBSCRIBE).toOpStatData();\n+    }\n+\n+    @Override\n+    public OpStatData getUnsubStats() {\n+        return ServerStats.getInstance().getOpStats(OperationType.UNSUBSCRIBE).toOpStatData();\n+    }\n+\n+    @Override\n+    public OpStatData getConsumeStats() {\n+        return ServerStats.getInstance().getOpStats(OperationType.CONSUME).toOpStatData();\n+    }\n+\n+    @Override\n+    public long getNumRequestsReceived() {\n+        return ServerStats.getInstance().getNumRequestsReceived();\n+    }\n+\n+    @Override\n+    public long getNumRequestsRedirect() {\n+        return ServerStats.getInstance().getNumRequestsRedirect();\n+    }\n+\n+    @Override\n+    public long getNumMessagesDelivered() {\n+        return ServerStats.getInstance().getNumMessagesDelivered();\n+    }\n+\n+\n+}"},{"sha":"15e860fb04812d5d290170eb638e306e5a032c8d","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerMXBean.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerMXBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerMXBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServerMXBean.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hedwig.server.netty;\n+\n+import org.apache.hedwig.server.netty.ServerStats.OpStatData;\n+\n+/**\n+ * PubSub Server MBean\n+ */\n+public interface PubSubServerMXBean {\n+\n+    /**\n+     * @return publish stats\n+     */\n+    public OpStatData getPubStats();\n+\n+    /**\n+     * @return subscription stats\n+     */\n+    public OpStatData getSubStats();\n+\n+    /**\n+     * @return unsub stats\n+     */\n+    public OpStatData getUnsubStats();\n+\n+    /**\n+     * @return consume stats\n+     */\n+    public OpStatData getConsumeStats();\n+\n+    /**\n+     * @return number of requests received\n+     */\n+    public long getNumRequestsReceived();\n+\n+    /**\n+     * @return number of requests redirect\n+     */\n+    public long getNumRequestsRedirect();\n+\n+    /**\n+     * @return number of messages delivered\n+     */\n+    public long getNumMessagesDelivered();\n+\n+}"},{"sha":"925e6b73628d376c2734d58a62063bc50293c819","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","status":"added","additions":190,"deletions":0,"changes":190,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/ServerStats.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -0,0 +1,190 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hedwig.server.netty;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import java.beans.ConstructorProperties;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n+\n+/**\n+ * Server Stats\n+ */\n+public class ServerStats {\n+    static ServerStats instance = new ServerStats();\n+\n+    /**\n+     * A read view of stats, also used in CompositeViewData to expose to JMX\n+     */\n+    public static class OpStatData {\n+        private final long maxLatency, minLatency;\n+        private final double avgLatency;\n+        private final long numSuccessOps, numFailedOps;\n+        private final String latencyHist;\n+\n+        @ConstructorProperties({\"maxLatency\", \"minLatency\", \"avgLatency\",\n+                                \"numSuccessOps\", \"numFailedOps\", \"latencyHist\"})\n+        public OpStatData(long maxLatency, long minLatency, double avgLatency,\n+                          long numSuccessOps, long numFailedOps, String latencyHist) {\n+            this.maxLatency = maxLatency;\n+            this.minLatency = minLatency == Long.MAX_VALUE ? 0 : minLatency;\n+            this.avgLatency = avgLatency;\n+            this.numSuccessOps = numSuccessOps;\n+            this.numFailedOps = numFailedOps;\n+            this.latencyHist = latencyHist;\n+        }\n+\n+        public long getMaxLatency() {\n+            return maxLatency;\n+        }\n+\n+        public long getMinLatency() {\n+            return minLatency;\n+        }\n+\n+        public double getAvgLatency() {\n+            return avgLatency;\n+        }\n+\n+        public long getNumSuccessOps() {\n+            return numSuccessOps;\n+        }\n+\n+        public long getNumFailedOps() {\n+            return numFailedOps;\n+        }\n+\n+        public String getLatencyHist() {\n+            return latencyHist;\n+        }\n+    }\n+\n+    /**\n+     * Operation Statistics\n+     */\n+    public static class OpStats {\n+        static final int NUM_BUCKETS = 3*9 + 2;\n+\n+        long maxLatency = 0;\n+        long minLatency = Long.MAX_VALUE;\n+        double totalLatency = 0.0f;\n+        long numSuccessOps = 0;\n+        long numFailedOps = 0;\n+        long[] latencyBuckets = new long[NUM_BUCKETS];\n+\n+        OpStats() {}\n+\n+        /**\n+         * Increment number of failed operations\n+         */\n+        synchronized public void incrementFailedOps() {\n+            ++numFailedOps;\n+        }\n+\n+        /**\n+         * Update Latency\n+         */\n+        synchronized public void updateLatency(long latency) {\n+            totalLatency += latency;\n+            ++numSuccessOps;\n+            if (latency < minLatency) {\n+                minLatency = latency;\n+            }\n+            if (latency > maxLatency) {\n+                maxLatency = latency;\n+            }\n+            int bucket;\n+            if (latency <= 100) { // less than 100ms\n+                bucket = (int)(latency / 10);\n+            } else if (latency <= 1000) { // 100ms ~ 1000ms\n+                bucket = 1 * 9 + (int)(latency / 100);\n+            } else if (latency <= 10000) { // 1s ~ 10s\n+                bucket = 2 * 9 + (int)(latency / 1000);\n+            } else { // more than 10s\n+                bucket = 3 * 9 + 1;\n+            }\n+            ++latencyBuckets[bucket];\n+        }\n+\n+        public OpStatData toOpStatData() {\n+            double avgLatency = numSuccessOps > 0 ? totalLatency / numSuccessOps : 0.0f;\n+            StringBuilder sb = new StringBuilder();\n+            for (int i=0; i<NUM_BUCKETS; i++) {\n+                sb.append(latencyBuckets[i]);\n+                if (i != NUM_BUCKETS - 1) {\n+                    sb.append(',');\n+                }\n+            }\n+\n+            return new OpStatData(maxLatency, minLatency, avgLatency, numSuccessOps, numFailedOps, sb.toString());\n+        }\n+\n+    }\n+\n+    public static ServerStats getInstance() {\n+        return instance;\n+    }\n+\n+    protected ServerStats() {\n+        stats = new HashMap<OperationType, OpStats>();\n+        for (OperationType type : OperationType.values()) {\n+            stats.put(type, new OpStats());\n+        }\n+    }\n+    Map<OperationType, OpStats> stats;\n+\n+\n+    AtomicLong numRequestsReceived = new AtomicLong(0);\n+    AtomicLong numRequestsRedirect = new AtomicLong(0);\n+    AtomicLong numMessagesDelivered = new AtomicLong(0);\n+\n+    /**\n+     * Stats of operations\n+     *\n+     * @param type\n+     *          Operation Type\n+     * @return op stats\n+     */\n+    public OpStats getOpStats(OperationType type) {\n+        return stats.get(type);\n+    }\n+\n+    public void incrementRequestsReceived() {\n+        numRequestsReceived.incrementAndGet();\n+    }\n+\n+    public void incrementRequestsRedirect() {\n+        numRequestsRedirect.incrementAndGet();\n+    }\n+\n+    public void incrementMessagesDelivered() {\n+        numMessagesDelivered.incrementAndGet();\n+    }\n+\n+    public long getNumRequestsReceived() {\n+        return numRequestsReceived.get();\n+    }\n+\n+    public long getNumRequestsRedirect() {\n+        return numRequestsRedirect.get();\n+    }\n+\n+    public long getNumMessagesDelivered() {\n+        return numMessagesDelivered.get();\n+    }\n+}"},{"sha":"44993225ca2e6d25b48f2c83f6c0c3b396aef0a7","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -154,6 +154,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex\n         }\n \n         handler.handleRequest(request, channel);\n+        ServerStats.getInstance().incrementRequestsReceived();\n     }\n \n }"},{"sha":"4df13681253271a117bef18a357331f119b8d4a7","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":29,"deletions":1,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -42,9 +42,13 @@\n import org.apache.hedwig.protoextensions.MessageIdUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.common.UnexpectedError;\n+import org.apache.hedwig.server.jmx.HedwigJMXService;\n+import org.apache.hedwig.server.jmx.HedwigMBeanInfo;\n+import org.apache.hedwig.server.jmx.HedwigMBeanRegistry;\n+import org.apache.hedwig.server.persistence.ReadAheadCacheBean;\n import org.apache.hedwig.util.Callback;\n \n-public class ReadAheadCache implements PersistenceManager, Runnable {\n+public class ReadAheadCache implements PersistenceManager, Runnable, HedwigJMXService {\n \n     static Logger logger = LoggerFactory.getLogger(ReadAheadCache.class);\n \n@@ -106,6 +110,9 @@\n     // when we want to stop the thread during a PubSubServer shutdown.\n     protected boolean keepRunning = true;\n \n+    // JMX Beans\n+    ReadAheadCacheBean jmxCacheBean = null;\n+\n     /**\n      * Constructor. Starts the cache maintainer thread\n      *\n@@ -713,4 +720,25 @@ public void performRequest() {\n         }\n     }\n \n+    @Override\n+    public void registerJMX(HedwigMBeanInfo parent) {\n+        try {\n+            jmxCacheBean = new ReadAheadCacheBean(this);\n+            HedwigMBeanRegistry.getInstance().register(jmxCacheBean, null);\n+        } catch (Exception e) {\n+            logger.warn(\"Failed to register readahead cache with JMX\", e);\n+            jmxCacheBean = null;\n+        }\n+    }\n+\n+    @Override\n+    public void unregisterJMX() {\n+        try {\n+            if (jmxCacheBean != null) {\n+                HedwigMBeanRegistry.getInstance().unregister(jmxCacheBean);\n+            }\n+        } catch (Exception e) {\n+            logger.warn(\"Failed to unregister readahead cache with JMX\", e);\n+        }\n+    }\n }"},{"sha":"1a4380ffe4bded4bb1f9d960cb0237840a931323","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheBean.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheBean.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hedwig.server.persistence;\n+\n+import org.apache.hedwig.server.jmx.HedwigMBeanInfo;\n+\n+/**\n+ * Read Ahead Cache Bean\n+ */\n+public class ReadAheadCacheBean implements ReadAheadCacheMXBean,\n+        HedwigMBeanInfo {\n+\n+    ReadAheadCache cache;\n+    public ReadAheadCacheBean(ReadAheadCache cache) {\n+        this.cache = cache;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return \"ReadAheadCache\";\n+    }\n+\n+    @Override\n+    public boolean isHidden() {\n+        return false;\n+    }\n+\n+    @Override\n+    public long getMaxCacheSize() {\n+        return cache.cfg.getMaximumCacheSize();\n+    }\n+\n+    @Override\n+    public long getPresentCacheSize() {\n+        return cache.presentCacheSize;\n+    }\n+\n+    @Override\n+    public int getNumCachedEntries() {\n+        return cache.cache.size();\n+    }\n+\n+    @Override\n+    public int getNumPendingCacheRequests() {\n+        return cache.requestQueue.size();\n+    }\n+\n+}"},{"sha":"eba77a074d349e27b186e47c6c0edc925980ecf4","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheMXBean.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheMXBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/c805430253c6e6bb4341ad51b406ceabeafcd4e8/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheMXBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCacheMXBean.java?ref=c805430253c6e6bb4341ad51b406ceabeafcd4e8","patch":"@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hedwig.server.persistence;\n+\n+/**\n+ * Read Ahead Cache MBean\n+ */\n+public interface ReadAheadCacheMXBean {\n+\n+    /**\n+     * @return max cache size\n+     */\n+    public long getMaxCacheSize();\n+\n+    /**\n+     * @return present cache size\n+     */\n+    public long getPresentCacheSize();\n+\n+    /**\n+     * @return number of cached entries\n+     */\n+    public int getNumCachedEntries();\n+\n+    /**\n+     * @return number of pending cache requests\n+     */\n+    public int getNumPendingCacheRequests();\n+}"}]}

