{"sha":"c898d53ab269fbd64cb00919808c7bb0c52c53a6","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjODk4ZDUzYWIyNjlmYmQ2NGNiMDA5MTk4MDhjN2JiMGM1MmM1M2E2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-10-27T13:41:19Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-10-27T13:41:19Z"},"message":"BOOKKEEPER-83: Added versioning and flags to the bookie protocol (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1189753 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46099bf70eed7bbbd7eda700f190f7d1c7b966a9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/46099bf70eed7bbbd7eda700f190f7d1c7b966a9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c898d53ab269fbd64cb00919808c7bb0c52c53a6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c898d53ab269fbd64cb00919808c7bb0c52c53a6","html_url":"https://github.com/apache/bookkeeper/commit/c898d53ab269fbd64cb00919808c7bb0c52c53a6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c898d53ab269fbd64cb00919808c7bb0c52c53a6/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d6465cad801b4ee89b77d1beec6acc371f8ddb6c","url":"https://api.github.com/repos/apache/bookkeeper/commits/d6465cad801b4ee89b77d1beec6acc371f8ddb6c","html_url":"https://github.com/apache/bookkeeper/commit/d6465cad801b4ee89b77d1beec6acc371f8ddb6c"}],"stats":{"total":343,"additions":272,"deletions":71},"files":[{"sha":"925caf1657dbc500ad127dd528f40bf7e4b5ee90","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c898d53ab269fbd64cb00919808c7bb0c52c53a6/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c898d53ab269fbd64cb00919808c7bb0c52c53a6/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c898d53ab269fbd64cb00919808c7bb0c52c53a6","patch":"@@ -52,6 +52,8 @@ BUGFIXES:\n  \n   BOOKKEEPER-94: Double callbacks in readLastConfirmedOp which fails readLastConfirmed operation even received enough valid responses. (Sijie Guo via ivank)\n \n+  BOOKKEEPER-83: Added versioning and flags to the bookie protocol (ivank)\n+\n  hedwig-server/\n \n   BOOKKEEPER-43: NullPointException when releasing topic (Sijie Guo via breed)"},{"sha":"d7c8f67db70388d9a955a390e5c0958c6463fc49","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","raw_url":"https://github.com/apache/bookkeeper/raw/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java?ref=c898d53ab269fbd64cb00919808c7bb0c52c53a6","patch":"@@ -74,6 +74,8 @@ public static BKException create(int code) {\n             return new BKIncorrectParameterException();\n         case Code.InterruptedException:\n             return new BKInterruptedException();\n+        case Code.ProtocolVersionException:\n+            return new BKProtocolVersionException();\n         default:\n             return new BKIllegalOpException();\n         }\n@@ -100,7 +102,7 @@ public static BKException create(int code) {\n         int NoSuchEntryException = -13;\n         int IncorrectParameterException = -14;\n         int InterruptedException = -15;\n-\n+        int ProtocolVersionException = -16;\n         int IllegalOpException = -100;\n     }\n \n@@ -146,6 +148,8 @@ public static String getMessage(int code) {\n             return \"Incorrect parameter input\";\n         case Code.InterruptedException:\n             return \"Interrupted while waiting for permit\";\n+        case Code.ProtocolVersionException:\n+            return \"Bookie protocol version on server is incompatible with client\";\n         default:\n             return \"Invalid operation\";\n         }\n@@ -205,6 +209,12 @@ public BKWriteException() {\n         }\n     }\n \n+    public static class BKProtocolVersionException extends BKException {\n+        public BKProtocolVersionException() {\n+            super(Code.ProtocolVersionException);\n+        }\n+    }\n+\n     public static class BKNoSuchLedgerExistsException extends BKException {\n         public BKNoSuchLedgerExistsException() {\n             super(Code.NoSuchLedgerExistsException);"},{"sha":"873dafe1bef7bb2a3c78949cfbd09d13652d1f29","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","status":"modified","additions":71,"deletions":3,"changes":74,"blob_url":"https://github.com/apache/bookkeeper/blob/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java?ref=c898d53ab269fbd64cb00919808c7bb0c52c53a6","patch":"@@ -28,13 +28,78 @@\n  *\n  */\n public interface BookieProtocol {\n+\n+    /**\n+     * Lowest protocol version which will work with the bookie.\n+     */\n+    public static final byte LOWEST_COMPAT_PROTOCOL_VERSION = 0;\n+\n+    /**\n+     * Current version of the protocol, which client will use. \n+     */\n+    public static final byte CURRENT_PROTOCOL_VERSION = 1;\n+\n+    /** \n+     * The first int of a packet is the header.\n+     * It contains the version, opCode and flags.\n+     * The initial versions of BK didn't have this structure\n+     * and just had an int representing the opCode as the \n+     * first int. This handles that case also. \n+     */\n+    static class PacketHeader {\n+        final byte version;\n+        final byte opCode;\n+        final short flags;\n+\n+        public PacketHeader(byte version, byte opCode, short flags) {\n+            this.version = version;\n+            this.opCode = opCode;\n+            this.flags = flags;\n+        }\n+        \n+        int toInt() {\n+            if (version == 0) {\n+                return (int)opCode;\n+            } else {\n+                return ((version & 0xFF) << 24) \n+                    | ((opCode & 0xFF) << 16)\n+                    | (flags & 0xFFFF);\n+            }\n+        }\n+\n+        static PacketHeader fromInt(int i) {\n+            byte version = (byte)(i >> 24); \n+            byte opCode = 0;\n+            short flags = 0;\n+            if (version == 0) {\n+                opCode = (byte)i;\n+            } else {\n+                opCode = (byte)((i >> 16) & 0xFF);\n+                flags = (short)(i & 0xFFFF);\n+            }\n+            return new PacketHeader(version, opCode, flags);\n+        }\n+\n+        byte getVersion() {\n+            return version;\n+        }\n+\n+        byte getOpCode() {\n+            return opCode;\n+        }\n+\n+        short getFlags() {\n+            return flags;\n+        }\n+    }\n+\n     /**\n      * The Add entry request payload will be a ledger entry exactly as it should\n      * be logged. The response payload will be a 4-byte integer that has the\n      * error code followed by the 8-byte ledger number and 8-byte entry number\n      * of the entry written.\n      */\n-    public static final int ADDENTRY = 1;\n+    public static final byte ADDENTRY = 1;\n     /**\n      * The Read entry request payload will be the ledger number and entry number\n      * to read. (The ledger number is an 8-byte integer and the entry number is\n@@ -44,7 +109,7 @@\n      * requested. (Note that the first sixteen bytes of the entry happen to be\n      * the ledger number and entry number as well.)\n      */\n-    public static final int READENTRY = 2;\n+    public static final byte READENTRY = 2;\n \n     /**\n      * The error code that indicates success\n@@ -71,5 +136,8 @@\n      * Unauthorized access to ledger\n      */\n     public static final int EUA = 102;\n-\n+    /**\n+     * The server version is incompatible with the client\n+     */\n+    public static final int EBADVERSION = 103;\n }"},{"sha":"eea81b9f5761e13daf3cf3c6dfdab45f78dcd846","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":45,"deletions":48,"changes":93,"blob_url":"https://github.com/apache/bookkeeper/blob/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=c898d53ab269fbd64cb00919808c7bb0c52c53a6","patch":"@@ -29,6 +29,7 @@\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n+import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n import org.apache.log4j.Logger;\n \n /**\n@@ -147,79 +148,66 @@ public static void main(String[] args) throws IOException, InterruptedException\n     }\n \n     public void processPacket(ByteBuffer packet, Cnxn src) {\n-        int type = packet.getInt();\n-        switch (type) {\n+        PacketHeader h = PacketHeader.fromInt(packet.getInt());\n+\n+        ByteBuffer bb = packet.duplicate();\n+        long ledgerId = bb.getLong();\n+        long entryId = bb.getLong();\n+        \n+        if (h.getVersion() < BookieProtocol.LOWEST_COMPAT_PROTOCOL_VERSION\n+            || h.getVersion() > BookieProtocol.CURRENT_PROTOCOL_VERSION) {\n+            LOG.error(\"Invalid protocol version, expected something between \"\n+                      + BookieProtocol.LOWEST_COMPAT_PROTOCOL_VERSION \n+                      + \" & \" + BookieProtocol.CURRENT_PROTOCOL_VERSION\n+                    + \". got \" + h.getVersion());\n+            src.sendResponse(buildResponse(BookieProtocol.EBADVERSION, \n+                                           h.getVersion(), h.getOpCode(), ledgerId, entryId));\n+            return;\n+        }\n+        \n+        switch (h.getOpCode()) {\n         case BookieProtocol.ADDENTRY:\n             try {\n                 byte[] masterKey = new byte[20];\n                 packet.get(masterKey, 0, 20);\n                 // LOG.debug(\"Master key: \" + new String(masterKey));\n                 bookie.addEntry(packet.slice(), this, src, masterKey);\n             } catch (IOException e) {\n-                ByteBuffer bb = packet.duplicate();\n-\n-                long ledgerId = bb.getLong();\n-                long entryId = bb.getLong();\n                 LOG.error(\"Error writing \" + entryId + \"@\" + ledgerId, e);\n-                ByteBuffer eio = ByteBuffer.allocate(8 + 16);\n-                eio.putInt(type);\n-                eio.putInt(BookieProtocol.EIO);\n-                eio.putLong(ledgerId);\n-                eio.putLong(entryId);\n-                eio.flip();\n-                src.sendResponse(new ByteBuffer[] { eio });\n+                src.sendResponse(buildResponse(BookieProtocol.EIO, h.getVersion(), h.getOpCode(), ledgerId, entryId));\n             } catch (BookieException e) {\n-                ByteBuffer bb = packet.duplicate();\n-                long ledgerId = bb.getLong();\n-                long entryId = bb.getLong();\n-\n                 LOG.error(\"Unauthorized access to ledger \" + ledgerId);\n-\n-                ByteBuffer eio = ByteBuffer.allocate(8 + 16);\n-                eio.putInt(type);\n-                eio.putInt(BookieProtocol.EUA);\n-                eio.putLong(ledgerId);\n-                eio.putLong(entryId);\n-                eio.flip();\n-                src.sendResponse(new ByteBuffer[] { eio });\n+                src.sendResponse(buildResponse(BookieProtocol.EUA, h.getVersion(), h.getOpCode(), ledgerId, entryId));\n             }\n             break;\n         case BookieProtocol.READENTRY:\n             ByteBuffer[] rsp = new ByteBuffer[2];\n-            ByteBuffer rc = ByteBuffer.allocate(8 + 8 + 8);\n-            rsp[0] = rc;\n-            rc.putInt(type);\n-\n-            long ledgerId = packet.getLong();\n-            long entryId = packet.getLong();\n             LOG.debug(\"Received new read request: \" + ledgerId + \", \" + entryId);\n+            int errorCode = BookieProtocol.EIO;\n             try {\n                 rsp[1] = bookie.readEntry(ledgerId, entryId);\n                 LOG.debug(\"##### Read entry ##### \" + rsp[1].remaining());\n-                rc.putInt(BookieProtocol.EOK);\n+                errorCode = BookieProtocol.EOK;\n             } catch (Bookie.NoLedgerException e) {\n                 if (LOG.isTraceEnabled()) {\n                     LOG.error(\"Error reading \" + entryId + \"@\" + ledgerId, e);\n                 }\n-                rc.putInt(BookieProtocol.ENOLEDGER);\n+                errorCode = BookieProtocol.ENOLEDGER;\n             } catch (Bookie.NoEntryException e) {\n                 if (LOG.isTraceEnabled()) {\n                     LOG.error(\"Error reading \" + entryId + \"@\" + ledgerId, e);\n                 }\n-                rc.putInt(BookieProtocol.ENOENTRY);\n+                errorCode = BookieProtocol.ENOENTRY;\n             } catch (IOException e) {\n                 if (LOG.isTraceEnabled()) {\n                     LOG.error(\"Error reading \" + entryId + \"@\" + ledgerId, e);\n                 }\n-                rc.putInt(BookieProtocol.EIO);\n+                errorCode = BookieProtocol.EIO;\n             }\n-            rc.putLong(ledgerId);\n-            rc.putLong(entryId);\n-            rc.flip();\n+            rsp[0] = buildResponse(errorCode, h.getVersion(), h.getOpCode(), ledgerId, entryId);\n+\n             if (LOG.isTraceEnabled()) {\n-                int rcCode = rc.getInt();\n-                rc.rewind();\n-                LOG.trace(\"Read entry rc = \" + rcCode + \" for \" + entryId + \"@\" + ledgerId);\n+                LOG.trace(\"Read entry rc = \" + errorCode + \" for \" + entryId + \"@\" + ledgerId);\n             }\n             if (rsp[1] == null) {\n                 // We haven't filled in entry data, so we have to send back\n@@ -232,19 +220,28 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n             LOG.debug(\"Sending response for: \" + entryId + \", \" + new String(rsp[1].array()));\n             src.sendResponse(rsp);\n             break;\n-        default:\n-            ByteBuffer badType = ByteBuffer.allocate(8);\n-            badType.putInt(type);\n-            badType.putInt(BookieProtocol.EBADREQ);\n-            badType.flip();\n-            src.sendResponse(new ByteBuffer[] { packet });\n+        default: \n+            src.sendResponse(buildResponse(BookieProtocol.EBADREQ, h.getVersion(), h.getOpCode(), ledgerId, entryId));\n         }\n     }\n+    \n+    private ByteBuffer buildResponse(int errorCode, byte version, byte opCode, long ledgerId, long entryId) {\n+        ByteBuffer rsp = ByteBuffer.allocate(24);\n+        rsp.putInt(new PacketHeader(version, \n+                                    opCode, (short)0).toInt());\n+        rsp.putInt(errorCode);\n+        rsp.putLong(ledgerId);\n+        rsp.putLong(entryId);\n+\n+        rsp.flip();\n+        return rsp;\n+    }\n \n     public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n         Cnxn src = (Cnxn) ctx;\n         ByteBuffer bb = ByteBuffer.allocate(24);\n-        bb.putInt(BookieProtocol.ADDENTRY);\n+        bb.putInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n+                                   BookieProtocol.ADDENTRY, (short)0).toInt());\n         bb.putInt(rc);\n         bb.putLong(ledgerId);\n         bb.putLong(entryId);"},{"sha":"e0743bb49685fd6d4e33f975757840701373bb78","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=c898d53ab269fbd64cb00919808c7bb0c52c53a6","patch":"@@ -461,7 +461,7 @@ private void sendBuffers(ByteBuffer bb[]) {\n             makeWritable(sk);\n         }\n \n-        synchronized public void sendResponse(ByteBuffer bb[]) {\n+        synchronized public void sendResponse(ByteBuffer... bb) {\n             if (closed) {\n                 return;\n             }"},{"sha":"2cd4de83a2c9f57690660face7e3f02b5dd0283d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":24,"deletions":13,"changes":37,"blob_url":"https://github.com/apache/bookkeeper/blob/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=c898d53ab269fbd64cb00919808c7bb0c52c53a6","patch":"@@ -30,6 +30,7 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n+import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.log4j.Logger;\n@@ -229,7 +230,8 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n \n         ChannelBuffer header = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n         header.writeInt(totalHeaderSize - 4 + entrySize);\n-        header.writeInt(BookieProtocol.ADDENTRY);\n+        header.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n+                                         BookieProtocol.ADDENTRY, (short)0).toInt());\n         header.writeBytes(masterKey);\n \n         ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n@@ -264,7 +266,8 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n \n         ChannelBuffer tmpEntry = channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n         tmpEntry.writeInt(totalHeaderSize - 4);\n-        tmpEntry.writeInt(BookieProtocol.READENTRY);\n+        tmpEntry.writeInt(new PacketHeader(BookieProtocol.CURRENT_PROTOCOL_VERSION, \n+                                           BookieProtocol.READENTRY, (short)0).toInt());\n         tmpEntry.writeLong(ledgerId);\n         tmpEntry.writeLong(entryId);\n \n@@ -396,7 +399,8 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n     public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {\n         Throwable t = e.getCause();\n         if (t instanceof CorruptedFrameException || t instanceof TooLongFrameException) {\n-            LOG.error(\"Corrupted fram recieved from bookie: \" + e.getChannel().getRemoteAddress());\n+            LOG.error(\"Corrupted fram received from bookie: \"\n+                      + e.getChannel().getRemoteAddress());\n             return;\n         }\n         if (t instanceof IOException) {\n@@ -423,9 +427,10 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex\n         final ChannelBuffer buffer = (ChannelBuffer) e.getMessage();\n         final int type, rc;\n         final long ledgerId, entryId;\n+        final PacketHeader header;\n \n         try {\n-            type = buffer.readInt();\n+            header = PacketHeader.fromInt(buffer.readInt());\n             rc = buffer.readInt();\n             ledgerId = buffer.readLong();\n             entryId = buffer.readLong();\n@@ -437,18 +442,18 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex\n         executor.submitOrdered(ledgerId, new SafeRunnable() {\n             @Override\n             public void safeRun() {\n-                switch (type) {\n+                switch (header.getOpCode()) {\n                 case BookieProtocol.ADDENTRY:\n                     handleAddResponse(ledgerId, entryId, rc);\n                     break;\n                 case BookieProtocol.READENTRY:\n                     handleReadResponse(ledgerId, entryId, rc, buffer);\n                     break;\n                 default:\n-                    LOG.error(\"Unexpected response, type: \" + type + \" recieved from bookie: \" + addr + \" , ignoring\");\n+                    LOG.error(\"Unexpected response, type: \" + header.getOpCode() \n+                              + \" received from bookie: \" + addr + \" , ignoring\");\n                 }\n             }\n-\n         });\n     }\n \n@@ -465,6 +470,8 @@ void handleAddResponse(long ledgerId, long entryId, int rc) {\n             LOG.error(\"Add for ledger: \" + ledgerId + \", entry: \" + entryId + \" failed on bookie: \" + addr\n                       + \" with code: \" + rc);\n             rc = BKException.Code.WriteException;\n+        } else if (rc == BookieProtocol.EBADVERSION) {\n+            rc = BKException.Code.ProtocolVersionException;\n         } else {\n             rc = BKException.Code.OK;\n         }\n@@ -496,6 +503,8 @@ void handleReadResponse(long ledgerId, long entryId, int rc, ChannelBuffer buffe\n             rc = BKException.Code.OK;\n         } else if (rc == BookieProtocol.ENOENTRY || rc == BookieProtocol.ENOLEDGER) {\n             rc = BKException.Code.NoSuchEntryException;\n+        } else if (rc == BookieProtocol.EBADVERSION) {\n+            rc = BKException.Code.ProtocolVersionException;\n         } else {\n             LOG.error(\"Read for ledger: \" + ledgerId + \", entry: \" + entryId + \" failed on bookie: \" + addr\n                       + \" with code: \" + rc);\n@@ -515,7 +524,7 @@ void handleReadResponse(long ledgerId, long entryId, int rc, ChannelBuffer buffe\n         }\n \n         if (readCompletion == null) {\n-            LOG.error(\"Unexpected read response recieved from bookie: \" + addr + \" for ledger: \" + ledgerId\n+            LOG.error(\"Unexpected read response received from bookie: \" + addr + \" for ledger: \" + ledgerId\n                       + \", entry: \" + entryId + \" , ignoring\");\n             return;\n         }\n@@ -527,8 +536,8 @@ void handleReadResponse(long ledgerId, long entryId, int rc, ChannelBuffer buffe\n      * Boiler-plate wrapper classes follow\n      *\n      */\n-\n-    private static class ReadCompletion {\n+    // visible for testing\n+    static class ReadCompletion {\n         final ReadEntryCallback cb;\n         final Object ctx;\n \n@@ -538,7 +547,8 @@ public ReadCompletion(ReadEntryCallback cb, Object ctx) {\n         }\n     }\n \n-    private static class AddCompletion {\n+    // visible for testing\n+    static class AddCompletion {\n         final WriteCallback cb;\n         //final long size;\n         final Object ctx;\n@@ -549,8 +559,9 @@ public AddCompletion(WriteCallback cb, long size, Object ctx) {\n             this.ctx = ctx;\n         }\n     }\n-\n-    private static class CompletionKey {\n+    \n+    // visable for testing\n+    static class CompletionKey {\n         long ledgerId;\n         long entryId;\n "},{"sha":"f6cd8c97dc877fefcab039a5e919c7c0563a764b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/apache/bookkeeper/blob/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","raw_url":"https://github.com/apache/bookkeeper/raw/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java?ref=c898d53ab269fbd64cb00919808c7bb0c52c53a6","patch":"@@ -0,0 +1,113 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.proto;\n+\n+import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n+import org.jboss.netty.buffer.ChannelBuffer;\n+\n+import org.apache.bookkeeper.client.BKException;\n+\n+import org.apache.bookkeeper.test.BaseTestCase;\n+import org.apache.bookkeeper.test.BookieClientTest;\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+import org.junit.Before;\n+import org.junit.After;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.net.InetSocketAddress;\n+import java.net.InetAddress;\n+\n+public class TestProtoVersions {\n+    private BookieClientTest base;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        base = new BookieClientTest();\n+        base.setUp();\n+    }\n+\n+    @After\n+    public void teardown() throws Exception {\n+        base.tearDown();\n+    }\n+\n+    private void testVersion(int version, int expectedresult) throws Exception {\n+        PerChannelBookieClient bc = new PerChannelBookieClient(base.executor, base.channelFactory, \n+                new InetSocketAddress(InetAddress.getLocalHost(), base.port), new AtomicLong(0));\n+        final AtomicInteger outerrc = new AtomicInteger(-1);\n+        final CountDownLatch connectLatch = new CountDownLatch(1);\n+        bc.connectIfNeededAndDoOp(new GenericCallback<Void>() {\n+                public void operationComplete(int rc, Void result) {\n+                    outerrc.set(rc);\n+                    connectLatch.countDown();\n+                }\n+            });\n+        connectLatch.await(5, TimeUnit.SECONDS);\n+        \n+        assertEquals(\"client not connected\", BKException.Code.OK, outerrc.get());\n+        outerrc.set(-1);\n+        final CountDownLatch readLatch = new CountDownLatch(1);\n+        ReadEntryCallback cb = new ReadEntryCallback() {\n+                public void readEntryComplete(int rc, long ledgerId, long entryId, ChannelBuffer buffer, Object ctx) {\n+                    outerrc.set(rc);\n+                    readLatch.countDown();\n+                }\n+            };\n+        bc.readCompletions.put(new PerChannelBookieClient.CompletionKey(1, 1), \n+                               new PerChannelBookieClient.ReadCompletion(cb, this));\n+        \n+        int totalHeaderSize = 4 // for the length of the packet\n+            + 4 // for request type\n+            + 8 // for ledgerId\n+            + 8; // for entryId\n+\n+        // This will need to updated if the protocol for read changes\n+        ChannelBuffer tmpEntry = bc.channel.getConfig().getBufferFactory().getBuffer(totalHeaderSize);\n+        tmpEntry.writeInt(totalHeaderSize - 4);\n+        tmpEntry.writeInt(new BookieProtocol.PacketHeader((byte)version, BookieProtocol.READENTRY, (short)0).toInt());\n+        tmpEntry.writeLong(1);\n+        tmpEntry.writeLong(1);\n+        \n+        \n+        bc.channel.write(tmpEntry).awaitUninterruptibly();\n+        readLatch.await(5, TimeUnit.SECONDS);\n+        assertEquals(\"Expected result differs\", expectedresult, outerrc.get());\n+        \n+        bc.close();\n+    }\n+\n+    @Test\n+    public void testVersions() throws Exception {\n+        testVersion(BookieProtocol.LOWEST_COMPAT_PROTOCOL_VERSION-1, BKException.Code.ProtocolVersionException);\n+        testVersion(BookieProtocol.LOWEST_COMPAT_PROTOCOL_VERSION, BKException.Code.NoSuchEntryException);\n+        testVersion(BookieProtocol.CURRENT_PROTOCOL_VERSION, BKException.Code.NoSuchEntryException);\n+        testVersion(BookieProtocol.CURRENT_PROTOCOL_VERSION+1, BKException.Code.ProtocolVersionException);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"97dc2ab325d41ec157158b99f2c145b9623bdbbc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c898d53ab269fbd64cb00919808c7bb0c52c53a6/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=c898d53ab269fbd64cb00919808c7bb0c52c53a6","patch":"@@ -46,12 +46,12 @@\n     static Logger LOG = Logger.getLogger(BookieClientTest.class);\n     BookieServer bs;\n     File tmpDir;\n-    int port = 13645;\n-    ClientSocketChannelFactory channelFactory;\n-    OrderedSafeExecutor executor;\n+    public int port = 13645;\n+    public ClientSocketChannelFactory channelFactory;\n+    public OrderedSafeExecutor executor;\n \n     @Override\n-    protected void setUp() throws Exception {\n+    public void setUp() throws Exception {\n         tmpDir = File.createTempFile(\"bookie\", \"test\");\n         tmpDir.delete();\n         tmpDir.mkdir();\n@@ -66,7 +66,7 @@ protected void setUp() throws Exception {\n     }\n \n     @Override\n-    protected void tearDown() throws Exception {\n+    public void tearDown() throws Exception {\n         bs.shutdown();\n         recursiveDelete(tmpDir);\n         channelFactory.releaseExternalResources();"}]}

