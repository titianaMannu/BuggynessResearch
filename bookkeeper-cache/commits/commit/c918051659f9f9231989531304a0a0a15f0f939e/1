{"sha":"c918051659f9f9231989531304a0a0a15f0f939e","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjOTE4MDUxNjU5ZjlmOTIzMTk4OTUzMTMwNGEwYTBhMTVmMGY5Mzll","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-17T14:32:48Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-09-17T14:32:48Z"},"message":"BOOKKEEPER-783: Avoid running out of fds in MutlipleThreadReadTest (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1625611 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"58919cc76ab9df32c27ec078a8be67460b0520ed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/58919cc76ab9df32c27ec078a8be67460b0520ed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c918051659f9f9231989531304a0a0a15f0f939e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c918051659f9f9231989531304a0a0a15f0f939e","html_url":"https://github.com/apache/bookkeeper/commit/c918051659f9f9231989531304a0a0a15f0f939e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c918051659f9f9231989531304a0a0a15f0f939e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"77e68b5b033f306f8575b66278e8765784394413","url":"https://api.github.com/repos/apache/bookkeeper/commits/77e68b5b033f306f8575b66278e8765784394413","html_url":"https://github.com/apache/bookkeeper/commit/77e68b5b033f306f8575b66278e8765784394413"}],"stats":{"total":52,"additions":14,"deletions":38},"files":[{"sha":"6865bb8fbbd784a250bded8a0119ae846648be1d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/c918051659f9f9231989531304a0a0a15f0f939e/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/c918051659f9f9231989531304a0a0a15f0f939e/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=c918051659f9f9231989531304a0a0a15f0f939e","patch":"@@ -228,6 +228,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-775: Improve MultipleThreadReadTest to reduce flakiness (sijie via fpj)\n \n+        BOOKKEEPER-783: Avoid running out of fds in MutlipleThreadReadTest (sijie via ivank)\n+\n       bookkeeper-benchmark:\n \n         BOOKKEEPER-768: fix typo 'seconds' to milliseconds in benchmark output (jialin via sijie)"},{"sha":"16ef0c52e55bad00f3a046a390ffa9b62c5b9f20","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","status":"modified","additions":12,"deletions":38,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/c918051659f9f9231989531304a0a0a15f0f939e/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/c918051659f9f9231989531304a0a0a15f0f939e/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultipleThreadReadTest.java?ref=c918051659f9f9231989531304a0a0a15f0f939e","patch":"@@ -33,7 +33,6 @@\n import org.apache.bookkeeper.client.BookKeeperTestClient;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.zookeeper.KeeperException;\n import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -46,7 +45,7 @@\n \n     BookKeeper.DigestType digestType;\n     byte [] ledgerPassword = \"aaa\".getBytes();\n-    private int entriesPerLedger = 1000;\n+    private int entriesPerLedger = 100;\n     final SyncObj mainSyncObj = new SyncObj();\n \n     class SyncObj {\n@@ -58,38 +57,18 @@ public SyncObj() {\n         }\n     }\n \n-    final List<BookKeeperTestClient> clients = new ArrayList<BookKeeperTestClient>();\n+    BookKeeperTestClient readBkc;\n \n     public MultipleThreadReadTest() {\n         super(6);\n         this.digestType = BookKeeper.DigestType.CRC32;\n         baseClientConf.setAddEntryTimeout(20);\n     }\n \n-    private void createClients(int numClients) {\n-        closeClientsAndClear();\n-        for (int i = 0; i < numClients; i++) {\n-            try {\n-                clients.add(new BookKeeperTestClient(baseClientConf));\n-            } catch (KeeperException e) {\n-                fail(\"Keeper exception while creating clients\");\n-            } catch (IOException e) {\n-                fail(\"IOException while creating clients\");\n-            } catch (InterruptedException e) {\n-                fail(\"Interrupted while creating clients\");\n-            }\n-        }\n-    }\n-\n-    private void closeClientsAndClear() {\n-        for (BookKeeperTestClient client : clients) {\n-            try {\n-                client.close();\n-            } catch (Exception e) {\n-                LOG.warn(\"Error closing client\");\n-            }\n-        }\n-        clients.clear();\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        readBkc = new BookKeeperTestClient(baseClientConf);\n     }\n \n     private Thread getWriterThread(final int tNo, final LedgerHandle lh, final AtomicBoolean resultHolder) {\n@@ -158,7 +137,7 @@ public void run() {\n                 long endEntryId;\n                 long eid = 0;\n                 while (startEntryId <= entriesPerLedger - 1) {\n-                    endEntryId = Math.min(startEntryId + 50 - 1, entriesPerLedger - 1);\n+                    endEntryId = Math.min(startEntryId + 10 - 1, entriesPerLedger - 1);\n                     final long numEntries = (endEntryId - startEntryId) + 1;\n                     boolean success = true;\n                     try {\n@@ -276,17 +255,12 @@ public void multiLedgerMultiThreadRead(final int numLedgers,\n             mainSyncObj.failed = false;\n             threadList.clear();\n \n-            // Create clients used for reading. Each client is responsible for a disjoint range of numLedgers\n-            // threads. Client X will be used by threads [numLedgers*X .. numLedgers*(X+1))\n-            closeClientsAndClear();\n-            createClients(numThreads / numLedgers);\n-\n             List<AtomicBoolean> readResults = new ArrayList<AtomicBoolean>();\n             for (int i = 0; i < numThreads; i++) {\n                 AtomicBoolean readResult = new AtomicBoolean(false);\n                 Thread t;\n-                threadList.add(t = getReaderThread(i, clients.get(i / numLedgers)\n-                        .openLedger(ledgerIds.get(i % numLedgers), digestType, ledgerPassword), i % numLedgers, readResult));\n+                threadList.add(t = getReaderThread(i, readBkc.openLedger(ledgerIds.get(i % numLedgers),\n+                        digestType, ledgerPassword), i % numLedgers, readResult));\n                 readResults.add(readResult);\n                 t.start();\n             }\n@@ -322,13 +296,13 @@ public void test10Ledgers200ThreadsRead() throws IOException {\n     }\n \n     @Test(timeout = 60000)\n-    public void test1Ledger50ThreadsRead() throws IOException {\n-        multiLedgerMultiThreadRead(1, 50);\n+    public void test1Ledger20ThreadsRead() throws IOException {\n+        multiLedgerMultiThreadRead(1, 20);\n     }\n \n     @Override\n     public void tearDown() throws Exception {\n-        closeClientsAndClear();\n+        readBkc.close();\n         super.tearDown();\n     }\n }"}]}

