{"sha":"ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjYTdlNWZkODA2NjI3NDVlN2Y2NGVlOGY3MGM2NmRjOTczNGY2ZTNh","commit":{"author":{"name":"Charan Reddy Guttapalem","email":"cguttapalem@salesforce.com","date":"2017-01-30T20:31:01Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-01-30T20:31:01Z"},"message":"BOOKKEEPER-907: EntryFormatter should be configured\n\nfor ReadLedgerEntriesCmd, EntryFormatter should\nbe configurable and HexDumpEntryFormatter should\nbe one of them.\n\nAuthor: Charan Reddy Guttapalem <cguttapalem@salesforce.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #101 from reddycharan/entryformatter","tree":{"sha":"d162bd4ff07971824f8f2a3e3b893f9f6288f063","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d162bd4ff07971824f8f2a3e3b893f9f6288f063"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a","html_url":"https://github.com/apache/bookkeeper/commit/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a/comments","author":{"login":"reddycharan","id":13989266,"node_id":"MDQ6VXNlcjEzOTg5MjY2","avatar_url":"https://avatars.githubusercontent.com/u/13989266?v=4","gravatar_id":"","url":"https://api.github.com/users/reddycharan","html_url":"https://github.com/reddycharan","followers_url":"https://api.github.com/users/reddycharan/followers","following_url":"https://api.github.com/users/reddycharan/following{/other_user}","gists_url":"https://api.github.com/users/reddycharan/gists{/gist_id}","starred_url":"https://api.github.com/users/reddycharan/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/reddycharan/subscriptions","organizations_url":"https://api.github.com/users/reddycharan/orgs","repos_url":"https://api.github.com/users/reddycharan/repos","events_url":"https://api.github.com/users/reddycharan/events{/privacy}","received_events_url":"https://api.github.com/users/reddycharan/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"43971c3b9e4a9ac37ee07b398ed5506e040f9310","url":"https://api.github.com/repos/apache/bookkeeper/commits/43971c3b9e4a9ac37ee07b398ed5506e040f9310","html_url":"https://github.com/apache/bookkeeper/commit/43971c3b9e4a9ac37ee07b398ed5506e040f9310"}],"stats":{"total":79,"additions":73,"deletions":6},"files":[{"sha":"10920016eefd4bad60f9e1e6d1131ce53817b108","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":20,"deletions":6,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a","patch":"@@ -465,22 +465,17 @@ int runCmd(CommandLine cmdLine) throws Exception {\n             conf.addConfiguration(bkConf);\n \n             BookKeeperAdmin bk = null;\n-            ByteArrayOutputStream out = new ByteArrayOutputStream();\n             try {\n                 bk = new BookKeeperAdmin(conf);\n                 Iterator<LedgerEntry> entries = bk.readEntries(ledgerId, firstEntry, lastEntry).iterator();\n                 while (entries.hasNext()) {\n                     LedgerEntry entry = entries.next();\n-                    HexDump.dump(entry.getEntry(), 0, out, 0);\n-                    System.out.println(\n-                            \"Entry Id: \" + entry.getEntryId() + \", Data: \" + new String(out.toByteArray(), UTF_8));\n-                    out.reset();\n+                    formatEntry(entry, true);\n                 }\n             } catch (Exception e) {\n                 LOG.error(\"Error reading entries from ledger {}\", ledgerId, e.getCause());\n                 return -1;\n             } finally {\n-                out.close();\n                 if (bk != null) {\n                     bk.close();\n                 }\n@@ -2192,6 +2187,25 @@ protected void printLastLogMark() throws IOException {\n                 + lastLogMark.getLogFileOffset());\n     }\n \n+    /**\n+     * Format the entry into a readable format.\n+     * \n+     * @param entry \n+     *          ledgerentry to print\n+     * @param printMsg \n+     *          Whether printing the message body\n+     */\n+    private void formatEntry(LedgerEntry entry, boolean printMsg) {\n+        long ledgerId = entry.getLedgerId();\n+        long entryId = entry.getEntryId();\n+        long entrySize = entry.getLength();\n+        System.out\n+                .println(\"--------- Lid=\" + ledgerId + \", Eid=\" + entryId + \", EntrySize=\" + entrySize + \" ---------\");\n+        if (printMsg) {\n+            formatter.formatEntry(entry.getEntry());\n+        }\n+    }\n+    \n     /**\n      * Format the message into a readable format.\n      *"},{"sha":"e51e2a8c817cd5a0f2f2f01d898655f305c1fcd1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HexDumpEntryFormatter.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/apache/bookkeeper/blob/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HexDumpEntryFormatter.java","raw_url":"https://github.com/apache/bookkeeper/raw/ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HexDumpEntryFormatter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HexDumpEntryFormatter.java?ref=ca7e5fd80662745e7f64ee8f70c66dc9734f6e3a","patch":"@@ -0,0 +1,53 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.util;\n+\n+import java.io.IOException;\n+\n+import org.apache.commons.io.HexDump;\n+\n+public class HexDumpEntryFormatter extends EntryFormatter {\n+    @Override\n+    public void formatEntry(byte[] data) {\n+        try {\n+            HexDump.dump(data, 0, System.out, 0);\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            System.out.println(\"Warn: Index is outside the data array's bounds : \" + e.getMessage());\n+        } catch (IllegalArgumentException e) {\n+            System.out.println(\"Warn: The output stream is null : \" + e.getMessage());\n+        } catch (IOException e) {\n+            System.out.println(\"Warn: Something has gone wrong writing the data to stream : \" + e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void formatEntry(java.io.InputStream input) {\n+        try {\n+            byte[] data = new byte[input.available()];\n+            input.read(data, 0, data.length);\n+            formatEntry(data);\n+        } catch (IOException ie) {\n+            System.out.println(\"Warn: Unreadable entry : \" + ie.getMessage());\n+        }\n+    }\n+\n+};"}]}

