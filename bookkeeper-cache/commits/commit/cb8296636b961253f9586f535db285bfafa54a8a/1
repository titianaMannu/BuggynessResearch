{"sha":"cb8296636b961253f9586f535db285bfafa54a8a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjYjgyOTY2MzZiOTYxMjUzZjk1ODZmNTM1ZGIyODViZmFmYTU0YThh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-08T18:24:51Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-03-08T18:24:51Z"},"message":"BOOKKEEPER-180: bookie server doesn't quit when running out of disk space (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1298492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b0aeeaa054afbb1064b1395386d79464f9884487","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b0aeeaa054afbb1064b1395386d79464f9884487"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cb8296636b961253f9586f535db285bfafa54a8a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cb8296636b961253f9586f535db285bfafa54a8a","html_url":"https://github.com/apache/bookkeeper/commit/cb8296636b961253f9586f535db285bfafa54a8a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cb8296636b961253f9586f535db285bfafa54a8a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e911559291b6ae9aa310a695fb4174796921ac81","url":"https://api.github.com/repos/apache/bookkeeper/commits/e911559291b6ae9aa310a695fb4174796921ac81","html_url":"https://github.com/apache/bookkeeper/commit/e911559291b6ae9aa310a695fb4174796921ac81"}],"stats":{"total":228,"additions":136,"deletions":92},"files":[{"sha":"de9ebc0266e979676eb9312f9c55558d92e985ee","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/cb8296636b961253f9586f535db285bfafa54a8a/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/cb8296636b961253f9586f535db285bfafa54a8a/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=cb8296636b961253f9586f535db285bfafa54a8a","patch":"@@ -50,6 +50,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-176: HierarchicalBookieFailureTest Hung (ivank via fpj)\n \n+        BOOKKEEPER-180: bookie server doesn't quit when running out of disk space (sijie via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"0d66b41cf0fe5205cc71d6048e75c6bc02fbe137","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":53,"deletions":32,"changes":85,"blob_url":"https://github.com/apache/bookkeeper/blob/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=cb8296636b961253f9586f535db285bfafa54a8a","patch":"@@ -67,6 +67,7 @@\n public class Bookie extends Thread {\n     HashMap<Long, LedgerDescriptor> ledgers = new HashMap<Long, LedgerDescriptor>();\n     static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n+\n     final static long MB = 1024 * 1024L;\n     // max journal file size\n     final long maxJournalSize;\n@@ -102,6 +103,10 @@\n \n     // Running flag\n     private volatile boolean running = false;\n+    // Flag identify whether it is in shutting down progress\n+    private volatile boolean shuttingdown = false;\n+\n+    private int exitCode = ExitCode.OK;\n \n     // jmx related beans\n     BookieBean jmxBookieBean;\n@@ -428,12 +433,7 @@ synchronized public void start() {\n             registerBookie(conf.getBookiePort());\n         } catch (IOException e) {\n             LOG.error(\"Couldn't register bookie with zookeeper, shutting down\", e);\n-            try {\n-                shutdown();\n-            } catch (InterruptedException ie) {\n-                LOG.error(\"Interrupted shutting down\", ie);\n-                System.exit(-1);\n-            }\n+            shutdown(ExitCode.ZK_REG_FAIL);\n         }\n     }\n \n@@ -594,11 +594,7 @@ public void process(WatchedEvent event) {\n                 Watcher.Event.KeeperState.Expired)) {\n                     LOG.error(\"ZK client connection to the ZK server has expired!\");\n                     isZkExpired = true;\n-                    try {\n-                        shutdown();\n-                    } catch (InterruptedException ie) {\n-                        System.exit(-1);\n-                    }\n+                    shutdown(ExitCode.ZK_EXPIRED);\n                 }\n             }\n         });\n@@ -928,31 +924,56 @@ public void run() {\n                 qe = null;\n             }\n         } catch (Exception e) {\n-            LOG.error(\"Bookie thread exiting\", e);\n+            // if the bookie thread quits due to shutting down, it is ok\n+            if (shuttingdown) {\n+                LOG.warn(\"Bookie thread exits when shutting down\", e);\n+            } else {\n+                // some error found in bookie thread and it quits\n+                // following add operations to it would hang unit client timeout\n+                // so we should let bookie server exists\n+                LOG.error(\"Exception occurred in bookie thread and it quits : \", e);\n+                shutdown(ExitCode.BOOKIE_EXCEPTION);\n+            }\n         }\n     }\n \n-    public synchronized void shutdown() throws InterruptedException {\n-        if (!running) { // avoid shutdown twice\n-            return;\n-        }\n-        // shut down gc thread, which depends on zookeeper client\n-        // also compaction will write entries again to entry log file\n-        gcThread.shutdown();\n-        // Shutdown the ZK client\n-        if(zk != null) zk.close();\n-        this.interrupt();\n-        this.join();\n-        syncThread.shutdown(); \n-        for(LedgerDescriptor d: ledgers.values()) {\n-            d.close();\n+    // provided a public shutdown method for other caller\n+    // to shut down bookie gracefully\n+    public int shutdown() {\n+        return shutdown(ExitCode.OK);\n+    }\n+\n+    // internal shutdown method to let shutdown bookie gracefully\n+    // when encountering exception\n+    synchronized int shutdown(int exitCode) {\n+        try {\n+            if (running) { // avoid shutdown twice\n+                // the exitCode only set when first shutdown usually due to exception found\n+                this.exitCode = exitCode;\n+                // mark bookie as in shutting down progress\n+                shuttingdown = true;\n+                // shut down gc thread, which depends on zookeeper client\n+                // also compaction will write entries again to entry log file\n+                gcThread.shutdown();\n+                // Shutdown the ZK client\n+                if(zk != null) zk.close();\n+                this.interrupt();\n+                this.join();\n+                syncThread.shutdown();\n+                for(LedgerDescriptor d: ledgers.values()) {\n+                    d.close();\n+                }\n+                // Shutdown the EntryLogger which has the GarbageCollector Thread running\n+                entryLogger.shutdown();\n+                // close Ledger Manager\n+                ledgerManager.close();\n+                // setting running to false here, so watch thread in bookie server know it only after bookie shut down\n+                running = false;\n+            }\n+        } catch (InterruptedException ie) {\n+            LOG.error(\"Interrupted during shutting down bookie : \", ie);\n         }\n-        // Shutdown the EntryLogger which has the GarbageCollector Thread running\n-        entryLogger.shutdown();\n-        // close Ledger Manager\n-        ledgerManager.close();\n-        // setting running to false here, so watch thread in bookie server know it only after bookie shut down\n-        running = false;\n+        return exitCode;\n     }\n \n     /** "},{"sha":"b683c7b546561ea4df979bca41835e0a8d384fa8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ExitCode.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ExitCode.java","raw_url":"https://github.com/apache/bookkeeper/raw/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ExitCode.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ExitCode.java?ref=cb8296636b961253f9586f535db285bfafa54a8a","patch":"@@ -0,0 +1,40 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+/**\n+ * Exit code used to exit bookie server\n+ */\n+public class ExitCode {\n+    // normal quit\n+    public final static int OK                  = 0;\n+    // invalid configuration\n+    public final static int INVALID_CONF        = 1;\n+    // exception running bookie server\n+    public final static int SERVER_EXCEPTION    = 2;\n+    // zookeeper is expired\n+    public final static int ZK_EXPIRED          = 3;\n+    // register bookie on zookeeper failed\n+    public final static int ZK_REG_FAIL         = 4;\n+    // exception running bookie\n+    public final static int BOOKIE_EXCEPTION    = 5;\n+}"},{"sha":"1a315e13e7d9db06a8453727cf6418df229ac681","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":27,"deletions":22,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=cb8296636b961253f9586f535db285bfafa54a8a","patch":"@@ -35,6 +35,7 @@\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.bookie.ExitCode;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n@@ -61,6 +62,8 @@\n     DeathWatcher deathWatcher;\n     static Logger LOG = LoggerFactory.getLogger(BookieServer.class);\n \n+    int exitCode = ExitCode.OK;\n+\n     // operation stats\n     final BKStats bkStats = BKStats.getInstance();\n     final boolean isStatsEnabled;\n@@ -94,12 +97,12 @@ public InetSocketAddress getLocalAddress() {\n         }\n     }\n \n-    public synchronized void shutdown() throws InterruptedException {\n+    public synchronized void shutdown() {\n         if (!running) {\n             return;\n         }\n         nioServerFactory.shutdown();\n-        bookie.shutdown();\n+        exitCode = bookie.shutdown();\n         running = false;\n \n         // unregister JMX\n@@ -156,6 +159,10 @@ public void join() throws InterruptedException {\n         nioServerFactory.join();\n     }\n \n+    public int getExitCode() {\n+        return exitCode;\n+    }\n+\n     /**\n      * A thread to watch whether bookie & nioserver is still alive\n      */\n@@ -176,11 +183,7 @@ public void run() {\n                     // do nothing\n                 }\n                 if (!isBookieRunning() || !isNioServerRunning()) {\n-                    try {\n-                        shutdown();\n-                    } catch (InterruptedException ie) {\n-                        System.exit(-1);\n-                    }\n+                    shutdown();\n                     break;\n                 }\n             }\n@@ -262,16 +265,15 @@ private static ServerConfiguration parseArgs(String[] args)\n      * @throws IOException\n      * @throws InterruptedException\n      */\n-    public static void main(String[] args) \n-            throws IOException, KeeperException, InterruptedException, BookieException {\n+    public static void main(String[] args) {\n         ServerConfiguration conf = null;\n         try {\n             conf = parseArgs(args);\n         } catch (IllegalArgumentException iae) {\n             LOG.error(\"Error parsing command line arguments : \", iae);\n             System.err.println(iae.getMessage());\n             printUsage();\n-            throw iae;\n+            System.exit(ExitCode.INVALID_CONF);\n         }\n \n         StringBuilder sb = new StringBuilder();\n@@ -288,21 +290,24 @@ public static void main(String[] args)\n                            conf.getBookiePort(), conf.getZkServers(),\n                            conf.getJournalDirName(), sb);\n         LOG.info(hello);\n-        final BookieServer bs = new BookieServer(conf);\n-        bs.start();\n-        Runtime.getRuntime().addShutdownHook(new Thread() {\n-            @Override\n-            public void run() {\n-                try {\n+        try {\n+            final BookieServer bs = new BookieServer(conf);\n+            bs.start();\n+            Runtime.getRuntime().addShutdownHook(new Thread() {\n+                @Override\n+                public void run() {\n                     bs.shutdown();\n                     LOG.info(\"Shut down bookie server successfully\");\n-                } catch (InterruptedException ie) {\n-                    LOG.warn(\"Exception when shutting down bookie server : \", ie);\n                 }\n-            }\n-        });\n-        LOG.info(\"Register shutdown hook successfully\");\n-        bs.join();\n+            });\n+            LOG.info(\"Register shutdown hook successfully\");\n+            bs.join();\n+\n+            System.exit(bs.getExitCode());\n+        } catch (Exception e) {\n+            LOG.error(\"Exception running bookie server : \", e);\n+            System.exit(ExitCode.SERVER_EXCEPTION);\n+        }\n     }\n \n     public void processPacket(ByteBuffer packet, Cnxn src) {"},{"sha":"00249e3016d545e821855e4d38c2f865b9ed30e1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCacheTest.java?ref=cb8296636b961253f9586f535db285bfafa54a8a","patch":"@@ -93,13 +93,9 @@ public void setUp() throws Exception {\n     @Override\n     @After\n     public void tearDown() {\n-        try {\n-            bookie.shutdown();\n-            recursiveDelete(txnDir);\n-            recursiveDelete(ledgerDir);\n-        } catch (InterruptedException e) {\n-            LOG.error(\"Error tearing down\", e);\n-        }\n+        bookie.shutdown();\n+        recursiveDelete(txnDir);\n+        recursiveDelete(ledgerDir);\n     }\n \n     /**"},{"sha":"e4477390dfcfa1a0f3b73bc2ae121beb7b1a7e70","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/cb8296636b961253f9586f535db285bfafa54a8a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=cb8296636b961253f9586f535db285bfafa54a8a","patch":"@@ -93,13 +93,9 @@ static void recursiveDelete(File f) {\n     @Override\n     @After\n     public void tearDown() {\n-        try {\n-            bookie.shutdown();\n-            recursiveDelete(txnDir);\n-            recursiveDelete(ledgerDir);\n-        } catch (InterruptedException e) {\n-            LOG.error(\"Error tearing down\", e);\n-        }\n+        bookie.shutdown();\n+        recursiveDelete(txnDir);\n+        recursiveDelete(ledgerDir);\n     }\n \n     byte zeros[] = new byte[16];"},{"sha":"afcf4e6bda4de2d4d9a7c2aa3b828cde630b2376","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":8,"deletions":24,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/cb8296636b961253f9586f535db285bfafa54a8a/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/cb8296636b961253f9586f535db285bfafa54a8a/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=cb8296636b961253f9586f535db285bfafa54a8a","patch":"@@ -121,48 +121,32 @@ public String getZkHostPort() {\n     @After\n     public void tearDown() throws Exception {\n         // Shutdown all of the bookie servers\n-        try {\n-            for (BookieServer bs : bookiesList) {\n-                bs.shutdown();\n-            }\n-        } catch (InterruptedException e) {\n-            LOG.error(\"Error tearing down\", e);\n+        for (BookieServer bs : bookiesList) {\n+            bs.shutdown();\n         }\n         // Close the BookKeeper client\n         bk.close();\n         super.tearDown();\n     }\n \n     public void stopAllBookieServers() throws Exception {\n-        try {\n-            for (BookieServer bs : bookiesList) {\n-                bs.shutdown();\n-            }\n-            bookiesList.clear();\n-        } catch (InterruptedException e) {\n-            LOG.error(\"Error stopping all bookie servers\", e);\n+        for (BookieServer bs : bookiesList) {\n+            bs.shutdown();\n         }\n+        bookiesList.clear();\n     }\n \n     public void startAllBookieServers() throws Exception {\n-        try {\n-            for (ServerConfiguration conf : bkConfsList) {\n-                bookiesList.add(startBookie(conf));\n-            }\n-        } catch (InterruptedException e) {\n-            LOG.error(\"Error starting all bookie servers\", e);\n+        for (ServerConfiguration conf : bkConfsList) {\n+            bookiesList.add(startBookie(conf));\n         }\n     }\n     \n     public void tearDownOneBookieServer() throws Exception {\n         Random r = new Random();\n         int bi = r.nextInt(bookiesList.size());\n         BookieServer bs = bookiesList.get(bi);\n-        try {\n-            bs.shutdown();\n-        } catch (InterruptedException e) {\n-            LOG.error(\"Error tearing down\", e);\n-        }\n+        bs.shutdown();\n         bookiesList.remove(bi);\n         bkConfsList.remove(bi);\n     }"}]}

