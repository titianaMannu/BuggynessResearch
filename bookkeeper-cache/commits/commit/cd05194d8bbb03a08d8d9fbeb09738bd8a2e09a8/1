{"sha":"cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZDA1MTk0ZDhiYmIwM2EwOGQ4ZDlmYmViMDk3MzhiZDhhMmUwOWE4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-29T09:08:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-29T09:08:54Z"},"message":"BOOKKEEPER-614: Generic stats interface, which multiple providers can be plugged into (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1536616 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4937ab50d9fb238a0c92ce8b1f1e603177c50cf1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4937ab50d9fb238a0c92ce8b1f1e603177c50cf1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","html_url":"https://github.com/apache/bookkeeper/commit/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2d0cd0d1b9d41f3b600f6dac308c6d34317ae676","url":"https://api.github.com/repos/apache/bookkeeper/commits/2d0cd0d1b9d41f3b600f6dac308c6d34317ae676","html_url":"https://github.com/apache/bookkeeper/commit/2d0cd0d1b9d41f3b600f6dac308c6d34317ae676"}],"stats":{"total":561,"additions":561,"deletions":0},"files":[{"sha":"1aa574b1b26f4651b4f8f0b339f873b29ec60460","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -50,6 +50,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-605: Use static Logger objects everywhere for bookkeeper (sijie via ivank)\n \n+      BOOKKEEPER-614: Generic stats interface, which multiple providers can be plugged into (sijie & ivank via ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-567: ReadOnlyBookieTest hangs on shutdown (sijie via ivank)"},{"sha":"59eea68bbc5ee696bfe978326187a881e4c297d6","filename":"bookkeeper-stats/pom.xml","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/pom.xml?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>bookkeeper</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.3.0-SNAPSHOT</version>\n+  </parent>\n+  <groupId>org.apache.bookkeeper.stats</groupId>\n+  <artifactId>bookkeeper-stats-api</artifactId>\n+  <name>Stats API for bookkeeper</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.libdir>${basedir}/lib</project.libdir>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>commons-configuration</groupId>\n+      <artifactId>commons-configuration</artifactId>\n+      <version>1.6</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <version>4.8.1</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+      <version>1.6.4</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-log4j12</artifactId>\n+      <version>1.6.4</version>\n+    </dependency>\n+  </dependencies>\n+</project>"},{"sha":"393c24cf6bde5966585f1d26ab52d87a7c9569e5","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Counter.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,50 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+/**\n+ * Simple stats that require only increment and decrement\n+ * functions on a Long. Metrics like the number of topics, persist queue size\n+ * etc. should use this.\n+ */\n+public interface Counter {\n+    /**\n+     * Clear this stat.\n+     */\n+    public void clear();\n+\n+    /**\n+     * Increment the value associated with this stat.\n+     */\n+    public void inc();\n+\n+    /**\n+     * Decrement the value associated with this stat.\n+     */\n+    public void dec();\n+\n+    /**\n+     * Add delta to the value associated with this stat.\n+     * @param delta\n+     */\n+    public void add(long delta);\n+\n+    /**\n+     * Get the value associated with this stat.\n+     */\n+    public Long get();\n+}"},{"sha":"326b7e1a37d9437f12404580cbcc97704c04304b","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Gauge.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,28 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+/**\n+ * A guage is a value that has only one value at a specific point in time.\n+ * An example is the number of elements in a queue. The value of T must be\n+ * some numeric type.\n+ */\n+public interface Gauge<T extends Number> {\n+    public T getDefaultValue();\n+    public T getSample();\n+}"},{"sha":"21a103d6db77a9021b44ca75d8c603fbd7a37f90","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,96 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+public class NullStatsLogger implements StatsLogger {\n+\n+    public static final NullStatsLogger INSTANCE = new NullStatsLogger();\n+\n+    static class NullOpStatsLogger implements OpStatsLogger {\n+        final OpStatsData nullOpStats = new OpStatsData(0, 0, 0, new long[6]);\n+\n+        @Override\n+        public void registerFailedEvent(long eventLatencyMillis) {\n+            // nop\n+        }\n+\n+        @Override\n+        public void registerSuccessfulEvent(long eventLatencyMillis) {\n+            // nop\n+        }\n+\n+        @Override\n+        public OpStatsData toOpStatsData() {\n+            return nullOpStats;\n+        }\n+\n+        @Override\n+        public void clear() {\n+            // nop\n+        }\n+    }\n+    static NullOpStatsLogger nullOpStatsLogger = new NullOpStatsLogger();\n+\n+    static class NullCounter implements Counter {\n+        @Override\n+        public void clear() {\n+            // nop\n+        }\n+\n+        @Override\n+        public void inc() {\n+            // nop\n+        }\n+\n+        @Override\n+        public void dec() {\n+            // nop\n+        }\n+\n+        @Override\n+        public void add(long delta) {\n+            // nop\n+        }\n+\n+        @Override\n+        public Long get() {\n+            return 0L;\n+        }\n+    }\n+    static NullCounter nullCounter = new NullCounter();\n+\n+    @Override\n+    public OpStatsLogger getOpStatsLogger(String name) {\n+        return nullOpStatsLogger;\n+    }\n+\n+    @Override\n+    public Counter getCounter(String name) {\n+        return nullCounter;\n+    }\n+\n+    @Override\n+    public <T extends Number> void registerGauge(String name, Gauge<T> gauge) {\n+        // nop\n+    }\n+\n+    @Override\n+    public StatsLogger scope(String name) {\n+        return this;\n+    }\n+\n+}"},{"sha":"c817e74600999120dd64041c0c7b99c8bdca92a7","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsProvider.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,40 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+public class NullStatsProvider implements StatsProvider {\n+\n+    final StatsLogger nullStatsLogger = new NullStatsLogger();\n+\n+    @Override\n+    public void start(Configuration conf) {\n+        // nop\n+    }\n+\n+    @Override\n+    public void stop() {\n+        // nop\n+    }\n+\n+    @Override\n+    public StatsLogger getStatsLogger(String scope) {\n+        return nullStatsLogger;\n+    }\n+\n+}"},{"sha":"1d3cd5faf10853a94ec7c562ce8d2a75d35b8d9f","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsData.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * This class provides a read view of operation specific stats.\n+ * We expose this to JMX.\n+ * We use primitives because the class has to conform to CompositeViewData.\n+ */\n+public class OpStatsData {\n+    private final long numSuccessfulEvents, numFailedEvents;\n+    // All latency values are in Milliseconds.\n+    private final double avgLatencyMillis;\n+    // 10.0 50.0, 90.0, 99.0, 99.9, 99.99 in that order.\n+    // TODO(Aniruddha): Figure out if we can use a Map\n+    private final long[] percentileLatenciesMillis;\n+    public OpStatsData (long numSuccessfulEvents, long numFailedEvents,\n+                        double avgLatencyMillis, long[] percentileLatenciesMillis) {\n+        this.numSuccessfulEvents = numSuccessfulEvents;\n+        this.numFailedEvents = numFailedEvents;\n+        this.avgLatencyMillis = avgLatencyMillis;\n+        this.percentileLatenciesMillis =\n+            Arrays.copyOf(percentileLatenciesMillis, percentileLatenciesMillis.length);\n+    }\n+\n+    public long getP10Latency() {\n+        return this.percentileLatenciesMillis[0];\n+    }\n+    public long getP50Latency() {\n+        return this.percentileLatenciesMillis[1];\n+    }\n+\n+    public long getP90Latency() {\n+        return this.percentileLatenciesMillis[2];\n+    }\n+\n+    public long getP99Latency() {\n+        return this.percentileLatenciesMillis[3];\n+    }\n+\n+    public long getP999Latency() {\n+        return this.percentileLatenciesMillis[4];\n+    }\n+\n+    public long getP9999Latency() {\n+        return this.percentileLatenciesMillis[5];\n+    }\n+\n+    public long getNumSuccessfulEvents() {\n+        return this.numSuccessfulEvents;\n+    }\n+\n+    public long getNumFailedEvents() {\n+        return this.numFailedEvents;\n+    }\n+\n+    public double getAvgLatencyMillis() {\n+        return this.avgLatencyMillis;\n+    }\n+}"},{"sha":"ca0477f980813672704f069ed87bf1bac733ddc1","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/OpStatsLogger.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,49 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+/**\n+ * This interface handles logging of statistics related to each operation (PUBLISH,\n+ * CONSUME etc.)\n+ */\n+public interface OpStatsLogger {\n+\n+    /**\n+     * Increment the failed op counter with the given eventLatencyMillis.\n+     * @param eventLatencyMillis The event latency in milliseconds.\n+     */\n+    public void registerFailedEvent(long eventLatencyMillis);\n+\n+    /**\n+     * An operation succeeded with the given eventLatencyMillis. Update\n+     * stats to reflect the same\n+     * @param eventLatencyMillis The event latency in milliseconds.\n+     */\n+    public void registerSuccessfulEvent(long eventLatencyMillis);\n+\n+    /**\n+     * @return Returns an OpStatsData object with necessary values. We need this function\n+     * to support JMX exports. This should be deprecated sometime in the near future.\n+     * populated.\n+     */\n+    public OpStatsData toOpStatsData();\n+\n+    /**\n+     * Clear stats for this operation.\n+     */\n+    public void clear();\n+}"},{"sha":"8f8ca45b07ea438a702344a602d27fd757863da7","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/Stats.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,63 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class Stats {\n+    static final Logger LOG = LoggerFactory.getLogger(Stats.class);\n+    public final static String STATS_PROVIDER_CLASS = \"statsProviderClass\";\n+\n+    static StatsProvider prov = new NullStatsProvider();\n+\n+    public static void loadStatsProvider(Configuration conf) {\n+        String className = conf.getString(STATS_PROVIDER_CLASS);\n+        if (className != null) {\n+            try {\n+                Class cls = Class.forName(className);\n+                @SuppressWarnings(\"unchecked\")\n+                Constructor<? extends StatsProvider> cons =\n+                    (Constructor<? extends StatsProvider>)cls.getDeclaredConstructor();\n+                prov = cons.newInstance();\n+            } catch (ClassNotFoundException cnfe) {\n+                LOG.error(\"Couldn't find configured class(\" + className +\")\", cnfe);\n+            } catch (NoSuchMethodException nsme) {\n+                LOG.error(\"Couldn't find default constructor for class (\" + className + \")\", nsme);\n+            } catch (InstantiationException ie) {\n+                LOG.error(\"Couldn't construct class (\" + className + \")\", ie);\n+            } catch (IllegalAccessException iae) {\n+                LOG.error(\"Couldn't construct class (\" + className + \"),\"\n+                          + \" Is the constructor private?\", iae);\n+            } catch (InvocationTargetException ite) {\n+                LOG.error(\"Constructor threw an exception. It should not have.\", ite);\n+            }\n+        }\n+    }\n+\n+    public static StatsProvider get() {\n+        return prov;\n+    }\n+}"},{"sha":"f7791e8b26ae7d2a577c7fad66e1ed0dd66491f0","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,55 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+/**\n+ * A simple interface that exposes just 2 useful methods. One to get the logger for an Op stat\n+ * and another to get the logger for a simple stat\n+ */\n+public interface StatsLogger {\n+    /**\n+     * @param name\n+     *          Stats Name\n+     * @return Get the logger for an OpStat described by the <i>name</i>.\n+     */\n+    public OpStatsLogger getOpStatsLogger(String name);\n+\n+    /**\n+     * @param name\n+     *          Stats Name\n+     * @return Get the logger for a simple stat described by the <i>name</i>\n+     */\n+    public Counter getCounter(String name);\n+\n+    /**\n+     * Register given <i>guage</i> as name <i>name</i>.\n+     *\n+     * @param name\n+     *          gauge name\n+     */\n+    public <T extends Number> void registerGauge(String name, Gauge<T> gauge);\n+\n+    /**\n+     * Provide the stats logger under scope <i>name</i>.\n+     *\n+     * @param name\n+     *          scope name.\n+     * @return stats logger under scope <i>name</i>.\n+     */\n+    public StatsLogger scope(String name);\n+\n+}"},{"sha":"b06e0a6ba9e3dc6b0cf99ff760a68b6a91c37361","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsProvider.java?ref=cd05194d8bbb03a08d8d9fbeb09738bd8a2e09a8","patch":"@@ -0,0 +1,45 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+/**\n+ * Provider to provide stats logger for different scopes.\n+ */\n+public interface StatsProvider {\n+    /**\n+     * Intialize the stats provider by loading the given configuration <i>conf</i>.\n+     *\n+     * @param conf\n+     *          Configuration to configure the stats provider.\n+     */\n+    public void start(Configuration conf);\n+\n+    /**\n+     * Close the stats provider\n+     */\n+    public void stop();\n+\n+    /**\n+     * Return the stats logger to a given <i>scope</i>\n+     * @param scope\n+     *          Scope for the given stats\n+     * @return stats logger for the given <i>scope</i>\n+     */\n+    public StatsLogger getStatsLogger(String scope);\n+}"}]}

