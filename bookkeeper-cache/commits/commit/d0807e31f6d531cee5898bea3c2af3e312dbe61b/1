{"sha":"d0807e31f6d531cee5898bea3c2af3e312dbe61b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMDgwN2UzMWY2ZDUzMWNlZTU4OThiZWEzYzJhZjNlMzEyZGJlNjFi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-22T11:04:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-22T11:04:47Z"},"message":"BOOKKEEPER-411: Add CloseSubscription Request for multiplexing support (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1400836 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0324dd3e9941f249fbb131821403b2787bf120ed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0324dd3e9941f249fbb131821403b2787bf120ed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d0807e31f6d531cee5898bea3c2af3e312dbe61b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d0807e31f6d531cee5898bea3c2af3e312dbe61b","html_url":"https://github.com/apache/bookkeeper/commit/d0807e31f6d531cee5898bea3c2af3e312dbe61b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d0807e31f6d531cee5898bea3c2af3e312dbe61b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"81aa20165c13aab333f9f0fd6b4e948de2ba1cef","url":"https://api.github.com/repos/apache/bookkeeper/commits/81aa20165c13aab333f9f0fd6b4e948de2ba1cef","html_url":"https://github.com/apache/bookkeeper/commit/81aa20165c13aab333f9f0fd6b4e948de2ba1cef"}],"stats":{"total":1238,"additions":1132,"deletions":106},"files":[{"sha":"478aa824c95e20cf4ca3a9e4e2a76a13a15fab1e","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -188,6 +188,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-435: Create SubscriptionChannelManager to manage all subscription channel (sijie via ivank)\n \n+        BOOKKEEPER-411: Add CloseSubscription Request for multiplexing support (sijie via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"102dfb509a450fef90116e97982960b1f7dda258","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.client.handlers;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.jboss.netty.channel.Channel;\n+\n+import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.apache.hedwig.client.data.PubSubData;\n+import org.apache.hedwig.client.data.TopicSubscriber;\n+import org.apache.hedwig.client.netty.HChannelManager;\n+import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n+import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n+import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n+import org.apache.hedwig.protocol.PubSubProtocol.ResponseBody;\n+import org.apache.hedwig.util.Callback;\n+import static org.apache.hedwig.util.VarArgs.va;\n+\n+public class CloseSubscriptionResponseHandler extends AbstractResponseHandler {\n+\n+    private static Logger logger =\n+        LoggerFactory.getLogger(CloseSubscriptionResponseHandler.class);\n+\n+    public CloseSubscriptionResponseHandler(ClientConfiguration cfg,\n+                                            HChannelManager channelManager) {\n+        super(cfg, channelManager);\n+    }\n+\n+    @Override\n+    public void handleResponse(final PubSubResponse response, final PubSubData pubSubData,\n+                               final Channel channel)\n+            throws Exception {\n+        switch (response.getStatusCode()) {\n+        case SUCCESS:\n+            pubSubData.getCallback().operationFinished(pubSubData.context, null);\n+            break;\n+        case CLIENT_NOT_SUBSCRIBED:\n+            // For closesubscription requests, the server says that the client was\n+            // never subscribed to the topic.\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ClientNotSubscribedException(\n+                                                    \"Client was never subscribed to topic: \" +\n+                                                        pubSubData.topic.toStringUtf8() + \", subscriberId: \" +\n+                                                        pubSubData.subscriberId.toStringUtf8()));\n+            break;\n+        case SERVICE_DOWN:\n+            // Response was service down failure so just invoke the callback's\n+            // operationFailed method.\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n+                                                    \"Server responded with a SERVICE_DOWN status\"));\n+            break;\n+        case NOT_RESPONSIBLE_FOR_TOPIC:\n+            // Redirect response so we'll need to repost the original\n+            // Unsubscribe Request\n+            handleRedirectResponse(response, pubSubData, channel);\n+            break;\n+        default:\n+            // Consider all other status codes as errors, operation failed\n+            // cases.\n+            logger.error(\"Unexpected error response from server for PubSubResponse: \" + response);\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n+                                                    \"Server responded with a status code of: \" +\n+                                                        response.getStatusCode()));\n+            break;\n+        }\n+    }\n+\n+}"},{"sha":"a6762c4d753b9d5103468368e9b8f9a9cdb92c36","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -23,6 +23,7 @@\n \n import org.apache.hedwig.client.data.PubSubData;\n import org.apache.hedwig.client.data.TopicSubscriber;\n+import org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.ConsumeRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n@@ -90,6 +91,11 @@ public static InetSocketAddress getHostFromChannel(Channel channel) {\n             // Set the UnsubscribeRequest into the outer PubSubRequest\n             pubsubRequestBuilder.setUnsubscribeRequest(buildUnsubscribeRequest(pubSubData));\n             break;\n+        case CLOSESUBSCRIPTION:\n+            // Set the CloseSubscriptionRequest into the outer PubSubRequest\n+            pubsubRequestBuilder.setCloseSubscriptionRequest(\n+                buildCloseSubscriptionRequest(pubSubData));\n+            break;\n         }\n \n         // Update the PubSubData with the txnId and the requestWriteTime\n@@ -133,6 +139,16 @@ public static InetSocketAddress getHostFromChannel(Channel channel) {\n         return unsubscribeRequestBuilder;\n     }\n \n+    // build closesubscription request\n+    private static CloseSubscriptionRequest.Builder\n+        buildCloseSubscriptionRequest(PubSubData pubSubData) {\n+        // Create the CloseSubscriptionRequest\n+        CloseSubscriptionRequest.Builder closeSubscriptionRequestBuilder =\n+            CloseSubscriptionRequest.newBuilder();\n+        closeSubscriptionRequestBuilder.setSubscriberId(pubSubData.subscriberId);\n+        return closeSubscriptionRequestBuilder;\n+    }\n+\n     /**\n      * Build consume request\n      *"},{"sha":"4c9230923ac19fdefac6d2997014fd2db960d725","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleSubscriptionChannelPipelineFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleSubscriptionChannelPipelineFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleSubscriptionChannelPipelineFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/simple/SimpleSubscriptionChannelPipelineFactory.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -22,6 +22,7 @@\n \n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.handlers.AbstractResponseHandler;\n+import org.apache.hedwig.client.handlers.CloseSubscriptionResponseHandler;\n import org.apache.hedwig.client.netty.impl.AbstractHChannelManager;\n import org.apache.hedwig.client.netty.impl.ClientChannelPipelineFactory;\n import org.apache.hedwig.client.netty.impl.HChannelHandler;\n@@ -40,6 +41,8 @@ public SimpleSubscriptionChannelPipelineFactory(ClientConfiguration cfg,\n             new HashMap<OperationType, AbstractResponseHandler>();\n         handlers.put(OperationType.SUBSCRIBE,\n                      new SimpleSubscribeResponseHandler(cfg, channelManager));\n+        handlers.put(OperationType.CLOSESUBSCRIPTION,\n+                     new CloseSubscriptionResponseHandler(cfg, channelManager));\n         return handlers;\n     }\n "},{"sha":"8d8f2ac7e28b3382619b30ec16a5f51d89c85ded","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","status":"modified","additions":607,"deletions":83,"changes":690,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -82,6 +82,7 @@ private ProtocolVersion(int index, int value) {\n     UNSUBSCRIBE(3, 3),\n     START_DELIVERY(4, 4),\n     STOP_DELIVERY(5, 5),\n+    CLOSESUBSCRIPTION(6, 6),\n     ;\n     \n     public static final int PUBLISH_VALUE = 0;\n@@ -90,6 +91,7 @@ private ProtocolVersion(int index, int value) {\n     public static final int UNSUBSCRIBE_VALUE = 3;\n     public static final int START_DELIVERY_VALUE = 4;\n     public static final int STOP_DELIVERY_VALUE = 5;\n+    public static final int CLOSESUBSCRIPTION_VALUE = 6;\n     \n     \n     public final int getNumber() { return value; }\n@@ -102,6 +104,7 @@ public static OperationType valueOf(int value) {\n         case 3: return UNSUBSCRIBE;\n         case 4: return START_DELIVERY;\n         case 5: return STOP_DELIVERY;\n+        case 6: return CLOSESUBSCRIPTION;\n         default: return null;\n       }\n     }\n@@ -132,7 +135,7 @@ public OperationType findValueByNumber(int number) {\n     }\n     \n     private static final OperationType[] VALUES = {\n-      PUBLISH, SUBSCRIBE, CONSUME, UNSUBSCRIBE, START_DELIVERY, STOP_DELIVERY, \n+      PUBLISH, SUBSCRIBE, CONSUME, UNSUBSCRIBE, START_DELIVERY, STOP_DELIVERY, CLOSESUBSCRIPTION, \n     };\n     \n     public static OperationType valueOf(\n@@ -3652,6 +3655,11 @@ public Builder removeRemoteComponents(int index) {\n     boolean hasStartDeliveryRequest();\n     org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest getStartDeliveryRequest();\n     org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequestOrBuilder getStartDeliveryRequestOrBuilder();\n+    \n+    // optional .Hedwig.CloseSubscriptionRequest closeSubscriptionRequest = 58;\n+    boolean hasCloseSubscriptionRequest();\n+    org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest getCloseSubscriptionRequest();\n+    org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequestOrBuilder getCloseSubscriptionRequestOrBuilder();\n   }\n   public static final class PubSubRequest extends\n       com.google.protobuf.GeneratedMessage\n@@ -3824,6 +3832,19 @@ public boolean hasStartDeliveryRequest() {\n       return startDeliveryRequest_;\n     }\n     \n+    // optional .Hedwig.CloseSubscriptionRequest closeSubscriptionRequest = 58;\n+    public static final int CLOSESUBSCRIPTIONREQUEST_FIELD_NUMBER = 58;\n+    private org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest closeSubscriptionRequest_;\n+    public boolean hasCloseSubscriptionRequest() {\n+      return ((bitField0_ & 0x00000800) == 0x00000800);\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest getCloseSubscriptionRequest() {\n+      return closeSubscriptionRequest_;\n+    }\n+    public org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequestOrBuilder getCloseSubscriptionRequestOrBuilder() {\n+      return closeSubscriptionRequest_;\n+    }\n+    \n     private void initFields() {\n       protocolVersion_ = org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion.VERSION_ONE;\n       type_ = org.apache.hedwig.protocol.PubSubProtocol.OperationType.PUBLISH;\n@@ -3837,6 +3858,7 @@ private void initFields() {\n       unsubscribeRequest_ = org.apache.hedwig.protocol.PubSubProtocol.UnsubscribeRequest.getDefaultInstance();\n       stopDeliveryRequest_ = org.apache.hedwig.protocol.PubSubProtocol.StopDeliveryRequest.getDefaultInstance();\n       startDeliveryRequest_ = org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest.getDefaultInstance();\n+      closeSubscriptionRequest_ = org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.getDefaultInstance();\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -3895,6 +3917,12 @@ public final boolean isInitialized() {\n           return false;\n         }\n       }\n+      if (hasCloseSubscriptionRequest()) {\n+        if (!getCloseSubscriptionRequest().isInitialized()) {\n+          memoizedIsInitialized = 0;\n+          return false;\n+        }\n+      }\n       memoizedIsInitialized = 1;\n       return true;\n     }\n@@ -3938,6 +3966,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n       if (((bitField0_ & 0x00000400) == 0x00000400)) {\n         output.writeMessage(57, startDeliveryRequest_);\n       }\n+      if (((bitField0_ & 0x00000800) == 0x00000800)) {\n+        output.writeMessage(58, closeSubscriptionRequest_);\n+      }\n       getUnknownFields().writeTo(output);\n     }\n     \n@@ -4000,6 +4031,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeMessageSize(57, startDeliveryRequest_);\n       }\n+      if (((bitField0_ & 0x00000800) == 0x00000800)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeMessageSize(58, closeSubscriptionRequest_);\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -4122,6 +4157,7 @@ private void maybeForceBuilderInitialization() {\n           getUnsubscribeRequestFieldBuilder();\n           getStopDeliveryRequestFieldBuilder();\n           getStartDeliveryRequestFieldBuilder();\n+          getCloseSubscriptionRequestFieldBuilder();\n         }\n       }\n       private static Builder create() {\n@@ -4178,6 +4214,12 @@ public Builder clear() {\n           startDeliveryRequestBuilder_.clear();\n         }\n         bitField0_ = (bitField0_ & ~0x00000800);\n+        if (closeSubscriptionRequestBuilder_ == null) {\n+          closeSubscriptionRequest_ = org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.getDefaultInstance();\n+        } else {\n+          closeSubscriptionRequestBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00001000);\n         return this;\n       }\n       \n@@ -4289,6 +4331,14 @@ public Builder clone() {\n         } else {\n           result.startDeliveryRequest_ = startDeliveryRequestBuilder_.build();\n         }\n+        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {\n+          to_bitField0_ |= 0x00000800;\n+        }\n+        if (closeSubscriptionRequestBuilder_ == null) {\n+          result.closeSubscriptionRequest_ = closeSubscriptionRequest_;\n+        } else {\n+          result.closeSubscriptionRequest_ = closeSubscriptionRequestBuilder_.build();\n+        }\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -4348,6 +4398,9 @@ public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest\n         if (other.hasStartDeliveryRequest()) {\n           mergeStartDeliveryRequest(other.getStartDeliveryRequest());\n         }\n+        if (other.hasCloseSubscriptionRequest()) {\n+          mergeCloseSubscriptionRequest(other.getCloseSubscriptionRequest());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -4405,6 +4458,12 @@ public final boolean isInitialized() {\n             return false;\n           }\n         }\n+        if (hasCloseSubscriptionRequest()) {\n+          if (!getCloseSubscriptionRequest().isInitialized()) {\n+            \n+            return false;\n+          }\n+        }\n         return true;\n       }\n       \n@@ -4527,6 +4586,15 @@ public Builder mergeFrom(\n               setStartDeliveryRequest(subBuilder.buildPartial());\n               break;\n             }\n+            case 466: {\n+              org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.Builder subBuilder = org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.newBuilder();\n+              if (hasCloseSubscriptionRequest()) {\n+                subBuilder.mergeFrom(getCloseSubscriptionRequest());\n+              }\n+              input.readMessage(subBuilder, extensionRegistry);\n+              setCloseSubscriptionRequest(subBuilder.buildPartial());\n+              break;\n+            }\n           }\n         }\n       }\n@@ -5238,6 +5306,96 @@ public Builder clearStartDeliveryRequest() {\n         return startDeliveryRequestBuilder_;\n       }\n       \n+      // optional .Hedwig.CloseSubscriptionRequest closeSubscriptionRequest = 58;\n+      private org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest closeSubscriptionRequest_ = org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.getDefaultInstance();\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest, org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.Builder, org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequestOrBuilder> closeSubscriptionRequestBuilder_;\n+      public boolean hasCloseSubscriptionRequest() {\n+        return ((bitField0_ & 0x00001000) == 0x00001000);\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest getCloseSubscriptionRequest() {\n+        if (closeSubscriptionRequestBuilder_ == null) {\n+          return closeSubscriptionRequest_;\n+        } else {\n+          return closeSubscriptionRequestBuilder_.getMessage();\n+        }\n+      }\n+      public Builder setCloseSubscriptionRequest(org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest value) {\n+        if (closeSubscriptionRequestBuilder_ == null) {\n+          if (value == null) {\n+            throw new NullPointerException();\n+          }\n+          closeSubscriptionRequest_ = value;\n+          onChanged();\n+        } else {\n+          closeSubscriptionRequestBuilder_.setMessage(value);\n+        }\n+        bitField0_ |= 0x00001000;\n+        return this;\n+      }\n+      public Builder setCloseSubscriptionRequest(\n+          org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.Builder builderForValue) {\n+        if (closeSubscriptionRequestBuilder_ == null) {\n+          closeSubscriptionRequest_ = builderForValue.build();\n+          onChanged();\n+        } else {\n+          closeSubscriptionRequestBuilder_.setMessage(builderForValue.build());\n+        }\n+        bitField0_ |= 0x00001000;\n+        return this;\n+      }\n+      public Builder mergeCloseSubscriptionRequest(org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest value) {\n+        if (closeSubscriptionRequestBuilder_ == null) {\n+          if (((bitField0_ & 0x00001000) == 0x00001000) &&\n+              closeSubscriptionRequest_ != org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.getDefaultInstance()) {\n+            closeSubscriptionRequest_ =\n+              org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.newBuilder(closeSubscriptionRequest_).mergeFrom(value).buildPartial();\n+          } else {\n+            closeSubscriptionRequest_ = value;\n+          }\n+          onChanged();\n+        } else {\n+          closeSubscriptionRequestBuilder_.mergeFrom(value);\n+        }\n+        bitField0_ |= 0x00001000;\n+        return this;\n+      }\n+      public Builder clearCloseSubscriptionRequest() {\n+        if (closeSubscriptionRequestBuilder_ == null) {\n+          closeSubscriptionRequest_ = org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.getDefaultInstance();\n+          onChanged();\n+        } else {\n+          closeSubscriptionRequestBuilder_.clear();\n+        }\n+        bitField0_ = (bitField0_ & ~0x00001000);\n+        return this;\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.Builder getCloseSubscriptionRequestBuilder() {\n+        bitField0_ |= 0x00001000;\n+        onChanged();\n+        return getCloseSubscriptionRequestFieldBuilder().getBuilder();\n+      }\n+      public org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequestOrBuilder getCloseSubscriptionRequestOrBuilder() {\n+        if (closeSubscriptionRequestBuilder_ != null) {\n+          return closeSubscriptionRequestBuilder_.getMessageOrBuilder();\n+        } else {\n+          return closeSubscriptionRequest_;\n+        }\n+      }\n+      private com.google.protobuf.SingleFieldBuilder<\n+          org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest, org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.Builder, org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequestOrBuilder> \n+          getCloseSubscriptionRequestFieldBuilder() {\n+        if (closeSubscriptionRequestBuilder_ == null) {\n+          closeSubscriptionRequestBuilder_ = new com.google.protobuf.SingleFieldBuilder<\n+              org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest, org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.Builder, org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequestOrBuilder>(\n+                  closeSubscriptionRequest_,\n+                  getParentForChildren(),\n+                  isClean());\n+          closeSubscriptionRequest_ = null;\n+        }\n+        return closeSubscriptionRequestBuilder_;\n+      }\n+      \n       // @@protoc_insertion_point(builder_scope:Hedwig.PubSubRequest)\n     }\n     \n@@ -9489,6 +9647,355 @@ public Builder clearSubscriberId() {\n     // @@protoc_insertion_point(class_scope:Hedwig.StartDeliveryRequest)\n   }\n   \n+  public interface CloseSubscriptionRequestOrBuilder\n+      extends com.google.protobuf.MessageOrBuilder {\n+    \n+    // required bytes subscriberId = 2;\n+    boolean hasSubscriberId();\n+    com.google.protobuf.ByteString getSubscriberId();\n+  }\n+  public static final class CloseSubscriptionRequest extends\n+      com.google.protobuf.GeneratedMessage\n+      implements CloseSubscriptionRequestOrBuilder {\n+    // Use CloseSubscriptionRequest.newBuilder() to construct.\n+    private CloseSubscriptionRequest(Builder builder) {\n+      super(builder);\n+    }\n+    private CloseSubscriptionRequest(boolean noInit) {}\n+    \n+    private static final CloseSubscriptionRequest defaultInstance;\n+    public static CloseSubscriptionRequest getDefaultInstance() {\n+      return defaultInstance;\n+    }\n+    \n+    public CloseSubscriptionRequest getDefaultInstanceForType() {\n+      return defaultInstance;\n+    }\n+    \n+    public static final com.google.protobuf.Descriptors.Descriptor\n+        getDescriptor() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_CloseSubscriptionRequest_descriptor;\n+    }\n+    \n+    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+        internalGetFieldAccessorTable() {\n+      return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_CloseSubscriptionRequest_fieldAccessorTable;\n+    }\n+    \n+    private int bitField0_;\n+    // required bytes subscriberId = 2;\n+    public static final int SUBSCRIBERID_FIELD_NUMBER = 2;\n+    private com.google.protobuf.ByteString subscriberId_;\n+    public boolean hasSubscriberId() {\n+      return ((bitField0_ & 0x00000001) == 0x00000001);\n+    }\n+    public com.google.protobuf.ByteString getSubscriberId() {\n+      return subscriberId_;\n+    }\n+    \n+    private void initFields() {\n+      subscriberId_ = com.google.protobuf.ByteString.EMPTY;\n+    }\n+    private byte memoizedIsInitialized = -1;\n+    public final boolean isInitialized() {\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      if (!hasSubscriberId()) {\n+        memoizedIsInitialized = 0;\n+        return false;\n+      }\n+      memoizedIsInitialized = 1;\n+      return true;\n+    }\n+    \n+    public void writeTo(com.google.protobuf.CodedOutputStream output)\n+                        throws java.io.IOException {\n+      getSerializedSize();\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        output.writeBytes(2, subscriberId_);\n+      }\n+      getUnknownFields().writeTo(output);\n+    }\n+    \n+    private int memoizedSerializedSize = -1;\n+    public int getSerializedSize() {\n+      int size = memoizedSerializedSize;\n+      if (size != -1) return size;\n+    \n+      size = 0;\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(2, subscriberId_);\n+      }\n+      size += getUnknownFields().getSerializedSize();\n+      memoizedSerializedSize = size;\n+      return size;\n+    }\n+    \n+    private static final long serialVersionUID = 0L;\n+    @java.lang.Override\n+    protected java.lang.Object writeReplace()\n+        throws java.io.ObjectStreamException {\n+      return super.writeReplace();\n+    }\n+    \n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseFrom(\n+        com.google.protobuf.ByteString data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseFrom(\n+        com.google.protobuf.ByteString data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseFrom(byte[] data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseFrom(\n+        byte[] data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseDelimitedFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseDelimitedFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseFrom(\n+        com.google.protobuf.CodedInputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest parseFrom(\n+        com.google.protobuf.CodedInputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    \n+    public static Builder newBuilder() { return Builder.create(); }\n+    public Builder newBuilderForType() { return newBuilder(); }\n+    public static Builder newBuilder(org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest prototype) {\n+      return newBuilder().mergeFrom(prototype);\n+    }\n+    public Builder toBuilder() { return newBuilder(this); }\n+    \n+    @java.lang.Override\n+    protected Builder newBuilderForType(\n+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n+      Builder builder = new Builder(parent);\n+      return builder;\n+    }\n+    public static final class Builder extends\n+        com.google.protobuf.GeneratedMessage.Builder<Builder>\n+       implements org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequestOrBuilder {\n+      public static final com.google.protobuf.Descriptors.Descriptor\n+          getDescriptor() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_CloseSubscriptionRequest_descriptor;\n+      }\n+      \n+      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+          internalGetFieldAccessorTable() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.internal_static_Hedwig_CloseSubscriptionRequest_fieldAccessorTable;\n+      }\n+      \n+      // Construct using org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.newBuilder()\n+      private Builder() {\n+        maybeForceBuilderInitialization();\n+      }\n+      \n+      private Builder(BuilderParent parent) {\n+        super(parent);\n+        maybeForceBuilderInitialization();\n+      }\n+      private void maybeForceBuilderInitialization() {\n+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n+        }\n+      }\n+      private static Builder create() {\n+        return new Builder();\n+      }\n+      \n+      public Builder clear() {\n+        super.clear();\n+        subscriberId_ = com.google.protobuf.ByteString.EMPTY;\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        return this;\n+      }\n+      \n+      public Builder clone() {\n+        return create().mergeFrom(buildPartial());\n+      }\n+      \n+      public com.google.protobuf.Descriptors.Descriptor\n+          getDescriptorForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.getDescriptor();\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest getDefaultInstanceForType() {\n+        return org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.getDefaultInstance();\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest build() {\n+        org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(result);\n+        }\n+        return result;\n+      }\n+      \n+      private org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest buildParsed()\n+          throws com.google.protobuf.InvalidProtocolBufferException {\n+        org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(\n+            result).asInvalidProtocolBufferException();\n+        }\n+        return result;\n+      }\n+      \n+      public org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest buildPartial() {\n+        org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest result = new org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest(this);\n+        int from_bitField0_ = bitField0_;\n+        int to_bitField0_ = 0;\n+        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n+          to_bitField0_ |= 0x00000001;\n+        }\n+        result.subscriberId_ = subscriberId_;\n+        result.bitField0_ = to_bitField0_;\n+        onBuilt();\n+        return result;\n+      }\n+      \n+      public Builder mergeFrom(com.google.protobuf.Message other) {\n+        if (other instanceof org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest) {\n+          return mergeFrom((org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest)other);\n+        } else {\n+          super.mergeFrom(other);\n+          return this;\n+        }\n+      }\n+      \n+      public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest other) {\n+        if (other == org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.getDefaultInstance()) return this;\n+        if (other.hasSubscriberId()) {\n+          setSubscriberId(other.getSubscriberId());\n+        }\n+        this.mergeUnknownFields(other.getUnknownFields());\n+        return this;\n+      }\n+      \n+      public final boolean isInitialized() {\n+        if (!hasSubscriberId()) {\n+          \n+          return false;\n+        }\n+        return true;\n+      }\n+      \n+      public Builder mergeFrom(\n+          com.google.protobuf.CodedInputStream input,\n+          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+          throws java.io.IOException {\n+        com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n+          com.google.protobuf.UnknownFieldSet.newBuilder(\n+            this.getUnknownFields());\n+        while (true) {\n+          int tag = input.readTag();\n+          switch (tag) {\n+            case 0:\n+              this.setUnknownFields(unknownFields.build());\n+              onChanged();\n+              return this;\n+            default: {\n+              if (!parseUnknownField(input, unknownFields,\n+                                     extensionRegistry, tag)) {\n+                this.setUnknownFields(unknownFields.build());\n+                onChanged();\n+                return this;\n+              }\n+              break;\n+            }\n+            case 18: {\n+              bitField0_ |= 0x00000001;\n+              subscriberId_ = input.readBytes();\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      \n+      private int bitField0_;\n+      \n+      // required bytes subscriberId = 2;\n+      private com.google.protobuf.ByteString subscriberId_ = com.google.protobuf.ByteString.EMPTY;\n+      public boolean hasSubscriberId() {\n+        return ((bitField0_ & 0x00000001) == 0x00000001);\n+      }\n+      public com.google.protobuf.ByteString getSubscriberId() {\n+        return subscriberId_;\n+      }\n+      public Builder setSubscriberId(com.google.protobuf.ByteString value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000001;\n+        subscriberId_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearSubscriberId() {\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        subscriberId_ = getDefaultInstance().getSubscriberId();\n+        onChanged();\n+        return this;\n+      }\n+      \n+      // @@protoc_insertion_point(builder_scope:Hedwig.CloseSubscriptionRequest)\n+    }\n+    \n+    static {\n+      defaultInstance = new CloseSubscriptionRequest(true);\n+      defaultInstance.initFields();\n+    }\n+    \n+    // @@protoc_insertion_point(class_scope:Hedwig.CloseSubscriptionRequest)\n+  }\n+  \n   public interface PubSubResponseOrBuilder\n       extends com.google.protobuf.MessageOrBuilder {\n     \n@@ -15407,6 +15914,11 @@ public Builder clearNumTopics() {\n   private static\n     com.google.protobuf.GeneratedMessage.FieldAccessorTable\n       internal_static_Hedwig_StartDeliveryRequest_fieldAccessorTable;\n+  private static com.google.protobuf.Descriptors.Descriptor\n+    internal_static_Hedwig_CloseSubscriptionRequest_descriptor;\n+  private static\n+    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+      internal_static_Hedwig_CloseSubscriptionRequest_fieldAccessorTable;\n   private static com.google.protobuf.Descriptors.Descriptor\n     internal_static_Hedwig_PubSubResponse_descriptor;\n   private static\n@@ -15482,7 +15994,7 @@ public Builder clearNumTopics() {\n       \"4\\n\\023RegionSpecificSeqId\\022\\016\\n\\006region\\030\\001 \\002(\\014\\022\\r\" +\n       \"\\n\\005seqId\\030\\002 \\002(\\004\\\"]\\n\\014MessageSeqId\\022\\026\\n\\016localCo\",\n       \"mponent\\030\\001 \\001(\\004\\0225\\n\\020remoteComponents\\030\\002 \\003(\\0132\" +\n-      \"\\033.Hedwig.RegionSpecificSeqId\\\"\\361\\003\\n\\rPubSubR\" +\n+      \"\\033.Hedwig.RegionSpecificSeqId\\\"\\265\\004\\n\\rPubSubR\" +\n       \"equest\\0220\\n\\017protocolVersion\\030\\001 \\002(\\0162\\027.Hedwig\" +\n       \".ProtocolVersion\\022#\\n\\004type\\030\\002 \\002(\\0162\\025.Hedwig.\" +\n       \"OperationType\\022\\024\\n\\014triedServers\\030\\003 \\003(\\014\\022\\r\\n\\005t\" +\n@@ -15495,75 +16007,79 @@ public Builder clearNumTopics() {\n       \"ibeRequest\\0228\\n\\023stopDeliveryRequest\\0308 \\001(\\0132\" +\n       \"\\033.Hedwig.StopDeliveryRequest\\022:\\n\\024startDel\" +\n       \"iveryRequest\\0309 \\001(\\0132\\034.Hedwig.StartDeliver\" +\n-      \"yRequest\\\".\\n\\016PublishRequest\\022\\034\\n\\003msg\\030\\002 \\002(\\0132\" +\n-      \"\\017.Hedwig.Message\\\"\\177\\n\\027SubscriptionPreferen\" +\n-      \"ces\\022\\034\\n\\007options\\030\\001 \\001(\\0132\\013.Hedwig.Map\\022\\024\\n\\014mes\" +\n-      \"sageBound\\030\\002 \\001(\\r\\022\\025\\n\\rmessageFilter\\030\\003 \\001(\\t\\022\\031\" +\n-      \"\\n\\021messageWindowSize\\030\\004 \\001(\\r\\\"\\277\\002\\n\\020SubscribeR\" +\n-      \"equest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\022Q\\n\\016createOr\",\n-      \"Attach\\030\\003 \\001(\\0162\\'.Hedwig.SubscribeRequest.C\" +\n-      \"reateOrAttach:\\020CREATE_OR_ATTACH\\022\\032\\n\\013synch\" +\n-      \"ronous\\030\\004 \\001(\\010:\\005false\\022\\024\\n\\014messageBound\\030\\005 \\001(\" +\n-      \"\\r\\0224\\n\\013preferences\\030\\006 \\001(\\0132\\037.Hedwig.Subscrip\" +\n-      \"tionPreferences\\022\\032\\n\\013forceAttach\\030\\007 \\001(\\010:\\005fa\" +\n-      \"lse\\\">\\n\\016CreateOrAttach\\022\\n\\n\\006CREATE\\020\\000\\022\\n\\n\\006ATT\" +\n-      \"ACH\\020\\001\\022\\024\\n\\020CREATE_OR_ATTACH\\020\\002\\\"\\216\\002\\n\\023Subscrip\" +\n-      \"tionOptions\\022\\032\\n\\013forceAttach\\030\\001 \\001(\\010:\\005false\\022\" +\n-      \"Q\\n\\016createOrAttach\\030\\002 \\001(\\0162\\'.Hedwig.Subscri\" +\n-      \"beRequest.CreateOrAttach:\\020CREATE_OR_ATTA\",\n-      \"CH\\022\\027\\n\\014messageBound\\030\\003 \\001(\\r:\\0010\\022\\034\\n\\007options\\030\\004\" +\n-      \" \\001(\\0132\\013.Hedwig.Map\\022\\025\\n\\rmessageFilter\\030\\005 \\001(\\t\" +\n-      \"\\022\\031\\n\\021messageWindowSize\\030\\006 \\001(\\r\\022\\037\\n\\021enableRes\" +\n-      \"ubscribe\\030\\007 \\001(\\010:\\004true\\\"K\\n\\016ConsumeRequest\\022\\024\" +\n-      \"\\n\\014subscriberId\\030\\002 \\002(\\014\\022#\\n\\005msgId\\030\\003 \\002(\\0132\\024.He\" +\n-      \"dwig.MessageSeqId\\\"*\\n\\022UnsubscribeRequest\\022\" +\n-      \"\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\\"+\\n\\023StopDeliveryReq\" +\n-      \"uest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\\",\\n\\024StartDeliv\" +\n-      \"eryRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\\"\\377\\001\\n\\016Pub\" +\n-      \"SubResponse\\0220\\n\\017protocolVersion\\030\\001 \\002(\\0162\\027.H\",\n-      \"edwig.ProtocolVersion\\022&\\n\\nstatusCode\\030\\002 \\002(\" +\n-      \"\\0162\\022.Hedwig.StatusCode\\022\\r\\n\\005txnId\\030\\003 \\002(\\004\\022\\021\\n\\t\" +\n-      \"statusMsg\\030\\004 \\001(\\t\\022 \\n\\007message\\030\\005 \\001(\\0132\\017.Hedwi\" +\n-      \"g.Message\\022\\r\\n\\005topic\\030\\006 \\001(\\014\\022\\024\\n\\014subscriberId\" +\n-      \"\\030\\007 \\001(\\014\\022*\\n\\014responseBody\\030\\010 \\001(\\0132\\024.Hedwig.Re\" +\n-      \"sponseBody\\\"?\\n\\017PublishResponse\\022,\\n\\016publish\" +\n-      \"edMsgId\\030\\001 \\002(\\0132\\024.Hedwig.MessageSeqId\\\"I\\n\\021S\" +\n-      \"ubscribeResponse\\0224\\n\\013preferences\\030\\002 \\001(\\0132\\037.\" +\n-      \"Hedwig.SubscriptionPreferences\\\"v\\n\\014Respon\" +\n-      \"seBody\\0220\\n\\017publishResponse\\030\\001 \\001(\\0132\\027.Hedwig\",\n-      \".PublishResponse\\0224\\n\\021subscribeResponse\\030\\002 \" +\n-      \"\\001(\\0132\\031.Hedwig.SubscribeResponse\\\"N\\n\\021Subscr\" +\n-      \"iptionState\\022#\\n\\005msgId\\030\\001 \\002(\\0132\\024.Hedwig.Mess\" +\n-      \"ageSeqId\\022\\024\\n\\014messageBound\\030\\002 \\001(\\r\\\"r\\n\\020Subscr\" +\n-      \"iptionData\\022(\\n\\005state\\030\\001 \\001(\\0132\\031.Hedwig.Subsc\" +\n-      \"riptionState\\0224\\n\\013preferences\\030\\002 \\001(\\0132\\037.Hedw\" +\n-      \"ig.SubscriptionPreferences\\\"O\\n\\013LedgerRang\" +\n-      \"e\\022\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020endSeqIdIncluded\\030\" +\n-      \"\\002 \\001(\\0132\\024.Hedwig.MessageSeqId\\\"3\\n\\014LedgerRan\" +\n-      \"ges\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.Hedwig.LedgerRange\",\n-      \"\\\":\\n\\013ManagerMeta\\022\\023\\n\\013managerImpl\\030\\002 \\002(\\t\\022\\026\\n\\016\" +\n-      \"managerVersion\\030\\003 \\002(\\r\\\".\\n\\013HubInfoData\\022\\020\\n\\010h\" +\n-      \"ostname\\030\\002 \\002(\\t\\022\\r\\n\\005czxid\\030\\003 \\002(\\004\\\" \\n\\013HubLoadD\" +\n-      \"ata\\022\\021\\n\\tnumTopics\\030\\002 \\002(\\004*\\\"\\n\\017ProtocolVersio\" +\n-      \"n\\022\\017\\n\\013VERSION_ONE\\020\\001*p\\n\\rOperationType\\022\\013\\n\\007P\" +\n-      \"UBLISH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\\022\\013\\n\\007CONSUME\\020\\002\\022\\017\\n\\013\" +\n-      \"UNSUBSCRIBE\\020\\003\\022\\022\\n\\016START_DELIVERY\\020\\004\\022\\021\\n\\rSTO\" +\n-      \"P_DELIVERY\\020\\005*D\\n\\021SubscriptionEvent\\022\\017\\n\\013TOP\" +\n-      \"IC_MOVED\\020\\001\\022\\036\\n\\032SUBSCRIPTION_FORCED_CLOSED\" +\n-      \"\\020\\002*\\205\\004\\n\\nStatusCode\\022\\013\\n\\007SUCCESS\\020\\000\\022\\026\\n\\021MALFOR\",\n-      \"MED_REQUEST\\020\\221\\003\\022\\022\\n\\rNO_SUCH_TOPIC\\020\\222\\003\\022\\036\\n\\031CL\" +\n-      \"IENT_ALREADY_SUBSCRIBED\\020\\223\\003\\022\\032\\n\\025CLIENT_NOT\" +\n-      \"_SUBSCRIBED\\020\\224\\003\\022\\026\\n\\021COULD_NOT_CONNECT\\020\\225\\003\\022\\017\" +\n-      \"\\n\\nTOPIC_BUSY\\020\\226\\003\\022\\036\\n\\031NOT_RESPONSIBLE_FOR_T\" +\n-      \"OPIC\\020\\365\\003\\022\\021\\n\\014SERVICE_DOWN\\020\\366\\003\\022\\024\\n\\017UNCERTAIN_\" +\n-      \"STATE\\020\\367\\003\\022\\033\\n\\026INVALID_MESSAGE_FILTER\\020\\370\\003\\022\\020\\n\" +\n-      \"\\013BAD_VERSION\\020\\210\\004\\022\\036\\n\\031NO_TOPIC_PERSISTENCE_\" +\n-      \"INFO\\020\\211\\004\\022\\\"\\n\\035TOPIC_PERSISTENCE_INFO_EXISTS\" +\n-      \"\\020\\212\\004\\022\\032\\n\\025NO_SUBSCRIPTION_STATE\\020\\213\\004\\022\\036\\n\\031SUBSC\" +\n-      \"RIPTION_STATE_EXISTS\\020\\214\\004\\022\\030\\n\\023NO_TOPIC_OWNE\",\n-      \"R_INFO\\020\\215\\004\\022\\034\\n\\027TOPIC_OWNER_INFO_EXISTS\\020\\216\\004\\022\" +\n-      \"\\031\\n\\024UNEXPECTED_CONDITION\\020\\330\\004\\022\\016\\n\\tCOMPOSITE\\020\" +\n-      \"\\274\\005B\\036\\n\\032org.apache.hedwig.protocolH\\001\"\n+      \"yRequest\\022B\\n\\030closeSubscriptionRequest\\030: \\001\" +\n+      \"(\\0132 .Hedwig.CloseSubscriptionRequest\\\".\\n\\016\" +\n+      \"PublishRequest\\022\\034\\n\\003msg\\030\\002 \\002(\\0132\\017.Hedwig.Mes\" +\n+      \"sage\\\"\\177\\n\\027SubscriptionPreferences\\022\\034\\n\\007optio\" +\n+      \"ns\\030\\001 \\001(\\0132\\013.Hedwig.Map\\022\\024\\n\\014messageBound\\030\\002 \" +\n+      \"\\001(\\r\\022\\025\\n\\rmessageFilter\\030\\003 \\001(\\t\\022\\031\\n\\021messageWin\",\n+      \"dowSize\\030\\004 \\001(\\r\\\"\\277\\002\\n\\020SubscribeRequest\\022\\024\\n\\014su\" +\n+      \"bscriberId\\030\\002 \\002(\\014\\022Q\\n\\016createOrAttach\\030\\003 \\001(\\016\" +\n+      \"2\\'.Hedwig.SubscribeRequest.CreateOrAttac\" +\n+      \"h:\\020CREATE_OR_ATTACH\\022\\032\\n\\013synchronous\\030\\004 \\001(\\010\" +\n+      \":\\005false\\022\\024\\n\\014messageBound\\030\\005 \\001(\\r\\0224\\n\\013prefere\" +\n+      \"nces\\030\\006 \\001(\\0132\\037.Hedwig.SubscriptionPreferen\" +\n+      \"ces\\022\\032\\n\\013forceAttach\\030\\007 \\001(\\010:\\005false\\\">\\n\\016Creat\" +\n+      \"eOrAttach\\022\\n\\n\\006CREATE\\020\\000\\022\\n\\n\\006ATTACH\\020\\001\\022\\024\\n\\020CRE\" +\n+      \"ATE_OR_ATTACH\\020\\002\\\"\\216\\002\\n\\023SubscriptionOptions\\022\" +\n+      \"\\032\\n\\013forceAttach\\030\\001 \\001(\\010:\\005false\\022Q\\n\\016createOrA\",\n+      \"ttach\\030\\002 \\001(\\0162\\'.Hedwig.SubscribeRequest.Cr\" +\n+      \"eateOrAttach:\\020CREATE_OR_ATTACH\\022\\027\\n\\014messag\" +\n+      \"eBound\\030\\003 \\001(\\r:\\0010\\022\\034\\n\\007options\\030\\004 \\001(\\0132\\013.Hedwi\" +\n+      \"g.Map\\022\\025\\n\\rmessageFilter\\030\\005 \\001(\\t\\022\\031\\n\\021messageW\" +\n+      \"indowSize\\030\\006 \\001(\\r\\022\\037\\n\\021enableResubscribe\\030\\007 \\001\" +\n+      \"(\\010:\\004true\\\"K\\n\\016ConsumeRequest\\022\\024\\n\\014subscriber\" +\n+      \"Id\\030\\002 \\002(\\014\\022#\\n\\005msgId\\030\\003 \\002(\\0132\\024.Hedwig.Message\" +\n+      \"SeqId\\\"*\\n\\022UnsubscribeRequest\\022\\024\\n\\014subscribe\" +\n+      \"rId\\030\\002 \\002(\\014\\\"+\\n\\023StopDeliveryRequest\\022\\024\\n\\014subs\" +\n+      \"criberId\\030\\002 \\002(\\014\\\",\\n\\024StartDeliveryRequest\\022\\024\",\n+      \"\\n\\014subscriberId\\030\\002 \\002(\\014\\\"0\\n\\030CloseSubscriptio\" +\n+      \"nRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\\"\\377\\001\\n\\016PubSu\" +\n+      \"bResponse\\0220\\n\\017protocolVersion\\030\\001 \\002(\\0162\\027.Hed\" +\n+      \"wig.ProtocolVersion\\022&\\n\\nstatusCode\\030\\002 \\002(\\0162\" +\n+      \"\\022.Hedwig.StatusCode\\022\\r\\n\\005txnId\\030\\003 \\002(\\004\\022\\021\\n\\tst\" +\n+      \"atusMsg\\030\\004 \\001(\\t\\022 \\n\\007message\\030\\005 \\001(\\0132\\017.Hedwig.\" +\n+      \"Message\\022\\r\\n\\005topic\\030\\006 \\001(\\014\\022\\024\\n\\014subscriberId\\030\\007\" +\n+      \" \\001(\\014\\022*\\n\\014responseBody\\030\\010 \\001(\\0132\\024.Hedwig.Resp\" +\n+      \"onseBody\\\"?\\n\\017PublishResponse\\022,\\n\\016published\" +\n+      \"MsgId\\030\\001 \\002(\\0132\\024.Hedwig.MessageSeqId\\\"I\\n\\021Sub\",\n+      \"scribeResponse\\0224\\n\\013preferences\\030\\002 \\001(\\0132\\037.He\" +\n+      \"dwig.SubscriptionPreferences\\\"v\\n\\014Response\" +\n+      \"Body\\0220\\n\\017publishResponse\\030\\001 \\001(\\0132\\027.Hedwig.P\" +\n+      \"ublishResponse\\0224\\n\\021subscribeResponse\\030\\002 \\001(\" +\n+      \"\\0132\\031.Hedwig.SubscribeResponse\\\"N\\n\\021Subscrip\" +\n+      \"tionState\\022#\\n\\005msgId\\030\\001 \\002(\\0132\\024.Hedwig.Messag\" +\n+      \"eSeqId\\022\\024\\n\\014messageBound\\030\\002 \\001(\\r\\\"r\\n\\020Subscrip\" +\n+      \"tionData\\022(\\n\\005state\\030\\001 \\001(\\0132\\031.Hedwig.Subscri\" +\n+      \"ptionState\\0224\\n\\013preferences\\030\\002 \\001(\\0132\\037.Hedwig\" +\n+      \".SubscriptionPreferences\\\"O\\n\\013LedgerRange\\022\",\n+      \"\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020endSeqIdIncluded\\030\\002 \" +\n+      \"\\001(\\0132\\024.Hedwig.MessageSeqId\\\"3\\n\\014LedgerRange\" +\n+      \"s\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.Hedwig.LedgerRange\\\":\" +\n+      \"\\n\\013ManagerMeta\\022\\023\\n\\013managerImpl\\030\\002 \\002(\\t\\022\\026\\n\\016ma\" +\n+      \"nagerVersion\\030\\003 \\002(\\r\\\".\\n\\013HubInfoData\\022\\020\\n\\010hos\" +\n+      \"tname\\030\\002 \\002(\\t\\022\\r\\n\\005czxid\\030\\003 \\002(\\004\\\" \\n\\013HubLoadDat\" +\n+      \"a\\022\\021\\n\\tnumTopics\\030\\002 \\002(\\004*\\\"\\n\\017ProtocolVersion\\022\" +\n+      \"\\017\\n\\013VERSION_ONE\\020\\001*\\207\\001\\n\\rOperationType\\022\\013\\n\\007PU\" +\n+      \"BLISH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\\022\\013\\n\\007CONSUME\\020\\002\\022\\017\\n\\013U\" +\n+      \"NSUBSCRIBE\\020\\003\\022\\022\\n\\016START_DELIVERY\\020\\004\\022\\021\\n\\rSTOP\",\n+      \"_DELIVERY\\020\\005\\022\\025\\n\\021CLOSESUBSCRIPTION\\020\\006*D\\n\\021Su\" +\n+      \"bscriptionEvent\\022\\017\\n\\013TOPIC_MOVED\\020\\001\\022\\036\\n\\032SUBS\" +\n+      \"CRIPTION_FORCED_CLOSED\\020\\002*\\205\\004\\n\\nStatusCode\\022\" +\n+      \"\\013\\n\\007SUCCESS\\020\\000\\022\\026\\n\\021MALFORMED_REQUEST\\020\\221\\003\\022\\022\\n\\r\" +\n+      \"NO_SUCH_TOPIC\\020\\222\\003\\022\\036\\n\\031CLIENT_ALREADY_SUBSC\" +\n+      \"RIBED\\020\\223\\003\\022\\032\\n\\025CLIENT_NOT_SUBSCRIBED\\020\\224\\003\\022\\026\\n\\021\" +\n+      \"COULD_NOT_CONNECT\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\\226\\003\\022\\036\\n\" +\n+      \"\\031NOT_RESPONSIBLE_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SERVICE\" +\n+      \"_DOWN\\020\\366\\003\\022\\024\\n\\017UNCERTAIN_STATE\\020\\367\\003\\022\\033\\n\\026INVALI\" +\n+      \"D_MESSAGE_FILTER\\020\\370\\003\\022\\020\\n\\013BAD_VERSION\\020\\210\\004\\022\\036\\n\",\n+      \"\\031NO_TOPIC_PERSISTENCE_INFO\\020\\211\\004\\022\\\"\\n\\035TOPIC_P\" +\n+      \"ERSISTENCE_INFO_EXISTS\\020\\212\\004\\022\\032\\n\\025NO_SUBSCRIP\" +\n+      \"TION_STATE\\020\\213\\004\\022\\036\\n\\031SUBSCRIPTION_STATE_EXIS\" +\n+      \"TS\\020\\214\\004\\022\\030\\n\\023NO_TOPIC_OWNER_INFO\\020\\215\\004\\022\\034\\n\\027TOPIC\" +\n+      \"_OWNER_INFO_EXISTS\\020\\216\\004\\022\\031\\n\\024UNEXPECTED_COND\" +\n+      \"ITION\\020\\330\\004\\022\\016\\n\\tCOMPOSITE\\020\\274\\005B\\036\\n\\032org.apache.h\" +\n+      \"edwig.protocolH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n@@ -15623,7 +16139,7 @@ public Builder clearNumTopics() {\n           internal_static_Hedwig_PubSubRequest_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_PubSubRequest_descriptor,\n-              new java.lang.String[] { \"ProtocolVersion\", \"Type\", \"TriedServers\", \"TxnId\", \"ShouldClaim\", \"Topic\", \"PublishRequest\", \"SubscribeRequest\", \"ConsumeRequest\", \"UnsubscribeRequest\", \"StopDeliveryRequest\", \"StartDeliveryRequest\", },\n+              new java.lang.String[] { \"ProtocolVersion\", \"Type\", \"TriedServers\", \"TxnId\", \"ShouldClaim\", \"Topic\", \"PublishRequest\", \"SubscribeRequest\", \"ConsumeRequest\", \"UnsubscribeRequest\", \"StopDeliveryRequest\", \"StartDeliveryRequest\", \"CloseSubscriptionRequest\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest.Builder.class);\n           internal_static_Hedwig_PublishRequest_descriptor =\n@@ -15690,88 +16206,96 @@ public Builder clearNumTopics() {\n               new java.lang.String[] { \"SubscriberId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest.class,\n               org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest.Builder.class);\n-          internal_static_Hedwig_PubSubResponse_descriptor =\n+          internal_static_Hedwig_CloseSubscriptionRequest_descriptor =\n             getDescriptor().getMessageTypes().get(14);\n+          internal_static_Hedwig_CloseSubscriptionRequest_fieldAccessorTable = new\n+            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n+              internal_static_Hedwig_CloseSubscriptionRequest_descriptor,\n+              new java.lang.String[] { \"SubscriberId\", },\n+              org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.class,\n+              org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest.Builder.class);\n+          internal_static_Hedwig_PubSubResponse_descriptor =\n+            getDescriptor().getMessageTypes().get(15);\n           internal_static_Hedwig_PubSubResponse_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_PubSubResponse_descriptor,\n               new java.lang.String[] { \"ProtocolVersion\", \"StatusCode\", \"TxnId\", \"StatusMsg\", \"Message\", \"Topic\", \"SubscriberId\", \"ResponseBody\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse.Builder.class);\n           internal_static_Hedwig_PublishResponse_descriptor =\n-            getDescriptor().getMessageTypes().get(15);\n+            getDescriptor().getMessageTypes().get(16);\n           internal_static_Hedwig_PublishResponse_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_PublishResponse_descriptor,\n               new java.lang.String[] { \"PublishedMsgId\", },\n               org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.class,\n               org.apache.hedwig.protocol.PubSubProtocol.PublishResponse.Builder.class);\n           internal_static_Hedwig_SubscribeResponse_descriptor =\n-            getDescriptor().getMessageTypes().get(16);\n+            getDescriptor().getMessageTypes().get(17);\n           internal_static_Hedwig_SubscribeResponse_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscribeResponse_descriptor,\n               new java.lang.String[] { \"Preferences\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscribeResponse.Builder.class);\n           internal_static_Hedwig_ResponseBody_descriptor =\n-            getDescriptor().getMessageTypes().get(17);\n+            getDescriptor().getMessageTypes().get(18);\n           internal_static_Hedwig_ResponseBody_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_ResponseBody_descriptor,\n               new java.lang.String[] { \"PublishResponse\", \"SubscribeResponse\", },\n               org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.class,\n               org.apache.hedwig.protocol.PubSubProtocol.ResponseBody.Builder.class);\n           internal_static_Hedwig_SubscriptionState_descriptor =\n-            getDescriptor().getMessageTypes().get(18);\n+            getDescriptor().getMessageTypes().get(19);\n           internal_static_Hedwig_SubscriptionState_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionState_descriptor,\n               new java.lang.String[] { \"MsgId\", \"MessageBound\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState.Builder.class);\n           internal_static_Hedwig_SubscriptionData_descriptor =\n-            getDescriptor().getMessageTypes().get(19);\n+            getDescriptor().getMessageTypes().get(20);\n           internal_static_Hedwig_SubscriptionData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionData_descriptor,\n               new java.lang.String[] { \"State\", \"Preferences\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionData.Builder.class);\n           internal_static_Hedwig_LedgerRange_descriptor =\n-            getDescriptor().getMessageTypes().get(20);\n+            getDescriptor().getMessageTypes().get(21);\n           internal_static_Hedwig_LedgerRange_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_LedgerRange_descriptor,\n               new java.lang.String[] { \"LedgerId\", \"EndSeqIdIncluded\", },\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRange.class,\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRange.Builder.class);\n           internal_static_Hedwig_LedgerRanges_descriptor =\n-            getDescriptor().getMessageTypes().get(21);\n+            getDescriptor().getMessageTypes().get(22);\n           internal_static_Hedwig_LedgerRanges_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_LedgerRanges_descriptor,\n               new java.lang.String[] { \"Ranges\", },\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges.class,\n               org.apache.hedwig.protocol.PubSubProtocol.LedgerRanges.Builder.class);\n           internal_static_Hedwig_ManagerMeta_descriptor =\n-            getDescriptor().getMessageTypes().get(22);\n+            getDescriptor().getMessageTypes().get(23);\n           internal_static_Hedwig_ManagerMeta_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_ManagerMeta_descriptor,\n               new java.lang.String[] { \"ManagerImpl\", \"ManagerVersion\", },\n               org.apache.hedwig.protocol.PubSubProtocol.ManagerMeta.class,\n               org.apache.hedwig.protocol.PubSubProtocol.ManagerMeta.Builder.class);\n           internal_static_Hedwig_HubInfoData_descriptor =\n-            getDescriptor().getMessageTypes().get(23);\n+            getDescriptor().getMessageTypes().get(24);\n           internal_static_Hedwig_HubInfoData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_HubInfoData_descriptor,\n               new java.lang.String[] { \"Hostname\", \"Czxid\", },\n               org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.class,\n               org.apache.hedwig.protocol.PubSubProtocol.HubInfoData.Builder.class);\n           internal_static_Hedwig_HubLoadData_descriptor =\n-            getDescriptor().getMessageTypes().get(24);\n+            getDescriptor().getMessageTypes().get(25);\n           internal_static_Hedwig_HubLoadData_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_HubLoadData_descriptor,"},{"sha":"7fafcce8718c24a63947a20c6eaaad1b8e4634c7","filename":"hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -70,6 +70,9 @@ enum OperationType{\n     //the following two are only used for the hedwig proxy\n     START_DELIVERY = 4;\n     STOP_DELIVERY = 5;\n+    // end for requests only used for hedwig proxy\n+\n+    CLOSESUBSCRIPTION = 6;\n }\n \n /* A PubSubRequest is just a union of the various request types, with\n@@ -95,6 +98,7 @@ message PubSubRequest{\n     optional UnsubscribeRequest unsubscribeRequest = 55;\n     optional StopDeliveryRequest stopDeliveryRequest = 56;\n     optional StartDeliveryRequest startDeliveryRequest = 57;\n+    optional CloseSubscriptionRequest closeSubscriptionRequest = 58;\n }\n \n \n@@ -191,6 +195,10 @@ enum SubscriptionEvent {\n     SUBSCRIPTION_FORCED_CLOSED = 2;\n }\n \n+message CloseSubscriptionRequest {\n+    required bytes subscriberId = 2;\n+}\n+\n message PubSubResponse{\n     required ProtocolVersion protocolVersion = 1;\n     required StatusCode statusCode = 2;"},{"sha":"20e9be9fb45c3ff568b9b087382b47722db342fd","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -19,8 +19,10 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionEvent;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n import org.apache.hedwig.filter.ServerMessageFilter;\n+import org.apache.hedwig.util.Callback;\n \n public interface DeliveryManager {\n     public void start();\n@@ -31,7 +33,17 @@ public void startServingSubscription(ByteString topic, ByteString subscriberId,\n                                          DeliveryEndPoint endPoint,\n                                          ServerMessageFilter filter);\n \n-    public void stopServingSubscriber(ByteString topic, ByteString subscriberId);\n+    /**\n+     * Stop serving a given subscription.\n+     *\n+     * @param topic\n+     *          Topic Name\n+     * @param subscriberId\n+     *          Subscriber Id\n+     */\n+    public void stopServingSubscriber(ByteString topic, ByteString subscriberId,\n+                                      SubscriptionEvent event,\n+                                      Callback<Void> callback, Object ctx);\n \n     /**\n      * Tell the delivery manager where that a subscriber has consumed"},{"sha":"fd5f44883cb1b981e87d8ec795be791b1651337a","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":60,"deletions":13,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -37,12 +37,14 @@\n \n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.hedwig.client.data.TopicSubscriber;\n+import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.filter.ServerMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionEvent;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.common.UnexpectedError;\n@@ -52,12 +54,22 @@\n import org.apache.hedwig.server.persistence.PersistenceManager;\n import org.apache.hedwig.server.persistence.ScanCallback;\n import org.apache.hedwig.server.persistence.ScanRequest;\n+import org.apache.hedwig.util.Callback;\n import static org.apache.hedwig.util.VarArgs.va;\n \n public class FIFODeliveryManager implements Runnable, DeliveryManager {\n \n     protected static final Logger logger = LoggerFactory.getLogger(FIFODeliveryManager.class);\n \n+    private static Callback<Void> NOP_CALLBACK = new Callback<Void>() {\n+        @Override\n+        public void operationFinished(Object ctx, Void result) {\n+        }\n+        @Override\n+        public void operationFailed(Object ctx, PubSubException exception) {\n+        }\n+    };\n+\n     protected interface DeliveryManagerRequest {\n         public void performRequest();\n     }\n@@ -160,22 +172,36 @@ public void startServingSubscription(ByteString topic, ByteString subscriberId,\n         enqueueWithoutFailure(subscriber);\n     }\n \n-    public void stopServingSubscriber(ByteString topic, ByteString subscriberId) {\n-        ActiveSubscriberState subState = subscriberStates.get(new TopicSubscriber(topic, subscriberId));\n+    public void stopServingSubscriber(ByteString topic, ByteString subscriberId,\n+                                      SubscriptionEvent event,\n+                                      Callback<Void> cb, Object ctx) {\n+        ActiveSubscriberState subState =\n+            subscriberStates.get(new TopicSubscriber(topic, subscriberId));\n \n         if (subState != null) {\n-            stopServingSubscriber(subState);\n+            stopServingSubscriber(subState, event, cb, ctx);\n+        } else {\n+            cb.operationFinished(ctx, null);\n         }\n     }\n \n     /**\n      * Due to some error or disconnection or unsusbcribe, someone asks us to\n      * stop serving a particular endpoint\n      *\n-     * @param endPoint\n+     * @param subscriber\n+     *          Subscriber instance\n+     * @param event\n+     *          Subscription event indicates why to stop subscriber.\n+     * @param cb\n+     *          Callback after the subscriber is stopped.\n+     * @param ctx\n+     *          Callback context\n      */\n-    protected void stopServingSubscriber(ActiveSubscriberState subscriber) {\n-        enqueueWithoutFailure(new StopServingSubscriber(subscriber));\n+    protected void stopServingSubscriber(ActiveSubscriberState subscriber,\n+                                         SubscriptionEvent event,\n+                                         Callback<Void> cb, Object ctx) {\n+        enqueueWithoutFailure(new StopServingSubscriber(subscriber, event, cb, ctx));\n     }\n \n     /**\n@@ -376,13 +402,19 @@ public ActiveSubscriberState(ByteString topic, ByteString subscriberId,\n             }\n         }\n \n-        public void setNotConnected() {\n+        public void setNotConnected(SubscriptionEvent event) {\n             // have closed it.\n             if (!isConnected()) {\n                 return;\n             }\n             this.connected = false;\n-            deliveryEndPoint.close();\n+            if (null != event &&\n+                (SubscriptionEvent.TOPIC_MOVED == event ||\n+                 SubscriptionEvent.SUBSCRIPTION_FORCED_CLOSED == event)) {\n+                // for we need to close the underlying when topic moved\n+                // or subscription forced closed.\n+                deliveryEndPoint.close();\n+            }\n             // uninitialize filter\n             this.filter.uninitialize();\n         }\n@@ -549,7 +581,11 @@ public long getLastSeqIdCommunicatedExternally() {\n \n \n         public void permanentErrorOnSend() {\n-            stopServingSubscriber(this);\n+            // the underlying channel is broken, the channel will\n+            // be closed in UmbrellaHandler when exception happened.\n+            // so we don't need to close the channel again\n+            stopServingSubscriber(this, null,\n+                                  NOP_CALLBACK, null);\n         }\n \n         public void transientErrorOnSend() {\n@@ -563,10 +599,12 @@ public void transientErrorOnSend() {\n         public void performRequest() {\n \n             // Put this subscriber in the channel to subscriber mapping\n-            ActiveSubscriberState prevSubscriber = subscriberStates.put(new TopicSubscriber(topic, subscriberId), this);\n+            ActiveSubscriberState prevSubscriber =\n+                subscriberStates.put(new TopicSubscriber(topic, subscriberId), this);\n \n             if (prevSubscriber != null) {\n-                stopServingSubscriber(prevSubscriber);\n+                stopServingSubscriber(prevSubscriber, SubscriptionEvent.SUBSCRIPTION_FORCED_CLOSED,\n+                                      NOP_CALLBACK, null);\n             }\n \n             lastSeqIdCommunicatedExternally = lastLocalSeqIdDelivered;\n@@ -589,16 +627,24 @@ public String toString() {\n \n     protected class StopServingSubscriber implements DeliveryManagerRequest {\n         ActiveSubscriberState subscriber;\n+        SubscriptionEvent event;\n+        final Callback<Void> cb;\n+        final Object ctx;\n \n-        public StopServingSubscriber(ActiveSubscriberState subscriber) {\n+        public StopServingSubscriber(ActiveSubscriberState subscriber,\n+                                     SubscriptionEvent event,\n+                                     Callback<Void> callback, Object ctx) {\n             this.subscriber = subscriber;\n+            this.event = event;\n+            this.cb = callback;\n+            this.ctx = ctx;\n         }\n \n         @Override\n         public void performRequest() {\n \n             // This will automatically stop delivery, and disconnect the channel\n-            subscriber.setNotConnected();\n+            subscriber.setNotConnected(event);\n \n             // if the subscriber has moved on, a move request for its delivery\n             // pointer must be pending in the request queue. Note that the\n@@ -609,6 +655,7 @@ public void performRequest() {\n                               true,\n                               // pruneTopic=\n                               true);\n+            cb.operationFinished(ctx, null);\n         }\n \n     }"},{"sha":"a6ccb7ebbff4fed6a5136e97397ec691203723a5","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/CloseSubscriptionHandler.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/CloseSubscriptionHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/CloseSubscriptionHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/CloseSubscriptionHandler.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -0,0 +1,105 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server.handlers;\n+\n+import org.jboss.netty.channel.Channel;\n+import org.jboss.netty.channel.ChannelFutureListener;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.apache.hedwig.client.data.TopicSubscriber;\n+import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.protocol.PubSubProtocol.CloseSubscriptionRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n+import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionEvent;\n+import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n+import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.delivery.DeliveryManager;\n+import org.apache.hedwig.server.netty.ServerStats;\n+import org.apache.hedwig.server.netty.ServerStats.OpStats;\n+import org.apache.hedwig.server.netty.UmbrellaHandler;\n+import org.apache.hedwig.server.subscriptions.SubscriptionManager;\n+import org.apache.hedwig.server.topics.TopicManager;\n+import org.apache.hedwig.util.Callback;\n+\n+public class CloseSubscriptionHandler extends BaseHandler {\n+    SubscriptionManager subMgr;\n+    DeliveryManager deliveryMgr;\n+    SubscriptionChannelManager subChannelMgr;\n+    // op stats\n+    final OpStats closesubStats;\n+\n+    public CloseSubscriptionHandler(ServerConfiguration cfg, TopicManager tm,\n+                                    SubscriptionManager subMgr,\n+                                    DeliveryManager deliveryMgr,\n+                                    SubscriptionChannelManager subChannelMgr) {\n+        super(tm, cfg);\n+        this.subMgr = subMgr;\n+        this.deliveryMgr = deliveryMgr;\n+        this.subChannelMgr = subChannelMgr;\n+        closesubStats = ServerStats.getInstance().getOpStats(OperationType.CLOSESUBSCRIPTION);\n+    }\n+\n+    @Override\n+    public void handleRequestAtOwner(final PubSubRequest request, final Channel channel) {\n+        if (!request.hasCloseSubscriptionRequest()) {\n+            UmbrellaHandler.sendErrorResponseToMalformedRequest(channel, request.getTxnId(),\n+                    \"Missing closesubscription request data\");\n+            closesubStats.incrementFailedOps();\n+            return;\n+        }\n+\n+        final CloseSubscriptionRequest closesubRequest =\n+                request.getCloseSubscriptionRequest();\n+        final ByteString topic = request.getTopic();\n+        final ByteString subscriberId = closesubRequest.getSubscriberId();\n+\n+        final long requestTime = System.currentTimeMillis();\n+\n+        subMgr.closeSubscription(topic, subscriberId, new Callback<Void>() {\n+            @Override\n+            public void operationFinished(Object ctx, Void result) {\n+                // we should not close the channel in delivery manager\n+                // since client waits the response for closeSubscription request\n+                // client side would close the channel\n+                deliveryMgr.stopServingSubscriber(topic, subscriberId, null,\n+                new Callback<Void>() {\n+                    @Override\n+                    public void operationFailed(Object ctx, PubSubException exception) {\n+                        channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));\n+                        closesubStats.incrementFailedOps();\n+                    }\n+                    @Override\n+                    public void operationFinished(Object ctx, Void resultOfOperation) {\n+                        // remove the topic subscription from subscription channels\n+                        subChannelMgr.remove(new TopicSubscriber(topic, subscriberId),\n+                                             channel);\n+                        channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n+                        closesubStats.updateLatency(System.currentTimeMillis() - requestTime);\n+                    }\n+                }, null);\n+            }\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException exception) {\n+                channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));\n+                closesubStats.incrementFailedOps();\n+            }\n+        }, null);\n+    }\n+}"},{"sha":"e2a59c6b0eca0a11aa2e2dc14c43d7fa268bd8e3","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","status":"modified","additions":29,"deletions":5,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/UnsubscribeHandler.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -21,9 +21,11 @@\n import com.google.protobuf.ByteString;\n \n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionEvent;\n import org.apache.hedwig.protocol.PubSubProtocol.UnsubscribeRequest;\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n@@ -34,18 +36,24 @@\n import org.apache.hedwig.server.subscriptions.SubscriptionManager;\n import org.apache.hedwig.server.topics.TopicManager;\n import org.apache.hedwig.util.Callback;\n+import static org.apache.hedwig.util.VarArgs.va;\n \n public class UnsubscribeHandler extends BaseHandler {\n     SubscriptionManager subMgr;\n     DeliveryManager deliveryMgr;\n+    SubscriptionChannelManager subChannelMgr;\n     // op stats\n     final OpStats unsubStats;\n \n-    public UnsubscribeHandler(TopicManager tm, ServerConfiguration cfg, SubscriptionManager subMgr,\n-                              DeliveryManager deliveryMgr) {\n+    public UnsubscribeHandler(ServerConfiguration cfg,\n+                              TopicManager tm,\n+                              SubscriptionManager subMgr,\n+                              DeliveryManager deliveryMgr,\n+                              SubscriptionChannelManager subChannelMgr) {\n         super(tm, cfg);\n         this.subMgr = subMgr;\n         this.deliveryMgr = deliveryMgr;\n+        this.subChannelMgr = subChannelMgr;\n         unsubStats = ServerStats.getInstance().getOpStats(OperationType.UNSUBSCRIBE);\n     }\n \n@@ -72,9 +80,25 @@ public void operationFailed(Object ctx, PubSubException exception) {\n \n             @Override\n             public void operationFinished(Object ctx, Void resultOfOperation) {\n-                deliveryMgr.stopServingSubscriber(topic, subscriberId);\n-                channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n-                unsubStats.updateLatency(MathUtils.now() - requestTime);\n+                // we should not close the channel in delivery manager\n+                // since client waits the response for closeSubscription request\n+                // client side would close the channel\n+                deliveryMgr.stopServingSubscriber(topic, subscriberId, null,\n+                new Callback<Void>() {\n+                    @Override\n+                    public void operationFailed(Object ctx, PubSubException exception) {\n+                        channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));\n+                        unsubStats.incrementFailedOps();\n+                    }\n+                    @Override\n+                    public void operationFinished(Object ctx, Void resultOfOperation) {\n+                        // remove the topic subscription from subscription channels\n+                        subChannelMgr.remove(new TopicSubscriber(topic, subscriberId),\n+                                             channel);\n+                        channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId()));\n+                        unsubStats.updateLatency(System.currentTimeMillis() - requestTime);\n+                    }\n+                }, ctx);\n             }\n         }, null);\n "},{"sha":"c06f03a2cc0b7c14fd823424cc6d22bedc1f6607","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -56,6 +56,7 @@\n import org.apache.hedwig.server.common.TerminateJVMExceptionHandler;\n import org.apache.hedwig.server.delivery.DeliveryManager;\n import org.apache.hedwig.server.delivery.FIFODeliveryManager;\n+import org.apache.hedwig.server.handlers.CloseSubscriptionHandler;\n import org.apache.hedwig.server.handlers.ConsumeHandler;\n import org.apache.hedwig.server.handlers.Handler;\n import org.apache.hedwig.server.handlers.NettyHandlerBean;\n@@ -227,8 +228,11 @@ protected TopicManager instantiateTopicManager() throws IOException {\n         handlers.put(OperationType.PUBLISH, new PublishHandler(tm, pm, conf));\n         handlers.put(OperationType.SUBSCRIBE,\n                      new SubscribeHandler(conf, tm, dm, pm, sm, subChannelMgr));\n-        handlers.put(OperationType.UNSUBSCRIBE, new UnsubscribeHandler(tm, conf, sm, dm));\n+        handlers.put(OperationType.UNSUBSCRIBE,\n+                     new UnsubscribeHandler(conf, tm, sm, dm, subChannelMgr));\n         handlers.put(OperationType.CONSUME, new ConsumeHandler(tm, sm, conf));\n+        handlers.put(OperationType.CLOSESUBSCRIPTION,\n+                     new CloseSubscriptionHandler(conf, tm, sm, dm, subChannelMgr));\n         handlers = Collections.unmodifiableMap(handlers);\n         return handlers;\n     }"},{"sha":"5552265111868706c66fca38e8b95507bc126004","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -38,6 +38,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionState;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionEvent;\n import org.apache.hedwig.protoextensions.MessageIdUtils;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n@@ -276,7 +277,8 @@ private void finish() {\n                                            + subId.toStringUtf8() + \") when losing topic\");\n                             }\n                             if (null != dm) {\n-                                dm.stopServingSubscriber(topic, subId);\n+                                dm.stopServingSubscriber(topic, subId, SubscriptionEvent.TOPIC_MOVED,\n+                                                         noopCallback, null);\n                             }\n                         }\n                     }\n@@ -578,6 +580,28 @@ public void setConsumeSeqIdForSubscriber(ByteString topic, ByteString subscriber\n         queuer.pushAndMaybeRun(topic, new ConsumeOp(topic, subscriberId, consumeSeqId, callback, ctx));\n     }\n \n+    private class CloseSubscriptionOp extends TopicOpQueuer.AsynchronousOp<Void> {\n+\n+        public CloseSubscriptionOp(ByteString topic, ByteString subscriberId,\n+                                   Callback<Void> callback, Object ctx) {\n+            queuer.super(topic, callback, ctx);\n+        }\n+\n+        @Override\n+        public void run() {\n+            // TODO: BOOKKEEPER-412: we might need to move the loaded subscription\n+            //                       to reclaim memory\n+            // But for now we do nothing\n+            cb.operationFinished(ctx, null);\n+        }\n+    }\n+\n+    @Override\n+    public void closeSubscription(ByteString topic, ByteString subscriberId,\n+                                  Callback<Void> callback, Object ctx) {\n+        queuer.pushAndMaybeRun(topic, new CloseSubscriptionOp(topic, subscriberId, callback, ctx));\n+    }\n+\n     private class UnsubscribeOp extends TopicOpQueuer.AsynchronousOp<Void> {\n         ByteString subscriberId;\n "},{"sha":"eadebcb50bc5e2a1a895e9728124d02799b0d390","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/SubscriptionManager.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -63,6 +63,21 @@ public void serveSubscribeRequest(ByteString topic, SubscribeRequest subRequest,\n     public void setConsumeSeqIdForSubscriber(ByteString topic, ByteString subscriberId, MessageSeqId consumeSeqId,\n             Callback<Void> callback, Object ctx);\n \n+    /**\n+     * Close a particular subscription\n+     *\n+     * @param topic\n+     *          Topic Name\n+     * @param subscriberId\n+     *          Subscriber Id\n+     * @param callback\n+     *          Callback\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void closeSubscription(ByteString topic, ByteString subscriberId,\n+                                  Callback<Void> callback, Object ctx);\n+\n     /**\n      * Delete a particular subscription\n      *"},{"sha":"bf74df1ee5fc156b7545462946359a1a993669e6","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestCloseSubscription.java","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestCloseSubscription.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestCloseSubscription.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestCloseSubscription.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -0,0 +1,153 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.client.netty;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.apache.hedwig.client.api.MessageHandler;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.apache.hedwig.client.data.PubSubData;\n+import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n+import org.apache.hedwig.protocol.PubSubProtocol.ResponseBody;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n+import org.apache.hedwig.server.HedwigHubTestBase;\n+import org.apache.hedwig.util.Callback;\n+\n+/**\n+ * TODO: it is a temp test for close subscription request. after\n+ * multiplexing channel manager is implemented, remove this test.\n+ */\n+public class TestCloseSubscription extends HedwigHubTestBase {\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        numServers = 1;\n+        super.setUp();\n+    }\n+\n+    @Test\n+    public void testCloseSubscriptionRequest() throws Exception {\n+        HedwigClientImpl client = new HedwigClientImpl(new ClientConfiguration());\n+        Publisher pub = client.getPublisher();\n+        Subscriber sub = client.getSubscriber();\n+\n+        ByteString topic = ByteString.copyFromUtf8(\"testCloseSubscriptionRequest\"); \n+        ByteString subid = ByteString.copyFromUtf8(\"mysubid\");\n+        sub.subscribe(topic, subid, CreateOrAttach.CREATE);\n+\n+        final int X = 20;\n+        final AtomicInteger expected = new AtomicInteger(1);\n+        final CountDownLatch firstLatch = new CountDownLatch(1);\n+        final CountDownLatch secondLatch = new CountDownLatch(1);\n+        sub.startDelivery(topic, subid, new MessageHandler() {\n+            @Override\n+            public synchronized void deliver(ByteString topic, ByteString subscriberId,\n+                                             Message msg,\n+                                             Callback<Void> callback, Object context) {\n+                try {\n+                    int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+                    logger.debug(\"Received message {},\", value);\n+\n+                    if (value == expected.get()) {\n+                        expected.incrementAndGet();\n+                    } else {\n+                        // error condition\n+                        logger.error(\"Did not receive expected value, expected {}, got {}\",\n+                                     expected.get(), value);\n+                        expected.set(0);\n+                        firstLatch.countDown();\n+                        secondLatch.countDown();\n+                    }\n+                    if (expected.get() == X+1) {\n+                        firstLatch.countDown();\n+                    }\n+                    if (expected.get() > X+1) {\n+                        secondLatch.countDown();\n+                    }\n+                    callback.operationFinished(context, null);\n+                } catch (Exception e) {\n+                    logger.error(\"Received bad message\", e);\n+                    firstLatch.countDown();\n+                    secondLatch.countDown();\n+                }\n+            }\n+        });\n+\n+        // first publish \n+        for (int i=1; i<=X; i++) {\n+            pub.publish(topic, Message.newBuilder().setBody(\n+                               ByteString.copyFromUtf8(String.valueOf(i))).build());\n+        }\n+\n+        assertTrue(\"Timed out waiting for messages \" + (X+1),\n+                   firstLatch.await(10, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected messages with only \" + (X+1), X+1, expected.get());\n+\n+        final CountDownLatch closeSubLatch = new CountDownLatch(1);\n+        Callback<ResponseBody> closeCb = new Callback<ResponseBody>() {\n+            @Override\n+            public void operationFinished(Object ctx, ResponseBody respBody) {\n+                closeSubLatch.countDown();\n+            }\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException exception) {\n+                closeSubLatch.countDown();\n+            }\n+        };\n+\n+        PubSubData pubSubData = new PubSubData(topic, null, subid,\n+                                               OperationType.CLOSESUBSCRIPTION,\n+                                               SubscriptionOptions.newBuilder().build(),\n+                                               closeCb, null);\n+        client.getHChannelManager().submitOp(pubSubData);\n+        closeSubLatch.await(10, TimeUnit.SECONDS);\n+\n+        // second publish\n+        for (int i=X+1; i<=2*X; i++) {\n+            pub.publish(topic, Message.newBuilder().setBody(\n+                               ByteString.copyFromUtf8(String.valueOf(i))).build());\n+        }\n+\n+        assertFalse(\"Receive more messages than \" + X,\n+                    secondLatch.await(3, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected message with \" + (X + 1),\n+                     X + 1, expected.get());\n+\n+        sub.stopDelivery(topic, subid);\n+        sub.closeSubscription(topic, subid);\n+\n+        client.close();\n+    }\n+\n+    \n+\n+}"},{"sha":"14e5b1eda1c58624b719c5d2d4ec52a97a22ed65","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -24,7 +24,9 @@\n import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.filter.ServerMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionEvent;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n+import org.apache.hedwig.util.Callback;\n \n public class StubDeliveryManager implements DeliveryManager {\n \n@@ -62,8 +64,11 @@ public void startServingSubscription(ByteString topic, ByteString subscriberId,\n     }\n \n     @Override\n-    public void stopServingSubscriber(ByteString topic, ByteString subscriberId) {\n+    public void stopServingSubscriber(ByteString topic, ByteString subscriberId,\n+                                      SubscriptionEvent event,\n+                                      Callback<Void> cb, Object ctx) {\n         lastRequest.add(new TopicSubscriber(topic, subscriberId));\n+        cb.operationFinished(ctx, null);\n     }\n \n     @Override"},{"sha":"5bbf603ca3e48ff1c99573ca08c2c467c5a4dd11","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/d0807e31f6d531cee5898bea3c2af3e312dbe61b/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/handlers/TestSubUnsubHandler.java?ref=d0807e31f6d531cee5898bea3c2af3e312dbe61b","patch":"@@ -86,7 +86,7 @@ protected void setUp() throws Exception {\n         pubSubRequestPrototype = PubSubRequest.newBuilder().setProtocolVersion(ProtocolVersion.VERSION_ONE).setType(\n                                      OperationType.SUBSCRIBE).setTxnId(0).setTopic(topic).setSubscribeRequest(subRequestPrototype).build();\n \n-        ush = new UnsubscribeHandler(tm, conf, sm, dm);\n+        ush = new UnsubscribeHandler(conf, tm, sm, dm, subChannelMgr);\n     }\n \n     @Test"}]}

