{"sha":"d1823db0509fe49b0ce8140c620e4c5100427407","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMTgyM2RiMDUwOWZlNDliMGNlODE0MGM2MjBlNGM1MTAwNDI3NDA3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-10-27T16:53:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-10-27T16:53:34Z"},"message":"BOOKKEEPER-93: bookkeeper doesn't work correctly on OpenLedgerNoRecovery (Sijie Guo via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1189867 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5e003fcc54e65e2a663bc0e8679f2b8da4729eaf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5e003fcc54e65e2a663bc0e8679f2b8da4729eaf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d1823db0509fe49b0ce8140c620e4c5100427407","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d1823db0509fe49b0ce8140c620e4c5100427407","html_url":"https://github.com/apache/bookkeeper/commit/d1823db0509fe49b0ce8140c620e4c5100427407","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d1823db0509fe49b0ce8140c620e4c5100427407/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"68bdab655445f80314a0d2531e60e3b2e4d8fa17","url":"https://api.github.com/repos/apache/bookkeeper/commits/68bdab655445f80314a0d2531e60e3b2e4d8fa17","html_url":"https://github.com/apache/bookkeeper/commit/68bdab655445f80314a0d2531e60e3b2e4d8fa17"}],"stats":{"total":80,"additions":66,"deletions":14},"files":[{"sha":"dff9116dda7f3ab7001ef804bb03ac5c495fdd90","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/d1823db0509fe49b0ce8140c620e4c5100427407/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/d1823db0509fe49b0ce8140c620e4c5100427407/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=d1823db0509fe49b0ce8140c620e4c5100427407","patch":"@@ -56,6 +56,8 @@ BUGFIXES:\n \n   BOOKKEEPER-89: Bookkeeper API changes for initial Bookkeeper release (ivank)\n \n+  BOOKKEEPER-93: bookkeeper doesn't work correctly on OpenLedgerNoRecovery (Sijie Guo via ivank)\n+\n  hedwig-server/\n \n   BOOKKEEPER-43: NullPointException when releasing topic (Sijie Guo via breed)"},{"sha":"6f72e47340f23f7afffd0072847c34106e2ceea6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/d1823db0509fe49b0ce8140c620e4c5100427407/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/d1823db0509fe49b0ce8140c620e4c5100427407/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java?ref=d1823db0509fe49b0ce8140c620e4c5100427407","patch":"@@ -140,7 +140,7 @@ public void processResult(int rc, String path, Object ctx, String name) {\n          */\n         metadata.addEnsemble(new Long(0), ensemble);\n         try {\n-            lh = new LedgerHandle(bk, ledgerId, metadata, digestType, passwd);\n+            lh = new LedgerHandle(bk, ledgerId, metadata, digestType, passwd, false);\n         } catch (GeneralSecurityException e) {\n             LOG.error(\"Security exception while creating ledger: \" + ledgerId, e);\n             cb.createComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);"},{"sha":"8c2a54fc1dd4dc77a028c9eba31a5b6e724f037f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/d1823db0509fe49b0ce8140c620e4c5100427407/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/d1823db0509fe49b0ce8140c620e4c5100427407/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=d1823db0509fe49b0ce8140c620e4c5100427407","patch":"@@ -65,17 +65,19 @@\n     long length;\n     final DigestManager macManager;\n     final DistributionSchedule distributionSchedule;\n+    final boolean readOnly;\n \n     final Semaphore opCounterSem;\n     private Integer throttling = 5000;\n \n     final Queue<PendingAddOp> pendingAddOps = new ArrayDeque<PendingAddOp>();\n \n     LedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n-                 DigestType digestType, byte[] password)\n+                 DigestType digestType, byte[] password, boolean readOnly)\n             throws GeneralSecurityException, NumberFormatException {\n         this.bk = bk;\n         this.metadata = metadata;\n+        this.readOnly = readOnly;\n         if (metadata.isClosed()) {\n             lastAddConfirmed = lastAddPushed = metadata.close;\n             length = metadata.length;\n@@ -241,6 +243,11 @@ public void asyncClose(CloseCallback cb, Object ctx) {\n      * @param rc\n      */\n     private void asyncClose(final CloseCallback cb, final Object ctx, final int rc) {\n+        // in unsafe read mode, we should not close ledger, just callback\n+        if (readOnly) {\n+            cb.closeComplete(BKException.Code.OK, this, ctx);\n+            return;\n+        }\n \n         bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {\n \n@@ -397,6 +404,11 @@ public void asyncAddEntry(final byte[] data, final AddCallback cb,\n      */\n     public void asyncAddEntry(final byte[] data, final int offset, final int length,\n                               final AddCallback cb, final Object ctx) {\n+        if (readOnly) {\n+            LOG.error(\"Tries to add entry on a Read-Only ledger handle\");\n+            cb.addComplete(BKException.Code.IllegalOpException, this, -1, ctx);\n+            return;\n+        }\n         if (offset < 0 || length < 0\n                 || (offset + length) > data.length) {\n             throw new ArrayIndexOutOfBoundsException("},{"sha":"a68856c977c52ea7f52f8187fbaf3d0d8ecf705f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":28,"deletions":10,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/d1823db0509fe49b0ce8140c620e4c5100427407/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/d1823db0509fe49b0ce8140c620e4c5100427407/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=d1823db0509fe49b0ce8140c620e4c5100427407","patch":"@@ -24,6 +24,7 @@\n import java.io.IOException;\n import java.security.GeneralSecurityException;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.util.StringUtils;\n import org.apache.log4j.Logger;\n@@ -111,7 +112,7 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n         }\n \n         try {\n-            lh = new LedgerHandle(bk, ledgerId, metadata, digestType, passwd);\n+            lh = new LedgerHandle(bk, ledgerId, metadata, digestType, passwd, unsafe);\n         } catch (GeneralSecurityException e) {\n             LOG.error(\"Security exception while opening ledger: \" + ledgerId, e);\n             cb.openComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);\n@@ -128,16 +129,33 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n             return;\n         }\n \n-        if(!unsafe)\n+        if(!unsafe) {\n             lh.recover(new GenericCallback<Void>() {\n-            @Override\n-            public void operationComplete(int rc, Void result) {\n-                if (rc != BKException.Code.OK) {\n-                    cb.openComplete(BKException.Code.LedgerRecoveryException, null, LedgerOpenOp.this.ctx);\n-                } else {\n-                    cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);\n+                @Override\n+                public void operationComplete(int rc, Void result) {\n+                    if (rc != BKException.Code.OK) {\n+                        cb.openComplete(BKException.Code.LedgerRecoveryException, null, LedgerOpenOp.this.ctx);\n+                    } else {\n+                        cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);\n+                    }\n                 }\n-            }\n-        });\n+            });\n+        } else {\n+            lh.asyncReadLastConfirmed(new ReadLastConfirmedCallback() {\n+\n+                @Override\n+                public void readLastConfirmedComplete(int rc,\n+                        long lastConfirmed, Object ctx) {\n+                    if (rc != BKException.Code.OK) {\n+                        cb.openComplete(BKException.Code.ReadException, null, LedgerOpenOp.this.ctx);\n+                    } else {\n+                        lh.lastAddConfirmed = lh.lastAddPushed = lastConfirmed;\n+                        cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);\n+                    }\n+                }\n+                \n+            }, null);\n+            \n+        }\n     }\n }"},{"sha":"74b5d6f661466ebd7a093894262bb5a7b92b05b9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/d1823db0509fe49b0ce8140c620e4c5100427407/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d1823db0509fe49b0ce8140c620e4c5100427407/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=d1823db0509fe49b0ce8140c620e4c5100427407","patch":"@@ -50,6 +50,7 @@\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n+import org.junit.Assert;\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -812,7 +813,8 @@ public void testShutdown() throws IOException {\n             fail(\"Test failed due to interruption\");\n         }\n     }\n-\n+    \n+    @Test\n     public void testReadFromOpenLedger() throws IOException {\n         try {\n             // Create a ledger\n@@ -830,8 +832,26 @@ public void testReadFromOpenLedger() throws IOException {\n                 lh.addEntry(entry.array());\n                 if(i == numEntriesToWrite/2) {\n                     LedgerHandle lhOpen = bkc.openLedgerNoRecovery(ledgerId, digestType, ledgerPassword);\n-                    Enumeration<LedgerEntry> readEntry = lh.readEntries(i, i);\n+                    // no recovery opened ledger 's last confirmed entry id is less than written\n+                    // and it just can read until (i-1)\n+                    int toRead = i - 1;\n+                    Enumeration<LedgerEntry> readEntry = lhOpen.readEntries(toRead, toRead);\n                     assertTrue(\"Enumeration of ledger entries has no element\", readEntry.hasMoreElements() == true);\n+                    LedgerEntry e = readEntry.nextElement();\n+                    assertEquals(toRead, e.getEntryId());\n+                    Assert.assertArrayEquals(entries.get(toRead), e.getEntry());\n+                    // should not written to a read only ledger\n+                    try {\n+                        lhOpen.addEntry(entry.array());\n+                        fail(\"Should have thrown an exception here\");\n+                    } catch (BKException.BKIllegalOpException bkioe) {\n+                        // this is the correct response\n+                    } catch (Exception ex) {\n+                        LOG.error(\"Unexpected exception\", ex);\n+                        fail(\"Unexpected exception\");\n+                    }\n+                    // close read only ledger should not change metadata\n+                    lhOpen.close();\n                 }\n             }\n "}]}

