{"sha":"d1ad860f8e83530e0d8f1498a35da2e9fbb85962","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMWFkODYwZjhlODM1MzBlMGQ4ZjE0OThhMzVkYTJlOWZiYjg1OTYy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-12T17:01:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-12T17:01:05Z"},"message":"BOOKKEEPER-604: Ledger storage can log an exception if GC happens concurrently. (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1513198 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c983a2b4a504685ce434be4e348f65c5b5a6f2b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7c983a2b4a504685ce434be4e348f65c5b5a6f2b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d1ad860f8e83530e0d8f1498a35da2e9fbb85962","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d1ad860f8e83530e0d8f1498a35da2e9fbb85962","html_url":"https://github.com/apache/bookkeeper/commit/d1ad860f8e83530e0d8f1498a35da2e9fbb85962","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d1ad860f8e83530e0d8f1498a35da2e9fbb85962/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"22509a7a2c8acbd5cce182529169fc0057e55b0d","url":"https://api.github.com/repos/apache/bookkeeper/commits/22509a7a2c8acbd5cce182529169fc0057e55b0d","html_url":"https://github.com/apache/bookkeeper/commit/22509a7a2c8acbd5cce182529169fc0057e55b0d"}],"stats":{"total":107,"additions":93,"deletions":14},"files":[{"sha":"043f667142b7fb667017981028f1cfbf4193d3ea","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/d1ad860f8e83530e0d8f1498a35da2e9fbb85962/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/d1ad860f8e83530e0d8f1498a35da2e9fbb85962/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=d1ad860f8e83530e0d8f1498a35da2e9fbb85962","patch":"@@ -84,6 +84,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-663: HierarchicalLedgerManager iterator is missing some ranges and the last ledger in the range (mmerli via ivank)\n \n+        BOOKKEEPER-604: Ledger storage can log an exception if GC happens concurrently. (sijie & ivank via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"d472ead9170789577d3c45d4185a792a705c97a0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/d1ad860f8e83530e0d8f1498a35da2e9fbb85962/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/d1ad860f8e83530e0d8f1498a35da2e9fbb85962/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=d1ad860f8e83530e0d8f1498a35da2e9fbb85962","patch":"@@ -416,19 +416,25 @@ private void moveLedgerIndexFile(Long l, FileInfo fi) throws NoWritableLedgerDir\n      * @throws IOException\n      */\n     private void flushLedger(long l) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(l, null);\n+            flushLedger(l, fi);\n+        } catch (Bookie.NoLedgerException nle) {\n+            // ledger has been deleted\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    private void flushLedger(long l, FileInfo fi) throws IOException {\n         LinkedList<Long> firstEntryList;\n         synchronized(this) {\n             HashMap<Long, LedgerEntryPage> pageMap = pages.get(l);\n             if (pageMap == null || pageMap.isEmpty()) {\n-                FileInfo fi = null;\n-                try {\n-                    fi = getFileInfo(l, null);\n-                    fi.flushHeader();\n-                } finally {\n-                    if (null != fi) {\n-                        fi.release();\n-                    }\n-                }\n+                fi.flushHeader();\n                 return;\n             }\n             firstEntryList = new LinkedList<Long>();\n@@ -450,7 +456,6 @@ private void flushLedger(long l) throws IOException {\n \n         // Now flush all the pages of a ledger\n         List<LedgerEntryPage> entries = new ArrayList<LedgerEntryPage>(firstEntryList.size());\n-        FileInfo fi = null;\n         try {\n             for(Long firstEntry: firstEntryList) {\n                 LedgerEntryPage lep = getLedgerEntryPage(l, firstEntry, true);\n@@ -465,7 +470,6 @@ public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n                     }\n                     });\n             ArrayList<Integer> versions = new ArrayList<Integer>(entries.size());\n-            fi = getFileInfo(l, null);\n             // flush the header if necessary\n             fi.flushHeader();\n             int start = 0;\n@@ -497,9 +501,6 @@ public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n             for(LedgerEntryPage lep: entries) {\n                 lep.releasePage();\n             }\n-            if (fi != null) {\n-                fi.release();\n-            }\n         }\n     }\n "},{"sha":"340bc2bc11e6ce1a0cab78bf1de2f80786781881","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/d1ad860f8e83530e0d8f1498a35da2e9fbb85962/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/d1ad860f8e83530e0d8f1498a35da2e9fbb85962/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=d1ad860f8e83530e0d8f1498a35da2e9fbb85962","patch":"@@ -30,6 +30,9 @@\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.SnapshotMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n import org.junit.Assert;\n@@ -368,6 +371,79 @@ public void testSyncThreadNPE() throws IOException {\n         }\n     }\n \n+    /**\n+     * Race where a flush would fail because a garbage collection occurred at\n+     * the wrong time.\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-604}\n+     */\n+    @Test(timeout=60000)\n+    public void testFlushDeleteRace() throws Exception {\n+        newLedgerCache();\n+        final AtomicInteger rc = new AtomicInteger(0);\n+        final LinkedBlockingQueue<Long> ledgerQ = new LinkedBlockingQueue<Long>(1);\n+        final byte[] masterKey = \"masterKey\".getBytes();\n+        Thread newLedgerThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        for (int i = 0; i < 1000 && rc.get() == 0; i++) {\n+                            ledgerCache.setMasterKey(i, masterKey);\n+                            ledgerQ.put((long)i);\n+                        }\n+                    } catch (Exception e) {\n+                        rc.set(-1);\n+                        LOG.error(\"Exception in new ledger thread\", e);\n+                    }\n+                }\n+            };\n+        newLedgerThread.start();\n+\n+        Thread flushThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        while (true) {\n+                            Long id = ledgerQ.peek();\n+                            if (id == null) {\n+                                continue;\n+                            }\n+                            LOG.info(\"Put entry for {}\", id);\n+                            try {\n+                                ledgerCache.putEntryOffset((long)id, 1, 0);\n+                            } catch (Bookie.NoLedgerException nle) {\n+                                //ignore\n+                            }\n+                            ledgerCache.flushLedger(true);\n+                        }\n+                    } catch (Exception e) {\n+                        rc.set(-1);\n+                        LOG.error(\"Exception in flush thread\", e);\n+                    }\n+                }\n+            };\n+        flushThread.start();\n+\n+        Thread deleteThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        while (true) {\n+                            long id = ledgerQ.take();\n+                            LOG.info(\"Deleting {}\", id);\n+                            ledgerCache.deleteLedger(id);\n+                        }\n+                    } catch (Exception e) {\n+                        rc.set(-1);\n+                        LOG.error(\"Exception in delete thread\", e);\n+                    }\n+                }\n+            };\n+        deleteThread.start();\n+\n+        newLedgerThread.join();\n+        assertEquals(\"Should have been no errors\", rc.get(), 0);\n+\n+        deleteThread.interrupt();\n+        flushThread.interrupt();\n+    }\n+\n     private ByteBuffer generateEntry(long ledger, long entry) {\n         byte[] data = (\"ledger-\" + ledger + \"-\" + entry).getBytes();\n         ByteBuffer bb = ByteBuffer.wrap(new byte[8 + 8 + data.length]);"}]}

