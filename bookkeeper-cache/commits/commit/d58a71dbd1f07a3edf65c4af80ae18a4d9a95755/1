{"sha":"d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNThhNzFkYmQxZjA3YTNlZGY2NWM0YWY4MGFlMThhNGQ5YTk1NzU1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-13T11:51:05Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-13T11:51:05Z"},"message":"BOOKKEEPER-458:  Annoy BKReadException error when changing ledger. (jiannan via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421239 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b05e5b655752dac0d4b4908c204e7b625a5948c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5b05e5b655752dac0d4b4908c204e7b625a5948c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","html_url":"https://github.com/apache/bookkeeper/commit/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","url":"https://api.github.com/repos/apache/bookkeeper/commits/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","html_url":"https://github.com/apache/bookkeeper/commit/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de"}],"stats":{"total":33,"additions":33,"deletions":0},"files":[{"sha":"17414f3a38b5efc644c77831fbcc5f793c5241d2","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","patch":"@@ -186,6 +186,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-461: Delivery throughput degrades when there are lots of publishers w/ high traffic. (sijie via ivank)\n \n+\tBOOKKEEPER-458:  Annoy BKReadException error when changing ledger. (jiannan via fpj)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-467: Allocate ports for testing dynamically (ivank)"},{"sha":"0de49fc1bfd2a30c99926753b4c3e6a5bfefc3af","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","patch":"@@ -1062,6 +1062,7 @@ public void safeCreateComplete(int rc, LedgerHandle lh, Object ctx) {\n                 LedgerRange lastRange = LedgerRange.newBuilder().setLedgerId(lh.getId())\n                                         .setStartSeqIdIncluded(startSeqId).build();\n                 topicInfo.currentLedgerRange = new InMemoryLedgerRange(lastRange, lh);\n+                topicInfo.lastEntryIdAckedInCurrentLedger = -1;\n \n                 // Persist the fact that we started this new\n                 // ledger to ZK"},{"sha":"f370266234360ffd4e0197f8cdd8cb4778a2d86b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java?ref=d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","patch":"@@ -77,6 +77,7 @@\n     BookKeeperTestBase bktb;\n     private final int numBookies = 3;\n     private final long readDelay = 2000L;\n+    private final int maxEntriesPerLedger = 10;\n \n     ServerConfiguration conf;\n     ScheduledExecutorService scheduler;\n@@ -272,6 +273,10 @@ public int getMessagesConsumedThreadRunInterval() {\n             public int getConsumeInterval() {\n                 return 0;\n             }\n+            @Override\n+            public long getMaxEntriesPerLedger() {\n+                return maxEntriesPerLedger;\n+            }\n         };\n         org.apache.bookkeeper.conf.ClientConfiguration bkClientConf =\n                 new org.apache.bookkeeper.conf.ClientConfiguration();\n@@ -635,6 +640,31 @@ public void inconsistentSubscriptionStateAndLedgerRanges(int failedCount) throws\n         }\n     }\n \n+    @Test\n+    // Add this test case for BOOKKEEPER-458\n+    public void testReadWhenTopicChangeLedger() throws Exception {\n+        final ByteString topic = ByteString.copyFromUtf8(\"testReadWhenTopicChangeLedger\");\n+        LinkedList<Message> msgs = new LinkedList<Message>();\n+\n+        // Write maxEntriesPerLedger entries to make topic change ledger\n+        acquireTopic(topic);\n+        msgs.addAll(publishMessages(topic, maxEntriesPerLedger));\n+\n+        // Notice, change ledger operation is asynchronous, so we should wait!!!\n+        Thread.sleep(2000);\n+\n+        // Issue a scan request right start from the new ledger\n+        LinkedBlockingQueue<Boolean> statusQueue = new LinkedBlockingQueue<Boolean>();\n+        RangeScanRequest scan = new RangeScanRequest(topic, maxEntriesPerLedger + 1, 1, Long.MAX_VALUE,\n+                new RangeScanVerifier(msgs, null), statusQueue);\n+        manager.scanMessages(scan);\n+        Boolean b = statusQueue.poll(10 * readDelay, TimeUnit.MILLISECONDS);\n+        if (b == null) {\n+            fail(\"Scan request timeout\");\n+        }\n+        assertFalse(\"Expect none message is scanned on the new created ledger\", b);\n+    }\n+\n     class TestCallback implements Callback<PubSubProtocol.MessageSeqId> {\n \n         @Override"}]}

