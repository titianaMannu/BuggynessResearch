{"sha":"d607b366ba493617408888a768a99ee3f3ffb976","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNjA3YjM2NmJhNDkzNjE3NDA4ODg4YTc2OGE5OWVlM2YzZmZiOTc2","commit":{"author":{"name":"Matteo Merli","email":"mmerli@apache.org","date":"2016-04-05T06:50:37Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2016-04-05T06:50:37Z"},"message":"BOOKKEEPER-578: LedgerCacheImpl is reserving 1/3 of Heap size but allocates NonHeap memory\n\nAuthor: Matteo Merli <mmerli@apache.org>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nCloses #28 from merlimat/bk-578","tree":{"sha":"c5387783136a5c7ef8c37e34c46d40b125399291","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c5387783136a5c7ef8c37e34c46d40b125399291"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d607b366ba493617408888a768a99ee3f3ffb976","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d607b366ba493617408888a768a99ee3f3ffb976","html_url":"https://github.com/apache/bookkeeper/commit/d607b366ba493617408888a768a99ee3f3ffb976","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d607b366ba493617408888a768a99ee3f3ffb976/comments","author":{"login":"merlimat","id":62500,"node_id":"MDQ6VXNlcjYyNTAw","avatar_url":"https://avatars.githubusercontent.com/u/62500?v=4","gravatar_id":"","url":"https://api.github.com/users/merlimat","html_url":"https://github.com/merlimat","followers_url":"https://api.github.com/users/merlimat/followers","following_url":"https://api.github.com/users/merlimat/following{/other_user}","gists_url":"https://api.github.com/users/merlimat/gists{/gist_id}","starred_url":"https://api.github.com/users/merlimat/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/merlimat/subscriptions","organizations_url":"https://api.github.com/users/merlimat/orgs","repos_url":"https://api.github.com/users/merlimat/repos","events_url":"https://api.github.com/users/merlimat/events{/privacy}","received_events_url":"https://api.github.com/users/merlimat/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"b1c12c0f41b7c27b2452fef311f12077d771f431","url":"https://api.github.com/repos/apache/bookkeeper/commits/b1c12c0f41b7c27b2452fef311f12077d771f431","html_url":"https://github.com/apache/bookkeeper/commit/b1c12c0f41b7c27b2452fef311f12077d771f431"}],"stats":{"total":68,"additions":64,"deletions":4},"files":[{"sha":"30eaf72f76198f19e9c3ad2718b3b6347b8fa1dc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/d607b366ba493617408888a768a99ee3f3ffb976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java","raw_url":"https://github.com/apache/bookkeeper/raw/d607b366ba493617408888a768a99ee3f3ffb976/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexInMemPageMgr.java?ref=d607b366ba493617408888a768a99ee3f3ffb976","patch":"@@ -23,6 +23,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.stats.Gauge;\n import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.util.DirectMemoryUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -332,14 +333,16 @@ public IndexInMemPageMgr(int pageSize,\n         this.indexPersistenceManager = indexPersistenceManager;\n         this.pageMapAndList = new InMemPageCollection();\n \n+        long maxDirectMemory = DirectMemoryUtils.maxDirectMemory();\n+\n         if (conf.getPageLimit() <= 0) {\n-            // allocate half of the memory to the page cache\n-            this.pageLimit = (int) ((Runtime.getRuntime().maxMemory() / 3) / this.pageSize);\n+            // By default, allocate a third of the direct memory to the page cache\n+            this.pageLimit = (int) ((maxDirectMemory / 3) / this.pageSize);\n         } else {\n             this.pageLimit = conf.getPageLimit();\n         }\n-        LOG.info(\"maxMemory = {}, pageSize = {}, pageLimit = {}\", new Object[] { Runtime.getRuntime().maxMemory(),\n-                        pageSize, pageLimit });\n+        LOG.info(\"maxDirectMemory = {}, pageSize = {}, pageLimit = {}\",\n+                new Object[] { maxDirectMemory, pageSize, pageLimit });\n         // Expose Stats\n         statsLogger.registerGauge(NUM_INDEX_PAGES, new Gauge<Number>() {\n             @Override"},{"sha":"9f82bb2b2df78df12efe4729a5f20f64c066f29a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DirectMemoryUtils.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/d607b366ba493617408888a768a99ee3f3ffb976/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DirectMemoryUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/d607b366ba493617408888a768a99ee3f3ffb976/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DirectMemoryUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DirectMemoryUtils.java?ref=d607b366ba493617408888a768a99ee3f3ffb976","patch":"@@ -0,0 +1,57 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.util;\n+\n+import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import java.lang.reflect.Method;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DirectMemoryUtils {\n+    /**\n+     * Returns the max configured size of direct memory for the JVM process.\n+     *\n+     * Direct memory can be specified with the flag <code>-XX:MaxDirectMemorySize=8G</code> on the command line. If not\n+     * specified, the default value will be set to the max size of the JVM heap.\n+     */\n+    public static long maxDirectMemory() {\n+        try {\n+\n+            Class<?> VM = Class.forName(\"sun.misc.VM\");\n+            Method maxDirectMemory = VM.getDeclaredMethod(\"maxDirectMemory\");\n+            Object result = maxDirectMemory.invoke(null, (Object[]) null);\n+\n+            checkNotNull(result);\n+            checkArgument(result instanceof Long);\n+            return (Long) result;\n+        } catch (Exception e) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Failed to get maxDirectMemory size from sun.misc.VM, falling back to max heap size\", e);\n+            }\n+            return Runtime.getRuntime().maxMemory();\n+        }\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DirectMemoryUtils.class);\n+}"}]}

