{"sha":"da088187d80bf0b935aad14c1a4aa73e4920378f","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkYTA4ODE4N2Q4MGJmMGI5MzVhYWQxNGMxYTRhYTczZTQ5MjAzNzhm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-29T17:46:36Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-11-29T17:46:36Z"},"message":"BOOKKEEPER-62: Bookie can not start when encountering corrupted records (breed via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1207997 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"45a73dc014e8bbe0ef3c65d1faeaf36bb6efe497","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/45a73dc014e8bbe0ef3c65d1faeaf36bb6efe497"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/da088187d80bf0b935aad14c1a4aa73e4920378f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/da088187d80bf0b935aad14c1a4aa73e4920378f","html_url":"https://github.com/apache/bookkeeper/commit/da088187d80bf0b935aad14c1a4aa73e4920378f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/da088187d80bf0b935aad14c1a4aa73e4920378f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"504867718d934b66dfa4df8edc55c9c888aa3d42","url":"https://api.github.com/repos/apache/bookkeeper/commits/504867718d934b66dfa4df8edc55c9c888aa3d42","html_url":"https://github.com/apache/bookkeeper/commit/504867718d934b66dfa4df8edc55c9c888aa3d42"}],"stats":{"total":151,"additions":124,"deletions":27},"files":[{"sha":"b06e8702027bfd7195acc39e2f3861ba8291bc3d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/da088187d80bf0b935aad14c1a4aa73e4920378f/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/da088187d80bf0b935aad14c1a4aa73e4920378f/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=da088187d80bf0b935aad14c1a4aa73e4920378f","patch":"@@ -86,6 +86,8 @@ BUGFIXES:\n \n   BOOKKEEPER-125: log4j still used in some places (ivank)\n \n+  BOOKKEEPER-62: Bookie can not start when encountering corrupted records (breed via ivank)\n+\n  hedwig-server/\n \n   BOOKKEEPER-43: NullPointException when releasing topic (Sijie Guo via breed)"},{"sha":"0d09308e7710a1f1d4f10dd121a12756362755a1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":32,"deletions":27,"changes":59,"blob_url":"https://github.com/apache/bookkeeper/blob/da088187d80bf0b935aad14c1a4aa73e4920378f/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/da088187d80bf0b935aad14c1a4aa73e4920378f/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=da088187d80bf0b935aad14c1a4aa73e4920378f","patch":"@@ -411,34 +411,39 @@ private void extractLedgersFromEntryLogs() throws IOException {\n             long pos = LOGFILE_HEADER_SIZE;\n             ConcurrentHashMap<Long, Boolean> entryLogLedgers = new ConcurrentHashMap<Long, Boolean>();\n             // Read through the entry log file and extract the ledger ID's.\n-            while (true) {\n-                // Check if we've finished reading the entry log file.\n-                if (pos >= bc.size()) {\n-                    break;\n-                }\n-                if (bc.read(sizeBuff, pos) != sizeBuff.capacity()) {\n-                    throw new IOException(\"Short read from entrylog \" + entryLogId);\n-                }\n-                pos += 4;\n-                sizeBuff.flip();\n-                int entrySize = sizeBuff.getInt();\n-                if (entrySize > 1024 * 1024) {\n-                    LOG.error(\"Sanity check failed for entry size of \" + entrySize + \" at location \" + pos + \" in \"\n-                              + entryLogId);\n-                }\n-                byte data[] = new byte[entrySize];\n-                ByteBuffer buff = ByteBuffer.wrap(data);\n-                int rc = bc.read(buff, pos);\n-                if (rc != data.length) {\n-                    throw new IOException(\"Short read for entryLog \" + entryLogId + \"@\" + pos + \"(\" + rc + \"!=\"\n-                                          + data.length + \")\");\n+            try {\n+                while (true) {\n+                    // Check if we've finished reading the entry log file.\n+                    if (pos >= bc.size()) {\n+                        break;\n+                    }\n+                    if (bc.read(sizeBuff, pos) != sizeBuff.capacity()) {\n+                        throw new IOException(\"Short read from entrylog \" + entryLogId);\n+                    }\n+                    pos += 4;\n+                    sizeBuff.flip();\n+                    int entrySize = sizeBuff.getInt();\n+                    if (entrySize > 1024 * 1024) {\n+                        LOG.error(\"Sanity check failed for entry size of \" + entrySize + \" at location \" + pos + \" in \"\n+                                + entryLogId);\n+                    }\n+                    byte data[] = new byte[entrySize];\n+                    ByteBuffer buff = ByteBuffer.wrap(data);\n+                    int rc = bc.read(buff, pos);\n+                    if (rc != data.length) {\n+                        throw new IOException(\"Short read for entryLog \" + entryLogId + \"@\" + pos + \"(\" + rc + \"!=\"\n+                                + data.length + \")\");\n+                    }\n+                    buff.flip();\n+                    long ledgerId = buff.getLong();\n+                    entryLogLedgers.put(ledgerId, true);\n+                    // Advance position to the next entry and clear sizeBuff.\n+                    pos += entrySize;\n+                    sizeBuff.clear();\n                 }\n-                buff.flip();\n-                long ledgerId = buff.getLong();\n-                entryLogLedgers.put(ledgerId, true);\n-                // Advance position to the next entry and clear sizeBuff.\n-                pos += entrySize;\n-                sizeBuff.clear();\n+            } catch(IOException e) {\n+              LOG.info(\"Premature exception when processing \" + entryLogId + \n+                       \"recovery will take care of the problem\", e);\n             }\n             LOG.info(\"Retrieved all ledgers that comprise entryLogId: \" + entryLogId + \", values: \" + entryLogLedgers);\n             entryLogs2LedgersMap.put(entryLogId, entryLogLedgers);"},{"sha":"287454f135dfcbda722642edaceb175a937439eb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/apache/bookkeeper/blob/da088187d80bf0b935aad14c1a4aa73e4920378f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/da088187d80bf0b935aad14c1a4aa73e4920378f/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=da088187d80bf0b935aad14c1a4aa73e4920378f","patch":"@@ -0,0 +1,90 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.lang.reflect.Field;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class EntryLogTest extends TestCase {\n+    static Logger LOG = LoggerFactory.getLogger(EntryLogTest.class);\n+\n+    @Before\n+    public void setUp() throws Exception {\n+    }\n+\n+    @Test\n+    public void testCorruptEntryLog() throws IOException, SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {\n+        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n+        // create some entries\n+        EntryLogger logger = new EntryLogger(conf, null);\n+        logger.addEntry(1, generateEntry(1, 1));\n+        logger.addEntry(3, generateEntry(3, 1));\n+        logger.addEntry(2, generateEntry(2, 1));\n+        logger.flush();\n+        // now lets truncate the file to corrupt the last entry, which simulates a partial write\n+        File f = new File(tmpDir, \"0.log\");\n+        RandomAccessFile raf = new RandomAccessFile(f, \"rw\");\n+        raf.setLength(raf.length()-10);\n+        raf.close();\n+        // now see which ledgers are in the log\n+        logger = new EntryLogger(conf, null);\n+        Field entryLogs2LedgersMapField = logger.getClass().getDeclaredField(\"entryLogs2LedgersMap\");\n+        entryLogs2LedgersMapField.setAccessible(true);\n+        @SuppressWarnings(\"unchecked\")\n+        Map<Long, Map<Long, Boolean>> ledgersMap = (Map<Long, Map<Long, Boolean>>) entryLogs2LedgersMapField.get(logger);\n+        LOG.info(\"LedgersMap.get(0) {}\", ledgersMap.get(0L));\n+        assertNotNull(ledgersMap.get(0L).get(1L));\n+        assertNull(ledgersMap.get(0L).get(2L));\n+        assertNotNull(ledgersMap.get(0L).get(3L));\n+    }\n+\n+    private ByteBuffer generateEntry(long ledger, long entry) {\n+        ByteBuffer bb = ByteBuffer.wrap(new byte[64]);\n+        bb.putLong(ledger);\n+        bb.putLong(entry);\n+        bb.put((\"ledger\"+ledger).getBytes());\n+        bb.flip();\n+        return bb;\n+    }\n+    \n+    @After\n+    public void tearDown() throws Exception {\n+    }\n+\n+}"}]}

