{"sha":"da8864ad7cd53d302eb27ab31f942bdbae160a98","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkYTg4NjRhZDdjZDUzZDMwMmViMjdhYjMxZjk0MmJkYmFlMTYwYTk4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-15T14:58:00Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-01-15T14:58:00Z"},"message":"BOOKKEEPER-662: Major GC should kick in immediately if remaining space reaches a warning threshold (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1558410 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fcfa206229217b0ca6183731b8090307c3123845","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fcfa206229217b0ca6183731b8090307c3123845"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/da8864ad7cd53d302eb27ab31f942bdbae160a98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/da8864ad7cd53d302eb27ab31f942bdbae160a98","html_url":"https://github.com/apache/bookkeeper/commit/da8864ad7cd53d302eb27ab31f942bdbae160a98","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/da8864ad7cd53d302eb27ab31f942bdbae160a98/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"79a73f0f71be5701b44ab47c14f92945989b1417","url":"https://api.github.com/repos/apache/bookkeeper/commits/79a73f0f71be5701b44ab47c14f92945989b1417","html_url":"https://github.com/apache/bookkeeper/commit/79a73f0f71be5701b44ab47c14f92945989b1417"}],"stats":{"total":292,"additions":236,"deletions":56},"files":[{"sha":"ca60c930a89d0649a77125ad77112bfb8f401d77","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -134,6 +134,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-714: Logging channel exceptions in PerChannelBookieClient (sijie)\n \n+        BOOKKEEPER-662: Major GC should kick in immediately if remaining space reaches a warning threshold (sijie via ivank)\n+\n       hedwig-server:\n \n         BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)"},{"sha":"9142cd191aacdeb6557d1df9b6e7e887b89c7510","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -560,6 +560,11 @@ public void diskFull(File disk) {\n                 // Nothing needs to be handled here.\n             }\n \n+            @Override\n+            public void diskAlmostFull(File disk) {\n+                // Nothing needs to be handled here.\n+            }\n+\n             @Override\n             public void diskFailed(File disk) {\n                 // Shutdown the bookie on disk failure."},{"sha":"cff1f71707f3fe6249ae985a63979afdd7f1c145","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -210,6 +210,15 @@ public void diskFull(File disk) {\n                 }\n             }\n \n+            @Override\n+            public void diskAlmostFull(File disk) {\n+                // If the current entry log disk is almost full, then create new entry\n+                // log.\n+                if (currentDir != null && currentDir.equals(disk)) {\n+                    shouldCreateNewEntryLog.set(true);\n+                }\n+            }\n+\n             @Override\n             public void diskFailed(File disk) {\n                 // Nothing to handle here. Will be handled in Bookie"},{"sha":"6157f4277873295db6f68e4c648833846986f501","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -89,6 +89,9 @@\n     // track the last scanned successfully log id\n     long scannedLogId = 0;\n \n+    // Boolean to trigger a forced GC.\n+    final AtomicBoolean forceGarbageCollection = new AtomicBoolean(false);\n+\n     final GarbageCollector garbageCollector;\n     final GarbageCleaner garbageCleaner;\n \n@@ -273,6 +276,13 @@ public void clean(long ledgerId) {\n         lastMinorCompactionTime = lastMajorCompactionTime = MathUtils.now();\n     }\n \n+    synchronized void forceGC() {\n+        if (forceGarbageCollection.compareAndSet(false, true)) {\n+            LOG.info(\"Forced garbage collection triggered by thread: {}\", Thread.currentThread().getName());\n+            notify();\n+        }\n+    }\n+\n     @Override\n     public void run() {\n         while (running) {\n@@ -284,6 +294,10 @@ public void run() {\n                     continue;\n                 }\n             }\n+            boolean force = forceGarbageCollection.get();\n+            if (force) {\n+                LOG.info(\"Garbage collector thread forced to perform GC before expiry of wait time.\");\n+            }\n \n             // Extract all of the ledger ID's that comprise all of the entry logs\n             // (except for the current new one which is still being written to).\n@@ -296,8 +310,8 @@ public void run() {\n             doGcEntryLogs();\n \n             long curTime = MathUtils.now();\n-            if (enableMajorCompaction &&\n-                curTime - lastMajorCompactionTime > majorCompactionInterval) {\n+            if (force || (enableMajorCompaction &&\n+                curTime - lastMajorCompactionTime > majorCompactionInterval)) {\n                 // enter major compaction\n                 LOG.info(\"Enter major compaction\");\n                 doCompactEntryLogs(majorCompactionThreshold);\n@@ -307,13 +321,14 @@ public void run() {\n                 continue;\n             }\n \n-            if (enableMinorCompaction &&\n-                curTime - lastMinorCompactionTime > minorCompactionInterval) {\n+            if (force || (enableMinorCompaction &&\n+                curTime - lastMinorCompactionTime > minorCompactionInterval)) {\n                 // enter minor compaction\n                 LOG.info(\"Enter minor compaction\");\n                 doCompactEntryLogs(minorCompactionThreshold);\n                 lastMinorCompactionTime = MathUtils.now();\n             }\n+            forceGarbageCollection.set(false);\n         }\n         LOG.info(\"GarbageCollectorThread exited loop!\");\n     }"},{"sha":"0fa539146408d21451e33d7f085dbaa34957f41c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/IndexPersistenceMgr.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -348,6 +348,11 @@ public void diskFull(File disk) {\n                 // Nothing to handle here. Will be handled in Bookie\n             }\n \n+            @Override\n+            public void diskAlmostFull(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n             @Override\n             public void diskFailed(File disk) {\n                 // Nothing to handle here. Will be handled in Bookie"},{"sha":"191342c2337230b27b4448100c3700c4d1dbedf6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -21,11 +21,14 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n \n import org.apache.bookkeeper.bookie.CheckpointSource.Checkpoint;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.meta.LedgerManager;\n@@ -96,6 +99,36 @@ synchronized Checkpoint getLastCheckpoint() {\n                 null == indexDirsManager ? ledgerDirsManager : indexDirsManager);\n         gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n                 activeLedgers, ledgerManager);\n+        ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+    }\n+\n+    private LedgerDirsListener getLedgerDirsListener() {\n+        return new LedgerDirsListener() {\n+            @Override\n+            public void diskFailed(File disk) {\n+                // do nothing.\n+            }\n+\n+            @Override\n+            public void diskAlmostFull(File disk) {\n+                gcThread.forceGC();\n+            }\n+\n+            @Override\n+            public void diskFull(File disk) {\n+                gcThread.forceGC();\n+            }\n+\n+            @Override\n+            public void allDisksFull() {\n+                gcThread.forceGC();\n+            }\n+\n+            @Override\n+            public void fatalError() {\n+                // do nothing.\n+            }\n+        };\n     }\n \n     @Override"},{"sha":"23ee28fd5b20d0fc973b600a1a00357dc8e89902","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":20,"deletions":5,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -27,14 +27,16 @@\n import java.util.List;\n import java.util.Random;\n \n-import com.google.common.annotations.VisibleForTesting;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n+import org.apache.bookkeeper.util.DiskChecker.DiskWarnThresholdException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n /**\n  * This class manages ledger directories used by the bookie.\n  */\n@@ -45,9 +47,9 @@\n     private volatile List<File> filledDirs;\n     private final List<File> ledgerDirectories;\n     private volatile List<File> writableLedgerDirectories;\n-    private DiskChecker diskChecker;\n-    private List<LedgerDirsListener> listeners;\n-    private LedgerDirsMonitor monitor;\n+    private final DiskChecker diskChecker;\n+    private final List<LedgerDirsListener> listeners;\n+    private final LedgerDirsMonitor monitor;\n     private final Random rand = new Random();\n \n     public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n@@ -56,7 +58,7 @@ public LedgerDirsManager(ServerConfiguration conf, File[] dirs) {\n         this.writableLedgerDirectories = new ArrayList<File>(ledgerDirectories);\n         this.filledDirs = new ArrayList<File>();\n         listeners = new ArrayList<LedgerDirsManager.LedgerDirsListener>();\n-        diskChecker = new DiskChecker(conf.getDiskUsageThreshold());\n+        diskChecker = new DiskChecker(conf.getDiskUsageThreshold(), conf.getDiskUsageWarnThreshold());\n         monitor = new LedgerDirsMonitor(conf.getDiskCheckInterval());\n     }\n \n@@ -217,6 +219,10 @@ public void run() {\n                                 LOG.warn(\"{} has errors.\", dir, e);\n                                 listener.diskFailed(dir);\n                             }\n+                        } catch (DiskWarnThresholdException e) {\n+                            for (LedgerDirsListener listener : listeners) {\n+                                listener.diskAlmostFull(dir);\n+                            }\n                         } catch (DiskOutOfSpaceException e) {\n                             // Notify disk full to all listeners\n                             addToFilledDirs(dir);\n@@ -244,6 +250,8 @@ private void checkDirs(List<File> writableDirs)\n             for (File dir : writableDirs) {\n                 try {\n                     diskChecker.checkDir(dir);\n+                } catch (DiskWarnThresholdException e) {\n+                    // nop\n                 } catch (DiskOutOfSpaceException e) {\n                     addToFilledDirs(dir);\n                 }\n@@ -276,6 +284,13 @@ public NoWritableLedgerDirException(String errMsg) {\n          */\n         void diskFailed(File disk);\n \n+        /**\n+         * Notified when the disk usage warn threshold is exceeded on\n+         * the drive.\n+         * @param disk\n+         */\n+        void diskAlmostFull(File disk);\n+\n         /**\n          * This will be notified on disk detected as full\n          * "},{"sha":"6429c8bcd3af2322ab919aa96994a1a526958b8c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -80,6 +80,7 @@\n     protected final static String READ_ONLY_MODE_ENABLED = \"readOnlyModeEnabled\";\n     //Disk utilization\n     protected final static String DISK_USAGE_THRESHOLD = \"diskUsageThreshold\";\n+    protected final static String DISK_USAGE_WARN_THRESHOLD = \"diskUsageWarnThreshold\";\n     protected final static String DISK_CHECK_INTERVAL = \"diskCheckInterval\";\n     protected final static String AUDITOR_PERIODIC_CHECK_INTERVAL = \"auditorPeriodicCheckInterval\";\n     protected final static String AUTO_RECOVERY_DAEMON_ENABLED = \"autoRecoveryDaemonEnabled\";\n@@ -856,6 +857,27 @@ public boolean isReadOnlyModeEnabled() {\n         return getBoolean(READ_ONLY_MODE_ENABLED, false);\n     }\n \n+    /**\n+     * Set the warning threshold for disk usage.\n+     *\n+     * @param threshold warning threshold to force gc.\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setDiskUsageWarnThreshold(float threshold) {\n+        setProperty(DISK_USAGE_WARN_THRESHOLD, threshold);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns the warning threshold for disk usage. If disk usage\n+     * goes beyond this, a garbage collection cycle will be forced.\n+     * @return\n+     */\n+    public float getDiskUsageWarnThreshold() {\n+        return getFloat(DISK_USAGE_WARN_THRESHOLD, 0.90f);\n+    }\n+\n     /**\n      * Set the Disk free space threshold as a fraction of the total\n      * after which disk will be considered as full during disk check."},{"sha":"31f4fc8f0f79143637cbea32af567f0c816f2862","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","status":"modified","additions":42,"deletions":28,"changes":70,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -28,26 +28,42 @@\n  */\n public class DiskChecker {\n     private float diskUsageThreshold;\n+    private float diskUsageWarnThreshold;\n \n-    public static class DiskErrorException extends IOException {\n+    public abstract static class DiskException extends IOException {\n+        public DiskException(String msg) {\n+            super(msg);\n+        }\n+    }\n+\n+    public static class DiskErrorException extends DiskException {\n         private static final long serialVersionUID = 9091606022449761729L;\n \n         public DiskErrorException(String msg) {\n             super(msg);\n         }\n     }\n \n-    public static class DiskOutOfSpaceException extends IOException {\n+    public static class DiskOutOfSpaceException extends DiskException {\n         private static final long serialVersionUID = 160898797915906860L;\n \n         public DiskOutOfSpaceException(String msg) {\n             super(msg);\n         }\n     }\n \n-    public DiskChecker(float threshold) {\n-        validateThreshold(threshold);\n+    public static class DiskWarnThresholdException extends DiskException {\n+        private static final long serialVersionUID = -1629284987500841657L;\n+\n+        public DiskWarnThresholdException(String msg) {\n+            super(msg);\n+        }\n+    }\n+\n+    public DiskChecker(float threshold, float warnThreshold) {\n+        validateThreshold(threshold, warnThreshold);\n         this.diskUsageThreshold = threshold;\n+        this.diskUsageWarnThreshold = warnThreshold;\n     }\n \n     /**\n@@ -60,7 +76,7 @@ public DiskChecker(float threshold) {\n      * non-existent directory, then we signal an error; Sun's mkdir would signal\n      * an error (return false) if a directory it is attempting to create already\n      * exists or the mkdir fails.\n-     * \n+     *\n      * @param dir\n      * @return true on success, false on failure\n      */\n@@ -82,15 +98,15 @@ private static boolean mkdirsWithExistsCheck(File dir) {\n \n     /**\n      * Checks the disk space available.\n-     * \n+     *\n      * @param dir\n      *            Directory to check for the disk space\n      * @throws DiskOutOfSpaceException\n      *             Throws {@link DiskOutOfSpaceException} if available space is\n      *             less than threshhold.\n      */\n     @VisibleForTesting\n-    void checkDiskFull(File dir) throws DiskOutOfSpaceException {\n+    void checkDiskFull(File dir) throws DiskOutOfSpaceException, DiskWarnThresholdException {\n         if (null == dir) {\n             return;\n         }\n@@ -101,7 +117,12 @@ void checkDiskFull(File dir) throws DiskOutOfSpaceException {\n             float used = 1f - free;\n             if (used > diskUsageThreshold) {\n                 throw new DiskOutOfSpaceException(\"Space left on device \"\n-                        + usableSpace + \" < threshhold \" + diskUsageThreshold);\n+                        + usableSpace + \" Used space fraction:\" + used + \" < threshhold \" + diskUsageThreshold);\n+            }\n+            // Warn should be triggered only if disk usage threshold doesn't trigger first.\n+            if (used > diskUsageWarnThreshold) {\n+                throw new DiskWarnThresholdException(\"Space left on device:\"\n+                        + usableSpace + \" Used space fraction:\" + used +\" < WarnThreshold:\" + diskUsageWarnThreshold);\n             }\n         } else {\n             checkDiskFull(dir.getParentFile());\n@@ -110,16 +131,18 @@ void checkDiskFull(File dir) throws DiskOutOfSpaceException {\n \n     /**\n      * Create the directory if it doesn't exist and\n-     * \n+     *\n      * @param dir\n      *            Directory to check for the disk error/full.\n      * @throws DiskErrorException\n      *             If disk having errors\n+     * @throws DiskWarnThresholdException\n+     *             If disk has less than configured amount of free space.\n      * @throws DiskOutOfSpaceException\n      *             If disk is full or having less space than threshhold\n      */\n     public void checkDir(File dir) throws DiskErrorException,\n-            DiskOutOfSpaceException {\n+            DiskOutOfSpaceException, DiskWarnThresholdException {\n         checkDiskFull(dir);\n         if (!mkdirsWithExistsCheck(dir))\n             throw new DiskErrorException(\"can not create directory: \"\n@@ -137,32 +160,23 @@ public void checkDir(File dir) throws DiskErrorException,\n                     + dir.toString());\n     }\n \n-    /**\n-     * Returns the disk space threshold.\n-     * \n-     * @return\n-     */\n-    @VisibleForTesting\n-    float getDiskSpaceThreshold() {\n-        return diskUsageThreshold;\n-    }\n-\n     /**\n      * Set the disk space threshold\n-     * \n+     *\n      * @param diskSpaceThreshold\n      */\n     @VisibleForTesting\n-    void setDiskSpaceThreshold(float diskSpaceThreshold) {\n-        validateThreshold(diskSpaceThreshold);\n+    void setDiskSpaceThreshold(float diskSpaceThreshold, float diskUsageWarnThreshold) {\n+        validateThreshold(diskSpaceThreshold, diskSpaceThreshold);\n         this.diskUsageThreshold = diskSpaceThreshold;\n+        this.diskUsageWarnThreshold = diskUsageWarnThreshold;\n     }\n \n-    private void validateThreshold(float diskSpaceThreshold) {\n-        if (diskSpaceThreshold <= 0 || diskSpaceThreshold >= 1) {\n-            throw new IllegalArgumentException(\"Disk space threashold \"\n-                    + diskSpaceThreshold\n-                    + \" is not valid. Should be > 0 and < 1 \");\n+    private void validateThreshold(float diskSpaceThreshold, float diskSpaceWarnThreshold) {\n+        if (diskSpaceThreshold <= 0 || diskSpaceThreshold >= 1 || diskSpaceWarnThreshold - diskSpaceThreshold > 1e-6) {\n+            throw new IllegalArgumentException(\"Disk space threashold: \"\n+                    + diskSpaceThreshold + \" and warn threshold: \" + diskSpaceWarnThreshold\n+                    + \" are not valid. Should be > 0 and < 1 and diskSpaceThreshold >= diskSpaceWarnThreshold\");\n         }\n     }\n }"},{"sha":"b6fb92ec24d44b915a8940a4df3a1cae362ec70c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -351,6 +351,7 @@ public void testWithDiskFull() throws Exception {\n                 .setZkTimeout(5000).setJournalDirName(tempDir.getPath())\n                 .setLedgerDirNames(new String[] { tempDir.getPath() });\n         conf.setDiskUsageThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.05f);\n+        conf.setDiskUsageWarnThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.25f);\n         try {\n             new Bookie(conf);\n         } finally {"},{"sha":"f3da780a17581fbe54634c4e2aed5a0b01b30f98","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":53,"deletions":13,"changes":66,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.bookie;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,8 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.bookie;\n+\n import java.io.File;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -30,25 +30,25 @@\n import java.util.Collections;\n import java.util.Enumeration;\n \n-import org.apache.bookkeeper.meta.LedgerManager;\n-import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n-import org.apache.bookkeeper.util.TestUtils;\n-\n-import org.apache.zookeeper.AsyncCallback;\n import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.TestUtils;\n import org.apache.bookkeeper.versioning.Version;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.zookeeper.AsyncCallback;\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This class tests the entry log compaction functionality.\n@@ -174,6 +174,46 @@ public void testDisableCompaction() throws Exception {\n         }\n     }\n \n+    @Test(timeout=60000)\n+    public void testForceGarbageCollection() throws Exception {\n+        ServerConfiguration conf = newServerConfiguration();\n+        conf.setGcWaitTime(60000);\n+        conf.setMinorCompactionInterval(120000);\n+        conf.setMajorCompactionInterval(240000);\n+        LedgerDirsManager dirManager = new LedgerDirsManager(conf, conf.getLedgerDirs());\n+        CheckpointSource cp = new CheckpointSource() {\n+            @Override\n+            public Checkpoint newCheckpoint() {\n+                // Do nothing.\n+                return null;\n+            }\n+\n+            @Override\n+            public void checkpointComplete(Checkpoint checkPoint, boolean compact)\n+                throws IOException {\n+                // Do nothing.\n+            }\n+        };\n+        Bookie.checkDirectoryStructure(conf.getJournalDir());\n+        for (File dir : dirManager.getAllLedgerDirs()) {\n+            Bookie.checkDirectoryStructure(dir);\n+        }\n+        InterleavedLedgerStorage storage = new InterleavedLedgerStorage(conf,\n+                        LedgerManagerFactory.newLedgerManagerFactory(conf, zkc).newLedgerManager(),\n+                        dirManager, cp);\n+        storage.start();\n+        long startTime = MathUtils.now();\n+        Thread.sleep(2000);\n+        storage.gcThread.forceGC();\n+        Thread.sleep(1000);\n+        // Minor and Major compaction times should be larger than when we started\n+        // this test.\n+        assertTrue(\"Minor or major compaction did not trigger even on forcing.\",\n+                storage.gcThread.lastMajorCompactionTime > startTime &&\n+                storage.gcThread.lastMinorCompactionTime > startTime);\n+        storage.shutdown();\n+    }\n+\n     @Test(timeout=60000)\n     public void testMinorCompaction() throws Exception {\n         // prepare data\n@@ -199,7 +239,7 @@ public void testMinorCompaction() throws Exception {\n \n         // entry logs ([0,1,2].log) should be compacted.\n         for (File ledgerDirectory : tmpDirs) {\n-            assertFalse(\"Found entry log file ([0,1,2].log that should have not been compacted in ledgerDirectory: \" \n+            assertFalse(\"Found entry log file ([0,1,2].log that should have not been compacted in ledgerDirectory: \"\n                             + ledgerDirectory, TestUtils.hasLogFiles(ledgerDirectory, true, 0, 1, 2));\n         }\n "},{"sha":"5c9c76bdc9a63fcdaa7c554f5e05e36b9a949b19","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestSyncThread.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -325,6 +325,10 @@ public Checkpoint checkpoint(Checkpoint checkpoint)\n         public void diskFailed(File disk) {\n         }\n \n+        @Override\n+        public void diskAlmostFull(File disk) {\n+        }\n+\n         @Override\n         public void diskFull(File disk) {\n         }"},{"sha":"c0bdfa60d4b7f4cdc641f64944e61f3df6addfd4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","status":"modified","additions":21,"deletions":6,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/da8864ad7cd53d302eb27ab31f942bdbae160a98/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java?ref=da8864ad7cd53d302eb27ab31f942bdbae160a98","patch":"@@ -24,20 +24,21 @@\n \n import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n+import org.apache.bookkeeper.util.DiskChecker.DiskWarnThresholdException;\n import org.junit.Before;\n import org.junit.Test;\n \n /**\n  * Test to verify {@link DiskChecker}\n- * \n+ *\n  */\n public class TestDiskChecker {\n \n     DiskChecker diskChecker;\n \n     @Before\n     public void setup() {\n-        diskChecker = new DiskChecker(0.95f);\n+        diskChecker = new DiskChecker(0.95f, 0.95f);\n     }\n \n     /**\n@@ -48,8 +49,22 @@ public void testCheckDiskFull() throws IOException {\n         File file = File.createTempFile(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n-        diskChecker\n-                .setDiskSpaceThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.05f);\n+        float threshold =\n+                (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;\n+        diskChecker.setDiskSpaceThreshold(threshold, threshold);\n+        diskChecker.checkDiskFull(file);\n+    }\n+\n+    @Test(expected = DiskWarnThresholdException.class)\n+    public void testDiskWarnThresholdException() throws IOException {\n+        File file = File.createTempFile(\"DiskCheck\", \"test\");\n+        long usableSpace = file.getUsableSpace();\n+        long totalSpace = file.getTotalSpace();\n+        float diskSpaceThreshold =\n+                (1f - ((float) usableSpace / (float) totalSpace)) + 0.01f;\n+        float diskWarnThreshold =\n+                (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;\n+        diskChecker.setDiskSpaceThreshold(diskSpaceThreshold, diskWarnThreshold);\n         diskChecker.checkDiskFull(file);\n     }\n \n@@ -62,8 +77,8 @@ public void testCheckDiskFullOnNonExistFile() throws IOException {\n         File file = File.createTempFile(\"DiskCheck\", \"test\");\n         long usableSpace = file.getUsableSpace();\n         long totalSpace = file.getTotalSpace();\n-        diskChecker\n-                .setDiskSpaceThreshold((1f - ((float) usableSpace / (float) totalSpace)) - 0.05f);\n+        float threshold = (1f - ((float) usableSpace / (float) totalSpace)) - 0.05f;\n+        diskChecker.setDiskSpaceThreshold(threshold, threshold);\n         assertTrue(file.delete());\n         diskChecker.checkDiskFull(file);\n     }"}]}

