{"sha":"dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkYzVmNWQyMjM1MDJiOGJjOWVmNmJjMzcwNmYzYmJlYTk3NWU3NTdl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-10-28T13:36:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2011-10-28T13:36:43Z"},"message":"BOOKKEEPER-71: hedwig c++ client does not build . (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1190306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e331eaef98b17c2d2dfac5bae89f1e47a1c5986c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e331eaef98b17c2d2dfac5bae89f1e47a1c5986c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","html_url":"https://github.com/apache/bookkeeper/commit/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea616470cfbd129bb03098698a562e1b8dd8ecc4","url":"https://api.github.com/repos/apache/bookkeeper/commits/ea616470cfbd129bb03098698a562e1b8dd8ecc4","html_url":"https://github.com/apache/bookkeeper/commit/ea616470cfbd129bb03098698a562e1b8dd8ecc4"}],"stats":{"total":1199,"additions":288,"deletions":911},"files":[{"sha":"19698be4f7a1e6fa6018e324dc2f6079dff8ab60","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -74,6 +74,8 @@ BUGFIXES:\n \n   BOOKKEEPER-88: derby doesn't like - in the topic names (breed via ivank)\n \n+  BOOKKEEPER-71: hedwig c++ client does not build . (ivank)\n+\n IMPROVEMENTS:\n \n  BOOKKEEPER-28: Create useful startup scripts for bookkeeper and hedwig (ivank)"},{"sha":"af0f2d87cee71e1638a68a1891859614a60c4ff2","filename":"hedwig-client/src/main/cpp/README","status":"added","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/README","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/README","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/README?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -0,0 +1,10 @@\n+To build:\n+   $ libtoolize\n+   $ autoreconf -fi\n+   $ ./configure\n+   $ make\n+\n+The devel packages for protobuf, cppunit, log4cxx & boost are required.\n+\n+To test:\n+   $ make check\n\\ No newline at end of file"},{"sha":"19266b3b5e41b6282734d91a14a107f4297731c8","filename":"hedwig-client/src/main/cpp/config.h.in","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/apache/bookkeeper/blob/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-client/src/main/cpp/config.h.in","raw_url":"https://github.com/apache/bookkeeper/raw/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-client/src/main/cpp/config.h.in","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/config.h.in?ref=ea616470cfbd129bb03098698a562e1b8dd8ecc4","patch":"@@ -1,56 +0,0 @@\n-/* config.h.in.  Generated from configure.ac by autoheader.  */\n-\n-/* Define to 1 if you have the <dlfcn.h> header file. */\n-#undef HAVE_DLFCN_H\n-\n-/* Define to 1 if you have the <inttypes.h> header file. */\n-#undef HAVE_INTTYPES_H\n-\n-/* Define to 1 if you have the <memory.h> header file. */\n-#undef HAVE_MEMORY_H\n-\n-/* Define to 1 if you have the <stdint.h> header file. */\n-#undef HAVE_STDINT_H\n-\n-/* Define to 1 if you have the <stdlib.h> header file. */\n-#undef HAVE_STDLIB_H\n-\n-/* Define to 1 if you have the <strings.h> header file. */\n-#undef HAVE_STRINGS_H\n-\n-/* Define to 1 if you have the <string.h> header file. */\n-#undef HAVE_STRING_H\n-\n-/* Define to 1 if you have the <sys/stat.h> header file. */\n-#undef HAVE_SYS_STAT_H\n-\n-/* Define to 1 if you have the <sys/types.h> header file. */\n-#undef HAVE_SYS_TYPES_H\n-\n-/* Define to 1 if you have the <unistd.h> header file. */\n-#undef HAVE_UNISTD_H\n-\n-/* Define to the sub-directory in which libtool stores uninstalled libraries.\n-   */\n-#undef LT_OBJDIR\n-\n-/* Define to the address where bug reports for this package should be sent. */\n-#undef PACKAGE_BUGREPORT\n-\n-/* Define to the full name of this package. */\n-#undef PACKAGE_NAME\n-\n-/* Define to the full name and version of this package. */\n-#undef PACKAGE_STRING\n-\n-/* Define to the one symbol short name of this package. */\n-#undef PACKAGE_TARNAME\n-\n-/* Define to the home page for this package. */\n-#undef PACKAGE_URL\n-\n-/* Define to the version of this package. */\n-#undef PACKAGE_VERSION\n-\n-/* Define to 1 if you have the ANSI C header files. */\n-#undef STDC_HEADERS"},{"sha":"7a6445ec0b497f2e831af27b284db9625a874aa6","filename":"hedwig-client/src/main/cpp/configure.ac","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/configure.ac","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/configure.ac","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/configure.ac?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -16,7 +16,7 @@\n # limitations under the License.\n #\n \n-AC_INIT([Hedwig C++ Client], [0.1], [zookeeper-dev@hadoop.apache.org], [hedwig-cpp], [http://hadoop.apache.org/zookeeper//])\n+AC_INIT([Hedwig C++ Client], [0.1], [bookkeeper-dev@zookeeper.apache.org], [hedwig-cpp], [http://zookeeper.apache.org/bookkeeper/])\n \n AC_PREREQ([2.59])\n AM_INIT_AUTOMAKE([1.9 no-define foreign])\n@@ -27,10 +27,17 @@ AC_CONFIG_FILES([Makefile lib/Makefile test/Makefile hedwig-0.1.pc])\n AC_PROG_LIBTOOL\n AC_CONFIG_MACRO_DIR([m4])\n PKG_CHECK_MODULES([DEPS], [liblog4cxx protobuf cppunit])\n+PKG_CHECK_MODULES([TESTDEPS], [cppunit])\n+\n AX_BOOST_BASE\n AX_BOOST_ASIO\t  \n AX_BOOST_THREAD\n \n+AC_CHECK_HEADER(tr1/memory, [AC_MSG_RESULT([Found builtin TR1 library])],[\n+\t\t\t     AC_CHECK_HEADER(boost/tr1/memory.hpp, \n+\t\t\t     [AC_DEFINE(USE_BOOST_TR1, [], [Found Boost TR1 library])],\n+\t\t\t     [AC_MSG_ERROR([TR1 not found, builtin TR1 or boost TR1 is required])])])\n+\n DX_HTML_FEATURE(ON)\n DX_INIT_DOXYGEN(hedwig-c++, c-doc.Doxyfile, doc)\n "},{"sha":"5200d5b39c421f860fbed92452fab4a8055eb04f","filename":"hedwig-client/src/main/cpp/inc/hedwig/callback.h","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/inc/hedwig/callback.h","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/inc/hedwig/callback.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/callback.h?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -21,7 +21,12 @@\n #include <string>\n #include <hedwig/exceptions.h>\n #include <hedwig/protocol.h>\n+\n+#ifdef USE_BOOST_TR1\n+#include <boost/tr1/memory.hpp>\n+#else \n #include <tr1/memory>\n+#endif\n \n namespace Hedwig {\n   class OperationCallback {"},{"sha":"2f19ebe552719913eccf607a4dfe117915f594cd","filename":"hedwig-client/src/main/cpp/inc/hedwig/client.h","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/inc/hedwig/client.h","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/inc/hedwig/client.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/client.h?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -19,7 +19,12 @@\n #define HEDWIG_CLIENT_H\n \n #include <string>\n+\n+#ifdef USE_BOOST_TR1\n+#include <boost/tr1/memory.hpp>\n+#else \n #include <tr1/memory>\n+#endif\n \n #include <hedwig/subscribe.h>\n #include <hedwig/publish.h>"},{"sha":"bf69f05b2a618ee353e1b17d30d30ae80c8ba820","filename":"hedwig-client/src/main/cpp/lib/Makefile.am","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/Makefile.am","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/Makefile.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/Makefile.am?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -16,7 +16,7 @@\n # limitations under the License.\n #\n \n-PROTODEF = ../../../../../protocol/src/main/protobuf/PubSubProtocol.proto\n+PROTODEF = ../../../../../hedwig-protocol/src/main/protobuf/PubSubProtocol.proto\n \n lib_LTLIBRARIES = libhedwig01.la\n libhedwig01_la_SOURCES = protocol.cpp channel.cpp client.cpp util.cpp clientimpl.cpp publisherimpl.cpp subscriberimpl.cpp eventdispatcher.cpp data.cpp"},{"sha":"77d8bb0e9466d487d0d70f07b487707b5ff6781a","filename":"hedwig-client/src/main/cpp/lib/channel.cpp","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/channel.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/channel.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/channel.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,12 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\t\n+\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <sys/types.h>\n #include <sys/socket.h>\n #include <netinet/in.h>"},{"sha":"ebe6058990736609126a46168858930e7cd43ca6","filename":"hedwig-client/src/main/cpp/lib/channel.h","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/channel.h","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/channel.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/channel.h?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -25,8 +25,13 @@\n #include \"data.h\"\n #include \"eventdispatcher.h\"\n \n+#ifdef USE_BOOST_TR1\n+#include <boost/tr1/memory.hpp>\n+#include <boost/tr1/unordered_map.hpp>\n+#else\n #include <tr1/memory>\n #include <tr1/unordered_map>\n+#endif\n \n #include <google/protobuf/io/zero_copy_stream_impl.h>\n "},{"sha":"3e9b4add6ca6ebf3468d951574b28d2e6162a6e2","filename":"hedwig-client/src/main/cpp/lib/client.cpp","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/client.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/client.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/client.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -16,6 +16,10 @@\n  * limitations under the License.\n  */\n \n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <hedwig/client.h>\n #include <memory>\n "},{"sha":"cc748d6c5f5487595c20e37f73625a2b3a971188","filename":"hedwig-client/src/main/cpp/lib/clientimpl.cpp","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/clientimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/clientimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include \"clientimpl.h\"\n #include \"channel.h\"\n #include \"publisherimpl.h\""},{"sha":"685f6811be5b7bad743efb9e65515c30df6e2ef2","filename":"hedwig-client/src/main/cpp/lib/clientimpl.h","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/clientimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/clientimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.h?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -28,7 +28,12 @@\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/condition_variable.hpp>\n \n+#ifdef USE_BOOST_TR1\n+#include <boost/tr1/unordered_map.hpp>\n+#else\n #include <tr1/unordered_map>\n+#endif\n+\n #include <list>\n \n #include \"util.h\""},{"sha":"a223120acea2eecbca56fe719596935d3161c38c","filename":"hedwig-client/src/main/cpp/lib/data.cpp","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/data.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/data.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n \n #include <hedwig/protocol.h>\n #include \"data.h\""},{"sha":"b4e2c15da0513e43579ef39f01a477e1f4a53780","filename":"hedwig-client/src/main/cpp/lib/data.h","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/data.h","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/data.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.h?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -23,7 +23,13 @@\n #include <hedwig/callback.h>\n \n #include <pthread.h>\n+\n+#ifdef USE_BOOST_TR1\n+#include <boost/tr1/unordered_set.hpp>\n+#else\n #include <tr1/unordered_set>\n+#endif\n+\n #include \"util.h\"\n #include <boost/shared_ptr.hpp>\n #include <boost/thread/mutex.hpp>"},{"sha":"2c0e0ba0b8518b925c74075df0199293d61c1528","filename":"hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n \n #include \"eventdispatcher.h\"\n "},{"sha":"9e062dcf03e17e068f61a3dfc8d4d3d83166185d","filename":"hedwig-client/src/main/cpp/lib/exceptions.cpp","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/exceptions.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/exceptions.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/exceptions.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -16,6 +16,10 @@\n  * limitations under the License.\n  */\n \n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <hedwig/exceptions.h>\n #include <stdlib.h>\n #include <string.h>"},{"sha":"a421e9895a02680435d623df5147abbbe4c4b924","filename":"hedwig-client/src/main/cpp/lib/publisherimpl.cpp","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/publisherimpl.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n \n #include \"publisherimpl.h\"\n #include \"channel.h\""},{"sha":"77434ebaca8d69192c59af17f57ee17d5929ef12","filename":"hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n \n #include \"subscriberimpl.h\"\n #include \"util.h\""},{"sha":"7f749e2069b477518c8df995c97f4c45c22bc84f","filename":"hedwig-client/src/main/cpp/lib/subscriberimpl.h","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/subscriberimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/subscriberimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/subscriberimpl.h?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -22,7 +22,13 @@\n #include <hedwig/callback.h>\n #include \"clientimpl.h\"\n #include <utility>\n+\n+#ifdef USE_BOOST_TR1\n+#include <boost/tr1/memory.hpp>\n+#else\n #include <tr1/memory>\n+#endif\n+\n #include <deque>\n \n #include <boost/shared_ptr.hpp>"},{"sha":"a7d970459a146030473d36e7b0a38ff9620671f1","filename":"hedwig-client/src/main/cpp/lib/util.cpp","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/util.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/util.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/util.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <string>\n \n #include <netdb.h>"},{"sha":"22692486dab3b4669da95e9129443bb1a6cbbc69","filename":"hedwig-client/src/main/cpp/lib/util.h","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/lib/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/util.h?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -26,7 +26,13 @@\n #include <list>\n #include <iostream>\n #include <utility>\n+\n+#ifdef USE_BOOST_TR1\n+#include <boost/tr1/functional.hpp>\n+#else\n #include <tr1/functional>\n+#endif\n+\n #include <semaphore.h>\n #include <pthread.h>\n "},{"sha":"418a4aa41d1b71cc93dba35835ef012f501731be","filename":"hedwig-client/src/main/cpp/scripts/network-delays.sh","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/scripts/network-delays.sh","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/scripts/network-delays.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/network-delays.sh?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -25,18 +25,22 @@ setup_delays() {\n     case \"$UNAME\" in\n \tDarwin|FreeBSD)\n \t    sudo ipfw pipe 1 config delay ${1}ms\n-\t    sudo ipfw add pipe 1 dst-port 12349 \n-\t    sudo ipfw add pipe 1 dst-port 12350\n-\t    sudo ipfw add pipe 1 src-port 12349 \n-\t    sudo ipfw add pipe 1 src-port 12350 \n+\t    sudo ipfw add pipe 1 dst-port 4081\n+\t    sudo ipfw add pipe 1 dst-port 4081\n+\t    sudo ipfw add pipe 1 src-port 4082 \n+\t    sudo ipfw add pipe 1 src-port 4082 \n+\t    sudo ipfw add pipe 1 src-port 4083 \n+\t    sudo ipfw add pipe 1 src-port 4083 \n             ;;\n \tLinux)\n \t    sudo tc qdisc add dev lo root handle 1: prio\n \t    sudo tc qdisc add dev lo parent 1:3 handle 30: netem delay ${1}ms \n-\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip dport 12349 0xffff flowid 1:3\n-\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip dport 12350 0xffff flowid 1:3\n-\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip sport 12349 0xffff flowid 1:3\n-\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip sport 12350 0xffff flowid 1:3\n+\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip dport 4081 0xffff flowid 1:3\n+\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip dport 4081 0xffff flowid 1:3\n+\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip sport 4082 0xffff flowid 1:3\n+\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip sport 4082 0xffff flowid 1:3\n+\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip sport 4083 0xffff flowid 1:3\n+\t    sudo tc filter add dev lo protocol ip parent 1:0 prio 3 u32 match ip sport 4083 0xffff flowid 1:3\n \t    ;;\n \t*)\n \t    echo \"Unknown system type, $UNAME, only Linux, Darwin & FreeBSD supported\""},{"sha":"73054aa8793470d90ccd1e0c25fd2721702f77ed","filename":"hedwig-client/src/main/cpp/scripts/server-control.sh","status":"modified","additions":125,"deletions":26,"changes":151,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/scripts/server-control.sh","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/scripts/server-control.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/server-control.sh?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -17,33 +17,132 @@\n # limitations under the License.\n #\n \n-HEDWIGBASE=../../../../..\n-\n-HEDWIGJAR=`ls $HEDWIGBASE/server/target/server-*-with-dependencies.jar`\n-if [ ! $? -eq 0 ]; then\n-    echo \"\\n\\nCould not find server-VERSION-with-dependencies.jar. \\nYou need to build the java part of hedwig. \\nRun mvn package in the toplevel hedwig directory.\\n\\n\"\n-    exit 1;\n-fi\n-\n-HEDWIGSERVERTESTS=$HEDWIGBASE/server/target/test-classes/\n-if [ ! -e $HEDWIGSERVERTESTS ]; then\n-    echo \"\\n\\nThe hedwig java server tests need to be build.\\b\\b\"\n-    exit 1;\n-fi\n-\n-export CP=.:$HEDWIGJAR:$HEDWIGSERVERTESTS\n-\n-start_control_server() {\n-    if [ -e server-control.pid ]; then\n-\tkill -9 `cat server-control.pid`\n-\trm server-control.pid\n+BASE=../../../../../\n+BKSCRIPT=$BASE/bookkeeper-server/bin/bookkeeper\n+HWSCRIPT=$BASE/hedwig-server/bin/hedwig\n+ZKCLIENT=org.apache.zookeeper.ZooKeeperMain\n+\n+check_bk_down() {\n+    NUM_UP=100\n+    for i in 0 1 2 3 4 5 6 7 8 9; do\n+\tNUM_UP=`sh $BKSCRIPT $ZKCLIENT ls /ledgers/available 2> /dev/null | awk 'BEGIN{SERVERS=0} /^\\[/ { gsub(/[,\\[\\]]/, \"\"); SERVERS=NF} END{ print SERVERS }'`\n+\tif [ $NUM_UP == 0 ]; then\n+\t    break;\n+\tfi\n+\tsleep 1\n+    done\n+\n+    if [ $NUM_UP != 0 ]; then\n+\techo \"Warning: Couldn't stop all bookies\"\n+\texit 1;\n+    fi\n+}\n+\n+check_bk_up() {\n+    NUM_BOOKIES=$1\n+    NUM_UP=0\n+    for i in 0 1 2 3 4 5 6 7 8 9; do\n+\tNUM_UP=`sh $BKSCRIPT $ZKCLIENT ls /ledgers/available 2> /dev/null | awk 'BEGIN{SERVERS=0} /^\\[/ { gsub(/[,\\[\\]]/, \"\"); SERVERS=NF} END{ print SERVERS }'`\n+\tif [ $NUM_UP == $NUM_BOOKIES ]; then\n+\t    break;\n+\tfi\n+\tsleep 1\n+    done\n+\n+    if [ $NUM_UP != $NUM_BOOKIES ]; then\n+\techo \"Couldn't start bookkeeper\"\n+\texit 1;\n+    fi\n+}\n+\n+check_hw_down() {\n+    REGION=$1\n+    NUM_UP=100\n+    for i in 0 1 2 3 4 5 6 7 8 9; do\n+\tNUM_UP=`sh $BKSCRIPT $ZKCLIENT ls /hedwig/$REGION/hosts 2> /dev/null | awk 'BEGIN{SERVERS=0} /^\\[/ { gsub(/[,\\[\\]]/, \"\"); SERVERS=NF} END{ print SERVERS }'`\n+\tif [ $NUM_UP == 0 ]; then\n+\t    break;\n+\tfi\n+\tsleep 1\n+    done\n+\n+    if [ $NUM_UP != 0 ]; then\n+\techo \"Warning: Couldn't stop all hedwig servers\"\n+\texit 1;\n+    fi\n+}\n+\n+check_hw_up() {\n+    REGION=$1\n+    NUM_SERVERS=$2\n+    NUM_UP=0\n+    for i in 0 1 2 3 4 5 6 7 8 9; do\n+\tNUM_UP=`sh $BKSCRIPT $ZKCLIENT ls /hedwig/$REGION/hosts 2> /dev/null | awk 'BEGIN{SERVERS=0} /^\\[/ { gsub(/[,\\[\\]]/, \"\"); SERVERS=NF} END{ print SERVERS }'`\n+\tif [ $NUM_UP == $NUM_SERVERS ]; then\n+\t    break;\n+\tfi\n+\tsleep 1\n+    done\n+\n+    if [ $NUM_UP != $NUM_SERVERS ]; then\n+\techo \"Couldn't start hedwig\"\n+\texit 1;\n     fi\n-    java -cp $CP  -Dlog4j.configuration=log4j.properties org.apache.hedwig.ServerControlDaemon  <&-  1> servercontrol.out  2>&1  &\n-    echo $! > server-control.pid\n-    sleep 5\n }\n \n-stop_control_server() {\n-    kill -9 `cat server-control.pid`\n-    rm server-control.pid\n+start_hw_server () {\n+    REGION=$1\n+    COUNT=$2\n+    PORT=$((4080+$COUNT))\n+\n+    export HEDWIG_SERVER_CONF=/tmp/hw-server-$COUNT.conf\n+    cat > $HEDWIG_SERVER_CONF <<EOF\n+zk_host=localhost:2181\n+# The number of milliseconds of each tick in ZooKeeper.\n+zk_timeout=2000\n+# The port at which the clients will connect.\n+server_port=$PORT\n+# The SSL port at which the clients will connect (only if SSL is enabled).\n+ssl_server_port=9876\n+# Flag indicating if the server should also operate in SSL mode.\n+ssl_enabled=false\n+region=$REGION\n+EOF\n+    sh $HWSCRIPT server 2>&1 > hwoutput.$COUNT.log &\n+    echo $! > hwprocess.$COUNT.pid\n+}\n+\n+start_cluster() {\n+    if [ -e bkprocess.pid ] || [ `ls hwprocess.*.pid 2> /dev/null | wc -l` != 0 ]; then\n+\tstop_cluster;\n+    fi\n+\n+    sh $BKSCRIPT localbookie 3 2>&1 > bkoutput.log &\n+    echo $! > bkprocess.pid\n+    check_bk_up 3\n+\n+    for i in 1 2 3; do\n+\tstart_hw_server CppUnitTest $i \n+    done\n+    check_hw_up CppUnitTest 3\n+}\n+\n+stop_cluster() {\n+    for i in hwprocess.*.pid; do\n+\tif [ ! -e $i ]; then\n+\t    continue;\n+\tfi\n+\tkill `cat $i`;\n+\trm $i;\n+    done\n+    check_hw_down\n+\n+    if [ ! -e bkprocess.pid ]; then\n+\treturn;\n+    fi\n+\n+    kill `cat bkprocess.pid`\n+    rm bkprocess.pid\n+\n+    check_bk_down\n }"},{"sha":"5df613a197d1551afb41e1638759e1cfd299152c","filename":"hedwig-client/src/main/cpp/scripts/tester.sh","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/scripts/tester.sh","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/scripts/tester.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/tester.sh?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -27,11 +27,12 @@ all() {\n \tsetup_delays $HEDWIG_NETWORK_DELAY\n     fi\n \n-    start_control_server;\n+    stop_cluster;\n+    start_cluster;\n \n     ../test/hedwigtest \n     RESULT=$?\n-    stop_control_server;\n+    stop_cluster;\n \n     if [ \"z$HEDWIG_NETWORK_DELAY\" != \"z\" ]; then\n \tclear_delays\n@@ -57,11 +58,11 @@ EOF\n }\n \n case \"$1\" in\n-    start-control-server)\n-\tstart_control_server\n+    start-cluster)\n+\tstart_cluster\n \t;;\n-    stop-control-server)\n-\tstop_control_server\n+    stop-cluster)\n+\tstop_cluster \n \t;;\n     setup-delays)\n \tsetup_delays $2\n@@ -79,11 +80,11 @@ Usage: tester.sh [command]\n tester.sh all\n    Run through the tests, setting up and cleaning up all prerequisites.\n \n-tester.sh start-control-server\n-   Starts the deamon which the tests use to start and stop hedwig/zookeeper/bookeeper servers\n+tester.sh start-cluster\n+   Start a hedwig cluster\n \n-tester.sh stop-control-server\n-   Stops the aforementioned daemon\n+tester.sh stop-cluster\n+   Stops a hedwig cluster\n \n tester.sh setup-delays <delay>\n    Set the millisecond delay for accessing the hedwig servers for the tests."},{"sha":"62902e62409d13b0bd5ba3b8cf0dcd6eab1f7529","filename":"hedwig-client/src/main/cpp/test/Makefile.am","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/Makefile.am","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/Makefile.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/Makefile.am?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -17,9 +17,9 @@\n #\n \n bin_PROGRAMS = hedwigtest\n-hedwigtest_SOURCES = main.cpp utiltest.cpp pubsubdatatest.cpp publishtest.cpp subscribetest.cpp servercontrol.cpp pubsubtest.cpp\n-hedwigtest_CPPFLAGS = -I$(top_srcdir)/inc $(DEPS_CFLAGS) $(BOOST_CPPFLAGS) \n-hedwigtest_LDADD = $(DEPS_LIBS) -L$(top_builddir)/lib -lhedwig01 \n+hedwigtest_SOURCES = main.cpp utiltest.cpp pubsubdatatest.cpp publishtest.cpp subscribetest.cpp pubsubtest.cpp\n+hedwigtest_CPPFLAGS = -I$(top_srcdir)/inc $(DEPS_CFLAGS) $(TESTDEPS_CFLAGS) $(BOOST_CPPFLAGS) \n+hedwigtest_LDADD = $(DEPS_LIBS) $(TESTDEPS_LIBS) -L$(top_builddir)/lib -lhedwig01 \n hedwigtest_LDFLAGS = -no-undefined $(BOOST_ASIO_LIB) $(BOOST_LDFLAGS) $(BOOST_THREAD_LIB)\n \n check: hedwigtest"},{"sha":"3290af30eb7e1de1a33ad0ddf3c1493ceb9d6cba","filename":"hedwig-client/src/main/cpp/test/main.cpp","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/main.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/main.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/main.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include \"../lib/channel.h\"\n #include \"../lib/util.h\"\n #include <hedwig/protocol.h>\n@@ -26,7 +30,6 @@\n #include <log4cxx/propertyconfigurator.h>\n #include <log4cxx/helpers/exception.h>\n \n-#include \"servercontrol.h\"\n #include \"util.h\"\n \n #include <cppunit/extensions/TestFactoryRegistry.h>"},{"sha":"3e6c0bee8149c8704700df6213d1f2aa39850d29","filename":"hedwig-client/src/main/cpp/test/publishtest.cpp","status":"modified","additions":8,"deletions":45,"changes":53,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/publishtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/publishtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/publishtest.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <cppunit/Test.h>\n #include <cppunit/TestSuite.h>\n #include <cppunit/extensions/HelperMacros.h>\n@@ -27,7 +31,6 @@\n \n #include <log4cxx/logger.h>\n \n-#include \"servercontrol.h\"\n #include \"util.h\"\n \n static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n@@ -36,14 +39,6 @@ using namespace CppUnit;\n \n class PublishTestSuite : public CppUnit::TestFixture {\n private:\n-  HedwigTest::ServerControl* control;\n-  HedwigTest::TestServerPtr zk;\n-  HedwigTest::TestServerPtr bk1;\n-  HedwigTest::TestServerPtr bk2;\n-  HedwigTest::TestServerPtr bk3;\n-  HedwigTest::TestServerPtr hw1;\n-  HedwigTest::TestServerPtr hw2;\n-\n   CPPUNIT_TEST_SUITE( PublishTestSuite );\n   CPPUNIT_TEST(testSyncPublish);\n   CPPUNIT_TEST(testAsyncPublish);\n@@ -54,54 +49,22 @@ class PublishTestSuite : public CppUnit::TestFixture {\n   CPPUNIT_TEST_SUITE_END();\n \n public:\n-  PublishTestSuite() : control(NULL) {\n+  PublishTestSuite() {\n   }\n \n   ~PublishTestSuite() {\n   }\n \n   void setUp()\n   {\n-    control = new HedwigTest::ServerControl(HedwigTest::DEFAULT_CONTROLSERVER_PORT);\n-    zk = control->startZookeeperServer(12345);\n-    bk1 = control->startBookieServer(12346, zk);\n-    bk2 = control->startBookieServer(12347, zk);\n-    bk3 = control->startBookieServer(12348, zk);\n-    \n-    std::string region(\"testRegion\");\n-    hw1 = control->startPubSubServer(12349, region, zk);\n-    hw2 = control->startPubSubServer(12350, region, zk);\n   }\n   \n   void tearDown() \n   {\n-    if (hw2.get()) {\n-      hw2->kill();\n-    }\n-    if (hw1.get()) {\n-      hw1->kill();\n-    }\n-    \n-    if (bk1.get()) {\n-      bk1->kill();\n-    }\n-    if (bk2.get()) {\n-      bk2->kill();\n-    }\n-    if (bk3.get()) {\n-      bk3->kill();\n-    }\n-    \n-    if (zk.get()) {\n-      zk->kill();\n-    }\n-    if (control) {\n-      delete control;\n-    }\n   }\n \n   void testSyncPublish() {\n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n     Hedwig::Publisher& pub = client->getPublisher();\n@@ -115,7 +78,7 @@ class PublishTestSuite : public CppUnit::TestFixture {\n   void testAsyncPublish() {\n     SimpleWaitCondition* cond = new SimpleWaitCondition();\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     Hedwig::Client* client = new Hedwig::Client(*conf);\n     Hedwig::Publisher& pub = client->getPublisher();\n     \n@@ -136,7 +99,7 @@ class PublishTestSuite : public CppUnit::TestFixture {\n     SimpleWaitCondition* cond2 = new SimpleWaitCondition();\n     SimpleWaitCondition* cond3 = new SimpleWaitCondition();\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     Hedwig::Client* client = new Hedwig::Client(*conf);\n     Hedwig::Publisher& pub = client->getPublisher();\n    "},{"sha":"c1cc862a2248d230707e58b8cf830e918f4710a1","filename":"hedwig-client/src/main/cpp/test/pubsubdatatest.cpp","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/pubsubdatatest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/pubsubdatatest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/pubsubdatatest.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <cppunit/Test.h>\n #include <cppunit/TestSuite.h>\n #include <cppunit/extensions/HelperMacros.h>"},{"sha":"e49d242397f27b43dfa039310b72a4382a388de9","filename":"hedwig-client/src/main/cpp/test/pubsubtest.cpp","status":"modified","additions":10,"deletions":48,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/pubsubtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/pubsubtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/pubsubtest.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <cppunit/Test.h>\n #include <cppunit/TestSuite.h>\n #include <cppunit/extensions/HelperMacros.h>\n@@ -28,21 +32,12 @@\n \n #include <log4cxx/logger.h>\n \n-#include \"servercontrol.h\"\n #include \"util.h\"\n \n static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n \n class PubSubTestSuite : public CppUnit::TestFixture {\n private:\n-  HedwigTest::ServerControl* control;\n-  HedwigTest::TestServerPtr zk;\n-  HedwigTest::TestServerPtr bk1;\n-  HedwigTest::TestServerPtr bk2;\n-  HedwigTest::TestServerPtr bk3;\n-  HedwigTest::TestServerPtr hw1;\n-\n-\t\t\t       \n   CPPUNIT_TEST_SUITE( PubSubTestSuite );\n   CPPUNIT_TEST(testPubSubContinuousOverClose);\n   //  CPPUNIT_TEST(testPubSubContinuousOverServerDown);\n@@ -52,51 +47,18 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n   CPPUNIT_TEST_SUITE_END();\n \n public:\n-  PubSubTestSuite() : control(NULL) {\n-    \n+  PubSubTestSuite() {\n   }\n \n   ~PubSubTestSuite() {\n   }\n \n   void setUp()\n   {\n-    control = new HedwigTest::ServerControl(HedwigTest::DEFAULT_CONTROLSERVER_PORT);\n-    zk = control->startZookeeperServer(12345);\n-    bk1 = control->startBookieServer(12346, zk);\n-    bk2 = control->startBookieServer(12347, zk);\n-    bk3 = control->startBookieServer(12348, zk);\n-    \n-    std::string region(\"testRegion\");\n-    hw1 = control->startPubSubServer(12349, region, zk);\n   }\n   \n   void tearDown() \n   {\n-    try {\n-      if (hw1.get()) {\n-\thw1->kill();\n-      }\n-      \n-      if (bk1.get()) {\n-\tbk1->kill();\n-      }\n-      if (bk2.get()) {\n-\tbk2->kill();\n-      }\n-      if (bk3.get()) {\n-\tbk3->kill();\n-      }\n-      \n-      if (zk.get()) {\n-\tzk->kill();\n-      }\n-    } catch (std::exception& e) {\n-      // don't allow an exception to break everything, we're going deleting the control no matter what\n-    }\n-    if (control) {\n-      delete control;\n-    }\n   }\n \n   class MyMessageHandlerCallback : public Hedwig::MessageHandlerCallback {\n@@ -139,7 +101,7 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n     std::string topic = \"pubSubTopic\";\n     std::string sid = \"MySubscriberid-1\";\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -189,7 +151,7 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n     std::string topic = \"pubSubTopic\";\n     std::string sid = \"MySubscriberid-1\";\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -239,7 +201,7 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n     std::string topicB = \"pubSubTopicB\";\n     std::string sid = \"MySubscriberid-3\";\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -288,7 +250,7 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n     std::string sidA = \"MySubscriberid-4\";\n     std::string sidB = \"MySubscriberid-5\";\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -337,7 +299,7 @@ class PubSubTestSuite : public CppUnit::TestFixture {\n     std::string topic = \"pubSubTopic\";\n     std::string sid = \"MySubscriberid-6\";\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);"},{"sha":"49696b76ede6e45f4ed3d1d4cc634103f8d9d3e5","filename":"hedwig-client/src/main/cpp/test/servercontrol.cpp","status":"removed","additions":0,"deletions":184,"changes":184,"blob_url":"https://github.com/apache/bookkeeper/blob/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-client/src/main/cpp/test/servercontrol.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-client/src/main/cpp/test/servercontrol.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/servercontrol.cpp?ref=ea616470cfbd129bb03098698a562e1b8dd8ecc4","patch":"@@ -1,184 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-#include <sys/types.h>\n-#include <sys/socket.h>\n-#include <netinet/in.h>\n-#include <arpa/inet.h>\n-#include <netinet/tcp.h>\n-\n-#include <string>\n-#include <string.h>\n-#include <stdlib.h>\n-#include \"servercontrol.h\"\n-\n-\n-#include <log4cxx/logger.h>\n-\n-#include \"util.h\"\n-\n-#include <sstream>   \n-#include <time.h>\n-\n-static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n-\n-extern HedwigCppTextTestProgressListener gprogress;\n-\n-using namespace HedwigTest;\n-\n-const int MAX_COMMAND_LN = 256;\n-\n-class TestServerImpl : public TestServer {\n-public:\n-  TestServerImpl(std::string& address, ServerControl& sc);\n-  ~TestServerImpl();\n-  void kill();\n-  std::string& getAddress();\n-\n-private:\n-  std::string address;\n-  ServerControl& sc;\n-};\n-\n-TestServerImpl::TestServerImpl(std::string& address, ServerControl& sc) : address(address), sc(sc)  {\n-}\n-\n-TestServerImpl::~TestServerImpl() {\n-}\n-\n-void TestServerImpl::kill() {\n-  std::ostringstream sstr;\n-  sstr << \"KILL \" << address << std::endl;\n-  ServerControl::ServerResponse resp = sc.requestResponse(sstr.str());\n-  if (resp.status != \"OK\") {\n-    LOG4CXX_ERROR(logger, \"Error killing Server \" << resp.message);\n-    throw ErrorKillingServerException();\n-  }\n-}\n-\n-std::string& TestServerImpl::getAddress() {\n-  return address;\n-}\n- \n-ServerControl::ServerControl(int port) {\n-  socketfd = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n-  \n-  if (-1 == socketfd) {\n-  LOG4CXX_ERROR(logger, \"Couldn't create socket\");\n-    throw CantConnectToServerControlDaemonException();\n-  }\n-\n-  sockaddr_in addr;\n-  addr.sin_family = AF_INET; \n-  addr.sin_port = htons(port);\n-  addr.sin_addr.s_addr = inet_addr(\"127.0.0.1\"); \n-    \n-  if (-1 == ::connect(socketfd, (const sockaddr *)&addr, sizeof(struct sockaddr))) {\n-  LOG4CXX_ERROR(logger, \"Couldn't connect socket\");\n-    close(socketfd);\n-    throw CantConnectToServerControlDaemonException();\n-  }\n-  \n-  requestResponse(\"TEST \" + gprogress.getTestName() + \"\\n\");\n-}\n-\n-ServerControl::~ServerControl() {\n-  close(socketfd);\n-}\n-  \n-\n-ServerControl::ServerResponse ServerControl::requestResponse(std::string request) {\n-  socketlock.lock();\n-  char response[MAX_COMMAND_LN];\n-\n-  LOG4CXX_DEBUG(logger, \"REQ: \" << request.c_str() << \" \" << request.length());\n-  send(socketfd, request.c_str(), request.length(), 0);\n-  \n-  memset(response, 0, MAX_COMMAND_LN);\n-  recv(socketfd, response, MAX_COMMAND_LN, 0);\n-  LOG4CXX_DEBUG(logger, \"RESP: \" << response);\n-\n-  socketlock.unlock();\n-\n-  char* space = strchr(response, ' ');\n-  if (space == NULL) {\n-    throw InvalidServerControlDaemonResponseException();\n-  }\n-  char* status = response;\n-  *space = 0;\n-  \n-  char* message = space+1;\n-  char* cr = strchr(message, '\\n');\n-  if (cr != NULL) {\n-    *cr = 0;\n-  }\n-  if (strlen(message) < 1) {\n-    throw InvalidServerControlDaemonResponseException();\n-  }\n-  LOG4CXX_DEBUG(logger, \"$\" << message << \"$\");\n-  ServerControl::ServerResponse resp = { std::string(status), std::string(message) };\n-  return resp;\n-}\n-  \n-TestServerPtr ServerControl::startZookeeperServer(int port) {  \n-  std::ostringstream sstr;\n-  sstr << \"START ZOOKEEPER \" << port << std::endl;\n-\n-  std::string req(sstr.str());\n-  LOG4CXX_DEBUG(logger, req);\n-\n-  ServerControl::ServerResponse resp = requestResponse(req);\n-  if (resp.status == \"OK\") {\n-    return TestServerPtr(new TestServerImpl(resp.message, *this));\n-  } else {\n-    LOG4CXX_ERROR(logger, \"Error creating zookeeper on port \" << port << \" \" << resp.message);\n-    throw ErrorCreatingServerException();\n-  }\n-}\n-\n-TestServerPtr ServerControl::startBookieServer(int port, TestServerPtr& zookeeperServer) {\n-  std::ostringstream sstr;\n-  sstr << \"START BOOKKEEPER \" << port << \" \" << zookeeperServer->getAddress() << std::endl;\n-\n-  std::string req(sstr.str());\n-  LOG4CXX_DEBUG(logger, req);\n-\n-  ServerControl::ServerResponse resp = requestResponse(req);\n-  if (resp.status == \"OK\") {\n-    return TestServerPtr(new TestServerImpl(resp.message, *this));\n-  } else {\n-    LOG4CXX_ERROR(logger, \"Error creating bookkeeper on port \" << port << \" \" << resp.message);\n-    throw ErrorCreatingServerException();\n-  }\n-}\n-\n-TestServerPtr ServerControl::startPubSubServer(int port, std::string& region, TestServerPtr& zookeeperServer) {\n-  std::ostringstream sstr;\n-  sstr << \"START HEDWIG \" << port << \" \" << region << \" \" << zookeeperServer->getAddress() << std::endl;\n-\n-  std::string req(sstr.str());\n-  LOG4CXX_DEBUG(logger, req);\n-\n-  ServerControl::ServerResponse resp = requestResponse(req);\n-  if (resp.status == \"OK\") {\n-    return TestServerPtr(new TestServerImpl(resp.message, *this));\n-  } else {\n-    LOG4CXX_ERROR(logger, \"Error creating hedwig on port \" << port << \" \" << resp.message);\n-    throw ErrorCreatingServerException();\n-  }\n-}"},{"sha":"cac09e6ef417f754a4922f1966ba9b812d64aad9","filename":"hedwig-client/src/main/cpp/test/servercontrol.h","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/apache/bookkeeper/blob/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-client/src/main/cpp/test/servercontrol.h","raw_url":"https://github.com/apache/bookkeeper/raw/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-client/src/main/cpp/test/servercontrol.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/servercontrol.h?ref=ea616470cfbd129bb03098698a562e1b8dd8ecc4","patch":"@@ -1,66 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-#ifndef SERVERCONTROL_H\n-#define SERVERCONTROL_H\n-\n-#include <tr1/memory>\n-#include <exception>\n-#include <boost/thread/mutex.hpp>\n-#include \"../lib/util.h\"\n-\n-namespace HedwigTest {\n-  const int DEFAULT_CONTROLSERVER_PORT = 5672;\n-\n-  class TestException : public std::exception {};\n-  class CantConnectToServerControlDaemonException : public TestException {};\n-  class InvalidServerControlDaemonResponseException : public TestException {};\n-  class ErrorCreatingServerException : public TestException {};\n-  class ErrorKillingServerException : public TestException {};\n-\n-  class TestServer {\n-  public:\n-    virtual void kill() = 0;\n-    virtual std::string& getAddress() = 0;\n-    virtual ~TestServer() {}\n-  };\n-  \n-  typedef std::tr1::shared_ptr<TestServer> TestServerPtr;\n-\n-  class ServerControl {\n-  public:\n-    ServerControl(int port);\n-    ~ServerControl();\n-    \n-    TestServerPtr startZookeeperServer(int port);\n-    TestServerPtr startBookieServer(int port, TestServerPtr& zookeeperServer);\n-    TestServerPtr startPubSubServer(int port, std::string& region, TestServerPtr& zookeeperServer);\n-    \n-    struct ServerResponse {\n-      std::string status;\n-      std::string message; \n-    };\n-    ServerResponse requestResponse(std::string request);\n-\n-  public:\n-    int socketfd;\n-    boost::mutex socketlock;\n-  };\n-};\n-\n-#endif"},{"sha":"f90502c80fe5c75758439dc82b95212f13133a29","filename":"hedwig-client/src/main/cpp/test/subscribetest.cpp","status":"modified","additions":13,"deletions":52,"changes":65,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/subscribetest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/subscribetest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/subscribetest.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <cppunit/Test.h>\n #include <cppunit/TestSuite.h>\n #include <cppunit/extensions/HelperMacros.h>\n@@ -27,22 +31,12 @@\n \n #include <log4cxx/logger.h>\n \n-#include \"servercontrol.h\"\n #include \"util.h\"\n \n static log4cxx::LoggerPtr logger(log4cxx::Logger::getLogger(\"hedwig.\"__FILE__));\n \n class SubscribeTestSuite : public CppUnit::TestFixture {\n private:\n-  HedwigTest::ServerControl* control;\n-  HedwigTest::TestServerPtr zk;\n-  HedwigTest::TestServerPtr bk1;\n-  HedwigTest::TestServerPtr bk2;\n-  HedwigTest::TestServerPtr bk3;\n-  HedwigTest::TestServerPtr hw1;\n-  HedwigTest::TestServerPtr hw2;\n-\n-\t\t\t       \n   CPPUNIT_TEST_SUITE( SubscribeTestSuite );\n   CPPUNIT_TEST(testSyncSubscribe);\n   CPPUNIT_TEST(testSyncSubscribeAttach);\n@@ -55,7 +49,7 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n   CPPUNIT_TEST_SUITE_END();\n \n public:\n-  SubscribeTestSuite() : control(NULL) {\n+  SubscribeTestSuite() {\n     \n   }\n \n@@ -64,47 +58,14 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n \n   void setUp()\n   {\n-    control = new HedwigTest::ServerControl(HedwigTest::DEFAULT_CONTROLSERVER_PORT);\n-    zk = control->startZookeeperServer(12345);\n-    bk1 = control->startBookieServer(12346, zk);\n-    bk2 = control->startBookieServer(12347, zk);\n-    bk3 = control->startBookieServer(12348, zk);\n-    \n-    std::string region(\"testRegion\");\n-    hw1 = control->startPubSubServer(12349, region, zk);\n-    hw2 = control->startPubSubServer(12350, region, zk);\n   }\n   \n   void tearDown() \n   {\n-    try {\n-      if (hw1.get()) {\n-\thw1->kill();\n-      }\n-    \n-      if (bk1.get()) {\n-\tbk1->kill();\n-      }\n-      if (bk2.get()) {\n-\tbk2->kill();\n-      }\n-      if (bk3.get()) {\n-\tbk3->kill();\n-      }\n-      \n-      if (zk.get()) {\n-\tzk->kill();\n-      }\n-    } catch (std::exception& e) {\n-      // don't allow an exception to break everything, we're going deleting the control no matter what\n-    }\n-    if (control) {\n-      delete control;\n-    }\n   }\n \n   void testSyncSubscribe() {\n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -116,7 +77,7 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n   }\n \n   void testSyncSubscribeAttach() {\n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -131,7 +92,7 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n     SimpleWaitCondition* cond1 = new SimpleWaitCondition();\n     std::auto_ptr<SimpleWaitCondition> cond1ptr(cond1);\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -153,7 +114,7 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n     SimpleWaitCondition* cond2 = new SimpleWaitCondition();\n     std::auto_ptr<SimpleWaitCondition> cond2ptr(cond2);\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -177,7 +138,7 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n     SimpleWaitCondition* cond1 = new SimpleWaitCondition();\n     std::auto_ptr<SimpleWaitCondition> cond1ptr(cond1);\n \n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -195,7 +156,7 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n   }\n \n   void testAsyncSubcribeCloseSubscriptionAndThenResubscribe() {\n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -210,7 +171,7 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n   }\n \n   void testUnsubscribeWithoutSubscribe() {\n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);\n@@ -222,7 +183,7 @@ class SubscribeTestSuite : public CppUnit::TestFixture {\n   }\n \n   void testSubscribeTwice() {\n-    Hedwig::Configuration* conf = new TestServerConfiguration(hw1);\n+    Hedwig::Configuration* conf = new TestServerConfiguration();\n     std::auto_ptr<Hedwig::Configuration> confptr(conf);\n     \n     Hedwig::Client* client = new Hedwig::Client(*conf);"},{"sha":"d424ccee50f8d9f5dc32fc4deb90eac10218acf2","filename":"hedwig-client/src/main/cpp/test/util.h","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/util.h?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -95,7 +95,7 @@ class TestCallback : public Hedwig::OperationCallback {\n \n class TestServerConfiguration : public Hedwig::Configuration {\n public:\n-  TestServerConfiguration(HedwigTest::TestServerPtr& server) : server(server), address(server->getAddress()) {}\n+  TestServerConfiguration() : address(\"localhost:4081\") {}\n   \n   virtual int getInt(const std::string& /*key*/, int defaultVal) const {\n     return defaultVal;\n@@ -114,7 +114,6 @@ class TestServerConfiguration : public Hedwig::Configuration {\n   }\n   \n private:\n-  HedwigTest::TestServerPtr server;\n   const std::string address;\n };\n "},{"sha":"285258dc465bbad65a0d3b0e5f945716e9e70cf7","filename":"hedwig-client/src/main/cpp/test/utiltest.cpp","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/utiltest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/dc5f5d223502b8bc9ef6bc3706f3bbea975e757e/hedwig-client/src/main/cpp/test/utiltest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/utiltest.cpp?ref=dc5f5d223502b8bc9ef6bc3706f3bbea975e757e","patch":"@@ -15,6 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+#ifdef HAVE_CONFIG_H\n+#include <config.h>\n+#endif\n+\n #include <cppunit/Test.h>\n #include <cppunit/TestSuite.h>\n #include <cppunit/extensions/HelperMacros.h>"},{"sha":"be64f93532b78375a9097f801e4ec178902ca008","filename":"hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java","status":"removed","additions":0,"deletions":237,"changes":237,"blob_url":"https://github.com/apache/bookkeeper/blob/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java","raw_url":"https://github.com/apache/bookkeeper/raw/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/ServerControl.java?ref=ea616470cfbd129bb03098698a562e1b8dd8ecc4","patch":"@@ -1,237 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig;\n-\n-import org.apache.hedwig.server.common.ServerConfiguration;\n-import org.apache.zookeeper.server.quorum.QuorumPeerConfig.ConfigException;\n-import org.apache.zookeeper.server.ZooKeeperServerMain;\n-import org.apache.zookeeper.ZooKeeper;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.CreateMode;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.ZooDefs.Ids;\n-import org.apache.bookkeeper.proto.BookieServer;\n-import org.apache.hedwig.server.netty.PubSubServer;\n-import java.net.ConnectException;\n-import java.io.File;\n-import java.io.IOException;\n-import org.apache.log4j.Logger;\n-\n-public class ServerControl {\n-    static Logger LOG = Logger.getLogger(ServerControl.class);\n-\n-    public class TestException extends Exception {\n-        public TestException(String str) {\n-            super(str);\n-        }\n-    };\n-\n-    public interface TestServer {\n-        public String getAddress();\n-        public void kill();\n-    }\n-\n-    private class BookKeeperServer extends BookieServer implements TestServer {\n-        private String address;\n-\n-        public BookKeeperServer(int port, TestServer zkserver, String journal, String ledger) throws IOException {\n-            super(port, zkserver.getAddress(), new File(journal), new File[] { new File(ledger) });\n-\n-            address = \"localhost:\"+port;\n-            start();\n-        }\n-\n-        public String getAddress() {\n-            return address;\n-        }\n-\n-        public void kill() {\n-            try {\n-                shutdown();\n-            } catch (Exception e) {\n-            }\n-        }\n-    }\n-\n-    private class ZookeeperServer extends ZooKeeperServerMain implements TestServer {\n-        public String address;\n-        public Thread serverThread;\n-        String path;\n-        public ZookeeperServer(int port, String path) throws TestException {\n-            super();\n-\n-            this.path = path;\n-            final String[] args = { Integer.toString(port), path};\n-            address = \"localhost:\" + port;\n-            serverThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        initializeAndRun(args);\n-                    } catch (Exception e) {\n-                    }\n-                };\n-            };\n-            serverThread.start();\n-        }\n-\n-        public String getAddress() {\n-            return address;\n-        }\n-\n-        public void kill() {\n-            shutdown();\n-            serverThread.interrupt();\n-        }\n-    }\n-\n-    private class HedwigServer implements TestServer {\n-        private PubSubServer server;\n-        private String address;\n-\n-        public HedwigServer(int port, String region, TestServer zk) throws TestException {\n-            class MyServerConfiguration extends ServerConfiguration {\n-                MyServerConfiguration(int port, TestServer zk, String region) {\n-                    conf.setProperty(ServerConfiguration.SERVER_PORT, port);\n-                    conf.setProperty(ServerConfiguration.ZK_HOST, zk.getAddress());\n-                    conf.setProperty(ServerConfiguration.REGION, region);\n-                }\n-            };\n-\n-            address = \"localhost:\" + port;\n-\n-            try {\n-                server = new PubSubServer(new MyServerConfiguration(port, zk, region));\n-            } catch (Exception e) {\n-                throw new TestException(\"Couldn't create pub sub server : \" + e);\n-            }\n-        }\n-\n-        public String getAddress() {\n-            return address;\n-        }\n-\n-        public void kill() {\n-            server.shutdown();\n-        }\n-    }\n-\n-    private String createTempDirectory(String suffix) throws IOException {\n-        String dir = System.getProperty(\"java.io.tmpdir\") + File.separator + System.currentTimeMillis() + suffix;\n-        final File dirf = new File(dir);\n-        boolean good = dirf.mkdir();\n-        if (!good) {\n-            throw new IOException(\"Unable to create directory \" + dir);\n-        }\n-\n-        Runtime.getRuntime().addShutdownHook(new Thread() {\n-            public void delete(File f) {\n-                File[] subfiles = f.listFiles();\n-                if (subfiles != null) {\n-                    for (File subf : subfiles) {\n-                        delete(subf);\n-                    }\n-                }\n-                f.delete();\n-            }\n-\n-            public void run() {\n-                delete(dirf);\n-            }\n-        });\n-        return dir;\n-    }\n-\n-    public TestServer startZookeeperServer(int port) throws IOException, TestException {\n-        String dir = createTempDirectory(\"-zookeeper-\" + port);\n-        ZookeeperServer server =  new ZookeeperServer(port, dir);\n-\n-        return server;\n-    }\n-\n-    public TestServer startBookieServer(int port, TestServer zookeeperServer) throws IOException, TestException {\n-        int tries = 4;\n-        while (true) {\n-            try {\n-                tries--;\n-                ZooKeeper zk = new ZooKeeper(zookeeperServer.getAddress(), 1000, new Watcher() {\n-                    public void process(WatchedEvent event) {\n-                        /* do nothing */\n-                    }\n-                });\n-                if (zk.exists(\"/ledgers/available\", false) == null) {\n-                    byte[] data = new byte[1];\n-                    data[0] = 0;\n-                    zk.create(\"/ledgers\", data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-                    zk.create(\"/ledgers/available\", data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n-                }\n-                zk.close();\n-                break;\n-            } catch (KeeperException.ConnectionLossException ce) {\n-                if (tries > 0) {\n-                    try {\n-                        Thread.sleep(3);\n-                    } catch (Exception e) {\n-                        throw new TestException(\"Can't even sleep. Fix your machine: \" + e);\n-                    }\n-                    continue;\n-                } else {\n-                    throw new TestException(\"Error connecting to zookeeper: \" + ce);\n-                }\n-            } catch (Exception e) {\n-                throw new TestException(\"Error initialising bookkeeper ledgers: \" +  e);\n-            }\n-        }\n-        String journal = createTempDirectory(\"-bookie-\" + port + \"-journal\");\n-        String ledger = createTempDirectory(\"-bookie-\" + port + \"-ledger\");\n-        BookKeeperServer bookie = new BookKeeperServer(port, zookeeperServer, journal, ledger);\n-        return bookie;\n-    }\n-\n-    public TestServer startPubSubServer(int port, String region, TestServer zookeeperServer) throws IOException, TestException {\n-        return new HedwigServer(port, region, zookeeperServer);\n-    }\n-\n-    public ServerControl() {\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        ServerControl control = new ServerControl();\n-\n-        TestServer zk = control.startZookeeperServer(12345);\n-        TestServer bk1 = control.startBookieServer(12346, zk);\n-        TestServer bk2 = control.startBookieServer(12347, zk);\n-        TestServer bk3 = control.startBookieServer(12348, zk);\n-\n-        TestServer hw1 = control.startPubSubServer(12349, \"foobar\", zk);\n-        TestServer hw2 = control.startPubSubServer(12350, \"foobar\", zk);\n-        TestServer hw3 = control.startPubSubServer(12351, \"foobar\", zk);\n-        TestServer hw4 = control.startPubSubServer(12352, \"barfoo\", zk);\n-        LOG.info(\"Started \" + zk.getAddress());\n-        LOG.info(\"Sleeping for 10 seconds\");\n-        Thread.sleep(10000);\n-        bk3.kill();\n-        bk2.kill();\n-        bk1.kill();\n-        zk.kill();\n-        hw1.kill();\n-        hw2.kill();\n-        hw3.kill();\n-        hw4.kill();\n-    }\n-}"},{"sha":"14de7056484e0a70100a1c2b275f3601208cf5cd","filename":"hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java","status":"removed","additions":0,"deletions":171,"changes":171,"blob_url":"https://github.com/apache/bookkeeper/blob/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java","raw_url":"https://github.com/apache/bookkeeper/raw/ea616470cfbd129bb03098698a562e1b8dd8ecc4/hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/ServerControlDaemon.java?ref=ea616470cfbd129bb03098698a562e1b8dd8ecc4","patch":"@@ -1,171 +0,0 @@\n-/**\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.hedwig;\n-\n-import java.net.InetSocketAddress;\n-import java.util.concurrent.Executors;\n-\n-import org.jboss.netty.bootstrap.ServerBootstrap;\n-import org.jboss.netty.channel.ChannelPipeline;\n-import org.jboss.netty.channel.ChannelPipelineFactory;\n-import org.jboss.netty.channel.Channels;\n-import org.jboss.netty.channel.socket.nio.NioServerSocketChannelFactory;\n-\n-import org.apache.log4j.Logger;\n-\n-import org.jboss.netty.channel.Channel;\n-import org.jboss.netty.buffer.ChannelBuffer;\n-import org.jboss.netty.channel.ChannelEvent;\n-import org.jboss.netty.channel.ChannelHandlerContext;\n-import org.jboss.netty.channel.ChannelStateEvent;\n-import org.jboss.netty.channel.ExceptionEvent;\n-import org.jboss.netty.channel.MessageEvent;\n-import org.jboss.netty.channel.SimpleChannelUpstreamHandler;\n-import org.jboss.netty.handler.codec.string.StringEncoder;\n-import org.jboss.netty.handler.codec.string.StringDecoder;\n-import org.jboss.netty.handler.codec.frame.Delimiters;\n-import org.jboss.netty.handler.codec.frame.DelimiterBasedFrameDecoder;\n-import org.jboss.netty.channel.ChannelPipelineCoverage;\n-\n-import java.util.HashMap;\n-\n-public class ServerControlDaemon {\n-    private static final Logger LOG =\n-        Logger.getLogger(ServerControlDaemon.class);\n-\n-    @ChannelPipelineCoverage(\"all\")\n-    public static class ServerControlDaemonHandler extends SimpleChannelUpstreamHandler {\n-        private ServerControl control;\n-        private HashMap<Channel, HashMap<String, ServerControl.TestServer>> serverMap;\n-\n-        public ServerControlDaemonHandler() {\n-            serverMap = new HashMap<Channel, HashMap<String, ServerControl.TestServer>>();\n-            control = new ServerControl();\n-        }\n-\n-        private void addServerForChannel(Channel c, ServerControl.TestServer t) {\n-            LOG.info(\"Created server \" + t.getAddress());\n-            HashMap<String, ServerControl.TestServer> map = serverMap.get(c);\n-            if (map == null) {\n-                map = new HashMap<String, ServerControl.TestServer>();\n-                serverMap.put(c, map);\n-            }\n-            map.put(t.getAddress(), t);\n-        }\n-\n-        private void killServerForChannel(Channel c, String name) {\n-            LOG.info(\"Killing server \" + name);\n-            HashMap<String, ServerControl.TestServer> map = serverMap.get(c);\n-            ServerControl.TestServer t = map.get(name);\n-            map.remove(name);\n-            try {\n-                t.kill();\n-            } catch (Exception e) {\n-                LOG.error(\"Error killing server\", e);\n-                // do nothing, should be killed, we won't use it again anyhow\n-            }\n-        }\n-\n-        private ServerControl.TestServer lookupServer(Channel c, String name) {\n-            HashMap<String, ServerControl.TestServer> map = serverMap.get(c);\n-            return map.get(name);\n-        }\n-\n-        private void clearServersForChannel(Channel c) {\n-            HashMap<String, ServerControl.TestServer> map = serverMap.get(c);\n-            serverMap.remove(map);\n-\n-            if (map != null) {\n-                for (ServerControl.TestServer t : map.values()) {\n-                    t.kill();\n-                }\n-                map.clear();\n-            }\n-        }\n-\n-        public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) {\n-            try {\n-                String command = (String)e.getMessage();\n-                LOG.info(\"Command: \" + command);\n-                String[] args = command.split(\"\\\\s+\");\n-\n-                if (args[0].equals(\"START\")) {\n-                    ServerControl.TestServer t = null;\n-                    if (args[1].equals(\"ZOOKEEPER\")) {\n-                        t = control.startZookeeperServer(Integer.valueOf(args[2]));\n-                        addServerForChannel(ctx.getChannel(), t);\n-                    } else if (args[1].equals(\"BOOKKEEPER\")) {\n-                        ServerControl.TestServer zk = lookupServer(ctx.getChannel(), args[3]);\n-                        t = control.startBookieServer(Integer.valueOf(args[2]), zk);\n-                        addServerForChannel(ctx.getChannel(), t);\n-                    } else if (args[1].equals(\"HEDWIG\")) {\n-                        ServerControl.TestServer zk = lookupServer(ctx.getChannel(), args[4]);\n-                        t = control.startPubSubServer(Integer.valueOf(args[2]), args[3], zk);\n-                        addServerForChannel(ctx.getChannel(), t);\n-                    }\n-\n-                    ctx.getChannel().write(\"OK \" + t.getAddress() + \"\\n\");\n-                } else if (args[0].equals(\"KILL\")) {\n-                    killServerForChannel(ctx.getChannel(), args[1]);\n-\n-                    ctx.getChannel().write(\"OK Killed \" + args[1] + \"\\n\");\n-                } else if (args[0].equals(\"TEST\")) {\n-                    LOG.info(\"\\n******\\n\\n\" + args[1] + \"\\n\\n******\");\n-                    ctx.getChannel().write(\"OK Test Noted\\n\");\n-                } else {\n-                    ctx.getChannel().write(\"ERR Bad Command\\n\");\n-                }\n-            } catch (Exception ex) {\n-                LOG.error(\"Error handling message\", ex);\n-                ctx.getChannel().write(\"ERR \" + ex.toString() + \"\\n\");\n-            }\n-        }\n-\n-        public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {\n-            clearServersForChannel(ctx.getChannel());\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        // Configure the server.\n-        int port = 5672;\n-        if (args.length == 1) {\n-            port = Integer.valueOf(args[0]);\n-        }\n-        ServerBootstrap bootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),\n-                Executors.newCachedThreadPool()));\n-        // Set up the pipeline factory.\n-        bootstrap.setPipelineFactory(new ChannelPipelineFactory() {\n-            public ChannelPipeline getPipeline() throws Exception {\n-                ChannelPipeline p = Channels.pipeline();\n-                p.addLast(\"frameDecoder\", new DelimiterBasedFrameDecoder(80, Delimiters.lineDelimiter()));\n-                p.addLast(\"stringDecoder\", new StringDecoder(\"UTF-8\"));\n-\n-                // Encoder\n-                p.addLast(\"stringEncoder\", new StringEncoder(\"UTF-8\"));\n-                p.addLast(\"handler\", new ServerControlDaemonHandler());\n-\n-                return p;\n-            }\n-        });\n-\n-        LOG.info(\"Listening on localhost:\"+port);\n-        // Bind and start to accept incoming connections.\n-        bootstrap.bind(new InetSocketAddress(port));\n-    }\n-}"}]}

