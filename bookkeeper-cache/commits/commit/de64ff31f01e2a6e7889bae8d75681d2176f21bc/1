{"sha":"de64ff31f01e2a6e7889bae8d75681d2176f21bc","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkZTY0ZmYzMWYwMWUyYTZlNzg4OWJhZThkNzU2ODFkMjE3NmYyMWJj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-10T10:29:03Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-10T10:29:03Z"},"message":"BOOKKEEPER-418: Store hostname of locker in replication lock (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1396536 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"38c0e900d3bc51ea4f8c030c4bc57b081be7643f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/38c0e900d3bc51ea4f8c030c4bc57b081be7643f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/de64ff31f01e2a6e7889bae8d75681d2176f21bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/de64ff31f01e2a6e7889bae8d75681d2176f21bc","html_url":"https://github.com/apache/bookkeeper/commit/de64ff31f01e2a6e7889bae8d75681d2176f21bc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/de64ff31f01e2a6e7889bae8d75681d2176f21bc/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ce0e7b2077d495ca9f4192da1154f565cb9def5b","url":"https://api.github.com/repos/apache/bookkeeper/commits/ce0e7b2077d495ca9f4192da1154f565cb9def5b","html_url":"https://github.com/apache/bookkeeper/commit/ce0e7b2077d495ca9f4192da1154f565cb9def5b"}],"stats":{"total":415,"additions":413,"deletions":2},"files":[{"sha":"d70834c23e16189dad97b4a026d5f3017c2a98b9","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/de64ff31f01e2a6e7889bae8d75681d2176f21bc/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/de64ff31f01e2a6e7889bae8d75681d2176f21bc/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=de64ff31f01e2a6e7889bae8d75681d2176f21bc","patch":"@@ -90,6 +90,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-405: Let's add Thread name for ReplicationWorker thread. (umamahesh via ivank)\n \n+        BOOKKEEPER-418: Store hostname of locker in replication lock (ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"9d86c699a9d51c817db88d604ae62524878e9005","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/de64ff31f01e2a6e7889bae8d75681d2176f21bc/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/de64ff31f01e2a6e7889bae8d75681d2176f21bc/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=de64ff31f01e2a6e7889bae8d75681d2176f21bc","patch":"@@ -25,6 +25,7 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.DataFormats.LedgerRereplicationLayoutFormat;\n import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n+import org.apache.bookkeeper.proto.DataFormats.LockDataFormat;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.WatchedEvent;\n@@ -36,6 +37,8 @@\n \n import com.google.protobuf.TextFormat;\n \n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n import java.nio.charset.Charset;\n \n import java.util.concurrent.CountDownLatch;\n@@ -92,6 +95,7 @@\n     private final String urLedgerPath;\n     private final String urLockPath;\n     private final String layoutZNode;\n+    private final LockDataFormat lockData;\n \n     private final ZooKeeper zkc;\n \n@@ -106,6 +110,15 @@ public ZkLedgerUnderreplicationManager(AbstractConfiguration conf, ZooKeeper zkc\n         idExtractionPattern = Pattern.compile(\"urL(\\\\d+)$\");\n         this.zkc = zkc;\n \n+        LockDataFormat.Builder lockDataBuilder = LockDataFormat.newBuilder();\n+        try {\n+            lockDataBuilder.setBookieId(InetAddress.getLocalHost().getHostAddress().toString());\n+        } catch (UnknownHostException uhe) {\n+            // if we cant get the address, ignore. it's optional\n+            // in the data structure in any case\n+        }\n+        lockData = lockDataBuilder.build();\n+\n         checkLayout();\n     }\n \n@@ -288,7 +301,7 @@ private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watc\n                     }\n \n                     long ledgerId = getLedgerId(tryChild);\n-                    zkc.create(lockPath, new byte[0],\n+                    zkc.create(lockPath, TextFormat.printToString(lockData).getBytes(UTF8),\n                                Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n                     heldLocks.put(ledgerId, new Lock(lockPath, stat.getVersion()));\n                     return ledgerId;"},{"sha":"38dcf869dca545c61a4e855bc12ac998f3f402da","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","status":"modified","additions":390,"deletions":1,"changes":391,"blob_url":"https://github.com/apache/bookkeeper/blob/de64ff31f01e2a6e7889bae8d75681d2176f21bc/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","raw_url":"https://github.com/apache/bookkeeper/raw/de64ff31f01e2a6e7889bae8d75681d2176f21bc/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java?ref=de64ff31f01e2a6e7889bae8d75681d2176f21bc","patch":"@@ -3199,6 +3199,381 @@ void setInstanceId(com.google.protobuf.ByteString value) {\n     // @@protoc_insertion_point(class_scope:CookieFormat)\n   }\n   \n+  public interface LockDataFormatOrBuilder\n+      extends com.google.protobuf.MessageOrBuilder {\n+    \n+    // optional string bookieId = 1;\n+    boolean hasBookieId();\n+    String getBookieId();\n+  }\n+  public static final class LockDataFormat extends\n+      com.google.protobuf.GeneratedMessage\n+      implements LockDataFormatOrBuilder {\n+    // Use LockDataFormat.newBuilder() to construct.\n+    private LockDataFormat(Builder builder) {\n+      super(builder);\n+    }\n+    private LockDataFormat(boolean noInit) {}\n+    \n+    private static final LockDataFormat defaultInstance;\n+    public static LockDataFormat getDefaultInstance() {\n+      return defaultInstance;\n+    }\n+    \n+    public LockDataFormat getDefaultInstanceForType() {\n+      return defaultInstance;\n+    }\n+    \n+    public static final com.google.protobuf.Descriptors.Descriptor\n+        getDescriptor() {\n+      return org.apache.bookkeeper.proto.DataFormats.internal_static_LockDataFormat_descriptor;\n+    }\n+    \n+    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+        internalGetFieldAccessorTable() {\n+      return org.apache.bookkeeper.proto.DataFormats.internal_static_LockDataFormat_fieldAccessorTable;\n+    }\n+    \n+    private int bitField0_;\n+    // optional string bookieId = 1;\n+    public static final int BOOKIEID_FIELD_NUMBER = 1;\n+    private java.lang.Object bookieId_;\n+    public boolean hasBookieId() {\n+      return ((bitField0_ & 0x00000001) == 0x00000001);\n+    }\n+    public String getBookieId() {\n+      java.lang.Object ref = bookieId_;\n+      if (ref instanceof String) {\n+        return (String) ref;\n+      } else {\n+        com.google.protobuf.ByteString bs = \n+            (com.google.protobuf.ByteString) ref;\n+        String s = bs.toStringUtf8();\n+        if (com.google.protobuf.Internal.isValidUtf8(bs)) {\n+          bookieId_ = s;\n+        }\n+        return s;\n+      }\n+    }\n+    private com.google.protobuf.ByteString getBookieIdBytes() {\n+      java.lang.Object ref = bookieId_;\n+      if (ref instanceof String) {\n+        com.google.protobuf.ByteString b = \n+            com.google.protobuf.ByteString.copyFromUtf8((String) ref);\n+        bookieId_ = b;\n+        return b;\n+      } else {\n+        return (com.google.protobuf.ByteString) ref;\n+      }\n+    }\n+    \n+    private void initFields() {\n+      bookieId_ = \"\";\n+    }\n+    private byte memoizedIsInitialized = -1;\n+    public final boolean isInitialized() {\n+      byte isInitialized = memoizedIsInitialized;\n+      if (isInitialized != -1) return isInitialized == 1;\n+      \n+      memoizedIsInitialized = 1;\n+      return true;\n+    }\n+    \n+    public void writeTo(com.google.protobuf.CodedOutputStream output)\n+                        throws java.io.IOException {\n+      getSerializedSize();\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        output.writeBytes(1, getBookieIdBytes());\n+      }\n+      getUnknownFields().writeTo(output);\n+    }\n+    \n+    private int memoizedSerializedSize = -1;\n+    public int getSerializedSize() {\n+      int size = memoizedSerializedSize;\n+      if (size != -1) return size;\n+    \n+      size = 0;\n+      if (((bitField0_ & 0x00000001) == 0x00000001)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeBytesSize(1, getBookieIdBytes());\n+      }\n+      size += getUnknownFields().getSerializedSize();\n+      memoizedSerializedSize = size;\n+      return size;\n+    }\n+    \n+    private static final long serialVersionUID = 0L;\n+    @java.lang.Override\n+    protected java.lang.Object writeReplace()\n+        throws java.io.ObjectStreamException {\n+      return super.writeReplace();\n+    }\n+    \n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseFrom(\n+        com.google.protobuf.ByteString data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseFrom(\n+        com.google.protobuf.ByteString data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseFrom(byte[] data)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data).buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseFrom(\n+        byte[] data,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws com.google.protobuf.InvalidProtocolBufferException {\n+      return newBuilder().mergeFrom(data, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseDelimitedFrom(java.io.InputStream input)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseDelimitedFrom(\n+        java.io.InputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      Builder builder = newBuilder();\n+      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {\n+        return builder.buildParsed();\n+      } else {\n+        return null;\n+      }\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseFrom(\n+        com.google.protobuf.CodedInputStream input)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input).buildParsed();\n+    }\n+    public static org.apache.bookkeeper.proto.DataFormats.LockDataFormat parseFrom(\n+        com.google.protobuf.CodedInputStream input,\n+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+        throws java.io.IOException {\n+      return newBuilder().mergeFrom(input, extensionRegistry)\n+               .buildParsed();\n+    }\n+    \n+    public static Builder newBuilder() { return Builder.create(); }\n+    public Builder newBuilderForType() { return newBuilder(); }\n+    public static Builder newBuilder(org.apache.bookkeeper.proto.DataFormats.LockDataFormat prototype) {\n+      return newBuilder().mergeFrom(prototype);\n+    }\n+    public Builder toBuilder() { return newBuilder(this); }\n+    \n+    @java.lang.Override\n+    protected Builder newBuilderForType(\n+        com.google.protobuf.GeneratedMessage.BuilderParent parent) {\n+      Builder builder = new Builder(parent);\n+      return builder;\n+    }\n+    public static final class Builder extends\n+        com.google.protobuf.GeneratedMessage.Builder<Builder>\n+       implements org.apache.bookkeeper.proto.DataFormats.LockDataFormatOrBuilder {\n+      public static final com.google.protobuf.Descriptors.Descriptor\n+          getDescriptor() {\n+        return org.apache.bookkeeper.proto.DataFormats.internal_static_LockDataFormat_descriptor;\n+      }\n+      \n+      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+          internalGetFieldAccessorTable() {\n+        return org.apache.bookkeeper.proto.DataFormats.internal_static_LockDataFormat_fieldAccessorTable;\n+      }\n+      \n+      // Construct using org.apache.bookkeeper.proto.DataFormats.LockDataFormat.newBuilder()\n+      private Builder() {\n+        maybeForceBuilderInitialization();\n+      }\n+      \n+      private Builder(BuilderParent parent) {\n+        super(parent);\n+        maybeForceBuilderInitialization();\n+      }\n+      private void maybeForceBuilderInitialization() {\n+        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {\n+        }\n+      }\n+      private static Builder create() {\n+        return new Builder();\n+      }\n+      \n+      public Builder clear() {\n+        super.clear();\n+        bookieId_ = \"\";\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        return this;\n+      }\n+      \n+      public Builder clone() {\n+        return create().mergeFrom(buildPartial());\n+      }\n+      \n+      public com.google.protobuf.Descriptors.Descriptor\n+          getDescriptorForType() {\n+        return org.apache.bookkeeper.proto.DataFormats.LockDataFormat.getDescriptor();\n+      }\n+      \n+      public org.apache.bookkeeper.proto.DataFormats.LockDataFormat getDefaultInstanceForType() {\n+        return org.apache.bookkeeper.proto.DataFormats.LockDataFormat.getDefaultInstance();\n+      }\n+      \n+      public org.apache.bookkeeper.proto.DataFormats.LockDataFormat build() {\n+        org.apache.bookkeeper.proto.DataFormats.LockDataFormat result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(result);\n+        }\n+        return result;\n+      }\n+      \n+      private org.apache.bookkeeper.proto.DataFormats.LockDataFormat buildParsed()\n+          throws com.google.protobuf.InvalidProtocolBufferException {\n+        org.apache.bookkeeper.proto.DataFormats.LockDataFormat result = buildPartial();\n+        if (!result.isInitialized()) {\n+          throw newUninitializedMessageException(\n+            result).asInvalidProtocolBufferException();\n+        }\n+        return result;\n+      }\n+      \n+      public org.apache.bookkeeper.proto.DataFormats.LockDataFormat buildPartial() {\n+        org.apache.bookkeeper.proto.DataFormats.LockDataFormat result = new org.apache.bookkeeper.proto.DataFormats.LockDataFormat(this);\n+        int from_bitField0_ = bitField0_;\n+        int to_bitField0_ = 0;\n+        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {\n+          to_bitField0_ |= 0x00000001;\n+        }\n+        result.bookieId_ = bookieId_;\n+        result.bitField0_ = to_bitField0_;\n+        onBuilt();\n+        return result;\n+      }\n+      \n+      public Builder mergeFrom(com.google.protobuf.Message other) {\n+        if (other instanceof org.apache.bookkeeper.proto.DataFormats.LockDataFormat) {\n+          return mergeFrom((org.apache.bookkeeper.proto.DataFormats.LockDataFormat)other);\n+        } else {\n+          super.mergeFrom(other);\n+          return this;\n+        }\n+      }\n+      \n+      public Builder mergeFrom(org.apache.bookkeeper.proto.DataFormats.LockDataFormat other) {\n+        if (other == org.apache.bookkeeper.proto.DataFormats.LockDataFormat.getDefaultInstance()) return this;\n+        if (other.hasBookieId()) {\n+          setBookieId(other.getBookieId());\n+        }\n+        this.mergeUnknownFields(other.getUnknownFields());\n+        return this;\n+      }\n+      \n+      public final boolean isInitialized() {\n+        return true;\n+      }\n+      \n+      public Builder mergeFrom(\n+          com.google.protobuf.CodedInputStream input,\n+          com.google.protobuf.ExtensionRegistryLite extensionRegistry)\n+          throws java.io.IOException {\n+        com.google.protobuf.UnknownFieldSet.Builder unknownFields =\n+          com.google.protobuf.UnknownFieldSet.newBuilder(\n+            this.getUnknownFields());\n+        while (true) {\n+          int tag = input.readTag();\n+          switch (tag) {\n+            case 0:\n+              this.setUnknownFields(unknownFields.build());\n+              onChanged();\n+              return this;\n+            default: {\n+              if (!parseUnknownField(input, unknownFields,\n+                                     extensionRegistry, tag)) {\n+                this.setUnknownFields(unknownFields.build());\n+                onChanged();\n+                return this;\n+              }\n+              break;\n+            }\n+            case 10: {\n+              bitField0_ |= 0x00000001;\n+              bookieId_ = input.readBytes();\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      \n+      private int bitField0_;\n+      \n+      // optional string bookieId = 1;\n+      private java.lang.Object bookieId_ = \"\";\n+      public boolean hasBookieId() {\n+        return ((bitField0_ & 0x00000001) == 0x00000001);\n+      }\n+      public String getBookieId() {\n+        java.lang.Object ref = bookieId_;\n+        if (!(ref instanceof String)) {\n+          String s = ((com.google.protobuf.ByteString) ref).toStringUtf8();\n+          bookieId_ = s;\n+          return s;\n+        } else {\n+          return (String) ref;\n+        }\n+      }\n+      public Builder setBookieId(String value) {\n+        if (value == null) {\n+    throw new NullPointerException();\n+  }\n+  bitField0_ |= 0x00000001;\n+        bookieId_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearBookieId() {\n+        bitField0_ = (bitField0_ & ~0x00000001);\n+        bookieId_ = getDefaultInstance().getBookieId();\n+        onChanged();\n+        return this;\n+      }\n+      void setBookieId(com.google.protobuf.ByteString value) {\n+        bitField0_ |= 0x00000001;\n+        bookieId_ = value;\n+        onChanged();\n+      }\n+      \n+      // @@protoc_insertion_point(builder_scope:LockDataFormat)\n+    }\n+    \n+    static {\n+      defaultInstance = new LockDataFormat(true);\n+      defaultInstance.initFields();\n+    }\n+    \n+    // @@protoc_insertion_point(class_scope:LockDataFormat)\n+  }\n+  \n   private static com.google.protobuf.Descriptors.Descriptor\n     internal_static_LedgerMetadataFormat_descriptor;\n   private static\n@@ -3224,6 +3599,11 @@ void setInstanceId(com.google.protobuf.ByteString value) {\n   private static\n     com.google.protobuf.GeneratedMessage.FieldAccessorTable\n       internal_static_CookieFormat_fieldAccessorTable;\n+  private static com.google.protobuf.Descriptors.Descriptor\n+    internal_static_LockDataFormat_descriptor;\n+  private static\n+    com.google.protobuf.GeneratedMessage.FieldAccessorTable\n+      internal_static_LockDataFormat_fieldAccessorTable;\n   \n   public static com.google.protobuf.Descriptors.FileDescriptor\n       getDescriptor() {\n@@ -3250,7 +3630,8 @@ void setInstanceId(com.google.protobuf.ByteString value) {\n       \"erFormat\\022\\017\\n\\007replica\\030\\001 \\003(\\t\\\"^\\n\\014CookieForma\" +\n       \"t\\022\\022\\n\\nbookieHost\\030\\001 \\002(\\t\\022\\022\\n\\njournalDir\\030\\002 \\002(\" +\n       \"\\t\\022\\022\\n\\nledgerDirs\\030\\003 \\002(\\t\\022\\022\\n\\ninstanceId\\030\\004 \\001(\" +\n-      \"\\tB\\037\\n\\033org.apache.bookkeeper.protoH\\001\"\n+      \"\\t\\\"\\\"\\n\\016LockDataFormat\\022\\020\\n\\010bookieId\\030\\001 \\001(\\tB\\037\\n\" +\n+      \"\\033org.apache.bookkeeper.protoH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n@@ -3297,6 +3678,14 @@ void setInstanceId(com.google.protobuf.ByteString value) {\n               new java.lang.String[] { \"BookieHost\", \"JournalDir\", \"LedgerDirs\", \"InstanceId\", },\n               org.apache.bookkeeper.proto.DataFormats.CookieFormat.class,\n               org.apache.bookkeeper.proto.DataFormats.CookieFormat.Builder.class);\n+          internal_static_LockDataFormat_descriptor =\n+            getDescriptor().getMessageTypes().get(4);\n+          internal_static_LockDataFormat_fieldAccessorTable = new\n+            com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n+              internal_static_LockDataFormat_descriptor,\n+              new java.lang.String[] { \"BookieId\", },\n+              org.apache.bookkeeper.proto.DataFormats.LockDataFormat.class,\n+              org.apache.bookkeeper.proto.DataFormats.LockDataFormat.Builder.class);\n           return null;\n         }\n       };"},{"sha":"fd76fad33befcc9cf168de0d1b18c3dd8aeb5867","filename":"bookkeeper-server/src/main/proto/DataFormats.proto","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/de64ff31f01e2a6e7889bae8d75681d2176f21bc/bookkeeper-server/src/main/proto/DataFormats.proto","raw_url":"https://github.com/apache/bookkeeper/raw/de64ff31f01e2a6e7889bae8d75681d2176f21bc/bookkeeper-server/src/main/proto/DataFormats.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/proto/DataFormats.proto?ref=de64ff31f01e2a6e7889bae8d75681d2176f21bc","patch":"@@ -68,3 +68,10 @@ message CookieFormat {\n     required string ledgerDirs = 3;\n     optional string instanceId = 4;\n }\n+\n+/**\n+ * Debug information for locks\n+ */\n+message LockDataFormat {\n+    optional string bookieId = 1;\n+}\n\\ No newline at end of file"}]}

