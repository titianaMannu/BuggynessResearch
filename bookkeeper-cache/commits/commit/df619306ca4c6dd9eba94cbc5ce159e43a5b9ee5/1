{"sha":"df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkZjYxOTMwNmNhNGM2ZGQ5ZWJhOTRjYmM1Y2UxNTllNDNhNWI5ZWU1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-07-23T21:39:13Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-07-23T21:39:13Z"},"message":"BOOKKEEPER-327: System.currentTimeMillis usage in BookKeeper (uma via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1364808 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d409e9d42393257beea7cf5ae24ded13785f67c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2d409e9d42393257beea7cf5ae24ded13785f67c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","html_url":"https://github.com/apache/bookkeeper/commit/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"f13b9f4e26fe9b213837d1e68596b55f74163070","url":"https://api.github.com/repos/apache/bookkeeper/commits/f13b9f4e26fe9b213837d1e68596b55f74163070","html_url":"https://github.com/apache/bookkeeper/commit/f13b9f4e26fe9b213837d1e68596b55f74163070"}],"stats":{"total":188,"additions":128,"deletions":60},"files":[{"sha":"40d45bd90c7e45748178c9b1103a28307d460c21","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -38,6 +38,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-294: Not able to start the bookkeeper before the ZK session timeout. (rakeshr via ivank)\n \n+\tBOOKKEEPER-327: System.currentTimeMillis usage in BookKeeper (uma via fpj)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"8b76dbceb187e08f118432b65437ffead0530b85","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -46,6 +46,7 @@\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n@@ -801,7 +802,7 @@ public static void main(String[] args)\n         Bookie b = new Bookie(new ServerConfiguration());\n         b.start();\n         CounterCallback cb = new CounterCallback();\n-        long start = System.currentTimeMillis();\n+        long start = MathUtils.now();\n         for (int i = 0; i < 100000; i++) {\n             ByteBuffer buff = ByteBuffer.allocate(1024);\n             buff.putLong(1);\n@@ -812,7 +813,7 @@ public static void main(String[] args)\n             b.addEntry(buff, cb, null, new byte[0]);\n         }\n         cb.waitZero();\n-        long end = System.currentTimeMillis();\n+        long end = MathUtils.now();\n         System.out.println(\"Took \" + (end-start) + \"ms\");\n     }\n }"},{"sha":"6fb0e7ec63c2e619e1dfbf6b28b9951b6bd48c85","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -23,21 +23,20 @@\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n-import java.util.Comparator;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Map;\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.ActiveLedgerManager;\n-import org.apache.zookeeper.ZooKeeper;\n+import org.apache.bookkeeper.util.MathUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This is the garbage collector thread that runs in the background to\n@@ -173,7 +172,7 @@ public GarbageCollectorThread(ServerConfiguration conf,\n         LOG.info(\"Major Compaction : enabled=\" + enableMajorCompaction + \", threshold=\"\n                + majorCompactionThreshold + \", interval=\" + majorCompactionInterval);\n \n-        lastMinorCompactionTime = lastMajorCompactionTime = System.currentTimeMillis();\n+        lastMinorCompactionTime = lastMajorCompactionTime = MathUtils.now();\n     }\n \n     @Override\n@@ -198,13 +197,13 @@ public void run() {\n             // gc entry logs\n             doGcEntryLogs();\n \n-            long curTime = System.currentTimeMillis();\n+            long curTime = MathUtils.now();\n             if (enableMajorCompaction &&\n                 curTime - lastMajorCompactionTime > majorCompactionInterval) {\n                 // enter major compaction\n                 LOG.info(\"Enter major compaction\");\n                 doCompactEntryLogs(majorCompactionThreshold);\n-                lastMajorCompactionTime = System.currentTimeMillis();\n+                lastMajorCompactionTime = MathUtils.now();\n                 // also move minor compaction time\n                 lastMinorCompactionTime = lastMajorCompactionTime;\n                 continue;\n@@ -215,7 +214,7 @@ public void run() {\n                 // enter minor compaction\n                 LOG.info(\"Enter minor compaction\");\n                 doCompactEntryLogs(minorCompactionThreshold);\n-                lastMinorCompactionTime = System.currentTimeMillis();\n+                lastMinorCompactionTime = MathUtils.now();\n             }\n         }\n     }\n@@ -285,7 +284,7 @@ public int compare(EntryLogMetadata m1, EntryLogMetadata m2) {\n                 }\n             }\n         };\n-        List<EntryLogMetadata> logsToCompact = new ArrayList();\n+        List<EntryLogMetadata> logsToCompact = new ArrayList<EntryLogMetadata>();\n         logsToCompact.addAll(entryLogMetaMap.values());\n         Collections.sort(logsToCompact, sizeComparator);\n         for (EntryLogMetadata meta : logsToCompact) {"},{"sha":"ce9b5f7ed76c00e14b1ba125882c1d4e898f7c5b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -35,6 +35,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.IOUtils;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -480,7 +481,7 @@ public void run() {\n             while (true) {\n                 // new journal file to write\n                 if (null == logFile) {\n-                    logId = System.currentTimeMillis();\n+                    logId = MathUtils.now();\n                     logFile = new JournalChannel(journalDirectory, logId);\n                     bc = logFile.getBufferedChannel();\n "},{"sha":"505f900860d51ad626de0bfe673e8a78d4b18a60","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,6 +1,4 @@\n-package org.apache.bookkeeper.client;\n-\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -20,31 +18,30 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import java.io.IOException;\n-import java.util.concurrent.Executors;\n-\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.bookkeeper.meta.LedgerManager;\n-import org.apache.bookkeeper.meta.LedgerManagerFactory;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.BKException.Code;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n-import org.apache.bookkeeper.util.SafeRunnable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * BookKeeper client. We assume there is one single writer to a ledger at any"},{"sha":"9aa80a06ae95d05db91f64efc9a5448f09c26ae0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -23,10 +23,14 @@\n \n import java.beans.ConstructorProperties;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Bookie Server Stats\n  */\n public class BKStats {\n+    private static final Logger LOG = LoggerFactory.getLogger(BKStats.class);\n     private static BKStats instance = new BKStats();\n \n     public static BKStats getInstance() {\n@@ -105,6 +109,14 @@ synchronized public void incrementFailedOps() {\n          * Update Latency\n          */\n         synchronized public void updateLatency(long latency) {\n+            if (latency < 0) {\n+                // less than 0ms . Ideally this should not happen.\n+                // We have seen this latency negative in some cases due to the\n+                // behaviors of JVM. Ignoring the statistics updation for such\n+                // cases.\n+                LOG.warn(\"Latency time coming negative\");\n+                return;\n+            }\n             totalLatency += latency;\n             ++numSuccessOps;\n             if (latency < minLatency) {"},{"sha":"5bb14920ee94c3d6f2e8ee6b967291dc994d1bcd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,6 +1,4 @@\n-package org.apache.bookkeeper.proto;\n-\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -20,6 +18,7 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.proto;\n \n import java.io.File;\n import java.io.IOException;\n@@ -37,6 +36,8 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n+import org.apache.bookkeeper.util.MathUtils;\n+\n import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.cli.BasicParser;\n@@ -323,7 +324,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n         int statType = BKStats.STATS_UNKNOWN;\n         long startTime = 0;\n         if (isStatsEnabled) {\n-            startTime = System.currentTimeMillis();\n+            startTime = MathUtils.now();\n         }\n \n         // packet format is different between ADDENTRY and READENTRY\n@@ -443,7 +444,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n             if (success) {\n                 // for add operations, we compute latency in writeComplete callbacks.\n                 if (statType != BKStats.STATS_ADD) {\n-                    long elapsedTime = System.currentTimeMillis() - startTime;\n+                    long elapsedTime = MathUtils.now() - startTime;\n                     bkStats.getOpStats(statType).updateLatency(elapsedTime);\n                 }\n             } else {\n@@ -483,7 +484,7 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n             // compute the latency\n             if (0 == rc) {\n                 // for add operations, we compute latency in writeComplete callbacks.\n-                long elapsedTime = System.currentTimeMillis() - startTime;\n+                long elapsedTime = MathUtils.now() - startTime;\n                 bkStats.getOpStats(BKStats.STATS_ADD).updateLatency(elapsedTime);\n             } else {\n                 bkStats.getOpStats(BKStats.STATS_ADD).incrementFailedOps();                "},{"sha":"83fa3dd5c737e61efc6df1931d6b5c99b341701f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.proto;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.proto;\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n@@ -26,23 +25,19 @@\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicLong;\n \n-import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n-import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.SafeRunnable;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.jboss.netty.util.Timer;\n-import org.jboss.netty.util.HashedWheelTimer;\n import org.jboss.netty.bootstrap.ClientBootstrap;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n import org.jboss.netty.channel.Channel;\n-import org.jboss.netty.channel.ChannelFactory;\n import org.jboss.netty.channel.ChannelFuture;\n import org.jboss.netty.channel.ChannelFutureListener;\n import org.jboss.netty.channel.ChannelHandlerContext;\n@@ -58,8 +53,12 @@\n import org.jboss.netty.handler.codec.frame.CorruptedFrameException;\n import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;\n import org.jboss.netty.handler.codec.frame.TooLongFrameException;\n-import org.jboss.netty.handler.timeout.ReadTimeoutHandler;\n import org.jboss.netty.handler.timeout.ReadTimeoutException;\n+import org.jboss.netty.handler.timeout.ReadTimeoutHandler;\n+import org.jboss.netty.util.HashedWheelTimer;\n+import org.jboss.netty.util.Timer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This class manages all details of connection to a particular bookie. It also\n@@ -503,7 +502,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex\n         }\n \n         final ChannelBuffer buffer = (ChannelBuffer) e.getMessage();\n-        final int type, rc;\n+        final int rc;\n         final long ledgerId, entryId;\n         final PacketHeader header;\n \n@@ -665,7 +664,7 @@ CompletionKey newCompletionKey(long ledgerId, long entryId) {\n         CompletionKey(long ledgerId, long entryId) {\n             this.ledgerId = ledgerId;\n             this.entryId = entryId;\n-            this.timeoutAt = System.currentTimeMillis() + (conf.getReadTimeout()*1000);\n+            this.timeoutAt = MathUtils.now() + (conf.getReadTimeout()*1000);\n         }\n \n         @Override\n@@ -687,7 +686,7 @@ public String toString() {\n         }\n \n         public boolean shouldTimeout() {\n-            return this.timeoutAt <= System.currentTimeMillis();\n+            return this.timeoutAt <= MathUtils.now();\n         }\n     }\n "},{"sha":"4a8b99c3dc6cc538b60cb64a43123c79c790260f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n@@ -14,6 +14,8 @@\n \n package org.apache.bookkeeper.proto;\n \n+import org.apache.bookkeeper.util.MathUtils;\n+\n public class ServerStats {\n     private static ServerStats instance = new ServerStats();\n     private long packetsSent;\n@@ -113,7 +115,7 @@ public void setStatsProvider(Provider zk) {\n     }\n \n     synchronized void updateLatency(long requestCreateTime) {\n-        long latency = System.currentTimeMillis() - requestCreateTime;\n+        long latency = MathUtils.now() - requestCreateTime;\n         totalLatency += latency;\n         count++;\n         if (latency < minLatency) {"},{"sha":"f4dda66e993e234ba26766dece2efd02b0d0e48e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.util;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.util;\n \n import java.io.BufferedReader;\n import java.io.File;\n@@ -209,7 +208,7 @@ public void waitForConnection() throws IOException {\n     }\n \n     public static boolean waitForServerUp(String hp, long timeout) {\n-        long start = System.currentTimeMillis();\n+        long start = MathUtils.now();\n         String split[] = hp.split(\":\");\n         String host = split[0];\n         int port = Integer.parseInt(split[1]);\n@@ -241,7 +240,7 @@ public static boolean waitForServerUp(String hp, long timeout) {\n                 LOG.info(\"server \" + hp + \" not up \" + e);\n             }\n \n-            if (System.currentTimeMillis() > start + timeout) {\n+            if (MathUtils.now() > start + timeout) {\n                 break;\n             }\n             try {"},{"sha":"d72361eac6bd9be19dedc009a65021cec69f73cd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -1,6 +1,3 @@\n-package org.apache.bookkeeper.util;\n-\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -18,12 +15,13 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.util;\n \n /**\n- * Provides misc math functions that dont come standard\n+ * Provides misc math functions that don't come standard\n  */\n public class MathUtils {\n-\n+    private static final long NANOSECONDS_PER_MILLISECOND = 1000000;\n     public static int signSafeMod(long dividend, int divisor) {\n         int mod = (int) (dividend % divisor);\n \n@@ -34,5 +32,17 @@ public static int signSafeMod(long dividend, int divisor) {\n         return mod;\n \n     }\n+    \n+    /**\n+     * Current time from some arbitrary time base in the past, counting in\n+     * milliseconds, and not affected by settimeofday or similar system clock\n+     * changes. This is appropriate to use when computing how much longer to\n+     * wait for an interval to expire.\n+     * \n+     * @return current time in milliseconds.\n+     */\n+    public static long now() {\n+        return System.nanoTime() / NANOSECONDS_PER_MILLISECOND;\n+    }\n \n }"},{"sha":"fa40fea1324db2077c53b32c7088c36cfb20da09","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java?ref=df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","patch":"@@ -0,0 +1,45 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.proto;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import org.apache.bookkeeper.proto.BKStats.OpStats;\n+import org.junit.Test;\n+\n+/** Tests that Statistics updation in Bookie Server */\n+public class TestBKStats {\n+\n+    /**\n+     * Tests that updatLatency should not fail with\n+     * ArrayIndexOutOfBoundException when latency time coming as negative.\n+     */\n+    @Test\n+    public void testUpdateLatencyShouldNotFailWithAIOBEWithNegativeLatency()\n+            throws Exception {\n+        BKStats stats = BKStats.getInstance();\n+        OpStats opStat = stats.getOpStats(0);\n+        opStat.updateLatency(-10);\n+        assertEquals(\"Should not update any latency metrics\", 0,\n+                opStat.numSuccessOps);\n+\n+    }\n+}"}]}

