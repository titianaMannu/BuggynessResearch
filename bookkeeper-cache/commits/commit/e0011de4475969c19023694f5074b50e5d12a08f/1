{"sha":"e0011de4475969c19023694f5074b50e5d12a08f","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMDAxMWRlNDQ3NTk2OWMxOTAyMzY5NGY1MDc0YjUwZTVkMTJhMDhm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T17:34:03Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T17:34:03Z"},"message":"BOOKKEEPER-408: BookieReadWriteTest will enter the endless loop and will not leave out (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb5bffcee92cd44f5fe63710485cb0bc5d000bad","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cb5bffcee92cd44f5fe63710485cb0bc5d000bad"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e0011de4475969c19023694f5074b50e5d12a08f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e0011de4475969c19023694f5074b50e5d12a08f","html_url":"https://github.com/apache/bookkeeper/commit/e0011de4475969c19023694f5074b50e5d12a08f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e0011de4475969c19023694f5074b50e5d12a08f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7","url":"https://api.github.com/repos/apache/bookkeeper/commits/4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7","html_url":"https://github.com/apache/bookkeeper/commit/4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7"}],"stats":{"total":82,"additions":54,"deletions":28},"files":[{"sha":"b809f003470c574ebb0e892b1e9611f2989d6bc0","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e0011de4475969c19023694f5074b50e5d12a08f/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/e0011de4475969c19023694f5074b50e5d12a08f/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=e0011de4475969c19023694f5074b50e5d12a08f","patch":"@@ -448,6 +448,8 @@ Release 4.1.0 - 2012-06-07\n \n         BOOKKEEPER-288: NOTICE files don't have the correct year (ivank via sijie)\n \n+        BOOKKEEPER-408: BookieReadWriteTest will enter the endless loop and will not leave out (ivank)\n+\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)"},{"sha":"02315762f7b1fbd454969df720e27e74be89207d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":52,"deletions":28,"changes":80,"blob_url":"https://github.com/apache/bookkeeper/blob/e0011de4475969c19023694f5074b50e5d12a08f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/e0011de4475969c19023694f5074b50e5d12a08f/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=e0011de4475969c19023694f5074b50e5d12a08f","patch":"@@ -34,7 +34,7 @@\n import java.util.Set;\n import java.util.Arrays;\n import java.util.concurrent.Semaphore;\n-\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n@@ -72,7 +72,6 @@\n     byte[] ledgerPassword = \"aaa\".getBytes();\n     LedgerHandle lh, lh2;\n     long ledgerId;\n-    Enumeration<LedgerEntry> ls;\n \n     // test related variables\n     int numEntriesToWrite = 200;\n@@ -90,20 +89,35 @@ public BookieReadWriteTest(String ledgerManagerFactory, DigestType digestType) {\n         baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n         baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n     }\n-    // Synchronization\n-    SyncObj sync;\n-    Set<Object> syncObjs;\n \n     class SyncObj {\n         long lastConfirmed;\n         volatile int counter;\n         boolean value;\n+        AtomicInteger rc = new AtomicInteger(BKException.Code.OK);\n+        Enumeration<LedgerEntry> ls = null;\n \n         public SyncObj() {\n             counter = 0;\n             lastConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n             value = false;\n         }\n+\n+        void setReturnCode(int rc) {\n+            this.rc.compareAndSet(BKException.Code.OK, rc);\n+        }\n+\n+        int getReturnCode() {\n+            return rc.get();\n+        }\n+\n+        void setLedgerEntries(Enumeration<LedgerEntry> ls) {\n+            this.ls = ls;\n+        }\n+\n+        Enumeration<LedgerEntry> getLedgerEntries() {\n+            return ls;\n+        }\n     }\n \n     @Test\n@@ -171,6 +185,7 @@ public void testStreamingClients() throws IOException, BKException, InterruptedE\n \n     @Test\n     public void testReadWriteAsyncSingleClient() throws IOException {\n+        SyncObj sync = new SyncObj();\n         try {\n             // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n@@ -193,6 +208,7 @@ public void testReadWriteAsyncSingleClient() throws IOException {\n                     LOG.debug(\"Entries counter = \" + sync.counter);\n                     sync.wait();\n                 }\n+                assertEquals(\"Error adding\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             LOG.debug(\"*** WRITE COMPLETE ***\");\n@@ -213,13 +229,15 @@ public void testReadWriteAsyncSingleClient() throws IOException {\n                 while (sync.value == false) {\n                     sync.wait();\n                 }\n+                assertEquals(\"Error reading\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             LOG.debug(\"*** READ COMPLETE ***\");\n \n             // at this point, Enumeration<LedgerEntry> ls is filled with the returned\n             // values\n             int i = 0;\n+            Enumeration<LedgerEntry> ls = sync.getLedgerEntries();\n             while (ls.hasMoreElements()) {\n                 ByteBuffer origbb = ByteBuffer.wrap(entries.get(i));\n                 Integer origEntry = origbb.getInt();\n@@ -253,6 +271,7 @@ public void testReadWriteAsyncSingleClient() throws IOException {\n      */\n     @Test\n     public void testReadWriteRangeAsyncSingleClient() throws IOException {\n+        SyncObj sync = new SyncObj();\n         try {\n             // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n@@ -273,6 +292,7 @@ public void testReadWriteRangeAsyncSingleClient() throws IOException {\n                     LOG.debug(\"Entries counter = \" + sync.counter);\n                     sync.wait();\n                 }\n+                assertEquals(\"Error adding\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             try {\n@@ -327,13 +347,15 @@ public void testReadWriteRangeAsyncSingleClient() throws IOException {\n                 while (sync.value == false) {\n                     sync.wait();\n                 }\n+                assertEquals(\"Error reading\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             LOG.debug(\"*** READ COMPLETE ***\");\n \n             // at this point, Enumeration<LedgerEntry> ls is filled with the returned\n             // values\n             int i = 0;\n+            Enumeration<LedgerEntry> ls = sync.getLedgerEntries();\n             while (ls.hasMoreElements()) {\n                 byte[] expected = null;\n                 byte[] entry = ls.nextElement().getEntry();\n@@ -382,11 +404,9 @@ public void testReadWriteRangeAsyncSingleClient() throws IOException {\n \n         @Override\n         public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n-            if(rc != BKException.Code.OK) {\n-                fail(\"Return code is not OK: \" + rc);\n-            }\n-\n-            ls = seq;\n+            SyncObj sync = (SyncObj)ctx;\n+            sync.setLedgerEntries(seq);\n+            sync.setReturnCode(rc);\n             synchronized(sync) {\n                 sync.counter += throttle;\n                 sync.notify();\n@@ -415,6 +435,7 @@ int getAvailablePermits(LedgerHandle lh) throws\n     @Test\n     public void testReadWriteAsyncSingleClientThrottle() throws\n         IOException, NoSuchFieldException, IllegalAccessException {\n+        SyncObj sync = new SyncObj();\n         try {\n \n             Integer throttle = 100;\n@@ -465,6 +486,7 @@ public void testReadWriteAsyncSingleClientThrottle() throws\n                     LOG.debug(\"Entries counter = \" + sync.counter);\n                     sync.wait();\n                 }\n+                assertEquals(\"Error adding\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             LOG.debug(\"*** WRITE COMPLETE ***\");\n@@ -491,6 +513,7 @@ public void testReadWriteAsyncSingleClientThrottle() throws\n                     LOG.info(\"Entries counter = \" + sync.counter);\n                     sync.wait();\n                 }\n+                assertEquals(\"Error reading\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             LOG.debug(\"*** READ COMPLETE ***\");\n@@ -507,6 +530,7 @@ public void testReadWriteAsyncSingleClientThrottle() throws\n \n     @Test\n     public void testSyncReadAsyncWriteStringsSingleClient() throws IOException {\n+        SyncObj sync = new SyncObj();\n         LOG.info(\"TEST READ WRITE STRINGS MIXED SINGLE CLIENT\");\n         String charset = \"utf-8\";\n         LOG.debug(\"Default charset: \" + Charset.defaultCharset());\n@@ -529,6 +553,7 @@ public void testSyncReadAsyncWriteStringsSingleClient() throws IOException {\n                     LOG.debug(\"Entries counter = \" + sync.counter);\n                     sync.wait();\n                 }\n+                assertEquals(\"Error adding\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             LOG.debug(\"*** ASYNC WRITE COMPLETE ***\");\n@@ -543,7 +568,7 @@ public void testSyncReadAsyncWriteStringsSingleClient() throws IOException {\n             assertTrue(\"Verifying number of entries written\", lh.getLastAddConfirmed() == (numEntriesToWrite - 1));\n \n             // read entries\n-            ls = lh.readEntries(0, numEntriesToWrite - 1);\n+            Enumeration<LedgerEntry> ls = lh.readEntries(0, numEntriesToWrite - 1);\n \n             LOG.debug(\"*** SYNC READ COMPLETE ***\");\n \n@@ -598,7 +623,7 @@ public void testReadWriteSyncSingleClient() throws IOException {\n             LOG.debug(\"Number of entries written: \" + lh.getLastAddConfirmed());\n             assertTrue(\"Verifying number of entries written\", lh.getLastAddConfirmed() == (numEntriesToWrite - 1));\n \n-            ls = lh.readEntries(0, numEntriesToWrite - 1);\n+            Enumeration<LedgerEntry> ls = lh.readEntries(0, numEntriesToWrite - 1);\n             int i = 0;\n             while (ls.hasMoreElements()) {\n                 ByteBuffer origbb = ByteBuffer.wrap(entries.get(i++));\n@@ -647,7 +672,7 @@ public void testReadWriteZero() throws IOException {\n             LOG.debug(\"Number of entries written: \" + lh.getLastAddConfirmed());\n             assertTrue(\"Verifying number of entries written\", lh.getLastAddConfirmed() == numEntriesToWrite);\n \n-            ls = lh.readEntries(0, numEntriesToWrite - 1);\n+            Enumeration<LedgerEntry> ls = lh.readEntries(0, numEntriesToWrite - 1);\n             int i = 0;\n             while (ls.hasMoreElements()) {\n                 ByteBuffer result = ByteBuffer.wrap(ls.nextElement().getEntry());\n@@ -694,7 +719,7 @@ public void testMultiLedger() throws IOException {\n             assertTrue(\"Verifying number of entries written lh2 (\" + lh2.getLastAddConfirmed() + \")\", lh2\n                        .getLastAddConfirmed() == (numEntriesToWrite - 1));\n \n-            ls = lh.readEntries(0, numEntriesToWrite - 1);\n+            Enumeration<LedgerEntry> ls = lh.readEntries(0, numEntriesToWrite - 1);\n             int i = 0;\n             while (ls.hasMoreElements()) {\n                 ByteBuffer result = ByteBuffer.wrap(ls.nextElement().getEntry());\n@@ -723,6 +748,7 @@ public void testMultiLedger() throws IOException {\n \n     @Test\n     public void testReadWriteAsyncLength() throws IOException {\n+        SyncObj sync = new SyncObj();\n         try {\n             // Create a ledger\n             lh = bkc.createLedger(digestType, ledgerPassword);\n@@ -745,6 +771,7 @@ public void testReadWriteAsyncLength() throws IOException {\n                     LOG.debug(\"Entries counter = \" + sync.counter);\n                     sync.wait();\n                 }\n+                assertEquals(\"Error adding\", BKException.Code.OK, sync.getReturnCode());\n             }\n             long length = numEntriesToWrite * 4;\n             assertTrue(\"Ledger length before closing: \" + lh.getLength(), lh.getLength() == length);\n@@ -844,6 +871,7 @@ public void testReadFromOpenLedger() throws IOException {\n                     LOG.debug(\"Counter = \" + sync.lastConfirmed);\n                     sync.wait();\n                 }\n+                assertEquals(\"Error reading\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             assertTrue(\"Last confirmed add: \" + sync.lastConfirmed, sync.lastConfirmed == (numEntriesToWrite - 2));\n@@ -1039,6 +1067,7 @@ public void testLastConfirmedAdd() throws IOException {\n                     LOG.debug(\"Counter = \" + sync.lastConfirmed);\n                     sync.wait();\n                 }\n+                assertEquals(\"Error reading\", BKException.Code.OK, sync.getReturnCode());\n             }\n \n             assertTrue(\"Last confirmed add: \" + sync.lastConfirmed, sync.lastConfirmed == (numEntriesToWrite - 2));\n@@ -1058,22 +1087,19 @@ public void testLastConfirmedAdd() throws IOException {\n \n     @Override\n     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n-        if(rc != BKException.Code.OK) fail(\"Return code is not OK: \" + rc);\n-\n-        SyncObj x = (SyncObj) ctx;\n-\n-        synchronized (x) {\n-            x.counter++;\n-            x.notify();\n+        SyncObj sync = (SyncObj) ctx;\n+        sync.setReturnCode(rc);\n+        synchronized (sync) {\n+            sync.counter++;\n+            sync.notify();\n         }\n     }\n \n     @Override\n     public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n-        if(rc != BKException.Code.OK) fail(\"Return code is not OK: \" + rc);\n-\n-        ls = seq;\n-\n+        SyncObj sync = (SyncObj) ctx;\n+        sync.setLedgerEntries(seq);\n+        sync.setReturnCode(rc);\n         synchronized (sync) {\n             sync.value = true;\n             sync.notify();\n@@ -1083,7 +1109,7 @@ public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n     @Override\n     public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n         SyncObj sync = (SyncObj) ctx;\n-\n+        sync.setReturnCode(rc);\n         synchronized(sync) {\n             sync.lastConfirmed = lastConfirmed;\n             sync.notify();\n@@ -1098,8 +1124,6 @@ public void setUp() throws Exception {\n         // Number Generator\n         entries = new ArrayList<byte[]>(); // initialize the entries list\n         entriesSize = new ArrayList<Integer>();\n-        sync = new SyncObj(); // initialize the synchronization data structure\n-\n     }\n \n     /* Clean up a directory recursively */"}]}

