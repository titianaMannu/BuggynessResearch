{"sha":"e14618559769b7f3fa68360a4571a84392e162e3","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMTQ2MTg1NTk3NjliN2YzZmE2ODM2MGE0NTcxYTg0MzkyZTE2MmUz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-11-17T21:38:49Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2011-11-17T21:38:49Z"},"message":"BOOKKEEPER-90: Hedwig API changes for initial Bookkeeper release (ivank via fpj)\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1203380 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"45ffa9ef0a1f28601b4afe61b922c23d017cb04e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/45ffa9ef0a1f28601b4afe61b922c23d017cb04e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e14618559769b7f3fa68360a4571a84392e162e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e14618559769b7f3fa68360a4571a84392e162e3","html_url":"https://github.com/apache/bookkeeper/commit/e14618559769b7f3fa68360a4571a84392e162e3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e14618559769b7f3fa68360a4571a84392e162e3/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"03e03c2b4a0eb0266cad4eb5e34099100629425e","url":"https://api.github.com/repos/apache/bookkeeper/commits/03e03c2b4a0eb0266cad4eb5e34099100629425e","html_url":"https://github.com/apache/bookkeeper/commit/03e03c2b4a0eb0266cad4eb5e34099100629425e"}],"stats":{"total":353,"additions":240,"deletions":113},"files":[{"sha":"e6127811d45a1d851165f12f0206f040edac57cd","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -115,3 +115,5 @@ IMPROVEMENTS:\n   BOOKKEEPER-44: Reuse publish channel to default server to avoid too many connect requests to default server when lots of producers came in same time (Sijie Guo via breed)\n \n   BOOKKEEPER-109: Add documentation to describe how bookies flushes data (Sijie Guo via fpj)\n+\n+  BOOKKEEPER-90: Hedwig API changes for initial Bookkeeper release (ivank via fpj)"},{"sha":"4092a47f9bafabef8a2da41b0780f8147ed2a6a8","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/HedwigClient.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.client;\n+\n+import org.apache.hedwig.client.api.Client;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.client.netty.HedwigClientImpl;\n+\n+import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.jboss.netty.channel.ChannelFactory;\n+\n+/**\n+ * Hedwig client uses as starting point for all communications with the Hedwig service.\n+ * \n+ * @see Publisher\n+ * @see Subscriber\n+ */\n+public class HedwigClient implements Client {\n+    private final Client impl;\n+\n+    /**\n+     * Construct a hedwig client object. The configuration object\n+     * should be an instance of a class which implements ClientConfiguration.\n+     *\n+     * @param cfg The client configuration.\n+     */\n+    public HedwigClient(ClientConfiguration cfg) {\n+        impl = HedwigClientImpl.create(cfg);\n+    }\n+\n+    /**\n+     * Construct a hedwig client object, using a preexisting socket factory.\n+     * This is useful if you need to create many hedwig client instances.\n+     *\n+     * @param cfg The client configuration\n+     * @param socketFactory A netty socket factory.\n+     */\n+    public HedwigClient(ClientConfiguration cfg, ChannelFactory socketFactory) {\n+        impl = HedwigClientImpl.create(cfg, socketFactory);\n+    }\n+\n+    @Override\n+    public Publisher getPublisher() {\n+        return impl.getPublisher();\n+    }\n+\n+    @Override\n+    public Subscriber getSubscriber() {\n+        return impl.getSubscriber();\n+    }\n+\n+    @Override\n+    public void close() {\n+        impl.close();\n+    }\n+}\n\\ No newline at end of file"},{"sha":"891148fe25897d9498167a56f35172a3ea2f6531","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/api/Client.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -0,0 +1,42 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.client.api;\n+\n+/**\n+ * Interface defining the client API for Hedwig\n+ */\n+public interface Client {\n+    /**\n+     * Retrieve the Publisher object for the client.\n+     * This object can be used to publish messages to a topic on Hedwig.\n+     * @see Publisher\n+     */\n+    public Publisher getPublisher();\n+    \n+    /**\n+     * Retrieve the Subscriber object for the client.\n+     * This object can be used to subscribe for messages from a topic.\n+     * @see Subscriber\n+     */\n+    public Subscriber getSubscriber();\n+\n+    /**\n+     * Close the client and free all associated resources.\n+     */\n+    public void close();\n+}\n\\ No newline at end of file"},{"sha":"f312a36bfb358d6eebc32510a552d83dc1e2c511","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/api/MessageHandler.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -22,27 +22,27 @@\n import org.apache.hedwig.util.Callback;\n \n /**\n- * Interface to define the client handler logic to consume messages it is\n+ * Interface to define the client handler logic to deliver messages it is\n  * subscribed to.\n  *\n  */\n public interface MessageHandler {\n \n     /**\n-     * Consumes a message it is subscribed to and has been delivered to it.\n+     * Delivers a message which has been published for topic. \n      *\n      * @param topic\n      *            The topic name where the message came from.\n      * @param subscriberId\n      *            ID of the subscriber.\n      * @param msg\n-     *            The message object to consume.\n+     *            The message object to deliver.\n      * @param callback\n-     *            Callback to invoke when the message consumption has been done.\n+     *            Callback to invoke when the message delivery has been done.\n      * @param context\n      *            Calling context that the Callback needs since this is done\n      *            asynchronously.\n      */\n-    public void consume(ByteString topic, ByteString subscriberId, Message msg, Callback<Void> callback, Object context);\n+    public void deliver(ByteString topic, ByteString subscriberId, Message msg, Callback<Void> callback, Object context);\n \n }"},{"sha":"54c5ce5c7f2d7b33457065089bb30f6f2c37beda","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -52,7 +52,7 @@ public void warmup(int nWarmup) throws Exception {\n \n         subscriber.startDelivery(topic, subId, new MessageHandler() {\n             @Override\n-            public void consume(ByteString topic, ByteString subscriberId, Message msg, Callback<Void> callback,\n+            public void deliver(ByteString topic, ByteString subscriberId, Message msg, Callback<Void> callback,\n             Object context) {\n                 // noop\n                 callback.operationFinished(context, null);"},{"sha":"5ff4bc8e986cba484fd7316d04d83d1de6fc1824","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -73,7 +73,7 @@ public Void call() throws Exception {\n             subscriber.startDelivery(ByteString.copyFromUtf8(topic), subId, new MessageHandler() {\n \n                 @Override\n-                public void consume(ByteString thisTopic, ByteString subscriberId, Message msg,\n+                public void deliver(ByteString thisTopic, ByteString subscriberId, Message msg,\n                 Callback<Void> callback, Object context) {\n                     if (logger.isDebugEnabled())\n                         logger.debug(\"Got message from src-region: \" + msg.getSrcRegion() + \" with seq-id: \""},{"sha":"394d37579f820f0281ad2718727ea1a3b738632b","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/HedwigBenchmark.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -28,18 +28,18 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.client.netty.HedwigClient;\n-import org.apache.hedwig.client.netty.HedwigPublisher;\n-import org.apache.hedwig.client.netty.HedwigSubscriber;\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n \n public class HedwigBenchmark implements Callable<Void> {\n     protected static final Logger logger = LoggerFactory.getLogger(HedwigBenchmark.class);\n \n     static final String TOPIC_PREFIX = \"topic\";\n \n     private final HedwigClient client;\n-    private final HedwigPublisher publisher;\n-    private final HedwigSubscriber subscriber;\n+    private final Publisher publisher;\n+    private final Subscriber subscriber;\n \n     public HedwigBenchmark(ClientConfiguration cfg) {\n         client = new HedwigClient(cfg);"},{"sha":"0d3a1ff3237a75ce8406fea7776bb4df3da2cd87","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -25,7 +25,7 @@\n \n import org.apache.hedwig.client.data.MessageConsumeData;\n import org.apache.hedwig.client.data.TopicSubscriber;\n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.netty.HedwigClientImpl;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.util.Callback;\n \n@@ -42,9 +42,9 @@\n \n     private static Logger logger = LoggerFactory.getLogger(MessageConsumeCallback.class);\n \n-    private final HedwigClient client;\n+    private final HedwigClientImpl client;\n \n-    public MessageConsumeCallback(HedwigClient client) {\n+    public MessageConsumeCallback(HedwigClientImpl client) {\n         this.client = client;\n     }\n \n@@ -61,7 +61,7 @@ public MessageConsumeRetryTask(MessageConsumeData messageConsumeData, TopicSubsc\n         public void run() {\n             // Try to consume the message again\n             Channel topicSubscriberChannel = client.getSubscriber().getChannelForTopic(topicSubscriber);\n-            HedwigClient.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n+            HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n             .asyncMessageConsume(messageConsumeData.msg);\n         }\n     }\n@@ -72,7 +72,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n         // Message has been successfully consumed by the client app so callback\n         // to the ResponseHandler indicating that the message is consumed.\n         Channel topicSubscriberChannel = client.getSubscriber().getChannelForTopic(topicSubscriber);\n-        HedwigClient.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n+        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n         .messageConsumed(messageConsumeData.msg);\n     }\n "},{"sha":"645e49eed7503b7555255823e5291beff54e3591","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -22,7 +22,7 @@\n import org.jboss.netty.channel.Channel;\n \n import org.apache.hedwig.client.data.PubSubData;\n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.netty.HedwigClientImpl;\n import org.apache.hedwig.client.netty.ResponseHandler;\n import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n@@ -41,7 +41,7 @@ public PublishResponseHandler(ResponseHandler responseHandler) {\n     public void handlePublishResponse(PubSubResponse response, PubSubData pubSubData, Channel channel) throws Exception {\n         if (logger.isDebugEnabled())\n             logger.debug(\"Handling a Publish response: \" + response + \", pubSubData: \" + pubSubData + \", host: \"\n-                         + HedwigClient.getHostFromChannel(channel));\n+                         + HedwigClientImpl.getHostFromChannel(channel));\n         switch (response.getStatusCode()) {\n         case SUCCESS:\n             // Response was success so invoke the callback's operationFinished"},{"sha":"010baa38fce9ec15d1b34c8d5482144a6e6abf20","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -25,7 +25,7 @@\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.data.PubSubData;\n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.netty.HedwigClientImpl;\n import org.apache.hedwig.client.netty.HedwigSubscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n@@ -45,13 +45,13 @@\n \n     // Private member variables\n     private final PubSubData origSubData;\n-    private final HedwigClient client;\n+    private final HedwigClientImpl client;\n     private final HedwigSubscriber sub;\n     private final ClientConfiguration cfg;\n     private final MessageHandler messageHandler;\n \n     // Constructor\n-    public SubscribeReconnectCallback(PubSubData origSubData, HedwigClient client, MessageHandler messageHandler) {\n+    public SubscribeReconnectCallback(PubSubData origSubData, HedwigClientImpl client, MessageHandler messageHandler) {\n         this.origSubData = origSubData;\n         this.client = client;\n         this.sub = client.getSubscriber();"},{"sha":"a589eb726a3c4e4c08c2e7a42c49021e0d149ea1","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -30,7 +30,7 @@\n import org.apache.hedwig.client.data.MessageConsumeData;\n import org.apache.hedwig.client.data.PubSubData;\n import org.apache.hedwig.client.data.TopicSubscriber;\n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.netty.HedwigClientImpl;\n import org.apache.hedwig.client.netty.ResponseHandler;\n import org.apache.hedwig.exceptions.PubSubException.ClientAlreadySubscribedException;\n import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n@@ -88,13 +88,13 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n         // If this was not a successful response to the Subscribe request, we\n         // won't be using the Netty Channel created so just close it.\n         if (!response.getStatusCode().equals(StatusCode.SUCCESS)) {\n-            HedwigClient.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n             channel.close();\n         }\n \n         if (logger.isDebugEnabled())\n             logger.debug(\"Handling a Subscribe response: \" + response + \", pubSubData: \" + pubSubData + \", host: \"\n-                         + HedwigClient.getHostFromChannel(channel));\n+                         + HedwigClientImpl.getHostFromChannel(channel));\n         switch (response.getStatusCode()) {\n         case SUCCESS:\n             // For successful Subscribe requests, store this Channel locally\n@@ -217,8 +217,8 @@ protected void asyncMessageConsume(Message message) {\n         }\n         MessageConsumeData messageConsumeData = new MessageConsumeData(origSubData.topic, origSubData.subscriberId,\n                 message);\n-        messageHandler.consume(origSubData.topic, origSubData.subscriberId, message, responseHandler.getClient()\n-                               .getConsumeCallback(), messageConsumeData);\n+        messageHandler.deliver(origSubData.topic, origSubData.subscriberId, message, responseHandler.getClient()\n+                .getConsumeCallback(), messageConsumeData);\n     }\n \n     /**"},{"sha":"ed3eb9556e5c35e609f67ba47f682cee430e859f","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -22,7 +22,7 @@\n import org.jboss.netty.channel.Channel;\n \n import org.apache.hedwig.client.data.PubSubData;\n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.netty.HedwigClientImpl;\n import org.apache.hedwig.client.netty.ResponseHandler;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n@@ -43,7 +43,7 @@ public void handleUnsubscribeResponse(PubSubResponse response, PubSubData pubSub\n             throws Exception {\n         if (logger.isDebugEnabled())\n             logger.debug(\"Handling an Unsubscribe response: \" + response + \", pubSubData: \" + pubSubData + \", host: \"\n-                         + HedwigClient.getHostFromChannel(channel));\n+                         + HedwigClientImpl.getHostFromChannel(channel));\n         switch (response.getStatusCode()) {\n         case SUCCESS:\n             // For successful Unsubscribe requests, we can now safely close the"},{"sha":"ca6d706b559267872afd31154bf81c1f982dc708","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ClientChannelPipelineFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ClientChannelPipelineFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ClientChannelPipelineFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ClientChannelPipelineFactory.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -30,9 +30,9 @@\n \n public class ClientChannelPipelineFactory implements ChannelPipelineFactory {\n \n-    private HedwigClient client;\n+    private HedwigClientImpl client;\n \n-    public ClientChannelPipelineFactory(HedwigClient client) {\n+    public ClientChannelPipelineFactory(HedwigClientImpl client) {\n         this.client = client;\n     }\n "},{"sha":"f5077b030b36a272b3a622aa5f685bfd190655ad","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -39,13 +39,13 @@\n     // Private member variables\n     private PubSubData pubSubData;\n     private InetSocketAddress host;\n-    private final HedwigClient client;\n+    private final HedwigClientImpl client;\n     private final HedwigPublisher pub;\n     private final HedwigSubscriber sub;\n     private final ClientConfiguration cfg;\n \n     // Constructor\n-    public ConnectCallback(PubSubData pubSubData, InetSocketAddress host, HedwigClient client) {\n+    public ConnectCallback(PubSubData pubSubData, InetSocketAddress host, HedwigClientImpl client) {\n         super();\n         this.pubSubData = pubSubData;\n         this.host = host;\n@@ -101,14 +101,14 @@ public void operationComplete(ChannelFuture future) throws Exception {\n             // this channel will be closed but we'll always publish on the\n             // cached channel in the HedwigPublisher.host2Channel map.\n             pub.storeHost2ChannelMapping(future.getChannel());\n-            pub.doPublish(pubSubData, pub.host2Channel.get(HedwigClient.getHostFromChannel(future.getChannel())));\n+            pub.doPublish(pubSubData, pub.host2Channel.get(HedwigClientImpl.getHostFromChannel(future.getChannel())));\n         } else if (pubSubData.operationType.equals(OperationType.UNSUBSCRIBE)) {\n             // Unsubscribe Request so store this Channel connection in the\n             // HedwigPublisher Map (if it doesn't exist yet) and then do the\n             // unsubscribe. Unsubscribe requests will share and reuse\n             // the netty Channel connections that Publish requests use.\n             pub.storeHost2ChannelMapping(future.getChannel());\n-            sub.doSubUnsub(pubSubData, pub.host2Channel.get(HedwigClient.getHostFromChannel(future.getChannel())));\n+            sub.doSubUnsub(pubSubData, pub.host2Channel.get(HedwigClientImpl.getHostFromChannel(future.getChannel())));\n         } else {\n             // Subscribe Request. We do not store the Channel connection yet for\n             // Subscribes here. This will be done only when we've found the"},{"sha":"806cdefb045f608090838fa4f343633550b29a3a","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","status":"renamed","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -36,6 +36,7 @@\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n \n import com.google.protobuf.ByteString;\n+import org.apache.hedwig.client.api.Client;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.data.PubSubData;\n import org.apache.hedwig.client.handlers.MessageConsumeCallback;\n@@ -47,9 +48,9 @@\n  * functionality needed for both Publish and Subscribe operations.\n  *\n  */\n-public class HedwigClient {\n+public class HedwigClientImpl implements Client {\n \n-    private static final Logger logger = LoggerFactory.getLogger(HedwigClient.class);\n+    private static final Logger logger = LoggerFactory.getLogger(HedwigClientImpl.class);\n \n     // Global counter used for generating unique transaction ID's for\n     // publish and subscribe requests\n@@ -90,16 +91,24 @@\n     private final MessageConsumeCallback consumeCb;\n     private SslClientContextFactory sslFactory = null;\n \n+    public static Client create(ClientConfiguration cfg) {\n+        return new HedwigClientImpl(cfg);\n+    }\n+\n+    public static Client create(ClientConfiguration cfg, ChannelFactory socketFactory) {\n+        return new HedwigClientImpl(cfg, socketFactory);\n+    }\n+\n     // Base constructor that takes in a Configuration object.\n     // This will create its own client socket channel factory.\n-    public HedwigClient(ClientConfiguration cfg) {\n+    protected HedwigClientImpl(ClientConfiguration cfg) {\n         this(cfg, new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors.newCachedThreadPool()));\n         ownChannelFactory = true;\n     }\n \n     // Constructor that takes in a Configuration object and a ChannelFactory\n     // that has already been instantiated by the caller.\n-    public HedwigClient(ClientConfiguration cfg, ChannelFactory socketFactory) {\n+    protected HedwigClientImpl(ClientConfiguration cfg, ChannelFactory socketFactory) {\n         this.cfg = cfg;\n         this.socketFactory = socketFactory;\n         pub = new HedwigPublisher(this);\n@@ -199,7 +208,7 @@ private void checkPubSubDataToTimeOut(PubSubData pubSubData, ResponseHandler res\n     // When we are done with the client, this is a clean way to gracefully close\n     // all channels/sockets created by the client and to also release all\n     // resources used by netty.\n-    public void stop() {\n+    public void close() {\n         logger.info(\"Stopping the client!\");\n         // Set the client boolean flag to indicate the client has stopped.\n         isStopped = true;","previous_filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClient.java"},{"sha":"603766c5f2d96185dd61457197f810cbe0194df7","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -56,10 +56,10 @@\n     // unsubscribe requests.\n     protected final ConcurrentMap<InetSocketAddress, Channel> host2Channel = new ConcurrentHashMap<InetSocketAddress, Channel>();\n \n-    private final HedwigClient client;\n+    private final HedwigClientImpl client;\n     private final ClientConfiguration cfg;\n \n-    protected HedwigPublisher(HedwigClient client) {\n+    protected HedwigPublisher(HedwigClientImpl client) {\n         this.client = client;\n         this.cfg = client.getConfiguration();\n     }\n@@ -179,11 +179,11 @@ protected void doPublish(PubSubData pubSubData, Channel channel) {\n         // Before we do the write, store this information into the\n         // ResponseHandler so when the server responds, we know what\n         // appropriate Callback Data to invoke for the given txn ID.\n-        HedwigClient.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n \n         // Finally, write the Publish request through the Channel.\n         if (logger.isDebugEnabled())\n-            logger.debug(\"Writing a Publish request to host: \" + HedwigClient.getHostFromChannel(channel)\n+            logger.debug(\"Writing a Publish request to host: \" + HedwigClientImpl.getHostFromChannel(channel)\n                          + \" for pubSubData: \" + pubSubData);\n         ChannelFuture future = channel.write(pubsubRequestBuilder.build());\n         future.addListener(new WriteCallback(pubSubData, client));\n@@ -193,7 +193,7 @@ protected void doPublish(PubSubData pubSubData, Channel channel) {\n     // exist yet). Retrieve the hostname info from the Channel created via the\n     // RemoteAddress tied to it.\n     protected synchronized void storeHost2ChannelMapping(Channel channel) {\n-        InetSocketAddress host = HedwigClient.getHostFromChannel(channel);\n+        InetSocketAddress host = HedwigClientImpl.getHostFromChannel(channel);\n         if (!host2Channel.containsKey(host)) {\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Storing a new Channel mapping for host: \" + host);\n@@ -216,7 +216,7 @@ protected synchronized void storeHost2ChannelMapping(Channel channel) {\n             // topic. Close these redundant channels as they won't be used.\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Channel mapping to host: \" + host + \" already exists so no need to store it.\");\n-            HedwigClient.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n             channel.close();\n         }\n     }"},{"sha":"5fb1d8852652c205519abc875c7280131b439426","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -67,10 +67,10 @@\n     // Channel Pipeline.\n     protected final ConcurrentMap<TopicSubscriber, Channel> topicSubscriber2Channel = new ConcurrentHashMap<TopicSubscriber, Channel>();\n \n-    protected final HedwigClient client;\n+    protected final HedwigClientImpl client;\n     protected final ClientConfiguration cfg;\n \n-    public HedwigSubscriber(HedwigClient client) {\n+    public HedwigSubscriber(HedwigClientImpl client) {\n         this.client = client;\n         this.cfg = client.getConfiguration();\n     }\n@@ -356,11 +356,11 @@ protected void doSubUnsub(PubSubData pubSubData, Channel channel) {\n         // Before we do the write, store this information into the\n         // ResponseHandler so when the server responds, we know what\n         // appropriate Callback Data to invoke for the given txn ID.\n-        HedwigClient.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n \n         // Finally, write the Subscribe request through the Channel.\n         if (logger.isDebugEnabled())\n-            logger.debug(\"Writing a SubUnsub request to host: \" + HedwigClient.getHostFromChannel(channel)\n+            logger.debug(\"Writing a SubUnsub request to host: \" + HedwigClientImpl.getHostFromChannel(channel)\n                          + \" for pubSubData: \" + pubSubData);\n         ChannelFuture future = channel.write(pubsubRequestBuilder.build());\n         future.addListener(new WriteCallback(pubSubData, client));\n@@ -405,14 +405,14 @@ public void doConsume(final PubSubData pubSubData, final Channel channel, final\n         // action. Instead, just have a future listener that will log an error\n         // message if there was a problem writing the consume request.\n         if (logger.isDebugEnabled())\n-            logger.debug(\"Writing a Consume request to host: \" + HedwigClient.getHostFromChannel(channel)\n+            logger.debug(\"Writing a Consume request to host: \" + HedwigClientImpl.getHostFromChannel(channel)\n                          + \" with messageSeqId: \" + messageSeqId + \" for pubSubData: \" + pubSubData);\n         ChannelFuture future = channel.write(pubsubRequestBuilder.build());\n         future.addListener(new ChannelFutureListener() {\n             @Override\n             public void operationComplete(ChannelFuture future) throws Exception {\n                 if (!future.isSuccess()) {\n-                    logger.error(\"Error writing a Consume request to host: \" + HedwigClient.getHostFromChannel(channel)\n+                    logger.error(\"Error writing a Consume request to host: \" + HedwigClientImpl.getHostFromChannel(channel)\n                                  + \" with messageSeqId: \" + messageSeqId + \" for pubSubData: \" + pubSubData);\n                 }\n             }\n@@ -460,7 +460,7 @@ public void startDelivery(final ByteString topic, final ByteString subscriberId,\n         // Register the MessageHandler with the subscribe Channel's\n         // Response Handler.\n         Channel topicSubscriberChannel = topicSubscriber2Channel.get(topicSubscriber);\n-        HedwigClient.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n+        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n         .setMessageHandler(messageHandler);\n         // Now make the TopicSubscriber Channel readable (it is set to not be\n         // readable when the initial subscription is done). Note that this is an\n@@ -497,7 +497,7 @@ public void stopDelivery(final ByteString topic, final ByteString subscriberId)\n         // Unregister the MessageHandler for the subscribe Channel's\n         // Response Handler.\n         Channel topicSubscriberChannel = topicSubscriber2Channel.get(topicSubscriber);\n-        HedwigClient.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n+        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n         .setMessageHandler(null);\n         // Now make the TopicSubscriber channel not-readable. This will buffer\n         // up messages if any are sent from the server. Note that this is an\n@@ -545,7 +545,7 @@ public void asyncCloseSubscription(final ByteString topic, final ByteString subs\n             Channel channel = topicSubscriber2Channel.get(topicSubscriber);\n             topicSubscriber2Channel.remove(topicSubscriber);\n             // Close the subscribe channel asynchronously.\n-            HedwigClient.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).channelClosedExplicitly = true;\n             ChannelFuture future = channel.close();\n             future.addListener(new ChannelFutureListener() {\n                 @Override"},{"sha":"eff47a563702c39853d90432ef3dc69a43fb0490","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -66,7 +66,7 @@\n     // channel disconnected logic here.\n     public boolean channelClosedExplicitly = false;\n \n-    private final HedwigClient client;\n+    private final HedwigClientImpl client;\n     private final HedwigPublisher pub;\n     private final HedwigSubscriber sub;\n     private final ClientConfiguration cfg;\n@@ -75,7 +75,7 @@\n     private final SubscribeResponseHandler subHandler;\n     private final UnsubscribeResponseHandler unsubHandler;\n \n-    public ResponseHandler(HedwigClient client) {\n+    public ResponseHandler(HedwigClientImpl client) {\n         this.client = client;\n         this.sub = client.getSubscriber();\n         this.pub = client.getPublisher();\n@@ -86,7 +86,7 @@ public ResponseHandler(HedwigClient client) {\n     }\n \n     // Public getters needed for the private members\n-    public HedwigClient getClient() {\n+    public HedwigClientImpl getClient() {\n         return client;\n     }\n \n@@ -113,7 +113,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex\n         // server.\n         PubSubResponse response = (PubSubResponse) e.getMessage();\n         if (logger.isDebugEnabled())\n-            logger.debug(\"Response received from host: \" + HedwigClient.getHostFromChannel(ctx.getChannel())\n+            logger.debug(\"Response received from host: \" + HedwigClientImpl.getHostFromChannel(ctx.getChannel())\n                          + \", response: \" + response);\n \n         // Determine if this PubSubResponse is an ack response for a PubSub\n@@ -185,7 +185,7 @@ public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Ex\n     public void handleRedirectResponse(PubSubResponse response, PubSubData pubSubData, Channel channel)\n             throws Exception {\n         if (logger.isDebugEnabled())\n-            logger.debug(\"Handling a redirect from host: \" + HedwigClient.getHostFromChannel(channel) + \", response: \"\n+            logger.debug(\"Handling a redirect from host: \" + HedwigClientImpl.getHostFromChannel(channel) + \", response: \"\n                          + response + \", pubSubData: \" + pubSubData);\n         // In this case, the PubSub request was done to a server that is not\n         // responsible for the topic. First make sure that we haven't\n@@ -206,7 +206,7 @@ public void handleRedirectResponse(PubSubResponse response, PubSubData pubSubDat\n         // We will redirect and try to connect to the correct server\n         // stored in the StatusMsg of the response. First store the\n         // server that we sent the PubSub request to for the topic.\n-        ByteString triedServer = ByteString.copyFromUtf8(HedwigSocketAddress.sockAddrStr(HedwigClient\n+        ByteString triedServer = ByteString.copyFromUtf8(HedwigSocketAddress.sockAddrStr(HedwigClientImpl\n                                  .getHostFromChannel(channel)));\n         if (pubSubData.triedServers == null)\n             pubSubData.triedServers = new LinkedList<ByteString>();\n@@ -277,7 +277,7 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n         // Make sure the host retrieved is not null as there could be some weird\n         // channel disconnect events happening during a client shutdown.\n         // If it is, just return as there shouldn't be anything we need to do.\n-        InetSocketAddress host = HedwigClient.getHostFromChannel(ctx.getChannel());\n+        InetSocketAddress host = HedwigClientImpl.getHostFromChannel(ctx.getChannel());\n         logger.warn(\"Channel was disconnected to host: \" + host);\n         if (host == null)\n             return;"},{"sha":"a8552f44f30d589388153f9fab3efdbfaf4658a8","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -37,11 +37,11 @@\n \n     // Private member variables\n     private PubSubData pubSubData;\n-    private final HedwigClient client;\n+    private final HedwigClientImpl client;\n     private final ClientConfiguration cfg;\n \n     // Constructor\n-    public WriteCallback(PubSubData pubSubData, HedwigClient client) {\n+    public WriteCallback(PubSubData pubSubData, HedwigClientImpl client) {\n         super();\n         this.pubSubData = pubSubData;\n         this.client = client;\n@@ -56,14 +56,14 @@ public void operationComplete(ChannelFuture future) throws Exception {\n \n         // When the write operation to the server is done, we just need to check\n         // if it was successful or not.\n-        InetSocketAddress host = HedwigClient.getHostFromChannel(future.getChannel());\n+        InetSocketAddress host = HedwigClientImpl.getHostFromChannel(future.getChannel());\n         if (!future.isSuccess()) {\n             logger.error(\"Error writing on channel to host: \" + host);\n             // On a write failure for a PubSubRequest, we also want to remove\n             // the saved txnId to PubSubData in the ResponseHandler. These\n             // requests will not receive an ack response from the server\n             // so there is no point storing that information there anymore.\n-            HedwigClient.getResponseHandlerFromChannel(future.getChannel()).txn2PubSubData.remove(pubSubData.txnId);\n+            HedwigClientImpl.getResponseHandlerFromChannel(future.getChannel()).txn2PubSubData.remove(pubSubData.txnId);\n \n             // If we were not able to write on the channel to the server host,\n             // the host could have died or something is wrong with the channel"},{"sha":"5b04bdcddad25743a1b63cd67b8dcca1995a36b6","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -36,7 +36,7 @@\n import org.jboss.netty.logging.InternalLoggerFactory;\n import org.jboss.netty.logging.Log4JLoggerFactory;\n \n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n import org.apache.hedwig.server.common.TerminateJVMExceptionHandler;\n import org.apache.hedwig.server.handlers.Handler;\n@@ -120,7 +120,7 @@ protected void initializeNetty() {\n \n     public void shutdown() {\n         allChannels.close().awaitUninterruptibly();\n-        client.stop();\n+        client.close();\n         serverSocketChannelFactory.releaseExternalResources();\n     }\n "},{"sha":"223d63af9ce2bc7d2501793f82a29116f3ea0365","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxyStartDeliveryHandler.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -82,7 +82,7 @@ public void handleRequest(PubSubRequest request, Channel channel) {\n \n             MessageHandler handler = new MessageHandler() {\n                 @Override\n-                public void consume(ByteString topic, ByteString subscriberId, Message msg,\n+                public void deliver(ByteString topic, ByteString subscriberId, Message msg,\n                 final Callback<Void> callback, final Object context) {\n \n                     PubSubResponse response = PubSubResponse.newBuilder().setProtocolVersion("},{"sha":"063a99c11a1ab2009fe550b2a50ae06367937950","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubClient.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -20,15 +20,15 @@\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n \n import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.netty.HedwigClientImpl;\n \n /**\n  * This is a hub specific implementation of the HedwigClient. All this does\n  * though is to override the HedwigSubscriber with the hub specific child class.\n  * Creating this class so we can call the protected method in the parent to set\n  * the subscriber since we don't want to expose that API to the public.\n  */\n-public class HedwigHubClient extends HedwigClient {\n+public class HedwigHubClient extends HedwigClientImpl {\n \n     // Constructor when we already have a ChannelFactory instantiated.\n     public HedwigHubClient(ClientConfiguration cfg, ClientSocketChannelFactory channelFactory) {"},{"sha":"40aa3389b787f97b59fab2a9ef6985551e7250d9","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/regions/HedwigHubSubscriber.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -19,7 +19,7 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;\n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.netty.HedwigClientImpl;\n import org.apache.hedwig.client.netty.HedwigSubscriber;\n import org.apache.hedwig.exceptions.PubSubException.ClientAlreadySubscribedException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n@@ -38,7 +38,7 @@\n  */\n public class HedwigHubSubscriber extends HedwigSubscriber {\n \n-    public HedwigHubSubscriber(HedwigClient client) {\n+    public HedwigHubSubscriber(HedwigClientImpl client) {\n         super(client);\n     }\n "},{"sha":"14037334f61622bfba4eebfe6efce8f975c7d419","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -85,7 +85,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n                             try {\n                                 sub.startDelivery(topic, mySubId, new MessageHandler() {\n                                     @Override\n-                                    public void consume(final ByteString topic, ByteString subscriberId, Message msg,\n+                                    public void deliver(final ByteString topic, ByteString subscriberId, Message msg,\n                                     final Callback<Void> callback, final Object context) {\n                                         // When messages are first published\n                                         // locally, the PublishHandler sets the\n@@ -176,7 +176,7 @@ public void run() {\n     // Method to shutdown and stop all of the cross-region Hedwig clients.\n     public void stop() {\n         for (HedwigHubClient client : clients) {\n-            client.stop();\n+            client.close();\n         }\n     }\n "},{"sha":"08994de3b25720af73b6d79ac5b661e040c53deb","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -26,9 +26,9 @@\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.client.netty.HedwigClient;\n-import org.apache.hedwig.client.netty.HedwigPublisher;\n-import org.apache.hedwig.client.netty.HedwigSubscriber;\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n@@ -41,8 +41,8 @@\n \n     // Client side variables\n     protected HedwigClient client;\n-    protected HedwigPublisher publisher;\n-    protected HedwigSubscriber subscriber;\n+    protected Publisher publisher;\n+    protected Subscriber subscriber;\n \n     // SynchronousQueues to verify async calls\n     private final SynchronousQueue<Boolean> queue = new SynchronousQueue<Boolean>();\n@@ -77,7 +77,7 @@ public void run() {\n \n     // Test implementation of subscriber's message handler.\n     class TestMessageHandler implements MessageHandler {\n-        public void consume(ByteString topic, ByteString subscriberId, Message msg, Callback<Void> callback,\n+        public void deliver(ByteString topic, ByteString subscriberId, Message msg, Callback<Void> callback,\n                             Object context) {\n             new Thread(new Runnable() {\n                 @Override\n@@ -103,7 +103,7 @@ public void setUp() throws Exception {\n     @Override\n     @After\n     public void tearDown() throws Exception {\n-        client.stop();\n+        client.close();\n         super.tearDown();\n     }\n "},{"sha":"0d8677b8fdadc7073937693faa4897d54a097d47","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/HedwigRegionTestBase.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -30,7 +30,7 @@\n import org.junit.Before;\n \n import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.client.netty.HedwigClient;\n+import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.netty.PubSubServer;\n import org.apache.hedwig.server.persistence.BookKeeperTestBase;\n@@ -203,7 +203,7 @@ public void tearDown() throws Exception {\n         logger.info(\"tearDown starting\");\n         // Stop all of the HedwigClients for all regions\n         for (HedwigClient client : regionClientsMap.values()) {\n-            client.stop();\n+            client.close();\n         }\n         regionClientsMap.clear();\n         // Shutdown all of the PubSubServers in all regions"},{"sha":"f7082a6d53c25a7e3d2420742279a0b297b6a6af","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","status":"modified","additions":23,"deletions":22,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -35,9 +35,10 @@\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;\n-import org.apache.hedwig.client.netty.HedwigClient;\n-import org.apache.hedwig.client.netty.HedwigPublisher;\n-import org.apache.hedwig.client.netty.HedwigSubscriber;\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.Client;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n@@ -63,8 +64,8 @@\n \n     // Client side variables\n     protected HedwigClient client;\n-    protected HedwigPublisher publisher;\n-    protected HedwigSubscriber subscriber;\n+    protected Publisher publisher;\n+    protected Subscriber subscriber;\n \n     // Common ByteStrings used in tests.\n     private final ByteString localSubscriberId = ByteString.copyFromUtf8(\"LocalSubscriber\");\n@@ -139,7 +140,7 @@ public TestMessageHandler(SynchronousQueue<Boolean> consumeQueue) {\n             this.consumeQueue = consumeQueue;\n         }\n \n-        public void consume(ByteString topic, ByteString subscriberId, final Message msg, Callback<Void> callback,\n+        public void deliver(ByteString topic, ByteString subscriberId, final Message msg, Callback<Void> callback,\n                             Object context) {\n             if (!consumedMessages.contains(msg.getMsgId())) {\n                 // New message to consume. Add it to the Set of consumed\n@@ -218,7 +219,7 @@ public void setUp() throws Exception {\n     @Override\n     @After\n     public void tearDown() throws Exception {\n-        client.stop();\n+        client.close();\n         if (mode == Mode.PROXY) {\n             proxy.shutdown();\n         }\n@@ -322,8 +323,8 @@ public boolean isAutoSendConsumeMessageEnabled() {\n             }\n \n         });\n-        HedwigSubscriber mySubscriber = myClient.getSubscriber();\n-        HedwigPublisher myPublisher = myClient.getPublisher();\n+        Subscriber mySubscriber = myClient.getSubscriber();\n+        Publisher myPublisher = myClient.getPublisher();\n         ByteString myTopic = getTopic(0);\n         // Subscribe to a topic and start delivery on it\n         mySubscriber.asyncSubscribe(myTopic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH,\n@@ -357,7 +358,7 @@ public boolean isAutoSendConsumeMessageEnabled() {\n         } catch (InterruptedException e) {\n             logger.error(\"Thread was interrupted while waiting to stop client for manual consume test!!\", e);\n         }\n-        myClient.stop();\n+        myClient.close();\n     }\n \n     @Test\n@@ -640,8 +641,8 @@ public void testAsyncUnsubscribeWithInvalidSubscriberId() throws Exception {\n     // subscriberId to be in the \"hub\" specific format.\n     @Test\n     public void testSyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n-        HedwigClient hubClient = new HedwigHubClient(new ClientConfiguration());\n-        HedwigSubscriber hubSubscriber = hubClient.getSubscriber();\n+        Client hubClient = new HedwigHubClient(new ClientConfiguration());\n+        Subscriber hubSubscriber = hubClient.getSubscriber();\n         boolean subscribeSuccess = false;\n         try {\n             hubSubscriber.subscribe(getTopic(0), localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH);\n@@ -651,23 +652,23 @@ public void testSyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n             subscribeSuccess = false;\n         }\n         assertTrue(subscribeSuccess);\n-        hubClient.stop();\n+        hubClient.close();\n     }\n \n     @Test\n     public void testAsyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n-        HedwigClient hubClient = new HedwigHubClient(new ClientConfiguration());\n-        HedwigSubscriber hubSubscriber = hubClient.getSubscriber();\n+        Client hubClient = new HedwigHubClient(new ClientConfiguration());\n+        Subscriber hubSubscriber = hubClient.getSubscriber();\n         hubSubscriber.asyncSubscribe(getTopic(0), localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(\n                                          queue), null);\n         assertFalse(queue.take());\n-        hubClient.stop();\n+        hubClient.close();\n     }\n \n     @Test\n     public void testSyncHubUnsubscribeWithInvalidSubscriberId() throws Exception {\n-        HedwigClient hubClient = new HedwigHubClient(new ClientConfiguration());\n-        HedwigSubscriber hubSubscriber = hubClient.getSubscriber();\n+        Client hubClient = new HedwigHubClient(new ClientConfiguration());\n+        Subscriber hubSubscriber = hubClient.getSubscriber();\n         boolean unsubscribeSuccess = false;\n         try {\n             hubSubscriber.unsubscribe(getTopic(0), localSubscriberId);\n@@ -677,16 +678,16 @@ public void testSyncHubUnsubscribeWithInvalidSubscriberId() throws Exception {\n             unsubscribeSuccess = false;\n         }\n         assertTrue(unsubscribeSuccess);\n-        hubClient.stop();\n+        hubClient.close();\n     }\n \n     @Test\n     public void testAsyncHubUnsubscribeWithInvalidSubscriberId() throws Exception {\n-        HedwigClient hubClient = new HedwigHubClient(new ClientConfiguration());\n-        HedwigSubscriber hubSubscriber = hubClient.getSubscriber();\n+        Client hubClient = new HedwigHubClient(new ClientConfiguration());\n+        Subscriber hubSubscriber = hubClient.getSubscriber();\n         hubSubscriber.asyncUnsubscribe(getTopic(0), localSubscriberId, new TestCallback(queue), null);\n         assertFalse(queue.take());\n-        hubClient.stop();\n+        hubClient.close();\n     }\n \n }"},{"sha":"aa09ee98bc7104ff2ffa6b92341eaccbf4293bc8","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -24,8 +24,8 @@\n import org.junit.Test;\n \n import com.google.protobuf.ByteString;\n-import org.apache.hedwig.client.netty.HedwigClient;\n-import org.apache.hedwig.client.netty.HedwigPublisher;\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.server.HedwigRegionTestBase;\n@@ -76,7 +76,7 @@ public void testMultiRegionSubscribeAndConsume() throws Exception {\n         // Now start publishing messages for the subscribed topics in one of the\n         // regions and verify that it gets delivered and consumed in all of the\n         // other ones.\n-        HedwigPublisher publisher = regionClientsMap.values().iterator().next().getPublisher();\n+        Publisher publisher = regionClientsMap.values().iterator().next().getPublisher();\n         for (int i = 0; i < batchSize; i++) {\n             publisher.asyncPublish(ByteString.copyFromUtf8(\"Topic\" + i), Message.newBuilder().setBody(\n                                        ByteString.copyFromUtf8(\"Message\" + i)).build(), new TestCallback(queue), null);"},{"sha":"a11921e124ada39508082269342452b6dc1a0043","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/netty/TestPubSubServer.java?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -33,8 +33,8 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.client.netty.HedwigClient;\n-import org.apache.hedwig.client.netty.HedwigPublisher;\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.server.PubSubServerStandAloneTestBase;\n@@ -97,7 +97,7 @@ protected TopicManager instantiateTopicManager() throws IOException {\n     }\n \n     public void runPublishRequest(final int port) throws Exception {\n-        HedwigPublisher publisher = new HedwigClient(new ClientConfiguration() {\n+        Publisher publisher = new HedwigClient(new ClientConfiguration() {\n             @Override\n             public InetSocketAddress getDefaultServerHost() {\n                 return new InetSocketAddress(\"localhost\", port);"},{"sha":"b50a59221732634b04bfb62a313e458246427b53","filename":"pom.xml","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/e14618559769b7f3fa68360a4571a84392e162e3/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/e14618559769b7f3fa68360a4571a84392e162e3/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=e14618559769b7f3fa68360a4571a84392e162e3","patch":"@@ -72,7 +72,8 @@\n         <artifactId>maven-javadoc-plugin</artifactId>\n         <version>2.8</version>\n \t<configuration>\n-\t  <subpackages>org.apache.bookkeeper.client</subpackages>\n+\t  <additionalparam>-exclude org.apache.hedwig.client.netty:org.apache.hedwig.client.benchmark:org.apache.hedwig.client.data:org.apache.hedwig.client.exceptions:org.apache.hedwig.client.handlers:org.apache.hedwig.client.ssl</additionalparam>\n+\t  <subpackages>org.apache.bookkeeper.client:org.apache.hedwig.client:org.apache.hedwig.util:org.apache.hedwig.protocol:org.apache.hedwig.exceptions</subpackages>\n           <groups>\n \t    <group>\n               <title>Bookkeeper</title>"}]}

