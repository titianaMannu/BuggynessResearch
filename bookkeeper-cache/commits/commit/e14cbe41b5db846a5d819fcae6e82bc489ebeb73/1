{"sha":"e14cbe41b5db846a5d819fcae6e82bc489ebeb73","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMTRjYmU0MWI1ZGI4NDZhNWQ4MTlmY2FlNmU4MmJjNDg5ZWJlYjcz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-25T16:26:48Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-03-25T16:26:48Z"},"message":"BOOKKEEPER-506: Provide better topic release algorithm (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1460751 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f746dafa6f186e8eb21170ca031fd1f8e6fb527d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f746dafa6f186e8eb21170ca031fd1f8e6fb527d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e14cbe41b5db846a5d819fcae6e82bc489ebeb73","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e14cbe41b5db846a5d819fcae6e82bc489ebeb73","html_url":"https://github.com/apache/bookkeeper/commit/e14cbe41b5db846a5d819fcae6e82bc489ebeb73","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6268be59c7d8cf411860a6807a2cb45bc1c891f4","url":"https://api.github.com/repos/apache/bookkeeper/commits/6268be59c7d8cf411860a6807a2cb45bc1c891f4","html_url":"https://github.com/apache/bookkeeper/commit/6268be59c7d8cf411860a6807a2cb45bc1c891f4"}],"stats":{"total":275,"additions":238,"deletions":37},"files":[{"sha":"3ba357f206dc82722fa8a55b491c12779c9d5d39","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -14,6 +14,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-586: Remove recursive call in delivery manager (sijie via ivank)\n \n+      BOOKKEEPER-506: Provide better topic release algorithm (sijie via ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-567: ReadOnlyBookieTest hangs on shutdown (sijie via ivank)"},{"sha":"7be41b9383a0c7f52353e587fc86f2aceeb6beb0","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -57,7 +57,10 @@\n     protected final static String PASSWORD = \"password\";\n     protected final static String SSL_ENABLED = \"ssl_enabled\";\n     protected final static String CONSUME_INTERVAL = \"consume_interval\";\n+    protected final static String INIT_NUM_TOPICS = \"init_num_topics\";\n+    protected final static String MAX_NUM_TOPICS = \"max_num_topics\";\n     protected final static String RETENTION_SECS = \"retention_secs\";\n+    protected final static String RETENTION_SECS_AFTER_ACCESS = \"retention_secs_after_access\";\n     protected final static String INTER_REGION_SSL_ENABLED = \"inter_region_ssl_enabled\";\n     protected final static String MESSAGES_CONSUMED_THREAD_RUN_INTERVAL = \"messages_consumed_thread_run_interval\";\n     protected final static String BK_ENSEMBLE_SIZE = \"bk_ensemble_size\";\n@@ -387,6 +390,36 @@ public int getRetentionSecs() {\n         return conf.getInt(RETENTION_SECS, 0);\n     }\n \n+    /**\n+     * Specifies that the topic should be automatically released\n+     * once a fixed duration after the topic is owned, a message is\n+     * published, or a message is delivered.\n+     *\n+     * @return the length of time after an entry is last accessed that\n+     *         it should be automatically removed.\n+     */\n+    public int getRetentionSecsAfterAccess() {\n+        return conf.getInt(RETENTION_SECS_AFTER_ACCESS, 0);\n+    }\n+\n+    /**\n+     * Max number of topics for a hub server to serve.\n+     *\n+     * @return max number of topics for a hub server to serve.\n+     */\n+    public int getMaxNumTopics() {\n+        return conf.getInt(MAX_NUM_TOPICS, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * Minimum size of internal structure to store topics.\n+     *\n+     * @return init number of topics for a hub server.\n+     */\n+    public int getInitNumTopics() {\n+        return conf.getInt(INIT_NUM_TOPICS, 128);\n+    }\n+\n     /**\n      * True if SSL is enabled across regions.\n      * "},{"sha":"8a2dbf2293deefb2d32e5b4ed82503e280d04106","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -61,6 +61,7 @@\n import org.apache.hedwig.server.persistence.ReadAheadCache;\n import org.apache.hedwig.server.persistence.ScanCallback;\n import org.apache.hedwig.server.persistence.ScanRequest;\n+import org.apache.hedwig.server.topics.TopicManager;\n import org.apache.hedwig.util.Callback;\n import static org.apache.hedwig.util.VarArgs.va;\n \n@@ -97,7 +98,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n \n     private final ReadAheadCache cache;\n     private final PersistenceManager persistenceMgr;\n-\n+    private TopicManager tm;\n     private ServerConfiguration cfg;\n \n     private final int numDeliveryWorkers;\n@@ -257,7 +258,9 @@ public void performRequest() {\n \n \n \n-    public FIFODeliveryManager(PersistenceManager persistenceMgr, ServerConfiguration cfg) {\n+    public FIFODeliveryManager(TopicManager tm, PersistenceManager persistenceMgr,\n+                               ServerConfiguration cfg) {\n+        this.tm = tm;\n         this.persistenceMgr = persistenceMgr;\n         if (persistenceMgr instanceof ReadAheadCache) {\n             this.cache = (ReadAheadCache) persistenceMgr;\n@@ -691,6 +694,12 @@ public void messageScanned(Object ctx, Message message) {\n                 return;\n             }\n \n+            // only increment topic access times when tried to deliver a message\n+            // for those subscribers just waiting for a published for a long time\n+            // we don't increment topic access times, so the topic would be evicted\n+            // in future.\n+            tm.incrementTopicAccessTimes(topic);\n+\n             if (!filter.testMessage(message)) {\n                 sendingFinished();\n                 return;"},{"sha":"23fa7cd4cbb719d147f3b32a4d067d2ca5f0db3c","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -411,7 +411,7 @@ public void run() {\n                     instantiateMetadataManagerFactory();\n                     tm = instantiateTopicManager();\n                     pm = instantiatePersistenceManager(tm);\n-                    dm = new FIFODeliveryManager(pm, conf);\n+                    dm = new FIFODeliveryManager(tm, pm, conf);\n                     dm.start();\n \n                     sm = instantiateSubscriptionManager(tm, pm, dm);"},{"sha":"f24661e0baa923b811c03cedfdccf61511f5c98c","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","status":"modified","additions":87,"deletions":25,"changes":112,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -29,6 +29,10 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n+import com.google.common.cache.Cache;\n+import com.google.common.cache.CacheBuilder;\n+import com.google.common.cache.RemovalListener;\n+import com.google.common.cache.RemovalNotification;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.common.TopicOpQueuer;\n@@ -37,6 +41,15 @@\n import org.apache.hedwig.util.HedwigSocketAddress;\n \n public abstract class AbstractTopicManager implements TopicManager {\n+\n+    /**\n+     * Stats for a topic. For now it just an empty stub class.\n+     */\n+    static class TopicStats {\n+    }\n+\n+    final static TopicStats STUB_TOPIC_STATS = new TopicStats();\n+\n     /**\n      * My name.\n      */\n@@ -50,7 +63,7 @@\n     /**\n      * List of topics I believe I am responsible for.\n      */\n-    protected Set<ByteString> topics = Collections.synchronizedSet(new HashSet<ByteString>());\n+    protected Cache<ByteString, TopicStats> topics;\n \n     protected TopicOpQueuer queuer;\n     protected ServerConfiguration cfg;\n@@ -74,64 +87,113 @@ public void run() {\n     }\n \n     private class ReleaseOp extends TopicOpQueuer.AsynchronousOp<Void> {\n+        final boolean checkExistence;\n+\n         public ReleaseOp(ByteString topic, Callback<Void> cb, Object ctx) {\n+            this(topic, cb, ctx, true);\n+        }\n+\n+        ReleaseOp(ByteString topic, Callback<Void> cb, Object ctx,\n+                  boolean checkExistence) {\n             queuer.super(topic, cb, ctx);\n+            this.checkExistence = checkExistence;\n         }\n \n         @Override\n         public void run() {\n-            if (!topics.contains(topic)) {\n-                cb.operationFinished(ctx, null);\n-                return;\n+            if (checkExistence) {\n+                TopicStats stats = topics.getIfPresent(topic);\n+                if (null == stats) {\n+                    cb.operationFinished(ctx, null);\n+                    return;\n+                }\n             }\n             realReleaseTopic(topic, cb, ctx);\n         }\n     }\n \n+    /**\n+     * Release topic when the topic is removed from topics cache.\n+     */\n+    class ReleaseTopicListener implements RemovalListener<ByteString, TopicStats> {\n+        @Override\n+        public void onRemoval(RemovalNotification<ByteString, TopicStats> notification) {\n+            if (notification.wasEvicted()) {\n+                logger.info(\"topic {} is evicted\", notification.getKey().toStringUtf8());\n+                // if the topic is evicted, we need to release the topic.\n+                releaseTopicInternally(notification.getKey(), false);\n+            }\n+        }\n+    }\n+\n     public AbstractTopicManager(ServerConfiguration cfg, ScheduledExecutorService scheduler)\n             throws UnknownHostException {\n         this.cfg = cfg;\n         this.queuer = new TopicOpQueuer(scheduler);\n         this.scheduler = scheduler;\n         addr = cfg.getServerAddr();\n+\n+        // build the topic cache\n+        CacheBuilder<ByteString, TopicStats> cacheBuilder = CacheBuilder.newBuilder()\n+            .maximumSize(cfg.getMaxNumTopics())\n+            .initialCapacity(cfg.getInitNumTopics())\n+            // TODO: change to same number as topic op queuer threads\n+            .concurrencyLevel(Runtime.getRuntime().availableProcessors())\n+            .removalListener(new ReleaseTopicListener());\n+        if (cfg.getRetentionSecsAfterAccess() > 0) {\n+            cacheBuilder.expireAfterAccess(cfg.getRetentionSecsAfterAccess(), TimeUnit.SECONDS);\n+        }\n+        topics = cacheBuilder.build();\n+    }\n+\n+    @Override\n+    public void incrementTopicAccessTimes(ByteString topic) {\n+        // let guava cache handle hits counting\n+        topics.getIfPresent(topic);\n     }\n \n     @Override\n     public synchronized void addTopicOwnershipChangeListener(TopicOwnershipChangeListener listener) {\n         listeners.add(listener);\n     }\n \n+    private void releaseTopicInternally(final ByteString topic, boolean checkExistence) {\n+        // Enqueue a release operation. (Recall that release\n+        // doesn't \"fail\" even if the topic is missing.)\n+        queuer.pushAndMaybeRun(topic, new ReleaseOp(topic, new Callback<Void>() {\n+\n+            @Override\n+            public void operationFailed(Object ctx, PubSubException exception) {\n+                logger.error(\"failure that should never happen when releasing topic \"\n+                             + topic, exception);\n+            }\n+\n+            @Override\n+            public void operationFinished(Object ctx, Void resultOfOperation) {\n+                    logger.info(\"successfully release of topic \"\n+                        + topic.toStringUtf8());\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"successfully release of topic \"\n+                        + topic.toStringUtf8());\n+                }\n+            }\n+\n+        }, null, checkExistence));\n+    }\n+\n     protected final synchronized void notifyListenersAndAddToOwnedTopics(final ByteString topic,\n             final Callback<HedwigSocketAddress> originalCallback, final Object originalContext) {\n \n         Callback<Void> postCb = new Callback<Void>() {\n \n             @Override\n             public void operationFinished(Object ctx, Void resultOfOperation) {\n-                topics.add(topic);\n+                topics.put(topic, STUB_TOPIC_STATS);\n                 if (cfg.getRetentionSecs() > 0) {\n                     scheduler.schedule(new Runnable() {\n                         @Override\n                         public void run() {\n-                            // Enqueue a release operation. (Recall that release\n-                            // doesn't \"fail\" even if the topic is missing.)\n-                            releaseTopic(topic, new Callback<Void>() {\n-\n-                                @Override\n-                                public void operationFailed(Object ctx, PubSubException exception) {\n-                                    logger.error(\"failure that should never happen when periodically releasing topic \"\n-                                                 + topic, exception);\n-                                }\n-\n-                                @Override\n-                                public void operationFinished(Object ctx, Void resultOfOperation) {\n-                                    if (logger.isDebugEnabled()) {\n-                                        logger.debug(\"successful periodic release of topic \"\n-                                            + topic.toStringUtf8());\n-                                    }\n-                                }\n-\n-                            }, null);\n+                            releaseTopicInternally(topic, true);\n                         }\n                     }, cfg.getRetentionSecs(), TimeUnit.SECONDS);\n                 }\n@@ -164,7 +226,7 @@ public void operationFailed(Object _ctx, PubSubException _exception) {\n     private void realReleaseTopic(ByteString topic, Callback<Void> callback, Object ctx) {\n         for (TopicOwnershipChangeListener listener : listeners)\n             listener.lostTopic(topic);\n-        topics.remove(topic);\n+        topics.invalidate(topic);\n         postReleaseCleanup(topic, callback, ctx);\n     }\n "},{"sha":"5c3ef08845ede649cf9484bf1766f750cfee8e26","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -120,7 +120,8 @@ protected void realGetOwner(final ByteString topic, final boolean shouldClaim,\n             return;\n         }\n \n-        if (topics.contains(topic)) {\n+        TopicStats stats = topics.getIfPresent(topic);\n+        if (null != stats) {\n             cb.operationFinished(ctx, addr);\n             return;\n         }"},{"sha":"9b8d1a57979a24582cae05af27d843972d17cc9a","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TopicManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -48,6 +48,14 @@\n     public void getOwner(ByteString topic, boolean shouldClaim,\n                          Callback<HedwigSocketAddress> cb, Object ctx);\n \n+    /**\n+     * Increment the number of access times for a given <code>topic</code>.\n+     *\n+     * @param topic\n+     *          Topic Name.\n+     */\n+    public void incrementTopicAccessTimes(ByteString topic);\n+\n     /**\n      * Whenever the topic manager finds out that the set of topics owned by this\n      * node has changed, it can notify a set of"},{"sha":"6b3a417621c376ac245ec29f399093277bc9bcce","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/TrivialOwnAllTopicManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -36,7 +36,8 @@ public TrivialOwnAllTopicManager(ServerConfiguration cfg, ScheduledExecutorServi\n     protected void realGetOwner(ByteString topic, boolean shouldClaim,\n                                 Callback<HedwigSocketAddress> cb, Object ctx) {\n \n-        if (topics.contains(topic)) {\n+        TopicStats stats = topics.getIfPresent(topic);\n+        if (null != stats) {\n             cb.operationFinished(ctx, addr);\n             return;\n         }"},{"sha":"077274faec12228d2eab080ac83bfa9234fd8bb7","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -134,7 +134,8 @@ protected void realGetOwner(final ByteString topic, final boolean shouldClaim,\n             return;\n         }\n \n-        if (topics.contains(topic)) {\n+        TopicStats stats = topics.getIfPresent(topic);\n+        if (null != stats) {\n             cb.operationFinished(ctx, addr);\n             return;\n         }"},{"sha":"2db5810d86c0eea8a98c6f7a84b4bd456608867b","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestFIFODeliveryManager.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestFIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestFIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestFIFODeliveryManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -37,6 +37,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.server.topics.StubTopicManager;\n import org.apache.hedwig.server.persistence.PersistRequest;\n import org.apache.hedwig.server.persistence.PersistenceManager;\n import org.apache.hedwig.server.persistence.StubPersistenceManager;\n@@ -120,7 +121,7 @@ public void testFIFODeliverySubCloseSubRace() throws Exception {\n         ByteString subscriber = ByteString.copyFromUtf8(\"subRaceSubscriber\");\n \n         PersistenceManager pm = new StubPersistenceManager();\n-        FIFODeliveryManager fdm = new FIFODeliveryManager(pm, conf);\n+        FIFODeliveryManager fdm = new FIFODeliveryManager(new StubTopicManager(conf), pm, conf);\n         ExecutorDeliveryEndPointWithQueue dep = new ExecutorDeliveryEndPointWithQueue();\n         SubscriptionPreferences prefs = SubscriptionPreferences.newBuilder().build();\n \n@@ -251,7 +252,7 @@ public int getDefaultMessageWindowSize() {\n         ByteString subscriber = ByteString.copyFromUtf8(\"throttlingRaceSubscriber\");\n \n         PersistenceManager pm = new StubPersistenceManager();\n-        FIFODeliveryManager fdm = new FIFODeliveryManager(pm, conf);\n+        FIFODeliveryManager fdm = new FIFODeliveryManager(new StubTopicManager(conf), pm, conf);\n         ExecutorDeliveryEndPoint dep = new ExecutorDeliveryEndPoint(fdm);\n         SubscriptionPreferences prefs = SubscriptionPreferences.newBuilder().build();\n "},{"sha":"b66196e69b56c9a2c0190dc0ebcdb2b0a2655053","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/StubTopicManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -51,7 +51,7 @@ protected void realGetOwner(ByteString topic, boolean shouldClaim,\n             cb.operationFailed(ctx, new PubSubException.ServiceDownException(\"Asked to fail\"));\n             return;\n         }\n-        if (topics.contains(topic) // already own it\n+        if (null != topics.getIfPresent(topic) // already own it\n                 || shouldOwnEveryNewTopic) {\n             super.realGetOwner(topic, shouldClaim, cb, ctx);\n             return;"},{"sha":"4c54d39f3154b0ff907bec46f27b8420e7b96e92","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java","status":"modified","additions":37,"deletions":1,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestMMTopicManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -276,7 +276,7 @@ public void testOwnershipChange() throws Exception {\n         Assert.assertTrue(pair.second());\n         Assert.assertEquals(PubSubException.ServiceDownException.class, ((CompositeException) addrCbq.take().right())\n                             .getExceptions().iterator().next().getClass());\n-        Assert.assertFalse(tm.topics.contains(topic));\n+        Assert.assertFalse(null != tm.topics.getIfPresent(topic));\n         Thread.sleep(100);\n         assertOwnershipNodeDoesntExist();\n \n@@ -318,4 +318,40 @@ public void testZKClientDisconnected() throws Exception {\n         assertOwnershipNodeExists();\n     }\n \n+    @Test(timeout=60000)\n+    public void testRetentionAfterAccess() throws Exception {\n+        conf.getConf().setProperty(\"retention_secs_after_access\", \"5\");\n+        MMTopicManager tm1 = new MMTopicManager(conf, zk, metadataManagerFactory, scheduler);\n+        tm1.getOwner(topic, true, addrCbq, null);\n+        Assert.assertEquals(me, check(addrCbq.take()));\n+        Thread.sleep(6000L);\n+        tm1.topics.cleanUp();\n+        Thread.sleep(2000L);\n+        assertOwnershipNodeDoesntExist();\n+        tm1.getOwner(topic, true, addrCbq, null);\n+        Assert.assertEquals(me, check(addrCbq.take()));\n+        Thread.sleep(1000L);\n+        tm1.topics.cleanUp();\n+        Thread.sleep(2000L);\n+        assertOwnershipNodeExists();\n+\n+        tm1.stop();\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testMaxNumTopics() throws Exception {\n+        conf.getConf().setProperty(\"max_num_topics\", \"1\");\n+        MMTopicManager tm1 = new MMTopicManager(conf, zk, metadataManagerFactory, scheduler);\n+        tm1.getOwner(topic, true, addrCbq, null);\n+        Assert.assertEquals(me, check(addrCbq.take()));\n+        assertOwnershipNodeExists();\n+        tm1.getOwner(ByteString.copyFromUtf8(\"MaxNumTopic\"),\n+                     true, addrCbq, null);\n+        Assert.assertEquals(me, check(addrCbq.take()));\n+        Thread.sleep(2000L);\n+        assertOwnershipNodeDoesntExist();\n+        tm1.stop();\n+    }\n+\n+\n }"},{"sha":"2f016f5f9ba8267ecc9722049878d27c22839801","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","status":"modified","additions":49,"deletions":2,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e14cbe41b5db846a5d819fcae6e82bc489ebeb73/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestZkTopicManager.java?ref=e14cbe41b5db846a5d819fcae6e82bc489ebeb73","patch":"@@ -88,11 +88,23 @@ public void run() {\n     protected HedwigSocketAddress me;\n     protected ScheduledExecutorService scheduler;\n \n+    private volatile int DEFAULT_MAX_NUM_TOPICS = Integer.MAX_VALUE;\n+    private volatile int DEFAULT_RETENTION_SECS_AFTER_ACCESS = 0;\n+\n     @Override\n     @Before\n     public void setUp() throws Exception {\n         super.setUp();\n-        cfg = new ServerConfiguration();\n+        cfg = new ServerConfiguration() {\n+            @Override\n+            public int getRetentionSecsAfterAccess() {\n+                return DEFAULT_RETENTION_SECS_AFTER_ACCESS;\n+            }\n+            @Override\n+            public int getMaxNumTopics() {\n+                return DEFAULT_MAX_NUM_TOPICS;\n+            }\n+        };\n         me = cfg.getServerAddr();\n         scheduler = Executors.newSingleThreadScheduledExecutor();\n         tm = new ZkTopicManager(zk, cfg, scheduler);\n@@ -283,7 +295,7 @@ public void testOwnershipChange() throws Exception {\n         Assert.assertTrue(pair.second());\n         Assert.assertEquals(PubSubException.ServiceDownException.class, ((CompositeException) addrCbq.take().right())\n                             .getExceptions().iterator().next().getClass());\n-        Assert.assertFalse(tm.topics.contains(topic));\n+        Assert.assertFalse(null != tm.topics.getIfPresent(topic));\n         Thread.sleep(100);\n         assertOwnershipNodeDoesntExist();\n \n@@ -326,4 +338,39 @@ public void testZKClientDisconnected() throws Exception {\n         assertOwnershipNodeExists();\n     }\n \n+    @Test(timeout=60000)\n+    public void testRetentionAfterAccess() throws Exception {\n+        DEFAULT_RETENTION_SECS_AFTER_ACCESS = 5;\n+        ZkTopicManager tm1 = new ZkTopicManager(zk, cfg, scheduler);\n+        tm1.getOwner(topic, true, addrCbq, null);\n+        Assert.assertEquals(me, check(addrCbq.take()));\n+        Thread.sleep(6000L);\n+        tm1.topics.cleanUp();\n+        Thread.sleep(2000L);\n+        assertOwnershipNodeDoesntExist();\n+        tm1.getOwner(topic, true, addrCbq, null);\n+        Assert.assertEquals(me, check(addrCbq.take()));\n+        Thread.sleep(1000L);\n+        tm1.topics.cleanUp();\n+        Thread.sleep(2000L);\n+        assertOwnershipNodeExists();\n+\n+        tm1.stop();\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testMaxNumTopics() throws Exception {\n+        DEFAULT_MAX_NUM_TOPICS = 1;\n+        TopicManager tm1 = new ZkTopicManager(zk, cfg, scheduler);\n+        tm1.getOwner(topic, true, addrCbq, null);\n+        Assert.assertEquals(me, check(addrCbq.take()));\n+        assertOwnershipNodeExists();\n+        tm1.getOwner(ByteString.copyFromUtf8(\"MaxNumTopic\"),\n+                     true, addrCbq, null);\n+        Assert.assertEquals(me, check(addrCbq.take()));\n+        Thread.sleep(2000L);\n+        assertOwnershipNodeDoesntExist();\n+        tm1.stop();\n+    }\n+\n }"}]}

