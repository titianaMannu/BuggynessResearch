{"sha":"e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMjAxM2UzZjJiMmUzZTEwY2U1ZDE5NzdhZGFjOGUwNzNmZDA0MDRk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T04:40:39Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-10-02T04:40:39Z"},"message":"BOOKKEEPER-666: Naming threads of ExecutorService (rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1528305 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f2029bf086d12f39d05f54262b427a189c7dd9c6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f2029bf086d12f39d05f54262b427a189c7dd9c6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","html_url":"https://github.com/apache/bookkeeper/commit/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"dea488afbf4615e4416079f5517a6e3ae1000c17","url":"https://api.github.com/repos/apache/bookkeeper/commits/dea488afbf4615e4416079f5517a6e3ae1000c17","html_url":"https://github.com/apache/bookkeeper/commit/dea488afbf4615e4416079f5517a6e3ae1000c17"}],"stats":{"total":160,"additions":122,"deletions":38},"files":[{"sha":"8b2184d04583cb596ad763bdb4236746b00a5061","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -156,6 +156,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-640: Log improvement - add shutdown/exit log message for the bookie services (rakesh via sijie)\n \n+      BOOKKEEPER-666: Naming threads of ExecutorService (rakesh via sijie)\n+\n     NEW FEATURE:\n \n       BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)"},{"sha":"5e47d0f81087721acaf85985ce0a3d657fb7a7d5","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -145,7 +145,7 @@ public static void main(String[] args)\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                                                 .newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"BenchBookieClientScheduler\");\n \n         ClientConfiguration conf = new ClientConfiguration();\n         BookieClient bc = new BookieClient(conf, channelFactory, executor);"},{"sha":"7dba2d57091f6f8d9d1250f01635e273ee238282","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":25,"deletions":10,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -48,6 +48,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n /**\n  * BookKeeper client. We assume there is one single writer to a ledger at any\n  * time.\n@@ -132,14 +134,19 @@ public BookKeeper(final ClientConfiguration conf)\n         ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n         this.zk = ZkUtils\n                 .createConnectedZookeeperClient(conf.getZkServers(), w);\n-\n-        this.channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n-                                                                Executors.newCachedThreadPool());\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n+        this.channelFactory = new NioClientSocketChannelFactory(\n+                Executors.newCachedThreadPool(tfb.setNameFormat(\n+                        \"BookKeeper-NIOBoss-%d\").build()),\n+                Executors.newCachedThreadPool(tfb.setNameFormat(\n+                        \"BookKeeper-NIOWorker-%d\").build()));\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor(tfb\n+                .setNameFormat(\"BookKeeperClientScheduler-%d\").build());\n         // initialize the ensemble placement\n         this.placementPolicy = initializeEnsemblePlacementPolicy(conf);\n \n-        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n+        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads(),\n+                \"BookKeeperClientWorker\");\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n         bookieWatcher = new BookieWatcher(conf, scheduler, placementPolicy, this);\n         bookieWatcher.readBookiesBlocking();\n@@ -166,9 +173,13 @@ public BookKeeper(final ClientConfiguration conf)\n      * @throws KeeperException\n      */\n     public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n-        throws IOException, InterruptedException, KeeperException {\n-        this(conf, zk, new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n-                Executors.newCachedThreadPool()));\n+            throws IOException, InterruptedException, KeeperException {\n+\n+        this(conf, zk, new NioClientSocketChannelFactory(\n+                Executors.newCachedThreadPool(new ThreadFactoryBuilder()\n+                        .setNameFormat(\"BookKeeper-NIOBoss-%d\").build()),\n+                Executors.newCachedThreadPool(new ThreadFactoryBuilder()\n+                        .setNameFormat(\"BookKeeper-NIOWorker-%d\").build())));\n         ownChannelFactory = true;\n     }\n \n@@ -201,11 +212,15 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFac\n         this.conf = conf;\n         this.zk = zk;\n         this.channelFactory = channelFactory;\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder().setNameFormat(\n+                \"BookKeeperClientScheduler-%d\");\n+        this.scheduler = Executors\n+                .newSingleThreadScheduledExecutor(tfb.build());\n         // initialize the ensemble placement\n         this.placementPolicy = initializeEnsemblePlacementPolicy(conf);\n \n-        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n+        mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads(),\n+                \"BookKeeperClientWorker\");\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n         bookieWatcher = new BookieWatcher(conf, scheduler, placementPolicy, this);\n         bookieWatcher.readBookiesBlocking();"},{"sha":"c49316683a3b1ec6111cd3fe4ffa1f7e7054c305","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -45,6 +45,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n /**\n  * Hierarchical Ledger Manager which manages ledger meta in zookeeper using 2-level hierarchical znodes.\n  *\n@@ -87,7 +89,10 @@ public HierarchicalLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         super(conf, zk);\n \n         this.idGenPath = ledgerRootPath + IDGENERATION_PREFIX;\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder().setNameFormat(\n+                \"HierarchialLedgerManagerScheduler-%d\");\n+        this.scheduler = Executors\n+                .newSingleThreadScheduledExecutor(tfb.build());\n         LOG.debug(\"Using HierarchicalLedgerManager with root path : {}\", ledgerRootPath);\n     }\n "},{"sha":"64f6f79336384fe6084513b884d180f7d1829a05","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -58,6 +58,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n /**\n  * MetaStore Based Ledger Manager Factory\n  */\n@@ -201,7 +203,10 @@ public synchronized T getResult() {\n             maxEntriesPerScan = conf.getMetastoreMaxEntriesPerScan();\n \n             this.idGenPath = conf.getZkLedgersRootPath() + IDGENERATION_PREFIX;\n-            this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+            ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n+                    .setNameFormat(\"MSLedgerManagerScheduler-%d\");\n+            this.scheduler = Executors.newSingleThreadScheduledExecutor(tfb\n+                    .build());\n         }\n \n         @Override"},{"sha":"d5e320b339130e6ac3f0242fbab8b33418d4a825","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -27,6 +27,8 @@\n import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.versioning.Versioned;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n public class InMemoryMetastoreTable implements MetastoreScannableTable {\n \n     public static class MetadataVersion implements Version {\n@@ -96,7 +98,11 @@ public int hashCode() {\n     public InMemoryMetastoreTable(InMemoryMetaStore metastore, String name) {\n         this.map = new TreeMap<String, Versioned<Value>>();\n         this.name = name;\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        String thName = \"InMemoryMetastore-Table(\" + name + \")-Scheduler-%d\";\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n+                .setNameFormat(thName);\n+        this.scheduler = Executors\n+                .newSingleThreadScheduledExecutor(tfb.build());\n     }\n \n     @Override"},{"sha":"b5b20658a50f88a7b0738d0ddd71ca75d341956c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -42,6 +42,9 @@\n import org.jboss.netty.buffer.ChannelBuffers;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n import static com.google.common.base.Charsets.UTF_8;\n@@ -260,9 +263,14 @@ public void writeComplete(int rc, long ledger, long entry, InetSocketAddress add\n         Counter counter = new Counter();\n         byte hello[] = \"hello\".getBytes(UTF_8);\n         long ledger = Long.parseLong(args[2]);\n-        ClientSocketChannelFactory channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n-                .newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n+        ClientSocketChannelFactory channelFactory = new NioClientSocketChannelFactory(\n+                Executors.newCachedThreadPool(tfb.setNameFormat(\n+                        \"BookKeeper-NIOBoss-%d\").build()),\n+                Executors.newCachedThreadPool(tfb.setNameFormat(\n+                        \"BookKeeper-NIOWorker-%d\").build()));\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n+                \"BookieClientWorker\");\n         BookieClient bc = new BookieClient(new ClientConfiguration(), channelFactory, executor);\n         InetSocketAddress addr = new InetSocketAddress(args[0], Integer.parseInt(args[1]));\n "},{"sha":"ac068c95ecc26645ec12621d5fccafd3a5fcb63c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","status":"modified","additions":23,"deletions":3,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -25,6 +25,9 @@\n import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.commons.lang.StringUtils;\n+\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n /**\n  * This class provides 2 things over the java {@link ScheduledExecutorService}.\n@@ -45,14 +48,31 @@\n     ExecutorService threads[];\n     Random rand = new Random();\n \n-    public OrderedSafeExecutor(int numThreads) {\n+    /**\n+     * Constructs Safe executor\n+     * \n+     * @param numThreads\n+     *            - number of threads\n+     * @param threadName\n+     *            - name of the thread\n+     */\n+    public OrderedSafeExecutor(int numThreads, String threadName) {\n         if (numThreads <= 0) {\n             throw new IllegalArgumentException();\n         }\n-\n+        if (StringUtils.isBlank(threadName)) {\n+            // sets default name\n+            threadName = \"OrderedSafeExecutor\";\n+        }\n         threads = new ExecutorService[numThreads];\n         for (int i = 0; i < numThreads; i++) {\n-            threads[i] = Executors.newSingleThreadExecutor();\n+            StringBuilder thName = new StringBuilder(threadName);\n+            thName.append(\"-\");\n+            thName.append(i);\n+            thName.append(\"-%d\");\n+            ThreadFactoryBuilder tfb = new ThreadFactoryBuilder()\n+                    .setNameFormat(thName.toString());\n+            threads[i] = Executors.newSingleThreadExecutor(tfb.build());\n         }\n     }\n "},{"sha":"ac8ea7f5034dc5c71d43cc2075b80af6845ac8b2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -72,7 +72,8 @@ public void testConnectCloseRace() throws Exception {\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n+                \"BKClientOrderedSafeExecutor\");\n \n         InetSocketAddress addr = getBookie(0);\n         AtomicLong bytesOutstanding = new AtomicLong(0);\n@@ -109,7 +110,8 @@ public void operationComplete(int rc, Void result) {\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n+                \"BKClientOrderedSafeExecutor\");\n \n         InetSocketAddress addr = getBookie(0);\n         AtomicLong bytesOutstanding = new AtomicLong(0);\n@@ -144,7 +146,8 @@ public void operationComplete(int rc, Void result) {\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n+                \"BKClientOrderedSafeExecutor\");\n         InetSocketAddress addr = getBookie(0);\n \n         AtomicLong bytesOutstanding = new AtomicLong(0);\n@@ -242,7 +245,8 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n-        final OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        final OrderedSafeExecutor executor = new OrderedSafeExecutor(1,\n+                \"BKClientOrderedSafeExecutor\");\n         InetSocketAddress addr = getBookie(0);\n         AtomicLong bytesOutstanding = new AtomicLong(0);\n "},{"sha":"8de1c000d487df84dfac64bbeebf7f6a797d82ed","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -72,7 +72,7 @@ public void setUp() throws Exception {\n         bs.start();\n         channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                 .newCachedThreadPool());\n-        executor = new OrderedSafeExecutor(2);\n+        executor = new OrderedSafeExecutor(2, \"BKClientOrderedSafeExecutor\");\n     }\n \n     @Override"},{"sha":"f586ca3acf4bc07fea76f727cd157a7cd0b0f75c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LoopbackClient.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -97,7 +97,7 @@ public static void main(String args[]) {\n         LoopbackClient lb;\n         ClientSocketChannelFactory channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                 .newCachedThreadPool());\n-        OrderedSafeExecutor executor = new OrderedSafeExecutor(2);\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(2, \"BookieClientScheduler\");\n         try {\n             InetSocketAddress addr = new InetSocketAddress(\"127.0.0.1\", Integer.valueOf(args[2]).intValue());\n             lb = new LoopbackClient(channelFactory, executor, begin, limit.intValue());"},{"sha":"8ae0e8207e171f4d8b79ca9e605f573709884ca0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -24,7 +24,7 @@\n import org.jboss.netty.channel.ChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n \n-import com.google.protobuf.ByteString;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n \n import org.apache.hedwig.client.api.Client;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n@@ -65,7 +65,10 @@ public static Client create(ClientConfiguration cfg, ChannelFactory socketFactor\n     // This will create its own client socket channel factory.\n     protected HedwigClientImpl(ClientConfiguration cfg) {\n         this(cfg, new NioClientSocketChannelFactory(\n-                  Executors.newCachedThreadPool(), Executors.newCachedThreadPool()));\n+                Executors.newCachedThreadPool(new ThreadFactoryBuilder()\n+                        .setNameFormat(\"HedwigClient-NIOBoss-%d\").build()),\n+                Executors.newCachedThreadPool(new ThreadFactoryBuilder()\n+                        .setNameFormat(\"HedwigClient-NIOWorker-%d\").build())));\n         ownChannelFactory = true;\n     }\n "},{"sha":"d972f1376ea51c4048d843dfa5e235f955bf9962","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookieBenchmark.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -41,7 +41,7 @@\n     BookieClient bkc;\n     InetSocketAddress addr;\n     ClientSocketChannelFactory channelFactory;\n-    OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+    OrderedSafeExecutor executor = new OrderedSafeExecutor(1, \"BookieBenchmarkScheduler\");\n \n \n     public BookieBenchmark(String bookieHostPort)  throws Exception {"},{"sha":"94d61ad1bc52e98d0148b155363a09d6f3a09aab","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":15,"deletions":5,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -31,6 +31,8 @@\n import java.util.concurrent.TimeUnit;\n \n import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BKException;\n@@ -401,11 +403,19 @@ public void run() {\n                 try {\n                     // Since zk is needed by almost everyone,try to see if we\n                     // need that first\n-                    scheduler = Executors.newSingleThreadScheduledExecutor();\n-                    serverChannelFactory = new NioServerSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n-                            .newCachedThreadPool());\n-                    clientChannelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n-                            .newCachedThreadPool());\n+                    ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n+                    scheduler = Executors.newSingleThreadScheduledExecutor(tfb\n+                            .setNameFormat(\"PubSubServerScheduler-%d\").build());\n+                    serverChannelFactory = new NioServerSocketChannelFactory(\n+                            Executors.newCachedThreadPool(tfb.setNameFormat(\n+                                    \"PubSub-Server-NIOBoss-%d\").build()),\n+                            Executors.newCachedThreadPool(tfb.setNameFormat(\n+                                    \"PubSub-Server-NIOWorker-%d\").build()));\n+                    clientChannelFactory = new NioClientSocketChannelFactory(\n+                            Executors.newCachedThreadPool(tfb.setNameFormat(\n+                                    \"PubSub-Client-NIOBoss-%d\").build()),\n+                            Executors.newCachedThreadPool(tfb.setNameFormat(\n+                                    \"PubSub-Client-NIOWorker-%d\").build()));\n \n                     instantiateZookeeperClient();\n                     instantiateMetadataManagerFactory();"},{"sha":"09abf6714b542a94628e2e3742cd13e66bf88175","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -154,7 +154,8 @@ public ReadAheadCache(PersistenceManagerWithRangeScan realPersistenceManager, Se\n         this.realPersistenceManager = realPersistenceManager;\n         this.cfg = cfg;\n         numCacheWorkers = cfg.getNumReadAheadCacheThreads();\n-        cacheWorkers = new OrderedSafeExecutor(numCacheWorkers);\n+        cacheWorkers = new OrderedSafeExecutor(numCacheWorkers,\n+                \"ReadAheadCacheScheduler\");\n         reloadConf(cfg);\n     }\n "},{"sha":"b01f179688b80f6c1acfd89635cb54a633aa016b","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","raw_url":"https://github.com/apache/bookkeeper/raw/e2013e3f2b2e3e10ce5d1977adac8e073fd0404d/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/HedwigProxy.java?ref=e2013e3f2b2e3e10ce5d1977adac8e073fd0404d","patch":"@@ -45,6 +45,8 @@\n import org.apache.hedwig.server.netty.PubSubServerPipelineFactory;\n import org.apache.hedwig.server.netty.UmbrellaHandler;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n public class HedwigProxy {\n     static final Logger logger = LoggerFactory.getLogger(HedwigProxy.class);\n \n@@ -78,9 +80,12 @@ public void start() throws InterruptedException {\n             @Override\n             public void run() {\n                 client = new HedwigClient(cfg);\n-\n-                serverSocketChannelFactory = new NioServerSocketChannelFactory(Executors.newCachedThreadPool(),\n-                        Executors.newCachedThreadPool());\n+                ThreadFactoryBuilder tfb = new ThreadFactoryBuilder();\n+                serverSocketChannelFactory = new NioServerSocketChannelFactory(\n+                        Executors.newCachedThreadPool(tfb.setNameFormat(\n+                                \"HedwigProxy-NIOBoss-%d\").build()),\n+                        Executors.newCachedThreadPool(tfb.setNameFormat(\n+                                \"HedwigProxy-NIOWorker-%d\").build()));\n                 initializeHandlers();\n                 initializeNetty();\n "}]}

