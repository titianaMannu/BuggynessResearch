{"sha":"e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","node_id":"MDY6Q29tbWl0MTU3NTk1NjplNGE0MmFmNjkzM2MwY2IwYmU0NDFiM2Q5ZDVkMjg3OTBhYTlhN2I5","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-14T19:26:51Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-14T19:26:51Z"},"message":"BOOKKEEPER-428: Expose command options in bookie scripts to disable/enable auto recovery temporarily (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1422054 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d710f0c25eeb728740c75166b7d22739629c521","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7d710f0c25eeb728740c75166b7d22739629c521"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","html_url":"https://github.com/apache/bookkeeper/commit/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"dffe13f5b16200e192c36547021c34c186d00de8","url":"https://api.github.com/repos/apache/bookkeeper/commits/dffe13f5b16200e192c36547021c34c186d00de8","html_url":"https://github.com/apache/bookkeeper/commit/dffe13f5b16200e192c36547021c34c186d00de8"}],"stats":{"total":129,"additions":120,"deletions":9},"files":[{"sha":"e116b8453497ec57fad6989bd7939a9e12e021bc","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","patch":"@@ -252,6 +252,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-426: Make auditor Vote znode store a protobuf containing the host that voted (ivank)\n \n+\tBOOKKEEPER-428: Expose command options in bookie scripts to disable/enable auto recovery temporarily (ivank via fpj)\n+\n       hedwig-server:\n \n         BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)"},{"sha":"9bcb26dbdad9c6274dbe4dae4df7f5bbf85e7098","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":84,"deletions":3,"changes":87,"blob_url":"https://github.com/apache/bookkeeper/blob/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","patch":"@@ -27,6 +27,11 @@\n import java.util.HashMap;\n import java.util.Map;\n \n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.Journal.LastLogMark;\n@@ -36,6 +41,8 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.Tool;\n+import org.apache.bookkeeper.util.ZkUtils;\n+\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n@@ -65,6 +72,7 @@\n     static final String CMD_READLOG = \"readlog\";\n     static final String CMD_READJOURNAL = \"readjournal\";\n     static final String CMD_LASTMARK = \"lastmark\";\n+    static final String CMD_AUTORECOVERY = \"autorecovery\";\n     static final String CMD_HELP = \"help\";\n \n     final ServerConfiguration bkConf = new ServerConfiguration();\n@@ -493,6 +501,77 @@ public void printUsage() {\n         }\n     }\n \n+    /**\n+     * Command for administration of autorecovery\n+     */\n+    class AutoRecoveryCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public AutoRecoveryCmd() {\n+            super(CMD_AUTORECOVERY);\n+            opts.addOption(\"e\", \"enable\", false,\n+                           \"Enable auto recovery of underreplicated ledgers\");\n+            opts.addOption(\"d\", \"disable\", false,\n+                           \"Disable auto recovery of underreplicated ledgers\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Enable or disable autorecovery in the cluster.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"autorecovery [-enable|-disable]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            boolean disable = cmdLine.hasOption(\"d\");\n+            boolean enable = cmdLine.hasOption(\"e\");\n+\n+            if ((!disable && !enable)\n+                || (enable && disable)) {\n+                LOG.error(\"One and only one of -enable and -disable must be specified\");\n+                printUsage();\n+                return 1;\n+            }\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerUnderreplicationManager underreplicationManager = mFactory.newLedgerUnderreplicationManager();\n+                if (enable) {\n+                    if (underreplicationManager.isLedgerReplicationEnabled()) {\n+                        LOG.warn(\"Autorecovery already enabled. Doing nothing\");\n+                    } else {\n+                        LOG.info(\"Enabling autorecovery\");\n+                        underreplicationManager.enableLedgerReplication();\n+                    }\n+                } else {\n+                    if (!underreplicationManager.isLedgerReplicationEnabled()) {\n+                        LOG.warn(\"Autorecovery already disabled. Doing nothing\");\n+                    } else {\n+                        LOG.info(\"Disabling autorecovery\");\n+                        underreplicationManager.disableLedgerReplication();\n+                    }\n+                }\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n+\n     final Map<String, Command> commands;\n     {\n         commands = new HashMap<String, Command>();\n@@ -503,6 +582,7 @@ public void printUsage() {\n         commands.put(CMD_READLOG, new ReadLogCmd());\n         commands.put(CMD_READJOURNAL, new ReadJournalCmd());\n         commands.put(CMD_LASTMARK, new LastMarkCmd());\n+        commands.put(CMD_AUTORECOVERY, new AutoRecoveryCmd());\n         commands.put(CMD_HELP, new HelpCmd());\n     }\n \n@@ -523,9 +603,10 @@ private static void printShellUsage() {\n         System.err.println(\"       metaformat   [-nonInteractive] [-force]\");\n         System.err.println(\"       bookieformat [-nonInteractive] [-force]\");\n         System.err.println(\"       recover      <bookieSrc> [bookieDest]\");\n-        System.err.println(\"       ledger      [-meta] <ledger_id>\");\n-        System.err.println(\"       readlog     [-msg] <entry_log_id|entry_log_file_name>\");\n-        System.err.println(\"       readjournal [-msg] <journal_id|journal_file_name>\");\n+        System.err.println(\"       ledger       [-meta] <ledger_id>\");\n+        System.err.println(\"       readlog      [-msg] <entry_log_id|entry_log_file_name>\");\n+        System.err.println(\"       readjournal  [-msg] <journal_id|journal_file_name>\");\n+        System.err.println(\"       autorecovery [-enable|-disable]\");\n         System.err.println(\"       lastmark\");\n         System.err.println(\"       help\");\n     }"},{"sha":"c1bf4df566c273ceb4e94e2166f60f60662ac5df","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":13,"deletions":5,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","patch":"@@ -451,14 +451,18 @@ public void disableLedgerReplication()\n                     + BookKeeperConstants.DISABLE_NODE, \"\".getBytes(),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             LOG.info(\"Auto ledger re-replication is disabled!\");\n+        } catch (KeeperException.NodeExistsException ke) {\n+            LOG.warn(\"AutoRecovery is already disabled!\", ke);\n+            throw new ReplicationException.UnavailableException(\n+                    \"AutoRecovery is already disabled!\", ke);\n         } catch (KeeperException ke) {\n-            LOG.error(\"Exception while stopping replication\", ke);\n+            LOG.error(\"Exception while stopping auto ledger re-replication\", ke);\n             throw new ReplicationException.UnavailableException(\n-                    \"Error contacting zookeeper\", ke);\n+                    \"Exception while stopping auto ledger re-replication\", ke);\n         } catch (InterruptedException ie) {\n             Thread.currentThread().interrupt();\n             throw new ReplicationException.UnavailableException(\n-                    \"Interrupted while connecting zookeeper\", ie);\n+                    \"Interrupted while stopping auto ledger re-replication\", ie);\n         }\n     }\n \n@@ -469,14 +473,18 @@ public void enableLedgerReplication()\n         try {\n             zkc.delete(basePath + '/' + BookKeeperConstants.DISABLE_NODE, -1);\n             LOG.info(\"Resuming automatic ledger re-replication\");\n+        } catch (KeeperException.NoNodeException ke) {\n+            LOG.warn(\"AutoRecovery is already enabled!\", ke);\n+            throw new ReplicationException.UnavailableException(\n+                    \"AutoRecovery is already enabled!\", ke);\n         } catch (KeeperException ke) {\n             LOG.error(\"Exception while resuming ledger replication\", ke);\n             throw new ReplicationException.UnavailableException(\n-                    \"Error contacting zookeeper\", ke);\n+                    \"Exception while resuming auto ledger re-replication\", ke);\n         } catch (InterruptedException ie) {\n             Thread.currentThread().interrupt();\n             throw new ReplicationException.UnavailableException(\n-                    \"Interrupted while connecting zookeeper\", ie);\n+                    \"Interrupted while resuming auto ledger re-replication\", ie);\n         }\n     }\n "},{"sha":"50cff49990679a942c3719af5c9ebf9444011d29","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":21,"deletions":1,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","patch":"@@ -254,7 +254,7 @@ public void testMultipleBookieFailures() throws Exception {\n         }\n     }\n \n-    @Test//(timeout = 30000)\n+    @Test(timeout = 30000)\n     public void testToggleLedgerReplication() throws Exception {\n         LedgerHandle lh1 = createAndAddEntriesToLedger();\n         ledgerList.add(lh1.getId());\n@@ -279,6 +279,26 @@ public void testToggleLedgerReplication() throws Exception {\n                 5, TimeUnit.SECONDS));\n     }\n \n+    @Test(timeout = 20000)\n+    public void testDuplicateEnDisableAutoRecovery() throws Exception {\n+        urLedgerMgr.disableLedgerReplication();\n+        try {\n+            urLedgerMgr.disableLedgerReplication();\n+            fail(\"Must throw exception, since AutoRecovery is already disabled\");\n+        } catch (UnavailableException e) {\n+            assertTrue(\"AutoRecovery is not disabled previously!\",\n+                    e.getCause() instanceof KeeperException.NodeExistsException);\n+        }\n+        urLedgerMgr.enableLedgerReplication();\n+        try {\n+            urLedgerMgr.enableLedgerReplication();\n+            fail(\"Must throw exception, since AutoRecovery is already enabled\");\n+        } catch (UnavailableException e) {\n+            assertTrue(\"AutoRecovery is not enabled previously!\",\n+                    e.getCause() instanceof KeeperException.NoNodeException);\n+        }\n+    }\n+\n     private CountDownLatch registerUrLedgerWatcher(int count)\n             throws KeeperException, InterruptedException {\n         final CountDownLatch underReplicaLatch = new CountDownLatch(count);"}]}

