{"sha":"e61a1968c488a7517912be69e5d2cc98eb421040","node_id":"MDY6Q29tbWl0MTU3NTk1NjplNjFhMTk2OGM0ODhhNzUxNzkxMmJlNjllNWQyY2M5OGViNDIxMDQw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-08-19T08:32:23Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-08-19T08:32:23Z"},"message":"BOOKKEEPER-704: reconnectable zookeeper client wrapper (sijie via ivank) [missing file]\n\nChange-Id: I46cf3237ec5e1998039fedee9d127752c1389a73\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1618817 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ade001338a80cd9b191a1a55a6d11cacfb02724","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7ade001338a80cd9b191a1a55a6d11cacfb02724"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e61a1968c488a7517912be69e5d2cc98eb421040","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e61a1968c488a7517912be69e5d2cc98eb421040","html_url":"https://github.com/apache/bookkeeper/commit/e61a1968c488a7517912be69e5d2cc98eb421040","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e61a1968c488a7517912be69e5d2cc98eb421040/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c0cef66c6b34c635ec69a69ef033f96600ca5b99","url":"https://api.github.com/repos/apache/bookkeeper/commits/c0cef66c6b34c635ec69a69ef033f96600ca5b99","html_url":"https://github.com/apache/bookkeeper/commit/c0cef66c6b34c635ec69a69ef033f96600ca5b99"}],"stats":{"total":367,"additions":367,"deletions":0},"files":[{"sha":"f48fe37f70a4100f0183966b00359460f8ec8fe6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","status":"added","additions":367,"deletions":0,"changes":367,"blob_url":"https://github.com/apache/bookkeeper/blob/e61a1968c488a7517912be69e5d2cc98eb421040/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/e61a1968c488a7517912be69e5d2cc98eb421040/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/zookeeper/TestZooKeeperClient.java?ref=e61a1968c488a7517912be69e5d2cc98eb421040","patch":"@@ -0,0 +1,367 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.zookeeper;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.zookeeper.AsyncCallback.Children2Callback;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.AsyncCallback.StatCallback;\n+import org.apache.zookeeper.AsyncCallback.StringCallback;\n+import org.apache.zookeeper.AsyncCallback.VoidCallback;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+import org.apache.zookeeper.Watcher.Event.KeeperState;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.Stat;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test the wrapper of {@link org.apache.zookeeper.ZooKeeper} client.\n+ */\n+public class TestZooKeeperClient extends TestCase {\n+\n+    static final Logger logger = LoggerFactory.getLogger(TestZooKeeperClient.class);\n+\n+    // ZooKeeper related variables\n+    protected ZooKeeperUtil zkUtil = new ZooKeeperUtil();\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        logger.info(\"Setting up test {}.\", getName());\n+        zkUtil.startServer();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        zkUtil.killServer();\n+        logger.info(\"Teared down test {}.\", getName());\n+    }\n+\n+    private void expireZooKeeperSession(ZooKeeper zk, int timeout)\n+            throws IOException, InterruptedException, KeeperException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        ZooKeeper newZk = new ZooKeeper(zkUtil.getZooKeeperConnectString(), timeout,\n+                new Watcher() {\n+\n+            @Override\n+            public void process(WatchedEvent event) {\n+                if (event.getType() == EventType.None &&\n+                        event.getState() == KeeperState.SyncConnected) {\n+                    latch.countDown();\n+                }\n+            }\n+\n+        }, zk.getSessionId(), zk.getSessionPasswd());\n+        if (!latch.await(timeout, TimeUnit.MILLISECONDS)) {\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n+        newZk.close();\n+    }\n+\n+    /**\n+     * Shutdown Zk Server when client received an expire event.\n+     * So the client issue recreation client task but it would not succeed\n+     * until we start the zookeeper server again.\n+     */\n+    class ShutdownZkServerClient extends ZooKeeperClient {\n+\n+        ShutdownZkServerClient(String connectString, int sessionTimeoutMs,\n+                ZooKeeperWatcherBase watcher, RetryPolicy operationRetryPolicy)throws IOException {\n+            super(connectString, sessionTimeoutMs, watcher, operationRetryPolicy);\n+        }\n+\n+        @Override\n+        public void process(WatchedEvent event) {\n+            if (event.getType() == EventType.None &&\n+                    event.getState() == KeeperState.Expired) {\n+                try {\n+                    zkUtil.stopServer();\n+                } catch (Exception e) {\n+                    logger.error(\"Failed to stop zookeeper server : \", e);\n+                }\n+            }\n+            super.process(event);\n+        }\n+\n+    }\n+\n+    @Test(timeout=12000)\n+    public void testReconnectAfterExipred() throws Exception {\n+        final CountDownLatch expireLatch = new CountDownLatch(1);\n+        Watcher testWatcher = new Watcher() {\n+\n+            @Override\n+            public void process(WatchedEvent event) {\n+                if (event.getType() == EventType.None &&\n+                        event.getState() == KeeperState.Expired) {\n+                    expireLatch.countDown();\n+                }\n+            }\n+\n+        };\n+        final int timeout = 2000;\n+        ZooKeeperWatcherBase watcherManager =\n+                new ZooKeeperWatcherBase(timeout).addChildWatcher(testWatcher);\n+        List<Watcher> watchers = new ArrayList<Watcher>(1);\n+        watchers.add(testWatcher);\n+        ZooKeeperClient client = new ShutdownZkServerClient(\n+                zkUtil.getZooKeeperConnectString(), timeout, watcherManager,\n+                new BoundExponentialBackoffRetryPolicy(timeout, timeout, 0)\n+                );\n+        client.waitForConnection();\n+        Assert.assertTrue(\"Client failed to connect an alive ZooKeeper.\",\n+                client.getState().isConnected());\n+        logger.info(\"Expire zookeeper client\");\n+        expireZooKeeperSession(client, timeout);\n+\n+        // wait until session expire\n+        Assert.assertTrue(\"Client registered watcher should receive expire event.\",\n+                expireLatch.await(2 * timeout, TimeUnit.MILLISECONDS));\n+\n+        Assert.assertFalse(\"Client doesn't receive expire event from ZooKeeper.\",\n+                client.getState().isConnected());\n+        \n+        try {\n+            client.exists(\"/tmp\", false);\n+            Assert.fail(\"Should fail due to connection loss.\");\n+        } catch (KeeperException.ConnectionLossException cle) {\n+            // expected\n+        } catch (KeeperException.SessionExpiredException cle) {\n+            // expected\n+        }\n+\n+        zkUtil.restartServer();\n+\n+        // wait for a reconnect cycle\n+        Thread.sleep(2*timeout);\n+        Assert.assertTrue(\"Client failed to connect zookeeper even it was back.\",\n+                client.getState().isConnected());\n+        try {\n+            client.exists(\"/tmp\", false);\n+        } catch (KeeperException.ConnectionLossException cle) {\n+            Assert.fail(\"Should not throw ConnectionLossException\");\n+        } catch (KeeperException.SessionExpiredException cle) {\n+            Assert.fail(\"Should not throw SessionExpiredException\");\n+        }\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testRetrySyncOperations() throws Exception {\n+        final int timeout = 2000;\n+        ZooKeeperClient client = ZooKeeperClient.createConnectedZooKeeperClient(\n+                zkUtil.getZooKeeperConnectString(), timeout, new HashSet<Watcher>(),\n+                new BoundExponentialBackoffRetryPolicy(timeout, timeout, Integer.MAX_VALUE)\n+                );\n+        Assert.assertTrue(\"Client failed to connect an alive ZooKeeper.\",\n+                client.getState().isConnected());\n+\n+        String path = \"/a\";\n+        byte[] data = \"test\".getBytes();\n+\n+        expireZooKeeperSession(client, timeout);\n+        logger.info(\"Create znode \" + path);\n+        client.create(path, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        logger.info(\"Created znode \" + path);\n+\n+        expireZooKeeperSession(client, timeout);\n+        logger.info(\"Exists znode \" + path);\n+        Stat stat = client.exists(path, false);\n+        Assert.assertNotNull(\"znode doesn't existed\", stat);\n+\n+        expireZooKeeperSession(client, timeout);\n+        logger.info(\"Get data from znode \" + path);\n+        Stat newStat = new Stat();\n+        client.getData(path, false, newStat);\n+        Assert.assertEquals(stat, newStat);\n+\n+        expireZooKeeperSession(client, timeout);\n+        logger.info(\"Create children under znode \" + path);\n+        client.create(path + \"/children\", data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+\n+        expireZooKeeperSession(client, timeout);\n+        List<String> children = client.getChildren(path, false, newStat);\n+        Assert.assertEquals(1, children.size());\n+        Assert.assertEquals(\"children\", children.get(0));\n+        logger.info(\"Get children under znode \" + path);\n+\n+        expireZooKeeperSession(client, timeout);\n+        client.delete(path + \"/children\", -1);\n+        logger.info(\"Delete children from znode \" + path);\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testRetryOnCreatingEphemeralZnode() throws Exception {\n+        final int timeout = 2000;\n+        ZooKeeperClient client = ZooKeeperClient.createConnectedZooKeeperClient(\n+                zkUtil.getZooKeeperConnectString(), timeout, new HashSet<Watcher>(),\n+                new BoundExponentialBackoffRetryPolicy(timeout, timeout, Integer.MAX_VALUE)\n+                );\n+        Assert.assertTrue(\"Client failed to connect an alive ZooKeeper.\",\n+                client.getState().isConnected());\n+\n+        String path = \"/a\";\n+        byte[] data = \"test\".getBytes();\n+\n+        logger.info(\"Create znode \" + path);\n+        client.create(path, data, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+        logger.info(\"Created znode \" + path);\n+\n+        expireZooKeeperSession(client, timeout);\n+        logger.info(\"Create znode w/ new session : \" + path);\n+        client.create(path, data, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+        logger.info(\"Created znode w/ new session : \" + path);\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testRetryAsyncOperations() throws Exception {\n+        final int timeout = 2000;\n+        ZooKeeperClient client = ZooKeeperClient.createConnectedZooKeeperClient(\n+                zkUtil.getZooKeeperConnectString(), timeout, new HashSet<Watcher>(),\n+                new BoundExponentialBackoffRetryPolicy(timeout, timeout, Integer.MAX_VALUE)\n+                );\n+        Assert.assertTrue(\"Client failed to connect an alive ZooKeeper.\",\n+                client.getState().isConnected());\n+\n+        String path = \"/a\";\n+        byte[] data = \"test\".getBytes();\n+\n+        expireZooKeeperSession(client, timeout);\n+        logger.info(\"Create znode \" + path);\n+        final CountDownLatch createLatch = new CountDownLatch(1);\n+        client.create(path, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT,\n+                new StringCallback() {\n+\n+            @Override\n+            public void processResult(int rc, String path, Object ctx, String name) {\n+                if (KeeperException.Code.OK.intValue() == rc) {\n+                    createLatch.countDown();\n+                }\n+            }\n+\n+        }, null);\n+        createLatch.await();\n+        logger.info(\"Created znode \" + path);\n+\n+        expireZooKeeperSession(client, timeout);\n+        logger.info(\"Exists znode \" + path);\n+        final CountDownLatch existsLatch = new CountDownLatch(1);\n+        client.exists(path, false, new StatCallback() {\n+\n+            @Override\n+            public void processResult(int rc, String path, Object ctx, Stat stat) {\n+                if (KeeperException.Code.OK.intValue() == rc) {\n+                    existsLatch.countDown();\n+                }\n+            }\n+\n+        }, null);\n+        existsLatch.await();\n+\n+        expireZooKeeperSession(client, timeout);\n+        final CountDownLatch getLatch = new CountDownLatch(1);\n+        logger.info(\"Get data from znode \" + path);\n+        client.getData(path, false, new DataCallback() {\n+\n+            @Override\n+            public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n+                if (KeeperException.Code.OK.intValue() == rc) {\n+                    getLatch.countDown();\n+                }\n+            }\n+\n+        }, null);\n+        getLatch.await();\n+\n+        expireZooKeeperSession(client, timeout);\n+        logger.info(\"Create children under znode \" + path);\n+        final CountDownLatch createChildLatch = new CountDownLatch(1);\n+        client.create(path + \"/children\", data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT,\n+                new StringCallback() {\n+\n+            @Override\n+            public void processResult(int rc, String path, Object ctx, String name) {\n+                if (KeeperException.Code.OK.intValue() == rc) {\n+                    createChildLatch.countDown();\n+                }\n+            }\n+\n+        }, null);\n+        createChildLatch.await();\n+\n+        expireZooKeeperSession(client, timeout);\n+        final CountDownLatch getChildLatch = new CountDownLatch(1);\n+        final AtomicReference<List<String>> children =\n+                new AtomicReference<List<String>>();\n+        client.getChildren(path, false, new Children2Callback() {\n+\n+            @Override\n+            public void processResult(int rc, String path, Object ctx, List<String> childList, Stat stat) {\n+                if (KeeperException.Code.OK.intValue() == rc) {\n+                    children.set(childList);\n+                    getChildLatch.countDown();\n+                }\n+            }\n+\n+        }, null);\n+        getChildLatch.await();\n+        Assert.assertNotNull(children.get());\n+        Assert.assertEquals(1, children.get().size());\n+        Assert.assertEquals(\"children\", children.get().get(0));\n+        logger.info(\"Get children under znode \" + path);\n+\n+        expireZooKeeperSession(client, timeout);\n+        final CountDownLatch deleteChildLatch = new CountDownLatch(1);\n+        client.delete(path + \"/children\", -1, new VoidCallback() {\n+\n+            @Override\n+            public void processResult(int rc, String path, Object ctx) {\n+                if (KeeperException.Code.OK.intValue() == rc) {\n+                    deleteChildLatch.countDown();\n+                }\n+            }\n+\n+        }, null);\n+        deleteChildLatch.await();\n+        logger.info(\"Delete children from znode \" + path);\n+    }\n+\n+}"}]}

