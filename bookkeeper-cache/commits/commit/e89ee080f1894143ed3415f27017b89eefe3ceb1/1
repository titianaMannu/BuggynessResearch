{"sha":"e89ee080f1894143ed3415f27017b89eefe3ceb1","node_id":"MDY6Q29tbWl0MTU3NTk1NjplODllZTA4MGYxODk0MTQzZWQzNDE1ZjI3MDE3Yjg5ZWVmZTNjZWIx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-03-12T07:21:29Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2015-03-12T07:21:29Z"},"message":"BOOKKEEPER-839: AuditorPeriodicCheckTest timeout (rakeshr via sijie)","tree":{"sha":"6e99e3b2704fbc7be7d00f09b8b8454a6bfb3100","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6e99e3b2704fbc7be7d00f09b8b8454a6bfb3100"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e89ee080f1894143ed3415f27017b89eefe3ceb1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e89ee080f1894143ed3415f27017b89eefe3ceb1","html_url":"https://github.com/apache/bookkeeper/commit/e89ee080f1894143ed3415f27017b89eefe3ceb1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e89ee080f1894143ed3415f27017b89eefe3ceb1/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8b23bd30c5e7388e91f650615671d754a9ee2727","url":"https://api.github.com/repos/apache/bookkeeper/commits/8b23bd30c5e7388e91f650615671d754a9ee2727","html_url":"https://github.com/apache/bookkeeper/commit/8b23bd30c5e7388e91f650615671d754a9ee2727"}],"stats":{"total":16,"additions":9,"deletions":7},"files":[{"sha":"c07b06eb5e08b9f91e75777018f85f14097bbdcd","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/e89ee080f1894143ed3415f27017b89eefe3ceb1/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/e89ee080f1894143ed3415f27017b89eefe3ceb1/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=e89ee080f1894143ed3415f27017b89eefe3ceb1","patch":"@@ -30,6 +30,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-838: ForceWriteThread::run() leaks “logFile.close()” when interrupt comes (zhaijia via sijie)\n \n+      BOOKKEEPER-839: AuditorPeriodicCheckTest timeout (rakeshr via sijie)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-800: Expose whether a ledger is closed or not (ivank)"},{"sha":"a44eff3798948a1a32e3dd5528513d904aaf1f7b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/e89ee080f1894143ed3415f27017b89eefe3ceb1/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/e89ee080f1894143ed3415f27017b89eefe3ceb1/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java?ref=e89ee080f1894143ed3415f27017b89eefe3ceb1","patch":"@@ -210,20 +210,20 @@ public void testIndexCorruption() throws Exception {\n     /**\n      * Test that the period checker will not run when auto replication has been disabled\n      */\n-    @Test(timeout=60000)\n+    @Test(timeout=120000)\n     public void testPeriodicCheckWhenDisabled() throws Exception {\n         LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bsConfs.get(0), zkc);\n         final LedgerUnderreplicationManager underReplicationManager = mFactory.newLedgerUnderreplicationManager();\n-        final int numLedgers = 100;\n-        final int numMsgs = 100;\n+        final int numLedgers = 10;\n+        final int numMsgs = 2;\n         final CountDownLatch completeLatch = new CountDownLatch(numMsgs*numLedgers);\n         final AtomicInteger rc = new AtomicInteger(BKException.Code.OK);\n \n         List<LedgerHandle> lhs = new ArrayList<LedgerHandle>();\n         for (int i = 0; i < numLedgers; i++) {\n             LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"passwd\".getBytes());\n             lhs.add(lh);\n-            for (int j = 0; j < 100; j++) {\n+            for (int j = 0; j < 2; j++) {\n                 lh.asyncAddEntry(\"testdata\".getBytes(), new AddCallback() {\n                         public void addComplete(int rc2, LedgerHandle lh, long entryId, Object ctx) {\n                             if (rc.compareAndSet(BKException.Code.OK, rc2)) {\n@@ -295,18 +295,18 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n     /**\n      * Test that the period check will succeed if a ledger is deleted midway\n      */\n-    @Test(timeout=60000)\n+    @Test(timeout=120000)\n     public void testPeriodicCheckWhenLedgerDeleted() throws Exception {\n         for (AuditorElector e : auditorElectors.values()) {\n             e.shutdown();\n         }\n \n-        final int numLedgers = 100;\n+        final int numLedgers = 10;\n         List<Long> ids = new LinkedList<Long>();\n         for (int i = 0; i < numLedgers; i++) {\n             LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"passwd\".getBytes());\n             ids.add(lh.getId());\n-            for (int j = 0; j < 10; j++) {\n+            for (int j = 0; j < 2; j++) {\n                 lh.addEntry(\"testdata\".getBytes());\n             }\n             lh.close();"}]}

