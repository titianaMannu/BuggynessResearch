{"sha":"eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYjAxYjdjMWE5ZDIyYTU1ZjAxMDdkOGIzYmE2MDgwN2Q0ZmQwNWY0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T13:35:28Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T13:35:28Z"},"message":"BOOKKEEPER-424: Bookie start is failing intermittently when zkclient connection delays (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402146 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71ad2d3a293de7933134b6a0e4a172b0e21bc334","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/71ad2d3a293de7933134b6a0e4a172b0e21bc334"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","html_url":"https://github.com/apache/bookkeeper/commit/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"db1484669db7076d71b0ad890f8867e86a18229f","url":"https://api.github.com/repos/apache/bookkeeper/commits/db1484669db7076d71b0ad890f8867e86a18229f","html_url":"https://github.com/apache/bookkeeper/commit/db1484669db7076d71b0ad890f8867e86a18229f"}],"stats":{"total":169,"additions":81,"deletions":88},"files":[{"sha":"4f65dcf9b8b148a39f4b931a62be007fe65d653d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -96,6 +96,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-436: Journal#rollLog may leak file handler (umamahesh via ivank)\n \n+        BOOKKEEPER-424: Bookie start is failing intermittently when zkclient connection delays (rakeshr via ivank)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"3b7909f6d5cdfeb30f92e0b16fb426347c34ab05","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":14,"deletions":23,"changes":37,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -50,6 +50,8 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -94,7 +96,6 @@\n \n     // ZooKeeper client instance for the Bookie\n     ZooKeeper zk;\n-    private volatile boolean isZkExpired = true;\n \n     // Running flag\n     private volatile boolean running = false;\n@@ -467,9 +468,11 @@ synchronized public void start() {\n         } catch (IOException ioe) {\n             LOG.error(\"Exception while replaying journals, shutting down\", ioe);\n             shutdown(ExitCode.BOOKIE_EXCEPTION);\n+            return;\n         } catch (BookieException be) {\n             LOG.error(\"Exception while replaying journals, shutting down\", be);\n             shutdown(ExitCode.BOOKIE_EXCEPTION);\n+            return;\n         }\n         // start bookie thread\n         super.start();\n@@ -574,10 +577,10 @@ public void unregisterJMX() {\n     /**\n      * Instantiate the ZooKeeper client for the Bookie.\n      */\n-    private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf) throws IOException {\n+    private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf)\n+            throws IOException, InterruptedException, KeeperException {\n         if (conf.getZkServers() == null) {\n             LOG.warn(\"No ZK servers passed to Bookie constructor so BookKeeper clients won't know about this server!\");\n-            isZkExpired = false;\n             return null;\n         }\n         // Create the ZooKeeper client instance\n@@ -715,33 +718,21 @@ public boolean isReadOnly() {\n      * @return zk client instance\n      */\n     private ZooKeeper newZookeeper(final String zkServers,\n-                                   final int sessionTimeout) throws IOException {\n-        ZooKeeper newZk = new ZooKeeper(zkServers, sessionTimeout,\n-        new Watcher() {\n+            final int sessionTimeout) throws IOException, InterruptedException,\n+            KeeperException {\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout()) {\n             @Override\n             public void process(WatchedEvent event) {\n-                // handle session disconnects and expires\n-                if (event.getType()\n-                .equals(Watcher.Event.EventType.None)) {\n-                    if (event.getState().equals(\n-                    Watcher.Event.KeeperState.Disconnected)) {\n-                        LOG.warn(\"ZK client has been disconnected to the ZK server!\");\n-                    } else if (event.getState().equals(\n-                    Watcher.Event.KeeperState.SyncConnected)) {\n-                        LOG.info(\"ZK client has been reconnected to the ZK server!\");\n-                    }\n-                }\n                 // Check for expired connection.\n-                if (event.getState().equals(\n-                Watcher.Event.KeeperState.Expired)) {\n+                if (event.getState().equals(Watcher.Event.KeeperState.Expired)) {\n                     LOG.error(\"ZK client connection to the ZK server has expired!\");\n-                    isZkExpired = true;\n                     shutdown(ExitCode.ZK_EXPIRED);\n+                } else {\n+                    super.process(event);\n                 }\n             }\n-        });\n-        isZkExpired = false;\n-        return newZk;\n+        };\n+        return ZkUtils.createConnectedZookeeperClient(zkServers, w);\n     }\n \n     public boolean isRunning() {"},{"sha":"09c248060acbd816d50f8899adc713ce1cb93793","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":5,"deletions":18,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -34,6 +34,8 @@\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -120,24 +122,9 @@ public BookKeeper(String servers) throws IOException, InterruptedException,\n     public BookKeeper(final ClientConfiguration conf)\n             throws IOException, InterruptedException, KeeperException {\n         this.conf = conf;\n-\n-        final CountDownLatch zkConnectLatch = new CountDownLatch(1);\n-        this.zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(),\n-                new Watcher() {\n-                    @Override\n-                    public void process(WatchedEvent event) {\n-                        // countdown the latch on all events, even if we haven't\n-                        // successfully connected.\n-                        zkConnectLatch.countDown();\n-\n-                        // TODO: handle session disconnects and expires\n-                        LOG.debug(\"Process: {} {}\", event.getType(), event.getPath());\n-                    }\n-                });\n-        if (!zkConnectLatch.await(conf.getZkTimeout(), TimeUnit.MILLISECONDS)\n-            || !zk.getState().isConnected()) {\n-            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n-        }\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n+        this.zk = ZkUtils\n+                .createConnectedZookeeperClient(conf.getZkServers(), w);\n \n         this.channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                                 Executors.newCachedThreadPool());"},{"sha":"21e55a4d9ee52ad80b19062b95a0980ba888d547","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -40,6 +40,7 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n@@ -118,8 +119,8 @@ public BookKeeperAdmin(String zkServers) throws IOException, InterruptedExceptio\n      */\n     public BookKeeperAdmin(ClientConfiguration conf) throws IOException, InterruptedException, KeeperException {\n         // Create the ZooKeeper client instance\n-        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(),\n-                conf.getZkTimeout());\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n+        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n         // Create the bookie path\n         bookiesPath = conf.getZkAvailableBookiesPath();\n         // Create the BookKeeper client instance\n@@ -693,9 +694,9 @@ public void processResult(int rc, String s, Object obj) {\n      */\n     public static boolean format(ClientConfiguration conf,\n             boolean isInteractive, boolean force) throws Exception {\n-\n-        ZooKeeper zkc = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(),\n-                conf.getZkTimeout());\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n+        ZooKeeper zkc = ZkUtils.createConnectedZookeeperClient(\n+                conf.getZkServers(), w);\n         BookKeeper bkc = null;\n         try {\n             boolean ledgerRootExists = null != zkc.exists("},{"sha":"3a3bbd9f1760748085389496183b2de1e86847ba","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -32,6 +32,7 @@\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n@@ -64,20 +65,20 @@ public AutoRecoveryMain(ServerConfiguration conf) throws IOException,\n             InterruptedException, KeeperException, UnavailableException,\n             CompatibilityException {\n         this.conf = conf;\n-        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(),\n-                conf.getZkTimeout());\n-        Watcher watcher = new Watcher() {\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout()) {\n             @Override\n             public void process(WatchedEvent event) {\n                 // Check for expired connection.\n                 if (event.getState().equals(Watcher.Event.KeeperState.Expired)) {\n                     LOG.error(\"ZK client connection to the\"\n                             + \" ZK server has expired!\");\n                     shutdown(ExitCode.ZK_EXPIRED);\n+                } else {\n+                    super.process(event);\n                 }\n             }\n         };\n-        zk.register(watcher);\n+        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n         auditorElector = new AuditorElector(\n                 getMyBookieAddress(conf).toString(), conf, zk);\n         replicationWorker = new ReplicationWorker(zk, conf,"},{"sha":"407345040d0fe466c1d232e3e1388907567f2d61","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":9,"deletions":31,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -24,28 +24,20 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n \n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.AsyncCallback.StringCallback;\n import org.apache.zookeeper.KeeperException.Code;\n-import org.apache.zookeeper.Watcher;\n-import org.apache.zookeeper.Watcher.Event.EventType;\n-import org.apache.zookeeper.Watcher.Event.KeeperState;\n import org.apache.zookeeper.data.ACL;\n import org.apache.zookeeper.ZooKeeper;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * Provided utilites for zookeeper access, etc.\n  */\n public class ZkUtils {\n-    private static final Logger LOG = LoggerFactory.getLogger(ZkUtils.class);\n \n     /**\n      * Create zookeeper path recursively\n@@ -111,31 +103,17 @@ public void processResult(int rc, String path, Object ctx, String name) {\n      * @param timeout\n      *            Session timeout.\n      */\n-    public static ZooKeeper createConnectedZookeeperClient(String servers, int timeout)\n-            throws IOException, InterruptedException, KeeperException {\n+    public static ZooKeeper createConnectedZookeeperClient(String servers,\n+            ZooKeeperWatcherBase w) throws IOException, InterruptedException,\n+            KeeperException {\n         if (servers == null || servers.isEmpty()) {\n             throw new IllegalArgumentException(\"servers cannot be empty\");\n         }\n-        final CountDownLatch zkConnectLatch = new CountDownLatch(1);\n-        Watcher connectWatcher = new Watcher() {\n-\n-            @Override\n-            public void process(WatchedEvent event) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Process: \" + event.getType() + \" \"\n-                            + event.getPath());\n-                }\n-                if (event.getType().equals(EventType.None)\n-                        && event.getState() == KeeperState.SyncConnected) {\n-                    if (zkConnectLatch.getCount() > 0) {\n-                        zkConnectLatch.countDown();\n-                    }\n-                }\n-            }\n-        };\n-        final ZooKeeper newZk = new ZooKeeper(servers, timeout, connectWatcher);\n-        if (!zkConnectLatch.await(timeout, TimeUnit.MILLISECONDS)\n-                || !newZk.getState().isConnected()) {\n+        final ZooKeeper newZk = new ZooKeeper(servers, w.getZkSessionTimeOut(),\n+                w);\n+        w.waitForConnection();\n+        // Re-checking zookeeper connection status\n+        if (!newZk.getState().isConnected()) {\n             throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n         }\n         return newZk;"},{"sha":"5d0a56c10891ffd74d02ef274f15df3b9b22fade","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":29,"deletions":3,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -36,6 +36,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n+import org.apache.commons.io.FileUtils;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n@@ -88,7 +89,7 @@ void testRegisterBookie(int port) throws IOException {\n      * timeout when previous reg node exists in zk. On zNode delete event,\n      * should continue startup\n      */\n-    @Test\n+    @Test(timeout = 20000)\n     public void testBookieRegistration() throws Exception {\n         File tmpDir = File.createTempFile(\"bookie\", \"test\");\n         tmpDir.delete();\n@@ -154,7 +155,7 @@ public void run() {\n      * KeeperException.NodeExistsException if the znode still exists even after\n      * the zk session timeout.\n      */\n-    @Test\n+    @Test(timeout = 30000)\n     public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n         File tmpDir = File.createTempFile(\"bookie\", \"test\");\n         tmpDir.delete();\n@@ -209,7 +210,7 @@ public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n      * Verify duplicate bookie server startup. Should throw\n      * java.net.BindException if already BK server is running\n      */\n-    @Test\n+    @Test(timeout = 20000)\n     public void testDuplicateBookieServerStartup() throws Exception {\n         File tmpDir = File.createTempFile(\"bookie\", \"test\");\n         tmpDir.delete();\n@@ -234,6 +235,31 @@ public void testDuplicateBookieServerStartup() throws Exception {\n         }\n     }\n \n+    /**\n+     * Verify bookie start behaviour when ZK Server is not running.\n+     */\n+    @Test(timeout = 20000)\n+    public void testStartBookieWithoutZKServer() throws Exception {\n+        zkutil.killServer();\n+\n+        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+\n+        final ServerConfiguration conf = new ServerConfiguration()\n+                .setZkServers(zkutil.getZooKeeperConnectString())\n+                .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n+                .setLedgerDirNames(new String[] { tmpDir.getPath() });\n+        try {\n+            new Bookie(conf);\n+            fail(\"Should throw ConnectionLossException as ZKServer is not running!\");\n+        } catch (KeeperException.ConnectionLossException e) {\n+            // expected behaviour\n+        } finally {\n+            FileUtils.deleteDirectory(tmpDir);\n+        }\n+    }\n+\n     private void createNewZKClient() throws Exception {\n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");"},{"sha":"17fc080004fc3f9270da668b8eab3b5a561241e4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -52,6 +52,7 @@\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.lang.StringUtils;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n@@ -94,10 +95,12 @@ public void setupZooKeeper() throws Exception {\n \n         executor = Executors.newCachedThreadPool();\n \n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n         zkc1 = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), 10000);\n+                zkUtil.getZooKeeperConnectString(), w);\n+        w = new ZooKeeperWatcherBase(10000);\n         zkc2 = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), 10000);\n+                zkUtil.getZooKeeperConnectString(), w);\n         lmf1 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc1);\n         lmf2 = LedgerManagerFactory.newLedgerManagerFactory(conf, zkc2);\n         basePath = conf.getZkLedgersRootPath() + '/'"},{"sha":"fdefebf3a2b5250d8ea1a6a9b281e664ee2a9bf6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -39,6 +39,7 @@\n import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooKeeper;\n import org.junit.Test;\n@@ -224,8 +225,9 @@ public void test2RWsShouldCompeteForReplicationOf2FragmentsAndCompleteReplicatio\n         InetSocketAddress newBkAddr2 = new InetSocketAddress(InetAddress\n                 .getLocalHost().getHostAddress(), startNewBookie2);\n         LOG.info(\"New Bookie addr :\" + newBkAddr2);\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n         ZooKeeper zkc1 = ZkUtils.createConnectedZookeeperClient(\n-                zkUtil.getZooKeeperConnectString(), 10000);\n+                zkUtil.getZooKeeperConnectString(), w);\n         ReplicationWorker rw2 = new ReplicationWorker(zkc1, baseConf,\n                 newBkAddr2);\n         rw1.start();"},{"sha":"238f77f69a126bfac5cfbc2727c15e76fc561486","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","patch":"@@ -27,6 +27,7 @@\n import java.net.InetSocketAddress;\n \n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n \n import java.util.concurrent.CountDownLatch;\n@@ -90,8 +91,9 @@ public void startServer() throws Exception {\n \n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n         zkc = ZkUtils.createConnectedZookeeperClient(\n-                getZooKeeperConnectString(), 10000);\n+                getZooKeeperConnectString(), w);\n \n         // initialize the zk client with values\n         zkc.create(\"/ledgers\", new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);"}]}

