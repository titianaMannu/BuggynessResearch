{"sha":"eb7066a02a50e2b15e66dfd4e99706ecf79454e6","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYjcwNjZhMDJhNTBlMmIxNWU2NmRmZDRlOTk3MDZlY2Y3OTQ1NGU2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-11-09T18:49:55Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-11-09T18:49:55Z"},"message":"BOOKKEEPER-699: Codahale metrics implementation of stats API (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1540366 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6197d9308d96c8f4dfdfd38ac387a5d0454fee6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e6197d9308d96c8f4dfdfd38ac387a5d0454fee6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/eb7066a02a50e2b15e66dfd4e99706ecf79454e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/eb7066a02a50e2b15e66dfd4e99706ecf79454e6","html_url":"https://github.com/apache/bookkeeper/commit/eb7066a02a50e2b15e66dfd4e99706ecf79454e6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea4a13a45d8d2102f5f0098e404d3de66777a39b","url":"https://api.github.com/repos/apache/bookkeeper/commits/ea4a13a45d8d2102f5f0098e404d3de66777a39b","html_url":"https://github.com/apache/bookkeeper/commit/ea4a13a45d8d2102f5f0098e404d3de66777a39b"}],"stats":{"total":359,"additions":359,"deletions":0},"files":[{"sha":"a99c1099e52587b4762b352763d92cd28c6a8014","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=eb7066a02a50e2b15e66dfd4e99706ecf79454e6","patch":"@@ -190,6 +190,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-698: Bookie client closure is not considering timeoutExecutor (rakesh via sijie)\n \n+      BOOKKEEPER-699: Codahale metrics implementation of stats API (ivank via sijie)\n+\n     NEW FEATURE:\n \n       BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj)"},{"sha":"79662ca9102bed684095ee9167c3d014deff590d","filename":"bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/apache/bookkeeper/blob/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/pom.xml?ref=eb7066a02a50e2b15e66dfd4e99706ecf79454e6","patch":"@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>bookkeeper</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.3.0-SNAPSHOT</version>\n+    <relativePath>../..</relativePath>\n+  </parent>\n+  <groupId>org.apache.bookkeeper.stats</groupId>\n+  <artifactId>codahale-metrics-provider</artifactId>\n+  <name>Stats provider for codahale metrics</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.libdir>${basedir}/lib</project.libdir>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper.stats</groupId>\n+      <artifactId>bookkeeper-stats-api</artifactId>\n+      <version>${project.parent.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.codahale.metrics</groupId>\n+      <artifactId>metrics-core</artifactId>\n+      <version>3.0.1</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.codahale.metrics</groupId>\n+      <artifactId>metrics-jvm</artifactId>\n+      <version>3.0.1</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.codahale.metrics</groupId>\n+      <artifactId>metrics-graphite</artifactId>\n+      <version>3.0.1</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+      <version>13.0.1</version>\n+    </dependency>\n+  </dependencies>\n+</project>"},{"sha":"4af32e0cd8698c384b374d28831e9b81bd73c45f","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","status":"added","additions":127,"deletions":0,"changes":127,"blob_url":"https://github.com/apache/bookkeeper/blob/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleMetricsProvider.java?ref=eb7066a02a50e2b15e66dfd4e99706ecf79454e6","patch":"@@ -0,0 +1,127 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import java.net.InetSocketAddress;\n+\n+import com.codahale.metrics.CsvReporter;\n+import com.codahale.metrics.MetricFilter;\n+import com.codahale.metrics.MetricRegistry;\n+import com.codahale.metrics.ScheduledReporter;\n+import com.codahale.metrics.Slf4jReporter;\n+import com.google.common.base.Strings;\n+import com.google.common.net.HostAndPort;\n+import static com.codahale.metrics.MetricRegistry.name;\n+import com.codahale.metrics.graphite.Graphite;\n+import com.codahale.metrics.graphite.GraphiteReporter;\n+\n+import com.codahale.metrics.jvm.GarbageCollectorMetricSet;\n+import com.codahale.metrics.jvm.MemoryUsageGaugeSet;\n+\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.stats.StatsProvider;\n+import org.apache.commons.configuration.Configuration;\n+\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.concurrent.TimeUnit;\n+\n+import java.io.File;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CodahaleMetricsProvider implements StatsProvider {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(CodahaleMetricsProvider.class);\n+\n+    MetricRegistry metrics = null;\n+    List<ScheduledReporter> reporters = new ArrayList<ScheduledReporter>();\n+\n+    synchronized void initIfNecessary() {\n+        if (metrics == null) {\n+            metrics = new MetricRegistry();\n+            metrics.registerAll(new MemoryUsageGaugeSet());\n+            metrics.registerAll(new GarbageCollectorMetricSet());\n+        }\n+    }\n+\n+    @Override\n+    public void start(Configuration conf) {\n+        initIfNecessary();\n+\n+        int metricsOutputFrequency = conf.getInt(\"codahaleStatsOutputFrequencySeconds\", 60);\n+        String prefix = conf.getString(\"codahaleStatsPrefix\", \"\");\n+        String graphiteHost = conf.getString(\"codahaleStatsGraphiteEndpoint\");\n+        String csvDir = conf.getString(\"codahaleStatsCSVEndpoint\");\n+        String slf4jCat = conf.getString(\"codahaleStatsSlf4jEndpoint\");\n+\n+        if (!Strings.isNullOrEmpty(graphiteHost)) {\n+            LOG.info(\"Configuring stats with graphite\");\n+            HostAndPort addr = HostAndPort.fromString(graphiteHost);\n+            final Graphite graphite = new Graphite(\n+                    new InetSocketAddress(addr.getHostText(), addr.getPort()));\n+            reporters.add(GraphiteReporter.forRegistry(metrics)\n+                          .prefixedWith(prefix)\n+                          .convertRatesTo(TimeUnit.SECONDS)\n+                          .convertDurationsTo(TimeUnit.MILLISECONDS)\n+                          .filter(MetricFilter.ALL)\n+                          .build(graphite));\n+        }\n+        if (!Strings.isNullOrEmpty(csvDir)) {\n+            // NOTE: 1/ metrics output files are exclusive to a given process\n+            // 2/ the output directory must exist\n+            // 3/ if output files already exist they are not overwritten and there is no metrics output\n+            File outdir;\n+            if (Strings.isNullOrEmpty(prefix)) {\n+                outdir = new File(csvDir, prefix);\n+            } else {\n+                outdir = new File(csvDir);\n+            }\n+            LOG.info(\"Configuring stats with csv output to directory [{}]\", outdir.getAbsolutePath());\n+            reporters.add(CsvReporter.forRegistry(metrics)\n+                          .convertRatesTo(TimeUnit.SECONDS)\n+                          .convertDurationsTo(TimeUnit.MILLISECONDS)\n+                          .build(outdir));\n+        }\n+        if (!Strings.isNullOrEmpty(slf4jCat)) {\n+            LOG.info(\"Configuring stats with slf4j\");\n+            reporters.add(Slf4jReporter.forRegistry(metrics)\n+                          .outputTo(LoggerFactory.getLogger(slf4jCat))\n+                          .convertRatesTo(TimeUnit.SECONDS)\n+                          .convertDurationsTo(TimeUnit.MILLISECONDS)\n+                          .build());\n+        }\n+        for (ScheduledReporter r : reporters) {\n+            r.start(metricsOutputFrequency, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    @Override\n+    public void stop() {\n+        for (ScheduledReporter r : reporters) {\n+            r.report();\n+            r.stop();\n+        }\n+    }\n+\n+    @Override\n+    public StatsLogger getStatsLogger(String name) {\n+        initIfNecessary();\n+        return new CodahaleStatsLogger(metrics, name);\n+    }\n+}"},{"sha":"dbb79b62ba43c3dc349cb51a3002ceb407e222d5","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/apache/bookkeeper/blob/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleOpStatsLogger.java?ref=eb7066a02a50e2b15e66dfd4e99706ecf79454e6","patch":"@@ -0,0 +1,68 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import org.apache.bookkeeper.stats.OpStatsData;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+\n+import com.codahale.metrics.Timer;\n+import com.codahale.metrics.Snapshot;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+class CodahaleOpStatsLogger implements OpStatsLogger {\n+    final Timer success;\n+    final Timer fail;\n+\n+    CodahaleOpStatsLogger(Timer success, Timer fail) {\n+        this.success = success;\n+        this.fail = fail;\n+    }\n+\n+    // OpStatsLogger functions\n+    public void registerFailedEvent(long eventLatencyMillis) {\n+        fail.update(eventLatencyMillis, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public void registerSuccessfulEvent(long eventLatencyMillis) {\n+        success.update(eventLatencyMillis, TimeUnit.MILLISECONDS);\n+    }\n+\n+    public synchronized void clear() {\n+        // can't clear a timer\n+    }\n+\n+    /**\n+     * This function should go away soon (hopefully).\n+     */\n+    public synchronized OpStatsData toOpStatsData() {\n+        long numFailed = fail.getCount();\n+        long numSuccess = success.getCount();\n+        Snapshot s = success.getSnapshot();\n+        double avgLatencyMillis = s.getMean();\n+\n+        double[] default_percentiles = {10, 50, 90, 99, 99.9, 99.99};\n+        long[] latenciesMillis = new long[default_percentiles.length];\n+        Arrays.fill(latenciesMillis, Long.MAX_VALUE);\n+        for (int i = 0; i < default_percentiles.length; i++) {\n+            latenciesMillis[i] = (long)s.getValue(default_percentiles[i]);\n+        }\n+        return new OpStatsData(numSuccess, numFailed, avgLatencyMillis, latenciesMillis);\n+    }\n+}"},{"sha":"156290b678ec51bf8151c74e15c27131775d3cd0","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","status":"added","additions":99,"deletions":0,"changes":99,"blob_url":"https://github.com/apache/bookkeeper/blob/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java?ref=eb7066a02a50e2b15e66dfd4e99706ecf79454e6","patch":"@@ -0,0 +1,99 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import com.codahale.metrics.Timer;\n+import com.codahale.metrics.MetricRegistry;\n+import static com.codahale.metrics.MetricRegistry.name;\n+\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+\n+public class CodahaleStatsLogger implements StatsLogger {\n+    protected final String basename;\n+    final MetricRegistry metrics;\n+\n+    CodahaleStatsLogger(MetricRegistry metrics, String basename) {\n+        this.metrics = metrics;\n+        this.basename = basename;\n+    }\n+\n+    @Override\n+    public OpStatsLogger getOpStatsLogger(String statName) {\n+        Timer success = metrics.timer(name(basename, statName));\n+        Timer failure = metrics.timer(name(basename, statName+\"-fail\"));\n+        return new CodahaleOpStatsLogger(success, failure);\n+    }\n+\n+    @Override\n+    public Counter getCounter(String statName) {\n+        final com.codahale.metrics.Counter c = metrics.counter(name(basename, statName));\n+        return new Counter() {\n+            @Override\n+            public synchronized void clear() {\n+                long cur = c.getCount();\n+                c.dec(cur);\n+            }\n+\n+            @Override\n+            public Long get() {\n+                return c.getCount();\n+            }\n+\n+            @Override\n+            public void inc() {\n+                c.inc();\n+            }\n+\n+            @Override\n+            public void dec() {\n+                c.dec();\n+            }\n+\n+            @Override\n+            public void add(long delta) {\n+                c.inc(delta);\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public <T extends Number> void registerGauge(final String statName, final Gauge<T> gauge) {\n+        String metricName = name(basename, statName);\n+        metrics.remove(metricName);\n+\n+        metrics.register(metricName, new com.codahale.metrics.Gauge<T>() {\n+                @Override\n+                public T getValue() {\n+                    return gauge.getSample();\n+                }\n+            });\n+    }\n+\n+    @Override\n+    public StatsLogger scope(String scope) {\n+        String scopeName;\n+        if (0 == basename.length()) {\n+            scopeName = scope;\n+        } else {\n+            scopeName = name(basename, scope);\n+        }\n+        return new CodahaleStatsLogger(metrics, scopeName);\n+    }\n+}"},{"sha":"2c0b81fa893424e5f15e1b0f18d4188b79e5cd12","filename":"bookkeeper-stats-providers/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/eb7066a02a50e2b15e66dfd4e99706ecf79454e6/bookkeeper-stats-providers/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/pom.xml?ref=eb7066a02a50e2b15e66dfd4e99706ecf79454e6","patch":"@@ -33,6 +33,7 @@\n   <modules>\n     <module>twitter-science-provider</module>\n     <module>twitter-ostrich-provider</module>\n+    <module>codahale-metrics-provider</module>\n   </modules>\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>"}]}

