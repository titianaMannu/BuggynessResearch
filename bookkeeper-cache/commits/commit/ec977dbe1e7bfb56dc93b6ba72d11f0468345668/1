{"sha":"ec977dbe1e7bfb56dc93b6ba72d11f0468345668","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYzk3N2RiZTFlN2JmYjU2ZGM5M2I2YmE3MmQxMWYwNDY4MzQ1NjY4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-14T13:42:11Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-14T13:42:11Z"},"message":"BOOKKEEPER-32: Clean up LOG.debug statements (Stu Hood via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1384782 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d822e090dd5fcf8a310d3cca57c46a0c1abb4a7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2d822e090dd5fcf8a310d3cca57c46a0c1abb4a7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ec977dbe1e7bfb56dc93b6ba72d11f0468345668","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ec977dbe1e7bfb56dc93b6ba72d11f0468345668","html_url":"https://github.com/apache/bookkeeper/commit/ec977dbe1e7bfb56dc93b6ba72d11f0468345668","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4f2b11213baf8551ef778599b14a6fc17d95f21d","url":"https://api.github.com/repos/apache/bookkeeper/commits/4f2b11213baf8551ef778599b14a6fc17d95f21d","html_url":"https://github.com/apache/bookkeeper/commit/4f2b11213baf8551ef778599b14a6fc17d95f21d"}],"stats":{"total":393,"additions":147,"deletions":246},"files":[{"sha":"7e63723020f160ae999008e5f657c78f1dd02132","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -30,6 +30,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-338: Create Version.NEW and Version.ANY static instances of Version so that were not passing around nulls (sijie via ivank)\n \n+      BOOKKEEPER-32: Clean up LOG.debug statements (Stu Hood via sijie)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)"},{"sha":"c608361200a558aa132cda32b1750cce95e29ee5","filename":"bookkeeper-server/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -82,6 +82,11 @@\n       <artifactId>commons-cli</artifactId>\n       <version>1.2</version>\n     </dependency>\n+    <dependency>\n+      <groupId>commons-codec</groupId>\n+      <artifactId>commons-codec</artifactId>\n+      <version>1.6</version>\n+    </dependency>\n     <dependency>\n       <groupId>commons-io</groupId>\n       <artifactId>commons-io</artifactId>"},{"sha":"9a62264ee877c0e0ce2b021827debbd45280cfd3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -137,8 +137,10 @@ public long getEntry() {\n         @Override\n         public void writeComplete(int rc, long ledgerId, long entryId,\n                                   InetSocketAddress addr, Object ctx) {\n-            LOG.debug(\"Finished writing entry {} @ ledger {} for {} : {}\",\n-                      new Object[] { entryId, ledgerId, addr, rc });\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Finished writing entry {} @ ledger {} for {} : {}\",\n+                          new Object[] { entryId, ledgerId, addr, rc });\n+            }\n         }\n     }\n \n@@ -173,9 +175,7 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n         public SyncThread(ServerConfiguration conf) {\n             super(\"SyncThread\");\n             flushInterval = conf.getFlushInterval();\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Flush Interval : \" + flushInterval);\n-            }\n+            LOG.debug(\"Flush Interval : {}\", flushInterval);\n         }\n         @Override\n         public void run() {\n@@ -429,7 +429,7 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n \n     synchronized public void start() {\n         setDaemon(true);\n-        LOG.debug(\"I'm starting a bookie with journal directory \" + journalDirectory.getName());\n+        LOG.debug(\"I'm starting a bookie with journal directory {}\", journalDirectory.getName());\n         // replay journals\n         try {\n             readJournal();\n@@ -732,9 +732,7 @@ private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCa\n         long entryId = handle.addEntry(entry);\n \n         entry.rewind();\n-        if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Adding \" + entryId + \"@\" + ledgerId);\n-        }\n+        LOG.trace(\"Adding {}@{}\", entryId, ledgerId);\n         journal.logAddEntry(entry, cb, ctx);\n     }\n \n@@ -785,9 +783,7 @@ public void fenceLedger(long ledgerId, byte[] masterKey) throws IOException, Boo\n     public ByteBuffer readEntry(long ledgerId, long entryId)\n             throws IOException, NoLedgerException {\n         LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n-        if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Reading \" + entryId + \"@\" + ledgerId);\n-        }\n+        LOG.trace(\"Reading {}@{}\", entryId, ledgerId);\n         return handle.readEntry(entryId);\n     }\n "},{"sha":"cecb74a4e1097e6b5936c128f1baef95c2162b8d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -291,10 +291,7 @@ public int compare(EntryLogMetadata m1, EntryLogMetadata m2) {\n             if (meta.getUsage() >= threshold) {\n                 break;\n             }\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Compacting entry log \" + meta.entryLogId + \" below threshold \"\n-                        + threshold + \".\");\n-            }\n+            LOG.debug(\"Compacting entry log {} below threshold {}.\", meta.entryLogId, threshold);\n             compactEntryLog(meta.entryLogId);\n             if (!running) { // if gc thread is not running, stop compaction\n                 return;"},{"sha":"ef4793afe88e57003e3672ad0c455a2f90c38c39","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -119,9 +119,7 @@ synchronized void rollLog() {\n             // persisted to disk (both index & entry logger)\n             bb.putLong(lastMark.getTxnLogId());\n             bb.putLong(lastMark.getTxnLogPosition());\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"RollLog to persist last marked log : \" + lastMark);\n-            }\n+            LOG.debug(\"RollLog to persist last marked log : {}\", lastMark);\n             for(File dir: ledgerDirectories) {\n                 File file = new File(dir, \"lastMark\");\n                 try {\n@@ -265,9 +263,7 @@ public Journal(ServerConfiguration conf) {\n \n         // read last log mark\n         lastLogMark.readLog();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Last Log Mark : \" + lastLogMark);\n-        }\n+        LOG.debug(\"Last Log Mark : {}\", lastLogMark);\n     }\n \n     LastLogMark getLastLogMark() {\n@@ -418,9 +414,7 @@ public boolean accept(long journalId) {\n                 throw new IOException(\"Recovery log \" + markedLogId + \" is missing\");\n             }\n         }\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Try to relay journal logs : \" + logs);\n-        }\n+        LOG.debug(\"Try to relay journal logs : {}\", logs);\n         // TODO: When reading in the journal logs that need to be synced, we\n         // should use BufferedChannels instead to minimize the amount of\n         // system calls done."},{"sha":"3c394044350cb5f52392446deb371deee755395b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -257,9 +257,7 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n                     lf = new File(dir, ledgerName);\n                     // A new ledger index file has been created for this Bookie.\n                     // Add this new ledger to the set of active ledgers.\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"New ledger index file created for ledgerId: \" + ledger);\n-                    }\n+                    LOG.debug(\"New ledger index file created for ledgerId: {}\", ledger);\n                     activeLedgerManager.addActiveLedger(ledger, true);\n                 }\n                 evictFileInfoIfNecessary();\n@@ -300,7 +298,7 @@ public void flushLedger(boolean doAll) throws IOException {\n                 synchronized(this) {\n                     for(Long l: pages.keySet()) {\n                         if (LOG.isTraceEnabled()) {\n-                            LOG.trace(\"Adding \" + Long.toHexString(l) + \" to dirty pages\");\n+                            LOG.trace(\"Adding {} to dirty pages\", Long.toHexString(l));\n                         }\n                         dirtyLedgers.add(l);\n                     }\n@@ -347,9 +345,7 @@ private void flushLedger(long l) throws IOException {\n             for(Map.Entry<Long, LedgerEntryPage> entry: pageMap.entrySet()) {\n                 LedgerEntryPage lep = entry.getValue();\n                 if (lep.isClean()) {\n-                    if (LOG.isTraceEnabled()) {\n-                        LOG.trace(\"Page is clean \" + lep);\n-                    }\n+                    LOG.trace(\"Page is clean {}\", lep);\n                     continue;\n                 }\n                 firstEntryList.add(lep.getFirstEntry());\n@@ -419,7 +415,7 @@ private void writeBuffers(Long ledger,\n                               List<LedgerEntryPage> entries, FileInfo fi,\n                               int start, int count) throws IOException {\n         if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Writing \" + count + \" buffers of \" + Long.toHexString(ledger));\n+            LOG.trace(\"Writing {} buffers of {}\", count, Long.toHexString(ledger));\n         }\n         if (count == 0) {\n             return;\n@@ -613,8 +609,7 @@ private void getActiveLedgers() {\n      */\n     @Override\n     public void deleteLedger(long ledgerId) throws IOException {\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Deleting ledgerId: \" + ledgerId);\n+        LOG.debug(\"Deleting ledgerId: {}\", ledgerId);\n \n         // remove pages first to avoid page flushed when deleting file info\n         synchronized(this) {"},{"sha":"9edd685e940b4edc7456cc57e2a8a895eeda4644","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -622,7 +622,7 @@ public void openComplete(int rc, LedgerHandle lh, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setLh(lh);\n             \n-            LOG.debug(\"Open complete: \" + rc);\n+            LOG.debug(\"Open complete: {}\", rc);\n             \n             counter.setrc(rc);\n             counter.dec();"},{"sha":"850fde5436eabdc23b55ce979b23e13460176a7e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -474,9 +474,7 @@ private InetSocketAddress getNewBookie(final List<InetSocketAddress> bookiesAlre\n      */\n     private void recoverLedger(final InetSocketAddress bookieSrc, final long lId,\n                                final AsyncCallback.VoidCallback ledgerIterCb, final List<InetSocketAddress> availableBookies) {\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Recovering ledger : \" + lId);\n-        }\n+        LOG.debug(\"Recovering ledger : {}\", lId);\n \n         asyncOpenLedgerNoRecovery(lId, new OpenCallback() {\n             @Override"},{"sha":"bc16fa59233fd324832d0495655dc9d52b2f1887","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -206,9 +206,7 @@ DistributionSchedule getDistributionSchedule() {\n     }\n \n     void writeLedgerConfig(GenericCallback<Void> writeCb) {\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Writing metadata to ledger manager: \" + this.ledgerId + \", \" + metadata.getVersion());\n-        }\n+        LOG.debug(\"Writing metadata to ledger manager: {}, {}\", this.ledgerId, metadata.getVersion());\n \n         bk.getLedgerManager().writeLedgerMetadata(ledgerId, metadata, writeCb);\n     }\n@@ -665,10 +663,7 @@ void sendAddSuccessCallbacks() {\n     void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n         InetSocketAddress newBookie;\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Handling failure of bookie: \" + addr + \" index: \"\n-                      + bookieIndex);\n-        }\n+        LOG.debug(\"Handling failure of bookie: {} index: {}\", addr, bookieIndex);\n         final ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>();\n         blockAddCompletions.incrementAndGet();\n         final long newEnsembleStartEntry = lastAddConfirmed + 1;"},{"sha":"de695ece5b09a545aaa68daee4f2ab3468e13f17","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -243,9 +243,7 @@ long getNextEnsembleChange(long entryId) {\n         StringBuilder s = new StringBuilder();\n         s.append(VERSION_KEY).append(tSplitter).append(CURRENT_METADATA_FORMAT_VERSION).append(lSplitter);\n         s.append(TextFormat.printToString(builder.build()));\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Serialized config: \" + s.toString());\n-        }\n+        LOG.debug(\"Serialized config: {}\", s);\n         return s.toString().getBytes();\n     }\n \n@@ -268,9 +266,7 @@ long getNextEnsembleChange(long entryId) {\n             s.append(lSplitter).append(getLastEntryId()).append(tSplitter).append(closed);\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Serialized config: \" + s.toString());\n-        }\n+        LOG.debug(\"Serialized config: {}\", s);\n \n         return s.toString().getBytes();\n     }\n@@ -292,9 +288,7 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version) throws I\n \n         String config = new String(bytes);\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Parsing Config: \" + config);\n-        }\n+        LOG.debug(\"Parsing Config: {}\", config);\n         BufferedReader reader = new BufferedReader(new StringReader(config));\n         String versionLine = reader.readLine();\n         if (versionLine == null) {"},{"sha":"293c0e5a32ae5127ebbe74753a970cc62a91c628","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -121,7 +121,7 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n                         cb.operationComplete(BKException.Code.ZKException, null);\n                     } else {\n                         cb.operationComplete(BKException.Code.OK, null);\n-                        LOG.debug(\"After closing length is: \" + lh.getLength());\n+                        LOG.debug(\"After closing length is: {}\", lh.getLength());\n                     }\n                 }\n                 }, null, BKException.Code.LedgerClosedException);"},{"sha":"c8e814c4d3bd1d2267c400148510309951f71426","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -74,10 +74,7 @@ public void initiate() throws InterruptedException {\n \n         ArrayList<InetSocketAddress> ensemble = null;\n         do {\n-\n-            if(LOG.isDebugEnabled()) {\n-                LOG.debug(\"Acquiring lock: \" + i);\n-            }\n+            LOG.debug(\"Acquiring lock: {}\", i);\n \n             lh.opCounterSem.acquire();\n \n@@ -162,9 +159,7 @@ public void readEntryComplete(int rc, long ledgerId, final long entryId, final C\n             submitCallback(BKException.Code.OK);\n         }\n \n-        if(LOG.isDebugEnabled()) {\n-            LOG.debug(\"Releasing lock: \" + entryId);\n-        }\n+        LOG.debug(\"Releasing lock: {}\", entryId);\n \n         lh.opCounterSem.release();\n "},{"sha":"a07755635d4c2ca96856e611dcb503c75790a9f3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -89,7 +89,8 @@ public synchronized void readEntryComplete(final int rc, final long ledgerId, fi\n             } catch (BKDigestMatchException e) {\n                 // Too bad, this bookie didn't give us a valid answer, we\n                 // still might be able to recover though so continue\n-                LOG.error(\"Mac mismatch while reading last entry from bookie: \"\n+                LOG.error(\"Mac mismatch for ledger: \" + ledgerId + \", entry: \" + entryId\n+                          + \" while reading last entry from bookie: \"\n                           + lh.metadata.currentEnsemble.get(bookieIndex));\n             }\n         }\n@@ -108,9 +109,8 @@ public synchronized void readEntryComplete(final int rc, final long ledgerId, fi\n             && coverageSet.addBookieAndCheckCovered(bookieIndex)\n             && !completed) {\n             completed = true;\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Read Complete with enough validResponses\");\n-            }\n+            LOG.debug(\"Read Complete with enough validResponses for ledger: {}, entry: {}\",\n+                ledgerId, entryId);\n \n             cb.readLastConfirmedDataComplete(BKException.Code.OK, maxRecoveredData);\n             return;"},{"sha":"9dcb1b981895e9dd0e6e8c96116e227af99682ec","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":4,"deletions":12,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -191,9 +191,7 @@ protected void asyncGetLedgersInSingleNode(final String nodePath, final GenericC\n         zk.sync(nodePath, new AsyncCallback.VoidCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Sync node path \" + path + \" return : \" + rc);\n-                }\n+                LOG.debug(\"Sync node path {} return : {}\", path, rc);\n                 if (rc != Code.OK.intValue()) {\n                     LOG.error(\"ZK error syncing the ledgers node when getting children: \", KeeperException\n                             .create(KeeperException.Code.get(rc), path));\n@@ -218,9 +216,7 @@ public void processResult(int rc, String path, Object ctx, List<String> ledgerNo\n                     getLedgersCallback.operationComplete(rc, null);\n                     return;\n                 }\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Retrieved current set of ledger nodes: \" + ledgerNodes);\n-                }\n+                LOG.debug(\"Retrieved current set of ledger nodes: {}\", ledgerNodes);\n                 // Convert the ZK retrieved ledger nodes to a HashSet for easier comparisons.\n                 HashSet<Long> allActiveLedgers = new HashSet<Long>(ledgerNodes.size(), 1.0f);\n                 for (String ledgerNode : ledgerNodes) {\n@@ -262,9 +258,7 @@ public void processResult(int rc, String path, Object ctx, List<String> ledgerNo\n     protected HashSet<Long> getLedgersInSingleNode(final String nodePath)\n         throws IOException, InterruptedException {\n         final GetLedgersCtx ctx = new GetLedgersCtx();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Try to get ledgers of node : \" + nodePath);\n-        }\n+        LOG.debug(\"Try to get ledgers of node : {}\", nodePath);\n         asyncGetLedgersInSingleNode(nodePath, new GenericCallback<HashSet<Long>>() {\n                 @Override\n                 public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n@@ -328,9 +322,7 @@ public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n                     return;\n                 }\n \n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Processing ledgers : \" + zkActiveLedgers);\n-                }\n+                LOG.debug(\"Processing ledgers: {}\", zkActiveLedgers);\n \n                 // no ledgers found, return directly\n                 if (zkActiveLedgers.size() == 0) {"},{"sha":"e2847762e16be231d86eab981c37ad71cfaf749a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -147,8 +147,8 @@ public void garbageCollectLedgers(GarbageCollector gc) {\n             Map<Long, Boolean> bkActiveLedgers = activeLedgers.snapshot();\n             Set<Long> zkActiveLedgers = getLedgersInSingleNode(ledgerRootPath);\n             if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"All active ledgers from ZK: \" + zkActiveLedgers);\n-                LOG.debug(\"Current active ledgers from Bookie: \" + bkActiveLedgers.keySet());\n+                LOG.debug(\"All active ledgers from ZK: {}. Current active ledgers from Bookie: {}.\",\n+                    zkActiveLedgers, bkActiveLedgers.keySet());\n             }\n             doGc(gc, bkActiveLedgers, zkActiveLedgers);\n         } catch (IOException ie) {"},{"sha":"3499a05b8c77f0ccd94eeb675768b88e6a5a94d3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -105,9 +105,7 @@ public HierarchicalLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n \n         this.idGenPath = ledgerRootPath + IDGENERATION_PREFIX;\n         this.scheduler = Executors.newSingleThreadScheduledExecutor();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Using HierarchicalLedgerManager with root path : \" + ledgerRootPath);\n-        }\n+        LOG.debug(\"Using HierarchicalLedgerManager with root path : {}\", ledgerRootPath);\n     }\n \n     @Override\n@@ -173,9 +171,7 @@ public void processResult(int rc, String path, Object ctx) {\n                                     LOG.warn(\"Exception during deleting znode for id generation : \",\n                                              KeeperException.create(KeeperException.Code.get(rc), path));\n                                 } else {\n-                                    if (LOG.isDebugEnabled()) {\n-                                        LOG.debug(\"Deleting znode for id generation : \" + idPathName);\n-                                    }\n+                                    LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n                                 }\n                             }\n                         }, null);\n@@ -393,10 +389,8 @@ void doGcByLevel(GarbageCollector gc, final String level1, final String level2,\n         long endLedgerId = getEndLedgerIdByLevel(level1, level2);\n         Map<Long, Boolean> bkActiveLedgers = snapshot.subMap(startLedgerId, true, endLedgerId, true);\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"All active ledgers from ZK for hash node \"\n-                      + level1 + \"/\" + level2 + \" : \" + zkActiveLedgers);\n-            LOG.debug(\"Current active ledgers from Bookie for hash node \"\n-                      + level1 + \"/\" + level2 + \" : \" + bkActiveLedgers);\n+            LOG.debug(\"For hash node: \" + level1 + \"/\" + level2 + \": All active ledgers from ZK: \"\n+                      + zkActiveLedgers + \". Current active ledgers from Bookie: \"+ bkActiveLedgers);\n         }\n \n         doGc(gc, bkActiveLedgers, zkActiveLedgers);"},{"sha":"9a35218da86ceb5ccef77dcd56403dcefc76bdcf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":7,"deletions":12,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -161,15 +161,12 @@ public void delete(final ZooKeeper zk, String ledgersRoot)\n      * @return byte[]\n      */\n     private byte[] serialize() throws IOException {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(layoutFormatVersion).append(lSplitter)\n-            .append(managerFactoryCls).append(splitter).append(managerVersion);\n-\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Serialized layout info: \" + sb.toString());\n-        }\n+        String s =\n+          new StringBuilder().append(layoutFormatVersion).append(lSplitter)\n+              .append(managerFactoryCls).append(splitter).append(managerVersion).toString();\n \n-        return sb.toString().getBytes(\"UTF-8\");\n+        LOG.debug(\"Serialized layout info: {}\", s);\n+        return s.getBytes(\"UTF-8\");\n     }\n \n     /**\n@@ -186,9 +183,7 @@ public void delete(final ZooKeeper zk, String ledgersRoot)\n     private static LedgerLayout parseLayout(byte[] bytes) throws IOException {\n         String layout = new String(bytes, \"UTF-8\");\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Parsing Layout: \" + layout);\n-        }\n+        LOG.debug(\"Parsing Layout: {}\", layout);\n \n         String lines[] = layout.split(lSplitter);\n \n@@ -214,7 +209,7 @@ private static LedgerLayout parseLayout(byte[] bytes) throws IOException {\n             int managerVersion = new Integer(parts[1]);\n             return new LedgerLayout(managerFactoryCls, managerVersion, layoutFormatVersion);\n         } catch (NumberFormatException e) {\n-            throw new IOException(e);\n+            throw new IOException(\"Could not parse layout '\" + layout + \"'\", e);\n         }\n     }\n "},{"sha":"2b7466fa49403f066c86e1b7a4a18e9d3f9a9286","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -45,6 +45,7 @@\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.ParseException;\n+import org.apache.commons.codec.binary.Hex;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -362,7 +363,6 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n             statType = BKStats.STATS_ADD;\n             try {\n                 TimedCnxn tsrc = new TimedCnxn(src, startTime);\n-                // LOG.debug(\"Master key: \" + new String(masterKey));\n                 if ((flags & BookieProtocol.FLAG_RECOVERY_ADD) == BookieProtocol.FLAG_RECOVERY_ADD) {\n                     bookie.recoveryAddEntry(packet.slice(), this, tsrc, masterKey);\n                 } else {\n@@ -383,7 +383,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n         case BookieProtocol.READENTRY:\n             statType = BKStats.STATS_READ;\n             ByteBuffer[] rsp = new ByteBuffer[2];\n-            LOG.debug(\"Received new read request: \" + ledgerId + \", \" + entryId);\n+            LOG.debug(\"Received new read request: {}, {}\", ledgerId, entryId);\n             int errorCode = BookieProtocol.EIO;\n             try {\n                 if ((flags & BookieProtocol.FLAG_DO_FENCING) == BookieProtocol.FLAG_DO_FENCING) {\n@@ -399,7 +399,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n                     }\n                 }\n                 rsp[1] = bookie.readEntry(ledgerId, entryId);\n-                LOG.debug(\"##### Read entry ##### \" + rsp[1].remaining());\n+                LOG.debug(\"##### Read entry ##### {}\", rsp[1].remaining());\n                 errorCode = BookieProtocol.EOK;\n                 success = true;\n             } catch (Bookie.NoLedgerException e) {\n@@ -434,7 +434,13 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n                 rsp[1].putLong(entryId);\n                 rsp[1].flip();\n             }\n-            LOG.debug(\"Sending response for: \" + entryId + \", \" + new String(rsp[1].array()));\n+            if (LOG.isTraceEnabled()) {\n+                byte[] content = new byte[rsp[1].remaining()];\n+                rsp[1].duplicate().get(content);\n+                LOG.trace(\"Sending response for: {}, content: {}\", entryId, Hex.encodeHexString(content));\n+            } else {\n+                LOG.debug(\"Sending response for: {}, length: {}\", entryId, rsp[1].remaining());\n+            }\n             src.sendResponse(rsp);\n             break;\n         default:"},{"sha":"05acacfd212aad7286b43b9ca289d53f4246827c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -390,7 +390,7 @@ public void close() {\n             synchronized (cnxns) {\n                 cnxns.remove(this);\n             }\n-            LOG.debug(\"close  NIOServerCnxn: \" + sock);\n+            LOG.debug(\"close NIOServerCnxn: {}\", sock);\n             try {\n                 /*\n                  * The following sequence of code is stupid! You would think\n@@ -451,9 +451,7 @@ private void sendBuffers(ByteBuffer bb[]) {\n                     total += bb[i].remaining();\n                 }\n             }\n-            if (LOG.isTraceEnabled()) {\n-                LOG.debug(\"Sending response of size \" + total + \" to \" + peerName);\n-            }\n+            LOG.debug(\"Sending response of size {} to {}\", total, peerName);\n             len.putInt(total);\n             len.flip();\n             outgoingBuffers.add(len);"},{"sha":"a2ea4d78da8ee6bf268c50ad6464f38c89551fe8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -115,8 +115,7 @@ public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor exec\n     }\n \n     private void connect() {\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Connecting to bookie: \" + addr);\n+        LOG.debug(\"Connecting to bookie: {}\", addr);\n \n         // Set up the ClientBootStrap so we can create a new Channel connection\n         // to the bookie.\n@@ -575,7 +574,7 @@ void handleAddResponse(long ledgerId, long entryId, int rc) {\n     void handleReadResponse(long ledgerId, long entryId, int rc, ChannelBuffer buffer) {\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Got response for read request from bookie: \" + addr + \" for ledger: \" + ledgerId + \" entry: \"\n-                      + entryId + \" rc: \" + rc + \"entry length: \" + buffer.readableBytes());\n+                      + entryId + \" rc: \" + rc + \" entry length: \" + buffer.readableBytes());\n         }\n \n         // convert to BKException code because thats what the uppper"},{"sha":"1724f869cb4bbb778865f3d2907bae9b81fe8054","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -98,7 +98,7 @@ private void runZookeeper(int maxCC) throws IOException {\n         }\n \n         boolean b = waitForServerUp(HOSTPORT, CONNECTION_TIMEOUT);\n-        LOG.debug(\"ZooKeeper server up: \" + b);\n+        LOG.debug(\"ZooKeeper server up: {}\", b);\n     }\n \n     private void initializeZookeper() throws IOException {"},{"sha":"9138861b19d574fda19827e8855b807f89d10df0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -79,9 +79,8 @@ public Void call() throws Exception {\n                 @Override\n                 public void deliver(ByteString thisTopic, ByteString subscriberId, Message msg,\n                 Callback<Void> callback, Object context) {\n-                    if (logger.isDebugEnabled())\n-                        logger.debug(\"Got message from src-region: \" + msg.getSrcRegion() + \" with seq-id: \"\n-                                     + msg.getMsgId());\n+                    logger.debug(\"Got message from src-region: {} with seq-id: {}\",\n+                        msg.getSrcRegion(), msg.getMsgId());\n \n                     String mapKey = topic + msg.getSrcRegion().toStringUtf8();\n                     Long lastSeqIdSeen = lastSeqIdSeenMap.get(mapKey);"},{"sha":"d8f9324aaa87cf8841e0df4803ef61d432b6f0d6","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -67,10 +67,8 @@ public void run() {\n             try {\n                 handler = HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel);\n             } catch (NoResponseHandlerException e) {\n-                if (logger.isDebugEnabled()) {\n-                    logger.debug(\"No response handler found while invoking asyncMessageConsumed in the Message\" +\n-                    \" consume retry task .\" , e);\n-                }\n+                logger.debug(\"No response handler found while invoking asyncMessageConsumed in the Message\"\n+                    + \" consume retry task.\", e);\n                 // Explicitly close the channel\n                 if (null != topicSubscriberChannel) {\n                     topicSubscriberChannel.close();\n@@ -91,9 +89,7 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n         try {\n             handler = HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel);\n         } catch (NoResponseHandlerException e) {\n-            if (logger.isDebugEnabled()) {\n-                logger.debug(\"No response handler found while invoking messageConsumed.\" , e);\n-            }\n+            logger.debug(\"No response handler found while invoking messageConsumed.\", e);\n             // Explicitly close the channel\n             if (null != topicSubscriberChannel) {\n                 topicSubscriberChannel.close();"},{"sha":"dacaa7aa715e6099810d58d3831a2a9376d588b0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -52,8 +52,7 @@ public PubSubCallback(PubSubData pubSubData) {\n     }\n \n     public void operationFinished(Object ctx, PubSubProtocol.ResponseBody resultOfOperation) {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"PubSub call succeeded for pubSubData: \" + pubSubData);\n+        logger.debug(\"PubSub call succeeded for pubSubData: {}\", pubSubData);\n         // Wake up the main sync PubSub thread that is waiting for us to\n         // complete.\n         synchronized (pubSubData) {\n@@ -65,8 +64,7 @@ public void operationFinished(Object ctx, PubSubProtocol.ResponseBody resultOfOp\n     }\n \n     public void operationFailed(Object ctx, PubSubException exception) {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"PubSub call failed with exception: \" + exception + \", pubSubData: \" + pubSubData);\n+        logger.debug(\"PubSub call failed with exception: {}, pubSubData: {}\", exception, pubSubData);\n         // Wake up the main sync PubSub thread that is waiting for us to\n         // complete.\n         synchronized (pubSubData) {"},{"sha":"f74680336654a62daa3ea67be614d49a39d31fdb","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -63,8 +63,7 @@ public SubscribeReconnectCallback(PubSubData origSubData, HedwigClientImpl clien\n     class SubscribeReconnectRetryTask extends TimerTask {\n         @Override\n         public void run() {\n-            if (logger.isDebugEnabled())\n-                logger.debug(\"Retrying subscribe reconnect request for origSubData: \" + origSubData);\n+            logger.debug(\"Retrying subscribe reconnect request for origSubData: {}\", origSubData);\n             // Clear out all of the servers we've contacted or attempted to from\n             // this request.\n             origSubData.clearServersList();\n@@ -73,8 +72,7 @@ public void run() {\n     }\n \n     public void operationFinished(Object ctx, PubSubProtocol.ResponseBody resultOfOperation) {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Subscribe reconnect succeeded for origSubData: \" + origSubData);\n+        logger.debug(\"Subscribe reconnect succeeded for origSubData: {}\", origSubData);\n         // Now we want to restart delivery for the subscription channel only\n         // if delivery was started at the time the original subscribe channel\n         // was disconnected."},{"sha":"ac209d1d7050f400256c9bcb81c56d0bed552672","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -218,10 +218,8 @@ public void handleSubscribeMessage(PubSubResponse response) {\n                 // so these messages are not consumed and just buffered up here.\n                 if (subscribeMsgQueue == null)\n                     subscribeMsgQueue = new LinkedList<Message>();\n-                if (logger.isDebugEnabled())\n-                    logger\n-                    .debug(\"Message has arrived but Subscribe channel does not have a registered MessageHandler yet so queueing up the message: \"\n-                           + message);\n+                logger.debug(\"Message has arrived but Subscribe channel does not have a registered \"\n+                    + \"MessageHandler yet so queueing up the message: {}\", message);\n                 subscribeMsgQueue.add(message);\n             }\n         }\n@@ -301,10 +299,8 @@ protected synchronized void messageConsumed(Message message) {\n             // Send the consume request and reset the consumed messages buffer\n             // variables. We will use the same Channel created from the\n             // subscribe request for the TopicSubscriber.\n-            if (logger.isDebugEnabled())\n-                logger\n-                .debug(\"Consumed message buffer limit reached so send the Consume Request to the server with lastMessageSeqId: \"\n-                       + lastMessageSeqId);\n+            logger.debug(\"Consumed message buffer limit reached so send the Consume Request to the \"\n+                + \"server with lastMessageSeqId: {}\", lastMessageSeqId);\n             responseHandler.getSubscriber().doConsume(origSubData, subscribeChannel, lastMessageSeqId);\n             numConsumedMessagesInBuffer = 0;\n             lastMessageSeqId = null;\n@@ -316,11 +312,9 @@ protected synchronized void messageConsumed(Message message) {\n         // consume. We could make this a configurable parameter if needed.\n         if (!subscribeChannel.isReadable() && outstandingMsgSet.isEmpty()) {\n             if (logger.isDebugEnabled())\n-                logger\n-                .debug(\"Message consumption has caught up so okay to turn off throttling of messages on the subscribe channel for topic: \"\n-                       + origSubData.topic.toStringUtf8()\n-                       + \", subscriberId: \"\n-                       + origSubData.subscriberId.toStringUtf8());\n+                logger.debug(\"Message consumption has caught up so okay to turn off throttling of \" +\n+                    \"messages on the subscribe channel for topic: \" + origSubData.topic.toStringUtf8()\n+                       + \", subscriberId: \" + origSubData.subscriberId.toStringUtf8());\n             subscribeChannel.setReadable(true);\n         }\n     }"},{"sha":"68867a3fffc57c2d59f4b070f7684dad9a946d1a","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -78,8 +78,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 pubSubData.getCallback().operationFailed(pubSubData.context, new CouldNotConnectException(\n                                                         \"Could not connect to host: \" + host));\n             } else {\n-                if (logger.isDebugEnabled())\n-                    logger.debug(\"Try to connect to server: \" + host + \" again for pubSubData: \" + pubSubData);\n+                logger.debug(\"Try to connect to server: {} again for pubSubData: {}\", host, pubSubData);\n                 // Keep track of this current server that we failed to connect\n                 // to but retry the request on the default server host/VIP.\n                 // The topic2Host mapping might need to be updated.\n@@ -95,8 +94,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n \n         // Now that we have connected successfully to the server, see what type\n         // of PubSub request this was.\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Connection to host: \" + host + \" was successful for pubSubData: \" + pubSubData);\n+        logger.debug(\"Connection to host: {} was successful for pubSubData: {}\", host, pubSubData);\n         if (pubSubData.operationType.equals(OperationType.PUBLISH)) {\n             // Publish Request so store this Channel connection in the\n             // HedwigPublisher Map (if it doesn't exist yet) and then"},{"sha":"673066864a805cbf2d9ccf08230a61531dd07ed3","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -167,8 +167,7 @@ public SslClientContextFactory getSslFactory() {\n          */\n         @Override\n         public void run() {\n-            if (logger.isDebugEnabled())\n-                logger.debug(\"Running the PubSubRequest Timeout Task\");\n+            logger.debug(\"Running the PubSubRequest Timeout Task\");\n             // Loop through all outstanding PubSubData requests and check if\n             // the requestWriteTime has timed out compared to the current time.\n             long curTime = MathUtils.now();\n@@ -262,8 +261,7 @@ public void close() {\n      *            Input server host to connect to of type InetSocketAddress\n      */\n     public void doConnect(PubSubData pubSubData, InetSocketAddress serverHost) {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Connecting to host: \" + serverHost + \" with pubSubData: \" + pubSubData);\n+        logger.debug(\"Connecting to host: {} with pubSubData: {}\", serverHost, pubSubData);\n         // Set up the ClientBootStrap so we can create a new Channel connection\n         // to the server.\n         ClientBootstrap bootstrap = new ClientBootstrap(socketFactory);\n@@ -360,8 +358,7 @@ public InetSocketAddress getHostForTopic(ByteString topic) {\n     // need to remove all of the topic mappings that the host was\n     // responsible for.\n     public void clearAllTopicsForHost(InetSocketAddress host) {\n-        if (logger.isDebugEnabled())\n-            logger.debug(\"Clearing all topics for host: \" + host);\n+        logger.debug(\"Clearing all topics for host: {}\", host);\n         // For each of the topics that the host was responsible for,\n         // remove it from the topic2Host mapping.\n         ConcurrentLinkedQueue<ByteString> topicsForHost = host2Topics.get(host);"},{"sha":"0891945371f5a22b923c777f400c4a8894e9092b","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -247,8 +247,7 @@ protected synchronized void storeHost2ChannelMapping(Channel channel) {\n             // set of server hosts, we could be redirected to a server that\n             // we already have a channel connection to from a prior existing\n             // topic. Close these redundant channels as they won't be used.\n-            if (logger.isDebugEnabled())\n-                logger.debug(\"Channel mapping to host: \" + host + \" already exists so no need to store it.\");\n+            logger.debug(\"Channel mapping to host: {} already exists so no need to store it.\", host);\n             try {\n                 HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n             } catch (NoResponseHandlerException e) {"},{"sha":"c0409be98ce1155ba404817271537dfa1731ae7d","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","status":"modified","additions":7,"deletions":13,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -190,8 +190,7 @@ public void handleRedirectResponse(PubSubResponse response, PubSubData pubSubDat\n             // We've already exceeded the maximum number of server redirects\n             // so consider this as an error condition for the client.\n             // Invoke the operationFailed callback and just return.\n-            if (logger.isDebugEnabled())\n-                logger.debug(\"Exceeded the number of server redirects (\" + curNumServerRedirects + \") so error out.\");\n+            logger.debug(\"Exceeded the maximum number of redirects ({}): erroring out.\", curNumServerRedirects);\n             pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n                                                     new TooManyServerRedirectsException(\"Already reached max number of redirects: \"\n                                                             + curNumServerRedirects)));\n@@ -292,9 +291,8 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n             // and unsubscribe requests.\n             Channel channel = pub.host2Channel.get(host);\n             if (channel != null && channel.equals(ctx.getChannel())) {\n-                if (logger.isDebugEnabled())\n-                    logger.debug(\"Disconnected channel for host: \" + host\n-                                 + \" was for Publish/Unsubscribe requests so remove all references to it.\");\n+                logger.debug(\"Disconnected channel for host: {} was for Publish/Unsubscribe requests\" +\n+                    \" so remove all references to it.\", host);\n                 if (pub.host2Channel.remove(host, channel)) {\n                     client.clearAllTopicsForHost(host);\n                 }\n@@ -317,8 +315,7 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n             // case before the channel disconnect).\n             origSubData.setCallback(new SubscribeReconnectCallback(origSubData, client));\n             origSubData.context = null;\n-            if (logger.isDebugEnabled())\n-                logger.debug(\"Disconnected subscribe channel so reconnect with origSubData: \" + origSubData);\n+            logger.debug(\"Disconnected subscribe channel so reconnect with origSubData: {}\", origSubData);\n             client.doConnect(origSubData, cfg.getDefaultServerHost());\n         }\n \n@@ -329,9 +326,8 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n         // we're not sure of the state of the request since the ack response was\n         // never received.\n         for (PubSubData pubSubData : txn2PubSubData.values()) {\n-            if (logger.isDebugEnabled())\n-                logger.debug(\"Channel disconnected so invoking the operationFailed callback for pubSubData: \"\n-                             + pubSubData);\n+            logger.debug(\"Channel disconnected so invoking the operationFailed callback for pubSubData: {}\",\n+                pubSubData);\n             pubSubData.getCallback().operationFailed(pubSubData.context, new UncertainStateException(\n                                                     \"Server ack response never received before server connection disconnected!\"));\n         }\n@@ -347,9 +343,7 @@ public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) thr\n         // No need to initiate the SSL handshake if we are closing this channel\n         // explicitly or the client has been stopped.\n         if (cfg.isSSLEnabled() && !channelClosedExplicitly && !client.hasStopped()) {\n-            if (logger.isDebugEnabled()) {\n-                logger.debug(\"Initiating the SSL handshake\");\n-            }\n+            logger.debug(\"Initiating the SSL handshake\");\n             ctx.getPipeline().get(SslHandler.class).handshake(e.getChannel());\n         }\n     }"},{"sha":"41a19d209a183070d38113d0654778470f37f4e8","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -86,9 +86,8 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                 pubSubData.getCallback().operationFailed(pubSubData.context, new ServiceDownException(\n                                                         \"Error while writing message to server: \" + hostString));\n             } else {\n-                if (logger.isDebugEnabled())\n-                    logger.debug(\"Try to send the PubSubRequest again to the default server host/VIP for pubSubData: \"\n-                                 + pubSubData);\n+                logger.debug(\"Try to send the PubSubRequest again to the default server host/VIP for pubSubData: {}\",\n+                    pubSubData);\n                 // Keep track of this current server that we failed to write to\n                 // but retry the request on the default server host/VIP.\n                 if (pubSubData.writeFailedServers == null)\n@@ -101,8 +100,7 @@ public void operationComplete(ChannelFuture future) throws Exception {\n             // to respond. The ResponseHandler will take care of the ack\n             // response from the server before we can determine if the async\n             // PubSub call has really completed successfully or not.\n-            if (logger.isDebugEnabled())\n-                logger.debug(\"Successfully wrote to host: \" + host + \" for pubSubData: \" + pubSubData);\n+            logger.debug(\"Successfully wrote to host: {} for pubSubData: {}\", host, pubSubData);\n         }\n     }\n "},{"sha":"b459acda7221c69306eb2dd849f56bd992cd811c","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -162,10 +162,8 @@ public HedwigAdmin(ClientConfiguration bkConf, ServerConfiguration hubConf) thro\n \n         // connect to zookeeper\n         zk = new ZooKeeper(hubConf.getZkHost(), hubConf.getZkTimeout(), new MyWatcher());\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Connecting to zookeeper \" + hubConf.getZkHost() + \", timeout = \"\n-                    + hubConf.getZkTimeout());\n-        }\n+        LOG.debug(\"Connecting to zookeeper {}, timeout = {}\",\n+                hubConf.getZkHost(), hubConf.getZkTimeout());\n         // wait until connection is ready\n         if (!zkReadyLatch.await(hubConf.getZkTimeout() * 2, TimeUnit.MILLISECONDS)) {\n             throw new Exception(\"Count not establish connection with ZooKeeper after \" + hubConf.getZkTimeout() * 2 + \" ms.\");\n@@ -179,9 +177,7 @@ public HedwigAdmin(ClientConfiguration bkConf, ServerConfiguration hubConf) thro\n \n         // connect to bookkeeper\n         bk = new BookKeeper(bkClientConf, zk);\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Connecting to bookkeeper\");\n-        }\n+        LOG.debug(\"Connecting to bookkeeper\");\n     }\n \n     /**"},{"sha":"2cc450cd4401c3ffada9433bd4eac8f114dae3da","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -909,9 +909,7 @@ protected boolean processCmd(MyCommandOptions co) {\n             return false;\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Processing \" + cmd);\n-        }\n+        LOG.debug(\"Processing {}\", cmd);\n \n         MyCommand myCommand = myCommands.get(cmd);\n         if (myCommand == null) {"},{"sha":"fd36f4054c5d7acb7ff2e6373ae21e690ce1421f","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -76,9 +76,7 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws\n         if (throwable instanceof IOException || throwable instanceof TooLongFrameException\n                 || throwable instanceof CorruptedFrameException) {\n             e.getChannel().close();\n-            if (logger.isDebugEnabled()) {\n-                logger.debug(\"Uncaught exception\", throwable);\n-            }\n+            logger.debug(\"Uncaught exception\", throwable);\n         } else {\n             // call our uncaught exception handler, which might decide to\n             // shutdown the system\n@@ -104,9 +102,7 @@ public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) thr\n             ctx.getPipeline().get(SslHandler.class).handshake(e.getChannel()).addListener(new ChannelFutureListener() {\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n-                        if (logger.isDebugEnabled()) {\n-                            logger.debug(\"SSL handshake has completed successfully!\");\n-                        }\n+                        logger.debug(\"SSL handshake has completed successfully!\");\n                         allChannels.add(future.getChannel());\n                     } else {\n                         future.getChannel().close();\n@@ -125,9 +121,7 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n     }\n \n     public static void sendErrorResponseToMalformedRequest(Channel channel, long txnId, String msg) {\n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\"Malformed request from \" + channel.getRemoteAddress() + \" msg, = \" + msg);\n-        }\n+        logger.debug(\"Malformed request from {}, msg = {}\", channel.getRemoteAddress(), msg);\n         MalformedRequestException mre = new MalformedRequestException(msg);\n         PubSubResponse response = PubSubResponseUtils.getResponseForException(mre, txnId);\n         channel.write(response);"},{"sha":"090e9b01241389fc2bb4352e38ff69f60afa08e3","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -278,10 +278,8 @@ public void safeReadComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> s\n                             return;\n                         }\n \n-                        if (logger.isDebugEnabled()) {\n-                            logger.debug(\"Read response from ledger: \" + lh.getId() + \" entry-id: \"\n-                                         + entry.getEntryId());\n-                        }\n+                        logger.debug(\"Read response from ledger: {} entry-id: {}\",\n+                                     lh.getId(), entry.getEntryId());\n \n                         assert expectedEntryId == entry.getEntryId() : \"expectedEntryId (\" + expectedEntryId\n                         + \") != entry.getEntryId() (\" + entry.getEntryId() + \")\";"},{"sha":"bf66b8bb0495aad8c28622b53eb57bc747c4566c","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/CacheValue.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -62,9 +62,7 @@ public void setMessageAndInvokeCallbacks(Message message, long currTime) {\n         this.message = message;\n         this.timeOfAddition = currTime;\n         ScanCallbackWithContext callbackWithCtx;\n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\"Invoking \" + callbacks.size() + \" callbacks for \" + \" message added to cache\");\n-        }\n+        logger.debug(\"Invoking {} callbacks for {} message added to cache\", callbacks.size(), message);\n         while ((callbackWithCtx = callbacks.poll()) != null) {\n             callbackWithCtx.getScanCallback().messageScanned(callbackWithCtx.getCtx(), message);\n         }"},{"sha":"62e3b91a260e2cb18f9f3160ed6757819d9c2b02","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -427,7 +427,10 @@ public void consumedUntil(ByteString topic, Long seqId) {\n                                          + \" <= ?\");\n             stmt.setLong(1, seqId);\n             int rowCount = stmt.executeUpdate();\n-            logger.debug(\"Deleted \" + rowCount + \" records for topic: \" + topic.toStringUtf8() + \", seqId: \" + seqId);\n+            if (logger.isDebugEnabled()) {\n+              logger.debug(\"Deleted \" + rowCount + \" records for topic: \" + topic.toStringUtf8()\n+                  + \", seqId: \" + seqId);\n+            }\n         } catch (SQLException sqle) {\n             String theError = (sqle).getSQLState();\n             if (theError.equals(\"42X05\")) {"},{"sha":"8db93b37e604d3028dc1d8892c9b4f81dec8ff42","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":5,"deletions":16,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -360,9 +360,7 @@ protected RangeScanRequest doReadAheadStartingFrom(ByteString topic, long seqId,\n             CacheValue cacheValue = new CacheValue();\n             cache.put(cacheKey, cacheValue);\n \n-            if (logger.isDebugEnabled()) {\n-                logger.debug(\"Adding stub for seq-id: \" + seqId + \" topic: \" + topic.toStringUtf8());\n-            }\n+            logger.debug(\"Adding cache stub for: {}\", cacheKey);\n             installedStubs.add(cacheKey);\n \n             seqId = realPersistenceManager.getSeqIdAfterSkipping(topic, seqId, 1);\n@@ -485,10 +483,7 @@ private void enqueueDeleteOfRemainingStubs(Exception reason) {\n      * @param message\n      */\n     protected void addMessageToCache(CacheKey cacheKey, Message message, long currTime) {\n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\"Adding msg (topic: \" + cacheKey.getTopic().toStringUtf8() + \", seq-id: \"\n-                         + message.getMsgId().getLocalComponent() + \") to readahead cache\");\n-        }\n+        logger.debug(\"Adding msg {} to readahead cache\", cacheKey);\n \n         CacheValue cacheValue;\n \n@@ -558,10 +553,7 @@ protected void collectOldCacheEntries() {\n             for (Iterator<CacheKey> iter = oldCacheEntries.iterator(); iter.hasNext();) {\n                 CacheKey cacheKey = iter.next();\n \n-                if (logger.isDebugEnabled()) {\n-                    logger.debug(\"Removing topic: \" + cacheKey.getTopic() + \"seq-id: \" + cacheKey.getSeqId()\n-                                 + \" from cache because its the oldest\");\n-                }\n+                logger.debug(\"Removing {} from cache because it's the oldest.\", cacheKey);\n                 removeMessageFromCache(cacheKey, readAheadExceptionInstance, //\n                                        // maintainTimeIndex=\n                                        false,\n@@ -659,11 +651,8 @@ public void performRequest() {\n                 Long seqId = iter.next();\n                 CacheKey cacheKey = new CacheKey(topic, seqId);\n \n-                if (logger.isDebugEnabled()) {\n-                    logger.debug(\"Removing seq-id: \" + cacheKey.getSeqId() + \" topic: \"\n-                                 + cacheKey.getTopic().toStringUtf8()\n-                                 + \" from cache because every subscriber has moved past\");\n-                }\n+                logger.debug(\"Removing {} from cache because every subscriber has moved past\",\n+                    cacheKey);\n \n                 removeMessageFromCache(cacheKey, readAheadExceptionInstance, //\n                                        // maintainTimeIndex="},{"sha":"bae960b942bfe1f4c6202123db2eb24dc8c02cb3","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/regions/RegionManager.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -59,7 +59,7 @@\n     private final PersistenceManager pm;\n     private final ArrayList<HedwigHubClient> clients = new ArrayList<HedwigHubClient>();\n     private final TopicOpQueuer queue;\n-    private final ByteString myRegion;\n+    private final String myRegion;\n     // Timer for running a retry thread task to retry remote-subscription in asynchronous mode.\n     private final Timer timer = new Timer(true);\n     private final HashMap<HedwigHubClient, Set<ByteString>> retryMap =\n@@ -81,7 +81,7 @@ public void run() {\n             }\n             if (hubClients.isEmpty()) {\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] There is no hub client needs to retry subscriptions.\");\n+                    LOGGER.debug(\"[\" + myRegion + \"] There is no hub client needs to retry subscriptions.\");\n                 }\n                 return;\n             }\n@@ -137,15 +137,15 @@ public RegionManager(final PersistenceManager pm, final ServerConfiguration cfg,\n         for (final String hub : cfg.getRegions()) {\n             clients.add(hubClientFactory.create(new HedwigSocketAddress(hub)));\n         }\n-        myRegion = cfg.getMyRegionByteString();\n+        myRegion = cfg.getMyRegionByteString().toStringUtf8();\n         if (cfg.getRetryRemoteSubscribeThreadRunInterval() > 0) {\n             timer.schedule(new RetrySubscribeTask(), 0, cfg.getRetryRemoteSubscribeThreadRunInterval());\n         }\n     }\n \n     private void putTopicInRetryMap(HedwigHubClient client, ByteString topic) {\n         if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] Put topic in retry map : \" + topic.toStringUtf8());\n+            LOGGER.debug(\"[\" + myRegion + \"] Put topic in retry map : \" + topic.toStringUtf8());\n         }\n         synchronized (retryMap) {\n             Set<ByteString> topics = retryMap.get(client);\n@@ -177,14 +177,14 @@ private void doRemoteSubscribe(final HedwigHubClient client, final ByteString to\n         try {\n             if (sub.hasSubscription(topic, mySubId)) {\n                 if (LOGGER.isDebugEnabled()) {\n-                    LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] cross-region subscription for topic \"\n+                    LOGGER.debug(\"[\" + myRegion + \"] cross-region subscription for topic \"\n                                  + topic.toStringUtf8() + \" has existed before.\");\n                 }\n                 mcb.operationFinished(null, null);\n                 return;\n             }\n         } catch (PubSubException e) {\n-            LOGGER.error(\"[\" + myRegion.toStringUtf8() + \"] checking cross-region subscription for topic \"\n+            LOGGER.error(\"[\" + myRegion + \"] checking cross-region subscription for topic \"\n                          + topic.toStringUtf8() + \" failed (this is should not happen): \", e);\n             mcb.operationFailed(context, e);\n             return;\n@@ -193,7 +193,7 @@ private void doRemoteSubscribe(final HedwigHubClient client, final ByteString to\n             @Override\n             public void operationFinished(Object ctx, Void resultOfOperation) {\n                 if (LOGGER.isDebugEnabled())\n-                    LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] cross-region subscription done for topic \" + topic.toStringUtf8());\n+                    LOGGER.debug(\"[\" + myRegion + \"] cross-region subscription done for topic \" + topic.toStringUtf8());\n                 try {\n                     sub.startDelivery(topic, mySubId, new MessageHandler() {\n                         @Override\n@@ -213,32 +213,32 @@ public void deliver(final ByteString topic, ByteString subscriberId, Message msg\n                                 @Override\n                                 public void operationFinished(Object ctx, MessageSeqId resultOfOperation) {\n                                     if (LOGGER.isDebugEnabled())\n-                                        LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] cross-region recv-fwd succeeded for topic \"\n+                                        LOGGER.debug(\"[\" + myRegion + \"] cross-region recv-fwd succeeded for topic \"\n                                                      + topic.toStringUtf8());\n                                     callback.operationFinished(context, null);\n                                 }\n \n                                 @Override\n                                 public void operationFailed(Object ctx, PubSubException exception) {\n                                     if (LOGGER.isDebugEnabled())\n-                                        LOGGER.error(\"[\" + myRegion.toStringUtf8() + \"] cross-region recv-fwd failed for topic \"\n+                                        LOGGER.error(\"[\" + myRegion + \"] cross-region recv-fwd failed for topic \"\n                                                      + topic.toStringUtf8(), exception);\n                                     callback.operationFailed(context, exception);\n                                 }\n                             }, null));\n                         }\n                     });\n                     if (LOGGER.isDebugEnabled())\n-                        LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] cross-region start-delivery succeeded for topic \"\n+                        LOGGER.debug(\"[\" + myRegion + \"] cross-region start-delivery succeeded for topic \"\n                                      + topic.toStringUtf8());\n                     mcb.operationFinished(ctx, null);\n                 } catch (PubSubException ex) {\n                     if (LOGGER.isDebugEnabled())\n                         LOGGER.error(\n-                                \"[\" + myRegion.toStringUtf8() + \"] cross-region start-delivery failed for topic \" + topic.toStringUtf8(), ex);\n+                                \"[\" + myRegion + \"] cross-region start-delivery failed for topic \" + topic.toStringUtf8(), ex);\n                     mcb.operationFailed(ctx, ex);\n                 } catch (AlreadyStartDeliveryException ex) {\n-                    LOGGER.error(\"[\" + myRegion.toStringUtf8() + \"] cross-region start-delivery failed for topic \"\n+                    LOGGER.error(\"[\" + myRegion + \"] cross-region start-delivery failed for topic \"\n                                + topic.toStringUtf8(), ex);\n                     mcb.operationFailed(ctx, new PubSubException.UnexpectedConditionException(\"cross-region start-delivery failed : \" + ex.getMessage()));\n                 }\n@@ -247,7 +247,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n                 if (LOGGER.isDebugEnabled())\n-                    LOGGER.error(\"[\" + myRegion.toStringUtf8() + \"] cross-region subscribe failed for topic \" + topic.toStringUtf8(),\n+                    LOGGER.error(\"[\" + myRegion + \"] cross-region subscribe failed for topic \" + topic.toStringUtf8(),\n                                  exception);\n                 if (!synchronous) {\n                     putTopicInRetryMap(client, topic);\n@@ -259,7 +259,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n \n     private void retrySubscribe(final HedwigHubClient client, final ByteString topic, final Callback<Void> cb) {\n         if (LOGGER.isDebugEnabled()) {\n-            LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] Retry remote subscribe topic : \" + topic.toStringUtf8());\n+            LOGGER.debug(\"[\" + myRegion + \"] Retry remote subscribe topic : \" + topic.toStringUtf8());\n         }\n         queue.pushAndMaybeRun(topic, queue.new AsynchronousOp<Void>(topic, cb, null) {\n             @Override\n@@ -285,8 +285,8 @@ public void onFirstLocalSubscribe(final ByteString topic, final boolean synchron\n             @Override\n             public void run() {\n                 Callback<Void> postCb = synchronous ? cb : CallbackUtils.logger(LOGGER, \n-                        \"[\" + myRegion.toStringUtf8() + \"] all cross-region subscriptions succeeded\", \n-                        \"[\" + myRegion.toStringUtf8() + \"] at least one cross-region subscription failed\");\n+                        \"[\" + myRegion + \"] all cross-region subscriptions succeeded\", \n+                        \"[\" + myRegion + \"] at least one cross-region subscription failed\");\n                 final Callback<Void> mcb = CallbackUtils.multiCallback(clients.size(), postCb, ctx);\n                 for (final HedwigHubClient client : clients) {\n                     doRemoteSubscribe(client, topic, synchronous, mcb, ctx);\n@@ -308,13 +308,13 @@ public void onLastLocalUnsubscribe(final ByteString topic) {\n             @Override\n             public void operationFinished(Object ctx, Void result) {\n                 if (LOGGER.isDebugEnabled())\n-                    LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] cross-region unsubscribes succeeded for topic \" + topic.toStringUtf8());\n+                    LOGGER.debug(\"[\" + myRegion + \"] cross-region unsubscribes succeeded for topic \" + topic.toStringUtf8());\n             }\n \n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n                 if (LOGGER.isDebugEnabled())\n-                    LOGGER.error(\"[\" + myRegion.toStringUtf8() + \"] cross-region unsubscribes failed for topic \" + topic.toStringUtf8(), exception);\n+                    LOGGER.error(\"[\" + myRegion + \"] cross-region unsubscribes failed for topic \" + topic.toStringUtf8(), exception);\n             }\n \n         }, null) {\n@@ -326,14 +326,14 @@ public void run() {\n                     try {\n                         if (!sub.hasSubscription(topic, mySubId)) {\n                             if (LOGGER.isDebugEnabled()) {\n-                                LOGGER.debug(\"[\" + myRegion.toStringUtf8() + \"] cross-region subscription for topic \"\n+                                LOGGER.debug(\"[\" + myRegion + \"] cross-region subscription for topic \"\n                                              + topic.toStringUtf8() + \" has existed before.\");\n                             }\n                             mcb.operationFinished(null, null);\n                             continue;\n                         }\n                     } catch (PubSubException e) {\n-                        LOGGER.error(\"[\" + myRegion.toStringUtf8() + \"] checking cross-region subscription for topic \"\n+                        LOGGER.error(\"[\" + myRegion + \"] checking cross-region subscription for topic \"\n                                      + topic.toStringUtf8() + \" failed (this is should not happen): \", e);\n                         mcb.operationFailed(ctx, e);\n                         continue;"},{"sha":"18df77862955c33d40293443fa789527f8545eb6","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/AbstractTopicManager.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -125,7 +125,10 @@ public void operationFailed(Object ctx, PubSubException exception) {\n \n                                 @Override\n                                 public void operationFinished(Object ctx, Void resultOfOperation) {\n-                                    logger.debug(\"successful periodic release of topic \" + topic);\n+                                    if (logger.isDebugEnabled()) {\n+                                        logger.debug(\"successful periodic release of topic \"\n+                                            + topic.toStringUtf8());\n+                                    }\n                                 }\n \n                             }, null);"},{"sha":"4182c7e3a967368deb64d9b88e6d37495da100fd","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java?ref=ec977dbe1e7bfb56dc93b6ba72d11f0468345668","patch":"@@ -205,9 +205,7 @@ public void unregisterSelf() throws IOException {\n \n     @Override\n     public void uploadSelfLoadData(HubLoad selfLoad) {\n-        if (logger.isDebugEnabled()) {\n-            logger.debug(\"Reporting hub load of {} : {}\", myHubInfo, selfLoad);\n-        }\n+        logger.debug(\"Reporting hub load of {} : {}\", myHubInfo, selfLoad);\n         byte[] loadDataBytes = selfLoad.toString().getBytes();\n         zk.setData(ephemeralNodePath, loadDataBytes, -1,\n                    loadReportingStatCallback, null);\n@@ -267,9 +265,7 @@ public void safeProcessResult(int rc, String path, Object ctx,\n                     if (rc == KeeperException.Code.OK.intValue()) {\n                         try {\n                             HubLoad load = HubLoad.parse(new String(data));\n-                            if (logger.isDebugEnabled()) {\n-                                logger.debug(\"Found server \" + ctx + \" with load: \" + load);\n-                            }\n+                            logger.debug(\"Found server {} with load: {}\", ctx, load);\n                             int compareRes = load.compareTo(minLoad);\n                             if (compareRes < 0 || (compareRes == 0 && rand.nextBoolean())) {\n                                 minLoad = load;"}]}

