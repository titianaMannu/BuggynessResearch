{"sha":"ed3bb58f5cc5cd4176573cb696bb7277c628b26a","node_id":"MDY6Q29tbWl0MTU3NTk1NjplZDNiYjU4ZjVjYzVjZDQxNzY1NzNjYjY5NmJiNzI3N2M2MjhiMjZh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-04T12:01:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-04T12:01:37Z"},"message":"BOOKKEEPER-636: Latest txn logs might be deleted in a race condition which is not recoverable if BK goes down before next txn log created. (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1499731 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e79ff2eb54f0e4bee6f86cdf3f7d904b871c2ad9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e79ff2eb54f0e4bee6f86cdf3f7d904b871c2ad9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ed3bb58f5cc5cd4176573cb696bb7277c628b26a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ed3bb58f5cc5cd4176573cb696bb7277c628b26a","html_url":"https://github.com/apache/bookkeeper/commit/ed3bb58f5cc5cd4176573cb696bb7277c628b26a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0d9708c65998f48ba9b692ff5532251a0e1b8bc9","url":"https://api.github.com/repos/apache/bookkeeper/commits/0d9708c65998f48ba9b692ff5532251a0e1b8bc9","html_url":"https://github.com/apache/bookkeeper/commit/0d9708c65998f48ba9b692ff5532251a0e1b8bc9"}],"stats":{"total":23,"additions":19,"deletions":4},"files":[{"sha":"3bcf423eb5191790d24ceb11df02bde5d8841804","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=ed3bb58f5cc5cd4176573cb696bb7277c628b26a","patch":"@@ -40,6 +40,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-641: DeathWatcher thread is unnecessarily running even after bookie shutdown (rakeshr via ivank)\n \n+      BOOKKEEPER-636: Latest txn logs might be deleted in a race condition which is not recoverable if BK goes down before next txn log created. (vinay via ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-567: ReadOnlyBookieTest hangs on shutdown (sijie via ivank)"},{"sha":"761a0c3b8cea78a6888c21c698422de96fad2034","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=ed3bb58f5cc5cd4176573cb696bb7277c628b26a","patch":"@@ -479,15 +479,19 @@ public void run() {\n         ByteBuffer lenBuff = ByteBuffer.allocate(4);\n         JournalChannel logFile = null;\n         try {\n-            long logId = 0;\n+            List<Long> journalIds = listJournalIds(journalDirectory, null);\n+            // Should not use MathUtils.now(), which use System.nanoTime() and\n+            // could only be used to measure elapsed time.\n+            // http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#nanoTime%28%29\n+            long logId = journalIds.isEmpty() ? System.currentTimeMillis() : journalIds.get(journalIds.size() - 1);\n             BufferedChannel bc = null;\n             long lastFlushPosition = 0;\n \n             QueueEntry qe = null;\n             while (true) {\n                 // new journal file to write\n                 if (null == logFile) {\n-                    logId = MathUtils.now();\n+                    logId = logId + 1;\n                     logFile = new JournalChannel(journalDirectory, logId);\n                     bc = logFile.getBufferedChannel();\n "},{"sha":"4c624da71e3121cb8364f11f0bfe429499331075","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=ed3bb58f5cc5cd4176573cb696bb7277c628b26a","patch":"@@ -67,6 +67,12 @@\n \n         LOG.info(\"Opening journal {}\", fn);\n         if (!fn.exists()) { // new file, write version\n+            if (!fn.createNewFile()) {\n+                LOG.error(\"Journal file {}, that shouldn't exist, already exists. \"\n+                          + \" is there another bookie process running?\", fn);\n+                throw new IOException(\"File \" + fn\n+                        + \" suddenly appeared, is another bookie process running?\");\n+            }\n             fc = new RandomAccessFile(fn, \"rw\").getChannel();\n             formatVersion = CURRENT_JOURNAL_FORMAT_VERSION;\n "},{"sha":"de0c32841e3af6e3e0622ac93f44ac1539f66dbd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/ed3bb58f5cc5cd4176573cb696bb7277c628b26a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java?ref=ed3bb58f5cc5cd4176573cb696bb7277c628b26a","patch":"@@ -32,13 +32,16 @@ public static int signSafeMod(long dividend, int divisor) {\n         return mod;\n \n     }\n-    \n+\n     /**\n      * Current time from some arbitrary time base in the past, counting in\n      * milliseconds, and not affected by settimeofday or similar system clock\n      * changes. This is appropriate to use when computing how much longer to\n      * wait for an interval to expire.\n-     * \n+     *\n+     * NOTE: only use it for measuring.\n+     * http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#nanoTime%28%29\n+     *\n      * @return current time in milliseconds.\n      */\n     public static long now() {"}]}

