{"sha":"ee29f75f3f6a0168008da2e424e4174f2aee8cbb","node_id":"MDY6Q29tbWl0MTU3NTk1NjplZTI5Zjc1ZjNmNmEwMTY4MDA4ZGEyZTQyNGU0MTc0ZjJhZWU4Y2Ji","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-03T11:07:56Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-03T11:07:56Z"},"message":"BOOKKEEPER-507: Race condition happens if closeSubscription and subscribe happened at the same time (in multiplexed client). (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1428277 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7bac60c3650a159b53fe9cd196e0ec07915e1d9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e7bac60c3650a159b53fe9cd196e0ec07915e1d9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ee29f75f3f6a0168008da2e424e4174f2aee8cbb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ee29f75f3f6a0168008da2e424e4174f2aee8cbb","html_url":"https://github.com/apache/bookkeeper/commit/ee29f75f3f6a0168008da2e424e4174f2aee8cbb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330","url":"https://api.github.com/repos/apache/bookkeeper/commits/b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330","html_url":"https://github.com/apache/bookkeeper/commit/b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330"}],"stats":{"total":291,"additions":268,"deletions":23},"files":[{"sha":"89aebd73cbc378633f623082c7676b20344b4706","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=ee29f75f3f6a0168008da2e424e4174f2aee8cbb","patch":"@@ -209,6 +209,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-458:  Annoy BKReadException error when changing ledger. (jiannan via fpj)\n \n+        BOOKKEEPER-507: Race condition happens if closeSubscription and subscribe happened at the same time (in multiplexed client). (sijie via ivank)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-467: Allocate ports for testing dynamically (ivank)"},{"sha":"af3d15061eb7cb3b77281688888449505b410ae2","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","status":"modified","additions":28,"deletions":1,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java?ref=ee29f75f3f6a0168008da2e424e4174f2aee8cbb","patch":"@@ -27,11 +27,32 @@\n public interface DeliveryManager {\n     public void start();\n \n+    /**\n+     * Start serving a given subscription.\n+     *\n+     * @param topic\n+     *          Topic Name\n+     * @param subscriberId\n+     *          Subscriber Id\n+     * @param preferences\n+     *          Subscription Preferences\n+     * @param seqIdToStartFrom\n+     *          Message sequence id starting delivery from.\n+     * @param endPoint\n+     *          End point to deliver messages to.\n+     * @param filter\n+     *          Message filter used to filter messages before delivery.\n+     * @param callback\n+     *          Callback instance.\n+     * @param ctx\n+     *          Callback context.\n+     */\n     public void startServingSubscription(ByteString topic, ByteString subscriberId,\n                                          SubscriptionPreferences preferences,\n                                          MessageSeqId seqIdToStartFrom,\n                                          DeliveryEndPoint endPoint,\n-                                         ServerMessageFilter filter);\n+                                         ServerMessageFilter filter,\n+                                         Callback<Void> callback, Object ctx);\n \n     /**\n      * Stop serving a given subscription.\n@@ -40,6 +61,12 @@ public void startServingSubscription(ByteString topic, ByteString subscriberId,\n      *          Topic Name\n      * @param subscriberId\n      *          Subscriber Id\n+     * @param event\n+     *          Subscription event indicating the reason to stop the subscriber.\n+     * @param callback\n+     *          Callback instance.\n+     * @param ctx\n+     *          Callback context.\n      */\n     public void stopServingSubscriber(ByteString topic, ByteString subscriberId,\n                                       SubscriptionEvent event,"},{"sha":"aa17f2bc75652962a3fd93a0aa3c958c85ff0fdf","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":16,"deletions":5,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=ee29f75f3f6a0168008da2e424e4174f2aee8cbb","patch":"@@ -158,17 +158,22 @@ protected void enqueueWithoutFailure(DeliveryManagerRequest request) {\n      * @param filter\n      *            Only messages passing this filter should be sent to this\n      *            subscriber\n+     * @param callback\n+     *            Callback instance\n+     * @param ctx\n+     *            Callback context\n      */\n+    @Override\n     public void startServingSubscription(ByteString topic, ByteString subscriberId,\n                                          SubscriptionPreferences preferences,\n                                          MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, ServerMessageFilter filter) {\n-\n+                                         DeliveryEndPoint endPoint, ServerMessageFilter filter,\n+                                         Callback<Void> callback, Object ctx) {\n         ActiveSubscriberState subscriber = \n             new ActiveSubscriberState(topic, subscriberId,\n                                       preferences,\n                                       seqIdToStartFrom.getLocalComponent() - 1,\n-                                      endPoint, filter);\n+                                      endPoint, filter, callback, ctx);\n \n         enqueueWithoutFailure(subscriber);\n     }\n@@ -376,15 +381,17 @@ protected void addDeliveryPtr(ActiveSubscriberState subscriber, Long seqId) {\n         boolean isThrottled = false;\n         final int messageWindowSize;\n         ServerMessageFilter filter;\n-        // TODO make use of these variables\n+        Callback<Void> cb;\n+        Object ctx;\n \n         final static int SEQ_ID_SLACK = 10;\n \n         public ActiveSubscriberState(ByteString topic, ByteString subscriberId,\n                                      SubscriptionPreferences preferences,\n                                      long lastLocalSeqIdDelivered,\n                                      DeliveryEndPoint deliveryEndPoint,\n-                                     ServerMessageFilter filter) {\n+                                     ServerMessageFilter filter,\n+                                     Callback<Void> cb, Object ctx) {\n             this.topic = topic;\n             this.subscriberId = subscriberId;\n             this.lastLocalSeqIdDelivered = lastLocalSeqIdDelivered;\n@@ -401,6 +408,8 @@ public ActiveSubscriberState(ByteString topic, ByteString subscriberId,\n                     messageWindowSize = UNLIMITED;\n                 }\n             }\n+            this.cb = cb;\n+            this.ctx = ctx;\n         }\n \n         public void setNotConnected(SubscriptionEvent event) {\n@@ -617,6 +626,8 @@ public void transientErrorOnSend() {\n          * {@link DeliveryManagerRequest} methods\n          */\n         public void performRequest() {\n+            // try the callback to tell it started to deliver the message\n+            cb.operationFinished(ctx, (Void)null);\n \n             // Put this subscriber in the channel to subscriber mapping\n             ActiveSubscriberState prevSubscriber ="},{"sha":"d10dbf757c49ccf7dbd4ae4002efc30a6c838e80","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","status":"modified","additions":25,"deletions":16,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java?ref=ee29f75f3f6a0168008da2e424e4174f2aee8cbb","patch":"@@ -121,7 +121,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n             }\n \n             @Override\n-            public void operationFinished(Object ctx, SubscriptionData subData) {\n+            public void operationFinished(Object ctx, final SubscriptionData subData) {\n \n                 TopicSubscriber topicSub = new TopicSubscriber(topic, subscriberId);\n                 synchronized (channel) {\n@@ -185,27 +185,36 @@ public void operationFinished(Object ctx, SubscriptionData subData) {\n                     .addListener(ChannelFutureListener.CLOSE);\n                     return;\n                 }\n-                // First write success and then tell the delivery manager,\n-                // otherwise the first message might go out before the response\n-                // to the subscribe\n-                SubscribeResponse.Builder subRespBuilder = SubscribeResponse.newBuilder()\n-                    .setPreferences(subData.getPreferences());\n-                ResponseBody respBody = ResponseBody.newBuilder()\n-                    .setSubscribeResponse(subRespBuilder).build();\n-                channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId(), respBody));\n-                logger.info(\"Subscribe request (\" + request.getTxnId() + \") for (topic:\" + topic.toStringUtf8()\n-                          + \", subscriber:\" + subscriberId.toStringUtf8() + \") from channel \" + channel.getRemoteAddress()\n-                          + \" succeed - its subscription data is \" + SubscriptionStateUtils.toString(subData));\n-                subStats.updateLatency(MathUtils.now() - requestTime);\n \n                 // want to start 1 ahead of the consume ptr\n                 MessageSeqId lastConsumedSeqId = subData.getState().getMsgId();\n                 MessageSeqId seqIdToStartFrom = MessageSeqId.newBuilder(lastConsumedSeqId).setLocalComponent(\n                                                     lastConsumedSeqId.getLocalComponent() + 1).build();\n                 deliveryMgr.startServingSubscription(topic, subscriberId,\n-                                                     subData.getPreferences(),\n-                                                     seqIdToStartFrom,\n-                                                     new ChannelEndPoint(channel), filter);\n+                        subData.getPreferences(), seqIdToStartFrom, new ChannelEndPoint(channel), filter,\n+                        new Callback<Void>() {\n+                            @Override\n+                            public void operationFinished(Object ctx, Void result) {\n+                                // First write success and then tell the delivery manager,\n+                                // otherwise the first message might go out before the response\n+                                // to the subscribe\n+                                SubscribeResponse.Builder subRespBuilder = SubscribeResponse.newBuilder()\n+                                    .setPreferences(subData.getPreferences());\n+                                ResponseBody respBody = ResponseBody.newBuilder()\n+                                    .setSubscribeResponse(subRespBuilder).build();\n+                                channel.write(PubSubResponseUtils.getSuccessResponse(request.getTxnId(), respBody));\n+                                logger.info(\"Subscribe request (\" + request.getTxnId() + \") for (topic:\"\n+                                            + topic.toStringUtf8() + \", subscriber:\" + subscriberId.toStringUtf8()\n+                                            + \") from channel \" + channel.getRemoteAddress()\n+                                            + \" succeed - its subscription data is \"\n+                                            + SubscriptionStateUtils.toString(subData));\n+                                subStats.updateLatency(MathUtils.now() - requestTime);\n+                            }\n+                            @Override\n+                            public void operationFailed(Object ctx, PubSubException exception) {\n+                                // would not happened\n+                            }\n+                        }, null);\n             }\n         }, null);\n "},{"sha":"cbbaee94641425eeae07190db5d7e459839a3605","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","status":"added","additions":194,"deletions":0,"changes":194,"blob_url":"https://github.com/apache/bookkeeper/blob/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","raw_url":"https://github.com/apache/bookkeeper/raw/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java?ref=ee29f75f3f6a0168008da2e424e4174f2aee8cbb","patch":"@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server.integration;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.SynchronousQueue;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import com.google.protobuf.ByteString;\n+import org.apache.hedwig.client.api.MessageHandler;\n+import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;\n+import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.Client;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.exceptions.PubSubException;\n+import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n+import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;\n+import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n+import org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.StopDeliveryRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n+import org.apache.hedwig.server.HedwigHubTestBase;\n+import org.apache.hedwig.server.netty.WriteRecordingChannel;\n+import org.apache.hedwig.server.proxy.HedwigProxy;\n+import org.apache.hedwig.server.proxy.ProxyConfiguration;\n+import org.apache.hedwig.server.regions.HedwigHubClient;\n+import org.apache.hedwig.util.Callback;\n+import org.apache.hedwig.util.ConcurrencyUtils;\n+import org.apache.hedwig.util.HedwigSocketAddress;\n+import org.apache.bookkeeper.test.PortManager;\n+import org.apache.hedwig.server.LoggingExceptionHandler;\n+\n+public class TestSubAfterCloseSub extends HedwigHubTestBase {\n+\n+    class TestClientConfiguration extends HubClientConfiguration {\n+\n+        boolean isSubscriptionChannelSharingEnabled;\n+\n+        TestClientConfiguration(boolean isSubscriptionChannelSharingEnabled) {\n+            this.isSubscriptionChannelSharingEnabled = isSubscriptionChannelSharingEnabled;\n+        }\n+\n+        @Override\n+        public boolean isSubscriptionChannelSharingEnabled() {\n+            return isSubscriptionChannelSharingEnabled;\n+        }\n+    }\n+\n+    private void sleepThread(final String name, final CountDownLatch wakeupLatch)\n+    throws IOException {\n+        Thread[] allthreads = new Thread[Thread.activeCount()];\n+        Thread.enumerate(allthreads);\n+        for (final Thread t : allthreads) {\n+            if (t.getName().equals(name)) {\n+                Thread sleeper = new Thread() {\n+                    @Override\n+                    public void run() {\n+                        try {\n+                            t.suspend();\n+                            wakeupLatch.await();\n+                            t.resume();\n+                        } catch (Exception e) {\n+                            logger.error(\"Error suspending thread \" + name + \" : \", e);\n+                        }\n+                    }\n+                };\n+                sleeper.start();\n+                return;\n+            }\n+        }\n+        throw new IOException(\"Could not find thread \" + name);\n+    }\n+\n+    /**\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-507}\n+     */\n+    @Test(timeout=15000)\n+    public void testSubAfterCloseSubForSimpleClient() throws Exception {\n+        runSubAfterCloseSubTest(false);\n+    }\n+\n+    /**\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-507}\n+     */\n+    @Test(timeout=15000)\n+    public void testSubAfterCloseSubForMultiplexClient() throws Exception {\n+        runSubAfterCloseSubTest(true);\n+    }\n+\n+    private void runSubAfterCloseSubTest(boolean sharedSubscriptionChannel) throws Exception {\n+        HedwigClient client = new HedwigClient(new TestClientConfiguration(sharedSubscriptionChannel));\n+        Publisher publisher = client.getPublisher();\n+        final Subscriber subscriber = client.getSubscriber();\n+\n+        final ByteString topic = ByteString.copyFromUtf8(\"TestSubAfterCloseSub-\" + sharedSubscriptionChannel);\n+        final ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        final CountDownLatch wakeupLatch = new CountDownLatch(1);\n+        final CountDownLatch closeLatch = new CountDownLatch(1);\n+        final CountDownLatch subLatch = new CountDownLatch(1);\n+        final CountDownLatch deliverLatch = new CountDownLatch(1);\n+\n+        try {\n+            subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+            sleepThread(\"DeliveryManagerThread\", wakeupLatch);\n+            subscriber.asyncCloseSubscription(topic, subid, new Callback<Void>() {\n+                @Override\n+                public void operationFinished(Object ctx, Void resultOfOperation) {\n+                    closeLatch.countDown();\n+                }\n+                @Override\n+                public void operationFailed(Object ctx, PubSubException exception) {\n+                    logger.error(\"Closesub failed : \", exception);\n+                }\n+            }, null);\n+            subscriber.asyncSubscribe(topic, subid, CreateOrAttach.ATTACH, new Callback<Void>() {\n+                @Override\n+                public void operationFinished(Object ctx, Void resultOfOperation) {\n+                    try {\n+                        subscriber.startDelivery(topic, subid, new MessageHandler() {\n+                            @Override\n+                            public void deliver(ByteString topic, ByteString subid, Message msg,\n+                                                Callback<Void> callback, Object context) {\n+                                deliverLatch.countDown();\n+                            }\n+                        });\n+                    } catch (Exception cnse) {\n+                        logger.error(\"Failed to start delivery : \", cnse);\n+                    }\n+                    subLatch.countDown();\n+                }\n+                @Override\n+                public void operationFailed(Object ctx, PubSubException exception) {\n+                    logger.error(\"Failed to subscriber : \", exception);\n+                }\n+            }, null);\n+            // Make the delivery manager thread sleep for a while.\n+            // Before {@link https://issues.apache.org/jira/browse/BOOKKEEPER-507},\n+            // subscribe would succeed before closesub, while closesub would clear\n+            // a successful subscription w/o notifying the client.\n+            TimeUnit.SECONDS.sleep(2);\n+            // wake up fifo delivery thread\n+            wakeupLatch.countDown();\n+            // wait close sub to succeed\n+            assertTrue(\"Async close subscription should succeed.\",\n+                       closeLatch.await(5, TimeUnit.SECONDS));\n+            assertTrue(\"Subscribe should succeed.\",\n+                       subLatch.await(5, TimeUnit.SECONDS));\n+            // publish a message\n+            publisher.publish(topic, Message.newBuilder().setBody(topic).build());\n+            // wait for seconds to receive message\n+            assertTrue(\"Message should be received through successful subscription.\",\n+                       deliverLatch.await(5, TimeUnit.SECONDS));\n+        } finally {\n+            client.close();\n+        }\n+    }\n+\n+}\n+"},{"sha":"978649a4597aa1fdd980f415f33ae6ed902d5412","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java?ref=ee29f75f3f6a0168008da2e424e4174f2aee8cbb","patch":"@@ -58,9 +58,11 @@ public void startServingSubscription(ByteString topic, ByteString subscriberId,\n                                          SubscriptionPreferences preferences,\n                                          MessageSeqId seqIdToStartFrom,\n                                          DeliveryEndPoint endPoint,\n-                                         ServerMessageFilter filter) {\n+                                         ServerMessageFilter filter,\n+                                         Callback<Void> cb, Object ctx) {\n         lastRequest.add(new StartServingRequest(topic, subscriberId, preferences,\n                                                 seqIdToStartFrom, endPoint, filter));\n+        cb.operationFinished(ctx, null);\n     }\n \n     @Override"}]}

