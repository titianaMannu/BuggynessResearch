{"sha":"f060c0d2745b47314562bc94ecb5f525e2addb07","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMDYwYzBkMjc0NWI0NzMxNDU2MmJjOTRlY2I1ZjUyNWUyYWRkYjA3","commit":{"author":{"name":"Uma Maheswara Rao G","email":"umamahesh@apache.org","date":"2013-02-08T18:08:49Z"},"committer":{"name":"Uma Maheswara Rao G","email":"umamahesh@apache.org","date":"2013-02-08T18:08:49Z"},"message":"BOOKKEEPER-561 Findbugs report errors with openjdk. Contributed by Ivan Kelly.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1444174 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b613411e60727f962c5e628e354811ac1b44f8c8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b613411e60727f962c5e628e354811ac1b44f8c8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f060c0d2745b47314562bc94ecb5f525e2addb07","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f060c0d2745b47314562bc94ecb5f525e2addb07","html_url":"https://github.com/apache/bookkeeper/commit/f060c0d2745b47314562bc94ecb5f525e2addb07","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f060c0d2745b47314562bc94ecb5f525e2addb07/comments","author":{"login":"umamaheswararao","id":1719507,"node_id":"MDQ6VXNlcjE3MTk1MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1719507?v=4","gravatar_id":"","url":"https://api.github.com/users/umamaheswararao","html_url":"https://github.com/umamaheswararao","followers_url":"https://api.github.com/users/umamaheswararao/followers","following_url":"https://api.github.com/users/umamaheswararao/following{/other_user}","gists_url":"https://api.github.com/users/umamaheswararao/gists{/gist_id}","starred_url":"https://api.github.com/users/umamaheswararao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umamaheswararao/subscriptions","organizations_url":"https://api.github.com/users/umamaheswararao/orgs","repos_url":"https://api.github.com/users/umamaheswararao/repos","events_url":"https://api.github.com/users/umamaheswararao/events{/privacy}","received_events_url":"https://api.github.com/users/umamaheswararao/received_events","type":"User","site_admin":false},"committer":{"login":"umamaheswararao","id":1719507,"node_id":"MDQ6VXNlcjE3MTk1MDc=","avatar_url":"https://avatars.githubusercontent.com/u/1719507?v=4","gravatar_id":"","url":"https://api.github.com/users/umamaheswararao","html_url":"https://github.com/umamaheswararao","followers_url":"https://api.github.com/users/umamaheswararao/followers","following_url":"https://api.github.com/users/umamaheswararao/following{/other_user}","gists_url":"https://api.github.com/users/umamaheswararao/gists{/gist_id}","starred_url":"https://api.github.com/users/umamaheswararao/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/umamaheswararao/subscriptions","organizations_url":"https://api.github.com/users/umamaheswararao/orgs","repos_url":"https://api.github.com/users/umamaheswararao/repos","events_url":"https://api.github.com/users/umamaheswararao/events{/privacy}","received_events_url":"https://api.github.com/users/umamaheswararao/received_events","type":"User","site_admin":false},"parents":[{"sha":"b4bac04a8141fa116223de8028471facbe343555","url":"https://api.github.com/repos/apache/bookkeeper/commits/b4bac04a8141fa116223de8028471facbe343555","html_url":"https://github.com/apache/bookkeeper/commit/b4bac04a8141fa116223de8028471facbe343555"}],"stats":{"total":362,"additions":225,"deletions":137},"files":[{"sha":"c70216bc5ce8e7698b0b36b4baf61611be757718","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -10,6 +10,8 @@ Trunk (unreleased changes)\n \n     BUGFIXES:\n \n+      BOOKKEEPER-561: Findbugs report errors with openjdk (ivank via umamahesh)\n+\n     IMPROVEMENTS:\n \n       BOOKKEEPER-526: multiple threads for delivery manager (sijie via ivank)"},{"sha":"2afe593ded174fd93b29d64a3c4ecfafa5944d7a","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -50,6 +50,8 @@\n import org.apache.commons.cli.PosixParser;\n import org.apache.commons.cli.ParseException;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -168,7 +170,7 @@ public static void main(String[] args) throws Exception {\n         }\n \n         final String servers = cmd.getOptionValue(\"zookeeper\", \"localhost:2181\");\n-        final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes();\n+        final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes(UTF_8);\n         final int sockTimeout = Integer.valueOf(cmd.getOptionValue(\"sockettimeout\", \"5\"));\n         if (cmd.hasOption(\"ledger\") && cmd.hasOption(\"listen\")) {\n             LOG.error(\"Cannot used -ledger and -listen together\");\n@@ -268,4 +270,4 @@ public void run() {\n             zk.close();\n         }\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"51db5056116b6f0ed701519343fd4874aec95312","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -56,6 +56,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n public class BenchThroughputLatency implements AddCallback, Runnable {\n     static Logger LOG = LoggerFactory.getLogger(BenchThroughputLatency.class);\n \n@@ -274,7 +276,7 @@ public static void main(String[] args)\n         final int sockTimeout = Integer.valueOf(cmd.getOptionValue(\"sockettimeout\", \"5\"));\n \n         String coordinationZnode = cmd.getOptionValue(\"coordnode\");\n-        final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes();\n+        final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes(UTF_8);\n \n         String latencyFile = cmd.getOptionValue(\"latencyFile\", \"latencyDump.dat\");\n \n@@ -385,7 +387,7 @@ public void process(WatchedEvent event) {\n \n         if (zk != null) {\n             zk.create(coordinationZnode + \"/worker-\",\n-                      (\"tp \" + tp + \" duration \" + bench.getDuration()).getBytes(),\n+                      (\"tp \" + tp + \" duration \" + bench.getDuration()).getBytes(UTF_8),\n                       ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);\n             zk.close();\n         }\n@@ -394,7 +396,7 @@ public void process(WatchedEvent event) {\n         OutputStream fos = new BufferedOutputStream(new FileOutputStream(latencyFile));\n \n         for(Long l: latency) {\n-            fos.write((Long.toString(l)+\"\\t\"+(l/1000000)+ \"ms\\n\").getBytes());\n+            fos.write((Long.toString(l)+\"\\t\"+(l/1000000)+ \"ms\\n\").getBytes(UTF_8));\n         }\n         fos.flush();\n         fos.close();"},{"sha":"de41a74d4b67d4c2550ac6e6cbac676644217b0e","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/MySqlClient.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -30,6 +30,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n \n import org.apache.zookeeper.KeeperException;\n \n@@ -90,8 +91,8 @@ public static void main(String[] args) throws ClassNotFoundException, SQLExcepti\n         }\n         try {\n             MySqlClient c = new MySqlClient(args[2], args[3], args[4]);\n-            c.writeSameEntryBatch(sb.toString().getBytes(), Integer.parseInt(args[0]));\n-            c.writeSameEntry(sb.toString().getBytes(), Integer.parseInt(args[0]));\n+            c.writeSameEntryBatch(sb.toString().getBytes(UTF_8), Integer.parseInt(args[0]));\n+            c.writeSameEntry(sb.toString().getBytes(UTF_8), Integer.parseInt(args[0]));\n             c.closeHandle();\n         } catch (NumberFormatException e) {\n             e.printStackTrace();\n@@ -110,7 +111,7 @@ public static void main(String[] args) throws ClassNotFoundException, SQLExcepti\n     void writeSameEntryBatch(byte[] data, int times) throws InterruptedException, SQLException {\n         start = System.currentTimeMillis();\n         int count = times;\n-        String content = new String(data);\n+        String content = new String(data, UTF_8);\n         System.out.println(\"Data: \" + content + \", \" + data.length);\n         while(count-- > 0) {\n             stmt.addBatch(\"insert into data(content) values(\\\"\" + content + \"\\\");\");\n@@ -125,7 +126,7 @@ void writeSameEntryBatch(byte[] data, int times) throws InterruptedException, SQ\n     void writeSameEntry(byte[] data, int times) throws InterruptedException, SQLException {\n         start = System.currentTimeMillis();\n         int count = times;\n-        String content = new String(data);\n+        String content = new String(data, UTF_8);\n         System.out.println(\"Data: \" + content + \", \" + data.length);\n         while(count-- > 0) {\n             stmt.executeUpdate(\"insert into data(content) values(\\\"\" + content + \"\\\");\");"},{"sha":"b64151c565e4f249dfc3642b002fc3d46b01c935","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -55,6 +55,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n \n /**\n  * This is a simple test program to compare the performance of writing to\n@@ -121,7 +122,7 @@ public void run() {\n         try {\n             int numFiles = Integer.valueOf(cmd.getOptionValue(\"numconcurrent\", \"1\"));\n             int numThreads = Math.min(numFiles, 1000);\n-            byte[] data = sb.toString().getBytes();\n+            byte[] data = sb.toString().getBytes(UTF_8);\n             long runid = System.currentTimeMillis();\n             List<Callable<Long>> clients = new ArrayList<Callable<Long>>();\n "},{"sha":"801bc37909db5604387a4f8f1396ef9506e0bd0f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -37,6 +37,7 @@\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.bookkeeper.meta.LedgerManager;\n@@ -69,6 +70,7 @@\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.Watcher.Event.EventType;\n \n+import static com.google.common.base.Charsets.UTF_8;\n import com.google.common.annotations.VisibleForTesting;\n \n /**\n@@ -193,8 +195,11 @@ public T get() throws InterruptedException {\n             return value;\n         }\n         @Override\n-        public T get(long timeout, TimeUnit unit) throws InterruptedException {\n-            latch.await(timeout, unit);\n+        public T get(long timeout, TimeUnit unit)\n+            throws InterruptedException, TimeoutException {\n+            if (!latch.await(timeout, unit)) {\n+                throw new TimeoutException(\"Timed out waiting for latch\");\n+            }\n             return value;\n         }\n \n@@ -488,7 +493,7 @@ private String getInstanceId(ZooKeeper zk) throws KeeperException,\n         try {\n             byte[] data = zk.getData(conf.getZkLedgersRootPath() + \"/\"\n                     + BookKeeperConstants.INSTANCEID, false, null);\n-            instanceId = new String(data);\n+            instanceId = new String(data, UTF_8);\n         } catch (KeeperException.NoNodeException e) {\n             LOG.warn(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n         }"},{"sha":"b3ee280ffd44251a1564071e0ff4b09d810b7ffd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -75,7 +75,7 @@ public int getCode() {\n     }\n \n     public String getMessage(int code) {\n-        String err = \"Invalid operation\";\n+        String err;\n         switch(code) {\n         case Code.OK:\n             err = \"No problem\";\n@@ -92,6 +92,9 @@ public String getMessage(int code) {\n         case Code.UpgradeException:\n             err = \"Error performing an upgrade operation \";\n             break;\n+        default:\n+            err = \"Invalid operation\";\n+            break;\n         }\n         String reason = super.getMessage();\n         if (reason == null) {"},{"sha":"d80f83ce1139e0a004240f2762727bc3bd66189c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -23,8 +23,9 @@\n import java.io.BufferedReader;\n import java.io.EOFException;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.FileOutputStream;\n-import java.io.FileReader;\n+import java.io.InputStreamReader;\n import java.io.OutputStreamWriter;\n import java.io.BufferedWriter;\n import java.io.IOException;\n@@ -46,6 +47,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n import com.google.protobuf.TextFormat;\n \n /**\n@@ -159,7 +161,7 @@ void writeToDirectory(File directory) throws IOException {\n         FileOutputStream fos = new FileOutputStream(versionFile);\n         BufferedWriter bw = null;\n         try {\n-            bw = new BufferedWriter(new OutputStreamWriter(fos));\n+            bw = new BufferedWriter(new OutputStreamWriter(fos, UTF_8));\n             bw.write(toString());\n         } finally {\n             if (bw != null) {\n@@ -174,7 +176,7 @@ void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n         String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n                 + BookKeeperConstants.COOKIE_NODE;\n         String zkPath = getZkPath(conf);\n-        byte[] data = toString().getBytes();\n+        byte[] data = toString().getBytes(UTF_8);\n         if (znodeVersion != -1) {\n             zk.setData(zkPath, data, znodeVersion);\n         } else {\n@@ -225,8 +227,7 @@ static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n \n         Stat stat = zk.exists(zkPath, false);\n         byte[] data = zk.getData(zkPath, false, stat);\n-        BufferedReader reader = new BufferedReader(new StringReader(new String(\n-                data)));\n+        BufferedReader reader = new BufferedReader(new StringReader(new String(data, UTF_8)));\n         try {\n             Cookie c = parse(reader);\n             c.znodeVersion = stat.getVersion();\n@@ -239,7 +240,8 @@ static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n     static Cookie readFromDirectory(File directory) throws IOException {\n         File versionFile = new File(directory,\n                 BookKeeperConstants.VERSION_FILENAME);\n-        BufferedReader reader = new BufferedReader(new FileReader(versionFile));\n+        BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new FileInputStream(versionFile), UTF_8));\n         try {\n             return parse(reader);\n         } finally {"},{"sha":"3da4aa849b15a37952e0f8df3d833495f69ceff3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -44,6 +44,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.IOUtils;\n@@ -122,7 +124,7 @@ public EntryLogger(ServerConfiguration conf,\n         // within the same JVM. All of these Bookie instances access this header\n         // so there can be race conditions when entry logs are rolled over and\n         // this header buffer is cleared before writing it into the new logChannel.\n-        LOGFILE_HEADER.put(\"BKLO\".getBytes());\n+        LOGFILE_HEADER.put(\"BKLO\".getBytes(UTF_8));\n \n         // Find the largest logId\n         logId = -1;\n@@ -253,7 +255,7 @@ protected boolean removeEntryLog(long entryLogId) {\n     private void setLastLogId(File dir, long logId) throws IOException {\n         FileOutputStream fos;\n         fos = new FileOutputStream(new File(dir, \"lastId\"));\n-        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos));\n+        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos, UTF_8));\n         try {\n             bw.write(Long.toHexString(logId) + \"\\n\");\n             bw.flush();\n@@ -306,7 +308,7 @@ private long readLastLogId(File f) {\n         } catch (FileNotFoundException e) {\n             return -1;\n         }\n-        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n+        BufferedReader br = new BufferedReader(new InputStreamReader(fis, UTF_8));\n         try {\n             String lastIdString = br.readLine();\n             return Long.parseLong(lastIdString, 16);"},{"sha":"eaf59d9585dbb101e6488d9780d725a490efdb11","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -28,6 +28,8 @@\n import java.nio.BufferUnderflowException;\n import java.nio.channels.FileChannel;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -62,7 +64,7 @@\n     /**\n      * The fingerprint of a ledger index file\n      */\n-    static final public int signature = ByteBuffer.wrap(\"BKLE\".getBytes()).getInt();\n+    static final public int signature = ByteBuffer.wrap(\"BKLE\".getBytes(UTF_8)).getInt();\n     static final public int headerVersion = 0;\n \n     static final long START_OF_DATA = 1024;"},{"sha":"f279fef9f4ad34e7ec8532edaba81583d2e7f5b9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -56,6 +56,8 @@\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.KeeperException;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n /**\n  * Application for upgrading the bookkeeper filesystem\n  * between versions\n@@ -118,7 +120,7 @@ private static int detectPreviousVersion(File directory) throws IOException {\n         if (!v2versionFile.exists()) {\n             return 1;\n         }\n-        Scanner s = new Scanner(v2versionFile);\n+        Scanner s = new Scanner(v2versionFile, UTF_8.name());\n         try {\n             return s.nextInt();\n         } catch (NoSuchElementException nse) {"},{"sha":"16eb3de7f7366ae3a98eb789080b14cf505f2e22","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -30,6 +30,8 @@\n import java.nio.channels.FileChannel;\n import java.nio.ByteBuffer;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,7 +47,7 @@\n     final int formatVersion;\n     long nextPrealloc = 0;\n \n-    final byte[] MAGIC_WORD = \"BKLG\".getBytes();\n+    final byte[] MAGIC_WORD = \"BKLG\".getBytes(UTF_8);\n \n     private final static int START_OF_FILE = -12345;\n "},{"sha":"952da7b50ff9990a9bf7c25f16f47508d087c1bc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -209,11 +209,8 @@ public void putEntryOffset(long ledger, long entry, long offset) throws IOExcept\n         if (lep == null) {\n             lep = grabLedgerEntryPage(ledger, pageEntry); \n         }\n-        if (lep != null) {\n-            lep.setOffset(offset, offsetInPage*8);\n-            lep.releasePage();\n-            return;\n-        }\n+        lep.setOffset(offset, offsetInPage*8);\n+        lep.releasePage();\n     }\n \n     @Override\n@@ -810,10 +807,7 @@ public boolean setFenced(long ledgerId) throws IOException {\n         FileInfo fi = null;\n         try {\n             fi = getFileInfo(ledgerId, null);\n-            if (null != fi) {\n-                return fi.setFenced();\n-            }\n-            return false;\n+            return fi.setFenced();\n         } finally {\n             if (null != fi) {\n                 fi.release();\n@@ -826,10 +820,7 @@ public boolean isFenced(long ledgerId) throws IOException {\n         FileInfo fi = null;\n         try {\n             fi = getFileInfo(ledgerId, null);\n-            if (null != fi) {\n-                return fi.isFenced();\n-            }\n-            return false;\n+            return fi.isFenced();\n         } finally {\n             if (null != fi) {\n                 fi.release();"},{"sha":"60731fdc2b83299073ac1df556cb939211a422ce","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -51,6 +51,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n /**\n  * Admin client for BookKeeper clusters\n  */\n@@ -708,12 +710,12 @@ public static boolean format(ClientConfiguration conf,\n \n             // Create ledgers root node if not exists\n             if (!ledgerRootExists) {\n-                zkc.create(conf.getZkLedgersRootPath(), \"\".getBytes(),\n+                zkc.create(conf.getZkLedgersRootPath(), \"\".getBytes(UTF_8),\n                         Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             }\n             // create available bookies node if not exists\n             if (!availableNodeExists) {\n-                zkc.create(conf.getZkAvailableBookiesPath(), \"\".getBytes(),\n+                zkc.create(conf.getZkAvailableBookiesPath(), \"\".getBytes(UTF_8),\n                         Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             }\n \n@@ -761,7 +763,7 @@ public static boolean format(ClientConfiguration conf,\n             // create INSTANCEID\n             String instanceId = UUID.randomUUID().toString();\n             zkc.create(conf.getZkLedgersRootPath() + \"/\"\n-                    + BookKeeperConstants.INSTANCEID, instanceId.getBytes(),\n+                    + BookKeeperConstants.INSTANCEID, instanceId.getBytes(UTF_8),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n \n             LOG.info(\"Successfully formatted BookKeeper metadata\");"},{"sha":"b78044f5680ca194caee60a56903978317226395","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -45,6 +45,7 @@\n import org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.State;\n import org.apache.bookkeeper.util.SafeRunnable;\n \n+import static com.google.common.base.Charsets.UTF_8;\n import com.google.common.util.concurrent.RateLimiter;\n \n import org.slf4j.Logger;\n@@ -771,9 +772,9 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                             + \"while changing ensemble to: \"\n                             + ensembleInfo.newEnsemble\n                             + \", old meta data is \\n\"\n-                            + new String(metadata.serialize())\n+                            + new String(metadata.serialize(), UTF_8)\n                             + \"\\n, new meta data is \\n\"\n-                            + new String(newMeta.serialize())\n+                            + new String(newMeta.serialize(), UTF_8)\n                             + \"\\n ,closing ledger\");\n                     handleUnrecoverableErrorDuringAdd(rc);\n                 }\n@@ -811,9 +812,9 @@ private boolean resolveConflict(LedgerMetadata newMeta) {\n                             + \"while changing ensemble to: \"\n                             + ensembleInfo.newEnsemble\n                             + \", old meta data is \\n\"\n-                            + new String(metadata.serialize())\n+                            + new String(metadata.serialize(), UTF_8)\n                             + \"\\n, new meta data is \\n\"\n-                            + new String(newMeta.serialize()));\n+                            + new String(newMeta.serialize(), UTF_8));\n                     writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n                 }\n             } else {"},{"sha":"8efd5f91ebd44dfc23044fe33f13293f701b01d9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -29,6 +29,8 @@\n import java.util.TreeMap;\n import java.util.Arrays;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import org.apache.bookkeeper.versioning.Version;\n import com.google.protobuf.TextFormat;\n import com.google.protobuf.ByteString;\n@@ -244,7 +246,7 @@ long getNextEnsembleChange(long entryId) {\n         s.append(VERSION_KEY).append(tSplitter).append(CURRENT_METADATA_FORMAT_VERSION).append(lSplitter);\n         s.append(TextFormat.printToString(builder.build()));\n         LOG.debug(\"Serialized config: {}\", s);\n-        return s.toString().getBytes();\n+        return s.toString().getBytes(UTF_8);\n     }\n \n     private byte[] serializeVersion1() {\n@@ -268,7 +270,7 @@ long getNextEnsembleChange(long entryId) {\n \n         LOG.debug(\"Serialized config: {}\", s);\n \n-        return s.toString().getBytes();\n+        return s.toString().getBytes(UTF_8);\n     }\n \n     /**\n@@ -286,7 +288,7 @@ public static LedgerMetadata parseConfig(byte[] bytes, Version version) throws I\n         LedgerMetadata lc = new LedgerMetadata();\n         lc.version = version;\n \n-        String config = new String(bytes);\n+        String config = new String(bytes, UTF_8);\n \n         LOG.debug(\"Parsing Config: {}\", config);\n         BufferedReader reader = new BufferedReader(new StringReader(config));"},{"sha":"45c7f283f794a86075fa6f7c9bef27a517245fb3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/MacDigestManager.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -28,6 +28,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n class MacDigestManager extends DigestManager {\n     final static Logger LOG = LoggerFactory.getLogger(MacDigestManager.class);\n \n@@ -59,7 +61,7 @@ public MacDigestManager(long ledgerId, byte[] passwd) throws GeneralSecurityExce\n \n     static byte[] genDigest(String pad, byte[] passwd) throws NoSuchAlgorithmException {\n         MessageDigest digest = MessageDigest.getInstance(DIGEST_ALGORITHM);\n-        digest.update(pad.getBytes());\n+        digest.update(pad.getBytes(UTF_8));\n         digest.update(passwd);\n         return digest.digest();\n     }"},{"sha":"f43a103208ba33b23dca1c6b1150ca10da459519","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -22,6 +22,7 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n \n import org.apache.commons.lang.StringUtils;\n+import static com.google.common.base.Charsets.UTF_8;\n \n /**\n  * Configuration settings for client side\n@@ -129,7 +130,7 @@ public ClientConfiguration setBookieRecoveryDigestType(DigestType digestType) {\n      * @see #setBookieRecoveryPasswd\n      */\n     public byte[] getBookieRecoveryPasswd() {\n-        return this.getString(PASSWD, \"\").getBytes();\n+        return this.getString(PASSWD, \"\").getBytes(UTF_8);\n     }\n \n     /**\n@@ -147,7 +148,7 @@ public ClientConfiguration setBookieRecoveryDigestType(DigestType digestType) {\n      * @return client configuration\n      */\n     public ClientConfiguration setBookieRecoveryPasswd(byte[] passwd) {\n-        setProperty(PASSWD, new String(passwd));\n+        setProperty(PASSWD, new String(passwd, UTF_8));\n         return this;\n     }\n "},{"sha":"e5cdd8df744c928c97bfd3d759ca1702b12992d4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -352,9 +352,7 @@ public ServerConfiguration setLedgerDirNames(String[] ledgerDirs) {\n      */\n     public File[] getLedgerDirs() {\n         String[] ledgerDirNames = getLedgerDirNames();\n-        if (null == ledgerDirNames) {\n-            return null;\n-        }\n+\n         File[] ledgerDirs = new File[ledgerDirNames.length];\n         for (int i = 0; i < ledgerDirNames.length; i++) {\n             ledgerDirs[i] = new File(ledgerDirNames[i]);"},{"sha":"006df2fffb9be7a608c470f824b140f3820c2cca","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -472,7 +472,7 @@ public void disableLedgerReplication()\n         LOG.debug(\"disableLedegerReplication()\");\n         try {\n             ZkUtils.createFullPathOptimistic(zkc, basePath + '/'\n-                    + BookKeeperConstants.DISABLE_NODE, \"\".getBytes(),\n+                    + BookKeeperConstants.DISABLE_NODE, \"\".getBytes(UTF_8),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             LOG.info(\"Auto ledger re-replication is disabled!\");\n         } catch (KeeperException.NodeExistsException ke) {"},{"sha":"9424bf93ea0ebbd8703b86cae9f646b51481288e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -28,6 +28,8 @@\n import java.util.Set;\n import java.util.Collections;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import static org.apache.bookkeeper.metastore.MetastoreTable.ALL_FIELDS;\n \n public class Value {\n@@ -144,7 +146,7 @@ public String toString() {\n             if (null == entry.getValue()) {\n                 value = \"NONE\";\n             } else {\n-                value = new String(entry.getValue());\n+                value = new String(entry.getValue(), UTF_8);\n             }\n             sb.append(\"('\").append(f).append(\"'=\").append(value).append(\")\");\n         }"},{"sha":"f6218660b071d0e88541f8e235e6c61964c50e4e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -44,6 +44,8 @@\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n /**\n  * Implements the client-side part of the BookKeeper protocol.\n  *\n@@ -255,7 +257,7 @@ public void writeComplete(int rc, long ledger, long entry, InetSocketAddress add\n             }\n         };\n         Counter counter = new Counter();\n-        byte hello[] = \"hello\".getBytes();\n+        byte hello[] = \"hello\".getBytes(UTF_8);\n         long ledger = Long.parseLong(args[2]);\n         ClientSocketChannelFactory channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n                 .newCachedThreadPool());"},{"sha":"adfbfb95ffa599e973d29d5cf9e7cd809bcd221e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -404,6 +404,11 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n             ledgerId = packet.getLong();\n             entryId = packet.getLong();\n             break;\n+        default:\n+            LOG.warn(\"Received bad request (opcode:{})\", h.getOpCode());\n+            src.sendResponse(buildResponse(BookieProtocol.EBADREQ, h.getVersion(),\n+                                           h.getOpCode(), ledgerId, entryId));\n+            break;\n         }\n \n         if (h.getVersion() < BookieProtocol.LOWEST_COMPAT_PROTOCOL_VERSION"},{"sha":"9043b05f4c5a858a4653982e4796ccaf48b38d18","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -703,7 +703,7 @@ CompletionKey newCompletionKey(long ledgerId, long entryId) {\n \n         @Override\n         public boolean equals(Object obj) {\n-            if (!(obj instanceof CompletionKey) || obj == null) {\n+            if (!(obj instanceof CompletionKey)) {\n                 return false;\n             }\n             CompletionKey that = (CompletionKey) obj;"},{"sha":"e770bb09c914906ee3e4d7ac1e81250548b96054","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/HardLink.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -27,6 +27,8 @@\n import java.io.InputStreamReader;\n import java.util.Arrays;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n /**\n  * Class for creating hardlinks.\n  * Supports Unix/Linux, WinXP/2003/Vista via Cygwin, and Mac OS X.\n@@ -424,10 +426,10 @@ public static void createHardLink(File file, File linkName)\n     try {\n       if (process.waitFor() != 0) {\n         String errMsg = new BufferedReader(new InputStreamReader(\n-            process.getInputStream())).readLine();\n+                                                   process.getInputStream(), UTF_8)).readLine();\n         if (errMsg == null)  errMsg = \"\";\n         String inpMsg = new BufferedReader(new InputStreamReader(\n-            process.getErrorStream())).readLine();\n+                                                   process.getErrorStream(), UTF_8)).readLine();\n         if (inpMsg == null)  inpMsg = \"\";\n         throw new IOException(errMsg + inpMsg);\n       }\n@@ -512,10 +514,10 @@ protected static int createHardLinkMult(File parentDir,\n     try {\n       if (process.waitFor() != 0) {\n         String errMsg = new BufferedReader(new InputStreamReader(\n-            process.getInputStream())).readLine();\n+                                                   process.getInputStream(), UTF_8)).readLine();\n         if (errMsg == null)  errMsg = \"\";\n         String inpMsg = new BufferedReader(new InputStreamReader(\n-            process.getErrorStream())).readLine();\n+                                                   process.getErrorStream(), UTF_8)).readLine();\n         if (inpMsg == null)  inpMsg = \"\";\n         throw new IOException(errMsg + inpMsg);\n       }\n@@ -551,10 +553,10 @@ public static int getLinkCount(File fileName) throws IOException {\n     try {\n       exitValue = process.waitFor();\n       in = new BufferedReader(new InputStreamReader(\n-                                  process.getInputStream()));\n+                                      process.getInputStream(), UTF_8));\n       inpMsg = in.readLine();\n       err = new BufferedReader(new InputStreamReader(\n-                                   process.getErrorStream()));\n+                                       process.getErrorStream(), UTF_8));\n       errMsg = err.readLine();\n       if (inpMsg == null || exitValue != 0) {\n         throw createIOException(fileName, inpMsg, errMsg, exitValue, null);\n@@ -648,7 +650,7 @@ public static String makeShellPath(File file) throws IOException {\n             throw new IOException(\"Couldn't resolve path \"\n                                   + filename + \"(\" + err + \")\");\n         }\n-        r = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+        r = new BufferedReader(new InputStreamReader(p.getInputStream(), UTF_8));\n         return r.readLine();\n       } catch (InterruptedException ie) {\n         throw new IOException(\"Couldn't resolve path \" + filename, ie);"},{"sha":"353efea0670c919ddadb2c32245ac5dcff505548","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -45,6 +45,8 @@\n import org.apache.zookeeper.server.NIOServerCnxnFactory;\n import org.apache.zookeeper.server.ZooKeeperServer;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n public class LocalBookKeeper {\n     protected static final Logger LOG = LoggerFactory.getLogger(LocalBookKeeper.class);\n     public static final int CONNECTION_TIMEOUT = 30000;\n@@ -223,12 +225,12 @@ public static boolean waitForServerUp(String hp, long timeout) {\n                 BufferedReader reader = null;\n                 try {\n                     OutputStream outstream = sock.getOutputStream();\n-                    outstream.write(\"stat\".getBytes());\n+                    outstream.write(\"stat\".getBytes(UTF_8));\n                     outstream.flush();\n \n                     reader =\n                         new BufferedReader(\n-                        new InputStreamReader(sock.getInputStream()));\n+                                new InputStreamReader(sock.getInputStream(), UTF_8));\n                     String line = reader.readLine();\n                     if (line != null && line.startsWith(\"Zookeeper version:\")) {\n                         LOG.info(\"Server UP\");"},{"sha":"b38674e561f35ae18aee12911ce51d8cc731bb2e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -66,6 +66,9 @@ public void process(WatchedEvent event) {\n             LOG.error(\"ZooKeeper client connection to the \"\n                     + \"ZooKeeper server has expired!\");\n             break;\n+        default:\n+            // do nothing\n+            break;\n         }\n     }\n "},{"sha":"70089b043035297da678a74174942de0cbf421ea","filename":"hedwig-client-jms/pom.xml","status":"modified","additions":8,"deletions":29,"changes":37,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client-jms/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client-jms/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/pom.xml?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -127,16 +127,6 @@\n         </includes>\n       </testResource>\n     </testResources>\n-    <pluginManagement>\n-      <plugins>\n-        <plugin>\n-          <groupId>org.codehaus.mojo</groupId>\n-          <artifactId>findbugs-maven-plugin</artifactId>\n-          <version>2.4.0</version>\n-        </plugin>\n-      </plugins>\n-    </pluginManagement>\n-\n     <plugins>\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n@@ -227,25 +217,6 @@\n         </executions>\n       </plugin>\n \n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>findbugs-maven-plugin</artifactId>\n-        <version>2.4.0</version>\n-        <executions>\n-          <execution>\n-            <id>findbugs</id>\n-            <goals>\n-              <goal>findbugs</goal>\n-            </goals>\n-            <configuration>\n-              <threshold>High</threshold>\n-              <effort>Default</effort>\n-            </configuration>\n-            <phase>none</phase>\n-          </execution>\n-        </executions>\n-      </plugin>\n-\n       <plugin>\n         <groupId>org.apache.rat</groupId>\n         <artifactId>apache-rat-plugin</artifactId>\n@@ -258,6 +229,14 @@\n         </configuration>\n       </plugin>\n \n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>findbugs-maven-plugin</artifactId>\n+        <configuration>\n+          <excludeFilterFile>${basedir}/src/main/resources/findbugsExclude.xml</excludeFilterFile>\n+        </configuration>\n+      </plugin>\n+\n     </plugins>\n   </build>\n   <profiles>"},{"sha":"f86d9559b5c8869f39e57a21002929bd10b065d1","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/SessionImpl.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -518,7 +518,7 @@ public void close() throws JMSException {\n         // spin ONLY if we are NOT within the listener already !\n         if (! closeFromWithinListener.get()){\n             synchronized (lockObject){\n-                final long waitTime = 100;\n+                long waitTime = 100;\n                 long retryCount = StateManager.WAIT_TIME_FOR_TRANSIENT_STATE_CHANGE / waitTime;\n                 if (messageListenerThreadStarted) {\n                     while (!messageListenerThreadFinished) {\n@@ -906,7 +906,7 @@ private MessageProducer createProducerImpl(MessagingSessionFacade.DestinationTyp\n     // delegate to this IF this method can be invoked (specifically, if not QueueSession)\n     protected TopicPublisher createPublisherImpl(Topic topic) throws JMSException {\n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination \" + topic);\n+        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n         connection.initConnectionClientID();\n \n         return (TopicPublisher) createProducerImpl(MessagingSessionFacade.DestinationType.TOPIC, topic);\n@@ -916,7 +916,7 @@ protected TopicPublisher createPublisherImpl(Topic topic) throws JMSException {\n     @Override\n     public MessageConsumer createConsumer(Destination destination) throws JMSException {\n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == destination) throw new InvalidDestinationException(\"Illegal destination \" + destination);\n+        if (null == destination) throw new InvalidDestinationException(\"Illegal destination\");\n         connection.initConnectionClientID();\n \n         return createConsumerImpl(findDestinationType(destination), destination);\n@@ -938,7 +938,7 @@ private MessageConsumer createConsumerImpl(MessagingSessionFacade.DestinationTyp\n     // delegate to this IF this method can be invoked (specifically, if not QueueSession)\n     protected TopicSubscriber createSubscriberImpl(Topic topic) throws JMSException {\n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination \" + topic);\n+        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n         connection.initConnectionClientID();\n \n         return (TopicSubscriber) createConsumerImpl(MessagingSessionFacade.DestinationType.TOPIC, topic);\n@@ -949,7 +949,7 @@ protected TopicSubscriber createSubscriberImpl(Topic topic, String messageSelect\n         throws JMSException {\n \n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination \" + topic);\n+        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n         connection.initConnectionClientID();\n \n         return (TopicSubscriber) createConsumerImpl(MessagingSessionFacade.DestinationType.TOPIC,\n@@ -960,7 +960,7 @@ protected TopicSubscriber createSubscriberImpl(Topic topic, String messageSelect\n     @Override\n     public MessageConsumer createConsumer(Destination destination, String messageSelector) throws JMSException {\n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == destination) throw new InvalidDestinationException(\"Illegal destination \" + destination);\n+        if (null == destination) throw new InvalidDestinationException(\"Illegal destination\");\n         connection.initConnectionClientID();\n \n         return createConsumer(destination, messageSelector, false);\n@@ -971,7 +971,7 @@ public MessageConsumer createConsumer(Destination destination, String messageSel\n                                           boolean noLocal) throws JMSException {\n \n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == destination) throw new InvalidDestinationException(\"Illegal destination \" + destination);\n+        if (null == destination) throw new InvalidDestinationException(\"Illegal destination\");\n         connection.initConnectionClientID();\n \n         return createConsumerImpl(findDestinationType(destination), destination, messageSelector, noLocal);\n@@ -1017,7 +1017,7 @@ protected QueueSender createSenderImpl(Queue queue) throws JMSException {\n     @Override\n     public Topic createTopic(String topicName) throws JMSException {\n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n-        if (null == topicName) throw new InvalidDestinationException(\"Illegal destination \" + topicName);\n+        if (null == topicName) throw new InvalidDestinationException(\"Illegal destination\");\n         connection.initConnectionClientID();\n \n         return (Topic) getDestination(MessagingSessionFacade.DestinationType.TOPIC, topicName);\n@@ -1027,8 +1027,8 @@ public Topic createTopic(String topicName) throws JMSException {\n     public TopicSubscriber createDurableSubscriber(Topic topic, String subscribedId) throws JMSException {\n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n \n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination \" + topic);\n-        if (null == subscribedId) throw new JMSException(\"Illegal subscribedId \" + subscribedId);\n+        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n+        if (null == subscribedId) throw new JMSException(\"Illegal subscribedId\");\n         connection.initConnectionClientID();\n \n         subscriptions.registerSubscriberIdToTopic(subscribedId, topic.getTopicName());\n@@ -1040,8 +1040,8 @@ public TopicSubscriber createDurableSubscriber(Topic topic, String subscribedId,\n                                                    boolean noLocal) throws JMSException {\n         if (sessionState.isInCloseMode()) throw new javax.jms.IllegalStateException(\"Already closed\");\n \n-        if (null == topic) throw new InvalidDestinationException(\"Illegal destination \" + topic);\n-        if (null == subscribedId) throw new JMSException(\"Illegal subscribedId \" + subscribedId);\n+        if (null == topic) throw new InvalidDestinationException(\"Illegal destination\");\n+        if (null == subscribedId) throw new JMSException(\"Illegal subscribedId\");\n         connection.initConnectionClientID();\n \n         subscriptions.registerSubscriberIdToTopic(subscribedId, topic.getTopicName());"},{"sha":"23dfb54126ce2030451f663593defea6d2399fb3","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/TopicPublisherImpl.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -88,7 +88,7 @@ public void publish(final Topic topic, final Message message, final int delivery\n         }\n \n         if (null == topic){\n-            throw new InvalidDestinationException(\"Topic must be specified to publish \" + topic);\n+            throw new InvalidDestinationException(\"Topic must be specified to publish\");\n         }\n \n         final MessageImpl copiedMessageImpl;"},{"sha":"bae9e0907e7b3177f0ea5e86743e6a2e1dc24aa7","filename":"hedwig-client-jms/src/main/resources/findbugsExclude.xml","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client-jms/src/main/resources/findbugsExclude.xml","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client-jms/src/main/resources/findbugsExclude.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/resources/findbugsExclude.xml?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -0,0 +1,48 @@\n+<!--\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+//-->\n+<FindBugsFilter>\n+  <Match>\n+    <!-- generated code, we can't be held responsible for findbugs in it //-->\n+    <Or>\n+      <Class name=\"~org\\.apache\\.hedwig\\.jms\\.message\\.header\\.JmsHeader.*\" />\n+      <Class name=\"~org\\.apache\\.hedwig\\.jms\\.selector\\.SelectorParser.*\" />\n+      <Class name=\"~org\\.apache\\.hedwig\\.jms\\.selector\\.SimpleCharStream.*\" />\n+      <Class name=\"~org\\.apache\\.hedwig\\.jms\\.selector\\.ParseException.*\" />\n+      <Class name=\"~org\\.apache\\.hedwig\\.jms\\.selector\\.SimpleNode.*\" />\n+      <Class name=\"~org\\.apache\\.hedwig\\.jms\\.selector\\.TokenMgrError.*\" />\n+    </Or>\n+  </Match>\n+  <Match>\n+    <Or>\n+      <Class name=\"~org\\.apache\\.hedwig\\.jms\\.selector\\.ValueComparisonFunction.*\" />\n+      <Class name=\"~org\\.apache\\.hedwig\\.jms\\.selector\\.LogicalComparisonFunction.*\" />\n+    </Or>\n+    <Bug pattern=\"NP_BOOLEAN_RETURN_NULL\" />\n+  </Match>\n+  <Match>\n+    <Class name=\"~org\\.apache\\.hedwig\\.jms\\.selector\\.PropertyExprFunction.*\" />\n+    <Bug pattern=\"BX_UNBOXING_IMMEDIATELY_REBOXED\" />\n+  </Match>\n+  <Match>\n+    <Class name=\"~org\\.apache\\.hedwig\\.jms\\.message\\.MessageUtil\" />\n+    <Or>\n+      <Bug pattern=\"NP_LOAD_OF_KNOWN_NULL_VALUE\" />\n+      <Bug pattern=\"NP_NULL_PARAM_DEREF_NONVIRTUAL\" />\n+    </Or>\n+  </Match>\n+</FindBugsFilter>"},{"sha":"1d4f95555ac34c9ddff68e913c0b865b09de581c","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -96,6 +96,8 @@ public static InetSocketAddress getHostFromChannel(Channel channel) {\n             pubsubRequestBuilder.setCloseSubscriptionRequest(\n                 buildCloseSubscriptionRequest(pubSubData));\n             break;\n+        default:\n+            throw new IllegalArgumentException(\"Unknown argument type \" + pubSubData.operationType);\n         }\n \n         // Update the PubSubData with the txnId and the requestWriteTime"},{"sha":"7e084ec074ab4eb58b70c8cad825dd96ba449b8c","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/HedwigAdmin.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -61,6 +61,7 @@\n \n import com.google.protobuf.ByteString;\n import com.google.protobuf.InvalidProtocolBufferException;\n+import static com.google.common.base.Charsets.UTF_8;\n \n /**\n  * Hedwig Admin\n@@ -69,7 +70,7 @@\n     static final Logger LOG = LoggerFactory.getLogger(HedwigAdmin.class);\n \n     // NOTE: now it is fixed passwd used in hedwig\n-    static byte[] passwd = \"sillysecret\".getBytes();\n+    static byte[] passwd = \"sillysecret\".getBytes(UTF_8);\n \n     protected final ZooKeeper zk;\n     protected final BookKeeper bk;\n@@ -308,7 +309,7 @@ public void operationFailed(Object ctx, PubSubException pse) {\n                 if (data == null) {\n                     continue;\n                 }\n-                HubLoad load = HubLoad.parse(new String(data));\n+                HubLoad load = HubLoad.parse(new String(data, UTF_8));\n                 HubInfo info = new HubInfo(addr, stat.getCzxid());\n                 hubs.put(addr, new HubStats(info, load));\n             } catch (KeeperException ke) {"},{"sha":"940a5736d5422185a076196dc100372620f1a5e6","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -66,6 +66,7 @@\n import org.slf4j.LoggerFactory;\n \n import com.google.protobuf.ByteString;\n+import static com.google.common.base.Charsets.UTF_8;\n \n import static org.apache.hedwig.admin.console.HedwigCommands.*;\n import static org.apache.hedwig.admin.console.HedwigCommands.COMMAND.*;\n@@ -76,7 +77,7 @@\n public class HedwigConsole {\n     private static final Logger LOG = LoggerFactory.getLogger(HedwigConsole.class);\n     // NOTE: now it is fixed passwd in bookkeeper\n-    static byte[] passwd = \"sillysecret\".getBytes();\n+    static byte[] passwd = \"sillysecret\".getBytes(UTF_8);\n \n     // history file name\n     static final String HW_HISTORY_FILE = \".hw_history\";"},{"sha":"edad190bd2860efa94e89f0b740255d28d9ec191","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/ReadTopic.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -43,6 +43,7 @@\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n \n+import static com.google.common.base.Charsets.UTF_8;\n import com.google.protobuf.ByteString;\n import com.google.protobuf.InvalidProtocolBufferException;\n \n@@ -320,7 +321,7 @@ protected void formatMessage(Message message) {\n     \n     boolean pressKeyToContinue() throws IOException {\n         System.out.println(\"Press Y to continue...\");\n-        BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));\n+        BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in, UTF_8));\n         int ch = stdin.read();\n         if (ch == 'y' ||\n             ch == 'Y') {"},{"sha":"1b6a4a3239dcfdcc1979add1d4ef4e9e0e5c9ae3","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/BookkeeperBenchmark.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -25,6 +25,7 @@\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.util.MathUtils;\n+import static com.google.common.base.Charsets.UTF_8;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -43,7 +44,7 @@ public BookkeeperBenchmark(String zkHostPort) throws Exception {\n         int ensembleSize = Integer.getInteger(\"ensemble\", 4);\n         DigestType digestType = DigestType.valueOf(System.getProperty(\"digestType\", \"CRC32\"));\n         for (int i=0; i< numLedgers; i++) {\n-            lh[i] = bk.createLedger(ensembleSize, quorumSize, digestType, \"blah\".getBytes());\n+            lh[i] = bk.createLedger(ensembleSize, quorumSize, digestType, \"blah\".getBytes(UTF_8));\n         }\n \n     }"},{"sha":"6c61a2f9a05f11252d90a96a44163b9a63cfd8b2","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/FactoryLayout.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/meta/FactoryLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/meta/FactoryLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/FactoryLayout.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -35,6 +35,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.ManagerMeta;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.zookeeper.ZkUtils;\n+import static com.google.common.base.Charsets.UTF_8;\n \n /**\n  * This class encapsulates metadata manager layout information\n@@ -87,7 +88,7 @@ public void store(ZooKeeper zk, ServerConfiguration cfg)\n     throws KeeperException, IOException, InterruptedException {\n         String factoryLayoutPath = getFactoryLayoutPath(new StringBuilder(), cfg);\n \n-        byte[] layoutData = TextFormat.printToString(managerMeta).getBytes();\n+        byte[] layoutData = TextFormat.printToString(managerMeta).getBytes(UTF_8);\n         ZkUtils.createFullPathOptimistic(zk, factoryLayoutPath, layoutData,\n                                          Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n     }\n@@ -136,7 +137,7 @@ public static FactoryLayout readLayout(final ZooKeeper zk,\n         ManagerMeta meta;\n         try {\n             BufferedReader reader = new BufferedReader(\n-                new StringReader(new String(layoutData)));\n+                    new StringReader(new String(layoutData, UTF_8)));\n             ManagerMeta.Builder metaBuilder = ManagerMeta.newBuilder();\n             TextFormat.merge(reader, metaBuilder);\n             meta = metaBuilder.build();"},{"sha":"b44ca91ce9e0f672281698e29635411c68e64c60","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/MsMetadataManagerFactory.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/meta/MsMetadataManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/meta/MsMetadataManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/MsMetadataManagerFactory.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -23,6 +23,7 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n+import static com.google.common.base.Charsets.UTF_8;\n import com.google.protobuf.ByteString;\n import com.google.protobuf.TextFormat;\n import com.google.protobuf.TextFormat.ParseException;\n@@ -271,7 +272,7 @@ public void complete(int rc, Versioned<Value> value, Object ctx) {\n                     try {\n                         byte[] data = value.getValue().getField(OWNER_FIELD);\n                         if (data != null) {\n-                            owner = HubInfo.parse(new String(data));\n+                            owner = HubInfo.parse(new String(data, UTF_8));\n                         }\n                     } catch (HubInfo.InvalidHubInfoException ihie) {\n                         logger.warn(\"Failed to parse hub info for topic \" + topic.toStringUtf8(), ihie);\n@@ -286,7 +287,7 @@ public void complete(int rc, Versioned<Value> value, Object ctx) {\n         public void writeOwnerInfo(final ByteString topic, final HubInfo owner, final Version version,\n                 final Callback<Version> callback, Object ctx) {\n             Value value = new Value();\n-            value.setField(OWNER_FIELD, owner.toString().getBytes());\n+            value.setField(OWNER_FIELD, owner.toString().getBytes(UTF_8));\n \n             ownerTable.put(topic.toStringUtf8(), value, version, new MetastoreCallback<Version>() {\n                 @Override\n@@ -439,7 +440,7 @@ private void parseAndReturnTopicLedgerRanges(ByteString topic, byte[] data, Vers\n         public void writeTopicPersistenceInfo(final ByteString topic, LedgerRanges ranges, final Version version,\n                 final Callback<Version> callback, Object ctx) {\n             Value value = new Value();\n-            value.setField(PERSIST_FIELD, TextFormat.printToString(ranges).getBytes());\n+            value.setField(PERSIST_FIELD, TextFormat.printToString(ranges).getBytes(UTF_8));\n \n             persistTable.put(topic.toStringUtf8(), value, version, new MetastoreCallback<Version>() {\n                 @Override\n@@ -534,10 +535,10 @@ private String getSubscriptionKey(ByteString topic, ByteString subscriberId) {\n         private Value subscriptionData2Value(SubscriptionData subData) {\n             Value value = new Value();\n             if (subData.hasState()) {\n-                value.setField(SUB_STATE_FIELD, TextFormat.printToString(subData.getState()).getBytes());\n+                value.setField(SUB_STATE_FIELD, TextFormat.printToString(subData.getState()).getBytes(UTF_8));\n             }\n             if (subData.hasPreferences()) {\n-                value.setField(SUB_PREFS_FIELD, TextFormat.printToString(subData.getPreferences()).getBytes());\n+                value.setField(SUB_PREFS_FIELD, TextFormat.printToString(subData.getPreferences()).getBytes(UTF_8));\n             }\n             return value;\n         }"},{"sha":"48918fef2712ee08d2059305ea36f23526bcb54f","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -51,6 +51,7 @@\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.zookeeper.SafeAsyncZKCallback;\n import org.apache.hedwig.zookeeper.ZkUtils;\n+import static com.google.common.base.Charsets.UTF_8;\n \n /**\n  * ZooKeeper-based Metadata Manager.\n@@ -701,7 +702,7 @@ public void safeProcessResult(int rc, String path, Object ctx, byte[] data, Stat\n                     }\n                     HubInfo owner = null;\n                     try {\n-                        owner = HubInfo.parse(new String(data));\n+                        owner = HubInfo.parse(new String(data, UTF_8));\n                     } catch (HubInfo.InvalidHubInfoException ihie) {\n                         logger.warn(\"Failed to parse hub info for topic \" + topic.toStringUtf8() + \" : \", ihie);\n                     }\n@@ -727,7 +728,7 @@ public void writeOwnerInfo(final ByteString topic, final HubInfo owner, final Ve\n             }\n \n             int znodeVersion = ((ZkVersion)version).getZnodeVersion();\n-            zk.setData(hubPath(topic), owner.toString().getBytes(), znodeVersion,\n+            zk.setData(hubPath(topic), owner.toString().getBytes(UTF_8), znodeVersion,\n                        new SafeAsyncZKCallback.StatCallback() {\n                 @Override\n                 public void safeProcessResult(int rc, String path, Object ctx, Stat stat) {\n@@ -758,7 +759,7 @@ public void safeProcessResult(int rc, String path, Object ctx, Stat stat) {\n         protected void createOwnerInfo(final ByteString topic, final HubInfo owner,\n                                        final Callback<Version> callback, Object ctx) {\n             String ownerPath = hubPath(topic);\n-            ZkUtils.createFullPathOptimistic(zk, ownerPath, owner.toString().getBytes(), Ids.OPEN_ACL_UNSAFE,\n+            ZkUtils.createFullPathOptimistic(zk, ownerPath, owner.toString().getBytes(UTF_8), Ids.OPEN_ACL_UNSAFE,\n                                              CreateMode.PERSISTENT, new SafeAsyncZKCallback.StringCallback() {\n                 @Override\n                 public void safeProcessResult(int rc, String path, Object ctx, String name) {"},{"sha":"d0ea5b3229d407b805b913db527b36a599f154a8","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -62,6 +62,7 @@\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.zookeeper.SafeAsynBKCallback;\n import static org.apache.hedwig.util.VarArgs.va;\n+import static com.google.common.base.Charsets.UTF_8;\n \n /**\n  * This persistence manager uses zookeeper and bookkeeper to store messages.\n@@ -77,7 +78,7 @@\n \n public class BookkeeperPersistenceManager implements PersistenceManagerWithRangeScan, TopicOwnershipChangeListener {\n     static Logger logger = LoggerFactory.getLogger(BookkeeperPersistenceManager.class);\n-    static byte[] passwd = \"sillysecret\".getBytes();\n+    static byte[] passwd = \"sillysecret\".getBytes(UTF_8);\n     private BookKeeper bk;\n     private TopicPersistenceManager tpManager;\n     private ServerConfiguration cfg;"},{"sha":"6f474c823880db82dc714a73763883dcabcb5462","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/LocalDBPersistenceManager.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -37,6 +37,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.exceptions.PubSubException.ServiceDownException;\n import org.apache.hedwig.exceptions.PubSubException.UnexpectedConditionException;\n@@ -305,7 +307,7 @@ public void scanMessages(RangeScanRequest request) {\n     private String getTableNameForTopic(ByteString topic) {\n         String src = (topic.toStringUtf8() + \"_\" + version);\n         threadLocalDigest.get().reset();\n-        byte[] digest = threadLocalDigest.get().digest(src.getBytes());\n+        byte[] digest = threadLocalDigest.get().digest(src.getBytes(UTF_8));\n         BigInteger bigInt = new BigInteger(1,digest);\n         return String.format(\"TABLE_%032X\", bigInt);\n     }"},{"sha":"0dcbe3925472444a0d3c77574a20dce878cfb35d","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -147,8 +147,14 @@ public void run() {\n                 if (topicSubscriptions.isEmpty()\n                     || (minConsumedFromMap != null && minConsumedFromMap < minConsumedMessage)\n                     || (minConsumedFromMap == null && minConsumedMessage != 0)) {\n-                    topic2MinConsumedMessagesMap.put(topic, minConsumedMessage);\n-                    pm.consumedUntil(topic, minConsumedMessage);\n+                    // Replace or put the new min consumed value. If it has changed\n+                    // do nothing, as another thread has updated the min consumed message\n+                    if ((minConsumedFromMap != null\n+                         && (topic2MinConsumedMessagesMap.replace(topic, minConsumedFromMap,\n+                                                                  minConsumedMessage)))\n+                        || (topic2MinConsumedMessagesMap.putIfAbsent(topic, minConsumedMessage) == null)) {\n+                        pm.consumedUntil(topic, minConsumedMessage);\n+                    }\n                 } else if (hasBound) {\n                     pm.consumeToBound(topic);\n                 }"},{"sha":"e0062ba3f34c89e65d5820994377862592473fc1","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkHubServerManager.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -21,6 +21,8 @@\n import java.util.List;\n import java.util.Random;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.util.Callback;\n@@ -139,7 +141,7 @@ private String getHubZkNodePath(HedwigSocketAddress node) {\n \n     @Override\n     public void registerSelf(final HubLoad selfData, final Callback<HubInfo> callback, Object ctx) {\n-        byte[] loadDataBytes = selfData.toString().getBytes();\n+        byte[] loadDataBytes = selfData.toString().getBytes(UTF_8);\n         ZkUtils.createFullPathOptimistic(zk, ephemeralNodePath, loadDataBytes, Ids.OPEN_ACL_UNSAFE,\n                                          CreateMode.EPHEMERAL, new SafeAsyncZKCallback.StringCallback() {\n             @Override\n@@ -206,7 +208,7 @@ public void unregisterSelf() throws IOException {\n     @Override\n     public void uploadSelfLoadData(HubLoad selfLoad) {\n         logger.debug(\"Reporting hub load of {} : {}\", myHubInfo, selfLoad);\n-        byte[] loadDataBytes = selfLoad.toString().getBytes();\n+        byte[] loadDataBytes = selfLoad.toString().getBytes(UTF_8);\n         zk.setData(ephemeralNodePath, loadDataBytes, -1,\n                    loadReportingStatCallback, null);\n     }\n@@ -264,7 +266,7 @@ public void safeProcessResult(int rc, String path, Object ctx,\n                 synchronized (this) {\n                     if (rc == KeeperException.Code.OK.intValue()) {\n                         try {\n-                            HubLoad load = HubLoad.parse(new String(data));\n+                            HubLoad load = HubLoad.parse(new String(data, UTF_8));\n                             logger.debug(\"Found server {} with load: {}\", ctx, load);\n                             int compareRes = load.compareTo(minLoad);\n                             if (compareRes < 0 || (compareRes == 0 && rand.nextBoolean())) {"},{"sha":"d469c4c0ef555a3132fa3e026a0b3441ec2a64af","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/ZkTopicManager.java?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -31,6 +31,7 @@\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.data.Stat;\n \n+import static com.google.common.base.Charsets.UTF_8;\n import com.google.protobuf.ByteString;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.server.common.ServerConfiguration;\n@@ -205,7 +206,7 @@ public void safeProcessResult(int rc, String path, Object ctx, byte[] data, Stat\n \n                     // successfully did a read\n                     try {\n-                        HubInfo ownerHubInfo = HubInfo.parse(new String(data));\n+                        HubInfo ownerHubInfo = HubInfo.parse(new String(data, UTF_8));\n                         HedwigSocketAddress owner = ownerHubInfo.getAddress();\n                         if (!owner.equals(addr)) {\n                             if (logger.isDebugEnabled()) {\n@@ -244,8 +245,9 @@ public void claim() {\n                 logger.debug(\"claiming topic: \" + topic.toStringUtf8());\n             }\n \n-            ZkUtils.createFullPathOptimistic(zk, hubPath, myHubInfo.toString().getBytes(), Ids.OPEN_ACL_UNSAFE,\n-            CreateMode.EPHEMERAL, new SafeAsyncZKCallback.StringCallback() {\n+            ZkUtils.createFullPathOptimistic(zk, hubPath,\n+                    myHubInfo.toString().getBytes(UTF_8), Ids.OPEN_ACL_UNSAFE,\n+                    CreateMode.EPHEMERAL, new SafeAsyncZKCallback.StringCallback() {\n \n                 @Override\n                 public void safeProcessResult(int rc, String path, Object ctx, String name) {\n@@ -290,7 +292,7 @@ public void safeProcessResult(int rc, String path, Object ctx, byte[] data, Stat\n                     return;\n                 }\n \n-                String hubInfoStr = new String(data);\n+                String hubInfoStr = new String(data, UTF_8);\n                 try {\n                     HubInfo ownerHubInfo = HubInfo.parse(hubInfoStr);\n                     HedwigSocketAddress owner = ownerHubInfo.getAddress();"},{"sha":"cc4749e32e79ea9df4943c61bc6869dcec32e122","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f060c0d2745b47314562bc94ecb5f525e2addb07/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/f060c0d2745b47314562bc94ecb5f525e2addb07/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=f060c0d2745b47314562bc94ecb5f525e2addb07","patch":"@@ -49,7 +49,7 @@\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n         <artifactId>findbugs-maven-plugin</artifactId>\n-        <version>2.3.2</version>\n+        <version>2.5.2</version>\n       </plugin>\n       <plugin>\n         <artifactId>maven-compiler-plugin</artifactId>"}]}

