{"sha":"f0db18abedd30af1d6191d068652b93db0c68fc6","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMGRiMThhYmVkZDMwYWYxZDYxOTFkMDY4NjUyYjkzZGIwYzY4ZmM2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-09T16:18:07Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-09T16:18:07Z"},"message":"BOOKKEEPER-533: TestSubAfterCloseSub fails strangely in tests (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1430933 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1da49fc64f486b1af873a64b668dad7c38388b1d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1da49fc64f486b1af873a64b668dad7c38388b1d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f0db18abedd30af1d6191d068652b93db0c68fc6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f0db18abedd30af1d6191d068652b93db0c68fc6","html_url":"https://github.com/apache/bookkeeper/commit/f0db18abedd30af1d6191d068652b93db0c68fc6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f0db18abedd30af1d6191d068652b93db0c68fc6/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"55a6e1b983420b40813b327f67bbbff8196a8e41","url":"https://api.github.com/repos/apache/bookkeeper/commits/55a6e1b983420b40813b327f67bbbff8196a8e41","html_url":"https://github.com/apache/bookkeeper/commit/55a6e1b983420b40813b327f67bbbff8196a8e41"}],"stats":{"total":341,"additions":210,"deletions":131},"files":[{"sha":"95fe916333f499fea35ed08d37d0520b114f6f28","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -36,6 +36,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-483: precommit tests only check toplevel rat file, not the one for submodules. (ivank via fpj)\n \n+      BOOKKEEPER-533: TestSubAfterCloseSub fails strangely in tests (ivank via fpj)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)"},{"sha":"c0cdcd507badf98dc0c0b1ce13ca65772d905950","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":30,"deletions":1,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -264,6 +264,31 @@ public SyncThread(ServerConfiguration conf) {\n             flushInterval = conf.getFlushInterval();\n             LOG.debug(\"Flush Interval : {}\", flushInterval);\n         }\n+\n+        private Object suspensionLock = new Object();\n+        private boolean suspended = false;\n+\n+        /**\n+         * Suspend sync thread. (for testing)\n+         */\n+        @VisibleForTesting\n+        public void suspendSync() {\n+            synchronized(suspensionLock) {\n+                suspended = true;\n+            }\n+        }\n+\n+        /**\n+         * Resume sync thread. (for testing)\n+         */\n+        @VisibleForTesting\n+        public void resumeSync() {\n+            synchronized(suspensionLock) {\n+                suspended = false;\n+                suspensionLock.notify();\n+            }\n+        }\n+\n         @Override\n         public void run() {\n             try {\n@@ -279,7 +304,11 @@ public void run() {\n                             continue;\n                         }\n                     }\n-\n+                    synchronized (suspensionLock) {\n+                        while (suspended) {\n+                            suspensionLock.wait();\n+                        }\n+                    }\n                     // try to mark flushing flag to make sure it would not be interrupted\n                     // by shutdown during flushing. otherwise it will receive\n                     // ClosedByInterruptException which may cause index file & entry logger"},{"sha":"bbfd3dbc14f8442c45a594394dd322edfeb6ba97","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -27,6 +27,7 @@\n import java.util.List;\n import java.util.Random;\n \n+import com.google.common.annotations.VisibleForTesting;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.DiskChecker;\n import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n@@ -91,7 +92,7 @@ public boolean isDirFull(File dir) {\n     /**\n      * Add the dir to filled dirs list\n      */\n-    // VisibleForTesting\n+    @VisibleForTesting\n     public void addToFilledDirs(File dir) {\n         if (!filledDirs.contains(dir)) {\n             LOG.warn(dir + \" is out of space.\""},{"sha":"3c190fc18294aede723dde4229ca8a916ae171fb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -41,6 +41,8 @@\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n import org.apache.bookkeeper.util.MathUtils;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.cli.BasicParser;\n@@ -107,11 +109,27 @@ public InetSocketAddress getLocalAddress() {\n         }\n     }\n \n-    //VisibleForTesting\n+    @VisibleForTesting\n     public Bookie getBookie() {\n         return bookie;\n     }\n \n+    /**\n+     * Suspend processing of requests in the bookie (for testing)\n+     */\n+    @VisibleForTesting\n+    public void suspendProcessing() {\n+        nioServerFactory.suspendProcessing();\n+    }\n+\n+    /**\n+     * Resume processing requests in the bookie (for testing)\n+     */\n+    @VisibleForTesting\n+    public void resumeProcessing() {\n+        nioServerFactory.resumeProcessing();\n+    }\n+\n     public synchronized void shutdown() {\n         if (!running) {\n             return;"},{"sha":"8f205fe3c076ecd269b8e5b0077946044d020972","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -39,6 +39,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n /**\n  * This class handles communication with clients using NIO. There is one Cnxn\n  * per client, but only one thread doing the communication.\n@@ -74,6 +76,9 @@\n \n     ServerConfiguration conf;\n \n+    private Object suspensionLock = new Object();\n+    private boolean suspended = false;\n+\n     public NIOServerFactory(ServerConfiguration conf, PacketProcessor processor) throws IOException {\n         super(\"NIOServerFactory-\" + conf.getBookiePort());\n         setDaemon(true);\n@@ -99,11 +104,37 @@ public boolean isRunning() {\n         return !ss.socket().isClosed();\n     }\n \n+    /**\n+     * Stop nio server from processing requests. (for testing)\n+     */\n+    @VisibleForTesting\n+    public void suspendProcessing() {\n+        synchronized(suspensionLock) {\n+            suspended = true;\n+        }\n+    }\n+\n+    /**\n+     * Resume processing requests in nio server. (for testing)\n+     */\n+    @VisibleForTesting\n+    public void resumeProcessing() {\n+        synchronized(suspensionLock) {\n+            suspended = false;\n+            suspensionLock.notify();\n+        }\n+    }\n+\n     @Override\n     public void run() {\n         while (!ss.socket().isClosed()) {\n             try {\n                 selector.select(1000);\n+                synchronized(suspensionLock) {\n+                    while (suspended) {\n+                        suspensionLock.wait();\n+                    }\n+                }\n                 Set<SelectionKey> selected;\n                 synchronized (this) {\n                     selected = selector.selectedKeys();"},{"sha":"bc50158187fa19737f3154aa50b193978261cc62","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -21,6 +21,8 @@\n import java.io.File;\n import java.io.IOException;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n /**\n  * Class that provides utility functions for checking disk problems\n  */\n@@ -87,7 +89,7 @@ private static boolean mkdirsWithExistsCheck(File dir) {\n      *             Throws {@link DiskOutOfSpaceException} if available space is\n      *             less than threshhold.\n      */\n-    // VisibleForTesting\n+    @VisibleForTesting\n     void checkDiskFull(File dir) throws DiskOutOfSpaceException {\n         if (null == dir) {\n             return;\n@@ -140,7 +142,7 @@ public void checkDir(File dir) throws DiskErrorException,\n      * \n      * @return\n      */\n-    // VisibleForTesting\n+    @VisibleForTesting\n     float getDiskSpaceThreshold() {\n         return diskUsageThreshold;\n     }\n@@ -150,7 +152,7 @@ float getDiskSpaceThreshold() {\n      * \n      * @param diskSpaceThreshold\n      */\n-    // VisibleForTesting\n+    @VisibleForTesting\n     void setDiskSpaceThreshold(float diskSpaceThreshold) {\n         validateThreshold(diskSpaceThreshold);\n         this.diskUsageThreshold = diskSpaceThreshold;"},{"sha":"79f04fd44176e56963e6578bc71021907517d250","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","status":"renamed","additions":10,"deletions":23,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -1,4 +1,4 @@\n-package org.apache.bookkeeper.test;\n+package org.apache.bookkeeper.bookie;\n \n /*\n  *\n@@ -28,6 +28,7 @@\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -51,26 +52,12 @@ public IndexCorruptionTest() {\n         baseConf.setPageSize(pageSize);\n     }\n \n-    private Thread findSyncThread() {\n-        int threadCount = Thread.activeCount();\n-        Thread[] allthreads = new Thread[Thread.activeCount()];\n-        Thread.enumerate(allthreads);\n-        for (Thread t : allthreads) {\n-            if (t.getName().equals(\"SyncThread\")) {\n-                return t;\n-            }\n-        }\n-        return null;\n-    }\n-\n     @Test(timeout=60000)\n     public void testNoSuchLedger() throws Exception {\n         LOG.debug(\"Testing NoSuchLedger\");\n \n-        Thread syncThread = findSyncThread();\n-        assertNotNull(\"Not found SyncThread.\", syncThread);\n-\n-        syncThread.suspend();\n+        Bookie.SyncThread syncThread = bs.get(0).getBookie().syncThread;\n+        syncThread.suspendSync();\n         // Create a ledger\n         LedgerHandle lh = bkc.createLedger(1, 1, digestType, \"\".getBytes());\n \n@@ -85,7 +72,7 @@ public void testNoSuchLedger() throws Exception {\n             wlh.addEntry(dummyMsg.getBytes());\n         }\n \n-        syncThread.resume();\n+        syncThread.resumeSync();\n \n         // trigger sync \n         Thread.sleep(2 * baseConf.getFlushInterval());\n@@ -110,10 +97,10 @@ public void testNoSuchLedger() throws Exception {\n     public void testEmptyIndexPage() throws Exception {\n         LOG.debug(\"Testing EmptyIndexPage\");\n \n-        Thread syncThread = findSyncThread();\n+        Bookie.SyncThread syncThread = bs.get(0).getBookie().syncThread;\n         assertNotNull(\"Not found SyncThread.\", syncThread);\n \n-        syncThread.suspend();\n+        syncThread.suspendSync();\n \n         // Create a ledger\n         LedgerHandle lh1 = bkc.createLedger(1, 1, digestType, \"\".getBytes());\n@@ -127,12 +114,12 @@ public void testEmptyIndexPage() throws Exception {\n             lh2.addEntry(dummyMsg.getBytes());\n         }\n \n-        syncThread.resume();\n+        syncThread.resumeSync();\n \n         // trigger sync\n         Thread.sleep(2 * baseConf.getFlushInterval());\n \n-        syncThread.suspend();\n+        syncThread.suspendSync();\n \n         // Close ledger 1 which cause a readEntry(0) call\n         LedgerHandle newLh1 = bkc.openLedger(lh1.getId(), digestType, \"\".getBytes());\n@@ -142,7 +129,7 @@ public void testEmptyIndexPage() throws Exception {\n             lh2.addEntry(dummyMsg.getBytes());\n         }\n \n-        syncThread.resume();\n+        syncThread.resumeSync();\n \n         // wait for sync again\n         Thread.sleep(2 * baseConf.getFlushInterval());","previous_filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java"},{"sha":"58ae798b5bcbed3620558d4acad1d570b5b81e69","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":21,"deletions":27,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -272,30 +272,27 @@ public ServerConfiguration killBookie(int index) throws InterruptedException, IO\n      */\n     public CountDownLatch sleepBookie(InetSocketAddress addr, final int seconds)\n             throws InterruptedException, IOException {\n-        final CountDownLatch l = new CountDownLatch(1);\n-        final String name = \"NIOServerFactory-\" + addr.getPort();\n-        Thread[] allthreads = new Thread[Thread.activeCount()];\n-        Thread.enumerate(allthreads);\n-        for (final Thread t : allthreads) {\n-            if (t.getName().equals(name)) {\n+        for (final BookieServer bookie : bs) {\n+            if (bookie.getLocalAddress().equals(addr)) {\n+                final CountDownLatch l = new CountDownLatch(1);\n                 Thread sleeper = new Thread() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            t.suspend();\n-                            l.countDown();\n-                            Thread.sleep(seconds*1000);\n-                            t.resume();\n-                        } catch (Exception e) {\n-                            LOG.error(\"Error suspending thread\", e);\n+                        @Override\n+                        public void run() {\n+                            try {\n+                                bookie.suspendProcessing();\n+                                l.countDown();\n+                                Thread.sleep(seconds*1000);\n+                                bookie.resumeProcessing();\n+                            } catch (Exception e) {\n+                                LOG.error(\"Error suspending bookie\", e);\n+                            }\n                         }\n-                    }\n-                };\n+                    };\n                 sleeper.start();\n                 return l;\n             }\n         }\n-        throw new IOException(\"Bookie thread not found\");\n+        throw new IOException(\"Bookie not found\");\n     }\n \n     /**\n@@ -310,27 +307,24 @@ public void run() {\n      */\n     public void sleepBookie(InetSocketAddress addr, final CountDownLatch l)\n             throws InterruptedException, IOException {\n-        final String name = \"NIOServerFactory-\" + addr.getPort();\n-        Thread[] allthreads = new Thread[Thread.activeCount()];\n-        Thread.enumerate(allthreads);\n-        for (final Thread t : allthreads) {\n-            if (t.getName().equals(name)) {\n+        for (final BookieServer bookie : bs) {\n+            if (bookie.getLocalAddress().equals(addr)) {\n                 Thread sleeper = new Thread() {\n                     public void run() {\n                         try {\n-                            t.suspend();\n+                            bookie.suspendProcessing();\n                             l.await();\n-                            t.resume();\n+                            bookie.resumeProcessing();\n                         } catch (Exception e) {\n-                            LOG.error(\"Error suspending thread\", e);\n+                            LOG.error(\"Error suspending bookie\", e);\n                         }\n                     }\n                 };\n                 sleeper.start();\n                 return;\n             }\n         }\n-        throw new IOException(\"Bookie thread not found\");\n+        throw new IOException(\"Bookie not found\");\n     }\n \n     /**"},{"sha":"fb2b87a4d5a46be84fbf5cf6bc856e649dba64d9","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -33,6 +33,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.protobuf.ByteString;\n \n import org.apache.bookkeeper.util.MathUtils;\n@@ -116,6 +117,10 @@ public int compare(ActiveSubscriberState as1, ActiveSubscriberState as2) {\n     protected boolean keepRunning = true;\n     private final Thread workerThread;\n \n+    private Object suspensionLock = new Object();\n+    private boolean suspended = false;\n+\n+\n     public FIFODeliveryManager(PersistenceManager persistenceMgr, ServerConfiguration cfg) {\n         this.persistenceMgr = persistenceMgr;\n         perTopicDeliveryPtrs = new HashMap<ByteString, SortedMap<Long, Set<ActiveSubscriberState>>>();\n@@ -128,6 +133,27 @@ public void start() {\n         workerThread.start();\n     }\n \n+    /**\n+     * Stop FIFO delivery manager from processing requests. (for testing)\n+     */\n+    @VisibleForTesting\n+    public void suspendProcessing() {\n+        synchronized(suspensionLock) {\n+            suspended = true;\n+        }\n+    }\n+\n+    /**\n+     * Resume FIFO delivery manager. (for testing)\n+     */\n+    @VisibleForTesting\n+    public void resumeProcessing() {\n+        synchronized(suspensionLock) {\n+            suspended = false;\n+            suspensionLock.notify();\n+        }\n+    }\n+\n     /**\n      * ===================================================================== Our\n      * usual enqueue function, stop if error because of unbounded queue, should\n@@ -278,6 +304,11 @@ public void run() {\n                 // We use a timeout of 1 second, so that we can wake up once in\n                 // a while to check if there is something in the retry queue.\n                 request = requestQueue.poll(1, TimeUnit.SECONDS);\n+                synchronized(suspensionLock) {\n+                    while (suspended) {\n+                        suspensionLock.wait();\n+                    }\n+                }\n             } catch (InterruptedException e) {\n                 Thread.currentThread().interrupt();\n             }"},{"sha":"b802365963a0d68a91dd67aa70315e24d2cb86c9","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/PubSubServer.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -30,6 +30,7 @@\n import java.util.concurrent.SynchronousQueue;\n import java.util.concurrent.TimeUnit;\n \n+import com.google.common.annotations.VisibleForTesting;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.BKException;\n@@ -456,6 +457,11 @@ public PubSubServer(ServerConfiguration serverConfiguration) throws Exception {\n         this(serverConfiguration, new org.apache.hedwig.client.conf.ClientConfiguration());\n     }\n \n+    @VisibleForTesting\n+    public DeliveryManager getDeliveryManager() {\n+        return dm;\n+    }\n+\n     /**\n      *\n      * @param msg"},{"sha":"95c43fe36ebf3d6b50020d3b3ef342a62a0596ff","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","status":"modified","additions":25,"deletions":50,"changes":75,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -18,51 +18,27 @@\n package org.apache.hedwig.server.integration;\n \n import java.io.IOException;\n-import java.net.InetSocketAddress;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.HashSet;\n import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.SynchronousQueue;\n import java.util.concurrent.TimeUnit;\n \n-import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.api.Subscriber;\n-import org.apache.hedwig.client.conf.ClientConfiguration;\n-import org.apache.hedwig.client.exceptions.InvalidSubscriberIdException;\n-import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.client.api.Client;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n-import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n-import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n-import org.apache.hedwig.protocol.PubSubProtocol.OperationType;\n-import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;\n-import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n-import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n-import org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest;\n-import org.apache.hedwig.protocol.PubSubProtocol.StopDeliveryRequest;\n-import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n-import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n import org.apache.hedwig.server.HedwigHubTestBase;\n-import org.apache.hedwig.server.netty.WriteRecordingChannel;\n-import org.apache.hedwig.server.proxy.HedwigProxy;\n-import org.apache.hedwig.server.proxy.ProxyConfiguration;\n-import org.apache.hedwig.server.regions.HedwigHubClient;\n+import org.apache.hedwig.server.netty.PubSubServer;\n+import org.apache.hedwig.server.delivery.DeliveryManager;\n+import org.apache.hedwig.server.delivery.FIFODeliveryManager;\n import org.apache.hedwig.util.Callback;\n-import org.apache.hedwig.util.ConcurrencyUtils;\n-import org.apache.hedwig.util.HedwigSocketAddress;\n-import org.apache.bookkeeper.test.PortManager;\n-import org.apache.hedwig.server.LoggingExceptionHandler;\n \n public class TestSubAfterCloseSub extends HedwigHubTestBase {\n \n@@ -80,29 +56,28 @@ public boolean isSubscriptionChannelSharingEnabled() {\n         }\n     }\n \n-    private void sleepThread(final String name, final CountDownLatch wakeupLatch)\n-    throws IOException {\n-        Thread[] allthreads = new Thread[Thread.activeCount()];\n-        Thread.enumerate(allthreads);\n-        for (final Thread t : allthreads) {\n-            if (t.getName().equals(name)) {\n-                Thread sleeper = new Thread() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            t.suspend();\n-                            wakeupLatch.await();\n-                            t.resume();\n-                        } catch (Exception e) {\n-                            logger.error(\"Error suspending thread \" + name + \" : \", e);\n-                        }\n+    private void sleepDeliveryManager(final CountDownLatch wakeupLatch)\n+            throws IOException {\n+        PubSubServer server = serversList.get(0);\n+        assertNotNull(\"There should be at least one pubsub server\", server);\n+        DeliveryManager dm = server.getDeliveryManager();\n+        assertNotNull(\"Delivery manager should not be null once server has started\", dm);\n+        assertTrue(\"Delivery manager is wrong type\", dm instanceof FIFODeliveryManager);\n+        final FIFODeliveryManager fdm = (FIFODeliveryManager)dm;\n+\n+        Thread sleeper = new Thread() {\n+                @Override\n+                public void run() {\n+                    try {\n+                        fdm.suspendProcessing();\n+                        wakeupLatch.await();\n+                        fdm.resumeProcessing();\n+                    } catch (Exception e) {\n+                        logger.error(\"Error suspending delivery manager\", e);\n                     }\n-                };\n-                sleeper.start();\n-                return;\n-            }\n-        }\n-        throw new IOException(\"Could not find thread \" + name);\n+                }\n+            };\n+        sleeper.start();\n     }\n \n     /**\n@@ -136,7 +111,7 @@ private void runSubAfterCloseSubTest(boolean sharedSubscriptionChannel) throws E\n \n         try {\n             subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n-            sleepThread(\"DeliveryManagerThread\", wakeupLatch);\n+            sleepDeliveryManager(wakeupLatch);\n             subscriber.asyncCloseSubscription(topic, subid, new Callback<Void>() {\n                 @Override\n                 public void operationFinished(Object ctx, Void resultOfOperation) {"},{"sha":"0aefd00638f2aad3bca47cd59723826953d1e941","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -187,7 +187,19 @@ public void startAllBookieServers() throws Exception {\n             bookiesList.add(startBookie(conf));\n         }\n     }\n-    \n+\n+    public void suspendAllBookieServers() throws Exception {\n+        for (BookieServer bs : bookiesList) {\n+            bs.suspendProcessing();\n+        }\n+    }\n+\n+    public void resumeAllBookieServers() throws Exception {\n+        for (BookieServer bs : bookiesList) {\n+            bs.resumeProcessing();\n+        }\n+    }\n+\n     public void tearDownOneBookieServer() throws Exception {\n         Random r = new Random();\n         int bi = r.nextInt(bookiesList.size());"},{"sha":"e65c47a589b116ce23fbc3819f386da890f9b6de","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","status":"modified","additions":15,"deletions":24,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","raw_url":"https://github.com/apache/bookkeeper/raw/f0db18abedd30af1d6191d068652b93db0c68fc6/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java?ref=f0db18abedd30af1d6191d068652b93db0c68fc6","patch":"@@ -134,7 +134,7 @@ public void run() {\n                         // same ledger. since there is no permit, it blocks\n                         try {\n                             CountDownLatch latch = new CountDownLatch(1);\n-                            sleepBookie(8, latch);\n+                            sleepBookies(8, latch);\n                             latch.await();\n                             SynchronousQueue<Boolean> queue = new SynchronousQueue<Boolean>();\n                             for (int i=0; i<3; i++) {\n@@ -250,29 +250,20 @@ public void testDeadlock() throws Exception {\n         }\n     }\n \n-    protected void sleepBookie(final int seconds, final CountDownLatch l)\n-    throws InterruptedException, IOException {\n-        final String prefix = \"Bookie-\";\n-        Thread[] allThreads = new Thread[Thread.activeCount()];\n-        Thread.enumerate(allThreads);\n-        for (final Thread t : allThreads) {\n-            if (t.getName().startsWith(prefix)) {\n-                Thread sleeper = new Thread() {\n-                    public void run() {\n-                        try {\n-                            t.suspend();\n-                            l.countDown();\n-                            Thread.sleep(seconds * 1000);\n-                            t.resume();\n-                        } catch (Exception e) {\n-                            logger.error(\"Error suspending thread\", e);\n-                        }\n+    protected void sleepBookies(final int seconds, final CountDownLatch l)\n+            throws InterruptedException, IOException {\n+        Thread sleeper = new Thread() {\n+                public void run() {\n+                    try {\n+                        bktb.suspendAllBookieServers();\n+                        l.countDown();\n+                        Thread.sleep(seconds * 1000);\n+                        bktb.resumeAllBookieServers();\n+                    } catch (Exception e) {\n+                        logger.error(\"Error suspending thread\", e);\n                     }\n-                };\n-                sleeper.start();\n-                return;\n-            }\n-        }\n-        throw new IOException(\"Bookie thread not found\");\n+                }\n+            };\n+        sleeper.start();\n     }\n }"}]}

