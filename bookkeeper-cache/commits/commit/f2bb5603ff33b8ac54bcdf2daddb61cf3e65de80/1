{"sha":"f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMmJiNTYwM2ZmMzNiOGFjNTRiY2RmMmRhZGRiNjFjZjNlNjVkZTgw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-25T05:27:23Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-25T05:27:23Z"},"message":"BOOKKEEPER-557: Compiler error showing up badly with jdk 7 (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1460523 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dccd0e497b52719d0aa5743174c4d4f3a151b312","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dccd0e497b52719d0aa5743174c4d4f3a151b312"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","html_url":"https://github.com/apache/bookkeeper/commit/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"9868081b708b27f272e2a92cf04163996caf9544","url":"https://api.github.com/repos/apache/bookkeeper/commits/9868081b708b27f272e2a92cf04163996caf9544","html_url":"https://github.com/apache/bookkeeper/commit/9868081b708b27f272e2a92cf04163996caf9544"}],"stats":{"total":449,"additions":311,"deletions":138},"files":[{"sha":"775fb29952995150d57e597b314be145f0744775","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -50,6 +50,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-573: Script to start a bookkeeper cluster (ivank via sijie)\n \n+      BOOKKEEPER-557: Compiler error showing up badly with jdk 7 (ivank via sijie)\n+\n Release 4.2.0 - 2013-01-14\n \n   Non-backward compatible changes:"},{"sha":"968d5f8fc65b7d4097571248512dc6117a88ed7f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -120,7 +120,7 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n \n         final HashSet<InetSocketAddress> deadBookies;\n         synchronized (this) {\n-            deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n+            deadBookies = new HashSet<InetSocketAddress>(knownBookies);\n             deadBookies.removeAll(newBookieAddrs);\n             // No need to close readonly bookie clients.\n             deadBookies.removeAll(readOnlyBookieWatcher.getReadOnlyBookies());"},{"sha":"0366af465efc92d7b1f2d75f3eaedb5e09c503ae","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -188,7 +188,7 @@ public ClientConfiguration setClientTcpNoDelay(boolean noDelay) {\n      * @return zookeeper servers\n      */\n     public String getZkServers() {\n-        List<Object> servers = getList(ZK_SERVERS, null);\n+        List servers = getList(ZK_SERVERS, null);\n         if (null == servers || 0 == servers.size()) {\n             return \"localhost\";\n         }"},{"sha":"ddfc6a15d799fd5f50a6795155ac07a29a7dfcb5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -387,7 +387,7 @@ public ServerConfiguration setServerTcpNoDelay(boolean noDelay) {\n      * @return zookeeper servers\n      */\n     public String getZkServers() {\n-        List<Object> servers = getList(ZK_SERVERS, null);\n+        List servers = getList(ZK_SERVERS, null);\n         if (null == servers || 0 == servers.size()) {\n             return null;\n         }"},{"sha":"885ccafd2de08e1a27b1e17e8c37b1f90e6e2962","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -177,7 +177,7 @@ public void writeLedgerMetadata(final long ledgerId, final LedgerMetadata metada\n                    new StatCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx, Stat stat) {\n-                if (KeeperException.Code.BadVersion == rc) {\n+                if (KeeperException.Code.BADVERSION.intValue() == rc) {\n                     cb.operationComplete(BKException.Code.MetadataVersionException, null);\n                 } else if (KeeperException.Code.OK.intValue() == rc) {\n                     // update metadata version"},{"sha":"7c3cf5c994c7a8a61e8ad1cea70bab9c0c2720ec","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -133,16 +133,17 @@ public static LedgerManagerFactory newLedgerManagerFactory(\n         // handle pre V2 layout\n         if (layout.getLayoutFormatVersion() <= V1) {\n             // pre V2 layout we use type of ledger manager\n+            @SuppressWarnings(\"deprecation\")\n             String lmType = conf.getLedgerManagerType();\n-            if (lmType != null && !layout.getManagerType().equals(lmType)) {\n+            if (lmType != null && !layout.getManagerFactoryClass().equals(lmType)) {\n                 throw new IOException(\"Configured layout \" + lmType\n-                                    + \" does not match existing layout \"  + layout.getManagerType());\n+                        + \" does not match existing layout \"  + layout.getManagerFactoryClass());\n             }\n \n             // create the ledger manager\n-            if (FlatLedgerManagerFactory.NAME.equals(layout.getManagerType())) {\n+            if (FlatLedgerManagerFactory.NAME.equals(layout.getManagerFactoryClass())) {\n                 lmFactory = new FlatLedgerManagerFactory();\n-            } else if (HierarchicalLedgerManagerFactory.NAME.equals(layout.getManagerType())) {\n+            } else if (HierarchicalLedgerManagerFactory.NAME.equals(layout.getManagerFactoryClass())) {\n                 lmFactory = new HierarchicalLedgerManagerFactory();\n             } else {\n                 throw new IOException(\"Unknown ledger manager type: \" + lmType);\n@@ -189,6 +190,7 @@ private static LedgerManagerFactory createNewLMFactory(\n         // use default ledger manager factory if no one provided\n         if (factoryClass == null) {\n             // for backward compatibility, check manager type\n+            @SuppressWarnings(\"deprecation\")\n             String lmType = conf.getLedgerManagerType();\n             if (lmType == null) {\n                 factoryClass = FlatLedgerManagerFactory.class;"},{"sha":"1cb505fbfaebdba8706f4ac2de953e440dc39c58","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -42,7 +42,6 @@\n import org.jboss.netty.channel.ChannelFutureListener;\n import org.jboss.netty.channel.ChannelHandlerContext;\n import org.jboss.netty.channel.ChannelPipeline;\n-import org.jboss.netty.channel.ChannelPipelineCoverage;\n import org.jboss.netty.channel.ChannelPipelineFactory;\n import org.jboss.netty.channel.ChannelStateEvent;\n import org.jboss.netty.channel.Channels;\n@@ -66,8 +65,6 @@\n  * has reconnect logic if a connection to a bookie fails.\n  *\n  */\n-\n-@ChannelPipelineCoverage(\"one\")\n public class PerChannelBookieClient extends SimpleChannelHandler implements ChannelPipelineFactory {\n \n     static final Logger LOG = LoggerFactory.getLogger(PerChannelBookieClient.class);"},{"sha":"6735aaa267e8f4d9968149f6cda660acbdf0bf00","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -151,6 +151,7 @@ private synchronized void submitAuditTask() {\n                 return;\n             }\n             executor.submit(new Runnable() {\n+                    @SuppressWarnings(\"unchecked\")\n                     public void run() {\n                         try {\n                             waitIfLedgerReplicationDisabled();\n@@ -267,6 +268,7 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n         return zkc.getChildren(conf.getZkAvailableBookiesPath(), this);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private void auditingBookies(List<String> availableBookies)\n             throws BKAuditException, KeeperException, InterruptedException {\n "},{"sha":"e12f7c348c947973a96866af722170927706b34e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -287,9 +287,9 @@ public void testSpeculativeReadScheduling() throws Exception {\n         LedgerHandle l = bkspec.openLedger(id, digestType, passwd);\n \n         ArrayList<InetSocketAddress> ensemble = l.getLedgerMetadata().getEnsembles().get(0L);\n-        Set<InetSocketAddress> allHosts = new HashSet(ensemble);\n-        Set<InetSocketAddress> noHost = new HashSet();\n-        Set<InetSocketAddress> secondHostOnly = new HashSet();\n+        Set<InetSocketAddress> allHosts = new HashSet<InetSocketAddress>(ensemble);\n+        Set<InetSocketAddress> noHost = new HashSet<InetSocketAddress>();\n+        Set<InetSocketAddress> secondHostOnly = new HashSet<InetSocketAddress>();\n         secondHostOnly.add(ensemble.get(1));\n         PendingReadOp.LedgerEntryRequest req0 = null, req2 = null, req4 = null;\n         try {\n@@ -339,4 +339,4 @@ public void testSpeculativeReadScheduling() throws Exception {\n             bkspec.close();\n         }\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"6c2583f38786efd50d6057700f2d177056dc5bb1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -56,7 +56,7 @@ public void testLedgerLayout() throws Exception {\n         layout2.store(zkc, ledgerRootPath);\n \n         layout = LedgerLayout.readLayout(zkc, ledgerRootPath);\n-        assertEquals(testName, layout.getManagerType());\n+        assertEquals(testName, layout.getManagerFactoryClass());\n         assertEquals(testVersion, layout.getManagerVersion());\n     }\n \n@@ -141,7 +141,7 @@ public void testReadV1LedgerManagerLayout() throws Exception {\n \n         LedgerLayout layout = LedgerLayout.readLayout(zkc, conf.getZkLedgersRootPath());\n         assertNotNull(\"Should not be null\", layout);\n-        assertEquals(FlatLedgerManagerFactory.NAME, layout.getManagerType());\n+        assertEquals(FlatLedgerManagerFactory.NAME, layout.getManagerFactoryClass());\n         assertEquals(FlatLedgerManagerFactory.CUR_VERSION, layout.getManagerVersion());\n         assertEquals(1, layout.getLayoutFormatVersion());\n     }"},{"sha":"4a5863b5bba74f6037511201f015bcf8434b2450","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -111,6 +111,7 @@ public void testBadConf() throws Exception {\n     /**\n      * Test bad client configuration\n      */\n+    @SuppressWarnings(\"deprecation\")\n     @Test(timeout=60000)\n     public void testBadConfV1() throws Exception {\n         ClientConfiguration conf = new ClientConfiguration();"},{"sha":"2afa7492e0e1f438e63355b6543c7a8c0637d9fd","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -42,6 +42,7 @@ public BookieZKExpireTest() {\n         baseClientConf.setZkTimeout(6000);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     @Test(timeout=60000)\n     public void testBookieServerZKExpireBehaviour() throws Exception {\n         BookieServer server = null;"},{"sha":"8757f3bfb3de66a84b8eeaf02a636d572c07ca37","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -108,6 +108,7 @@ public void sleepServer(final int seconds, final CountDownLatch l)\n         for (final Thread t : allthreads) {\n             if (t.getName().contains(\"SyncThread:0\")) {\n                 Thread sleeper = new Thread() {\n+                    @SuppressWarnings(\"deprecation\")\n                     public void run() {\n                         try {\n                             t.suspend();"},{"sha":"4c23d5ce7b72a9f1aec221a916b485f2b0bbc560","filename":"hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/main/java/org/apache/hedwig/jms/spi/HedwigMessagingSessionFacade.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -31,6 +31,8 @@\n import org.apache.hedwig.jms.message.MessageImpl;\n import org.apache.hedwig.jms.message.MessageUtil;\n import org.apache.hedwig.protocol.PubSubProtocol;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.util.Callback;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -357,9 +359,10 @@ public void subscribeToTopic(String topicName, String subscribedId) throws JMSEx\n         }\n \n         try {\n+            SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n             hedwigClient.getSubscriber().subscribe(ByteString.copyFromUtf8(topicName),\n-                    ByteString.copyFromUtf8(subscribedId),\n-                PubSubProtocol.SubscribeRequest.CreateOrAttach.CREATE_OR_ATTACH);\n+                    ByteString.copyFromUtf8(subscribedId), opts);\n         } catch (PubSubException.CouldNotConnectException e) {\n             JMSException je = new JMSException(\"receive failed, could not connect .. \" + e);\n             je.setLinkedException(e);"},{"sha":"a47ba67185180a4a8a114520008840e72fdbd156","filename":"hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/test/java/org/apache/activemq/perf/ConnectionChurnTest.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -40,7 +40,7 @@\n \n     public void testPerformance() throws Exception {\n         ConnectionFactory factory = createConnectionFactory();\n-        List<Connection> list = new ArrayList();\n+        List<Connection> list = new ArrayList<Connection>();\n         for (int i = 0; i < CONNECTION_COUNT; i++) {\n             Connection connection = factory.createConnection();\n             connection.start();"},{"sha":"7833e019c3720720a65ef6aad4e58757ce767044","filename":"hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client-jms/src/test/java/org/apache/activemq/usecases/CompositePublishTest.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -42,6 +42,7 @@\n     protected MessageConsumer[] consumers;\n     protected List[] messageLists;\n \n+    @SuppressWarnings(\"unchecked\")\n     protected void setUp() throws Exception {\n         super.setUp();\n \n@@ -116,6 +117,7 @@ protected String getPrefix() {\n         return super.getSubject() + \".\";\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     protected void assertMessagesAreReceived() throws JMSException {\n         waitForMessagesToBeDelivered();\n         int size = messageLists.length;"},{"sha":"af075c02dae745b39c4d9c244b1f1e9e83bbe87a","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -26,6 +26,7 @@\n import org.apache.hedwig.client.benchmark.BenchmarkUtils.BenchmarkCallback;\n import org.apache.hedwig.client.benchmark.BenchmarkUtils.ThroughputLatencyAggregator;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.util.Callback;\n \n@@ -50,7 +51,9 @@ public BenchmarkPublisher(int numTopics, int numMessages, int numRegions, int st\n     public void warmup(int nWarmup) throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"warmup\" + partitionIndex);\n         ByteString subId = ByteString.copyFromUtf8(\"sub\");\n-        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subId, opts);\n \n         subscriber.startDelivery(topic, subId, new MessageHandler() {\n             @Override"},{"sha":"0f8cb7f381c7407e63601cf737cddab530d20123","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -35,6 +35,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.RegionSpecificSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.util.Callback;\n \n public class BenchmarkSubscriber extends BenchmarkWorker implements Callable<Void> {\n@@ -73,7 +74,9 @@ public Void call() throws Exception {\n \n             final String topic = HedwigBenchmark.TOPIC_PREFIX + i;\n \n-            subscriber.subscribe(ByteString.copyFromUtf8(topic), subId, CreateOrAttach.CREATE_OR_ATTACH);\n+            SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+            subscriber.subscribe(ByteString.copyFromUtf8(topic), subId, opts);\n             subscriber.startDelivery(ByteString.copyFromUtf8(topic), subId, new MessageHandler() {\n \n                 @Override\n@@ -130,7 +133,10 @@ void multiSub(String label, String topicPrefix, int start, final int npar, final\n             if (!HedwigBenchmark.amIResponsibleForTopic(i, partitionIndex, numPartitions)) {\n                 continue;\n             }\n-            subscriber.asyncSubscribe(ByteString.copyFromUtf8(topicPrefix + i), subId, CreateOrAttach.CREATE_OR_ATTACH,\n+            SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+            subscriber.asyncSubscribe(ByteString.copyFromUtf8(topicPrefix + i),\n+                                      subId, opts,\n                                       new BenchmarkCallback(agg), null);\n         }\n         // Wait till the benchmark test has completed"},{"sha":"7d2453aa29d477dd823ec0bbeb5a183e3efce531","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -52,6 +52,7 @@\n  * This is the Hedwig Netty specific implementation of the Subscriber interface.\n  *\n  */\n+@SuppressWarnings(\"deprecation\") // so that we can implemented the Deprecated subscribe methods without a warning\n public class HedwigSubscriber implements Subscriber {\n \n     private static Logger logger = LoggerFactory.getLogger(HedwigSubscriber.class);"},{"sha":"8b751ae8f45c73df85abec03ec301354215f76b5","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/HChannelHandler.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/HChannelHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/HChannelHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/HChannelHandler.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -26,7 +26,6 @@\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n import org.jboss.netty.channel.ChannelHandlerContext;\n-import org.jboss.netty.channel.ChannelPipelineCoverage;\n import org.jboss.netty.channel.ChannelStateEvent;\n import org.jboss.netty.channel.ExceptionEvent;\n import org.jboss.netty.channel.MessageEvent;\n@@ -48,7 +47,6 @@\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionEventResponse;\n import static org.apache.hedwig.util.VarArgs.va;\n \n-@ChannelPipelineCoverage(\"all\")\n public class HChannelHandler extends SimpleChannelHandler {\n \n     private static Logger logger = LoggerFactory.getLogger(HChannelHandler.class);\n@@ -267,7 +265,7 @@ public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) thr\n         // explicitly or the client has been stopped.\n         if (cfg.isSSLEnabled() && !channelClosedExplicitly && !channelManager.isClosed()) {\n             logger.debug(\"Initiating the SSL handshake\");\n-            ctx.getPipeline().get(SslHandler.class).handshake(e.getChannel());\n+            ctx.getPipeline().get(SslHandler.class).handshake();\n         }\n     }\n "},{"sha":"3a5ef5a5bd4920eebb34e5fbbf8297519a3cdf82","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/HedwigConsole.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -346,7 +346,9 @@ public boolean runCmd(String[] args) throws Exception {\n                 try {\n                     for (int j=startSub; j<=endSub; j++) {\n                         ByteString sub = ByteString.copyFromUtf8(subPrefix + j);\n-                        subscriber.subscribe(topic, sub, CreateOrAttach.CREATE_OR_ATTACH);\n+                        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+                        subscriber.subscribe(topic, sub, opts);\n                         subscriber.unsubscribe(topic, sub);\n                     }\n                     System.out.println(\"RMSUB \" + topic.toStringUtf8() + \" DONE\");\n@@ -471,7 +473,9 @@ public boolean runCmd(String[] args) throws Exception {\n             System.out.println(\"Starting PUBSUB test ...\");\n             try {\n                 // sub the topic\n-                subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+                SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                    .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+                subscriber.subscribe(topic, subId, opts);\n                 subscribed = true;\n \n                 System.out.println(\"Sub topic \" + topic.toStringUtf8() + \", subscriber id \" + subId.toStringUtf8());"},{"sha":"cdc0c339a1917f6da3212bd40f2ead3161e8cce2","filename":"hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/admin/console/JLineHedwigCompletor.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -68,21 +68,24 @@ public int complete(String buffer, int cursor, List candidates) {\n                     READTOPIC.equalsIgnoreCase(tokens[0]))) {\n             return completeTopic(buffer, tokens[1], candidates);\n         }\n-        List<String> cmds = HedwigCommands.findCandidateCommands(tokens);\n+        List cmds = HedwigCommands.findCandidateCommands(tokens);\n         return completeCommand(buffer, tokens[tokens.length - 1], cmds, candidates);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private int completeCommand(String buffer, String token,\n-            List<String> commands, List<String> candidates) {\n-        for (String cmd : commands) {\n-            if (cmd.startsWith(token)) {\n-                candidates.add(cmd);\n+            List commands, List candidates) {\n+        for (Object cmdo : commands) {\n+            assert (cmdo instanceof String);\n+            if (((String)cmdo).startsWith(token)) {\n+                candidates.add(cmdo);\n             }\n         }\n         return buffer.lastIndexOf(\" \") + 1;\n     }\n \n-    private int completeTopic(String buffer, String token, List<String> candidates) {\n+    @SuppressWarnings(\"unchecked\")\n+    private int completeTopic(String buffer, String token, List candidates) {\n         try {\n             Iterator<ByteString> children = admin.getTopics();\n             int i = 0;"},{"sha":"0261dc9e8f27534a0f333864af6246636cbce7b0","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/benchmark/FakeBookie.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -26,7 +26,7 @@\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.channel.ChannelHandlerContext;\n import org.jboss.netty.channel.ChannelPipeline;\n-import org.jboss.netty.channel.ChannelPipelineCoverage;\n+import org.jboss.netty.channel.ChannelHandler.Sharable;\n import org.jboss.netty.channel.ChannelPipelineFactory;\n import org.jboss.netty.channel.Channels;\n import org.jboss.netty.channel.MessageEvent;\n@@ -38,7 +38,7 @@\n import org.jboss.netty.logging.InternalLoggerFactory;\n import org.jboss.netty.logging.Log4JLoggerFactory;\n \n-@ChannelPipelineCoverage(\"all\")\n+@Sharable\n public class FakeBookie extends SimpleChannelHandler implements\n     ChannelPipelineFactory {\n     static final Logger logger = LoggerFactory.getLogger(FakeBookie.class);"},{"sha":"cabf1faa9573b6fafd2225671c6ee9d9ef9ac323","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -264,7 +264,7 @@ public HedwigSocketAddress getServerAddr() {\n      * @return String\n      */\n     public String getZkHost() {\n-        List<Object> servers = conf.getList(ZK_HOST, null);\n+        List servers = conf.getList(ZK_HOST, null);\n         if (null == servers || 0 == servers.size()) {\n             return \"localhost\";\n         }\n@@ -447,6 +447,7 @@ public int getBkEnsembleSize() {\n      * copies of each ledger entry is written).\n      * \n      * @return int\n+     * @deprecated please use #getBkWriteQuorumSize() and #getBkAckQuorumSize()\n      */\n     @Deprecated\n     protected int getBkQuorumSize() {"},{"sha":"9b5fe08bd146bb937908c47d2a625f48f1916924","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -274,7 +274,7 @@ public void safeProcessResult(int rc, String path, Object ctx, Stat stat) {\n                             callback.operationFailed(ctx, PubSubException.create(StatusCode.NO_TOPIC_PERSISTENCE_INFO,\n                                                           \"No persistence info found for topic \" + topic.toStringUtf8()));\n                             return;\n-                        } else if (rc == Code.BadVersion) {\n+                        } else if (rc == Code.BADVERSION.intValue()) {\n                             // bad version\n                             callback.operationFailed(ctx, PubSubException.create(StatusCode.BAD_VERSION,\n                                                           \"Bad version provided to update persistence info of topic \" + topic.toStringUtf8()));\n@@ -318,7 +318,7 @@ public void safeProcessResult(int rc, String path, Object ctx) {\n                         callback.operationFailed(ctx, PubSubException.create(StatusCode.NO_TOPIC_PERSISTENCE_INFO,\n                                                       \"No persistence info found for topic \" + topic.toStringUtf8()));\n                         return;\n-                    } else if (rc == Code.BadVersion) {\n+                    } else if (rc == Code.BADVERSION.intValue()) {\n                         // bad version\n                         callback.operationFailed(ctx, PubSubException.create(StatusCode.BAD_VERSION,\n                                                       \"Bad version provided to delete persistence info of topic \" + topic.toStringUtf8()));\n@@ -449,7 +449,7 @@ public void safeProcessResult(int rc, String path, Object ctx, Stat stat) {\n                                                       \"No subscription state found for (topic:\" + topic.toStringUtf8() + \", subscriber:\"\n                                                       + subscriberId.toStringUtf8() + \").\"));\n                         return;\n-                    } else if (rc == Code.BadVersion) {\n+                    } else if (rc == Code.BADVERSION.intValue()) {\n                         // bad version\n                         callback.operationFailed(ctx, PubSubException.create(StatusCode.BAD_VERSION,\n                                                       \"Bad version provided to replace subscription data of topic \" \n@@ -503,7 +503,7 @@ public void safeProcessResult(int rc, String path, Object ctx) {\n                                                       \"No subscription state found for (topic:\" + topic.toStringUtf8() + \", subscriber:\"\n                                                       + subscriberId.toStringUtf8() + \").\"));\n                         return;\n-                    } else if (rc == Code.BadVersion) {\n+                    } else if (rc == Code.BADVERSION.intValue()) {\n                         // bad version\n                         callback.operationFailed(ctx, PubSubException.create(StatusCode.BAD_VERSION,\n                                                       \"Bad version provided to delete subscription data of topic \" \n@@ -737,7 +737,7 @@ public void safeProcessResult(int rc, String path, Object ctx, Stat stat) {\n                         callback.operationFailed(ctx, PubSubException.create(StatusCode.NO_TOPIC_OWNER_INFO,\n                                                       \"No owner info found for topic \" + topic.toStringUtf8()));\n                         return;\n-                    } else if (rc == Code.BadVersion) {\n+                    } else if (rc == Code.BADVERSION.intValue()) {\n                         // bad version\n                         callback.operationFailed(ctx, PubSubException.create(StatusCode.BAD_VERSION,\n                                                       \"Bad version provided to update owner info of topic \" + topic.toStringUtf8()));\n@@ -811,7 +811,7 @@ public void safeProcessResult(int rc, String path, Object ctx) {\n                         callback.operationFailed(ctx, PubSubException.create(StatusCode.NO_TOPIC_OWNER_INFO,\n                                                       \"No owner info found for topic \" + topic.toStringUtf8()));\n                         return;\n-                    } else if (Code.BadVersion == rc) {\n+                    } else if (Code.BADVERSION.intValue() == rc) {\n                         // bad version\n                         callback.operationFailed(ctx, PubSubException.create(StatusCode.BAD_VERSION,\n                                                       \"Bad version provided to delete owner info of topic \" + topic.toStringUtf8()));"},{"sha":"a3be99a1d4add961fd794c3bdbed1988ef0c00ae","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/netty/UmbrellaHandler.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -26,7 +26,7 @@\n import org.jboss.netty.channel.ChannelFuture;\n import org.jboss.netty.channel.ChannelFutureListener;\n import org.jboss.netty.channel.ChannelHandlerContext;\n-import org.jboss.netty.channel.ChannelPipelineCoverage;\n+import org.jboss.netty.channel.ChannelHandler.Sharable;\n import org.jboss.netty.channel.ChannelStateEvent;\n import org.jboss.netty.channel.ExceptionEvent;\n import org.jboss.netty.channel.MessageEvent;\n@@ -44,7 +44,7 @@\n import org.apache.hedwig.server.handlers.ChannelDisconnectListener;\n import org.apache.hedwig.server.handlers.Handler;\n \n-@ChannelPipelineCoverage(\"all\")\n+@Sharable\n public class UmbrellaHandler extends SimpleChannelHandler {\n     static Logger logger = LoggerFactory.getLogger(UmbrellaHandler.class);\n \n@@ -100,7 +100,7 @@ public void channelOpen(ChannelHandlerContext ctx, ChannelStateEvent e) throws E\n     @Override\n     public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {\n         if (isSSLEnabled) {\n-            ctx.getPipeline().get(SslHandler.class).handshake(e.getChannel()).addListener(new ChannelFutureListener() {\n+            ctx.getPipeline().get(SslHandler.class).handshake().addListener(new ChannelFutureListener() {\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         logger.debug(\"SSL handshake has completed successfully!\");"},{"sha":"69860048f54689da1995b2591674d5d13017313e","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/proxy/ProxySubscribeHandler.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -26,6 +26,7 @@\n import org.apache.hedwig.exceptions.PubSubException.TopicBusyException;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.protoextensions.PubSubResponseUtils;\n import org.apache.hedwig.server.handlers.ChannelDisconnectListener;\n import org.apache.hedwig.server.handlers.Handler;\n@@ -59,9 +60,11 @@ public void handleRequest(final PubSubRequest request, final Channel channel) {\n \n         SubscribeRequest subRequest = request.getSubscribeRequest();\n         final TopicSubscriber topicSubscriber = new TopicSubscriber(request.getTopic(), subRequest.getSubscriberId());\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(subRequest.getCreateOrAttach()).build();\n \n-        subscriber.asyncSubscribe(topicSubscriber.getTopic(), subRequest.getSubscriberId(), subRequest\n-        .getCreateOrAttach(), new Callback<Void>() {\n+        subscriber.asyncSubscribe(topicSubscriber.getTopic(), subRequest.getSubscriberId(),\n+                                  opts, new Callback<Void>() {\n             @Override\n             public void operationFailed(Object ctx, PubSubException exception) {\n                 channel.write(PubSubResponseUtils.getResponseForException(exception, request.getTxnId()));"},{"sha":"f11c4160540fa624fe4e0a52b591851cf80706ec","filename":"hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/zookeeper/ZkUtils.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -68,7 +68,7 @@ public void safeProcessResult(final int rc, String path, Object ctx, String name\n         }\n \n         if (Code.OK.intValue() != syncObj.rc) {\n-            throw KeeperException.create(syncObj.rc, syncObj.path);\n+            throw KeeperException.create(KeeperException.Code.get(syncObj.rc), syncObj.path);\n         }\n     }\n "},{"sha":"aabd8cfb4677f5a50356f809d29c95c2e77fc692","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","status":"modified","additions":30,"deletions":11,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestPubSubClient.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -222,7 +222,9 @@ public void testSyncPublishWithResponse() throws Exception {\n         final Map<String, MessageSeqId> receivedMsgs =\n             new HashMap<String, MessageSeqId>();\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.startDelivery(topic, subid, new MessageHandler() {\n             synchronized public void deliver(ByteString topic, ByteString subscriberId,\n                                              Message msg, Callback<Void> callback,\n@@ -286,7 +288,9 @@ public void testAsyncPublishWithResponse() throws Exception {\n         final Map<String, MessageSeqId> receivedMsgs =\n             new HashMap<String, MessageSeqId>();\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.startDelivery(topic, subid, new MessageHandler() {\n             synchronized public void deliver(ByteString topic, ByteString subscriberId,\n                                              Message msg, Callback<Void> callback,\n@@ -361,7 +365,9 @@ public void testMultipleAsyncPublish() throws Exception {\n     public void testSyncSubscribe() throws Exception {\n         boolean subscribeSuccess = true;\n         try {\n-            subscriber.subscribe(ByteString.copyFromUtf8(\"mySyncSubscribeTopic\"), ByteString.copyFromUtf8(\"1\"), CreateOrAttach.CREATE_OR_ATTACH);\n+            SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+            subscriber.subscribe(ByteString.copyFromUtf8(\"mySyncSubscribeTopic\"), ByteString.copyFromUtf8(\"1\"), opts);\n         } catch (Exception e) {\n             subscribeSuccess = false;\n         }\n@@ -370,16 +376,20 @@ public void testSyncSubscribe() throws Exception {\n \n     @Test(timeout=60000)\n     public void testAsyncSubscribe() throws Exception {\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n         subscriber.asyncSubscribe(ByteString.copyFromUtf8(\"myAsyncSubscribeTopic\"), ByteString.copyFromUtf8(\"1\"),\n-                                  CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(), null);\n+                                  opts, new TestCallback(), null);\n         assertTrue(queue.take());\n     }\n \n     @Test(timeout=60000)\n     public void testStartDeliveryAfterCloseSub() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"testStartDeliveryAfterCloseSub\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysubid\");\n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n \n         // Start delivery for the subscriber\n         subscriber.startDelivery(topic, subid, new TestMessageHandler());\n@@ -394,7 +404,7 @@ public void testStartDeliveryAfterCloseSub() throws Exception {\n         subscriber.closeSubscription(topic, subid);\n \n         // subscribe again\n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.startDelivery(topic, subid, new TestMessageHandler());\n \n         publisher.publish(topic, Message.newBuilder()\n@@ -406,7 +416,10 @@ public void testStartDeliveryAfterCloseSub() throws Exception {\n     public void testSubscribeAndConsume() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"myConsumeTopic\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"1\");\n-        subscriber.asyncSubscribe(topic, subscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(), null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n+        subscriber.asyncSubscribe(topic, subscriberId, opts, new TestCallback(), null);\n         assertTrue(queue.take());\n \n         // Start delivery for the subscriber\n@@ -440,7 +453,9 @@ public void testSubscribeAndConsume() throws Exception {\n     public void testAsyncSubscribeAndUnsubscribe() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"myAsyncUnsubTopic\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"1\");\n-        subscriber.asyncSubscribe(topic, subscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(), null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.asyncSubscribe(topic, subscriberId, opts, new TestCallback(), null);\n         assertTrue(queue.take());\n         subscriber.asyncUnsubscribe(topic, subscriberId, new TestCallback(), null);\n         assertTrue(queue.take());\n@@ -463,7 +478,9 @@ public void testSyncUnsubscribeWithoutSubscription() throws Exception {\n     public void testAsyncSubscribeAndCloseSubscription() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"myAsyncSubAndCloseSubTopic\");\n         ByteString subscriberId = ByteString.copyFromUtf8(\"1\");\n-        subscriber.asyncSubscribe(topic, subscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(), null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.asyncSubscribe(topic, subscriberId, opts, new TestCallback(), null);\n         assertTrue(queue.take());\n         subscriber.closeSubscription(topic, subscriberId);\n         assertTrue(true);\n@@ -474,11 +491,13 @@ public void testSubClosesubAndPublish() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"mySubClosesubAndPublish\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n         // to populate startServing/stopServing sequeuence\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n         for (int i=0; i<5; i++) {\n-            subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+            subscriber.subscribe(topic, subid, opts);\n             subscriber.closeSubscription(topic, subid);\n         }\n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.startDelivery(topic, subid, new TestMessageHandler());\n         for (int i=0; i<3; i++) {\n             publisher.asyncPublish(topic,"},{"sha":"b3501c9259a65e5866c31f618c19bf8795f1b473","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -27,6 +27,7 @@\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.server.HedwigHubTestBase;\n import org.apache.hedwig.server.delivery.DeliveryManager;\n import org.apache.hedwig.server.delivery.FIFODeliveryManager;\n@@ -106,7 +107,9 @@ private void runSubAfterCloseSubTest(boolean sharedSubscriptionChannel) throws E\n         final CountDownLatch deliverLatch = new CountDownLatch(1);\n \n         try {\n-            subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+            SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+            subscriber.subscribe(topic, subid, opts);\n             sleepDeliveryManager(wakeupLatch);\n             subscriber.asyncCloseSubscription(topic, subid, new Callback<Void>() {\n                 @Override\n@@ -118,7 +121,10 @@ public void operationFailed(Object ctx, PubSubException exception) {\n                     logger.error(\"Closesub failed : \", exception);\n                 }\n             }, null);\n-            subscriber.asyncSubscribe(topic, subid, CreateOrAttach.ATTACH, new Callback<Void>() {\n+\n+            SubscriptionOptions optsAttach = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.ATTACH).build();\n+            subscriber.asyncSubscribe(topic, subid, optsAttach, new Callback<Void>() {\n                 @Override\n                 public void operationFinished(Object ctx, Void resultOfOperation) {\n                     try {\n@@ -181,9 +187,14 @@ public void testSimpleClientDoesntGetTopicBusy() throws Exception {\n             final ByteString topic = ByteString.copyFromUtf8(\"TestSimpleClientTopicBusy\");\n             final ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n-            subscriber1.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+            SubscriptionOptions opts1 = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+            subscriber1.subscribe(topic, subid, opts1);\n             subscriber1.closeSubscription(topic, subid);\n-            subscriber2.subscribe(topic, subid, CreateOrAttach.ATTACH);\n+\n+            SubscriptionOptions opts2 = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.ATTACH).build();\n+            subscriber2.subscribe(topic, subid, opts2);\n             subscriber2.closeSubscription(topic, subid);\n \n             client1.close();"},{"sha":"bcf384462cf2e2d80cc69a8a260190192032bead","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","status":"modified","additions":20,"deletions":12,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/netty/TestMultiplexing.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -33,6 +33,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.server.HedwigHubTestBase;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.util.Callback;\n@@ -270,10 +271,13 @@ public void testStopDelivery() throws Exception {\n         TestMessageHandler csHandler22 =\n             new TestMessageHandler(1, X, true, X);\n \n-        subscriber.subscribe(topic1, subid1, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic1, subid2, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic2, subid1, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic2, subid2, CreateOrAttach.CREATE);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE).build();\n+\n+        subscriber.subscribe(topic1, subid1, opts);\n+        subscriber.subscribe(topic1, subid2, opts);\n+        subscriber.subscribe(topic2, subid1, opts);\n+        subscriber.subscribe(topic2, subid2, opts);\n \n         // start deliveries\n         subscriber.startDelivery(topic1, subid1, csHandler11);\n@@ -330,10 +334,12 @@ public void testCloseSubscription() throws Exception {\n         TestMessageHandler csHandler22 =\n             new TestMessageHandler(1, X, true, X);\n \n-        subscriber.subscribe(topic1, subid1, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic1, subid2, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic2, subid1, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic2, subid2, CreateOrAttach.CREATE);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE).build();\n+        subscriber.subscribe(topic1, subid1, opts);\n+        subscriber.subscribe(topic1, subid2, opts);\n+        subscriber.subscribe(topic2, subid1, opts);\n+        subscriber.subscribe(topic2, subid2, opts);\n \n         // start deliveries\n         subscriber.startDelivery(topic1, subid1, csHandler11);\n@@ -390,10 +396,12 @@ public void testThrottle() throws Exception {\n         ThrottleMessageHandler csHandler22 =\n             new ThrottleMessageHandler(1, 3*X, false, X);\n \n-        subscriber.subscribe(topic1, subid1, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic1, subid2, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic2, subid1, CreateOrAttach.CREATE);\n-        subscriber.subscribe(topic2, subid2, CreateOrAttach.CREATE);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE).build();\n+        subscriber.subscribe(topic1, subid1, opts);\n+        subscriber.subscribe(topic1, subid2, opts);\n+        subscriber.subscribe(topic2, subid1, opts);\n+        subscriber.subscribe(topic2, subid2, opts);\n \n         // start deliveries\n         subscriber.startDelivery(topic1, subid1, csHandler11);"},{"sha":"8da109e3511146de02335464e36097d0f9e5653d","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -675,7 +675,11 @@ void sendXExpectLastY(ByteString topic, ByteString subid, final int x, final int\n                 publisher.publish(topic, org.apache.hedwig.protocol.PubSubProtocol.Message.newBuilder().setBody(\n                                          ByteString.copyFromUtf8(String.valueOf(i))).build());\n             }\n-            subscriber.subscribe(topic, subid, org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.ATTACH);\n+            org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions opts\n+                = org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.ATTACH)\n+                .build();\n+            subscriber.subscribe(topic, subid, opts);\n \n             final AtomicInteger expected = new AtomicInteger(x - y);\n             final CountDownLatch latch = new CountDownLatch(1);\n@@ -744,7 +748,12 @@ public boolean testMessage(org.apache.hedwig.protocol.PubSubProtocol.Message msg\n             };\n             filter.initialize(conf.getConf());\n \n-            subscriber.subscribe(topic, subid, org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.ATTACH);\n+\n+            org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions opts\n+                = org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.ATTACH)\n+                .build();\n+            subscriber.subscribe(topic, subid, opts);\n             final int base = start + M - start % M;\n             final AtomicInteger expected = new AtomicInteger(base);\n             final CountDownLatch latch = new CountDownLatch(1);"},{"sha":"0f05b835902b2db200f9f3e2f9c2c5e0d7e5cd44","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -106,7 +106,9 @@ private void throttleX(Publisher pub, final Subscriber sub,\n             pub.publish(topic, Message.newBuilder().setBody(\n                                ByteString.copyFromUtf8(String.valueOf(i))).build());\n         }\n-        sub.subscribe(topic, subid, CreateOrAttach.ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.ATTACH).build();\n+        sub.subscribe(topic, subid, opts);\n \n         final AtomicInteger expected = new AtomicInteger(1);\n         final CountDownLatch throttleLatch = new CountDownLatch(1);\n@@ -207,7 +209,9 @@ public void testServerSideThrottle() throws Exception {\n \n         ByteString topic = ByteString.copyFromUtf8(\"testServerSideThrottle\"); \n         ByteString subid = ByteString.copyFromUtf8(\"serverThrottleSub\");\n-        sub.subscribe(topic, subid, CreateOrAttach.CREATE);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE).build();\n+        sub.subscribe(topic, subid, opts);\n         sub.closeSubscription(topic, subid);\n \n         // throttle with hub server's setting"},{"sha":"8e9b8f6689a235dc8c68f2b75fb13e400c2c84c7","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","status":"modified","additions":24,"deletions":8,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/filter/TestMessageFilter.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -253,7 +253,9 @@ public void testServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.closeSubscription(topic, subid);\n         publishNums(topic, 0, 100, 2);\n         receiveNumModM(topic, subid, ModMessageFilter.class.getName(), null, 0, 50, 2, true);\n@@ -282,7 +284,9 @@ public void testChangeSubscriptionPreferences() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeSubscriptionPreferences\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.closeSubscription(topic, subid);\n \n         publishNums(topic, 0, 100, 2);\n@@ -304,7 +308,9 @@ public void testChangeServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.closeSubscription(topic, subid);\n \n         publishNums(topic, 0, 100, 3);\n@@ -321,7 +327,9 @@ public void testFixInvalidServerSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestFixMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.closeSubscription(topic, subid);\n \n         publishNums(topic, 0, 100, 3);\n@@ -340,7 +348,9 @@ public void testFixInvalidServerSideMessageFilter() throws Exception {\n     public void testNullClientMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestNullClientMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         try {\n             subscriber.startDeliveryWithFilter(topic, subid, null, new ModMessageFilter());\n             fail(\"Should fail start delivery with filter using null message handler.\");\n@@ -364,7 +374,9 @@ public void testClientSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestClientMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.closeSubscription(topic, subid);\n         publishNums(topic, 0, 100, 2);\n         receiveNumModM(topic, subid, null, new ModMessageFilter(), 0, 50, 2, true);\n@@ -375,7 +387,9 @@ public void testChangeSubscriptionPreferencesForClientFilter() throws Exception\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeSubscriptionPreferencesForClientFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.closeSubscription(topic, subid);\n \n         publishNums(topic, 0, 100, 2);\n@@ -389,7 +403,9 @@ public void testChangeClientSideMessageFilter() throws Exception {\n         ByteString topic = ByteString.copyFromUtf8(\"TestChangeClientSideMessageFilter\");\n         ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n \n-        subscriber.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subid, opts);\n         subscriber.closeSubscription(topic, subid);\n \n         publishNums(topic, 0, 100, 3);"},{"sha":"2117f8ff003ccf0dabb9932ca403ae9ea0803e89","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","status":"modified","additions":61,"deletions":23,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigHub.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -48,6 +48,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.StartDeliveryRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.StopDeliveryRequest;\n import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n import org.apache.hedwig.server.HedwigHubTestBase;\n@@ -300,7 +301,9 @@ protected void subscribeToTopics(int batchSize) throws Exception {\n         if (logger.isDebugEnabled())\n             logger.debug(\"Subscribing to topics and starting delivery.\");\n         for (int i = 0; i < batchSize; i++) {\n-            subscriber.asyncSubscribe(getTopic(i), localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH,\n+            SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+            subscriber.asyncSubscribe(getTopic(i), localSubscriberId, opts,\n                                       new TestCallback(queue), null);\n             assertTrue(queue.take());\n         }\n@@ -347,7 +350,9 @@ public boolean isAutoSendConsumeMessageEnabled() {\n         Publisher myPublisher = myClient.getPublisher();\n         ByteString myTopic = getTopic(0);\n         // Subscribe to a topic and start delivery on it\n-        mySubscriber.asyncSubscribe(myTopic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH,\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        mySubscriber.asyncSubscribe(myTopic, localSubscriberId, opts,\n                                     new TestCallback(queue), null);\n         assertTrue(queue.take());\n         startDelivery(mySubscriber, myTopic, localSubscriberId, new TestMessageHandler(consumeQueue));\n@@ -384,14 +389,20 @@ public boolean isAutoSendConsumeMessageEnabled() {\n     @Test(timeout=10000)\n     public void testAttachToSubscriptionSuccess() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(queue),\n+        SubscriptionOptions opts1 = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts1, new TestCallback(queue),\n                                   null);\n         assertTrue(queue.take());\n         // Close the subscription asynchronously\n         subscriber.asyncCloseSubscription(topic, localSubscriberId, new TestCallback(queue), null);\n         assertTrue(queue.take());\n+\n+        SubscriptionOptions opts2 = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.ATTACH).build();\n         // Now try to attach to the subscription\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.ATTACH, new TestCallback(queue), null);\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts2, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         // Start delivery and publish some messages. Make sure they are consumed\n         // correctly.\n@@ -437,8 +448,10 @@ public void testServerFailover() throws Exception {\n     @Test(timeout=10000)\n     public void testUnsubscribe() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(queue),\n-                                  null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         startDelivery(topic, localSubscriberId, new TestMessageHandler(consumeQueue));\n         publisher.asyncPublish(topic, getMsg(0), new TestCallback(queue), null);\n@@ -488,8 +501,9 @@ public void testAsyncUnsubscribeWithoutSubscription() throws Exception {\n     @Test(timeout=10000)\n     public void testCloseSubscription() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(queue),\n-                                  null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         startDelivery(topic, localSubscriberId, new TestMessageHandler(consumeQueue));\n         publisher.asyncPublish(topic, getMsg(0), new TestCallback(queue), null);\n@@ -520,8 +534,10 @@ public void run() {\n     @Test(timeout=10000)\n     public void testStartDeliveryTwice() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(queue),\n-                                  null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         startDelivery(topic, localSubscriberId, new TestMessageHandler(consumeQueue));\n         try {\n@@ -534,8 +550,10 @@ public void testStartDeliveryTwice() throws Exception {\n     @Test(timeout=10000)\n     public void testStopDelivery() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(queue),\n-                                  null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         startDelivery(topic, localSubscriberId, new TestMessageHandler(consumeQueue));\n         publisher.asyncPublish(topic, getMsg(0), new TestCallback(queue), null);\n@@ -575,8 +593,10 @@ public void run() {\n     @Test(timeout=10000)\n     public void testConsumedMessagesInOrder() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(queue),\n-                                  null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         startDelivery(topic, localSubscriberId, new TestMessageHandler(consumeQueue));\n         // Now publish some messages and verify that they are delivered in order\n@@ -596,21 +616,28 @@ public void testConsumedMessagesInOrder() throws Exception {\n     @Test(timeout=10000)\n     public void testCreateSubscriptionFailure() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(queue),\n-                                  null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         // Close the subscription asynchronously\n         subscriber.asyncCloseSubscription(topic, localSubscriberId, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         // Now try to create the subscription when it already exists\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE, new TestCallback(queue), null);\n+        SubscriptionOptions optsCreate = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE).build();\n+\n+        subscriber.asyncSubscribe(topic, localSubscriberId, optsCreate, new TestCallback(queue), null);\n         assertFalse(queue.take());\n     }\n \n     @Test(timeout=10000)\n     public void testCreateSubscriptionSuccess() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.CREATE, new TestCallback(queue), null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE).build();\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts, new TestCallback(queue), null);\n         assertTrue(queue.take());\n         startDelivery(topic, localSubscriberId, new TestMessageHandler(consumeQueue));\n         int batchSize = 5;\n@@ -624,7 +651,10 @@ public void testCreateSubscriptionSuccess() throws Exception {\n     @Test(timeout=10000)\n     public void testAttachToSubscriptionFailure() throws Exception {\n         ByteString topic = getTopic(0);\n-        subscriber.asyncSubscribe(topic, localSubscriberId, CreateOrAttach.ATTACH, new TestCallback(queue), null);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.ATTACH).build();\n+\n+        subscriber.asyncSubscribe(topic, localSubscriberId, opts, new TestCallback(queue), null);\n         assertFalse(queue.take());\n     }\n \n@@ -635,7 +665,9 @@ public void testAttachToSubscriptionFailure() throws Exception {\n     public void testSyncSubscribeWithInvalidSubscriberId() throws Exception {\n         boolean subscribeSuccess = false;\n         try {\n-            subscriber.subscribe(getTopic(0), hubSubscriberId, CreateOrAttach.CREATE_OR_ATTACH);\n+            SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+            subscriber.subscribe(getTopic(0), hubSubscriberId, opts);\n         } catch (InvalidSubscriberIdException e) {\n             subscribeSuccess = true;\n         } catch (Exception ex) {\n@@ -646,7 +678,9 @@ public void testSyncSubscribeWithInvalidSubscriberId() throws Exception {\n \n     @Test(timeout=10000)\n     public void testAsyncSubscribeWithInvalidSubscriberId() throws Exception {\n-        subscriber.asyncSubscribe(getTopic(0), hubSubscriberId, CreateOrAttach.CREATE_OR_ATTACH,\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.asyncSubscribe(getTopic(0), hubSubscriberId, opts,\n                                   new TestCallback(queue), null);\n         assertFalse(queue.take());\n     }\n@@ -679,7 +713,9 @@ public void testSyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n         Subscriber hubSubscriber = hubClient.getSubscriber();\n         boolean subscribeSuccess = false;\n         try {\n-            hubSubscriber.subscribe(getTopic(0), localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH);\n+            SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+            hubSubscriber.subscribe(getTopic(0), localSubscriberId, opts);\n         } catch (InvalidSubscriberIdException e) {\n             subscribeSuccess = true;\n         } catch (Exception ex) {\n@@ -693,7 +729,9 @@ public void testSyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n     public void testAsyncHubSubscribeWithInvalidSubscriberId() throws Exception {\n         Client hubClient = new HedwigHubClient(new HubClientConfiguration());\n         Subscriber hubSubscriber = hubClient.getSubscriber();\n-        hubSubscriber.asyncSubscribe(getTopic(0), localSubscriberId, CreateOrAttach.CREATE_OR_ATTACH, new TestCallback(\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        hubSubscriber.asyncSubscribe(getTopic(0), localSubscriberId, opts, new TestCallback(\n                                          queue), null);\n         assertFalse(queue.take());\n         hubClient.close();"},{"sha":"c1ae72743ce3c05ddafa7c6cb5219e67fe6b611d","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/integration/TestHedwigRegion.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -36,6 +36,7 @@\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.server.HedwigRegionTestBase;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.integration.TestHedwigHub.TestCallback;\n@@ -109,9 +110,11 @@ public void testMultiRegionSubscribeAndConsume() throws Exception {\n         // Subscribe to topics for clients in all regions\n         for (HedwigClient client : regionClientsMap.values()) {\n             for (int i = 0; i < batchSize; i++) {\n+                SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                    .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n                 client.getSubscriber().asyncSubscribe(ByteString.copyFromUtf8(\"Topic\" + i),\n-                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"), CreateOrAttach.CREATE_OR_ATTACH,\n-                                                      new TestCallback(queue), null);\n+                        ByteString.copyFromUtf8(\"LocalSubscriber\"), opts, new TestCallback(queue), null);\n                 assertTrue(queue.take());\n             }\n         }\n@@ -150,6 +153,9 @@ public void testMultiRegionSubscribeAndConsume() throws Exception {\n     public void testSubscribeAndConsumeWhenARegionDown() throws Exception {\n         int batchSize = 10;\n \n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n         // first shut down a region\n         Random r = new Random();\n         int regionId = r.nextInt(numRegions);\n@@ -158,8 +164,8 @@ public void testSubscribeAndConsumeWhenARegionDown() throws Exception {\n         for (HedwigClient client : regionClientsMap.values()) {\n             for (int i = 0; i < batchSize; i++) {\n                 client.getSubscriber().asyncSubscribe(ByteString.copyFromUtf8(\"Topic\" + i),\n-                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"), CreateOrAttach.CREATE_OR_ATTACH,\n-                                                      new TestCallback(queue), null);\n+                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"),\n+                                                      opts, new TestCallback(queue), null);\n                 assertFalse(queue.take());\n             }\n         }\n@@ -172,8 +178,8 @@ public void testSubscribeAndConsumeWhenARegionDown() throws Exception {\n             HedwigClient client = entry.getValue();\n             for (int i = 0; i < batchSize; i++) {\n                 client.getSubscriber().asyncSubscribe(ByteString.copyFromUtf8(\"Topic\" + i),\n-                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"), CreateOrAttach.CREATE_OR_ATTACH,\n-                                                      new TestCallback(queue), null);\n+                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"),\n+                                                      opts, new TestCallback(queue), null);\n                 assertTrue(queue.take());\n             }\n         }\n@@ -215,13 +221,16 @@ public void testSubscribeAndConsumeWhenARegionDown() throws Exception {\n     public void testAttachExistingSubscriptionsWhenARegionDown() throws Exception {\n         int batchSize = 10;\n         \n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+\n         // sub it remotely to make subscriptions existed\n         for (Map.Entry<String, HedwigClient> entry : regionClientsMap.entrySet()) {\n             HedwigClient client = entry.getValue();\n             for (int i = 0; i < batchSize; i++) {\n                 client.getSubscriber().asyncSubscribe(ByteString.copyFromUtf8(\"Topic\" + i),\n-                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"), CreateOrAttach.CREATE_OR_ATTACH,\n-                                                      new TestCallback(queue), null);\n+                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"),\n+                                                      opts, new TestCallback(queue), null);\n                 assertTrue(queue.take());\n             }\n         }\n@@ -244,8 +253,8 @@ public void testAttachExistingSubscriptionsWhenARegionDown() throws Exception {\n         for (HedwigClient client : regionClientsMap.values()) {\n             for (int i = 0; i < batchSize; i++) {\n                 client.getSubscriber().asyncSubscribe(ByteString.copyFromUtf8(\"Topic\" + i),\n-                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"), CreateOrAttach.CREATE_OR_ATTACH,\n-                                                      new TestCallback(queue), null);\n+                                                      ByteString.copyFromUtf8(\"LocalSubscriber\"),\n+                                                      opts, new TestCallback(queue), null);\n                 assertTrue(queue.take());\n             }\n         }\n@@ -268,8 +277,8 @@ public void testAttachExistingSubscriptionsWhenARegionDown() throws Exception {\n         HedwigClient client = regionClientsMap.get(regionName);\n         for (int i = 0; i < batchSize; i++) {\n             client.getSubscriber().asyncSubscribe(ByteString.copyFromUtf8(\"Topic\" + i),\n-                                                  ByteString.copyFromUtf8(\"LocalSubscriber\"), CreateOrAttach.CREATE_OR_ATTACH,\n-                                                  new TestCallback(queue), null);\n+                                                  ByteString.copyFromUtf8(\"LocalSubscriber\"),\n+                                                  opts, new TestCallback(queue), null);\n             assertTrue(queue.take());\n             client.getSubscriber().startDelivery(ByteString.copyFromUtf8(\"Topic\" + i),\n                     ByteString.copyFromUtf8(\"LocalSubscriber\"), new TestMessageHandler(consumeQueue));"},{"sha":"8d78fc5c64fef3eeebfce7893c5fcad575a33f24","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/MessageBoundedPersistenceTest.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -94,7 +94,9 @@ private void sendXExpectLastY(Publisher pub, Subscriber sub,\n             pub.publish(topic, Message.newBuilder().setBody(\n                                 ByteString.copyFromUtf8(String.valueOf(i))).build());\n         }\n-        sub.subscribe(topic, subid, CreateOrAttach.ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.ATTACH).build();\n+        sub.subscribe(topic, subid, opts);\n \n         final AtomicInteger expected = new AtomicInteger(X - Y);\n         final CountDownLatch latch = new CountDownLatch(1);\n@@ -140,7 +142,9 @@ public void testBasicBounding() throws Exception {\n \n         ByteString topic = ByteString.copyFromUtf8(\"basicBoundingTopic\");\n         ByteString subid = ByteString.copyFromUtf8(\"basicBoundingSubId\");\n-        sub.subscribe(topic, subid, CreateOrAttach.CREATE);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE).build();\n+        sub.subscribe(topic, subid, opts);\n         sub.closeSubscription(topic, subid);\n \n         sendXExpectLastY(pub, sub, topic, subid, 1000, 5);\n@@ -222,7 +226,9 @@ public void testUpdateMessageBound() throws Exception {\n         sendXExpectLastY(pub, sub, topic, subid, 50, 10);\n \n         // message bound is not provided, no update\n-        sub.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        sub.subscribe(topic, subid, opts);\n         sub.closeSubscription(topic, subid);\n         sendXExpectLastY(pub, sub, topic, subid, 50, 10);\n \n@@ -238,7 +244,9 @@ public void testLedgerGC() throws Exception {\n         String ledgersPath = \"/hedwig/standalone/topics/testGCTopic/ledgers\";\n         ByteString topic = ByteString.copyFromUtf8(\"testGCTopic\");\n         ByteString subid = ByteString.copyFromUtf8(\"testGCSubId\");\n-        sub.subscribe(topic, subid, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        sub.subscribe(topic, subid, opts);\n         sub.closeSubscription(topic, subid);\n \n         for (int i = 1; i <= 100; i++) {"},{"sha":"e4a2470d5ecb484f47388e0648f026b49c99fabc","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -37,6 +37,7 @@\n import org.apache.hedwig.client.HedwigClient;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.server.HedwigHubTestBase;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.util.Callback;\n@@ -182,7 +183,11 @@ public int getBkEnsembleSize() {\n             return 1;\n         }\n         @Override\n-        public int getBkQuorumSize() {\n+        public int getBkWriteQuorumSize() {\n+            return 1;\n+        }\n+        @Override\n+        public int getBkAckQuorumSize() {\n             return 1;\n         }\n         @Override\n@@ -218,7 +223,9 @@ public void testDeadlock() throws Exception {\n \n         // subscribe to topic\n         logger.info(\"Setup subscriptions\");\n-        subscriber.subscribe(topic, subscriberId, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subscriberId, opts);\n         subscriber.closeSubscription(topic, subscriberId);\n \n         // publish 5 messages to form first ledger\n@@ -242,7 +249,7 @@ public void testDeadlock() throws Exception {\n \n         logger.info(\"Start subscribe topics again and receive messages\");\n         // subscribe to topic\n-        subscriber.subscribe(topic, subscriberId, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.subscribe(topic, subscriberId, opts);\n         subscriber.startDelivery(topic, subscriberId,\n                                  new TestMessageHandler(consumeQueue));\n         for (int i=0; i<(2*numMessages+3); i++) {"},{"sha":"1820b93b268fecb8cb043e27ada176179f6e0418","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/subscriptions/TestUpdateSubscriptionState.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -25,6 +25,7 @@\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.server.HedwigHubTestBase;\n import org.apache.hedwig.server.common.ServerConfiguration;\n@@ -161,7 +162,9 @@ public void testConsumeWhenTopicRelease() throws Exception {\n         int startMsgId = 0;\n         int numMsgs = 10;\n         // subscriber in client\n-        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n+        subscriber.subscribe(topic, subId, opts);\n         // start delivery\n         OrderCheckingMessageHandler ocm = new OrderCheckingMessageHandler(\n                 topic, subId, startMsgId, numMsgs);\n@@ -185,7 +188,7 @@ public void testConsumeWhenTopicRelease() throws Exception {\n \n         startMsgId = 20;\n         // reconnect it again\n-        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.subscribe(topic, subId, opts);\n         ocm = new OrderCheckingMessageHandler(topic, subId, startMsgId, numMsgs);\n         subscriber.startDelivery(topic, subId, ocm);\n         for (int i=0; i<numMsgs; i++) {\n@@ -205,8 +208,10 @@ public void testConsumeWhenHubShutdown() throws Exception {\n \n         int startMsgId = 0;\n         int numMsgs = 10;\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n         // subscriber in client\n-        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.subscribe(topic, subId, opts);\n         // start delivery\n         OrderCheckingMessageHandler ocm = new OrderCheckingMessageHandler(\n                 topic, subId, startMsgId, numMsgs);\n@@ -232,7 +237,7 @@ public void testConsumeWhenHubShutdown() throws Exception {\n \n         startMsgId = 20;\n         // reconnect it again\n-        subscriber.subscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH);\n+        subscriber.subscribe(topic, subId, opts);\n         ocm = new OrderCheckingMessageHandler(topic, subId, startMsgId, numMsgs);\n         subscriber.startDelivery(topic, subId, ocm);\n         for (int i=0; i<numMsgs; i++) {"},{"sha":"0d508caec618d70ca895722377c5b1ca91a18fd7","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/topics/TestConcurrentTopicAcquisition.java?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -28,6 +28,7 @@\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n import org.apache.hedwig.server.HedwigHubTestBase;\n import org.apache.hedwig.util.Callback;\n import org.apache.hedwig.util.ConcurrencyUtils;\n@@ -116,12 +117,14 @@ public void testTopicAcquistion() throws Exception {\n         // 300 subscribers subscribe to a same topic\n         final AtomicBoolean inRedirectLoop = new AtomicBoolean(false);\n         numDone.set(0);\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n         for (int i=0; i<numSubscribers; i++) {\n             ByteString subId = ByteString.copyFromUtf8(\"sub-\" + i);\n             if (logger.isDebugEnabled()) {\n                 logger.debug(\"subscriber \" + subId.toStringUtf8() + \" subscribes topic \" + topic.toStringUtf8());\n             }\n-            subscriber.asyncSubscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH,\n+            subscriber.asyncSubscribe(topic, subId, opts,\n                 new Callback<Void>() {\n                 \n                     private void tick() {\n@@ -175,14 +178,15 @@ public void run() {\n                     }\n                     \n                     ByteString subId;\n+                    SubscriptionOptions opts = SubscriptionOptions.newBuilder()\n+                        .setCreateOrAttach(CreateOrAttach.CREATE_OR_ATTACH).build();\n                     while (true) {\n                         subId = subscribers.take();\n                         \n                         if (logger.isDebugEnabled()) {\n                             logger.debug(\"subscriber \" + subId.toStringUtf8() + \" subscribes topic \" + topic.toStringUtf8());\n                         }\n-                        subscriber.asyncSubscribe(topic, subId, CreateOrAttach.CREATE_OR_ATTACH,\n-                            new SubCallback(subId), null);\n+                        subscriber.asyncSubscribe(topic, subId, opts, new SubCallback(subId), null);\n                     }\n                     // subscriber.asyncSubscribe(topic, subscriberId, mode, callback, context)\n                 } catch (InterruptedException ie) {"},{"sha":"64236016e1c564370d3b78dbb990a6b5bfa6d520","filename":"pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=f2bb5603ff33b8ac54bcdf2daddb61cf3e65de80","patch":"@@ -53,10 +53,15 @@\n       </plugin>\n       <plugin>\n         <artifactId>maven-compiler-plugin</artifactId>\n-        <version>2.3.2</version>\n+        <version>3.0</version>\n         <configuration>\n           <source>1.6</source>\n           <target>1.6</target>\n+          <compilerArguments>\n+\t    <Werror />\n+\t    <Xlint:deprecation />\n+\t    <Xlint:unchecked />\n+\t  </compilerArguments>\n         </configuration>\n       </plugin>\n       <plugin>"}]}

