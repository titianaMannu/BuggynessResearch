{"sha":"f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmM2E0MDRlNGU2YjBkMGMyYTBiMmE4M2QzOGNkZWRhZmYwNjgzZTY4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-03-21T05:13:23Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-03-21T05:13:23Z"},"message":"BOOKKEEPER-188: Garbage collection code is in the wrong place (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1303286 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab99eddca713678fbef4e75b5457d1f16f131193","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ab99eddca713678fbef4e75b5457d1f16f131193"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68","html_url":"https://github.com/apache/bookkeeper/commit/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"7199719beebe79325a93ef57a1140c2ed50c26e9","url":"https://api.github.com/repos/apache/bookkeeper/commits/7199719beebe79325a93ef57a1140c2ed50c26e9","html_url":"https://github.com/apache/bookkeeper/commit/7199719beebe79325a93ef57a1140c2ed50c26e9"}],"stats":{"total":266,"additions":132,"deletions":134},"files":[{"sha":"907073ea6c4e417479b67f6f014cd5e356241f9d","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68","patch":"@@ -94,6 +94,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-175: Bookie code is very coupled (ivank)\n \n+        BOOKKEEPER-188: Garbage collection code is in the wrong place (ivank via sijie)\n+\n       hedwig-server/\n \n         BOOKKEEPER-77: Add a console client for hedwig (Sijie Guo via ivank)"},{"sha":"d4f21119c5b2b86615e10a693f4dc8ac92a38fca","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":1,"deletions":130,"changes":131,"blob_url":"https://github.com/apache/bookkeeper/blob/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68","patch":"@@ -57,7 +57,7 @@\n     private static final Logger LOG = LoggerFactory.getLogger(EntryLogger.class);\n     private File dirs[];\n \n-    private long logId;\n+    long logId;\n     /**\n      * The maximum size of a entry logger file.\n      */\n@@ -75,65 +75,6 @@\n \n     final static long MB = 1024 * 1024;\n \n-    /**\n-     * Records the total size, remaining size and the set of ledgers that comprise a entry log.\n-     */\n-    static class EntryLogMetadata {\n-        long entryLogId;\n-        long totalSize;\n-        long remainingSize;\n-        ConcurrentHashMap<Long, Long> ledgersMap;\n-\n-        public EntryLogMetadata(long logId) {\n-            this.entryLogId = logId;\n-\n-            totalSize = remainingSize = 0;\n-            ledgersMap = new ConcurrentHashMap<Long, Long>();\n-        }\n-\n-        public void addLedgerSize(long ledgerId, long size) {\n-            totalSize += size;\n-            remainingSize += size;\n-            Long ledgerSize = ledgersMap.get(ledgerId);\n-            if (null == ledgerSize) {\n-                ledgerSize = 0L;\n-            }\n-            ledgerSize += size;\n-            ledgersMap.put(ledgerId, ledgerSize);\n-        }\n-\n-        public void removeLedger(long ledgerId) {\n-            Long size = ledgersMap.remove(ledgerId);\n-            if (null == size) {\n-                return;\n-            }\n-            remainingSize -= size;\n-        }\n-\n-        public boolean containsLedger(long ledgerId) {\n-            return ledgersMap.containsKey(ledgerId);\n-        }\n-\n-        public double getUsage() {\n-            if (totalSize == 0L) {\n-                return 0.0f;\n-            }\n-            return (double)remainingSize / totalSize;\n-        }\n-\n-        public boolean isEmpty() {\n-            return ledgersMap.isEmpty();\n-        }\n-\n-        @Override\n-        public String toString() {\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(\"{ totalSize = \").append(totalSize).append(\", remainingSize = \")\n-              .append(remainingSize).append(\", ledgersMap = \").append(ledgersMap).append(\" }\");\n-            return sb.toString();\n-        }\n-    }\n-\n     /**\n      * Scan entries in a entry log file.\n      */\n@@ -432,76 +373,6 @@ synchronized public boolean testAndClearSomethingWritten() {\n         }\n     }\n \n-    /**\n-     * A scanner used to extract entry log meta from entry log files.\n-     */\n-    class ExtractionScanner implements EntryLogScanner {\n-        EntryLogMetadata meta;\n-\n-        public ExtractionScanner(EntryLogMetadata meta) {\n-            this.meta = meta;\n-        }\n-\n-        @Override\n-        public boolean accept(long ledgerId) {\n-            return true;\n-        }\n-        @Override\n-        public void process(long ledgerId, ByteBuffer entry) {\n-            // add new entry size of a ledger to entry log meta\n-            meta.addLedgerSize(ledgerId, entry.limit() + 4);\n-        }\n-    }\n-\n-    /**\n-     * Method to read in all of the entry logs (those that we haven't done so yet),\n-     * and find the set of ledger ID's that make up each entry log file.\n-     *\n-     * @param entryLogMetaMap\n-     *          Existing EntryLogs to Meta\n-     * @throws IOException\n-     */\n-    protected Map<Long, EntryLogMetadata> extractMetaFromEntryLogs(Map<Long, EntryLogMetadata> entryLogMetaMap) throws IOException {\n-        // Extract it for every entry log except for the current one.\n-        // Entry Log ID's are just a long value that starts at 0 and increments\n-        // by 1 when the log fills up and we roll to a new one.\n-        long curLogId = logId;\n-        for (long entryLogId = 0; entryLogId < curLogId; entryLogId++) {\n-            // Comb the current entry log file if it has not already been extracted.\n-            if (entryLogMetaMap.containsKey(entryLogId)) {\n-                continue;\n-            }\n-            LOG.info(\"Extracting entry log meta from entryLogId: \" + entryLogId);\n-            EntryLogMetadata entryLogMeta = new EntryLogMetadata(entryLogId);\n-            ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);\n-            // Read through the entry log file and extract the entry log meta\n-            try {\n-                scanEntryLog(entryLogId, scanner);\n-                LOG.info(\"Retrieved entry log meta data entryLogId: \" + entryLogId + \", meta: \" + entryLogMeta);\n-                entryLogMetaMap.put(entryLogId, entryLogMeta);\n-            } catch(IOException e) {\n-              LOG.warn(\"Premature exception when processing \" + entryLogId +\n-                       \"recovery will take care of the problem\", e);\n-            }\n-\n-        }\n-        return entryLogMetaMap;\n-    }\n-\n-    protected EntryLogMetadata extractMetaFromEntryLog(long entryLogId) {\n-        EntryLogMetadata entryLogMeta = new EntryLogMetadata(entryLogId);\n-        ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);\n-        // Read through the entry log file and extract the entry log meta\n-        try {\n-            scanEntryLog(entryLogId, scanner);\n-            LOG.info(\"Retrieved entry log meta data entryLogId: \" + entryLogId + \", meta: \" + entryLogMeta);\n-        } catch(IOException e) {\n-          LOG.warn(\"Premature exception when processing \" + entryLogId +\n-                   \"recovery will take care of the problem\", e);\n-        }\n-        return entryLogMeta;\n-    }\n-\n     /**\n      * Scan entry log\n      *"},{"sha":"2eed1926b9a2ad640d9bb3904cb2f8033d2c00e4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":126,"deletions":2,"changes":128,"blob_url":"https://github.com/apache/bookkeeper/blob/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68","patch":"@@ -34,7 +34,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.apache.bookkeeper.bookie.EntryLogger.EntryLogMetadata;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n@@ -198,7 +197,7 @@ public void run() {\n             // Extract all of the ledger ID's that comprise all of the entry logs\n             // (except for the current new one which is still being written to).\n             try {\n-                entryLogMetaMap = entryLogger.extractMetaFromEntryLogs(entryLogMetaMap);\n+                entryLogMetaMap = extractMetaFromEntryLogs(entryLogMetaMap);\n             } catch (IOException ie) {\n                 LOG.warn(\"Exception when extracting entry log meta from entry logs : \", ie);\n             }\n@@ -379,4 +378,129 @@ protected void compactEntryLog(long entryLogId) {\n             compacting.set(false);\n         }\n     }\n+\n+    /**\n+     * Records the total size, remaining size and the set of ledgers that comprise a entry log.\n+     */\n+    static class EntryLogMetadata {\n+        long entryLogId;\n+        long totalSize;\n+        long remainingSize;\n+        ConcurrentHashMap<Long, Long> ledgersMap;\n+\n+        public EntryLogMetadata(long logId) {\n+            this.entryLogId = logId;\n+\n+            totalSize = remainingSize = 0;\n+            ledgersMap = new ConcurrentHashMap<Long, Long>();\n+        }\n+\n+        public void addLedgerSize(long ledgerId, long size) {\n+            totalSize += size;\n+            remainingSize += size;\n+            Long ledgerSize = ledgersMap.get(ledgerId);\n+            if (null == ledgerSize) {\n+                ledgerSize = 0L;\n+            }\n+            ledgerSize += size;\n+            ledgersMap.put(ledgerId, ledgerSize);\n+        }\n+\n+        public void removeLedger(long ledgerId) {\n+            Long size = ledgersMap.remove(ledgerId);\n+            if (null == size) {\n+                return;\n+            }\n+            remainingSize -= size;\n+        }\n+\n+        public boolean containsLedger(long ledgerId) {\n+            return ledgersMap.containsKey(ledgerId);\n+        }\n+\n+        public double getUsage() {\n+            if (totalSize == 0L) {\n+                return 0.0f;\n+            }\n+            return (double)remainingSize / totalSize;\n+        }\n+\n+        public boolean isEmpty() {\n+            return ledgersMap.isEmpty();\n+        }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"{ totalSize = \").append(totalSize).append(\", remainingSize = \")\n+              .append(remainingSize).append(\", ledgersMap = \").append(ledgersMap).append(\" }\");\n+            return sb.toString();\n+        }\n+    }\n+\n+    /**\n+     * A scanner used to extract entry log meta from entry log files.\n+     */\n+    static class ExtractionScanner implements EntryLogScanner {\n+        EntryLogMetadata meta;\n+\n+        public ExtractionScanner(EntryLogMetadata meta) {\n+            this.meta = meta;\n+        }\n+\n+        @Override\n+        public boolean accept(long ledgerId) {\n+            return true;\n+        }\n+        @Override\n+        public void process(long ledgerId, ByteBuffer entry) {\n+            // add new entry size of a ledger to entry log meta\n+            meta.addLedgerSize(ledgerId, entry.limit() + 4);\n+        }\n+    }\n+\n+    /**\n+     * Method to read in all of the entry logs (those that we haven't done so yet),\n+     * and find the set of ledger ID's that make up each entry log file.\n+     *\n+     * @param entryLogMetaMap\n+     *          Existing EntryLogs to Meta\n+     * @throws IOException\n+     */\n+    protected Map<Long, EntryLogMetadata> extractMetaFromEntryLogs(Map<Long, EntryLogMetadata> entryLogMetaMap)\n+            throws IOException {\n+        // Extract it for every entry log except for the current one.\n+        // Entry Log ID's are just a long value that starts at 0 and increments\n+        // by 1 when the log fills up and we roll to a new one.\n+        long curLogId = entryLogger.logId;\n+        for (long entryLogId = 0; entryLogId < curLogId; entryLogId++) {\n+            // Comb the current entry log file if it has not already been extracted.\n+            if (entryLogMetaMap.containsKey(entryLogId)) {\n+                continue;\n+            }\n+            LOG.info(\"Extracting entry log meta from entryLogId: \" + entryLogId);\n+\n+            // Read through the entry log file and extract the entry log meta\n+            entryLogMetaMap.put(entryLogId,\n+                                extractMetaFromEntryLog(entryLogger, entryLogId));\n+        }\n+        return entryLogMetaMap;\n+    }\n+\n+    static EntryLogMetadata extractMetaFromEntryLog(EntryLogger entryLogger, long entryLogId)\n+            throws IOException {\n+        EntryLogMetadata entryLogMeta = new EntryLogMetadata(entryLogId);\n+        ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);\n+        try {\n+            // Read through the entry log file and extract the entry log meta\n+            entryLogger.scanEntryLog(entryLogId, scanner);\n+            LOG.info(\"Retrieved entry log meta data entryLogId: \"\n+                     + entryLogId + \", meta: \" + entryLogMeta);\n+        } catch(IOException e) {\n+            LOG.warn(\"Premature exception when processing \" + entryLogId +\n+                     \"recovery will take care of the problem\", e);\n+        }\n+\n+        return entryLogMeta;\n+    }\n }"},{"sha":"90dc273a4e10453b1ad4da59cea052dd4436a88b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=f3a404e4e6b0d0c2a0b2a83d38cdedaff0683e68","patch":"@@ -29,7 +29,7 @@\n \n import junit.framework.TestCase;\n \n-import org.apache.bookkeeper.bookie.EntryLogger.EntryLogMetadata;\n+import org.apache.bookkeeper.bookie.GarbageCollectorThread.EntryLogMetadata;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.junit.After;\n import org.junit.Before;\n@@ -70,8 +70,9 @@ public void testCorruptEntryLog() throws Exception {\n         raf.close();\n         // now see which ledgers are in the log\n         logger = new EntryLogger(conf);\n+\n         EntryLogMetadata meta =\n-            logger.extractMetaFromEntryLog(0L);\n+            GarbageCollectorThread.extractMetaFromEntryLog(logger, 0L);\n \n         LOG.info(\"Extracted Meta From Entry Log {}\", meta);\n         assertNotNull(meta.ledgersMap.get(1L));"}]}

