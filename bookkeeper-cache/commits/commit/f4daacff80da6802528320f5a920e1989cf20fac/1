{"sha":"f4daacff80da6802528320f5a920e1989cf20fac","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNGRhYWNmZjgwZGE2ODAyNTI4MzIwZjVhOTIwZTE5ODljZjIwZmFj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T09:58:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T09:58:38Z"},"message":"BOOKKEEPER-338: Create Version.NEW and Version.ANY static instances of Version so that were not passing around nulls (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374189 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"183eb8215d8821140a3574d6474851807dc1433c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/183eb8215d8821140a3574d6474851807dc1433c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f4daacff80da6802528320f5a920e1989cf20fac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f4daacff80da6802528320f5a920e1989cf20fac","html_url":"https://github.com/apache/bookkeeper/commit/f4daacff80da6802528320f5a920e1989cf20fac","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f4daacff80da6802528320f5a920e1989cf20fac/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"74e097e0b171871f4f0c067600949376ff98cb5d","url":"https://api.github.com/repos/apache/bookkeeper/commits/74e097e0b171871f4f0c067600949376ff98cb5d","html_url":"https://github.com/apache/bookkeeper/commit/74e097e0b171871f4f0c067600949376ff98cb5d"}],"stats":{"total":101,"additions":72,"deletions":29},"files":[{"sha":"df6ebf167362a38c2b0b5546508d1487745a3a54","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -28,6 +28,8 @@ Trunk (unreleased changes)\n \n       BOOKKEEPER-352: Should not use static ServerStats/BKStats instance in TestServerStats/TestBKStats (sijie via fpj)\n \n+      BOOKKEEPER-338: Create Version.NEW and Version.ANY static instances of Version so that were not passing around nulls (sijie via ivank)\n+\n       bookkeeper-server:\n \n         BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)"},{"sha":"649175668ca117483fd3019f97f29097bcba5ee6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -68,7 +68,7 @@\n     private LedgerMetadataFormat.State state;\n     private SortedMap<Long, ArrayList<InetSocketAddress>> ensembles = new TreeMap<Long, ArrayList<InetSocketAddress>>();\n     ArrayList<InetSocketAddress> currentEnsemble;\n-    volatile Version version = null;\n+    volatile Version version = Version.NEW;\n \n     private boolean hasPassword = false;\n     private LedgerMetadataFormat.DigestType digestType;"},{"sha":"74616ee8ca6fa30e6b7262f10fdb062d22d1b32d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -154,7 +154,7 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n     public void writeLedgerMetadata(final long ledgerId, final LedgerMetadata metadata,\n                                     final GenericCallback<Void> cb) {\n         Version v = metadata.getVersion();\n-        if (null == v || !(v instanceof ZkVersion)) {\n+        if (Version.NEW == v || !(v instanceof ZkVersion)) {\n             cb.operationComplete(BKException.Code.MetadataVersionException, null);\n             return;\n         }"},{"sha":"7fdb8bdb22897eb4059534914505487d895a5f61","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -32,10 +32,14 @@ public ZkVersion(int version) {\n \n     @Override\n     public Occurred compare(Version v) {\n-        if (v == null) {\n-            return Occurred.AFTER;\n+        if (null == v) {\n+            throw new NullPointerException(\"Version is not allowed to be null.\");\n         }\n-        if (!(v instanceof ZkVersion)) {\n+        if (v == Version.NEW) {\n+            return Occurred.AFTER;\n+        } else if (v == Version.ANY) {\n+            return Occurred.CONCURRENTLY;\n+        } else if (!(v instanceof ZkVersion)) {\n             throw new IllegalArgumentException(\"Invalid version type\");\n         }\n         ZkVersion zv = (ZkVersion)v;"},{"sha":"39ad3e5396df504d8038ddbadc18eae8afa0f5e7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java","status":"modified","additions":31,"deletions":1,"changes":32,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -24,7 +24,37 @@\n  * An interface that allows us to determine if a given version happened before or after another version.\n  */\n public interface Version {\n-    public enum Occurred {\n+\n+    /**\n+     * Initial version.\n+     */\n+    public static final Version NEW = new Version() {\n+        @Override\n+        public Occurred compare(Version v) {\n+            if (null == v) {\n+                throw new NullPointerException(\"Version is not allowed to be null.\");\n+            }\n+            if (this == v) {\n+                return Occurred.CONCURRENTLY;\n+            }\n+            return Occurred.BEFORE;\n+        }\n+    };\n+\n+    /**\n+     * Match any version.\n+     */\n+    public static final Version ANY = new Version() {\n+        @Override\n+        public Occurred compare(Version v) {\n+            if (null == v) {\n+                throw new NullPointerException(\"Version is not allowed to be null.\");\n+            }\n+            return Occurred.CONCURRENTLY;\n+        }\n+    };\n+\n+    public static enum Occurred {\n         BEFORE, AFTER, CONCURRENTLY\n     }\n "},{"sha":"5409246a74848ec31efc1713baa7e566c3e095a8","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -31,7 +31,11 @@\n     @Test\n     public void testNullZkVersion() {\n         ZkVersion zkVersion = new ZkVersion(99);\n-        Assert.assertEquals(Version.Occurred.AFTER, zkVersion.compare(null));\n+        try {\n+            zkVersion.compare(null);\n+            Assert.fail(\"Should fail comparing with null version.\");\n+        } catch (NullPointerException npe) {\n+        }\n     }\n \n     @Test\n@@ -55,5 +59,7 @@ public void testCompare() {\n         Assert.assertEquals(Occurred.AFTER, zv.compare(new ZkVersion(98)));\n         Assert.assertEquals(Occurred.BEFORE, zv.compare(new ZkVersion(100)));\n         Assert.assertEquals(Occurred.CONCURRENTLY, zv.compare(new ZkVersion(99)));\n+        Assert.assertEquals(Occurred.CONCURRENTLY, zv.compare(Version.ANY));\n+        Assert.assertEquals(Occurred.AFTER, zv.compare(Version.NEW));\n     }\n }"},{"sha":"15484c5230fed7350e3a9d1933c659f8daefb36c","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicOwnershipManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicOwnershipManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicOwnershipManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicOwnershipManager.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -62,10 +62,10 @@\n      *          Owner hub info\n      * @param version\n      *          Current version of owner info\n-     *          If <code>version</code> is null, create owner info.\n+     *          If <code>version</code> is {@link Version.NEW}, create owner info.\n      *          {@link PubSubException.TopicOwnerInfoExistsException} is returned when\n      *          owner info existed before.\n-     *          If <code>version</code> is not null, the owner info is updated only when\n+     *          Otherwise, the owner info is updated only when\n      *          provided version equals to its current version.\n      *          {@link PubSubException.BadVersionException} is returned when version doesn't match,\n      *          {@link PubSubException.NoTopicOwnerInfoException} is returned when no owner info\n@@ -85,8 +85,8 @@ public void writeOwnerInfo(ByteString topic, HubInfo owner, Version version,\n      *          Topic Name\n      * @param version\n      *          Current version of owner info\n-     *          If <code>version</code> is null, delete owner info no matter its current version.\n-     *          If <code>version</code> is not null, the owner info is deleted only when\n+     *          If <code>version</code> is {@link Version.ANY}, delete owner info no matter its current version.\n+     *          Otherwise, the owner info is deleted only when\n      *          provided version equals to its current version.\n      * @param callback\n      *          Callback when owner info deleted."},{"sha":"69ee709c4dd2b484d2efe0b85838ba62142776f7","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicPersistenceManager.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/TopicPersistenceManager.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -55,10 +55,10 @@ public void readTopicPersistenceInfo(ByteString topic,\n      *          Persistence info\n      * @param version\n      *          Current version of persistence info.\n-     *          If <code>version</code> is null, create persistence info;\n+     *          If <code>version</code> is {@link Version.NEW}, create persistence info;\n      *          {@link PubSubException.TopicPersistenceInfoExistsException} is returned when\n      *          persistence info existed before.\n-     *          If <code>version</code> is not null, the persitence info is updated only when\n+     *          Otherwise, the persitence info is updated only when\n      *          provided version equals to its current version.\n      *          {@link PubSubException.BadVersionException} is returned when version doesn't match,\n      *          {@link PubSubException.NoTopicPersistenceInfoException} is returned when no\n@@ -79,8 +79,8 @@ public void writeTopicPersistenceInfo(ByteString topic, LedgerRanges ranges, Ver\n      *          Topic name\n      * @param version\n      *          Current version of persistence info\n-     *          If <code>version</code> is null, delete persistence info no matter its current version.\n-     *          If <code>version</code> is not null, the persitence info is deleted only when\n+     *          If <code>version</code> is {@link Version.ANY}, delete persistence info no matter its current version.\n+     *          Otherwise, the persitence info is deleted only when\n      *          provided version equals to its current version.\n      * @param callback\n      *          Callback return whether the deletion succeed."},{"sha":"a6fd6ec50bb24cbfe1c96b6f97fab8af8e308866","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/meta/ZkMetadataManagerFactory.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -219,7 +219,7 @@ public void safeProcessResult(int rc, String path, Object ctx, String name) {\n         @Override\n         public void writeTopicPersistenceInfo(final ByteString topic, LedgerRanges ranges, final Version version,\n                                               final Callback<Version> callback, Object ctx) {\n-            if (null == version) {\n+            if (Version.NEW == version) {\n                 createTopicPersistenceInfo(topic, ranges, callback, ctx);\n                 return;\n             }\n@@ -266,7 +266,7 @@ public void deleteTopicPersistenceInfo(final ByteString topic, final Version ver\n             final String zNodePath = ledgersPath(topic);\n \n             int znodeVersion = -1;\n-            if (null != version) {\n+            if (Version.ANY != version) {\n                 if (!(version instanceof ZkVersion)) {\n                     callback.operationFailed(ctx, new PubSubException.UnexpectedConditionException(\n                                                   \"Invalid version provided to delete persistence info for topic \" + topic.toStringUtf8()));\n@@ -625,7 +625,7 @@ public void safeProcessResult(int rc, String path, Object ctx, byte[] data, Stat\n         @Override\n         public void writeOwnerInfo(final ByteString topic, final HubInfo owner, final Version version,\n                                    final Callback<Version> callback, Object ctx) {\n-            if (null == version) {\n+            if (Version.NEW == version) {\n                 createOwnerInfo(topic, owner, callback, ctx);\n                 return;\n             }\n@@ -696,7 +696,7 @@ public void safeProcessResult(int rc, String path, Object ctx, String name) {\n         public void deleteOwnerInfo(final ByteString topic, final Version version,\n                                     final Callback<Void> callback, Object ctx) {\n             int znodeVersion = -1;\n-            if (null != version) {\n+            if (Version.ANY != version) {\n                 if (!(version instanceof ZkVersion)) {\n                     callback.operationFailed(ctx, new PubSubException.UnexpectedConditionException(\n                                                   \"Invalid version provided to delete owner info for topic \" + topic.toStringUtf8()));"},{"sha":"58f6949dbe54b967bfa87035f17255bc8649ef6f","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/BookkeeperPersistenceManager.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -124,7 +124,7 @@ public InMemoryLedgerRange(LedgerRange range, long startSeqId) {\n          * include the current ledger\n          */\n         TreeMap<Long, InMemoryLedgerRange> ledgerRanges = new TreeMap<Long, InMemoryLedgerRange>();\n-        Version ledgerRangesVersion = null;\n+        Version ledgerRangesVersion = Version.NEW;\n \n         /**\n          * This is the handle of the current ledger that is being used to write\n@@ -699,7 +699,7 @@ public void operationFinished(Object ctx, Versioned<LedgerRanges> ranges) {\n                     if (null != ranges) {\n                         processTopicLedgerRanges(ranges.getValue(), ranges.getVersion());\n                     } else {\n-                        processTopicLedgerRanges(LedgerRanges.getDefaultInstance(), null);\n+                        processTopicLedgerRanges(LedgerRanges.getDefaultInstance(), Version.NEW);\n                     }\n                 }\n                 @Override"},{"sha":"dbec795db46d7574b3866658a0e90f40acf91d81","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/topics/MMTopicManager.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -151,7 +151,7 @@ public void operationFinished(final Object ctx, final Versioned<HubInfo> owner)\n                         logger.info(\"{} : No owner found for topic {}\",\n                                     new Object[] { addr, topic.toStringUtf8() });\n                         // no data found\n-                        choose(null);\n+                        choose(Version.NEW);\n                         return;\n                     }\n                     final Version ownerVersion = owner.getVersion();"},{"sha":"60f4e28280b4e875f0ea5be251186eb38e4625d5","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f4daacff80da6802528320f5a920e1989cf20fac/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/meta/TestMetadataManager.java?ref=f4daacff80da6802528320f5a920e1989cf20fac","patch":"@@ -61,7 +61,7 @@ public void testOwnerInfo() throws Exception {\n         HubInfo owner = new HubInfo(new HedwigSocketAddress(\"127.0.0.1\", 8008), 999);\n \n         // Write non-existed owner info\n-        toManager.writeOwnerInfo(topic, owner, null, writeCallback, null);\n+        toManager.writeOwnerInfo(topic, owner, Version.NEW, writeCallback, null);\n         res = writeCallback.queue.take();\n         Assert.assertEquals(null, res.right());\n         Version v1 = res.left();\n@@ -75,7 +75,7 @@ public void testOwnerInfo() throws Exception {\n         HubInfo newOwner = new HubInfo(new HedwigSocketAddress(\"127.0.0.1\", 8008), 1000);\n \n         // write exsited owner info with null version\n-        toManager.writeOwnerInfo(topic, newOwner, null, writeCallback, null);\n+        toManager.writeOwnerInfo(topic, newOwner, Version.NEW, writeCallback, null);\n         res = writeCallback.queue.take();\n         Assert.assertNotNull(res.right());\n         Assert.assertTrue(res.right() instanceof PubSubException.TopicOwnerInfoExistsException);\n@@ -127,7 +127,7 @@ public void testOwnerInfo() throws Exception {\n         Assert.assertEquals(null, readCallback.queue.take().left());\n \n         // delete non-existed owner info\n-        toManager.deleteOwnerInfo(topic, null, deleteCallback, null);\n+        toManager.deleteOwnerInfo(topic, Version.ANY, deleteCallback, null);\n         Assert.assertTrue(deleteCallback.queue.take().right() instanceof\n                           PubSubException.NoTopicOwnerInfoException);\n \n@@ -144,8 +144,8 @@ public void testPersistenceInfo() throws Exception {\n         StubCallback<Void> deleteCallback = new StubCallback<Void>();\n \n         // Write non-existed persistence info\n-        tpManager.writeTopicPersistenceInfo(topic, LedgerRanges.getDefaultInstance(), null,\n-                                            writeCallback, null);\n+        tpManager.writeTopicPersistenceInfo(topic, LedgerRanges.getDefaultInstance(),\n+                                            Version.NEW, writeCallback, null);\n         Either<Version, PubSubException> res = writeCallback.queue.take();\n         Assert.assertEquals(null, res.right());\n         Version v1 = res.left();\n@@ -162,7 +162,8 @@ public void testPersistenceInfo() throws Exception {\n         LedgerRanges newRanges = builder.build();\n \n         // write existed persistence info with null version\n-        tpManager.writeTopicPersistenceInfo(topic, newRanges, null, writeCallback, null);\n+        tpManager.writeTopicPersistenceInfo(topic, newRanges, Version.NEW,\n+                                            writeCallback, null);\n         res = writeCallback.queue.take();\n         Assert.assertNotNull(res.right());\n         Assert.assertTrue(res.right() instanceof PubSubException.TopicPersistenceInfoExistsException);\n@@ -219,7 +220,7 @@ public void testPersistenceInfo() throws Exception {\n         Assert.assertEquals(null, readCallback.queue.take().left());\n \n         // delete non-existed persistence info\n-        tpManager.deleteTopicPersistenceInfo(topic, null, deleteCallback, null);\n+        tpManager.deleteTopicPersistenceInfo(topic, Version.ANY, deleteCallback, null);\n         Assert.assertTrue(deleteCallback.queue.take().right() instanceof\n                           PubSubException.NoTopicPersistenceInfoException);\n "}]}

