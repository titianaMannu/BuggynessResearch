{"sha":"f56e596d70c66dac170008ffbe19489eee05be08","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNTZlNTk2ZDcwYzY2ZGFjMTcwMDA4ZmZiZTE5NDg5ZWVlMDViZTA4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-01-18T14:11:46Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-01-18T14:11:46Z"},"message":"BOOKKEEPER-153: Ledger can't be opened or closed due to zero-length metadata (Sijie Guo via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1232890 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a6996565bccf8e92200c75e1e03630737ad7ec4c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a6996565bccf8e92200c75e1e03630737ad7ec4c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f56e596d70c66dac170008ffbe19489eee05be08","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f56e596d70c66dac170008ffbe19489eee05be08","html_url":"https://github.com/apache/bookkeeper/commit/f56e596d70c66dac170008ffbe19489eee05be08","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f56e596d70c66dac170008ffbe19489eee05be08/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"cdcfbb52cbf8f0e6f17d56d7185cf0d04c9c856b","url":"https://api.github.com/repos/apache/bookkeeper/commits/cdcfbb52cbf8f0e6f17d56d7185cf0d04c9c856b","html_url":"https://github.com/apache/bookkeeper/commit/cdcfbb52cbf8f0e6f17d56d7185cf0d04c9c856b"}],"stats":{"total":92,"additions":53,"deletions":39},"files":[{"sha":"ae61da238a9e800dbaf2786679d64e690e782f74","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f56e596d70c66dac170008ffbe19489eee05be08/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f56e596d70c66dac170008ffbe19489eee05be08/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f56e596d70c66dac170008ffbe19489eee05be08","patch":"@@ -24,6 +24,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-95: extends zookeeper JMX to monitor and manage bookie server (Sijie Guo via ivank)\n \n+        BOOKKEEPER-153: Ledger can't be opened or closed due to zero-length metadata (Sijie Guo via ivank)\n+\n       hedwig-server/\n       \n         BOOKKEEPER-140: Hub server doesn't subscribe remote region correctly when a region is down. (Sijie Gou via ivank)"},{"sha":"f0a165fb16b8a9fb789256b07b8e84512aaccc52","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":25,"deletions":32,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java?ref=f56e596d70c66dac170008ffbe19489eee05be08","patch":"@@ -32,14 +32,13 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.AsyncCallback.StatCallback;\n import org.apache.zookeeper.data.Stat;\n \n /**\n  * Encapsulates asynchronous ledger create operation\n  *\n  */\n-class LedgerCreateOp implements GenericCallback<String>, StatCallback {\n+class LedgerCreateOp implements GenericCallback<String> {\n \n     static final Logger LOG = LoggerFactory.getLogger(LedgerCreateOp.class);\n \n@@ -83,7 +82,28 @@\n      * Initiates the operation\n      */\n     public void initiate() {\n-        bk.getLedgerManager().newLedgerPath(this);\n+        // allocate ensemble first\n+\n+        /*\n+         * Adding bookies to ledger handle\n+         */\n+\n+        ArrayList<InetSocketAddress> ensemble;\n+        try {\n+            ensemble = bk.bookieWatcher.getNewBookies(metadata.ensembleSize);\n+        } catch (BKNotEnoughBookiesException e) {\n+            LOG.error(\"Not enough bookies to create ledger\");\n+            cb.createComplete(e.getCode(), null, this.ctx);\n+            return;\n+        }\n+\n+        /*\n+         * Add ensemble to the configuration\n+         */\n+        metadata.addEnsemble(new Long(0), ensemble);\n+\n+        // create a ledger path with metadata\n+        bk.getLedgerManager().newLedgerPath(this, metadata);\n     }\n \n     /**\n@@ -111,23 +131,6 @@ public void operationComplete(int rc, String ledgerPath) {\n             return;\n         }\n \n-        /*\n-         * Adding bookies to ledger handle\n-         */\n-\n-        ArrayList<InetSocketAddress> ensemble;\n-        try {\n-            ensemble = bk.bookieWatcher.getNewBookies(metadata.ensembleSize);\n-        } catch (BKNotEnoughBookiesException e) {\n-            LOG.error(\"Not enough bookies to create ledger\" + ledgerId);\n-            cb.createComplete(e.getCode(), null, this.ctx);\n-            return;\n-        }\n-\n-        /*\n-         * Add ensemble to the configuration\n-         */\n-        metadata.addEnsemble(new Long(0), ensemble);\n         try {\n             lh = new LedgerHandle(bk, ledgerId, metadata, digestType, passwd);\n         } catch (GeneralSecurityException e) {\n@@ -140,18 +143,8 @@ public void operationComplete(int rc, String ledgerPath) {\n             return;\n         }\n \n-        lh.writeLedgerConfig(this, null);\n-\n-    }\n-\n-    /**\n-     * Implements ZooKeeper stat callback.\n-     *\n-     * @see org.apache.zookeeper.AsyncCallback.StatCallback#processResult(int, String, Object, Stat)\n-     */\n-    public void processResult(int rc, String path, Object ctx, Stat stat) {\n-        metadata.znodeVersion = stat.getVersion();\n-        cb.createComplete(rc, lh, this.ctx);\n+        // return the ledger handle back\n+        cb.createComplete(BKException.Code.OK, lh, this.ctx);\n     }\n \n }"},{"sha":"b403aa1ca9a383e968a98f6993445a5bc728ee0a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=f56e596d70c66dac170008ffbe19489eee05be08","patch":"@@ -240,7 +240,17 @@ static LedgerMetadata parseConfig(byte[] bytes, int version) throws IOException\n     public void updateZnodeStatus(Stat stat) {\n         this.znodeVersion = stat.getVersion();\n     }\n-    \n+\n+    /**\n+     * Update the znode version of this metadata\n+     *\n+     * @param znodeVersion\n+     *        Znode version of this metadata\n+     */\n+    public void updateZnodeStatus(int znodeVersion) {\n+        this.znodeVersion = znodeVersion;\n+    }\n+\n     /**\n      * Returns the last znode version.\n      * "},{"sha":"100cdadf8a93d745a5da35701b7cc53b79e8acdf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=f56e596d70c66dac170008ffbe19489eee05be08","patch":"@@ -23,6 +23,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.HashSet;\n \n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n@@ -94,19 +95,21 @@ public FlatLedgerManager(AbstractConfiguration conf, ZooKeeper zk,\n     }\n \n     @Override\n-    public void newLedgerPath(final GenericCallback<String> cb) {\n+    public void newLedgerPath(final GenericCallback<String> cb, final LedgerMetadata metadata) {\n         StringCallback scb = new StringCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx,\n                     String name) {\n                 if (Code.OK.intValue() != rc) {\n                     cb.operationComplete(rc, null);\n                 } else {\n+                    // update znode status\n+                    metadata.updateZnodeStatus(0);\n                     cb.operationComplete(rc, name);\n                 }\n             }\n         };\n-        ZkUtils.createFullPathOptimistic(zk, ledgerPrefix, new byte[0],\n+        ZkUtils.createFullPathOptimistic(zk, ledgerPrefix, metadata.serialize(),\n             Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL, scb, null);\n     }\n "},{"sha":"abe030fee9429b147e8a502b5ba84d7ff25a8f51","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=f56e596d70c66dac170008ffbe19489eee05be08","patch":"@@ -27,6 +27,7 @@\n import java.util.HashSet;\n import java.util.List;\n \n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n@@ -135,7 +136,7 @@ public void close() {\n     }\n \n     @Override\n-    public void newLedgerPath(final GenericCallback<String> ledgerCb) {\n+    public void newLedgerPath(final GenericCallback<String> ledgerCb, final LedgerMetadata metadata) {\n         ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n             CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n             @Override\n@@ -164,12 +165,14 @@ public void processResult(int rc, String path,\n                         if (rc != KeeperException.Code.OK.intValue()) {\n                             ledgerCb.operationComplete(rc, null);\n                         } else {\n+                            // update znode status\n+                            metadata.updateZnodeStatus(0);\n                             ledgerCb.operationComplete(rc, name);\n                         }\n                     }\n                 };\n                 String ledgerPath = getLedgerPath(ledgerId);\n-                ZkUtils.createFullPathOptimistic(zk, ledgerPath, new byte[0],\n+                ZkUtils.createFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, scb, null);\n                 // delete the znode for id generation\n                 scheduler.submit(new Runnable() {"},{"sha":"7d9eb96a52d45a7619fce58219df0be636c467ce","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f56e596d70c66dac170008ffbe19489eee05be08/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java?ref=f56e596d70c66dac170008ffbe19489eee05be08","patch":"@@ -21,6 +21,7 @@\n import java.io.IOException;\n \n import org.apache.zookeeper.AsyncCallback;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n \n@@ -55,12 +56,14 @@\n     public long getLedgerId(String ledgerPath) throws IOException;\n \n     /**\n-     * Create a new zk ledger path.\n+     * Create a new zk ledger path with provided metadata\n      *\n      * @param cb\n      *        Callback when getting new zk ledger path to create.\n+     * @param metadata\n+     *        Metadata provided when creating a new ledger\n      */\n-    public abstract void newLedgerPath(GenericCallback<String> cb);\n+    public abstract void newLedgerPath(GenericCallback<String> cb, LedgerMetadata metadata);\n \n     /**\n      * Loop to process all ledgers."}]}

