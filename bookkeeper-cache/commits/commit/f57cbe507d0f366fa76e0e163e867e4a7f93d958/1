{"sha":"f57cbe507d0f366fa76e0e163e867e4a7f93d958","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNTdjYmU1MDdkMGYzNjZmYTc2ZTBlMTYzZTg2N2U0YTdmOTNkOTU4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T13:30:31Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T13:30:31Z"},"message":"BOOKKEEPER-367: Server-Side Message Delivery Flow Control (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1394066 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8820f8f6c53fdcd57f187314058d202d2b9e3ea3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8820f8f6c53fdcd57f187314058d202d2b9e3ea3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f57cbe507d0f366fa76e0e163e867e4a7f93d958","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f57cbe507d0f366fa76e0e163e867e4a7f93d958","html_url":"https://github.com/apache/bookkeeper/commit/f57cbe507d0f366fa76e0e163e867e4a7f93d958","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f57cbe507d0f366fa76e0e163e867e4a7f93d958/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5","url":"https://api.github.com/repos/apache/bookkeeper/commits/24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5","html_url":"https://github.com/apache/bookkeeper/commit/24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5"}],"stats":{"total":783,"additions":691,"deletions":92},"files":[{"sha":"eb065580573f6f9c7b8d7ab60888dfdcae5c0103","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -168,6 +168,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-397: Make the hedwig client in RegionManager configurable. (Aniruddha via sijie)\n \n+        BOOKKEEPER-367: Server-Side Message Delivery Flow Control (sijie via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"8c199185ed328b8561ca959ba6128275a42079e9","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -192,6 +192,11 @@ public static InetSocketAddress getHostFromChannel(Channel channel) {\n             preferencesBuilder.setOptions(options.getOptions());\n         }\n \n+        // set delivery throttle value\n+        if (options.getDeliveryThrottleValue() > 0) {\n+            preferencesBuilder.setDeliveryThrottleValue(options.getDeliveryThrottleValue());\n+        }\n+\n         return preferencesBuilder;\n     }\n "},{"sha":"23d61f630ab0b1bbf338b4ff15d31c6d58a2b792","filename":"hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","status":"modified","additions":191,"deletions":75,"changes":266,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/java/org/apache/hedwig/protocol/PubSubProtocol.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -5704,6 +5704,10 @@ public Builder clearMsg() {\n     // optional string messageFilter = 3;\n     boolean hasMessageFilter();\n     String getMessageFilter();\n+    \n+    // optional uint32 deliveryThrottleValue = 4;\n+    boolean hasDeliveryThrottleValue();\n+    int getDeliveryThrottleValue();\n   }\n   public static final class SubscriptionPreferences extends\n       com.google.protobuf.GeneratedMessage\n@@ -5789,10 +5793,21 @@ public String getMessageFilter() {\n       }\n     }\n     \n+    // optional uint32 deliveryThrottleValue = 4;\n+    public static final int DELIVERYTHROTTLEVALUE_FIELD_NUMBER = 4;\n+    private int deliveryThrottleValue_;\n+    public boolean hasDeliveryThrottleValue() {\n+      return ((bitField0_ & 0x00000008) == 0x00000008);\n+    }\n+    public int getDeliveryThrottleValue() {\n+      return deliveryThrottleValue_;\n+    }\n+    \n     private void initFields() {\n       options_ = org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance();\n       messageBound_ = 0;\n       messageFilter_ = \"\";\n+      deliveryThrottleValue_ = 0;\n     }\n     private byte memoizedIsInitialized = -1;\n     public final boolean isInitialized() {\n@@ -5815,6 +5830,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n       if (((bitField0_ & 0x00000004) == 0x00000004)) {\n         output.writeBytes(3, getMessageFilterBytes());\n       }\n+      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n+        output.writeUInt32(4, deliveryThrottleValue_);\n+      }\n       getUnknownFields().writeTo(output);\n     }\n     \n@@ -5836,6 +5854,10 @@ public int getSerializedSize() {\n         size += com.google.protobuf.CodedOutputStream\n           .computeBytesSize(3, getMessageFilterBytes());\n       }\n+      if (((bitField0_ & 0x00000008) == 0x00000008)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeUInt32Size(4, deliveryThrottleValue_);\n+      }\n       size += getUnknownFields().getSerializedSize();\n       memoizedSerializedSize = size;\n       return size;\n@@ -5971,6 +5993,8 @@ public Builder clear() {\n         bitField0_ = (bitField0_ & ~0x00000002);\n         messageFilter_ = \"\";\n         bitField0_ = (bitField0_ & ~0x00000004);\n+        deliveryThrottleValue_ = 0;\n+        bitField0_ = (bitField0_ & ~0x00000008);\n         return this;\n       }\n       \n@@ -6025,6 +6049,10 @@ public Builder clone() {\n           to_bitField0_ |= 0x00000004;\n         }\n         result.messageFilter_ = messageFilter_;\n+        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {\n+          to_bitField0_ |= 0x00000008;\n+        }\n+        result.deliveryThrottleValue_ = deliveryThrottleValue_;\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n         return result;\n@@ -6050,6 +6078,9 @@ public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.SubscriptionP\n         if (other.hasMessageFilter()) {\n           setMessageFilter(other.getMessageFilter());\n         }\n+        if (other.hasDeliveryThrottleValue()) {\n+          setDeliveryThrottleValue(other.getDeliveryThrottleValue());\n+        }\n         this.mergeUnknownFields(other.getUnknownFields());\n         return this;\n       }\n@@ -6100,6 +6131,11 @@ public Builder mergeFrom(\n               messageFilter_ = input.readBytes();\n               break;\n             }\n+            case 32: {\n+              bitField0_ |= 0x00000008;\n+              deliveryThrottleValue_ = input.readUInt32();\n+              break;\n+            }\n           }\n         }\n       }\n@@ -6253,6 +6289,27 @@ void setMessageFilter(com.google.protobuf.ByteString value) {\n         onChanged();\n       }\n       \n+      // optional uint32 deliveryThrottleValue = 4;\n+      private int deliveryThrottleValue_ ;\n+      public boolean hasDeliveryThrottleValue() {\n+        return ((bitField0_ & 0x00000008) == 0x00000008);\n+      }\n+      public int getDeliveryThrottleValue() {\n+        return deliveryThrottleValue_;\n+      }\n+      public Builder setDeliveryThrottleValue(int value) {\n+        bitField0_ |= 0x00000008;\n+        deliveryThrottleValue_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearDeliveryThrottleValue() {\n+        bitField0_ = (bitField0_ & ~0x00000008);\n+        deliveryThrottleValue_ = 0;\n+        onChanged();\n+        return this;\n+      }\n+      \n       // @@protoc_insertion_point(builder_scope:Hedwig.SubscriptionPreferences)\n     }\n     \n@@ -7089,6 +7146,10 @@ public Builder clearForceAttach() {\n     boolean hasMessageFilter();\n     String getMessageFilter();\n     \n+    // optional uint32 deliveryThrottleValue = 6;\n+    boolean hasDeliveryThrottleValue();\n+    int getDeliveryThrottleValue();\n+    \n     // optional bool enableResubscribe = 7 [default = true];\n     boolean hasEnableResubscribe();\n     boolean getEnableResubscribe();\n@@ -7197,11 +7258,21 @@ public String getMessageFilter() {\n       }\n     }\n     \n+    // optional uint32 deliveryThrottleValue = 6;\n+    public static final int DELIVERYTHROTTLEVALUE_FIELD_NUMBER = 6;\n+    private int deliveryThrottleValue_;\n+    public boolean hasDeliveryThrottleValue() {\n+      return ((bitField0_ & 0x00000020) == 0x00000020);\n+    }\n+    public int getDeliveryThrottleValue() {\n+      return deliveryThrottleValue_;\n+    }\n+    \n     // optional bool enableResubscribe = 7 [default = true];\n     public static final int ENABLERESUBSCRIBE_FIELD_NUMBER = 7;\n     private boolean enableResubscribe_;\n     public boolean hasEnableResubscribe() {\n-      return ((bitField0_ & 0x00000020) == 0x00000020);\n+      return ((bitField0_ & 0x00000040) == 0x00000040);\n     }\n     public boolean getEnableResubscribe() {\n       return enableResubscribe_;\n@@ -7213,6 +7284,7 @@ private void initFields() {\n       messageBound_ = 0;\n       options_ = org.apache.hedwig.protocol.PubSubProtocol.Map.getDefaultInstance();\n       messageFilter_ = \"\";\n+      deliveryThrottleValue_ = 0;\n       enableResubscribe_ = true;\n     }\n     private byte memoizedIsInitialized = -1;\n@@ -7243,6 +7315,9 @@ public void writeTo(com.google.protobuf.CodedOutputStream output)\n         output.writeBytes(5, getMessageFilterBytes());\n       }\n       if (((bitField0_ & 0x00000020) == 0x00000020)) {\n+        output.writeUInt32(6, deliveryThrottleValue_);\n+      }\n+      if (((bitField0_ & 0x00000040) == 0x00000040)) {\n         output.writeBool(7, enableResubscribe_);\n       }\n       getUnknownFields().writeTo(output);\n@@ -7275,6 +7350,10 @@ public int getSerializedSize() {\n           .computeBytesSize(5, getMessageFilterBytes());\n       }\n       if (((bitField0_ & 0x00000020) == 0x00000020)) {\n+        size += com.google.protobuf.CodedOutputStream\n+          .computeUInt32Size(6, deliveryThrottleValue_);\n+      }\n+      if (((bitField0_ & 0x00000040) == 0x00000040)) {\n         size += com.google.protobuf.CodedOutputStream\n           .computeBoolSize(7, enableResubscribe_);\n       }\n@@ -7417,8 +7496,10 @@ public Builder clear() {\n         bitField0_ = (bitField0_ & ~0x00000008);\n         messageFilter_ = \"\";\n         bitField0_ = (bitField0_ & ~0x00000010);\n-        enableResubscribe_ = true;\n+        deliveryThrottleValue_ = 0;\n         bitField0_ = (bitField0_ & ~0x00000020);\n+        enableResubscribe_ = true;\n+        bitField0_ = (bitField0_ & ~0x00000040);\n         return this;\n       }\n       \n@@ -7484,6 +7565,10 @@ public Builder clone() {\n         if (((from_bitField0_ & 0x00000020) == 0x00000020)) {\n           to_bitField0_ |= 0x00000020;\n         }\n+        result.deliveryThrottleValue_ = deliveryThrottleValue_;\n+        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {\n+          to_bitField0_ |= 0x00000040;\n+        }\n         result.enableResubscribe_ = enableResubscribe_;\n         result.bitField0_ = to_bitField0_;\n         onBuilt();\n@@ -7516,6 +7601,9 @@ public Builder mergeFrom(org.apache.hedwig.protocol.PubSubProtocol.SubscriptionO\n         if (other.hasMessageFilter()) {\n           setMessageFilter(other.getMessageFilter());\n         }\n+        if (other.hasDeliveryThrottleValue()) {\n+          setDeliveryThrottleValue(other.getDeliveryThrottleValue());\n+        }\n         if (other.hasEnableResubscribe()) {\n           setEnableResubscribe(other.getEnableResubscribe());\n         }\n@@ -7585,8 +7673,13 @@ public Builder mergeFrom(\n               messageFilter_ = input.readBytes();\n               break;\n             }\n-            case 56: {\n+            case 48: {\n               bitField0_ |= 0x00000020;\n+              deliveryThrottleValue_ = input.readUInt32();\n+              break;\n+            }\n+            case 56: {\n+              bitField0_ |= 0x00000040;\n               enableResubscribe_ = input.readBool();\n               break;\n             }\n@@ -7788,22 +7881,43 @@ void setMessageFilter(com.google.protobuf.ByteString value) {\n         onChanged();\n       }\n       \n+      // optional uint32 deliveryThrottleValue = 6;\n+      private int deliveryThrottleValue_ ;\n+      public boolean hasDeliveryThrottleValue() {\n+        return ((bitField0_ & 0x00000020) == 0x00000020);\n+      }\n+      public int getDeliveryThrottleValue() {\n+        return deliveryThrottleValue_;\n+      }\n+      public Builder setDeliveryThrottleValue(int value) {\n+        bitField0_ |= 0x00000020;\n+        deliveryThrottleValue_ = value;\n+        onChanged();\n+        return this;\n+      }\n+      public Builder clearDeliveryThrottleValue() {\n+        bitField0_ = (bitField0_ & ~0x00000020);\n+        deliveryThrottleValue_ = 0;\n+        onChanged();\n+        return this;\n+      }\n+      \n       // optional bool enableResubscribe = 7 [default = true];\n       private boolean enableResubscribe_ = true;\n       public boolean hasEnableResubscribe() {\n-        return ((bitField0_ & 0x00000020) == 0x00000020);\n+        return ((bitField0_ & 0x00000040) == 0x00000040);\n       }\n       public boolean getEnableResubscribe() {\n         return enableResubscribe_;\n       }\n       public Builder setEnableResubscribe(boolean value) {\n-        bitField0_ |= 0x00000020;\n+        bitField0_ |= 0x00000040;\n         enableResubscribe_ = value;\n         onChanged();\n         return this;\n       }\n       public Builder clearEnableResubscribe() {\n-        bitField0_ = (bitField0_ & ~0x00000020);\n+        bitField0_ = (bitField0_ & ~0x00000040);\n         enableResubscribe_ = true;\n         onChanged();\n         return this;\n@@ -15382,73 +15496,75 @@ public Builder clearNumTopics() {\n       \"\\033.Hedwig.StopDeliveryRequest\\022:\\n\\024startDel\" +\n       \"iveryRequest\\0309 \\001(\\0132\\034.Hedwig.StartDeliver\" +\n       \"yRequest\\\".\\n\\016PublishRequest\\022\\034\\n\\003msg\\030\\002 \\002(\\0132\" +\n-      \"\\017.Hedwig.Message\\\"d\\n\\027SubscriptionPreferen\" +\n-      \"ces\\022\\034\\n\\007options\\030\\001 \\001(\\0132\\013.Hedwig.Map\\022\\024\\n\\014mes\" +\n-      \"sageBound\\030\\002 \\001(\\r\\022\\025\\n\\rmessageFilter\\030\\003 \\001(\\t\\\"\\277\" +\n-      \"\\002\\n\\020SubscribeRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\" +\n-      \"\\014\\022Q\\n\\016createOrAttach\\030\\003 \\001(\\0162\\'.Hedwig.Subsc\",\n-      \"ribeRequest.CreateOrAttach:\\020CREATE_OR_AT\" +\n-      \"TACH\\022\\032\\n\\013synchronous\\030\\004 \\001(\\010:\\005false\\022\\024\\n\\014mess\" +\n-      \"ageBound\\030\\005 \\001(\\r\\0224\\n\\013preferences\\030\\006 \\001(\\0132\\037.He\" +\n-      \"dwig.SubscriptionPreferences\\022\\032\\n\\013forceAtt\" +\n-      \"ach\\030\\007 \\001(\\010:\\005false\\\">\\n\\016CreateOrAttach\\022\\n\\n\\006CR\" +\n-      \"EATE\\020\\000\\022\\n\\n\\006ATTACH\\020\\001\\022\\024\\n\\020CREATE_OR_ATTACH\\020\\002\" +\n-      \"\\\"\\363\\001\\n\\023SubscriptionOptions\\022\\032\\n\\013forceAttach\\030\" +\n-      \"\\001 \\001(\\010:\\005false\\022Q\\n\\016createOrAttach\\030\\002 \\001(\\0162\\'.H\" +\n-      \"edwig.SubscribeRequest.CreateOrAttach:\\020C\" +\n-      \"REATE_OR_ATTACH\\022\\027\\n\\014messageBound\\030\\003 \\001(\\r:\\0010\",\n-      \"\\022\\034\\n\\007options\\030\\004 \\001(\\0132\\013.Hedwig.Map\\022\\025\\n\\rmessag\" +\n-      \"eFilter\\030\\005 \\001(\\t\\022\\037\\n\\021enableResubscribe\\030\\007 \\001(\\010\" +\n-      \":\\004true\\\"K\\n\\016ConsumeRequest\\022\\024\\n\\014subscriberId\" +\n-      \"\\030\\002 \\002(\\014\\022#\\n\\005msgId\\030\\003 \\002(\\0132\\024.Hedwig.MessageSe\" +\n-      \"qId\\\"*\\n\\022UnsubscribeRequest\\022\\024\\n\\014subscriberI\" +\n-      \"d\\030\\002 \\002(\\014\\\"+\\n\\023StopDeliveryRequest\\022\\024\\n\\014subscr\" +\n-      \"iberId\\030\\002 \\002(\\014\\\",\\n\\024StartDeliveryRequest\\022\\024\\n\\014\" +\n-      \"subscriberId\\030\\002 \\002(\\014\\\"\\377\\001\\n\\016PubSubResponse\\0220\\n\" +\n-      \"\\017protocolVersion\\030\\001 \\002(\\0162\\027.Hedwig.Protocol\" +\n-      \"Version\\022&\\n\\nstatusCode\\030\\002 \\002(\\0162\\022.Hedwig.Sta\",\n-      \"tusCode\\022\\r\\n\\005txnId\\030\\003 \\002(\\004\\022\\021\\n\\tstatusMsg\\030\\004 \\001(\" +\n-      \"\\t\\022 \\n\\007message\\030\\005 \\001(\\0132\\017.Hedwig.Message\\022\\r\\n\\005t\" +\n-      \"opic\\030\\006 \\001(\\014\\022\\024\\n\\014subscriberId\\030\\007 \\001(\\014\\022*\\n\\014resp\" +\n-      \"onseBody\\030\\010 \\001(\\0132\\024.Hedwig.ResponseBody\\\"?\\n\\017\" +\n-      \"PublishResponse\\022,\\n\\016publishedMsgId\\030\\001 \\002(\\0132\" +\n-      \"\\024.Hedwig.MessageSeqId\\\"I\\n\\021SubscribeRespon\" +\n-      \"se\\0224\\n\\013preferences\\030\\002 \\001(\\0132\\037.Hedwig.Subscri\" +\n-      \"ptionPreferences\\\"v\\n\\014ResponseBody\\0220\\n\\017publ\" +\n-      \"ishResponse\\030\\001 \\001(\\0132\\027.Hedwig.PublishRespon\" +\n-      \"se\\0224\\n\\021subscribeResponse\\030\\002 \\001(\\0132\\031.Hedwig.S\",\n-      \"ubscribeResponse\\\"N\\n\\021SubscriptionState\\022#\\n\" +\n-      \"\\005msgId\\030\\001 \\002(\\0132\\024.Hedwig.MessageSeqId\\022\\024\\n\\014me\" +\n-      \"ssageBound\\030\\002 \\001(\\r\\\"r\\n\\020SubscriptionData\\022(\\n\\005\" +\n-      \"state\\030\\001 \\001(\\0132\\031.Hedwig.SubscriptionState\\0224\" +\n-      \"\\n\\013preferences\\030\\002 \\001(\\0132\\037.Hedwig.Subscriptio\" +\n-      \"nPreferences\\\"O\\n\\013LedgerRange\\022\\020\\n\\010ledgerId\\030\" +\n-      \"\\001 \\002(\\004\\022.\\n\\020endSeqIdIncluded\\030\\002 \\001(\\0132\\024.Hedwig\" +\n-      \".MessageSeqId\\\"3\\n\\014LedgerRanges\\022#\\n\\006ranges\\030\" +\n-      \"\\001 \\003(\\0132\\023.Hedwig.LedgerRange\\\":\\n\\013ManagerMet\" +\n-      \"a\\022\\023\\n\\013managerImpl\\030\\002 \\002(\\t\\022\\026\\n\\016managerVersion\",\n-      \"\\030\\003 \\002(\\r\\\".\\n\\013HubInfoData\\022\\020\\n\\010hostname\\030\\002 \\002(\\t\\022\" +\n-      \"\\r\\n\\005czxid\\030\\003 \\002(\\004\\\" \\n\\013HubLoadData\\022\\021\\n\\tnumTopi\" +\n-      \"cs\\030\\002 \\002(\\004*\\\"\\n\\017ProtocolVersion\\022\\017\\n\\013VERSION_O\" +\n-      \"NE\\020\\001*p\\n\\rOperationType\\022\\013\\n\\007PUBLISH\\020\\000\\022\\r\\n\\tSU\" +\n-      \"BSCRIBE\\020\\001\\022\\013\\n\\007CONSUME\\020\\002\\022\\017\\n\\013UNSUBSCRIBE\\020\\003\\022\" +\n-      \"\\022\\n\\016START_DELIVERY\\020\\004\\022\\021\\n\\rSTOP_DELIVERY\\020\\005*D\" +\n-      \"\\n\\021SubscriptionEvent\\022\\017\\n\\013TOPIC_MOVED\\020\\001\\022\\036\\n\\032\" +\n-      \"SUBSCRIPTION_FORCED_CLOSED\\020\\002*\\205\\004\\n\\nStatusC\" +\n-      \"ode\\022\\013\\n\\007SUCCESS\\020\\000\\022\\026\\n\\021MALFORMED_REQUEST\\020\\221\\003\" +\n-      \"\\022\\022\\n\\rNO_SUCH_TOPIC\\020\\222\\003\\022\\036\\n\\031CLIENT_ALREADY_S\",\n-      \"UBSCRIBED\\020\\223\\003\\022\\032\\n\\025CLIENT_NOT_SUBSCRIBED\\020\\224\\003\" +\n-      \"\\022\\026\\n\\021COULD_NOT_CONNECT\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\\226\" +\n-      \"\\003\\022\\036\\n\\031NOT_RESPONSIBLE_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SER\" +\n-      \"VICE_DOWN\\020\\366\\003\\022\\024\\n\\017UNCERTAIN_STATE\\020\\367\\003\\022\\033\\n\\026IN\" +\n-      \"VALID_MESSAGE_FILTER\\020\\370\\003\\022\\020\\n\\013BAD_VERSION\\020\\210\" +\n-      \"\\004\\022\\036\\n\\031NO_TOPIC_PERSISTENCE_INFO\\020\\211\\004\\022\\\"\\n\\035TOP\" +\n-      \"IC_PERSISTENCE_INFO_EXISTS\\020\\212\\004\\022\\032\\n\\025NO_SUBS\" +\n-      \"CRIPTION_STATE\\020\\213\\004\\022\\036\\n\\031SUBSCRIPTION_STATE_\" +\n-      \"EXISTS\\020\\214\\004\\022\\030\\n\\023NO_TOPIC_OWNER_INFO\\020\\215\\004\\022\\034\\n\\027T\" +\n-      \"OPIC_OWNER_INFO_EXISTS\\020\\216\\004\\022\\031\\n\\024UNEXPECTED_\",\n-      \"CONDITION\\020\\330\\004\\022\\016\\n\\tCOMPOSITE\\020\\274\\005B\\036\\n\\032org.apac\" +\n-      \"he.hedwig.protocolH\\001\"\n+      \"\\017.Hedwig.Message\\\"\\203\\001\\n\\027SubscriptionPrefere\" +\n+      \"nces\\022\\034\\n\\007options\\030\\001 \\001(\\0132\\013.Hedwig.Map\\022\\024\\n\\014me\" +\n+      \"ssageBound\\030\\002 \\001(\\r\\022\\025\\n\\rmessageFilter\\030\\003 \\001(\\t\\022\" +\n+      \"\\035\\n\\025deliveryThrottleValue\\030\\004 \\001(\\r\\\"\\277\\002\\n\\020Subsc\" +\n+      \"ribeRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\022Q\\n\\016cre\",\n+      \"ateOrAttach\\030\\003 \\001(\\0162\\'.Hedwig.SubscribeRequ\" +\n+      \"est.CreateOrAttach:\\020CREATE_OR_ATTACH\\022\\032\\n\\013\" +\n+      \"synchronous\\030\\004 \\001(\\010:\\005false\\022\\024\\n\\014messageBound\" +\n+      \"\\030\\005 \\001(\\r\\0224\\n\\013preferences\\030\\006 \\001(\\0132\\037.Hedwig.Sub\" +\n+      \"scriptionPreferences\\022\\032\\n\\013forceAttach\\030\\007 \\001(\" +\n+      \"\\010:\\005false\\\">\\n\\016CreateOrAttach\\022\\n\\n\\006CREATE\\020\\000\\022\\n\" +\n+      \"\\n\\006ATTACH\\020\\001\\022\\024\\n\\020CREATE_OR_ATTACH\\020\\002\\\"\\222\\002\\n\\023Sub\" +\n+      \"scriptionOptions\\022\\032\\n\\013forceAttach\\030\\001 \\001(\\010:\\005f\" +\n+      \"alse\\022Q\\n\\016createOrAttach\\030\\002 \\001(\\0162\\'.Hedwig.Su\" +\n+      \"bscribeRequest.CreateOrAttach:\\020CREATE_OR\",\n+      \"_ATTACH\\022\\027\\n\\014messageBound\\030\\003 \\001(\\r:\\0010\\022\\034\\n\\007opti\" +\n+      \"ons\\030\\004 \\001(\\0132\\013.Hedwig.Map\\022\\025\\n\\rmessageFilter\\030\" +\n+      \"\\005 \\001(\\t\\022\\035\\n\\025deliveryThrottleValue\\030\\006 \\001(\\r\\022\\037\\n\\021\" +\n+      \"enableResubscribe\\030\\007 \\001(\\010:\\004true\\\"K\\n\\016Consume\" +\n+      \"Request\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\022#\\n\\005msgId\\030\\003\" +\n+      \" \\002(\\0132\\024.Hedwig.MessageSeqId\\\"*\\n\\022Unsubscrib\" +\n+      \"eRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\\"+\\n\\023StopDe\" +\n+      \"liveryRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\\014\\\",\\n\\024S\" +\n+      \"tartDeliveryRequest\\022\\024\\n\\014subscriberId\\030\\002 \\002(\" +\n+      \"\\014\\\"\\377\\001\\n\\016PubSubResponse\\0220\\n\\017protocolVersion\\030\",\n+      \"\\001 \\002(\\0162\\027.Hedwig.ProtocolVersion\\022&\\n\\nstatus\" +\n+      \"Code\\030\\002 \\002(\\0162\\022.Hedwig.StatusCode\\022\\r\\n\\005txnId\\030\" +\n+      \"\\003 \\002(\\004\\022\\021\\n\\tstatusMsg\\030\\004 \\001(\\t\\022 \\n\\007message\\030\\005 \\001(\" +\n+      \"\\0132\\017.Hedwig.Message\\022\\r\\n\\005topic\\030\\006 \\001(\\014\\022\\024\\n\\014sub\" +\n+      \"scriberId\\030\\007 \\001(\\014\\022*\\n\\014responseBody\\030\\010 \\001(\\0132\\024.\" +\n+      \"Hedwig.ResponseBody\\\"?\\n\\017PublishResponse\\022,\" +\n+      \"\\n\\016publishedMsgId\\030\\001 \\002(\\0132\\024.Hedwig.MessageS\" +\n+      \"eqId\\\"I\\n\\021SubscribeResponse\\0224\\n\\013preferences\" +\n+      \"\\030\\002 \\001(\\0132\\037.Hedwig.SubscriptionPreferences\\\"\" +\n+      \"v\\n\\014ResponseBody\\0220\\n\\017publishResponse\\030\\001 \\001(\\013\",\n+      \"2\\027.Hedwig.PublishResponse\\0224\\n\\021subscribeRe\" +\n+      \"sponse\\030\\002 \\001(\\0132\\031.Hedwig.SubscribeResponse\\\"\" +\n+      \"N\\n\\021SubscriptionState\\022#\\n\\005msgId\\030\\001 \\002(\\0132\\024.He\" +\n+      \"dwig.MessageSeqId\\022\\024\\n\\014messageBound\\030\\002 \\001(\\r\\\"\" +\n+      \"r\\n\\020SubscriptionData\\022(\\n\\005state\\030\\001 \\001(\\0132\\031.Hed\" +\n+      \"wig.SubscriptionState\\0224\\n\\013preferences\\030\\002 \\001\" +\n+      \"(\\0132\\037.Hedwig.SubscriptionPreferences\\\"O\\n\\013L\" +\n+      \"edgerRange\\022\\020\\n\\010ledgerId\\030\\001 \\002(\\004\\022.\\n\\020endSeqId\" +\n+      \"Included\\030\\002 \\001(\\0132\\024.Hedwig.MessageSeqId\\\"3\\n\\014\" +\n+      \"LedgerRanges\\022#\\n\\006ranges\\030\\001 \\003(\\0132\\023.Hedwig.Le\",\n+      \"dgerRange\\\":\\n\\013ManagerMeta\\022\\023\\n\\013managerImpl\\030\" +\n+      \"\\002 \\002(\\t\\022\\026\\n\\016managerVersion\\030\\003 \\002(\\r\\\".\\n\\013HubInfo\" +\n+      \"Data\\022\\020\\n\\010hostname\\030\\002 \\002(\\t\\022\\r\\n\\005czxid\\030\\003 \\002(\\004\\\" \\n\" +\n+      \"\\013HubLoadData\\022\\021\\n\\tnumTopics\\030\\002 \\002(\\004*\\\"\\n\\017Proto\" +\n+      \"colVersion\\022\\017\\n\\013VERSION_ONE\\020\\001*p\\n\\rOperation\" +\n+      \"Type\\022\\013\\n\\007PUBLISH\\020\\000\\022\\r\\n\\tSUBSCRIBE\\020\\001\\022\\013\\n\\007CONS\" +\n+      \"UME\\020\\002\\022\\017\\n\\013UNSUBSCRIBE\\020\\003\\022\\022\\n\\016START_DELIVERY\" +\n+      \"\\020\\004\\022\\021\\n\\rSTOP_DELIVERY\\020\\005*D\\n\\021SubscriptionEve\" +\n+      \"nt\\022\\017\\n\\013TOPIC_MOVED\\020\\001\\022\\036\\n\\032SUBSCRIPTION_FORC\" +\n+      \"ED_CLOSED\\020\\002*\\205\\004\\n\\nStatusCode\\022\\013\\n\\007SUCCESS\\020\\000\\022\",\n+      \"\\026\\n\\021MALFORMED_REQUEST\\020\\221\\003\\022\\022\\n\\rNO_SUCH_TOPIC\" +\n+      \"\\020\\222\\003\\022\\036\\n\\031CLIENT_ALREADY_SUBSCRIBED\\020\\223\\003\\022\\032\\n\\025C\" +\n+      \"LIENT_NOT_SUBSCRIBED\\020\\224\\003\\022\\026\\n\\021COULD_NOT_CON\" +\n+      \"NECT\\020\\225\\003\\022\\017\\n\\nTOPIC_BUSY\\020\\226\\003\\022\\036\\n\\031NOT_RESPONSI\" +\n+      \"BLE_FOR_TOPIC\\020\\365\\003\\022\\021\\n\\014SERVICE_DOWN\\020\\366\\003\\022\\024\\n\\017U\" +\n+      \"NCERTAIN_STATE\\020\\367\\003\\022\\033\\n\\026INVALID_MESSAGE_FIL\" +\n+      \"TER\\020\\370\\003\\022\\020\\n\\013BAD_VERSION\\020\\210\\004\\022\\036\\n\\031NO_TOPIC_PER\" +\n+      \"SISTENCE_INFO\\020\\211\\004\\022\\\"\\n\\035TOPIC_PERSISTENCE_IN\" +\n+      \"FO_EXISTS\\020\\212\\004\\022\\032\\n\\025NO_SUBSCRIPTION_STATE\\020\\213\\004\" +\n+      \"\\022\\036\\n\\031SUBSCRIPTION_STATE_EXISTS\\020\\214\\004\\022\\030\\n\\023NO_T\",\n+      \"OPIC_OWNER_INFO\\020\\215\\004\\022\\034\\n\\027TOPIC_OWNER_INFO_E\" +\n+      \"XISTS\\020\\216\\004\\022\\031\\n\\024UNEXPECTED_CONDITION\\020\\330\\004\\022\\016\\n\\tC\" +\n+      \"OMPOSITE\\020\\274\\005B\\036\\n\\032org.apache.hedwig.protoco\" +\n+      \"lH\\001\"\n     };\n     com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =\n       new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {\n@@ -15524,7 +15640,7 @@ public Builder clearNumTopics() {\n           internal_static_Hedwig_SubscriptionPreferences_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionPreferences_descriptor,\n-              new java.lang.String[] { \"Options\", \"MessageBound\", \"MessageFilter\", },\n+              new java.lang.String[] { \"Options\", \"MessageBound\", \"MessageFilter\", \"DeliveryThrottleValue\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences.Builder.class);\n           internal_static_Hedwig_SubscribeRequest_descriptor =\n@@ -15540,7 +15656,7 @@ public Builder clearNumTopics() {\n           internal_static_Hedwig_SubscriptionOptions_fieldAccessorTable = new\n             com.google.protobuf.GeneratedMessage.FieldAccessorTable(\n               internal_static_Hedwig_SubscriptionOptions_descriptor,\n-              new java.lang.String[] { \"ForceAttach\", \"CreateOrAttach\", \"MessageBound\", \"Options\", \"MessageFilter\", \"EnableResubscribe\", },\n+              new java.lang.String[] { \"ForceAttach\", \"CreateOrAttach\", \"MessageBound\", \"Options\", \"MessageFilter\", \"DeliveryThrottleValue\", \"EnableResubscribe\", },\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.class,\n               org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.Builder.class);\n           internal_static_Hedwig_ConsumeRequest_descriptor ="},{"sha":"4062246f7172b3b5640e49a0074c745f0e8e0b72","filename":"hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/src/main/protobuf/PubSubProtocol.proto?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -117,6 +117,8 @@ message SubscriptionPreferences {\n     optional uint32 messageBound = 2;\n     // server-side message filter\n     optional string messageFilter = 3;\n+    // server-side delivery throttle value\n+    optional uint32 deliveryThrottleValue = 4;\n }\n \n message SubscribeRequest{\n@@ -154,6 +156,8 @@ message SubscriptionOptions {\n     optional Map options = 4;\n     // server-side message filter\n     optional string messageFilter = 5;\n+    // server-side delivery throttle value\n+    optional uint32 deliveryThrottleValue = 6;\n     // enable resubscribe\n     optional bool enableResubscribe = 7 [default = true];\n }"},{"sha":"c92986c90236a7392f47216faec544a9beee5fd0","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/common/ServerConfiguration.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -61,6 +61,9 @@\n     protected final static String BK_ENSEMBLE_SIZE = \"bk_ensemble_size\";\n     protected final static String BK_QUORUM_SIZE = \"bk_quorum_size\";\n     protected final static String RETRY_REMOTE_SUBSCRIBE_THREAD_RUN_INTERVAL = \"retry_remote_subscribe_thread_run_interval\";\n+    protected final static String DEFAULT_DELIVERY_THROTTLE_VALUE =\n+        \"default_delivery_throttle_value\";\n+\n     protected final static String MAX_ENTRIES_PER_LEDGER = \"max_entries_per_ledger\";\n \n     // manager related settings\n@@ -282,6 +285,13 @@ public int getRetryRemoteSubscribeThreadRunInterval() {\n         return conf.getInt(RETRY_REMOTE_SUBSCRIBE_THREAD_RUN_INTERVAL, 120000);\n     }\n \n+    // This parameter is for setting the default maximum number of messages delivered\n+    // to a subscriber without being consumed.\n+    // we throttle delivery messages to a subscriber when reaching the threshold.\n+    public int getDefaultDeliveryThrottleValue() {\n+        return conf.getInt(DEFAULT_DELIVERY_THROTTLE_VALUE, 0);\n+    }\n+\n     // This parameter is used when Bookkeeper is the persistence store\n     // and indicates what the ensemble size is (i.e. how many bookie\n     // servers to stripe the ledger entries across)."},{"sha":"f2603c7d44aec3872185a3e6e23ce6f63b132b6a","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/DeliveryManager.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -19,16 +19,33 @@\n \n import com.google.protobuf.ByteString;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n import org.apache.hedwig.filter.ServerMessageFilter;\n \n public interface DeliveryManager {\n     public void start();\n \n-    public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, ServerMessageFilter filter);\n+    public void startServingSubscription(ByteString topic, ByteString subscriberId,\n+                                         SubscriptionPreferences preferences,\n+                                         MessageSeqId seqIdToStartFrom,\n+                                         DeliveryEndPoint endPoint,\n+                                         ServerMessageFilter filter);\n \n     public void stopServingSubscriber(ByteString topic, ByteString subscriberId);\n \n+    /**\n+     * Tell the delivery manager where that a subscriber has consumed\n+     *\n+     * @param topic\n+     *          Topic Name\n+     * @param subscriberId\n+     *          Subscriber Id\n+     * @param consumedSeqId\n+     *          Max consumed seq id.\n+     */\n+    public void messageConsumed(ByteString topic, ByteString subscriberId,\n+                                MessageSeqId consumedSeqId);\n+\n     /**\n      * Stop delivery manager\n      */"},{"sha":"a90422e46af692c8e14f2c6a51150346289e3288","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":125,"deletions":7,"changes":132,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -17,6 +17,7 @@\n  */\n package org.apache.hedwig.server.delivery;\n \n+import java.util.Comparator;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -25,7 +26,7 @@\n import java.util.SortedMap;\n import java.util.TreeMap;\n import java.util.concurrent.BlockingQueue;\n-import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.PriorityBlockingQueue;\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.TimeUnit;\n \n@@ -42,6 +43,7 @@\n import org.apache.hedwig.protocol.PubSubProtocol.ProtocolVersion;\n import org.apache.hedwig.protocol.PubSubProtocol.PubSubResponse;\n import org.apache.hedwig.protocol.PubSubProtocol.StatusCode;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.server.common.UnexpectedError;\n import org.apache.hedwig.server.netty.ServerStats;\n@@ -50,6 +52,7 @@\n import org.apache.hedwig.server.persistence.PersistenceManager;\n import org.apache.hedwig.server.persistence.ScanCallback;\n import org.apache.hedwig.server.persistence.ScanRequest;\n+import static org.apache.hedwig.util.VarArgs.va;\n \n public class FIFODeliveryManager implements Runnable, DeliveryManager {\n \n@@ -68,7 +71,14 @@\n      * The queue of all subscriptions that are facing a transient error either\n      * in scanning from the persistence manager, or in sending to the consumer\n      */\n-    Queue<ActiveSubscriberState> retryQueue = new ConcurrentLinkedQueue<ActiveSubscriberState>();\n+    Queue<ActiveSubscriberState> retryQueue =\n+        new PriorityBlockingQueue<ActiveSubscriberState>(32, new Comparator<ActiveSubscriberState>() {\n+            @Override\n+            public int compare(ActiveSubscriberState as1, ActiveSubscriberState as2) {\n+                long s = as1.lastScanErrorTime - as2.lastScanErrorTime;\n+                return s > 0 ? 1 : (s < 0 ? -1 : 0);\n+            }\n+        });\n \n     /**\n      * Stores a mapping from topic to the delivery pointers on the topic. The\n@@ -136,11 +146,16 @@ protected void enqueueWithoutFailure(DeliveryManagerRequest request) {\n      *            Only messages passing this filter should be sent to this\n      *            subscriber\n      */\n-    public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n+    public void startServingSubscription(ByteString topic, ByteString subscriberId,\n+                                         SubscriptionPreferences preferences,\n+                                         MessageSeqId seqIdToStartFrom,\n                                          DeliveryEndPoint endPoint, ServerMessageFilter filter) {\n \n-        ActiveSubscriberState subscriber = new ActiveSubscriberState(topic, subscriberId, seqIdToStartFrom\n-                .getLocalComponent() - 1, endPoint, filter);\n+        ActiveSubscriberState subscriber = \n+            new ActiveSubscriberState(topic, subscriberId,\n+                                      preferences,\n+                                      seqIdToStartFrom.getLocalComponent() - 1,\n+                                      endPoint, filter);\n \n         enqueueWithoutFailure(subscriber);\n     }\n@@ -179,6 +194,34 @@ public void retryErroredSubscriberAfterDelay(ActiveSubscriberState subscriber) {\n         }\n     }\n \n+    public void clearRetryDelayForSubscriber(ActiveSubscriberState subscriber) {\n+        subscriber.clearLastScanErrorTime();\n+        if (!retryQueue.offer(subscriber)) {\n+            throw new UnexpectedError(\"Could not enqueue to delivery manager retry queue\");\n+        }\n+        // no request in request queue now\n+        // issue a empty delivery request to not waiting for polling requests queue\n+        if (requestQueue.isEmpty()) {\n+            enqueueWithoutFailure(new DeliveryManagerRequest() {\n+                    @Override\n+                    public void performRequest() {\n+                    // do nothing\n+                    }\n+                    });\n+        }\n+    }\n+\n+    @Override\n+    public void messageConsumed(ByteString topic, ByteString subscriberId,\n+                                MessageSeqId consumedSeqId) {\n+        ActiveSubscriberState subState =\n+            subscriberStates.get(new TopicSubscriber(topic, subscriberId));\n+        if (null == subState) {\n+            return;\n+        }\n+        subState.messageConsumed(consumedSeqId.getLocalComponent()); \n+    }\n+\n     /**\n      * Instructs the delivery manager to move the delivery pointer for a given\n      * subscriber\n@@ -291,6 +334,9 @@ protected void addDeliveryPtr(ActiveSubscriberState subscriber, Long seqId) {\n     }\n \n     public class ActiveSubscriberState implements ScanCallback, DeliveryCallback, DeliveryManagerRequest {\n+\n+        static final int UNLIMITED = 0;\n+\n         ByteString topic;\n         ByteString subscriberId;\n         long lastLocalSeqIdDelivered;\n@@ -299,18 +345,35 @@ protected void addDeliveryPtr(ActiveSubscriberState subscriber, Long seqId) {\n         long lastScanErrorTime = -1;\n         long localSeqIdDeliveringNow;\n         long lastSeqIdCommunicatedExternally;\n+        long lastSeqIdConsumedUtil;\n+        boolean isThrottled = false;\n+        final int throttleThreshold;\n         ServerMessageFilter filter;\n         // TODO make use of these variables\n \n         final static int SEQ_ID_SLACK = 10;\n \n-        public ActiveSubscriberState(ByteString topic, ByteString subscriberId, long lastLocalSeqIdDelivered,\n-                                     DeliveryEndPoint deliveryEndPoint, ServerMessageFilter filter) {\n+        public ActiveSubscriberState(ByteString topic, ByteString subscriberId,\n+                                     SubscriptionPreferences preferences,\n+                                     long lastLocalSeqIdDelivered,\n+                                     DeliveryEndPoint deliveryEndPoint,\n+                                     ServerMessageFilter filter) {\n             this.topic = topic;\n             this.subscriberId = subscriberId;\n             this.lastLocalSeqIdDelivered = lastLocalSeqIdDelivered;\n+            this.lastSeqIdConsumedUtil = lastLocalSeqIdDelivered;\n             this.deliveryEndPoint = deliveryEndPoint;\n             this.filter = filter;\n+            if (preferences.hasDeliveryThrottleValue()) {\n+                throttleThreshold = preferences.getDeliveryThrottleValue();\n+            } else {\n+                if (FIFODeliveryManager.this.cfg.getDefaultDeliveryThrottleValue() > 0) {\n+                    throttleThreshold =\n+                        FIFODeliveryManager.this.cfg.getDefaultDeliveryThrottleValue();\n+                } else {\n+                    throttleThreshold = UNLIMITED;\n+                }\n+            }\n         }\n \n         public void setNotConnected() {\n@@ -340,16 +403,71 @@ public void setLastScanErrorTime(long lastScanErrorTime) {\n             this.lastScanErrorTime = lastScanErrorTime;\n         }\n \n+        /**\n+         * Clear the last scan error time so it could be retry immediately.\n+         */\n+        protected void clearLastScanErrorTime() {\n+            this.lastScanErrorTime = -1;\n+        }\n+\n         protected boolean isConnected() {\n             return connected;\n         }\n \n+        protected void messageConsumed(long newSeqIdConsumed) {\n+            if (newSeqIdConsumed <= lastSeqIdConsumedUtil) {\n+                return;\n+            }\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Subscriber ({}) moved consumed ptr from {} to {}.\",\n+                             va(this, lastSeqIdConsumedUtil, newSeqIdConsumed));\n+            }\n+            lastSeqIdConsumedUtil = newSeqIdConsumed;\n+            // after updated seq id check whether it still exceed msg limitation\n+            if (msgLimitExceeded()) {\n+                return;\n+            }\n+            if (isThrottled) {\n+                isThrottled = false;\n+                logger.info(\"Try to wake up subscriber ({}) to deliver messages again : last delivered {}, last consumed {}.\",\n+                            va(this, lastLocalSeqIdDelivered, lastSeqIdConsumedUtil));\n+\n+                enqueueWithoutFailure(new DeliveryManagerRequest() {\n+                    @Override\n+                    public void performRequest() {\n+                        // enqueue \n+                        clearRetryDelayForSubscriber(ActiveSubscriberState.this);            \n+                    }\n+                });\n+            }\n+        }\n+\n+        protected boolean msgLimitExceeded() {\n+            if (throttleThreshold == UNLIMITED) {\n+                return false;\n+            }\n+            if (lastLocalSeqIdDelivered - lastSeqIdConsumedUtil >= throttleThreshold) {\n+                return true;\n+            }\n+            return false;\n+        }\n+\n         public void deliverNextMessage() {\n \n             if (!isConnected()) {\n                 return;\n             }\n \n+            // check whether we have delivered enough messages without receiving their consumes\n+            if (msgLimitExceeded()) {\n+                logger.info(\"Subscriber ({}) is throttled : last delivered {}, last consumed {}.\",\n+                            va(this, lastLocalSeqIdDelivered, lastSeqIdConsumedUtil));\n+                isThrottled = true;\n+                // do nothing, since the delivery process would be throttled.\n+                // After message consumed, it would be added back to retry queue.\n+                return;\n+            }\n+\n             localSeqIdDeliveringNow = persistenceMgr.getSeqIdAfterSkipping(topic, lastLocalSeqIdDelivered, 1);\n \n             ScanRequest scanRequest = new ScanRequest(topic, localSeqIdDeliveringNow,"},{"sha":"1317d158652692e33b6694ed5ce07a8a429b8e67","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/handlers/SubscribeHandler.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -260,7 +260,9 @@ public void operationFinished(Object ctx, SubscriptionData subData) {\n                 MessageSeqId lastConsumedSeqId = subData.getState().getMsgId();\n                 MessageSeqId seqIdToStartFrom = MessageSeqId.newBuilder(lastConsumedSeqId).setLocalComponent(\n                                                     lastConsumedSeqId.getLocalComponent() + 1).build();\n-                deliveryMgr.startServingSubscription(topic, subscriberId, seqIdToStartFrom,\n+                deliveryMgr.startServingSubscription(topic, subscriberId,\n+                                                     subData.getPreferences(),\n+                                                     seqIdToStartFrom,\n                                                      new ChannelEndPoint(channel), filter);\n             }\n         }, null);"},{"sha":"8ed856a63dd00af30c70219eb68977ebec9bacb3","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -575,7 +575,10 @@ public void run() {\n                 }\n                 cb.operationFinished(ctx, null);\n             }\n-\n+            // tell delivery manage about the consume event\n+            if (null != dm) {\n+                dm.messageConsumed(topic, subscriberId, consumeSeqId);\n+            }\n         }\n     }\n "},{"sha":"4b6c045034ad3f903185672325ed6721d7164745","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionState.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -136,6 +136,14 @@ public boolean updatePreferences(SubscriptionPreferences preferences) {\n                 changed = true;\n             }\n         }\n+        if (preferences.hasDeliveryThrottleValue()) {\n+            if (!subscriptionPreferences.hasDeliveryThrottleValue() ||\n+                subscriptionPreferences.getDeliveryThrottleValue() !=\n+                preferences.getDeliveryThrottleValue()) {\n+                newPreferencesBuilder.setDeliveryThrottleValue(preferences.getDeliveryThrottleValue());\n+                changed = true;\n+            }\n+        }\n         if (preferences.hasOptions()) {\n             Map<String, ByteString> userOptions = SubscriptionStateUtils.buildUserOptions(subscriptionPreferences);\n             Map<String, ByteString> optUpdates = SubscriptionStateUtils.buildUserOptions(preferences);"},{"sha":"0b07a97a4967448a55896a71565995220ada7c8d","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":94,"deletions":1,"changes":95,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -577,10 +577,14 @@ public boolean await(long timeout, TimeUnit unit)\n         }\n \n         ClientCurrent() {\n+            this(true);\n+        }\n+\n+        ClientCurrent(final boolean autoConsumeEnabled) {\n             conf = new org.apache.hedwig.client.conf.ClientConfiguration() {\n                 @Override\n                 public boolean isAutoSendConsumeMessageEnabled() {\n-                    return true;\n+                    return autoConsumeEnabled;\n                 }\n                 @Override\n                 public int getConsumedMessagesBufferSize() {\n@@ -756,6 +760,65 @@ void receiveInts(ByteString topic, ByteString subscriberId, int start, int num)\n             subscriber.stopDelivery(topic, subscriberId);\n         }\n \n+        // throttle doesn't work talking with 41 server\n+        void throttleX41(ByteString topic, ByteString subid, final int X)\n+        throws Exception {\n+            org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions options =\n+                org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions.newBuilder()\n+                .setCreateOrAttach(org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach.CREATE_OR_ATTACH)\n+                .setDeliveryThrottleValue(X) .build();\n+            subscribe(topic, subid, options);\n+            closeSubscription(topic, subid);\n+            publishInts(topic, 1, 3*X);\n+            subscribe(topic, subid);\n+\n+            final AtomicInteger expected = new AtomicInteger(1);\n+            final CountDownLatch throttleLatch = new CountDownLatch(1);\n+            final CountDownLatch nonThrottleLatch = new CountDownLatch(1);\n+            subscriber.startDelivery(topic, subid, new org.apache.hedwig.client.api.MessageHandler() {\n+                @Override\n+                public synchronized void deliver(ByteString topic, ByteString subscriberId,\n+                                                 org.apache.hedwig.protocol.PubSubProtocol.Message msg,\n+                                                 org.apache.hedwig.util.Callback<Void> callback, Object context) {\n+                    try {\n+                        int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+                        logger.debug(\"Received message {},\", value);\n+\n+                        if (value == expected.get()) {\n+                            expected.incrementAndGet();\n+                        } else {\n+                            // error condition\n+                            logger.error(\"Did not receive expected value, expected {}, got {}\",\n+                                         expected.get(), value);\n+                            expected.set(0);\n+                            throttleLatch.countDown();\n+                            nonThrottleLatch.countDown();\n+                        }\n+                        if (expected.get() > X+1) {\n+                            throttleLatch.countDown();\n+                        }\n+                        if (expected.get() == (3 * X + 1)) {\n+                            nonThrottleLatch.countDown();\n+                        }\n+                        callback.operationFinished(context, null);\n+                    } catch (Exception e) {\n+                        logger.error(\"Received bad message\", e);\n+                        throttleLatch.countDown();\n+                        nonThrottleLatch.countDown();\n+                    }\n+                }\n+            });\n+            assertTrue(\"Should Receive more messages than throttle value \" + X,\n+                        throttleLatch.await(10, TimeUnit.SECONDS));\n+\n+            assertTrue(\"Timed out waiting for messages \" + (3*X + 1),\n+                       nonThrottleLatch.await(10, TimeUnit.SECONDS));\n+            assertEquals(\"Should be expected message with \" + (3*X + 1),\n+                         3*X + 1, expected.get());\n+\n+            subscriber.stopDelivery(topic, subid);\n+            closeSubscription(topic, subid);\n+        }\n     }\n \n     /**\n@@ -1029,4 +1092,34 @@ public void testClientMessageFilterCompat410() throws Exception {\n         // stop bookkeeper cluster\n         bkc410.stop();\n     }\n+\n+    /**\n+     * Test compatability between version 4.1.0 and the current version.\n+     *\n+     * Server side throttling does't work when current client connects to old version\n+     * server.\n+     */\n+    @Test\n+    public void testServerSideThrottleCompat410() throws Exception {\n+        ByteString topic = ByteString.copyFromUtf8(\"TestServerSideThrottleCompat410\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+\n+        // start bookkeeper\n+        BookKeeperCluster410 bkc410 = new BookKeeperCluster410(3);\n+        bkc410.start();\n+\n+        // start hub server 410\n+        Server410 s410 = new Server410(zkUtil.getZooKeeperConnectString());\n+        s410.start();\n+\n+        ClientCurrent ccur = new ClientCurrent(false);\n+        ccur.throttleX41(topic, subid, 10);\n+\n+        ccur.close();\n+\n+        // stop 410 server\n+        s410.stop();\n+        // stop bookkeeper cluster\n+        bkc410.stop();\n+    }\n }"},{"sha":"9e5133648dd78097251e05bee64488c77b50c3f2","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","status":"modified","additions":19,"deletions":5,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/StubDeliveryManager.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -24,6 +24,7 @@\n import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.filter.ServerMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n \n public class StubDeliveryManager implements DeliveryManager {\n \n@@ -34,8 +35,11 @@\n         public DeliveryEndPoint endPoint;\n         public ServerMessageFilter filter;\n \n-        public StartServingRequest(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                   DeliveryEndPoint endPoint, ServerMessageFilter filter) {\n+        public StartServingRequest(ByteString topic, ByteString subscriberId,\n+                                   SubscriptionPreferences preferences,\n+                                   MessageSeqId seqIdToStartFrom,\n+                                   DeliveryEndPoint endPoint,\n+                                   ServerMessageFilter filter) {\n             this.topic = topic;\n             this.subscriberId = subscriberId;\n             this.seqIdToStartFrom = seqIdToStartFrom;\n@@ -48,16 +52,26 @@ public StartServingRequest(ByteString topic, ByteString subscriberId, MessageSeq\n     public Queue<Object> lastRequest = new LinkedList<Object>();\n \n     @Override\n-    public void startServingSubscription(ByteString topic, ByteString subscriberId, MessageSeqId seqIdToStartFrom,\n-                                         DeliveryEndPoint endPoint, ServerMessageFilter filter) {\n-        lastRequest.add(new StartServingRequest(topic, subscriberId, seqIdToStartFrom, endPoint, filter));\n+    public void startServingSubscription(ByteString topic, ByteString subscriberId,\n+                                         SubscriptionPreferences preferences,\n+                                         MessageSeqId seqIdToStartFrom,\n+                                         DeliveryEndPoint endPoint,\n+                                         ServerMessageFilter filter) {\n+        lastRequest.add(new StartServingRequest(topic, subscriberId, preferences,\n+                                                seqIdToStartFrom, endPoint, filter));\n     }\n \n     @Override\n     public void stopServingSubscriber(ByteString topic, ByteString subscriberId) {\n         lastRequest.add(new TopicSubscriber(topic, subscriberId));\n     }\n \n+    @Override\n+    public void messageConsumed(ByteString topic, ByteString subscriberId,\n+                                MessageSeqId seqId) {\n+        // do nothing\n+    }\n+\n     @Override\n     public void start() {\n     }"},{"sha":"66e9ff3f25e5903deea534af566fe6ff7464e03a","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","status":"added","additions":207,"deletions":0,"changes":207,"blob_url":"https://github.com/apache/bookkeeper/blob/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","raw_url":"https://github.com/apache/bookkeeper/raw/f57cbe507d0f366fa76e0e163e867e4a7f93d958/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java?ref=f57cbe507d0f366fa76e0e163e867e4a7f93d958","patch":"@@ -0,0 +1,207 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.server.delivery;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+\n+import com.google.protobuf.ByteString;\n+\n+import org.apache.hedwig.client.HedwigClient;\n+import org.apache.hedwig.client.api.MessageHandler;\n+import org.apache.hedwig.client.api.Publisher;\n+import org.apache.hedwig.client.api.Subscriber;\n+import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n+import org.apache.hedwig.server.HedwigHubTestBase;\n+import org.apache.hedwig.server.common.ServerConfiguration;\n+import org.apache.hedwig.util.Callback;\n+\n+public class TestThrottlingDelivery extends HedwigHubTestBase {\n+\n+    private static final int DEFAULT_THROTTLE_VALUE = 10;\n+\n+    protected class ThrottleDeliveryServerConfiguration extends HubServerConfiguration {\n+\n+        ThrottleDeliveryServerConfiguration(int serverPort, int sslServerPort) {\n+            super(serverPort, sslServerPort);\n+        }\n+\n+        @Override\n+        public int getDefaultDeliveryThrottleValue() {\n+            return DEFAULT_THROTTLE_VALUE;\n+        }\n+    }\n+\n+    protected class ThrottleDeliveryClientConfiguration extends ClientConfiguration {\n+\n+        int throttleValue;\n+\n+        ThrottleDeliveryClientConfiguration() {\n+            this(DEFAULT_THROTTLE_VALUE);\n+        }\n+\n+        ThrottleDeliveryClientConfiguration(int throttleValue) {\n+            this.throttleValue = throttleValue;\n+        }\n+\n+        @Override\n+        public int getMaximumOutstandingMessages() {\n+            return throttleValue;\n+        }\n+\n+        void setThrottleValue(int throttleValue) {\n+            this.throttleValue = throttleValue;\n+        }\n+\n+        @Override\n+        public boolean isAutoSendConsumeMessageEnabled() {\n+            return false;\n+        }\n+    }\n+\n+    private void throttleX(Publisher pub, final Subscriber sub,\n+                           ByteString topic, ByteString subid,\n+                           final int X) throws Exception {\n+        for (int i=1; i<=3*X; i++) {\n+            pub.publish(topic, Message.newBuilder().setBody(\n+                               ByteString.copyFromUtf8(String.valueOf(i))).build());\n+        }\n+        sub.subscribe(topic, subid, CreateOrAttach.ATTACH);\n+\n+        final AtomicInteger expected = new AtomicInteger(1);\n+        final CountDownLatch throttleLatch = new CountDownLatch(1);\n+        final CountDownLatch nonThrottleLatch = new CountDownLatch(1);\n+        sub.startDelivery(topic, subid, new MessageHandler() {\n+            @Override\n+            public synchronized void deliver(ByteString topic, ByteString subscriberId,\n+                                             Message msg,\n+                                             Callback<Void> callback, Object context) {\n+                try {\n+                    int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+                    logger.debug(\"Received message {},\", value);\n+\n+                    if (value == expected.get()) {\n+                        expected.incrementAndGet();\n+                    } else {\n+                        // error condition\n+                        logger.error(\"Did not receive expected value, expected {}, got {}\",\n+                                     expected.get(), value);\n+                        expected.set(0);\n+                        throttleLatch.countDown();\n+                        nonThrottleLatch.countDown();\n+                    }\n+                    if (expected.get() > X+1) {\n+                        throttleLatch.countDown();\n+                    }\n+                    if (expected.get() == (3 * X + 1)) {\n+                        nonThrottleLatch.countDown();\n+                    }\n+                    callback.operationFinished(context, null);\n+                    if (expected.get() > X + 1) {\n+                        sub.consume(topic, subscriberId, msg.getMsgId());\n+                    }      \n+                } catch (Exception e) {\n+                    logger.error(\"Received bad message\", e);\n+                    throttleLatch.countDown();\n+                    nonThrottleLatch.countDown();\n+                }\n+            }\n+        });\n+        assertFalse(\"Received more messages than throttle value \" + X,\n+                    throttleLatch.await(3, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected messages with only \" + (X+1), X+1, expected.get());\n+\n+        // consume messages to not throttle it\n+        for (int i=1; i<=X; i++) {\n+            sub.consume(topic, subid,\n+                        MessageSeqId.newBuilder().setLocalComponent(i).build());\n+        }\n+\n+        assertTrue(\"Timed out waiting for messages \" + (3*X + 1),\n+                   nonThrottleLatch.await(10, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected message with \" + (3*X + 1),\n+                     3*X + 1, expected.get());\n+\n+        sub.stopDelivery(topic, subid);\n+        sub.closeSubscription(topic, subid);\n+    }\n+\n+    @Override\n+    @Before\n+    public void setUp() throws Exception {\n+        numServers = 1;\n+        super.setUp();\n+    }\n+\n+    @Override\n+    protected ServerConfiguration getServerConfiguration(int port, int sslPort) {\n+        return new ThrottleDeliveryServerConfiguration(port, sslPort);\n+    }\n+\n+    @Test\n+    public void testServerSideThrottle() throws Exception {\n+        int throttleValue = DEFAULT_THROTTLE_VALUE;\n+        ThrottleDeliveryClientConfiguration conf =\n+            new ThrottleDeliveryClientConfiguration();\n+        HedwigClient client = new HedwigClient(conf);\n+        Publisher pub = client.getPublisher();\n+        Subscriber sub = client.getSubscriber();\n+\n+        ByteString topic = ByteString.copyFromUtf8(\"testServerSideThrottle\"); \n+        ByteString subid = ByteString.copyFromUtf8(\"serverThrottleSub\");\n+        sub.subscribe(topic, subid, CreateOrAttach.CREATE);\n+        sub.closeSubscription(topic, subid);\n+\n+        // throttle with hub server's setting\n+        throttleX(pub, sub, topic, subid, DEFAULT_THROTTLE_VALUE);\n+\n+        throttleValue = DEFAULT_THROTTLE_VALUE / 2;\n+        // throttle with a lower value than hub server's setting\n+        SubscriptionOptions.Builder optionsBuilder = SubscriptionOptions.newBuilder()\n+            .setCreateOrAttach(CreateOrAttach.CREATE)\n+            .setDeliveryThrottleValue(throttleValue);\n+        topic = ByteString.copyFromUtf8(\"testServerSideThrottleWithLowerValue\");\n+        sub.subscribe(topic, subid, optionsBuilder.build());\n+        sub.closeSubscription(topic, subid);\n+        throttleX(pub, sub, topic, subid, throttleValue);\n+\n+        throttleValue = DEFAULT_THROTTLE_VALUE + 5;\n+        // throttle with a higher value than hub server's setting\n+        optionsBuilder = SubscriptionOptions.newBuilder()\n+                         .setCreateOrAttach(CreateOrAttach.CREATE)\n+                         .setDeliveryThrottleValue(throttleValue);\n+        topic = ByteString.copyFromUtf8(\"testServerSideThrottleWithHigherValue\");\n+        sub.subscribe(topic, subid, optionsBuilder.build());\n+        sub.closeSubscription(topic, subid);\n+        throttleX(pub, sub, topic, subid, throttleValue);\n+\n+        client.close();\n+    }\n+\n+}"}]}

