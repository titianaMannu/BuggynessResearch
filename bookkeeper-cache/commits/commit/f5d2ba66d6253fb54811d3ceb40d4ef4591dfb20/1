{"sha":"f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNWQyYmE2NmQ2MjUzZmI1NDgxMWQzY2ViNDBkNGVmNDU5MWRmYjIw","commit":{"author":{"name":"Andrey Yegorov","email":"ayegorov@salesforce.com","date":"2017-08-16T01:41:49Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-08-16T01:41:49Z"},"message":"BOOKKEEPER-1105: RackAwarePolicy: Failure to map node into rack may result in failure to add other nodes.\n\n- RackAwarePolicy's no longer uses /default-region if rack mapping fails unless required (by RegionAwarePolicy)\n- it no longer fails to add rest of nodes after one node's failed addition,\n- added unit tests\n- added counters for successful/failed bookie adds/removal\n(PR description content here)...\n\nUpdateLedgerOpTest failed but it seems to be known/unrelated issue.\n\nAuthor: Andrey Yegorov <ayegorov@salesforce.com>\n\nReviewers: Sijie Guo <sijie@apache.org>\n\nThis closes #425 from dlg99/fix/rackaware","tree":{"sha":"b52e8195c9ca5ee805a84f6a458b2d7c51bf2cac","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b52e8195c9ca5ee805a84f6a458b2d7c51bf2cac"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","html_url":"https://github.com/apache/bookkeeper/commit/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/comments","author":null,"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"de9eecc180cc78fb65b509d7ae0e5ea82fd5dc8c","url":"https://api.github.com/repos/apache/bookkeeper/commits/de9eecc180cc78fb65b509d7ae0e5ea82fd5dc8c","html_url":"https://github.com/apache/bookkeeper/commit/de9eecc180cc78fb65b509d7ae0e5ea82fd5dc8c"}],"stats":{"total":468,"additions":346,"deletions":122},"files":[{"sha":"cf539ede72afb2d7cbb407e9ce12312d9024c4a7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookKeeperServerStats.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -119,6 +119,8 @@\n     String SKIP_LIST_THROTTLING = \"SKIP_LIST_THROTTLING\";\n     String READ_LAST_ENTRY_NOENTRY_ERROR = \"READ_LAST_ENTRY_NOENTRY_ERROR\";\n     String LEDGER_CACHE_NUM_EVICTED_LEDGERS = \"LEDGER_CACHE_NUM_EVICTED_LEDGERS\";\n+    String BOOKIES_JOINED = \"BOOKIES_JOINED\";\n+    String BOOKIES_LEFT = \"BOOKIES_LEFT\";\n \n     // Gauge\n     String NUM_INDEX_PAGES = \"NUM_INDEX_PAGES\";"},{"sha":"8126b9656d2905d0b926b03eb787a4286484c567","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicy.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -22,6 +22,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.DNSToSwitchMapping;\n import org.apache.bookkeeper.net.Node;"},{"sha":"e37f2964ca9de320797911ec9672d6a22dba4f35","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java","status":"modified","additions":148,"deletions":37,"changes":185,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RackawareEnsemblePlacementPolicyImpl.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -30,21 +30,16 @@\n import java.util.Set;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n+import com.google.common.base.Preconditions;\n+import org.apache.bookkeeper.bookie.BookKeeperServerStats;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookieInfoReader.BookieInfo;\n import org.apache.bookkeeper.client.WeightedRandomSelection.WeightedObject;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.Configurable;\n import org.apache.bookkeeper.feature.FeatureProvider;\n-import org.apache.bookkeeper.net.BookieSocketAddress;\n-import org.apache.bookkeeper.net.DNSToSwitchMapping;\n-import org.apache.bookkeeper.net.NetUtils;\n-import org.apache.bookkeeper.net.NetworkTopology;\n-import org.apache.bookkeeper.net.NetworkTopologyImpl;\n-import org.apache.bookkeeper.net.Node;\n-import org.apache.bookkeeper.net.NodeBase;\n-import org.apache.bookkeeper.net.ScriptBasedMapping;\n-import org.apache.bookkeeper.net.StabilizeNetworkTopology;\n+import org.apache.bookkeeper.net.*;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.ReflectionUtils;\n import org.apache.commons.collections.CollectionUtils;\n@@ -56,6 +51,7 @@\n \n import io.netty.util.HashedWheelTimer;\n import java.util.Optional;\n+import java.util.function.Supplier;\n \n /**\n  * Simple rackware ensemble placement policy.\n@@ -77,11 +73,25 @@\n \n     static class DefaultResolver implements DNSToSwitchMapping {\n \n+        final Supplier<String> defaultRackSupplier;\n+\n+        // for backwards compat\n+        public DefaultResolver() {\n+            this(() -> NetworkTopology.DEFAULT_REGION_AND_RACK);\n+        }\n+\n+        public DefaultResolver(Supplier<String> defaultRackSupplier) {\n+            Preconditions.checkNotNull(defaultRackSupplier, \"defaultRackSupplier should not be null\");\n+            this.defaultRackSupplier = defaultRackSupplier;\n+        }\n+\n         @Override\n         public List<String> resolve(List<String> names) {\n             List<String> rNames = new ArrayList<String>(names.size());\n             for (@SuppressWarnings(\"unused\") String name : names) {\n-                rNames.add(NetworkTopology.DEFAULT_RACK);\n+                final String defaultRack = defaultRackSupplier.get();\n+                Preconditions.checkNotNull(defaultRack, \"defaultRack cannot be null\");\n+                rNames.add(defaultRack);\n             }\n             return rNames;\n         }\n@@ -93,6 +103,62 @@ public void reloadCachedMappings() {\n \n     }\n \n+    /**\n+     * Decorator for any existing dsn resolver.\n+     * Backfills returned data with appropriate default rack info.\n+     */\n+    static class DNSResolverDecorator implements DNSToSwitchMapping {\n+\n+        final Supplier<String> defaultRackSupplier;\n+        final DNSToSwitchMapping resolver;\n+\n+        DNSResolverDecorator(DNSToSwitchMapping resolver, Supplier<String> defaultRackSupplier) {\n+            Preconditions.checkNotNull(resolver, \"Resolver cannot be null\");\n+            Preconditions.checkNotNull(defaultRackSupplier, \"defaultRackSupplier should not be null\");\n+            this.defaultRackSupplier = defaultRackSupplier;\n+            this.resolver= resolver;\n+        }\n+\n+        public List<String> resolve(List<String> names) {\n+            if (names == null) {\n+                return Collections.emptyList();\n+            }\n+            final String defaultRack = defaultRackSupplier.get();\n+            Preconditions.checkNotNull(defaultRack, \"Default rack cannot be null\");\n+\n+            List<String> rNames = resolver.resolve(names);\n+            if (rNames != null && rNames.size() == names.size()) {\n+                for (int i = 0; i < rNames.size(); ++i) {\n+                    if (rNames.get(i) == null) {\n+                        LOG.warn(\"Failed to resolve network location for {}, using default rack for it : {}.\",\n+                                rNames.get(i), defaultRack);\n+                        rNames.set(i, defaultRack);\n+                    }\n+                }\n+                return rNames;\n+            }\n+\n+            LOG.warn(\"Failed to resolve network location for {}, using default rack for them : {}.\", names,\n+                    defaultRack);\n+            rNames = new ArrayList<>(names.size());\n+\n+            for (int i = 0; i < names.size(); ++i) {\n+                rNames.add(defaultRack);\n+            }\n+            return rNames;\n+        }\n+\n+        @Override\n+        public boolean useHostName() {\n+            return resolver.useHostName();\n+        }\n+\n+        @Override\n+        public void reloadCachedMappings() {\n+            resolver.reloadCachedMappings();\n+        }\n+    }\n+\n     // for now, we just maintain the writable bookies' topology\n     protected NetworkTopology topology;\n     protected DNSToSwitchMapping dnsResolver;\n@@ -104,7 +170,13 @@ public void reloadCachedMappings() {\n     protected boolean reorderReadsRandom = false;\n     protected boolean enforceDurability = false;\n     protected int stabilizePeriodSeconds = 0;\n+    // looks like these only assigned in the same thread as constructor, immediately after constructor; \n+    // no need to make volatile\n     protected StatsLogger statsLogger = null;\n+    protected OpStatsLogger bookiesJoinedCounter = null;\n+    protected OpStatsLogger bookiesLeftCounter = null;\n+\n+    private String defaultRack = NetworkTopology.DEFAULT_RACK;\n \n     RackawareEnsemblePlacementPolicyImpl() {\n         this(false);\n@@ -135,10 +207,13 @@ protected RackawareEnsemblePlacementPolicyImpl initialize(DNSToSwitchMapping dns\n                                                               boolean isWeighted,\n                                                               int maxWeightMultiple,\n                                                               StatsLogger statsLogger) {\n+        Preconditions.checkNotNull(statsLogger, \"statsLogger should not be null, use NullStatsLogger instead.\");\n         this.statsLogger = statsLogger;\n+        this.bookiesJoinedCounter = statsLogger.getOpStatsLogger(BookKeeperServerStats.BOOKIES_JOINED);\n+        this.bookiesLeftCounter = statsLogger.getOpStatsLogger(BookKeeperServerStats.BOOKIES_LEFT);\n         this.reorderReadsRandom = reorderReadsRandom;\n         this.stabilizePeriodSeconds = stabilizePeriodSeconds;\n-        this.dnsResolver = dnsResolver;\n+        this.dnsResolver = new DNSResolverDecorator(dnsResolver, () -> this.getDefaultRack());\n         this.timer = timer;\n \n         // create the network topology\n@@ -170,6 +245,22 @@ protected RackawareEnsemblePlacementPolicyImpl initialize(DNSToSwitchMapping dns\n         }\n         return this;\n     }\n+    \n+    /*\n+     * sets default rack for the policy.\n+     * i.e. region-aware policy may want to have /region/rack while regular\n+     * rack-aware policy needs /rack only since we cannot mix both styles \n+     */\n+    public RackawareEnsemblePlacementPolicyImpl withDefaultRack(String rack) {\n+        Preconditions.checkNotNull(rack, \"Default rack cannot be null\");\n+\n+        this.defaultRack = rack;\n+        return this;\n+    }\n+\n+    public String getDefaultRack() {\n+        return defaultRack;\n+    }\n \n     @Override\n     public RackawareEnsemblePlacementPolicyImpl initialize(ClientConfiguration conf,\n@@ -189,7 +280,7 @@ public RackawareEnsemblePlacementPolicyImpl initialize(ClientConfiguration conf,\n                 }\n             } catch (RuntimeException re) {\n                 LOG.info(\"Failed to initialize DNS Resolver {}, used default subnet resolver.\", dnsResolverName, re);\n-                dnsResolver = new DefaultResolver();\n+                dnsResolver = new DefaultResolver(() -> this.getDefaultRack());\n             }\n         }\n         return initialize(\n@@ -224,11 +315,8 @@ protected String resolveNetworkLocation(BookieSocketAddress addr) {\n             joinedBookies = Sets.difference(writableBookies, oldBookieSet).immutableCopy();\n             // dead bookies.\n             deadBookies = Sets.difference(leftBookies, readOnlyBookies).immutableCopy();\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\n-                        \"Cluster changed : left bookies are {}, joined bookies are {}, while dead bookies are {}.\",\n-                        new Object[] { leftBookies, joinedBookies, deadBookies });\n-            }\n+            LOG.debug(\"Cluster changed : left bookies are {}, joined bookies are {}, while dead bookies are {}.\",\n+                    leftBookies, joinedBookies, deadBookies);\n             handleBookiesThatLeft(leftBookies);\n             handleBookiesThatJoined(joinedBookies);\n             if (this.isWeighted && (leftBookies.size() > 0 || joinedBookies.size() > 0)) {\n@@ -247,15 +335,27 @@ protected String resolveNetworkLocation(BookieSocketAddress addr) {\n     @Override\n     public void handleBookiesThatLeft(Set<BookieSocketAddress> leftBookies) {\n         for (BookieSocketAddress addr : leftBookies) {\n-            BookieNode node = knownBookies.remove(addr);\n-            if(null != node) {\n-                topology.remove(node);\n-                if (this.isWeighted) {\n-                    this.bookieInfoMap.remove(node);\n+            try {\n+                BookieNode node = knownBookies.remove(addr);\n+                if(null != node) {\n+                    topology.remove(node);\n+                    if (this.isWeighted) {\n+                        this.bookieInfoMap.remove(node);\n+                    }\n+\n+                    bookiesLeftCounter.registerSuccessfulValue(1L);\n+\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"Cluster changed : bookie {} left from cluster.\", addr);\n+                    }\n                 }\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Cluster changed : bookie {} left from cluster.\", addr);\n+            } catch (Throwable t) {\n+                LOG.error(\"Unexpected exception while handling leaving bookie {}\", addr, t);\n+                if (bookiesLeftCounter != null ) {\n+                    bookiesLeftCounter.registerFailedValue(1L);\n                 }\n+                // no need to re-throw; we want to process the rest of the bookies\n+                // exception anyways will be caught/logged/suppressed in the ZK's event handler\n             }\n         }\n     }\n@@ -264,14 +364,26 @@ public void handleBookiesThatLeft(Set<BookieSocketAddress> leftBookies) {\n     public void handleBookiesThatJoined(Set<BookieSocketAddress> joinedBookies) {\n         // node joined\n         for (BookieSocketAddress addr : joinedBookies) {\n-            BookieNode node = createBookieNode(addr);\n-            topology.add(node);\n-            knownBookies.put(addr, node);\n-            if (this.isWeighted) {\n-                this.bookieInfoMap.putIfAbsent(node, new BookieInfo());\n-            }\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Cluster changed : bookie {} joined the cluster.\", addr);\n+            try {\n+                BookieNode node = createBookieNode(addr);\n+                topology.add(node);\n+                knownBookies.put(addr, node);\n+                if (this.isWeighted) {\n+                    this.bookieInfoMap.putIfAbsent(node, new BookieInfo());\n+                }\n+\n+                bookiesJoinedCounter.registerSuccessfulValue(1L);\n+\n+                if (LOG.isDebugEnabled()) {\n+                    LOG.debug(\"Cluster changed : bookie {} joined the cluster.\", addr);\n+                }\n+            } catch (Throwable t) {\n+                // topology.add() throws unchecked exception\n+                LOG.error(\"Unexpected exception while handling joining bookie {}\", addr, t);\n+\n+                bookiesJoinedCounter.registerFailedValue(1L);\n+                // no need to re-throw; we want to process the rest of the bookies\n+                // exception anyways will be caught/logged/suppressed in the ZK's event handler\n             }\n         }\n     }\n@@ -361,7 +473,7 @@ public void handleBookiesThatJoined(Set<BookieSocketAddress> joinedBookies) {\n                 String curRack;\n                 if (null == prevNode) {\n                     if ((null == localNode) ||\n-                            localNode.getNetworkLocation().equals(NetworkTopology.DEFAULT_RACK)) {\n+                            defaultRack.equals(localNode.getNetworkLocation())) {\n                         curRack = NodeBase.ROOT;\n                     } else {\n                         curRack = localNode.getNetworkLocation();\n@@ -650,10 +762,9 @@ protected BookieNode selectRandomFromRack(String netPath, Set<Node> excludeBooki\n         if (numBookies == 0) {\n             return newBookies;\n         }\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Failed to find {} bookies : excludeBookies {}, allBookies {}.\", new Object[] {\n-                numBookies, excludeBookies, bookiesToSelectFrom });\n-        }\n+        LOG.warn(\"Failed to find {} bookies : excludeBookies {}, allBookies {}.\", \n+            numBookies, excludeBookies, bookiesToSelectFrom);\n+        \n         throw new BKNotEnoughBookiesException();\n     }\n "},{"sha":"7d4d1604c25c37f21d9eee16f5650ba6a8025f16","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RegionAwareEnsemblePlacementPolicy.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -34,6 +34,7 @@\n import org.apache.bookkeeper.feature.FeatureProvider;\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.DNSToSwitchMapping;\n+import org.apache.bookkeeper.net.NetUtils;\n import org.apache.bookkeeper.net.NetworkTopology;\n import org.apache.bookkeeper.net.Node;\n import org.apache.bookkeeper.net.NodeBase;\n@@ -84,7 +85,7 @@ protected String getRegion(BookieSocketAddress addr) {\n         String region = address2Region.get(addr);\n         if (null == region) {\n             String networkLocation = resolveNetworkLocation(addr);\n-            if (NetworkTopology.DEFAULT_RACK.equals(networkLocation)) {\n+            if (NetworkTopology.DEFAULT_REGION_AND_RACK.equals(networkLocation)) {\n                 region = UNKNOWN_REGION;\n             } else {\n                 String[] parts = networkLocation.split(NodeBase.PATH_SEPARATOR_STR);\n@@ -128,7 +129,8 @@ public void handleBookiesThatJoined(Set<BookieSocketAddress> joinedBookies) {\n             if (null == perRegionPlacement.get(region)) {\n                 perRegionPlacement.put(region, new RackawareEnsemblePlacementPolicy()\n                         .initialize(dnsResolver, timer, this.reorderReadsRandom, this.stabilizePeriodSeconds, \n-                                this.isWeighted, this.maxWeightMultiple, statsLogger));\n+                                this.isWeighted, this.maxWeightMultiple, statsLogger)\n+                        .withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK));\n             }\n \n             Set<BookieSocketAddress> regionSet = perRegionClusterChange.get(region);\n@@ -160,7 +162,8 @@ public RegionAwareEnsemblePlacementPolicy initialize(ClientConfiguration conf,\n                                                          HashedWheelTimer timer,\n                                                          FeatureProvider featureProvider,\n                                                          StatsLogger statsLogger) {\n-        super.initialize(conf, optionalDnsResolver, timer, featureProvider, statsLogger);\n+        super.initialize(conf, optionalDnsResolver, timer, featureProvider, statsLogger)\n+                .withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n         myRegion = getLocalRegion(localNode);\n         enableValidation = conf.getBoolean(REPP_ENABLE_VALIDATION, true);\n         // We have to statically provide regions we want the writes to go through and how many regions\n@@ -174,7 +177,8 @@ public RegionAwareEnsemblePlacementPolicy initialize(ClientConfiguration conf,\n             for (String region: regions) {\n                 perRegionPlacement.put(region, new RackawareEnsemblePlacementPolicy(true)\n                         .initialize(dnsResolver, timer, this.reorderReadsRandom, this.stabilizePeriodSeconds,\n-                                this.isWeighted, this.maxWeightMultiple, statsLogger));\n+                                this.isWeighted, this.maxWeightMultiple, statsLogger)\n+                        .withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK));\n             }\n             minRegionsForDurability = conf.getInt(REPP_MINIMUM_REGIONS_FOR_DURABILITY, MINIMUM_REGIONS_FOR_DURABILITY_DEFAULT);\n             if (minRegionsForDurability > 0) {"},{"sha":"8176831fed85e9c6cc86c453c1290bc2da5f4164","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/CachedDNSToSwitchMapping.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -46,6 +46,12 @@ public CachedDNSToSwitchMapping(DNSToSwitchMapping rawMapping) {\n     this.rawMapping = rawMapping;\n   }\n \n+  // we'll use IP Address for these mappings.\n+  @Override\n+  public boolean useHostName() {\n+    return false;\n+  }\n+\n   /**\n    * @param names a list of hostnames to probe for being cached\n    * @return the hosts from 'names' that have not been cached previously"},{"sha":"96df6554e73d31fa7153da236ac7fa9f24b15172","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNSToSwitchMapping.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -41,7 +41,7 @@\n      * <p/>\n      *\n      * If a name cannot be resolved to a rack, the implementation\n-     * should return {@link NetworkTopology#DEFAULT_RACK}. This\n+     * should return {@link NetworkTopology#DEFAULT_REGION_AND_RACK}. This\n      * is what the bundled implementations do, though it is not a formal requirement\n      *\n      * @param names the list of hosts to resolve (can be empty)\n@@ -57,4 +57,15 @@\n      * will get a chance to see the new data.\n      */\n     public void reloadCachedMappings();\n+\n+    /**\n+     * Hints what to use with implementation when InetSocketAddress is converted\n+     * to String:\n+     * hostname (addr.getHostName(), default)\n+     * or IP address (addr.getAddress().getHostAddress())\n+     * @return true if hostname, false if IP address. Default is true.\n+      */\n+    default boolean useHostName() {\n+        return true;\n+    }\n }"},{"sha":"6172e7391ef5fc81a4fcad18bc4609149959c4f6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetUtils.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -24,6 +24,7 @@\n import java.util.Collection;\n import java.util.List;\n \n+import com.google.common.base.Preconditions;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -64,22 +65,20 @@ public static String normalizeHostName(String name) {\n \n     public static String resolveNetworkLocation(DNSToSwitchMapping dnsResolver, InetSocketAddress addr) {\n         List<String> names = new ArrayList<String>(1);\n-        if (dnsResolver instanceof CachedDNSToSwitchMapping) {\n-            names.add(addr.getAddress().getHostAddress());\n-        } else {\n+\n+        if (dnsResolver.useHostName()) {\n             names.add(addr.getHostName());\n         }\n+        else {\n+            names.add(addr.getAddress().getHostAddress());\n+        }\n+\n         // resolve network addresses\n         List<String> rNames = dnsResolver.resolve(names);\n-        String netLoc;\n-        if (null == rNames) {\n-            logger.warn(\"Failed to resolve network location for {}, using default rack for them : {}.\", names,\n-                NetworkTopology.DEFAULT_RACK);\n-            netLoc = NetworkTopology.DEFAULT_RACK;\n-        } else {\n-            netLoc = rNames.get(0);\n-        }\n-        return netLoc;\n+        Preconditions.checkNotNull(rNames, \"DNS Resolver should not return null response.\");\n+        Preconditions.checkState(rNames.size() == 1, \"Expected exactly one element\");\n+\n+        return rNames.get(0);\n     }\n \n }"},{"sha":"073be160a28c4be72965f9826a8c9452912ed715","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopology.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -25,7 +25,8 @@\n public interface NetworkTopology {\n \n     public final static String DEFAULT_REGION = \"/default-region\";\n-    public final static String DEFAULT_RACK = \"/default-region/default-rack\";\n+    public final static String DEFAULT_RACK = \"/default-rack\";\n+    public final static String DEFAULT_REGION_AND_RACK = DEFAULT_REGION + DEFAULT_RACK;\n \n     /**\n      * Add a node to the network topology"},{"sha":"59e6349a9ac19a03c3902a810622cd9a08eb9757","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopologyImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopologyImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopologyImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/NetworkTopologyImpl.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -379,12 +379,13 @@ public void add(Node node) {\n         netlock.writeLock().lock();\n         try {\n             if ((depthOfAllLeaves != -1) && (depthOfAllLeaves != newDepth)) {\n-                LOG.error(\"Error: can't add leaf node at depth \" + newDepth + \" to topology:\\n\" + oldTopoStr);\n+                LOG.error(\"Error: can't add leaf node {} at depth {} to topology:\\n{}\", node, newDepth, oldTopoStr);\n                 throw new InvalidTopologyException(\"Invalid network topology. \"\n                         + \"You cannot have a rack and a non-rack node at the same level of the network topology.\");\n             }\n             Node rack = getNodeForNetworkLocation(node);\n             if (rack != null && !(rack instanceof InnerNode)) {\n+                LOG.error(\"Unexpected data node {} at an illegal network location\", node);\n                 throw new IllegalArgumentException(\"Unexpected data node \" + node.toString()\n                         + \" at an illegal network location\");\n             }"},{"sha":"d9cd000b9eb918b06b5a83996783733b3b1c1cb7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/ScriptBasedMapping.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -163,10 +163,7 @@ public RawScriptBasedMapping() {\n             }\n \n             if (scriptName == null) {\n-                for (int i = 0; i < names.size(); i++) {\n-                    m.add(NetworkTopology.DEFAULT_RACK);\n-                }\n-                return m;\n+                return null;\n             }\n \n             String output = runResolveCommand(names);"},{"sha":"ad3fa554ae1553962cf15074cfdb5e90f9672afe","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","status":"modified","additions":43,"deletions":30,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicy.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -40,6 +40,8 @@\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.DNSToSwitchMapping;\n import org.apache.bookkeeper.net.NetworkTopology;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.util.StaticDNSResolver;\n import org.junit.Test;\n import org.slf4j.Logger;\n@@ -60,9 +62,9 @@\n     protected void setUp() throws Exception {\n         super.setUp();\n         StaticDNSResolver.reset();\n-        StaticDNSResolver.addNodeToRack(InetAddress.getLocalHost().getHostAddress(), NetworkTopology.DEFAULT_RACK);\n-        StaticDNSResolver.addNodeToRack(\"127.0.0.1\", NetworkTopology.DEFAULT_RACK);\n-        StaticDNSResolver.addNodeToRack(\"localhost\", NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(InetAddress.getLocalHost().getHostAddress(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n+        StaticDNSResolver.addNodeToRack(\"127.0.0.1\", NetworkTopology.DEFAULT_REGION_AND_RACK);\n+        StaticDNSResolver.addNodeToRack(\"localhost\", NetworkTopology.DEFAULT_REGION_AND_RACK);\n         LOG.info(\"Set up static DNS Resolver.\");\n         conf.setProperty(REPP_DNS_RESOLVER_CLASS, StaticDNSResolver.class.getName());\n         addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n@@ -71,8 +73,8 @@ protected void setUp() throws Exception {\n         addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n         StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION + \"/rack1\");\n-        StaticDNSResolver.addNodeToRack(addr2.getHostName(), NetworkTopology.DEFAULT_RACK);\n-        StaticDNSResolver.addNodeToRack(addr3.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr2.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n+        StaticDNSResolver.addNodeToRack(addr3.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), NetworkTopology.DEFAULT_REGION + \"/rack2\");\n         ensemble.add(addr1);\n         ensemble.add(addr2);\n@@ -88,7 +90,8 @@ protected void setUp() throws Exception {\n                 conf.getTimeoutTimerNumTicks());\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n     }\n \n     @Override\n@@ -107,10 +110,11 @@ static void updateMyRack(String rack) throws Exception {\n     @Test(timeout = 60000)\n     public void testNodeDown() throws Exception {\n         repp.uninitalize();\n-        updateMyRack(NetworkTopology.DEFAULT_RACK);\n+        updateMyRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n         addrs.add(addr1);\n@@ -138,7 +142,8 @@ public void testNodeReadOnly() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -169,7 +174,8 @@ public void testTwoNodesDown() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -199,7 +205,8 @@ public void testNodeDownAndReadOnly() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -230,7 +237,7 @@ public void testReplaceBookieWithEnoughBookiesInSameRack() throws Exception {\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/default-region/r3\");\n@@ -253,7 +260,7 @@ public void testReplaceBookieWithEnoughBookiesInDifferentRack() throws Exception\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/default-region/r3\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/default-region/r4\");\n@@ -280,7 +287,7 @@ public void testReplaceBookieWithNotEnoughBookies() throws Exception {\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/default-region/r3\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/default-region/r4\");\n@@ -334,7 +341,7 @@ public void testNewEnsembleWithMultipleRacks() throws Exception {\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/default-region/r2\");\n@@ -368,11 +375,11 @@ public void testNewEnsembleWithEnoughRacks() throws Exception {\n         BookieSocketAddress addr7 = new BookieSocketAddress(\"127.0.0.8\", 3181);\n         BookieSocketAddress addr8 = new BookieSocketAddress(\"127.0.0.9\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/default-region/r3\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/default-region/r4\");\n-        StaticDNSResolver.addNodeToRack(addr5.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr5.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr6.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr7.getHostName(), \"/default-region/r3\");\n         StaticDNSResolver.addNodeToRack(addr8.getHostName(), \"/default-region/r4\");\n@@ -407,7 +414,7 @@ public void testRemoveBookieFromCluster() {\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/default-region/r2\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/default-region/r3\");\n@@ -430,7 +437,7 @@ public void testWeightedPlacementAndReplaceBookieWithEnoughBookiesInSameRack() t\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         // update dns mapping\n         StaticDNSResolver.addNodeToRack(addr1.getSocketAddress().getAddress().getHostAddress(),\n-                NetworkTopology.DEFAULT_RACK);\n+                NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n         StaticDNSResolver.addNodeToRack(addr4.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n@@ -444,7 +451,8 @@ public void testWeightedPlacementAndReplaceBookieWithEnoughBookiesInSameRack() t\n         int multiple = 10;\n         conf.setDiskWeightBasedPlacementEnabled(true);\n         conf.setBookieMaxWeightMultipleForWeightBasedPlacement(-1); // no max cap on weight\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         Map<BookieSocketAddress, BookieInfo> bookieInfoMap = new HashMap<BookieSocketAddress, BookieInfo>();\n@@ -477,7 +485,7 @@ public void testWeightedPlacementAndReplaceBookieWithoutEnoughBookiesInSameRack(\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         // update dns mapping\n         StaticDNSResolver.reset();\n-        StaticDNSResolver.addNodeToRack(addr1.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r3\");\n         StaticDNSResolver.addNodeToRack(addr4.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r4\");\n@@ -491,7 +499,8 @@ public void testWeightedPlacementAndReplaceBookieWithoutEnoughBookiesInSameRack(\n         int multiple = 10, maxMultiple = 4;\n         conf.setDiskWeightBasedPlacementEnabled(true);\n         conf.setBookieMaxWeightMultipleForWeightBasedPlacement(maxMultiple);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         Map<BookieSocketAddress, BookieInfo> bookieInfoMap = new HashMap<BookieSocketAddress, BookieInfo>();\n@@ -542,7 +551,7 @@ public void testWeightedPlacementAndNewEnsembleWithEnoughBookiesInSameRack() thr\n         BookieSocketAddress addr9 = new BookieSocketAddress(\"127.0.0.9\", 3181);\n \n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n         StaticDNSResolver.addNodeToRack(addr4.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n@@ -567,7 +576,8 @@ public void testWeightedPlacementAndNewEnsembleWithEnoughBookiesInSameRack() thr\n         int maxMultiple = 4;\n         conf.setDiskWeightBasedPlacementEnabled(true);\n         conf.setBookieMaxWeightMultipleForWeightBasedPlacement(maxMultiple);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         Map<BookieSocketAddress, BookieInfo> bookieInfoMap = new HashMap<BookieSocketAddress, BookieInfo>();\n@@ -621,7 +631,7 @@ public void testWeightedPlacementAndNewEnsembleWithoutEnoughBookies() throws Exc\n         BookieSocketAddress addr5 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n \n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r2\");\n         StaticDNSResolver.addNodeToRack(addr4.getSocketAddress().getAddress().getHostAddress(), NetworkTopology.DEFAULT_REGION + \"/r3\");\n@@ -637,7 +647,8 @@ public void testWeightedPlacementAndNewEnsembleWithoutEnoughBookies() throws Exc\n         int maxMultiple = 4;\n         conf.setDiskWeightBasedPlacementEnabled(true);\n         conf.setBookieMaxWeightMultipleForWeightBasedPlacement(maxMultiple);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n         Map<BookieSocketAddress, BookieInfo> bookieInfoMap = new HashMap<BookieSocketAddress, BookieInfo>();\n@@ -687,10 +698,11 @@ private int getNumCoveredWriteQuorums(ArrayList<BookieSocketAddress> ensemble, i\n     @Test(timeout = 60000)\n     public void testNodeWithFailures() throws Exception {\n         repp.uninitalize();\n-        updateMyRack(NetworkTopology.DEFAULT_RACK);\n+        updateMyRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n         addrs.add(addr1);\n@@ -715,13 +727,14 @@ public void testNodeWithFailures() throws Exception {\n     @Test(timeout = 60000)\n     public void testPlacementOnStabilizeNetworkTopology() throws Exception {\n         repp.uninitalize();\n-        updateMyRack(NetworkTopology.DEFAULT_RACK);\n+        updateMyRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         repp = new RackawareEnsemblePlacementPolicy();\n         ClientConfiguration confLocal = new ClientConfiguration();\n         confLocal.addConfiguration(conf);\n         confLocal.setNetworkTopologyStabilizePeriodSeconds(99999);\n-        repp.initialize(confLocal, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(confLocal, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n+        repp.withDefaultRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n         addrs.add(addr1);"},{"sha":"82f9291ca5ee6511351e504af7008e3d33d8b2ff","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java","status":"modified","additions":77,"deletions":1,"changes":78,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRackawareEnsemblePlacementPolicyUsingScript.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -38,6 +38,7 @@\n import org.apache.bookkeeper.net.CommonConfigurationKeys;\n import org.apache.bookkeeper.net.DNSToSwitchMapping;\n import org.apache.bookkeeper.net.ScriptBasedMapping;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.util.Shell;\n import org.junit.After;\n import org.junit.Assume;\n@@ -83,7 +84,7 @@ public void setUp() throws Exception {\n                 conf.getTimeoutTimerNumTicks());\n         \n         repp = new RackawareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n     }\n \n     @After\n@@ -167,6 +168,81 @@ public void testReplaceBookieWithNotEnoughBookies() throws Exception {\n         }\n     }\n \n+    /*\n+     * Test that even in case of script mapping error \n+     * we are getting default rack that makes sense for the policy.\n+     * i.e. if all nodes in rack-aware policy use /rack format \n+     * but one gets node /default-region/default-rack the node addition to topology will fail. \n+     * \n+     * This case adds node with non-default rack, then adds nodes with one on default rack.\n+     */\n+    @Test(timeout = 60000)\n+    public void testReplaceBookieWithScriptMappingError() throws Exception {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr0 = new BookieSocketAddress(\"127.0.0.0\", 3181); // error mapping to rack here\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.2\", 3181); // /2 rack\n+\n+        // Update cluster, add node that maps to non-default rack\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr1);\n+        \n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        \n+        addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr0);\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+\n+        // replace node under r2\n+        Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n+        excludedAddrs.add(addr1);\n+        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n+\n+        assertFalse(addr1.equals(replacedBookie));\n+        assertFalse(addr2.equals(replacedBookie));\n+        assertTrue(addr0.equals(replacedBookie));\n+    }\n+\n+    /*\n+     * Test that even in case of script mapping error \n+     * we are getting default rack that makes sense for the policy.\n+     * i.e. if all nodes in rack-aware policy use /rack format \n+     * but one gets node /default-region/default-rack the node addition to topology will fail. \n+     * \n+     * This case adds node with default rack, then adds nodes with non-default rack.\n+     * Almost the same as testReplaceBookieWithScriptMappingError but different order of addition.\n+     */\n+    @Test(timeout = 60000)\n+    public void testReplaceBookieWithScriptMappingError2() throws Exception {\n+        ignoreTestIfItIsWindowsOS();\n+        BookieSocketAddress addr0 = new BookieSocketAddress(\"127.0.0.0\", 3181); // error mapping to rack here\n+        BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.1\", 3181); // /1 rack\n+        BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.2\", 3181); // /2 rack\n+\n+        // Update cluster, add node that maps to default rack first\n+        Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr0);\n+        \n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+        \n+        addrs = new HashSet<BookieSocketAddress>();\n+        addrs.add(addr0);\n+        addrs.add(addr1);\n+        addrs.add(addr2);\n+        repp.onClusterChanged(addrs, new HashSet<BookieSocketAddress>());\n+\n+        // replace node under r2\n+        Set<BookieSocketAddress> excludedAddrs = new HashSet<BookieSocketAddress>();\n+        excludedAddrs.add(addr1);\n+        BookieSocketAddress replacedBookie = repp.replaceBookie(1, 1, 1, null, new HashSet<BookieSocketAddress>(), addr2, excludedAddrs);\n+\n+        assertFalse(addr1.equals(replacedBookie));\n+        assertFalse(addr2.equals(replacedBookie));\n+        assertTrue(addr0.equals(replacedBookie));\n+    }\n+    \n     @Test(timeout = 60000)\n     public void testNewEnsembleWithSingleRack() throws Exception {\n         ignoreTestIfItIsWindowsOS();"},{"sha":"fb45537ec9d34b77d8217e9c018e0f1851f5ac84","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java","status":"modified","additions":27,"deletions":26,"changes":53,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestRegionAwareEnsemblePlacementPolicy.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -38,6 +38,7 @@\n import org.apache.bookkeeper.net.BookieSocketAddress;\n import org.apache.bookkeeper.net.DNSToSwitchMapping;\n import org.apache.bookkeeper.net.NetworkTopology;\n+import org.apache.bookkeeper.stats.NullStatsLogger;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.StaticDNSResolver;\n import org.junit.Test;\n@@ -71,7 +72,7 @@ static void updateMyRack(String rack) throws Exception {\n     protected void setUp() throws Exception {\n         super.setUp();\n         StaticDNSResolver.reset();\n-        updateMyRack(NetworkTopology.DEFAULT_RACK);\n+        updateMyRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n         LOG.info(\"Set up static DNS Resolver.\");\n         conf.setProperty(REPP_DNS_RESOLVER_CLASS, StaticDNSResolver.class.getName());\n \n@@ -81,8 +82,8 @@ protected void setUp() throws Exception {\n         addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n         StaticDNSResolver.addNodeToRack(addr1.getHostName(), \"/r1/rack1\");\n-        StaticDNSResolver.addNodeToRack(addr2.getHostName(), NetworkTopology.DEFAULT_RACK);\n-        StaticDNSResolver.addNodeToRack(addr3.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr2.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n+        StaticDNSResolver.addNodeToRack(addr3.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/r1/rack2\");\n         ensemble.add(addr1);\n         ensemble.add(addr2);\n@@ -98,7 +99,7 @@ protected void setUp() throws Exception {\n                 conf.getTimeoutTimerNumTicks());\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n     }\n \n     @Override\n@@ -110,10 +111,10 @@ protected void tearDown() throws Exception {\n     @Test(timeout = 60000)\n     public void testNotReorderReadIfInDefaultRack() throws Exception {\n         repp.uninitalize();\n-        updateMyRack(NetworkTopology.DEFAULT_RACK);\n+        updateMyRack(NetworkTopology.DEFAULT_REGION_AND_RACK);\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n \n         List<Integer> reorderSet = repp.reorderReadSequence(ensemble, writeSet, new HashMap<BookieSocketAddress, Long>());\n         assertFalse(reorderSet == writeSet);\n@@ -126,7 +127,7 @@ public void testNodeInSameRegion() throws Exception {\n         updateMyRack(\"/r1/rack3\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n \n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n         addrs.add(addr1);\n@@ -152,7 +153,7 @@ public void testNodeNotInSameRegions() throws Exception {\n         updateMyRack(\"/r2/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n \n         List<Integer> reoderSet = repp.reorderReadSequence(ensemble, writeSet, new HashMap<BookieSocketAddress, Long>());\n         LOG.info(\"reorder set : {}\", reoderSet);\n@@ -166,7 +167,7 @@ public void testNodeDown() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -195,7 +196,7 @@ public void testNodeReadOnly() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -226,7 +227,7 @@ public void testTwoNodesDown() throws Exception {\n         updateMyRack(\"/r1/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n \n         // Update cluster\n         Set<BookieSocketAddress> addrs = new HashSet<BookieSocketAddress>();\n@@ -257,7 +258,7 @@ public void testReplaceBookieWithEnoughBookiesInSameRegion() throws Exception {\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/region1/r1\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/region1/r2\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/default-region/r3\");\n@@ -280,7 +281,7 @@ public void testReplaceBookieWithEnoughBookiesInDifferentRegion() throws Excepti\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/region1/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/region2/r3\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/region3/r4\");\n@@ -307,7 +308,7 @@ public void testNewEnsembleBookieWithNotEnoughBookies() throws Exception {\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/region2/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/region3/r3\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/region4/r4\");\n@@ -334,7 +335,7 @@ public void testReplaceBookieWithNotEnoughBookies() throws Exception {\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/region2/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/region3/r3\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/region4/r4\");\n@@ -362,7 +363,7 @@ public void testReplaceBookieWithNotEnoughBookies() throws Exception {\n     public void testNewEnsembleWithSingleRegion() throws Exception {\n         repp.uninitalize();\n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -393,13 +394,13 @@ public void testNewEnsembleWithSingleRegion() throws Exception {\n     public void testNewEnsembleWithMultipleRegions() throws Exception {\n         repp.uninitalize();\n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n         BookieSocketAddress addr4 = new BookieSocketAddress(\"127.0.0.5\", 3181);\n         // update dns mapping\n-        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_RACK);\n+        StaticDNSResolver.addNodeToRack(addr1.getHostName(), NetworkTopology.DEFAULT_REGION_AND_RACK);\n         StaticDNSResolver.addNodeToRack(addr2.getHostName(), \"/region1/r2\");\n         StaticDNSResolver.addNodeToRack(addr3.getHostName(), \"/region1/r2\");\n         StaticDNSResolver.addNodeToRack(addr4.getHostName(), \"/region1/r2\");\n@@ -471,7 +472,7 @@ public void testNewEnsembleWithEnoughRegions() throws Exception {\n     public void testNewEnsembleWithThreeRegions() throws Exception {\n         repp.uninitalize();\n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -538,7 +539,7 @@ public void testNewEnsembleWithThreeRegionsWithDisable() throws Exception {\n         repp.uninitalize();\n         repp = new RegionAwareEnsemblePlacementPolicy();\n         conf.setProperty(REPP_DISALLOW_BOOKIE_PLACEMENT_IN_REGION_FEATURE_NAME, \"disallowBookies\");\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, NullStatsLogger.INSTANCE);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -617,7 +618,7 @@ public void testNewEnsembleWithFiveRegions() throws Exception {\n         repp = new RegionAwareEnsemblePlacementPolicy();\n         conf.setProperty(REPP_REGIONS_TO_WRITE, \"region1;region2;region3;region4;region5\");\n         conf.setProperty(REPP_MINIMUM_REGIONS_FOR_DURABILITY, 5);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.1.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.1.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.1.0.4\", 3181);\n@@ -722,7 +723,7 @@ public void testEnsembleWithThreeRegionsReplaceInternal(int minDurability, boole\n         }\n         conf.setProperty(REPP_DISALLOW_BOOKIE_PLACEMENT_IN_REGION_FEATURE_NAME, \"disallowBookies\");\n \n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, NullStatsLogger.INSTANCE);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.1.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.1.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.1.0.4\", 3181);\n@@ -859,7 +860,7 @@ public void testEnsembleDurabilityDisabledInternal(int minDurability, boolean di\n             conf.setProperty(REPP_ENABLE_DURABILITY_ENFORCEMENT_IN_REPLACE, true);\n         }\n \n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, featureProvider, NullStatsLogger.INSTANCE);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.1.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.1.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.1.0.4\", 3181);\n@@ -924,7 +925,7 @@ public void testNewEnsembleFailWithFiveRegions() throws Exception {\n         conf.setProperty(REPP_REGIONS_TO_WRITE, \"region1;region2;region3;region4;region5\");\n         conf.setProperty(REPP_MINIMUM_REGIONS_FOR_DURABILITY, 5);\n         conf.setProperty(REPP_ENABLE_VALIDATION, false);\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n         BookieSocketAddress addr3 = new BookieSocketAddress(\"127.0.0.4\", 3181);\n@@ -977,7 +978,7 @@ private void prepareNetworkTopologyForReorderTests(String myRegion) throws Excep\n         updateMyRack(\"/\" + myRegion);\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n \n         BookieSocketAddress addr1 = new BookieSocketAddress(\"127.0.0.2\", 3181);\n         BookieSocketAddress addr2 = new BookieSocketAddress(\"127.0.0.3\", 3181);\n@@ -1207,7 +1208,7 @@ public void testNodeWithFailures() throws Exception {\n         updateMyRack(\"/r2/rack1\");\n \n         repp = new RegionAwareEnsemblePlacementPolicy();\n-        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, null);\n+        repp.initialize(conf, Optional.<DNSToSwitchMapping>empty(), timer, DISABLE_ALL, NullStatsLogger.INSTANCE);\n \n         BookieSocketAddress addr5 = new BookieSocketAddress(\"127.0.0.6\", 3181);\n         BookieSocketAddress addr6 = new BookieSocketAddress(\"127.0.0.7\", 3181);"},{"sha":"b08586c69902e9c685aa10de7a88f4d77ccbc501","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/StaticDNSResolver.java?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -48,7 +48,7 @@ public static void addNodeToRack(String name, String rack) {\n     public static String getRack(String name) {\n         String rack = name2Racks.get(name);\n         if (null == rack) {\n-            rack = NetworkTopology.DEFAULT_RACK;\n+            rack = NetworkTopology.DEFAULT_REGION_AND_RACK;\n         }\n         return rack;\n     }\n@@ -71,9 +71,6 @@ public static void reset() {\n         List<String> racks = new ArrayList<String>();\n         for (String n : names) {\n             String rack = name2Racks.get(n);\n-            if (null == rack) {\n-                rack = NetworkTopology.DEFAULT_RACK;\n-            }\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"Resolve name {} to rack {}.\", n, rack);\n             }"},{"sha":"9eed3f6229e234903202b29bb12cbc4dab36198f","filename":"bookkeeper-server/src/test/resources/networkmappingscript.sh","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/resources/networkmappingscript.sh","raw_url":"https://github.com/apache/bookkeeper/raw/f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20/bookkeeper-server/src/test/resources/networkmappingscript.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/resources/networkmappingscript.sh?ref=f5d2ba66d6253fb54811d3ceb40d4ef4591dfb20","patch":"@@ -27,9 +27,13 @@\n #       127.0.0.2    - /2\n #       199.12.34.21 - /1\n # This script file is used just for testing purpose\n+# rack 0 returns script error (non-zero error code)\n \n for var in \"$@\"\n do\n     i=$((${#var}-1))\n+    if [ \"${var:$i:1}\" == \"0\" ]; then\n+        exit 1 \n+    fi\n     echo /${var:$i:1}\n-done\n+done\n\\ No newline at end of file"}]}

