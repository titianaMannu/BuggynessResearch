{"sha":"f694716e289c448ab89cab5fa81ea0946f9d9193","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNjk0NzE2ZTI4OWM0NDhhYjg5Y2FiNWZhODFlYTA5NDZmOWQ5MTkz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-04-03T16:02:44Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-04-03T16:02:44Z"},"message":"BOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1309007 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5f5f468380a64c8c6d99037c43d84ae28088fd0b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5f5f468380a64c8c6d99037c43d84ae28088fd0b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f694716e289c448ab89cab5fa81ea0946f9d9193","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f694716e289c448ab89cab5fa81ea0946f9d9193","html_url":"https://github.com/apache/bookkeeper/commit/f694716e289c448ab89cab5fa81ea0946f9d9193","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f694716e289c448ab89cab5fa81ea0946f9d9193/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"47244dd77fb291ec95d5da4c96751ea92bc2d516","url":"https://api.github.com/repos/apache/bookkeeper/commits/47244dd77fb291ec95d5da4c96751ea92bc2d516","html_url":"https://github.com/apache/bookkeeper/commit/47244dd77fb291ec95d5da4c96751ea92bc2d516"}],"stats":{"total":54,"additions":45,"deletions":9},"files":[{"sha":"9ff2e52401d3f87d50cbd743c7681ab525862550","filename":"CHANGES.txt","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/f694716e289c448ab89cab5fa81ea0946f9d9193/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f694716e289c448ab89cab5fa81ea0946f9d9193/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f694716e289c448ab89cab5fa81ea0946f9d9193","patch":"@@ -88,6 +88,10 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-163: Prevent incorrect NoSuchLedgerException for readLastConfirmed. (ivank via sijie)\n \n+      bookkeeper-benchmark/\n+\t\n+\tBOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj)\n+\n     IMPROVEMENTS:\n \n       bookkeeper-server/"},{"sha":"b4d3eaed00a59e9fc99a85e7e61866c05df00d61","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","status":"modified","additions":40,"deletions":8,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/f694716e289c448ab89cab5fa81ea0946f9d9193/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/f694716e289c448ab89cab5fa81ea0946f9d9193/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchBookie.java?ref=f694716e289c448ab89cab5fa81ea0946f9d9193","patch":"@@ -22,10 +22,17 @@\n import java.net.InetSocketAddress;\n import java.util.concurrent.Executors;\n \n+import java.io.IOException;\n+\n+import org.apache.zookeeper.KeeperException;\n+\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n@@ -89,15 +96,33 @@ synchronized public void waitFor(int count) throws InterruptedException {\n         }\n     }\n \n+    private static long getValidLedgerId(String zkServers)\n+            throws IOException, BKException, KeeperException, InterruptedException {\n+        BookKeeper bkc = null;\n+        LedgerHandle lh = null;\n+        long id = 0;\n+        try {\n+            bkc =new BookKeeper(zkServers);\n+            lh = bkc.createLedger(1, 1, BookKeeper.DigestType.CRC32,\n+                                  new byte[20]);\n+            id = lh.getId();\n+            return id;\n+        } finally {\n+            if (lh != null) { lh.close(); }\n+            if (bkc != null) { bkc.close(); }\n+        }\n+    }\n     /**\n      * @param args\n      * @throws InterruptedException\n      */\n-    public static void main(String[] args) throws InterruptedException, ParseException {\n+    public static void main(String[] args)\n+            throws InterruptedException, ParseException, IOException,\n+            BKException, KeeperException {\n         Options options = new Options();\n         options.addOption(\"host\", true, \"Hostname or IP of bookie to benchmark\");\n         options.addOption(\"port\", true, \"Port of bookie to benchmark (default 3181)\");\n-        options.addOption(\"ledger\", true, \"Ledger Id to write to (default 1)\");\n+        options.addOption(\"zookeeper\", true, \"Zookeeper ensemble, default \\\"localhost:2181\\\"\");\n         options.addOption(\"help\", false, \"This message\");\n \n         CommandLineParser parser = new PosixParser();\n@@ -111,7 +136,9 @@ public static void main(String[] args) throws InterruptedException, ParseExcepti\n \n         String addr = cmd.getOptionValue(\"host\");\n         int port = Integer.valueOf(cmd.getOptionValue(\"port\", \"3181\"));\n-        int ledger = Integer.valueOf(cmd.getOptionValue(\"ledger\", \"1\"));\n+        String servers = cmd.getOptionValue(\"zookeeper\", \"localhost:2181\");\n+\n+\n \n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(), Executors\n@@ -124,49 +151,54 @@ public static void main(String[] args) throws InterruptedException, ParseExcepti\n \n         ThroughputCallback tc = new ThroughputCallback();\n         int warmUpCount = 999;\n+\n+        long ledger = getValidLedgerId(servers);\n         for(long entry = 0; entry < warmUpCount; entry++) {\n             ChannelBuffer toSend = ChannelBuffers.buffer(128);\n             toSend.resetReaderIndex();\n             toSend.resetWriterIndex();\n             toSend.writeLong(ledger);\n             toSend.writeLong(entry);\n             toSend.writerIndex(toSend.capacity());\n-            bc.addEntry(new InetSocketAddress(addr, port), ledger, new byte[20], \n+            bc.addEntry(new InetSocketAddress(addr, port), ledger, new byte[20],\n                         entry, toSend, tc, null, BookieProtocol.FLAG_NONE);\n         }\n         LOG.info(\"Waiting for warmup\");\n         tc.waitFor(warmUpCount);\n \n+        ledger = getValidLedgerId(servers);\n         LOG.info(\"Benchmarking latency\");\n         int entryCount = 5000;\n         long startTime = System.nanoTime();\n         for(long entry = 0; entry < entryCount; entry++) {\n             ChannelBuffer toSend = ChannelBuffers.buffer(128);\n             toSend.resetReaderIndex();\n             toSend.resetWriterIndex();\n-            toSend.writeLong(ledger+1);\n+            toSend.writeLong(ledger);\n             toSend.writeLong(entry);\n             toSend.writerIndex(toSend.capacity());\n             lc.resetComplete();\n-            bc.addEntry(new InetSocketAddress(addr, port), ledger+1, new byte[20], \n+            bc.addEntry(new InetSocketAddress(addr, port), ledger, new byte[20],\n                         entry, toSend, lc, null, BookieProtocol.FLAG_NONE);\n             lc.waitForComplete();\n         }\n         long endTime = System.nanoTime();\n         LOG.info(\"Latency: \" + (((double)(endTime-startTime))/((double)entryCount))/1000000.0);\n \n         entryCount = 50000;\n+\n+        ledger = getValidLedgerId(servers);\n         LOG.info(\"Benchmarking throughput\");\n         startTime = System.currentTimeMillis();\n         tc = new ThroughputCallback();\n         for(long entry = 0; entry < entryCount; entry++) {\n             ChannelBuffer toSend = ChannelBuffers.buffer(128);\n             toSend.resetReaderIndex();\n             toSend.resetWriterIndex();\n-            toSend.writeLong(ledger+2);\n+            toSend.writeLong(ledger);\n             toSend.writeLong(entry);\n             toSend.writerIndex(toSend.capacity());\n-            bc.addEntry(new InetSocketAddress(addr, port), ledger+2, new byte[20], \n+            bc.addEntry(new InetSocketAddress(addr, port), ledger, new byte[20],\n                         entry, toSend, tc, null, BookieProtocol.FLAG_NONE);\n         }\n         tc.waitFor(entryCount);"},{"sha":"3fb3d1b6dff2d10dea8400da4eb3f1e61f62f23d","filename":"bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f694716e289c448ab89cab5fa81ea0946f9d9193/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/f694716e289c448ab89cab5fa81ea0946f9d9193/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java?ref=f694716e289c448ab89cab5fa81ea0946f9d9193","patch":"@@ -126,7 +126,7 @@ public void testBookie() throws Exception {\n         BenchBookie.main(new String[] {\n                 \"--host\", parts[0],\n                 \"--port\", parts[1],\n-                \"--ledger\", \"12345\"\n+                \"--zookeeper\", zkString\n                 });\n     }\n "}]}

