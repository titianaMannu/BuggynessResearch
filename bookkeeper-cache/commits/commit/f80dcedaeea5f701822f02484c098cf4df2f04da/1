{"sha":"f80dcedaeea5f701822f02484c098cf4df2f04da","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmODBkY2VkYWVlYTVmNzAxODIyZjAyNDg0YzA5OGNmNGRmMmYwNGRh","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-07T02:48:26Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-07T02:48:26Z"},"message":"BOOKKEEPER-524: Bookie journal filesystem gets full after SyncThread is terminated with exception (Matteo, fpj via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1429650 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"612384edb115a0f02feeb202e8e5ea6a569a4001","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/612384edb115a0f02feeb202e8e5ea6a569a4001"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f80dcedaeea5f701822f02484c098cf4df2f04da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f80dcedaeea5f701822f02484c098cf4df2f04da","html_url":"https://github.com/apache/bookkeeper/commit/f80dcedaeea5f701822f02484c098cf4df2f04da","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f80dcedaeea5f701822f02484c098cf4df2f04da/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"005b62cc60093dd5b32d4abecd06c2e441bc62ae","url":"https://api.github.com/repos/apache/bookkeeper/commits/005b62cc60093dd5b32d4abecd06c2e441bc62ae","html_url":"https://github.com/apache/bookkeeper/commit/005b62cc60093dd5b32d4abecd06c2e441bc62ae"}],"stats":{"total":127,"additions":78,"deletions":49},"files":[{"sha":"a47eb77557f782f85a4efa2516b9e007f1f45d83","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/f80dcedaeea5f701822f02484c098cf4df2f04da/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/f80dcedaeea5f701822f02484c098cf4df2f04da/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=f80dcedaeea5f701822f02484c098cf4df2f04da","patch":"@@ -157,6 +157,8 @@ Trunk (unreleased changes)\n \n \tBOOKKEEPER-514: TestDeadLock hanging sometimes (ivank, sijie via fpj)\n \n+        BOOKKEEPER-524: Bookie journal filesystem gets full after SyncThread is terminated with exception (Matteo, fpj via sijie)\n+\n       hedwig-protocol:\n \n         BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)"},{"sha":"7cbed7611d205dd0b9cdd7f6c5480e8d668e4d85","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":45,"deletions":40,"changes":85,"blob_url":"https://github.com/apache/bookkeeper/blob/f80dcedaeea5f701822f02484c098cf4df2f04da/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/f80dcedaeea5f701822f02484c098cf4df2f04da/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=f80dcedaeea5f701822f02484c098cf4df2f04da","patch":"@@ -266,58 +266,63 @@ public SyncThread(ServerConfiguration conf) {\n         }\n         @Override\n         public void run() {\n-            while(running) {\n-                synchronized(this) {\n-                    try {\n-                        wait(flushInterval);\n-                        if (!ledgerStorage.isFlushRequired()) {\n+            try {\n+                while (running) {\n+                    synchronized (this) {\n+                        try {\n+                            wait(flushInterval);\n+                            if (!ledgerStorage.isFlushRequired()) {\n+                                continue;\n+                            }\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n                             continue;\n                         }\n-                    } catch (InterruptedException e) {\n-                        Thread.currentThread().interrupt();\n-                        continue;\n                     }\n-                }\n \n-                // try to mark flushing flag to make sure it would not be interrupted\n-                // by shutdown during flushing. otherwise it will receive\n-                // ClosedByInterruptException which may cause index file & entry logger\n-                // closed and corrupted.\n-                if (!flushing.compareAndSet(false, true)) {\n-                    // set flushing flag failed, means flushing is true now\n-                    // indicates another thread wants to interrupt sync thread to exit\n-                    break;\n-                }\n+                    // try to mark flushing flag to make sure it would not be interrupted\n+                    // by shutdown during flushing. otherwise it will receive\n+                    // ClosedByInterruptException which may cause index file & entry logger\n+                    // closed and corrupted.\n+                    if (!flushing.compareAndSet(false, true)) {\n+                        // set flushing flag failed, means flushing is true now\n+                        // indicates another thread wants to interrupt sync thread to exit\n+                        break;\n+                    }\n \n-                // journal mark log\n-                journal.markLog();\n+                    // journal mark log\n+                    journal.markLog();\n \n-                boolean flushFailed = false;\n-                try {\n-                    ledgerStorage.flush();\n-                } catch (NoWritableLedgerDirException e) {\n-                    flushFailed = true;\n-                    flushing.set(false);\n-                    transitionToReadOnlyMode();\n-                } catch (IOException e) {\n-                    LOG.error(\"Exception flushing Ledger\", e);\n-                    flushFailed = true;\n-                }\n-\n-                // if flush failed, we should not roll last mark, otherwise we would\n-                // have some ledgers are not flushed and their journal entries were lost\n-                if (!flushFailed) {\n+                    boolean flushFailed = false;\n                     try {\n-                        journal.rollLog();\n-                        journal.gcJournals();\n+                        ledgerStorage.flush();\n                     } catch (NoWritableLedgerDirException e) {\n+                        flushFailed = true;\n                         flushing.set(false);\n                         transitionToReadOnlyMode();\n+                    } catch (IOException e) {\n+                        LOG.error(\"Exception flushing Ledger\", e);\n+                        flushFailed = true;\n+                    }\n+\n+                    // if flush failed, we should not roll last mark, otherwise we would\n+                    // have some ledgers are not flushed and their journal entries were lost\n+                    if (!flushFailed) {\n+                        try {\n+                            journal.rollLog();\n+                            journal.gcJournals();\n+                        } catch (NoWritableLedgerDirException e) {\n+                            flushing.set(false);\n+                            transitionToReadOnlyMode();\n+                        }\n                     }\n-                }\n \n-                // clear flushing flag\n-                flushing.set(false);\n+                    // clear flushing flag\n+                    flushing.set(false);\n+                }\n+            } catch (Throwable t) {\n+                LOG.error(\"Exception in SyncThread\", t);\n+                triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n             }\n         }\n "},{"sha":"cf526194e70fa3f325cec99c5ba60d267f6a544c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/f80dcedaeea5f701822f02484c098cf4df2f04da/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/f80dcedaeea5f701822f02484c098cf4df2f04da/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=f80dcedaeea5f701822f02484c098cf4df2f04da","patch":"@@ -150,17 +150,18 @@ private static LedgerEntryPage getFromTable(HashMap<Long, HashMap<Long,LedgerEnt\n         return null;\n     }\n \n-    synchronized private LedgerEntryPage getLedgerEntryPage(Long ledger, Long firstEntry, boolean onlyDirty) {\n+    synchronized protected LedgerEntryPage getLedgerEntryPage(Long ledger, Long firstEntry, boolean onlyDirty) {\n         LedgerEntryPage lep = getFromTable(pages, ledger, firstEntry);\n-        try {\n-            if (onlyDirty && lep.isClean()) {\n-                return null;\n-            }\n+        if (lep == null) {\n+            return null;\n+        }\n+\n+        lep.usePage();\n+\n+        if (onlyDirty && lep.isClean()) {\n+            return null;\n+        } else {\n             return lep;\n-        } finally {\n-            if (lep != null) {\n-                lep.usePage();\n-            }\n         }\n     }\n "},{"sha":"16a6bf152da480cb7690e2b5a33bdc3803823ce2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/f80dcedaeea5f701822f02484c098cf4df2f04da/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/f80dcedaeea5f701822f02484c098cf4df2f04da/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=f80dcedaeea5f701822f02484c098cf4df2f04da","patch":"@@ -345,6 +345,27 @@ public void testIndexPageEvictionWriteOrder() throws Exception {\n         }\n     }\n \n+\n+    /**\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-524}\n+     * Checks that getLedgerEntryPage does not throw an NPE in the\n+     * case getFromTable returns a null ledger entry page reference.\n+     * This NPE might kill the sync thread leaving a bookie with no\n+     * sync thread running.\n+     *\n+     * @throws IOException\n+     */\n+    @Test(timeout=30000)\n+    public void testSyncThreadNPE() throws IOException {\n+        newLedgerCache();\n+        try {\n+            ((LedgerCacheImpl) ledgerCache).getLedgerEntryPage(0L, 0L, true);\n+        } catch (Exception e) {\n+            LOG.error(\"Exception when trying to get a ledger entry page\", e);\n+            fail(\"Shouldn't have thrown an exception\");\n+        }\n+    }\n+\n     private ByteBuffer generateEntry(long ledger, long entry) {\n         byte[] data = (\"ledger-\" + ledger + \"-\" + entry).getBytes();\n         ByteBuffer bb = ByteBuffer.wrap(new byte[8 + 8 + data.length]);"}]}

