{"sha":"fbfd10fa94d909144c369e1514db31669a16872b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYmZkMTBmYTk0ZDkwOTE0NGMzNjllMTUxNGRiMzE2NjlhMTY4NzJi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-28T12:51:31Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-28T12:51:31Z"},"message":"BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1378112 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdc2f1b0faa764c11e763a5a7976060cb711901c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fdc2f1b0faa764c11e763a5a7976060cb711901c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fbfd10fa94d909144c369e1514db31669a16872b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fbfd10fa94d909144c369e1514db31669a16872b","html_url":"https://github.com/apache/bookkeeper/commit/fbfd10fa94d909144c369e1514db31669a16872b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fbfd10fa94d909144c369e1514db31669a16872b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","url":"https://api.github.com/repos/apache/bookkeeper/commits/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","html_url":"https://github.com/apache/bookkeeper/commit/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89"}],"stats":{"total":202,"additions":181,"deletions":21},"files":[{"sha":"7c4b621f001f38a0f9fbc84a48f477cf9fe87644","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=fbfd10fa94d909144c369e1514db31669a16872b","patch":"@@ -70,6 +70,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-376: LedgerManagers should consider 'underreplication' node as a special Znode (Uma via sijie)\n \n+        BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie)\n+\n       hedwig-client:\n \n         BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)"},{"sha":"22b44b16f649b0efd93b9530164ae9aad9b962e5","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java","raw_url":"https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java?ref=fbfd10fa94d909144c369e1514db31669a16872b","patch":"@@ -0,0 +1,34 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hedwig.client.exceptions;\n+\n+/**\n+ * This is a Hedwig client side exception thrown when it can't get the response\n+ * handler from the channel pipeline responsible for a PubSubRequest.\n+ */\n+public class NoResponseHandlerException extends Exception {\n+    private static final long serialVersionUID = 1L;\n+\n+    public NoResponseHandlerException(String message) {\n+        super(message);\n+    }\n+\n+    public NoResponseHandlerException(String message, Throwable t) {\n+        super(message, t);\n+    }\n+}"},{"sha":"d0424ad440841c0bf10af038d7d893b017aeba61","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","status":"modified","additions":31,"deletions":4,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java?ref=fbfd10fa94d909144c369e1514db31669a16872b","patch":"@@ -19,6 +19,8 @@\n \n import java.util.TimerTask;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n+import org.apache.hedwig.client.netty.ResponseHandler;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n@@ -61,8 +63,21 @@ public MessageConsumeRetryTask(MessageConsumeData messageConsumeData, TopicSubsc\n         public void run() {\n             // Try to consume the message again\n             Channel topicSubscriberChannel = client.getSubscriber().getChannelForTopic(topicSubscriber);\n-            HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n-            .asyncMessageConsume(messageConsumeData.msg);\n+            ResponseHandler handler = null;\n+            try {\n+                handler = HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel);\n+            } catch (NoResponseHandlerException e) {\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"No response handler found while invoking asyncMessageConsumed in the Message\" +\n+                    \" consume retry task .\" , e);\n+                }\n+                // Explicitly close the channel\n+                if (null != topicSubscriberChannel) {\n+                    topicSubscriberChannel.close();\n+                }\n+                return;\n+            }\n+            handler.getSubscribeResponseHandler().asyncMessageConsume(messageConsumeData.msg);\n         }\n     }\n \n@@ -72,8 +87,20 @@ public void operationFinished(Object ctx, Void resultOfOperation) {\n         // Message has been successfully consumed by the client app so callback\n         // to the ResponseHandler indicating that the message is consumed.\n         Channel topicSubscriberChannel = client.getSubscriber().getChannelForTopic(topicSubscriber);\n-        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n-        .messageConsumed(messageConsumeData.msg);\n+        ResponseHandler handler = null;\n+        try {\n+            handler = HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel);\n+        } catch (NoResponseHandlerException e) {\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"No response handler found while invoking messageConsumed.\" , e);\n+            }\n+            // Explicitly close the channel\n+            if (null != topicSubscriberChannel) {\n+                topicSubscriberChannel.close();\n+            }\n+            return;\n+        }\n+        handler.getSubscribeResponseHandler().messageConsumed(messageConsumeData.msg);\n     }\n \n     public void operationFailed(Object ctx, PubSubException exception) {"},{"sha":"241a5e11c355d0a4cd89cf1b95e3c79f27bc2421","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=fbfd10fa94d909144c369e1514db31669a16872b","patch":"@@ -23,7 +23,7 @@\n import java.util.Queue;\n import java.util.Set;\n \n-import org.jboss.netty.channel.ChannelFuture;\n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.Channel;\n@@ -90,7 +90,14 @@ public void handleSubscribeResponse(PubSubResponse response, PubSubData pubSubDa\n         // If this was not a successful response to the Subscribe request, we\n         // won't be using the Netty Channel created so just close it.\n         if (!response.getStatusCode().equals(StatusCode.SUCCESS)) {\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                // Log an error. But should we also return and not process anything further?\n+                logger.error(\"No response handler found while trying to close channel explicitly while handling a \" +\n+                        \"failed subscription response.\", e);\n+                // Continue closing the channel because this is an unexpected event and state should be reset.\n+            }\n             channel.close();\n         }\n "},{"sha":"2ce5e2616e498ad422feba7c02ad1ca410f0e84d","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","status":"modified","additions":25,"deletions":4,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=fbfd10fa94d909144c369e1514db31669a16872b","patch":"@@ -27,6 +27,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.bootstrap.ClientBootstrap;\n@@ -177,7 +178,13 @@ public void run() {\n             // channels in HedwigPublisher.host2Channel. This stores the\n             // channels used for Publish and Unsubscribe requests.\n             for (Channel channel : pub.host2Channel.values()) {\n-                ResponseHandler responseHandler = getResponseHandlerFromChannel(channel);\n+                ResponseHandler responseHandler = null;\n+                try {\n+                    responseHandler = getResponseHandlerFromChannel(channel);\n+                } catch (NoResponseHandlerException e) {\n+                    logger.warn(\"No response handler found for channel\" + channel + \" in the retry timeout task.\", e);\n+                    continue;\n+                }\n                 for (PubSubData pubSubData : responseHandler.txn2PubSubData.values()) {\n                     checkPubSubDataToTimeOut(pubSubData, responseHandler, curTime, timeoutInterval);\n                 }\n@@ -186,7 +193,13 @@ public void run() {\n             // HedwigSubscriber.topicSubscriber2Channel. This stores the\n             // channels used exclusively for Subscribe requests.\n             for (Channel channel : sub.topicSubscriber2Channel.values()) {\n-                ResponseHandler responseHandler = getResponseHandlerFromChannel(channel);\n+                ResponseHandler responseHandler = null;\n+                try {\n+                    responseHandler = getResponseHandlerFromChannel(channel);\n+                } catch (NoResponseHandlerException e) {\n+                    logger.warn(\"No response handler found for channel\" + channel + \" in the retry timeout task.\", e);\n+                    continue;\n+                }\n                 for (PubSubData pubSubData : responseHandler.txn2PubSubData.values()) {\n                     checkPubSubDataToTimeOut(pubSubData, responseHandler, curTime, timeoutInterval);\n                 }\n@@ -320,9 +333,17 @@ public static InetSocketAddress getHostFromChannel(Channel channel) {\n      * @param channel\n      *            Channel we are retrieving the ResponseHandler instance for\n      * @return ResponseHandler Instance tied to the Channel's Pipeline\n+     * @throws NoResponseHandlerException if the response handler found for the channel is null.\n      */\n-    public static ResponseHandler getResponseHandlerFromChannel(Channel channel) {\n-        return (ResponseHandler) channel.getPipeline().getLast();\n+    public static ResponseHandler getResponseHandlerFromChannel(Channel channel) throws NoResponseHandlerException {\n+        if (null == channel) {\n+            throw new NoResponseHandlerException(\"Received a null value for the channel. Cannot retrieve the response handler\");\n+        }\n+        ResponseHandler handler = (ResponseHandler) channel.getPipeline().getLast();\n+        if (null == handler) {\n+            throw new NoResponseHandlerException(\"Could not retrieve the response handler from the channel's pipeline.\");\n+        }\n+        return handler;\n     }\n \n     // Public getter for entries in the topic2Host Map."},{"sha":"b90865f7c358eccbd5d1da3b1aab5b9464c80e6c","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","status":"modified","additions":20,"deletions":3,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=fbfd10fa94d909144c369e1514db31669a16872b","patch":"@@ -21,6 +21,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -202,7 +203,15 @@ protected void doPublish(PubSubData pubSubData, Channel channel) {\n         // Before we do the write, store this information into the\n         // ResponseHandler so when the server responds, we know what\n         // appropriate Callback Data to invoke for the given txn ID.\n-        HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        try {\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        } catch (NoResponseHandlerException e) {\n+            logger.error(\"No response handler found while storing the publish callback.\");\n+            // Callback on pubsubdata indicating failure.\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new CouldNotConnectException(\"No response \" +\n+                    \"handler found while attempting to publish. So could not connect.\"));\n+            return;\n+        }\n \n         // Finally, write the Publish request through the Channel.\n         if (logger.isDebugEnabled())\n@@ -239,7 +248,11 @@ protected synchronized void storeHost2ChannelMapping(Channel channel) {\n             // topic. Close these redundant channels as they won't be used.\n             if (logger.isDebugEnabled())\n                 logger.debug(\"Channel mapping to host: \" + host + \" already exists so no need to store it.\");\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                logger.error(\"Could not get response handler while closing channel.\");\n+            }\n             channel.close();\n         }\n     }\n@@ -256,7 +269,11 @@ void close() {\n             closed = true;\n         }\n         for (Channel channel : host2Channel.values()) {\n-            client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                logger.error(\"No response handler while trying explicitly close Publisher channel \" + channel);\n+            }\n             channel.close().awaitUninterruptibly();\n         }\n         host2Channel.clear();"},{"sha":"fb872cfe0abc933836f6263c0840ceb92f6eb8b7","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":53,"deletions":7,"changes":60,"blob_url":"https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=fbfd10fa94d909144c369e1514db31669a16872b","patch":"@@ -22,6 +22,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.apache.hedwig.protocol.PubSubProtocol;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -446,7 +447,15 @@ protected void doSubUnsub(PubSubData pubSubData, Channel channel) {\n         // Before we do the write, store this information into the\n         // ResponseHandler so when the server responds, we know what\n         // appropriate Callback Data to invoke for the given txn ID.\n-        HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        try {\n+            HedwigClientImpl.getResponseHandlerFromChannel(channel).txn2PubSubData.put(txnId, pubSubData);\n+        } catch (Exception e) {\n+            logger.error(\"No response handler found while storing the subscribe callback.\");\n+            // Call operationFailed on the pubsubdata callback to indicate failure\n+            pubSubData.getCallback().operationFailed(pubSubData.context, new CouldNotConnectException(\"No response \" +\n+                    \"handler found while attempting to subscribe.\"));\n+            return;\n+        }\n \n         // Finally, write the Subscribe request through the Channel.\n         if (logger.isDebugEnabled())\n@@ -579,8 +588,30 @@ private void startDelivery(final ByteString topic, final ByteString subscriberId\n                 }\n             }\n         }\n-        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n-        .setMessageHandler(messageHandler);\n+        try {\n+            HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n+            .setMessageHandler(messageHandler);\n+        } catch (NoResponseHandlerException e) {\n+            // We did not find a response handler. So remove this subscription handler and throw an exception.\n+            topicSubscriber2MessageHandler.remove(topicSubscriber);\n+            asyncCloseSubscription(topic, subscriberId, new Callback<Void>() {\n+                @Override\n+                public void operationFinished(Object ctx, Void resultOfOperation) {\n+                    logger.warn(\"Closed subscription for topic \" + topic.toStringUtf8() + \" and subscriber \" +\n+                    subscriberId.toStringUtf8());\n+                }\n+\n+                @Override\n+                public void operationFailed(Object ctx, PubSubException exception) {\n+                    logger.warn(\"Error while closing subscription for topic \" + topic.toStringUtf8() + \" and subscriber \" +\n+                            subscriberId.toStringUtf8());\n+                }\n+            }, null);\n+\n+            // We should tell the client to resubscribe.\n+            throw new ClientNotSubscribedException(\"Closed subscription for topic \" + topic.toStringUtf8() + \" and\" +\n+                    \"subscriber Id \"  + subscriberId.toStringUtf8());\n+        }\n         // Now make the TopicSubscriber Channel readable (it is set to not be\n         // readable when the initial subscription is done). Note that this is an\n         // asynchronous call. If this fails (not likely), the futureListener\n@@ -616,8 +647,13 @@ public void stopDelivery(final ByteString topic, final ByteString subscriberId)\n         // Unregister the MessageHandler for the subscribe Channel's\n         // Response Handler.\n         Channel topicSubscriberChannel = topicSubscriber2Channel.get(topicSubscriber);\n-        HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n-        .setMessageHandler(null);\n+        try {\n+            HedwigClientImpl.getResponseHandlerFromChannel(topicSubscriberChannel).getSubscribeResponseHandler()\n+                .setMessageHandler(null);\n+        } catch (NoResponseHandlerException e) {\n+            // Here it's okay if we can't set the response handler's message handler to null. We should just remove it.\n+            logger.warn(\"Could not set message handler to null for subscription channel \" + topicSubscriberChannel + \", ignoring.\");\n+        }\n         this.topicSubscriber2MessageHandler.remove(topicSubscriber);\n         // Now make the TopicSubscriber channel not-readable. This will buffer\n         // up messages if any are sent from the server. Note that this is an\n@@ -671,7 +707,13 @@ private void doAsyncCloseSubscription(final ByteString topic, final ByteString s\n             Channel channel = topicSubscriber2Channel.get(topicSubscriber);\n             topicSubscriber2Channel.remove(topicSubscriber);\n             // Close the subscribe channel asynchronously.\n-            HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                HedwigClientImpl.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                // Don't close the channel if you can't find the handler.\n+                logger.warn(\"No response handler found, so could not close subscription channel \" + channel);\n+            }\n+            // We still close the channel as this is an unexpected event and should be handled as one.\n             ChannelFuture future = channel.close();\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n@@ -725,7 +767,11 @@ void close() {\n \n         // Close all of the open Channels.\n         for (Channel channel : topicSubscriber2Channel.values()) {\n-            client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            try {\n+                client.getResponseHandlerFromChannel(channel).handleChannelClosedExplicitly();\n+            } catch (NoResponseHandlerException e) {\n+                logger.error(\"No response handler found while trying to close subscription channel.\");\n+            }\n             channel.close().awaitUninterruptibly();\n         }\n         topicSubscriber2Channel.clear();"},{"sha":"3f47c956e94a82fcebe3fe41f5fb09a7acea4a97","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/fbfd10fa94d909144c369e1514db31669a16872b/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/WriteCallback.java?ref=fbfd10fa94d909144c369e1514db31669a16872b","patch":"@@ -20,6 +20,7 @@\n import java.net.InetSocketAddress;\n import java.util.LinkedList;\n \n+import org.apache.hedwig.client.exceptions.NoResponseHandlerException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.channel.ChannelFuture;\n@@ -65,7 +66,12 @@ public void operationComplete(ChannelFuture future) throws Exception {\n             // the saved txnId to PubSubData in the ResponseHandler. These\n             // requests will not receive an ack response from the server\n             // so there is no point storing that information there anymore.\n-            HedwigClientImpl.getResponseHandlerFromChannel(future.getChannel()).txn2PubSubData.remove(pubSubData.txnId);\n+            try {\n+                HedwigClientImpl.getResponseHandlerFromChannel(future.getChannel()).txn2PubSubData.remove(pubSubData.txnId);\n+            } catch (NoResponseHandlerException e) {\n+                // We just couldn't remove the transaction ID's mapping. The handler was null, so this has been reset anyway.\n+                logger.warn(\"Could not find response handler to remove txnId mapping to pubsub data. Ignoring.\");\n+            }\n \n             future.getChannel().close();\n "}]}

