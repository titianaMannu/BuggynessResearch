{"sha":"fc51f73cbc9cdaae9876bc08cafa3e7a80826207","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYzUxZjczY2JjOWNkYWFlOTg3NmJjMDhjYWZhM2U3YTgwODI2MjA3","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2017-06-01T06:55:45Z"},"committer":{"name":"Enrico Olivelli","email":"eolivelli@apache.org","date":"2017-06-01T06:55:45Z"},"message":"BOOKKEEPER-1073: Several stats provider related changes.\n\n- add finagle stats provider\n- provide the ability to remove gauge and scopes\n- update jetty versions for twitter-sciences stats provider\n\nAuthor: Sijie Guo <sijie@apache.org>\n\nReviewers: Jia Zhai, Enrico Olivelli\n\nCloses #160 from sijie/add_channel_writer_timer","tree":{"sha":"9b950a3add4440406096317395f2cdd0d31b9e56","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9b950a3add4440406096317395f2cdd0d31b9e56"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fc51f73cbc9cdaae9876bc08cafa3e7a80826207","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fc51f73cbc9cdaae9876bc08cafa3e7a80826207","html_url":"https://github.com/apache/bookkeeper/commit/fc51f73cbc9cdaae9876bc08cafa3e7a80826207","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"eolivelli","id":9469110,"node_id":"MDQ6VXNlcjk0NjkxMTA=","avatar_url":"https://avatars.githubusercontent.com/u/9469110?v=4","gravatar_id":"","url":"https://api.github.com/users/eolivelli","html_url":"https://github.com/eolivelli","followers_url":"https://api.github.com/users/eolivelli/followers","following_url":"https://api.github.com/users/eolivelli/following{/other_user}","gists_url":"https://api.github.com/users/eolivelli/gists{/gist_id}","starred_url":"https://api.github.com/users/eolivelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/eolivelli/subscriptions","organizations_url":"https://api.github.com/users/eolivelli/orgs","repos_url":"https://api.github.com/users/eolivelli/repos","events_url":"https://api.github.com/users/eolivelli/events{/privacy}","received_events_url":"https://api.github.com/users/eolivelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"9bade929dd87829a8903e402f6c3e3be366a854a","url":"https://api.github.com/repos/apache/bookkeeper/commits/9bade929dd87829a8903e402f6c3e3be366a854a","html_url":"https://github.com/apache/bookkeeper/commit/9bade929dd87829a8903e402f6c3e3be366a854a"}],"stats":{"total":673,"additions":654,"deletions":19},"files":[{"sha":"5da084b039f48842c5fdd99ff9ecf720ceff6df6","filename":"bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/codahale-metrics-provider/src/main/java/org/apache/bookkeeper/stats/CodahaleStatsLogger.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -86,6 +86,11 @@ public T getValue() {\n             });\n     }\n \n+    @Override\n+    public <T extends Number> void unregisterGauge(String statName, Gauge<T> gauge) {\n+        // do nothing right now as the Codahale doesn't support conditional removal\n+    }\n+\n     @Override\n     public StatsLogger scope(String scope) {\n         String scopeName;\n@@ -96,4 +101,9 @@ public StatsLogger scope(String scope) {\n         }\n         return new CodahaleStatsLogger(metrics, scopeName);\n     }\n+\n+    @Override\n+    public void removeScope(String name, StatsLogger statsLogger) {\n+        // no-op. the codahale stats logger doesn't have the references for stats logger.\n+    }\n }"},{"sha":"5c1b2989f9a61074c27c7c1eb321d3b95fb3c2d0","filename":"bookkeeper-stats-providers/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/pom.xml?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -29,6 +29,7 @@\n   <packaging>pom</packaging>\n   <name>bookkeeper-stats-providers</name>\n   <modules>\n+    <module>twitter-finagle-provider</module>\n     <module>twitter-science-provider</module>\n     <module>twitter-ostrich-provider</module>\n     <module>codahale-metrics-provider</module>"},{"sha":"e58bf701d48351c631398f710c2f3a8ffeba4979","filename":"bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/prometheus-metrics-provider/src/main/java/org/apache/bookkeeper/stats/PrometheusStatsLogger.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -62,6 +62,16 @@ public double get() {\n                 }).register(registry);\n     }\n \n+    @Override\n+    public <T extends Number> void unregisterGauge(String name, Gauge<T> gauge) {\n+        // no-op\n+    }\n+\n+    @Override\n+    public void removeScope(String name, StatsLogger statsLogger) {\n+        // no-op\n+    }\n+\n     @Override\n     public StatsLogger scope(String name) {\n         return new PrometheusStatsLogger(registry, completeName(name));"},{"sha":"1e0af00016d532555241a82003f5dd3ae6f4d641","filename":"bookkeeper-stats-providers/twitter-finagle-provider/pom.xml","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-finagle-provider/pom.xml?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -0,0 +1,55 @@\n+<?xml version=\"1.0\"?>\n+<!--\n+   Licensed to the Apache Software Foundation (ASF) under one or more\n+   contributor license agreements.  See the NOTICE file distributed with\n+   this work for additional information regarding copyright ownership.\n+   The ASF licenses this file to You under the Apache License, Version 2.0\n+   (the \"License\"); you may not use this file except in compliance with\n+   the License.  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+   Unless required by applicable law or agreed to in writing, software\n+   distributed under the License is distributed on an \"AS IS\" BASIS,\n+   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+   See the License for the specific language governing permissions and\n+   limitations under the License.\n+-->\n+<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <artifactId>bookkeeper</artifactId>\n+    <groupId>org.apache.bookkeeper</groupId>\n+    <version>4.5.0-SNAPSHOT</version>\n+    <relativePath>../..</relativePath>\n+  </parent>\n+  <groupId>org.apache.bookkeeper.stats</groupId>\n+  <artifactId>twitter-finagle-provider</artifactId>\n+  <name>Stats provider for Finagle stats</name>\n+  <url>http://maven.apache.org</url>\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.libdir>${basedir}/lib</project.libdir>\n+  </properties>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper.stats</groupId>\n+      <artifactId>bookkeeper-stats-api</artifactId>\n+      <version>${project.parent.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.twitter</groupId>\n+      <artifactId>finagle-core_2.10</artifactId>\n+      <version>6.34.0</version>\n+    </dependency>\n+  </dependencies>\n+  <repositories>\n+    <repository>\n+      <id>twitter</id>\n+      <name>Twitter repo</name>\n+      <layout>default</layout>\n+      <url>http://maven.twttr.com</url>\n+    </repository>\n+  </repositories>\n+</project>"},{"sha":"a065323a8980cd35354ab15c4e527ed08ae61489","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/CounterImpl.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/CounterImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/CounterImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/CounterImpl.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.finagle;\n+\n+import com.twitter.finagle.stats.StatsReceiver;\n+import org.apache.bookkeeper.stats.Counter;\n+\n+/**\n+ * Note: this counter doesn't support resetting values or getting the current value.\n+ * It also has a limitation in size: max bound is signed integer, not long.\n+ */\n+class CounterImpl implements Counter {\n+    final private com.twitter.finagle.stats.Counter counter;\n+\n+    public CounterImpl(final String name,\n+                       final StatsReceiver stats) {\n+        this.counter = stats.counter0(name);\n+    }\n+\n+    @Override\n+    public void clear() { /* not supported */ }\n+\n+    @Override\n+    public void inc() {\n+        this.counter.incr();\n+    }\n+\n+    @Override\n+    public void dec() {\n+        this.counter.incr(-1);\n+    }\n+\n+    @Override\n+    public void add(final long delta) {\n+        if (delta < Integer.MIN_VALUE || delta > Integer.MAX_VALUE) {\n+            throw new IllegalArgumentException(\"This counter doesn't support long values\");\n+        }\n+        this.counter.incr((int) delta);\n+    }\n+\n+    @Override\n+    public Long get() {\n+        return null; // not supported\n+    }\n+}\n\\ No newline at end of file"},{"sha":"cef8d715ff5475f785e4bca0bfebbeca243a51c3","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsLoggerImpl.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsLoggerImpl.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -0,0 +1,86 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.finagle;\n+\n+import com.twitter.finagle.stats.StatsReceiver;\n+import com.twitter.util.Function0;\n+import org.apache.bookkeeper.stats.Counter;\n+import org.apache.bookkeeper.stats.Gauge;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import scala.collection.Seq;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class FinagleStatsLoggerImpl implements StatsLogger {\n+    final private StatsReceiver stats;\n+    // keep the references for finagle gauges. they are destroyed when the stats logger is destroyed.\n+    final Map<Gauge, com.twitter.finagle.stats.Gauge> finagleGauges;\n+\n+    public FinagleStatsLoggerImpl(final StatsReceiver stats) {\n+        this.stats = stats;\n+        this.finagleGauges = new HashMap<Gauge, com.twitter.finagle.stats.Gauge>();\n+    }\n+\n+    @Override\n+    public OpStatsLogger getOpStatsLogger(final String name) {\n+        return new OpStatsLoggerImpl(name, this.stats);\n+    }\n+\n+    @Override\n+    public Counter getCounter(final String name) {\n+        return new CounterImpl(name, this.stats);\n+    }\n+\n+    @Override\n+    public <T extends Number> void registerGauge(final String name, final Gauge<T> gauge) {\n+        // This is done to inter-op with Scala Seq\n+        final Seq<String> gaugeName = scala.collection.JavaConversions.asScalaBuffer(Arrays.asList(name)).toList();\n+        synchronized (finagleGauges) {\n+            finagleGauges.put(gauge, this.stats.addGauge(gaugeName, gaugeProvider(gauge)));\n+        }\n+    }\n+\n+    @Override\n+    public <T extends Number> void unregisterGauge(String name, Gauge<T> gauge) {\n+        synchronized (finagleGauges) {\n+            finagleGauges.remove(gauge);\n+        }\n+    }\n+\n+    private <T extends Number> Function0<Object> gaugeProvider(final Gauge<T> gauge) {\n+        return new Function0<Object>() {\n+            @Override\n+            public Object apply() {\n+                return gauge.getSample().floatValue();\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public StatsLogger scope(String name) {\n+        return new FinagleStatsLoggerImpl(this.stats.scope(name));\n+    }\n+\n+    @Override\n+    public void removeScope(String name, StatsLogger statsLogger) {\n+        // no-op\n+    }\n+}"},{"sha":"113c25718e0e4a8c8111e9e7233942ae1f4157bb","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsProvider.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/FinagleStatsProvider.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -0,0 +1,47 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.finagle;\n+\n+import com.twitter.finagle.stats.StatsReceiver;\n+import org.apache.bookkeeper.stats.StatsLogger;\n+import org.apache.bookkeeper.stats.StatsProvider;\n+import org.apache.commons.configuration.Configuration;\n+\n+/**\n+ * Main entry point to use Finagle stats for Bookkeeper.\n+ *\n+ * There's no requirement to start or stop it.\n+ */\n+public class FinagleStatsProvider implements StatsProvider {\n+    final private StatsReceiver stats;\n+\n+    public FinagleStatsProvider(final StatsReceiver stats) {\n+        this.stats = stats;\n+    }\n+\n+    @Override\n+    public void start(Configuration conf) { /* no-op */ }\n+\n+    @Override\n+    public void stop() { /* no-op */ }\n+\n+    @Override\n+    public StatsLogger getStatsLogger(final String scope) {\n+        return new FinagleStatsLoggerImpl(this.stats.scope(scope));\n+    }\n+}"},{"sha":"775c4be828e3c308852b916643c16b2c313719ad","filename":"bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/OpStatsLoggerImpl.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/OpStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/OpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-finagle-provider/src/main/java/org/apache/bookkeeper/stats/twitter/finagle/OpStatsLoggerImpl.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.stats.twitter.finagle;\n+\n+import com.twitter.finagle.stats.Stat;\n+import com.twitter.finagle.stats.StatsReceiver;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.bookkeeper.stats.OpStatsData;\n+import org.apache.bookkeeper.stats.OpStatsLogger;\n+\n+/**\n+ * A percentile stat that will delegate to Finagle stats' implementation library\n+ * to compute the percentiles.\n+ *\n+ * Note: metrics will be exposed in form $name/success.p99 for successful events,\n+ * and $name/failure.p99 for failed ones.\n+ */\n+public class OpStatsLoggerImpl implements OpStatsLogger {\n+    final private static OpStatsData NULL_OP_STATS = new OpStatsData(0, 0, 0, new long[6]);\n+    final private Stat success;\n+    final private Stat failure;\n+\n+    public OpStatsLoggerImpl(final String name, final StatsReceiver stats) {\n+        this.success = stats.scope(String.format(\"%s/success\", name)).stat0(name);\n+        this.failure = stats.scope(String.format(\"%s/failure\", name)).stat0(name);\n+    }\n+\n+    @Override\n+    public void registerFailedEvent(long eventLatency, TimeUnit unit) {\n+        this.success.add(unit.toMillis(eventLatency));\n+    }\n+\n+    @Override\n+    public void registerSuccessfulEvent(long eventLatency, TimeUnit unit) {\n+        this.failure.add(unit.toMillis(eventLatency));\n+    }\n+\n+    @Override\n+    public void registerSuccessfulValue(final long value) {\n+        this.success.add(value);\n+    }\n+\n+    @Override\n+    public void registerFailedValue(final long value) {\n+        this.failure.add(value);\n+    }\n+\n+    /**\n+     * We don't need to support percentiles as a part of this provider,\n+     * since they're part of the Stats implementation library.\n+     *\n+     * @return dummy null-stats object\n+     */\n+    @Override\n+    public OpStatsData toOpStatsData() {\n+        return NULL_OP_STATS;\n+    }\n+\n+    @Override\n+    public void clear() { /* not supported */ }\n+}"},{"sha":"d4b8adb25c20b6e60c704b617ad0062641e0cae8","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","status":"modified","additions":29,"deletions":8,"changes":37,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OpStatsLoggerImpl.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -21,8 +21,13 @@\n import org.apache.bookkeeper.stats.OpStatsData;\n import org.apache.bookkeeper.stats.OpStatsLogger;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n class OpStatsLoggerImpl implements OpStatsLogger {\n \n+    static final Logger LOG = LoggerFactory.getLogger(OpStatsLoggerImpl.class);\n+\n     static final double[] PERCENTILES = new double[] {\n             0.1, 0.5, 0.9, 0.99, 0.999, 0.9999\n     };\n@@ -47,26 +52,42 @@ private String statName(String statName) {\n \n     @Override\n     public void registerFailedEvent(long eventLatency, TimeUnit unit) {\n-        failureMetric.add((int) unit.toMillis(eventLatency));\n-        failureCounter.incr();\n+        if (eventLatency < 0) {\n+            LOG.debug(\"{} : tried to register negative failure\", scope);\n+        } else {\n+            failureMetric.add((int) unit.toMillis(eventLatency));\n+            failureCounter.incr();\n+        }\n     }\n \n     @Override\n     public void registerSuccessfulEvent(long eventLatency, TimeUnit unit) {\n-        successMetric.add((int) unit.toMillis(eventLatency));\n-        successCounter.incr();\n+        if (eventLatency < 0) {\n+            LOG.debug(\"{} : tried to register negative success\", scope);\n+        } else {\n+            successMetric.add((int) unit.toMillis(eventLatency));\n+            successCounter.incr();\n+        }\n     }\n \n     @Override\n     public void registerSuccessfulValue(long value) {\n-        successMetric.add((int) value);\n-        successCounter.incr();\n+        if (value < 0) {\n+            LOG.debug(\"{} : tried to register negative success\", scope);\n+        } else {\n+            successMetric.add((int) value);\n+            successCounter.incr();\n+        }\n     }\n \n     @Override\n     public void registerFailedValue(long value) {\n-        failureMetric.add((int) value);\n-        failureCounter.incr();\n+        if (value < 0) {\n+            LOG.debug(\"{} : tried to register negative success\", scope);\n+        } else {\n+            failureMetric.add((int) value);\n+            failureCounter.incr();\n+        }\n     }\n \n     @Override"},{"sha":"d4d00d33dfd18b7afec008e2a9e0f1fd58f26ff4","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","status":"modified","additions":46,"deletions":4,"changes":50,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichProvider.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -18,8 +18,10 @@\n \n import com.twitter.ostrich.admin.CustomHttpHandler;\n import com.twitter.ostrich.admin.RuntimeEnvironment;\n+import com.twitter.ostrich.admin.ServiceTracker;\n import com.twitter.ostrich.admin.StatsFactory;\n import com.twitter.util.Duration;\n+import org.apache.bookkeeper.stats.CachingStatsProvider;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.stats.StatsProvider;\n import org.apache.commons.configuration.Configuration;\n@@ -37,41 +39,81 @@\n \n     protected final static String STATS_EXPORT = \"statsExport\";\n     protected final static String STATS_HTTP_PORT = \"statsHttpPort\";\n+    protected final static String SHOULD_SHUTDOWN_SERVICE_TRACKER = \"shouldShutdownServiceTracker\";\n \n     private com.twitter.ostrich.admin.AdminHttpService statsExporter = null;\n+    private final CachingStatsProvider cachingStatsProvider;\n+    private boolean shutdownServiceTracker = false;\n \n-    private static List<Duration> list(Duration... ts) {\n+    private static List<Duration> list(Duration ... ts) {\n         List<Duration> result = List$.MODULE$.empty();\n         for (int i = ts.length; i > 0; i--) {\n-            result = new $colon$colon<Duration>(ts[i-1], result);\n+            result = new $colon$colon<>(ts[i-1], result);\n         }\n         return result;\n     }\n \n+    private static <T> List<T> emptyList() {\n+        return List$.MODULE$.empty();\n+    }\n+\n     private static <K, V> Map<K, V> emptyMap() {\n         Map<K, V> result = Map$.MODULE$.empty();\n         return result;\n     }\n \n+    public OstrichProvider() {\n+        this(\"\");\n+    }\n+\n+    public OstrichProvider(final String collectionName) {\n+        this.cachingStatsProvider = new CachingStatsProvider(new StatsProvider() {\n+            @Override\n+            public void start(Configuration conf) {\n+                // nop\n+            }\n+\n+            @Override\n+            public void stop() {\n+                // nop\n+            }\n+\n+            @Override\n+            public StatsLogger getStatsLogger(String scope) {\n+                return new OstrichStatsLoggerImpl(scope,\n+                        com.twitter.ostrich.stats.Stats.get(collectionName));\n+            }\n+        });\n+    }\n+\n     @Override\n     public void start(Configuration conf) {\n         if (conf.getBoolean(STATS_EXPORT, false)) {\n             statsExporter = new com.twitter.ostrich.admin.AdminServiceFactory(\n-                    conf.getInt(STATS_HTTP_PORT, 9002), 20, List$.MODULE$.<StatsFactory>empty(), Some.apply(\"\"), List$.MODULE$.<Regex>empty(),\n+                    conf.getInt(STATS_HTTP_PORT, 9002), 20, OstrichProvider.<StatsFactory>emptyList(),\n+                    Some.apply(\"\"), OstrichProvider.<Regex>emptyList(),\n                     OstrichProvider.<String, CustomHttpHandler>emptyMap(), list(Duration.apply(1, TimeUnit.MINUTES))\n             ).apply(RuntimeEnvironment.apply(this, new String[0]));\n+            this.shutdownServiceTracker = conf.getBoolean(SHOULD_SHUTDOWN_SERVICE_TRACKER, false);\n         }\n     }\n \n     @Override\n     public void stop() {\n         if (null != statsExporter) {\n             statsExporter.shutdown();\n+            if (shutdownServiceTracker) {\n+                // ostrich admin service registered some threads in service tracker\n+                // shutdown doesn't stopped those threads. we need to stop service tracker\n+                // to shutdown them. but that potentially has side effects. so adding a flag\n+                // to let caller decide.\n+                ServiceTracker.shutdown();\n+            }\n         }\n     }\n \n     @Override\n     public StatsLogger getStatsLogger(String scope) {\n-        return new OstrichStatsLoggerImpl(scope, com.twitter.ostrich.stats.Stats.get(\"\"));\n+        return cachingStatsProvider.getStatsLogger(scope);\n     }\n }"},{"sha":"52027fce65d118b9617687427b1ae69c8d5e0a90","filename":"bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-ostrich-provider/src/main/java/org/apache/bookkeeper/stats/twitter/ostrich/OstrichStatsLoggerImpl.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -57,6 +57,11 @@ public Object apply() {\n         ostrichProvider.addGauge(getStatName(statName), gaugeFunc);\n     }\n \n+    @Override\n+    public <T extends Number> void unregisterGauge(String statName, Gauge<T> gauge) {\n+        ostrichProvider.clearGauge(getStatName(statName));\n+    }\n+\n     private String getStatName(String statName) {\n         return String.format(\"%s/%s\", scope, statName);\n     }\n@@ -66,4 +71,8 @@ public StatsLogger scope(String scope) {\n         return new OstrichStatsLoggerImpl(getStatName(scope), ostrichProvider);\n     }\n \n+    @Override\n+    public void removeScope(String name, StatsLogger statsLogger) {\n+        // no-op\n+    }\n }"},{"sha":"96e7303344262f55bba4d0edd65f43ae392ffc6c","filename":"bookkeeper-stats-providers/twitter-science-provider/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-science-provider/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-science-provider/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/pom.xml?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -70,12 +70,12 @@\n     <dependency>\n       <groupId>org.eclipse.jetty</groupId>\n       <artifactId>jetty-server</artifactId>\n-      <version>8.1.4.v20120524</version>\n+      <version>9.0.7.v20131107</version>\n     </dependency>\n     <dependency>\n       <groupId>org.eclipse.jetty</groupId>\n       <artifactId>jetty-servlet</artifactId>\n-      <version>8.1.4.v20120524</version>\n+      <version>9.0.7.v20131107</version>\n     </dependency>\n   </dependencies>\n   <repositories>"},{"sha":"cf63ed9c87d720860a3167721415c5b4f0a8d4b5","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsLoggerImpl.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -54,6 +54,11 @@ public T doSample() {\n         });\n     }\n \n+    @Override\n+    public <T extends Number> void unregisterGauge(String name, Gauge<T> gauge) {\n+        // no-op\n+    }\n+\n     private String getStatName(String statName) {\n         return (name + \"_\" + statName).toLowerCase();\n     }\n@@ -69,4 +74,8 @@ public StatsLogger scope(String scope) {\n         return new TwitterStatsLoggerImpl(scopeName);\n     }\n \n+    @Override\n+    public void removeScope(String name, StatsLogger statsLogger) {\n+        // no-op\n+    }\n }"},{"sha":"68d1ab1f289f9205a396b4ff407f414f42234261","filename":"bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","status":"modified","additions":23,"deletions":1,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats-providers/twitter-science-provider/src/main/java/org/apache/bookkeeper/stats/twitter/science/TwitterStatsProvider.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -16,6 +16,7 @@\n  */\n package org.apache.bookkeeper.stats.twitter.science;\n \n+import org.apache.bookkeeper.stats.CachingStatsProvider;\n import org.apache.bookkeeper.stats.StatsLogger;\n import org.apache.bookkeeper.stats.StatsProvider;\n import org.apache.commons.configuration.Configuration;\n@@ -30,6 +31,27 @@\n     protected final static String STATS_HTTP_PORT = \"statsHttpPort\";\n \n     private HTTPStatsExporter statsExporter = null;\n+    private final CachingStatsProvider cachingStatsProvider;\n+\n+    public TwitterStatsProvider() {\n+        this.cachingStatsProvider = new CachingStatsProvider(new StatsProvider() {\n+\n+            @Override\n+            public void start(Configuration conf) {\n+                // nop\n+            }\n+\n+            @Override\n+            public void stop() {\n+                // nop\n+            }\n+\n+            @Override\n+            public StatsLogger getStatsLogger(String scope) {\n+                return new TwitterStatsLoggerImpl(scope);\n+            }\n+        });\n+    }\n \n     @Override\n     public void start(Configuration conf) {\n@@ -58,6 +80,6 @@ public void stop() {\n \n     @Override\n     public StatsLogger getStatsLogger(String name) {\n-        return new TwitterStatsLoggerImpl(name);\n+        return this.cachingStatsProvider.getStatsLogger(name);\n     }\n }"},{"sha":"ec553d97c5c2b967cb77e86754a586b3bde3cebd","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsLogger.java","status":"added","additions":102,"deletions":0,"changes":102,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsLogger.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+public class CachingStatsLogger implements StatsLogger {\n+\n+    protected final StatsLogger underlying;\n+    protected final ConcurrentMap<String, Counter> counters;\n+    protected final ConcurrentMap<String, OpStatsLogger> opStatsLoggers;\n+    protected final ConcurrentMap<String, StatsLogger> scopeStatsLoggers;\n+\n+    public CachingStatsLogger(StatsLogger statsLogger) {\n+        this.underlying = statsLogger;\n+        this.counters = new ConcurrentHashMap<String, Counter>();\n+        this.opStatsLoggers = new ConcurrentHashMap<String, OpStatsLogger>();\n+        this.scopeStatsLoggers = new ConcurrentHashMap<String, StatsLogger>();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return underlying.hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (!(obj instanceof CachingStatsLogger)) {\n+            return false;\n+        }\n+        CachingStatsLogger another = (CachingStatsLogger) obj;\n+        return underlying.equals(another.underlying);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return underlying.toString();\n+    }\n+\n+    @Override\n+    public OpStatsLogger getOpStatsLogger(String name) {\n+        OpStatsLogger opStatsLogger = opStatsLoggers.get(name);\n+        if (null == opStatsLogger) {\n+            OpStatsLogger newOpStatsLogger = underlying.getOpStatsLogger(name);\n+            OpStatsLogger oldOpStatsLogger = opStatsLoggers.putIfAbsent(name, newOpStatsLogger);\n+            opStatsLogger = (null == oldOpStatsLogger) ? newOpStatsLogger : oldOpStatsLogger;\n+        }\n+        return opStatsLogger;\n+    }\n+\n+    @Override\n+    public Counter getCounter(String name) {\n+        Counter counter = counters.get(name);\n+        if (null == counter) {\n+            Counter newCounter = underlying.getCounter(name);\n+            Counter oldCounter = counters.putIfAbsent(name, newCounter);\n+            counter = (null == oldCounter) ? newCounter : oldCounter;\n+        }\n+        return counter;\n+    }\n+\n+    @Override\n+    public <T extends Number> void registerGauge(String name, Gauge<T> gauge) {\n+        underlying.registerGauge(name, gauge);\n+    }\n+\n+    @Override\n+    public <T extends Number> void unregisterGauge(String name, Gauge<T> gauge) {\n+        underlying.unregisterGauge(name, gauge);\n+    }\n+\n+    @Override\n+    public StatsLogger scope(String name) {\n+        StatsLogger statsLogger = scopeStatsLoggers.get(name);\n+        if (null == statsLogger) {\n+            StatsLogger newStatsLogger = new CachingStatsLogger(underlying.scope(name));\n+            StatsLogger oldStatsLogger = scopeStatsLoggers.putIfAbsent(name, newStatsLogger);\n+            statsLogger = (null == oldStatsLogger) ? newStatsLogger : oldStatsLogger;\n+        }\n+        return statsLogger;\n+    }\n+\n+    @Override\n+    public void removeScope(String name, StatsLogger statsLogger) {\n+        scopeStatsLoggers.remove(name, statsLogger);\n+    }\n+}"},{"sha":"609a25894347e383903b7fd314692289becb538c","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsProvider.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsProvider.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsProvider.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/CachingStatsProvider.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -0,0 +1,55 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.bookkeeper.stats;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+public class CachingStatsProvider implements StatsProvider {\n+\n+    protected final StatsProvider underlying;\n+    protected final ConcurrentMap<String, StatsLogger> statsLoggers;\n+\n+    public CachingStatsProvider(StatsProvider provider) {\n+        this.underlying = provider;\n+        this.statsLoggers = new ConcurrentHashMap<String, StatsLogger>();\n+    }\n+\n+    @Override\n+    public void start(Configuration conf) {\n+        this.underlying.start(conf);\n+    }\n+\n+    @Override\n+    public void stop() {\n+        this.underlying.stop();\n+    }\n+\n+    @Override\n+    public StatsLogger getStatsLogger(String scope) {\n+        StatsLogger statsLogger = statsLoggers.get(scope);\n+        if (null == statsLogger) {\n+            StatsLogger newStatsLogger =\n+                    new CachingStatsLogger(underlying.getStatsLogger(scope));\n+            StatsLogger oldStatsLogger = statsLoggers.putIfAbsent(scope, newStatsLogger);\n+            statsLogger = (null == oldStatsLogger) ? newStatsLogger : oldStatsLogger;\n+        }\n+        return statsLogger;\n+    }\n+}"},{"sha":"10226b22ca07935fe82783aca34af00a0424d3f8","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/NullStatsLogger.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -100,9 +100,18 @@ public Counter getCounter(String name) {\n         // nop\n     }\n \n+    @Override\n+    public <T extends Number> void unregisterGauge(String name, Gauge<T> gauge) {\n+        // nop\n+    }\n+\n     @Override\n     public StatsLogger scope(String name) {\n         return this;\n     }\n \n+    @Override\n+    public void removeScope(String name, StatsLogger statsLogger) {\n+        // nop\n+    }\n }"},{"sha":"7a32eaee73f11b0c1bda1788e7f7b78de36e34bf","filename":"bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","status":"modified","additions":22,"deletions":1,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-stats/src/main/java/org/apache/bookkeeper/stats/StatsLogger.java?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -36,13 +36,25 @@\n     public Counter getCounter(String name);\n \n     /**\n-     * Register given <i>guage</i> as name <i>name</i>.\n+     * Register given <i>gauge</i> as name <i>name</i>.\n      *\n      * @param name\n      *          gauge name\n+     * @param gauge\n+     *          gauge function\n      */\n     public <T extends Number> void registerGauge(String name, Gauge<T> gauge);\n \n+    /**\n+     * Unregister given <i>gauge</i> from name <i>name</i>.\n+     *\n+     * @param name\n+     *          name of the gauge\n+     * @param gauge\n+     *          gauge function\n+     */\n+    public <T extends Number> void unregisterGauge(String name, Gauge<T> gauge);\n+\n     /**\n      * Provide the stats logger under scope <i>name</i>.\n      *\n@@ -52,4 +64,13 @@\n      */\n     public StatsLogger scope(String name);\n \n+    /**\n+     * Remove the given <i>statsLogger</i> for scope <i>name</i>.\n+     * It can be no-op if the underlying stats provider doesn't have the ability to remove scope.\n+     *\n+     * @param name name of the scope\n+     * @param statsLogger the stats logger of this scope.\n+     */\n+    public void removeScope(String name, StatsLogger statsLogger);\n+\n }"},{"sha":"48233c3d02eac10dbc588246a4716d8c03d9c309","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/fc51f73cbc9cdaae9876bc08cafa3e7a80826207/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=fc51f73cbc9cdaae9876bc08cafa3e7a80826207","patch":"@@ -41,13 +41,13 @@\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n-    <protobuf.version>2.6.1</protobuf.version>\n     <guava.version>20.0</guava.version>\n     <netty.version>4.1.10.Final</netty.version>\n-    <zookeeper.version>3.5.1-alpha</zookeeper.version>\n+    <protobuf.version>2.6.1</protobuf.version>\n     <slf4j.version>1.7.25</slf4j.version>\n+    <zookeeper.version>3.5.1-alpha</zookeeper.version>\n   </properties>\n-  <url>http://zookeeper.apache.org/bookkeeper</url>\n+  <url>http://bookkeeper.apache.org</url>\n   <build>\n     <plugins>\n       <plugin>"}]}

