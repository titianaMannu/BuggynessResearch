{"sha":"ffd46bcd1c7e2c78f6d41355a2215f73661764c1","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmZmQ0NmJjZDFjN2UyYzc4ZjZkNDEzNTVhMjIxNWY3MzY2MTc2NGMx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T09:55:51Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T09:55:51Z"},"message":"BOOKKEEPER-441: InMemorySubscriptionManager should back up top2sub2seq before change it (Yixue via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402459 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb5924f4d3e6aa5245b34ad5d02131e0679e9864","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bb5924f4d3e6aa5245b34ad5d02131e0679e9864"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ffd46bcd1c7e2c78f6d41355a2215f73661764c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ffd46bcd1c7e2c78f6d41355a2215f73661764c1","html_url":"https://github.com/apache/bookkeeper/commit/ffd46bcd1c7e2c78f6d41355a2215f73661764c1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ffd46bcd1c7e2c78f6d41355a2215f73661764c1/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7dced572419c90b27b587eccc09d48032e7a6a9c","url":"https://api.github.com/repos/apache/bookkeeper/commits/7dced572419c90b27b587eccc09d48032e7a6a9c","html_url":"https://github.com/apache/bookkeeper/commit/7dced572419c90b27b587eccc09d48032e7a6a9c"}],"stats":{"total":33,"additions":16,"deletions":17},"files":[{"sha":"f7efa705a407937db0216d6ab4df8483d9d40eb0","filename":"CHANGES.txt","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/ffd46bcd1c7e2c78f6d41355a2215f73661764c1/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/ffd46bcd1c7e2c78f6d41355a2215f73661764c1/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=ffd46bcd1c7e2c78f6d41355a2215f73661764c1","patch":"@@ -196,6 +196,8 @@ Trunk (unreleased changes)\n \n         BOOKKEEPER-411: Add CloseSubscription Request for multiplexing support (sijie via ivank)\n \n+        BOOKKEEPER-441: InMemorySubscriptionManager should back up top2sub2seq before change it (Yixue via ivank)\n+\n       hedwig-client:\n \n         BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)"},{"sha":"bbe8edf876aeda9a090dc57767786ea1493d2c39","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/ffd46bcd1c7e2c78f6d41355a2215f73661764c1/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ffd46bcd1c7e2c78f6d41355a2215f73661764c1/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/AbstractSubscriptionManager.java?ref=ffd46bcd1c7e2c78f6d41355a2215f73661764c1","patch":"@@ -236,12 +236,8 @@ public void acquiredTopic(final ByteString topic, final Callback<Void> callback,\n \n     class ReleaseOp extends TopicOpQueuer.AsynchronousOp<Void> {\n \n-        final boolean removeStates;\n-\n-        public ReleaseOp(final ByteString topic, final Callback<Void> cb, Object ctx,\n-                         boolean removeStates) {\n+        public ReleaseOp(final ByteString topic, final Callback<Void> cb, Object ctx) {\n             queuer.super(topic, cb, ctx);\n-            this.removeStates = removeStates;\n         }\n \n         @Override\n@@ -263,12 +259,7 @@ public void operationFailed(Object ctx,\n \n                 private void finish() {\n                     // tell delivery manager to stop delivery for subscriptions of this topic\n-                    final Map<ByteString, InMemorySubscriptionState> topicSubscriptions;\n-                    if (removeStates) {\n-                        topicSubscriptions = top2sub2seq.remove(topic);\n-                    } else {\n-                        topicSubscriptions = top2sub2seq.get(topic);\n-                    }\n+                    final Map<ByteString, InMemorySubscriptionState> topicSubscriptions = top2sub2seq.remove(topic);\n                     // no subscriptions now, it may be removed by other release ops\n                     if (null != topicSubscriptions) {\n                         for (ByteString subId : topicSubscriptions.keySet()) {\n@@ -322,7 +313,7 @@ void updateSubscriptionStates(ByteString topic, Callback<Void> finalCb, Object c\n      */\n     @Override\n     public void lostTopic(ByteString topic) {\n-        queuer.pushAndMaybeRun(topic, new ReleaseOp(topic, noopCallback, null, true));\n+        queuer.pushAndMaybeRun(topic, new ReleaseOp(topic, noopCallback, null));\n     }\n \n     private void notifyLastLocalUnsubscribe(ByteString topic) {"},{"sha":"85ecb6d61ff1a65d763e56ea46d8c35e96568f0b","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/ffd46bcd1c7e2c78f6d41355a2215f73661764c1/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/ffd46bcd1c7e2c78f6d41355a2215f73661764c1/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/InMemorySubscriptionManager.java?ref=ffd46bcd1c7e2c78f6d41355a2215f73661764c1","patch":"@@ -30,6 +30,9 @@\n import org.apache.hedwig.util.Callback;\n \n public class InMemorySubscriptionManager extends AbstractSubscriptionManager {\n+    // Backup for top2sub2seq\n+    final ConcurrentHashMap<ByteString, Map<ByteString, InMemorySubscriptionState>> top2sub2seqBackup =\n+        new ConcurrentHashMap<ByteString, Map<ByteString, InMemorySubscriptionState>>();\n \n     public InMemorySubscriptionManager(ServerConfiguration conf,\n                                        TopicManager tm, PersistenceManager pm,\n@@ -72,19 +75,22 @@ protected void replaceSubscriptionData(ByteString topic, ByteString subscriberId\n \n     @Override\n     public void lostTopic(ByteString topic) {\n-        // Intentionally do nothing, so that we dont lose in-memory information\n+        // Backup topic-sub2seq map for readSubscriptions\n+        final Map<ByteString, InMemorySubscriptionState> sub2seq = top2sub2seq.get(topic);\n+        if (null != sub2seq)\n+            top2sub2seqBackup.put(topic, sub2seq);\n+\n         if (logger.isDebugEnabled()) {\n             logger.debug(\"InMemorySubscriptionManager is losing topic \" + topic.toStringUtf8());\n         }\n-        queuer.pushAndMaybeRun(topic, new ReleaseOp(topic, noopCallback, null, false));\n+        queuer.pushAndMaybeRun(topic, new ReleaseOp(topic, noopCallback, null));\n     }\n \n     @Override\n     protected void readSubscriptions(ByteString topic,\n                                      Callback<Map<ByteString, InMemorySubscriptionState>> cb, Object ctx) {\n-        // Since we don't lose in-memory information on lostTopic, we can just\n-        // return that back\n-        Map<ByteString, InMemorySubscriptionState> topicSubs = top2sub2seq.get(topic);\n+        // Since we backed up in-memory information on lostTopic, we can just return that back\n+        Map<ByteString, InMemorySubscriptionState> topicSubs = top2sub2seqBackup.remove(topic);\n \n         if (topicSubs != null) {\n             cb.operationFinished(ctx, topicSubs);"}]}

