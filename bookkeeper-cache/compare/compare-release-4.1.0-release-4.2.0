{"url":"https://api.github.com/repos/apache/bookkeeper/compare/release-4.1.0...release-4.2.0","html_url":"https://github.com/apache/bookkeeper/compare/release-4.1.0...release-4.2.0","permalink_url":"https://github.com/apache/bookkeeper/compare/apache:d867700...apache:5ef2f7e","diff_url":"https://github.com/apache/bookkeeper/compare/release-4.1.0...release-4.2.0.diff","patch_url":"https://github.com/apache/bookkeeper/compare/release-4.1.0...release-4.2.0.patch","base_commit":{"sha":"d867700500eed6404c2f2f54f1ebe7b385d067ab","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkODY3NzAwNTAwZWVkNjQwNGMyZjJmNTRmMWViZTdiMzg1ZDA2N2Fi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-07T15:24:59Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-07T15:24:59Z"},"message":"svn merge -c 1347629,1347636  https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.1\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.1.0@1347677 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e56c9cc63670f37761960dcb2007ca106f81eea","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1e56c9cc63670f37761960dcb2007ca106f81eea"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d867700500eed6404c2f2f54f1ebe7b385d067ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d867700500eed6404c2f2f54f1ebe7b385d067ab","html_url":"https://github.com/apache/bookkeeper/commit/d867700500eed6404c2f2f54f1ebe7b385d067ab","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d867700500eed6404c2f2f54f1ebe7b385d067ab/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","url":"https://api.github.com/repos/apache/bookkeeper/commits/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2","html_url":"https://github.com/apache/bookkeeper/commit/0f724e5ca23e0de2eb7fee8288b2d3b9153c23b2"},{"sha":"ebe0731175c8c19d60bf4f014eeff5db81784e74","url":"https://api.github.com/repos/apache/bookkeeper/commits/ebe0731175c8c19d60bf4f014eeff5db81784e74","html_url":"https://github.com/apache/bookkeeper/commit/ebe0731175c8c19d60bf4f014eeff5db81784e74"}]},"merge_base_commit":{"sha":"687de61ce5077451957307a37c2feecdfb1ed8b5","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ODdkZTYxY2U1MDc3NDUxOTU3MzA3YTM3YzJmZWVjZGZiMWVkOGI1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-05-31T02:22:21Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-05-31T02:22:21Z"},"message":"Preparing for release 4.1.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1344538 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6d3023323d358cc50e54cc080ab79515167ceaf6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6d3023323d358cc50e54cc080ab79515167ceaf6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/687de61ce5077451957307a37c2feecdfb1ed8b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/687de61ce5077451957307a37c2feecdfb1ed8b5","html_url":"https://github.com/apache/bookkeeper/commit/687de61ce5077451957307a37c2feecdfb1ed8b5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/687de61ce5077451957307a37c2feecdfb1ed8b5/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d68727ddd09dc0646af2748c3531e8844fdcaaf4","url":"https://api.github.com/repos/apache/bookkeeper/commits/d68727ddd09dc0646af2748c3531e8844fdcaaf4","html_url":"https://github.com/apache/bookkeeper/commit/d68727ddd09dc0646af2748c3531e8844fdcaaf4"}]},"status":"diverged","ahead_by":211,"behind_by":12,"total_commits":211,"commits":[{"sha":"586873a6163021a3c1b218b20f4f9c4ebc921af3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1ODY4NzNhNjE2MzAyMWEzYzFiMjE4YjIwZjRmOWM0ZWJjOTIxYWYz","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-05-31T02:29:46Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-05-31T02:29:46Z"},"message":"Bump version number to 4.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1344543 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab9681dd8cc78ac97cd1bac904ecc55f9fee249a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ab9681dd8cc78ac97cd1bac904ecc55f9fee249a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/586873a6163021a3c1b218b20f4f9c4ebc921af3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/586873a6163021a3c1b218b20f4f9c4ebc921af3","html_url":"https://github.com/apache/bookkeeper/commit/586873a6163021a3c1b218b20f4f9c4ebc921af3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/586873a6163021a3c1b218b20f4f9c4ebc921af3/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"687de61ce5077451957307a37c2feecdfb1ed8b5","url":"https://api.github.com/repos/apache/bookkeeper/commits/687de61ce5077451957307a37c2feecdfb1ed8b5","html_url":"https://github.com/apache/bookkeeper/commit/687de61ce5077451957307a37c2feecdfb1ed8b5"}]},{"sha":"10b9c5b40bcb66690f6a25330500610c8b296779","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMGI5YzViNDBiY2I2NjY5MGY2YTI1MzMwNTAwNjEwYzhiMjk2Nzc5","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T06:00:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T06:00:19Z"},"message":"BOOKKEEPER-281: BKClient is failing when zkclient connection delays (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1346247 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3e4252fe0431a83937e8becde2317a59eb7daff6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3e4252fe0431a83937e8becde2317a59eb7daff6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/10b9c5b40bcb66690f6a25330500610c8b296779","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/10b9c5b40bcb66690f6a25330500610c8b296779","html_url":"https://github.com/apache/bookkeeper/commit/10b9c5b40bcb66690f6a25330500610c8b296779","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/10b9c5b40bcb66690f6a25330500610c8b296779/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"586873a6163021a3c1b218b20f4f9c4ebc921af3","url":"https://api.github.com/repos/apache/bookkeeper/commits/586873a6163021a3c1b218b20f4f9c4ebc921af3","html_url":"https://github.com/apache/bookkeeper/commit/586873a6163021a3c1b218b20f4f9c4ebc921af3"}]},{"sha":"a788614f5c73b0ab2c18f73d9eff7a858229a94e","node_id":"MDY6Q29tbWl0MTU3NTk1NjphNzg4NjE0ZjVjNzNiMGFiMmMxOGY3M2Q5ZWZmN2E4NTgyMjlhOTRl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T06:40:28Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T06:40:28Z"},"message":"BOOKKEEPER-279: LocalBookKeeper is failing intermittently due to zkclient connection establishment delay (Rakesh R via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1346257 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ed7d564911b355ebcafdd941dbca1cdefff7b71","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5ed7d564911b355ebcafdd941dbca1cdefff7b71"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a788614f5c73b0ab2c18f73d9eff7a858229a94e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a788614f5c73b0ab2c18f73d9eff7a858229a94e","html_url":"https://github.com/apache/bookkeeper/commit/a788614f5c73b0ab2c18f73d9eff7a858229a94e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a788614f5c73b0ab2c18f73d9eff7a858229a94e/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"10b9c5b40bcb66690f6a25330500610c8b296779","url":"https://api.github.com/repos/apache/bookkeeper/commits/10b9c5b40bcb66690f6a25330500610c8b296779","html_url":"https://github.com/apache/bookkeeper/commit/10b9c5b40bcb66690f6a25330500610c8b296779"}]},{"sha":"27b6dd6a40f3e4721a29ea2030d96994869a8260","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyN2I2ZGQ2YTQwZjNlNDcyMWEyOWVhMjAzMGQ5Njk5NDg2OWE4MjYw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T09:56:14Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T09:56:14Z"},"message":"BOOKKEEPER-285: TestZkSubscriptionManager quits due to NPE, so other tests are not run in hedwig server. (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1346321 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a22ecc844c37becd60b119d8f497d13b0a12efbd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a22ecc844c37becd60b119d8f497d13b0a12efbd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/27b6dd6a40f3e4721a29ea2030d96994869a8260","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/27b6dd6a40f3e4721a29ea2030d96994869a8260","html_url":"https://github.com/apache/bookkeeper/commit/27b6dd6a40f3e4721a29ea2030d96994869a8260","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/27b6dd6a40f3e4721a29ea2030d96994869a8260/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"a788614f5c73b0ab2c18f73d9eff7a858229a94e","url":"https://api.github.com/repos/apache/bookkeeper/commits/a788614f5c73b0ab2c18f73d9eff7a858229a94e","html_url":"https://github.com/apache/bookkeeper/commit/a788614f5c73b0ab2c18f73d9eff7a858229a94e"}]},{"sha":"25552d910c5d32307bda64cc3ae022e607850b7c","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNTU1MmQ5MTBjNWQzMjMwN2JkYTY0Y2MzYWUwMjJlNjA3ODUwYjdj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T11:02:43Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-05T11:02:43Z"},"message":"BOOKKEEPER-286: Compilation warning (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1346340 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d91866421923ab004aa3be71fa9ccf0934c1557a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d91866421923ab004aa3be71fa9ccf0934c1557a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/25552d910c5d32307bda64cc3ae022e607850b7c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/25552d910c5d32307bda64cc3ae022e607850b7c","html_url":"https://github.com/apache/bookkeeper/commit/25552d910c5d32307bda64cc3ae022e607850b7c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/25552d910c5d32307bda64cc3ae022e607850b7c/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"27b6dd6a40f3e4721a29ea2030d96994869a8260","url":"https://api.github.com/repos/apache/bookkeeper/commits/27b6dd6a40f3e4721a29ea2030d96994869a8260","html_url":"https://github.com/apache/bookkeeper/commit/27b6dd6a40f3e4721a29ea2030d96994869a8260"}]},{"sha":"d5caab3aae143352f2d8c3faea71dce11fdb6b45","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNWNhYWIzYWFlMTQzMzUyZjJkOGMzZmFlYTcxZGNlMTFmZGI2YjQ1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-06T16:13:56Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-06T16:13:56Z"},"message":"BOOKKEEPER-287: NoSuchElementException in LedgerCacheImpl (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1346966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"afbb44507dc3eefc42d9710af095631641923771","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/afbb44507dc3eefc42d9710af095631641923771"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d5caab3aae143352f2d8c3faea71dce11fdb6b45","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d5caab3aae143352f2d8c3faea71dce11fdb6b45","html_url":"https://github.com/apache/bookkeeper/commit/d5caab3aae143352f2d8c3faea71dce11fdb6b45","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d5caab3aae143352f2d8c3faea71dce11fdb6b45/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"25552d910c5d32307bda64cc3ae022e607850b7c","url":"https://api.github.com/repos/apache/bookkeeper/commits/25552d910c5d32307bda64cc3ae022e607850b7c","html_url":"https://github.com/apache/bookkeeper/commit/25552d910c5d32307bda64cc3ae022e607850b7c"}]},{"sha":"0a3ea6222061e4ba504cdf8ab8937ab26f71b5a9","node_id":"MDY6Q29tbWl0MTU3NTk1NjowYTNlYTYyMjIwNjFlNGJhNTA0Y2RmOGFiODkzN2FiMjZmNzFiNWE5","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-07T14:15:55Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-07T14:15:55Z"},"message":"BOOKKEEPER-288: NOTICE files don't have the correct year (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1347628 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ebd5e2340fdfe87711bf8676ca4cce0a4ee9dcd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5ebd5e2340fdfe87711bf8676ca4cce0a4ee9dcd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0a3ea6222061e4ba504cdf8ab8937ab26f71b5a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0a3ea6222061e4ba504cdf8ab8937ab26f71b5a9","html_url":"https://github.com/apache/bookkeeper/commit/0a3ea6222061e4ba504cdf8ab8937ab26f71b5a9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0a3ea6222061e4ba504cdf8ab8937ab26f71b5a9/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d5caab3aae143352f2d8c3faea71dce11fdb6b45","url":"https://api.github.com/repos/apache/bookkeeper/commits/d5caab3aae143352f2d8c3faea71dce11fdb6b45","html_url":"https://github.com/apache/bookkeeper/commit/d5caab3aae143352f2d8c3faea71dce11fdb6b45"}]},{"sha":"2f5024bbc720f2159efa67eed7a9f21d208a134b","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZjUwMjRiYmM3MjBmMjE1OWVmYTY3ZWVkN2E5ZjIxZDIwOGExMzRi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-07T14:21:52Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-07T14:21:52Z"},"message":"update release date for release 4.1.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1347634 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"412002f0c47d30036b7381f5b16029096b3365a5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/412002f0c47d30036b7381f5b16029096b3365a5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2f5024bbc720f2159efa67eed7a9f21d208a134b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2f5024bbc720f2159efa67eed7a9f21d208a134b","html_url":"https://github.com/apache/bookkeeper/commit/2f5024bbc720f2159efa67eed7a9f21d208a134b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2f5024bbc720f2159efa67eed7a9f21d208a134b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"0a3ea6222061e4ba504cdf8ab8937ab26f71b5a9","url":"https://api.github.com/repos/apache/bookkeeper/commits/0a3ea6222061e4ba504cdf8ab8937ab26f71b5a9","html_url":"https://github.com/apache/bookkeeper/commit/0a3ea6222061e4ba504cdf8ab8937ab26f71b5a9"}]},{"sha":"863f32a8ed33a5be3c9c622fb1c701bf3b48a2e0","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4NjNmMzJhOGVkMzNhNWJlM2M5YzYyMmZiMWM3MDFiZjNiNDhhMmUw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-12T15:37:57Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-12T15:37:57Z"},"message":"BOOKKEEPER-289: mvn clean doesn't remove test output files (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1349400 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db51fe34f0044867e58acef51a3e18b49a630885","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/db51fe34f0044867e58acef51a3e18b49a630885"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/863f32a8ed33a5be3c9c622fb1c701bf3b48a2e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/863f32a8ed33a5be3c9c622fb1c701bf3b48a2e0","html_url":"https://github.com/apache/bookkeeper/commit/863f32a8ed33a5be3c9c622fb1c701bf3b48a2e0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/863f32a8ed33a5be3c9c622fb1c701bf3b48a2e0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2f5024bbc720f2159efa67eed7a9f21d208a134b","url":"https://api.github.com/repos/apache/bookkeeper/commits/2f5024bbc720f2159efa67eed7a9f21d208a134b","html_url":"https://github.com/apache/bookkeeper/commit/2f5024bbc720f2159efa67eed7a9f21d208a134b"}]},{"sha":"aa7f37c6095f61e89a290fc608fd14a50bc7b0e0","node_id":"MDY6Q29tbWl0MTU3NTk1NjphYTdmMzdjNjA5NWY2MWU4OWEyOTBmYzYwOGZkMTRhNTBiYzdiMGUw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-12T16:23:12Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-12T16:23:12Z"},"message":"BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1349423 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dd5fac29d0bba88e3ee063742c30ce27f95a81f8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dd5fac29d0bba88e3ee063742c30ce27f95a81f8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/aa7f37c6095f61e89a290fc608fd14a50bc7b0e0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/aa7f37c6095f61e89a290fc608fd14a50bc7b0e0","html_url":"https://github.com/apache/bookkeeper/commit/aa7f37c6095f61e89a290fc608fd14a50bc7b0e0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/aa7f37c6095f61e89a290fc608fd14a50bc7b0e0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"863f32a8ed33a5be3c9c622fb1c701bf3b48a2e0","url":"https://api.github.com/repos/apache/bookkeeper/commits/863f32a8ed33a5be3c9c622fb1c701bf3b48a2e0","html_url":"https://github.com/apache/bookkeeper/commit/863f32a8ed33a5be3c9c622fb1c701bf3b48a2e0"}]},{"sha":"a2cd9899405ef7313a50e87a370aecef543ae4eb","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMmNkOTg5OTQwNWVmNzMxM2E1MGU4N2EzNzBhZWNlZjU0M2FlNGVi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-13T14:57:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-13T14:57:54Z"},"message":"BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1349896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55da59ec2e47c89f9cff2d5a1fb30b95525593c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/55da59ec2e47c89f9cff2d5a1fb30b95525593c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a2cd9899405ef7313a50e87a370aecef543ae4eb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a2cd9899405ef7313a50e87a370aecef543ae4eb","html_url":"https://github.com/apache/bookkeeper/commit/a2cd9899405ef7313a50e87a370aecef543ae4eb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a2cd9899405ef7313a50e87a370aecef543ae4eb/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"aa7f37c6095f61e89a290fc608fd14a50bc7b0e0","url":"https://api.github.com/repos/apache/bookkeeper/commits/aa7f37c6095f61e89a290fc608fd14a50bc7b0e0","html_url":"https://github.com/apache/bookkeeper/commit/aa7f37c6095f61e89a290fc608fd14a50bc7b0e0"}]},{"sha":"9472fae8739be41301847b1c8e31954f376997e6","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NDcyZmFlODczOWJlNDEzMDE4NDdiMWM4ZTMxOTU0ZjM3Njk5N2U2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-18T14:54:55Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-18T14:54:55Z"},"message":"BOOKKEEPER-298: We run with preferIPv4Stack in the scripts but not in the tests (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1351374 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"feb275d797bf79d6c2e55b716a09f52cb5bf82e0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/feb275d797bf79d6c2e55b716a09f52cb5bf82e0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9472fae8739be41301847b1c8e31954f376997e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9472fae8739be41301847b1c8e31954f376997e6","html_url":"https://github.com/apache/bookkeeper/commit/9472fae8739be41301847b1c8e31954f376997e6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9472fae8739be41301847b1c8e31954f376997e6/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"a2cd9899405ef7313a50e87a370aecef543ae4eb","url":"https://api.github.com/repos/apache/bookkeeper/commits/a2cd9899405ef7313a50e87a370aecef543ae4eb","html_url":"https://github.com/apache/bookkeeper/commit/a2cd9899405ef7313a50e87a370aecef543ae4eb"}]},{"sha":"297eb745440443eea1a8217c89299abf8d18fc3f","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyOTdlYjc0NTQ0MDQ0M2VlYTFhODIxN2M4OTI5OWFiZjhkMThmYzNm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-19T10:39:37Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-19T10:39:37Z"},"message":"BOOKKEEPER-203: improve ledger manager interface to remove zookeeper dependency on metadata operations. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1351646 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8990efc2fb0ad267ba43cd5cf8c9856cf132ee52","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8990efc2fb0ad267ba43cd5cf8c9856cf132ee52"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/297eb745440443eea1a8217c89299abf8d18fc3f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/297eb745440443eea1a8217c89299abf8d18fc3f","html_url":"https://github.com/apache/bookkeeper/commit/297eb745440443eea1a8217c89299abf8d18fc3f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/297eb745440443eea1a8217c89299abf8d18fc3f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9472fae8739be41301847b1c8e31954f376997e6","url":"https://api.github.com/repos/apache/bookkeeper/commits/9472fae8739be41301847b1c8e31954f376997e6","html_url":"https://github.com/apache/bookkeeper/commit/9472fae8739be41301847b1c8e31954f376997e6"}]},{"sha":"18728877881a23d2639eb650d47b7c41bbccd9ca","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxODcyODg3Nzg4MWEyM2QyNjM5ZWI2NTBkNDdiN2M0MWJiY2NkOWNh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-19T10:58:16Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-19T10:58:16Z"},"message":"BOOKKEEPER-292: Test backward compatibility automatically between versions. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1351651 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ebce91f456b85095eb887de4ca2b43b861d83efc","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ebce91f456b85095eb887de4ca2b43b861d83efc"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/18728877881a23d2639eb650d47b7c41bbccd9ca","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/18728877881a23d2639eb650d47b7c41bbccd9ca","html_url":"https://github.com/apache/bookkeeper/commit/18728877881a23d2639eb650d47b7c41bbccd9ca","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/18728877881a23d2639eb650d47b7c41bbccd9ca/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"297eb745440443eea1a8217c89299abf8d18fc3f","url":"https://api.github.com/repos/apache/bookkeeper/commits/297eb745440443eea1a8217c89299abf8d18fc3f","html_url":"https://github.com/apache/bookkeeper/commit/297eb745440443eea1a8217c89299abf8d18fc3f"}]},{"sha":"d193780cc404c2e3694c82385d7f422accc416f3","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMTkzNzgwY2M0MDRjMmUzNjk0YzgyMzg1ZDdmNDIyYWNjYzQxNmYz","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-27T05:10:46Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-06-27T05:10:46Z"},"message":"BOOKKEEPER-307: BookieShell introduces 4 findbugs warnings (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1354326 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"069424ac7daa0be2002c070a244e5f12ca1bb77d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/069424ac7daa0be2002c070a244e5f12ca1bb77d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d193780cc404c2e3694c82385d7f422accc416f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d193780cc404c2e3694c82385d7f422accc416f3","html_url":"https://github.com/apache/bookkeeper/commit/d193780cc404c2e3694c82385d7f422accc416f3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d193780cc404c2e3694c82385d7f422accc416f3/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"18728877881a23d2639eb650d47b7c41bbccd9ca","url":"https://api.github.com/repos/apache/bookkeeper/commits/18728877881a23d2639eb650d47b7c41bbccd9ca","html_url":"https://github.com/apache/bookkeeper/commit/18728877881a23d2639eb650d47b7c41bbccd9ca"}]},{"sha":"744edf07394472d3146e57831592a69d5a86616c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3NDRlZGYwNzM5NDQ3MmQzMTQ2ZTU3ODMxNTkyYTY5ZDVhODY2MTZj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-27T13:35:11Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-27T13:35:11Z"},"message":"BOOKKEEPER-303: LedgerMetadata should serialized using protobufs (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1354492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a766f00dff402dff2bae0291fc7470c1a142702e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a766f00dff402dff2bae0291fc7470c1a142702e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/744edf07394472d3146e57831592a69d5a86616c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/744edf07394472d3146e57831592a69d5a86616c","html_url":"https://github.com/apache/bookkeeper/commit/744edf07394472d3146e57831592a69d5a86616c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/744edf07394472d3146e57831592a69d5a86616c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d193780cc404c2e3694c82385d7f422accc416f3","url":"https://api.github.com/repos/apache/bookkeeper/commits/d193780cc404c2e3694c82385d7f422accc416f3","html_url":"https://github.com/apache/bookkeeper/commit/d193780cc404c2e3694c82385d7f422accc416f3"}]},{"sha":"4d15e5675c0394cb910e54c9b0d9743e98fb64c7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZDE1ZTU2NzVjMDM5NGNiOTEwZTU0YzliMGQ5NzQzZTk4ZmI2NGM3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-28T17:19:46Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-28T17:19:46Z"},"message":"BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1355079 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"776fe04b96d0b8eb6d16d5b3498716ccc7fd8bf1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/776fe04b96d0b8eb6d16d5b3498716ccc7fd8bf1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4d15e5675c0394cb910e54c9b0d9743e98fb64c7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4d15e5675c0394cb910e54c9b0d9743e98fb64c7","html_url":"https://github.com/apache/bookkeeper/commit/4d15e5675c0394cb910e54c9b0d9743e98fb64c7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4d15e5675c0394cb910e54c9b0d9743e98fb64c7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"744edf07394472d3146e57831592a69d5a86616c","url":"https://api.github.com/repos/apache/bookkeeper/commits/744edf07394472d3146e57831592a69d5a86616c","html_url":"https://github.com/apache/bookkeeper/commit/744edf07394472d3146e57831592a69d5a86616c"}]},{"sha":"441bf650859bc96a49b667961a19afd936b67e4c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NDFiZjY1MDg1OWJjOTZhNDliNjY3OTYxYTE5YWZkOTM2YjY3ZTRj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-28T17:32:26Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-28T17:32:26Z"},"message":"BOOKKEEPER-322: New protobufs generates findbugs errors (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1355083 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2a6b906648fc0574e8f6cbc611f4fb8cb4b744d2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2a6b906648fc0574e8f6cbc611f4fb8cb4b744d2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/441bf650859bc96a49b667961a19afd936b67e4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/441bf650859bc96a49b667961a19afd936b67e4c","html_url":"https://github.com/apache/bookkeeper/commit/441bf650859bc96a49b667961a19afd936b67e4c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/441bf650859bc96a49b667961a19afd936b67e4c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4d15e5675c0394cb910e54c9b0d9743e98fb64c7","url":"https://api.github.com/repos/apache/bookkeeper/commits/4d15e5675c0394cb910e54c9b0d9743e98fb64c7","html_url":"https://github.com/apache/bookkeeper/commit/4d15e5675c0394cb910e54c9b0d9743e98fb64c7"}]},{"sha":"de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkZTQzMjA1OGI3ZTdjMDI2ZmNmMGI2OWIxZTIwYmNmOWFlMWIxZGUy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-29T16:43:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-06-29T16:43:54Z"},"message":"BOOKKEEPER-280: LedgerHandle.addEntry() should return an entryId (mmerli via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1355467 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41ae7dfccbfc308983f9f83879e707fc8c0a9832","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/41ae7dfccbfc308983f9f83879e707fc8c0a9832"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2","html_url":"https://github.com/apache/bookkeeper/commit/de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"441bf650859bc96a49b667961a19afd936b67e4c","url":"https://api.github.com/repos/apache/bookkeeper/commits/441bf650859bc96a49b667961a19afd936b67e4c","html_url":"https://github.com/apache/bookkeeper/commit/441bf650859bc96a49b667961a19afd936b67e4c"}]},{"sha":"18f5927a2bd0f423197a2da49ddd5733cdccb651","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxOGY1OTI3YTJiZDBmNDIzMTk3YTJkYTQ5ZGRkNTczM2NkY2NiNjUx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-04T13:44:08Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-04T13:44:08Z"},"message":"BOOKKEEPER-320: Let hedwig cpp client could publish messages using Message object instead of string. (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1357264 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"87f14c924434e07b9f90bd769defa8c42f077856","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/87f14c924434e07b9f90bd769defa8c42f077856"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/18f5927a2bd0f423197a2da49ddd5733cdccb651","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/18f5927a2bd0f423197a2da49ddd5733cdccb651","html_url":"https://github.com/apache/bookkeeper/commit/18f5927a2bd0f423197a2da49ddd5733cdccb651","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/18f5927a2bd0f423197a2da49ddd5733cdccb651/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2","url":"https://api.github.com/repos/apache/bookkeeper/commits/de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2","html_url":"https://github.com/apache/bookkeeper/commit/de432058b7e7c026fcf0b69b1e20bcf9ae1b1de2"}]},{"sha":"763479b6f94fd4827ee28e9f698cfa9a31095061","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3NjM0NzliNmY5NGZkNDgyN2VlMjhlOWY2OThjZmE5YTMxMDk1MDYx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-04T14:17:30Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-04T14:17:30Z"},"message":"BOOKKEEPER-324: Flakeyness in LedgerCreateDeleteTest (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1357277 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1e7f85a571bc1c5751673e4c8046b5c6147347e0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1e7f85a571bc1c5751673e4c8046b5c6147347e0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/763479b6f94fd4827ee28e9f698cfa9a31095061","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/763479b6f94fd4827ee28e9f698cfa9a31095061","html_url":"https://github.com/apache/bookkeeper/commit/763479b6f94fd4827ee28e9f698cfa9a31095061","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/763479b6f94fd4827ee28e9f698cfa9a31095061/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"18f5927a2bd0f423197a2da49ddd5733cdccb651","url":"https://api.github.com/repos/apache/bookkeeper/commits/18f5927a2bd0f423197a2da49ddd5733cdccb651","html_url":"https://github.com/apache/bookkeeper/commit/18f5927a2bd0f423197a2da49ddd5733cdccb651"}]},{"sha":"6b249579f1cdf4e9fb940b0bf54b8d55a1ab38b2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2YjI0OTU3OWYxY2RmNGU5ZmI5NDBiMGJmNTRiOGQ1NWExYWIzOGIy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-05T05:10:47Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-05T05:10:47Z"},"message":"BOOKKEEPER-318: Spelling mistake in MultiCallback log message. (surendra via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1357464 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"85854cbfd02320635c44faf92861321935373bd7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/85854cbfd02320635c44faf92861321935373bd7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6b249579f1cdf4e9fb940b0bf54b8d55a1ab38b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6b249579f1cdf4e9fb940b0bf54b8d55a1ab38b2","html_url":"https://github.com/apache/bookkeeper/commit/6b249579f1cdf4e9fb940b0bf54b8d55a1ab38b2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6b249579f1cdf4e9fb940b0bf54b8d55a1ab38b2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"763479b6f94fd4827ee28e9f698cfa9a31095061","url":"https://api.github.com/repos/apache/bookkeeper/commits/763479b6f94fd4827ee28e9f698cfa9a31095061","html_url":"https://github.com/apache/bookkeeper/commit/763479b6f94fd4827ee28e9f698cfa9a31095061"}]},{"sha":"db71147d9df0ad9efa697275e934330d21c99a88","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkYjcxMTQ3ZDlkZjBhZDllZmE2OTcyNzVlOTM0MzMwZDIxYzk5YTg4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-05T05:26:09Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-05T05:26:09Z"},"message":"BOOKKEEPER-296: It's better provide stop script for bookie (nijel via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1357466 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be6e4a9a0472ea1bd9478d8f0f995cefe848da6c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/be6e4a9a0472ea1bd9478d8f0f995cefe848da6c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/db71147d9df0ad9efa697275e934330d21c99a88","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/db71147d9df0ad9efa697275e934330d21c99a88","html_url":"https://github.com/apache/bookkeeper/commit/db71147d9df0ad9efa697275e934330d21c99a88","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/db71147d9df0ad9efa697275e934330d21c99a88/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"6b249579f1cdf4e9fb940b0bf54b8d55a1ab38b2","url":"https://api.github.com/repos/apache/bookkeeper/commits/6b249579f1cdf4e9fb940b0bf54b8d55a1ab38b2","html_url":"https://github.com/apache/bookkeeper/commit/6b249579f1cdf4e9fb940b0bf54b8d55a1ab38b2"}]},{"sha":"09e5d180231f5307a58a89d0c89169bca890bddf","node_id":"MDY6Q29tbWl0MTU3NTk1NjowOWU1ZDE4MDIzMWY1MzA3YTU4YTg5ZDBjODkxNjliY2E4OTBiZGRm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-05T12:45:33Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-05T12:45:33Z"},"message":"BOOKKEEPER-294: Not able to start the bookkeeper before the ZK session timeout. (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1357581 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35b343de7bc3b89b509b91343ee83302333765e1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/35b343de7bc3b89b509b91343ee83302333765e1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/09e5d180231f5307a58a89d0c89169bca890bddf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/09e5d180231f5307a58a89d0c89169bca890bddf","html_url":"https://github.com/apache/bookkeeper/commit/09e5d180231f5307a58a89d0c89169bca890bddf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/09e5d180231f5307a58a89d0c89169bca890bddf/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"db71147d9df0ad9efa697275e934330d21c99a88","url":"https://api.github.com/repos/apache/bookkeeper/commits/db71147d9df0ad9efa697275e934330d21c99a88","html_url":"https://github.com/apache/bookkeeper/commit/db71147d9df0ad9efa697275e934330d21c99a88"}]},{"sha":"fbcc0b583fd698cfa9ca232f4be5b0d584bb3ee5","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYmNjMGI1ODNmZDY5OGNmYTljYTIzMmY0YmU1YjBkNTg0YmIzZWU1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-09T02:09:51Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-09T02:09:51Z"},"message":"BOOKKEEPER-328: Bookie DeathWatcher is missing thread name (Rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1358895 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"79d272db4ab31293608d8afb976891e383ed39b6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/79d272db4ab31293608d8afb976891e383ed39b6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fbcc0b583fd698cfa9ca232f4be5b0d584bb3ee5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fbcc0b583fd698cfa9ca232f4be5b0d584bb3ee5","html_url":"https://github.com/apache/bookkeeper/commit/fbcc0b583fd698cfa9ca232f4be5b0d584bb3ee5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fbcc0b583fd698cfa9ca232f4be5b0d584bb3ee5/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"09e5d180231f5307a58a89d0c89169bca890bddf","url":"https://api.github.com/repos/apache/bookkeeper/commits/09e5d180231f5307a58a89d0c89169bca890bddf","html_url":"https://github.com/apache/bookkeeper/commit/09e5d180231f5307a58a89d0c89169bca890bddf"}]},{"sha":"c2efd0a48c5d1ea4edd7bf33c69a7e5270942eb4","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMmVmZDBhNDhjNWQxZWE0ZWRkN2JmMzNjNjlhN2U1MjcwOTQyZWI0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-11T17:11:06Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-11T17:11:06Z"},"message":"BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1360300 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d59560ee0ba2d11566cd72e6a3e5d33f7b0f8577","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d59560ee0ba2d11566cd72e6a3e5d33f7b0f8577"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c2efd0a48c5d1ea4edd7bf33c69a7e5270942eb4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c2efd0a48c5d1ea4edd7bf33c69a7e5270942eb4","html_url":"https://github.com/apache/bookkeeper/commit/c2efd0a48c5d1ea4edd7bf33c69a7e5270942eb4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c2efd0a48c5d1ea4edd7bf33c69a7e5270942eb4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"fbcc0b583fd698cfa9ca232f4be5b0d584bb3ee5","url":"https://api.github.com/repos/apache/bookkeeper/commits/fbcc0b583fd698cfa9ca232f4be5b0d584bb3ee5","html_url":"https://github.com/apache/bookkeeper/commit/fbcc0b583fd698cfa9ca232f4be5b0d584bb3ee5"}]},{"sha":"0e06ddeb7e47bd8794fd378629602e41ea4a1fd9","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZTA2ZGRlYjdlNDdiZDg3OTRmZDM3ODYyOTYwMmU0MWVhNGExZmQ5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-11T17:24:48Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-07-11T17:24:48Z"},"message":"BOOKKEEPER-329: provide stop scripts for hub server (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1360311 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6203de847dbdb26231471d74a3d7166d86f3c2a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e6203de847dbdb26231471d74a3d7166d86f3c2a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0e06ddeb7e47bd8794fd378629602e41ea4a1fd9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0e06ddeb7e47bd8794fd378629602e41ea4a1fd9","html_url":"https://github.com/apache/bookkeeper/commit/0e06ddeb7e47bd8794fd378629602e41ea4a1fd9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0e06ddeb7e47bd8794fd378629602e41ea4a1fd9/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c2efd0a48c5d1ea4edd7bf33c69a7e5270942eb4","url":"https://api.github.com/repos/apache/bookkeeper/commits/c2efd0a48c5d1ea4edd7bf33c69a7e5270942eb4","html_url":"https://github.com/apache/bookkeeper/commit/c2efd0a48c5d1ea4edd7bf33c69a7e5270942eb4"}]},{"sha":"51ca99b871ebf85738c82cb1f86eb7de223a44b2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1MWNhOTliODcxZWJmODU3MzhjODJjYjFmODZlYjdkZTIyM2E0NGIy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-16T10:35:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-16T10:35:19Z"},"message":"BOOKKEEPER-310: Changes in hedwig server to support JMS spec (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1361968 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cab4865ccf7c60296d041a54f32cff9dab516f82","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cab4865ccf7c60296d041a54f32cff9dab516f82"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/51ca99b871ebf85738c82cb1f86eb7de223a44b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/51ca99b871ebf85738c82cb1f86eb7de223a44b2","html_url":"https://github.com/apache/bookkeeper/commit/51ca99b871ebf85738c82cb1f86eb7de223a44b2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/51ca99b871ebf85738c82cb1f86eb7de223a44b2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"0e06ddeb7e47bd8794fd378629602e41ea4a1fd9","url":"https://api.github.com/repos/apache/bookkeeper/commits/0e06ddeb7e47bd8794fd378629602e41ea4a1fd9","html_url":"https://github.com/apache/bookkeeper/commit/0e06ddeb7e47bd8794fd378629602e41ea4a1fd9"}]},{"sha":"e60f542937a51dd3bb05b770a989478625c734af","node_id":"MDY6Q29tbWl0MTU3NTk1NjplNjBmNTQyOTM3YTUxZGQzYmIwNWI3NzBhOTg5NDc4NjI1YzczNGFm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-17T08:42:07Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-17T08:42:07Z"},"message":"BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie) (fix wrong entry in CHANGES.txt)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1362408 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"836b6afc8d87e2d09a6c0834da8c65bf4ced1330","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/836b6afc8d87e2d09a6c0834da8c65bf4ced1330"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e60f542937a51dd3bb05b770a989478625c734af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e60f542937a51dd3bb05b770a989478625c734af","html_url":"https://github.com/apache/bookkeeper/commit/e60f542937a51dd3bb05b770a989478625c734af","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e60f542937a51dd3bb05b770a989478625c734af/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"51ca99b871ebf85738c82cb1f86eb7de223a44b2","url":"https://api.github.com/repos/apache/bookkeeper/commits/51ca99b871ebf85738c82cb1f86eb7de223a44b2","html_url":"https://github.com/apache/bookkeeper/commit/51ca99b871ebf85738c82cb1f86eb7de223a44b2"}]},{"sha":"f13b9f4e26fe9b213837d1e68596b55f74163070","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMTNiOWY0ZTI2ZmU5YjIxMzgzN2QxZTY4NTk2YjU1Zjc0MTYzMDcw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-18T15:00:47Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-18T15:00:47Z"},"message":"BOOKKEEPER-2: bookkeeper does not put enough meta-data in to do recovery properly (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1362974 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70f20720ddf11986f21ed001ba5c8e468671e7fb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/70f20720ddf11986f21ed001ba5c8e468671e7fb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f13b9f4e26fe9b213837d1e68596b55f74163070","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f13b9f4e26fe9b213837d1e68596b55f74163070","html_url":"https://github.com/apache/bookkeeper/commit/f13b9f4e26fe9b213837d1e68596b55f74163070","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f13b9f4e26fe9b213837d1e68596b55f74163070/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"e60f542937a51dd3bb05b770a989478625c734af","url":"https://api.github.com/repos/apache/bookkeeper/commits/e60f542937a51dd3bb05b770a989478625c734af","html_url":"https://github.com/apache/bookkeeper/commit/e60f542937a51dd3bb05b770a989478625c734af"}]},{"sha":"df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkZjYxOTMwNmNhNGM2ZGQ5ZWJhOTRjYmM1Y2UxNTllNDNhNWI5ZWU1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-07-23T21:39:13Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-07-23T21:39:13Z"},"message":"BOOKKEEPER-327: System.currentTimeMillis usage in BookKeeper (uma via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1364808 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d409e9d42393257beea7cf5ae24ded13785f67c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2d409e9d42393257beea7cf5ae24ded13785f67c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","html_url":"https://github.com/apache/bookkeeper/commit/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"f13b9f4e26fe9b213837d1e68596b55f74163070","url":"https://api.github.com/repos/apache/bookkeeper/commits/f13b9f4e26fe9b213837d1e68596b55f74163070","html_url":"https://github.com/apache/bookkeeper/commit/f13b9f4e26fe9b213837d1e68596b55f74163070"}]},{"sha":"051320f212b2a6263d2d95db780db62911b9c0f6","node_id":"MDY6Q29tbWl0MTU3NTk1NjowNTEzMjBmMjEyYjJhNjI2M2QyZDk1ZGI3ODBkYjYyOTExYjljMGY2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-26T02:32:50Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-26T02:32:50Z"},"message":"BOOKKEEPER-349: Entry logger should close all the chennels which are there in Map, instead of closing only current channel. (umamaheswararao via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1365869 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8fdffc86b4fc0f9ae4b69104026f51ea65c2a8ba","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8fdffc86b4fc0f9ae4b69104026f51ea65c2a8ba"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/051320f212b2a6263d2d95db780db62911b9c0f6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/051320f212b2a6263d2d95db780db62911b9c0f6","html_url":"https://github.com/apache/bookkeeper/commit/051320f212b2a6263d2d95db780db62911b9c0f6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/051320f212b2a6263d2d95db780db62911b9c0f6/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","url":"https://api.github.com/repos/apache/bookkeeper/commits/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5","html_url":"https://github.com/apache/bookkeeper/commit/df619306ca4c6dd9eba94cbc5ce159e43a5b9ee5"}]},{"sha":"6e33b2519f98f08faa248056e9e017dd8ba8de90","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ZTMzYjI1MTlmOThmMDhmYWEyNDgwNTZlOWUwMTdkZDhiYThkZTkw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-26T03:00:27Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-26T03:00:27Z"},"message":"BOOKKEEPER-317: Exceptions for replication (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1365870 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"da6fc0b6cc1952fd1a804c211e354f365396939e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/da6fc0b6cc1952fd1a804c211e354f365396939e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6e33b2519f98f08faa248056e9e017dd8ba8de90","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6e33b2519f98f08faa248056e9e017dd8ba8de90","html_url":"https://github.com/apache/bookkeeper/commit/6e33b2519f98f08faa248056e9e017dd8ba8de90","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6e33b2519f98f08faa248056e9e017dd8ba8de90/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"051320f212b2a6263d2d95db780db62911b9c0f6","url":"https://api.github.com/repos/apache/bookkeeper/commits/051320f212b2a6263d2d95db780db62911b9c0f6","html_url":"https://github.com/apache/bookkeeper/commit/051320f212b2a6263d2d95db780db62911b9c0f6"}]},{"sha":"3de1c6668a60999230f446011ca27fa7629b4465","node_id":"MDY6Q29tbWl0MTU3NTk1NjozZGUxYzY2NjhhNjA5OTkyMzBmNDQ2MDExY2EyN2ZhNzYyOWI0NDY1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-26T03:22:34Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-26T03:22:34Z"},"message":"BOOKKEEPER-330: System.currentTimeMillis usage in Hedwig (uma via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1365873 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7fbfca62475b36ead89fa1a59ca997c5898c9cfe","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7fbfca62475b36ead89fa1a59ca997c5898c9cfe"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3de1c6668a60999230f446011ca27fa7629b4465","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3de1c6668a60999230f446011ca27fa7629b4465","html_url":"https://github.com/apache/bookkeeper/commit/3de1c6668a60999230f446011ca27fa7629b4465","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3de1c6668a60999230f446011ca27fa7629b4465/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"6e33b2519f98f08faa248056e9e017dd8ba8de90","url":"https://api.github.com/repos/apache/bookkeeper/commits/6e33b2519f98f08faa248056e9e017dd8ba8de90","html_url":"https://github.com/apache/bookkeeper/commit/6e33b2519f98f08faa248056e9e017dd8ba8de90"}]},{"sha":"46a2663a842c6d256c73fba1bd12eb70559c115e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NmEyNjYzYTg0MmM2ZDI1NmM3M2ZiYTFiZDEyZWI3MDU1OWMxMTVl","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-07-27T13:51:22Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-07-27T13:51:22Z"},"message":"BOOKKEEPER-352: Should not use static ServerStats/BKStats instance in TestServerStats/TestBKStats (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1366384 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0cf6b73e13f37d1b3e63d64abeb1533d5c501258","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0cf6b73e13f37d1b3e63d64abeb1533d5c501258"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/46a2663a842c6d256c73fba1bd12eb70559c115e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/46a2663a842c6d256c73fba1bd12eb70559c115e","html_url":"https://github.com/apache/bookkeeper/commit/46a2663a842c6d256c73fba1bd12eb70559c115e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/46a2663a842c6d256c73fba1bd12eb70559c115e/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"3de1c6668a60999230f446011ca27fa7629b4465","url":"https://api.github.com/repos/apache/bookkeeper/commits/3de1c6668a60999230f446011ca27fa7629b4465","html_url":"https://github.com/apache/bookkeeper/commit/3de1c6668a60999230f446011ca27fa7629b4465"}]},{"sha":"0092518bb3e345de2113f29450c9e1557cfc8020","node_id":"MDY6Q29tbWl0MTU3NTk1NjowMDkyNTE4YmIzZTM0NWRlMjExM2YyOTQ1MGM5ZTE1NTdjZmM4MDIw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-30T15:20:55Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-07-30T15:20:55Z"},"message":"BOOKKEEPER-331: Let hedwig support returning message seq id for publish requests. (Mridul via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1367117 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bf209490456c8fb1a14dd6bab236b3f77ae582b1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bf209490456c8fb1a14dd6bab236b3f77ae582b1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0092518bb3e345de2113f29450c9e1557cfc8020","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0092518bb3e345de2113f29450c9e1557cfc8020","html_url":"https://github.com/apache/bookkeeper/commit/0092518bb3e345de2113f29450c9e1557cfc8020","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0092518bb3e345de2113f29450c9e1557cfc8020/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"46a2663a842c6d256c73fba1bd12eb70559c115e","url":"https://api.github.com/repos/apache/bookkeeper/commits/46a2663a842c6d256c73fba1bd12eb70559c115e","html_url":"https://github.com/apache/bookkeeper/commit/46a2663a842c6d256c73fba1bd12eb70559c115e"}]},{"sha":"4088f7ac7b700588a935485b0a9723a36cc995f3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MDg4ZjdhYzdiNzAwNTg4YTkzNTQ4NWIwYTk3MjNhMzZjYzk5NWYz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-03T17:42:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-03T17:42:05Z"},"message":"BOOKKEEPER-343: Failed to register hedwig JMX beans in test cases (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1369115 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f38654cb8618436b8191ac3873a67a9cf0446ffb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f38654cb8618436b8191ac3873a67a9cf0446ffb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4088f7ac7b700588a935485b0a9723a36cc995f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4088f7ac7b700588a935485b0a9723a36cc995f3","html_url":"https://github.com/apache/bookkeeper/commit/4088f7ac7b700588a935485b0a9723a36cc995f3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4088f7ac7b700588a935485b0a9723a36cc995f3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0092518bb3e345de2113f29450c9e1557cfc8020","url":"https://api.github.com/repos/apache/bookkeeper/commits/0092518bb3e345de2113f29450c9e1557cfc8020","html_url":"https://github.com/apache/bookkeeper/commit/0092518bb3e345de2113f29450c9e1557cfc8020"}]},{"sha":"41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MWIzOTljZDJhNGM4NWZhMGIwNzdmMGE3NzQ5ZjVjY2E0ZTljNDIz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T10:10:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T10:10:17Z"},"message":"BOOKKEEPER-339: Let hedwig cpp client support returning message seq id for publish requests. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1369767 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d20bc498920bb7f72428e473e3eab022bfdc0cb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2d20bc498920bb7f72428e473e3eab022bfdc0cb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","html_url":"https://github.com/apache/bookkeeper/commit/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4088f7ac7b700588a935485b0a9723a36cc995f3","url":"https://api.github.com/repos/apache/bookkeeper/commits/4088f7ac7b700588a935485b0a9723a36cc995f3","html_url":"https://github.com/apache/bookkeeper/commit/4088f7ac7b700588a935485b0a9723a36cc995f3"}]},{"sha":"4d9f3d32a063975303f42a7108cbd4892062ab89","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZDlmM2QzMmEwNjM5NzUzMDNmNDJhNzEwOGNiZDQ4OTIwNjJhYjg5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T11:01:36Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T11:01:36Z"},"message":"BOOKKEEPER-259: Create a topic manager using versioned write for leader election (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1369778 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10409eea6826cd38c801bf544ef49be5db9ca295","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/10409eea6826cd38c801bf544ef49be5db9ca295"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4d9f3d32a063975303f42a7108cbd4892062ab89","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4d9f3d32a063975303f42a7108cbd4892062ab89","html_url":"https://github.com/apache/bookkeeper/commit/4d9f3d32a063975303f42a7108cbd4892062ab89","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4d9f3d32a063975303f42a7108cbd4892062ab89/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","url":"https://api.github.com/repos/apache/bookkeeper/commits/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423","html_url":"https://github.com/apache/bookkeeper/commit/41b399cd2a4c85fa0b077f0a7749f5cca4e9c423"}]},{"sha":"5c59fa532fa44a1803e1d986181c58c1b00f0a4c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1YzU5ZmE1MzJmYTQ0YTE4MDNlMWQ5ODYxODFjNThjMWIwMGYwYTRj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T14:17:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-06T14:17:05Z"},"message":"BOOKKEEPER-340: Test backward compatibility for hedwig between different versions. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1369854 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9110017c5174b541683dfd3060656209009beead","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9110017c5174b541683dfd3060656209009beead"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5c59fa532fa44a1803e1d986181c58c1b00f0a4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5c59fa532fa44a1803e1d986181c58c1b00f0a4c","html_url":"https://github.com/apache/bookkeeper/commit/5c59fa532fa44a1803e1d986181c58c1b00f0a4c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5c59fa532fa44a1803e1d986181c58c1b00f0a4c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4d9f3d32a063975303f42a7108cbd4892062ab89","url":"https://api.github.com/repos/apache/bookkeeper/commits/4d9f3d32a063975303f42a7108cbd4892062ab89","html_url":"https://github.com/apache/bookkeeper/commit/4d9f3d32a063975303f42a7108cbd4892062ab89"}]},{"sha":"ec17d0be6a1a655a40ae4e56abff3e121f7d6f20","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYzE3ZDBiZTZhMWE2NTVhNDBhZTRlNTZhYmZmM2UxMjFmN2Q2ZjIw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-09T15:26:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-09T15:26:17Z"},"message":"BOOKKEEPER-191: Hub server should change ledger to write, so consumed messages have chance to be garbage collected. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1371255 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0398779b400c531c9cbb1137a7b94a2885ce2e5d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0398779b400c531c9cbb1137a7b94a2885ce2e5d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ec17d0be6a1a655a40ae4e56abff3e121f7d6f20","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ec17d0be6a1a655a40ae4e56abff3e121f7d6f20","html_url":"https://github.com/apache/bookkeeper/commit/ec17d0be6a1a655a40ae4e56abff3e121f7d6f20","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ec17d0be6a1a655a40ae4e56abff3e121f7d6f20/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"5c59fa532fa44a1803e1d986181c58c1b00f0a4c","url":"https://api.github.com/repos/apache/bookkeeper/commits/5c59fa532fa44a1803e1d986181c58c1b00f0a4c","html_url":"https://github.com/apache/bookkeeper/commit/5c59fa532fa44a1803e1d986181c58c1b00f0a4c"}]},{"sha":"391f9246890b416398e48886fe5ed3c4d2e866ab","node_id":"MDY6Q29tbWl0MTU3NTk1NjozOTFmOTI0Njg5MGI0MTYzOThlNDg4ODZmZTVlZDNjNGQyZTg2NmFi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-13T09:38:00Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-13T09:38:00Z"},"message":"BOOKKEEPER-326: DeadLock during ledger recovery (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1372343 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b88da420311f9414b2e88ae82c414c1c6e30a92a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b88da420311f9414b2e88ae82c414c1c6e30a92a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/391f9246890b416398e48886fe5ed3c4d2e866ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/391f9246890b416398e48886fe5ed3c4d2e866ab","html_url":"https://github.com/apache/bookkeeper/commit/391f9246890b416398e48886fe5ed3c4d2e866ab","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/391f9246890b416398e48886fe5ed3c4d2e866ab/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ec17d0be6a1a655a40ae4e56abff3e121f7d6f20","url":"https://api.github.com/repos/apache/bookkeeper/commits/ec17d0be6a1a655a40ae4e56abff3e121f7d6f20","html_url":"https://github.com/apache/bookkeeper/commit/ec17d0be6a1a655a40ae4e56abff3e121f7d6f20"}]},{"sha":"74e097e0b171871f4f0c067600949376ff98cb5d","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3NGUwOTdlMGIxNzE4NzFmNGYwYzA2NzYwMDk0OTM3NmZmOThjYjVk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-14T09:40:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-14T09:40:34Z"},"message":"BOOKKEEPER-246: Recording of underreplication of ledger entries (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1372808 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"906af0fe13ecbd5b377497b9b16a7d1939589901","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/906af0fe13ecbd5b377497b9b16a7d1939589901"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/74e097e0b171871f4f0c067600949376ff98cb5d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/74e097e0b171871f4f0c067600949376ff98cb5d","html_url":"https://github.com/apache/bookkeeper/commit/74e097e0b171871f4f0c067600949376ff98cb5d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/74e097e0b171871f4f0c067600949376ff98cb5d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"391f9246890b416398e48886fe5ed3c4d2e866ab","url":"https://api.github.com/repos/apache/bookkeeper/commits/391f9246890b416398e48886fe5ed3c4d2e866ab","html_url":"https://github.com/apache/bookkeeper/commit/391f9246890b416398e48886fe5ed3c4d2e866ab"}]},{"sha":"f4daacff80da6802528320f5a920e1989cf20fac","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNGRhYWNmZjgwZGE2ODAyNTI4MzIwZjVhOTIwZTE5ODljZjIwZmFj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T09:58:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T09:58:38Z"},"message":"BOOKKEEPER-338: Create Version.NEW and Version.ANY static instances of Version so that were not passing around nulls (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374189 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"183eb8215d8821140a3574d6474851807dc1433c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/183eb8215d8821140a3574d6474851807dc1433c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f4daacff80da6802528320f5a920e1989cf20fac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f4daacff80da6802528320f5a920e1989cf20fac","html_url":"https://github.com/apache/bookkeeper/commit/f4daacff80da6802528320f5a920e1989cf20fac","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f4daacff80da6802528320f5a920e1989cf20fac/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"74e097e0b171871f4f0c067600949376ff98cb5d","url":"https://api.github.com/repos/apache/bookkeeper/commits/74e097e0b171871f4f0c067600949376ff98cb5d","html_url":"https://github.com/apache/bookkeeper/commit/74e097e0b171871f4f0c067600949376ff98cb5d"}]},{"sha":"fbba5c91318c00d77bd62c211066ae13a14d9d00","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYmJhNWM5MTMxOGMwMGQ3N2JkNjJjMjExMDY2YWUxM2ExNGQ5ZDAw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T10:41:45Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T10:41:45Z"},"message":"BOOKKEEPER-247: Detection of under replication (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374195 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a046d86a5783f309011b0669169d81687f8fd1f5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a046d86a5783f309011b0669169d81687f8fd1f5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fbba5c91318c00d77bd62c211066ae13a14d9d00","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fbba5c91318c00d77bd62c211066ae13a14d9d00","html_url":"https://github.com/apache/bookkeeper/commit/fbba5c91318c00d77bd62c211066ae13a14d9d00","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fbba5c91318c00d77bd62c211066ae13a14d9d00/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f4daacff80da6802528320f5a920e1989cf20fac","url":"https://api.github.com/repos/apache/bookkeeper/commits/f4daacff80da6802528320f5a920e1989cf20fac","html_url":"https://github.com/apache/bookkeeper/commit/f4daacff80da6802528320f5a920e1989cf20fac"}]},{"sha":"bb0888acafee138989dffb1cfee732145c953f38","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYjA4ODhhY2FmZWUxMzg5ODlkZmZiMWNmZWU3MzIxNDVjOTUzZjM4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T13:56:32Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T13:56:32Z"},"message":"BOOKKEEPER-283: Improve Hedwig Console to use Hedwig Metadata Manager. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374265 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5940df2bc5c83a0b214bef5bef9b1e935f60f885","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5940df2bc5c83a0b214bef5bef9b1e935f60f885"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bb0888acafee138989dffb1cfee732145c953f38","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bb0888acafee138989dffb1cfee732145c953f38","html_url":"https://github.com/apache/bookkeeper/commit/bb0888acafee138989dffb1cfee732145c953f38","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bb0888acafee138989dffb1cfee732145c953f38/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"fbba5c91318c00d77bd62c211066ae13a14d9d00","url":"https://api.github.com/repos/apache/bookkeeper/commits/fbba5c91318c00d77bd62c211066ae13a14d9d00","html_url":"https://github.com/apache/bookkeeper/commit/fbba5c91318c00d77bd62c211066ae13a14d9d00"}]},{"sha":"14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxNGUyM2I2ZDljZjQwMTVjZDc2YzdlZDNkNTI1OGJmYmNiYjA1ZWY4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T15:32:23Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T15:32:23Z"},"message":"BOOKKEEPER-332: Add SubscriptionPreferences to record all preferences for a subscription (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374321 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"64ea3e4cee54212c57acdde7dcdc8470240d4832","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/64ea3e4cee54212c57acdde7dcdc8470240d4832"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8","html_url":"https://github.com/apache/bookkeeper/commit/14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"bb0888acafee138989dffb1cfee732145c953f38","url":"https://api.github.com/repos/apache/bookkeeper/commits/bb0888acafee138989dffb1cfee732145c953f38","html_url":"https://github.com/apache/bookkeeper/commit/bb0888acafee138989dffb1cfee732145c953f38"}]},{"sha":"45034f5f4a51225b9f963840741818da7869a85c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NTAzNGY1ZjRhNTEyMjViOWY5NjM4NDA3NDE4MThkYTc4NjlhODVj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T15:41:52Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T15:41:52Z"},"message":"BOOKKEEPER-332: Add SubscriptionPreferences to record all preferences for a subscription (sijie via ivank) [missing files]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374327 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"61104b24a9326f788e674c5fa73f5dd5b1b3a12f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/61104b24a9326f788e674c5fa73f5dd5b1b3a12f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/45034f5f4a51225b9f963840741818da7869a85c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/45034f5f4a51225b9f963840741818da7869a85c","html_url":"https://github.com/apache/bookkeeper/commit/45034f5f4a51225b9f963840741818da7869a85c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/45034f5f4a51225b9f963840741818da7869a85c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8","url":"https://api.github.com/repos/apache/bookkeeper/commits/14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8","html_url":"https://github.com/apache/bookkeeper/commit/14e23b6d9cf4015cd76c7ed3d5258bfbcbb05ef8"}]},{"sha":"be94b88ea61b75246586b6495f8d3710d4c4217a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZTk0Yjg4ZWE2MWI3NTI0NjU4NmI2NDk1ZjhkMzcxMGQ0YzQyMTdh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T16:25:35Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-17T16:25:35Z"},"message":"BOOKKEEPER-372: Check service name in bookie start/stop script. (nijel via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374345 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"031294b6587e49d39ee97fc529f6fe3d648e351d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/031294b6587e49d39ee97fc529f6fe3d648e351d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/be94b88ea61b75246586b6495f8d3710d4c4217a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/be94b88ea61b75246586b6495f8d3710d4c4217a","html_url":"https://github.com/apache/bookkeeper/commit/be94b88ea61b75246586b6495f8d3710d4c4217a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/be94b88ea61b75246586b6495f8d3710d4c4217a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"45034f5f4a51225b9f963840741818da7869a85c","url":"https://api.github.com/repos/apache/bookkeeper/commits/45034f5f4a51225b9f963840741818da7869a85c","html_url":"https://github.com/apache/bookkeeper/commit/45034f5f4a51225b9f963840741818da7869a85c"}]},{"sha":"89e1c0913e70ce4c345c1c82b92ae91fac80b1d2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4OWUxYzA5MTNlNzBjZTRjMzQ1YzFjODJiOTJhZTkxZmFjODBiMWQy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-19T09:39:33Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-19T09:39:33Z"},"message":"BOOKKEEPER-299: Provide LedgerFragmentReplicator which should replicate the fragments found from LedgerChecker (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1374719 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7981f00886bd05e4b4c9e4f96622a2fe0611a1a6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7981f00886bd05e4b4c9e4f96622a2fe0611a1a6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/89e1c0913e70ce4c345c1c82b92ae91fac80b1d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/89e1c0913e70ce4c345c1c82b92ae91fac80b1d2","html_url":"https://github.com/apache/bookkeeper/commit/89e1c0913e70ce4c345c1c82b92ae91fac80b1d2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/89e1c0913e70ce4c345c1c82b92ae91fac80b1d2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"be94b88ea61b75246586b6495f8d3710d4c4217a","url":"https://api.github.com/repos/apache/bookkeeper/commits/be94b88ea61b75246586b6495f8d3710d4c4217a","html_url":"https://github.com/apache/bookkeeper/commit/be94b88ea61b75246586b6495f8d3710d4c4217a"}]},{"sha":"c0746ba1c9569427d5839e3f350f4d8394f01320","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMDc0NmJhMWM5NTY5NDI3ZDU4MzllM2YzNTBmNGQ4Mzk0ZjAxMzIw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-21T09:37:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-21T09:37:59Z"},"message":"BOOKKEEPER-354: [BOOKKEEPER-296] [Documentation] Modify the bookkeeper start script and document the bookkeeper stop command in bookkeeperConfig.xml (Kiran BC via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1375448 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fcf184b2056dec75f34fa604f64f9f77c773ff14","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fcf184b2056dec75f34fa604f64f9f77c773ff14"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c0746ba1c9569427d5839e3f350f4d8394f01320","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c0746ba1c9569427d5839e3f350f4d8394f01320","html_url":"https://github.com/apache/bookkeeper/commit/c0746ba1c9569427d5839e3f350f4d8394f01320","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c0746ba1c9569427d5839e3f350f4d8394f01320/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"89e1c0913e70ce4c345c1c82b92ae91fac80b1d2","url":"https://api.github.com/repos/apache/bookkeeper/commits/89e1c0913e70ce4c345c1c82b92ae91fac80b1d2","html_url":"https://github.com/apache/bookkeeper/commit/89e1c0913e70ce4c345c1c82b92ae91fac80b1d2"}]},{"sha":"b3331cbc528aa32ceb30dcbc676d298beda62df3","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiMzMzMWNiYzUyOGFhMzJjZWIzMGRjYmM2NzZkMjk4YmVkYTYyZGYz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-24T19:51:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-24T19:51:17Z"},"message":"BOOKKEEPER-378: ReplicationWorker may not get ZK watcher notification on UnderReplication ledger lock deletion. (umamaheswararao & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377075 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e4b34dab2dbfa3cfb5631c2c02be2016cbaee453","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e4b34dab2dbfa3cfb5631c2c02be2016cbaee453"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b3331cbc528aa32ceb30dcbc676d298beda62df3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b3331cbc528aa32ceb30dcbc676d298beda62df3","html_url":"https://github.com/apache/bookkeeper/commit/b3331cbc528aa32ceb30dcbc676d298beda62df3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b3331cbc528aa32ceb30dcbc676d298beda62df3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c0746ba1c9569427d5839e3f350f4d8394f01320","url":"https://api.github.com/repos/apache/bookkeeper/commits/c0746ba1c9569427d5839e3f350f4d8394f01320","html_url":"https://github.com/apache/bookkeeper/commit/c0746ba1c9569427d5839e3f350f4d8394f01320"}]},{"sha":"97c76a36d79d1d96314cd7e832d1dfbd1211965d","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5N2M3NmEzNmQ3OWQxZDk2MzE0Y2Q3ZTgzMmQxZGZiZDEyMTE5NjVk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-24T20:44:27Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-24T20:44:27Z"},"message":"BOOKKEEPER-248: Rereplicating of under replicated data (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377100 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6f17250b9b29d8e508979c61493e84a067581279","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6f17250b9b29d8e508979c61493e84a067581279"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/97c76a36d79d1d96314cd7e832d1dfbd1211965d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/97c76a36d79d1d96314cd7e832d1dfbd1211965d","html_url":"https://github.com/apache/bookkeeper/commit/97c76a36d79d1d96314cd7e832d1dfbd1211965d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/97c76a36d79d1d96314cd7e832d1dfbd1211965d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b3331cbc528aa32ceb30dcbc676d298beda62df3","url":"https://api.github.com/repos/apache/bookkeeper/commits/b3331cbc528aa32ceb30dcbc676d298beda62df3","html_url":"https://github.com/apache/bookkeeper/commit/b3331cbc528aa32ceb30dcbc676d298beda62df3"}]},{"sha":"621ace8d93eb322f01416e9a98aac23ac87799e3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2MjFhY2U4ZDkzZWIzMjJmMDE0MTZlOWE5OGFhYzIzYWM4Nzc5OWUz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T10:09:22Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T10:09:22Z"},"message":"BOOKKEEPER-380: ZkLedgerUnderreplicationManager.markLedgerUnderreplicated() is adding duplicate missingReplicas while multiple bk failed for the same ledger (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377630 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5c1da6b1cde689baaa2c5d6c5eaed777f2447a88","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5c1da6b1cde689baaa2c5d6c5eaed777f2447a88"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/621ace8d93eb322f01416e9a98aac23ac87799e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/621ace8d93eb322f01416e9a98aac23ac87799e3","html_url":"https://github.com/apache/bookkeeper/commit/621ace8d93eb322f01416e9a98aac23ac87799e3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/621ace8d93eb322f01416e9a98aac23ac87799e3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"97c76a36d79d1d96314cd7e832d1dfbd1211965d","url":"https://api.github.com/repos/apache/bookkeeper/commits/97c76a36d79d1d96314cd7e832d1dfbd1211965d","html_url":"https://github.com/apache/bookkeeper/commit/97c76a36d79d1d96314cd7e832d1dfbd1211965d"}]},{"sha":"8e9a19f762fa27d297bf1b401c55fdbabdbcdc82","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4ZTlhMTlmNzYyZmEyN2QyOTdiZjFiNDAxYzU1ZmRiYWJkYmNkYzgy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-27T12:43:27Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-27T12:43:27Z"},"message":"BOOKKEEPER-381: ReadLastConfirmedOp's Logger class name is wrong (surendra via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377656 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2fc70675502107675cfd110ab56507a58fb2ed42","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2fc70675502107675cfd110ab56507a58fb2ed42"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8e9a19f762fa27d297bf1b401c55fdbabdbcdc82","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8e9a19f762fa27d297bf1b401c55fdbabdbcdc82","html_url":"https://github.com/apache/bookkeeper/commit/8e9a19f762fa27d297bf1b401c55fdbabdbcdc82","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8e9a19f762fa27d297bf1b401c55fdbabdbcdc82/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"621ace8d93eb322f01416e9a98aac23ac87799e3","url":"https://api.github.com/repos/apache/bookkeeper/commits/621ace8d93eb322f01416e9a98aac23ac87799e3","html_url":"https://github.com/apache/bookkeeper/commit/621ace8d93eb322f01416e9a98aac23ac87799e3"}]},{"sha":"c59b3d2e495e4ab7483b161ab9c2ce59f0c1e013","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjNTliM2QyZTQ5NWU0YWI3NDgzYjE2MWFiOWMyY2U1OWYwYzFlMDEz","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-27T13:15:05Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-27T13:15:05Z"},"message":"BOOKKEEPER-382: space missed at concatenations in GarbageCollectorThread logging (Brahma via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377671 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4d32cc086d81269ece98fc8c343c56a80ead743d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4d32cc086d81269ece98fc8c343c56a80ead743d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c59b3d2e495e4ab7483b161ab9c2ce59f0c1e013","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c59b3d2e495e4ab7483b161ab9c2ce59f0c1e013","html_url":"https://github.com/apache/bookkeeper/commit/c59b3d2e495e4ab7483b161ab9c2ce59f0c1e013","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c59b3d2e495e4ab7483b161ab9c2ce59f0c1e013/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8e9a19f762fa27d297bf1b401c55fdbabdbcdc82","url":"https://api.github.com/repos/apache/bookkeeper/commits/8e9a19f762fa27d297bf1b401c55fdbabdbcdc82","html_url":"https://github.com/apache/bookkeeper/commit/8e9a19f762fa27d297bf1b401c55fdbabdbcdc82"}]},{"sha":"d930b579a1e96757e1698bf91bc1c99ac1cb5f35","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkOTMwYjU3OWExZTk2NzU3ZTE2OThiZjkxYmMxYzk5YWMxY2I1ZjM1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T14:55:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T14:55:17Z"},"message":"BOOKKEEPER-304: Prepare bookie vs ledgers cache and will be used by the Auditor (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377703 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7b5d4441ccbbb880760b97ffca9c7d10f708522","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e7b5d4441ccbbb880760b97ffca9c7d10f708522"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d930b579a1e96757e1698bf91bc1c99ac1cb5f35","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d930b579a1e96757e1698bf91bc1c99ac1cb5f35","html_url":"https://github.com/apache/bookkeeper/commit/d930b579a1e96757e1698bf91bc1c99ac1cb5f35","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d930b579a1e96757e1698bf91bc1c99ac1cb5f35/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c59b3d2e495e4ab7483b161ab9c2ce59f0c1e013","url":"https://api.github.com/repos/apache/bookkeeper/commits/c59b3d2e495e4ab7483b161ab9c2ce59f0c1e013","html_url":"https://github.com/apache/bookkeeper/commit/c59b3d2e495e4ab7483b161ab9c2ce59f0c1e013"}]},{"sha":"6b44bc232811e379463f71a27293c3f31ed398ba","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2YjQ0YmMyMzI4MTFlMzc5NDYzZjcxYTI3MjkzYzNmMzFlZDM5OGJh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T15:43:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T15:43:59Z"},"message":"BOOKKEEPER-272: Provide automatic mechanism to know bookie failures (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377716 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"eebe0a4df730c077e1268569c26ba800ac8ae021","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/eebe0a4df730c077e1268569c26ba800ac8ae021"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6b44bc232811e379463f71a27293c3f31ed398ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6b44bc232811e379463f71a27293c3f31ed398ba","html_url":"https://github.com/apache/bookkeeper/commit/6b44bc232811e379463f71a27293c3f31ed398ba","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6b44bc232811e379463f71a27293c3f31ed398ba/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d930b579a1e96757e1698bf91bc1c99ac1cb5f35","url":"https://api.github.com/repos/apache/bookkeeper/commits/d930b579a1e96757e1698bf91bc1c99ac1cb5f35","html_url":"https://github.com/apache/bookkeeper/commit/d930b579a1e96757e1698bf91bc1c99ac1cb5f35"}]},{"sha":"6379ae858d11bac62a95ccb06675e2bd511f822a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2Mzc5YWU4NThkMTFiYWM2MmE5NWNjYjA2Njc1ZTJiZDUxMWY4MjJh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T17:21:16Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-27T17:21:16Z"},"message":"BOOKKEEPER-333: server-side message filter (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1377756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a9d245a76623807ac38ee524147508e69c732e73","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a9d245a76623807ac38ee524147508e69c732e73"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6379ae858d11bac62a95ccb06675e2bd511f822a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6379ae858d11bac62a95ccb06675e2bd511f822a","html_url":"https://github.com/apache/bookkeeper/commit/6379ae858d11bac62a95ccb06675e2bd511f822a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6379ae858d11bac62a95ccb06675e2bd511f822a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6b44bc232811e379463f71a27293c3f31ed398ba","url":"https://api.github.com/repos/apache/bookkeeper/commits/6b44bc232811e379463f71a27293c3f31ed398ba","html_url":"https://github.com/apache/bookkeeper/commit/6b44bc232811e379463f71a27293c3f31ed398ba"}]},{"sha":"cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjYjg0MTVkNWRlZmIyN2VmZWI4ZmE3YWIxYzkyYTYwZDRmNWMzMWFm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-28T08:51:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-28T08:51:17Z"},"message":"BOOKKEEPER-337: Add entry fails with MetadataVersionException when last ensemble has morethan one bookie failures (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1378023 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9e7e723608ca7387e6323516ec2fafdad7f8e80b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9e7e723608ca7387e6323516ec2fafdad7f8e80b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af","html_url":"https://github.com/apache/bookkeeper/commit/cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6379ae858d11bac62a95ccb06675e2bd511f822a","url":"https://api.github.com/repos/apache/bookkeeper/commits/6379ae858d11bac62a95ccb06675e2bd511f822a","html_url":"https://github.com/apache/bookkeeper/commit/6379ae858d11bac62a95ccb06675e2bd511f822a"}]},{"sha":"06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","node_id":"MDY6Q29tbWl0MTU3NTk1NjowNmY4ZjkzMDc4NmFkNWM3NzFiOGYwNmVjNWQ2ZmU0YWY1YWQzYzg5","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-28T12:25:41Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-28T12:25:41Z"},"message":"BOOKKEEPER-376: LedgerManagers should consider 'underreplication' node as a special Znode (Uma via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1378103 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06f5e7a11bc5ca40d37fd7334f780fa96eb9ec84","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/06f5e7a11bc5ca40d37fd7334f780fa96eb9ec84"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","html_url":"https://github.com/apache/bookkeeper/commit/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af","url":"https://api.github.com/repos/apache/bookkeeper/commits/cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af","html_url":"https://github.com/apache/bookkeeper/commit/cb8415d5defb27efeb8fa7ab1c92a60d4f5c31af"}]},{"sha":"fbfd10fa94d909144c369e1514db31669a16872b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYmZkMTBmYTk0ZDkwOTE0NGMzNjllMTUxNGRiMzE2NjlhMTY4NzJi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-28T12:51:31Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-08-28T12:51:31Z"},"message":"BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1378112 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdc2f1b0faa764c11e763a5a7976060cb711901c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fdc2f1b0faa764c11e763a5a7976060cb711901c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fbfd10fa94d909144c369e1514db31669a16872b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fbfd10fa94d909144c369e1514db31669a16872b","html_url":"https://github.com/apache/bookkeeper/commit/fbfd10fa94d909144c369e1514db31669a16872b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fbfd10fa94d909144c369e1514db31669a16872b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","url":"https://api.github.com/repos/apache/bookkeeper/commits/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89","html_url":"https://github.com/apache/bookkeeper/commit/06f8f930786ad5c771b8f06ec5d6fe4af5ad3c89"}]},{"sha":"9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZmNiN2MwY2RkZWU4Yjc4ZTFjM2FhOGRiNWY3NDc4ZDlhMTMzOTdj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-31T13:25:39Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-08-31T13:25:39Z"},"message":"BOOKKEEPER-384: Clean up LedgerManagerFactory and LedgerManager usage in tests (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1379445 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a30e219df4d027c9819520a93aed8242b1e0cfc4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a30e219df4d027c9819520a93aed8242b1e0cfc4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","html_url":"https://github.com/apache/bookkeeper/commit/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"fbfd10fa94d909144c369e1514db31669a16872b","url":"https://api.github.com/repos/apache/bookkeeper/commits/fbfd10fa94d909144c369e1514db31669a16872b","html_url":"https://github.com/apache/bookkeeper/commit/fbfd10fa94d909144c369e1514db31669a16872b"}]},{"sha":"2ffc123e5ffb37163512a89301a128f07f05750c","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZmZjMTIzZTVmZmIzNzE2MzUxMmE4OTMwMWExMjhmMDdmMDU3NTBj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T15:14:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T15:14:13Z"},"message":"BOOKKEEPER-334: client-side message filter for java client. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1380268 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2e6c55dd307843ed3eb88b3fb60f6b30fa667d67","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2e6c55dd307843ed3eb88b3fb60f6b30fa667d67"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2ffc123e5ffb37163512a89301a128f07f05750c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2ffc123e5ffb37163512a89301a128f07f05750c","html_url":"https://github.com/apache/bookkeeper/commit/2ffc123e5ffb37163512a89301a128f07f05750c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2ffc123e5ffb37163512a89301a128f07f05750c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","url":"https://api.github.com/repos/apache/bookkeeper/commits/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c","html_url":"https://github.com/apache/bookkeeper/commit/9fcb7c0cddee8b78e1c3aa8db5f7478d9a13397c"}]},{"sha":"d169f8843e819e7ef49c1fdfe69a85308f420a4a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMTY5Zjg4NDNlODE5ZTdlZjQ5YzFmZGZlNjlhODUzMDhmNDIwYTRh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T15:27:11Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T15:27:11Z"},"message":"BOOKKEEPER-335: client-side message filter for cpp client. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1380273 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0274ae3f9b18bc8047db93f3adbea6b167c33172","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0274ae3f9b18bc8047db93f3adbea6b167c33172"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d169f8843e819e7ef49c1fdfe69a85308f420a4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d169f8843e819e7ef49c1fdfe69a85308f420a4a","html_url":"https://github.com/apache/bookkeeper/commit/d169f8843e819e7ef49c1fdfe69a85308f420a4a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d169f8843e819e7ef49c1fdfe69a85308f420a4a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2ffc123e5ffb37163512a89301a128f07f05750c","url":"https://api.github.com/repos/apache/bookkeeper/commits/2ffc123e5ffb37163512a89301a128f07f05750c","html_url":"https://github.com/apache/bookkeeper/commit/2ffc123e5ffb37163512a89301a128f07f05750c"}]},{"sha":"504369377af29b6d09a801243ead58805784765a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1MDQzNjkzNzdhZjI5YjZkMDlhODAxMjQzZWFkNTg4MDU3ODQ3NjVh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T16:54:10Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-03T16:54:10Z"},"message":"BOOKKEEPER-385: replicateLedgerFragment should throw Exceptions in error conditions (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1380293 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d315fcd5958a31055df7b61393a6626a41d4ef29","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d315fcd5958a31055df7b61393a6626a41d4ef29"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/504369377af29b6d09a801243ead58805784765a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/504369377af29b6d09a801243ead58805784765a","html_url":"https://github.com/apache/bookkeeper/commit/504369377af29b6d09a801243ead58805784765a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/504369377af29b6d09a801243ead58805784765a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d169f8843e819e7ef49c1fdfe69a85308f420a4a","url":"https://api.github.com/repos/apache/bookkeeper/commits/d169f8843e819e7ef49c1fdfe69a85308f420a4a","html_url":"https://github.com/apache/bookkeeper/commit/d169f8843e819e7ef49c1fdfe69a85308f420a4a"}]},{"sha":"800fe7de43333d14dedb2ab64e08a89a78fa31b2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MDBmZTdkZTQzMzMzZDE0ZGVkYjJhYjY0ZTA4YTg5YTc4ZmEzMWIy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-04T08:39:15Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-04T08:39:15Z"},"message":"BOOKKEEPER-386: It should not be possible to replicate a ledger fragment which is at the end of an open ledger (ivank & umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1380488 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2b53dd68bbbb372e6c68c7e090e4c15c28386044","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2b53dd68bbbb372e6c68c7e090e4c15c28386044"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/800fe7de43333d14dedb2ab64e08a89a78fa31b2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/800fe7de43333d14dedb2ab64e08a89a78fa31b2","html_url":"https://github.com/apache/bookkeeper/commit/800fe7de43333d14dedb2ab64e08a89a78fa31b2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/800fe7de43333d14dedb2ab64e08a89a78fa31b2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"504369377af29b6d09a801243ead58805784765a","url":"https://api.github.com/repos/apache/bookkeeper/commits/504369377af29b6d09a801243ead58805784765a","html_url":"https://github.com/apache/bookkeeper/commit/504369377af29b6d09a801243ead58805784765a"}]},{"sha":"64fa78224ed46189032a616f00e1755fd71d93e2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NGZhNzgyMjRlZDQ2MTg5MDMyYTYxNmYwMGUxNzU1ZmQ3MWQ5M2Uy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T03:12:27Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T03:12:27Z"},"message":"BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1381848 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2453eb773d65d661e31e5e22abcb918b85d7b74d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2453eb773d65d661e31e5e22abcb918b85d7b74d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/64fa78224ed46189032a616f00e1755fd71d93e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/64fa78224ed46189032a616f00e1755fd71d93e2","html_url":"https://github.com/apache/bookkeeper/commit/64fa78224ed46189032a616f00e1755fd71d93e2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/64fa78224ed46189032a616f00e1755fd71d93e2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"800fe7de43333d14dedb2ab64e08a89a78fa31b2","url":"https://api.github.com/repos/apache/bookkeeper/commits/800fe7de43333d14dedb2ab64e08a89a78fa31b2","html_url":"https://github.com/apache/bookkeeper/commit/800fe7de43333d14dedb2ab64e08a89a78fa31b2"}]},{"sha":"0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZWVlOWU1Y2Q0YjViM2FmZmQ5MzBhNzM2YTNjYzJkNjhhOGRhOTc2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T05:04:33Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T05:04:33Z"},"message":"BOOKKEEPER-300: Create Bookie format command (Vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1381870 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"247d71acb4f794d90590293c9898adb16843f447","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/247d71acb4f794d90590293c9898adb16843f447"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","html_url":"https://github.com/apache/bookkeeper/commit/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"64fa78224ed46189032a616f00e1755fd71d93e2","url":"https://api.github.com/repos/apache/bookkeeper/commits/64fa78224ed46189032a616f00e1755fd71d93e2","html_url":"https://github.com/apache/bookkeeper/commit/64fa78224ed46189032a616f00e1755fd71d93e2"}]},{"sha":"3d036b0bf3939b042f4ba01a80b8b81ca6774d1b","node_id":"MDY6Q29tbWl0MTU3NTk1NjozZDAzNmIwYmYzOTM5YjA0MmY0YmEwMWE4MGI4YjgxY2E2Nzc0ZDFi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T05:12:48Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T05:12:48Z"},"message":"BOOKKEEPER-395: HDFS dep transitively depends on a busted pom (Stu Hood via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1381874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5474d3c78e72c7ca49b08d75c872de1804f8116b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5474d3c78e72c7ca49b08d75c872de1804f8116b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3d036b0bf3939b042f4ba01a80b8b81ca6774d1b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3d036b0bf3939b042f4ba01a80b8b81ca6774d1b","html_url":"https://github.com/apache/bookkeeper/commit/3d036b0bf3939b042f4ba01a80b8b81ca6774d1b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3d036b0bf3939b042f4ba01a80b8b81ca6774d1b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","url":"https://api.github.com/repos/apache/bookkeeper/commits/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976","html_url":"https://github.com/apache/bookkeeper/commit/0eee9e5cd4b5b3affd930a736a3cc2d68a8da976"}]},{"sha":"06b50969499330d4a5421b48a042fdee63857d23","node_id":"MDY6Q29tbWl0MTU3NTk1NjowNmI1MDk2OTQ5OTMzMGQ0YTU0MjFiNDhhMDQyZmRlZTYzODU3ZDIz","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T05:26:40Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-07T05:26:40Z"},"message":"BOOKKEEPER-387: BookKeeper Upgrade is not working. (surendra via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1381879 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"efb3ed239dc047ec36d0e38612479d2c569cbd01","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/efb3ed239dc047ec36d0e38612479d2c569cbd01"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/06b50969499330d4a5421b48a042fdee63857d23","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/06b50969499330d4a5421b48a042fdee63857d23","html_url":"https://github.com/apache/bookkeeper/commit/06b50969499330d4a5421b48a042fdee63857d23","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/06b50969499330d4a5421b48a042fdee63857d23/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"3d036b0bf3939b042f4ba01a80b8b81ca6774d1b","url":"https://api.github.com/repos/apache/bookkeeper/commits/3d036b0bf3939b042f4ba01a80b8b81ca6774d1b","html_url":"https://github.com/apache/bookkeeper/commit/3d036b0bf3939b042f4ba01a80b8b81ca6774d1b"}]},{"sha":"6f364a214d2b65f5823af2e5699bbc59dc08a4c9","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ZjM2NGEyMTRkMmI2NWY1ODIzYWYyZTU2OTliYmM1OWRjMDhhNGM5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-07T13:22:18Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-07T13:22:18Z"},"message":"BOOKKEEPER-383: NPE in BookieJournalTest  (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1382016 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0eb217b1dd89aebc98c823d955ae3fdb69afbf67","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0eb217b1dd89aebc98c823d955ae3fdb69afbf67"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6f364a214d2b65f5823af2e5699bbc59dc08a4c9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6f364a214d2b65f5823af2e5699bbc59dc08a4c9","html_url":"https://github.com/apache/bookkeeper/commit/6f364a214d2b65f5823af2e5699bbc59dc08a4c9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6f364a214d2b65f5823af2e5699bbc59dc08a4c9/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"06b50969499330d4a5421b48a042fdee63857d23","url":"https://api.github.com/repos/apache/bookkeeper/commits/06b50969499330d4a5421b48a042fdee63857d23","html_url":"https://github.com/apache/bookkeeper/commit/06b50969499330d4a5421b48a042fdee63857d23"}]},{"sha":"26671da549558c4b16da42f2eabfad65fa223831","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNjY3MWRhNTQ5NTU4YzRiMTZkYTQyZjJlYWJmYWQ2NWZhMjIzODMx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-11T08:30:57Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-11T08:30:57Z"},"message":"BOOKKEEPER-396: Compilation issue in TestClient.java of BenchMark ( showing this in eclipse) (umamahesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1383286 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2a97166fc4cca802266c707f79d1e16cedb65338","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2a97166fc4cca802266c707f79d1e16cedb65338"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/26671da549558c4b16da42f2eabfad65fa223831","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/26671da549558c4b16da42f2eabfad65fa223831","html_url":"https://github.com/apache/bookkeeper/commit/26671da549558c4b16da42f2eabfad65fa223831","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/26671da549558c4b16da42f2eabfad65fa223831/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"6f364a214d2b65f5823af2e5699bbc59dc08a4c9","url":"https://api.github.com/repos/apache/bookkeeper/commits/6f364a214d2b65f5823af2e5699bbc59dc08a4c9","html_url":"https://github.com/apache/bookkeeper/commit/6f364a214d2b65f5823af2e5699bbc59dc08a4c9"}]},{"sha":"e353a8f93ad48d8785bbaa7162a8a9ebca40a15f","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMzUzYThmOTNhZDQ4ZDg3ODViYmFhNzE2MmE4YTllYmNhNDBhMTVm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-12T09:59:50Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-12T09:59:50Z"},"message":"BOOKKEEPER-208: Separate write quorum from ack quorum (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1383872 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d9e10280816286493d14ff84f5a4efa9ef0b1adc","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d9e10280816286493d14ff84f5a4efa9ef0b1adc"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e353a8f93ad48d8785bbaa7162a8a9ebca40a15f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e353a8f93ad48d8785bbaa7162a8a9ebca40a15f","html_url":"https://github.com/apache/bookkeeper/commit/e353a8f93ad48d8785bbaa7162a8a9ebca40a15f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e353a8f93ad48d8785bbaa7162a8a9ebca40a15f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"26671da549558c4b16da42f2eabfad65fa223831","url":"https://api.github.com/repos/apache/bookkeeper/commits/26671da549558c4b16da42f2eabfad65fa223831","html_url":"https://github.com/apache/bookkeeper/commit/26671da549558c4b16da42f2eabfad65fa223831"}]},{"sha":"420a6e5e6cab583929622d190d2cd3b360cbd102","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MjBhNmU1ZTZjYWI1ODM5Mjk2MjJkMTkwZDJjZDNiMzYwY2JkMTAy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-12T18:34:11Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-12T18:34:11Z"},"message":"BOOKKEEPER-325: Delay the replication of a ledger if RW found that its last fragment is in underReplication. (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1384080 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"9361df08800945b4c9e0ef8c7b9c339103cf467e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/9361df08800945b4c9e0ef8c7b9c339103cf467e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/420a6e5e6cab583929622d190d2cd3b360cbd102","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/420a6e5e6cab583929622d190d2cd3b360cbd102","html_url":"https://github.com/apache/bookkeeper/commit/420a6e5e6cab583929622d190d2cd3b360cbd102","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/420a6e5e6cab583929622d190d2cd3b360cbd102/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e353a8f93ad48d8785bbaa7162a8a9ebca40a15f","url":"https://api.github.com/repos/apache/bookkeeper/commits/e353a8f93ad48d8785bbaa7162a8a9ebca40a15f","html_url":"https://github.com/apache/bookkeeper/commit/e353a8f93ad48d8785bbaa7162a8a9ebca40a15f"}]},{"sha":"6bffc3245ae3c2f9a671a0549f394c192460217f","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2YmZmYzMyNDVhZTNjMmY5YTY3MWEwNTQ5ZjM5NGMxOTI0NjAyMTdm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-13T13:52:24Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-13T13:52:24Z"},"message":" BOOKKEEPER-392: Racey ConcurrentMap usage in java hedwig-client (Stu Hood via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1384336 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cddfb7a9d333aac4bd06753cd9cc3a7842516b6b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cddfb7a9d333aac4bd06753cd9cc3a7842516b6b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6bffc3245ae3c2f9a671a0549f394c192460217f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6bffc3245ae3c2f9a671a0549f394c192460217f","html_url":"https://github.com/apache/bookkeeper/commit/6bffc3245ae3c2f9a671a0549f394c192460217f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6bffc3245ae3c2f9a671a0549f394c192460217f/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"420a6e5e6cab583929622d190d2cd3b360cbd102","url":"https://api.github.com/repos/apache/bookkeeper/commits/420a6e5e6cab583929622d190d2cd3b360cbd102","html_url":"https://github.com/apache/bookkeeper/commit/420a6e5e6cab583929622d190d2cd3b360cbd102"}]},{"sha":"4f2b11213baf8551ef778599b14a6fc17d95f21d","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZjJiMTEyMTNiYWY4NTUxZWY3Nzg1OTliMTRhNmZjMTdkOTVmMjFk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-14T09:53:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-14T09:53:13Z"},"message":"BOOKKEEPER-403: ReReadMetadataCb is not executed in the thread responsible for that ledger (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1384700 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0869e23c83976a1c79fa993415a8aa3d06c4fbaf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0869e23c83976a1c79fa993415a8aa3d06c4fbaf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4f2b11213baf8551ef778599b14a6fc17d95f21d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4f2b11213baf8551ef778599b14a6fc17d95f21d","html_url":"https://github.com/apache/bookkeeper/commit/4f2b11213baf8551ef778599b14a6fc17d95f21d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4f2b11213baf8551ef778599b14a6fc17d95f21d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6bffc3245ae3c2f9a671a0549f394c192460217f","url":"https://api.github.com/repos/apache/bookkeeper/commits/6bffc3245ae3c2f9a671a0549f394c192460217f","html_url":"https://github.com/apache/bookkeeper/commit/6bffc3245ae3c2f9a671a0549f394c192460217f"}]},{"sha":"ec977dbe1e7bfb56dc93b6ba72d11f0468345668","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYzk3N2RiZTFlN2JmYjU2ZGM5M2I2YmE3MmQxMWYwNDY4MzQ1NjY4","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-14T13:42:11Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-14T13:42:11Z"},"message":"BOOKKEEPER-32: Clean up LOG.debug statements (Stu Hood via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1384782 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2d822e090dd5fcf8a310d3cca57c46a0c1abb4a7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2d822e090dd5fcf8a310d3cca57c46a0c1abb4a7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ec977dbe1e7bfb56dc93b6ba72d11f0468345668","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ec977dbe1e7bfb56dc93b6ba72d11f0468345668","html_url":"https://github.com/apache/bookkeeper/commit/ec977dbe1e7bfb56dc93b6ba72d11f0468345668","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ec977dbe1e7bfb56dc93b6ba72d11f0468345668/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4f2b11213baf8551ef778599b14a6fc17d95f21d","url":"https://api.github.com/repos/apache/bookkeeper/commits/4f2b11213baf8551ef778599b14a6fc17d95f21d","html_url":"https://github.com/apache/bookkeeper/commit/4f2b11213baf8551ef778599b14a6fc17d95f21d"}]},{"sha":"820ce5949c6a32ddca32ce7b408a57e27f5086bb","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MjBjZTU5NDljNmEzMmRkY2EzMmNlN2I0MDhhNTdlMjdmNTA4NmJi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-14T16:16:17Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-14T16:16:17Z"},"message":"BOOKKEEPER-252: Hedwig: provide a subscription mode to kill other subscription channel when hedwig client is used as a proxy-style server. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1384836 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"06107c92c60873caf9fb179421ca37e2272e1262","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/06107c92c60873caf9fb179421ca37e2272e1262"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/820ce5949c6a32ddca32ce7b408a57e27f5086bb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/820ce5949c6a32ddca32ce7b408a57e27f5086bb","html_url":"https://github.com/apache/bookkeeper/commit/820ce5949c6a32ddca32ce7b408a57e27f5086bb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/820ce5949c6a32ddca32ce7b408a57e27f5086bb/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ec977dbe1e7bfb56dc93b6ba72d11f0468345668","url":"https://api.github.com/repos/apache/bookkeeper/commits/ec977dbe1e7bfb56dc93b6ba72d11f0468345668","html_url":"https://github.com/apache/bookkeeper/commit/ec977dbe1e7bfb56dc93b6ba72d11f0468345668"}]},{"sha":"53d3fbf26af00ccc25605fb80bbd73c09c3d90f0","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1M2QzZmJmMjZhZjAwY2NjMjU2MDVmYjgwYmJkNzNjMDljM2Q5MGYw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-19T11:03:27Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-19T11:03:27Z"},"message":"BOOKKEEPER-405: Let's add Thread name for ReplicationWorker thread. (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1387525 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6e13e265fab74e1338333304f2ad7e291bd2c91","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e6e13e265fab74e1338333304f2ad7e291bd2c91"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/53d3fbf26af00ccc25605fb80bbd73c09c3d90f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/53d3fbf26af00ccc25605fb80bbd73c09c3d90f0","html_url":"https://github.com/apache/bookkeeper/commit/53d3fbf26af00ccc25605fb80bbd73c09c3d90f0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/53d3fbf26af00ccc25605fb80bbd73c09c3d90f0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"820ce5949c6a32ddca32ce7b408a57e27f5086bb","url":"https://api.github.com/repos/apache/bookkeeper/commits/820ce5949c6a32ddca32ce7b408a57e27f5086bb","html_url":"https://github.com/apache/bookkeeper/commit/820ce5949c6a32ddca32ce7b408a57e27f5086bb"}]},{"sha":"00341197badcc1646b8d3fb4ec87ac526ed93b85","node_id":"MDY6Q29tbWl0MTU3NTk1NjowMDM0MTE5N2JhZGNjMTY0NmI4ZDNmYjRlYzg3YWM1MjZlZDkzYjg1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-21T15:45:41Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-21T15:45:41Z"},"message":"BOOKKEEPER-388: Document bookie format command (vinayrpet via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1388557 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"32bd2513efe727ea5d2230e1e8eb1c334b5a760d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/32bd2513efe727ea5d2230e1e8eb1c334b5a760d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/00341197badcc1646b8d3fb4ec87ac526ed93b85","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/00341197badcc1646b8d3fb4ec87ac526ed93b85","html_url":"https://github.com/apache/bookkeeper/commit/00341197badcc1646b8d3fb4ec87ac526ed93b85","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/00341197badcc1646b8d3fb4ec87ac526ed93b85/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"53d3fbf26af00ccc25605fb80bbd73c09c3d90f0","url":"https://api.github.com/repos/apache/bookkeeper/commits/53d3fbf26af00ccc25605fb80bbd73c09c3d90f0","html_url":"https://github.com/apache/bookkeeper/commit/53d3fbf26af00ccc25605fb80bbd73c09c3d90f0"}]},{"sha":"cf414cc06ad85d9222de710152cb81bd60943aa5","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZjQxNGNjMDZhZDg1ZDkyMjJkZTcxMDE1MmNiODFiZDYwOTQzYWE1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-21T15:47:07Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-21T15:47:07Z"},"message":"BOOKKEEPER-388: Document bookie format command (kiran_bc via ivank) [Corrected CHANGES.txt]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1388558 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f02204342fb9eb9b02ca2c3916cd6f88431528e7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f02204342fb9eb9b02ca2c3916cd6f88431528e7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cf414cc06ad85d9222de710152cb81bd60943aa5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cf414cc06ad85d9222de710152cb81bd60943aa5","html_url":"https://github.com/apache/bookkeeper/commit/cf414cc06ad85d9222de710152cb81bd60943aa5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cf414cc06ad85d9222de710152cb81bd60943aa5/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"00341197badcc1646b8d3fb4ec87ac526ed93b85","url":"https://api.github.com/repos/apache/bookkeeper/commits/00341197badcc1646b8d3fb4ec87ac526ed93b85","html_url":"https://github.com/apache/bookkeeper/commit/00341197badcc1646b8d3fb4ec87ac526ed93b85"}]},{"sha":"881cda5c85d17f952bdc2c7e101eef669bce35d2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4ODFjZGE1Yzg1ZDE3Zjk1MmJkYzJjN2UxMDFlZWY2NjliY2UzNWQy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-26T11:04:08Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-09-26T11:04:08Z"},"message":"BOOKKEEPER-397: Make the hedwig client in RegionManager configurable. (Aniruddha via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1390401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7b348d79b9a82af02ca69bab24ff4acc1e4fa747","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7b348d79b9a82af02ca69bab24ff4acc1e4fa747"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/881cda5c85d17f952bdc2c7e101eef669bce35d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/881cda5c85d17f952bdc2c7e101eef669bce35d2","html_url":"https://github.com/apache/bookkeeper/commit/881cda5c85d17f952bdc2c7e101eef669bce35d2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/881cda5c85d17f952bdc2c7e101eef669bce35d2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"cf414cc06ad85d9222de710152cb81bd60943aa5","url":"https://api.github.com/repos/apache/bookkeeper/commits/cf414cc06ad85d9222de710152cb81bd60943aa5","html_url":"https://github.com/apache/bookkeeper/commit/cf414cc06ad85d9222de710152cb81bd60943aa5"}]},{"sha":"eba338eb398f8a22987c6bd8352bf2d649fb7c33","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYmEzMzhlYjM5OGY4YTIyOTg3YzZiZDgzNTJiZjJkNjQ5ZmI3YzMz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-26T23:52:18Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-09-26T23:52:18Z"},"message":"BOOKKEEPER-364: re-factor hedwig java client to support both one-subscription-per-channel and multiplex-subscriptions-per-channel. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1390777 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c402096885886729d6136c3e32da92def36bca3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0c402096885886729d6136c3e32da92def36bca3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/eba338eb398f8a22987c6bd8352bf2d649fb7c33","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/eba338eb398f8a22987c6bd8352bf2d649fb7c33","html_url":"https://github.com/apache/bookkeeper/commit/eba338eb398f8a22987c6bd8352bf2d649fb7c33","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/eba338eb398f8a22987c6bd8352bf2d649fb7c33/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"881cda5c85d17f952bdc2c7e101eef669bce35d2","url":"https://api.github.com/repos/apache/bookkeeper/commits/881cda5c85d17f952bdc2c7e101eef669bce35d2","html_url":"https://github.com/apache/bookkeeper/commit/881cda5c85d17f952bdc2c7e101eef669bce35d2"}]},{"sha":"853ac6bf0107a8b80e44328ce825a8e710ee8986","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4NTNhYzZiZjAxMDdhOGI4MGU0NDMyOGNlODI1YThlNzEwZWU4OTg2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-01T13:36:31Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-01T13:36:31Z"},"message":"BOOKKEEPER-143: Add SSL support for hedwig cpp client (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1392319 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dee55a8fa8a6ea5a49a15c65487be760c67eece5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dee55a8fa8a6ea5a49a15c65487be760c67eece5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/853ac6bf0107a8b80e44328ce825a8e710ee8986","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/853ac6bf0107a8b80e44328ce825a8e710ee8986","html_url":"https://github.com/apache/bookkeeper/commit/853ac6bf0107a8b80e44328ce825a8e710ee8986","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/853ac6bf0107a8b80e44328ce825a8e710ee8986/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"eba338eb398f8a22987c6bd8352bf2d649fb7c33","url":"https://api.github.com/repos/apache/bookkeeper/commits/eba338eb398f8a22987c6bd8352bf2d649fb7c33","html_url":"https://github.com/apache/bookkeeper/commit/eba338eb398f8a22987c6bd8352bf2d649fb7c33"}]},{"sha":"24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNGZiMGJjYTBkYmRkMmFkMTRjNWFmY2Q3ZmIyZmMzMWY4MDg4MmY1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T10:40:29Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T10:40:29Z"},"message":"BOOKKEEPER-278: Ability to disable auto recovery temporarily (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1393983 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"53028b4e8936e438b1c6573759928b71886bacbe","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/53028b4e8936e438b1c6573759928b71886bacbe"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5","html_url":"https://github.com/apache/bookkeeper/commit/24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"853ac6bf0107a8b80e44328ce825a8e710ee8986","url":"https://api.github.com/repos/apache/bookkeeper/commits/853ac6bf0107a8b80e44328ce825a8e710ee8986","html_url":"https://github.com/apache/bookkeeper/commit/853ac6bf0107a8b80e44328ce825a8e710ee8986"}]},{"sha":"f57cbe507d0f366fa76e0e163e867e4a7f93d958","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNTdjYmU1MDdkMGYzNjZmYTc2ZTBlMTYzZTg2N2U0YTdmOTNkOTU4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T13:30:31Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T13:30:31Z"},"message":"BOOKKEEPER-367: Server-Side Message Delivery Flow Control (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1394066 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8820f8f6c53fdcd57f187314058d202d2b9e3ea3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8820f8f6c53fdcd57f187314058d202d2b9e3ea3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f57cbe507d0f366fa76e0e163e867e4a7f93d958","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f57cbe507d0f366fa76e0e163e867e4a7f93d958","html_url":"https://github.com/apache/bookkeeper/commit/f57cbe507d0f366fa76e0e163e867e4a7f93d958","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f57cbe507d0f366fa76e0e163e867e4a7f93d958/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5","url":"https://api.github.com/repos/apache/bookkeeper/commits/24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5","html_url":"https://github.com/apache/bookkeeper/commit/24fb0bca0dbdd2ad14c5afcd7fb2fc31f80882f5"}]},{"sha":"ba01aed276fc847926310376520d3ec513503c61","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYTAxYWVkMjc2ZmM4NDc5MjYzMTAzNzY1MjBkM2VjNTEzNTAzYzYx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T16:31:09Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-04T16:31:09Z"},"message":"BOOKKEEPER-319: Manage auditing and replication processes (Vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1394145 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a5c171f708b96ee07ebbd07adf97e54fc0aa70d8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a5c171f708b96ee07ebbd07adf97e54fc0aa70d8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ba01aed276fc847926310376520d3ec513503c61","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ba01aed276fc847926310376520d3ec513503c61","html_url":"https://github.com/apache/bookkeeper/commit/ba01aed276fc847926310376520d3ec513503c61","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ba01aed276fc847926310376520d3ec513503c61/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f57cbe507d0f366fa76e0e163e867e4a7f93d958","url":"https://api.github.com/repos/apache/bookkeeper/commits/f57cbe507d0f366fa76e0e163e867e4a7f93d958","html_url":"https://github.com/apache/bookkeeper/commit/f57cbe507d0f366fa76e0e163e867e4a7f93d958"}]},{"sha":"e2487b794ef8d93a1d1380a62ffa212381930393","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMjQ4N2I3OTRlZjhkOTNhMWQxMzgwYTYyZmZhMjEyMzgxOTMwMzkz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-05T14:24:42Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-05T14:24:42Z"},"message":"BOOKKEEPER-315: Ledger entries should be replicated sequentially instead of parallel. (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1394542 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63df30f445fcd49b34343d4eb51512b99704a167","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/63df30f445fcd49b34343d4eb51512b99704a167"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e2487b794ef8d93a1d1380a62ffa212381930393","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e2487b794ef8d93a1d1380a62ffa212381930393","html_url":"https://github.com/apache/bookkeeper/commit/e2487b794ef8d93a1d1380a62ffa212381930393","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e2487b794ef8d93a1d1380a62ffa212381930393/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba01aed276fc847926310376520d3ec513503c61","url":"https://api.github.com/repos/apache/bookkeeper/commits/ba01aed276fc847926310376520d3ec513503c61","html_url":"https://github.com/apache/bookkeeper/commit/ba01aed276fc847926310376520d3ec513503c61"}]},{"sha":"c4519d96d592967aaad1d056db3d31cbe56de865","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjNDUxOWQ5NmQ1OTI5NjdhYWFkMWQwNTZkYjNkMzFjYmU1NmRlODY1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-10-10T09:45:29Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-10-10T09:45:29Z"},"message":"BOOKKEEPER-415: Rename DeliveryThrottle to MessageWindowSize (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1396524 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1b25bb826f9b44dc90f0cbba23d480e49a2cda51","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1b25bb826f9b44dc90f0cbba23d480e49a2cda51"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c4519d96d592967aaad1d056db3d31cbe56de865","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c4519d96d592967aaad1d056db3d31cbe56de865","html_url":"https://github.com/apache/bookkeeper/commit/c4519d96d592967aaad1d056db3d31cbe56de865","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c4519d96d592967aaad1d056db3d31cbe56de865/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"e2487b794ef8d93a1d1380a62ffa212381930393","url":"https://api.github.com/repos/apache/bookkeeper/commits/e2487b794ef8d93a1d1380a62ffa212381930393","html_url":"https://github.com/apache/bookkeeper/commit/e2487b794ef8d93a1d1380a62ffa212381930393"}]},{"sha":"ce0e7b2077d495ca9f4192da1154f565cb9def5b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZTBlN2IyMDc3ZDQ5NWNhOWY0MTkyZGExMTU0ZjU2NWNiOWRlZjVi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-10-10T10:09:18Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-10-10T10:09:18Z"},"message":"BOOKKEEPER-413: Hedwig C++ client: Rename RUN_AS_SSL_MODE to SSL_ENABLED (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1396531 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d63ba198a32d9da9768a601e7bc1a9f9290f61c9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d63ba198a32d9da9768a601e7bc1a9f9290f61c9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ce0e7b2077d495ca9f4192da1154f565cb9def5b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ce0e7b2077d495ca9f4192da1154f565cb9def5b","html_url":"https://github.com/apache/bookkeeper/commit/ce0e7b2077d495ca9f4192da1154f565cb9def5b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ce0e7b2077d495ca9f4192da1154f565cb9def5b/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"c4519d96d592967aaad1d056db3d31cbe56de865","url":"https://api.github.com/repos/apache/bookkeeper/commits/c4519d96d592967aaad1d056db3d31cbe56de865","html_url":"https://github.com/apache/bookkeeper/commit/c4519d96d592967aaad1d056db3d31cbe56de865"}]},{"sha":"de64ff31f01e2a6e7889bae8d75681d2176f21bc","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkZTY0ZmYzMWYwMWUyYTZlNzg4OWJhZThkNzU2ODFkMjE3NmYyMWJj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-10T10:29:03Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-10T10:29:03Z"},"message":"BOOKKEEPER-418: Store hostname of locker in replication lock (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1396536 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"38c0e900d3bc51ea4f8c030c4bc57b081be7643f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/38c0e900d3bc51ea4f8c030c4bc57b081be7643f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/de64ff31f01e2a6e7889bae8d75681d2176f21bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/de64ff31f01e2a6e7889bae8d75681d2176f21bc","html_url":"https://github.com/apache/bookkeeper/commit/de64ff31f01e2a6e7889bae8d75681d2176f21bc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/de64ff31f01e2a6e7889bae8d75681d2176f21bc/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ce0e7b2077d495ca9f4192da1154f565cb9def5b","url":"https://api.github.com/repos/apache/bookkeeper/commits/ce0e7b2077d495ca9f4192da1154f565cb9def5b","html_url":"https://github.com/apache/bookkeeper/commit/ce0e7b2077d495ca9f4192da1154f565cb9def5b"}]},{"sha":"bf3d55f0cbd3461626148ad436a78923047dd797","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZjNkNTVmMGNiZDM0NjE2MjYxNDhhZDQzNmE3ODkyMzA0N2RkNzk3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-16T15:01:08Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-16T15:01:08Z"},"message":"BOOKKEEPER-417: Hierarchical zk underreplication manager should clean up its hierarchy when done to allow for fast acquisition of underreplicated entries (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1398834 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0a6c014dffadcd33907ee035a586751311bd846c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0a6c014dffadcd33907ee035a586751311bd846c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bf3d55f0cbd3461626148ad436a78923047dd797","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bf3d55f0cbd3461626148ad436a78923047dd797","html_url":"https://github.com/apache/bookkeeper/commit/bf3d55f0cbd3461626148ad436a78923047dd797","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bf3d55f0cbd3461626148ad436a78923047dd797/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"de64ff31f01e2a6e7889bae8d75681d2176f21bc","url":"https://api.github.com/repos/apache/bookkeeper/commits/de64ff31f01e2a6e7889bae8d75681d2176f21bc","html_url":"https://github.com/apache/bookkeeper/commit/de64ff31f01e2a6e7889bae8d75681d2176f21bc"}]},{"sha":"2385d7a7054dd7e4c3241374b1f5f57360a5a468","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyMzg1ZDdhNzA1NGRkN2U0YzMyNDEzNzRiMWY1ZjU3MzYwYTVhNDY4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-16T21:20:26Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-16T21:20:26Z"},"message":"BOOKKEEPER-436: Journal#rollLog may leak file handler (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1398995 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6edaa7ac420242d083d311ae821babc505b1695a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6edaa7ac420242d083d311ae821babc505b1695a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2385d7a7054dd7e4c3241374b1f5f57360a5a468","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2385d7a7054dd7e4c3241374b1f5f57360a5a468","html_url":"https://github.com/apache/bookkeeper/commit/2385d7a7054dd7e4c3241374b1f5f57360a5a468","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2385d7a7054dd7e4c3241374b1f5f57360a5a468/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf3d55f0cbd3461626148ad436a78923047dd797","url":"https://api.github.com/repos/apache/bookkeeper/commits/bf3d55f0cbd3461626148ad436a78923047dd797","html_url":"https://github.com/apache/bookkeeper/commit/bf3d55f0cbd3461626148ad436a78923047dd797"}]},{"sha":"cb059545270e4517c90d2b52000ea06404307f16","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjYjA1OTU0NTI3MGU0NTE3YzkwZDJiNTIwMDBlYTA2NDA0MzA3ZjE2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-10-17T09:19:49Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-10-17T09:19:49Z"},"message":"BOOKKEEPER-422: Simplify AbstractSubscriptionManager (stu via fpj)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1399159 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"96336ff9480da55dd6f4be7f34348db522e7aae1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/96336ff9480da55dd6f4be7f34348db522e7aae1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cb059545270e4517c90d2b52000ea06404307f16","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cb059545270e4517c90d2b52000ea06404307f16","html_url":"https://github.com/apache/bookkeeper/commit/cb059545270e4517c90d2b52000ea06404307f16","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cb059545270e4517c90d2b52000ea06404307f16/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"2385d7a7054dd7e4c3241374b1f5f57360a5a468","url":"https://api.github.com/repos/apache/bookkeeper/commits/2385d7a7054dd7e4c3241374b1f5f57360a5a468","html_url":"https://github.com/apache/bookkeeper/commit/2385d7a7054dd7e4c3241374b1f5f57360a5a468"}]},{"sha":"5f9f6ef0719a19e48815e8b021da43e8ad15f6f7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1ZjlmNmVmMDcxOWExOWU0ODgxNWU4YjAyMWRhNDNlOGFkMTVmNmY3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-18T10:59:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-18T10:59:34Z"},"message":"BOOKKEEPER-369: re-factor hedwig cpp client to provide better interface to support both one-subscription-per-channel and multiple-subscriptions-per-channel. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1399578 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b6f8e7a452ea1bdd1088f3c3f6722e3fd8e48740","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b6f8e7a452ea1bdd1088f3c3f6722e3fd8e48740"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5f9f6ef0719a19e48815e8b021da43e8ad15f6f7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5f9f6ef0719a19e48815e8b021da43e8ad15f6f7","html_url":"https://github.com/apache/bookkeeper/commit/5f9f6ef0719a19e48815e8b021da43e8ad15f6f7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5f9f6ef0719a19e48815e8b021da43e8ad15f6f7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"cb059545270e4517c90d2b52000ea06404307f16","url":"https://api.github.com/repos/apache/bookkeeper/commits/cb059545270e4517c90d2b52000ea06404307f16","html_url":"https://github.com/apache/bookkeeper/commit/cb059545270e4517c90d2b52000ea06404307f16"}]},{"sha":"794d8c6a363433bc129deeb5568e83ac716379e6","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3OTRkOGM2YTM2MzQzM2JjMTI5ZGVlYjU1NjhlODNhYzcxNjM3OWU2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-18T14:40:30Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-18T14:40:30Z"},"message":"BOOKKEEPER-345: Detect IOExceptions on entrylogger and bookie should consider next ledger dir(if any) (Vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1399680 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"05cb149cc5a08328ac9f9fa259012d5cbd56c8fe","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/05cb149cc5a08328ac9f9fa259012d5cbd56c8fe"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/794d8c6a363433bc129deeb5568e83ac716379e6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/794d8c6a363433bc129deeb5568e83ac716379e6","html_url":"https://github.com/apache/bookkeeper/commit/794d8c6a363433bc129deeb5568e83ac716379e6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/794d8c6a363433bc129deeb5568e83ac716379e6/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"5f9f6ef0719a19e48815e8b021da43e8ad15f6f7","url":"https://api.github.com/repos/apache/bookkeeper/commits/5f9f6ef0719a19e48815e8b021da43e8ad15f6f7","html_url":"https://github.com/apache/bookkeeper/commit/5f9f6ef0719a19e48815e8b021da43e8ad15f6f7"}]},{"sha":"81aa20165c13aab333f9f0fd6b4e948de2ba1cef","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MWFhMjAxNjVjMTNhYWIzMzNmOWYwZmQ2YjRlOTQ4ZGUyYmExY2Vm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-22T10:10:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-22T10:10:38Z"},"message":"BOOKKEEPER-435: Create SubscriptionChannelManager to manage all subscription channel (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1400827 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b1ef6b7531fff6037d0047449543dc23d4b8f30d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b1ef6b7531fff6037d0047449543dc23d4b8f30d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/81aa20165c13aab333f9f0fd6b4e948de2ba1cef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/81aa20165c13aab333f9f0fd6b4e948de2ba1cef","html_url":"https://github.com/apache/bookkeeper/commit/81aa20165c13aab333f9f0fd6b4e948de2ba1cef","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/81aa20165c13aab333f9f0fd6b4e948de2ba1cef/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"794d8c6a363433bc129deeb5568e83ac716379e6","url":"https://api.github.com/repos/apache/bookkeeper/commits/794d8c6a363433bc129deeb5568e83ac716379e6","html_url":"https://github.com/apache/bookkeeper/commit/794d8c6a363433bc129deeb5568e83ac716379e6"}]},{"sha":"d0807e31f6d531cee5898bea3c2af3e312dbe61b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMDgwN2UzMWY2ZDUzMWNlZTU4OThiZWEzYzJhZjNlMzEyZGJlNjFi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-22T11:04:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-22T11:04:47Z"},"message":"BOOKKEEPER-411: Add CloseSubscription Request for multiplexing support (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1400836 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0324dd3e9941f249fbb131821403b2787bf120ed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0324dd3e9941f249fbb131821403b2787bf120ed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d0807e31f6d531cee5898bea3c2af3e312dbe61b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d0807e31f6d531cee5898bea3c2af3e312dbe61b","html_url":"https://github.com/apache/bookkeeper/commit/d0807e31f6d531cee5898bea3c2af3e312dbe61b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d0807e31f6d531cee5898bea3c2af3e312dbe61b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"81aa20165c13aab333f9f0fd6b4e948de2ba1cef","url":"https://api.github.com/repos/apache/bookkeeper/commits/81aa20165c13aab333f9f0fd6b4e948de2ba1cef","html_url":"https://github.com/apache/bookkeeper/commit/81aa20165c13aab333f9f0fd6b4e948de2ba1cef"}]},{"sha":"db1484669db7076d71b0ad890f8867e86a18229f","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkYjE0ODQ2NjlkYjcwNzZkNzFiMGFkODkwZjg4NjdlODZhMTgyMjlm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-23T13:22:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-23T13:22:43Z"},"message":"BOOKKEEPER-427: TestConcurrentTopicAcquisition hangs every so often (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1401286 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"74a73a9d7f3c61aeaad0b5dea51ecbb6ed997424","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/74a73a9d7f3c61aeaad0b5dea51ecbb6ed997424"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/db1484669db7076d71b0ad890f8867e86a18229f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/db1484669db7076d71b0ad890f8867e86a18229f","html_url":"https://github.com/apache/bookkeeper/commit/db1484669db7076d71b0ad890f8867e86a18229f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/db1484669db7076d71b0ad890f8867e86a18229f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d0807e31f6d531cee5898bea3c2af3e312dbe61b","url":"https://api.github.com/repos/apache/bookkeeper/commits/d0807e31f6d531cee5898bea3c2af3e312dbe61b","html_url":"https://github.com/apache/bookkeeper/commit/d0807e31f6d531cee5898bea3c2af3e312dbe61b"}]},{"sha":"eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYjAxYjdjMWE5ZDIyYTU1ZjAxMDdkOGIzYmE2MDgwN2Q0ZmQwNWY0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T13:35:28Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T13:35:28Z"},"message":"BOOKKEEPER-424: Bookie start is failing intermittently when zkclient connection delays (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402146 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"71ad2d3a293de7933134b6a0e4a172b0e21bc334","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/71ad2d3a293de7933134b6a0e4a172b0e21bc334"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","html_url":"https://github.com/apache/bookkeeper/commit/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"db1484669db7076d71b0ad890f8867e86a18229f","url":"https://api.github.com/repos/apache/bookkeeper/commits/db1484669db7076d71b0ad890f8867e86a18229f","html_url":"https://github.com/apache/bookkeeper/commit/db1484669db7076d71b0ad890f8867e86a18229f"}]},{"sha":"2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyYzcyMzZjZjMzOWEyZGUzY2YzZmJjMGFhYThjZDg4Y2M0Mzk4Y2Ew","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T14:18:39Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T14:18:39Z"},"message":"BOOKKEEPER-424: Bookie start is failing intermittently when zkclient connection delays (rakeshr via ivank) [missing files]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402159 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bdbdd11dbcf007a65d8a335d441c19415bd4fad8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bdbdd11dbcf007a65d8a335d441c19415bd4fad8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","html_url":"https://github.com/apache/bookkeeper/commit/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","url":"https://api.github.com/repos/apache/bookkeeper/commits/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4","html_url":"https://github.com/apache/bookkeeper/commit/eb01b7c1a9d22a55f0107d8b3ba60807d4fd05f4"}]},{"sha":"7dced572419c90b27b587eccc09d48032e7a6a9c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZGNlZDU3MjQxOWM5MGIyN2I1ODdlY2NjMDlkNDgwMzJlN2E2YTlj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T14:50:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-25T14:50:05Z"},"message":"BOOKKEEPER-416: LedgerChecker returns underreplicated fragments for an closed ledger with no entries (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402172 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7922179979a772cc84bddcafe277f642191fd51d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7922179979a772cc84bddcafe277f642191fd51d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7dced572419c90b27b587eccc09d48032e7a6a9c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7dced572419c90b27b587eccc09d48032e7a6a9c","html_url":"https://github.com/apache/bookkeeper/commit/7dced572419c90b27b587eccc09d48032e7a6a9c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7dced572419c90b27b587eccc09d48032e7a6a9c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","url":"https://api.github.com/repos/apache/bookkeeper/commits/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0","html_url":"https://github.com/apache/bookkeeper/commit/2c7236cf339a2de3cf3fbc0aaa8cd88cc4398ca0"}]},{"sha":"ffd46bcd1c7e2c78f6d41355a2215f73661764c1","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmZmQ0NmJjZDFjN2UyYzc4ZjZkNDEzNTVhMjIxNWY3MzY2MTc2NGMx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T09:55:51Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T09:55:51Z"},"message":"BOOKKEEPER-441: InMemorySubscriptionManager should back up top2sub2seq before change it (Yixue via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402459 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bb5924f4d3e6aa5245b34ad5d02131e0679e9864","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bb5924f4d3e6aa5245b34ad5d02131e0679e9864"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ffd46bcd1c7e2c78f6d41355a2215f73661764c1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ffd46bcd1c7e2c78f6d41355a2215f73661764c1","html_url":"https://github.com/apache/bookkeeper/commit/ffd46bcd1c7e2c78f6d41355a2215f73661764c1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ffd46bcd1c7e2c78f6d41355a2215f73661764c1/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7dced572419c90b27b587eccc09d48032e7a6a9c","url":"https://api.github.com/repos/apache/bookkeeper/commits/7dced572419c90b27b587eccc09d48032e7a6a9c","html_url":"https://github.com/apache/bookkeeper/commit/7dced572419c90b27b587eccc09d48032e7a6a9c"}]},{"sha":"3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYTlhODg3MDhkM2ExZTllMjMzN2E4Y2M5OWMzYmI3MjdmOTNmZmM0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T10:51:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T10:51:44Z"},"message":"BOOKKEEPER-346: Detect IOExceptions in LedgerCache and bookie should look at next ledger dir(if any) (Vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402464 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"819b2eaf17cf2092ca7ab35e3b66fa0471ab6dcf","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/819b2eaf17cf2092ca7ab35e3b66fa0471ab6dcf"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","html_url":"https://github.com/apache/bookkeeper/commit/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ffd46bcd1c7e2c78f6d41355a2215f73661764c1","url":"https://api.github.com/repos/apache/bookkeeper/commits/ffd46bcd1c7e2c78f6d41355a2215f73661764c1","html_url":"https://github.com/apache/bookkeeper/commit/ffd46bcd1c7e2c78f6d41355a2215f73661764c1"}]},{"sha":"223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyMjNhM2ZiM2ZiYzc4ZmU0ZGMxOTIyOTY3ZmUzZGFhM2VkZmMzZmIy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T13:13:09Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-26T13:13:09Z"},"message":"BOOKKEEPER-439: No more messages delivered after deleted consumed ledgers. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402501 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1bdf646fb790e4310343144479764da4ec90eb9f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1bdf646fb790e4310343144479764da4ec90eb9f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2","html_url":"https://github.com/apache/bookkeeper/commit/223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","url":"https://api.github.com/repos/apache/bookkeeper/commits/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4","html_url":"https://github.com/apache/bookkeeper/commit/3a9a88708d3a1e9e2337a8cc99c3bb727f93ffc4"}]},{"sha":"536d86ec4b93909e870d6bc65fba7037360ea036","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1MzZkODZlYzRiOTM5MDllODcwZDZiYzY1ZmJhNzAzNzM2MGVhMDM2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-10-26T14:25:47Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-10-26T14:25:47Z"},"message":"BOOKKEEPER-425: Cleanup Bookie id generation (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1402526 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d091bfe78e7bd20c61c663dc42daa73f282571bd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d091bfe78e7bd20c61c663dc42daa73f282571bd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/536d86ec4b93909e870d6bc65fba7037360ea036","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/536d86ec4b93909e870d6bc65fba7037360ea036","html_url":"https://github.com/apache/bookkeeper/commit/536d86ec4b93909e870d6bc65fba7037360ea036","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/536d86ec4b93909e870d6bc65fba7037360ea036/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2","url":"https://api.github.com/repos/apache/bookkeeper/commits/223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2","html_url":"https://github.com/apache/bookkeeper/commit/223a3fb3fbc78fe4dc1922967fe3daa3edfc3fb2"}]},{"sha":"fb28dd140d1c0f6b3737f840b9d62da36713d820","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYjI4ZGQxNDBkMWMwZjZiMzczN2Y4NDBiOWQ2MmRhMzY3MTNkODIw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-31T10:40:46Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-31T10:40:46Z"},"message":"BOOKKEEPER-430: Remove manual bookie registration from overview (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1404083 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"678225598396920bab6b5bd91cb60132e5883a4b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/678225598396920bab6b5bd91cb60132e5883a4b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fb28dd140d1c0f6b3737f840b9d62da36713d820","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fb28dd140d1c0f6b3737f840b9d62da36713d820","html_url":"https://github.com/apache/bookkeeper/commit/fb28dd140d1c0f6b3737f840b9d62da36713d820","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fb28dd140d1c0f6b3737f840b9d62da36713d820/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"536d86ec4b93909e870d6bc65fba7037360ea036","url":"https://api.github.com/repos/apache/bookkeeper/commits/536d86ec4b93909e870d6bc65fba7037360ea036","html_url":"https://github.com/apache/bookkeeper/commit/536d86ec4b93909e870d6bc65fba7037360ea036"}]},{"sha":"0658723fdbcfeceddc983b770d78b01602a64f06","node_id":"MDY6Q29tbWl0MTU3NTk1NjowNjU4NzIzZmRiY2ZlY2VkZGM5ODNiNzcwZDc4YjAxNjAyYTY0ZjA2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-31T17:16:07Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-10-31T17:16:07Z"},"message":"BOOKKEEPER-434: [Hedwig CPP Client] Delay resolving default host until necessary. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1404255 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a8ccb02660ec5fcce93b1e1dc30017d942961a0f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a8ccb02660ec5fcce93b1e1dc30017d942961a0f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0658723fdbcfeceddc983b770d78b01602a64f06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0658723fdbcfeceddc983b770d78b01602a64f06","html_url":"https://github.com/apache/bookkeeper/commit/0658723fdbcfeceddc983b770d78b01602a64f06","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0658723fdbcfeceddc983b770d78b01602a64f06/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"fb28dd140d1c0f6b3737f840b9d62da36713d820","url":"https://api.github.com/repos/apache/bookkeeper/commits/fb28dd140d1c0f6b3737f840b9d62da36713d820","html_url":"https://github.com/apache/bookkeeper/commit/fb28dd140d1c0f6b3737f840b9d62da36713d820"}]},{"sha":"f633075dd0b0cae6c50db0f7284798089a9cf83b","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNjMzMDc1ZGQwYjBjYWU2YzUwZGIwZjcyODQ3OTgwODlhOWNmODNi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-02T16:14:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-02T16:14:59Z"},"message":"BOOKKEEPER-368 Implementing multiplexing java client. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1405028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3d5154ddbd6de68250913dba7c44e6ce7a3be449","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3d5154ddbd6de68250913dba7c44e6ce7a3be449"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f633075dd0b0cae6c50db0f7284798089a9cf83b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f633075dd0b0cae6c50db0f7284798089a9cf83b","html_url":"https://github.com/apache/bookkeeper/commit/f633075dd0b0cae6c50db0f7284798089a9cf83b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f633075dd0b0cae6c50db0f7284798089a9cf83b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0658723fdbcfeceddc983b770d78b01602a64f06","url":"https://api.github.com/repos/apache/bookkeeper/commits/0658723fdbcfeceddc983b770d78b01602a64f06","html_url":"https://github.com/apache/bookkeeper/commit/0658723fdbcfeceddc983b770d78b01602a64f06"}]},{"sha":"2dd4ff7d82d7dc95eb959ad803164f2a5df96968","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZGQ0ZmY3ZDgyZDdkYzk1ZWI5NTlhZDgwMzE2NGYyYTVkZjk2OTY4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-02T20:47:32Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-02T20:47:32Z"},"message":"BOOKKEEPER-370: implement multiplexing cpp client. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1405159 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ec7b1a9b8982a33779bdf9842126fa409b36da9a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ec7b1a9b8982a33779bdf9842126fa409b36da9a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2dd4ff7d82d7dc95eb959ad803164f2a5df96968","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2dd4ff7d82d7dc95eb959ad803164f2a5df96968","html_url":"https://github.com/apache/bookkeeper/commit/2dd4ff7d82d7dc95eb959ad803164f2a5df96968","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2dd4ff7d82d7dc95eb959ad803164f2a5df96968/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f633075dd0b0cae6c50db0f7284798089a9cf83b","url":"https://api.github.com/repos/apache/bookkeeper/commits/f633075dd0b0cae6c50db0f7284798089a9cf83b","html_url":"https://github.com/apache/bookkeeper/commit/f633075dd0b0cae6c50db0f7284798089a9cf83b"}]},{"sha":"da1b308ba8eb4dc0cd93b5ad19065067c354f242","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkYTFiMzA4YmE4ZWI0ZGMwY2Q5M2I1YWQxOTA2NTA2N2MzNTRmMjQy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-07T10:57:45Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-07T10:57:45Z"},"message":"BOOKKEEPER-452: Rename ClientConfiguration multiplexing_enabled to subscription_connection_sharing_enabled (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1406541 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1fdffdd7d4000ebdc49e9481d290c6de4d0604ee","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1fdffdd7d4000ebdc49e9481d290c6de4d0604ee"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/da1b308ba8eb4dc0cd93b5ad19065067c354f242","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/da1b308ba8eb4dc0cd93b5ad19065067c354f242","html_url":"https://github.com/apache/bookkeeper/commit/da1b308ba8eb4dc0cd93b5ad19065067c354f242","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/da1b308ba8eb4dc0cd93b5ad19065067c354f242/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2dd4ff7d82d7dc95eb959ad803164f2a5df96968","url":"https://api.github.com/repos/apache/bookkeeper/commits/2dd4ff7d82d7dc95eb959ad803164f2a5df96968","html_url":"https://github.com/apache/bookkeeper/commit/2dd4ff7d82d7dc95eb959ad803164f2a5df96968"}]},{"sha":"c32437ad4ff1d1e267f885a0bd67100cebb57ba6","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMzI0MzdhZDRmZjFkMWUyNjdmODg1YTBiZDY3MTAwY2ViYjU3YmE2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-07T16:27:20Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-07T16:27:20Z"},"message":"BOOKKEEPER-444: Refactor pending read op to make speculative reads possible (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1406707 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4bad86e7fe3db76379fd1598c2b8e84e1bd8a64b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4bad86e7fe3db76379fd1598c2b8e84e1bd8a64b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c32437ad4ff1d1e267f885a0bd67100cebb57ba6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c32437ad4ff1d1e267f885a0bd67100cebb57ba6","html_url":"https://github.com/apache/bookkeeper/commit/c32437ad4ff1d1e267f885a0bd67100cebb57ba6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c32437ad4ff1d1e267f885a0bd67100cebb57ba6/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"da1b308ba8eb4dc0cd93b5ad19065067c354f242","url":"https://api.github.com/repos/apache/bookkeeper/commits/da1b308ba8eb4dc0cd93b5ad19065067c354f242","html_url":"https://github.com/apache/bookkeeper/commit/da1b308ba8eb4dc0cd93b5ad19065067c354f242"}]},{"sha":"9b7b78890c2f0631a2b62bbbaa8de35ede102c0e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5YjdiNzg4OTBjMmYwNjMxYTJiNjJiYmJhYThkZTM1ZWRlMTAyYzBl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-09T16:13:10Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-09T16:13:10Z"},"message":"BOOKKEEPER-204: Provide a MetaStore interface, and a mock implementation. (Jiannan Wang via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1407520 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6c4c7d1c14970660eb28163187c43d60242634f1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6c4c7d1c14970660eb28163187c43d60242634f1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9b7b78890c2f0631a2b62bbbaa8de35ede102c0e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9b7b78890c2f0631a2b62bbbaa8de35ede102c0e","html_url":"https://github.com/apache/bookkeeper/commit/9b7b78890c2f0631a2b62bbbaa8de35ede102c0e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9b7b78890c2f0631a2b62bbbaa8de35ede102c0e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c32437ad4ff1d1e267f885a0bd67100cebb57ba6","url":"https://api.github.com/repos/apache/bookkeeper/commits/c32437ad4ff1d1e267f885a0bd67100cebb57ba6","html_url":"https://github.com/apache/bookkeeper/commit/c32437ad4ff1d1e267f885a0bd67100cebb57ba6"}]},{"sha":"0a164a8f7166b853cbf874b91f9a82e51f13f668","node_id":"MDY6Q29tbWl0MTU3NTk1NjowYTE2NGE4ZjcxNjZiODUzY2JmODc0YjkxZjlhODJlNTFmMTNmNjY4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-21T09:31:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-21T09:31:43Z"},"message":"BOOKKEEPER-468: Remove <echo> from protobuf generation in hedwig (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1412025 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5ecd83af9c31d1ef1babf0447f6980161dbf3f19","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5ecd83af9c31d1ef1babf0447f6980161dbf3f19"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0a164a8f7166b853cbf874b91f9a82e51f13f668","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0a164a8f7166b853cbf874b91f9a82e51f13f668","html_url":"https://github.com/apache/bookkeeper/commit/0a164a8f7166b853cbf874b91f9a82e51f13f668","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0a164a8f7166b853cbf874b91f9a82e51f13f668/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9b7b78890c2f0631a2b62bbbaa8de35ede102c0e","url":"https://api.github.com/repos/apache/bookkeeper/commits/9b7b78890c2f0631a2b62bbbaa8de35ede102c0e","html_url":"https://github.com/apache/bookkeeper/commit/9b7b78890c2f0631a2b62bbbaa8de35ede102c0e"}]},{"sha":"10091096ec339c1524877195172325343b20e02f","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMDA5MTA5NmVjMzM5YzE1MjQ4NzcxOTUxNzIzMjUzNDNiMjBlMDJm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-21T11:24:30Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-21T11:24:30Z"},"message":"BOOKKEEPER-466: ZooKeeper test utility sets the port number as the tickTime (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1412061 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fefe91dd3cf0b461d47e6196268f1a12358f7525","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fefe91dd3cf0b461d47e6196268f1a12358f7525"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/10091096ec339c1524877195172325343b20e02f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/10091096ec339c1524877195172325343b20e02f","html_url":"https://github.com/apache/bookkeeper/commit/10091096ec339c1524877195172325343b20e02f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/10091096ec339c1524877195172325343b20e02f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0a164a8f7166b853cbf874b91f9a82e51f13f668","url":"https://api.github.com/repos/apache/bookkeeper/commits/0a164a8f7166b853cbf874b91f9a82e51f13f668","html_url":"https://github.com/apache/bookkeeper/commit/0a164a8f7166b853cbf874b91f9a82e51f13f668"}]},{"sha":"afa7a082a6f8ab6936729fb68d84bcebf09e1f19","node_id":"MDY6Q29tbWl0MTU3NTk1NjphZmE3YTA4MmE2ZjhhYjY5MzY3MjlmYjY4ZDg0YmNlYmYwOWUxZjE5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-22T17:36:20Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-22T17:36:20Z"},"message":"BOOKKEEPER-454: hedwig c++ tester script assumes sh is bash (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1412629 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"20615e61eef0d76c377d10b0776391a60ec3c24a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/20615e61eef0d76c377d10b0776391a60ec3c24a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/afa7a082a6f8ab6936729fb68d84bcebf09e1f19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/afa7a082a6f8ab6936729fb68d84bcebf09e1f19","html_url":"https://github.com/apache/bookkeeper/commit/afa7a082a6f8ab6936729fb68d84bcebf09e1f19","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/afa7a082a6f8ab6936729fb68d84bcebf09e1f19/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"10091096ec339c1524877195172325343b20e02f","url":"https://api.github.com/repos/apache/bookkeeper/commits/10091096ec339c1524877195172325343b20e02f","html_url":"https://github.com/apache/bookkeeper/commit/10091096ec339c1524877195172325343b20e02f"}]},{"sha":"b3a05cd74652affe4a69f40609de0b92769e05a4","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiM2EwNWNkNzQ2NTJhZmZlNGE2OWY0MDYwOWRlMGI5Mjc2OWUwNWE0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-23T10:49:51Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-23T10:49:51Z"},"message":"BOOKKEEPER-467: Allocate ports for testing dynamically (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1412818 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f1b349ba934f9efa75c9e5f91f631af57f220cd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1f1b349ba934f9efa75c9e5f91f631af57f220cd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b3a05cd74652affe4a69f40609de0b92769e05a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b3a05cd74652affe4a69f40609de0b92769e05a4","html_url":"https://github.com/apache/bookkeeper/commit/b3a05cd74652affe4a69f40609de0b92769e05a4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b3a05cd74652affe4a69f40609de0b92769e05a4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"afa7a082a6f8ab6936729fb68d84bcebf09e1f19","url":"https://api.github.com/repos/apache/bookkeeper/commits/afa7a082a6f8ab6936729fb68d84bcebf09e1f19","html_url":"https://github.com/apache/bookkeeper/commit/afa7a082a6f8ab6936729fb68d84bcebf09e1f19"}]},{"sha":"e789bc0dae00b6e8881912a73c1e55f370c83c84","node_id":"MDY6Q29tbWl0MTU3NTk1NjplNzg5YmMwZGFlMDBiNmU4ODgxOTEyYTczYzFlNTVmMzcwYzgzYzg0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-26T15:42:55Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-26T15:42:55Z"},"message":"BOOKKEEPER-460: LedgerDeleteTest checks wrong place for log file (Fangmin Lv via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1413685 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4be4c979a07fef35bfc11de3def814ce95f96700","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4be4c979a07fef35bfc11de3def814ce95f96700"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e789bc0dae00b6e8881912a73c1e55f370c83c84","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e789bc0dae00b6e8881912a73c1e55f370c83c84","html_url":"https://github.com/apache/bookkeeper/commit/e789bc0dae00b6e8881912a73c1e55f370c83c84","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e789bc0dae00b6e8881912a73c1e55f370c83c84/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b3a05cd74652affe4a69f40609de0b92769e05a4","url":"https://api.github.com/repos/apache/bookkeeper/commits/b3a05cd74652affe4a69f40609de0b92769e05a4","html_url":"https://github.com/apache/bookkeeper/commit/b3a05cd74652affe4a69f40609de0b92769e05a4"}]},{"sha":"967149c238389e96b760dbda4d4f722aee46b0b5","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NjcxNDljMjM4Mzg5ZTk2Yjc2MGRiZGE0ZDRmNzIyYWVlNDZiMGI1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-26T16:13:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-26T16:13:44Z"},"message":"BOOKKEEPER-460: LedgerDeleteTest checks wrong place for log file (Fangmin Lv via ivank) [missing file]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1413700 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8ac61f24027af1b239f55492333cc27637c75a66","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8ac61f24027af1b239f55492333cc27637c75a66"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/967149c238389e96b760dbda4d4f722aee46b0b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/967149c238389e96b760dbda4d4f722aee46b0b5","html_url":"https://github.com/apache/bookkeeper/commit/967149c238389e96b760dbda4d4f722aee46b0b5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/967149c238389e96b760dbda4d4f722aee46b0b5/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e789bc0dae00b6e8881912a73c1e55f370c83c84","url":"https://api.github.com/repos/apache/bookkeeper/commits/e789bc0dae00b6e8881912a73c1e55f370c83c84","html_url":"https://github.com/apache/bookkeeper/commit/e789bc0dae00b6e8881912a73c1e55f370c83c84"}]},{"sha":"e2d624f8b09beca1f3a5c9224aad1aa254642f28","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMmQ2MjRmOGIwOWJlY2ExZjNhNWM5MjI0YWFkMWFhMjU0NjQyZjI4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-26T17:47:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-26T17:47:54Z"},"message":"BOOKKEEPER-440: Make Write/Delete SubscriptionData Restricted to Version (Fangmin Lv via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1413745 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a031dcdf92840bd13137ad7c5bebc195bf3ff8ee","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a031dcdf92840bd13137ad7c5bebc195bf3ff8ee"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e2d624f8b09beca1f3a5c9224aad1aa254642f28","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e2d624f8b09beca1f3a5c9224aad1aa254642f28","html_url":"https://github.com/apache/bookkeeper/commit/e2d624f8b09beca1f3a5c9224aad1aa254642f28","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e2d624f8b09beca1f3a5c9224aad1aa254642f28/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"967149c238389e96b760dbda4d4f722aee46b0b5","url":"https://api.github.com/repos/apache/bookkeeper/commits/967149c238389e96b760dbda4d4f722aee46b0b5","html_url":"https://github.com/apache/bookkeeper/commit/967149c238389e96b760dbda4d4f722aee46b0b5"}]},{"sha":"8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4YTNiNGFjOWE3MGVjYTVlNTVmN2M1MTYzYzljNjJkNjc3YzA2YWE3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-27T09:50:56Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-27T09:50:56Z"},"message":"BOOKKEEPER-471: Add scripts for preCommit testing (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1414044 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fed261039baf5240034d1879a86b6693d7e8d8c0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fed261039baf5240034d1879a86b6693d7e8d8c0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","html_url":"https://github.com/apache/bookkeeper/commit/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e2d624f8b09beca1f3a5c9224aad1aa254642f28","url":"https://api.github.com/repos/apache/bookkeeper/commits/e2d624f8b09beca1f3a5c9224aad1aa254642f28","html_url":"https://github.com/apache/bookkeeper/commit/e2d624f8b09beca1f3a5c9224aad1aa254642f28"}]},{"sha":"d3ee645781a1ed422d53a027e3d397451dd4c0d2","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkM2VlNjQ1NzgxYTFlZDQyMmQ1M2EwMjdlM2QzOTc0NTFkZDRjMGQy","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-11-27T14:36:23Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-11-27T14:36:23Z"},"message":"BOOKKEEPER-479: Fix apache-rat issues in tree (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1414207 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"db48614d58898f3e6829e5bd52d2071eaa8c97ea","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/db48614d58898f3e6829e5bd52d2071eaa8c97ea"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d3ee645781a1ed422d53a027e3d397451dd4c0d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d3ee645781a1ed422d53a027e3d397451dd4c0d2","html_url":"https://github.com/apache/bookkeeper/commit/d3ee645781a1ed422d53a027e3d397451dd4c0d2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d3ee645781a1ed422d53a027e3d397451dd4c0d2/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","url":"https://api.github.com/repos/apache/bookkeeper/commits/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7","html_url":"https://github.com/apache/bookkeeper/commit/8a3b4ac9a70eca5e55f7c5163c9c62d677c06aa7"}]},{"sha":"38336805e367664fbda2a9c6993d5d343c956752","node_id":"MDY6Q29tbWl0MTU3NTk1NjozODMzNjgwNWUzNjc2NjRmYmRhMmE5YzY5OTNkNWQzNDNjOTU2NzUy","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-11-27T15:52:45Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-11-27T15:52:45Z"},"message":"BOOKKEEPER-477: In ReadOnlyBookieTest, we should wait for the bookie to die before asserting on it (ivank via fpj)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1414233 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"94d7dd57a96a458939a53f24feb66babe5de3757","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/94d7dd57a96a458939a53f24feb66babe5de3757"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/38336805e367664fbda2a9c6993d5d343c956752","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/38336805e367664fbda2a9c6993d5d343c956752","html_url":"https://github.com/apache/bookkeeper/commit/38336805e367664fbda2a9c6993d5d343c956752","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/38336805e367664fbda2a9c6993d5d343c956752/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"d3ee645781a1ed422d53a027e3d397451dd4c0d2","url":"https://api.github.com/repos/apache/bookkeeper/commits/d3ee645781a1ed422d53a027e3d397451dd4c0d2","html_url":"https://github.com/apache/bookkeeper/commit/d3ee645781a1ed422d53a027e3d397451dd4c0d2"}]},{"sha":"9512c57d2c370604e732037c8a3cf262cb60b8a9","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NTEyYzU3ZDJjMzcwNjA0ZTczMjAzN2M4YTNjZjI2MmNiNjBiOGE5","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-11-27T20:33:10Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-11-27T20:33:10Z"},"message":"BOOKKEEPER-476: Log to file during tests (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1414382 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"145e602c71b0e391eceef25c976c8b877e095d85","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/145e602c71b0e391eceef25c976c8b877e095d85"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9512c57d2c370604e732037c8a3cf262cb60b8a9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9512c57d2c370604e732037c8a3cf262cb60b8a9","html_url":"https://github.com/apache/bookkeeper/commit/9512c57d2c370604e732037c8a3cf262cb60b8a9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9512c57d2c370604e732037c8a3cf262cb60b8a9/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"38336805e367664fbda2a9c6993d5d343c956752","url":"https://api.github.com/repos/apache/bookkeeper/commits/38336805e367664fbda2a9c6993d5d343c956752","html_url":"https://github.com/apache/bookkeeper/commit/38336805e367664fbda2a9c6993d5d343c956752"}]},{"sha":"0d198abad7b41d8326913384967aeb1239ab0528","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZDE5OGFiYWQ3YjQxZDgzMjY5MTMzODQ5NjdhZWIxMjM5YWIwNTI4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-29T14:18:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-29T14:18:59Z"},"message":"BOOKKEEPER-457: Create a format command for Hedwig to cleanup its metadata. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1415176 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"926769d920879d6014302e11bdd4dcb55682a529","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/926769d920879d6014302e11bdd4dcb55682a529"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0d198abad7b41d8326913384967aeb1239ab0528","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0d198abad7b41d8326913384967aeb1239ab0528","html_url":"https://github.com/apache/bookkeeper/commit/0d198abad7b41d8326913384967aeb1239ab0528","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0d198abad7b41d8326913384967aeb1239ab0528/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9512c57d2c370604e732037c8a3cf262cb60b8a9","url":"https://api.github.com/repos/apache/bookkeeper/commits/9512c57d2c370604e732037c8a3cf262cb60b8a9","html_url":"https://github.com/apache/bookkeeper/commit/9512c57d2c370604e732037c8a3cf262cb60b8a9"}]},{"sha":"ea84d6cc0f7ba8549466104175777369b6de5fac","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYTg0ZDZjYzBmN2JhODU0OTQ2NjEwNDE3NTc3NzM2OWI2ZGU1ZmFj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-29T16:54:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-29T16:54:59Z"},"message":"BOOKKEEPER-487: Add existed hub server settings to configuration template file (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1415269 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bfc89a3308c7ec6b82ad46094b2906817a70c00f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bfc89a3308c7ec6b82ad46094b2906817a70c00f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ea84d6cc0f7ba8549466104175777369b6de5fac","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ea84d6cc0f7ba8549466104175777369b6de5fac","html_url":"https://github.com/apache/bookkeeper/commit/ea84d6cc0f7ba8549466104175777369b6de5fac","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ea84d6cc0f7ba8549466104175777369b6de5fac/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0d198abad7b41d8326913384967aeb1239ab0528","url":"https://api.github.com/repos/apache/bookkeeper/commits/0d198abad7b41d8326913384967aeb1239ab0528","html_url":"https://github.com/apache/bookkeeper/commit/0d198abad7b41d8326913384967aeb1239ab0528"}]},{"sha":"aa1fecd255bcc3c23d4037c675df88c9c0ba78ab","node_id":"MDY6Q29tbWl0MTU3NTk1NjphYTFmZWNkMjU1YmNjM2MyM2Q0MDM3YzY3NWRmODhjOWMwYmE3OGFi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-11-30T03:54:14Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-11-30T03:54:14Z"},"message":"BOOKKEEPER-481: Fix javadoc warnings (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1415491 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"beeccf83a2158c977bcac0e5442a714e97df45bb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/beeccf83a2158c977bcac0e5442a714e97df45bb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/aa1fecd255bcc3c23d4037c675df88c9c0ba78ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/aa1fecd255bcc3c23d4037c675df88c9c0ba78ab","html_url":"https://github.com/apache/bookkeeper/commit/aa1fecd255bcc3c23d4037c675df88c9c0ba78ab","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/aa1fecd255bcc3c23d4037c675df88c9c0ba78ab/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea84d6cc0f7ba8549466104175777369b6de5fac","url":"https://api.github.com/repos/apache/bookkeeper/commits/ea84d6cc0f7ba8549466104175777369b6de5fac","html_url":"https://github.com/apache/bookkeeper/commit/ea84d6cc0f7ba8549466104175777369b6de5fac"}]},{"sha":"2522f9863b30359b617b6fd2ab6190c1f1cc8570","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNTIyZjk4NjNiMzAzNTliNjE3YjZmZDJhYjYxOTBjMWYxY2M4NTcw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-11-30T03:56:02Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-11-30T03:56:02Z"},"message":"BOOKKEEPER-480: Fix javac warnings (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1415492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ffe85db208c62a9fd7ec5cfe2f4266e900f27ed7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ffe85db208c62a9fd7ec5cfe2f4266e900f27ed7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2522f9863b30359b617b6fd2ab6190c1f1cc8570","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2522f9863b30359b617b6fd2ab6190c1f1cc8570","html_url":"https://github.com/apache/bookkeeper/commit/2522f9863b30359b617b6fd2ab6190c1f1cc8570","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2522f9863b30359b617b6fd2ab6190c1f1cc8570/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"aa1fecd255bcc3c23d4037c675df88c9c0ba78ab","url":"https://api.github.com/repos/apache/bookkeeper/commits/aa1fecd255bcc3c23d4037c675df88c9c0ba78ab","html_url":"https://github.com/apache/bookkeeper/commit/aa1fecd255bcc3c23d4037c675df88c9c0ba78ab"}]},{"sha":"3ce797955e66d709fd9d96419bc484cab4ddeec3","node_id":"MDY6Q29tbWl0MTU3NTk1NjozY2U3OTc5NTVlNjZkNzA5ZmQ5ZDk2NDE5YmM0ODRjYWI0ZGRlZWMz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-30T15:28:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-11-30T15:28:43Z"},"message":"BOOKKEEPER-389: add documentation for message filter. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1415691 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4ba680e500b32fde9eb13f0fac727a42af196b51","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4ba680e500b32fde9eb13f0fac727a42af196b51"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3ce797955e66d709fd9d96419bc484cab4ddeec3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3ce797955e66d709fd9d96419bc484cab4ddeec3","html_url":"https://github.com/apache/bookkeeper/commit/3ce797955e66d709fd9d96419bc484cab4ddeec3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3ce797955e66d709fd9d96419bc484cab4ddeec3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2522f9863b30359b617b6fd2ab6190c1f1cc8570","url":"https://api.github.com/repos/apache/bookkeeper/commits/2522f9863b30359b617b6fd2ab6190c1f1cc8570","html_url":"https://github.com/apache/bookkeeper/commit/2522f9863b30359b617b6fd2ab6190c1f1cc8570"}]},{"sha":"e14983cbea5238a75a45bff4f23a8e431a5892f0","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMTQ5ODNjYmVhNTIzOGE3NWE0NWJmZjRmMjNhOGU0MzFhNTg5MmYw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-01T05:32:49Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-01T05:32:49Z"},"message":"BOOKKEEPER-482: Precommit is reporting findbugs errors in trunk (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1415920 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"11dabd4b64a880a63d512fa6460c644a20f4fb75","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/11dabd4b64a880a63d512fa6460c644a20f4fb75"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e14983cbea5238a75a45bff4f23a8e431a5892f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e14983cbea5238a75a45bff4f23a8e431a5892f0","html_url":"https://github.com/apache/bookkeeper/commit/e14983cbea5238a75a45bff4f23a8e431a5892f0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e14983cbea5238a75a45bff4f23a8e431a5892f0/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"3ce797955e66d709fd9d96419bc484cab4ddeec3","url":"https://api.github.com/repos/apache/bookkeeper/commits/3ce797955e66d709fd9d96419bc484cab4ddeec3","html_url":"https://github.com/apache/bookkeeper/commit/3ce797955e66d709fd9d96419bc484cab4ddeec3"}]},{"sha":"100785f6f1feb2e6dd1c7de769adab5c88e87427","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMDA3ODVmNmYxZmViMmU2ZGQxYzdkZTc2OWFkYWI1Yzg4ZTg3NDI3","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-01T14:04:29Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-01T14:04:29Z"},"message":"BOOKKEEPER-485: TestFencing hung (ivank via fpj)\n\n--THIS line, and those below, will be ignored--\n\nM    CHANGES.txt\nA    bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java\nM    bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416000 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d92dcb7e14497f159d5d5ee44cfc78d8f0b932fe","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d92dcb7e14497f159d5d5ee44cfc78d8f0b932fe"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/100785f6f1feb2e6dd1c7de769adab5c88e87427","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/100785f6f1feb2e6dd1c7de769adab5c88e87427","html_url":"https://github.com/apache/bookkeeper/commit/100785f6f1feb2e6dd1c7de769adab5c88e87427","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/100785f6f1feb2e6dd1c7de769adab5c88e87427/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"e14983cbea5238a75a45bff4f23a8e431a5892f0","url":"https://api.github.com/repos/apache/bookkeeper/commits/e14983cbea5238a75a45bff4f23a8e431a5892f0","html_url":"https://github.com/apache/bookkeeper/commit/e14983cbea5238a75a45bff4f23a8e431a5892f0"}]},{"sha":"c958b32da81936cee535c411f2214d900f54442c","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjOTU4YjMyZGE4MTkzNmNlZTUzNWM0MTFmMjIxNGQ5MDBmNTQ0NDJj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-03T05:23:40Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-03T05:23:40Z"},"message":"BOOKKEEPER-351: asyncAddEntry should not throw an exception (Matteo Merli via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416352 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4c778f13a5a07cf204eb47b860ac7b77a45e6a0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a4c778f13a5a07cf204eb47b860ac7b77a45e6a0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c958b32da81936cee535c411f2214d900f54442c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c958b32da81936cee535c411f2214d900f54442c","html_url":"https://github.com/apache/bookkeeper/commit/c958b32da81936cee535c411f2214d900f54442c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c958b32da81936cee535c411f2214d900f54442c/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"100785f6f1feb2e6dd1c7de769adab5c88e87427","url":"https://api.github.com/repos/apache/bookkeeper/commits/100785f6f1feb2e6dd1c7de769adab5c88e87427","html_url":"https://github.com/apache/bookkeeper/commit/100785f6f1feb2e6dd1c7de769adab5c88e87427"}]},{"sha":"f12b7896e1640bed64cedb0d96bdd82b6cf26a86","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMTJiNzg5NmUxNjQwYmVkNjRjZWRiMGQ5NmJkZDgyYjZjZjI2YTg2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T09:46:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T09:46:05Z"},"message":"BOOKKEEPER-336 bookie readEntries is taking more time if the ensemble has failed bookie(s) Basic speculative functionality  in place\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416393 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"134612c86c6a915fd347bd7d1402a96d91b8e13c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/134612c86c6a915fd347bd7d1402a96d91b8e13c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f12b7896e1640bed64cedb0d96bdd82b6cf26a86","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f12b7896e1640bed64cedb0d96bdd82b6cf26a86","html_url":"https://github.com/apache/bookkeeper/commit/f12b7896e1640bed64cedb0d96bdd82b6cf26a86","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f12b7896e1640bed64cedb0d96bdd82b6cf26a86/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c958b32da81936cee535c411f2214d900f54442c","url":"https://api.github.com/repos/apache/bookkeeper/commits/c958b32da81936cee535c411f2214d900f54442c","html_url":"https://github.com/apache/bookkeeper/commit/c958b32da81936cee535c411f2214d900f54442c"}]},{"sha":"6a6d25e7e9a2c3cc4370799ec2529915929e5acc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2YTZkMjVlN2U5YTJjM2NjNDM3MDc5OWVjMjUyOTkxNTkyOWU1YWNj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T09:49:57Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T09:49:57Z"},"message":"BOOKKEEPER-291: BKMBeanRegistry uses log4j directly (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416400 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4dc26a137f72f32a35d7d67c01866b2df1ce1201","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4dc26a137f72f32a35d7d67c01866b2df1ce1201"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6a6d25e7e9a2c3cc4370799ec2529915929e5acc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6a6d25e7e9a2c3cc4370799ec2529915929e5acc","html_url":"https://github.com/apache/bookkeeper/commit/6a6d25e7e9a2c3cc4370799ec2529915929e5acc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6a6d25e7e9a2c3cc4370799ec2529915929e5acc/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f12b7896e1640bed64cedb0d96bdd82b6cf26a86","url":"https://api.github.com/repos/apache/bookkeeper/commits/f12b7896e1640bed64cedb0d96bdd82b6cf26a86","html_url":"https://github.com/apache/bookkeeper/commit/f12b7896e1640bed64cedb0d96bdd82b6cf26a86"}]},{"sha":"bdf3bfd631493d82688404dde35eed491ec946ad","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZGYzYmZkNjMxNDkzZDgyNjg4NDA0ZGRlMzVlZWQ0OTFlYzk0NmFk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T09:55:01Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T09:55:01Z"},"message":"[REVERT] BOOKKEEPER-336 bookie readEntries is taking more time if the ensemble has failed bookie(s) Basic speculative functionality  in place\nAccidently committed this change, before approval. Reverting (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416408 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e4697d62ce1a8a9dab1db303abbed647bce5e29","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4e4697d62ce1a8a9dab1db303abbed647bce5e29"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/bdf3bfd631493d82688404dde35eed491ec946ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/bdf3bfd631493d82688404dde35eed491ec946ad","html_url":"https://github.com/apache/bookkeeper/commit/bdf3bfd631493d82688404dde35eed491ec946ad","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/bdf3bfd631493d82688404dde35eed491ec946ad/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a6d25e7e9a2c3cc4370799ec2529915929e5acc","url":"https://api.github.com/repos/apache/bookkeeper/commits/6a6d25e7e9a2c3cc4370799ec2529915929e5acc","html_url":"https://github.com/apache/bookkeeper/commit/6a6d25e7e9a2c3cc4370799ec2529915929e5acc"}]},{"sha":"03bf28db4e8e99a4326e0e01c7a9f7134f151a7b","node_id":"MDY6Q29tbWl0MTU3NTk1NjowM2JmMjhkYjRlOGU5OWE0MzI2ZTBlMDFjN2E5ZjcxMzRmMTUxYTdi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T13:54:19Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T13:54:19Z"},"message":"BOOKKEEPER-459: Rename metastore mock implementation to InMemory implementation (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416519 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6ede40eeea557675f0290918084fe4c13a6baa95","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6ede40eeea557675f0290918084fe4c13a6baa95"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/03bf28db4e8e99a4326e0e01c7a9f7134f151a7b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/03bf28db4e8e99a4326e0e01c7a9f7134f151a7b","html_url":"https://github.com/apache/bookkeeper/commit/03bf28db4e8e99a4326e0e01c7a9f7134f151a7b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/03bf28db4e8e99a4326e0e01c7a9f7134f151a7b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"bdf3bfd631493d82688404dde35eed491ec946ad","url":"https://api.github.com/repos/apache/bookkeeper/commits/bdf3bfd631493d82688404dde35eed491ec946ad","html_url":"https://github.com/apache/bookkeeper/commit/bdf3bfd631493d82688404dde35eed491ec946ad"}]},{"sha":"4380e52969beac534fd1da6a68bd28d48b9ba7e9","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MzgwZTUyOTY5YmVhYzUzNGZkMWRhNmE2OGJkMjhkNDhiOWJhN2U5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T14:04:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T14:04:38Z"},"message":"BOOKKEEPER-459: Rename metastore mock implementation to InMemory implementation (jiannan via ivank) [remove directory]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416526 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6ede40eeea557675f0290918084fe4c13a6baa95","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6ede40eeea557675f0290918084fe4c13a6baa95"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4380e52969beac534fd1da6a68bd28d48b9ba7e9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4380e52969beac534fd1da6a68bd28d48b9ba7e9","html_url":"https://github.com/apache/bookkeeper/commit/4380e52969beac534fd1da6a68bd28d48b9ba7e9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4380e52969beac534fd1da6a68bd28d48b9ba7e9/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"03bf28db4e8e99a4326e0e01c7a9f7134f151a7b","url":"https://api.github.com/repos/apache/bookkeeper/commits/03bf28db4e8e99a4326e0e01c7a9f7134f151a7b","html_url":"https://github.com/apache/bookkeeper/commit/03bf28db4e8e99a4326e0e01c7a9f7134f151a7b"}]},{"sha":"0ea460606e4a45a07a79c356ad1d58a6119e0d31","node_id":"MDY6Q29tbWl0MTU3NTk1NjowZWE0NjA2MDZlNGE0NWEwN2E3OWMzNTZhZDFkNThhNjExOWUwZDMx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T15:27:32Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T15:27:32Z"},"message":"BOOKKEEPER-442: Failed to deliver messages due to inconsistency between SubscriptionState and LedgerRanges. (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416560 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"618480046e8ddc862c889030b0e8c91ed39e763c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/618480046e8ddc862c889030b0e8c91ed39e763c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0ea460606e4a45a07a79c356ad1d58a6119e0d31","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0ea460606e4a45a07a79c356ad1d58a6119e0d31","html_url":"https://github.com/apache/bookkeeper/commit/0ea460606e4a45a07a79c356ad1d58a6119e0d31","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0ea460606e4a45a07a79c356ad1d58a6119e0d31/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4380e52969beac534fd1da6a68bd28d48b9ba7e9","url":"https://api.github.com/repos/apache/bookkeeper/commits/4380e52969beac534fd1da6a68bd28d48b9ba7e9","html_url":"https://github.com/apache/bookkeeper/commit/4380e52969beac534fd1da6a68bd28d48b9ba7e9"}]},{"sha":"7f6adbe34f828f6c86fe30bfa398180fdb512425","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZjZhZGJlMzRmODI4ZjZjODZmZTMwYmZhMzk4MTgwZmRiNTEyNDI1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T16:59:04Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-03T16:59:04Z"},"message":"BOOKKEEPER-347: Provide mechanism to detect r-o bookie by the bookie clients (Vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416590 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d36581ecdcc72309aebc26af1c02a8046d3f39c6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d36581ecdcc72309aebc26af1c02a8046d3f39c6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7f6adbe34f828f6c86fe30bfa398180fdb512425","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7f6adbe34f828f6c86fe30bfa398180fdb512425","html_url":"https://github.com/apache/bookkeeper/commit/7f6adbe34f828f6c86fe30bfa398180fdb512425","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7f6adbe34f828f6c86fe30bfa398180fdb512425/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0ea460606e4a45a07a79c356ad1d58a6119e0d31","url":"https://api.github.com/repos/apache/bookkeeper/commits/0ea460606e4a45a07a79c356ad1d58a6119e0d31","html_url":"https://github.com/apache/bookkeeper/commit/0ea460606e4a45a07a79c356ad1d58a6119e0d31"}]},{"sha":"c86eb1c481fd837269d370cbcc248274708b0887","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjODZlYjFjNDgxZmQ4MzcyNjlkMzcwY2JjYzI0ODI3NDcwOGIwODg3","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-03T20:31:51Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-03T20:31:51Z"},"message":"BOOKKEEPER-484: Misc fixes for test scripts (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416655 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d01edf399185c75779a9907341217379b3761065","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d01edf399185c75779a9907341217379b3761065"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c86eb1c481fd837269d370cbcc248274708b0887","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c86eb1c481fd837269d370cbcc248274708b0887","html_url":"https://github.com/apache/bookkeeper/commit/c86eb1c481fd837269d370cbcc248274708b0887","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c86eb1c481fd837269d370cbcc248274708b0887/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f6adbe34f828f6c86fe30bfa398180fdb512425","url":"https://api.github.com/repos/apache/bookkeeper/commits/7f6adbe34f828f6c86fe30bfa398180fdb512425","html_url":"https://github.com/apache/bookkeeper/commit/7f6adbe34f828f6c86fe30bfa398180fdb512425"}]},{"sha":"55f6300ef7eea86c7573d07d65341e2f9ad982a4","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NWY2MzAwZWY3ZWVhODZjNzU3M2QwN2Q2NTM0MWUyZjlhZDk4MmE0","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-03T21:38:08Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-03T21:38:08Z"},"message":"BOOKKEEPER-399: Let hub server configure write quorum from ack quorum. (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1416677 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"345cddd8b99c9fdb4ebff87ebe056520ce631549","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/345cddd8b99c9fdb4ebff87ebe056520ce631549"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/55f6300ef7eea86c7573d07d65341e2f9ad982a4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/55f6300ef7eea86c7573d07d65341e2f9ad982a4","html_url":"https://github.com/apache/bookkeeper/commit/55f6300ef7eea86c7573d07d65341e2f9ad982a4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/55f6300ef7eea86c7573d07d65341e2f9ad982a4/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"c86eb1c481fd837269d370cbcc248274708b0887","url":"https://api.github.com/repos/apache/bookkeeper/commits/c86eb1c481fd837269d370cbcc248274708b0887","html_url":"https://github.com/apache/bookkeeper/commit/c86eb1c481fd837269d370cbcc248274708b0887"}]},{"sha":"6030beaba9e770db9b856b8de1b06dab843b2ccc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2MDMwYmVhYmE5ZTc3MGRiOWI4NTZiOGRlMWIwNmRhYjg0M2IyY2Nj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-04T17:27:35Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-04T17:27:35Z"},"message":"BOOKKEEPER-470: Possible infinite loop in simple.SubscribeReconnectCallback (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1417046 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3f46061d5f1b9319841ae7676bcab9f9f5e0b55a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3f46061d5f1b9319841ae7676bcab9f9f5e0b55a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6030beaba9e770db9b856b8de1b06dab843b2ccc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6030beaba9e770db9b856b8de1b06dab843b2ccc","html_url":"https://github.com/apache/bookkeeper/commit/6030beaba9e770db9b856b8de1b06dab843b2ccc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6030beaba9e770db9b856b8de1b06dab843b2ccc/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"55f6300ef7eea86c7573d07d65341e2f9ad982a4","url":"https://api.github.com/repos/apache/bookkeeper/commits/55f6300ef7eea86c7573d07d65341e2f9ad982a4","html_url":"https://github.com/apache/bookkeeper/commit/55f6300ef7eea86c7573d07d65341e2f9ad982a4"}]},{"sha":"7f67e765c73890a2f838ec8f5d43b814ce42c84b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZjY3ZTc2NWM3Mzg5MGEyZjgzOGVjOGY1ZDQzYjgxNGNlNDJjODRi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-04T17:54:23Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-04T17:54:23Z"},"message":"BOOKKEEPER-461: Delivery throughput degrades when there are lots of publishers w/ high traffic. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1417066 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"08a4d586263414f2caa722c01b0b13f7f63ffb6d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/08a4d586263414f2caa722c01b0b13f7f63ffb6d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7f67e765c73890a2f838ec8f5d43b814ce42c84b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7f67e765c73890a2f838ec8f5d43b814ce42c84b","html_url":"https://github.com/apache/bookkeeper/commit/7f67e765c73890a2f838ec8f5d43b814ce42c84b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7f67e765c73890a2f838ec8f5d43b814ce42c84b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6030beaba9e770db9b856b8de1b06dab843b2ccc","url":"https://api.github.com/repos/apache/bookkeeper/commits/6030beaba9e770db9b856b8de1b06dab843b2ccc","html_url":"https://github.com/apache/bookkeeper/commit/6030beaba9e770db9b856b8de1b06dab843b2ccc"}]},{"sha":"366d393f2e58acdd5494da4ae60513c3ae5730c4","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNjZkMzkzZjJlNThhY2RkNTQ5NGRhNGFlNjA1MTNjM2FlNTczMGM0","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-04T21:15:47Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-04T21:15:47Z"},"message":"BOOKKEEPER-475: BookieRecoveryTest#testSyncBookieRecoveryToRandomBookiesCheckForDupes() iterates too much (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1417190 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7812bc5fe8860774a2d0d56392aaf54b2fd3e75c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7812bc5fe8860774a2d0d56392aaf54b2fd3e75c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/366d393f2e58acdd5494da4ae60513c3ae5730c4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/366d393f2e58acdd5494da4ae60513c3ae5730c4","html_url":"https://github.com/apache/bookkeeper/commit/366d393f2e58acdd5494da4ae60513c3ae5730c4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/366d393f2e58acdd5494da4ae60513c3ae5730c4/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f67e765c73890a2f838ec8f5d43b814ce42c84b","url":"https://api.github.com/repos/apache/bookkeeper/commits/7f67e765c73890a2f838ec8f5d43b814ce42c84b","html_url":"https://github.com/apache/bookkeeper/commit/7f67e765c73890a2f838ec8f5d43b814ce42c84b"}]},{"sha":"baef283841c05bcb4ebceaaa5d540f7a30e4af1a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYWVmMjgzODQxYzA1YmNiNGViY2VhYWE1ZDU0MGY3YTMwZTRhZjFh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-07T11:21:52Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-07T11:21:52Z"},"message":"BOOKKEEPER-453: Extract commonality from MultiplexSubscribeResponseHandler and SimpleSubscribeResponseHandler and put into an abstract class  (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1418280 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46c911485787f0de932e5c90bdc5274aa58bb1aa","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/46c911485787f0de932e5c90bdc5274aa58bb1aa"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/baef283841c05bcb4ebceaaa5d540f7a30e4af1a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/baef283841c05bcb4ebceaaa5d540f7a30e4af1a","html_url":"https://github.com/apache/bookkeeper/commit/baef283841c05bcb4ebceaaa5d540f7a30e4af1a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/baef283841c05bcb4ebceaaa5d540f7a30e4af1a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"366d393f2e58acdd5494da4ae60513c3ae5730c4","url":"https://api.github.com/repos/apache/bookkeeper/commits/366d393f2e58acdd5494da4ae60513c3ae5730c4","html_url":"https://github.com/apache/bookkeeper/commit/366d393f2e58acdd5494da4ae60513c3ae5730c4"}]},{"sha":"66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NmEwZGRlMTRmOGQ2OWViZGQ0MDlmM2EyMDExZDAzYmNkNmI2MmNk","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T10:18:30Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T10:18:30Z"},"message":"BOOKKEEPER-431: Duplicate definition of COOKIES_NODE (uma via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1418637 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"dbd24e1ca30b5a5d925b9490c9030d8d540ba23d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/dbd24e1ca30b5a5d925b9490c9030d8d540ba23d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","html_url":"https://github.com/apache/bookkeeper/commit/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"baef283841c05bcb4ebceaaa5d540f7a30e4af1a","url":"https://api.github.com/repos/apache/bookkeeper/commits/baef283841c05bcb4ebceaaa5d540f7a30e4af1a","html_url":"https://github.com/apache/bookkeeper/commit/baef283841c05bcb4ebceaaa5d540f7a30e4af1a"}]},{"sha":"d0217c170a0906bdf3188cc89a290f6da0950146","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMDIxN2MxNzBhMDkwNmJkZjMxODhjYzg5YTI5MGY2ZGEwOTUwMTQ2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T10:42:51Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T10:42:51Z"},"message":"BOOKKEEPER-431: Duplicate definition of COOKIES_NODE (uma via fpj). \nAdditional commit to fix the DEFAULT_ZK_LEDGERS_ROOT_PATH constant.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1418638 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f246ce4a8fe1af456cb53d06fd689f74280e47ea","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f246ce4a8fe1af456cb53d06fd689f74280e47ea"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d0217c170a0906bdf3188cc89a290f6da0950146","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d0217c170a0906bdf3188cc89a290f6da0950146","html_url":"https://github.com/apache/bookkeeper/commit/d0217c170a0906bdf3188cc89a290f6da0950146","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d0217c170a0906bdf3188cc89a290f6da0950146/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","url":"https://api.github.com/repos/apache/bookkeeper/commits/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd","html_url":"https://github.com/apache/bookkeeper/commit/66a0dde14f8d69ebdd409f3a2011d03bcd6b62cd"}]},{"sha":"40ac04bfee52f2e0fd45397cf5d02fa31236c753","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MGFjMDRiZmVlNTJmMmUwZmQ0NTM5N2NmNWQwMmZhMzEyMzZjNzUz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T15:14:52Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-08T15:14:52Z"},"message":"BOOKKEEPER-474:  BookieReadWriteTest#testShutdown doesn't make sense (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1418685 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"131153c296470e0007abc5ab72200baaba73f2d5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/131153c296470e0007abc5ab72200baaba73f2d5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/40ac04bfee52f2e0fd45397cf5d02fa31236c753","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/40ac04bfee52f2e0fd45397cf5d02fa31236c753","html_url":"https://github.com/apache/bookkeeper/commit/40ac04bfee52f2e0fd45397cf5d02fa31236c753","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/40ac04bfee52f2e0fd45397cf5d02fa31236c753/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"d0217c170a0906bdf3188cc89a290f6da0950146","url":"https://api.github.com/repos/apache/bookkeeper/commits/d0217c170a0906bdf3188cc89a290f6da0950146","html_url":"https://github.com/apache/bookkeeper/commit/d0217c170a0906bdf3188cc89a290f6da0950146"}]},{"sha":"a063f9b19d035d8c2d9e76e3741368cf41e7d292","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMDYzZjliMTlkMDM1ZDhjMmQ5ZTc2ZTM3NDEzNjhjZjQxZTdkMjky","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-10T09:58:19Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-10T09:58:19Z"},"message":"BOOKKEEPER-469: Remove System.out.println from TestLedgerManager (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1419306 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46b38590fd97899ba00d193dc6d6f3422dc52c33","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/46b38590fd97899ba00d193dc6d6f3422dc52c33"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a063f9b19d035d8c2d9e76e3741368cf41e7d292","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a063f9b19d035d8c2d9e76e3741368cf41e7d292","html_url":"https://github.com/apache/bookkeeper/commit/a063f9b19d035d8c2d9e76e3741368cf41e7d292","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a063f9b19d035d8c2d9e76e3741368cf41e7d292/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"40ac04bfee52f2e0fd45397cf5d02fa31236c753","url":"https://api.github.com/repos/apache/bookkeeper/commits/40ac04bfee52f2e0fd45397cf5d02fa31236c753","html_url":"https://github.com/apache/bookkeeper/commit/40ac04bfee52f2e0fd45397cf5d02fa31236c753"}]},{"sha":"7d3dde696ae859297ece4e2c9a047afde4fa5865","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZDNkZGU2OTZhZTg1OTI5N2VjZTRlMmM5YTA0N2FmZGU0ZmE1ODY1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-10T10:04:18Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-10T10:04:18Z"},"message":"BOOKKEEPER-465: CreateNewLog may overwrite lastLogId with smaller value (yixue, fpj via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1419311 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"50eb0de4931e1eee1186b7e7747433643097d8ce","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/50eb0de4931e1eee1186b7e7747433643097d8ce"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7d3dde696ae859297ece4e2c9a047afde4fa5865","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7d3dde696ae859297ece4e2c9a047afde4fa5865","html_url":"https://github.com/apache/bookkeeper/commit/7d3dde696ae859297ece4e2c9a047afde4fa5865","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7d3dde696ae859297ece4e2c9a047afde4fa5865/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"a063f9b19d035d8c2d9e76e3741368cf41e7d292","url":"https://api.github.com/repos/apache/bookkeeper/commits/a063f9b19d035d8c2d9e76e3741368cf41e7d292","html_url":"https://github.com/apache/bookkeeper/commit/a063f9b19d035d8c2d9e76e3741368cf41e7d292"}]},{"sha":"77efd1c00100b533d67e716579b439e94d4050e3","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3N2VmZDFjMDAxMDBiNTMzZDY3ZTcxNjU3OWI0MzllOTRkNDA1MGUz","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-10T15:02:42Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-10T15:02:42Z"},"message":"BOOKKEEPER-498: BookieRecoveryTest.tearDown NPE (fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1419496 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ce602f77e4029f3cec54e64bf9ac7fad5fc0526f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ce602f77e4029f3cec54e64bf9ac7fad5fc0526f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/77efd1c00100b533d67e716579b439e94d4050e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/77efd1c00100b533d67e716579b439e94d4050e3","html_url":"https://github.com/apache/bookkeeper/commit/77efd1c00100b533d67e716579b439e94d4050e3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/77efd1c00100b533d67e716579b439e94d4050e3/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"7d3dde696ae859297ece4e2c9a047afde4fa5865","url":"https://api.github.com/repos/apache/bookkeeper/commits/7d3dde696ae859297ece4e2c9a047afde4fa5865","html_url":"https://github.com/apache/bookkeeper/commit/7d3dde696ae859297ece4e2c9a047afde4fa5865"}]},{"sha":"be155aa0c61f6b7bc0bf3d4f2ea56a9b97e590bf","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiZTE1NWFhMGM2MWY2YjdiYzBiZjNkNGYyZWE1NmE5Yjk3ZTU5MGJm","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-11T10:15:19Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-11T10:15:19Z"},"message":"BOOKKEEPER-491: Hedwig doc for configuration (fpj, sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1420069 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7ba1b2964f21a9b8d79fbac28b8050b8669925ba","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7ba1b2964f21a9b8d79fbac28b8050b8669925ba"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/be155aa0c61f6b7bc0bf3d4f2ea56a9b97e590bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/be155aa0c61f6b7bc0bf3d4f2ea56a9b97e590bf","html_url":"https://github.com/apache/bookkeeper/commit/be155aa0c61f6b7bc0bf3d4f2ea56a9b97e590bf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/be155aa0c61f6b7bc0bf3d4f2ea56a9b97e590bf/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"77efd1c00100b533d67e716579b439e94d4050e3","url":"https://api.github.com/repos/apache/bookkeeper/commits/77efd1c00100b533d67e716579b439e94d4050e3","html_url":"https://github.com/apache/bookkeeper/commit/77efd1c00100b533d67e716579b439e94d4050e3"}]},{"sha":"7467d2697103abba54d8f665724d630721064e78","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3NDY3ZDI2OTcxMDNhYmJhNTRkOGY2NjU3MjRkNjMwNzIxMDY0ZTc4","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-11T17:59:21Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-11T17:59:21Z"},"message":"BOOKKEEPER-495: Revise BK config doc (fpj, ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1420308 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"56e15ced9922e83fbeeae3040dcae53f0f4c5d2c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/56e15ced9922e83fbeeae3040dcae53f0f4c5d2c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7467d2697103abba54d8f665724d630721064e78","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7467d2697103abba54d8f665724d630721064e78","html_url":"https://github.com/apache/bookkeeper/commit/7467d2697103abba54d8f665724d630721064e78","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7467d2697103abba54d8f665724d630721064e78/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"be155aa0c61f6b7bc0bf3d4f2ea56a9b97e590bf","url":"https://api.github.com/repos/apache/bookkeeper/commits/be155aa0c61f6b7bc0bf3d4f2ea56a9b97e590bf","html_url":"https://github.com/apache/bookkeeper/commit/be155aa0c61f6b7bc0bf3d4f2ea56a9b97e590bf"}]},{"sha":"7275006bf7d13194aff768b22da55814e11b1cc2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3Mjc1MDA2YmY3ZDEzMTk0YWZmNzY4YjIyZGE1NTgxNGUxMWIxY2My","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-11T18:16:38Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-11T18:16:38Z"},"message":"BOOKKEEPER-495: Revise BK config doc (fpj, ivank via fpj)\n(a few extra edits to bookieCOnfigParams.textile)\n \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1420318 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5170007640ce1c15485e2d55c236525e5e359e7c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5170007640ce1c15485e2d55c236525e5e359e7c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7275006bf7d13194aff768b22da55814e11b1cc2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7275006bf7d13194aff768b22da55814e11b1cc2","html_url":"https://github.com/apache/bookkeeper/commit/7275006bf7d13194aff768b22da55814e11b1cc2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7275006bf7d13194aff768b22da55814e11b1cc2/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"7467d2697103abba54d8f665724d630721064e78","url":"https://api.github.com/repos/apache/bookkeeper/commits/7467d2697103abba54d8f665724d630721064e78","html_url":"https://github.com/apache/bookkeeper/commit/7467d2697103abba54d8f665724d630721064e78"}]},{"sha":"7fa41ff318a31f973d1de12afe8db0f9893ac653","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZmE0MWZmMzE4YTMxZjk3M2QxZGUxMmFmZThkYjBmOTg5M2FjNjUz","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-12T05:54:23Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-12T05:54:23Z"},"message":"BOOKKEEPER-497: GcLedgersTest has a potential race (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1420532 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"279657aab9cd2185260c2afb10a86f7099c9f93a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/279657aab9cd2185260c2afb10a86f7099c9f93a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7fa41ff318a31f973d1de12afe8db0f9893ac653","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7fa41ff318a31f973d1de12afe8db0f9893ac653","html_url":"https://github.com/apache/bookkeeper/commit/7fa41ff318a31f973d1de12afe8db0f9893ac653","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7fa41ff318a31f973d1de12afe8db0f9893ac653/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"7275006bf7d13194aff768b22da55814e11b1cc2","url":"https://api.github.com/repos/apache/bookkeeper/commits/7275006bf7d13194aff768b22da55814e11b1cc2","html_url":"https://github.com/apache/bookkeeper/commit/7275006bf7d13194aff768b22da55814e11b1cc2"}]},{"sha":"5414cec92a99135c8ba0bc0f6768bd348c65e2fb","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NDE0Y2VjOTJhOTkxMzVjOGJhMGJjMGY2NzY4YmQzNDhjNjVlMmZi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-12T10:20:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-12T10:20:38Z"},"message":"BOOKKEEPER-205: implement a MetaStore based ledger manager for bookkeeper client. (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1420607 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c92156ce5b9ef531f98e1f2dbcc4a6ca8655bc46","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c92156ce5b9ef531f98e1f2dbcc4a6ca8655bc46"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5414cec92a99135c8ba0bc0f6768bd348c65e2fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5414cec92a99135c8ba0bc0f6768bd348c65e2fb","html_url":"https://github.com/apache/bookkeeper/commit/5414cec92a99135c8ba0bc0f6768bd348c65e2fb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5414cec92a99135c8ba0bc0f6768bd348c65e2fb/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7fa41ff318a31f973d1de12afe8db0f9893ac653","url":"https://api.github.com/repos/apache/bookkeeper/commits/7fa41ff318a31f973d1de12afe8db0f9893ac653","html_url":"https://github.com/apache/bookkeeper/commit/7fa41ff318a31f973d1de12afe8db0f9893ac653"}]},{"sha":"55610c26eb3b8b4cd5dd1955a434c2642334c605","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NTYxMGMyNmViM2I4YjRjZDVkZDE5NTVhNDM0YzI2NDIzMzRjNjA1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-12T17:26:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-12T17:26:59Z"},"message":"BOOKKEEPER-493: moveLedgerIndexFile might have chance pickup same directory (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1420854 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"63ea09b8f9edf8850847c25ed8882a2b74bf353e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/63ea09b8f9edf8850847c25ed8882a2b74bf353e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/55610c26eb3b8b4cd5dd1955a434c2642334c605","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/55610c26eb3b8b4cd5dd1955a434c2642334c605","html_url":"https://github.com/apache/bookkeeper/commit/55610c26eb3b8b4cd5dd1955a434c2642334c605","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/55610c26eb3b8b4cd5dd1955a434c2642334c605/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"5414cec92a99135c8ba0bc0f6768bd348c65e2fb","url":"https://api.github.com/repos/apache/bookkeeper/commits/5414cec92a99135c8ba0bc0f6768bd348c65e2fb","html_url":"https://github.com/apache/bookkeeper/commit/5414cec92a99135c8ba0bc0f6768bd348c65e2fb"}]},{"sha":"1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxZTM1ZDVkNWU2ZGU2YTMzY2Q0Y2EyMDBmM2Q1ZDkyZGNmN2NiNThk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-13T06:26:32Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-13T06:26:32Z"},"message":"BOOKKEEPER-404: Deprecate non-SubscriptionOptions Subscriber Apis (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421083 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8741e6a1308e4322ce17c80612b574e9909c1474","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8741e6a1308e4322ce17c80612b574e9909c1474"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d","html_url":"https://github.com/apache/bookkeeper/commit/1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"55610c26eb3b8b4cd5dd1955a434c2642334c605","url":"https://api.github.com/repos/apache/bookkeeper/commits/55610c26eb3b8b4cd5dd1955a434c2642334c605","html_url":"https://github.com/apache/bookkeeper/commit/55610c26eb3b8b4cd5dd1955a434c2642334c605"}]},{"sha":"b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiNmMxYThiYmQ3YzJkNDRjMmVkYjU5ZDk5MzhmYTA3M2Y2ZjQ3OGRl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T11:33:11Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T11:33:11Z"},"message":"BOOKKEEPER-365: Ledger will never recover if one of the quorum bookie is down forever and others dont have entry (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421235 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f077dfa20f89257cf601590e4132c3eb08fd53b2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f077dfa20f89257cf601590e4132c3eb08fd53b2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","html_url":"https://github.com/apache/bookkeeper/commit/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d","url":"https://api.github.com/repos/apache/bookkeeper/commits/1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d","html_url":"https://github.com/apache/bookkeeper/commit/1e35d5d5e6de6a33cd4ca200f3d5d92dcf7cb58d"}]},{"sha":"d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNThhNzFkYmQxZjA3YTNlZGY2NWM0YWY4MGFlMThhNGQ5YTk1NzU1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-13T11:51:05Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-13T11:51:05Z"},"message":"BOOKKEEPER-458:  Annoy BKReadException error when changing ledger. (jiannan via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421239 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b05e5b655752dac0d4b4908c204e7b625a5948c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5b05e5b655752dac0d4b4908c204e7b625a5948c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","html_url":"https://github.com/apache/bookkeeper/commit/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","url":"https://api.github.com/repos/apache/bookkeeper/commits/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de","html_url":"https://github.com/apache/bookkeeper/commit/b6c1a8bbd7c2d44c2edb59d9938fa073f6f478de"}]},{"sha":"496f442a7a68dd549355e845540c6c72c2fbb44c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0OTZmNDQyYTdhNjhkZDU0OTM1NWU4NDU1NDBjNmM3MmMyZmJiNDRj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T12:07:52Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T12:07:52Z"},"message":"BOOKKEEPER-336: bookie readEntries is taking more time if the ensemble has failed bookie(s) (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421242 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97c5c6ee11870b9dc00a6d5cf64c1556f6eb418b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/97c5c6ee11870b9dc00a6d5cf64c1556f6eb418b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/496f442a7a68dd549355e845540c6c72c2fbb44c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/496f442a7a68dd549355e845540c6c72c2fbb44c","html_url":"https://github.com/apache/bookkeeper/commit/496f442a7a68dd549355e845540c6c72c2fbb44c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/496f442a7a68dd549355e845540c6c72c2fbb44c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","url":"https://api.github.com/repos/apache/bookkeeper/commits/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755","html_url":"https://github.com/apache/bookkeeper/commit/d58a71dbd1f07a3edf65c4af80ae18a4d9a95755"}]},{"sha":"d932c9b2181cc9f9b6bb3b43abd5af04cda206b8","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkOTMyYzliMjE4MWNjOWY5YjZiYjNiNDNhYmQ1YWYwNGNkYTIwNmI4","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-13T15:44:19Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-13T15:44:19Z"},"message":"BOOKKEEPER-483: precommit tests only check toplevel rat file, not the one for submodules. (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421346 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"592663eacbe0aa7cdf749791a46c3329f79ac661","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/592663eacbe0aa7cdf749791a46c3329f79ac661"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d932c9b2181cc9f9b6bb3b43abd5af04cda206b8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d932c9b2181cc9f9b6bb3b43abd5af04cda206b8","html_url":"https://github.com/apache/bookkeeper/commit/d932c9b2181cc9f9b6bb3b43abd5af04cda206b8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d932c9b2181cc9f9b6bb3b43abd5af04cda206b8/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"496f442a7a68dd549355e845540c6c72c2fbb44c","url":"https://api.github.com/repos/apache/bookkeeper/commits/496f442a7a68dd549355e845540c6c72c2fbb44c","html_url":"https://github.com/apache/bookkeeper/commit/496f442a7a68dd549355e845540c6c72c2fbb44c"}]},{"sha":"3a950e6f7f5ca8b646e82c61c98a65991df8d88f","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYTk1MGU2ZjdmNWNhOGI2NDZlODJjNjFjOThhNjU5OTFkZjhkODhm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T17:05:57Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T17:05:57Z"},"message":"BOOKKEEPER-262: Implement a meta store based hedwig metadata manager. (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421384 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8f89a82d2e7175ef3f30e0292bdca5112153e1f7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8f89a82d2e7175ef3f30e0292bdca5112153e1f7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3a950e6f7f5ca8b646e82c61c98a65991df8d88f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3a950e6f7f5ca8b646e82c61c98a65991df8d88f","html_url":"https://github.com/apache/bookkeeper/commit/3a950e6f7f5ca8b646e82c61c98a65991df8d88f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3a950e6f7f5ca8b646e82c61c98a65991df8d88f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d932c9b2181cc9f9b6bb3b43abd5af04cda206b8","url":"https://api.github.com/repos/apache/bookkeeper/commits/d932c9b2181cc9f9b6bb3b43abd5af04cda206b8","html_url":"https://github.com/apache/bookkeeper/commit/d932c9b2181cc9f9b6bb3b43abd5af04cda206b8"}]},{"sha":"4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MzIwZjZmOGEyNjIxYzg1MmMxOWZhODFiYTdlZGQ4YTllNmM4N2E3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T17:12:42Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T17:12:42Z"},"message":"BOOKKEEPER-341: add documentation for bookkeeper ledger manager interface. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421388 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a629b611d3d4dc144349eb96aa9a19838d83d71b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a629b611d3d4dc144349eb96aa9a19838d83d71b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7","html_url":"https://github.com/apache/bookkeeper/commit/4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"3a950e6f7f5ca8b646e82c61c98a65991df8d88f","url":"https://api.github.com/repos/apache/bookkeeper/commits/3a950e6f7f5ca8b646e82c61c98a65991df8d88f","html_url":"https://github.com/apache/bookkeeper/commit/3a950e6f7f5ca8b646e82c61c98a65991df8d88f"}]},{"sha":"e0011de4475969c19023694f5074b50e5d12a08f","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMDAxMWRlNDQ3NTk2OWMxOTAyMzY5NGY1MDc0YjUwZTVkMTJhMDhm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T17:34:03Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-13T17:34:03Z"},"message":"BOOKKEEPER-408: BookieReadWriteTest will enter the endless loop and will not leave out (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421401 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb5bffcee92cd44f5fe63710485cb0bc5d000bad","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cb5bffcee92cd44f5fe63710485cb0bc5d000bad"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e0011de4475969c19023694f5074b50e5d12a08f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e0011de4475969c19023694f5074b50e5d12a08f","html_url":"https://github.com/apache/bookkeeper/commit/e0011de4475969c19023694f5074b50e5d12a08f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e0011de4475969c19023694f5074b50e5d12a08f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7","url":"https://api.github.com/repos/apache/bookkeeper/commits/4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7","html_url":"https://github.com/apache/bookkeeper/commit/4320f6f8a2621c852c19fa81ba7edd8a9e6c87a7"}]},{"sha":"8125700069b14f80ebd135ddd1a2b67de256cb1e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MTI1NzAwMDY5YjE0ZjgwZWJkMTM1ZGRkMWEyYjY3ZGUyNTZjYjFl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-14T10:18:04Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-14T10:18:04Z"},"message":"BOOKKEEPER-426: Make auditor Vote znode store a protobuf containing the host that voted (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421781 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35d802cef01c73201b88b67efbbd2a6b11002bb6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/35d802cef01c73201b88b67efbbd2a6b11002bb6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8125700069b14f80ebd135ddd1a2b67de256cb1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8125700069b14f80ebd135ddd1a2b67de256cb1e","html_url":"https://github.com/apache/bookkeeper/commit/8125700069b14f80ebd135ddd1a2b67de256cb1e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8125700069b14f80ebd135ddd1a2b67de256cb1e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e0011de4475969c19023694f5074b50e5d12a08f","url":"https://api.github.com/repos/apache/bookkeeper/commits/e0011de4475969c19023694f5074b50e5d12a08f","html_url":"https://github.com/apache/bookkeeper/commit/e0011de4475969c19023694f5074b50e5d12a08f"}]},{"sha":"dffe13f5b16200e192c36547021c34c186d00de8","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkZmZlMTNmNWIxNjIwMGUxOTJjMzY1NDcwMjFjMzRjMTg2ZDAwZGU4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-14T14:14:53Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-14T14:14:53Z"},"message":"BOOKKEEPER-504: Fix findbugs warning in PendingReadOp (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1421875 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b48112fcdfa284aa1200169bf4396f8b51b74351","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b48112fcdfa284aa1200169bf4396f8b51b74351"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/dffe13f5b16200e192c36547021c34c186d00de8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/dffe13f5b16200e192c36547021c34c186d00de8","html_url":"https://github.com/apache/bookkeeper/commit/dffe13f5b16200e192c36547021c34c186d00de8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/dffe13f5b16200e192c36547021c34c186d00de8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"8125700069b14f80ebd135ddd1a2b67de256cb1e","url":"https://api.github.com/repos/apache/bookkeeper/commits/8125700069b14f80ebd135ddd1a2b67de256cb1e","html_url":"https://github.com/apache/bookkeeper/commit/8125700069b14f80ebd135ddd1a2b67de256cb1e"}]},{"sha":"e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","node_id":"MDY6Q29tbWl0MTU3NTk1NjplNGE0MmFmNjkzM2MwY2IwYmU0NDFiM2Q5ZDVkMjg3OTBhYTlhN2I5","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-14T19:26:51Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-14T19:26:51Z"},"message":"BOOKKEEPER-428: Expose command options in bookie scripts to disable/enable auto recovery temporarily (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1422054 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d710f0c25eeb728740c75166b7d22739629c521","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7d710f0c25eeb728740c75166b7d22739629c521"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","html_url":"https://github.com/apache/bookkeeper/commit/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"dffe13f5b16200e192c36547021c34c186d00de8","url":"https://api.github.com/repos/apache/bookkeeper/commits/dffe13f5b16200e192c36547021c34c186d00de8","html_url":"https://github.com/apache/bookkeeper/commit/dffe13f5b16200e192c36547021c34c186d00de8"}]},{"sha":"5428454ca34823a225eafb114128931d313d9e2f","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NDI4NDU0Y2EzNDgyM2EyMjVlYWZiMTE0MTI4OTMxZDMxM2Q5ZTJm","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-14T19:29:17Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-14T19:29:17Z"},"message":"BOOKKEEPER-428: Expose command options in bookie scripts to disable/enable auto recovery temporarily (rakesh, ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1422056 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"451620377ba56bcf3263f2746cae729299d37d04","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/451620377ba56bcf3263f2746cae729299d37d04"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5428454ca34823a225eafb114128931d313d9e2f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5428454ca34823a225eafb114128931d313d9e2f","html_url":"https://github.com/apache/bookkeeper/commit/5428454ca34823a225eafb114128931d313d9e2f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5428454ca34823a225eafb114128931d313d9e2f/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","url":"https://api.github.com/repos/apache/bookkeeper/commits/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9","html_url":"https://github.com/apache/bookkeeper/commit/e4a42af6933c0cb0be441b3d9d5d28790aa9a7b9"}]},{"sha":"8c1e71f2b9cb8425046517f69a5024c31d47783c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4YzFlNzFmMmI5Y2I4NDI1MDQ2NTE3ZjY5YTUwMjRjMzFkNDc3ODNj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-15T01:45:06Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-15T01:45:06Z"},"message":"BOOKKEEPER-511: BookieShell is very noisy (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1422173 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a49bbe440c123419a913f6a74a13ec328a2e5cc4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a49bbe440c123419a913f6a74a13ec328a2e5cc4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8c1e71f2b9cb8425046517f69a5024c31d47783c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8c1e71f2b9cb8425046517f69a5024c31d47783c","html_url":"https://github.com/apache/bookkeeper/commit/8c1e71f2b9cb8425046517f69a5024c31d47783c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8c1e71f2b9cb8425046517f69a5024c31d47783c/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"5428454ca34823a225eafb114128931d313d9e2f","url":"https://api.github.com/repos/apache/bookkeeper/commits/5428454ca34823a225eafb114128931d313d9e2f","html_url":"https://github.com/apache/bookkeeper/commit/5428454ca34823a225eafb114128931d313d9e2f"}]},{"sha":"d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkMWEzYzZkMTFlYjQ0MzNjN2UyNWVlYmE2YWMyMWZlMmRiM2EyNjk2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-15T02:08:32Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-15T02:08:32Z"},"message":"BOOKKEEPER-512: BookieZkExpireTest fails periodically (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1422174 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"77f7232a4cde19a3936db351efb159ac614c6f63","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/77f7232a4cde19a3936db351efb159ac614c6f63"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696","html_url":"https://github.com/apache/bookkeeper/commit/d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8c1e71f2b9cb8425046517f69a5024c31d47783c","url":"https://api.github.com/repos/apache/bookkeeper/commits/8c1e71f2b9cb8425046517f69a5024c31d47783c","html_url":"https://github.com/apache/bookkeeper/commit/8c1e71f2b9cb8425046517f69a5024c31d47783c"}]},{"sha":"a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","node_id":"MDY6Q29tbWl0MTU3NTk1NjphOGQ2MWU2NDYwNGE2ZWE1Y2U2Y2FjY2M1ZDI5YWVhMmFiYWM2OWYz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-17T14:42:23Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-17T14:42:23Z"},"message":"BOOKKEEPER-375: Document about Auto replication service in BK (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1422952 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c8906609850184b38bbb4819e773baeeec24b5e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7c8906609850184b38bbb4819e773baeeec24b5e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","html_url":"https://github.com/apache/bookkeeper/commit/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696","url":"https://api.github.com/repos/apache/bookkeeper/commits/d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696","html_url":"https://github.com/apache/bookkeeper/commit/d1a3c6d11eb4433c7e25eeba6ac21fe2db3a2696"}]},{"sha":"3ab615ebbce3871b1d15099f4e24ecaae9e83d8a","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYWI2MTVlYmJjZTM4NzFiMWQxNTA5OWY0ZTI0ZWNhYWU5ZTgzZDhh","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-18T05:48:26Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-18T05:48:26Z"},"message":"BOOKKEEPER-490: add documentation for MetaStore interface (sijie, ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1423278 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"55741a88b48b8fc2f28b3dcf8852c0ed0a1255a1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/55741a88b48b8fc2f28b3dcf8852c0ed0a1255a1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3ab615ebbce3871b1d15099f4e24ecaae9e83d8a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3ab615ebbce3871b1d15099f4e24ecaae9e83d8a","html_url":"https://github.com/apache/bookkeeper/commit/3ab615ebbce3871b1d15099f4e24ecaae9e83d8a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3ab615ebbce3871b1d15099f4e24ecaae9e83d8a/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","url":"https://api.github.com/repos/apache/bookkeeper/commits/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3","html_url":"https://github.com/apache/bookkeeper/commit/a8d61e64604a6ea5ce6caccc5d29aea2abac69f3"}]},{"sha":"c784b602325361a7606f2f53b677996e2c23f730","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjNzg0YjYwMjMyNTM2MWE3NjA2ZjJmNTNiNjc3OTk2ZTJjMjNmNzMw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-18T05:52:21Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-18T05:52:21Z"},"message":"BOOKKEEPER-342: add documentation for hedwig metadata manager interface. (sijie, ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1423281 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"93f31ad7a9e8f72464f9629d4eb5c76ca77f5b42","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/93f31ad7a9e8f72464f9629d4eb5c76ca77f5b42"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c784b602325361a7606f2f53b677996e2c23f730","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c784b602325361a7606f2f53b677996e2c23f730","html_url":"https://github.com/apache/bookkeeper/commit/c784b602325361a7606f2f53b677996e2c23f730","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c784b602325361a7606f2f53b677996e2c23f730/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"3ab615ebbce3871b1d15099f4e24ecaae9e83d8a","url":"https://api.github.com/repos/apache/bookkeeper/commits/3ab615ebbce3871b1d15099f4e24ecaae9e83d8a","html_url":"https://github.com/apache/bookkeeper/commit/3ab615ebbce3871b1d15099f4e24ecaae9e83d8a"}]},{"sha":"a4d8a34fb0779551208ad003b950e0b9a9d86d42","node_id":"MDY6Q29tbWl0MTU3NTk1NjphNGQ4YTM0ZmIwNzc5NTUxMjA4YWQwMDNiOTUwZTBiOWE5ZDg2ZDQy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-18T10:55:34Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-18T10:55:34Z"},"message":"BOOKKEEPER-509: TestBookKeeperPersistenceManager failed on latest trunk (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1423405 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"086eb1787480cf02e09007b678efaff48727971a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/086eb1787480cf02e09007b678efaff48727971a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a4d8a34fb0779551208ad003b950e0b9a9d86d42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a4d8a34fb0779551208ad003b950e0b9a9d86d42","html_url":"https://github.com/apache/bookkeeper/commit/a4d8a34fb0779551208ad003b950e0b9a9d86d42","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a4d8a34fb0779551208ad003b950e0b9a9d86d42/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c784b602325361a7606f2f53b677996e2c23f730","url":"https://api.github.com/repos/apache/bookkeeper/commits/c784b602325361a7606f2f53b677996e2c23f730","html_url":"https://github.com/apache/bookkeeper/commit/c784b602325361a7606f2f53b677996e2c23f730"}]},{"sha":"e5b0dd0d9e47394202f5a20cedf409f487d90beb","node_id":"MDY6Q29tbWl0MTU3NTk1NjplNWIwZGQwZDllNDczOTQyMDJmNWEyMGNlZGY0MDlmNDg3ZDkwYmVi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-18T11:00:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-18T11:00:49Z"},"message":"BOOKKEEPER-496: Ensure that the auditor and replication worker will shutdown if they lose their ZK session (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1423409 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e865bb161b39183058a19e9e6716fc86436526a9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e865bb161b39183058a19e9e6716fc86436526a9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e5b0dd0d9e47394202f5a20cedf409f487d90beb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e5b0dd0d9e47394202f5a20cedf409f487d90beb","html_url":"https://github.com/apache/bookkeeper/commit/e5b0dd0d9e47394202f5a20cedf409f487d90beb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e5b0dd0d9e47394202f5a20cedf409f487d90beb/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"a4d8a34fb0779551208ad003b950e0b9a9d86d42","url":"https://api.github.com/repos/apache/bookkeeper/commits/a4d8a34fb0779551208ad003b950e0b9a9d86d42","html_url":"https://github.com/apache/bookkeeper/commit/a4d8a34fb0779551208ad003b950e0b9a9d86d42"}]},{"sha":"d69986c4df6b51ed6ed27c5f45a7b6850e69dacd","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNjk5ODZjNGRmNmI1MWVkNmVkMjdjNWY0NWE3YjY4NTBlNjlkYWNk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-18T12:04:51Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2012-12-18T12:04:51Z"},"message":"BOOKKEEPER-500: Fencing doesn't work when restarting bookies. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1423419 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3ec5a619b9e7997e43d8ddc18999ae8a9b4ff733","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3ec5a619b9e7997e43d8ddc18999ae8a9b4ff733"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d69986c4df6b51ed6ed27c5f45a7b6850e69dacd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d69986c4df6b51ed6ed27c5f45a7b6850e69dacd","html_url":"https://github.com/apache/bookkeeper/commit/d69986c4df6b51ed6ed27c5f45a7b6850e69dacd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d69986c4df6b51ed6ed27c5f45a7b6850e69dacd/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e5b0dd0d9e47394202f5a20cedf409f487d90beb","url":"https://api.github.com/repos/apache/bookkeeper/commits/e5b0dd0d9e47394202f5a20cedf409f487d90beb","html_url":"https://github.com/apache/bookkeeper/commit/e5b0dd0d9e47394202f5a20cedf409f487d90beb"}]},{"sha":"a3da8c74c4226b7d92e9d0eba9591334351afa45","node_id":"MDY6Q29tbWl0MTU3NTk1NjphM2RhOGM3NGM0MjI2YjdkOTJlOWQwZWJhOTU5MTMzNDM1MWFmYTQ1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-20T05:48:56Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-20T05:48:56Z"},"message":"BOOKKEEPER-520: BookieFailureTest hangs on precommit build (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1424335 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7132c650a73f586cee9b6195739246b153aa4437","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7132c650a73f586cee9b6195739246b153aa4437"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a3da8c74c4226b7d92e9d0eba9591334351afa45","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a3da8c74c4226b7d92e9d0eba9591334351afa45","html_url":"https://github.com/apache/bookkeeper/commit/a3da8c74c4226b7d92e9d0eba9591334351afa45","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a3da8c74c4226b7d92e9d0eba9591334351afa45/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"d69986c4df6b51ed6ed27c5f45a7b6850e69dacd","url":"https://api.github.com/repos/apache/bookkeeper/commits/d69986c4df6b51ed6ed27c5f45a7b6850e69dacd","html_url":"https://github.com/apache/bookkeeper/commit/d69986c4df6b51ed6ed27c5f45a7b6850e69dacd"}]},{"sha":"fa13426970bd4b6d7ffc086e776559f87349ef71","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYTEzNDI2OTcwYmQ0YjZkN2ZmYzA4NmU3NzY1NTlmODczNDllZjcx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-24T04:50:02Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-24T04:50:02Z"},"message":"BOOKKEEPER-463: Refactor garbage collection code for ease to plugin different GC algorithm. (Fangmin, ivank, fpj via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1425585 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bbfbdced00c1898c7bdbd4a7bf87d3d15bb18f1d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bbfbdced00c1898c7bdbd4a7bf87d3d15bb18f1d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/fa13426970bd4b6d7ffc086e776559f87349ef71","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/fa13426970bd4b6d7ffc086e776559f87349ef71","html_url":"https://github.com/apache/bookkeeper/commit/fa13426970bd4b6d7ffc086e776559f87349ef71","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/fa13426970bd4b6d7ffc086e776559f87349ef71/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"a3da8c74c4226b7d92e9d0eba9591334351afa45","url":"https://api.github.com/repos/apache/bookkeeper/commits/a3da8c74c4226b7d92e9d0eba9591334351afa45","html_url":"https://github.com/apache/bookkeeper/commit/a3da8c74c4226b7d92e9d0eba9591334351afa45"}]},{"sha":"a0ae97c232caafa1fda9955f9aaa9f99564b74fe","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMGFlOTdjMjMyY2FhZmExZmRhOTk1NWY5YWFhOWY5OTU2NGI3NGZl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-24T05:05:49Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-24T05:05:49Z"},"message":"BOOKKEEPER-522: TestHedwigHub is failing silently on Jenkins (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1425586 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f18db9a7935983eba26fc5407090b37d3b0bef87","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f18db9a7935983eba26fc5407090b37d3b0bef87"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a0ae97c232caafa1fda9955f9aaa9f99564b74fe","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a0ae97c232caafa1fda9955f9aaa9f99564b74fe","html_url":"https://github.com/apache/bookkeeper/commit/a0ae97c232caafa1fda9955f9aaa9f99564b74fe","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a0ae97c232caafa1fda9955f9aaa9f99564b74fe/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"fa13426970bd4b6d7ffc086e776559f87349ef71","url":"https://api.github.com/repos/apache/bookkeeper/commits/fa13426970bd4b6d7ffc086e776559f87349ef71","html_url":"https://github.com/apache/bookkeeper/commit/fa13426970bd4b6d7ffc086e776559f87349ef71"}]},{"sha":"7de3ecbd5d5052138a9c4aded9256c5030ab2f6d","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZGUzZWNiZDVkNTA1MjEzOGE5YzRhZGVkOTI1NmM1MDMwYWIyZjZk","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-24T05:23:12Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2012-12-24T05:23:12Z"},"message":"BOOKKEEPER-447: Bookie can fail to recover if index pages flushed before ledger flush acknowledged (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1425588 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b4a630d417c960590296a5e9286e8e472a0dbd6e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b4a630d417c960590296a5e9286e8e472a0dbd6e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7de3ecbd5d5052138a9c4aded9256c5030ab2f6d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7de3ecbd5d5052138a9c4aded9256c5030ab2f6d","html_url":"https://github.com/apache/bookkeeper/commit/7de3ecbd5d5052138a9c4aded9256c5030ab2f6d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7de3ecbd5d5052138a9c4aded9256c5030ab2f6d/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"a0ae97c232caafa1fda9955f9aaa9f99564b74fe","url":"https://api.github.com/repos/apache/bookkeeper/commits/a0ae97c232caafa1fda9955f9aaa9f99564b74fe","html_url":"https://github.com/apache/bookkeeper/commit/a0ae97c232caafa1fda9955f9aaa9f99564b74fe"}]},{"sha":"8a396e1f74ff9f9cf25d3b4bfc43c8a112992555","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4YTM5NmUxZjc0ZmY5ZjljZjI1ZDNiNGJmYzQzYzhhMTEyOTkyNTU1","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-27T22:16:40Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-27T22:16:40Z"},"message":"BOOKKEEPER-520: BookieFailureTest hangs on precommit build (sijie via fpj, jira reopened)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1426349 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01d80c547aae127b5f9dcf74654f4462f3460e35","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/01d80c547aae127b5f9dcf74654f4462f3460e35"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8a396e1f74ff9f9cf25d3b4bfc43c8a112992555","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8a396e1f74ff9f9cf25d3b4bfc43c8a112992555","html_url":"https://github.com/apache/bookkeeper/commit/8a396e1f74ff9f9cf25d3b4bfc43c8a112992555","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8a396e1f74ff9f9cf25d3b4bfc43c8a112992555/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"7de3ecbd5d5052138a9c4aded9256c5030ab2f6d","url":"https://api.github.com/repos/apache/bookkeeper/commits/7de3ecbd5d5052138a9c4aded9256c5030ab2f6d","html_url":"https://github.com/apache/bookkeeper/commit/7de3ecbd5d5052138a9c4aded9256c5030ab2f6d"}]},{"sha":"ea36e59a1c314bf698d572e5f714e0b68e554a6e","node_id":"MDY6Q29tbWl0MTU3NTk1NjplYTM2ZTU5YTFjMzE0YmY2OThkNTcyZTVmNzE0ZTBiNjhlNTU0YTZl","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-28T11:32:15Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-28T11:32:15Z"},"message":"BOOKKEEPER-514: TestDeadLock hanging sometimes (ivank, sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1426461 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7837e9f85e7a67aec1c66bc681432d229b26b600","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7837e9f85e7a67aec1c66bc681432d229b26b600"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ea36e59a1c314bf698d572e5f714e0b68e554a6e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ea36e59a1c314bf698d572e5f714e0b68e554a6e","html_url":"https://github.com/apache/bookkeeper/commit/ea36e59a1c314bf698d572e5f714e0b68e554a6e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ea36e59a1c314bf698d572e5f714e0b68e554a6e/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"8a396e1f74ff9f9cf25d3b4bfc43c8a112992555","url":"https://api.github.com/repos/apache/bookkeeper/commits/8a396e1f74ff9f9cf25d3b4bfc43c8a112992555","html_url":"https://github.com/apache/bookkeeper/commit/8a396e1f74ff9f9cf25d3b4bfc43c8a112992555"}]},{"sha":"7b2b91579000bc99d6fdded3aefb349975058c6f","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YjJiOTE1NzkwMDBiYzk5ZDZmZGRlZDNhZWZiMzQ5OTc1MDU4YzZm","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-29T15:31:46Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2012-12-29T15:31:46Z"},"message":"BOOKKEEPER-523: Every test should have a timeout (ivank, sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1426772 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"46f5cd6e18bf3e901c815746df3467c608cf82f8","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/46f5cd6e18bf3e901c815746df3467c608cf82f8"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7b2b91579000bc99d6fdded3aefb349975058c6f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7b2b91579000bc99d6fdded3aefb349975058c6f","html_url":"https://github.com/apache/bookkeeper/commit/7b2b91579000bc99d6fdded3aefb349975058c6f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7b2b91579000bc99d6fdded3aefb349975058c6f/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea36e59a1c314bf698d572e5f714e0b68e554a6e","url":"https://api.github.com/repos/apache/bookkeeper/commits/ea36e59a1c314bf698d572e5f714e0b68e554a6e","html_url":"https://github.com/apache/bookkeeper/commit/ea36e59a1c314bf698d572e5f714e0b68e554a6e"}]},{"sha":"a27b64e340a6ad12f1e9588d1d55fa51f0b2d1f0","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMjdiNjRlMzQwYTZhZDEyZjFlOTU4OGQxZDU1ZmE1MWYwYjJkMWYw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-02T21:24:33Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-02T21:24:33Z"},"message":"BOOKKEEPER-55: SubscribeReconnectRetryTask might retry subscription endlessly when another subscription is already successfully created previously (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1428059 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ebfe0f4b97d785334a31460479ef667c3513f1e1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ebfe0f4b97d785334a31460479ef667c3513f1e1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a27b64e340a6ad12f1e9588d1d55fa51f0b2d1f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a27b64e340a6ad12f1e9588d1d55fa51f0b2d1f0","html_url":"https://github.com/apache/bookkeeper/commit/a27b64e340a6ad12f1e9588d1d55fa51f0b2d1f0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a27b64e340a6ad12f1e9588d1d55fa51f0b2d1f0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7b2b91579000bc99d6fdded3aefb349975058c6f","url":"https://api.github.com/repos/apache/bookkeeper/commits/7b2b91579000bc99d6fdded3aefb349975058c6f","html_url":"https://github.com/apache/bookkeeper/commit/7b2b91579000bc99d6fdded3aefb349975058c6f"}]},{"sha":"b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiNGU5ODViMzJjYmI1YWE3YzZiMTA5ODk4ZjlkOGJmNTFiMmZkMzMw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-03T10:06:24Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-03T10:06:24Z"},"message":"BOOKKEEPER-409: Integration Test - Perform bookie rereplication cycle by Auditor-RW processes (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1428258 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2414eef4fd9a97a9c2508a4c5ec9c572b609f2b4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2414eef4fd9a97a9c2508a4c5ec9c572b609f2b4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330","html_url":"https://github.com/apache/bookkeeper/commit/b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"a27b64e340a6ad12f1e9588d1d55fa51f0b2d1f0","url":"https://api.github.com/repos/apache/bookkeeper/commits/a27b64e340a6ad12f1e9588d1d55fa51f0b2d1f0","html_url":"https://github.com/apache/bookkeeper/commit/a27b64e340a6ad12f1e9588d1d55fa51f0b2d1f0"}]},{"sha":"ee29f75f3f6a0168008da2e424e4174f2aee8cbb","node_id":"MDY6Q29tbWl0MTU3NTk1NjplZTI5Zjc1ZjNmNmEwMTY4MDA4ZGEyZTQyNGU0MTc0ZjJhZWU4Y2Ji","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-03T11:07:56Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-03T11:07:56Z"},"message":"BOOKKEEPER-507: Race condition happens if closeSubscription and subscribe happened at the same time (in multiplexed client). (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1428277 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e7bac60c3650a159b53fe9cd196e0ec07915e1d9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e7bac60c3650a159b53fe9cd196e0ec07915e1d9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ee29f75f3f6a0168008da2e424e4174f2aee8cbb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ee29f75f3f6a0168008da2e424e4174f2aee8cbb","html_url":"https://github.com/apache/bookkeeper/commit/ee29f75f3f6a0168008da2e424e4174f2aee8cbb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ee29f75f3f6a0168008da2e424e4174f2aee8cbb/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330","url":"https://api.github.com/repos/apache/bookkeeper/commits/b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330","html_url":"https://github.com/apache/bookkeeper/commit/b4e985b32cbb5aa7c6b109898f9d8bf51b2fd330"}]},{"sha":"005b62cc60093dd5b32d4abecd06c2e441bc62ae","node_id":"MDY6Q29tbWl0MTU3NTk1NjowMDViNjJjYzYwMDkzZGQ1YjMyZDRhYmVjZDA2YzJlNDQxYmM2MmFl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-04T10:32:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-04T10:32:49Z"},"message":"BOOKKEEPER-293: Periodic checking of ledger replication status (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1428777 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a64e2e08fa871715352c27e8cff1bbbe5588825","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7a64e2e08fa871715352c27e8cff1bbbe5588825"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/005b62cc60093dd5b32d4abecd06c2e441bc62ae","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/005b62cc60093dd5b32d4abecd06c2e441bc62ae","html_url":"https://github.com/apache/bookkeeper/commit/005b62cc60093dd5b32d4abecd06c2e441bc62ae","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/005b62cc60093dd5b32d4abecd06c2e441bc62ae/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ee29f75f3f6a0168008da2e424e4174f2aee8cbb","url":"https://api.github.com/repos/apache/bookkeeper/commits/ee29f75f3f6a0168008da2e424e4174f2aee8cbb","html_url":"https://github.com/apache/bookkeeper/commit/ee29f75f3f6a0168008da2e424e4174f2aee8cbb"}]},{"sha":"f80dcedaeea5f701822f02484c098cf4df2f04da","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmODBkY2VkYWVlYTVmNzAxODIyZjAyNDg0YzA5OGNmNGRmMmYwNGRh","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-07T02:48:26Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-07T02:48:26Z"},"message":"BOOKKEEPER-524: Bookie journal filesystem gets full after SyncThread is terminated with exception (Matteo, fpj via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1429650 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"612384edb115a0f02feeb202e8e5ea6a569a4001","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/612384edb115a0f02feeb202e8e5ea6a569a4001"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f80dcedaeea5f701822f02484c098cf4df2f04da","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f80dcedaeea5f701822f02484c098cf4df2f04da","html_url":"https://github.com/apache/bookkeeper/commit/f80dcedaeea5f701822f02484c098cf4df2f04da","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f80dcedaeea5f701822f02484c098cf4df2f04da/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"005b62cc60093dd5b32d4abecd06c2e441bc62ae","url":"https://api.github.com/repos/apache/bookkeeper/commits/005b62cc60093dd5b32d4abecd06c2e441bc62ae","html_url":"https://github.com/apache/bookkeeper/commit/005b62cc60093dd5b32d4abecd06c2e441bc62ae"}]},{"sha":"b625fdc27a429341143e204338cf5deab3188e9e","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiNjI1ZmRjMjdhNDI5MzQxMTQzZTIwNDMzOGNmNWRlYWIzMTg4ZTll","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-07T11:25:06Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-07T11:25:06Z"},"message":"BOOKKEEPER-355: Ledger recovery will mark ledger as closed with -1, in case of slow bookie is added to ensemble during recovery add (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1429756 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ebce665e8dee4441d9e07046b31b9662eeb3243","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0ebce665e8dee4441d9e07046b31b9662eeb3243"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b625fdc27a429341143e204338cf5deab3188e9e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b625fdc27a429341143e204338cf5deab3188e9e","html_url":"https://github.com/apache/bookkeeper/commit/b625fdc27a429341143e204338cf5deab3188e9e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b625fdc27a429341143e204338cf5deab3188e9e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f80dcedaeea5f701822f02484c098cf4df2f04da","url":"https://api.github.com/repos/apache/bookkeeper/commits/f80dcedaeea5f701822f02484c098cf4df2f04da","html_url":"https://github.com/apache/bookkeeper/commit/f80dcedaeea5f701822f02484c098cf4df2f04da"}]},{"sha":"f7ce39d522827a0359a0183eae02694ebb35bafd","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmN2NlMzlkNTIyODI3YTAzNTlhMDE4M2VhZTAyNjk0ZWJiMzViYWZk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-07T21:53:54Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-07T21:53:54Z"},"message":"BOOKKEEPER-534: Flakeyness in AuditorBookieTest (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1430041 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5a1b332c77adbbbd4a771929c1985a085edc8008","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5a1b332c77adbbbd4a771929c1985a085edc8008"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f7ce39d522827a0359a0183eae02694ebb35bafd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f7ce39d522827a0359a0183eae02694ebb35bafd","html_url":"https://github.com/apache/bookkeeper/commit/f7ce39d522827a0359a0183eae02694ebb35bafd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f7ce39d522827a0359a0183eae02694ebb35bafd/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b625fdc27a429341143e204338cf5deab3188e9e","url":"https://api.github.com/repos/apache/bookkeeper/commits/b625fdc27a429341143e204338cf5deab3188e9e","html_url":"https://github.com/apache/bookkeeper/commit/b625fdc27a429341143e204338cf5deab3188e9e"}]},{"sha":"ed9b6037be51845f7cab2446593df695ffcede59","node_id":"MDY6Q29tbWl0MTU3NTk1NjplZDliNjAzN2JlNTE4NDVmN2NhYjI0NDY1OTNkZjY5NWZmY2VkZTU5","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-07T23:44:33Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-07T23:44:33Z"},"message":"BOOKKEEPER-532: AbstractSubscriptionManager#AcquireOp read subscriptions every time even it already owned the topic. (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1430091 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1cdd224aae3dceaf9e8c6f1b74ce5b413c4bf8df","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1cdd224aae3dceaf9e8c6f1b74ce5b413c4bf8df"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ed9b6037be51845f7cab2446593df695ffcede59","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ed9b6037be51845f7cab2446593df695ffcede59","html_url":"https://github.com/apache/bookkeeper/commit/ed9b6037be51845f7cab2446593df695ffcede59","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ed9b6037be51845f7cab2446593df695ffcede59/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"f7ce39d522827a0359a0183eae02694ebb35bafd","url":"https://api.github.com/repos/apache/bookkeeper/commits/f7ce39d522827a0359a0183eae02694ebb35bafd","html_url":"https://github.com/apache/bookkeeper/commit/f7ce39d522827a0359a0183eae02694ebb35bafd"}]},{"sha":"faf407d5d40e9d476bab2a926f41b993bf87098f","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmYWY0MDdkNWQ0MGU5ZDQ3NmJhYjJhOTI2ZjQxYjk5M2JmODcwOThm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-09T11:29:39Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-09T11:29:39Z"},"message":"BOOKKEEPER-531: Cache thread should wait until old entries are collected (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1430795 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7d399d4fc5b19ce93007edabdd4f82ae15aa2aed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7d399d4fc5b19ce93007edabdd4f82ae15aa2aed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/faf407d5d40e9d476bab2a926f41b993bf87098f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/faf407d5d40e9d476bab2a926f41b993bf87098f","html_url":"https://github.com/apache/bookkeeper/commit/faf407d5d40e9d476bab2a926f41b993bf87098f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/faf407d5d40e9d476bab2a926f41b993bf87098f/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ed9b6037be51845f7cab2446593df695ffcede59","url":"https://api.github.com/repos/apache/bookkeeper/commits/ed9b6037be51845f7cab2446593df695ffcede59","html_url":"https://github.com/apache/bookkeeper/commit/ed9b6037be51845f7cab2446593df695ffcede59"}]},{"sha":"55a6e1b983420b40813b327f67bbbff8196a8e41","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NWE2ZTFiOTgzNDIwYjQwODEzYjMyN2Y2N2JiYmZmODE5NmE4ZTQx","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-09T15:34:38Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-09T15:34:38Z"},"message":"BOOKKEEPER-541: Add guava to notice file (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1430898 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"70c5f3590c9c59fdf5799660d030cba6c890bade","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/70c5f3590c9c59fdf5799660d030cba6c890bade"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/55a6e1b983420b40813b327f67bbbff8196a8e41","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/55a6e1b983420b40813b327f67bbbff8196a8e41","html_url":"https://github.com/apache/bookkeeper/commit/55a6e1b983420b40813b327f67bbbff8196a8e41","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/55a6e1b983420b40813b327f67bbbff8196a8e41/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"faf407d5d40e9d476bab2a926f41b993bf87098f","url":"https://api.github.com/repos/apache/bookkeeper/commits/faf407d5d40e9d476bab2a926f41b993bf87098f","html_url":"https://github.com/apache/bookkeeper/commit/faf407d5d40e9d476bab2a926f41b993bf87098f"}]},{"sha":"f0db18abedd30af1d6191d068652b93db0c68fc6","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMGRiMThhYmVkZDMwYWYxZDYxOTFkMDY4NjUyYjkzZGIwYzY4ZmM2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-09T16:18:07Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-09T16:18:07Z"},"message":"BOOKKEEPER-533: TestSubAfterCloseSub fails strangely in tests (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1430933 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1da49fc64f486b1af873a64b668dad7c38388b1d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1da49fc64f486b1af873a64b668dad7c38388b1d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f0db18abedd30af1d6191d068652b93db0c68fc6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f0db18abedd30af1d6191d068652b93db0c68fc6","html_url":"https://github.com/apache/bookkeeper/commit/f0db18abedd30af1d6191d068652b93db0c68fc6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f0db18abedd30af1d6191d068652b93db0c68fc6/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"55a6e1b983420b40813b327f67bbbff8196a8e41","url":"https://api.github.com/repos/apache/bookkeeper/commits/55a6e1b983420b40813b327f67bbbff8196a8e41","html_url":"https://github.com/apache/bookkeeper/commit/55a6e1b983420b40813b327f67bbbff8196a8e41"}]},{"sha":"1f5278d06ddbf4da0d2d6ed41676321f89a4aecd","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxZjUyNzhkMDZkZGJmNGRhMGQyZDZlZDQxNjc2MzIxZjg5YTRhZWNk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-09T16:47:36Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-09T16:47:36Z"},"message":"BOOKKEEPER-529: stopServingSubscriber in delivery manager should remove stub callbacks in ReadAheadCache (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1430954 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1040ff5f5f12fc235a99bf2880030f947078e6b1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1040ff5f5f12fc235a99bf2880030f947078e6b1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1f5278d06ddbf4da0d2d6ed41676321f89a4aecd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1f5278d06ddbf4da0d2d6ed41676321f89a4aecd","html_url":"https://github.com/apache/bookkeeper/commit/1f5278d06ddbf4da0d2d6ed41676321f89a4aecd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1f5278d06ddbf4da0d2d6ed41676321f89a4aecd/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f0db18abedd30af1d6191d068652b93db0c68fc6","url":"https://api.github.com/repos/apache/bookkeeper/commits/f0db18abedd30af1d6191d068652b93db0c68fc6","html_url":"https://github.com/apache/bookkeeper/commit/f0db18abedd30af1d6191d068652b93db0c68fc6"}]},{"sha":"5c19add8bc394d3caae4fddf566e149281370a52","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1YzE5YWRkOGJjMzk0ZDNjYWFlNGZkZGY1NjZlMTQ5MjgxMzcwYTUy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-09T17:48:51Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-09T17:48:51Z"},"message":"BOOKKEEPER-542: Remove trailing spaces in IndexCorruptionTest (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1430972 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"307ab3ccd21c9c89a0140fcd731f87261d9073ea","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/307ab3ccd21c9c89a0140fcd731f87261d9073ea"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5c19add8bc394d3caae4fddf566e149281370a52","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5c19add8bc394d3caae4fddf566e149281370a52","html_url":"https://github.com/apache/bookkeeper/commit/5c19add8bc394d3caae4fddf566e149281370a52","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5c19add8bc394d3caae4fddf566e149281370a52/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"1f5278d06ddbf4da0d2d6ed41676321f89a4aecd","url":"https://api.github.com/repos/apache/bookkeeper/commits/1f5278d06ddbf4da0d2d6ed41676321f89a4aecd","html_url":"https://github.com/apache/bookkeeper/commit/1f5278d06ddbf4da0d2d6ed41676321f89a4aecd"}]},{"sha":"a9b851b3afe2d8031ad426fdd2e579ba003fe02c","node_id":"MDY6Q29tbWl0MTU3NTk1NjphOWI4NTFiM2FmZTJkODAzMWFkNDI2ZmRkMmU1NzliYTAwM2ZlMDJj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-10T09:39:25Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-10T09:39:25Z"},"message":"BOOKKEEPER-543: Read zk host list in a wrong way in hedwig server (Fangmin via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1431232 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0fa16374eea9b29cc9679e0b884edad953ad8879","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0fa16374eea9b29cc9679e0b884edad953ad8879"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a9b851b3afe2d8031ad426fdd2e579ba003fe02c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a9b851b3afe2d8031ad426fdd2e579ba003fe02c","html_url":"https://github.com/apache/bookkeeper/commit/a9b851b3afe2d8031ad426fdd2e579ba003fe02c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a9b851b3afe2d8031ad426fdd2e579ba003fe02c/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"5c19add8bc394d3caae4fddf566e149281370a52","url":"https://api.github.com/repos/apache/bookkeeper/commits/5c19add8bc394d3caae4fddf566e149281370a52","html_url":"https://github.com/apache/bookkeeper/commit/5c19add8bc394d3caae4fddf566e149281370a52"}]},{"sha":"40de140171a26b0943909900d6af4a73b31a641e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MGRlMTQwMTcxYTI2YjA5NDM5MDk5MDBkNmFmNGE3M2IzMWE2NDFl","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-10T09:42:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-10T09:42:19Z"},"message":"BOOKKEEPER-540: #stopServingSubscriber when channel is disconnected. (Fangmin via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1431235 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"480ac60c628c45afebaf043f7b1dd2971a2b88ef","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/480ac60c628c45afebaf043f7b1dd2971a2b88ef"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/40de140171a26b0943909900d6af4a73b31a641e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/40de140171a26b0943909900d6af4a73b31a641e","html_url":"https://github.com/apache/bookkeeper/commit/40de140171a26b0943909900d6af4a73b31a641e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/40de140171a26b0943909900d6af4a73b31a641e/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"a9b851b3afe2d8031ad426fdd2e579ba003fe02c","url":"https://api.github.com/repos/apache/bookkeeper/commits/a9b851b3afe2d8031ad426fdd2e579ba003fe02c","html_url":"https://github.com/apache/bookkeeper/commit/a9b851b3afe2d8031ad426fdd2e579ba003fe02c"}]},{"sha":"7c1793d2979b01062682b70687839a978bf65c4c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YzE3OTNkMjk3OWIwMTA2MjY4MmI3MDY4NzgzOWE5NzhiZjY1YzRj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-10T14:19:56Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-10T14:19:56Z"},"message":"BOOKKEEPER-530: data might be lost during compaction. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1431378 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ce3f78e450b3a027a7ab0f7d0e24c46a562e04a2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ce3f78e450b3a027a7ab0f7d0e24c46a562e04a2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7c1793d2979b01062682b70687839a978bf65c4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7c1793d2979b01062682b70687839a978bf65c4c","html_url":"https://github.com/apache/bookkeeper/commit/7c1793d2979b01062682b70687839a978bf65c4c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7c1793d2979b01062682b70687839a978bf65c4c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"40de140171a26b0943909900d6af4a73b31a641e","url":"https://api.github.com/repos/apache/bookkeeper/commits/40de140171a26b0943909900d6af4a73b31a641e","html_url":"https://github.com/apache/bookkeeper/commit/40de140171a26b0943909900d6af4a73b31a641e"}]},{"sha":"4250c1f93962af30e6e40759e006035a7089613e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0MjUwYzFmOTM5NjJhZjMwZTZlNDA3NTllMDA2MDM1YTcwODk2MTNl","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-10T18:13:58Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-01-10T18:13:58Z"},"message":"BOOKKEEPER-538: Race condition in BookKeeper#close (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1431536 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"07a4a2b1800333def202a1206992fb634a7ddceb","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/07a4a2b1800333def202a1206992fb634a7ddceb"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4250c1f93962af30e6e40759e006035a7089613e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4250c1f93962af30e6e40759e006035a7089613e","html_url":"https://github.com/apache/bookkeeper/commit/4250c1f93962af30e6e40759e006035a7089613e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4250c1f93962af30e6e40759e006035a7089613e/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"7c1793d2979b01062682b70687839a978bf65c4c","url":"https://api.github.com/repos/apache/bookkeeper/commits/7c1793d2979b01062682b70687839a978bf65c4c","html_url":"https://github.com/apache/bookkeeper/commit/7c1793d2979b01062682b70687839a978bf65c4c"}]},{"sha":"1374b7ad2738f6c52a2aed1d0ee4e412aa382086","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxMzc0YjdhZDI3MzhmNmM1MmEyYWVkMWQwZWU0ZTQxMmFhMzgyMDg2","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-11T04:16:41Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-01-11T04:16:41Z"},"message":"BOOKKEEPER-539: ClientNotSubscribedException & doesn't receive enough messages in TestThrottlingDelivery#testServerSideThrottle (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1431869 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cd9c52ccc4c59b920dcae1394e9b7dd115cf33d5","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cd9c52ccc4c59b920dcae1394e9b7dd115cf33d5"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1374b7ad2738f6c52a2aed1d0ee4e412aa382086","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1374b7ad2738f6c52a2aed1d0ee4e412aa382086","html_url":"https://github.com/apache/bookkeeper/commit/1374b7ad2738f6c52a2aed1d0ee4e412aa382086","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1374b7ad2738f6c52a2aed1d0ee4e412aa382086/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4250c1f93962af30e6e40759e006035a7089613e","url":"https://api.github.com/repos/apache/bookkeeper/commits/4250c1f93962af30e6e40759e006035a7089613e","html_url":"https://github.com/apache/bookkeeper/commit/4250c1f93962af30e6e40759e006035a7089613e"}]},{"sha":"96b5aa8e6463c36a0421e47f9892479aa63f885b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5NmI1YWE4ZTY0NjNjMzZhMDQyMWU0N2Y5ODkyNDc5YWE2M2Y4ODVi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-12T17:55:26Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-12T17:55:26Z"},"message":"BOOKKEEPER-503: The test case of TestThrottlingDelivery#testServerSideThrottle failed sometimes (jiannan & sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1432485 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0ae8700d7a938c51e67e490dd84dac9b2bbbd86d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0ae8700d7a938c51e67e490dd84dac9b2bbbd86d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/96b5aa8e6463c36a0421e47f9892479aa63f885b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/96b5aa8e6463c36a0421e47f9892479aa63f885b","html_url":"https://github.com/apache/bookkeeper/commit/96b5aa8e6463c36a0421e47f9892479aa63f885b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/96b5aa8e6463c36a0421e47f9892479aa63f885b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"1374b7ad2738f6c52a2aed1d0ee4e412aa382086","url":"https://api.github.com/repos/apache/bookkeeper/commits/1374b7ad2738f6c52a2aed1d0ee4e412aa382086","html_url":"https://github.com/apache/bookkeeper/commit/1374b7ad2738f6c52a2aed1d0ee4e412aa382086"}]},{"sha":"7d8079c446110872d8f6d50eff86268a3cb4e989","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZDgwNzljNDQ2MTEwODcyZDhmNmQ1MGVmZjg2MjY4YTNjYjRlOTg5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T12:45:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T12:45:49Z"},"message":"BOOKKEEPER-513: TestMessageFilter fails periodically (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1432902 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5fe48e63acea48298dee3da4b223b6396a60d4c4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5fe48e63acea48298dee3da4b223b6396a60d4c4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7d8079c446110872d8f6d50eff86268a3cb4e989","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7d8079c446110872d8f6d50eff86268a3cb4e989","html_url":"https://github.com/apache/bookkeeper/commit/7d8079c446110872d8f6d50eff86268a3cb4e989","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7d8079c446110872d8f6d50eff86268a3cb4e989/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"96b5aa8e6463c36a0421e47f9892479aa63f885b","url":"https://api.github.com/repos/apache/bookkeeper/commits/96b5aa8e6463c36a0421e47f9892479aa63f885b","html_url":"https://github.com/apache/bookkeeper/commit/96b5aa8e6463c36a0421e47f9892479aa63f885b"}]},{"sha":"17de3dbe64450bfab7505d7cf51e082eb5672bc8","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxN2RlM2RiZTY0NDUwYmZhYjc1MDVkN2NmNTFlMDgyZWI1NjcyYmM4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:48:28Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:48:28Z"},"message":"Updating version in CHANGES.txt before branching for 4.2.0\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/trunk@1432916 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60604a0da14db36e218fee4997f3d724d25366c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/60604a0da14db36e218fee4997f3d724d25366c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/17de3dbe64450bfab7505d7cf51e082eb5672bc8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/17de3dbe64450bfab7505d7cf51e082eb5672bc8","html_url":"https://github.com/apache/bookkeeper/commit/17de3dbe64450bfab7505d7cf51e082eb5672bc8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/17de3dbe64450bfab7505d7cf51e082eb5672bc8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7d8079c446110872d8f6d50eff86268a3cb4e989","url":"https://api.github.com/repos/apache/bookkeeper/commits/7d8079c446110872d8f6d50eff86268a3cb4e989","html_url":"https://github.com/apache/bookkeeper/commit/7d8079c446110872d8f6d50eff86268a3cb4e989"}]},{"sha":"32455b37a7f7cf6da049ddd395fed9244f203dd5","node_id":"MDY6Q29tbWl0MTU3NTk1NjozMjQ1NWIzN2E3ZjdjZjZkYTA0OWRkZDM5NWZlZDkyNDRmMjAzZGQ1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:49:20Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:49:20Z"},"message":"Branching for 4.2 releases\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1432918 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"60604a0da14db36e218fee4997f3d724d25366c2","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/60604a0da14db36e218fee4997f3d724d25366c2"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/32455b37a7f7cf6da049ddd395fed9244f203dd5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/32455b37a7f7cf6da049ddd395fed9244f203dd5","html_url":"https://github.com/apache/bookkeeper/commit/32455b37a7f7cf6da049ddd395fed9244f203dd5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/32455b37a7f7cf6da049ddd395fed9244f203dd5/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"17de3dbe64450bfab7505d7cf51e082eb5672bc8","url":"https://api.github.com/repos/apache/bookkeeper/commits/17de3dbe64450bfab7505d7cf51e082eb5672bc8","html_url":"https://github.com/apache/bookkeeper/commit/17de3dbe64450bfab7505d7cf51e082eb5672bc8"}]},{"sha":"0b5d2e933e3d80e47b6ddfde143f3391e4992b1d","node_id":"MDY6Q29tbWl0MTU3NTk1NjowYjVkMmU5MzNlM2Q4MGU0N2I2ZGRmZGUxNDNmMzM5MWU0OTkyYjFk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:53:50Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T13:53:50Z"},"message":"Updating version in pom.xml for 4.2.0 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1432922 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"976f398fdbc1418d582f832dd2473b1f8ed29090","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/976f398fdbc1418d582f832dd2473b1f8ed29090"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0b5d2e933e3d80e47b6ddfde143f3391e4992b1d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0b5d2e933e3d80e47b6ddfde143f3391e4992b1d","html_url":"https://github.com/apache/bookkeeper/commit/0b5d2e933e3d80e47b6ddfde143f3391e4992b1d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0b5d2e933e3d80e47b6ddfde143f3391e4992b1d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"32455b37a7f7cf6da049ddd395fed9244f203dd5","url":"https://api.github.com/repos/apache/bookkeeper/commits/32455b37a7f7cf6da049ddd395fed9244f203dd5","html_url":"https://github.com/apache/bookkeeper/commit/32455b37a7f7cf6da049ddd395fed9244f203dd5"}]},{"sha":"24dffb3fdde8ef863660af8dec1b54e22c334f8b","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNGRmZmIzZmRkZThlZjg2MzY2MGFmOGRlYzFiNTRlMjJjMzM0Zjhi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T16:02:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T16:02:47Z"},"message":"BOOKKEEPER-472: Provide an option to start Autorecovery along with Bookie Servers (umamahesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1432966 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c20da01dafe5aad92558bdcc39bb0e04e275f48d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c20da01dafe5aad92558bdcc39bb0e04e275f48d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/24dffb3fdde8ef863660af8dec1b54e22c334f8b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/24dffb3fdde8ef863660af8dec1b54e22c334f8b","html_url":"https://github.com/apache/bookkeeper/commit/24dffb3fdde8ef863660af8dec1b54e22c334f8b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/24dffb3fdde8ef863660af8dec1b54e22c334f8b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0b5d2e933e3d80e47b6ddfde143f3391e4992b1d","url":"https://api.github.com/repos/apache/bookkeeper/commits/0b5d2e933e3d80e47b6ddfde143f3391e4992b1d","html_url":"https://github.com/apache/bookkeeper/commit/0b5d2e933e3d80e47b6ddfde143f3391e4992b1d"}]},{"sha":"a1f9e23fd93f554c0a381ac50c229a2ab3079b2a","node_id":"MDY6Q29tbWl0MTU3NTk1NjphMWY5ZTIzZmQ5M2Y1NTRjMGEzODFhYzUwYzIyOWEyYWIzMDc5YjJh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T16:30:42Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T16:30:42Z"},"message":"Fixup for CHANGES.txt (some issues were missing or wrongly placed, also removed tabs)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1432980 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"baa133d2e734c49293e22835f6a93bd1b8b405f4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/baa133d2e734c49293e22835f6a93bd1b8b405f4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/a1f9e23fd93f554c0a381ac50c229a2ab3079b2a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/a1f9e23fd93f554c0a381ac50c229a2ab3079b2a","html_url":"https://github.com/apache/bookkeeper/commit/a1f9e23fd93f554c0a381ac50c229a2ab3079b2a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/a1f9e23fd93f554c0a381ac50c229a2ab3079b2a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"24dffb3fdde8ef863660af8dec1b54e22c334f8b","url":"https://api.github.com/repos/apache/bookkeeper/commits/24dffb3fdde8ef863660af8dec1b54e22c334f8b","html_url":"https://github.com/apache/bookkeeper/commit/24dffb3fdde8ef863660af8dec1b54e22c334f8b"}]},{"sha":"5ef2f7e21497e73ae26811dd483097599926a93a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1ZWYyZjdlMjE0OTdlNzNhZTI2ODExZGQ0ODMwOTc1OTk5MjZhOTNh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T17:29:50Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-01-14T17:29:50Z"},"message":"BookKeeper 4.2.0 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.2.0@1433000 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"baa133d2e734c49293e22835f6a93bd1b8b405f4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/baa133d2e734c49293e22835f6a93bd1b8b405f4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/5ef2f7e21497e73ae26811dd483097599926a93a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/5ef2f7e21497e73ae26811dd483097599926a93a","html_url":"https://github.com/apache/bookkeeper/commit/5ef2f7e21497e73ae26811dd483097599926a93a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/5ef2f7e21497e73ae26811dd483097599926a93a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"a1f9e23fd93f554c0a381ac50c229a2ab3079b2a","url":"https://api.github.com/repos/apache/bookkeeper/commits/a1f9e23fd93f554c0a381ac50c229a2ab3079b2a","html_url":"https://github.com/apache/bookkeeper/commit/a1f9e23fd93f554c0a381ac50c229a2ab3079b2a"}]}],"files":[{"sha":"3b0b66382ff446e6b5d6944926f4ab446c495938","filename":"CHANGES.txt","status":"modified","additions":422,"deletions":2,"changes":424,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,4 +1,412 @@\n-Release 4.1.0 - 2012-05-31\n+Release 4.2.0 - 2013-01-14\n+\n+  Non-backward compatible changes:\n+\n+    BUGFIXES:\n+\n+    IMPROVEMENTS:\n+\n+      bookkeeper-server:\n+\n+        BOOKKEEPER-203: improve ledger manager interface to remove zookeeper dependency on metadata operations. (sijie via ivank)\n+\n+        BOOKKEEPER-303: LedgerMetadata should serialized using protobufs (ivank)\n+\n+      hedwig-client:\n+\n+        BOOKKEEPER-339: Let hedwig cpp client support returning message seq id for publish requests. (sijie via ivank)\n+\n+  Backward compatible changes:\n+\n+    BUGFIXES:\n+\n+      BOOKKEEPER-289: mvn clean doesn't remove test output files (sijie via ivank)\n+\n+      BOOKKEEPER-298: We run with preferIPv4Stack in the scripts but not in the tests (ivank)\n+\n+      BOOKKEEPER-292: Test backward compatibility automatically between versions. (ivank)\n+\n+      BOOKKEEPER-352: Should not use static ServerStats/BKStats instance in TestServerStats/TestBKStats (sijie via fpj)\n+\n+      BOOKKEEPER-338: Create Version.NEW and Version.ANY static instances of Version so that were not passing around nulls (sijie via ivank)\n+\n+      BOOKKEEPER-32: Clean up LOG.debug statements (Stu Hood via sijie)\n+\n+      BOOKKEEPER-484: Misc fixes for test scripts (ivank via fpj)\n+\n+      BOOKKEEPER-483: precommit tests only check toplevel rat file, not the one for submodules. (ivank via fpj)\n+\n+      BOOKKEEPER-533: TestSubAfterCloseSub fails strangely in tests (ivank via fpj)\n+\n+      BOOKKEEPER-480: Fix javac warnings (ivank via sijie)\n+\n+      BOOKKEEPER-481: Fix javadoc warnings (ivank via sijie)\n+\n+      bookkeeper-server:\n+\n+        BOOKKEEPER-183: Provide tools to read/check data files in bookie server (sijie via ivank)\n+\n+        BOOKKEEPER-307: BookieShell introduces 4 findbugs warnings (ivank via sijie)\n+\n+        BOOKKEEPER-322: New protobufs generates findbugs errors (ivank)\n+\n+        BOOKKEEPER-280: LedgerHandle.addEntry() should return an entryId (mmerli via ivank)\n+\n+        BOOKKEEPER-324: Flakeyness in LedgerCreateDeleteTest (ivank)\n+\n+        BOOKKEEPER-318: Spelling mistake in MultiCallback log message. (surendra via sijie)\n+\n+        BOOKKEEPER-296: It's better provide stop script for bookie (nijel via sijie)\n+\n+        BOOKKEEPER-294: Not able to start the bookkeeper before the ZK session timeout. (rakeshr via ivank)\n+\n+        BOOKKEEPER-327: System.currentTimeMillis usage in BookKeeper (uma via fpj)\n+\n+        BOOKKEEPER-349: Entry logger should close all the chennels which are there in Map, instead of closing only current channel. (umamaheswararao via sijie)\n+\n+        BOOKKEEPER-326: DeadLock during ledger recovery (rakeshr via ivank)\n+\n+        BOOKKEEPER-372: Check service name in bookie start/stop script. (nijel via ivank)\n+\n+        BOOKKEEPER-354: [BOOKKEEPER-296] [Documentation] Modify the bookkeeper start script and document the bookkeeper stop command in bookkeeperConfig.xml (Kiran BC via ivank)\n+ \n+        BOOKKEEPER-378: ReplicationWorker may not get ZK watcher notification on UnderReplication ledger lock deletion. (umamaheswararao & ivank via ivank)\n+\n+        BOOKKEEPER-380: ZkLedgerUnderreplicationManager.markLedgerUnderreplicated() is adding duplicate missingReplicas while multiple bk failed for the same ledger (rakeshr via ivank)\n+\n+        BOOKKEEPER-381: ReadLastConfirmedOp's Logger class name is wrong (surendra via sijie)\n+\n+        BOOKKEEPER-382: space missed at concatenations in GarbageCollectorThread logging (Brahma via sijie)\n+\n+        BOOKKEEPER-337: Add entry fails with MetadataVersionException when last ensemble has morethan one bookie failures (rakeshr via ivank)\n+\n+        BOOKKEEPER-376: LedgerManagers should consider 'underreplication' node as a special Znode (Uma via sijie)\n+\n+        BOOKKEEPER-384: Clean up LedgerManagerFactory and LedgerManager usage in tests (rakeshr via ivank)\n+\n+        BOOKKEEPER-385: replicateLedgerFragment should throw Exceptions in error conditions (umamahesh via ivank)\n+\n+        BOOKKEEPER-386: It should not be possible to replicate a ledger fragment which is at the end of an open ledger (ivank & umamahesh via ivank)\n+\n+        BOOKKEEPER-395: HDFS dep transitively depends on a busted pom (Stu Hood via sijie)\n+\n+        BOOKKEEPER-387: BookKeeper Upgrade is not working. (surendra via sijie)\n+\n+        BOOKKEEPER-383: NPE in BookieJournalTest  (sijie via ivank)\n+\n+        BOOKKEEPER-396: Compilation issue in TestClient.java of BenchMark ( showing this in eclipse) (umamahesh via sijie)\n+\n+        BOOKKEEPER-403: ReReadMetadataCb is not executed in the thread responsible for that ledger (ivank)\n+\n+        BOOKKEEPER-405: Let's add Thread name for ReplicationWorker thread. (umamahesh via ivank)\n+\n+        BOOKKEEPER-418: Store hostname of locker in replication lock (ivank)\n+\n+        BOOKKEEPER-417: Hierarchical zk underreplication manager should clean up its hierarchy when done to allow for fast acquisition of underreplicated entries (ivank)\n+\n+        BOOKKEEPER-436: Journal#rollLog may leak file handler (umamahesh via ivank)\n+\n+        BOOKKEEPER-424: Bookie start is failing intermittently when zkclient connection delays (rakeshr via ivank)\n+\n+        BOOKKEEPER-416: LedgerChecker returns underreplicated fragments for an closed ledger with no entries (ivank)\n+\n+        BOOKKEEPER-425: Cleanup Bookie id generation (ivank via fpj)\n+\n+        BOOKKEEPER-430: Remove manual bookie registration from overview (fpj via ivank)\n+\n+        BOOKKEEPER-466: ZooKeeper test utility sets the port number as the tickTime (ivank)\n+\n+        BOOKKEEPER-460: LedgerDeleteTest checks wrong place for log file (Fangmin Lv via ivank)\n+\n+        BOOKKEEPER-477: In ReadOnlyBookieTest, we should wait for the bookie to die before asserting on it (ivank via fpj)\n+\n+        BOOKKEEPER-485: TestFencing hung (ivank via fpj)\n+\n+        BOOKKEEPER-351: asyncAddEntry should not throw an exception (Matteo Merli via sijie)\n+\n+        BOOKKEEPER-291: BKMBeanRegistry uses log4j directly (fpj via ivank)\n+\n+        BOOKKEEPER-459: Rename metastore mock implementation to InMemory implementation (jiannan via ivank)\n+\n+        BOOKKEEPER-347: Provide mechanism to detect r-o bookie by the bookie clients (Vinay via ivank)\n+\n+        BOOKKEEPER-475: BookieRecoveryTest#testSyncBookieRecoveryToRandomBookiesCheckForDupes() iterates too much (ivank via fpj)\n+\n+        BOOKKEEPER-431: Duplicate definition of COOKIES_NODE (uma via fpj)\n+\n+        BOOKKEEPER-474:  BookieReadWriteTest#testShutdown doesn't make sense (ivank via fpj)\n+\n+        BOOKKEEPER-465: CreateNewLog may overwrite lastLogId with smaller value (yixue, fpj via fpj)\n+\n+        BOOKKEEPER-498: BookieRecoveryTest.tearDown NPE (fpj)\n+\n+        BOOKKEEPER-497: GcLedgersTest has a potential race (ivank via sijie)\n+\n+        BOOKKEEPER-493: moveLedgerIndexFile might have chance pickup same directory (sijie via ivank)\n+\n+        BOOKKEEPER-365: Ledger will never recover if one of the quorum bookie is down forever and others dont have entry (sijie via ivank)\n+\n+        BOOKKEEPER-336: bookie readEntries is taking more time if the ensemble has failed bookie(s) (ivank)\n+\n+        BOOKKEEPER-512: BookieZkExpireTest fails periodically (ivank via sijie)\n+\n+        BOOKKEEPER-509: TestBookKeeperPersistenceManager failed on latest trunk (sijie via ivank)\n+\n+        BOOKKEEPER-496: Ensure that the auditor and replication worker will shutdown if they lose their ZK session (ivank)\n+\n+        BOOKKEEPER-500: Fencing doesn't work when restarting bookies. (sijie via ivank)\n+\n+        BOOKKEEPER-520: BookieFailureTest hangs on precommit build (ivank via sijie)\n+\n+        BOOKKEEPER-447: Bookie can fail to recover if index pages flushed before ledger flush acknowledged (ivank via sijie)\n+\n+        BOOKKEEPER-520: BookieFailureTest hangs on precommit build (sijie via fpj, jira reopened)\n+\n+        BOOKKEEPER-514: TestDeadLock hanging sometimes (ivank, sijie via fpj)\n+\n+        BOOKKEEPER-524: Bookie journal filesystem gets full after SyncThread is terminated with exception (Matteo, fpj via sijie)\n+\n+        BOOKKEEPER-355: Ledger recovery will mark ledger as closed with -1, in case of slow bookie is added to ensemble during recovery add (ivank)\n+\n+        BOOKKEEPER-534: Flakeyness in AuditorBookieTest (umamahesh via ivank)\n+\n+        BOOKKEEPER-542: Remove trailing spaces in IndexCorruptionTest (fpj via ivank)\n+\n+        BOOKKEEPER-530: data might be lost during compaction. (ivank)\n+\n+        BOOKKEEPER-538: Race condition in BookKeeper#close (ivank via fpj)\n+\n+        BOOKKEEPER-408: BookieReadWriteTest will enter the endless loop and will not leave out (ivank)\n+\n+        BOOKKEEPER-504: Fix findbugs warning in PendingReadOp (fpj via ivank)\n+\n+      hedwig-protocol:\n+\n+        BOOKKEEPER-394: CompositeException message is not useful (Stu Hood via sijie)\n+\n+        BOOKKEEPER-468: Remove <echo> from protobuf generation in hedwig (ivank)\n+\n+      hedwig-client:\n+\n+        BOOKKEEPER-274: Hedwig cpp client library should not link to cppunit which is just used for test. (sijie via ivank)\n+\n+        BOOKKEEPER-320: Let hedwig cpp client could publish messages using Message object instead of string. (jiannan via ivank)\n+\n+        BOOKKEEPER-371: NPE in hedwig hub client causes hedwig hub to shut down. (Aniruddha via sijie)\n+\n+        BOOKKEEPER-392: Racey ConcurrentMap usage in java hedwig-client (Stu Hood via sijie)\n+\n+        BOOKKEEPER-427: TestConcurrentTopicAcquisition hangs every so often (ivank)\n+\n+        BOOKKEEPER-434: [Hedwig CPP Client] Delay resolving default host until necessary. (sijie via ivank)\n+\n+        BOOKKEEPER-452: Rename ClientConfiguration multiplexing_enabled to subscription_connection_sharing_enabled (sijie via ivank)\n+\n+        BOOKKEEPER-454: hedwig c++ tester script assumes sh is bash (ivank)\n+\n+        BOOKKEEPER-470: Possible infinite loop in simple.SubscribeReconnectCallback (sijie via ivank)\n+\n+        BOOKKEEPER-55: SubscribeReconnectRetryTask might retry subscription endlessly when another subscription is already successfully created previously (sijie via ivank)\n+\n+        BOOKKEEPER-513: TestMessageFilter fails periodically (ivank)\n+\n+      hedwig-server:\n+\n+        BOOKKEEPER-302: No more messages delivered when hub server scans messages over two ledgers. (sijie via ivank)\n+\n+        BOOKKEEPER-330: System.currentTimeMillis usage in Hedwig (uma via sijie)\n+\n+        BOOKKEEPER-343: Failed to register hedwig JMX beans in test cases (sijie via ivank)\n+\n+        BOOKKEEPER-259: Create a topic manager using versioned write for leader election (sijie via ivank)\n+\n+        BOOKKEEPER-191: Hub server should change ledger to write, so consumed messages have chance to be garbage collected. (sijie via ivank)\n+\n+        BOOKKEEPER-439: No more messages delivered after deleted consumed ledgers. (sijie via ivank)\n+\n+        BOOKKEEPER-440: Make Write/Delete SubscriptionData Restricted to Version (Fangmin Lv via ivank)\n+\n+        BOOKKEEPER-482: Precommit is reporting findbugs errors in trunk (ivank via sijie)\n+\n+        BOOKKEEPER-442: Failed to deliver messages due to inconsistency between SubscriptionState and LedgerRanges. (jiannan via ivank)\n+\n+        BOOKKEEPER-461: Delivery throughput degrades when there are lots of publishers w/ high traffic. (sijie via ivank)\n+\n+\tBOOKKEEPER-458:  Annoy BKReadException error when changing ledger. (jiannan via fpj)\n+\n+        BOOKKEEPER-507: Race condition happens if closeSubscription and subscribe happened at the same time (in multiplexed client). (sijie via ivank)\n+\n+\tBOOKKEEPER-532: AbstractSubscriptionManager#AcquireOp read subscriptions every time even it already owned the topic. (sijie via fpj)\n+\n+        BOOKKEEPER-531: Cache thread should wait until old entries are collected (sijie via ivank)\n+\n+        BOOKKEEPER-529: stopServingSubscriber in delivery manager should remove stub callbacks in ReadAheadCache (sijie via ivank)\n+\n+        BOOKKEEPER-543: Read zk host list in a wrong way in hedwig server (Fangmin via sijie)\n+\n+        BOOKKEEPER-540: #stopServingSubscriber when channel is disconnected. (Fangmin via sijie)\n+\n+        BOOKKEEPER-539: ClientNotSubscribedException & doesn't receive enough messages in TestThrottlingDelivery#testServerSideThrottle (sijie)\n+\n+        BOOKKEEPER-503: The test case of TestThrottlingDelivery#testServerSideThrottle failed sometimes (jiannan & sijie via ivank)\n+\n+    IMPROVEMENTS:\n+\n+      BOOKKEEPER-467: Allocate ports for testing dynamically (ivank)\n+\n+      BOOKKEEPER-471: Add scripts for preCommit testing (ivank)\n+\n+      BOOKKEEPER-476: Log to file during tests (ivank via fpj)\n+\n+      BOOKKEEPER-491: Hedwig doc for configuration (fpj, sijie via fpj)\n+\n+      BOOKKEEPER-495: Revise BK config doc (fpj, ivank via fpj)\n+\n+      BOOKKEEPER-523: Every test should have a timeout (ivank, sijie via fpj)\n+\n+      BOOKKEEPER-541: Add guava to notice file (ivank via fpj)\n+\n+      bookkeeper-server:\n+\n+        BOOKKEEPER-328: Bookie DeathWatcher is missing thread name (Rakesh via sijie)\n+\n+        BOOKKEEPER-2: bookkeeper does not put enough meta-data in to do recovery properly (ivank via sijie)\n+\n+        BOOKKEEPER-317: Exceptions for replication (ivank via sijie)\n+\n+        BOOKKEEPER-246: Recording of underreplication of ledger entries (ivank)\n+\n+        BOOKKEEPER-247: Detection of under replication (ivank)\n+\n+        BOOKKEEPER-299: Provide LedgerFragmentReplicator which should replicate the fragments found from LedgerChecker (umamahesh via ivank)\n+\n+        BOOKKEEPER-248: Rereplicating of under replicated data (umamahesh via ivank)\n+\n+        BOOKKEEPER-304: Prepare bookie vs ledgers cache and will be used by the Auditor (rakeshr via ivank)\n+\n+        BOOKKEEPER-272: Provide automatic mechanism to know bookie failures (rakeshr via ivank)\n+\n+        BOOKKEEPER-300: Create Bookie format command (Vinay via sijie)\n+\n+        BOOKKEEPER-208: Separate write quorum from ack quorum (ivank)\n+\n+        BOOKKEEPER-325: Delay the replication of a ledger if RW found that its last fragment is in underReplication. (umamahesh via ivank)\n+\n+        BOOKKEEPER-388: Document bookie format command (kiran_bc via ivank)\n+\n+        BOOKKEEPER-278: Ability to disable auto recovery temporarily (rakeshr via ivank)\n+\n+        BOOKKEEPER-319: Manage auditing and replication processes (Vinay via ivank)\n+\n+        BOOKKEEPER-315: Ledger entries should be replicated sequentially instead of parallel. (umamahesh via ivank)\n+\n+        BOOKKEEPER-345: Detect IOExceptions on entrylogger and bookie should consider next ledger dir(if any) (Vinay via ivank)\n+\n+        BOOKKEEPER-346: Detect IOExceptions in LedgerCache and bookie should look at next ledger dir(if any) (Vinay via ivank)\n+\n+        BOOKKEEPER-444: Refactor pending read op to make speculative reads possible (ivank)\n+\n+        BOOKKEEPER-204: Provide a MetaStore interface, and a mock implementation. (Jiannan Wang via ivank)\n+\n+\tBOOKKEEPER-469: Remove System.out.println from TestLedgerManager (ivank via fpj)\n+\n+        BOOKKEEPER-205: implement a MetaStore based ledger manager for bookkeeper client. (jiannan via ivank)\n+\n+        BOOKKEEPER-426: Make auditor Vote znode store a protobuf containing the host that voted (ivank)\n+\n+\tBOOKKEEPER-428: Expose command options in bookie scripts to disable/enable auto recovery temporarily (rakesh,ivank via fpj)\n+\n+        BOOKKEEPER-511: BookieShell is very noisy (ivank via sijie)\n+\n+        BOOKKEEPER-375: Document about Auto replication service in BK (umamahesh via ivank)\n+\n+        BOOKKEEPER-490: add documentation for MetaStore interface (sijie, ivank via sijie)\n+\n+        BOOKKEEPER-463: Refactor garbage collection code for ease to plugin different GC algorithm. (Fangmin, ivank, fpj via sijie)\n+\n+        BOOKKEEPER-409: Integration Test - Perform bookie rereplication cycle by Auditor-RW processes (rakeshr via ivank)\n+\n+        BOOKKEEPER-293: Periodic checking of ledger replication status (ivank)\n+\n+        BOOKKEEPER-472: Provide an option to start Autorecovery along with Bookie Servers (umamahesh via ivank)\n+\n+        BOOKKEEPER-341: add documentation for bookkeeper ledger manager interface. (sijie via ivank)\n+\n+      hedwig-server:\n+\n+        BOOKKEEPER-250: Need a ledger manager like interface to manage metadata operations in Hedwig (sijie via ivank)\n+\n+        BOOKKEEPER-329: provide stop scripts for hub server (sijie via ivank)\n+\n+        BOOKKEEPER-331: Let hedwig support returning message seq id for publish requests. (Mridul via sijie)\n+\n+        BOOKKEEPER-340: Test backward compatibility for hedwig between different versions. (sijie via ivank)\n+\n+        BOOKKEEPER-283: Improve Hedwig Console to use Hedwig Metadata Manager. (sijie via ivank)\n+\n+        BOOKKEEPER-332: Add SubscriptionPreferences to record all preferences for a subscription (sijie via ivank)\n+\n+        BOOKKEEPER-333: server-side message filter (sijie via ivank)\n+\n+        BOOKKEEPER-252: Hedwig: provide a subscription mode to kill other subscription channel when hedwig client is used as a proxy-style server. (sijie via ivank)\n+\n+        BOOKKEEPER-397: Make the hedwig client in RegionManager configurable. (Aniruddha via sijie)\n+\n+        BOOKKEEPER-367: Server-Side Message Delivery Flow Control (sijie via ivank)\n+\n+        BOOKKEEPER-415: Rename DeliveryThrottle to MessageWindowSize (ivank via sijie)\n+\n+\tBOOKKEEPER-422: Simplify AbstractSubscriptionManager (stu via fpj)\n+\n+        BOOKKEEPER-435: Create SubscriptionChannelManager to manage all subscription channel (sijie via ivank)\n+\n+        BOOKKEEPER-411: Add CloseSubscription Request for multiplexing support (sijie via ivank)\n+\n+        BOOKKEEPER-441: InMemorySubscriptionManager should back up top2sub2seq before change it (Yixue via ivank)\n+\n+\tBOOKKEEPER-479: Fix apache-rat issues in tree (ivank via fpj)\n+\n+        BOOKKEEPER-457: Create a format command for Hedwig to cleanup its metadata. (sijie via ivank)\n+\n+        BOOKKEEPER-487: Add existed hub server settings to configuration template file (sijie via ivank)\n+\n+        BOOKKEEPER-389: add documentation for message filter. (sijie via ivank)\n+\n+\tBOOKKEEPER-399: Let hub server configure write quorum from ack quorum. (sijie via fpj)\n+\n+        BOOKKEEPER-342: add documentation for hedwig metadata manager interface. (sijie, ivank via sijie)\n+\n+        BOOKKEEPER-522: TestHedwigHub is failing silently on Jenkins (ivank via sijie)\n+\n+        BOOKKEEPER-262: Implement a meta store based hedwig metadata manager. (jiannan via ivank)\n+\n+        BOOKKEEPER-310: Changes in hedwig server to support JMS spec (ivank via sijie)\n+\n+      hedwig-client:\n+\n+        BOOKKEEPER-306: Change C++ client to use gtest for testing (ivank via sijie)\n+\n+        BOOKKEEPER-334: client-side message filter for java client. (sijie via ivank)\n+\n+        BOOKKEEPER-335: client-side message filter for cpp client. (sijie via ivank)\n+\n+        BOOKKEEPER-364: re-factor hedwig java client to support both one-subscription-per-channel and multiplex-subscriptions-per-channel. (sijie via ivank)\n+\n+        BOOKKEEPER-143: Add SSL support for hedwig cpp client (sijie via ivank)\n+\n+        BOOKKEEPER-413: Hedwig C++ client: Rename RUN_AS_SSL_MODE to SSL_ENABLED (ivank via sijie)\n+\n+        BOOKKEEPER-369: re-factor hedwig cpp client to provide better interface to support both one-subscription-per-channel and multiple-subscriptions-per-channel. (sijie via ivank)\n+\n+        BOOKKEEPER-368: Implementing multiplexing java client. (sijie via ivank)\n+\n+        BOOKKEEPER-370: implement multiplexing cpp client. (sijie via ivank)\n+\n+        BOOKKEEPER-453: Extract commonality from MultiplexSubscribeResponseHandler and SimpleSubscribeResponseHandler and put into an abstract class  (sijie via ivank)\n+\n+        BOOKKEEPER-404: Deprecate non-SubscriptionOptions Subscriber Apis (ivank via sijie)\n+\n+Release 4.1.0 - 2012-06-07\n \n   Non-backward compatible changes:\n \n@@ -120,6 +528,16 @@ Release 4.1.0 - 2012-05-31\n \n         BOOKKEEPER-273: LedgerHandle.deleteLedger() should be idempotent (Matteo Merli via ivank)\n \n+        BOOKKEEPER-281: BKClient is failing when zkclient connection delays (ivank via sijie)\n+\n+        BOOKKEEPER-279: LocalBookKeeper is failing intermittently due to zkclient connection establishment delay (Rakesh R via sijie)\n+\n+        BOOKKEEPER-286: Compilation warning (ivank via sijie)\n+\n+        BOOKKEEPER-287: NoSuchElementException in LedgerCacheImpl (sijie)\n+\n+        BOOKKEEPER-288: NOTICE files don't have the correct year (ivank via sijie)\n+\n       hedwig-client/\n \n         BOOKKEEPER-217: NPE in hedwig client when enable DEBUG (sijie via ivank)\n@@ -146,6 +564,8 @@ Release 4.1.0 - 2012-05-31\n \n         BOOKKEEPER-146: TestConcurrentTopicAcquisition sometimes hangs (ivank)\n \n+        BOOKKEEPER-285: TestZkSubscriptionManager quits due to NPE, so other tests are not run in hedwig server. (sijie)\n+\n       bookkeeper-benchmark/\n \t\n \tBOOKKEEPER-207: BenchBookie doesn't run correctly (ivank via fpj)\n@@ -203,7 +623,7 @@ Release 4.1.0 - 2012-05-31\n         BOOKKEEPER-97: collect pub/sub/consume statistics on hub server (sijie via ivank)\n \n \tBOOKKEEPER-269: Review documentation for hedwig console client (sijie via fpj)\n-\t\n+\n       hedwig-client/\n \n \tBOOKKEEPER-271: Review documentation for message bounding (ivank via fpj)"},{"sha":"37b20c9445f21c7975915392eec7a88b69ac484c","filename":"NOTICE","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/NOTICE","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/NOTICE","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/NOTICE?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,5 +1,5 @@\n Apache BookKeeper\n-Copyright 2011 The Apache Software Foundation\n+Copyright 2011-2013 The Apache Software Foundation\n \n This product includes software developed at\n The Apache Software Foundation (http://www.apache.org/)."},{"sha":"1515495912bf8ed4769de164e3769e14cc69adb2","filename":"bin/find-new-patch-available-jiras","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/find-new-patch-available-jiras","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/find-new-patch-available-jiras","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/find-new-patch-available-jiras?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,129 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TEMPDIR=${BASEDIR}/tmp\n+\n+JIRAAVAILPATCHQUERY=\"https://issues.apache.org/jira/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?jqlQuery=project+in+%28BOOKKEEPER%29+AND+status+%3D+%22Patch+Available%22+ORDER+BY+updated+DESC&tempMax=1000\"\n+TESTPATCHJOBURL=\"https://builds.apache.org/job/bookkeeper-trunk-precommit-build\"\n+TOKEN=\"\"\n+SUBMIT=\"false\"\n+DELETEHISTORYFILE=\"false\"\n+\n+RUNTESTSFILE=${BASEDIR}/TESTED_PATCHES.txt\n+\n+printUsage() {\n+    echo \"Usage: $0 <OPTIONS>\"\n+    echo \"          --submit --token=<BOOKKEEPER PRECOMMIT JOB TOKEN>\"\n+    echo \"          [--delete-history-file]\"\n+    echo \"          [--script-debug]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --submit)\n+            SUBMIT=\"true\"\n+            ;;\n+        --token=*)\n+            TOKEN=${i#*=}\n+            ;;\n+        --script-debug)\n+            DEBUG=\"-x\"\n+            ;;\n+        --delete-history-file)\n+            DELETEHISTORYFILE=\"true\"\n+            ;;\n+        *)\n+            echo \"Invalid option\"\n+            echo\n+            printUsage\n+            exit 1\n+            ;;\n+        esac\n+    done\n+    if [[ \"$SUBMIT\" == \"true\" && \"${TOKEN}\" == \"\" ]] ; then\n+        echo \"Token has not been specified\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+}\n+\n+###############################################################################\n+findAndSubmitAvailablePatches() {\n+    ## Grab all the key (issue numbers) and largest attachment id for each item in the XML\n+    curl --fail --location --retry 3 \"${JIRAAVAILPATCHQUERY}\" > ${TEMPDIR}/patch-availables.xml\n+    if [ \"$?\" != \"0\" ] ; then\n+        echo \"Could not retrieve available patches from JIRA\"\n+        exit 1\n+    fi\n+    xpath -e \"//item/key/text() | //item/attachments/attachment[not(../attachment/@id > @id)]/@id\" \\\n+        ${TEMPDIR}/patch-availables.xml > ${TEMPDIR}/patch-attachments.element\n+\n+    ### Replace newlines with nothing, then replace id=\" with =, then replace \" with newline\n+    ### to yield lines with pairs (issueNumber,largestAttachmentId). Example: BOOKKEEPER-123,456984\n+    cat ${TEMPDIR}/patch-attachments.element \\\n+        | awk '{ if ( $1 ~ /^BOOKKEEPER\\-/) {JIRA=$1 }; if ($1 ~ /id=/) { print JIRA\",\"$1} }' \\\n+        | sed 's/id\\=\"//' | sed 's/\"//' > ${TEMPDIR}/patch-availables.pair\n+\n+    ### Iterate through issue list and find the (issueNumber,largestAttachmentId) pairs that have\n+    ### not been tested (ie don't already exist in the patch_tested.txt file\n+    touch ${RUNTESTSFILE}\n+    cat ${TEMPDIR}/patch-availables.pair | while read PAIR ; do\n+        set +e\n+        COUNT=`grep -c \"$PAIR\" ${RUNTESTSFILE}`\n+        set -e\n+        if [ \"$COUNT\" -lt \"1\" ] ; then\n+        ### Parse $PAIR into project, issue number, and attachment id\n+            ISSUE=`echo $PAIR | sed -e \"s/,.*$//\"`\n+            echo \"Found new patch for issue $ISSUE\"\n+            if [ \"$SUBMIT\" == \"true\" ]; then\n+            ### Kick off job\n+                echo \"Submitting job for issue $ISSUE\"\n+                curl --fail --location --retry 3 \\\n+                    \"${TESTPATCHJOBURL}/buildWithParameters?token=${TOKEN}&JIRA_NUMBER=${ISSUE}\" > /dev/null\n+                if [ \"$?\" != \"0\" ] ; then\n+                    echo \"Could not submit precommit job for $ISSUE\"\n+                    exit 1\n+                fi\n+            fi\n+            ### Mark this pair as tested by appending to file\n+            echo \"$PAIR\" >> ${RUNTESTSFILE}\n+        fi\n+    done\n+}\n+###############################################################################\n+\n+mkdir -p ${TEMPDIR} 2>&1 $STDOUT\n+\n+parseArgs \"$@\"\n+\n+if [ -n \"${DEBUG}\" ] ; then\n+    set -x\n+fi\n+\n+if [ \"${DELETEHISTORYFILE}\" == \"true\" ] ; then\n+    rm ${RUNTESTSFILE}\n+fi\n+\n+findAndSubmitAvailablePatches\n+\n+exit 0"},{"sha":"e81d653d53fffdc0cefc9c9633e26993e68f8afb","filename":"bin/test-patch","status":"added","additions":416,"deletions":0,"changes":416,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,416 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TESTPATCHDIRNAME=test-patch\n+TESTPATCHDIR=${BASEDIR}/${TESTPATCHDIRNAME}\n+TOOLSDIR=${TESTPATCHDIR}/tools\n+TEMPDIR=${TESTPATCHDIR}/tmp\n+REPORTDIR=${TESTPATCHDIR}/reports\n+SUMMARYFILE=${REPORTDIR}/TEST-SUMMARY.jira\n+SUMMARYFILETXT=${REPORTDIR}/TEST-SUMMARY.txt\n+\n+JIRAHOST=\"https://issues.apache.org\"\n+JIRAURL=\"${JIRAHOST}/jira\"\n+JIRAURLISSUEPREFIX=\"${JIRAURL}/browse/\"\n+\n+JIRAUPDATE=\"false\"\n+JIRAUSER=\"\"\n+JIRAPASSWORD=\"\"\n+\n+\n+VERBOSEOPTION=\"\"\n+JIRAISSUE=\"\"\n+PATCHFILE=\"\"\n+TASKSTORUN=\"\"\n+TASKSTOSKIP=\"\"\n+RESETSCM=\"false\"\n+DIRTYSCM=\"false\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+gitOrSvn() {\n+    SCM=\"NONE\"\n+    which git &> /dev/null\n+    if [[ $? == 0 ]] ; then\n+        git status &> /dev/null\n+        if [[ $? == 0 ]] ; then\n+            SCM=\"git\"\n+        fi\n+    fi\n+    if [ \"${SCM}\" == \"NONE\" ] ; then\n+        which svn &> /dev/null\n+        if [[ $? == 0 ]] ; then\n+            svnOutput=`svn status 2>&1`\n+            if [[  \"$svnOutput\" != *\"is not a working copy\" ]] ; then\n+                SCM=\"svn\"\n+            fi\n+        fi\n+    fi\n+    if [ \"${SCM}\" == \"NONE\" ] ; then\n+        echo \"The current workspace is not under Source Control (GIT or SVN)\"\n+        exit 1\n+    fi\n+}\n+###############################################################################\n+prepareSCM() {\n+    gitOrSvn\n+    if [ \"${DIRTYSCM}\" != \"true\" ] ; then\n+        if [ \"${RESETSCM}\" == \"true\" ] ; then\n+            if [ \"${SCM}\" == \"git\" ] ; then\n+                git reset --hard HEAD > /dev/null\n+                git clean -f -d -e $TESTPATCHDIRNAME > /dev/null\n+            fi\n+            if [ \"${SCM}\" == \"svn\" ] ; then\n+                svn revert -R . > /dev/null\n+                svn status | grep \"\\?\" | awk '{print $2}' | xargs rm -rf\n+            fi\n+        else\n+            echo \"It should not happen DIRTYSCM=false & RESETSCM=false\"\n+            exit 1\n+        fi\n+        echo \"Cleaning local ${SCM} workspace\" >> ${SUMMARYFILE}\n+    else\n+        echo \"WARNING: Running test-patch on a dirty local ${SCM} workspace\" >> ${SUMMARYFILE}\n+    fi\n+}\n+###############################################################################\n+prepareTestPatchDirs() {\n+    mkdir -p ${TESTPATCHDIR} 2> /dev/null\n+    rm -rf ${REPORTDIR} 2> /dev/null\n+    rm -rf ${TEMPDIR} 2> /dev/null\n+    mkdir -p ${TOOLSDIR} 2> /dev/null\n+    mkdir -p ${TEMPDIR} 2> /dev/null\n+    mkdir -p ${REPORTDIR} 2> /dev/null\n+    if [ ! -e \"${TESTPATCHDIR}\" ] ; then\n+        echo \"Could not create test-patch/ dir\"\n+        exit 1\n+    fi\n+}\n+###############################################################################\n+updateJira() {\n+    if [[ \"${JIRAUPDATE}\" != \"\" && \"${JIRAISSUE}\" != \"\" ]] ; then\n+        if [[ \"$JIRAPASSWORD\" != \"\" ]] ; then\n+            JIRACLI=${TOOLSDIR}/jira-cli/jira.sh\n+            if [ ! -e \"${JIRACLI}\" ] ; then\n+                curl https://bobswift.atlassian.net/wiki/download/attachments/16285777/jira-cli-2.6.0-distribution.zip > ${TEMPDIR}/jira-cli.zip\n+                if [ $? != 0 ] ; then\n+                    echo\n+                    echo \"Could not download jira-cli tool, thus no JIRA updating\"\n+                    echo\n+                    exit 1\n+                fi\n+                mkdir ${TEMPDIR}/jira-cli-tmp\n+                (cd ${TEMPDIR}/jira-cli-tmp;jar xf ${TEMPDIR}/jira-cli.zip; mv jira-cli-2.6.0 ${TOOLSDIR}/jira-cli)\n+                chmod u+x ${JIRACLI}\n+            fi\n+            echo \"Adding comment to JIRA\"\n+            comment=`cat ${SUMMARYFILE}`\n+            $JIRACLI -s $JIRAURL -a addcomment -u $JIRAUSER -p \"$JIRAPASSWORD\" --comment \"$comment\" --issue $JIRAISSUE\n+            echo\n+        else\n+            echo \"Skipping JIRA update\"\n+            echo\n+        fi\n+    fi\n+}\n+###############################################################################\n+cleanupAndExit() {\n+    updateJira\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 <OPTIONS>\"\n+    echo \"          (--jira=<JIRA ISSUE> | --patch=<PATCH PATH>)\"\n+    echo \"          (--reset-scm | --dirty-scm)\"\n+    echo \"          [--tasks=<TASK,...>]\"\n+    echo \"          [--skip-tasks=<TASK,...>]\"\n+    echo \"          [--jira-cli=<JIRA CLIENT>]\"\n+    echo \"          [--jira-user=<JIRA USER>]\"\n+    echo \"          [--jira-password=<JIRA PASSWORD>]\"\n+    echo \"          [-D<MVN PROPERTY>...]\"\n+    echo \"          [-P<MVN PROFILE>...]\"\n+    echo \"          [--list-tasks]\"\n+    echo \"          [--verbose]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --jira=*)\n+            JIRAISSUE=${i#*=}\n+            ;;\n+        --patch=*)\n+            PATCHFILE=${i#*=}\n+            ;;\n+        --tasks=*)\n+            TASKSTORUN=${i#*=}\n+            ;;\n+        --skip-tasks=*)\n+            TASKSTOSKIP=${i#*=}\n+            ;;\n+        --list-tasks)\n+            listTasks\n+            cleanupAndExit 0\n+            ;;\n+        --jira-cli=*)\n+            JIRACLI=${i#*=}\n+            ;;\n+        --jira-user=*)\n+            JIRAUSER=${i#*=}\n+            ;;\n+        --jira-password=*)\n+            JIRAPASSWORD=${i#*=}\n+            JIRAUPDATE=\"true\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        --reset-scm)\n+            RESETSCM=\"true\"\n+            ;;\n+        --dirty-scm)\n+            DIRTYSCM=\"true\"\n+            ;;\n+        --verbose)\n+            VERBOSEOPTION=\"--verbose\"\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        *)\n+            echo \"Invalid option\"\n+            echo\n+            printUsage\n+            exit 1\n+            ;;\n+        esac\n+    done\n+\n+    if [[ \"${JIRAISSUE}\" == \"\" && \"${PATCHFILE}\" == \"\" ]] ; then\n+        echo \"Either --jira or --patch option must be specified\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+    if [[ \"${JIRAISSUE}\" != \"\" && \"${PATCHFILE}\" != \"\" ]] ; then\n+        echo \"Cannot specify --jira or --patch options together\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+    if [[ \"${RESETSCM}\" == \"false\" && \"${DIRTYSCM}\" == \"false\" ]] ; then\n+        echo \"Either --reset-scm or --dirty-scm option must be specified\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+    if [[ \"${RESETSCM}\" == \"true\" && \"${DIRTYSCM}\" == \"true\" ]] ; then\n+        echo \"Cannot specify --reset-scm and --dirty-scm options together\"\n+        echo\n+        printUsage\n+        exit 1\n+    fi\n+}\n+\n+###############################################################################\n+listTasks() {\n+    echo \"Available Tasks:\"\n+    echo \"\"\n+    getAllTasks\n+    for taskFile in ${TASKFILES} ; do\n+        taskName=`bash $taskFile --taskname`\n+        echo \"  $taskName\"\n+    done\n+    echo\n+}\n+###############################################################################\n+downloadPatch () {\n+    PATCHFILE=${TEMPDIR}/test.patch\n+    jiraPage=${TEMPDIR}/jira.txt\n+    curl \"${JIRAURLISSUEPREFIX}${JIRAISSUE}\" > ${jiraPage}\n+    if [[ `grep -c 'Patch Available' ${jiraPage}` == 0 ]] ; then\n+        echo \"$JIRAISSUE is not \\\"Patch Available\\\".  Exiting.\"\n+        echo\n+        exit 1\n+    fi\n+    relativePatchURL=`grep -o '\"/jira/secure/attachment/[0-9]*/[^\"]*' ${jiraPage} \\\n+        | grep -v -e 'htm[l]*$' | sort | tail -1 \\\n+        | grep -o '/jira/secure/attachment/[0-9]*/[^\"]*'`\n+    patchURL=\"${JIRAHOST}${relativePatchURL}\"\n+    patchNum=`echo $patchURL | grep -o '[0-9]*/' | grep -o '[0-9]*'`\n+    curl ${patchURL} > ${PATCHFILE}\n+    if [[ $? != 0 ]] ; then\n+        echo \"Could not download patch for ${JIRAISSUE} from ${patchURL}\"\n+        echo\n+        cleanupAndExit 1\n+    fi\n+    PATCHNAME=$(echo $patchURL | sed 's/.*\\///g')\n+    echo \"JIRA ${JIRAISSUE}, patch downloaded at `date` from ${patchURL}\" \n+    echo\n+    echo \"Patch [$PATCHNAME|$patchURL] downloaded at $(date)\" >> ${SUMMARYFILE}\n+    echo \"\" >> ${SUMMARYFILE}\n+}\n+###############################################################################\n+applyPatch() {\n+    echo \"Applying patch\" >> $STDOUT\n+    echo \"\" >> $STDOUT\n+    patch -f -E --dry-run -p0 < ${PATCHFILE} | tee ${REPORTDIR}/APPLY-PATCH.txt \\\n+        >> $STDOUT\n+    if [[  ${PIPESTATUS[0]} != 0 ]] ; then\n+        echo \"Patch failed to apply to head of branch\"\n+        echo \"{color:red}-1{color} Patch failed to apply to head of branch\" >> ${SUMMARYFILE}\n+        echo \"\" >> ${SUMMARYFILE}\n+        echo \"----------------------------\" >> ${SUMMARYFILE}\n+        echo\n+        cleanupAndExit 1\n+    fi\n+    patch -f -E -p0 < ${PATCHFILE} > ${REPORTDIR}/APPLY-PATCH.txt\n+    if [[ $? != 0 ]] ; then\n+        echo \"ODD!, dry run passed, but patch failed to apply to head of branch\"\n+        echo\n+        cleanupAndExit 1\n+    fi\n+    echo \"\" >> $STDOUT\n+    echo \"Patch applied\"\n+    echo \"{color:green}+1 PATCH_APPLIES{color}\" >> $SUMMARYFILE\n+    echo\n+}\n+###############################################################################\n+run() {\n+    task=`bash $1 --taskname`\n+    if [[ \"${TASKSTORUN}\" == \"\" || \"${TASKSTORUN}\" =~ \"${task}\" ]] ; then\n+        if [[ ! \"${TASKSTOSKIP}\" =~ \"${task}\" ]] ; then\n+            echo \"  Running test-patch task ${task}\"\n+            outputFile=\"`basename $1`-$2.out\"\n+            $1 --op=$2 --tempdir=${TEMPDIR} --reportdir=${REPORTDIR} \\\n+                --summaryfile=${SUMMARYFILE} --patchfile=${PATCHFILE} ${MVNPASSTHRU} \\\n+                ${VERBOSEOPTION} | tee ${TEMPDIR}/${outputFile} >> $STDOUT\n+            if [[ $? != 0 ]] ; then\n+                echo \"  Failure, check for details ${TEMPDIR}/${outputFile}\"\n+                echo\n+                cleanupAndExit 1\n+            fi\n+        fi\n+    fi\n+}\n+###############################################################################\n+getAllTasks() {\n+    TASKFILES=`ls -a bin/test\\-patch\\-[0-9][0-9]\\-*`\n+}\n+###############################################################################\n+prePatchRun() {\n+    echo \"Pre patch\"\n+    for taskFile in ${TASKFILES} ; do\n+        run $taskFile pre\n+    done\n+    echo\n+}\n+###############################################################################\n+postPatchRun() {\n+    echo \"Post patch\"\n+    for taskFile in ${TASKFILES} ; do\n+        run $taskFile post\n+    done\n+    echo\n+}\n+###############################################################################\n+createReports() {\n+    echo \"Reports\"\n+    for taskFile in ${TASKFILES} ; do\n+        run $taskFile report\n+    done\n+    echo\n+}\n+###############################################################################\n+\n+echo\n+\n+parseArgs \"$@\"\n+\n+prepareSCM\n+\n+prepareTestPatchDirs\n+\n+echo \"\" > ${SUMMARYFILE}\n+\n+if [ \"${PATCHFILE}\" == \"\" ] ; then\n+    echo \"Testing JIRA ${JIRAISSUE}\"\n+    echo\n+    echo \"Testing JIRA ${JIRAISSUE}\" >> ${SUMMARYFILE}\n+    echo \"\" >> ${SUMMARYFILE}\n+else\n+    if [ ! -e ${PATCHFILE} ] ; then\n+        echo \"Patch file does not exist\"\n+        cleanupAndExit 1\n+    fi\n+    echo \"Testing patch ${PATCHFILE}\"\n+    echo\n+    echo \"Testing patch ${PATCHFILE}\" >> ${SUMMARYFILE}\n+    echo \"\" >> ${SUMMARYFILE}\n+fi\n+\n+echo \"\" >> ${SUMMARYFILE}\n+\n+if [ \"${PATCHFILE}\" == \"\" ] ; then\n+    downloadPatch ${JIRAISSUE}\n+fi\n+\n+echo \"----------------------------\" >> ${SUMMARYFILE}\n+echo \"\" >> ${SUMMARYFILE}\n+getAllTasks\n+prePatchRun\n+applyPatch\n+postPatchRun\n+createReports\n+echo \"\" >> ${SUMMARYFILE}\n+echo \"----------------------------\" >> ${SUMMARYFILE}\n+MINUSONES=`grep -c \"\\}\\-1\" ${SUMMARYFILE}`\n+if [[ $MINUSONES == 0 ]]; then\n+    echo \"{color:green}*+1 Overall result, good!, no -1s*{color}\" >> ${SUMMARYFILE}\n+else\n+    echo \"{color:red}*-1 Overall result, please check the reported -1(s)*{color}\" >> ${SUMMARYFILE}\n+fi\n+echo \"\" >> ${SUMMARYFILE}\n+WARNINGS=`grep -c \"\\}WARNING\" ${SUMMARYFILE}`\n+if [[ $WARNINGS != 0 ]]; then\n+    echo \"{color:red}.   There is at least one warning, please check{color}\" >> ${SUMMARYFILE}\n+fi\n+echo \"\" >> ${SUMMARYFILE}\n+\n+if [ ! -z \"${JIRAISSUE}\" ]; then\n+    echo \"The full output of the test-patch run is available at\"  >> ${SUMMARYFILE}\n+    echo \"\"  >> ${SUMMARYFILE}\n+    echo \".   ${BUILD_URL}\"  >> ${SUMMARYFILE}\n+    echo \"\"  >> ${SUMMARYFILE}\n+else\n+    echo\n+    echo \"Refer to ${REPORTDIR} for detailed test-patch reports\"\n+    echo\n+fi\n+\n+cat ${SUMMARYFILE} | sed -e 's/{color}//' -e 's/{color:green}//' -e 's/{color:red}//' -e 's/^\\.//' -e 's/^\\*//' -e 's/\\*$//' > ${SUMMARYFILETXT}\n+\n+cat ${SUMMARYFILETXT}\n+\n+cleanupAndExit `expr $MINUSONES != 0`"},{"sha":"84fc616758e8d89c2aa50693330f86e32ed6febc","filename":"bin/test-patch-00-clean","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-00-clean","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-00-clean","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-00-clean?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,98 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"CLEAN\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR>) [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    mvn clean ${MVNPASSTHRU} > ${TEMPDIR}/${TASKNAME}.txt\n+    EXITCODE=$?\n+    # removing files created by dependency:copy-dependencies\n+    rm -f */lib/*\n+    exit $EXITCODE\n+    ;;\n+post)\n+    ;;\n+report)\n+    echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"ea4055227682b07066005e170fbf11230d17875a","filename":"bin/test-patch-05-patch-raw-analysis","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-05-patch-raw-analysis","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-05-patch-raw-analysis","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-05-patch-raw-analysis?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,153 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"RAW_PATCH_ANALYSIS\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+PATCHFILE=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>)\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --patchfile=*)\n+            PATCHFILE=${i#*=}\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" || \"${PATCHFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkNoAuthors() {\n+    authorTags=`grep \"^+ \" ${PATCHFILE} | grep -c -i -e \".*\\*.* @author\"`\n+    if [[ ${authorTags} != 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch seems to contain ${authorTags} line(s) with @author tags\")\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does not introduce any @author tags\")\n+    fi\n+}\n+###############################################################################\n+checkNoTabs() {\n+    tabs=`grep \"^+ \" ${PATCHFILE} | grep -c -P \"\\t\"`\n+    if [[ ${tabs} != 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch contains ${tabs} line(s) with tabs\")\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does not introduce any tabs\")\n+    fi\n+}\n+###############################################################################\n+checkNoTrailingSpaces() {\n+    trailingSpaces=`grep \"^+ \" ${PATCHFILE} | grep -c -e \" $\"`\n+    if [[ ${trailingSpaces} != 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch contains ${trailingSpaces} line(s) with trailing spaces\")\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does not introduce any trailing spaces\")\n+    fi\n+}\n+###############################################################################\n+checkLinesLength() {\n+  # We check for > 120 to account for the \"+\" sign\n+    longLines=`grep \"^+ \" ${PATCHFILE} | awk 'BEGIN{count=0}{if ( length > 121 ) { count=count+1} }END{ print count}'`\n+    if [[ ${longLines} != 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch contains ${longLines} line(s) longer than 120 characters\")\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does not introduce any line longer than 120\")\n+    fi\n+}\n+###############################################################################\n+checkForTestcases() {\n+    testcases=`grep -c -i -e '^+++.*/test' ${PATCHFILE}`\n+    if [[ ${testcases} == 0 ]] ; then\n+        REPORT+=(\"{color:red}-1{color} the patch does not add/modify any testcase\")\n+    #reverting for summary +1 calculation\n+        testcases=1\n+    else\n+        REPORT+=(\"{color:green}+1{color} the patch does adds/modifies ${testcases} testcase(s)\")\n+    #reverting for summary +1 calculation\n+        testcases=0\n+    fi\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    ;;\n+post)\n+    ;;\n+report)\n+    REPORT=()\n+    checkNoAuthors\n+    checkNoTabs\n+    checkNoTrailingSpaces\n+    checkLinesLength\n+    checkForTestcases\n+    total=`expr $authorTags + $tabs + $trailingSpaces + $longLines + $testcases`\n+    if [[ $total == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"f403301428cba7054a2d40fe630dd322c1f6fe6a","filename":"bin/test-patch-08-rat","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-08-rat","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-08-rat","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-08-rat?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,132 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"RAT\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkForWarnings() {\n+    cleanWarns=`grep -c '\\!?????' ${REPORTDIR}/${TASKNAME}-clean.txt`\n+    patchWarns=`grep -c '\\!?????' ${REPORTDIR}/${TASKNAME}-patch.txt`\n+    newWarns=`expr $patchWarns - $cleanWarns`\n+    if [[ $newWarns -le 0 ]] ; then\n+        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new RAT warnings\")\n+        newWarns=0\n+    else\n+        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new RAT warning(s)\")\n+        newWarns=1\n+    fi\n+    if [[ $cleanWarns != 0 ]] ; then\n+        REPORT+=(\"{color:red}WARNING: the current HEAD has $cleanWarns RAT warning(s), they should be addressed ASAP{color}\")\n+    fi\n+}\n+###############################################################################\n+copyRatFiles() {\n+    TAG=$1\n+    rm -f ${REPORTDIR}/${TASKNAME}-$TAG.txt\n+    for f in $(find . -name rat.txt); do\n+        cat $f >> ${REPORTDIR}/${TASKNAME}-$TAG.txt\n+    done\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    mvn apache-rat:check ${MVNPASSTHRU} > $STDOUT\n+    copyRatFiles clean\n+    ;;\n+post)\n+    mvn apache-rat:check ${MVNPASSTHRU} > $STDOUT\n+    copyRatFiles patch\n+    ;;\n+report)\n+    checkForWarnings\n+    if [[ $newWarns == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"54bbf93419e2604a1f2d01fe8a20528db94d7b1a","filename":"bin/test-patch-09-javadoc","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-09-javadoc","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-09-javadoc","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-09-javadoc?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,118 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"JAVADOC\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkForWarnings() {\n+    cleanWarns=`grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-clean.txt | awk '/Javadoc Warnings/,EOF' | grep warning | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n+    patchWarns=`grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-patch.txt | awk '/Javadoc Warnings/,EOF' | grep warning | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n+    newWarns=`expr $patchWarns - $cleanWarns`\n+    if [[ $newWarns -le 0 ]] ; then\n+        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Javadoc warnings\")\n+        newWarns=0\n+    else\n+        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new Javadoc warning(s)\")\n+        newWarns=1\n+    fi\n+    if [[ $cleanWarns != 0 ]] ; then\n+        REPORT+=(\"{color:red}WARNING{color}: the current HEAD has $cleanWarns Javadoc warning(s)\")\n+    fi\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    mvn clean javadoc:aggregate ${MVNPASSTHRU} > ${REPORTDIR}/${TASKNAME}-clean.txt\n+    ;;\n+post)\n+    mvn clean javadoc:aggregate ${MVNPASSTHRU} > ${REPORTDIR}/${TASKNAME}-patch.txt\n+    ;;\n+report)\n+    checkForWarnings\n+    if [[ $newWarns == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"751bfc61923afcc1090dea4d6eaa6a6b4c5639c1","filename":"bin/test-patch-10-compile","status":"added","additions":144,"deletions":0,"changes":144,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-10-compile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-10-compile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-10-compile?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,144 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"COMPILE\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkForWarnings() {\n+    grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-clean.txt > ${TEMPDIR}/${TASKNAME}-javacwarns-clean.txt\n+    grep '\\[WARNING\\]' ${REPORTDIR}/${TASKNAME}-patch.txt > ${TEMPDIR}/${TASKNAME}-javacwarns-patch.txt\n+    cleanWarns=`cat ${TEMPDIR}/${TASKNAME}-javacwarns-clean.txt | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n+    patchWarns=`cat ${TEMPDIR}/${TASKNAME}-javacwarns-patch.txt | awk 'BEGIN {total = 0} {total += 1} END {print total}'`\n+    newWarns=`expr $patchWarns - $cleanWarns`\n+    if [[ $newWarns -le 0 ]] ; then\n+        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new javac warnings\")\n+        newWarns=0\n+    else\n+        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $newWarns new javac warning(s)\")\n+        newWarns=1\n+    fi\n+    if [[ $cleanWarns != 0 ]] ; then\n+        REPORT+=(\"{color:red}WARNING{color}: the current HEAD has $cleanWarns javac warning(s)\")\n+    fi\n+}\n+###############################################################################\n+\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    mvn clean package -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-clean.txt >> $STDOUT\n+    if [[ ${PIPESTATUS[0]} == 0 ]] ; then\n+        echo \"{color:green}+1{color} HEAD compiles\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n+    else\n+        echo \"{color:red}-1{color} HEAD does not compile\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n+    fi\n+    ;;\n+post)\n+    mvn clean package -DskipTests ${MVNPASSTHRU} | tee ${REPORTDIR}/${TASKNAME}-patch.txt >> $STDOUT\n+    if [[ ${PIPESTATUS[0]} == 0 ]] ; then\n+        echo \"{color:green}+1{color} patch compiles\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n+    else\n+        echo \"{color:red}-1{color} patch does not compile\" >> ${TEMPDIR}/${TASKNAME}-compile.txt\n+    fi\n+    ;;\n+report)\n+    REPORT=()\n+    compileErrors=0\n+    while read line; do\n+        REPORT+=(\"$line\")\n+        if [[ \"$line\" =~ \"-1\" ]] ; then\n+            compileErrors=1\n+        fi\n+    done < ${TEMPDIR}/${TASKNAME}-compile.txt\n+    checkForWarnings\n+    total=`expr $compileErrors + $newWarns`\n+    if [[ $total == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"c91daffd03156963ff01b363aa5034a6a1194efb","filename":"bin/test-patch-11-findbugs","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-11-findbugs","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-11-findbugs","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-11-findbugs?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,156 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"FINDBUGS\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+checkForWarnings() {\n+    cleanBugs=0\n+    patchBugs=0\n+    for m in $(getModules); do\n+        MODNAME=$(echo $m | sed 's/\\///')\n+\n+        m_cleanBugs=$(cat ${REPORTDIR}/${TASKNAME}-${MODNAME}-clean.xml \\\n+            | sed 's/<\\/BugInstance>/<\\/BugInstance>\\n/g' | grep BugInstance | wc -l)\n+        m_patchBugs=$(cat ${REPORTDIR}/${TASKNAME}-${MODNAME}-patch.xml \\\n+            | sed 's/<\\/BugInstance>/<\\/BugInstance>\\n/g' | grep BugInstance | wc -l)\n+        m_newBugs=`expr $m_patchBugs - $m_cleanBugs`\n+        if [[ $m_newBugs != 0 ]] ; then\n+            BUGMODULES=\"$MODNAME $BUGMODULES\"\n+        fi\n+\n+        cleanBugs=$(($cleanBugs+$m_cleanBugs))\n+        patchBugs=$(($patchBugs+$m_patchBugs))\n+    done\n+\n+    BUGMODULES=$(echo $BUGMODULES | sed 's/^ *//' | sed 's/ *$//')\n+    newBugs=`expr $patchBugs - $cleanBugs`\n+    if [[ $newBugs -le 0 ]] ; then\n+        REPORT+=(\"{color:green}+1{color} the patch does not seem to introduce new Findbugs warnings\")\n+        newBugs=0\n+    else\n+        REPORT+=(\"{color:red}-1{color} the patch seems to introduce $patchBugs new Findbugs warning(s) in module(s) [$BUGMODULES]\")\n+        newBugs=1\n+    fi\n+    if [[ $cleanBugs != 0 ]] ; then\n+        REPORT+=(\"{color:red}WARNING: the current HEAD has $cleanWarns Findbugs warning(s), they should be addressed ASAP{color}\")\n+    fi\n+}\n+\n+###############################################################################\n+\n+getModules() {\n+    find . -name pom.xml | sed 's/^.\\///' | sed 's/pom.xml$//' | grep -v compat\n+}\n+###############################################################################\n+\n+copyFindbugsXml() {\n+    TAG=$1\n+    for m in $(getModules); do\n+        MODNAME=$(echo $m | sed 's/\\///')\n+        cp ${m}target/findbugsXml.xml ${REPORTDIR}/${TASKNAME}-${MODNAME}-$TAG.xml\n+    done\n+}\n+\n+parseArgs \"$@\"\n+\n+\n+case $OP in\n+pre)\n+    mvn findbugs:findbugs ${MVNPASSTHRU} > $STDOUT\n+    copyFindbugsXml clean\n+    ;;\n+post)\n+    mvn findbugs:findbugs ${MVNPASSTHRU} > $STDOUT\n+    copyFindbugsXml patch\n+    ;;\n+report)\n+    checkForWarnings\n+    if [[ $newBugs == 0 ]] ; then\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+    fi\n+    for line in \"${REPORT[@]}\" ; do\n+        echo \".    ${line}\" >> $SUMMARYFILE\n+    done\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"ab77bcdcea2a4711f964f887829f1b42464b85c7","filename":"bin/test-patch-20-tests","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-20-tests","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-20-tests","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-20-tests?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,125 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"TESTS\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    ;;\n+post)\n+    # must use package instead of test so that compat-deps shaded jars are correct\n+    mvn package ${MVNPASSTHRU} -Dmaven.test.failure.ignore=true \\\n+        -Dmaven.test.error.ignore=true -fae \\\n+        -Dtest.timeout=7200 | tee ${TEMPDIR}/${TASKNAME}.out >> $STDOUT\n+    exitCode=${PIPESTATUS[0]}\n+    echo \"$exitCode\" >  ${TEMPDIR}/${TASKNAME}.exitCode\n+    ;;\n+report)\n+    failedTests=` find . -name '*\\.txt' | grep target/surefire-reports | xargs grep  \"<<< FAILURE\" | grep -v \"Tests run:\" | sed 's/.*\\.txt\\://' | sed 's/ .*//'`\n+    testsRun=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $3}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n+    testsFailed=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $5}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n+    testsErrors=`grep \"Tests run:\" ${TEMPDIR}/${TASKNAME}.out | grep -v \" Time elapsed:\" | awk '{print $7}' | sed 's/,//' | awk 'BEGIN {count=0} {count=count+$1} END {print count}'`\n+    hasFailures=`expr $testsFailed + $testsErrors`\n+    testsExitCode=`cat ${TEMPDIR}/${TASKNAME}.exitCode`\n+    if [[ $hasFailures != 0 ]] ; then\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+        echo \".    Tests run: $testsRun\" >> $SUMMARYFILE\n+        echo \".    Tests failed: $testsFailed\" >> $SUMMARYFILE\n+        echo \".    Tests errors: $testsErrors\" >> $SUMMARYFILE\n+        echo \"\" >> ${SUMMARYFILE}\n+        echo \".    The patch failed the following testcases:\" >> $SUMMARYFILE\n+        echo \"\" >> ${SUMMARYFILE}\n+        echo \"${failedTests}\" | sed 's/^/.      /' >> $SUMMARYFILE\n+        echo \"\" >> ${SUMMARYFILE}\n+    else\n+        if [[ \"$testsExitCode\" != \"0\" ]] ; then\n+            echo \"{color:red}-1 ${TASKNAME}{color} - patch does not compile, cannot run testcases\" >> $SUMMARYFILE\n+        else\n+            echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+            echo \".    Tests run: $testsRun\" >> $SUMMARYFILE\n+        fi\n+    fi\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"33d4d6c0789320383e46b464b964f8babb9c493b","filename":"bin/test-patch-30-dist","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-30-dist","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bin/test-patch-30-dist","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-30-dist?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,106 @@\n+#!/bin/bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n+    set -x\n+fi\n+\n+BASEDIR=$(pwd)\n+TASKNAME=\"DISTRO\"\n+OP=\"\"\n+TEMPDIR=\"\"\n+REPORTDIR=\"\"\n+SUMMARYFILE=\"\"\n+STDOUT=\"/dev/null\"\n+MVNPASSTHRU=\"\"\n+\n+###############################################################################\n+cleanupAndExit() {\n+    exit $1\n+}\n+###############################################################################\n+printUsage() {\n+    echo \"Usage: $0 --taskname | (--op=pre|post|report --tempdir=<TEMP DIR> --reportdir=<REPORT DIR> --summaryfile=<SUMMARY FILE>) [--verbose] [-D<VALUE>...] [-P<VALUE>...]\"\n+    echo\n+}\n+###############################################################################\n+parseArgs() {\n+    for i in $*\n+    do\n+        case $i in\n+        --taskname)\n+            echo ${TASKNAME}\n+            exit 0\n+            ;;\n+        --op=*)\n+            OP=${i#*=}\n+            ;;\n+        --tempdir=*)\n+            TEMPDIR=${i#*=}\n+            ;;\n+        --reportdir=*)\n+            REPORTDIR=${i#*=}\n+            ;;\n+        --summaryfile=*)\n+            SUMMARYFILE=${i#*=}\n+            ;;\n+        --verbose)\n+            STDOUT=\"/dev/stdout\"\n+            ;;\n+        -D*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        -P*)\n+            MVNPASSTHRU=\"${MVNPASSTHRU} $i\"\n+            ;;\n+        esac\n+    done\n+    if [[ \"${TASKNAME}\" == \"\" || \"${OP}\" == \"\" || \"${TEMPDIR}\" == \"\" || \"${REPORTDIR}\" == \"\" || \"${SUMMARYFILE}\" == \"\" ]] ; then\n+        echo \"Missing options\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+    if [[ \"${OP}\" != \"pre\" && \"${OP}\" != \"post\" && \"${OP}\" != \"report\" ]] ; then\n+        echo \"Invalid operation\"\n+        echo\n+        printUsage\n+        cleanupAndExit 1\n+    fi\n+}\n+###############################################################################\n+\n+parseArgs \"$@\"\n+\n+case $OP in\n+pre)\n+    ;;\n+post)\n+    mvn package assembly:single -DskipTests | tee ${REPORTDIR}/${TASKNAME}.out >> $STDOUT\n+    exitCode=${PIPESTATUS[0]}\n+    echo \"$exitCode\" >  ${TEMPDIR}/${TASKNAME}.exitCode\n+    ;;\n+report)\n+    exitCode=`cat ${TEMPDIR}/${TASKNAME}.exitCode`\n+    if [[ \"$exitCode\" != \"0\" ]] ; then\n+        echo \"{color:red}-1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+        echo \".    {color:red}-1{color} distro tarball fails with the patch\" >> $SUMMARYFILE\n+    else\n+        echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE\n+        echo \".    {color:green}+1{color} distro tarball builds with the patch \" >> $SUMMARYFILE\n+    fi\n+    ;;\n+esac\n+\n+exit 0"},{"sha":"82b5f9cae5345abd4ab948789fe12d1d5a18dc0a","filename":"bookkeeper-benchmark/pom.xml","status":"modified","additions":38,"deletions":16,"changes":54,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/pom.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.1.0-SNAPSHOT</version>\n+    <version>4.2.0</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-benchmark</artifactId>\n@@ -40,6 +40,15 @@\n \t  <skipAssembly>true</skipAssembly>\n         </configuration>\n       </plugin>\n+      <plugin>\n+      \t<groupId>org.apache.maven.plugins</groupId>\n+\t<artifactId>maven-surefire-plugin</artifactId>\n+\t<configuration>\n+          <systemPropertyVariables>\n+            <test.latency.file>target/latencyDump.dat</test.latency.file>\n+          </systemPropertyVariables>\n+\t</configuration>\n+      </plugin>\n     </plugins>\n   </build>\n   <dependencies>\n@@ -58,19 +67,6 @@\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-log4j12</artifactId>\n       <version>1.6.4</version>\n-      <scope>test</scope>\n-    </dependency>\n-    <dependency>\n-       <groupId>org.apache.hadoop</groupId>\n-       <artifactId>hadoop-common</artifactId>\n-       <version>0.23.1</version>\n-       <scope>compile</scope>\n-    </dependency>\n-    <dependency>\n-       <groupId>org.apache.hadoop</groupId>\n-       <artifactId>hadoop-hdfs</artifactId>\n-       <version>0.23.1</version>\n-       <scope>compile</scope>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.zookeeper</groupId>\n@@ -96,8 +92,15 @@\n       <groupId>org.apache.bookkeeper</groupId>\n       <artifactId>bookkeeper-server</artifactId>\n       <version>${project.parent.version}</version>\n-      <type>jar</type>\n       <scope>compile</scope>\n+      <type>jar</type>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server</artifactId>\n+      <version>${project.parent.version}</version>\n+      <scope>test</scope>\n+      <type>test-jar</type>\n     </dependency>\n     <!--\n \tAnnoying dependency we need to include because\n@@ -109,7 +112,6 @@\n       <groupId>log4j</groupId>\n       <artifactId>log4j</artifactId>\n       <version>1.2.15</version>\n-      <scope>provided</scope>\n       <exclusions>\n \t<exclusion>\n \t  <groupId>javax.mail</groupId>\n@@ -134,5 +136,25 @@\n       <artifactId>commons-cli</artifactId>\n       <version>1.2</version>\n     </dependency>\n+    <dependency>\n+       <groupId>org.apache.hadoop</groupId>\n+       <artifactId>hadoop-common</artifactId>\n+       <version>0.23.1</version>\n+       <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.hadoop</groupId>\n+      <artifactId>hadoop-hdfs</artifactId>\n+      <version>0.23.1</version>\n+      <scope>compile</scope>\n+      <!-- commons-daemon has a malformed pom, which can cause the build to fail in an\n+           environment which uses an artifactory cache. -->\n+      <exclusions>\n+        <exclusion>\n+          <groupId>commons-daemon</groupId>\n+          <artifactId>commons-daemon</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n   </dependencies>\n </project>"},{"sha":"0d5ae0a6fc0911a7091c0ec43738199894aa579c","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":20,"deletions":9,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -78,7 +78,7 @@\n         }\n     }\n \n-    public BenchThroughputLatency(int ensemble, int qSize, byte[] passwd,\n+    public BenchThroughputLatency(int ensemble, int writeQuorumSize, int ackQuorumSize, byte[] passwd,\n             int numberOfLedgers, int sendLimit, ClientConfiguration conf)\n             throws KeeperException, IOException, InterruptedException {\n         this.sem = new Semaphore(conf.getThrottleValue());\n@@ -91,9 +91,11 @@ public BenchThroughputLatency(int ensemble, int qSize, byte[] passwd,\n             lh = new LedgerHandle[this.numberOfLedgers];\n \n             for(int i = 0; i < this.numberOfLedgers; i++) {\n-                lh[i] = bk.createLedger(ensemble, qSize, BookKeeper.DigestType.CRC32,\n+                lh[i] = bk.createLedger(ensemble, writeQuorumSize,\n+                                        ackQuorumSize,\n+                                        BookKeeper.DigestType.CRC32,\n                                         passwd);\n-                LOG.info(\"Ledger Handle: \" + lh[i].getId());\n+                LOG.debug(\"Ledger Handle: \" + lh[i].getId());\n             }\n         } catch (BKException e) {\n             e.printStackTrace();\n@@ -233,6 +235,7 @@ public static void main(String[] args)\n         options.addOption(\"entrysize\", true, \"Entry size (bytes), default 1024\");\n         options.addOption(\"ensemble\", true, \"Ensemble size, default 3\");\n         options.addOption(\"quorum\", true, \"Quorum size, default 2\");\n+        options.addOption(\"ackQuorum\", true, \"Ack quorum size, default is same as quorum\");\n         options.addOption(\"throttle\", true, \"Max outstanding requests, default 10000\");\n         options.addOption(\"ledgers\", true, \"Number of ledgers, default 1\");\n         options.addOption(\"zookeeper\", true, \"Zookeeper ensemble, default \\\"localhost:2181\\\"\");\n@@ -242,6 +245,7 @@ public static void main(String[] args)\n         options.addOption(\"sockettimeout\", true, \"Socket timeout for bookkeeper client. In seconds. Default 5\");\n         options.addOption(\"skipwarmup\", false, \"Skip warm up, default false\");\n         options.addOption(\"sendlimit\", true, \"Max number of entries to send. Default 20000000\");\n+        options.addOption(\"latencyFile\", true, \"File to dump latencies. Default is latencyDump.dat\");\n         options.addOption(\"help\", false, \"This message\");\n \n         CommandLineParser parser = new PosixParser();\n@@ -260,6 +264,10 @@ public static void main(String[] args)\n         int ledgers = Integer.valueOf(cmd.getOptionValue(\"ledgers\", \"1\"));\n         int ensemble = Integer.valueOf(cmd.getOptionValue(\"ensemble\", \"3\"));\n         int quorum = Integer.valueOf(cmd.getOptionValue(\"quorum\", \"2\"));\n+        int ackQuorum = quorum;\n+        if (cmd.hasOption(\"ackQuorum\")) {\n+            ackQuorum = Integer.valueOf(cmd.getOptionValue(\"ackQuorum\"));\n+        }\n         int throttle = Integer.valueOf(cmd.getOptionValue(\"throttle\", \"10000\"));\n         int sendLimit = Integer.valueOf(cmd.getOptionValue(\"sendlimit\", \"20000000\"));\n \n@@ -268,6 +276,8 @@ public static void main(String[] args)\n         String coordinationZnode = cmd.getOptionValue(\"coordnode\");\n         final byte[] passwd = cmd.getOptionValue(\"password\", \"benchPasswd\").getBytes();\n \n+        String latencyFile = cmd.getOptionValue(\"latencyFile\", \"latencyDump.dat\");\n+\n         Timer timeouter = new Timer();\n         if (cmd.hasOption(\"timeout\")) {\n             final long timeout = Long.valueOf(cmd.getOptionValue(\"timeout\", \"360\")) * 1000;\n@@ -285,7 +295,8 @@ public void run() {\n                 \", quorum size: \" + quorum +\n                 \", throttle: \" + throttle +\n                 \", number of ledgers: \" + ledgers +\n-                \", zk servers: \" + servers);\n+                \", zk servers: \" + servers +\n+                \", latency file: \" + latencyFile);\n \n         long totalTime = runningTime*1000;\n \n@@ -309,8 +320,8 @@ public void run() {\n \n \n         // Now do the benchmark\n-        BenchThroughputLatency bench = new BenchThroughputLatency(ensemble, quorum, passwd,\n-                                                                  ledgers, sendLimit, conf);\n+        BenchThroughputLatency bench = new BenchThroughputLatency(ensemble, quorum, ackQuorum,\n+                passwd, ledgers, sendLimit, conf);\n         bench.setEntryData(data);\n         thread = new Thread(bench);\n         ZooKeeper zk = null;\n@@ -380,7 +391,7 @@ public void process(WatchedEvent event) {\n         }\n \n         // dump the latencies for later debugging (it will be sorted by entryid)\n-        OutputStream fos = new BufferedOutputStream(new FileOutputStream(\"latencyDump.dat\"));\n+        OutputStream fos = new BufferedOutputStream(new FileOutputStream(latencyFile));\n \n         for(Long l: latency) {\n             fos.write((Long.toString(l)+\"\\t\"+(l/1000000)+ \"ms\\n\").getBytes());\n@@ -435,8 +446,8 @@ public void process(WatchedEvent event) {\n             }\n         }\n \n-        BenchThroughputLatency warmup = new BenchThroughputLatency(bookies, bookies, passwd,\n-                ledgers, 50000, conf);\n+        BenchThroughputLatency warmup = new BenchThroughputLatency(bookies, bookies, bookies, passwd,\n+                                                                   ledgers, 10000, conf);\n         warmup.setEntryData(data);\n         Thread thread = new Thread(warmup);\n         thread.start();"},{"sha":"a47559b25a99bf44b2f354eead02c5e31a9688e6","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","status":"modified","additions":15,"deletions":26,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/TestClient.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -20,51 +20,40 @@\n  */\n package org.apache.bookkeeper.benchmark;\n \n-import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n-import java.util.Enumeration;\n-import java.util.HashMap;\n-import java.util.List;\n import java.util.ArrayList;\n+import java.util.List;\n import java.util.Random;\n import java.util.Timer;\n import java.util.TimerTask;\n-\n-import java.util.concurrent.Future;;\n import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicLong;\n \n-import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.BookKeeper;\n-import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import org.apache.zookeeper.KeeperException;\n-\n-import org.apache.hadoop.conf.Configuration;\n-import org.apache.hadoop.fs.FileSystem;\n-import org.apache.hadoop.fs.FSDataOutputStream;\n-import org.apache.hadoop.fs.Path;\n-\n-import org.apache.commons.cli.HelpFormatter;\n-import org.apache.commons.cli.Option;\n-import org.apache.commons.cli.Options;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.CommandLineParser;\n-import org.apache.commons.cli.PosixParser;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.Options;\n import org.apache.commons.cli.ParseException;\n+import org.apache.commons.cli.PosixParser;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.zookeeper.KeeperException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n /**"},{"sha":"269ea5894f9a01bcda5c44e1cbac8e582dc1dc6b","filename":"bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","status":"modified","additions":26,"deletions":77,"changes":103,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/test/java/org/apache/bookkeeper/benchmark/TestBenchmark.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -24,9 +24,11 @@\n import org.junit.Test;\n import org.junit.Assert;\n \n+import java.net.InetSocketAddress;\n import org.apache.bookkeeper.client.BookKeeper;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.util.LocalBookKeeper;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -44,105 +46,48 @@\n import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.Watcher.Event.KeeperState;\n \n-public class TestBenchmark {\n+public class TestBenchmark extends BookKeeperClusterTestCase {\n     protected static final Logger LOG = LoggerFactory.getLogger(TestBenchmark.class);\n \n-    private static Thread ensembleThread = null;\n-    private final static String zkString = \"localhost:2181\";\n-    private static List<String> bookies = null;\n-\n-    @BeforeClass\n-    public static void startEnsemble() throws Exception {\n-        final int numBookies = 5;\n-\n-        ensembleThread = new Thread() {\n-                public void run() {\n-                    try {\n-                        LocalBookKeeper.main(new String[]{String.valueOf(numBookies)});\n-                    } catch (InterruptedException ie) {\n-                        LOG.info(\"Shutting down ensemble thread\");\n-                    } catch (Exception e) {\n-                        LOG.error(\"Error running bookkeeper ensemble\", e);\n-                    }\n-                }\n-            };\n-        ensembleThread.start();\n-\n-        if (!LocalBookKeeper.waitForServerUp(zkString, 5000)) {\n-            throw new Exception(\"Failed to start zookeeper\");\n-        }\n-        ZooKeeper zk = null;\n-        try {\n-            final CountDownLatch connectLatch = new CountDownLatch(1);\n-\n-            zk = new ZooKeeper(zkString, 15000, new Watcher() {\n-                    @Override\n-                    public void process(WatchedEvent event) {\n-                        if (event.getState() == KeeperState.SyncConnected) {\n-                            connectLatch.countDown();\n-                        }\n-                    }});\n-            if (!connectLatch.await(10, TimeUnit.SECONDS)) {\n-                LOG.error(\"Couldn't connect to zookeeper at \" + zkString);\n-            } else {\n-                for (int i = 0; i < 10; i++) {\n-                    try {\n-                        bookies = zk.getChildren(\"/ledgers/available\", false);\n-                        if (zk.getChildren(\"/ledgers/available\", false).size()\n-                            == numBookies) {\n-                            return;\n-                        }\n-                    } catch (Exception e) {\n-                        // do nothing\n-                    }\n-                    Thread.sleep(1000);\n-                }\n-                throw new Exception(\"Not enough bookies started\");\n-            }\n-        } finally {\n-            zk.close();\n-        }\n-    }\n-\n-    @AfterClass\n-    public static void stopEnsemble() throws Exception {\n-        if (ensembleThread != null) {\n-            ensembleThread.interrupt();\n-            ensembleThread.join();\n-        }\n+    public TestBenchmark() {\n+        super(5);\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testThroughputLatency() throws Exception {\n+        String latencyFile = System.getProperty(\"test.latency.file\", \"latencyDump.dat\");\n         BenchThroughputLatency.main(new String[] {\n+                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                 \"--time\", \"10\",\n                 \"--skipwarmup\",\n                 \"--throttle\", \"1\",\n-                \"--sendlimit\", \"10000\"\n+                \"--sendlimit\", \"10000\",\n+                \"--latencyFile\", latencyFile\n             });\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testBookie() throws Exception {\n-        String bookie = bookies.get(0);\n-        String[] parts = bookie.split(\":\");\n+        InetSocketAddress bookie = getBookie(0);\n         BenchBookie.main(new String[] {\n-                \"--host\", parts[0],\n-                \"--port\", parts[1],\n-                \"--zookeeper\", zkString\n+                \"--host\", bookie.getHostName(),\n+                \"--port\", String.valueOf(bookie.getPort()),\n+                \"--zookeeper\", zkUtil.getZooKeeperConnectString()\n                 });\n     }\n \n-    @Test\n+    @Test(timeout=60000)\n     public void testReadThroughputLatency() throws Exception {\n-        AtomicBoolean threwException = new AtomicBoolean(false);\n+        final AtomicBoolean threwException = new AtomicBoolean(false);\n         Thread t = new Thread() {\n                 public void run() {\n                     try {\n                         BenchReadThroughputLatency.main(new String[] {\n+                                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                                 \"--listen\", \"10\"});\n                     } catch (Throwable t) {\n                         LOG.error(\"Error reading\", t);\n+                        threwException.set(true);\n                     }\n                 }\n             };\n@@ -155,7 +100,7 @@ public void run() {\n         long lastLedgerId = 0;\n         Assert.assertTrue(\"Thread should be running\", t.isAlive());\n         for (int i = 0; i < 10; i++) {\n-            BookKeeper bk = new BookKeeper(zkString);\n+            BookKeeper bk = new BookKeeper(zkUtil.getZooKeeperConnectString());\n             LedgerHandle lh = bk.createLedger(BookKeeper.DigestType.CRC32, \"benchPasswd\".getBytes());\n             lastLedgerId = lh.getId();\n             try {\n@@ -177,23 +122,26 @@ public void run() {\n         Assert.assertFalse(\"Thread should be finished\", t.isAlive());\n \n         BenchReadThroughputLatency.main(new String[] {\n+                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                 \"--ledger\", String.valueOf(lastLedgerId)});\n \n         final long nextLedgerId = lastLedgerId+1;\n         t = new Thread() {\n                 public void run() {\n                     try {\n                         BenchReadThroughputLatency.main(new String[] {\n+                                \"--zookeeper\", zkUtil.getZooKeeperConnectString(),\n                                 \"--ledger\", String.valueOf(nextLedgerId)});\n                     } catch (Throwable t) {\n                         LOG.error(\"Error reading\", t);\n+                        threwException.set(true);\n                     }\n                 }\n             };\n         t.start();\n \n         Assert.assertTrue(\"Thread should be running\", t.isAlive());\n-        BookKeeper bk = new BookKeeper(zkString);\n+        BookKeeper bk = new BookKeeper(zkUtil.getZooKeeperConnectString());\n         LedgerHandle lh = bk.createLedger(BookKeeper.DigestType.CRC32, \"benchPasswd\".getBytes());\n         try {\n             for (int j = 0; j < 100; j++) {\n@@ -210,5 +158,6 @@ public void run() {\n             Thread.sleep(1000); // wait for 10 seconds for reading to finish\n         }\n         Assert.assertFalse(\"Thread should be finished\", t.isAlive());\n+        Assert.assertFalse(\"A thread has thrown an exception, check logs\", threwException.get());\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"040f01172fa9746ae2549c7a70a5f136ad4c9bb7","filename":"bookkeeper-benchmark/src/test/resources/log4j.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/src/test/resources/log4j.properties","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-benchmark/src/test/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/test/resources/log4j.properties?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -26,7 +26,7 @@\n # Format is \"<default threshold> (, <appender>)+\n \n # DEFAULT: console appender only\n-log4j.rootLogger=OFF, CONSOLE\n+log4j.rootLogger=INFO, CONSOLE\n \n # Example with rolling log file\n #log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE"},{"sha":"826f7507e7831c3ed03ec46b126bd1be935ba07e","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":31,"deletions":6,"changes":37,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -57,12 +57,14 @@ DEFAULT_LOG_CONF=$BK_HOME/conf/log4j.properties\n \n source $BK_HOME/conf/bkenv.sh\n \n-RELEASE_JAR=`ls $BK_HOME/bookkeeper-server-*.jar 2> /dev/null | tail -1` \n+# exclude tests jar\n+RELEASE_JAR=`ls $BK_HOME/bookkeeper-server-*.jar 2> /dev/null | grep -v tests | tail -1` \n if [ $? == 0 ]; then\n     BOOKIE_JAR=$RELEASE_JAR\n fi\n \n-BUILT_JAR=`ls $BK_HOME/target/bookkeeper-server-*.jar 2> /dev/null | tail -1`\n+# exclude tests jar\n+BUILT_JAR=`ls $BK_HOME/target/bookkeeper-server-*.jar 2> /dev/null | grep -v tests | tail -1`\n if [ $? != 0 ] && [ ! -e \"$BOOKIE_JAR\" ]; then \n     echo \"\\nCouldn't find bookkeeper jar.\";\n     echo \"Make sure you've run 'mvn package'\\n\";\n@@ -76,8 +78,10 @@ bookkeeper_help() {\n Usage: bookkeeper <command>\n where command is one of:\n     bookie              Run a bookie server\n+    autorecovery        Run AutoRecovery service daemon\n     localbookie <n>     Run a test ensemble of <n> bookies locally\n     upgrade             Upgrade bookie filesystem\n+    shell               Run shell for admin commands\n     help                This help message\n \n or command is the full name of a class with a defined main() method.\n@@ -87,6 +91,7 @@ Environment variables:\n    BOOKIE_CONF            Configuration file (default: $DEFAULT_CONF)\n    BOOKIE_EXTRA_OPTS      Extra options to be passed to the jvm\n    BOOKIE_EXTRA_CLASSPATH Add extra paths to the bookkeeper classpath\n+   ENTRY_FORMATTER_CLASS  Entry formatter class to format entries.\n \n These variable can also be set in conf/bkenv.sh\n EOF\n@@ -127,6 +132,10 @@ fi\n COMMAND=$1\n shift\n \n+if [ $COMMAND == \"shell\" ]; then\n+    DEFAULT_LOG_CONF=$BK_HOME/conf/log4j.shell.properties\n+fi\n+\n if [ -z \"$BOOKIE_CONF\" ]; then\n     BOOKIE_CONF=$DEFAULT_CONF\n fi\n@@ -136,25 +145,41 @@ if [ -z \"$BOOKIE_LOG_CONF\" ]; then\n fi\n \n BOOKIE_CLASSPATH=\"$BOOKIE_JAR:$BOOKIE_CLASSPATH:$BOOKIE_EXTRA_CLASSPATH\"\n-if [ \"$BOOKIE_LOG_CONF\" != \"\" ]; then\n-    BOOKIE_CLASSPATH=\"`dirname $BOOKIE_LOG_CONF`:$BOOKIE_CLASSPATH\"\n-    OPTS=\"$OPTS -Dlog4j.configuration=`basename $BOOKIE_LOG_CONF`\"\n-fi\n+BOOKIE_CLASSPATH=\"`dirname $BOOKIE_LOG_CONF`:$BOOKIE_CLASSPATH\"\n+OPTS=\"$OPTS -Dlog4j.configuration=`basename $BOOKIE_LOG_CONF`\"\n+\n OPTS=\"-cp $BOOKIE_CLASSPATH $OPTS $BOOKIE_EXTRA_OPTS\"\n \n OPTS=\"$OPTS $BOOKIE_EXTRA_OPTS\"\n \n # Disable ipv6 as it can cause issues\n OPTS=\"$OPTS -Djava.net.preferIPv4Stack=true\"\n \n+# log directory & file\n+BOOKIE_ROOT_LOGGER=${BOOKIE_ROOT_LOGGER:-\"INFO,CONSOLE\"}\n+BOOKIE_LOG_DIR=${BOOKIE_LOG_DIR:-\"$BK_HOME/logs\"}\n+BOOKIE_LOG_FILE=${BOOKIE_LOG_FILE:-\"bookkeeper-server.log\"}\n+\n+#Configure log configuration system properties\n+OPTS=\"$OPTS -Dbookkeeper.root.logger=$BOOKIE_ROOT_LOGGER\"\n+OPTS=\"$OPTS -Dbookkeeper.log.dir=$BOOKIE_LOG_DIR\"\n+OPTS=\"$OPTS -Dbookkeeper.log.file=$BOOKIE_LOG_FILE\"\n+\n+#Change to BK_HOME to support relative paths\n+cd \"$BK_HOME\"\n if [ $COMMAND == \"bookie\" ]; then\n     exec java $OPTS $JMX_ARGS org.apache.bookkeeper.proto.BookieServer --conf $BOOKIE_CONF $@\n+elif [ $COMMAND == \"autorecovery\" ]; then\n+    exec java $OPTS $JMX_ARGS org.apache.bookkeeper.replication.AutoRecoveryMain --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"localbookie\" ]; then\n     NUMBER=$1\n     shift\n     exec java $OPTS $JMX_ARGS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $BOOKIE_CONF $@\n elif [ $COMMAND == \"upgrade\" ]; then\n     exec java $OPTS org.apache.bookkeeper.bookie.FileSystemUpgrade --conf $BOOKIE_CONF $@\n+elif [ $COMMAND == \"shell\" ]; then\n+    ENTRY_FORMATTER_ARG=\"-DentryFormatterClass=${ENTRY_FORMATTER_CLASS:-org.apache.bookkeeper.util.StringEntryFormatter}\"\n+    exec java $OPTS $ENTRY_FORMATTER_ARG org.apache.bookkeeper.bookie.BookieShell -conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"help\" ]; then\n     bookkeeper_help;\n else"},{"sha":"92df65b485705245c4d66d3d4413d075cc10e45a","filename":"bookkeeper-server/bin/bookkeeper-daemon.sh","status":"added","additions":175,"deletions":0,"changes":175,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/bin/bookkeeper-daemon.sh","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/bin/bookkeeper-daemon.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper-daemon.sh?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,175 @@\n+#!/usr/bin/env bash\n+#\n+#/**\n+# * Licensed to the Apache Software Foundation (ASF) under one\n+# * or more contributor license agreements.  See the NOTICE file\n+# * distributed with this work for additional information\n+# * regarding copyright ownership.  The ASF licenses this file\n+# * to you under the Apache License, Version 2.0 (the\n+# * \"License\"); you may not use this file except in compliance\n+# * with the License.  You may obtain a copy of the License at\n+# *\n+# *     http://www.apache.org/licenses/LICENSE-2.0\n+# *\n+# * Unless required by applicable law or agreed to in writing, software\n+# * distributed under the License is distributed on an \"AS IS\" BASIS,\n+# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# * See the License for the specific language governing permissions and\n+# * limitations under the License.\n+# */\n+\n+usage() {\n+    cat <<EOF\n+Usage: bookkeeper-daemon.sh (start|stop) <command> <args...>\n+where command is one of:\n+    bookie           Run the bookie server\n+\n+where argument is one of:\n+    -force (accepted only with stop command): Decides whether to stop the Bookie Server forcefully if not stopped by normal shutdown\n+EOF\n+}\n+\n+BINDIR=`dirname \"$0\"`\n+BK_HOME=`cd $BINDIR/..;pwd`\n+\n+if [ -f $BK_HOME/conf/bkenv.sh ]\n+then\n+ . $BK_HOME/conf/bkenv.sh\n+fi\n+\n+BOOKIE_LOG_DIR=${BOOKIE_LOG_DIR:-\"$BK_HOME/logs\"}\n+\n+BOOKIE_ROOT_LOGGER=${BOOKIE_ROOT_LOGGER:-'INFO,ROLLINGFILE'}\n+\n+BOOKIE_STOP_TIMEOUT=${BOOKIE_STOP_TIMEOUT:-30}\n+\n+BOOKIE_PID_DIR=${BOOKIE_PID_DIR:-$BK_HOME/bin}\n+\n+if [ $# -lt 2 ]\n+then\n+    echo \"Error: no enough arguments provided.\"\n+    usage\n+    exit 1\n+fi\n+\n+startStop=$1\n+shift\n+command=$1\n+shift\n+\n+case $command in\n+    (bookie)\n+        echo \"doing $startStop $command ...\"\n+        ;;\n+    (autorecovery)\n+        echo \"doing $startStop $command ...\"\n+        ;;\n+    (*)\n+        echo \"Error: unknown service name $command\"\n+        usage\n+        exit 1\n+        ;;\n+esac\n+\n+export BOOKIE_LOG_DIR=$BOOKIE_LOG_DIR\n+export BOOKIE_ROOT_LOGGER=$BOOKIE_ROOT_LOGGER\n+export BOOKIE_LOG_FILE=bookkeeper-$command-$HOSTNAME.log\n+\n+pid=$BOOKIE_PID_DIR/bookkeeper-$command.pid\n+out=$BOOKIE_LOG_DIR/bookkeeper-$command-$HOSTNAME.out\n+logfile=$BOOKIE_LOG_DIR/$BOOKIE_LOG_FILE\n+\n+rotate_out_log ()\n+{\n+    log=$1;\n+    num=5;\n+    if [ -n \"$2\" ]; then\n+       num=$2\n+    fi\n+    if [ -f \"$log\" ]; then # rotate logs\n+        while [ $num -gt 1 ]; do\n+            prev=`expr $num - 1`\n+            [ -f \"$log.$prev\" ] && mv \"$log.$prev\" \"$log.$num\"\n+            num=$prev\n+        done\n+        mv \"$log\" \"$log.$num\";\n+    fi\n+}\n+\n+mkdir -p \"$BOOKIE_LOG_DIR\"\n+\n+case $startStop in\n+  (start)\n+    if [ -f $pid ]; then\n+      if kill -0 `cat $pid` > /dev/null 2>&1; then\n+        echo $command running as process `cat $pid`.  Stop it first.\n+        exit 1\n+      fi\n+    fi\n+\n+    rotate_out_log $out\n+    echo starting $command, logging to $logfile\n+    bookkeeper=$BK_HOME/bin/bookkeeper\n+    nohup $bookkeeper $command \"$@\" > \"$out\" 2>&1 < /dev/null &\n+    echo $! > $pid\n+    sleep 1; head $out\n+    sleep 2;\n+    if ! ps -p $! > /dev/null ; then\n+      exit 1\n+    fi\n+    ;;\n+\n+  (stop)\n+    if [ -f $pid ]; then\n+      TARGET_PID=`cat $pid`\n+      if kill -0 $TARGET_PID > /dev/null 2>&1; then\n+        echo stopping $command\n+        kill $TARGET_PID\n+\n+        count=0\n+        location=$BOOKIE_LOG_DIR\n+        while ps -p $TARGET_PID > /dev/null;\n+         do\n+          echo \"Shutdown is in progress... Please wait...\"\n+          sleep 1\n+          count=`expr $count + 1`\n+         \n+          if [ \"$count\" = \"$BOOKIE_STOP_TIMEOUT\" ]; then\n+                break\n+          fi\n+         done\n+        \n+        if [ \"$count\" != \"$BOOKIE_STOP_TIMEOUT\" ]; then\n+                 echo \"Shutdown completed.\"\n+                exit 0\n+        fi\n+                 \n+        if kill -0 $TARGET_PID > /dev/null 2>&1; then\n+              fileName=$location/$command.out\n+              $JAVA_HOME/bin/jstack $TARGET_PID > $fileName\n+              echo Thread dumps are taken for analysis at $fileName\n+              if [ \"$1\" == \"-force\" ]\n+              then\n+                 echo forcefully stopping $command\n+                 kill -9 $TARGET_PID >/dev/null 2>&1\n+                 echo Successfully stopped the process\n+              else\n+                 echo \"WARNNING :  Bookie Server is not stopped completely.\"\n+                 exit 1\n+              fi\n+        fi\n+      else\n+        echo no $command to stop\n+      fi\n+      rm $pid\n+    else\n+      echo no $command to stop\n+    fi\n+    ;;\n+\n+  (*)\n+    usage\n+    echo $supportedargs\n+    exit 1\n+    ;;\n+esac"},{"sha":"d3dd397989ad23257db734591de07b10e68db9a3","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/conf/bk_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/conf/bk_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bk_server.conf?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -159,3 +159,21 @@ zkTimeout=10000\n # the limitation of number of index pages.\n # pageLimit=-1\n \n+#If all ledger directories configured are full, then support only read \n+#requests for clients.\n+#If \"readOnlyModeEnabled=true\" then on all ledger disks full, bookie will be converted\n+#to read-only mode and serve only read requests. Else bookie will get shutdown.\n+#By default this will be disabled.\n+#readOnlyModeEnabled=false\n+\n+#For each ledger dir, maximum disk space which can be used.\n+#Default is 0.95f. i.e. 95% of disk can be used at most after which nothing will\n+#be written to that partition. If all ledger dir partions are full, then bookie\n+#will turn to readonly mode if 'readOnlyModeEnabled=true' is set, else it will\n+#shutdown.\n+#Valid values should be in between 0 and 1 (exclusive). \n+#diskUsageThreshold=0.95\n+\n+#Disk check interval in milli seconds, interval to check the ledger dirs usage.\n+#Default is 10000\n+#diskCheckInterval=10000"},{"sha":"24d3be0262cd119feed2b295bae5d343978b8519","filename":"bookkeeper-server/conf/bkenv.sh","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/conf/bkenv.sh","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/conf/bkenv.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bkenv.sh?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -28,8 +28,17 @@\n # Log4j configuration file\n # BOOKIE_LOG_CONF=\n \n+# Logs location\n+# BOOKIE_LOG_DIR=\n+\n # Extra options to be passed to the jvm\n # BOOKIE_EXTRA_OPTS=\n \n # Add extra paths to the bookkeeper classpath\n # BOOKIE_EXTRA_CLASSPATH=\n+\n+#Folder where the Bookie server PID file should be stored\n+#BOOKIE_PID_DIR=\n+\n+#Wait time before forcefully kill the Bookie server instance, if the stop is not successful\n+#BOOKIE_STOP_TIMEOUT=\n\\ No newline at end of file"},{"sha":"1dadb3d69d0c9d812a493fc752beaa3e58de3f5b","filename":"bookkeeper-server/conf/log4j.properties","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/conf/log4j.properties","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/conf/log4j.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/log4j.properties?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -26,7 +26,12 @@\n # Format is \"<default threshold> (, <appender>)+\n \n # DEFAULT: console appender only\n-log4j.rootLogger=WARN, CONSOLE\n+# Define some default values that can be overridden by system properties\n+bookkeeper.root.logger=WARN,CONSOLE\n+bookkeeper.log.dir=.\n+bookkeeper.log.file=bookkeeper-server.log\n+\n+log4j.rootLogger=${bookkeeper.root.logger}\n \n # Example with rolling log file\n #log4j.rootLogger=DEBUG, CONSOLE, ROLLINGFILE\n@@ -46,20 +51,20 @@ log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} - %-5p - [%t:%C{1}@%\n # Add ROLLINGFILE to rootLogger to get log file output\n #    Log DEBUG level and above messages to a log file\n log4j.appender.ROLLINGFILE=org.apache.log4j.DailyRollingFileAppender\n+\n log4j.appender.ROLLINGFILE.Threshold=INFO\n-log4j.appender.ROLLINGFILE.File=bookkeeper-server.log\n+log4j.appender.ROLLINGFILE.File=${bookkeeper.log.dir}/${bookkeeper.log.file}\n log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\n log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p - [%t:%C{1}@%L] - %m%n\n \n # Max log file size of 10MB\n-log4j.appender.ROLLINGFILE.MaxFileSize=10MB\n+#log4j.appender.ROLLINGFILE.MaxFileSize=10MB\n # uncomment the next line to limit number of backup files\n #log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n \n log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\n log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p [%t:%C{1}@%L] - %m%n\n \n-\n #\n # Add TRACEFILE to rootLogger to get log file output\n #    Log DEBUG level and above messages to a log file"},{"sha":"dcdc77c7fb93df0a2a51ff220051dc789edd230f","filename":"bookkeeper-server/conf/log4j.shell.properties","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/conf/log4j.shell.properties","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/conf/log4j.shell.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/log4j.shell.properties?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,41 @@\n+#\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+#\n+\n+#\n+# BookieShell configuration\n+\n+# DEFAULT: console appender only\n+# Define some default values that can be overridden by system properties\n+bookkeeper.root.logger=ERROR,CONSOLE\n+\n+log4j.rootLogger=${bookkeeper.root.logger}\n+\n+#\n+# Log INFO level and above messages to the console\n+#\n+log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n+log4j.appender.CONSOLE.Threshold=INFO\n+log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n+log4j.appender.CONSOLE.layout.ConversionPattern=%d{ABSOLUTE} %-5p %m%n\n+\n+log4j.logger.org.apache.zookeeper=ERROR\n+log4j.logger.org.apache.bookkeeper=ERROR\n+log4j.logger.org.apache.bookkeeper.bookie.BookieShell=INFO"},{"sha":"d3c662a09c341219de2077b3abf1467caf812eb3","filename":"bookkeeper-server/pom.xml","status":"modified","additions":144,"deletions":40,"changes":184,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -21,16 +21,28 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.1.0-SNAPSHOT</version>\n+    <version>4.2.0</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-server</artifactId>\n   <name>bookkeeper-server</name>\n   <url>http://maven.apache.org</url>\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+    <project.libdir>${basedir}/lib</project.libdir>\n   </properties>\n   <dependencies>\n+    <dependency>\n+      <groupId>com.google.protobuf</groupId>\n+      <artifactId>protobuf-java</artifactId>\n+      <version>2.4.1</version>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+      <version>13.0.1</version>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>\n@@ -76,75 +88,167 @@\n       <artifactId>commons-cli</artifactId>\n       <version>1.2</version>\n     </dependency>\n+    <dependency>\n+      <groupId>commons-codec</groupId>\n+      <artifactId>commons-codec</artifactId>\n+      <version>1.6</version>\n+    </dependency>\n     <dependency>\n       <groupId>commons-io</groupId>\n       <artifactId>commons-io</artifactId>\n       <version>2.1</version>\n     </dependency>\n     <!--\n-\tAnnoying dependency we need to include because\n-\tzookeeper uses log4j and so we transatively do, but\n-\tlog4j has some dependencies which aren't in the \n-\tdefault maven repositories\n+        Annoying dependency we need to include because\n+        zookeeper uses log4j and so we transatively do, but\n+        log4j has some dependencies which aren't in the \n+        default maven repositories\n     //-->\n     <dependency>\n       <groupId>log4j</groupId>\n       <artifactId>log4j</artifactId>\n       <version>1.2.15</version>\n       <exclusions>\n-\t<exclusion>\n-\t  <groupId>javax.mail</groupId>\n-\t  <artifactId>mail</artifactId>\n-\t</exclusion>\n-\t<exclusion>\n-\t  <groupId>javax.jms</groupId>\n-\t  <artifactId>jms</artifactId>\n-\t</exclusion>\n-\t<exclusion>\n-\t  <groupId>com.sun.jdmk</groupId>\n-\t  <artifactId>jmxtools</artifactId>\n-\t</exclusion>\n-\t<exclusion>\n-\t  <groupId>com.sun.jmx</groupId>\n-\t  <artifactId>jmxri</artifactId>\n-\t</exclusion>\n+        <exclusion>\n+          <groupId>javax.mail</groupId>\n+          <artifactId>mail</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>javax.jms</groupId>\n+          <artifactId>jms</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>com.sun.jdmk</groupId>\n+          <artifactId>jmxtools</artifactId>\n+        </exclusion>\n+        <exclusion>\n+          <groupId>com.sun.jmx</groupId>\n+          <artifactId>jmxri</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server-compat400</artifactId>\n+      <version>4.0.0</version>\n+      <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>bookkeeper-server</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.bookkeeper</groupId>\n+      <artifactId>bookkeeper-server-compat410</artifactId>\n+      <version>4.1.0</version>\n+      <scope>test</scope>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.bookkeeper</groupId>\n+          <artifactId>bookkeeper-server</artifactId>\n+        </exclusion>\n       </exclusions>\n     </dependency>\n   </dependencies>\n   <build>\n     <plugins>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-surefire-plugin</artifactId>\n-        <version>2.9</version>\n-        <configuration>\n-          <argLine>-Xmx1G</argLine>\n-          <forkMode>pertest</forkMode>\n-        </configuration>\n+        <artifactId>maven-jar-plugin</artifactId>\n+        <version>2.2</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>test-jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n       </plugin>\n       <plugin>\n         <artifactId>maven-assembly-plugin</artifactId>\n         <version>2.2.1</version>\n         <configuration>\n           <descriptors>\n-\t    <descriptor>../src/assemble/bin.xml</descriptor>\n+            <descriptor>../src/assemble/bin.xml</descriptor>\n           </descriptors>\n         </configuration>\n       </plugin>\n       <plugin>\n-\t<artifactId>maven-dependency-plugin</artifactId>\n-\t<executions>\n-\t  <execution>\n-\t    <phase>package</phase>\n-\t    <goals>\n-\t      <goal>copy-dependencies</goal>\n-\t    </goals>\n-\t    <configuration>\n-\t      <outputDirectory>${basedir}/lib</outputDirectory>\n-\t    </configuration>\n-\t  </execution>\n-\t</executions>\n+        <groupId>org.apache.rat</groupId>\n+        <artifactId>apache-rat-plugin</artifactId>\n+        <version>0.7</version>\n+        <configuration>\n+          <excludes>\n+            <!-- exclude generated file //-->\n+            <exclude>**/DataFormats.java</exclude>\n+          </excludes>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>findbugs-maven-plugin</artifactId>\n+        <configuration>\n+          <excludeFilterFile>${basedir}/src/main/resources/findbugsExclude.xml</excludeFilterFile>\n+        </configuration>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>copy-dependencies</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.libdir}</outputDirectory>\n+\t      <includeScope>runtime</includeScope>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-clean-plugin</artifactId>\n+        <version>2.5</version>\n+\t<configuration>\n+\t  <filesets>\n+            <fileset>\n+              <directory>${project.libdir}</directory>\n+              <followSymlinks>false</followSymlinks>\n+            </fileset>\n+\t  </filesets>\n+\t</configuration>\n       </plugin>\n     </plugins>\n   </build>\n+  <profiles>\n+    <profile>\n+      <id>protobuf</id>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <artifactId>maven-antrun-plugin</artifactId>\n+            <executions>\n+              <execution>\n+                <phase>generate-sources</phase>\n+                <id>default-cli</id>\n+                <configuration>\n+                  <target>\n+                    <exec executable=\"protoc\" failonerror=\"true\">\n+                      <arg value=\"--java_out=src/main/java\" />\n+                      <arg value=\"src/main/proto/DataFormats.proto\" />\n+                    </exec>\n+                  </target>\n+                </configuration>\n+                <goals>\n+                  <goal>run</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n </project>"},{"sha":"1f848f55279d12c20472f2600142c366ed656481","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":594,"deletions":116,"changes":710,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -34,52 +34,73 @@\n import java.util.Map;\n import java.util.HashMap;\n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.bookie.GarbageCollectorThread.SafeEntryAdder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.util.IOUtils;\n+import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException.NodeExistsException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n+\n+import com.google.common.annotations.VisibleForTesting;\n \n /**\n  * Implements a bookie.\n  *\n  */\n \n public class Bookie extends Thread {\n+\n     static Logger LOG = LoggerFactory.getLogger(Bookie.class);\n \n     final File journalDirectory;\n-    final File ledgerDirectories[];\n     final ServerConfiguration conf;\n \n     final SyncThread syncThread;\n+    final LedgerManagerFactory ledgerManagerFactory;\n     final LedgerManager ledgerManager;\n     final LedgerStorage ledgerStorage;\n     final Journal journal;\n+\n     final HandleFactory handles;\n \n     static final long METAENTRY_ID_LEDGER_KEY = -0x1000;\n+    static final long METAENTRY_ID_FENCE_KEY  = -0x2000;\n \n     // ZK registration path for this bookie\n     private final String bookieRegistrationPath;\n-    static final String CURRENT_DIR = \"current\";\n+\n+    private LedgerDirsManager ledgerDirsManager;\n \n     // ZooKeeper client instance for the Bookie\n     ZooKeeper zk;\n-    private volatile boolean isZkExpired = true;\n \n     // Running flag\n     private volatile boolean running = false;\n@@ -94,6 +115,10 @@\n \n     Map<Long, byte[]> masterKeyCache = Collections.synchronizedMap(new HashMap<Long, byte[]>());\n \n+    final private String zkBookieRegPath;\n+\n+    final private AtomicBoolean readOnly = new AtomicBoolean(false);\n+\n     public static class NoLedgerException extends IOException {\n         private static final long serialVersionUID = 1L;\n         private long ledgerId;\n@@ -110,10 +135,15 @@ public long getLedgerId() {\n         private long ledgerId;\n         private long entryId;\n         public NoEntryException(long ledgerId, long entryId) {\n-            super(\"Entry \" + entryId + \" not found in \" + ledgerId);\n+            this(\"Entry \" + entryId + \" not found in \" + ledgerId, ledgerId, entryId);\n+        }\n+\n+        public NoEntryException(String msg, long ledgerId, long entryId) {\n+            super(msg);\n             this.ledgerId = ledgerId;\n             this.entryId = entryId;\n         }\n+\n         public long getLedger() {\n             return ledgerId;\n         }\n@@ -127,8 +157,79 @@ public long getEntry() {\n         @Override\n         public void writeComplete(int rc, long ledgerId, long entryId,\n                                   InetSocketAddress addr, Object ctx) {\n-            LOG.debug(\"Finished writing entry {} @ ledger {} for {} : {}\",\n-                      new Object[] { entryId, ledgerId, addr, rc });\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Finished writing entry {} @ ledger {} for {} : {}\",\n+                          new Object[] { entryId, ledgerId, addr, rc });\n+            }\n+        }\n+    }\n+\n+    final static Future<Boolean> SUCCESS_FUTURE = new Future<Boolean>() {\n+        @Override\n+        public boolean cancel(boolean mayInterruptIfRunning) { return false; }\n+        @Override\n+        public Boolean get() { return true; }\n+        @Override\n+        public Boolean get(long timeout, TimeUnit unit) { return true; }\n+        @Override\n+        public boolean isCancelled() { return false; }\n+        @Override\n+        public boolean isDone() {\n+            return true;\n+        }\n+    };\n+\n+    static class CountDownLatchFuture<T> implements Future<T> {\n+\n+        T value = null;\n+        volatile boolean done = false;\n+        CountDownLatch latch = new CountDownLatch(1);\n+\n+        @Override\n+        public boolean cancel(boolean mayInterruptIfRunning) { return false; }\n+        @Override\n+        public T get() throws InterruptedException {\n+            latch.await();\n+            return value;\n+        }\n+        @Override\n+        public T get(long timeout, TimeUnit unit) throws InterruptedException {\n+            latch.await(timeout, unit);\n+            return value;\n+        }\n+\n+        @Override\n+        public boolean isCancelled() { return false; }\n+\n+        @Override\n+        public boolean isDone() {\n+            return done;\n+        }\n+\n+        void setDone(T value) {\n+            this.value = value;\n+            done = true;\n+            latch.countDown();\n+        }\n+    }\n+\n+    static class FutureWriteCallback implements WriteCallback {\n+\n+        CountDownLatchFuture<Boolean> result =\n+            new CountDownLatchFuture<Boolean>();\n+\n+        @Override\n+        public void writeComplete(int rc, long ledgerId, long entryId,\n+                                  InetSocketAddress addr, Object ctx) {\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Finished writing entry {} @ ledger {} for {} : {}\",\n+                          new Object[] { entryId, ledgerId, addr, rc });\n+            }\n+            result.setDone(0 == rc);\n+        }\n+\n+        public Future<Boolean> getResult() {\n+            return result;\n         }\n     }\n \n@@ -163,55 +264,96 @@ public void writeComplete(int rc, long ledgerId, long entryId,\n         public SyncThread(ServerConfiguration conf) {\n             super(\"SyncThread\");\n             flushInterval = conf.getFlushInterval();\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Flush Interval : \" + flushInterval);\n+            LOG.debug(\"Flush Interval : {}\", flushInterval);\n+        }\n+\n+        private Object suspensionLock = new Object();\n+        private boolean suspended = false;\n+\n+        /**\n+         * Suspend sync thread. (for testing)\n+         */\n+        @VisibleForTesting\n+        public void suspendSync() {\n+            synchronized(suspensionLock) {\n+                suspended = true;\n+            }\n+        }\n+\n+        /**\n+         * Resume sync thread. (for testing)\n+         */\n+        @VisibleForTesting\n+        public void resumeSync() {\n+            synchronized(suspensionLock) {\n+                suspended = false;\n+                suspensionLock.notify();\n             }\n         }\n+\n         @Override\n         public void run() {\n-            while(running) {\n-                synchronized(this) {\n-                    try {\n-                        wait(flushInterval);\n-                        if (!ledgerStorage.isFlushRequired()) {\n+            try {\n+                while (running) {\n+                    synchronized (this) {\n+                        try {\n+                            wait(flushInterval);\n+                            if (!ledgerStorage.isFlushRequired()) {\n+                                continue;\n+                            }\n+                        } catch (InterruptedException e) {\n+                            Thread.currentThread().interrupt();\n                             continue;\n                         }\n-                    } catch (InterruptedException e) {\n-                        Thread.currentThread().interrupt();\n-                        continue;\n                     }\n-                }\n+                    synchronized (suspensionLock) {\n+                        while (suspended) {\n+                            suspensionLock.wait();\n+                        }\n+                    }\n+                    // try to mark flushing flag to make sure it would not be interrupted\n+                    // by shutdown during flushing. otherwise it will receive\n+                    // ClosedByInterruptException which may cause index file & entry logger\n+                    // closed and corrupted.\n+                    if (!flushing.compareAndSet(false, true)) {\n+                        // set flushing flag failed, means flushing is true now\n+                        // indicates another thread wants to interrupt sync thread to exit\n+                        break;\n+                    }\n \n-                // try to mark flushing flag to make sure it would not be interrupted\n-                // by shutdown during flushing. otherwise it will receive\n-                // ClosedByInterruptException which may cause index file & entry logger\n-                // closed and corrupted.\n-                if (!flushing.compareAndSet(false, true)) {\n-                    // set flushing flag failed, means flushing is true now\n-                    // indicates another thread wants to interrupt sync thread to exit\n-                    break;\n-                }\n+                    // journal mark log\n+                    journal.markLog();\n \n-                // journal mark log\n-                journal.markLog();\n+                    boolean flushFailed = false;\n+                    try {\n+                        ledgerStorage.flush();\n+                    } catch (NoWritableLedgerDirException e) {\n+                        flushFailed = true;\n+                        flushing.set(false);\n+                        transitionToReadOnlyMode();\n+                    } catch (IOException e) {\n+                        LOG.error(\"Exception flushing Ledger\", e);\n+                        flushFailed = true;\n+                    }\n \n-                boolean flushFailed = false;\n-                try {\n-                    ledgerStorage.flush();\n-                } catch (IOException e) {\n-                    LOG.error(\"Exception flushing Ledger\", e);\n-                    flushFailed = true;\n-                }\n+                    // if flush failed, we should not roll last mark, otherwise we would\n+                    // have some ledgers are not flushed and their journal entries were lost\n+                    if (!flushFailed) {\n+                        try {\n+                            journal.rollLog();\n+                            journal.gcJournals();\n+                        } catch (NoWritableLedgerDirException e) {\n+                            flushing.set(false);\n+                            transitionToReadOnlyMode();\n+                        }\n+                    }\n \n-                // if flush failed, we should not roll last mark, otherwise we would\n-                // have some ledgers are not flushed and their journal entries were lost\n-                if (!flushFailed) {\n-                    journal.rollLog();\n-                    journal.gcJournals();\n+                    // clear flushing flag\n+                    flushing.set(false);\n                 }\n-\n-                // clear flushing flag\n-                flushing.set(false);\n+            } catch (Throwable t) {\n+                LOG.error(\"Exception in SyncThread\", t);\n+                triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n             }\n         }\n \n@@ -230,7 +372,8 @@ void shutdown() throws InterruptedException {\n     public static void checkDirectoryStructure(File dir) throws IOException {\n         if (!dir.exists()) {\n             File parent = dir.getParentFile();\n-            File preV3versionFile = new File(dir.getParent(), Cookie.VERSION_FILENAME);\n+            File preV3versionFile = new File(dir.getParent(),\n+                    BookKeeperConstants.VERSION_FILENAME);\n \n             final AtomicBoolean oldDataExists = new AtomicBoolean(false);\n             parent.list(new FilenameFilter() {\n@@ -262,14 +405,18 @@ public boolean accept(File dir, String name) {\n     private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException {\n         if (zk == null) { // exists only for testing, just make sure directories are correct\n             checkDirectoryStructure(journalDirectory);\n-            for (File dir : ledgerDirectories) {\n+            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n                     checkDirectoryStructure(dir);\n             }\n             return;\n         }\n         try {\n+            String instanceId = getInstanceId(zk);\n             boolean newEnv = false;\n             Cookie masterCookie = Cookie.generateCookie(conf);\n+            if (null != instanceId) {\n+                masterCookie.setInstanceId(instanceId);\n+            }\n             try {\n                 Cookie zkCookie = Cookie.readFromZooKeeper(zk, conf);\n                 masterCookie.verify(zkCookie);\n@@ -286,7 +433,7 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n             } catch (FileNotFoundException fnf) {\n                 missedCookieDirs.add(journalDirectory);\n             }\n-            for (File dir : ledgerDirectories) {\n+            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n                 checkDirectoryStructure(dir);\n                 try {\n                     Cookie c = Cookie.readFromDirectory(dir);\n@@ -305,7 +452,7 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n                 if (missedCookieDirs.size() > 0) {\n                     LOG.debug(\"Directories missing cookie file are {}\", missedCookieDirs);\n                     masterCookie.writeToDirectory(journalDirectory);\n-                    for (File dir : ledgerDirectories) {\n+                    for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n                         masterCookie.writeToDirectory(dir);\n                     }\n                 }\n@@ -326,8 +473,34 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n         }\n     }\n \n+    /**\n+     * Return the configured address of the bookie.\n+     */\n+    public static InetSocketAddress getBookieAddress(ServerConfiguration conf)\n+            throws UnknownHostException {\n+        return new InetSocketAddress(InetAddress.getLocalHost()\n+                .getHostAddress(), conf.getBookiePort());\n+    }\n+\n+    private String getInstanceId(ZooKeeper zk) throws KeeperException,\n+            InterruptedException {\n+        String instanceId = null;\n+        try {\n+            byte[] data = zk.getData(conf.getZkLedgersRootPath() + \"/\"\n+                    + BookKeeperConstants.INSTANCEID, false, null);\n+            instanceId = new String(data);\n+        } catch (KeeperException.NoNodeException e) {\n+            LOG.warn(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n+        }\n+        return instanceId;\n+    }\n+\n+    public LedgerDirsManager getLedgerDirsManager() {\n+        return ledgerDirsManager;\n+    }\n+\n     public static File getCurrentDirectory(File dir) {\n-        return new File(dir, CURRENT_DIR);\n+        return new File(dir, BookKeeperConstants.CURRENT_DIR);\n     }\n \n     public static File[] getCurrentDirectories(File[] dirs) {\n@@ -345,25 +518,31 @@ public Bookie(ServerConfiguration conf)\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath() + \"/\";\n         this.conf = conf;\n         this.journalDirectory = getCurrentDirectory(conf.getJournalDir());\n-        this.ledgerDirectories = getCurrentDirectories(conf.getLedgerDirs());\n-\n+        this.ledgerDirsManager = new LedgerDirsManager(conf);\n         // instantiate zookeeper client to initialize ledger manager\n         this.zk = instantiateZookeeperClient(conf);\n         checkEnvironment(this.zk);\n-\n-        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, this.zk);\n-\n+        ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, this.zk);\n+        LOG.info(\"instantiate ledger manager {}\", ledgerManagerFactory.getClass().getName());\n+        ledgerManager = ledgerManagerFactory.newLedgerManager();\n         syncThread = new SyncThread(conf);\n-        ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager);\n+        ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager,\n+                                                     ledgerDirsManager,\n+                                                     new BookieSafeEntryAdder());\n         handles = new HandleFactoryImpl(ledgerStorage);\n         // instantiate the journal\n-        journal = new Journal(conf);\n+        journal = new Journal(conf, ledgerDirsManager);\n \n-        // replay journals\n-        readJournal();\n+        // ZK ephemeral node for this Bookie.\n+        zkBookieRegPath = this.bookieRegistrationPath + getMyId();\n     }\n \n-    private void readJournal() throws IOException, BookieException {\n+    private String getMyId() throws UnknownHostException {\n+        return InetAddress.getLocalHost().getHostAddress() + \":\"\n+                + conf.getBookiePort();\n+    }\n+\n+    void readJournal() throws IOException, BookieException {\n         journal.replay(new JournalScanner() {\n             @Override\n             public void process(int journalVersion, long offset, ByteBuffer recBuff) throws IOException {\n@@ -383,6 +562,19 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n                                     + \" but layout version (\" + journalVersion\n                                     + \") is too old to hold this\");\n                         }\n+                    } else if (entryId == METAENTRY_ID_FENCE_KEY) {\n+                        if (journalVersion >= 4) {\n+                            byte[] key = masterKeyCache.get(ledgerId);\n+                            if (key == null) {\n+                                key = ledgerStorage.readMasterKey(ledgerId);\n+                            }\n+                            LedgerDescriptor handle = handles.getHandle(ledgerId, key);\n+                            handle.setFenced();\n+                        } else {\n+                            throw new IOException(\"Invalid journal. Contains fenceKey \"\n+                                    + \" but layout version (\" + journalVersion\n+                                    + \") is too old to hold this\");\n+                        }\n                     } else {\n                         byte[] key = masterKeyCache.get(ledgerId);\n                         if (key == null) {\n@@ -404,24 +596,73 @@ public void process(int journalVersion, long offset, ByteBuffer recBuff) throws\n \n     synchronized public void start() {\n         setDaemon(true);\n-        LOG.debug(\"I'm starting a bookie with journal directory \" + journalDirectory.getName());\n+        LOG.debug(\"I'm starting a bookie with journal directory {}\", journalDirectory.getName());\n+        // replay journals\n+        try {\n+            readJournal();\n+        } catch (IOException ioe) {\n+            LOG.error(\"Exception while replaying journals, shutting down\", ioe);\n+            shutdown(ExitCode.BOOKIE_EXCEPTION);\n+            return;\n+        } catch (BookieException be) {\n+            LOG.error(\"Exception while replaying journals, shutting down\", be);\n+            shutdown(ExitCode.BOOKIE_EXCEPTION);\n+            return;\n+        }\n         // start bookie thread\n         super.start();\n-        syncThread.start();\n+\n+        ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+        //Start DiskChecker thread\n+        ledgerDirsManager.start();\n \n         ledgerStorage.start();\n+\n+        syncThread.start();\n         // set running here.\n         // since bookie server use running as a flag to tell bookie server whether it is alive\n         // if setting it in bookie thread, the watcher might run before bookie thread.\n         running = true;\n         try {\n-            registerBookie(conf.getBookiePort());\n+            registerBookie(conf);\n         } catch (IOException e) {\n             LOG.error(\"Couldn't register bookie with zookeeper, shutting down\", e);\n             shutdown(ExitCode.ZK_REG_FAIL);\n         }\n     }\n \n+    /*\n+     * Get the DiskFailure listener for the bookie\n+     */\n+    private LedgerDirsListener getLedgerDirsListener() {\n+\n+        return new LedgerDirsListener() {\n+\n+            @Override\n+            public void diskFull(File disk) {\n+                // Nothing needs to be handled here.\n+            }\n+\n+            @Override\n+            public void diskFailed(File disk) {\n+                // Shutdown the bookie on disk failure.\n+                triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n+            }\n+\n+            @Override\n+            public void allDisksFull() {\n+                // Transition to readOnly mode on all disks full\n+                transitionToReadOnlyMode();\n+            }\n+\n+            @Override\n+            public void fatalError() {\n+                LOG.error(\"Fatal error reported by ledgerDirsManager\");\n+                triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n+            }\n+        };\n+    }\n+\n     /**\n      * Register jmx with parent\n      *\n@@ -471,10 +712,10 @@ public void unregisterJMX() {\n     /**\n      * Instantiate the ZooKeeper client for the Bookie.\n      */\n-    private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf) throws IOException {\n+    private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf)\n+            throws IOException, InterruptedException, KeeperException {\n         if (conf.getZkServers() == null) {\n             LOG.warn(\"No ZK servers passed to Bookie constructor so BookKeeper clients won't know about this server!\");\n-            isZkExpired = false;\n             return null;\n         }\n         // Create the ZooKeeper client instance\n@@ -484,24 +725,119 @@ private ZooKeeper instantiateZookeeperClient(ServerConfiguration conf) throws IO\n     /**\n      * Register as an available bookie\n      */\n-    private void registerBookie(int port) throws IOException {\n+    protected void registerBookie(ServerConfiguration conf) throws IOException {\n         if (null == zk) {\n             // zookeeper instance is null, means not register itself to zk\n             return;\n         }\n-        // Create the ZK ephemeral node for this Bookie.\n-        try {\n-            zk.create(this.bookieRegistrationPath + InetAddress.getLocalHost().getHostAddress() + \":\" + port, new byte[0],\n-                      Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n-        } catch (Exception e) {\n-            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\", e);\n+\n+        // ZK ephemeral node for this Bookie.\n+        String zkBookieRegPath = this.bookieRegistrationPath\n+            + StringUtils.addrToString(getBookieAddress(conf));\n+        final CountDownLatch prevNodeLatch = new CountDownLatch(1);\n+        try{\n+            Watcher zkPrevRegNodewatcher = new Watcher() {\n+                @Override\n+                public void process(WatchedEvent event) {\n+                    // Check for prev znode deletion. Connection expiration is\n+                    // not handling, since bookie has logic to shutdown.\n+                    if (EventType.NodeDeleted == event.getType()) {\n+                        prevNodeLatch.countDown();\n+                    }\n+                }\n+            };\n+            if (null != zk.exists(zkBookieRegPath, zkPrevRegNodewatcher)) {\n+                LOG.info(\"Previous bookie registration znode: \"\n+                        + zkBookieRegPath\n+                        + \" exists, so waiting zk sessiontimeout: \"\n+                        + conf.getZkTimeout() + \"ms for znode deletion\");\n+                // waiting for the previous bookie reg znode deletion\n+                if (!prevNodeLatch.await(conf.getZkTimeout(),\n+                        TimeUnit.MILLISECONDS)) {\n+                    throw new KeeperException.NodeExistsException(\n+                            zkBookieRegPath);\n+                }\n+            }\n+\n+            // Create the ZK ephemeral node for this Bookie.\n+            zk.create(zkBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                    CreateMode.EPHEMERAL);\n+        } catch (KeeperException ke) {\n+            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\",\n+                    ke);\n             // Throw an IOException back up. This will cause the Bookie\n             // constructor to error out. Alternatively, we could do a System\n             // exit here as this is a fatal error.\n-            throw new IOException(e);\n+            throw new IOException(ke);\n+        } catch (InterruptedException ie) {\n+            LOG.error(\"ZK exception registering ephemeral Znode for Bookie!\",\n+                    ie);\n+            // Throw an IOException back up. This will cause the Bookie\n+            // constructor to error out. Alternatively, we could do a System\n+            // exit here as this is a fatal error.\n+            throw new IOException(ie);\n         }\n     }\n \n+    /*\n+     * Transition the bookie to readOnly mode\n+     */\n+    @VisibleForTesting\n+    public void transitionToReadOnlyMode() {\n+        if (!readOnly.compareAndSet(false, true)) {\n+            return;\n+        }\n+        if (!conf.isReadOnlyModeEnabled()) {\n+            LOG.warn(\"ReadOnly mode is not enabled. \"\n+                    + \"Can be enabled by configuring \"\n+                    + \"'readOnlyModeEnabled=true' in configuration.\"\n+                    + \"Shutting down bookie\");\n+            triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n+            return;\n+        }\n+        LOG.info(\"Transitioning Bookie to ReadOnly mode,\"\n+                + \" and will serve only read requests from clients!\");\n+        try {\n+            if (null == zk.exists(this.bookieRegistrationPath\n+                    + BookKeeperConstants.READONLY, false)) {\n+                try {\n+                    zk.create(this.bookieRegistrationPath\n+                            + BookKeeperConstants.READONLY, new byte[0],\n+                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                } catch (NodeExistsException e) {\n+                    // this node is just now created by someone.\n+                }\n+            }\n+            // Create the readonly node\n+            zk.create(this.bookieRegistrationPath\n+                    + BookKeeperConstants.READONLY + \"/\" + getMyId(),\n+                    new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+            // Clear the current registered node\n+            zk.delete(zkBookieRegPath, -1);\n+        } catch (IOException e) {\n+            LOG.error(\"Error in transition to ReadOnly Mode.\"\n+                    + \" Shutting down\", e);\n+            triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n+            return;\n+        } catch (KeeperException e) {\n+            LOG.error(\"Error in transition to ReadOnly Mode.\"\n+                    + \" Shutting down\", e);\n+            triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n+            return;\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            LOG.warn(\"Interrupted Exception while transitioning to ReadOnly Mode.\");\n+            return;\n+        }\n+    }\n+\n+    /*\n+     * Check whether Bookie is writable\n+     */\n+    public boolean isReadOnly() {\n+        return readOnly.get();\n+    }\n+\n     /**\n      * Create a new zookeeper client to zk cluster.\n      *\n@@ -523,33 +859,21 @@ private void registerBookie(int port) throws IOException {\n      * @return zk client instance\n      */\n     private ZooKeeper newZookeeper(final String zkServers,\n-                                   final int sessionTimeout) throws IOException {\n-        ZooKeeper newZk = new ZooKeeper(zkServers, sessionTimeout,\n-        new Watcher() {\n+            final int sessionTimeout) throws IOException, InterruptedException,\n+            KeeperException {\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout()) {\n             @Override\n             public void process(WatchedEvent event) {\n-                // handle session disconnects and expires\n-                if (event.getType()\n-                .equals(Watcher.Event.EventType.None)) {\n-                    if (event.getState().equals(\n-                    Watcher.Event.KeeperState.Disconnected)) {\n-                        LOG.warn(\"ZK client has been disconnected to the ZK server!\");\n-                    } else if (event.getState().equals(\n-                    Watcher.Event.KeeperState.SyncConnected)) {\n-                        LOG.info(\"ZK client has been reconnected to the ZK server!\");\n-                    }\n-                }\n                 // Check for expired connection.\n-                if (event.getState().equals(\n-                Watcher.Event.KeeperState.Expired)) {\n+                if (event.getState().equals(Watcher.Event.KeeperState.Expired)) {\n                     LOG.error(\"ZK client connection to the ZK server has expired!\");\n-                    isZkExpired = true;\n                     shutdown(ExitCode.ZK_EXPIRED);\n+                } else {\n+                    super.process(event);\n                 }\n             }\n-        });\n-        isZkExpired = false;\n-        return newZk;\n+        };\n+        return ZkUtils.createConnectedZookeeperClient(zkServers, w);\n     }\n \n     public boolean isRunning() {\n@@ -572,7 +896,25 @@ public void run() {\n             // following add operations to it would hang unit client timeout\n             // so we should let bookie server exists\n             LOG.error(\"Journal manager quits unexpectedly.\");\n-            shutdown(ExitCode.BOOKIE_EXCEPTION);\n+            triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n+        }\n+    }\n+\n+    // Triggering the Bookie shutdown in its own thread,\n+    // because shutdown can be called from sync thread which would be\n+    // interrupted by shutdown call.\n+    void triggerBookieShutdown(final int exitCode) {\n+        Thread shutdownThread = new Thread() {\n+            public void run() {\n+                Bookie.this.shutdown(exitCode);\n+            }\n+        };\n+        shutdownThread.start();\n+        try {\n+            shutdownThread.join();\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();\n+            LOG.debug(\"InterruptedException while waiting for shutdown. Not a problem!!\");\n         }\n     }\n \n@@ -592,18 +934,27 @@ synchronized int shutdown(int exitCode) {\n                 // mark bookie as in shutting down progress\n                 shuttingdown = true;\n \n-                // Shutdown the EntryLogger which has the GarbageCollector Thread running\n-                ledgerStorage.shutdown();\n-\n                 // Shutdown the ZK client\n                 if(zk != null) zk.close();\n+\n+                //Shutdown disk checker\n+                ledgerDirsManager.shutdown();\n+\n                 // Shutdown journal\n                 journal.shutdown();\n                 this.join();\n                 syncThread.shutdown();\n \n+                // Shutdown the EntryLogger which has the GarbageCollector Thread running\n+                ledgerStorage.shutdown();\n+\n                 // close Ledger Manager\n-                ledgerManager.close();\n+                try {\n+                    ledgerManager.close();\n+                    ledgerManagerFactory.uninitialize();\n+                } catch (IOException ie) {\n+                    LOG.error(\"Failed to close active ledger manager : \", ie);\n+                }\n                 // setting running to false here, so watch thread in bookie server know it only after bookie shut down\n                 running = false;\n             }\n@@ -656,9 +1007,7 @@ private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCa\n         long entryId = handle.addEntry(entry);\n \n         entry.rewind();\n-        if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Adding \" + entryId + \"@\" + ledgerId);\n-        }\n+        LOG.trace(\"Adding {}@{}\", entryId, ledgerId);\n         journal.logAddEntry(entry, cb, ctx);\n     }\n \n@@ -670,9 +1019,14 @@ private void addEntryInternal(LedgerDescriptor handle, ByteBuffer entry, WriteCa\n      */\n     public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey) \n             throws IOException, BookieException {\n-        LedgerDescriptor handle = getLedgerForEntry(entry, masterKey);\n-        synchronized (handle) {\n-            addEntryInternal(handle, entry, cb, ctx);\n+        try {\n+            LedgerDescriptor handle = getLedgerForEntry(entry, masterKey);\n+            synchronized (handle) {\n+                addEntryInternal(handle, entry, cb, ctx);\n+            }\n+        } catch (NoWritableLedgerDirException e) {\n+            transitionToReadOnlyMode();\n+            throw new IOException(e);\n         }\n     }\n     \n@@ -682,13 +1036,18 @@ public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byt\n      */\n     public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n             throws IOException, BookieException {\n-        LedgerDescriptor handle = getLedgerForEntry(entry, masterKey);\n-        synchronized (handle) {\n-            if (handle.isFenced()) {\n-                throw BookieException.create(BookieException.Code.LedgerFencedException);\n+        try {\n+            LedgerDescriptor handle = getLedgerForEntry(entry, masterKey);\n+            synchronized (handle) {\n+                if (handle.isFenced()) {\n+                    throw BookieException\n+                            .create(BookieException.Code.LedgerFencedException);\n+                }\n+                addEntryInternal(handle, entry, cb, ctx);\n             }\n-\n-            addEntryInternal(handle, entry, cb, ctx);\n+        } catch (NoWritableLedgerDirException e) {\n+            transitionToReadOnlyMode();\n+            throw new IOException(e);\n         }\n     }\n \n@@ -699,19 +1058,33 @@ public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] mast\n      * This method is idempotent. Once a ledger is fenced, it can\n      * never be unfenced. Fencing a fenced ledger has no effect.\n      */\n-    public void fenceLedger(long ledgerId, byte[] masterKey) throws IOException, BookieException {\n+    public Future<Boolean> fenceLedger(long ledgerId, byte[] masterKey) throws IOException, BookieException {\n         LedgerDescriptor handle = handles.getHandle(ledgerId, masterKey);\n+        boolean success;\n         synchronized (handle) {\n-            handle.setFenced();\n+            success = handle.setFenced();\n+        }\n+        if (success) {\n+            // fenced first time, we should add the key to journal ensure we can rebuild\n+            ByteBuffer bb = ByteBuffer.allocate(8 + 8);\n+            bb.putLong(ledgerId);\n+            bb.putLong(METAENTRY_ID_FENCE_KEY);\n+            bb.flip();\n+\n+            FutureWriteCallback fwc = new FutureWriteCallback();\n+            LOG.debug(\"record fenced state for ledger {} in journal.\", ledgerId);\n+            journal.logAddEntry(bb, fwc, null);\n+            return fwc.getResult();\n+        } else {\n+            // already fenced\n+            return SUCCESS_FUTURE;\n         }\n     }\n \n     public ByteBuffer readEntry(long ledgerId, long entryId)\n             throws IOException, NoLedgerException {\n         LedgerDescriptor handle = handles.getReadOnlyHandle(ledgerId);\n-        if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Reading \" + entryId + \"@\" + ledgerId);\n-        }\n+        LOG.trace(\"Reading {}@{}\", entryId, ledgerId);\n         return handle.readEntry(entryId);\n     }\n \n@@ -737,6 +1110,111 @@ synchronized public void waitZero() throws InterruptedException {\n         }\n     }\n \n+    /**\n+     * Format the bookie server data\n+     * \n+     * @param conf\n+     *            ServerConfiguration\n+     * @param isInteractive\n+     *            Whether format should ask prompt for confirmation if old data\n+     *            exists or not.\n+     * @param force\n+     *            If non interactive and force is true, then old data will be\n+     *            removed without confirm prompt.\n+     * @return Returns true if the format is success else returns false\n+     */\n+    public static boolean format(ServerConfiguration conf,\n+            boolean isInteractive, boolean force) {\n+        File journalDir = conf.getJournalDir();\n+        if (journalDir.exists() && journalDir.isDirectory()\n+                && journalDir.list().length != 0) {\n+            try {\n+                boolean confirm = false;\n+                if (!isInteractive) {\n+                    // If non interactive and force is set, then delete old\n+                    // data.\n+                    if (force) {\n+                        confirm = true;\n+                    } else {\n+                        confirm = false;\n+                    }\n+                } else {\n+                    confirm = IOUtils\n+                            .confirmPrompt(\"Are you sure to format Bookie data..?\");\n+                }\n+\n+                if (!confirm) {\n+                    LOG.error(\"Bookie format aborted!!\");\n+                    return false;\n+                }\n+            } catch (IOException e) {\n+                LOG.error(\"Error during bookie format\", e);\n+                return false;\n+            }\n+        }\n+        if (!cleanDir(journalDir)) {\n+            LOG.error(\"Formatting journal directory failed\");\n+            return false;\n+        }\n+\n+        File[] ledgerDirs = conf.getLedgerDirs();\n+        for (File dir : ledgerDirs) {\n+            if (!cleanDir(dir)) {\n+                LOG.error(\"Formatting ledger directory \" + dir + \" failed\");\n+                return false;\n+            }\n+        }\n+        LOG.info(\"Bookie format completed successfully\");\n+        return true;\n+    }\n+\n+    private static boolean cleanDir(File dir) {\n+        if (dir.exists()) {\n+            for (File child : dir.listFiles()) {\n+                boolean delete = FileUtils.deleteQuietly(child);\n+                if (!delete) {\n+                    LOG.error(\"Not able to delete \" + child);\n+                    return false;\n+                }\n+            }\n+        } else if (!dir.mkdirs()) {\n+            LOG.error(\"Not able to create the directory \" + dir);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    private class BookieSafeEntryAdder implements SafeEntryAdder {\n+        @Override\n+        public void safeAddEntry(final long ledgerId, final ByteBuffer buffer,\n+                                 final GenericCallback<Void> cb) {\n+            journal.logAddEntry(buffer, new WriteCallback() {\n+                    @Override\n+                    public void writeComplete(int rc, long ledgerId2, long entryId,\n+                                              InetSocketAddress addr, Object ctx) {\n+                        if (rc != BookieException.Code.OK) {\n+                            LOG.error(\"Error rewriting to journal (ledger {}, entry {})\", ledgerId2, entryId);\n+                            cb.operationComplete(rc, null);\n+                            return;\n+                        }\n+                        try {\n+                            addEntryByLedgerId(ledgerId, buffer);\n+                            cb.operationComplete(rc, null);\n+                        } catch (IOException ioe) {\n+                            LOG.error(\"Error adding to ledger storage (ledger \" + ledgerId2\n+                                      + \", entry \" + entryId + \")\", ioe);\n+                            // couldn't add to ledger storage\n+                            cb.operationComplete(BookieException.Code.IllegalOpException, null);\n+                        } catch (BookieException bke) {\n+                            LOG.error(\"Bookie error adding to ledger storage (ledger \" + ledgerId2\n+                                      + \", entry \" + entryId + \")\", bke);\n+                            // couldn't add to ledger storage\n+                            cb.operationComplete(bke.getCode(), null);\n+                        }\n+                    }\n+                }, null);\n+        }\n+    }\n     /**\n      * @param args\n      * @throws IOException\n@@ -747,7 +1225,7 @@ public static void main(String[] args)\n         Bookie b = new Bookie(new ServerConfiguration());\n         b.start();\n         CounterCallback cb = new CounterCallback();\n-        long start = System.currentTimeMillis();\n+        long start = MathUtils.now();\n         for (int i = 0; i < 100000; i++) {\n             ByteBuffer buff = ByteBuffer.allocate(1024);\n             buff.putLong(1);\n@@ -758,7 +1236,7 @@ public static void main(String[] args)\n             b.addEntry(buff, cb, null, new byte[0]);\n         }\n         cb.waitZero();\n-        long end = System.currentTimeMillis();\n+        long end = MathUtils.now();\n         System.out.println(\"Took \" + (end-start) + \"ms\");\n     }\n }"},{"sha":"f2bbc2fc21f0eb64b1440de9dcfaee12f902f06c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieException.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -126,7 +126,11 @@ public LedgerFencedException() {\n \n     public static class InvalidCookieException extends BookieException {\n         public InvalidCookieException() {\n-            this(null);\n+            this(\"\");\n+        }\n+\n+        public InvalidCookieException(String reason) {\n+            super(Code.InvalidCookieException, reason);\n         }\n \n         public InvalidCookieException(Throwable cause) {"},{"sha":"9bcb26dbdad9c6274dbe4dae4df7f5bbf85e7098","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"added","additions":928,"deletions":0,"changes":928,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,928 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.Formatter;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+\n+import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n+import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n+import org.apache.bookkeeper.bookie.Journal.LastLogMark;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.util.EntryFormatter;\n+import org.apache.bookkeeper.util.Tool;\n+import org.apache.bookkeeper.util.ZkUtils;\n+\n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.CompositeConfiguration;\n+import org.apache.commons.configuration.PropertiesConfiguration;\n+import org.apache.commons.cli.BasicParser;\n+import org.apache.commons.cli.MissingArgumentException;\n+import org.apache.commons.cli.Options;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.HelpFormatter;\n+import org.apache.commons.cli.ParseException;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Bookie Shell is to provide utilities for users to administer a bookkeeper cluster.\n+ */\n+public class BookieShell implements Tool {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(BookieShell.class);\n+\n+    static final String ENTRY_FORMATTER_CLASS = \"entryFormatterClass\";\n+\n+    static final String CMD_METAFORMAT = \"metaformat\";\n+    static final String CMD_BOOKIEFORMAT = \"bookieformat\";\n+    static final String CMD_RECOVER = \"recover\";\n+    static final String CMD_LEDGER = \"ledger\";\n+    static final String CMD_READLOG = \"readlog\";\n+    static final String CMD_READJOURNAL = \"readjournal\";\n+    static final String CMD_LASTMARK = \"lastmark\";\n+    static final String CMD_AUTORECOVERY = \"autorecovery\";\n+    static final String CMD_HELP = \"help\";\n+\n+    final ServerConfiguration bkConf = new ServerConfiguration();\n+    File[] ledgerDirectories;\n+    File journalDirectory;\n+\n+    EntryLogger entryLogger = null;\n+    Journal journal = null;\n+    EntryFormatter formatter;\n+\n+    int pageSize;\n+    int entriesPerPage;\n+\n+    interface Command {\n+        public int runCmd(String[] args) throws Exception;\n+        public void printUsage();\n+    }\n+\n+    abstract class MyCommand implements Command {\n+        abstract Options getOptions();\n+        abstract String getDescription();\n+        abstract String getUsage();\n+        abstract int runCmd(CommandLine cmdLine) throws Exception;\n+\n+        String cmdName;\n+\n+        MyCommand(String cmdName) {\n+            this.cmdName = cmdName;\n+        }\n+\n+        @Override\n+        public int runCmd(String[] args) throws Exception {\n+            try {\n+                BasicParser parser = new BasicParser();\n+                CommandLine cmdLine = parser.parse(getOptions(), args);\n+                return runCmd(cmdLine);\n+            } catch (ParseException e) {\n+                LOG.error(\"Error parsing command line arguments : \", e);\n+                printUsage();\n+                return -1;\n+            }\n+        }\n+\n+        @Override\n+        public void printUsage() {\n+            HelpFormatter hf = new HelpFormatter();\n+            System.err.println(cmdName + \": \" + getDescription());\n+            hf.printHelp(getUsage(), getOptions());\n+        }\n+    }\n+\n+    /**\n+     * Format the bookkeeper metadata present in zookeeper\n+     */\n+    class MetaFormatCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        MetaFormatCmd() {\n+            super(CMD_METAFORMAT);\n+            opts.addOption(\"n\", \"nonInteractive\", false,\n+                    \"Whether to confirm if old data exists..?\");\n+            opts.addOption(\"f\", \"force\", false,\n+                    \"If [nonInteractive] is specified, then whether\"\n+                            + \" to force delete the old data without prompt.\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Format bookkeeper metadata in zookeeper\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"metaformat [-nonInteractive] [-force]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            boolean interactive = (!cmdLine.hasOption(\"n\"));\n+            boolean force = cmdLine.hasOption(\"f\");\n+\n+            ClientConfiguration adminConf = new ClientConfiguration(bkConf);\n+            boolean result = BookKeeperAdmin.format(adminConf, interactive,\n+                    force);\n+            return (result) ? 0 : 1;\n+        }\n+    }\n+\n+    /**\n+     * Formats the local data present in current bookie server\n+     */\n+    class BookieFormatCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public BookieFormatCmd() {\n+            super(CMD_BOOKIEFORMAT);\n+            opts.addOption(\"n\", \"nonInteractive\", false,\n+                    \"Whether to confirm if old data exists..?\");\n+            opts.addOption(\"f\", \"force\", false,\n+                    \"If [nonInteractive] is specified, then whether\"\n+                            + \" to force delete the old data without prompt..?\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Format the current server contents\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"bookieformat [-nonInteractive] [-force]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            boolean interactive = (!cmdLine.hasOption(\"n\"));\n+            boolean force = cmdLine.hasOption(\"f\");\n+\n+            ServerConfiguration conf = new ServerConfiguration(bkConf);\n+            boolean result = Bookie.format(conf, interactive, force);\n+            return (result) ? 0 : 1;\n+        }\n+    }\n+\n+    /**\n+     * Recover command for ledger data recovery for failed bookie\n+     */\n+    class RecoverCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public RecoverCmd() {\n+            super(CMD_RECOVER);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Recover the ledger data for failed bookie\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"recover <bookieSrc> [bookieDest]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] args = cmdLine.getArgs();\n+            if (args.length < 1) {\n+                throw new MissingArgumentException(\n+                        \"'bookieSrc' argument required\");\n+            }\n+\n+            ClientConfiguration adminConf = new ClientConfiguration(bkConf);\n+            BookKeeperAdmin admin = new BookKeeperAdmin(adminConf);\n+            try {\n+                return bkRecovery(admin, args);\n+            } finally {\n+                if (null != admin) {\n+                    admin.close();\n+                }\n+            }\n+        }\n+\n+        private int bkRecovery(BookKeeperAdmin bkAdmin, String[] args)\n+                throws InterruptedException, BKException {\n+            final String bookieSrcString[] = args[0].split(\":\");\n+            if (bookieSrcString.length != 2) {\n+                System.err.println(\"BookieSrc inputted has invalid format\"\n+                        + \"(host:port expected): \" + args[0]);\n+                return -1;\n+            }\n+            final InetSocketAddress bookieSrc = new InetSocketAddress(\n+                    bookieSrcString[0], Integer.parseInt(bookieSrcString[1]));\n+            InetSocketAddress bookieDest = null;\n+            if (args.length >= 2) {\n+                final String bookieDestString[] = args[1].split(\":\");\n+                if (bookieDestString.length < 2) {\n+                    System.err.println(\"BookieDest inputted has invalid format\"\n+                            + \"(host:port expected): \" + args[1]);\n+                    return -1;\n+                }\n+                bookieDest = new InetSocketAddress(bookieDestString[0],\n+                        Integer.parseInt(bookieDestString[1]));\n+            }\n+\n+            bkAdmin.recoverBookieData(bookieSrc, bookieDest);\n+            return 0;\n+        }\n+    }\n+\n+    /**\n+     * Ledger Command Handles ledger related operations\n+     */\n+    class LedgerCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        LedgerCmd() {\n+            super(CMD_LEDGER);\n+            lOpts.addOption(\"m\", \"meta\", false, \"Print meta information\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] leftArgs = cmdLine.getArgs();\n+            if (leftArgs.length <= 0) {\n+                System.err.println(\"ERROR: missing ledger id\");\n+                printUsage();\n+                return -1;\n+            }\n+\n+            boolean printMeta = false;\n+            if (cmdLine.hasOption(\"m\")) {\n+                printMeta = true;\n+            }\n+            long ledgerId;\n+            try {\n+                ledgerId = Long.parseLong(leftArgs[0]);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid ledger id \" + leftArgs[0]);\n+                printUsage();\n+                return -1;\n+            }\n+            if (printMeta) {\n+                // print meta\n+                readLedgerMeta(ledgerId);\n+            }\n+            // dump ledger info\n+            readLedgerIndexEntries(ledgerId);\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Dump ledger index entries into readable format.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"ledger [-m] <ledger_id>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command to read entry log files.\n+     */\n+    class ReadLogCmd extends MyCommand {\n+        Options rlOpts = new Options();\n+\n+        ReadLogCmd() {\n+            super(CMD_READLOG);\n+            rlOpts.addOption(\"m\", \"msg\", false, \"Print message body\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] leftArgs = cmdLine.getArgs();\n+            if (leftArgs.length <= 0) {\n+                System.err.println(\"ERROR: missing entry log id or entry log file name\");\n+                printUsage();\n+                return -1;\n+            }\n+\n+            boolean printMsg = false;\n+            if (cmdLine.hasOption(\"m\")) {\n+                printMsg = true;\n+            }\n+            long logId;\n+            try {\n+                logId = Long.parseLong(leftArgs[0]);\n+            } catch (NumberFormatException nfe) {\n+                // not a entry log id\n+                File f = new File(leftArgs[0]);\n+                String name = f.getName();\n+                if (!name.endsWith(\".log\")) {\n+                    // not a log file\n+                    System.err.println(\"ERROR: invalid entry log file name \" + leftArgs[0]);\n+                    printUsage();\n+                    return -1;\n+                }\n+                String idString = name.split(\"\\\\.\")[0];\n+                logId = Long.parseLong(idString, 16);\n+            }\n+            // scan entry log\n+            scanEntryLog(logId, printMsg);\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Scan an entry file and format the entries into readable format.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"readlog [-m] <entry_log_id | entry_log_file_name>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return rlOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command to read journal files\n+     */\n+    class ReadJournalCmd extends MyCommand {\n+        Options rjOpts = new Options();\n+\n+        ReadJournalCmd() {\n+            super(CMD_READJOURNAL);\n+            rjOpts.addOption(\"m\", \"msg\", false, \"Print message body\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] leftArgs = cmdLine.getArgs();\n+            if (leftArgs.length <= 0) {\n+                System.err.println(\"ERROR: missing journal id or journal file name\");\n+                printUsage();\n+                return -1;\n+            }\n+\n+            boolean printMsg = false;\n+            if (cmdLine.hasOption(\"m\")) {\n+                printMsg = true;\n+            }\n+            long journalId;\n+            try {\n+                journalId = Long.parseLong(leftArgs[0]);\n+            } catch (NumberFormatException nfe) {\n+                // not a journal id\n+                File f = new File(leftArgs[0]);\n+                String name = f.getName();\n+                if (!name.endsWith(\".txn\")) {\n+                    // not a journal file\n+                    System.err.println(\"ERROR: invalid journal file name \" + leftArgs[0]);\n+                    printUsage();\n+                    return -1;\n+                }\n+                String idString = name.split(\"\\\\.\")[0];\n+                journalId = Long.parseLong(idString, 16);\n+            }\n+            // scan journal\n+            scanJournal(journalId, printMsg);\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Scan a journal file and format the entries into readable format.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"readjournal [-m] <journal_id | journal_file_name>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return rjOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command to print last log mark\n+     */\n+    class LastMarkCmd implements Command {\n+        @Override\n+        public int runCmd(String[] args) throws Exception {\n+            printLastLogMark();\n+            return 0;\n+        }\n+\n+        @Override\n+        public void printUsage() {\n+            System.err.println(\"lastmark: Print last log marker.\");\n+        }\n+    }\n+\n+    /**\n+     * Command to print help message\n+     */\n+    class HelpCmd implements Command {\n+        @Override\n+        public int runCmd(String[] args) throws Exception {\n+            if (args.length == 0) {\n+                printShellUsage();\n+                return 0;\n+            }\n+            String cmdName = args[0];\n+            Command cmd = commands.get(cmdName);\n+            if (null == cmd) {\n+                System.err.println(\"Unknown command \" + cmdName);\n+                printShellUsage();\n+                return -1;\n+            }\n+            cmd.printUsage();\n+            return 0;\n+        }\n+\n+        @Override\n+        public void printUsage() {\n+            System.err.println(\"help: Describe the usage of this program or its subcommands.\");\n+            System.err.println(\"usage: help [COMMAND]\");\n+        }\n+    }\n+\n+    /**\n+     * Command for administration of autorecovery\n+     */\n+    class AutoRecoveryCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public AutoRecoveryCmd() {\n+            super(CMD_AUTORECOVERY);\n+            opts.addOption(\"e\", \"enable\", false,\n+                           \"Enable auto recovery of underreplicated ledgers\");\n+            opts.addOption(\"d\", \"disable\", false,\n+                           \"Disable auto recovery of underreplicated ledgers\");\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Enable or disable autorecovery in the cluster.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"autorecovery [-enable|-disable]\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            boolean disable = cmdLine.hasOption(\"d\");\n+            boolean enable = cmdLine.hasOption(\"e\");\n+\n+            if ((!disable && !enable)\n+                || (enable && disable)) {\n+                LOG.error(\"One and only one of -enable and -disable must be specified\");\n+                printUsage();\n+                return 1;\n+            }\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerUnderreplicationManager underreplicationManager = mFactory.newLedgerUnderreplicationManager();\n+                if (enable) {\n+                    if (underreplicationManager.isLedgerReplicationEnabled()) {\n+                        LOG.warn(\"Autorecovery already enabled. Doing nothing\");\n+                    } else {\n+                        LOG.info(\"Enabling autorecovery\");\n+                        underreplicationManager.enableLedgerReplication();\n+                    }\n+                } else {\n+                    if (!underreplicationManager.isLedgerReplicationEnabled()) {\n+                        LOG.warn(\"Autorecovery already disabled. Doing nothing\");\n+                    } else {\n+                        LOG.info(\"Disabling autorecovery\");\n+                        underreplicationManager.disableLedgerReplication();\n+                    }\n+                }\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n+\n+    final Map<String, Command> commands;\n+    {\n+        commands = new HashMap<String, Command>();\n+        commands.put(CMD_METAFORMAT, new MetaFormatCmd());\n+        commands.put(CMD_BOOKIEFORMAT, new BookieFormatCmd());\n+        commands.put(CMD_RECOVER, new RecoverCmd());\n+        commands.put(CMD_LEDGER, new LedgerCmd());\n+        commands.put(CMD_READLOG, new ReadLogCmd());\n+        commands.put(CMD_READJOURNAL, new ReadJournalCmd());\n+        commands.put(CMD_LASTMARK, new LastMarkCmd());\n+        commands.put(CMD_AUTORECOVERY, new AutoRecoveryCmd());\n+        commands.put(CMD_HELP, new HelpCmd());\n+    }\n+\n+    @Override\n+    public void setConf(Configuration conf) throws Exception {\n+        bkConf.loadConf(conf);\n+        journalDirectory = Bookie.getCurrentDirectory(bkConf.getJournalDir());\n+        ledgerDirectories = Bookie.getCurrentDirectories(bkConf.getLedgerDirs());\n+        formatter = EntryFormatter.newEntryFormatter(bkConf, ENTRY_FORMATTER_CLASS);\n+        LOG.info(\"Using entry formatter \" + formatter.getClass().getName());\n+        pageSize = bkConf.getPageSize();\n+        entriesPerPage = pageSize / 8;\n+    }\n+\n+    private static void printShellUsage() {\n+        System.err.println(\"Usage: BookieShell [-conf configuration] <command>\");\n+        System.err.println();\n+        System.err.println(\"       metaformat   [-nonInteractive] [-force]\");\n+        System.err.println(\"       bookieformat [-nonInteractive] [-force]\");\n+        System.err.println(\"       recover      <bookieSrc> [bookieDest]\");\n+        System.err.println(\"       ledger       [-meta] <ledger_id>\");\n+        System.err.println(\"       readlog      [-msg] <entry_log_id|entry_log_file_name>\");\n+        System.err.println(\"       readjournal  [-msg] <journal_id|journal_file_name>\");\n+        System.err.println(\"       autorecovery [-enable|-disable]\");\n+        System.err.println(\"       lastmark\");\n+        System.err.println(\"       help\");\n+    }\n+\n+    @Override\n+    public int run(String[] args) throws Exception {\n+        if (args.length <= 0) {\n+            printShellUsage();\n+            return -1;\n+        }\n+        String cmdName = args[0];\n+        Command cmd = commands.get(cmdName);\n+        if (null == cmd) {\n+            System.err.println(\"ERROR: Unknown command \" + cmdName);\n+            printShellUsage();\n+            return -1;\n+        }\n+        // prepare new args\n+        String[] newArgs = new String[args.length - 1];\n+        System.arraycopy(args, 1, newArgs, 0, newArgs.length);\n+        return cmd.runCmd(newArgs);\n+    }\n+\n+    public static void main(String argv[]) throws Exception {\n+        if (argv.length <= 0) {\n+            printShellUsage();\n+            System.exit(-1);\n+        }\n+\n+        CompositeConfiguration conf = new CompositeConfiguration();\n+        // load configuration\n+        if (\"-conf\".equals(argv[0])) {\n+            if (argv.length <= 1) {\n+                printShellUsage();\n+                System.exit(-1);\n+            }\n+            conf.addConfiguration(new PropertiesConfiguration(\n+                                  new File(argv[1]).toURI().toURL()));\n+\n+            String[] newArgv = new String[argv.length - 2];\n+            System.arraycopy(argv, 2, newArgv, 0, newArgv.length);\n+            argv = newArgv;\n+        }\n+\n+        BookieShell shell = new BookieShell();\n+        shell.setConf(conf);\n+        int res = shell.run(argv);\n+        System.exit(res);\n+    }\n+\n+    ///\n+    /// Bookie File Operations\n+    ///\n+\n+    /**\n+     * Get the ledger file of a specified ledger.\n+     *\n+     * @param ledgerId\n+     *          Ledger Id\n+     *\n+     * @return file object.\n+     */\n+    private File getLedgerFile(long ledgerId) {\n+        String ledgerName = LedgerCacheImpl.getLedgerName(ledgerId);\n+        File lf = null;\n+        for (File d : ledgerDirectories) {\n+            lf = new File(d, ledgerName);\n+            if (lf.exists()) {\n+                break;\n+            }\n+            lf = null;\n+        }\n+        return lf;\n+    }\n+\n+    /**\n+     * Get FileInfo for a specified ledger.\n+     *\n+     * @param ledgerId\n+     *          Ledger Id\n+     * @return read only file info instance\n+     */\n+    ReadOnlyFileInfo getFileInfo(long ledgerId) throws IOException {\n+        File ledgerFile = getLedgerFile(ledgerId);\n+        if (null == ledgerFile) {\n+            throw new FileNotFoundException(\"No index file found for ledger \" + ledgerId + \". It may be not flushed yet.\");\n+        }\n+        ReadOnlyFileInfo fi = new ReadOnlyFileInfo(ledgerFile, null);\n+        fi.readHeader();\n+        return fi;\n+    }\n+\n+    private synchronized void initEntryLogger() throws IOException {\n+        if (null == entryLogger) {\n+            // provide read only entry logger\n+            entryLogger = new ReadOnlyEntryLogger(bkConf);\n+        }\n+    }\n+\n+    /**\n+     * scan over entry log\n+     *\n+     * @param logId\n+     *          Entry Log Id\n+     * @param scanner\n+     *          Entry Log Scanner\n+     */\n+    protected void scanEntryLog(long logId, EntryLogScanner scanner) throws IOException {\n+        initEntryLogger();\n+        entryLogger.scanEntryLog(logId, scanner);\n+    }\n+\n+    private synchronized Journal getJournal() throws IOException {\n+        if (null == journal) {\n+            journal = new Journal(bkConf, new LedgerDirsManager(bkConf));\n+        }\n+        return journal;\n+    }\n+\n+    /**\n+     * Scan journal file\n+     *\n+     * @param journalId\n+     *          Journal File Id\n+     * @param scanner\n+     *          Journal File Scanner\n+     */\n+    protected void scanJournal(long journalId, JournalScanner scanner) throws IOException {\n+        getJournal().scanJournal(journalId, 0L, scanner);\n+    }\n+\n+    ///\n+    /// Bookie Shell Commands\n+    ///\n+\n+    /**\n+     * Read ledger meta\n+     *\n+     * @param ledgerId\n+     *          Ledger Id\n+     */\n+    protected void readLedgerMeta(long ledgerId) throws Exception {\n+        System.out.println(\"===== LEDGER: \" + ledgerId + \" =====\");\n+        FileInfo fi = getFileInfo(ledgerId);\n+        byte[] masterKey = fi.getMasterKey();\n+        if (null == masterKey) {\n+            System.out.println(\"master key  : NULL\");\n+        } else {\n+            System.out.println(\"master key  : \" + bytes2Hex(fi.getMasterKey()));\n+        }\n+        long size = fi.size();\n+        if (size % 8 == 0) {\n+            System.out.println(\"size        : \" + size);\n+        } else {\n+            System.out.println(\"size : \" + size + \" (not aligned with 8, may be corrupted or under flushing now)\");\n+        }\n+        System.out.println(\"entries     : \" + (size / 8));\n+    }\n+\n+    /**\n+     * Read ledger index entires\n+     *\n+     * @param ledgerId\n+     *          Ledger Id\n+     * @throws IOException\n+     */\n+    protected void readLedgerIndexEntries(long ledgerId) throws IOException {\n+        System.out.println(\"===== LEDGER: \" + ledgerId + \" =====\");\n+        FileInfo fi = getFileInfo(ledgerId);\n+        long size = fi.size();\n+        System.out.println(\"size        : \" + size);\n+        long curSize = 0;\n+        long curEntry = 0;\n+        LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n+        lep.usePage();\n+        try {\n+            while (curSize < size) {\n+                lep.setLedger(ledgerId);\n+                lep.setFirstEntry(curEntry);\n+                lep.readPage(fi);\n+\n+                // process a page\n+                for (int i=0; i<entriesPerPage; i++) {\n+                    long offset = lep.getOffset(i * 8);\n+                    if (0 == offset) {\n+                        System.out.println(\"entry \" + curEntry + \"\\t:\\tN/A\");\n+                    } else {\n+                        long entryLogId = offset >> 32L;\n+                        long pos = offset & 0xffffffffL;\n+                        System.out.println(\"entry \" + curEntry + \"\\t:\\t(log:\" + entryLogId + \", pos: \" + pos + \")\");\n+                    }\n+                    ++curEntry;\n+                }\n+\n+                curSize += pageSize;\n+            }\n+        } catch (IOException ie) {\n+            LOG.error(\"Failed to read index page : \", ie);\n+            if (curSize + pageSize < size) {\n+                System.out.println(\"Failed to read index page @ \" + curSize + \", the index file may be corrupted : \" + ie.getMessage());\n+            } else {\n+                System.out.println(\"Failed to read last index page @ \" + curSize\n+                                 + \", the index file may be corrupted or last index page is not fully flushed yet : \" + ie.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Scan over an entry log file.\n+     *\n+     * @param logId\n+     *          Entry Log File id.\n+     * @param printMsg\n+     *          Whether printing the entry data.\n+     */\n+    protected void scanEntryLog(long logId, final boolean printMsg) throws Exception {\n+        System.out.println(\"Scan entry log \" + logId + \" (\" + Long.toHexString(logId) + \".log)\");\n+        scanEntryLog(logId, new EntryLogScanner() {\n+            @Override\n+            public boolean accept(long ledgerId) {\n+                return true;\n+            }\n+            @Override\n+            public void process(long ledgerId, long startPos, ByteBuffer entry) {\n+                formatEntry(startPos, entry, printMsg);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Scan a journal file\n+     *\n+     * @param journalId\n+     *          Journal File Id\n+     * @param printMsg\n+     *          Whether printing the entry data.\n+     */\n+    protected void scanJournal(long journalId, final boolean printMsg) throws Exception {\n+        System.out.println(\"Scan journal \" + journalId + \" (\" + Long.toHexString(journalId) + \".txn)\");\n+        scanJournal(journalId, new JournalScanner() {\n+            boolean printJournalVersion = false;\n+            @Override\n+            public void process(int journalVersion, long offset, ByteBuffer entry) throws IOException {\n+                if (!printJournalVersion) {\n+                    System.out.println(\"Journal Version : \" + journalVersion);\n+                    printJournalVersion = true;\n+                }\n+                formatEntry(offset, entry, printMsg);\n+            }\n+        });\n+    }\n+\n+    /**\n+     * Print last log mark\n+     */\n+    protected void printLastLogMark() throws IOException {\n+        LastLogMark lastLogMark = getJournal().getLastLogMark();\n+        System.out.println(\"LastLogMark: Journal Id - \" + lastLogMark.getTxnLogId() + \"(\"\n+                + Long.toHexString(lastLogMark.getTxnLogId()) + \".txn), Pos - \"\n+                + lastLogMark.getTxnLogPosition());\n+    }\n+\n+    /**\n+     * Format the message into a readable format.\n+     *\n+     * @param pos\n+     *          File offset of the message stored in entry log file\n+     * @param recBuff\n+     *          Entry Data\n+     * @param printMsg\n+     *          Whether printing the message body\n+     */\n+    private void formatEntry(long pos, ByteBuffer recBuff, boolean printMsg) {\n+        long ledgerId = recBuff.getLong();\n+        long entryId = recBuff.getLong();\n+        int entrySize = recBuff.limit();\n+\n+        System.out.println(\"--------- Lid=\" + ledgerId + \", Eid=\" + entryId\n+                         + \", ByteOffset=\" + pos + \", EntrySize=\" + entrySize + \" ---------\");\n+        if (entryId == Bookie.METAENTRY_ID_LEDGER_KEY) {\n+            int masterKeyLen = recBuff.getInt();\n+            byte[] masterKey = new byte[masterKeyLen];\n+            recBuff.get(masterKey);\n+            System.out.println(\"Type:           META\");\n+            System.out.println(\"MasterKey:      \" + bytes2Hex(masterKey));\n+            System.out.println();\n+            return;\n+        }\n+        // process a data entry\n+        long lastAddConfirmed = recBuff.getLong();\n+        System.out.println(\"Type:           DATA\");\n+        System.out.println(\"LastConfirmed:  \" + lastAddConfirmed);\n+        if (!printMsg) {\n+            System.out.println();\n+            return;\n+        }\n+        // skip digest checking\n+        recBuff.position(32 + 8);\n+        System.out.println(\"Data:\");\n+        System.out.println();\n+        try {\n+            byte[] ret = new byte[recBuff.remaining()];\n+            recBuff.get(ret);\n+            formatter.formatEntry(ret);\n+        } catch (Exception e) {\n+            System.out.println(\"N/A. Corrupted.\");\n+        }\n+        System.out.println();\n+    }\n+\n+    static String bytes2Hex(byte[] data) {\n+        StringBuilder sb = new StringBuilder(data.length * 2);\n+        Formatter formatter = new Formatter(sb);\n+        for (byte b : data) {\n+            formatter.format(\"%02x\", b);\n+        }\n+        return sb.toString();\n+    }\n+}"},{"sha":"28a8daa8dd103f92befc363160d5b206b97d0aa4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","status":"modified","additions":101,"deletions":37,"changes":138,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Cookie.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -20,29 +20,34 @@\n  */\n package org.apache.bookkeeper.bookie;\n \n+import java.io.BufferedReader;\n+import java.io.EOFException;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.FileReader;\n import java.io.OutputStreamWriter;\n import java.io.BufferedWriter;\n import java.io.IOException;\n-import java.util.Scanner;\n+import java.io.StringReader;\n \n-import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n-import java.nio.ByteBuffer;\n-\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.util.StringUtils;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.DataFormats.CookieFormat;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.protobuf.TextFormat;\n+\n /**\n  * When a bookie starts for the first time it generates  a cookie, and stores\n  * the cookie in zookeeper as well as in the each of the local filesystem\n@@ -59,30 +64,55 @@\n class Cookie {\n     static Logger LOG = LoggerFactory.getLogger(Cookie.class);\n \n-    static final int CURRENT_COOKIE_LAYOUT_VERSION = 3;\n-    static final String COOKIE_NODE = \"cookies\";\n-    static final String VERSION_FILENAME = \"VERSION\";\n+    static final int CURRENT_COOKIE_LAYOUT_VERSION = 4;\n     private int layoutVersion = 0;\n     private String bookieHost = null;\n     private String journalDir = null;\n     private String ledgerDirs = null;\n     private int znodeVersion = -1;\n+    private String instanceId = null;\n \n     private Cookie() {\n     }\n \n-    public void verify(Cookie c)\n-            throws BookieException.InvalidCookieException {\n-        if (!(c.layoutVersion == layoutVersion\n-              && c.layoutVersion >= 3\n-              && c.bookieHost.equals(bookieHost)\n-              && c.journalDir.equals(journalDir)\n-              && c.ledgerDirs.equals(ledgerDirs))) {\n-            throw new BookieException.InvalidCookieException();\n+    public void verify(Cookie c) throws BookieException.InvalidCookieException {\n+        String errMsg;\n+        if (c.layoutVersion < 3 && c.layoutVersion != layoutVersion) {\n+            errMsg = \"Cookie is of too old version \" + c.layoutVersion;\n+            LOG.error(errMsg);\n+            throw new BookieException.InvalidCookieException(errMsg);\n+        } else if (!(c.layoutVersion >= 3 && c.bookieHost.equals(bookieHost)\n+                && c.journalDir.equals(journalDir) && c.ledgerDirs\n+                    .equals(ledgerDirs))) {\n+            errMsg = \"Cookie [\" + this + \"] is not matching with [\" + c + \"]\";\n+            throw new BookieException.InvalidCookieException(errMsg);\n+        } else if ((instanceId == null && c.instanceId != null)\n+                || (instanceId != null && !instanceId.equals(c.instanceId))) {\n+            // instanceId should be same in both cookies\n+            errMsg = \"instanceId \" + instanceId\n+                    + \" is not matching with \" + c.instanceId;\n+            throw new BookieException.InvalidCookieException(errMsg);\n         }\n     }\n \n     public String toString() {\n+        if (layoutVersion <= 3) {\n+            return toStringVersion3();\n+        }\n+        CookieFormat.Builder builder = CookieFormat.newBuilder();\n+        builder.setBookieHost(bookieHost);\n+        builder.setJournalDir(journalDir);\n+        builder.setLedgerDirs(ledgerDirs);\n+        if (null != instanceId) {\n+            builder.setInstanceId(instanceId);\n+        }\n+        StringBuilder b = new StringBuilder();\n+        b.append(CURRENT_COOKIE_LAYOUT_VERSION).append(\"\\n\");\n+        b.append(TextFormat.printToString(builder.build()));\n+        return b.toString();\n+    }\n+\n+    private String toStringVersion3() {\n         StringBuilder b = new StringBuilder();\n         b.append(CURRENT_COOKIE_LAYOUT_VERSION).append(\"\\n\")\n             .append(bookieHost).append(\"\\n\")\n@@ -91,24 +121,40 @@ public String toString() {\n         return b.toString();\n     }\n \n-    private static Cookie parse(Scanner s) throws IOException {\n-        Cookie c  = new Cookie();\n-        if (!s.hasNextInt()) {\n-            throw new IOException(\"Invalid string, cannot parse cookie.\");\n+    private static Cookie parse(BufferedReader reader) throws IOException {\n+        Cookie c = new Cookie();\n+        String line = reader.readLine();\n+        if (null == line) {\n+            throw new EOFException(\"Exception in parsing cookie\");\n+        }\n+        try {\n+            c.layoutVersion = Integer.parseInt(line.trim());\n+        } catch (NumberFormatException e) {\n+            throw new IOException(\"Invalid string '\" + line.trim()\n+                    + \"', cannot parse cookie.\");\n         }\n-        c.layoutVersion = s.nextInt();\n-        if (c.layoutVersion >= 3) {\n-            s.nextLine();\n-            c.bookieHost = s.nextLine();\n-            c.journalDir = s.nextLine();\n-            c.ledgerDirs = s.nextLine();\n+        if (c.layoutVersion == 3) {\n+            c.bookieHost = reader.readLine();\n+            c.journalDir = reader.readLine();\n+            c.ledgerDirs = reader.readLine();\n+        } else if (c.layoutVersion >= 4) {\n+            CookieFormat.Builder builder = CookieFormat.newBuilder();\n+            TextFormat.merge(reader, builder);\n+            CookieFormat data = builder.build();\n+            c.bookieHost = data.getBookieHost();\n+            c.journalDir = data.getJournalDir();\n+            c.ledgerDirs = data.getLedgerDirs();\n+            // Since InstanceId is optional\n+            if (null != data.getInstanceId() && !data.getInstanceId().isEmpty()) {\n+                c.instanceId = data.getInstanceId();\n+            }\n         }\n-        s.close();\n         return c;\n     }\n \n     void writeToDirectory(File directory) throws IOException {\n-        File versionFile = new File(directory, VERSION_FILENAME);\n+        File versionFile = new File(directory,\n+                BookKeeperConstants.VERSION_FILENAME);\n \n         FileOutputStream fos = new FileOutputStream(versionFile);\n         BufferedWriter bw = null;\n@@ -125,7 +171,8 @@ void writeToDirectory(File directory) throws IOException {\n \n     void writeToZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n             throws KeeperException, InterruptedException, UnknownHostException {\n-        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\" + COOKIE_NODE;\n+        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n+                + BookKeeperConstants.COOKIE_NODE;\n         String zkPath = getZkPath(conf);\n         byte[] data = toString().getBytes();\n         if (znodeVersion != -1) {\n@@ -160,7 +207,7 @@ static Cookie generateCookie(ServerConfiguration conf)\n             throws UnknownHostException {\n         Cookie c = new Cookie();\n         c.layoutVersion = CURRENT_COOKIE_LAYOUT_VERSION;\n-        c.bookieHost = InetAddress.getLocalHost().getHostAddress() + \":\" + conf.getBookiePort();\n+        c.bookieHost = StringUtils.addrToString(Bookie.getBookieAddress(conf));\n         c.journalDir = conf.getJournalDirName();\n         StringBuilder b = new StringBuilder();\n         String[] dirs = conf.getLedgerDirNames();\n@@ -178,19 +225,36 @@ static Cookie readFromZooKeeper(ZooKeeper zk, ServerConfiguration conf)\n \n         Stat stat = zk.exists(zkPath, false);\n         byte[] data = zk.getData(zkPath, false, stat);\n-        Cookie c = parse(new Scanner(new String(data)));\n-        c.znodeVersion = stat.getVersion();\n-        return c;\n+        BufferedReader reader = new BufferedReader(new StringReader(new String(\n+                data)));\n+        try {\n+            Cookie c = parse(reader);\n+            c.znodeVersion = stat.getVersion();\n+            return c;\n+        } finally {\n+            reader.close();\n+        }\n     }\n \n     static Cookie readFromDirectory(File directory) throws IOException {\n-        File versionFile = new File(directory, VERSION_FILENAME);\n-        return parse(new Scanner(versionFile));\n+        File versionFile = new File(directory,\n+                BookKeeperConstants.VERSION_FILENAME);\n+        BufferedReader reader = new BufferedReader(new FileReader(versionFile));\n+        try {\n+            return parse(reader);\n+        } finally {\n+            reader.close();\n+        }\n+    }\n+\n+    public void setInstanceId(String instanceId) {\n+        this.instanceId = instanceId;\n     }\n \n     private static String getZkPath(ServerConfiguration conf)\n             throws UnknownHostException {\n-        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\" + COOKIE_NODE;\n-        return bookieCookiePath + \"/\" + InetAddress.getLocalHost().getHostAddress() + \":\" + conf.getBookiePort();\n+        String bookieCookiePath = conf.getZkLedgersRootPath() + \"/\"\n+                + BookKeeperConstants.COOKIE_NODE;\n+        return bookieCookiePath + \"/\" + StringUtils.addrToString(Bookie.getBookieAddress(conf));\n     }\n }"},{"sha":"9f1b52a4bafd59610231b3da6de730d9c8b02279","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":107,"deletions":29,"changes":136,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -34,15 +34,17 @@\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n import java.nio.channels.FileChannel;\n-import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.util.IOUtils;\n \n@@ -55,9 +57,13 @@\n  */\n public class EntryLogger {\n     private static final Logger LOG = LoggerFactory.getLogger(EntryLogger.class);\n-    private File dirs[];\n+\n+    volatile File currentDir;\n+    private LedgerDirsManager ledgerDirsManager;\n+    private AtomicBoolean shouldCreateNewEntryLog = new AtomicBoolean(false);\n \n     private long logId;\n+\n     /**\n      * The maximum size of a entry logger file.\n      */\n@@ -70,6 +76,7 @@\n     final static int LOGFILE_HEADER_SIZE = 1024;\n     final ByteBuffer LOGFILE_HEADER = ByteBuffer.allocate(LOGFILE_HEADER_SIZE);\n \n+    final static int MIN_SANE_ENTRY_SIZE = 8 + 8;\n     final static long MB = 1024 * 1024;\n \n     /**\n@@ -91,19 +98,22 @@\n          *\n          * @param ledgerId\n          *          Ledger ID.\n+         * @param offset\n+         *          File offset of this entry.\n          * @param entry\n          *          Entry ByteBuffer\n          * @throws IOException\n          */\n-        public void process(long ledgerId, ByteBuffer entry) throws IOException;\n+        public void process(long ledgerId, long offset, ByteBuffer entry) throws IOException;\n     }\n \n     /**\n      * Create an EntryLogger that stores it's log files in the given\n      * directories\n      */\n-    public EntryLogger(ServerConfiguration conf) throws IOException {\n-        this.dirs = Bookie.getCurrentDirectories(conf.getLedgerDirs());\n+    public EntryLogger(ServerConfiguration conf,\n+            LedgerDirsManager ledgerDirsManager) throws IOException {\n+        this.ledgerDirsManager = ledgerDirsManager;\n         // log size limit\n         this.logSizeLimit = conf.getEntryLogSizeLimit();\n \n@@ -113,9 +123,10 @@ public EntryLogger(ServerConfiguration conf) throws IOException {\n         // so there can be race conditions when entry logs are rolled over and\n         // this header buffer is cleared before writing it into the new logChannel.\n         LOGFILE_HEADER.put(\"BKLO\".getBytes());\n+\n         // Find the largest logId\n         logId = -1;\n-        for(File dir: dirs) {\n+        for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n             if (!dir.exists()) {\n                 throw new FileNotFoundException(\n                         \"Entry log directory does not exist\");\n@@ -125,7 +136,8 @@ public EntryLogger(ServerConfiguration conf) throws IOException {\n                 logId = lastLogId;\n             }\n         }\n-        createNewLog();\n+\n+        initialize();\n     }\n \n     /**\n@@ -137,37 +149,72 @@ synchronized long getCurrentLogId() {\n         return logId;\n     }\n \n+    protected void initialize() throws IOException {\n+        // Register listener for disk full notifications.\n+        ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n+        // create a new log to write\n+        createNewLog();\n+    }\n+\n+    private LedgerDirsListener getLedgerDirsListener() {\n+        return new LedgerDirsListener() {\n+            @Override\n+            public void diskFull(File disk) {\n+                // If the current entry log disk is full, then create new entry\n+                // log.\n+                if (currentDir != null && currentDir.equals(disk)) {\n+                    shouldCreateNewEntryLog.set(true);\n+                }\n+            }\n+\n+            @Override\n+            public void diskFailed(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void allDisksFull() {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void fatalError() {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+        };\n+    }\n+\n     /**\n      * Creates a new log file\n      */\n-    private void createNewLog() throws IOException {\n-        List<File> list = Arrays.asList(dirs);\n-        Collections.shuffle(list);\n+    void createNewLog() throws IOException {\n         if (logChannel != null) {\n             logChannel.flush(true);\n         }\n \n         // It would better not to overwrite existing entry log files\n-        File newLogFile = null;\n+        String logFileName = null;\n         do {\n-            String logFileName = Long.toHexString(++logId) + \".log\";\n-            for (File dir : list) {\n-                newLogFile = new File(dir, logFileName);\n+            logFileName = Long.toHexString(++logId) + \".log\";\n+            for (File dir : ledgerDirsManager.getAllLedgerDirs()) {\n+                File newLogFile = new File(dir, logFileName);\n                 if (newLogFile.exists()) {\n                     LOG.warn(\"Found existed entry log \" + newLogFile\n                            + \" when trying to create it as a new log.\");\n-                    newLogFile = null;\n+                    logFileName = null;\n                     break;\n                 }\n             }\n-        } while (newLogFile == null);\n+        } while (logFileName == null);\n \n+        // Update last log id first\n+        currentDir = ledgerDirsManager.pickRandomWritableDir();\n+        setLastLogId(currentDir, logId);\n+\n+        File newLogFile = new File(currentDir, logFileName);\n         logChannel = new BufferedChannel(new RandomAccessFile(newLogFile, \"rw\").getChannel(), 64*1024);\n         logChannel.write((ByteBuffer) LOGFILE_HEADER.clear());\n         channels.put(logId, logChannel);\n-        for(File f: dirs) {\n-            setLastLogId(f, logId);\n-        }\n     }\n \n     /**\n@@ -281,8 +328,16 @@ synchronized void flush() throws IOException {\n         }\n     }\n     synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n-        if (logChannel.position() + entry.remaining() + 4 > logSizeLimit) {\n+        // Create new log if logSizeLimit reached or current disk is full\n+        boolean createNewLog = shouldCreateNewEntryLog.get();\n+        if (createNewLog\n+                || (logChannel.position() + entry.remaining() + 4 > logSizeLimit)) {\n             createNewLog();\n+\n+            // Reset the flag\n+            if (createNewLog) {\n+                shouldCreateNewEntryLog.set(false);\n+            }\n         }\n         ByteBuffer buff = ByteBuffer.allocate(4);\n         buff.putInt(entry.remaining());\n@@ -295,7 +350,7 @@ synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n         return (logId << 32L) | pos;\n     }\n \n-    byte[] readEntry(long ledgerId, long entryId, long location) throws IOException {\n+    byte[] readEntry(long ledgerId, long entryId, long location) throws IOException, Bookie.NoEntryException {\n         long entryLogId = location >> 32L;\n         long pos = location & 0xffffffffL;\n         ByteBuffer sizeBuff = ByteBuffer.allocate(4);\n@@ -309,7 +364,8 @@ synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n             throw newe;\n         }\n         if (fc.read(sizeBuff, pos) != sizeBuff.capacity()) {\n-            throw new IOException(\"Short read from entrylog \" + entryLogId);\n+            throw new Bookie.NoEntryException(\"Short read from entrylog \" + entryLogId,\n+                                              ledgerId, entryId);\n         }\n         pos += 4;\n         sizeBuff.flip();\n@@ -319,11 +375,24 @@ synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n             LOG.error(\"Sanity check failed for entry size of \" + entrySize + \" at location \" + pos + \" in \" + entryLogId);\n \n         }\n+        if (entrySize < MIN_SANE_ENTRY_SIZE) {\n+            LOG.error(\"Read invalid entry length {}\", entrySize);\n+            throw new IOException(\"Invalid entry length \" + entrySize);\n+        }\n         byte data[] = new byte[entrySize];\n         ByteBuffer buff = ByteBuffer.wrap(data);\n         int rc = fc.read(buff, pos);\n         if ( rc != data.length) {\n-            throw new IOException(\"Short read for \" + ledgerId + \"@\" + entryId + \" in \" + entryLogId + \"@\" + pos + \"(\"+rc+\"!=\"+data.length+\")\");\n+            // Note that throwing NoEntryException here instead of IOException is not\n+            // without risk. If all bookies in a quorum throw this same exception\n+            // the client will assume that it has reached the end of the ledger.\n+            // However, this may not be the case, as a very specific error condition\n+            // could have occurred, where the length of the entry was corrupted on all\n+            // replicas. However, the chance of this happening is very very low, so\n+            // returning NoEntryException is mostly safe.\n+            throw new Bookie.NoEntryException(\"Short read for \" + ledgerId + \"@\"\n+                                              + entryId + \" in \" + entryLogId + \"@\"\n+                                              + pos + \"(\"+rc+\"!=\"+data.length+\")\", ledgerId, entryId);\n         }\n         buff.flip();\n         long thisLedgerId = buff.getLong();\n@@ -365,7 +434,7 @@ private BufferedChannel getChannelForLogId(long entryLogId) throws IOException {\n      * Whether the log file exists or not.\n      */\n     boolean logExists(long logId) {\n-        for (File d : dirs) {\n+        for (File d : ledgerDirsManager.getAllLedgerDirs()) {\n             File f = new File(d, Long.toHexString(logId) + \".log\");\n             if (f.exists()) {\n                 return true;\n@@ -375,7 +444,7 @@ boolean logExists(long logId) {\n     }\n \n     private File findFile(long logId) throws FileNotFoundException {\n-        for(File d: dirs) {\n+        for (File d : ledgerDirsManager.getAllLedgerDirs()) {\n             File f = new File(d, Long.toHexString(logId)+\".log\");\n             if (f.exists()) {\n                 return f;\n@@ -416,6 +485,7 @@ protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOE\n             if (bc.read(sizeBuff, pos) != sizeBuff.capacity()) {\n                 throw new IOException(\"Short read for entry size from entrylog \" + entryLogId);\n             }\n+            long offset = pos;\n             pos += 4;\n             sizeBuff.flip();\n             int entrySize = sizeBuff.getInt();\n@@ -446,7 +516,7 @@ protected void scanEntryLog(long entryLogId, EntryLogScanner scanner) throws IOE\n             }\n             buff.flip();\n             // process the entry\n-            scanner.process(lid, buff);\n+            scanner.process(lid, offset, buff);\n             // Advance position to the next entry\n             pos += entrySize;\n         }\n@@ -459,13 +529,21 @@ public void shutdown() {\n         // since logChannel is buffered channel, do flush when shutting down\n         try {\n             flush();\n-            logChannel.getFileChannel().close();\n+            for (Entry<Long, BufferedChannel> channelEntry : channels\n+                    .entrySet()) {\n+                channelEntry.getValue().getFileChannel().close();\n+            }\n         } catch (IOException ie) {\n             // we have no idea how to avoid io exception during shutting down, so just ignore it\n             LOG.error(\"Error flush entry log during shutting down, which may cause entry log corrupted.\", ie);\n         } finally {\n-            if (logChannel.getFileChannel().isOpen()) {\n-                IOUtils.close(LOG, logChannel.getFileChannel());\n+            for (Entry<Long, BufferedChannel> channelEntry : channels\n+                    .entrySet()) {\n+                FileChannel fileChannel = channelEntry.getValue()\n+                        .getFileChannel();\n+                if (fileChannel.isOpen()) {\n+                    IOUtils.close(LOG, fileChannel);\n+                }\n             }\n         }\n     }"},{"sha":"b554ab1065751afcbf7617cd55caf5d9a8ca105e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":109,"deletions":3,"changes":112,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -44,6 +44,7 @@\n  * <li>magic bytes: 4 bytes, 'BKLE', version: 4 bytes\n  * <li>len of master key: indicates length of master key. -1 means no master key stored in header.\n  * <li>master key: master key\n+ * <li>state: bit map to indicate the state, 32 bits.\n  * </ul>\n  * <b>Index page</b> is a fixed-length page, which contains serveral entries which point to the offsets of data stored in entry loggers.\n  * </p>\n@@ -52,9 +53,10 @@\n     static Logger LOG = LoggerFactory.getLogger(FileInfo.class);\n \n     static final int NO_MASTER_KEY = -1;\n+    static final int STATE_FENCED_BIT = 0x1;\n \n     private FileChannel fc;\n-    private final File lf;\n+    private File lf;\n     byte[] masterKey;\n \n     /**\n@@ -67,11 +69,28 @@\n     private long size;\n     private int useCount;\n     private boolean isClosed;\n+    private long sizeSinceLastwrite;\n+\n+    // bit map for states of the ledger.\n+    private int stateBits;\n+    private boolean needFlushHeader = false;\n+\n+    // file access mode\n+    protected String mode;\n \n     public FileInfo(File lf, byte[] masterKey) throws IOException {\n         this.lf = lf;\n \n         this.masterKey = masterKey;\n+        mode = \"rw\";\n+    }\n+\n+    public File getLf() {\n+        return lf;\n+    }\n+\n+    public long getSizeSinceLastwrite() {\n+        return sizeSinceLastwrite;\n     }\n \n     synchronized public void readHeader() throws IOException {\n@@ -80,8 +99,9 @@ synchronized public void readHeader() throws IOException {\n                 return;\n             }\n \n-            fc = new RandomAccessFile(lf, \"rw\").getChannel();\n+            fc = new RandomAccessFile(lf, mode).getChannel();\n             size = fc.size();\n+            sizeSinceLastwrite = size;\n \n             // avoid hang on reading partial index\n             ByteBuffer bb = ByteBuffer.allocate((int)(Math.min(size, START_OF_DATA)));\n@@ -104,6 +124,8 @@ synchronized public void readHeader() throws IOException {\n             }\n             masterKey = new byte[length];\n             bb.get(masterKey);\n+            stateBits = bb.getInt();\n+            needFlushHeader = false;\n         } else {\n             throw new IOException(\"Ledger index file does not exist\");\n         }\n@@ -122,7 +144,7 @@ synchronized private void checkOpen(boolean create) throws IOException {\n             if (create) {\n                 // delayed the creation of parents directories\n                 checkParents(lf);\n-                fc = new RandomAccessFile(lf, \"rw\").getChannel();\n+                fc = new RandomAccessFile(lf, mode).getChannel();\n                 size = fc.size();\n                 if (size == 0) {\n                     writeHeader();\n@@ -149,11 +171,43 @@ private void writeHeader() throws IOException {\n         bb.putInt(headerVersion);\n         bb.putInt(masterKey.length);\n         bb.put(masterKey);\n+        bb.putInt(stateBits);\n         bb.rewind();\n         fc.position(0);\n         fc.write(bb);\n     }\n \n+    synchronized public boolean isFenced() throws IOException {\n+        checkOpen(false);\n+        return (stateBits & STATE_FENCED_BIT) == STATE_FENCED_BIT;\n+    }\n+\n+    /**\n+     * @return true if set fence succeed, otherwise false when\n+     * it already fenced or failed to set fenced.\n+     */\n+    synchronized public boolean setFenced() throws IOException {\n+        checkOpen(false);\n+        LOG.debug(\"Try to set fenced state in file info {} : state bits {}.\", lf, stateBits);\n+        if ((stateBits & STATE_FENCED_BIT) != STATE_FENCED_BIT) {\n+            // not fenced yet\n+            stateBits |= STATE_FENCED_BIT;\n+            needFlushHeader = true;\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    // flush the header when header is changed\n+    synchronized public void flushHeader() throws IOException {\n+        if (needFlushHeader) {\n+            checkOpen(true);\n+            writeHeader();\n+            needFlushHeader = false;\n+        }\n+    }\n+\n     synchronized public long size() throws IOException {\n         checkOpen(false);\n         long rc = size-START_OF_DATA;\n@@ -216,9 +270,61 @@ synchronized public long write(ByteBuffer[] buffs, long position) throws IOExcep\n                 size = newsize;\n             }\n         }\n+        sizeSinceLastwrite = fc.size();\n         return total;\n     }\n \n+    /**\n+     * Copies current file contents upto specified size to the target file and\n+     * deletes the current file. If size not known then pass size as\n+     * Long.MAX_VALUE to copy complete file.\n+     */\n+    public synchronized void moveToNewLocation(File newFile, long size) throws IOException {\n+        checkOpen(false);\n+        if (size > fc.size()) {\n+            size = fc.size();\n+        }\n+        File rlocFile = new File(newFile.getParentFile(), newFile.getName() + LedgerCacheImpl.RLOC);\n+        if (!rlocFile.exists()) {\n+            checkParents(rlocFile);\n+            if (!rlocFile.createNewFile()) {\n+                throw new IOException(\"Creating new cache index file \" + rlocFile + \" failed \");\n+            }\n+        }\n+        // copy contents from old.idx to new.idx.rloc\n+        FileChannel newFc = new RandomAccessFile(rlocFile, \"rw\").getChannel();\n+        try {\n+            long written = 0;\n+            while (written < size) {\n+                long count = fc.transferTo(written, size, newFc);\n+                if (count <= 0) {\n+                    throw new IOException(\"Copying to new location \" + rlocFile + \" failed\");\n+                }\n+                written += count;\n+            }\n+            if (written <= 0 && size > 0) {\n+                throw new IOException(\"Copying to new location \" + rlocFile + \" failed\");\n+            }\n+        } finally {\n+            newFc.force(true);\n+            newFc.close();\n+        }\n+        // delete old.idx\n+        fc.close();\n+        if (!delete()) {\n+            LOG.error(\"Failed to delete the previous index file \" + lf);\n+            throw new IOException(\"Failed to delete the previous index file \" + lf);\n+        }\n+\n+        // rename new.idx.rloc to new.idx\n+        if (!rlocFile.renameTo(newFile)) {\n+            LOG.error(\"Failed to rename \" + rlocFile + \" to \" + newFile);\n+            throw new IOException(\"Failed to rename \" + rlocFile + \" to \" + newFile);\n+        }\n+        fc = new RandomAccessFile(newFile, mode).getChannel();\n+        lf = newFile;\n+    }\n+\n     synchronized public byte[] getMasterKey() throws IOException {\n         checkOpen(false);\n         return masterKey;"},{"sha":"a4d9cdacefbb1de9b2fa095573a23c161bdf4268","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","status":"modified","additions":18,"deletions":9,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileSystemUpgrade.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -21,14 +21,14 @@\n \n package org.apache.bookkeeper.bookie;\n \n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.HardLink;\n \n import org.apache.commons.io.FileUtils;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n-import org.apache.commons.cli.ParseException;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -55,7 +55,6 @@\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.KeeperException;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n  * Application for upgrading the bookkeeper filesystem\n@@ -110,7 +109,8 @@ public boolean accept(File dir, String name) {\n \n     private static int detectPreviousVersion(File directory) throws IOException {\n         String[] files = directory.list(BOOKIE_FILES_FILTER);\n-        File v2versionFile = new File(directory, Cookie.VERSION_FILENAME);\n+        File v2versionFile = new File(directory,\n+                BookKeeperConstants.VERSION_FILENAME);\n         if (files.length == 0 && !v2versionFile.exists()) { // no old data, so we're ok\n             return Cookie.CURRENT_COOKIE_LAYOUT_VERSION;\n         }\n@@ -195,9 +195,10 @@ public static void upgrade(ServerConfiguration conf)\n                 int version = detectPreviousVersion(d);\n                 if (version == Cookie.CURRENT_COOKIE_LAYOUT_VERSION) {\n                     LOG.info(\"Directory is current, no need to upgrade\");\n+                    continue;\n                 }\n                 try {\n-                    File curDir = new File(d, Bookie.CURRENT_DIR);\n+                    File curDir = new File(d, BookKeeperConstants.CURRENT_DIR);\n                     File tmpDir = new File(d, \"upgradeTmp.\" + System.nanoTime());\n                     deferredMoves.put(curDir, tmpDir);\n                     if (!tmpDir.mkdirs()) {\n@@ -230,6 +231,11 @@ public boolean accept(File dir, String name) {\n                     throw new BookieException.UpgradeException(ioe);\n                 }\n             }\n+\n+            if (deferredMoves.isEmpty()) {\n+                return;\n+            }\n+\n             try {\n                 c.writeToZooKeeper(zk, conf);\n             } catch (KeeperException ke) {\n@@ -254,7 +260,8 @@ public static void finalizeUpgrade(ServerConfiguration conf)\n                 int version = detectPreviousVersion(d);\n                 if (version < 3) {\n                     if (version == 2) {\n-                        File v2versionFile = new File(d, Cookie.VERSION_FILENAME);\n+                        File v2versionFile = new File(d,\n+                                BookKeeperConstants.VERSION_FILENAME);\n                         if (!v2versionFile.delete()) {\n                             LOG.warn(\"Could not delete old version file {}\", v2versionFile);\n                         }\n@@ -291,7 +298,8 @@ public static void rollback(ServerConfiguration conf)\n                     int version = detectPreviousVersion(d);\n \n                     if (version <= Cookie.CURRENT_COOKIE_LAYOUT_VERSION) {\n-                        File curDir = new File(d, Bookie.CURRENT_DIR);\n+                        File curDir = new File(d,\n+                                BookKeeperConstants.CURRENT_DIR);\n                         FileUtils.deleteDirectory(curDir);\n                     } else {\n                         throw new BookieException.UpgradeException(\n@@ -328,7 +336,8 @@ public static void main(String[] args) throws Exception {\n         root.addAppender(new org.apache.log4j.ConsoleAppender(\n                                  new org.apache.log4j.PatternLayout(\"%-5p [%t]: %m%n\")));\n         root.setLevel(org.apache.log4j.Level.ERROR);\n-        root.getLogger(FileSystemUpgrade.class).setLevel(org.apache.log4j.Level.INFO);\n+        org.apache.log4j.Logger.getLogger(FileSystemUpgrade.class).setLevel(\n+                org.apache.log4j.Level.INFO);\n \n         final Options opts = new Options();\n         opts.addOption(\"c\", \"conf\", true, \"Configuration for Bookie\");\n@@ -376,4 +385,4 @@ public static void main(String[] args) throws Exception {\n             throw new IllegalArgumentException(err);\n         }\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"bfe69a4c3656b3bb82d2be7e9224b17f5b3ca492","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollector.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollector.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollector.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,51 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+/**\n+ * This is the garbage collector interface, garbage collector implementers\n+ * need to extends this class to remove the deleted ledgers.\n+ */\n+public interface GarbageCollector {\n+    /**\n+     * Do the garbage collector work\n+     *\n+     * @param garbageCleaner\n+     *          cleaner used to clean selected garbages\n+     */\n+    public abstract void gc(GarbageCleaner garbageCleaner);\n+\n+    /**\n+     * A interface used to define customised garbage cleaner\n+     */\n+    public interface GarbageCleaner {\n+\n+        /**\n+         * Clean a specific ledger\n+         *\n+         * @param ledgerId\n+         *          Ledger ID to be cleaned\n+         */\n+        public void clean(final long ledgerId) ;\n+    }\n+\n+}"},{"sha":"c9f5adebdb2b6a4993d58c8716113856c4f68f64","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":111,"deletions":43,"changes":154,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -23,29 +23,32 @@\n \n import java.io.IOException;\n import java.nio.ByteBuffer;\n-import java.util.Comparator;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Map;\n+import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n+import org.apache.bookkeeper.bookie.GarbageCollector.GarbageCleaner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n-import org.apache.zookeeper.ZooKeeper;\n+import org.apache.bookkeeper.util.MathUtils;\n+import org.apache.bookkeeper.util.SnapshotMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * This is the garbage collector thread that runs in the background to\n  * remove any entry log files that no longer contains any active ledger.\n  */\n public class GarbageCollectorThread extends Thread {\n     private static final Logger LOG = LoggerFactory.getLogger(GarbageCollectorThread.class);\n-\n+    private static final int COMPACTION_MAX_OUTSTANDING_REQUESTS = 1000;\n     private static final int SECOND = 1000;\n \n     // Maps entry log files to the set of ledgers that comprise the file and the size usage per ledger\n@@ -68,12 +71,11 @@\n \n     // Entry Logger Handle\n     final EntryLogger entryLogger;\n-    final EntryLogScanner scanner;\n+    final SafeEntryAdder safeEntryAdder;\n \n     // Ledger Cache Handle\n     final LedgerCache ledgerCache;\n-\n-    final LedgerManager ledgerManager;\n+    final SnapshotMap<Long, Boolean> activeLedgers;\n \n     // flag to ensure gc thread will not be interrupted during compaction\n     // to reduce the risk getting entry log corrupted\n@@ -84,24 +86,80 @@\n     // track the last scanned successfully log id\n     long scannedLogId = 0;\n \n+    final GarbageCollector garbageCollector;\n+    final GarbageCleaner garbageCleaner;\n+\n+\n+    /**\n+     * Interface for adding entries. When the write callback is triggered, the\n+     * entry must be guaranteed to be presisted.\n+     */\n+    interface SafeEntryAdder {\n+        public void safeAddEntry(long ledgerId, ByteBuffer buffer, GenericCallback<Void> cb);\n+    }\n+\n     /**\n      * A scanner wrapper to check whether a ledger is alive in an entry log file\n      */\n     class CompactionScanner implements EntryLogScanner {\n         EntryLogMetadata meta;\n+        Object completionLock = new Object();\n+        AtomicInteger outstandingRequests = new AtomicInteger(0);\n+        AtomicBoolean allSuccessful = new AtomicBoolean(true);\n \n         public CompactionScanner(EntryLogMetadata meta) {\n             this.meta = meta;\n         }\n \n         @Override\n         public boolean accept(long ledgerId) {\n-            return meta.containsLedger(ledgerId) && scanner.accept(ledgerId);\n+            return meta.containsLedger(ledgerId);\n         }\n \n         @Override\n-        public void process(long ledgerId, ByteBuffer entry) throws IOException {\n-            scanner.process(ledgerId, entry);\n+        public void process(final long ledgerId, long offset, ByteBuffer entry)\n+            throws IOException {\n+            if (!allSuccessful.get()) {\n+                return;\n+            }\n+\n+            outstandingRequests.incrementAndGet();\n+            synchronized (completionLock) {\n+                while (outstandingRequests.get() >= COMPACTION_MAX_OUTSTANDING_REQUESTS) {\n+                    try {\n+                        completionLock.wait();\n+                    } catch (InterruptedException ie) {\n+                        LOG.error(\"Interrupted while waiting to re-add entry\", ie);\n+                        Thread.currentThread().interrupt();\n+                        throw new IOException(\"Interrupted while waiting to re-add entry\", ie);\n+                    }\n+                }\n+            }\n+            safeEntryAdder.safeAddEntry(ledgerId, entry, new GenericCallback<Void>() {\n+                    @Override\n+                    public void operationComplete(int rc, Void result) {\n+                        if (rc != BookieException.Code.OK) {\n+                            LOG.error(\"Error {} re-adding entry for ledger {})\",\n+                                      rc, ledgerId);\n+                            allSuccessful.set(false);\n+                        }\n+                        synchronized(completionLock) {\n+                            outstandingRequests.decrementAndGet();\n+                            completionLock.notifyAll();\n+                        }\n+                    }\n+                });\n+        }\n+\n+        void awaitComplete() throws InterruptedException, IOException {\n+            synchronized(completionLock) {\n+                while (outstandingRequests.get() > 0) {\n+                    completionLock.wait();\n+                }\n+                if (allSuccessful.get() == false) {\n+                    throw new IOException(\"Couldn't re-add all entries\");\n+                }\n+            }\n         }\n     }\n \n@@ -114,19 +172,37 @@ public void process(long ledgerId, ByteBuffer entry) throws IOException {\n      * @throws IOException\n      */\n     public GarbageCollectorThread(ServerConfiguration conf,\n-                                  LedgerCache ledgerCache,\n+                                  final LedgerCache ledgerCache,\n                                   EntryLogger entryLogger,\n-                                  LedgerManager ledgerManager,\n-                                  EntryLogScanner scanner)\n+                                  SnapshotMap<Long, Boolean> activeLedgers,\n+                                  SafeEntryAdder safeEntryAdder,\n+                                  LedgerManager ledgerManager)\n         throws IOException {\n         super(\"GarbageCollectorThread\");\n \n         this.ledgerCache = ledgerCache;\n         this.entryLogger = entryLogger;\n-        this.ledgerManager = ledgerManager;\n-        this.scanner = scanner;\n+        this.activeLedgers = activeLedgers;\n+        this.safeEntryAdder = safeEntryAdder;\n \n         this.gcWaitTime = conf.getGcWaitTime();\n+\n+        this.garbageCleaner = new GarbageCollector.GarbageCleaner() {\n+            @Override\n+            public void clean(long ledgerId) {\n+                try {\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"delete ledger : \" + ledgerId);\n+                    }\n+                    ledgerCache.deleteLedger(ledgerId);\n+                } catch (IOException e) {\n+                    LOG.error(\"Exception when deleting the ledger index file on the Bookie: \", e);\n+                }\n+            }\n+        };\n+\n+        this.garbageCollector = new ScanAndCompareGarbageCollector(ledgerManager, activeLedgers);\n+\n         // compaction parameters\n         minorCompactionThreshold = conf.getMinorCompactionThreshold();\n         minorCompactionInterval = conf.getMinorCompactionInterval() * SECOND;\n@@ -172,7 +248,7 @@ public GarbageCollectorThread(ServerConfiguration conf,\n         LOG.info(\"Major Compaction : enabled=\" + enableMajorCompaction + \", threshold=\"\n                + majorCompactionThreshold + \", interval=\" + majorCompactionInterval);\n \n-        lastMinorCompactionTime = lastMajorCompactionTime = System.currentTimeMillis();\n+        lastMinorCompactionTime = lastMajorCompactionTime = MathUtils.now();\n     }\n \n     @Override\n@@ -197,13 +273,13 @@ public void run() {\n             // gc entry logs\n             doGcEntryLogs();\n \n-            long curTime = System.currentTimeMillis();\n+            long curTime = MathUtils.now();\n             if (enableMajorCompaction &&\n                 curTime - lastMajorCompactionTime > majorCompactionInterval) {\n                 // enter major compaction\n                 LOG.info(\"Enter major compaction\");\n                 doCompactEntryLogs(majorCompactionThreshold);\n-                lastMajorCompactionTime = System.currentTimeMillis();\n+                lastMajorCompactionTime = MathUtils.now();\n                 // also move minor compaction time\n                 lastMinorCompactionTime = lastMajorCompactionTime;\n                 continue;\n@@ -214,7 +290,7 @@ public void run() {\n                 // enter minor compaction\n                 LOG.info(\"Enter minor compaction\");\n                 doCompactEntryLogs(minorCompactionThreshold);\n-                lastMinorCompactionTime = System.currentTimeMillis();\n+                lastMinorCompactionTime = MathUtils.now();\n             }\n         }\n     }\n@@ -223,17 +299,7 @@ public void run() {\n      * Do garbage collection ledger index files\n      */\n     private void doGcLedgers() {\n-        ledgerManager.garbageCollectLedgers(\n-        new LedgerManager.GarbageCollector() {\n-            @Override\n-            public void gc(long ledgerId) {\n-                try {\n-                    ledgerCache.deleteLedger(ledgerId);\n-                } catch (IOException e) {\n-                    LOG.error(\"Exception when deleting the ledger index file on the Bookie: \", e);\n-                }\n-            }\n-        });\n+        garbageCollector.gc(garbageCleaner);\n     }\n \n     /**\n@@ -245,7 +311,7 @@ private void doGcEntryLogs() {\n             EntryLogMetadata meta = entryLogMetaMap.get(entryLogId);\n             for (Long entryLogLedger : meta.ledgersMap.keySet()) {\n                 // Remove the entry log ledger from the set if it isn't active.\n-                if (!ledgerManager.containsActiveLedger(entryLogLedger)) {\n+                if (!activeLedgers.containsKey(entryLogLedger)) {\n                     meta.removeLedger(entryLogLedger);\n                 }\n             }\n@@ -284,17 +350,14 @@ public int compare(EntryLogMetadata m1, EntryLogMetadata m2) {\n                 }\n             }\n         };\n-        List<EntryLogMetadata> logsToCompact = new ArrayList();\n+        List<EntryLogMetadata> logsToCompact = new ArrayList<EntryLogMetadata>();\n         logsToCompact.addAll(entryLogMetaMap.values());\n         Collections.sort(logsToCompact, sizeComparator);\n         for (EntryLogMetadata meta : logsToCompact) {\n             if (meta.getUsage() >= threshold) {\n                 break;\n             }\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Compacting entry log \" + meta.entryLogId + \" below threshold \"\n-                        + threshold + \".\");\n-            }\n+            LOG.debug(\"Compacting entry log {} below threshold {}.\", meta.entryLogId, threshold);\n             compactEntryLog(meta.entryLogId);\n             if (!running) { // if gc thread is not running, stop compaction\n                 return;\n@@ -357,11 +420,16 @@ protected void compactEntryLog(long entryLogId) {\n         LOG.info(\"Compacting entry log : \" + entryLogId);\n \n         try {\n-            entryLogger.scanEntryLog(entryLogId, new CompactionScanner(entryLogMeta));\n+            CompactionScanner scanner = new CompactionScanner(entryLogMeta);\n+            entryLogger.scanEntryLog(entryLogId, scanner);\n+            scanner.awaitComplete();\n             // after moving entries to new entry log, remove this old one\n             removeEntryLog(entryLogId);\n         } catch (IOException e) {\n             LOG.info(\"Premature exception when compacting \" + entryLogId, e);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            LOG.warn(\"Interrupted while compacting\", ie);\n         } finally {\n             // clear compacting flag\n             compacting.set(false);\n@@ -442,7 +510,7 @@ public boolean accept(long ledgerId) {\n             return true;\n         }\n         @Override\n-        public void process(long ledgerId, ByteBuffer entry) {\n+        public void process(long ledgerId, long offset, ByteBuffer entry) {\n             // add new entry size of a ledger to entry log meta\n             meta.addLedgerSize(ledgerId, entry.limit() + 4);\n         }\n@@ -483,7 +551,7 @@ public void process(long ledgerId, ByteBuffer entry) {\n             } catch (IOException e) {\n                 hasExceptionWhenScan = true;\n                 LOG.warn(\"Premature exception when processing \" + entryLogId +\n-                         \"recovery will take care of the problem\", e);\n+                         \" recovery will take care of the problem\", e);\n             }\n \n             // if scan failed on some entry log, we don't move 'scannedLogId' to next id"},{"sha":"fd834c393093bf24465d110203dfb69697c66e2a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":30,"deletions":29,"changes":59,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -28,6 +28,8 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.util.SnapshotMap;\n+import org.apache.zookeeper.ZooKeeper;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -40,8 +42,12 @@\n class InterleavedLedgerStorage implements LedgerStorage {\n     final static Logger LOG = LoggerFactory.getLogger(InterleavedLedgerStorage.class);\n \n-    private EntryLogger entryLogger;\n-    private LedgerCache ledgerCache;\n+    EntryLogger entryLogger;\n+    LedgerCache ledgerCache;\n+\n+    // A sorted map to stored all active ledger ids\n+    protected final SnapshotMap<Long, Boolean> activeLedgers;\n+\n     // This is the thread that garbage collects the entry logs that do not\n     // contain any active ledgers in them; and compacts the entry logs that\n     // has lower remaining percentage to reclaim disk space.\n@@ -50,15 +56,18 @@\n     // this indicates that a write has happened since the last flush\n     private volatile boolean somethingWritten = false;\n \n-    InterleavedLedgerStorage(ServerConfiguration conf, LedgerManager ledgerManager)\n-            throws IOException {\n-        entryLogger = new EntryLogger(conf);\n-        ledgerCache = new LedgerCacheImpl(conf, ledgerManager);\n+    InterleavedLedgerStorage(ServerConfiguration conf,\n+                             LedgerManager ledgerManager, LedgerDirsManager ledgerDirsManager,\n+                             GarbageCollectorThread.SafeEntryAdder safeEntryAdder)\n+\t\t\tthrows IOException {\n+        activeLedgers = new SnapshotMap<Long, Boolean>();\n+        entryLogger = new EntryLogger(conf, ledgerDirsManager);\n+        ledgerCache = new LedgerCacheImpl(conf, activeLedgers, ledgerDirsManager);\n         gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n-                ledgerManager, new EntryLogCompactionScanner());\n+                activeLedgers, safeEntryAdder, ledgerManager);\n     }\n \n-    @Override    \n+    @Override\n     public void start() {\n         gcThread.start();\n     }\n@@ -76,6 +85,16 @@ public void shutdown() throws InterruptedException {\n         }\n     }\n \n+    @Override\n+    public boolean setFenced(long ledgerId) throws IOException {\n+        return ledgerCache.setFenced(ledgerId);\n+    }\n+\n+    @Override\n+    public boolean isFenced(long ledgerId) throws IOException {\n+        return ledgerCache.isFenced(ledgerId);\n+    }\n+\n     @Override\n     public void setMasterKey(long ledgerId, byte[] masterKey) throws IOException {\n         ledgerCache.setMasterKey(ledgerId, masterKey);\n@@ -136,7 +155,8 @@ public boolean isFlushRequired() {\n     };\n \n     @Override\n-    public void flush() throws IOException {\n+    public synchronized void flush() throws IOException {\n+\n         if (!somethingWritten) {\n             return;\n         }\n@@ -165,23 +185,4 @@ public void flush() throws IOException {\n     public BKMBeanInfo getJMXBean() {\n         return ledgerCache.getJMXBean();\n     }\n-\n-    /**\n-     * Scanner used to do entry log compaction\n-     */\n-    class EntryLogCompactionScanner implements EntryLogger.EntryLogScanner {\n-        @Override\n-        public boolean accept(long ledgerId) {\n-            // bookie has no knowledge about which ledger is deleted\n-            // so just accept all ledgers.\n-            return true;\n-        }\n-\n-        @Override\n-        public void process(long ledgerId, ByteBuffer buffer)\n-            throws IOException {\n-            addEntry(buffer);\n-        }\n-    }\n-\n-}\n\\ No newline at end of file\n+}"},{"sha":"bfdb02e1ab3fac98473dc6869d38c4741666d1af","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":29,"deletions":23,"changes":52,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -32,9 +32,11 @@\n import java.util.List;\n import java.util.concurrent.LinkedBlockingQueue;\n \n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.IOUtils;\n+import org.apache.bookkeeper.util.MathUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -85,9 +87,9 @@\n      * Last Log Mark\n      */\n     class LastLogMark {\n-        long txnLogId;\n-        long txnLogPosition;\n-        LastLogMark lastMark;\n+        private long txnLogId;\n+        private long txnLogPosition;\n+        private LastLogMark lastMark;\n         LastLogMark(long logId, long logPosition) {\n             this.txnLogId = logId;\n             this.txnLogPosition = logPosition;\n@@ -110,26 +112,33 @@ synchronized long getTxnLogPosition() {\n             return txnLogPosition;\n         }\n \n-        synchronized void rollLog() {\n+        synchronized void rollLog() throws NoWritableLedgerDirException {\n             byte buff[] = new byte[16];\n             ByteBuffer bb = ByteBuffer.wrap(buff);\n             // we should record <logId, logPosition> marked in markLog\n             // which is safe since records before lastMark have been\n             // persisted to disk (both index & entry logger)\n             bb.putLong(lastMark.getTxnLogId());\n             bb.putLong(lastMark.getTxnLogPosition());\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"RollLog to persist last marked log : \" + lastMark);\n-            }\n-            for(File dir: ledgerDirectories) {\n+            LOG.debug(\"RollLog to persist last marked log : {}\", lastMark);\n+            List<File> writableLedgerDirs = ledgerDirsManager\n+                    .getWritableLedgerDirs();\n+            for (File dir : writableLedgerDirs) {\n                 File file = new File(dir, \"lastMark\");\n+                FileOutputStream fos = null;\n                 try {\n-                    FileOutputStream fos = new FileOutputStream(file);\n+                    fos = new FileOutputStream(file);\n                     fos.write(buff);\n                     fos.getChannel().force(true);\n                     fos.close();\n+                    fos = null;\n                 } catch (IOException e) {\n                     LOG.error(\"Problems writing to \" + file, e);\n+                } finally {\n+                    // if stream already closed in try block successfully,\n+                    // stream might have nullified, in such case below\n+                    // call will simply returns\n+                    IOUtils.close(LOG, fos);\n                 }\n             }\n         }\n@@ -142,7 +151,7 @@ synchronized void rollLog() {\n         synchronized void readLog() {\n             byte buff[] = new byte[16];\n             ByteBuffer bb = ByteBuffer.wrap(buff);\n-            for(File dir: ledgerDirectories) {\n+            for(File dir: ledgerDirsManager.getAllLedgerDirs()) {\n                 File file = new File(dir, \"lastMark\");\n                 try {\n                     FileInputStream fis = new FileInputStream(file);\n@@ -244,7 +253,6 @@ public boolean accept(long journalId) {\n     final int maxBackupJournals;\n \n     final File journalDirectory;\n-    final File ledgerDirectories[];\n     final ServerConfiguration conf;\n \n     private LastLogMark lastLogMark = new LastLogMark(0, 0);\n@@ -253,20 +261,19 @@ public boolean accept(long journalId) {\n     LinkedBlockingQueue<QueueEntry> queue = new LinkedBlockingQueue<QueueEntry>();\n \n     volatile boolean running = true;\n+    private LedgerDirsManager ledgerDirsManager;\n \n-    public Journal(ServerConfiguration conf) {\n+    public Journal(ServerConfiguration conf, LedgerDirsManager ledgerDirsManager) {\n         super(\"BookieJournal-\" + conf.getBookiePort());\n+        this.ledgerDirsManager = ledgerDirsManager;\n         this.conf = conf;\n         this.journalDirectory = Bookie.getCurrentDirectory(conf.getJournalDir());\n-        this.ledgerDirectories = Bookie.getCurrentDirectories(conf.getLedgerDirs());\n         this.maxJournalSize = conf.getMaxJournalSize() * MB;\n         this.maxBackupJournals = conf.getMaxBackupJournals();\n \n         // read last log mark\n         lastLogMark.readLog();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Last Log Mark : \" + lastLogMark);\n-        }\n+        LOG.debug(\"Last Log Mark : {}\", lastLogMark);\n     }\n \n     LastLogMark getLastLogMark() {\n@@ -310,7 +317,7 @@ public void markLog() {\n      * </p>\n      * @see #markLog()\n      */\n-    public void rollLog() {\n+    public void rollLog() throws NoWritableLedgerDirException {\n         lastLogMark.rollLog();\n     }\n \n@@ -417,9 +424,7 @@ public boolean accept(long journalId) {\n                 throw new IOException(\"Recovery log \" + markedLogId + \" is missing\");\n             }\n         }\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Try to relay journal logs : \" + logs);\n-        }\n+        LOG.debug(\"Try to relay journal logs : {}\", logs);\n         // TODO: When reading in the journal logs that need to be synced, we\n         // should use BufferedChannels instead to minimize the amount of\n         // system calls done.\n@@ -480,7 +485,7 @@ public void run() {\n             while (true) {\n                 // new journal file to write\n                 if (null == logFile) {\n-                    logId = System.currentTimeMillis();\n+                    logId = MathUtils.now();\n                     logFile = new JournalChannel(journalDirectory, logId);\n                     bc = logFile.getBufferedChannel();\n \n@@ -498,7 +503,8 @@ public void run() {\n                             lastFlushPosition = bc.position();\n                             lastLogMark.setLastLogMark(logId, lastFlushPosition);\n                             for (QueueEntry e : toFlush) {\n-                                e.cb.writeComplete(0, e.ledgerId, e.entryId, null, e.ctx);\n+                                e.cb.writeComplete(BookieException.Code.OK,\n+                                                   e.ledgerId, e.entryId, null, e.ctx);\n                             }\n                             toFlush.clear();\n "},{"sha":"360b9889be1824cdb1c1d62e1312e299039058c3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -51,7 +51,7 @@\n \n     int HEADER_SIZE = 8; // 4byte magic word, 4 byte version\n     int MIN_COMPAT_JOURNAL_FORMAT_VERSION = 1;\n-    int CURRENT_JOURNAL_FORMAT_VERSION = 3;\n+    int CURRENT_JOURNAL_FORMAT_VERSION = 4;\n \n     public final static long preAllocSize = 4*1024*1024;\n     public final static ByteBuffer zeros = ByteBuffer.allocate(512);\n@@ -155,4 +155,4 @@ int read(ByteBuffer dst)\n     public void close() throws IOException {\n         fc.close();\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"b2f8a9114e591d8de375b5cfc7e347490baaff27","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCache.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -30,6 +30,10 @@\n  * head scheduling.\n  */\n interface LedgerCache extends Closeable {\n+\n+    boolean setFenced(long ledgerId) throws IOException;\n+    boolean isFenced(long ledgerId) throws IOException;\n+\n     void setMasterKey(long ledgerId, byte[] masterKey) throws IOException;\n     byte[] readMasterKey(long ledgerId) throws IOException, BookieException;\n     boolean ledgerExists(long ledgerId) throws IOException;"},{"sha":"cf526194e70fa3f325cec99c5ba60d267f6a544c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":226,"deletions":72,"changes":298,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -32,10 +32,14 @@\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n-import java.util.Random;\n import java.util.Map.Entry;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.apache.bookkeeper.meta.LedgerManager;\n+import com.google.common.annotations.VisibleForTesting;\n+\n+import org.apache.bookkeeper.util.SnapshotMap;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n+import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -46,11 +50,16 @@\n  */\n public class LedgerCacheImpl implements LedgerCache {\n     private final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n+    private static final String IDX = \".idx\";\n+    static final String RLOC = \".rloc\";\n \n-    final File ledgerDirectories[];\n+    private LedgerDirsManager ledgerDirsManager;\n+    final private AtomicBoolean shouldRelocateIndexFile = new AtomicBoolean(false);\n \n-    public LedgerCacheImpl(ServerConfiguration conf, LedgerManager alm) {\n-        this.ledgerDirectories = Bookie.getCurrentDirectories(conf.getLedgerDirs());\n+    public LedgerCacheImpl(ServerConfiguration conf, SnapshotMap<Long, Boolean> activeLedgers,\n+            LedgerDirsManager ledgerDirsManager)\n+            throws IOException {\n+        this.ledgerDirsManager = ledgerDirsManager;\n         this.openFileLimit = conf.getOpenFileLimit();\n         this.pageSize = conf.getPageSize();\n         this.entriesPerPage = pageSize / 8;\n@@ -63,9 +72,10 @@ public LedgerCacheImpl(ServerConfiguration conf, LedgerManager alm) {\n         }\n         LOG.info(\"maxMemory = \" + Runtime.getRuntime().maxMemory());\n         LOG.info(\"openFileLimit is \" + openFileLimit + \", pageSize is \" + pageSize + \", pageLimit is \" + pageLimit);\n-        activeLedgerManager = alm;\n+        this.activeLedgers = activeLedgers;\n         // Retrieve all of the active ledgers.\n         getActiveLedgers();\n+        ledgerDirsManager.addLedgerDirsListener(getLedgerDirsListener());\n     }\n     /**\n      * the list of potentially clean ledgers\n@@ -83,7 +93,7 @@ public LedgerCacheImpl(ServerConfiguration conf, LedgerManager alm) {\n \n     // Manage all active ledgers in LedgerManager\n     // so LedgerManager has knowledge to garbage collect inactive/deleted ledgers\n-    final LedgerManager activeLedgerManager;\n+    final SnapshotMap<Long, Boolean> activeLedgers;\n \n     final int openFileLimit;\n     final int pageSize;\n@@ -140,17 +150,18 @@ private static LedgerEntryPage getFromTable(HashMap<Long, HashMap<Long,LedgerEnt\n         return null;\n     }\n \n-    synchronized private LedgerEntryPage getLedgerEntryPage(Long ledger, Long firstEntry, boolean onlyDirty) {\n+    synchronized protected LedgerEntryPage getLedgerEntryPage(Long ledger, Long firstEntry, boolean onlyDirty) {\n         LedgerEntryPage lep = getFromTable(pages, ledger, firstEntry);\n-        try {\n-            if (onlyDirty && lep.isClean()) {\n-                return null;\n-            }\n+        if (lep == null) {\n+            return null;\n+        }\n+\n+        lep.usePage();\n+\n+        if (onlyDirty && lep.isClean()) {\n+            return null;\n+        } else {\n             return lep;\n-        } finally {\n-            if (lep != null) {\n-                lep.usePage();\n-            }\n         }\n     }\n \n@@ -176,7 +187,7 @@ private LedgerEntryPage grabLedgerEntryPage(long ledger, long pageEntry) throws\n             }   \n         } catch (IOException ie) {\n             // if we grab a clean page, but failed to update the page\n-            // we are exhuasting the count of ledger entry pages.\n+            // we are exhausting the count of ledger entry pages.\n             // since this page will be never used, so we need to decrement\n             // page count of ledger cache.\n             lep.releasePage();\n@@ -224,7 +235,8 @@ public long getEntryOffset(long ledger, long entry) throws IOException {\n         }\n     }\n \n-    static final String getLedgerName(long ledgerId) {\n+    @VisibleForTesting\n+    public static final String getLedgerName(long ledgerId) {\n         int parent = (int) (ledgerId & 0xff);\n         int grandParent = (int) ((ledgerId & 0xff00) >> 8);\n         StringBuilder sb = new StringBuilder();\n@@ -233,16 +245,10 @@ static final String getLedgerName(long ledgerId) {\n         sb.append(Integer.toHexString(parent));\n         sb.append('/');\n         sb.append(Long.toHexString(ledgerId));\n-        sb.append(\".idx\");\n+        sb.append(IDX);\n         return sb.toString();\n     }\n \n-    static final private Random rand = new Random();\n-\n-    static final private File pickDirs(File dirs[]) {\n-        return dirs[rand.nextInt(dirs.length)];\n-    }\n-\n     FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n         synchronized(fileInfoCache) {\n             FileInfo fi = fileInfoCache.get(ledger);\n@@ -252,18 +258,17 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n                     if (masterKey == null) {\n                         throw new Bookie.NoLedgerException(ledger);\n                     }\n-                    File dir = pickDirs(ledgerDirectories);\n-                    String ledgerName = getLedgerName(ledger);\n-                    lf = new File(dir, ledgerName);\n+                    lf = getNewLedgerIndexFile(ledger, null);\n                     // A new ledger index file has been created for this Bookie.\n                     // Add this new ledger to the set of active ledgers.\n-                    if (LOG.isDebugEnabled()) {\n-                        LOG.debug(\"New ledger index file created for ledgerId: \" + ledger);\n-                    }\n-                    activeLedgerManager.addActiveLedger(ledger, true);\n+                    LOG.debug(\"New ledger index file created for ledgerId: {}\", ledger);\n+                    activeLedgers.put(ledger, true);\n                 }\n                 evictFileInfoIfNecessary();\n                 fi = new FileInfo(lf, masterKey);\n+                if (ledgerDirsManager.isDirFull(getLedgerDirForLedger(fi))) {\n+                    moveLedgerIndexFile(ledger, fi);\n+                }\n                 fileInfoCache.put(ledger, fi);\n                 openLedgers.add(ledger);\n             }\n@@ -273,6 +278,24 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n             return fi;\n         }\n     }\n+\n+    /**\n+     * Get a new index file for ledger excluding directory <code>excludedDir</code>.\n+     *\n+     * @param ledger\n+     *          Ledger id.\n+     * @param excludedDir\n+     *          The ledger directory to exclude.\n+     * @return new index file object.\n+     * @throws NoWritableLedgerDirException if there is no writable dir available.\n+     */\n+    private File getNewLedgerIndexFile(Long ledger, File excludedDir)\n+    throws NoWritableLedgerDirException {\n+        File dir = ledgerDirsManager.pickRandomWritableDir(excludedDir);\n+        String ledgerName = getLedgerName(ledger);\n+        return new File(dir, ledgerName);\n+    }\n+\n     private void updatePage(LedgerEntryPage lep) throws IOException {\n         if (!lep.isClean()) {\n             throw new IOException(\"Trying to update a dirty page\");\n@@ -293,14 +316,40 @@ private void updatePage(LedgerEntryPage lep) throws IOException {\n         }\n     }\n \n+    private LedgerDirsListener getLedgerDirsListener() {\n+        return new LedgerDirsListener() {\n+            @Override\n+            public void diskFull(File disk) {\n+                // If the current entry log disk is full, then create new entry\n+                // log.\n+                shouldRelocateIndexFile.set(true);\n+            }\n+\n+            @Override\n+            public void diskFailed(File disk) {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void allDisksFull() {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+\n+            @Override\n+            public void fatalError() {\n+                // Nothing to handle here. Will be handled in Bookie\n+            }\n+        };\n+    }\n+\n     @Override\n     public void flushLedger(boolean doAll) throws IOException {\n         synchronized(dirtyLedgers) {\n             if (dirtyLedgers.isEmpty()) {\n                 synchronized(this) {\n                     for(Long l: pages.keySet()) {\n                         if (LOG.isTraceEnabled()) {\n-                            LOG.trace(\"Adding \" + Long.toHexString(l) + \" to dirty pages\");\n+                            LOG.trace(\"Adding {} to dirty pages\", Long.toHexString(l));\n                         }\n                         dirtyLedgers.add(l);\n                     }\n@@ -309,6 +358,20 @@ public void flushLedger(boolean doAll) throws IOException {\n             if (dirtyLedgers.isEmpty()) {\n                 return;\n             }\n+\n+            if (shouldRelocateIndexFile.get()) {\n+                // if some new dir detected as full, then move all corresponding\n+                // open index files to new location\n+                for (Long l : dirtyLedgers) {\n+                    FileInfo fi = getFileInfo(l, null);\n+                    File currentDir = getLedgerDirForLedger(fi);\n+                    if (ledgerDirsManager.isDirFull(currentDir)) {\n+                        moveLedgerIndexFile(l, fi);\n+                    }\n+                }\n+                shouldRelocateIndexFile.set(false);\n+            }\n+\n             while(!dirtyLedgers.isEmpty()) {\n                 Long l = dirtyLedgers.removeFirst();\n \n@@ -317,7 +380,7 @@ public void flushLedger(boolean doAll) throws IOException {\n                 if (!doAll) {\n                     break;\n                 }\n-                // Yeild. if we are doing all the ledgers we don't want to block other flushes that\n+                // Yield. if we are doing all the ledgers we don't want to block other flushes that\n                 // need to happen\n                 try {\n                     dirtyLedgers.wait(1);\n@@ -329,6 +392,21 @@ public void flushLedger(boolean doAll) throws IOException {\n         }\n     }\n \n+    /**\n+     * Get the ledger directory that the ledger index belongs to.\n+     *\n+     * @param fi File info of a ledger\n+     * @return ledger directory that the ledger belongs to.\n+     */\n+    private File getLedgerDirForLedger(FileInfo fi) {\n+        return fi.getLf().getParentFile().getParentFile().getParentFile();\n+    }\n+\n+    private void moveLedgerIndexFile(Long l, FileInfo fi) throws NoWritableLedgerDirException, IOException {\n+        File newLedgerIndexFile = getNewLedgerIndexFile(l, getLedgerDirForLedger(fi));\n+        fi.moveToNewLocation(newLedgerIndexFile, fi.getSizeSinceLastwrite());\n+    }\n+\n     /**\n      * Flush a specified ledger\n      *\n@@ -341,15 +419,22 @@ private void flushLedger(long l) throws IOException {\n         synchronized(this) {\n             HashMap<Long, LedgerEntryPage> pageMap = pages.get(l);\n             if (pageMap == null || pageMap.isEmpty()) {\n+                FileInfo fi = null;\n+                try {\n+                    fi = getFileInfo(l, null);\n+                    fi.flushHeader();\n+                } finally {\n+                    if (null != fi) {\n+                        fi.release();\n+                    }\n+                }\n                 return;\n             }\n             firstEntryList = new LinkedList<Long>();\n             for(Map.Entry<Long, LedgerEntryPage> entry: pageMap.entrySet()) {\n                 LedgerEntryPage lep = entry.getValue();\n                 if (lep.isClean()) {\n-                    if (LOG.isTraceEnabled()) {\n-                        LOG.trace(\"Page is clean \" + lep);\n-                    }\n+                    LOG.trace(\"Page is clean {}\", lep);\n                     continue;\n                 }\n                 firstEntryList.add(lep.getFirstEntry());\n@@ -380,6 +465,8 @@ public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n                     });\n             ArrayList<Integer> versions = new ArrayList<Integer>(entries.size());\n             fi = getFileInfo(l, null);\n+            // flush the header if necessary\n+            fi.flushHeader();\n             int start = 0;\n             long lastOffset = -1;\n             for(int i = 0; i < entries.size(); i++) {\n@@ -419,7 +506,7 @@ private void writeBuffers(Long ledger,\n                               List<LedgerEntryPage> entries, FileInfo fi,\n                               int start, int count) throws IOException {\n         if (LOG.isTraceEnabled()) {\n-            LOG.trace(\"Writing \" + count + \" buffers of \" + Long.toHexString(ledger));\n+            LOG.trace(\"Writing {} buffers of {}\", count, Long.toHexString(ledger));\n         }\n         if (count == 0) {\n             return;\n@@ -449,22 +536,22 @@ private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOExceptio\n         if (entry % entriesPerPage != 0) {\n             throw new IllegalArgumentException(entry + \" is not a multiple of \" + entriesPerPage);\n         }\n-        synchronized(this) {\n-            if (pageCount  < pageLimit) {\n-                // let's see if we can allocate something\n-                LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n-                lep.setLedger(ledger);\n-                lep.setFirstEntry(entry);\n+        outerLoop:\n+        while(true) {\n+            synchronized(this) {\n+                if (pageCount  < pageLimit) {\n+                    // let's see if we can allocate something\n+                    LedgerEntryPage lep = new LedgerEntryPage(pageSize, entriesPerPage);\n+                    lep.setLedger(ledger);\n+                    lep.setFirstEntry(entry);\n \n-                // note, this will not block since it is a new page\n-                lep.usePage();\n-                pageCount++;\n-                return lep;\n+                    // note, this will not block since it is a new page\n+                    lep.usePage();\n+                    pageCount++;\n+                    return lep;\n+                }\n             }\n-        }\n \n-        outerLoop:\n-        while(true) {\n             synchronized(cleanLedgers) {\n                 if (cleanLedgers.isEmpty()) {\n                     flushLedger(false);\n@@ -475,6 +562,14 @@ private LedgerEntryPage grabCleanPage(long ledger, long entry) throws IOExceptio\n                     }\n                 }\n                 synchronized(this) {\n+                    // if ledgers deleted between checking pageCount and putting\n+                    // ledgers into cleanLedgers list, the cleanLedgers list would be empty.\n+                    // so give it a chance to go back to check pageCount again because\n+                    // deleteLedger would decrement pageCount to return the number of pages\n+                    // occupied by deleted ledgers.\n+                    if (cleanLedgers.isEmpty()) {\n+                        continue outerLoop;\n+                    }\n                     Long cleanLedger = cleanLedgers.getFirst();\n                     Map<Long, LedgerEntryPage> map = pages.get(cleanLedger);\n                     while (map == null || map.isEmpty()) {\n@@ -574,23 +669,40 @@ public long getLastEntry(long ledgerId) throws IOException {\n      * BookieServer knows about that have not yet been deleted by the BookKeeper\n      * Client. This is called only once during initialization.\n      */\n-    private void getActiveLedgers() {\n+    private void getActiveLedgers() throws IOException {\n         // Ledger index files are stored in a file hierarchy with a parent and\n         // grandParent directory. We'll have to go two levels deep into these\n         // directories to find the index files.\n-        for (File ledgerDirectory : ledgerDirectories) {\n+        for (File ledgerDirectory : ledgerDirsManager.getAllLedgerDirs()) {\n             for (File grandParent : ledgerDirectory.listFiles()) {\n                 if (grandParent.isDirectory()) {\n                     for (File parent : grandParent.listFiles()) {\n                         if (parent.isDirectory()) {\n                             for (File index : parent.listFiles()) {\n-                                if (!index.isFile() || !index.getName().endsWith(\".idx\")) {\n+                                if (!index.isFile()\n+                                        || (!index.getName().endsWith(IDX) && !index.getName().endsWith(RLOC))) {\n                                     continue;\n                                 }\n-                                // We've found a ledger index file. The file name is the\n-                                // HexString representation of the ledgerId.\n-                                String ledgerIdInHex = index.getName().substring(0, index.getName().length() - 4);\n-                                activeLedgerManager.addActiveLedger(Long.parseLong(ledgerIdInHex, 16), true);\n+\n+                                // We've found a ledger index file. The file\n+                                // name is the HexString representation of the\n+                                // ledgerId.\n+                                String ledgerIdInHex = index.getName().replace(RLOC, \"\").replace(IDX, \"\");\n+                                if (index.getName().endsWith(RLOC)) {\n+                                    if (findIndexFile(Long.parseLong(ledgerIdInHex)) != null) {\n+                                        if (!index.delete()) {\n+                                            LOG.warn(\"Deleting the rloc file \" + index + \" failed\");\n+                                        }\n+                                        continue;\n+                                    } else {\n+                                        File dest = new File(index.getParentFile(), ledgerIdInHex + IDX);\n+                                        if (!index.renameTo(dest)) {\n+                                            throw new IOException(\"Renaming rloc file \" + index\n+                                                    + \" to index file has failed\");\n+                                        }\n+                                    }\n+                                }\n+                                activeLedgers.put(Long.parseLong(ledgerIdInHex, 16), true);\n                             }\n                         }\n                     }\n@@ -605,12 +717,17 @@ private void getActiveLedgers() {\n      */\n     @Override\n     public void deleteLedger(long ledgerId) throws IOException {\n-        if (LOG.isDebugEnabled())\n-            LOG.debug(\"Deleting ledgerId: \" + ledgerId);\n+        LOG.debug(\"Deleting ledgerId: {}\", ledgerId);\n \n         // remove pages first to avoid page flushed when deleting file info\n         synchronized(this) {\n-            pages.remove(ledgerId);\n+            Map<Long, LedgerEntryPage> lpages = pages.remove(ledgerId);\n+            if (null != lpages) {\n+                pageCount -= lpages.size();\n+                if (pageCount < 0) {\n+                    LOG.error(\"Page count of ledger cache has been decremented to be less than zero.\");\n+                }\n+            }\n         }\n         // Delete the ledger's index file and close the FileInfo\n         FileInfo fi = null;\n@@ -627,7 +744,7 @@ public void deleteLedger(long ledgerId) throws IOException {\n         }\n \n         // Remove it from the active ledger manager\n-        activeLedgerManager.removeActiveLedger(ledgerId);\n+        activeLedgers.remove(ledgerId);\n \n         // Now remove it from all the other lists and maps.\n         // These data structures need to be synchronized first before removing entries.\n@@ -647,7 +764,7 @@ public void deleteLedger(long ledgerId) throws IOException {\n \n     private File findIndexFile(long ledgerId) throws IOException {\n         String ledgerName = getLedgerName(ledgerId);\n-        for(File d: ledgerDirectories) {\n+        for (File d : ledgerDirsManager.getAllLedgerDirs()) {\n             File lf = new File(d, ledgerName);\n             if (lf.exists()) {\n                 return lf;\n@@ -678,11 +795,45 @@ private File findIndexFile(long ledgerId) throws IOException {\n \n     // evict file info if necessary\n     private void evictFileInfoIfNecessary() throws IOException {\n-        if (openLedgers.size() > openFileLimit) {\n-            long ledgerToRemove = openLedgers.removeFirst();\n-            LOG.info(\"Ledger {} is evicted from file info cache.\",\n-                     ledgerToRemove);\n-            fileInfoCache.remove(ledgerToRemove).close(true);\n+        synchronized (fileInfoCache) {\n+            if (openLedgers.size() > openFileLimit) {\n+                long ledgerToRemove = openLedgers.removeFirst();\n+                LOG.info(\"Ledger {} is evicted from file info cache.\",\n+                         ledgerToRemove);\n+                fileInfoCache.remove(ledgerToRemove).close(true);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean setFenced(long ledgerId) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            if (null != fi) {\n+                return fi.setFenced();\n+            }\n+            return false;\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public boolean isFenced(long ledgerId) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(ledgerId, null);\n+            if (null != fi) {\n+                return fi.isFenced();\n+            }\n+            return false;\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n         }\n     }\n \n@@ -764,11 +915,14 @@ public int getNumOpenLedgers() {\n \n     @Override\n     public void close() throws IOException {\n-        for (Entry<Long, FileInfo> fileInfo : fileInfoCache.entrySet()) {\n-            FileInfo value = fileInfo.getValue();\n-            if (value != null) {\n-                value.close(true);\n+        synchronized (fileInfoCache) {\n+            for (Entry<Long, FileInfo> fileInfo : fileInfoCache.entrySet()) {\n+                FileInfo value = fileInfo.getValue();\n+                if (value != null) {\n+                    value.close(true);\n+                }\n             }\n+            fileInfoCache.clear();\n         }\n     }\n }"},{"sha":"02850d13b2fdad773d2aa4fdae55bb62996c7bcc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptor.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -54,8 +54,8 @@ static LedgerDescriptor createReadOnly(long ledgerId,\n \n     abstract long getLedgerId();\n \n-    abstract void setFenced() throws IOException;\n-    abstract boolean isFenced();\n+    abstract boolean setFenced() throws IOException;\n+    abstract boolean isFenced() throws IOException;\n \n     abstract long addEntry(ByteBuffer entry) throws IOException;\n     abstract ByteBuffer readEntry(long entryId) throws IOException;"},{"sha":"82d95ebc01efb19be72a82eeeae882638c3731b7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorImpl.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -38,7 +38,6 @@\n     final LedgerStorage ledgerStorage;\n     private long ledgerId;\n \n-    volatile private boolean fenced = false;\n     final byte[] masterKey;\n \n     LedgerDescriptorImpl(byte[] masterKey, long ledgerId, LedgerStorage ledgerStorage) {\n@@ -60,13 +59,13 @@ public long getLedgerId() {\n     }\n \n     @Override\n-    void setFenced() throws IOException {\n-        fenced = true;\n+    boolean setFenced() throws IOException {\n+        return ledgerStorage.setFenced(ledgerId);\n     }\n \n     @Override\n-    boolean isFenced() {\n-        return fenced;\n+    boolean isFenced() throws IOException {\n+        return ledgerStorage.isFenced(ledgerId);\n     }\n \n     @Override"},{"sha":"29dcfaf2a0f0716c19779b2a0d6cdd91c667aa0b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDescriptorReadOnlyImpl.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -33,7 +33,7 @@\n     }\n \n     @Override\n-    void setFenced() throws IOException {\n+    boolean setFenced() throws IOException {\n         assert false;\n         throw new IOException(\"Invalid action on read only descriptor\");\n     }"},{"sha":"bbfd3dbc14f8442c45a594394dd322edfeb6ba97","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,268 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.util.DiskChecker;\n+import org.apache.bookkeeper.util.DiskChecker.DiskErrorException;\n+import org.apache.bookkeeper.util.DiskChecker.DiskOutOfSpaceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class manages ledger directories used by the bookie.\n+ */\n+public class LedgerDirsManager {\n+    private static Logger LOG = LoggerFactory\n+            .getLogger(LedgerDirsManager.class);\n+\n+    private volatile List<File> filledDirs;\n+    private final List<File> ledgerDirectories;\n+    private volatile List<File> writableLedgerDirectories;\n+    private DiskChecker diskChecker;\n+    private List<LedgerDirsListener> listeners;\n+    private LedgerDirsMonitor monitor;\n+    private final Random rand = new Random();\n+\n+    public LedgerDirsManager(ServerConfiguration conf) {\n+        this.ledgerDirectories = Arrays.asList(Bookie\n+                .getCurrentDirectories(conf.getLedgerDirs()));\n+        this.writableLedgerDirectories = new ArrayList<File>(ledgerDirectories);\n+        this.filledDirs = new ArrayList<File>();\n+        listeners = new ArrayList<LedgerDirsManager.LedgerDirsListener>();\n+        diskChecker = new DiskChecker(conf.getDiskUsageThreshold());\n+        monitor = new LedgerDirsMonitor(conf.getDiskCheckInterval());\n+    }\n+\n+    /**\n+     * Get all ledger dirs configured\n+     */\n+    public List<File> getAllLedgerDirs() {\n+        return ledgerDirectories;\n+    }\n+\n+    /**\n+     * Get only writable ledger dirs.\n+     */\n+    public List<File> getWritableLedgerDirs()\n+            throws NoWritableLedgerDirException {\n+        if (writableLedgerDirectories.isEmpty()) {\n+            String errMsg = \"All ledger directories are non writable\";\n+            NoWritableLedgerDirException e = new NoWritableLedgerDirException(\n+                    errMsg);\n+            LOG.error(errMsg, e);\n+            throw e;\n+        }\n+        return writableLedgerDirectories;\n+    }\n+\n+    /**\n+     * Get dirs, which are full more than threshold\n+     */\n+    public boolean isDirFull(File dir) {\n+        return filledDirs.contains(dir);\n+    }\n+\n+    /**\n+     * Add the dir to filled dirs list\n+     */\n+    @VisibleForTesting\n+    public void addToFilledDirs(File dir) {\n+        if (!filledDirs.contains(dir)) {\n+            LOG.warn(dir + \" is out of space.\"\n+                    + \" Adding it to filled dirs list\");\n+            // Update filled dirs list\n+            List<File> updatedFilledDirs = new ArrayList<File>(filledDirs);\n+            updatedFilledDirs.add(dir);\n+            filledDirs = updatedFilledDirs;\n+            // Update the writable ledgers list\n+            List<File> newDirs = new ArrayList<File>(writableLedgerDirectories);\n+            newDirs.removeAll(filledDirs);\n+            writableLedgerDirectories = newDirs;\n+            // Notify listeners about disk full\n+            for (LedgerDirsListener listener : listeners) {\n+                listener.diskFull(dir);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Returns one of the ledger dir from writable dirs list randomly.\n+     */\n+    File pickRandomWritableDir() throws NoWritableLedgerDirException {\n+        return pickRandomWritableDir(null);\n+    }\n+\n+    /**\n+     * Pick up a writable dir from available dirs list randomly. The <code>excludedDir</code>\n+     * will not be pickedup.\n+     *\n+     * @param excludedDir\n+     *          The directory to exclude during pickup.\n+     * @throws NoWritableLedgerDirException if there is no writable dir available.\n+     */\n+    File pickRandomWritableDir(File excludedDir) throws NoWritableLedgerDirException {\n+        List<File> writableDirs = getWritableLedgerDirs();\n+\n+        final int start = rand.nextInt(writableDirs.size());\n+        int idx = start;\n+        File candidate = writableDirs.get(idx);\n+        while (null != excludedDir && excludedDir.equals(candidate)) {\n+            idx = (idx + 1) % writableDirs.size();\n+            if (idx == start) {\n+                // after searching all available dirs,\n+                // no writable dir is found\n+                throw new NoWritableLedgerDirException(\"No writable directories found from \"\n+                        + \" available writable dirs (\" + writableDirs + \") : exclude dir \"\n+                        + excludedDir);\n+            }\n+            candidate = writableDirs.get(idx);\n+        }\n+        return candidate;\n+    }\n+\n+    public void addLedgerDirsListener(LedgerDirsListener listener) {\n+        if (listener != null) {\n+            listeners.add(listener);\n+        }\n+    }\n+\n+    // start the daemon for disk monitoring\n+    public void start() {\n+        monitor.setDaemon(true);\n+        monitor.start();\n+    }\n+\n+    // shutdown disk monitoring daemon\n+    public void shutdown() {\n+        monitor.interrupt();\n+        try {\n+            monitor.join();\n+        } catch (InterruptedException e) {\n+            // Ignore\n+        }\n+    }\n+\n+    /**\n+     * Thread to monitor the disk space periodically.\n+     */\n+    private class LedgerDirsMonitor extends Thread {\n+        int interval;\n+\n+        public LedgerDirsMonitor(int interval) {\n+            this.interval = interval;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                while (true) {\n+                    List<File> writableDirs;\n+                    try {\n+                        writableDirs = getWritableLedgerDirs();\n+                    } catch (NoWritableLedgerDirException e) {\n+                        for (LedgerDirsListener listener : listeners) {\n+                            listener.allDisksFull();\n+                        }\n+                        break;\n+                    }\n+                    // Check all writable dirs disk space usage.\n+                    for (File dir : writableDirs) {\n+                        try {\n+                            diskChecker.checkDir(dir);\n+                        } catch (DiskErrorException e) {\n+                            // Notify disk failure to all listeners\n+                            for (LedgerDirsListener listener : listeners) {\n+                                listener.diskFailed(dir);\n+                            }\n+                        } catch (DiskOutOfSpaceException e) {\n+                            // Notify disk full to all listeners\n+                            addToFilledDirs(dir);\n+                        }\n+                    }\n+                    try {\n+                        Thread.sleep(interval);\n+                    } catch (InterruptedException e) {\n+                        LOG.info(\"LedgerDirsMonitor thread is interrupted\");\n+                        break;\n+                    }\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Error Occured while checking disks\", e);\n+                // Notify disk failure to all listeners\n+                for (LedgerDirsListener listener : listeners) {\n+                    listener.fatalError();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Indicates All configured ledger directories are full.\n+     */\n+    public static class NoWritableLedgerDirException extends IOException {\n+        private static final long serialVersionUID = -8696901285061448421L;\n+\n+        public NoWritableLedgerDirException(String errMsg) {\n+            super(errMsg);\n+        }\n+    }\n+\n+    /**\n+     * Listener for the disk check events will be notified from the\n+     * {@link LedgerDirsManager} whenever disk full/failure detected.\n+     */\n+    public static interface LedgerDirsListener {\n+        /**\n+         * This will be notified on disk failure/disk error\n+         * \n+         * @param disk\n+         *            Failed disk\n+         */\n+        void diskFailed(File disk);\n+\n+        /**\n+         * This will be notified on disk detected as full\n+         * \n+         * @param disk\n+         *            Filled disk\n+         */\n+        void diskFull(File disk);\n+\n+        /**\n+         * This will be notified whenever all disks are detected as full.\n+         */\n+        void allDisksFull();\n+\n+        /**\n+         * This will notify the fatal errors.\n+         */\n+        void fatalError();\n+    }\n+}"},{"sha":"f622834a4e934a7bae8ecdec1dff866c0848fcb4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerStorage.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -49,6 +49,24 @@\n      */\n     boolean ledgerExists(long ledgerId) throws IOException;\n \n+    /**\n+     * Fenced the ledger id in ledger storage.\n+     *\n+     * @param ledgerId\n+     *          Ledger Id.\n+     * @throws IOException when failed to fence the ledger.\n+     */\n+    boolean setFenced(long ledgerId) throws IOException;\n+\n+    /**\n+     * Check whether the ledger is fenced in ledger storage or not.\n+     *\n+     * @param ledgerId\n+     *          Ledger ID.\n+     * @throws IOException\n+     */\n+    boolean isFenced(long ledgerId) throws IOException;\n+\n     /**\n      * Set the master key for a ledger\n      */\n@@ -88,4 +106,4 @@\n      * Get the JMX management bean for this LedgerStorage\n      */\n     BKMBeanInfo getJMXBean();\n-}\n\\ No newline at end of file\n+}"},{"sha":"e69a75fbcdc62f9b77d474124d5c85989021b2de","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyEntryLogger.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,58 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+/**\n+ * Read Only Entry Logger\n+ */\n+public class ReadOnlyEntryLogger extends EntryLogger {\n+\n+    public ReadOnlyEntryLogger(ServerConfiguration conf) throws IOException {\n+        super(conf, new LedgerDirsManager(conf));\n+    }\n+\n+    @Override\n+    protected void initialize() throws IOException {\n+        // do nothing for read only entry logger\n+    }\n+\n+    @Override\n+    void createNewLog() throws IOException {\n+        throw new IOException(\"Can't create new entry log using a readonly entry logger.\");\n+    }\n+\n+    @Override\n+    protected boolean removeEntryLog(long entryLogId) {\n+        // can't remove entry log in readonly mode\n+        return false;\n+    }\n+\n+    @Override\n+    synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n+        throw new IOException(\"Can't add entry to a readonly entry logger.\");\n+    }\n+}"},{"sha":"0040fa6124dc3fb6f7402a38d0435b45c26d211f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java","status":"renamed","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ReadOnlyFileInfo.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.meta;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -21,23 +19,26 @@\n  *\n  */\n \n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.meta.HierarchicalLedgerManager;\n-import org.apache.bookkeeper.test.LedgerDeleteTest;\n+package org.apache.bookkeeper.bookie;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.RandomAccessFile;\n+import java.nio.ByteBuffer;\n+import java.nio.BufferUnderflowException;\n+import java.nio.channels.FileChannel;\n \n-import org.junit.Before;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n- * Test ledger delete using HierarchicalLedgerManager\n+ * Provide a readonly file info.\n  */\n-public class HierarchicalLedgerDeleteTest extends LedgerDeleteTest {\n+class ReadOnlyFileInfo extends FileInfo {\n \n-    @Before\n-    @Override\n-    public void setUp() throws Exception {\n-        baseConf.setLedgerManagerType(HierarchicalLedgerManager.NAME);\n-        baseClientConf.setLedgerManagerType(HierarchicalLedgerManager.NAME);\n-        super.setUp();\n+    public ReadOnlyFileInfo(File lf, byte[] masterKey) throws IOException {\n+        super(lf, masterKey);\n+        mode = \"r\";\n     }\n \n }","previous_filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalLedgerDeleteTest.java"},{"sha":"6ed2c0b6411d14652908741f53b62ee9a5822d64","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,108 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+package org.apache.bookkeeper.bookie;\n+\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n+import org.apache.bookkeeper.util.SnapshotMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Garbage collector implementation using scan and compare.\n+ *\n+ * <p>\n+ * Garbage collection is processed as below:\n+ * <ul>\n+ * <li> fetch all existing ledgers from zookeeper or metastore according to\n+ * the LedgerManager, called <b>globalActiveLedgers</b>\n+ * <li> fetch all active ledgers from bookie server, said <b>bkActiveLedgers</b>\n+ * <li> loop over <b>bkActiveLedgers</b> to find those ledgers that are not in\n+ * <b>globalActiveLedgers</b>, do garbage collection on them.\n+ * </ul>\n+ * </p>\n+ */\n+public class ScanAndCompareGarbageCollector implements GarbageCollector{\n+\n+    static final Logger LOG = LoggerFactory.getLogger(ScanAndCompareGarbageCollector.class);\n+    private SnapshotMap<Long, Boolean> activeLedgers;\n+    private LedgerManager ledgerManager;\n+\n+    public ScanAndCompareGarbageCollector(LedgerManager ledgerManager, SnapshotMap<Long, Boolean> activeLedgers) {\n+        this.ledgerManager = ledgerManager;\n+        this.activeLedgers = activeLedgers;\n+    }\n+\n+    @Override\n+    public void gc(GarbageCleaner garbageCleaner) {\n+        // create a snapshot first\n+        NavigableMap<Long, Boolean> bkActiveLedgersSnapshot =\n+                this.activeLedgers.snapshot();\n+        LedgerRangeIterator ledgerRangeIterator = ledgerManager.getLedgerRanges();\n+        try {\n+            // Empty global active ledgers, need to remove all local active ledgers.\n+            if (!ledgerRangeIterator.hasNext()) {\n+                for (Long bkLid : bkActiveLedgersSnapshot.keySet()) {\n+                    // remove it from current active ledger\n+                    bkActiveLedgersSnapshot.remove(bkLid);\n+                    garbageCleaner.clean(bkLid);\n+                }\n+            }\n+            while(ledgerRangeIterator.hasNext()) {\n+                LedgerRange lRange = ledgerRangeIterator.next();\n+                Map<Long, Boolean> subBkActiveLedgers = null;\n+                Long start = lRange.start();\n+                Long end = lRange.end();\n+                if (end != LedgerRange.NOLIMIT) {\n+                    subBkActiveLedgers = bkActiveLedgersSnapshot.subMap(start,\n+                            true, end, true);\n+                } else {\n+                    if (start != LedgerRange.NOLIMIT) {\n+                        subBkActiveLedgers = bkActiveLedgersSnapshot.tailMap(start);\n+                    } else {\n+                        subBkActiveLedgers = bkActiveLedgersSnapshot;\n+                    }\n+                }\n+                Set<Long> globalActiveLedgers = lRange.getLedgers();\n+                LOG.debug(\"All active ledgers for hash node {}, Current active ledgers from Bookie for hash node {}\",\n+                        globalActiveLedgers, subBkActiveLedgers.keySet());\n+                for (Long bkLid : subBkActiveLedgers.keySet()) {\n+                    if (!globalActiveLedgers.contains(bkLid)) {\n+                        // remove it from current active ledger\n+                        subBkActiveLedgers.remove(bkLid);\n+                        garbageCleaner.clean(bkLid);\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            // ignore exception, collecting garbage next time\n+            LOG.warn(\"Exception when iterating over the metadata {}\", e);\n+        }\n+    }\n+}\n+\n+"},{"sha":"8e1246f695741343795c5a98f8ffe20360e271ff","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -62,6 +62,8 @@ public static BKException create(int code) {\n             return new BKBookieHandleNotAvailableException();\n         case Code.ZKException:\n             return new ZKException();\n+        case Code.MetaStoreException:\n+            return new MetaStoreException();\n         case Code.LedgerRecoveryException:\n             return new BKLedgerRecoveryException();\n         case Code.LedgerClosedException:\n@@ -76,10 +78,16 @@ public static BKException create(int code) {\n             return new BKInterruptedException();\n         case Code.ProtocolVersionException:\n             return new BKProtocolVersionException();\n+        case Code.MetadataVersionException:\n+            return new BKMetadataVersionException();\n         case Code.LedgerFencedException:\n             return new BKLedgerFencedException();\n         case Code.UnauthorizedAccessException:\n             return new BKUnauthorizedAccessException();\n+        case Code.UnclosedFragmentException:\n+            return new BKUnclosedFragmentException();\n+        case Code.WriteOnReadOnlyBookieException:\n+            return new BKWriteOnReadOnlyBookieException();\n         default:\n             return new BKIllegalOpException();\n         }\n@@ -107,10 +115,14 @@ public static BKException create(int code) {\n         int IncorrectParameterException = -14;\n         int InterruptedException = -15;\n         int ProtocolVersionException = -16;\n+        int MetadataVersionException = -17;\n+        int MetaStoreException = -18;\n \n         int IllegalOpException = -100;\n         int LedgerFencedException = -101;\n         int UnauthorizedAccessException = -102;\n+        int UnclosedFragmentException = -103;\n+        int WriteOnReadOnlyBookieException = -104;\n     }\n \n     public void setCode(int code) {\n@@ -143,6 +155,8 @@ public static String getMessage(int code) {\n             return \"Bookie handle is not available\";\n         case Code.ZKException:\n             return \"Error while using ZooKeeper\";\n+        case Code.MetaStoreException:\n+            return \"Error while using MetaStore\";\n         case Code.LedgerRecoveryException:\n             return \"Error while recovering ledger\";\n         case Code.LedgerClosedException:\n@@ -157,10 +171,16 @@ public static String getMessage(int code) {\n             return \"Interrupted while waiting for permit\";\n         case Code.ProtocolVersionException:\n             return \"Bookie protocol version on server is incompatible with client\";\n+        case Code.MetadataVersionException:\n+            return \"Bad ledger metadata version\";\n         case Code.LedgerFencedException:\n             return \"Ledger has been fenced off. Some other client must have opened it to read\";\n         case Code.UnauthorizedAccessException:\n             return \"Attempted to access ledger using the wrong password\";\n+        case Code.UnclosedFragmentException:\n+            return \"Attempting to use an unclosed fragment; This is not safe\";\n+        case Code.WriteOnReadOnlyBookieException:\n+            return \"Attempting to write on ReadOnly bookie\";\n         default:\n             return \"Invalid operation\";\n         }\n@@ -226,6 +246,12 @@ public BKProtocolVersionException() {\n         }\n     }\n \n+    public static class BKMetadataVersionException extends BKException {\n+        public BKMetadataVersionException() {\n+            super(Code.MetadataVersionException);\n+        }\n+    }\n+\n     public static class BKNoSuchLedgerExistsException extends BKException {\n         public BKNoSuchLedgerExistsException() {\n             super(Code.NoSuchLedgerExistsException);\n@@ -244,6 +270,12 @@ public ZKException() {\n         }\n     }\n \n+    public static class MetaStoreException extends BKException {\n+        public MetaStoreException() {\n+            super(Code.MetaStoreException);\n+        }\n+    }\n+\n     public static class BKLedgerRecoveryException extends BKException {\n         public BKLedgerRecoveryException() {\n             super(Code.LedgerRecoveryException);\n@@ -279,4 +311,16 @@ public BKUnauthorizedAccessException() {\n             super(Code.UnauthorizedAccessException);\n         }\n     }\n+\n+    public static class BKUnclosedFragmentException extends BKException {\n+        public BKUnclosedFragmentException() {\n+            super(Code.UnclosedFragmentException);\n+        }\n+    }\n+\n+    public static class BKWriteOnReadOnlyBookieException extends BKException {\n+        public BKWriteOnReadOnlyBookieException() {\n+            super(Code.WriteOnReadOnlyBookieException);\n+        }\n+    }\n }"},{"sha":"630ea6ca5cc95d5b47a0a37eeaa3b2a439a861b9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":136,"deletions":106,"changes":242,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,6 +1,4 @@\n-package org.apache.bookkeeper.client;\n-\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -20,31 +18,31 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import java.io.IOException;\n-import java.util.concurrent.Executors;\n-\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n-import org.apache.bookkeeper.meta.LedgerManager;\n-import org.apache.bookkeeper.meta.LedgerManagerFactory;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.BKException.Code;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookieClient;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n-import org.apache.bookkeeper.util.SafeRunnable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * BookKeeper client. We assume there is one single writer to a ledger at any\n@@ -79,8 +77,10 @@\n     final BookieWatcher bookieWatcher;\n \n     final OrderedSafeExecutor mainWorkerPool;\n+    final ScheduledExecutorService scheduler;\n \n     // Ledger manager responsible for how to store ledger meta data\n+    final LedgerManagerFactory ledgerManagerFactory;\n     final LedgerManager ledgerManager;\n \n     final ClientConfiguration conf;\n@@ -119,28 +119,24 @@ public BookKeeper(String servers) throws IOException, InterruptedException,\n      * @throws InterruptedException\n      * @throws KeeperException\n      */\n-    public BookKeeper(ClientConfiguration conf)\n+    public BookKeeper(final ClientConfiguration conf)\n             throws IOException, InterruptedException, KeeperException {\n         this.conf = conf;\n-        this.zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(),\n-                new Watcher() {\n-                    @Override\n-                    public void process(WatchedEvent event) {\n-                        if (event.getState().equals(Watcher.Event.KeeperState.SyncConnected)) {\n-                            connectLatch.countDown();\n-                        }\n-                        // TODO: handle session disconnects and expires\n-                        LOG.debug(\"Process: {} {}\", event.getType(), event.getPath());\n-                    }\n-                });\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n+        this.zk = ZkUtils\n+                .createConnectedZookeeperClient(conf.getZkServers(), w);\n+\n         this.channelFactory = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                                 Executors.newCachedThreadPool());\n-        bookieWatcher = new BookieWatcher(conf, this);\n-        bookieWatcher.readBookiesBlocking();\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+\n         mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        // initialize ledger meta manager\n-        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n+        bookieWatcher = new BookieWatcher(conf, scheduler, this);\n+        bookieWatcher.readBookiesBlocking();\n+\n+        ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, zk);\n+        ledgerManager = ledgerManagerFactory.newLedgerManager();\n \n         ownChannelFactory = true;\n         ownZKHandle = true;\n@@ -176,49 +172,35 @@ public BookKeeper(ClientConfiguration conf, ZooKeeper zk)\n      *          {@link ClientConfiguration}\n      * @param zk\n      *          Zookeeper client instance connected to the zookeeper with which\n-     *          the bookies have registered\n+     *          the bookies have registered. The ZooKeeper client must be connected\n+     *          before it is passed to BookKeeper. Otherwise a KeeperException is thrown.\n      * @param channelFactory\n      *          A factory that will be used to create connections to the bookies\n      * @throws IOException\n      * @throws InterruptedException\n-     * @throws KeeperException\n+     * @throws KeeperException if the passed zk handle is not connected\n      */\n     public BookKeeper(ClientConfiguration conf, ZooKeeper zk, ClientSocketChannelFactory channelFactory)\n             throws IOException, InterruptedException, KeeperException {\n         if (zk == null || channelFactory == null) {\n             throw new NullPointerException();\n         }\n+        if (!zk.getState().isConnected()) {\n+            LOG.error(\"Unconnected zookeeper handle passed to bookkeeper\");\n+            throw KeeperException.create(KeeperException.Code.CONNECTIONLOSS);\n+        }\n         this.conf = conf;\n         this.zk = zk;\n         this.channelFactory = channelFactory;\n-        bookieWatcher = new BookieWatcher(conf, this);\n-        bookieWatcher.readBookiesBlocking();\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+\n         mainWorkerPool = new OrderedSafeExecutor(conf.getNumWorkerThreads());\n         bookieClient = new BookieClient(conf, channelFactory, mainWorkerPool);\n-        // initialize ledger meta manager\n-        ledgerManager = LedgerManagerFactory.newLedgerManager(conf, zk);\n-    }\n+        bookieWatcher = new BookieWatcher(conf, scheduler, this);\n+        bookieWatcher.readBookiesBlocking();\n \n-    void withZKConnected(final ZKConnectCallback cb) {\n-        if (ownZKHandle) {\n-            mainWorkerPool.submit(new SafeRunnable() {\n-                    @Override\n-                    public void safeRun() {\n-                        try {\n-                            if (!connectLatch.await(zkConnectTimeoutMs, TimeUnit.MILLISECONDS)) {\n-                                cb.connectionFailed(BKException.Code.ZKException);\n-                            } else {\n-                                cb.connected();\n-                            }\n-                        } catch (InterruptedException ie) {\n-                            // someone trying to kill the process\n-                            cb.connectionFailed(BKException.Code.InterruptedException);\n-                        }\n-                    }\n-                });\n-        } else {\n-            cb.connected();\n-        }\n+        ledgerManagerFactory = LedgerManagerFactory.newLedgerManagerFactory(conf, zk);\n+        ledgerManager = ledgerManagerFactory.newLedgerManager();\n     }\n \n     LedgerManager getLedgerManager() {\n@@ -264,9 +246,10 @@ BookieClient getBookieClient() {\n      * authenticate access to a ledger, but also to verify entries in ledgers.\n      *\n      * @param ensSize\n-     *          ensemble size\n-     * @param qSize\n-     *          quorum size\n+     *          number of bookies over which to stripe entries\n+     * @param writeQuorumSize\n+     *          number of bookies each entry will be written to. each of these bookies\n+     *          must acknowledge the entry before the call is completed.\n      * @param digestType\n      *          digest type, either MAC or CRC32\n      * @param passwd\n@@ -276,17 +259,55 @@ BookieClient getBookieClient() {\n      * @param ctx\n      *          optional control object\n      */\n-    public void asyncCreateLedger(final int ensSize, final int qSize, final DigestType digestType,\n+    public void asyncCreateLedger(final int ensSize,\n+                                  final int writeQuorumSize,\n+                                  final DigestType digestType,\n+                                  final byte[] passwd, final CreateCallback cb, final Object ctx)\n+    {\n+        asyncCreateLedger(ensSize, writeQuorumSize, writeQuorumSize, digestType, passwd, cb, ctx);\n+    }\n+\n+    /**\n+     * Creates a new ledger asynchronously. Ledgers created with this call have\n+     * a separate write quorum and ack quorum size. The write quorum must be larger than\n+     * the ack quorum.\n+     *\n+     * Separating the write and the ack quorum allows the BookKeeper client to continue\n+     * writing when a bookie has failed but the failure has not yet been detected. Detecting\n+     * a bookie has failed can take a number of seconds, as configured by the read timeout\n+     * {@link ClientConfiguration#getReadTimeout()}. Once the bookie failure is detected,\n+     * that bookie will be removed from the ensemble.\n+     *\n+     * The other parameters match those of {@link #asyncCreateLedger(int, int, DigestType, byte[],\n+     *                                      AsyncCallback.CreateCallback, Object)}\n+     *\n+     * @param ensSize\n+     *          number of bookies over which to stripe entries\n+     * @param writeQuorumSize\n+     *          number of bookies each entry will be written to\n+     * @param ackQuorumSize\n+     *          number of bookies which must acknowledge an entry before the call is completed\n+     * @param digestType\n+     *          digest type, either MAC or CRC32\n+     * @param passwd\n+     *          password\n+     * @param cb\n+     *          createCallback implementation\n+     * @param ctx\n+     *          optional control object\n+     */\n+\n+    public void asyncCreateLedger(final int ensSize,\n+                                  final int writeQuorumSize,\n+                                  final int ackQuorumSize,\n+                                  final DigestType digestType,\n                                   final byte[] passwd, final CreateCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerCreateOp(BookKeeper.this, ensSize, qSize, digestType, passwd, cb, ctx)\n-                        .initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.createComplete(code, null, ctx);\n-                }\n-            });\n+        if (writeQuorumSize < ackQuorumSize) {\n+            throw new IllegalArgumentException(\"Write quorum must be larger than ack quorum\");\n+        }\n+        new LedgerCreateOp(BookKeeper.this, ensSize, writeQuorumSize,\n+                           ackQuorumSize, digestType, passwd, cb, ctx)\n+            .initiate();\n     }\n \n \n@@ -320,14 +341,34 @@ public LedgerHandle createLedger(DigestType digestType, byte passwd[])\n      * @throws BKException\n      */\n     public LedgerHandle createLedger(int ensSize, int qSize,\n-                                     DigestType digestType, byte passwd[]) \n+                                     DigestType digestType, byte passwd[])\n+            throws InterruptedException, BKException {\n+        return createLedger(ensSize, qSize, qSize, digestType, passwd);\n+    }\n+\n+    /**\n+     * Synchronous call to create ledger. Parameters match those of\n+     * {@link #asyncCreateLedger(int, int, int, DigestType, byte[],\n+     *                           AsyncCallback.CreateCallback, Object)}\n+     *\n+     * @param ensSize\n+     * @param writeQuorumSize\n+     * @param ackQuorumSize\n+     * @param digestType\n+     * @param passwd\n+     * @return a handle to the newly created ledger\n+     * @throws InterruptedException\n+     * @throws BKException\n+     */\n+    public LedgerHandle createLedger(int ensSize, int writeQuorumSize, int ackQuorumSize,\n+                                     DigestType digestType, byte passwd[])\n             throws InterruptedException, BKException {\n         SyncCounter counter = new SyncCounter();\n         counter.inc();\n         /*\n          * Calls asynchronous version\n          */\n-        asyncCreateLedger(ensSize, qSize, digestType, passwd, \n+        asyncCreateLedger(ensSize, writeQuorumSize, ackQuorumSize, digestType, passwd,\n                           new SyncCreateCallback(), counter);\n \n         /*\n@@ -370,14 +411,7 @@ public LedgerHandle createLedger(int ensSize, int qSize,\n      */\n     public void asyncOpenLedger(final long lId, final DigestType digestType, final byte passwd[],\n                                 final OpenCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.openComplete(code, null, ctx);\n-                }\n-            });\n+        new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiate();\n     }\n \n     /**\n@@ -409,14 +443,7 @@ public void connectionFailed(int code) {\n      */\n     public void asyncOpenLedgerNoRecovery(final long lId, final DigestType digestType, final byte passwd[],\n                                           final OpenCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.openComplete(code, null, ctx);\n-                }\n-            });\n+        new LedgerOpenOp(BookKeeper.this, lId, digestType, passwd, cb, ctx).initiateWithoutRecovery();\n     }\n \n \n@@ -502,14 +529,7 @@ public LedgerHandle openLedgerNoRecovery(long lId, DigestType digestType, byte p\n      *            optional control object\n      */\n     public void asyncDeleteLedger(final long lId, final DeleteCallback cb, final Object ctx) {\n-        withZKConnected(new ZKConnectCallback() {\n-                public void connected() {\n-                    new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n-                }\n-                public void connectionFailed(int code) {\n-                    cb.deleteComplete(code, ctx);\n-                }\n-            });\n+        new LedgerDeleteOp(BookKeeper.this, lId, cb, ctx).initiate();\n     }\n \n \n@@ -530,12 +550,9 @@ public void deleteLedger(long lId) throws InterruptedException, BKException {\n         asyncDeleteLedger(lId, new SyncDeleteCallback(), counter);\n         // Wait\n         counter.block(0);\n-        if (counter.getrc() == KeeperException.Code.NONODE.intValue()) {\n-            LOG.warn(\"Ledger node does not exist in ZooKeeper: ledgerId={}\", lId);\n-            throw BKException.create(Code.NoSuchLedgerExistsException);\n-        } else if (counter.getrc() != KeeperException.Code.OK.intValue()) {\n-            LOG.error(\"ZooKeeper error deleting ledger node: \" + counter.getrc());\n-            throw BKException.create(Code.ZKException);\n+        if (counter.getrc() != BKException.Code.OK) {\n+            LOG.error(\"Error deleting ledger \" + lId + \" : \" + counter.getrc());\n+            throw BKException.create(counter.getrc());\n         }\n     }\n \n@@ -544,16 +561,29 @@ public void deleteLedger(long lId) throws InterruptedException, BKException {\n      *\n      */\n     public void close() throws InterruptedException, BKException {\n+        scheduler.shutdown();\n+        if (!scheduler.awaitTermination(10, TimeUnit.SECONDS)) {\n+            LOG.warn(\"The scheduler did not shutdown cleanly\");\n+        }\n+        mainWorkerPool.shutdown();\n+        if (!mainWorkerPool.awaitTermination(10, TimeUnit.SECONDS)) {\n+            LOG.warn(\"The mainWorkerPool did not shutdown cleanly\");\n+        }\n+\n         bookieClient.close();\n-        ledgerManager.close();\n-        bookieWatcher.halt();\n+        try {\n+            ledgerManager.close();\n+            ledgerManagerFactory.uninitialize();\n+        } catch (IOException ie) {\n+            LOG.error(\"Failed to close ledger manager : \", ie);\n+        }\n+\n         if (ownChannelFactory) {\n             channelFactory.releaseExternalResources();\n         }\n         if (ownZKHandle) {\n             zk.close();\n         }\n-        mainWorkerPool.shutdown();\n     }\n \n     private static class SyncCreateCallback implements CreateCallback {\n@@ -575,7 +605,7 @@ public void createComplete(int rc, LedgerHandle lh, Object ctx) {\n         }\n     }\n \n-    private static class SyncOpenCallback implements OpenCallback {\n+    static class SyncOpenCallback implements OpenCallback {\n         /**\n          * Callback method for synchronous open operation\n          *\n@@ -590,7 +620,7 @@ public void openComplete(int rc, LedgerHandle lh, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setLh(lh);\n             \n-            LOG.debug(\"Open complete: \" + rc);\n+            LOG.debug(\"Open complete: {}\", rc);\n             \n             counter.setrc(rc);\n             counter.dec();"},{"sha":"8062ad9e016103d66c608a991fcd014d9dce1557","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":269,"deletions":282,"changes":551,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,6 +1,4 @@\n-package org.apache.bookkeeper.client;\n-\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -20,70 +18,61 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n-import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n import java.util.Random;\n+import java.util.UUID;\n \n-import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n-import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.AsyncCallback.RecoverCallback;\n-import org.apache.bookkeeper.client.BookKeeper.DigestType;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.client.BookKeeper.SyncOpenCallback;\n+import org.apache.bookkeeper.client.LedgerFragmentReplicator.SingleFragmentCallback;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.apache.bookkeeper.proto.BookieProtocol;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.util.IOUtils;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.AsyncCallback;\n+import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.ZKUtil;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.KeeperException.Code;\n-import org.apache.zookeeper.data.Stat;\n-import org.jboss.netty.buffer.ChannelBuffer;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Admin client for BookKeeper clusters\n  */\n public class BookKeeperAdmin {\n     private static Logger LOG = LoggerFactory.getLogger(BookKeeperAdmin.class);\n-\n-    static final String COLON = \":\";\n-\n     // ZK client instance\n     private ZooKeeper zk;\n     // ZK ledgers related String constants\n     private final String bookiesPath;\n \n     // BookKeeper client instance\n     private BookKeeper bkc;\n+    \n+    // LedgerFragmentReplicator instance\n+    private LedgerFragmentReplicator lfr;\n \n     /*\n      * Random number generator used to choose an available bookie server to\n      * replicate data from a dead bookie.\n      */\n     private Random rand = new Random();\n \n-    /*\n-     * For now, assume that all ledgers were created with the same DigestType\n-     * and password. In the future, this admin tool will need to know for each\n-     * ledger, what was the DigestType and password used to create it before it\n-     * can open it. These values will come from System properties, though hard\n-     * coded defaults are defined here.\n-     */\n-    private DigestType DIGEST_TYPE;\n-    private byte[] PASSWD;\n-\n     /**\n      * Constructor that takes in a ZooKeeper servers connect string so we know\n      * how to connect to ZooKeeper to retrieve information about the BookKeeper\n@@ -127,20 +116,27 @@ public BookKeeperAdmin(String zkServers) throws IOException, InterruptedExceptio\n      */\n     public BookKeeperAdmin(ClientConfiguration conf) throws IOException, InterruptedException, KeeperException {\n         // Create the ZooKeeper client instance\n-        zk = new ZooKeeper(conf.getZkServers(), conf.getZkTimeout(), new Watcher() {\n-            @Override\n-            public void process(WatchedEvent event) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Process: \" + event.getType() + \" \" + event.getPath());\n-                }\n-            }\n-        });\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n+        zk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n         // Create the bookie path\n         bookiesPath = conf.getZkAvailableBookiesPath();\n         // Create the BookKeeper client instance\n-        bkc = new BookKeeper(conf);\n-        DIGEST_TYPE = conf.getBookieRecoveryDigestType();\n-        PASSWD = conf.getBookieRecoveryPasswd();\n+        bkc = new BookKeeper(conf, zk);\n+        this.lfr = new LedgerFragmentReplicator(bkc);\n+    }\n+\n+    /**\n+     * Constructor that takes in a BookKeeper instance . This will be useful,\n+     * when users already has bk instance ready.\n+     * \n+     * @param bkc\n+     *            - bookkeeper instance\n+     */\n+    public BookKeeperAdmin(final BookKeeper bkc) {\n+        this.bkc = bkc;\n+        this.zk = bkc.zk;\n+        this.bookiesPath = bkc.getConf().getZkAvailableBookiesPath();\n+        this.lfr = new LedgerFragmentReplicator(bkc);\n     }\n \n     /**\n@@ -156,31 +152,89 @@ public void close() throws InterruptedException, BKException {\n     }\n \n     /**\n-     * Method to get the input ledger's digest type. For now, this is just a\n-     * placeholder function since there is no way we can get this information\n-     * easily. In the future, BookKeeper should store this ledger metadata\n-     * somewhere such that an admin tool can access it.\n+     * Open a ledger as an administrator. This means that no digest password\n+     * checks are done. Otherwise, the call is identical to BookKeeper#asyncOpenLedger\n      *\n-     * @param ledgerId\n-     *            LedgerId we are retrieving the digestType for.\n-     * @return DigestType for the input ledger\n+     * @param lId\n+     *          ledger identifier\n+     * @param cb\n+     *          Callback which will receive a LedgerHandle object\n+     * @param ctx\n+     *          optional context object, to be passwd to the callback (can be null)\n+     *\n+     * @see BookKeeper#asyncOpenLedger\n      */\n-    private DigestType getLedgerDigestType(long ledgerId) {\n-        return DIGEST_TYPE;\n+    public void asyncOpenLedger(final long lId, final OpenCallback cb, final Object ctx) {\n+        new LedgerOpenOp(bkc, lId, cb, ctx).initiate();\n+    }\n+    \n+    /**\n+     * Open a ledger as an administrator. This means that no digest password\n+     * checks are done. Otherwise, the call is identical to\n+     * BookKeeper#openLedger\n+     * \n+     * @param lId\n+     *            - ledger identifier\n+     * @see BookKeeper#openLedger\n+     */\n+    public LedgerHandle openLedger(final long lId) throws InterruptedException,\n+            BKException {\n+        SyncCounter counter = new SyncCounter();\n+        counter.inc();\n+        new LedgerOpenOp(bkc, lId, new SyncOpenCallback(), counter).initiate();\n+        /*\n+         * Wait\n+         */\n+        counter.block(0);\n+        if (counter.getrc() != BKException.Code.OK) {\n+            throw BKException.create(counter.getrc());\n+        }\n+\n+        return counter.getLh();\n     }\n \n     /**\n-     * Method to get the input ledger's password. For now, this is just a\n-     * placeholder function since there is no way we can get this information\n-     * easily. In the future, BookKeeper should store this ledger metadata\n-     * somewhere such that an admin tool can access it.\n+     * Open a ledger as an administrator without recovering the ledger. This means\n+     * that no digest password  checks are done. Otherwise, the call is identical\n+     * to BookKeeper#asyncOpenLedgerNoRecovery\n+     *\n+     * @param lId\n+     *          ledger identifier\n+     * @param cb\n+     *          Callback which will receive a LedgerHandle object\n+     * @param ctx\n+     *          optional context object, to be passwd to the callback (can be null)\n      *\n-     * @param ledgerId\n-     *            LedgerId we are retrieving the password for.\n-     * @return Password for the input ledger\n+     * @see BookKeeper#asyncOpenLedgerNoRecovery\n      */\n-    private byte[] getLedgerPasswd(long ledgerId) {\n-        return PASSWD;\n+    public void asyncOpenLedgerNoRecovery(final long lId, final OpenCallback cb, final Object ctx) {\n+        new LedgerOpenOp(bkc, lId, cb, ctx).initiateWithoutRecovery();\n+    }\n+    \n+    /**\n+     * Open a ledger as an administrator without recovering the ledger. This\n+     * means that no digest password checks are done. Otherwise, the call is\n+     * identical to BookKeeper#openLedgerNoRecovery\n+     * \n+     * @param lId\n+     *            ledger identifier\n+     * @see BookKeeper#openLedgerNoRecovery\n+     */\n+    public LedgerHandle openLedgerNoRecovery(final long lId)\n+            throws InterruptedException, BKException {\n+        SyncCounter counter = new SyncCounter();\n+        counter.inc();\n+        new LedgerOpenOp(bkc, lId, new SyncOpenCallback(), counter)\n+                .initiateWithoutRecovery();\n+        /*\n+         * Wait\n+         */\n+        counter.block(0);\n+        if (counter.getrc() != BKException.Code.OK) {\n+            throw BKException.create(counter.getrc());\n+        }\n+\n+        return counter.getLh();\n     }\n \n     // Object used for calling async methods and waiting for them to complete.\n@@ -316,7 +370,12 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n                         return;\n                     }\n                     for (String bookieNode : children) {\n-                        String parts[] = bookieNode.split(COLON);\n+                        if (BookKeeperConstants.READONLY\n+                                        .equals(bookieNode)) {\n+                            // exclude the readonly node from available bookies.\n+                            continue;\n+                        }\n+                        String parts[] = bookieNode.split(BookKeeperConstants.COLON);\n                         if (parts.length < 2) {\n                             LOG.error(\"Bookie Node retrieved from ZK has invalid name format: \" + bookieNode);\n                             cb.recoverComplete(BKException.Code.ZKException, context);\n@@ -418,18 +477,9 @@ private InetSocketAddress getNewBookie(final List<InetSocketAddress> bookiesAlre\n      */\n     private void recoverLedger(final InetSocketAddress bookieSrc, final long lId,\n                                final AsyncCallback.VoidCallback ledgerIterCb, final List<InetSocketAddress> availableBookies) {\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Recovering ledger : \" + lId);\n-        }\n-        /*\n-         * For the current ledger, open it to retrieve the LedgerHandle. This\n-         * will contain the LedgerMetadata indicating which bookie servers the\n-         * ledger fragments are stored on. Check if any of the ledger fragments\n-         * for the current ledger are stored on the input dead bookie.\n-         */\n-        final DigestType digestType = getLedgerDigestType(lId);\n-        final byte[] passwd = getLedgerPasswd(lId);\n-        bkc.asyncOpenLedgerNoRecovery(lId, digestType, passwd, new OpenCallback() {\n+        LOG.debug(\"Recovering ledger : {}\", lId);\n+\n+        asyncOpenLedgerNoRecovery(lId, new OpenCallback() {\n             @Override\n             public void openComplete(int rc, final LedgerHandle lh, Object ctx) {\n                 if (rc != Code.OK.intValue()) {\n@@ -454,7 +504,7 @@ public void openComplete(int rc, final LedgerHandle lh, Object ctx) {\n                         } catch (Exception ie) {\n                             LOG.warn(\"Error closing non recovery ledger handle for ledger \" + lId, ie);\n                         }\n-                        bkc.asyncOpenLedger(lId, digestType, passwd, new OpenCallback() {\n+                        asyncOpenLedger(lId, new OpenCallback() {\n                             @Override\n                             public void openComplete(int newrc, final LedgerHandle newlh, Object newctx) {\n                                 if (newrc != Code.OK.intValue()) {\n@@ -544,9 +594,21 @@ public void openComplete(int newrc, final LedgerHandle newlh, Object newctx) {\n                                   + \" to \" + newBookie);\n                     }\n                     try {\n-                        SingleFragmentCallback cb = new SingleFragmentCallback(\n+                        LedgerFragmentReplicator.SingleFragmentCallback cb = new LedgerFragmentReplicator.SingleFragmentCallback(\n                                                                                ledgerFragmentsMcb, lh, startEntryId, bookieSrc, newBookie);\n-                        recoverLedgerFragment(bookieSrc, lh, startEntryId, endEntryId, cb, newBookie);\n+                        ArrayList<InetSocketAddress> currentEnsemble =  lh.getLedgerMetadata().getEnsemble(startEntryId);\n+                        int bookieIndex = -1;\n+                        if (null != currentEnsemble) {\n+                            for (int i = 0; i < currentEnsemble.size(); i++) {\n+                                if (currentEnsemble.get(i).equals(bookieSrc)) {\n+                                    bookieIndex = i;\n+                                    break;\n+                                }\n+                            }\n+                        }\n+                        LedgerFragment ledgerFragment = new LedgerFragment(lh,\n+                                startEntryId, endEntryId, bookieIndex);\n+                        asyncRecoverLedgerFragment(lh, ledgerFragment, cb, newBookie);\n                     } catch(InterruptedException e) {\n                         Thread.currentThread().interrupt();\n                         return;\n@@ -560,232 +622,157 @@ public void openComplete(int newrc, final LedgerHandle newlh, Object newctx) {\n      * This method asynchronously recovers a ledger fragment which is a\n      * contiguous portion of a ledger that was stored in an ensemble that\n      * included the failed bookie.\n-     *\n-     * @param bookieSrc\n-     *            Source bookie that had a failure. We want to replicate the\n-     *            ledger fragments that were stored there.\n+     * \n      * @param lh\n-     *            LedgerHandle for the ledger\n-     * @param startEntryId\n-     *            Start entry Id for the ledger fragment\n-     * @param endEntryId\n-     *            End entry Id for the ledger fragment\n+     *            - LedgerHandle for the ledger\n+     * @param lf\n+     *            - LedgerFragment to replicate\n      * @param ledgerFragmentMcb\n-     *            MultiCallback to invoke once we've recovered the current\n+     *            - MultiCallback to invoke once we've recovered the current\n      *            ledger fragment.\n      * @param newBookie\n-     *            New bookie we want to use to recover and replicate the ledger\n-     *            entries that were stored on the failed bookie.\n+     *            - New bookie we want to use to recover and replicate the\n+     *            ledger entries that were stored on the failed bookie.\n      */\n-    private void recoverLedgerFragment(final InetSocketAddress bookieSrc, final LedgerHandle lh,\n-                                       final Long startEntryId, final Long endEntryId, final SingleFragmentCallback cb,\n-                                       final InetSocketAddress newBookie) throws InterruptedException {\n-        if (endEntryId == null) {\n-            /*\n-             * Ideally this should never happen if bookie failure is taken care\n-             * of properly. Nothing we can do though in this case.\n-             */\n-            LOG.warn(\"Dead bookie (\" + bookieSrc + \") is still part of the current active ensemble for ledgerId: \"\n-                     + lh.getId());\n-            cb.processResult(BKException.Code.OK, null, null);\n-            return;\n-        }\n-        if (startEntryId > endEntryId) {\n-            // for open ledger which there is no entry, the start entry id is 0, the end entry id is -1.\n-            // we can return immediately to trigger forward read\n-            cb.processResult(BKException.Code.OK, null, null);\n-            return;\n-        }\n-\n-        ArrayList<InetSocketAddress> curEnsemble = lh.getLedgerMetadata().getEnsembles().get(startEntryId);\n-        int bookieIndex = 0;\n-        for (int i = 0; i < curEnsemble.size(); i++) {\n-            if (curEnsemble.get(i).equals(bookieSrc)) {\n-                bookieIndex = i;\n-                break;\n-            }\n-        }\n-        /*\n-         * Loop through all entries in the current ledger fragment range and\n-         * find the ones that were stored on the dead bookie.\n-         */\n-        List<Long> entriesToReplicate = new LinkedList<Long>();\n-        for (long i = startEntryId; i <= endEntryId; i++) {\n-            if (lh.getDistributionSchedule().getReplicaIndex(i, bookieIndex) >= 0) {\n-                /*\n-                 * Current entry is stored on the dead bookie so we'll need to\n-                 * read it and replicate it to a new bookie.\n-                 */\n-                entriesToReplicate.add(i);\n-            }\n-        }\n-        /*\n-         * Now asynchronously replicate all of the entries for the ledger\n-         * fragment that were on the dead bookie.\n-         */\n-        MultiCallback ledgerFragmentEntryMcb =\n-            new MultiCallback(entriesToReplicate.size(), cb, null,\n-                              BKException.Code.OK, BKException.Code.LedgerRecoveryException);\n-        for (final Long entryId : entriesToReplicate) {\n-            recoverLedgerFragmentEntry(entryId, lh, ledgerFragmentEntryMcb, newBookie);\n-        }\n+    private void asyncRecoverLedgerFragment(final LedgerHandle lh,\n+            final LedgerFragment ledgerFragment,\n+            final AsyncCallback.VoidCallback ledgerFragmentMcb,\n+            final InetSocketAddress newBookie) throws InterruptedException {\n+        lfr.replicate(lh, ledgerFragment, ledgerFragmentMcb, newBookie);\n     }\n \n     /**\n-     * This method asynchronously recovers a specific ledger entry by reading\n-     * the values via the BookKeeper Client (which would read it from the other\n-     * replicas) and then writing it to the chosen new bookie.\n-     *\n-     * @param entryId\n-     *            Ledger Entry ID to recover.\n+     * Replicate the Ledger fragment to target Bookie passed.\n+     * \n      * @param lh\n-     *            LedgerHandle for the ledger\n-     * @param ledgerFragmentEntryMcb\n-     *            MultiCallback to invoke once we've recovered the current\n-     *            ledger entry.\n-     * @param newBookie\n-     *            New bookie we want to use to recover and replicate the ledger\n-     *            entries that were stored on the failed bookie.\n+     *            - ledgerHandle\n+     * @param ledgerFragment\n+     *            - LedgerFragment to replicate\n+     * @param targetBookieAddress\n+     *            - target Bookie, to where entries should be replicated.\n      */\n-    private void recoverLedgerFragmentEntry(final Long entryId, final LedgerHandle lh,\n-                                            final AsyncCallback.VoidCallback ledgerFragmentEntryMcb,\n-                                            final InetSocketAddress newBookie) throws InterruptedException {\n-        /*\n-         * Read the ledger entry using the LedgerHandle. This will allow us to\n-         * read the entry from one of the other replicated bookies other than\n-         * the dead one.\n-         */\n-        lh.asyncReadEntries(entryId, entryId, new ReadCallback() {\n-            @Override\n-            public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n-                if (rc != Code.OK.intValue()) {\n-                    LOG.error(\"BK error reading ledger entry: \" + entryId, BKException.create(rc));\n-                    ledgerFragmentEntryMcb.processResult(rc, null, null);\n-                    return;\n-                }\n-                /*\n-                 * Now that we've read the ledger entry, write it to the new\n-                 * bookie we've selected.\n-                 */\n-                LedgerEntry entry = seq.nextElement();\n-                byte[] data = entry.getEntry();\n-                ChannelBuffer toSend = lh.getDigestManager().computeDigestAndPackageForSending(entryId,\n-                                       lh.getLastAddConfirmed(), entry.getLength(), data, 0, data.length);\n-                bkc.getBookieClient().addEntry(newBookie, lh.getId(), lh.getLedgerKey(), entryId, toSend,\n-                new WriteCallback() {\n-                    @Override\n-                    public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr,\n-                    Object ctx) {\n-                        if (rc != Code.OK.intValue()) {\n-                            LOG.error(\"BK error writing entry for ledgerId: \" + ledgerId + \", entryId: \"\n-                                      + entryId + \", bookie: \" + addr, BKException.create(rc));\n-                        } else {\n-                            if (LOG.isDebugEnabled()) {\n-                                LOG.debug(\"Success writing ledger id \" +ledgerId + \", entry id \"\n-                                          + entryId + \" to a new bookie \" + addr + \"!\");\n-                            }\n-                        }\n-                        /*\n-                         * Pass the return code result up the chain with\n-                         * the parent callback.\n-                         */\n-                        ledgerFragmentEntryMcb.processResult(rc, null, null);\n-                    }\n-                }, null, BookieProtocol.FLAG_RECOVERY_ADD);\n-            }\n-        }, null);\n+    public void replicateLedgerFragment(LedgerHandle lh,\n+            final LedgerFragment ledgerFragment,\n+            final InetSocketAddress targetBookieAddress)\n+            throws InterruptedException, BKException {\n+        SyncCounter syncCounter = new SyncCounter();\n+        ResultCallBack resultCallBack = new ResultCallBack(syncCounter);\n+        SingleFragmentCallback cb = new SingleFragmentCallback(resultCallBack,\n+                lh, ledgerFragment.getFirstEntryId(), ledgerFragment\n+                        .getAddress(), targetBookieAddress);\n+        syncCounter.inc();\n+        asyncRecoverLedgerFragment(lh, ledgerFragment, cb, targetBookieAddress);\n+        syncCounter.block(0);\n+        if (syncCounter.getrc() != BKException.Code.OK) {\n+            throw BKException.create(syncCounter.getrc());\n+        }\n     }\n \n-    /*\n-     * Callback for recovery of a single ledger fragment.\n-     * Once the fragment has had all entries replicated, update the ensemble \n-     * in zookeeper.\n-     * Once finished propogate callback up to ledgerFragmentsMcb which should\n-     * be a multicallback responsible for all fragments in a single ledger\n-     */\n-    static class SingleFragmentCallback implements AsyncCallback.VoidCallback {\n-        final AsyncCallback.VoidCallback ledgerFragmentsMcb;\n-        final LedgerHandle lh;\n-        final long fragmentStartId;\n-        final InetSocketAddress oldBookie;\n-        final InetSocketAddress newBookie;\n-\n-        SingleFragmentCallback(AsyncCallback.VoidCallback ledgerFragmentsMcb,\n-                               LedgerHandle lh,\n-                               long fragmentStartId,\n-                               InetSocketAddress oldBookie,\n-                               InetSocketAddress newBookie) {\n-            this.ledgerFragmentsMcb = ledgerFragmentsMcb;\n-            this.lh = lh;\n-            this.fragmentStartId = fragmentStartId;\n-            this.newBookie = newBookie;\n-            this.oldBookie = oldBookie;\n+    /** This is the class for getting the replication result */\n+    static class ResultCallBack implements AsyncCallback.VoidCallback {\n+        private SyncCounter sync;\n+\n+        public ResultCallBack(SyncCounter sync) {\n+            this.sync = sync;\n         }\n-        \n+\n         @Override\n-        public void processResult(int rc, String path, Object ctx) {\n-            if (rc != Code.OK.intValue()) {\n-                LOG.error(\"BK error replicating ledger fragments for ledger: \" + lh.getId(), \n-                          BKException.create(rc));\n-                ledgerFragmentsMcb.processResult(rc, null, null);\n-                return;\n-            }\n-            writeLedgerConfig();\n+        public void processResult(int rc, String s, Object obj) {\n+            sync.setrc(rc);\n+            sync.dec();\n         }\n+    }\n \n-        protected void writeLedgerConfig() {\n-            /*\n-             * Update the ledger metadata's ensemble info to point\n-             * to the new bookie.\n-             */\n-            ArrayList<InetSocketAddress> ensemble = lh.getLedgerMetadata().getEnsembles().get(\n-                    fragmentStartId);\n-            int deadBookieIndex = ensemble.indexOf(oldBookie);\n-            ensemble.remove(deadBookieIndex);\n-            ensemble.add(deadBookieIndex, newBookie);\n-\n-            lh.writeLedgerConfig(new WriteCb(), null);\n-        }\n-        \n-        private class WriteCb implements AsyncCallback.StatCallback {\n-            @Override\n-            public void processResult(int rc, final String path, Object ctx, Stat stat) {\n-                if (rc == Code.BADVERSION.intValue()) {\n-                    LOG.warn(\"Two fragments attempted update at once; ledger id: \" + lh.getId() \n-                             + \" startid: \" + fragmentStartId);\n-                    // try again, the previous success (with which this has conflicted)\n-                    // will have updated the stat\n-                    // other operations such as (addEnsemble) would update it too.\n-                    lh.rereadMetadata(new GenericCallback<LedgerMetadata>() {\n-                        @Override\n-                        public void operationComplete(int rc, LedgerMetadata newMeta) {\n-                            if (rc != BKException.Code.OK) {\n-                                LOG.error(\"Error reading updated ledger metadata for ledger \" + lh.getId(),\n-                                          KeeperException.create(KeeperException.Code.get(rc), path));\n-                                ledgerFragmentsMcb.processResult(rc, null, null);\n-                            } else {\n-                                lh.metadata = newMeta;\n-                                writeLedgerConfig();\n-                            }\n-                        }\n-                    });\n-                    return;\n-                } else if (rc != Code.OK.intValue()) {\n-                    LOG.error(\"ZK error updating ledger config metadata for ledgerId: \" + lh.getId(),\n-                              KeeperException.create(KeeperException.Code.get(rc), path));\n+    /**\n+     * Format the BookKeeper metadata in zookeeper\n+     * \n+     * @param isInteractive\n+     *            Whether format should ask prompt for confirmation if old data\n+     *            exists or not.\n+     * @param force\n+     *            If non interactive and force is true, then old data will be\n+     *            removed without prompt.\n+     * @return Returns true if format succeeds else false.\n+     */\n+    public static boolean format(ClientConfiguration conf,\n+            boolean isInteractive, boolean force) throws Exception {\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n+        ZooKeeper zkc = ZkUtils.createConnectedZookeeperClient(\n+                conf.getZkServers(), w);\n+        BookKeeper bkc = null;\n+        try {\n+            boolean ledgerRootExists = null != zkc.exists(\n+                    conf.getZkLedgersRootPath(), false);\n+            boolean availableNodeExists = null != zkc.exists(\n+                    conf.getZkAvailableBookiesPath(), false);\n+\n+            // Create ledgers root node if not exists\n+            if (!ledgerRootExists) {\n+                zkc.create(conf.getZkLedgersRootPath(), \"\".getBytes(),\n+                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            }\n+            // create available bookies node if not exists\n+            if (!availableNodeExists) {\n+                zkc.create(conf.getZkAvailableBookiesPath(), \"\".getBytes(),\n+                        Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            }\n+\n+            // If old data was there then confirm with admin.\n+            if (ledgerRootExists) {\n+                boolean confirm = false;\n+                if (!isInteractive) {\n+                    // If non interactive and force is set, then delete old\n+                    // data.\n+                    if (force) {\n+                        confirm = true;\n+                    } else {\n+                        confirm = false;\n+                    }\n                 } else {\n-                    lh.getLedgerMetadata().updateZnodeStatus(stat);\n-                    LOG.info(\"Updated ZK for ledgerId: (\" + lh.getId() + \" : \" + fragmentStartId \n-                             + \") to point ledger fragments from old dead bookie: (\" + oldBookie\n-                             + \") to new bookie: (\" + newBookie + \")\");\n+                    // Confirm with the admin.\n+                    confirm = IOUtils\n+                            .confirmPrompt(\"Are you sure to format bookkeeper metadata ?\");\n+                }\n+                if (!confirm) {\n+                    LOG.error(\"BookKeeper metadata Format aborted!!\");\n+                    return false;\n                 }\n-                /*\n-                 * Pass the return code result up the chain with\n-                 * the parent callback.\n-                 */\n-                ledgerFragmentsMcb.processResult(rc, null, null);\n             }\n-        };\n-    }\n+            bkc = new BookKeeper(conf, zkc);\n+            // Format all ledger metadata layout\n+            bkc.ledgerManagerFactory.format(conf, zkc);\n+\n+            // Clear the cookies\n+            try {\n+                ZKUtil.deleteRecursive(zkc, conf.getZkLedgersRootPath()\n+                        + \"/cookies\");\n+            } catch (KeeperException.NoNodeException e) {\n+                LOG.debug(\"cookies node not exists in zookeeper to delete\");\n+            }\n \n+            // Clear the INSTANCEID\n+            try {\n+                zkc.delete(conf.getZkLedgersRootPath() + \"/\"\n+                        + BookKeeperConstants.INSTANCEID, -1);\n+            } catch (KeeperException.NoNodeException e) {\n+                LOG.debug(\"INSTANCEID not exists in zookeeper to delete\");\n+            }\n+\n+            // create INSTANCEID\n+            String instanceId = UUID.randomUUID().toString();\n+            zkc.create(conf.getZkLedgersRootPath() + \"/\"\n+                    + BookKeeperConstants.INSTANCEID, instanceId.getBytes(),\n+                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+\n+            LOG.info(\"Successfully formatted BookKeeper metadata\");\n+        } finally {\n+            if (null != bkc) {\n+                bkc.close();\n+            }\n+            if (null != zkc) {\n+                zkc.close();\n+            }\n+        }\n+        return true;\n+    }\n }"},{"sha":"3ac082cde504554fe1fd77e1a4eebab54308c073","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":118,"deletions":20,"changes":138,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -25,21 +25,26 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.concurrent.Executors;\n+\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n+\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.bookkeeper.util.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.AsyncCallback.ChildrenCallback;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.KeeperException.NodeExistsException;\n+import org.apache.zookeeper.ZooDefs.Ids;\n \n /**\n  * This class is responsible for maintaining a consistent view of what bookies\n@@ -56,27 +61,27 @@\n     static final Set<InetSocketAddress> EMPTY_SET = new HashSet<InetSocketAddress>();\n     public static int ZK_CONNECT_BACKOFF_SEC = 1;\n \n-    BookKeeper bk;\n-    ScheduledExecutorService scheduler;\n+    final BookKeeper bk;\n \n     HashSet<InetSocketAddress> knownBookies = new HashSet<InetSocketAddress>();\n+    final ScheduledExecutorService scheduler;\n \n     SafeRunnable reReadTask = new SafeRunnable() {\n         @Override\n         public void safeRun() {\n             readBookies();\n         }\n     };\n+    private ReadOnlyBookieWatcher readOnlyBookieWatcher;\n \n-    public BookieWatcher(ClientConfiguration conf, BookKeeper bk) {\n+    public BookieWatcher(ClientConfiguration conf,\n+                         ScheduledExecutorService scheduler,\n+                         BookKeeper bk) throws KeeperException, InterruptedException  {\n         this.bk = bk;\n         // ZK bookie registration path\n         this.bookieRegistrationPath = conf.getZkAvailableBookiesPath();\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n-    }\n-\n-    public void halt() {\n-        scheduler.shutdown();\n+        this.scheduler = scheduler;\n+        readOnlyBookieWatcher = new ReadOnlyBookieWatcher(conf, bk);\n     }\n \n     public void readBookies() {\n@@ -102,6 +107,27 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n             return;\n         }\n \n+        // Just exclude the 'readonly' znode to exclude r-o bookies from\n+        // available nodes list.\n+        children.remove(BookKeeperConstants.READONLY);\n+\n+        HashSet<InetSocketAddress> newBookieAddrs = convertToBookieAddresses(children);\n+\n+        final HashSet<InetSocketAddress> deadBookies;\n+        synchronized (this) {\n+            deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n+            deadBookies.removeAll(newBookieAddrs);\n+            // No need to close readonly bookie clients.\n+            deadBookies.removeAll(readOnlyBookieWatcher.getReadOnlyBookies());\n+            knownBookies = newBookieAddrs;\n+        }\n+\n+        if (bk.getBookieClient() != null) {\n+            bk.getBookieClient().closeClients(deadBookies);\n+        }\n+    }\n+\n+    private static HashSet<InetSocketAddress> convertToBookieAddresses(List<String> children) {\n         // Read the bookie addresses into a set for efficient lookup\n         HashSet<InetSocketAddress> newBookieAddrs = new HashSet<InetSocketAddress>();\n         for (String bookieAddrString : children) {\n@@ -114,17 +140,7 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n             }\n             newBookieAddrs.add(bookieAddr);\n         }\n-\n-        HashSet<InetSocketAddress> deadBookies = (HashSet<InetSocketAddress>)knownBookies.clone();\n-        deadBookies.removeAll(newBookieAddrs);\n-\n-        synchronized (this) {\n-            knownBookies = newBookieAddrs;\n-        }\n-\n-        if (bk.getBookieClient() != null) {\n-            bk.getBookieClient().closeClients(deadBookies);\n-        }\n+        return newBookieAddrs;\n     }\n \n     /**\n@@ -133,6 +149,9 @@ public void processResult(int rc, String path, Object ctx, List<String> children\n      * @throws KeeperException\n      */\n     public void readBookiesBlocking() throws InterruptedException, KeeperException {\n+        // Read readonly bookies first\n+        readOnlyBookieWatcher.readROBookiesBlocking();\n+\n         final LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();\n         readBookies(new ChildrenCallback() {\n             public void processResult(int rc, String path, Object ctx, List<String> children) {\n@@ -213,4 +232,83 @@ public InetSocketAddress getAdditionalBookie(List<InetSocketAddress> existingBoo\n         throw new BKNotEnoughBookiesException();\n     }\n \n+    /**\n+     * Watcher implementation to watch the readonly bookies under\n+     * &lt;available&gt;/readonly\n+     */\n+    private static class ReadOnlyBookieWatcher implements Watcher, ChildrenCallback {\n+\n+        private final static Logger LOG = LoggerFactory.getLogger(ReadOnlyBookieWatcher.class);\n+        private HashSet<InetSocketAddress> readOnlyBookies = new HashSet<InetSocketAddress>();\n+        private BookKeeper bk;\n+        private String readOnlyBookieRegPath;\n+\n+        public ReadOnlyBookieWatcher(ClientConfiguration conf, BookKeeper bk) throws KeeperException,\n+                InterruptedException {\n+            this.bk = bk;\n+            readOnlyBookieRegPath = conf.getZkAvailableBookiesPath() + \"/\"\n+                    + BookKeeperConstants.READONLY;\n+            if (null == bk.getZkHandle().exists(readOnlyBookieRegPath, false)) {\n+                try {\n+                    bk.getZkHandle().create(readOnlyBookieRegPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                            CreateMode.PERSISTENT);\n+                } catch (NodeExistsException e) {\n+                    // this node is just now created by someone.\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void process(WatchedEvent event) {\n+            readROBookies();\n+        }\n+\n+        // read the readonly bookies in blocking fashion. Used only for first\n+        // time.\n+        void readROBookiesBlocking() throws InterruptedException, KeeperException {\n+\n+            final LinkedBlockingQueue<Integer> queue = new LinkedBlockingQueue<Integer>();\n+            readROBookies(new ChildrenCallback() {\n+                public void processResult(int rc, String path, Object ctx, List<String> children) {\n+                    try {\n+                        ReadOnlyBookieWatcher.this.processResult(rc, path, ctx, children);\n+                        queue.put(rc);\n+                    } catch (InterruptedException e) {\n+                        logger.error(\"Interruped when trying to read readonly bookies in a blocking fashion\");\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            });\n+            int rc = queue.take();\n+\n+            if (rc != KeeperException.Code.OK.intValue()) {\n+                throw KeeperException.create(Code.get(rc));\n+            }\n+        }\n+\n+        // Read children and register watcher for readonly bookies path\n+        void readROBookies(ChildrenCallback callback) {\n+            bk.getZkHandle().getChildren(this.readOnlyBookieRegPath, this, callback, null);\n+        }\n+\n+        void readROBookies() {\n+            readROBookies(this);\n+        }\n+\n+        @Override\n+        public void processResult(int rc, String path, Object ctx, List<String> children) {\n+            if (rc != Code.OK.intValue()) {\n+                LOG.error(\"Not able to read readonly bookies : \", KeeperException.create(Code.get(rc)));\n+                return;\n+            }\n+\n+            HashSet<InetSocketAddress> newReadOnlyBookies = convertToBookieAddresses(children);\n+            readOnlyBookies = newReadOnlyBookies;\n+        }\n+\n+        // returns the readonly bookies\n+        public HashSet<InetSocketAddress> getReadOnlyBookies() {\n+            return readOnlyBookies;\n+        }\n+    }\n }"},{"sha":"2753680f23a556109fdec840f9fa01b7e599873c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DigestManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -116,6 +116,13 @@ private void verifyDigest(long entryId, ChannelBuffer dataReceived, boolean skip\n         ByteBuffer dataReceivedBuffer = dataReceived.toByteBuffer();\n         byte[] digest;\n \n+        if ((METADATA_LENGTH + macCodeLength) > dataReceived.readableBytes()) {\n+            logger.error(\"Data received is smaller than the minimum for this digest type. \"\n+                    + \" Either the packet it corrupt, or the wrong digest is configured. \"\n+                    + \" Digest type: {}, Packet Length: {}\",\n+                    this.getClass().getName(), dataReceived.readableBytes());\n+            throw new BKDigestMatchException();\n+        }\n         update(dataReceivedBuffer.array(), dataReceivedBuffer.position(), METADATA_LENGTH);\n \n         int offset = METADATA_LENGTH + macCodeLength;"},{"sha":"6dba0ccc6b9adfc7aae9b022ed4684476eb206d2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java","status":"modified","additions":38,"deletions":13,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/DistributionSchedule.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,7 +15,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n \n+import java.util.List;\n /**\n  * This interface determins how entries are distributed among bookies.\n  *\n@@ -31,21 +31,34 @@\n interface DistributionSchedule {\n \n     /**\n-     *\n-     * @param entryId\n-     * @param replicaIndex\n-     * @return index of bookie that should get this replica\n+     * return the set of bookie indices to send the message to\n      */\n-    public int getBookieIndex(long entryId, int replicaIndex);\n+    public List<Integer> getWriteSet(long entryId);\n \n     /**\n-     *\n-     * @param entryId\n-     * @param bookieIndex\n-     * @return -1 if the given bookie index is not a replica for the given\n-     *         entryId\n+     * An ack set represents the set of bookies from which\n+     * a response must be received so that an entry can be\n+     * considered to be replicated on a quorum.\n+     */\n+    public interface AckSet {\n+        /**\n+         * Add a bookie response and check if quorum has been met\n+         * @return true if quorum has been met, false otherwise\n+         */\n+        public boolean addBookieAndCheck(int bookieIndexHeardFrom);\n+\n+        /**\n+         * Invalidate a previous bookie response.\n+         * Used for reissuing write requests.\n+         */\n+        public void removeBookie(int bookie);\n+    }\n+\n+    /**\n+     * Returns an ackset object, responses should be checked against this\n      */\n-    public int getReplicaIndex(long entryId, int bookieIndex);\n+    public AckSet getAckSet();\n+\n \n     /**\n      * Interface to keep track of which bookies in an ensemble, an action\n@@ -62,4 +75,16 @@\n     }\n \n     public QuorumCoverageSet getCoverageSet();\n+    \n+    /**\n+     * Whether entry presents on given bookie index\n+     * \n+     * @param entryId\n+     *            - entryId to check the presence on given bookie index\n+     * @param bookieIndex\n+     *            - bookie index on which it need to check the possible presence\n+     *            of the entry\n+     * @return true if it has entry otherwise false.\n+     */\n+    public boolean hasEntry(long entryId, int bookieIndex);\n }"},{"sha":"f2d863cf0dc3bcb5bd5243bc2d2842c39bc383ba","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","status":"added","additions":273,"deletions":0,"changes":273,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,273 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.Map;\n+\n+import org.apache.bookkeeper.proto.BookieClient;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n+\n+import org.jboss.netty.buffer.ChannelBuffer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ *Checks the complete ledger and finds the UnderReplicated fragments if any\n+ */\n+public class LedgerChecker {\n+    private static Logger LOG = LoggerFactory.getLogger(LedgerChecker.class);\n+\n+    public final BookieClient bookieClient;\n+\n+    static class InvalidFragmentException extends Exception {\n+        private static final long serialVersionUID = 1467201276417062353L;\n+    }\n+\n+    /**\n+     * This will collect all the entry read call backs and finally it will give\n+     * call back to previous call back API which is waiting for it once it meets\n+     * the expected call backs from down\n+     */\n+    private static class ReadManyEntriesCallback implements ReadEntryCallback {\n+        AtomicBoolean completed = new AtomicBoolean(false);\n+        final AtomicLong numEntries;\n+        final LedgerFragment fragment;\n+        final GenericCallback<LedgerFragment> cb;\n+\n+        ReadManyEntriesCallback(long numEntries, LedgerFragment fragment,\n+                GenericCallback<LedgerFragment> cb) {\n+            this.numEntries = new AtomicLong(numEntries);\n+            this.fragment = fragment;\n+            this.cb = cb;\n+        }\n+\n+        public void readEntryComplete(int rc, long ledgerId, long entryId,\n+                ChannelBuffer buffer, Object ctx) {\n+            if (rc == BKException.Code.OK) {\n+                if (numEntries.decrementAndGet() == 0\n+                        && !completed.getAndSet(true)) {\n+                    cb.operationComplete(rc, fragment);\n+                }\n+            } else if (!completed.getAndSet(true)) {\n+                cb.operationComplete(rc, fragment);\n+            }\n+        }\n+    }\n+\n+    public LedgerChecker(BookKeeper bkc) {\n+        bookieClient = bkc.getBookieClient();\n+    }\n+\n+    private void verifyLedgerFragment(LedgerFragment fragment,\n+            GenericCallback<LedgerFragment> cb) throws InvalidFragmentException {\n+        long firstStored = fragment.getFirstStoredEntryId();\n+        long lastStored = fragment.getLastStoredEntryId();\n+\n+        if (firstStored == LedgerHandle.INVALID_ENTRY_ID) {\n+            if (lastStored != LedgerHandle.INVALID_ENTRY_ID) {\n+                throw new InvalidFragmentException();\n+            }\n+            cb.operationComplete(BKException.Code.OK, fragment);\n+            return;\n+        }\n+        if (firstStored == lastStored) {\n+            ReadManyEntriesCallback manycb = new ReadManyEntriesCallback(1,\n+                    fragment, cb);\n+            bookieClient.readEntry(fragment.getAddress(), fragment\n+                    .getLedgerId(), firstStored, manycb, null);\n+        } else {\n+            ReadManyEntriesCallback manycb = new ReadManyEntriesCallback(2,\n+                    fragment, cb);\n+            bookieClient.readEntry(fragment.getAddress(), fragment\n+                    .getLedgerId(), firstStored, manycb, null);\n+            bookieClient.readEntry(fragment.getAddress(), fragment\n+                    .getLedgerId(), lastStored, manycb, null);\n+        }\n+    }\n+\n+    /**\n+     * Callback for checking whether an entry exists or not.\n+     * It is used to differentiate the cases where it has been written\n+     * but now cannot be read, and where it never has been written.\n+     */\n+    private static class EntryExistsCallback implements ReadEntryCallback {\n+        AtomicBoolean entryMayExist = new AtomicBoolean(false);\n+        final AtomicInteger numReads;\n+        final GenericCallback<Boolean> cb;\n+\n+        EntryExistsCallback(int numReads,\n+                            GenericCallback<Boolean> cb) {\n+            this.numReads = new AtomicInteger(numReads);\n+            this.cb = cb;\n+        }\n+\n+        public void readEntryComplete(int rc, long ledgerId, long entryId,\n+                                      ChannelBuffer buffer, Object ctx) {\n+            if (rc != BKException.Code.NoSuchEntryException) {\n+                entryMayExist.set(true);\n+            }\n+\n+            if (numReads.decrementAndGet() == 0) {\n+                cb.operationComplete(rc, entryMayExist.get());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This will collect all the fragment read call backs and finally it will\n+     * give call back to above call back API which is waiting for it once it\n+     * meets the expected call backs from down\n+     */\n+    private static class FullLedgerCallback implements\n+            GenericCallback<LedgerFragment> {\n+        final Set<LedgerFragment> badFragments;\n+        final AtomicLong numFragments;\n+        final GenericCallback<Set<LedgerFragment>> cb;\n+\n+        FullLedgerCallback(long numFragments,\n+                GenericCallback<Set<LedgerFragment>> cb) {\n+            badFragments = new HashSet<LedgerFragment>();\n+            this.numFragments = new AtomicLong(numFragments);\n+            this.cb = cb;\n+        }\n+\n+        public void operationComplete(int rc, LedgerFragment result) {\n+            if (rc != BKException.Code.OK) {\n+                badFragments.add(result);\n+            }\n+            if (numFragments.decrementAndGet() == 0) {\n+                cb.operationComplete(BKException.Code.OK, badFragments);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Check that all the fragments in the passed in ledger, and report those\n+     * which are missing.\n+     */\n+    public void checkLedger(LedgerHandle lh,\n+                            final GenericCallback<Set<LedgerFragment>> cb) {\n+        // build a set of all fragment replicas\n+        final Set<LedgerFragment> fragments = new HashSet<LedgerFragment>();\n+\n+        Long curEntryId = null;\n+        ArrayList<InetSocketAddress> curEnsemble = null;\n+        for (Map.Entry<Long, ArrayList<InetSocketAddress>> e : lh\n+                .getLedgerMetadata().getEnsembles().entrySet()) {\n+            if (curEntryId != null) {\n+                for (int i = 0; i < curEnsemble.size(); i++) {\n+                    fragments.add(new LedgerFragment(lh, curEntryId,\n+                            e.getKey() - 1, i));\n+                }\n+            }\n+            curEntryId = e.getKey();\n+            curEnsemble = e.getValue();\n+        }\n+\n+        /* Checking the last segment of the ledger can be complicated in some cases.\n+         * In the case that the ledger is closed, we can just check the fragments of\n+         * the segment as normal, except in the case that no entry was ever written,\n+         * to the ledger, in which case we check no fragments.\n+         * In the case that the ledger is open, but enough entries have been written,\n+         * for lastAddConfirmed to be set above the start entry of the segment, we\n+         * can also check as normal.\n+         * However, if lastAddConfirmed cannot be trusted, such as when it's lower than\n+         * the first entry id, or not set at all, we cannot be sure if there has been\n+         * data written to the segment. For this reason, we have to send a read request\n+         * to the bookies which should have the first entry. If they respond with\n+         * NoSuchEntry we can assume it was never written. If they respond with anything\n+         * else, we must assume the entry has been written, so we run the check.\n+         */\n+        if (curEntryId != null\n+            && !(lh.getLastAddConfirmed() == LedgerHandle.INVALID_ENTRY_ID\n+                 && lh.getLedgerMetadata().isClosed())) {\n+            long lastEntry = lh.getLastAddConfirmed();\n+\n+            if (lastEntry < curEntryId) {\n+                lastEntry = curEntryId;\n+            }\n+\n+            final Set<LedgerFragment> finalSegmentFragments = new HashSet<LedgerFragment>();\n+            for (int i = 0; i < curEnsemble.size(); i++) {\n+                finalSegmentFragments.add(new LedgerFragment(lh, curEntryId,\n+                        lastEntry, i));\n+            }\n+\n+            // Check for the case that no last confirmed entry has\n+            // been set.\n+            if (curEntryId == lastEntry) {\n+                final long entryToRead = curEntryId;\n+\n+                EntryExistsCallback eecb\n+                    = new EntryExistsCallback(lh.getLedgerMetadata().getWriteQuorumSize(),\n+                                              new GenericCallback<Boolean>() {\n+                                                  public void operationComplete(int rc, Boolean result) {\n+                                                      if (result) {\n+                                                          fragments.addAll(finalSegmentFragments);\n+                                                      }\n+                                                      checkFragments(fragments, cb);\n+                                                  }\n+                                              });\n+\n+                for (int bi : lh.getDistributionSchedule().getWriteSet(entryToRead)) {\n+                    InetSocketAddress addr = curEnsemble.get(bi);\n+                    bookieClient.readEntry(addr, lh.getId(),\n+                                           entryToRead, eecb, null);\n+                }\n+                return;\n+            } else {\n+                fragments.addAll(finalSegmentFragments);\n+            }\n+        }\n+\n+        checkFragments(fragments, cb);\n+    }\n+\n+    private void checkFragments(Set<LedgerFragment> fragments,\n+                                GenericCallback<Set<LedgerFragment>> cb) {\n+        if (fragments.size() == 0) { // no fragments to verify\n+            cb.operationComplete(BKException.Code.OK, fragments);\n+            return;\n+        }\n+\n+        // verify all the collected fragment replicas\n+        FullLedgerCallback allFragmentsCb = new FullLedgerCallback(fragments\n+                .size(), cb);\n+        for (LedgerFragment r : fragments) {\n+            LOG.debug(\"Checking fragment {}\", r);\n+            try {\n+                verifyLedgerFragment(r, allFragmentsCb);\n+            } catch (InvalidFragmentException ife) {\n+                LOG.error(\"Invalid fragment found : {}\", r);\n+                allFragmentsCb.operationComplete(\n+                        BKException.Code.IncorrectParameterException, r);\n+            }\n+        }\n+    }\n+}"},{"sha":"9d288c8da2b43b386cb73f17f2cf7c96c43b843b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","status":"modified","additions":15,"deletions":28,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerCreateOp.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -21,24 +21,23 @@\n \n package org.apache.bookkeeper.client;\n \n-import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n import java.util.ArrayList;\n+\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.BKException.BKNotEnoughBookiesException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.data.Stat;\n \n /**\n  * Encapsulates asynchronous ledger create operation\n  *\n  */\n-class LedgerCreateOp implements GenericCallback<String> {\n+class LedgerCreateOp implements GenericCallback<Long> {\n \n     static final Logger LOG = LoggerFactory.getLogger(LedgerCreateOp.class);\n \n@@ -69,9 +68,12 @@\n      *       optional control object\n      */\n \n-    LedgerCreateOp(BookKeeper bk, int ensembleSize, int quorumSize, DigestType digestType, byte[] passwd, CreateCallback cb, Object ctx) {\n+    LedgerCreateOp(BookKeeper bk, int ensembleSize,\n+                   int writeQuorumSize, int ackQuorumSize,\n+                   DigestType digestType,\n+                   byte[] passwd, CreateCallback cb, Object ctx) {\n         this.bk = bk;\n-        this.metadata = new LedgerMetadata(ensembleSize, quorumSize);\n+        this.metadata = new LedgerMetadata(ensembleSize, writeQuorumSize, ackQuorumSize, digestType, passwd);\n         this.digestType = digestType;\n         this.passwd = passwd;\n         this.cb = cb;\n@@ -90,7 +92,7 @@ public void initiate() {\n \n         ArrayList<InetSocketAddress> ensemble;\n         try {\n-            ensemble = bk.bookieWatcher.getNewBookies(metadata.ensembleSize);\n+            ensemble = bk.bookieWatcher.getNewBookies(metadata.getEnsembleSize());\n         } catch (BKNotEnoughBookiesException e) {\n             LOG.error(\"Not enough bookies to create ledger\");\n             cb.createComplete(e.getCode(), null, this.ctx);\n@@ -102,32 +104,17 @@ public void initiate() {\n          */\n         metadata.addEnsemble(0L, ensemble);\n \n-        // create a ledger path with metadata\n-        bk.getLedgerManager().newLedgerPath(this, metadata);\n+        // create a ledger with metadata\n+        bk.getLedgerManager().createLedger(metadata, this);\n     }\n \n     /**\n-     * Callback when created ledger path.\n+     * Callback when created ledger.\n      */\n     @Override\n-    public void operationComplete(int rc, String ledgerPath) {\n-\n-        if (rc != KeeperException.Code.OK.intValue()) {\n-            LOG.error(\"Could not create node for ledger\",\n-                      KeeperException.create(KeeperException.Code.get(rc), ledgerPath));\n-            cb.createComplete(BKException.Code.ZKException, null, this.ctx);\n-            return;\n-        }\n-\n-        /*\n-         * Extract ledger id.\n-         */\n-        long ledgerId;\n-        try {\n-            ledgerId = bk.getLedgerManager().getLedgerId(ledgerPath);\n-        } catch (IOException e) {\n-            LOG.error(\"Could not extract ledger-id from path:\" + ledgerPath, e);\n-            cb.createComplete(BKException.Code.ZKException, null, this.ctx);\n+    public void operationComplete(int rc, Long ledgerId) {\n+        if (BKException.Code.OK != rc) {\n+            cb.createComplete(rc, null, this.ctx);\n             return;\n         }\n "},{"sha":"05bb1abdf5bdb97d5762124a7ff72d8c5793a918","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerDeleteOp.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -22,15 +22,16 @@\n package org.apache.bookkeeper.client;\n \n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n+import org.apache.bookkeeper.versioning.Version;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.zookeeper.AsyncCallback.VoidCallback;\n \n /**\n  * Encapsulates asynchronous ledger delete operation\n  *\n  */\n-class LedgerDeleteOp implements VoidCallback {\n+class LedgerDeleteOp extends OrderedSafeGenericCallback<Void> {\n \n     static final Logger LOG = LoggerFactory.getLogger(LedgerDeleteOp.class);\n \n@@ -52,6 +53,7 @@\n      *            optional control object\n      */\n     LedgerDeleteOp(BookKeeper bk, long ledgerId, DeleteCallback cb, Object ctx) {\n+        super(bk.mainWorkerPool, ledgerId);\n         this.bk = bk;\n         this.ledgerId = ledgerId;\n         this.cb = cb;\n@@ -62,20 +64,16 @@\n      * Initiates the operation\n      */\n     public void initiate() {\n-        // Asynchronously delete the ledger node in ZK.\n+        // Asynchronously delete the ledger from meta manager\n         // When this completes, it will invoke the callback method below.\n-\n-        bk.getZkHandle().delete(bk.getLedgerManager().getLedgerPath(ledgerId), -1, this, null);\n+        bk.getLedgerManager().removeLedgerMetadata(ledgerId, Version.ANY, this);\n     }\n \n     /**\n-     * Implements ZooKeeper Void Callback.\n-     *\n-     * @see org.apache.zookeeper.AsyncCallback.VoidCallback#processResult(int,\n-     *      java.lang.String, java.lang.Object)\n+     * Implements Delete Callback.\n      */\n-    public void processResult(int rc, String path, Object ctx) {\n+    @Override\n+    public void safeOperationComplete(int rc, Void result) {\n         cb.deleteComplete(rc, this.ctx);\n     }\n-\n }"},{"sha":"283045a9871fc79f24e653cc2b07e33ef8976d34","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerEntry.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -42,8 +42,6 @@\n     long length;\n     ChannelBufferInputStream entryDataStream;\n \n-    int nextReplicaIndexToReadFrom = 0;\n-\n     LedgerEntry(long lId, long eId) {\n         this.ledgerId = lId;\n         this.entryId = eId;"},{"sha":"e6bd37cb4cec6dbd35ab32b0b801165fb12bf954","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragment.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,147 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.SortedMap;\n+\n+/**\n+ * Represents the entries of a segment of a ledger which are stored on a single\n+ * bookie in the segments bookie ensemble.\n+ * \n+ * Used for checking and recovery\n+ */\n+public class LedgerFragment {\n+    private final int bookieIndex;\n+    private final List<InetSocketAddress> ensemble;\n+    private final long firstEntryId;\n+    private final long lastKnownEntryId;\n+    private final long ledgerId;\n+    private final DistributionSchedule schedule;\n+    private final boolean isLedgerClosed;\n+\n+    LedgerFragment(LedgerHandle lh, long firstEntryId,\n+            long lastKnownEntryId, int bookieIndex) {\n+        this.ledgerId = lh.getId();\n+        this.firstEntryId = firstEntryId;\n+        this.lastKnownEntryId = lastKnownEntryId;\n+        this.bookieIndex = bookieIndex;\n+        this.ensemble = lh.getLedgerMetadata().getEnsemble(firstEntryId);\n+        this.schedule = lh.getDistributionSchedule();\n+        SortedMap<Long, ArrayList<InetSocketAddress>> ensembles = lh\n+                .getLedgerMetadata().getEnsembles();\n+        this.isLedgerClosed = lh.getLedgerMetadata().isClosed()\n+                || !ensemble.equals(ensembles.get(ensembles.lastKey()));\n+    }\n+\n+    /**\n+     * Returns true, if and only if the ledger fragment will never be modified\n+     * by any of the clients in future, otherwise false. i.e,\n+     * <ol>\n+     * <li>If ledger is in closed state, then no other clients can modify this\n+     * fragment.</li>\n+     * <li>If ledger is not in closed state and the current fragment is not a\n+     * last fragment, then no one will modify this fragment.</li>\n+     * </ol>\n+     */\n+    public boolean isClosed() {\n+        return isLedgerClosed;\n+    }\n+\n+    long getLedgerId() {\n+        return ledgerId;\n+    }\n+\n+    long getFirstEntryId() {\n+        return firstEntryId;\n+    }\n+\n+    long getLastKnownEntryId() {\n+        return lastKnownEntryId;\n+    }\n+\n+    /**\n+     * Gets the failedBookie address\n+     */\n+    public InetSocketAddress getAddress() {\n+        return ensemble.get(bookieIndex);\n+    }\n+    \n+    /**\n+     * Gets the failedBookie index\n+     */\n+    public int getBookiesIndex() {\n+        return bookieIndex;\n+    }\n+\n+    /**\n+     * Gets the first stored entry id of the fragment in failed bookie.\n+     * \n+     * @return entryId\n+     */\n+    public long getFirstStoredEntryId() {\n+        long firstEntry = firstEntryId;\n+\n+        for (int i = 0; i < ensemble.size() && firstEntry <= lastKnownEntryId; i++) {\n+            if (schedule.hasEntry(firstEntry, bookieIndex)) {\n+                return firstEntry;\n+            } else {\n+                firstEntry++;\n+            }\n+        }\n+        return LedgerHandle.INVALID_ENTRY_ID;\n+    }\n+\n+    /**\n+     * Gets the last stored entry id of the fragment in failed bookie.\n+     * \n+     * @return entryId\n+     */\n+    public long getLastStoredEntryId() {\n+        long lastEntry = lastKnownEntryId;\n+        for (int i = 0; i < ensemble.size() && lastEntry >= firstEntryId; i++) {\n+            if (schedule.hasEntry(lastEntry, bookieIndex)) {\n+                return lastEntry;\n+            } else {\n+                lastEntry--;\n+            }\n+        }\n+        return LedgerHandle.INVALID_ENTRY_ID;\n+    }\n+\n+    /**\n+     * Gets the ensemble of fragment\n+     * \n+     * @return the ensemble for the segment which this fragment is a part of\n+     */\n+    public List<InetSocketAddress> getEnsemble() {\n+        return this.ensemble;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"Fragment(LedgerID: %d, FirstEntryID: %d[%d], \"\n+                + \"LastKnownEntryID: %d[%d], Host: %s, Closed: %s)\", ledgerId, firstEntryId,\n+                getFirstStoredEntryId(), lastKnownEntryId, getLastStoredEntryId(),\n+                getAddress(), isLedgerClosed);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"0a4f045fc9e6dcab434c26456abdf2f1dc392251","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","status":"added","additions":422,"deletions":0,"changes":422,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerFragmentReplicator.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,422 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.net.InetSocketAddress;\n+import java.util.ArrayList;\n+import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n+import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n+\n+import org.apache.zookeeper.AsyncCallback;\n+import org.apache.zookeeper.KeeperException.Code;\n+import org.jboss.netty.buffer.ChannelBuffer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is the helper class for replicating the fragments from one bookie to\n+ * another\n+ */\n+public class LedgerFragmentReplicator {\n+\n+    // BookKeeper instance\n+    private BookKeeper bkc;\n+\n+    public LedgerFragmentReplicator(BookKeeper bkc) {\n+        this.bkc = bkc;\n+    }\n+\n+    private static Logger LOG = LoggerFactory\n+            .getLogger(LedgerFragmentReplicator.class);\n+\n+    private void replicateFragmentInternal(final LedgerHandle lh,\n+            final LedgerFragment lf,\n+            final AsyncCallback.VoidCallback ledgerFragmentMcb,\n+            final InetSocketAddress newBookie) throws InterruptedException {\n+        if (!lf.isClosed()) {\n+            LOG.error(\"Trying to replicate an unclosed fragment;\"\n+                      + \" This is not safe {}\", lf);\n+            ledgerFragmentMcb.processResult(BKException.Code.UnclosedFragmentException,\n+                                            null, null);\n+            return;\n+        }\n+        Long startEntryId = lf.getFirstStoredEntryId();\n+        Long endEntryId = lf.getLastStoredEntryId();\n+        if (endEntryId == null) {\n+            /*\n+             * Ideally this should never happen if bookie failure is taken care\n+             * of properly. Nothing we can do though in this case.\n+             */\n+            LOG.warn(\"Dead bookie (\" + lf.getAddress()\n+                    + \") is still part of the current\"\n+                    + \" active ensemble for ledgerId: \" + lh.getId());\n+            ledgerFragmentMcb.processResult(BKException.Code.OK, null, null);\n+            return;\n+        }\n+        if (startEntryId > endEntryId) {\n+            // for open ledger which there is no entry, the start entry id is 0,\n+            // the end entry id is -1.\n+            // we can return immediately to trigger forward read\n+            ledgerFragmentMcb.processResult(BKException.Code.OK, null, null);\n+            return;\n+        }\n+\n+        /*\n+         * Add all the entries to entriesToReplicate list from\n+         * firstStoredEntryId to lastStoredEntryID.\n+         */\n+        List<Long> entriesToReplicate = new LinkedList<Long>();\n+        long lastStoredEntryId = lf.getLastStoredEntryId();\n+        for (long i = lf.getFirstStoredEntryId(); i <= lastStoredEntryId; i++) {\n+            entriesToReplicate.add(i);\n+        }\n+        /*\n+         * Now asynchronously replicate all of the entries for the ledger\n+         * fragment that were on the dead bookie.\n+         */\n+        MultiCallback ledgerFragmentEntryMcb = new MultiCallback(\n+                entriesToReplicate.size(), ledgerFragmentMcb, null, BKException.Code.OK,\n+                BKException.Code.LedgerRecoveryException);\n+        for (final Long entryId : entriesToReplicate) {\n+            recoverLedgerFragmentEntry(entryId, lh, ledgerFragmentEntryMcb,\n+                    newBookie);\n+        }\n+    }\n+\n+    /**\n+     * This method replicate a ledger fragment which is a contiguous portion of\n+     * a ledger that was stored in an ensemble that included the failed bookie.\n+     * It will Splits the fragment into multiple sub fragments by keeping the\n+     * max entries up to the configured value of rereplicationEntryBatchSize and\n+     * then it re-replicates that batched entry fragments one by one. After\n+     * re-replication of all batched entry fragments, it will update the\n+     * ensemble info with new Bookie once\n+     * \n+     * @param lh\n+     *            LedgerHandle for the ledger\n+     * @param lf\n+     *            LedgerFragment to replicate\n+     * @param ledgerFragmentMcb\n+     *            MultiCallback to invoke once we've recovered the current\n+     *            ledger fragment.\n+     * @param targetBookieAddress\n+     *            New bookie we want to use to recover and replicate the ledger\n+     *            entries that were stored on the failed bookie.\n+     */\n+    void replicate(final LedgerHandle lh, final LedgerFragment lf,\n+            final AsyncCallback.VoidCallback ledgerFragmentMcb,\n+            final InetSocketAddress targetBookieAddress)\n+            throws InterruptedException {\n+        Set<LedgerFragment> partionedFragments = splitIntoSubFragments(lh, lf,\n+                bkc.getConf().getRereplicationEntryBatchSize());\n+        LOG.info(\"Fragment :\" + lf + \" is split into sub fragments :\"\n+                + partionedFragments);\n+        replicateNextBatch(lh, partionedFragments.iterator(),\n+                ledgerFragmentMcb, targetBookieAddress);\n+    }\n+\n+    /** Replicate the batched entry fragments one after other */\n+    private void replicateNextBatch(final LedgerHandle lh,\n+            final Iterator<LedgerFragment> fragments,\n+            final AsyncCallback.VoidCallback ledgerFragmentMcb,\n+            final InetSocketAddress targetBookieAddress) {\n+        if (fragments.hasNext()) {\n+            try {\n+                replicateFragmentInternal(lh, fragments.next(),\n+                        new AsyncCallback.VoidCallback() {\n+                            @Override\n+                            public void processResult(int rc, String v, Object ctx) {\n+                                if (rc != BKException.Code.OK) {\n+                                    ledgerFragmentMcb.processResult(rc, null,\n+                                            null);\n+                                } else {\n+                                    replicateNextBatch(lh, fragments,\n+                                            ledgerFragmentMcb,\n+                                            targetBookieAddress);\n+                                }\n+                            }\n+\n+                        }, targetBookieAddress);\n+            } catch (InterruptedException e) {\n+                ledgerFragmentMcb.processResult(\n+                        BKException.Code.InterruptedException, null, null);\n+                Thread.currentThread().interrupt();\n+            }\n+        } else {\n+            ledgerFragmentMcb.processResult(BKException.Code.OK, null, null);\n+        }\n+    }\n+\n+    /**\n+     * Split the full fragment into batched entry fragments by keeping\n+     * rereplicationEntryBatchSize of entries in each one and can treat them as\n+     * sub fragments\n+     */\n+    static Set<LedgerFragment> splitIntoSubFragments(LedgerHandle lh,\n+            LedgerFragment ledgerFragment, long rereplicationEntryBatchSize) {\n+        Set<LedgerFragment> fragments = new HashSet<LedgerFragment>();\n+        if (rereplicationEntryBatchSize <= 0) {\n+            // rereplicationEntryBatchSize can not be 0 or less than 0,\n+            // returning with the current fragment\n+            fragments.add(ledgerFragment);\n+            return fragments;\n+        }\n+\n+        long firstEntryId = ledgerFragment.getFirstStoredEntryId();\n+        long lastEntryId = ledgerFragment.getLastStoredEntryId();\n+        long numberOfEntriesToReplicate = (lastEntryId - firstEntryId) + 1;\n+        long splitsWithFullEntries = numberOfEntriesToReplicate\n+                / rereplicationEntryBatchSize;\n+\n+        if (splitsWithFullEntries == 0) {// only one fragment\n+            fragments.add(ledgerFragment);\n+            return fragments;\n+        }\n+\n+        long fragmentSplitLastEntry = 0;\n+        for (int i = 0; i < splitsWithFullEntries; i++) {\n+            fragmentSplitLastEntry = (firstEntryId + rereplicationEntryBatchSize) - 1;\n+            fragments.add(new LedgerFragment(lh, firstEntryId,\n+                    fragmentSplitLastEntry, ledgerFragment.getBookiesIndex()));\n+            firstEntryId = fragmentSplitLastEntry + 1;\n+        }\n+\n+        long lastSplitWithPartialEntries = numberOfEntriesToReplicate\n+                % rereplicationEntryBatchSize;\n+        if (lastSplitWithPartialEntries > 0) {\n+            fragments.add(new LedgerFragment(lh, firstEntryId, firstEntryId\n+                    + lastSplitWithPartialEntries - 1, ledgerFragment\n+                    .getBookiesIndex()));\n+        }\n+        return fragments;\n+    }\n+\n+    /**\n+     * This method asynchronously recovers a specific ledger entry by reading\n+     * the values via the BookKeeper Client (which would read it from the other\n+     * replicas) and then writing it to the chosen new bookie.\n+     * \n+     * @param entryId\n+     *            Ledger Entry ID to recover.\n+     * @param lh\n+     *            LedgerHandle for the ledger\n+     * @param ledgerFragmentEntryMcb\n+     *            MultiCallback to invoke once we've recovered the current\n+     *            ledger entry.\n+     * @param newBookie\n+     *            New bookie we want to use to recover and replicate the ledger\n+     *            entries that were stored on the failed bookie.\n+     */\n+    private void recoverLedgerFragmentEntry(final Long entryId,\n+            final LedgerHandle lh,\n+            final AsyncCallback.VoidCallback ledgerFragmentEntryMcb,\n+            final InetSocketAddress newBookie) throws InterruptedException {\n+        /*\n+         * Read the ledger entry using the LedgerHandle. This will allow us to\n+         * read the entry from one of the other replicated bookies other than\n+         * the dead one.\n+         */\n+        lh.asyncReadEntries(entryId, entryId, new ReadCallback() {\n+            @Override\n+            public void readComplete(int rc, LedgerHandle lh,\n+                    Enumeration<LedgerEntry> seq, Object ctx) {\n+                if (rc != Code.OK.intValue()) {\n+                    LOG.error(\"BK error reading ledger entry: \" + entryId,\n+                            BKException.create(rc));\n+                    ledgerFragmentEntryMcb.processResult(rc, null, null);\n+                    return;\n+                }\n+                /*\n+                 * Now that we've read the ledger entry, write it to the new\n+                 * bookie we've selected.\n+                 */\n+                LedgerEntry entry = seq.nextElement();\n+                byte[] data = entry.getEntry();\n+                ChannelBuffer toSend = lh.getDigestManager()\n+                        .computeDigestAndPackageForSending(entryId,\n+                                lh.getLastAddConfirmed(), entry.getLength(),\n+                                data, 0, data.length);\n+                bkc.getBookieClient().addEntry(newBookie, lh.getId(),\n+                        lh.getLedgerKey(), entryId, toSend,\n+                        new WriteCallback() {\n+                            @Override\n+                            public void writeComplete(int rc, long ledgerId,\n+                                    long entryId, InetSocketAddress addr,\n+                                    Object ctx) {\n+                                if (rc != Code.OK.intValue()) {\n+                                    LOG.error(\n+                                            \"BK error writing entry for ledgerId: \"\n+                                                    + ledgerId + \", entryId: \"\n+                                                    + entryId + \", bookie: \"\n+                                                    + addr, BKException\n+                                                    .create(rc));\n+                                } else {\n+                                    if (LOG.isDebugEnabled()) {\n+                                        LOG.debug(\"Success writing ledger id \"\n+                                                + ledgerId + \", entry id \"\n+                                                + entryId + \" to a new bookie \"\n+                                                + addr + \"!\");\n+                                    }\n+                                }\n+                                /*\n+                                 * Pass the return code result up the chain with\n+                                 * the parent callback.\n+                                 */\n+                                ledgerFragmentEntryMcb.processResult(rc, null,\n+                                        null);\n+                            }\n+                        }, null, BookieProtocol.FLAG_RECOVERY_ADD);\n+            }\n+        }, null);\n+    }\n+    \n+    /**\n+     * Callback for recovery of a single ledger fragment. Once the fragment has\n+     * had all entries replicated, update the ensemble in zookeeper. Once\n+     * finished propogate callback up to ledgerFragmentsMcb which should be a\n+     * multicallback responsible for all fragments in a single ledger\n+     */\n+    static class SingleFragmentCallback implements AsyncCallback.VoidCallback {\n+        final AsyncCallback.VoidCallback ledgerFragmentsMcb;\n+        final LedgerHandle lh;\n+        final long fragmentStartId;\n+        final InetSocketAddress oldBookie;\n+        final InetSocketAddress newBookie;\n+\n+        SingleFragmentCallback(AsyncCallback.VoidCallback ledgerFragmentsMcb,\n+                LedgerHandle lh, long fragmentStartId,\n+                InetSocketAddress oldBookie, InetSocketAddress newBookie) {\n+            this.ledgerFragmentsMcb = ledgerFragmentsMcb;\n+            this.lh = lh;\n+            this.fragmentStartId = fragmentStartId;\n+            this.newBookie = newBookie;\n+            this.oldBookie = oldBookie;\n+        }\n+\n+        @Override\n+        public void processResult(int rc, String path, Object ctx) {\n+            if (rc != Code.OK.intValue()) {\n+                LOG.error(\"BK error replicating ledger fragments for ledger: \"\n+                        + lh.getId(), BKException.create(rc));\n+                ledgerFragmentsMcb.processResult(rc, null, null);\n+                return;\n+            }\n+            updateEnsembleInfo(ledgerFragmentsMcb, fragmentStartId, lh,\n+                                        oldBookie, newBookie);\n+        }\n+    }\n+\n+    /** Updates the ensemble with newBookie and notify the ensembleUpdatedCb */\n+    private static void updateEnsembleInfo(\n+            AsyncCallback.VoidCallback ensembleUpdatedCb, long fragmentStartId,\n+            LedgerHandle lh, InetSocketAddress oldBookie,\n+            InetSocketAddress newBookie) {\n+        /*\n+         * Update the ledger metadata's ensemble info to point to the new\n+         * bookie.\n+         */\n+        ArrayList<InetSocketAddress> ensemble = lh.getLedgerMetadata()\n+                .getEnsembles().get(fragmentStartId);\n+        int deadBookieIndex = ensemble.indexOf(oldBookie);\n+        ensemble.remove(deadBookieIndex);\n+        ensemble.add(deadBookieIndex, newBookie);\n+        lh.writeLedgerConfig(new UpdateEnsembleCb(ensembleUpdatedCb,\n+                fragmentStartId, lh, oldBookie, newBookie));\n+    }\n+\n+    /**\n+     * Update the ensemble data with newBookie. re-reads the metadata on\n+     * MetadataVersionException and update ensemble again. On successfull\n+     * updation, it will also notify to super call back\n+     */\n+    private static class UpdateEnsembleCb implements GenericCallback<Void> {\n+        final AsyncCallback.VoidCallback ensembleUpdatedCb;\n+        final LedgerHandle lh;\n+        final long fragmentStartId;\n+        final InetSocketAddress oldBookie;\n+        final InetSocketAddress newBookie;\n+\n+        public UpdateEnsembleCb(AsyncCallback.VoidCallback ledgerFragmentsMcb,\n+                long fragmentStartId, LedgerHandle lh,\n+                InetSocketAddress oldBookie, InetSocketAddress newBookie) {\n+            this.ensembleUpdatedCb = ledgerFragmentsMcb;\n+            this.lh = lh;\n+            this.fragmentStartId = fragmentStartId;\n+            this.newBookie = newBookie;\n+            this.oldBookie = oldBookie;\n+        }\n+\n+        @Override\n+        public void operationComplete(int rc, Void result) {\n+            if (rc == BKException.Code.MetadataVersionException) {\n+                LOG.warn(\"Two fragments attempted update at once; ledger id: \"\n+                        + lh.getId() + \" startid: \" + fragmentStartId);\n+                // try again, the previous success (with which this has\n+                // conflicted) will have updated the stat other operations\n+                // such as (addEnsemble) would update it too.\n+                lh\n+                        .rereadMetadata(new OrderedSafeGenericCallback<LedgerMetadata>(\n+                                lh.bk.mainWorkerPool, lh.getId()) {\n+                            @Override\n+                            public void safeOperationComplete(int rc,\n+                                    LedgerMetadata newMeta) {\n+                                if (rc != BKException.Code.OK) {\n+                                    LOG\n+                                            .error(\"Error reading updated ledger metadata for ledger \"\n+                                                    + lh.getId());\n+                                    ensembleUpdatedCb.processResult(rc, null,\n+                                            null);\n+                                } else {\n+                                    lh.metadata = newMeta;\n+                                    updateEnsembleInfo(ensembleUpdatedCb,\n+                                            fragmentStartId, lh, oldBookie,\n+                                            newBookie);\n+                                }\n+                            }\n+                        });\n+                return;\n+            } else if (rc != BKException.Code.OK) {\n+                LOG.error(\"Error updating ledger config metadata for ledgerId \"\n+                        + lh.getId() + \" : \" + BKException.getMessage(rc));\n+            } else {\n+                LOG.info(\"Updated ZK for ledgerId: (\" + lh.getId() + \" : \"\n+                        + fragmentStartId\n+                        + \") to point ledger fragments from old dead bookie: (\"\n+                        + oldBookie + \") to new bookie: (\" + newBookie + \")\");\n+            }\n+            /*\n+             * Pass the return code result up the chain with the parent\n+             * callback.\n+             */\n+            ensembleUpdatedCb.processResult(rc, null, null);\n+        }\n+    }\n+}"},{"sha":"033cb8aa08b7c5c88f8e5bbf2d38b07432577488","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":259,"deletions":186,"changes":445,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -21,15 +21,14 @@\n  *\n  */\n \n-import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n import java.util.concurrent.ConcurrentLinkedQueue;\n import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.Queue;\n-import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BKException;\n@@ -40,16 +39,17 @@\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n+\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat.State;\n import org.apache.bookkeeper.util.SafeRunnable;\n \n+import com.google.common.util.concurrent.RateLimiter;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.AsyncCallback.StatCallback;\n-import org.apache.zookeeper.AsyncCallback.DataCallback;\n-import org.apache.zookeeper.data.Stat;\n import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n@@ -69,15 +69,15 @@\n     final DigestManager macManager;\n     final DistributionSchedule distributionSchedule;\n \n-    final Semaphore opCounterSem;\n-    private final Integer throttling;\n+    final RateLimiter throttler;\n \n     /**\n      * Invalid entry id. This value is returned from methods which\n      * should return an entry id but there is no valid entry available.\n      */\n     final static public long INVALID_ENTRY_ID = BookieProtocol.INVALID_ENTRY_ID;\n \n+    final AtomicInteger blockAddCompletions = new AtomicInteger(0);\n     final Queue<PendingAddOp> pendingAddOps = new ConcurrentLinkedQueue<PendingAddOp>();\n \n     LedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n@@ -87,22 +87,21 @@\n         this.metadata = metadata;\n \n         if (metadata.isClosed()) {\n-            lastAddConfirmed = lastAddPushed = metadata.close;\n-            length = metadata.length;\n+            lastAddConfirmed = lastAddPushed = metadata.getLastEntryId();\n+            length = metadata.getLength();\n         } else {\n             lastAddConfirmed = lastAddPushed = INVALID_ENTRY_ID;\n             length = 0;\n         }\n \n         this.ledgerId = ledgerId;\n \n-        this.throttling = bk.getConf().getThrottleValue();\n-        this.opCounterSem = new Semaphore(throttling);\n+        this.throttler = RateLimiter.create(bk.getConf().getThrottleValue());\n \n         macManager = DigestManager.instantiate(ledgerId, password, digestType);\n         this.ledgerKey = MacDigestManager.genDigest(\"ledger\", password);\n         distributionSchedule = new RoundRobinDistributionSchedule(\n-            metadata.quorumSize, metadata.ensembleSize);\n+                metadata.getWriteQuorumSize(), metadata.getAckQuorumSize(), metadata.getEnsembleSize());\n     }\n \n     /**\n@@ -167,15 +166,6 @@ DigestManager getDigestManager() {\n         return macManager;\n     }\n \n-    /**\n-     * Return total number of available slots.\n-     *\n-     * @return int    available slots\n-     */\n-    Semaphore getAvailablePermits() {\n-        return this.opCounterSem;\n-    }\n-\n     /**\n      *  Add to the length of the ledger in bytes.\n      *\n@@ -205,14 +195,10 @@ DistributionSchedule getDistributionSchedule() {\n         return distributionSchedule;\n     }\n \n-    void writeLedgerConfig(StatCallback callback, Object ctx) {\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Writing metadata to ZooKeeper: \" + this.ledgerId + \", \" + metadata.getZnodeVersion());\n-        }\n+    void writeLedgerConfig(GenericCallback<Void> writeCb) {\n+        LOG.debug(\"Writing metadata to ledger manager: {}, {}\", this.ledgerId, metadata.getVersion());\n \n-        bk.getZkHandle().setData(bk.getLedgerManager().getLedgerPath(ledgerId),\n-                                 metadata.serialize(), metadata.getZnodeVersion(),\n-                                 callback, ctx);\n+        bk.getLedgerManager().writeLedgerMetadata(ledgerId, metadata, writeCb);\n     }\n \n     /**\n@@ -262,17 +248,19 @@ void asyncCloseInternal(final CloseCallback cb, final Object ctx, final int rc)\n         bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {\n             @Override\n             public void safeRun() {\n-                final long prevClose;\n+                final long prevLastEntryId;\n                 final long prevLength;\n+                final State prevState;\n \n                 synchronized(LedgerHandle.this) {\n-                    prevClose = metadata.close;\n-                    prevLength = metadata.length;\n+                    prevState = metadata.getState();\n+                    prevLastEntryId = metadata.getLastEntryId();\n+                    prevLength = metadata.getLength();\n \n                     // synchronized on LedgerHandle.this to ensure that \n                     // lastAddPushed can not be updated after the metadata \n                     // is closed. \n-                    metadata.length = length;\n+                    metadata.setLength(length);\n \n                     // Close operation is idempotent, so no need to check if we are\n                     // already closed\n@@ -283,51 +271,56 @@ public void safeRun() {\n \n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Closing ledger: \" + ledgerId + \" at entryId: \"\n-                              + metadata.close + \" with this many bytes: \" + metadata.length);\n+                              + metadata.getLastEntryId() + \" with this many bytes: \" + metadata.getLength());\n                 }\n \n-                final class CloseCb implements StatCallback {\n+                final class CloseCb extends OrderedSafeGenericCallback<Void> {\n+                    CloseCb() {\n+                        super(bk.mainWorkerPool, ledgerId);\n+                    }\n+\n                     @Override\n-                    public void processResult(final int rc, String path, Object subctx,\n-                                              final Stat stat) {\n-                        if (rc == KeeperException.Code.BadVersion) {\n-                            rereadMetadata(new GenericCallback<LedgerMetadata>() {\n+                    public void safeOperationComplete(final int rc, Void result) {\n+                        if (rc == BKException.Code.MetadataVersionException) {\n+                            rereadMetadata(new OrderedSafeGenericCallback<LedgerMetadata>(bk.mainWorkerPool,\n+                                                                                          ledgerId) {\n                                 @Override\n-                                public void operationComplete(int newrc, LedgerMetadata newMeta) {\n+                                public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                                     if (newrc != BKException.Code.OK) {\n                                         LOG.error(\"Error reading new metadata from ledger \" + ledgerId\n                                                   + \" when closing, code=\" + newrc);\n-                                        cb.closeComplete(BKException.Code.ZKException, LedgerHandle.this, ctx);\n+                                        cb.closeComplete(rc, LedgerHandle.this, ctx);\n                                     } else {\n-                                        metadata.close(prevClose);\n-                                        metadata.length = prevLength;\n+                                        metadata.setState(prevState);\n+                                        if (prevState.equals(State.CLOSED)) {\n+                                            metadata.close(prevLastEntryId);\n+                                        }\n+\n+                                        metadata.setLength(prevLength);\n                                         if (metadata.resolveConflict(newMeta)) {\n-                                            metadata.length = length;\n+                                            metadata.setLength(length);\n                                             metadata.close(lastAddConfirmed);\n-                                            writeLedgerConfig(new CloseCb(), null);\n+                                            writeLedgerConfig(new CloseCb());\n                                             return;\n                                         } else {\n-                                            metadata.length = length;\n+                                            metadata.setLength(length);\n                                             metadata.close(lastAddConfirmed);\n-                                            LOG.warn(\"Conditional write failed: \"\n-                                                     + KeeperException.Code.get(KeeperException.Code.BadVersion));\n-                                            cb.closeComplete(BKException.Code.ZKException, LedgerHandle.this, ctx);\n+                                            LOG.warn(\"Conditional update ledger metadata for ledger \" + ledgerId + \" failed.\");\n+                                            cb.closeComplete(rc, LedgerHandle.this, ctx);\n                                         }\n                                     }\n                                 }\n                             });\n-                        } else if (rc != KeeperException.Code.OK.intValue()) {\n-                            LOG.warn(\"Conditional write failed: \" + KeeperException.Code.get(rc));\n-                            cb.closeComplete(BKException.Code.ZKException, LedgerHandle.this,\n-                                             ctx);\n+                        } else if (rc != BKException.Code.OK) {\n+                            LOG.error(\"Error update ledger metadata for ledger \" + ledgerId + \" : \" + rc);\n+                            cb.closeComplete(rc, LedgerHandle.this, ctx);\n                         } else {\n-                            metadata.updateZnodeStatus(stat);\n                             cb.closeComplete(BKException.Code.OK, LedgerHandle.this, ctx);\n                         }\n                     }\n                 };\n \n-                writeLedgerConfig(new CloseCb(), null);\n+                writeLedgerConfig(new CloseCb());\n \n             }\n         });\n@@ -379,7 +372,8 @@ public void asyncReadEntries(long firstEntry, long lastEntry,\n         }\n \n         try {\n-            new PendingReadOp(this, firstEntry, lastEntry, cb, ctx).initiate();\n+            new PendingReadOp(this, bk.scheduler,\n+                              firstEntry, lastEntry, cb, ctx).initiate();\n         } catch (InterruptedException e) {\n             cb.readComplete(BKException.Code.InterruptedException, this, null, ctx);\n         }\n@@ -390,9 +384,10 @@ public void asyncReadEntries(long firstEntry, long lastEntry,\n      *\n      * @param data\n      *         array of bytes to be written to the ledger\n+     * @return the entryId of the new inserted entry\n      */\n-    public void addEntry(byte[] data) throws InterruptedException, BKException {\n-        addEntry(data, 0, data.length);\n+    public long addEntry(byte[] data) throws InterruptedException, BKException {\n+        return addEntry(data, 0, data.length);\n     }\n \n     /**\n@@ -404,24 +399,24 @@ public void addEntry(byte[] data) throws InterruptedException, BKException {\n      *          offset from which to take bytes from data\n      * @param length\n      *          number of bytes to take from data\n+     * @return the entryId of the new inserted entry\n      */\n-    public void addEntry(byte[] data, int offset, int length)\n+    public long addEntry(byte[] data, int offset, int length)\n             throws InterruptedException, BKException {\n         LOG.debug(\"Adding entry {}\", data);\n \n         SyncCounter counter = new SyncCounter();\n         counter.inc();\n \n-        asyncAddEntry(data, offset, length, new SyncAddCallback(), counter);\n+        SyncAddCallback callback = new SyncAddCallback();\n+        asyncAddEntry(data, offset, length, callback, counter);\n         counter.block(0);\n         \n         if (counter.getrc() != BKException.Code.OK) {\n             throw BKException.create(counter.getrc());\n         }\n \n-        if(counter.getrc() != BKException.Code.OK) {\n-            throw BKException.create(counter.getrc());\n-        }\n+        return callback.entryId;\n     }\n \n     /**\n@@ -484,12 +479,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n                 \"Invalid values for offset(\"+offset\n                 +\") or length(\"+length+\")\");\n         }\n-        try {\n-            opCounterSem.acquire();\n-        } catch (InterruptedException e) {\n-            cb.addComplete(BKException.Code.InterruptedException,\n-                           LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n-        }\n+        throttler.acquire();\n \n         final long entryId;\n         final long currentLength;\n@@ -499,7 +489,6 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n             // updating lastAddPushed\n             if (metadata.isClosed()) {\n                 LOG.warn(\"Attempt to add to closed ledger: \" + ledgerId);\n-                LedgerHandle.this.opCounterSem.release();\n                 cb.addComplete(BKException.Code.LedgerClosedException,\n                                LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n                 return;\n@@ -521,8 +510,8 @@ public void safeRun() {\n                 }\n             });\n         } catch (RuntimeException e) {\n-            opCounterSem.release();\n-            throw e;\n+            cb.addComplete(BKException.Code.InterruptedException,\n+                    LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n         }\n     }\n \n@@ -644,8 +633,9 @@ void sendAddSuccessCallbacks() {\n         // Start from the head of the queue and proceed while there are\n         // entries that have had all their responses come back\n         PendingAddOp pendingAddOp;\n-        while ((pendingAddOp = pendingAddOps.peek()) != null) {\n-            if (pendingAddOp.numResponsesPending != 0) {\n+        while ((pendingAddOp = pendingAddOps.peek()) != null\n+               && blockAddCompletions.get() == 0) {\n+            if (!pendingAddOp.completed) {\n                 return;\n             }\n             pendingAddOps.remove();\n@@ -655,120 +645,201 @@ void sendAddSuccessCallbacks() {\n \n     }\n \n-    void handleBookieFailure(InetSocketAddress addr, final int bookieIndex) {\n+    ArrayList<InetSocketAddress> replaceBookieInMetadata(final InetSocketAddress addr, final int bookieIndex)\n+            throws BKException.BKNotEnoughBookiesException {\n         InetSocketAddress newBookie;\n+        LOG.info(\"Handling failure of bookie: {} index: {}\", addr, bookieIndex);\n+        final ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>();\n+        final long newEnsembleStartEntry = lastAddConfirmed + 1;\n+\n+        // avoid parallel ensemble changes to same ensemble.\n+        synchronized (metadata) {\n+            newBookie = bk.bookieWatcher.getAdditionalBookie(metadata.currentEnsemble);\n+\n+            newEnsemble.addAll(metadata.currentEnsemble);\n+            newEnsemble.set(bookieIndex, newBookie);\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Handling failure of bookie: \" + addr + \" index: \"\n-                      + bookieIndex);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Changing ensemble from: \" + metadata.currentEnsemble\n+                        + \" to: \" + newEnsemble + \" for ledger: \" + ledgerId\n+                        + \" starting at entry: \" + (lastAddConfirmed + 1));\n+            }\n+\n+            metadata.addEnsemble(newEnsembleStartEntry, newEnsemble);\n         }\n+        return newEnsemble;\n+    }\n \n-        try {\n-            newBookie = bk.bookieWatcher\n-                        .getAdditionalBookie(metadata.currentEnsemble);\n-        } catch (BKNotEnoughBookiesException e) {\n-            LOG\n-            .error(\"Could not get additional bookie to remake ensemble, closing ledger: \"\n-                   + ledgerId);\n-            handleUnrecoverableErrorDuringAdd(e.getCode());\n-            return;\n+    void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n+        blockAddCompletions.incrementAndGet();\n+\n+        synchronized (metadata) {\n+            if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n+                // ensemble has already changed, failure of this addr is immaterial\n+                LOG.warn(\"Write did not succeed to {}, bookieIndex {}, but we have already fixed it.\",\n+                         addr, bookieIndex);\n+                blockAddCompletions.decrementAndGet();\n+                return;\n+            }\n+\n+            try {\n+                ArrayList<InetSocketAddress> newEnsemble = replaceBookieInMetadata(addr, bookieIndex);\n+\n+                EnsembleInfo ensembleInfo = new EnsembleInfo(newEnsemble, bookieIndex,\n+                                                             addr);\n+                writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n+            } catch (BKException.BKNotEnoughBookiesException e) {\n+                LOG.error(\"Could not get additional bookie to \"\n+                          + \"remake ensemble, closing ledger: \" + ledgerId);\n+                handleUnrecoverableErrorDuringAdd(e.getCode());\n+                return;\n+            }\n         }\n+    }\n \n-        final ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>(\n-            metadata.currentEnsemble);\n-        newEnsemble.set(bookieIndex, newBookie);\n+    // Contains newly reformed ensemble, bookieIndex, failedBookieAddress\n+    private static final class EnsembleInfo {\n+        private final ArrayList<InetSocketAddress> newEnsemble;\n+        private final int bookieIndex;\n+        private final InetSocketAddress addr;\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Changing ensemble from: \" + metadata.currentEnsemble + \" to: \"\n-                      + newEnsemble + \" for ledger: \" + ledgerId + \" starting at entry: \"\n-                      + (lastAddConfirmed + 1));\n+        public EnsembleInfo(ArrayList<InetSocketAddress> newEnsemble,\n+                int bookieIndex, InetSocketAddress addr) {\n+            this.newEnsemble = newEnsemble;\n+            this.bookieIndex = bookieIndex;\n+            this.addr = addr;\n         }\n+    }\n \n-        final long newEnsembleStartEntry = lastAddConfirmed + 1;\n-        metadata.addEnsemble(newEnsembleStartEntry, newEnsemble);\n+    /**\n+     * Callback which is updating the ledgerMetadata in zk with the newly\n+     * reformed ensemble. On MetadataVersionException, will reread latest\n+     * ledgerMetadata and act upon.\n+     */\n+    private final class ChangeEnsembleCb extends OrderedSafeGenericCallback<Void> {\n+        private final EnsembleInfo ensembleInfo;\n \n-        final class ChangeEnsembleCb implements StatCallback {\n-            @Override\n-            public void processResult(final int rc, String path, Object ctx, final Stat stat) {\n+        ChangeEnsembleCb(EnsembleInfo ensembleInfo) {\n+            super(bk.mainWorkerPool, ledgerId);\n+            this.ensembleInfo = ensembleInfo;\n+        }\n \n-                bk.mainWorkerPool.submitOrdered(ledgerId, new SafeRunnable() {\n-                    @Override\n-                    public void safeRun() {\n-                        if (rc == KeeperException.Code.BadVersion) {\n-                            rereadMetadata(new GenericCallback<LedgerMetadata>() {\n-                                @Override\n-                                public void operationComplete(int newrc, LedgerMetadata newMeta) {\n-                                    if (newrc != BKException.Code.OK) {\n-                                        LOG.error(\"Error reading new metadata from ledger after changing ensemble, code=\" + newrc);\n-                                        handleUnrecoverableErrorDuringAdd(BKException.Code.ZKException);\n-                                    } else {\n-                                        // a new ensemble is added only when the start entry is larger than zero\n-                                        if (newEnsembleStartEntry > 0) {\n-                                            metadata.getEnsembles().remove(newEnsembleStartEntry);\n-                                        }\n-                                        if (metadata.resolveConflict(newMeta)) {\n-                                            metadata.addEnsemble(newEnsembleStartEntry, newEnsemble);\n-                                            writeLedgerConfig(new ChangeEnsembleCb(), null);\n-                                            return;\n-                                        } else {\n-                                            LOG.error(\"Could not resolve ledger metadata conflict while changing ensemble to: \"\n-                                                      + newEnsemble + \", old meta data is \\n\" + new String(metadata.serialize())\n-                                                      + \"\\n, new meta data is \\n\" + new String(newMeta.serialize()) + \"\\n ,closing ledger\");\n-                                            handleUnrecoverableErrorDuringAdd(BKException.Code.ZKException);\n-                                        }\n-                                    }\n-                                }\n-                            });\n-                            return;\n-                        } else if (rc != KeeperException.Code.OK.intValue()) {\n-                            LOG\n-                            .error(\"Could not persist ledger metadata while changing ensemble to: \"\n-                                   + newEnsemble + \" , closing ledger\");\n-                            handleUnrecoverableErrorDuringAdd(BKException.Code.ZKException);\n-                            return;\n-                        }\n+        @Override\n+        public void safeOperationComplete(final int rc, Void result) {\n+            if (rc == BKException.Code.MetadataVersionException) {\n+                rereadMetadata(new ReReadLedgerMetadataCb(rc,\n+                                       ensembleInfo));\n+                return;\n+            } else if (rc != BKException.Code.OK) {\n+                LOG.error(\"Could not persist ledger metadata while \"\n+                          + \"changing ensemble to: \"\n+                          + ensembleInfo.newEnsemble\n+                          + \" , closing ledger\");\n+                handleUnrecoverableErrorDuringAdd(rc);\n+                return;\n+            }\n+            blockAddCompletions.decrementAndGet();\n \n-                        metadata.updateZnodeStatus(stat);\n-                        for (PendingAddOp pendingAddOp : pendingAddOps) {\n-                            pendingAddOp.unsetSuccessAndSendWriteRequest(bookieIndex);\n-                        }\n-                    }\n-                });\n+            // the failed bookie has been replaced\n+            unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);\n+        }\n+    };\n+\n+    /**\n+     * Callback which is reading the ledgerMetadata present in zk. This will try\n+     * to resolve the version conflicts.\n+     */\n+    private final class ReReadLedgerMetadataCb extends OrderedSafeGenericCallback<LedgerMetadata> {\n+        private final int rc;\n+        private final EnsembleInfo ensembleInfo;\n+\n+        ReReadLedgerMetadataCb(int rc, EnsembleInfo ensembleInfo) {\n+            super(bk.mainWorkerPool, ledgerId);\n+            this.rc = rc;\n+            this.ensembleInfo = ensembleInfo;\n+        }\n \n+        @Override\n+        public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n+            if (newrc != BKException.Code.OK) {\n+                LOG.error(\"Error reading new metadata from ledger \"\n+                        + \"after changing ensemble, code=\" + newrc);\n+                handleUnrecoverableErrorDuringAdd(rc);\n+            } else {\n+                if (!resolveConflict(newMeta)) {\n+                    LOG.error(\"Could not resolve ledger metadata conflict \"\n+                            + \"while changing ensemble to: \"\n+                            + ensembleInfo.newEnsemble\n+                            + \", old meta data is \\n\"\n+                            + new String(metadata.serialize())\n+                            + \"\\n, new meta data is \\n\"\n+                            + new String(newMeta.serialize())\n+                            + \"\\n ,closing ledger\");\n+                    handleUnrecoverableErrorDuringAdd(rc);\n+                }\n             }\n-        };\n+        }\n+\n+        /**\n+         * Resolving the version conflicts between local ledgerMetadata and zk\n+         * ledgerMetadata. This will do the following:\n+         * <ul>\n+         * <li>\n+         * check whether ledgerMetadata state matches of local and zk</li>\n+         * <li>\n+         * if the zk ledgerMetadata still contains the failed bookie, then\n+         * update zookeeper with the newBookie otherwise send write request</li>\n+         * </ul>\n+         */\n+        private boolean resolveConflict(LedgerMetadata newMeta) {\n+            // close have changed, another client has opened\n+            // the ledger, can't resolve this conflict.\n+            if (metadata.getState() != newMeta.getState()) {\n+                return false;\n+            }\n+            // update znode version\n+            metadata.setVersion(newMeta.getVersion());\n+            // Resolve the conflicts if zk metadata still contains failed\n+            // bookie.\n+            if (newMeta.currentEnsemble.get(ensembleInfo.bookieIndex).equals(\n+                    ensembleInfo.addr)) {\n+                // Update ledger metadata in zk, if in-memory metadata doesn't\n+                // contains the failed bookie.\n+                if (!metadata.currentEnsemble.get(ensembleInfo.bookieIndex)\n+                        .equals(ensembleInfo.addr)) {\n+                    LOG.info(\"Resolve ledger metadata conflict \"\n+                            + \"while changing ensemble to: \"\n+                            + ensembleInfo.newEnsemble\n+                            + \", old meta data is \\n\"\n+                            + new String(metadata.serialize())\n+                            + \"\\n, new meta data is \\n\"\n+                            + new String(newMeta.serialize()));\n+                    writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n+                }\n+            } else {\n+                // the failed bookie has been replaced\n+                blockAddCompletions.decrementAndGet();\n+                unsetSuccessAndSendWriteRequest(ensembleInfo.bookieIndex);\n+            }\n+            return true;\n+        }\n \n-        writeLedgerConfig(new ChangeEnsembleCb(), null);\n+    };\n \n+    void unsetSuccessAndSendWriteRequest(final int bookieIndex) {\n+        for (PendingAddOp pendingAddOp : pendingAddOps) {\n+            pendingAddOp.unsetSuccessAndSendWriteRequest(bookieIndex);\n+        }\n     }\n \n     void rereadMetadata(final GenericCallback<LedgerMetadata> cb) {\n-        bk.getZkHandle().getData(bk.getLedgerManager().getLedgerPath(ledgerId), false,\n-            new DataCallback() {\n-                public void processResult(int rc, String path,\n-                                          Object ctx, byte[] data, Stat stat) {\n-                    if (rc != KeeperException.Code.OK.intValue()) {\n-                        LOG.error(\"Error reading metadata from ledger, code =\" + rc);\n-                        cb.operationComplete(BKException.Code.ZKException, null);\n-                        return;\n-                    }\n-\n-                    try {\n-                        LedgerMetadata newMeta = LedgerMetadata.parseConfig(data, stat.getVersion());\n-                        cb.operationComplete(BKException.Code.OK, newMeta);\n-                    } catch (IOException e) {\n-                        LOG.error(\"Error parsing ledger metadata for ledger\", e);\n-                        cb.operationComplete(BKException.Code.ZKException, null);\n-                        return;\n-                    }\n-                }\n-        }, null);\n+        bk.getLedgerManager().readLedgerMetadata(ledgerId, cb);\n     }\n \n     synchronized void recover(final GenericCallback<Void> cb) {\n         if (metadata.isClosed()) {\n-            lastAddConfirmed = lastAddPushed = metadata.close;\n-            length = metadata.length;\n+            lastAddConfirmed = lastAddPushed = metadata.getLastEntryId();\n+            length = metadata.getLength();\n \n             // We are already closed, nothing to do\n             cb.operationComplete(BKException.Code.OK, null);\n@@ -784,39 +855,38 @@ synchronized void recover(final GenericCallback<Void> cb) {\n \n         metadata.markLedgerInRecovery();\n \n-        writeLedgerConfig(new StatCallback() {\n+        writeLedgerConfig(new OrderedSafeGenericCallback<Void>(bk.mainWorkerPool, ledgerId) {\n             @Override\n-            public void processResult(final int rc, String path, Object ctx, Stat stat) {\n-                if (rc == KeeperException.Code.BadVersion) {\n-                    rereadMetadata(new GenericCallback<LedgerMetadata>() {\n-                            @Override\n-                            public void operationComplete(int rc, LedgerMetadata newMeta) {\n-                                if (rc != BKException.Code.OK) {\n-                                    cb.operationComplete(rc, null);\n-                                } else {\n-                                    metadata = newMeta;\n-                                    recover(cb);\n-                                }\n+            public void safeOperationComplete(final int rc, Void result) {\n+                if (rc == BKException.Code.MetadataVersionException) {\n+                    rereadMetadata(new OrderedSafeGenericCallback<LedgerMetadata>(bk.mainWorkerPool,\n+                                                                                  ledgerId) {\n+                        @Override\n+                        public void safeOperationComplete(int rc, LedgerMetadata newMeta) {\n+                            if (rc != BKException.Code.OK) {\n+                                cb.operationComplete(rc, null);\n+                            } else {\n+                                metadata = newMeta;\n+                                recover(cb);\n                             }\n-                        });\n-                } else if (rc == KeeperException.Code.OK.intValue()) {\n-                    metadata.znodeVersion = stat.getVersion();\n+                        }\n+                    });\n+                } else if (rc == BKException.Code.OK) {\n                     new LedgerRecoveryOp(LedgerHandle.this, cb).initiate();\n                 } else {\n-                    LOG.error(\"Error writing ledger config \" +  rc \n-                              + \" path = \" + path);\n-                    cb.operationComplete(BKException.Code.ZKException, null);\n+                    LOG.error(\"Error writing ledger config \" + rc + \" of ledger \" + ledgerId);\n+                    cb.operationComplete(rc, null);\n                 }\n             }\n-        }, null);\n+        });\n     }\n \n     static class NoopCloseCallback implements CloseCallback {\n         static NoopCloseCallback instance = new NoopCloseCallback();\n \n         @Override\n         public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n-            if (rc != KeeperException.Code.OK.intValue()) {\n+            if (rc != BKException.Code.OK) {\n                 LOG.warn(\"Close failed: \" + BKException.getMessage(rc));\n             }\n             // noop\n@@ -850,6 +920,8 @@ public void readComplete(int rc, LedgerHandle lh,\n     }\n \n     private static class SyncAddCallback implements AddCallback {\n+        long entryId = -1;\n+\n         /**\n          * Implementation of callback interface for synchronous read method.\n          *\n@@ -864,7 +936,8 @@ public void readComplete(int rc, LedgerHandle lh,\n          */\n         public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n-            \n+\n+            this.entryId = entry;\n             counter.setrc(rc);\n             counter.dec();\n         }"},{"sha":"d038e3bb82e1e41826b57c7efb4d99129a1c6d1e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":255,"deletions":100,"changes":355,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -18,16 +18,22 @@\n  * limitations under the License.\n  */\n \n+import java.io.BufferedReader;\n+import java.io.StringReader;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.SortedMap;\n import java.util.TreeMap;\n+import java.util.Arrays;\n \n+import org.apache.bookkeeper.versioning.Version;\n+import com.google.protobuf.TextFormat;\n+import com.google.protobuf.ByteString;\n+import org.apache.bookkeeper.proto.DataFormats.LedgerMetadataFormat;\n import org.apache.bookkeeper.util.StringUtils;\n-import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,38 +51,54 @@\n \n     // can't use -1 for NOTCLOSED because that is reserved for a closed, empty\n     // ledger\n-    public static final int NOTCLOSED = -101;\n-    public static final int IN_RECOVERY = -102;\n+    private static final int NOTCLOSED = -101;\n+    private static final int IN_RECOVERY = -102;\n \n     public static final int LOWEST_COMPAT_METADATA_FORMAT_VERSION = 0;\n-    public static final int CURRENT_METADATA_FORMAT_VERSION = 1;\n+    public static final int CURRENT_METADATA_FORMAT_VERSION = 2;\n     public static final String VERSION_KEY = \"BookieMetadataFormatVersion\";\n \n-    int metadataFormatVersion = 0;\n+    private int metadataFormatVersion = 0;\n \n-    int ensembleSize;\n-    int quorumSize;\n-    long length;\n-    long close;\n+    private int ensembleSize;\n+    private int writeQuorumSize;\n+    private int ackQuorumSize;\n+    private long length;\n+    private long lastEntryId;\n+\n+    private LedgerMetadataFormat.State state;\n     private SortedMap<Long, ArrayList<InetSocketAddress>> ensembles = new TreeMap<Long, ArrayList<InetSocketAddress>>();\n     ArrayList<InetSocketAddress> currentEnsemble;\n-    volatile int znodeVersion = -1;\n-    \n-    public LedgerMetadata(int ensembleSize, int quorumSize) {\n+    volatile Version version = Version.NEW;\n+\n+    private boolean hasPassword = false;\n+    private LedgerMetadataFormat.DigestType digestType;\n+    private byte[] password;\n+\n+    public LedgerMetadata(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n+                          BookKeeper.DigestType digestType, byte[] password) {\n         this.ensembleSize = ensembleSize;\n-        this.quorumSize = quorumSize;\n+        this.writeQuorumSize = writeQuorumSize;\n+        this.ackQuorumSize = ackQuorumSize;\n \n         /*\n          * It is set in PendingReadOp.readEntryComplete, and\n          * we read it in LedgerRecoveryOp.readComplete.\n          */\n         this.length = 0;\n-        this.close = NOTCLOSED;\n+        this.state = LedgerMetadataFormat.State.OPEN;\n+        this.lastEntryId = LedgerHandle.INVALID_ENTRY_ID;\n         this.metadataFormatVersion = CURRENT_METADATA_FORMAT_VERSION;\n-    };\n+\n+        this.digestType = digestType.equals(BookKeeper.DigestType.MAC) ?\n+            LedgerMetadataFormat.DigestType.HMAC : LedgerMetadataFormat.DigestType.CRC32;\n+        this.password = Arrays.copyOf(password, password.length);\n+        this.hasPassword = true;\n+    }\n \n     private LedgerMetadata() {\n-        this(0, 0);\n+        this(0, 0, 0, BookKeeper.DigestType.MAC, new byte[] {});\n+        this.hasPassword = false;\n     }\n \n     /**\n@@ -90,21 +112,75 @@ private LedgerMetadata() {\n         return ensembles;\n     }\n \n-    boolean isClosed() {\n-        return close != NOTCLOSED \n-            && close != IN_RECOVERY;\n+    public int getEnsembleSize() {\n+        return ensembleSize;\n+    }\n+\n+    public int getWriteQuorumSize() {\n+        return writeQuorumSize;\n+    }\n+\n+    public int getAckQuorumSize() {\n+        return ackQuorumSize;\n+    }\n+\n+    /**\n+     * In versions 4.1.0 and below, the digest type and password were not\n+     * stored in the metadata.\n+     *\n+     * @return whether the password has been stored in the metadata\n+     */\n+    boolean hasPassword() {\n+        return hasPassword;\n+    }\n+\n+    byte[] getPassword() {\n+        return Arrays.copyOf(password, password.length);\n+    }\n+\n+    BookKeeper.DigestType getDigestType() {\n+        if (digestType.equals(LedgerMetadataFormat.DigestType.HMAC)) {\n+            return BookKeeper.DigestType.MAC;\n+        } else {\n+            return BookKeeper.DigestType.CRC32;\n+        }\n+    }\n+\n+    public long getLastEntryId() {\n+        return lastEntryId;\n+    }\n+\n+    public long getLength() {\n+        return length;\n+    }\n+\n+    void setLength(long length) {\n+        this.length = length;\n+    }\n+\n+    public boolean isClosed() {\n+        return state == LedgerMetadataFormat.State.CLOSED;\n+    }\n+\n+    public boolean isInRecovery() {\n+        return state == LedgerMetadataFormat.State.IN_RECOVERY;\n     }\n \n-    boolean isInRecovery() {\n-        return IN_RECOVERY == close;\n+    LedgerMetadataFormat.State getState() {\n+        return state;\n     }\n-    \n+\n+    void setState(LedgerMetadataFormat.State state) {\n+        this.state = state;\n+    }\n+\n     void markLedgerInRecovery() {\n-        close = IN_RECOVERY;\n+        state = LedgerMetadataFormat.State.IN_RECOVERY;\n     }\n \n     void close(long entryId) {\n-        close = entryId;\n+        lastEntryId = entryId;\n+        state = LedgerMetadataFormat.State.CLOSED;\n     }\n \n     void addEnsemble(long startEntryId, ArrayList<InetSocketAddress> ensemble) {\n@@ -143,122 +219,190 @@ long getNextEnsembleChange(long entryId) {\n      * @return the metadata serialized into a byte array\n      */\n     public byte[] serialize() {\n+        if (metadataFormatVersion == 1) {\n+            return serializeVersion1();\n+        }\n+        LedgerMetadataFormat.Builder builder = LedgerMetadataFormat.newBuilder();\n+        builder.setQuorumSize(writeQuorumSize).setAckQuorumSize(ackQuorumSize)\n+            .setEnsembleSize(ensembleSize).setLength(length)\n+            .setState(state).setLastEntryId(lastEntryId);\n+\n+        if (hasPassword) {\n+            builder.setDigestType(digestType).setPassword(ByteString.copyFrom(password));\n+        }\n+\n+        for (Map.Entry<Long, ArrayList<InetSocketAddress>> entry : ensembles.entrySet()) {\n+            LedgerMetadataFormat.Segment.Builder segmentBuilder = LedgerMetadataFormat.Segment.newBuilder();\n+            segmentBuilder.setFirstEntryId(entry.getKey());\n+            for (InetSocketAddress addr : entry.getValue()) {\n+                segmentBuilder.addEnsembleMember(addr.getAddress().getHostAddress() + \":\" + addr.getPort());\n+            }\n+            builder.addSegment(segmentBuilder.build());\n+        }\n+\n+        StringBuilder s = new StringBuilder();\n+        s.append(VERSION_KEY).append(tSplitter).append(CURRENT_METADATA_FORMAT_VERSION).append(lSplitter);\n+        s.append(TextFormat.printToString(builder.build()));\n+        LOG.debug(\"Serialized config: {}\", s);\n+        return s.toString().getBytes();\n+    }\n+\n+    private byte[] serializeVersion1() {\n         StringBuilder s = new StringBuilder();\n         s.append(VERSION_KEY).append(tSplitter).append(metadataFormatVersion).append(lSplitter);\n-        s.append(quorumSize).append(lSplitter).append(ensembleSize).append(lSplitter).append(length);\n+        s.append(writeQuorumSize).append(lSplitter).append(ensembleSize).append(lSplitter).append(length);\n \n         for (Map.Entry<Long, ArrayList<InetSocketAddress>> entry : ensembles.entrySet()) {\n             s.append(lSplitter).append(entry.getKey());\n             for (InetSocketAddress addr : entry.getValue()) {\n                 s.append(tSplitter);\n-                StringUtils.addrToString(s, addr);\n+                s.append(StringUtils.addrToString(addr));\n             }\n         }\n \n-        if (close != NOTCLOSED) {\n-            s.append(lSplitter).append(close).append(tSplitter).append(closed);\n+        if (state == LedgerMetadataFormat.State.IN_RECOVERY) {\n+            s.append(lSplitter).append(IN_RECOVERY).append(tSplitter).append(closed);\n+        } else if (state == LedgerMetadataFormat.State.CLOSED) {\n+            s.append(lSplitter).append(getLastEntryId()).append(tSplitter).append(closed);\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Serialized config: \" + s.toString());\n-        }\n+        LOG.debug(\"Serialized config: {}\", s);\n \n         return s.toString().getBytes();\n     }\n \n     /**\n      * Parses a given byte array and transforms into a LedgerConfig object\n      *\n-     * @param array\n+     * @param bytes\n      *            byte array to parse\n+     * @param version\n+     *            version of the ledger metadata\n      * @return LedgerConfig\n      * @throws IOException\n      *             if the given byte[] cannot be parsed\n      */\n-\n-    static LedgerMetadata parseConfig(byte[] bytes, int version) throws IOException {\n-\n+    public static LedgerMetadata parseConfig(byte[] bytes, Version version) throws IOException {\n         LedgerMetadata lc = new LedgerMetadata();\n+        lc.version = version;\n+\n         String config = new String(bytes);\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Parsing Config: \" + config);\n+        LOG.debug(\"Parsing Config: {}\", config);\n+        BufferedReader reader = new BufferedReader(new StringReader(config));\n+        String versionLine = reader.readLine();\n+        if (versionLine == null) {\n+            throw new IOException(\"Invalid metadata. Content missing\");\n         }\n-        \n-        String lines[] = config.split(lSplitter);\n-        \n-        try {\n-            int i = 0;\n-            if (lines[0].startsWith(VERSION_KEY)) {\n-                String parts[] = lines[0].split(tSplitter);\n-                lc.metadataFormatVersion = new Integer(parts[1]);\n-                i++;\n-            } else {\n-                lc.metadataFormatVersion = 0;\n-            }\n-            \n-            if (lc.metadataFormatVersion < LOWEST_COMPAT_METADATA_FORMAT_VERSION\n-                || lc.metadataFormatVersion > CURRENT_METADATA_FORMAT_VERSION) {\n-                throw new IOException(\"Metadata version not compatible. Expected between \"\n-                        + LOWEST_COMPAT_METADATA_FORMAT_VERSION + \" and \" + CURRENT_METADATA_FORMAT_VERSION\n-                        + \", but got \" + lc.metadataFormatVersion);\n-            }\n-            if ((lines.length+i) < 2) {\n-                throw new IOException(\"Quorum size or ensemble size absent from config: \" + config);\n+        int i = 0;\n+        if (versionLine.startsWith(VERSION_KEY)) {\n+            String parts[] = versionLine.split(tSplitter);\n+            lc.metadataFormatVersion = new Integer(parts[1]);\n+        } else {\n+            // if no version is set, take it to be version 1\n+            // as the parsing is the same as what we had before\n+            // we introduce versions\n+            lc.metadataFormatVersion = 1;\n+            // reset the reader\n+            reader.close();\n+            reader = new BufferedReader(new StringReader(config));\n+        }\n+\n+        if (lc.metadataFormatVersion < LOWEST_COMPAT_METADATA_FORMAT_VERSION\n+            || lc.metadataFormatVersion > CURRENT_METADATA_FORMAT_VERSION) {\n+            throw new IOException(\"Metadata version not compatible. Expected between \"\n+                    + LOWEST_COMPAT_METADATA_FORMAT_VERSION + \" and \" + CURRENT_METADATA_FORMAT_VERSION\n+                                  + \", but got \" + lc.metadataFormatVersion);\n+        }\n+\n+        if (lc.metadataFormatVersion == 1) {\n+            return parseVersion1Config(lc, reader);\n+        }\n+\n+        LedgerMetadataFormat.Builder builder = LedgerMetadataFormat.newBuilder();\n+        TextFormat.merge(reader, builder);\n+        LedgerMetadataFormat data = builder.build();\n+        lc.writeQuorumSize = data.getQuorumSize();\n+        if (data.hasAckQuorumSize()) {\n+            lc.ackQuorumSize = data.getAckQuorumSize();\n+        } else {\n+            lc.ackQuorumSize = lc.writeQuorumSize;\n+        }\n+\n+        lc.ensembleSize = data.getEnsembleSize();\n+        lc.length = data.getLength();\n+        lc.state = data.getState();\n+        lc.lastEntryId = data.getLastEntryId();\n+\n+        if (data.hasPassword()) {\n+            lc.digestType = data.getDigestType();\n+            lc.password = data.getPassword().toByteArray();\n+            lc.hasPassword = true;\n+        }\n+\n+        for (LedgerMetadataFormat.Segment s : data.getSegmentList()) {\n+            ArrayList<InetSocketAddress> addrs = new ArrayList<InetSocketAddress>();\n+            for (String member : s.getEnsembleMemberList()) {\n+                addrs.add(StringUtils.parseAddr(member));\n             }\n+            lc.addEnsemble(s.getFirstEntryId(), addrs);\n+        }\n+        return lc;\n+    }\n \n-            lc.znodeVersion = version;\n-            lc.quorumSize = new Integer(lines[i++]);\n-            lc.ensembleSize = new Integer(lines[i++]);\n-            lc.length = new Long(lines[i++]);\n+    static LedgerMetadata parseVersion1Config(LedgerMetadata lc,\n+                                              BufferedReader reader) throws IOException {\n+        try {\n+            lc.writeQuorumSize = lc.ackQuorumSize = new Integer(reader.readLine());\n+            lc.ensembleSize = new Integer(reader.readLine());\n+            lc.length = new Long(reader.readLine());\n \n-            for (; i < lines.length; i++) {\n-                String parts[] = lines[i].split(tSplitter);\n+            String line = reader.readLine();\n+            while (line != null) {\n+                String parts[] = line.split(tSplitter);\n \n                 if (parts[1].equals(closed)) {\n-                    lc.close = new Long(parts[0]);\n+                    Long l = new Long(parts[0]);\n+                    if (l == IN_RECOVERY) {\n+                        lc.state = LedgerMetadataFormat.State.IN_RECOVERY;\n+                    } else {\n+                        lc.state = LedgerMetadataFormat.State.CLOSED;\n+                        lc.lastEntryId = l;\n+                    }\n                     break;\n+                } else {\n+                    lc.state = LedgerMetadataFormat.State.OPEN;\n                 }\n \n                 ArrayList<InetSocketAddress> addrs = new ArrayList<InetSocketAddress>();\n                 for (int j = 1; j < parts.length; j++) {\n                     addrs.add(StringUtils.parseAddr(parts[j]));\n                 }\n                 lc.addEnsemble(new Long(parts[0]), addrs);\n+                line = reader.readLine();\n             }\n         } catch (NumberFormatException e) {\n             throw new IOException(e);\n         }\n         return lc;\n     }\n-    \n \n     /**\n-     * Updates the status of this metadata in ZooKeeper.\n+     * Updates the version of this metadata.\n      * \n-     * @param stat\n+     * @param v Version\n      */\n-    public void updateZnodeStatus(Stat stat) {\n-        this.znodeVersion = stat.getVersion();\n+    public void setVersion(Version v) {\n+        this.version = v;\n     }\n \n     /**\n-     * Update the znode version of this metadata\n-     *\n-     * @param znodeVersion\n-     *        Znode version of this metadata\n-     */\n-    public void updateZnodeStatus(int znodeVersion) {\n-        this.znodeVersion = znodeVersion;\n-    }\n-\n-    /**\n-     * Returns the last znode version.\n+     * Returns the last version.\n      * \n-     * @return int znode version\n+     * @return version\n      */\n-    public int getZnodeVersion() {\n-        return this.znodeVersion;\n+    public Version getVersion() {\n+        return this.version;\n     }\n \n     /**\n@@ -276,37 +420,48 @@ boolean resolveConflict(LedgerMetadata newMeta) {\n \n         if (metadataFormatVersion != newMeta.metadataFormatVersion ||\n             ensembleSize != newMeta.ensembleSize ||\n-            quorumSize != newMeta.quorumSize ||\n+            writeQuorumSize != newMeta.writeQuorumSize ||\n+            ackQuorumSize != newMeta.ackQuorumSize ||\n             length != newMeta.length ||\n-            close != newMeta.close) {\n+            state != newMeta.state ||\n+            !digestType.equals(newMeta.digestType) ||\n+            !Arrays.equals(password, newMeta.password)) {\n             return false;\n         }\n-        // new meta znode version should be larger than old one\n-        if (znodeVersion > newMeta.znodeVersion) {\n+        if (state == LedgerMetadataFormat.State.CLOSED\n+            && lastEntryId != newMeta.lastEntryId) {\n             return false;\n         }\n-        // ensemble size should be same\n-        if (ensembles.size() != newMeta.ensembles.size()) {\n+        // new meta znode version should be larger than old one\n+        if (null != version &&\n+            Version.Occurred.AFTER == version.compare(newMeta.version)) {\n             return false;\n         }\n-        // ensemble distribution should be same\n-        // we don't check the detail ensemble, since new bookie will be set\n-        // using recovery tool.\n-        Iterator<Long> keyIter = ensembles.keySet().iterator();\n-        Iterator<Long> newMetaKeyIter = newMeta.ensembles.keySet().iterator();\n-        for (int i=0; i<ensembles.size(); i++) {\n-            Long curKey = keyIter.next();\n-            Long newMetaKey = newMetaKeyIter.next();\n-            if (!curKey.equals(newMetaKey)) {\n+        // if ledger is closed, we can just take the new ensembles\n+        if (newMeta.state != LedgerMetadataFormat.State.CLOSED) {\n+            // ensemble size should be same\n+            if (ensembles.size() != newMeta.ensembles.size()) {\n                 return false;\n             }\n+            // ensemble distribution should be same\n+            // we don't check the detail ensemble, since new bookie will be set\n+            // using recovery tool.\n+            Iterator<Long> keyIter = ensembles.keySet().iterator();\n+            Iterator<Long> newMetaKeyIter = newMeta.ensembles.keySet().iterator();\n+            for (int i=0; i<ensembles.size(); i++) {\n+                Long curKey = keyIter.next();\n+                Long newMetaKey = newMetaKeyIter.next();\n+                if (!curKey.equals(newMetaKey)) {\n+                    return false;\n+                }\n+            }\n         }\n         /*\n          *  if the conflict has been resolved, then update\n          *  ensemble and znode version\n          */\n         ensembles = newMeta.ensembles;\n-        znodeVersion = newMeta.znodeVersion;\n+        version = newMeta.version;\n         return true;\n     }\n }"},{"sha":"61d26b14bc10afb992dae28106a210e30d03d5c3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":53,"deletions":35,"changes":88,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -21,23 +21,23 @@\n \n package org.apache.bookkeeper.client;\n \n-import java.io.IOException;\n+import java.util.Arrays;\n import java.security.GeneralSecurityException;\n+\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.util.OrderedSafeExecutor.OrderedSafeGenericCallback;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.zookeeper.KeeperException;\n-import org.apache.zookeeper.AsyncCallback.DataCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-import org.apache.zookeeper.data.Stat;\n \n /**\n  * Encapsulates the ledger open operation\n  *\n  */\n-class LedgerOpenOp implements DataCallback {\n+class LedgerOpenOp implements GenericCallback<LedgerMetadata> {\n     static final Logger LOG = LoggerFactory.getLogger(LedgerOpenOp.class);\n \n     final BookKeeper bk;\n@@ -47,7 +47,8 @@\n     LedgerHandle lh;\n     final byte[] passwd;\n     final DigestType digestType;\n-    boolean doRecovery;\n+    boolean doRecovery = true;\n+    boolean administrativeOpen = false;\n \n     /**\n      * Constructor.\n@@ -59,16 +60,25 @@\n      * @param cb\n      * @param ctx\n      */\n-    public LedgerOpenOp(BookKeeper bk, long ledgerId, DigestType digestType, byte[] passwd, \n+    public LedgerOpenOp(BookKeeper bk, long ledgerId, DigestType digestType, byte[] passwd,\n                         OpenCallback cb, Object ctx) {\n         this.bk = bk;\n         this.ledgerId = ledgerId;\n         this.passwd = passwd;\n         this.cb = cb;\n         this.ctx = ctx;\n         this.digestType = digestType;\n+    }\n \n-        this.doRecovery = true;\n+    public LedgerOpenOp(BookKeeper bk, long ledgerId, OpenCallback cb, Object ctx) {\n+        this.bk = bk;\n+        this.ledgerId = ledgerId;\n+        this.cb = cb;\n+        this.ctx = ctx;\n+\n+        this.passwd = bk.getConf().getBookieRecoveryPasswd();\n+        this.digestType = bk.getConf().getBookieRecoveryDigestType();\n+        this.administrativeOpen = true;\n     }\n \n     /**\n@@ -78,8 +88,7 @@ public void initiate() {\n         /**\n          * Asynchronously read the ledger metadata node.\n          */\n-\n-        bk.getZkHandle().getData(bk.getLedgerManager().getLedgerPath(ledgerId), false, this, ctx);\n+        bk.getLedgerManager().readLedgerMetadata(ledgerId, this);\n     }\n \n     /**\n@@ -91,34 +100,43 @@ public void initiateWithoutRecovery() {\n     }\n \n     /**\n-     * Implements ZooKeeper data callback.\n-     * @see org.apache.zookeeper.AsyncCallback.DataCallback#processResult(int, String, Object, byte[], Stat)\n+     * Implements Open Ledger Callback.\n      */\n-    public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n-\n-        if (rc == KeeperException.Code.NONODE.intValue()) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"No such ledger: \" + ledgerId, KeeperException.create(KeeperException.Code.get(rc), path));\n-            }\n-            cb.openComplete(BKException.Code.NoSuchLedgerExistsException, null, this.ctx);\n-            return;\n-        }\n-        if (rc != KeeperException.Code.OK.intValue()) {\n-            LOG.error(\"Could not read metadata for ledger: \" + ledgerId, KeeperException.create(KeeperException.Code\n-                      .get(rc), path));\n-            cb.openComplete(BKException.Code.ZKException, null, this.ctx);\n+    public void operationComplete(int rc, LedgerMetadata metadata) {\n+        if (BKException.Code.OK != rc) {\n+            // open ledger failed.\n+            cb.openComplete(rc, null, this.ctx);\n             return;\n         }\n \n-        LedgerMetadata metadata;\n-        try {\n-            metadata = LedgerMetadata.parseConfig(data, stat.getVersion());\n-        } catch (IOException e) {\n-            LOG.error(\"Could not parse ledger metadata for ledger: \" + ledgerId, e);\n-            cb.openComplete(BKException.Code.ZKException, null, this.ctx);\n-            return;\n+        final byte[] passwd;\n+        final DigestType digestType;\n+\n+        /* For an administrative open, the default passwords\n+         * are read from the configuration, but if the metadata\n+         * already contains passwords, use these instead. */\n+        if (administrativeOpen && metadata.hasPassword()) {\n+            passwd = metadata.getPassword();\n+            digestType = metadata.getDigestType();\n+        } else {\n+            passwd = this.passwd;\n+            digestType = this.digestType;\n+\n+            if (metadata.hasPassword()) {\n+                if (!Arrays.equals(passwd, metadata.getPassword())) {\n+                    LOG.error(\"Provided passwd does not match that in metadata\");\n+                    cb.openComplete(BKException.Code.UnauthorizedAccessException, null, this.ctx);\n+                    return;\n+                }\n+                if (digestType != metadata.getDigestType()) {\n+                    LOG.error(\"Provided digest does not match that in metadata\");\n+                    cb.openComplete(BKException.Code.DigestMatchException, null, this.ctx);\n+                    return;\n+                }\n+            }\n         }\n \n+        // get the ledger metadata back\n         try {\n             lh = new ReadOnlyLedgerHandle(bk, ledgerId, metadata, digestType, passwd);\n         } catch (GeneralSecurityException e) {\n@@ -138,9 +156,9 @@ public void processResult(int rc, String path, Object ctx, byte[] data, Stat sta\n         }\n \n         if (doRecovery) {\n-            lh.recover(new GenericCallback<Void>() {\n+            lh.recover(new OrderedSafeGenericCallback<Void>(bk.mainWorkerPool, ledgerId) {\n                     @Override\n-                    public void operationComplete(int rc, Void result) {\n+                    public void safeOperationComplete(int rc, Void result) {\n                         if (rc == BKException.Code.OK) {\n                             cb.openComplete(BKException.Code.OK, lh, LedgerOpenOp.this.ctx);\n                         } else if (rc == BKException.Code.UnauthorizedAccessException) {"},{"sha":"293c0e5a32ae5127ebbe74753a970cc62a91c628","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -57,7 +57,7 @@\n     public LedgerRecoveryOp(LedgerHandle lh, GenericCallback<Void> cb) {\n         this.cb = cb;\n         this.lh = lh;\n-        numResponsesPending = lh.metadata.ensembleSize;\n+        numResponsesPending = lh.metadata.getEnsembleSize();\n     }\n \n     public void initiate() {\n@@ -121,7 +121,7 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n                         cb.operationComplete(BKException.Code.ZKException, null);\n                     } else {\n                         cb.operationComplete(BKException.Code.OK, null);\n-                        LOG.debug(\"After closing length is: \" + lh.getLength());\n+                        LOG.debug(\"After closing length is: {}\", lh.getLength());\n                     }\n                 }\n                 }, null, BKException.Code.LedgerClosedException);"},{"sha":"e4d2a7f25e1d62383c20a23f64859422b61ca6ca","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":54,"deletions":41,"changes":95,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,7 +15,10 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import java.net.InetSocketAddress;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n@@ -42,8 +43,11 @@\n     AddCallback cb;\n     Object ctx;\n     long entryId;\n-    boolean[] successesSoFar;\n-    int numResponsesPending;\n+    Set<Integer> writeSet;\n+\n+    DistributionSchedule.AckSet ackSet;\n+    boolean completed = false;\n+\n     LedgerHandle lh;\n     boolean isRecoveryAdd = false;\n \n@@ -53,11 +57,10 @@\n         this.ctx = ctx;\n         this.entryId = LedgerHandle.INVALID_ENTRY_ID;\n         \n-        successesSoFar = new boolean[lh.metadata.quorumSize];\n-        numResponsesPending = successesSoFar.length;\n+        ackSet = lh.distributionSchedule.getAckSet();\n     }\n \n-    /** \n+    /**\n      * Enable the recovery add flag for this operation.\n      * @see LedgerHandle#asyncRecoveryAddEntry\n      */\n@@ -68,13 +71,14 @@ PendingAddOp enableRecoveryAdd() {\n \n     void setEntryId(long entryId) {\n         this.entryId = entryId;\n+        writeSet = new HashSet<Integer>(lh.distributionSchedule.getWriteSet(entryId));\n     }\n \n-    void sendWriteRequest(int bookieIndex, int arrayIndex) {\n+    void sendWriteRequest(int bookieIndex) {\n         int flags = isRecoveryAdd ? BookieProtocol.FLAG_RECOVERY_ADD : BookieProtocol.FLAG_NONE;\n \n         lh.bk.bookieClient.addEntry(lh.metadata.currentEnsemble.get(bookieIndex), lh.ledgerId, lh.ledgerKey, entryId, toSend,\n-                this, arrayIndex, flags);\n+                this, bookieIndex, flags);\n     }\n \n     void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n@@ -84,13 +88,22 @@ void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n             // now\n             return;\n         }\n-\n-        int replicaIndex = lh.distributionSchedule.getReplicaIndex(entryId, bookieIndex);\n-        if (replicaIndex < 0) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Leaving unchanged, ledger: \" + lh.ledgerId + \" entry: \" + entryId + \" bookie index: \"\n-                          + bookieIndex);\n-            }\n+        // Suppose that unset doesn't happen on the write set of an entry. In this\n+        // case we don't need to resend the write request upon an ensemble change.\n+        // We do need to invoke #sendAddSuccessCallbacks() for such entries because\n+        // they may have already completed, but they are just waiting for the ensemble\n+        // to change.\n+        // E.g.\n+        // ensemble (A, B, C, D), entry k is written to (A, B, D). An ensemble change\n+        // happens to replace C with E. Entry k does not complete until C is\n+        // replaced with E successfully. When the ensemble change completes, it tries\n+        // to unset entry k. C however is not in k's write set, so no entry is written\n+        // again, and no one triggers #sendAddSuccessCallbacks. Consequently, k never\n+        // completes.\n+        //\n+        // We call sendAddSuccessCallback when unsetting t cover this case.\n+        if (!writeSet.contains(bookieIndex)) {\n+            lh.sendAddSuccessCallbacks();\n             return;\n         }\n \n@@ -102,33 +115,23 @@ void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n         // if we had already heard a success from this array index, need to\n         // increment our number of responses that are pending, since we are\n         // going to unset this success\n-        if (successesSoFar[replicaIndex]) {\n-            successesSoFar[replicaIndex] = false;\n-            numResponsesPending++;\n-        }\n+        ackSet.removeBookie(bookieIndex);\n+        completed = false;\n \n-        sendWriteRequest(bookieIndex, replicaIndex);\n+        sendWriteRequest(bookieIndex);\n     }\n \n     void initiate(ChannelBuffer toSend) {\n         this.toSend = toSend;\n-        for (int i = 0; i < successesSoFar.length; i++) {\n-            int bookieIndex = lh.distributionSchedule.getBookieIndex(entryId, i);\n-            sendWriteRequest(bookieIndex, i);\n+        for (int bookieIndex : writeSet) {\n+            sendWriteRequest(bookieIndex);\n         }\n     }\n \n     @Override\n     public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n+        int bookieIndex = (Integer) ctx;\n \n-        Integer replicaIndex = (Integer) ctx;\n-        int bookieIndex = lh.distributionSchedule.getBookieIndex(entryId, replicaIndex);\n-\n-        if (!lh.metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n-            // ensemble has already changed, failure of this addr is immaterial\n-            LOG.warn(\"Write did not succeed: \" + ledgerId + \", \" + entryId + \". But we have already fixed it.\");\n-            return;\n-        }\n \n         switch (rc) {\n         case BKException.Code.OK:\n@@ -148,22 +151,32 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n             return;\n         }\n \n+        if (!writeSet.contains(bookieIndex)) {\n+            LOG.warn(\"Received a response for (lid:{}, eid:{}) from {}@{}, but it doesn't belong to {}.\",\n+                     new Object[] { ledgerId, entryId, addr, bookieIndex, writeSet });\n+            return;\n+        }\n \n-        if (!successesSoFar[replicaIndex]) {\n-            successesSoFar[replicaIndex] = true;\n-            numResponsesPending--;\n+        if (ackSet.addBookieAndCheck(bookieIndex) && !completed) {\n+            completed = true;\n \n-            // do some quick checks to see if some adds may have finished. All\n-            // this will be checked under locks again\n-            if (numResponsesPending == 0 && lh.pendingAddOps.peek() == this) {\n-                lh.sendAddSuccessCallbacks();\n-            }\n+            LOG.debug(\"Complete (lid:{}, eid:{}).\", ledgerId, entryId);\n+            // when completed an entry, try to send success add callbacks in order\n+            lh.sendAddSuccessCallbacks();\n         }\n     }\n \n     void submitCallback(final int rc) {\n         cb.addComplete(rc, lh, entryId, ctx);\n-        lh.opCounterSem.release();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"PendingAddOp(lid:\").append(lh.ledgerId)\n+          .append(\", eid:\").append(entryId).append(\", completed:\")\n+          .append(completed).append(\")\");\n+        return sb.toString();\n     }\n \n }"},{"sha":"90c0554b7283622ee0d78503f46a408ce651f8cf","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":249,"deletions":80,"changes":329,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -20,159 +20,328 @@\n  * under the License.\n  *\n  */\n-\n import java.net.InetSocketAddress;\n-import java.nio.ByteBuffer;\n-import java.util.ArrayDeque;\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.ScheduledFuture;\n import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.NoSuchElementException;\n import java.util.Queue;\n+import java.util.BitSet;\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.List;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n-import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBufferInputStream;\n \n-import java.io.IOException;\n-\n /**\n  * Sequence of entries of a ledger that represents a pending read operation.\n  * When all the data read has come back, the application callback is called.\n  * This class could be improved because we could start pushing data to the\n  * application as soon as it arrives rather than waiting for the whole thing.\n  *\n  */\n-\n class PendingReadOp implements Enumeration<LedgerEntry>, ReadEntryCallback {\n     Logger LOG = LoggerFactory.getLogger(PendingReadOp.class);\n \n-    Queue<LedgerEntry> seq;\n+    final int speculativeReadTimeout;\n+    final private ScheduledExecutorService scheduler;\n+    private ScheduledFuture<?> speculativeTask = null;\n+    Queue<LedgerEntryRequest> seq;\n+    Set<InetSocketAddress> heardFromHosts;\n     ReadCallback cb;\n     Object ctx;\n     LedgerHandle lh;\n-    long numPendingReads;\n+    long numPendingEntries;\n     long startEntryId;\n     long endEntryId;\n+    final int maxMissedReadsAllowed;\n+\n+    class LedgerEntryRequest extends LedgerEntry {\n+        final static int NOT_FOUND = -1;\n+        int nextReplicaIndexToReadFrom = 0;\n+        AtomicBoolean complete = new AtomicBoolean(false);\n+\n+        int firstError = BKException.Code.OK;\n+        int numMissedEntryReads = 0;\n+\n+        final ArrayList<InetSocketAddress> ensemble;\n+        final List<Integer> writeSet;\n+        final BitSet sentReplicas;\n+        final BitSet erroredReplicas;\n+\n+        LedgerEntryRequest(ArrayList<InetSocketAddress> ensemble, long lId, long eId) {\n+            super(lId, eId);\n+\n+            this.ensemble = ensemble;\n+            this.writeSet = lh.distributionSchedule.getWriteSet(entryId);\n+            this.sentReplicas = new BitSet(lh.getLedgerMetadata().getWriteQuorumSize());\n+            this.erroredReplicas = new BitSet(lh.getLedgerMetadata().getWriteQuorumSize());\n+        }\n+\n+        private int getReplicaIndex(InetSocketAddress host) {\n+            int bookieIndex = ensemble.indexOf(host);\n+            if (bookieIndex == -1) {\n+                return NOT_FOUND;\n+            }\n+            return writeSet.indexOf(bookieIndex);\n+        }\n+\n+        private BitSet getSentToBitSet() {\n+            BitSet b = new BitSet(ensemble.size());\n+\n+            for (int i = 0; i < sentReplicas.length(); i++) {\n+                if (sentReplicas.get(i)) {\n+                    b.set(writeSet.get(i));\n+                }\n+            }\n+            return b;\n+        }\n+\n+        private BitSet getHeardFromBitSet(Set<InetSocketAddress> heardFromHosts) {\n+            BitSet b = new BitSet(ensemble.size());\n+            for (InetSocketAddress i : heardFromHosts) {\n+                int index = ensemble.indexOf(i);\n+                if (index != -1) {\n+                    b.set(index);\n+                }\n+            }\n+            return b;\n+        }\n+\n+        private boolean readsOutstanding() {\n+            return (sentReplicas.cardinality() - erroredReplicas.cardinality()) > 0;\n+        }\n+\n+        /**\n+         * Send to next replica speculatively, if required and possible.\n+         * This returns the host we may have sent to for unit testing.\n+         * @return host we sent to if we sent. null otherwise.\n+         */\n+        synchronized InetSocketAddress maybeSendSpeculativeRead(Set<InetSocketAddress> heardFromHosts) {\n+            if (nextReplicaIndexToReadFrom >= lh.getLedgerMetadata().getWriteQuorumSize()) {\n+                return null;\n+            }\n+\n+            BitSet sentTo = getSentToBitSet();\n+            BitSet heardFrom = getHeardFromBitSet(heardFromHosts);\n+            sentTo.and(heardFrom);\n+\n+            // only send another read, if we have had no response at all (even for other entries)\n+            // from any of the other bookies we have sent the request to\n+            if (sentTo.cardinality() == 0) {\n+                return sendNextRead();\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        synchronized InetSocketAddress sendNextRead() {\n+            if (nextReplicaIndexToReadFrom >= lh.metadata.getWriteQuorumSize()) {\n+                // we are done, the read has failed from all replicas, just fail the\n+                // read\n+\n+                // Do it a bit pessimistically, only when finished trying all replicas\n+                // to check whether we received more missed reads than maxMissedReadsAllowed\n+                if (BKException.Code.BookieHandleNotAvailableException == firstError &&\n+                    numMissedEntryReads > maxMissedReadsAllowed) {\n+                    firstError = BKException.Code.NoSuchEntryException;\n+                }\n+\n+                submitCallback(firstError);\n+                return null;\n+            }\n+\n+            int replica = nextReplicaIndexToReadFrom;\n+            int bookieIndex = lh.distributionSchedule.getWriteSet(entryId).get(nextReplicaIndexToReadFrom);\n+            nextReplicaIndexToReadFrom++;\n+\n+            try {\n+                InetSocketAddress to = ensemble.get(bookieIndex);\n+                sendReadTo(to, this);\n+                sentReplicas.set(replica);\n+                return to;\n+            } catch (InterruptedException ie) {\n+                LOG.error(\"Interrupted reading entry \" + this, ie);\n+                Thread.currentThread().interrupt();\n+                submitCallback(BKException.Code.ReadException);\n+                return null;\n+            }\n+        }\n+\n+        synchronized void logErrorAndReattemptRead(InetSocketAddress host, String errMsg, int rc) {\n+            if (BKException.Code.OK == firstError ||\n+                BKException.Code.NoSuchEntryException == firstError) {\n+                firstError = rc;\n+            } else if (BKException.Code.BookieHandleNotAvailableException == firstError &&\n+                       BKException.Code.NoSuchEntryException != rc) {\n+                // if other exception rather than NoSuchEntryException is returned\n+                // we need to update firstError to indicate that it might be a valid read but just failed.\n+                firstError = rc;\n+            }\n+            if (BKException.Code.NoSuchEntryException == rc) {\n+                ++numMissedEntryReads;\n+            }\n+\n+            LOG.error(errMsg + \" while reading entry: \" + entryId + \" ledgerId: \" + lh.ledgerId + \" from bookie: \"\n+                      + host);\n+\n+            int replica = getReplicaIndex(host);\n+            if (replica == NOT_FOUND) {\n+                LOG.error(\"Received error from a host which is not in the ensemble {} {}.\", host, ensemble);\n+                return;\n+            }\n+            erroredReplicas.set(replica);\n+\n+            if (!readsOutstanding()) {\n+                sendNextRead();\n+            }\n+        }\n+\n+        // return true if we managed to complete the entry\n+        // return false if the read entry is not complete or it is already completed before\n+        boolean complete(InetSocketAddress host, final ChannelBuffer buffer) {\n+            ChannelBufferInputStream is;\n+            try {\n+                is = lh.macManager.verifyDigestAndReturnData(entryId, buffer);\n+            } catch (BKDigestMatchException e) {\n+                logErrorAndReattemptRead(host, \"Mac mismatch\", BKException.Code.DigestMatchException);\n+                return false;\n+            }\n \n-    PendingReadOp(LedgerHandle lh, long startEntryId, long endEntryId, ReadCallback cb, Object ctx) {\n+            if (!complete.getAndSet(true)) {\n+                entryDataStream = is;\n \n-        seq = new ArrayDeque<LedgerEntry>((int) (endEntryId - startEntryId));\n+                /*\n+                 * The length is a long and it is the last field of the metadata of an entry.\n+                 * Consequently, we have to subtract 8 from METADATA_LENGTH to get the length.\n+                 */\n+                length = buffer.getLong(DigestManager.METADATA_LENGTH - 8);\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+\n+        boolean isComplete() {\n+            return complete.get();\n+        }\n+\n+        public String toString() {\n+            return String.format(\"L%d-E%d\", ledgerId, entryId);\n+        }\n+    }\n+\n+    PendingReadOp(LedgerHandle lh, ScheduledExecutorService scheduler,\n+                  long startEntryId, long endEntryId, ReadCallback cb, Object ctx) {\n+        seq = new ArrayBlockingQueue<LedgerEntryRequest>((int) ((endEntryId + 1) - startEntryId));\n         this.cb = cb;\n         this.ctx = ctx;\n         this.lh = lh;\n         this.startEntryId = startEntryId;\n         this.endEntryId = endEntryId;\n-        numPendingReads = endEntryId - startEntryId + 1;\n+        this.scheduler = scheduler;\n+        numPendingEntries = endEntryId - startEntryId + 1;\n+        maxMissedReadsAllowed = lh.metadata.getWriteQuorumSize() - lh.metadata.getAckQuorumSize();\n+        speculativeReadTimeout = lh.bk.getConf().getSpeculativeReadTimeout();\n+        heardFromHosts = new HashSet<InetSocketAddress>();\n     }\n \n     public void initiate() throws InterruptedException {\n         long nextEnsembleChange = startEntryId, i = startEntryId;\n \n         ArrayList<InetSocketAddress> ensemble = null;\n-        do {\n \n-            if(LOG.isDebugEnabled()) {\n-                LOG.debug(\"Acquiring lock: \" + i);\n-            }\n+        if (speculativeReadTimeout > 0) {\n+            speculativeTask = scheduler.scheduleWithFixedDelay(new Runnable() {\n+                    public void run() {\n+                        int x = 0;\n+                        for (LedgerEntryRequest r : seq) {\n+                            if (!r.isComplete()) {\n+                                if (null != r.maybeSendSpeculativeRead(heardFromHosts)) {\n+                                    LOG.debug(\"Send speculative read for {}. Hosts heard are {}.\",\n+                                              r, heardFromHosts);\n+                                    ++x;\n+                                }\n+                            }\n+                        }\n+                        if (x > 0) {\n+                            LOG.info(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n+                                     new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n+                        }\n+                    }\n+                }, speculativeReadTimeout, speculativeReadTimeout, TimeUnit.MILLISECONDS);\n+        }\n \n-            lh.opCounterSem.acquire();\n+        do {\n+            LOG.debug(\"Acquiring lock: {}\", i);\n \n             if (i == nextEnsembleChange) {\n                 ensemble = lh.metadata.getEnsemble(i);\n                 nextEnsembleChange = lh.metadata.getNextEnsembleChange(i);\n             }\n-            LedgerEntry entry = new LedgerEntry(lh.ledgerId, i);\n+            LedgerEntryRequest entry = new LedgerEntryRequest(ensemble, lh.ledgerId, i);\n             seq.add(entry);\n             i++;\n-            sendRead(ensemble, entry, BKException.Code.ReadException);\n \n+            entry.sendNextRead();\n         } while (i <= endEntryId);\n     }\n \n-    void sendRead(ArrayList<InetSocketAddress> ensemble, LedgerEntry entry, int lastErrorCode) {\n-        if (entry.nextReplicaIndexToReadFrom >= lh.metadata.quorumSize) {\n-            // we are done, the read has failed from all replicas, just fail the\n-            // read\n-            lh.opCounterSem.release();\n-            submitCallback(lastErrorCode);\n-            return;\n-        }\n+    private static class ReadContext {\n+        final InetSocketAddress to;\n+        final LedgerEntryRequest entry;\n \n-        int bookieIndex = lh.distributionSchedule.getBookieIndex(entry.entryId, entry.nextReplicaIndexToReadFrom);\n-        entry.nextReplicaIndexToReadFrom++;\n-        lh.bk.bookieClient.readEntry(ensemble.get(bookieIndex), lh.ledgerId, entry.entryId, \n-                                     this, entry);\n+        ReadContext(InetSocketAddress to, LedgerEntryRequest entry) {\n+            this.to = to;\n+            this.entry = entry;\n+        }\n     }\n \n-    void logErrorAndReattemptRead(LedgerEntry entry, String errMsg, int rc) {\n-        ArrayList<InetSocketAddress> ensemble = lh.metadata.getEnsemble(entry.entryId);\n-        int bookeIndex = lh.distributionSchedule.getBookieIndex(entry.entryId, entry.nextReplicaIndexToReadFrom - 1);\n-        LOG.error(errMsg + \" while reading entry: \" + entry.entryId + \" ledgerId: \" + lh.ledgerId + \" from bookie: \"\n-                  + ensemble.get(bookeIndex));\n-        sendRead(ensemble, entry, rc);\n-        return;\n+    void sendReadTo(InetSocketAddress to, LedgerEntryRequest entry) throws InterruptedException {\n+        lh.throttler.acquire();\n+\n+        lh.bk.bookieClient.readEntry(to, lh.ledgerId, entry.entryId, \n+                                     this, new ReadContext(to, entry));\n     }\n \n     @Override\n     public void readEntryComplete(int rc, long ledgerId, final long entryId, final ChannelBuffer buffer, Object ctx) {\n-        final LedgerEntry entry = (LedgerEntry) ctx;\n-\n-        // if we just read only one entry, and this entry is not existed (in recoveryRead case)\n-        // we don't need to do ReattemptRead, otherwise we could not handle following case:\n-        //\n-        // an empty ledger with quorum (bk1, bk2), bk2 is failed forever.\n-        // bk1 return NoLedgerException, client do ReattemptRead to bk2 but bk2 isn't connected\n-        // so the read 0 entry would failed. this ledger could never be closed.\n-        if (startEntryId == endEntryId) {\n-            if (BKException.Code.NoSuchLedgerExistsException == rc ||\n-                BKException.Code.NoSuchEntryException == rc) {\n-                lh.opCounterSem.release();\n-                submitCallback(rc);\n-                return;\n-            }\n-        }\n+        final ReadContext rctx = (ReadContext)ctx;\n+        final LedgerEntryRequest entry = rctx.entry;\n \n         if (rc != BKException.Code.OK) {\n-            logErrorAndReattemptRead(entry, \"Error: \" + BKException.getMessage(rc), rc);\n+            entry.logErrorAndReattemptRead(rctx.to, \"Error: \" + BKException.getMessage(rc), rc);\n             return;\n         }\n \n-        ChannelBufferInputStream is;\n-        try {\n-            is = lh.macManager.verifyDigestAndReturnData(entryId, buffer);\n-        } catch (BKDigestMatchException e) {\n-            logErrorAndReattemptRead(entry, \"Mac mismatch\", BKException.Code.DigestMatchException);\n-            return;\n-        }\n-\n-        entry.entryDataStream = is;\n+        heardFromHosts.add(rctx.to);\n \n-        /*\n-         * The length is a long and it is the last field of the metadata of an entry.\n-         * Consequently, we have to subtract 8 from METADATA_LENGTH to get the length.\n-         */\n-        entry.length = buffer.getLong(DigestManager.METADATA_LENGTH - 8);\n-\n-        numPendingReads--;\n-        if (numPendingReads == 0) {\n-            submitCallback(BKException.Code.OK);\n-        }\n-\n-        if(LOG.isDebugEnabled()) {\n-            LOG.debug(\"Releasing lock: \" + entryId);\n+        if (entry.complete(rctx.to, buffer)) {\n+            numPendingEntries--;\n+            if (numPendingEntries == 0) {\n+                submitCallback(BKException.Code.OK);\n+            }\n         }\n \n-        lh.opCounterSem.release();\n-\n-        if(numPendingReads < 0)\n+        if(numPendingEntries < 0)\n             LOG.error(\"Read too many values\");\n     }\n \n     private void submitCallback(int code) {\n+        if (speculativeTask != null) {\n+            speculativeTask.cancel(true);\n+            speculativeTask = null;\n+        }\n         cb.readComplete(code, lh, PendingReadOp.this, PendingReadOp.this.ctx);\n     }\n     public boolean hasMoreElements() {"},{"sha":"a07755635d4c2ca96856e611dcb503c75790a9f3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadLastConfirmedOp.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,5 +1,5 @@\n-package org.apache.bookkeeper.client;\n-/* Licensed to the Apache Software Foundation (ASF) under one\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n  * regarding copyright ownership.  The ASF licenses this file\n@@ -15,9 +15,8 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n \n-import java.util.EnumSet;\n-import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n import org.apache.bookkeeper.client.DigestManager.RecoveryData;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n@@ -31,7 +30,7 @@\n  *\n  */\n class ReadLastConfirmedOp implements ReadEntryCallback {\n-    static final Logger LOG = LoggerFactory.getLogger(LedgerRecoveryOp.class);\n+    static final Logger LOG = LoggerFactory.getLogger(ReadLastConfirmedOp.class);\n     LedgerHandle lh;\n     int numResponsesPending;\n     RecoveryData maxRecoveredData;\n@@ -51,7 +50,7 @@ public ReadLastConfirmedOp(LedgerHandle lh, LastConfirmedDataCallback cb) {\n         this.cb = cb;\n         this.maxRecoveredData = new RecoveryData(LedgerHandle.INVALID_ENTRY_ID, 0);\n         this.lh = lh;\n-        this.numResponsesPending = lh.metadata.ensembleSize;\n+        this.numResponsesPending = lh.metadata.getEnsembleSize();\n         this.coverageSet = lh.distributionSchedule.getCoverageSet();\n     }\n \n@@ -90,7 +89,8 @@ public synchronized void readEntryComplete(final int rc, final long ledgerId, fi\n             } catch (BKDigestMatchException e) {\n                 // Too bad, this bookie didn't give us a valid answer, we\n                 // still might be able to recover though so continue\n-                LOG.error(\"Mac mismatch while reading last entry from bookie: \"\n+                LOG.error(\"Mac mismatch for ledger: \" + ledgerId + \", entry: \" + entryId\n+                          + \" while reading last entry from bookie: \"\n                           + lh.metadata.currentEnsemble.get(bookieIndex));\n             }\n         }\n@@ -109,9 +109,8 @@ public synchronized void readEntryComplete(final int rc, final long ledgerId, fi\n             && coverageSet.addBookieAndCheckCovered(bookieIndex)\n             && !completed) {\n             completed = true;\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Read Complete with enough validResponses\");\n-            }\n+            LOG.debug(\"Read Complete with enough validResponses for ledger: {}, entry: {}\",\n+                ledgerId, entryId);\n \n             cb.readLastConfirmedDataComplete(BKException.Code.OK, maxRecoveredData);\n             return;"},{"sha":"f6c1ea996769e2e068bea2d067dda1cc3d81d7d2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":31,"deletions":4,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -25,7 +25,7 @@\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import java.security.GeneralSecurityException;\n-\n+import java.net.InetSocketAddress;\n \n /**\n  * Read only ledger handle. This ledger handle allows you to \n@@ -52,12 +52,12 @@ public void asyncClose(CloseCallback cb, Object ctx) {\n     }\n     \n     @Override\n-    public void addEntry(byte[] data) throws InterruptedException, BKException {\n-        addEntry(data, 0, data.length);\n+    public long addEntry(byte[] data) throws InterruptedException, BKException {\n+        return addEntry(data, 0, data.length);\n     }\n     \n     @Override\n-    public void addEntry(byte[] data, int offset, int length)\n+    public long addEntry(byte[] data, int offset, int length)\n             throws InterruptedException, BKException {\n         LOG.error(\"Tried to add entry on a Read-Only ledger handle, ledgerid=\" + ledgerId);        \n         throw BKException.create(BKException.Code.IllegalOpException);\n@@ -76,4 +76,31 @@ public void asyncAddEntry(final byte[] data, final int offset, final int length,\n         cb.addComplete(BKException.Code.IllegalOpException, this,\n                        LedgerHandle.INVALID_ENTRY_ID, ctx);\n     }\n+\n+    @Override\n+    void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n+        blockAddCompletions.incrementAndGet();\n+        synchronized (metadata) {\n+            try {\n+                if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n+                    // ensemble has already changed, failure of this addr is immaterial\n+                    LOG.warn(\"Write did not succeed to {}, bookieIndex {}, but we have already fixed it.\",\n+                             addr, bookieIndex);\n+                    blockAddCompletions.decrementAndGet();\n+                    return;\n+                }\n+\n+                replaceBookieInMetadata(addr, bookieIndex);\n+\n+                blockAddCompletions.decrementAndGet();\n+                // the failed bookie has been replaced\n+                unsetSuccessAndSendWriteRequest(bookieIndex);\n+            } catch (BKException.BKNotEnoughBookiesException e) {\n+                LOG.error(\"Could not get additional bookie to \"\n+                          + \"remake ensemble, closing ledger: \" + ledgerId);\n+                handleUnrecoverableErrorDuringAdd(e.getCode());\n+                return;\n+            }\n+        }\n+    }\n }"},{"sha":"b34ff754f924fd989a9cea4cc0783cde5fbaff99","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java","status":"modified","additions":35,"deletions":16,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/RoundRobinDistributionSchedule.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,9 +15,14 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n \n import org.apache.bookkeeper.util.MathUtils;\n \n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+\n /**\n  * A specific {@link DistributionSchedule} that places entries in round-robin\n  * fashion. For ensemble size 3, and quorum size 2, Entry 0 goes to bookie 0 and\n@@ -28,29 +31,39 @@\n  *\n  */\n class RoundRobinDistributionSchedule implements DistributionSchedule {\n-    int quorumSize;\n-    int ensembleSize;\n+    private int writeQuorumSize;\n+    private int ackQuorumSize;\n+    private int ensembleSize;\n \n \n-    public RoundRobinDistributionSchedule(int quorumSize, int ensembleSize) {\n-        this.quorumSize = quorumSize;\n+    public RoundRobinDistributionSchedule(int writeQuorumSize, int ackQuorumSize, int ensembleSize) {\n+        this.writeQuorumSize = writeQuorumSize;\n+        this.ackQuorumSize = ackQuorumSize;\n         this.ensembleSize = ensembleSize;\n     }\n \n     @Override\n-    public int getBookieIndex(long entryId, int replicaIndex) {\n-        return (int) ((entryId + replicaIndex) % ensembleSize);\n+    public List<Integer> getWriteSet(long entryId) {\n+        List<Integer> set = new ArrayList<Integer>();\n+        for (int i = 0; i < this.writeQuorumSize; i++) {\n+            set.add((int)((entryId + i) % ensembleSize));\n+        }\n+        return set;\n     }\n \n     @Override\n-    public int getReplicaIndex(long entryId, int bookieIndex) {\n-        // NOTE: Java's % operator returns the sign of the dividend and is hence\n-        // not always positive\n-\n-        int replicaIndex = MathUtils.signSafeMod(bookieIndex - entryId, ensembleSize);\n-\n-        return replicaIndex < quorumSize ? replicaIndex : -1;\n+    public AckSet getAckSet() {\n+        final HashSet<Integer> ackSet = new HashSet<Integer>();\n+        return new AckSet() {\n+            public boolean addBookieAndCheck(int bookieIndexHeardFrom) {\n+                ackSet.add(bookieIndexHeardFrom);\n+                return ackSet.size() >= ackQuorumSize;\n+            }\n \n+            public void removeBookie(int bookie) {\n+                ackSet.remove(bookie);\n+            }\n+        };\n     }\n \n     private class RRQuorumCoverageSet implements QuorumCoverageSet {\n@@ -69,7 +82,7 @@ public synchronized boolean addBookieAndCheckCovered(int bookieIndexHeardFrom) {\n                 return true;\n             }\n \n-            for (int i = 0; i < quorumSize; i++) {\n+            for (int i = 0; i < ackQuorumSize; i++) {\n                 int quorumStartIndex = MathUtils.signSafeMod(bookieIndexHeardFrom - i, ensembleSize);\n                 if (!covered[quorumStartIndex]) {\n                     covered[quorumStartIndex] = true;\n@@ -84,7 +97,13 @@ public synchronized boolean addBookieAndCheckCovered(int bookieIndexHeardFrom) {\n         }\n     }\n \n+    @Override\n     public QuorumCoverageSet getCoverageSet() {\n         return new RRQuorumCoverageSet();\n     }\n+    \n+    @Override\n+    public boolean hasEntry(long entryId, int bookieIndex) {\n+        return getWriteSet(entryId).contains(bookieIndex);\n+    }\n }"},{"sha":"5c3a8f9f5faf41055de0be1b636120406a989783","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","status":"modified","additions":123,"deletions":0,"changes":123,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/AbstractConfiguration.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -26,16 +26,37 @@\n import org.apache.commons.configuration.SystemConfiguration;\n \n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Abstract configuration\n  */\n public abstract class AbstractConfiguration extends CompositeConfiguration {\n \n+    static final Logger LOG = LoggerFactory.getLogger(AbstractConfiguration.class);\n+\n+    private static ClassLoader defaultLoader;\n+    static {\n+        defaultLoader = Thread.currentThread().getContextClassLoader();\n+        if (null == defaultLoader) {\n+            defaultLoader = AbstractConfiguration.class.getClassLoader();\n+        }\n+    }\n+\n     // Ledger Manager\n     protected final static String LEDGER_MANAGER_TYPE = \"ledgerManagerType\";\n+    protected final static String LEDGER_MANAGER_FACTORY_CLASS = \"ledgerManagerFactoryClass\";\n     protected final static String ZK_LEDGERS_ROOT_PATH = \"zkLedgersRootPath\";\n     protected final static String AVAILABLE_NODE = \"available\";\n+    protected final static String REREPLICATION_ENTRY_BATCH_SIZE = \"rereplicationEntryBatchSize\";\n+\n+    // Metastore settings, only being used when LEDGER_MANAGER_FACTORY_CLASS is MSLedgerManagerFactory\n+    protected final static String METASTORE_IMPL_CLASS = \"metastoreImplClass\";\n+    protected final static String METASTORE_MAX_ENTRIES_PER_SCAN = \"metastoreMaxEntriesPerScan\";\n+\n     protected AbstractConfiguration() {\n         super();\n         // add configuration for system properties\n@@ -64,12 +85,24 @@ public void loadConf(AbstractConfiguration baseConf) {\n         addConfiguration(baseConf); \n     }\n \n+    /**\n+     * Load configuration from other configuration object\n+     *\n+     * @param otherConf\n+     *          Other configuration object\n+     */\n+    public void loadConf(Configuration otherConf) {\n+        addConfiguration(otherConf);\n+    }\n+\n     /**\n      * Set Ledger Manager Type.\n      *\n      * @param lmType\n      *          Ledger Manager Type\n+     * @deprecated replaced by {@link #setLedgerManagerFactoryClass}\n      */\n+    @Deprecated\n     public void setLedgerManagerType(String lmType) {\n         setProperty(LEDGER_MANAGER_TYPE, lmType); \n     }\n@@ -79,11 +112,45 @@ public void setLedgerManagerType(String lmType) {\n      *\n      * @return ledger manager type\n      * @throws ConfigurationException\n+     * @deprecated replaced by {@link #getLedgerManagerFactoryClass()}\n      */\n+    @Deprecated\n     public String getLedgerManagerType() {\n         return getString(LEDGER_MANAGER_TYPE);\n     }\n \n+    /**\n+     * Set Ledger Manager Factory Class Name.\n+     *\n+     * @param factoryClassName\n+     *          Ledger Manager Factory Class Name\n+     */\n+    public void setLedgerManagerFactoryClassName(String factoryClassName) {\n+        setProperty(LEDGER_MANAGER_FACTORY_CLASS, factoryClassName);\n+    }\n+\n+    /**\n+     * Set Ledger Manager Factory Class.\n+     *\n+     * @param factoryClass\n+     *          Ledger Manager Factory Class\n+     */\n+    public void setLedgerManagerFactoryClass(Class<? extends LedgerManagerFactory> factoryClass) {\n+        setProperty(LEDGER_MANAGER_FACTORY_CLASS, factoryClass.getName());\n+    }\n+\n+    /**\n+     * Get ledger manager factory class.\n+     *\n+     * @return ledger manager factory class\n+     */\n+    public Class<? extends LedgerManagerFactory> getLedgerManagerFactoryClass()\n+        throws ConfigurationException {\n+        return ReflectionUtils.getClass(this, LEDGER_MANAGER_FACTORY_CLASS,\n+                                        null, LedgerManagerFactory.class,\n+                                        defaultLoader);\n+    }\n+\n     /**\n      * Set Zk Ledgers Root Path.\n      *\n@@ -110,4 +177,60 @@ public String getZkLedgersRootPath() {\n     public String getZkAvailableBookiesPath() {\n         return getZkLedgersRootPath() + \"/\" + AVAILABLE_NODE;\n     }\n+    \n+    /**\n+     * Set the max entries to keep in fragment for re-replication. If fragment\n+     * has more entries than this count, then the original fragment will be\n+     * split into multiple small logical fragments by keeping max entries count\n+     * to rereplicationEntryBatchSize. So, re-replication will happen in batches\n+     * wise.\n+     */\n+    public void setRereplicationEntryBatchSize(long rereplicationEntryBatchSize) {\n+        setProperty(REREPLICATION_ENTRY_BATCH_SIZE, rereplicationEntryBatchSize);\n+    }\n+\n+    /**\n+     * Get the re-replication entry batch size\n+     */\n+    public long getRereplicationEntryBatchSize() {\n+        return getLong(REREPLICATION_ENTRY_BATCH_SIZE, 10);\n+    }\n+\n+    /**\n+     * Get metastore implementation class.\n+     *\n+     * @return metastore implementation class name.\n+     */\n+    public String getMetastoreImplClass() {\n+        return getString(METASTORE_IMPL_CLASS);\n+    }\n+\n+    /**\n+     * Set metastore implementation class.\n+     *\n+     * @param metastoreImplClass\n+     *          Metastore implementation Class name.\n+     */\n+    public void setMetastoreImplClass(String metastoreImplClass) {\n+        setProperty(METASTORE_IMPL_CLASS, metastoreImplClass);\n+    }\n+\n+    /**\n+     * Get max entries per scan in metastore.\n+     *\n+     * @return max entries per scan in metastore.\n+     */\n+    public int getMetastoreMaxEntriesPerScan() {\n+        return getInt(METASTORE_MAX_ENTRIES_PER_SCAN, 50);\n+    }\n+\n+    /**\n+     * Set max entries per scan in metastore.\n+     *\n+     * @param maxEntries\n+     *          Max entries per scan in metastore.\n+     */\n+    public void setMetastoreMaxEntriesPerScan(int maxEntries) {\n+        setProperty(METASTORE_MAX_ENTRIES_PER_SCAN, maxEntries);\n+    }\n }"},{"sha":"0a9f9ac3e40cd22e37bc6dbe69dcb85c1641cc8a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -43,6 +43,7 @@\n     // NIO Parameters\n     protected final static String CLIENT_TCP_NODELAY = \"clientTcpNoDelay\";\n     protected final static String READ_TIMEOUT = \"readTimeout\";\n+    protected final static String SPECULATIVE_READ_TIMEOUT = \"speculativeReadTimeout\";\n \n     // Number Woker Threads\n     protected final static String NUM_WORKER_THREADS = \"numWorkerThreads\";\n@@ -230,6 +231,8 @@ public ClientConfiguration setZkTimeout(int zkTimeout) {\n      * seconds we wait without hearing a response from a bookie\n      * before we consider it failed.\n      *\n+     * The default is 5 seconds.\n+     *\n      * @return the current read timeout in seconds\n      */\n     public int getReadTimeout() {\n@@ -273,4 +276,39 @@ public ClientConfiguration setNumWorkerThreads(int numThreads) {\n         setProperty(NUM_WORKER_THREADS, numThreads);\n         return this;\n     }\n+\n+    /**\n+     * Get the period of time after which a speculative entry read should be triggered.\n+     * A speculative entry read is sent to the next replica bookie before\n+     * an error or response has been received for the previous entry read request.\n+     *\n+     * A speculative entry read is only sent if we have not heard from the current\n+     * replica bookie during the entire read operation which may comprise of many entries.\n+     *\n+     * Speculative reads allow the client to avoid having to wait for the connect timeout\n+     * in the case that a bookie has failed. It induces higher load on the network and on\n+     * bookies. This should be taken into account before changing this configuration value.\n+     *\n+     * @see org.apache.bookkeeper.client.LedgerHandle#asyncReadEntries\n+     * @return the speculative read timeout in milliseconds. Default 2000.\n+     */\n+    public int getSpeculativeReadTimeout() {\n+        return getInt(SPECULATIVE_READ_TIMEOUT, 2000);\n+    }\n+\n+    /**\n+     * Set the speculative read timeout. A lower timeout will reduce read latency in the\n+     * case of a failed bookie, while increasing the load on bookies and the network.\n+     *\n+     * The default is 2000 milliseconds. A value of 0 will disable speculative reads\n+     * completely.\n+     *\n+     * @see #getSpeculativeReadTimeout()\n+     * @param timeout the timeout value, in milliseconds\n+     * @return client configuration\n+     */\n+    public ClientConfiguration setSpeculativeReadTimeout(int timeout) {\n+        setProperty(SPECULATIVE_READ_TIMEOUT, timeout);\n+        return this;\n+    }\n }"},{"sha":"c400786fbdbaa6ba10f3696038f4b4f9bb070268","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -57,6 +57,14 @@\n     protected final static String ZK_SERVERS = \"zkServers\";\n     // Statistics Parameters\n     protected final static String ENABLE_STATISTICS = \"enableStatistics\";\n+    protected final static String OPEN_LEDGER_REREPLICATION_GRACE_PERIOD = \"openLedgerRereplicationGracePeriod\";\n+    //ReadOnly mode support on all disk full\n+    protected final static String READ_ONLY_MODE_ENABLED = \"readOnlyModeEnabled\";\n+    //Disk utilization\n+    protected final static String DISK_USAGE_THRESHOLD = \"diskUsageThreshold\";\n+    protected final static String DISK_CHECK_INTERVAL = \"diskCheckInterval\";\n+    protected final static String AUDITOR_PERIODIC_CHECK_INTERVAL = \"auditorPeriodicCheckInterval\";\n+    protected final static String AUTO_RECOVERY_DAEMON_ENABLED = \"autoRecoveryDaemonEnabled\";\n \n     /**\n      * Construct a default configuration object\n@@ -546,4 +554,141 @@ public ServerConfiguration setMajorCompactionInterval(long interval) {\n         setProperty(MAJOR_COMPACTION_INTERVAL, interval);\n         return this;\n     }\n+    \n+    /**\n+     * Set the grace period which the rereplication worker will wait before\n+     * fencing and rereplicating a ledger fragment which is still being written\n+     * to, on bookie failure.\n+     * \n+     * The grace period allows the writer to detect the bookie failure, and\n+     * start replicating the ledger fragment. If the writer writes nothing\n+     * during the grace period, the rereplication worker assumes that it has\n+     * crashed and fences the ledger, preventing any further writes to that \n+     * ledger.\n+     * \n+     * @see org.apache.bookkeeper.client.BookKeeper#openLedger\n+     * \n+     * @param waitTime time to wait before replicating ledger fragment\n+     */\n+    public void setOpenLedgerRereplicationGracePeriod(String waitTime) {\n+        setProperty(OPEN_LEDGER_REREPLICATION_GRACE_PERIOD, waitTime);\n+    }\n+\n+    /**\n+     * Get the grace period which the rereplication worker to wait before\n+     * fencing and rereplicating a ledger fragment which is still being written\n+     * to, on bookie failure.\n+     * \n+     * @return long\n+     */\n+    public long getOpenLedgerRereplicationGracePeriod() {\n+        return getLong(OPEN_LEDGER_REREPLICATION_GRACE_PERIOD, 30000);\n+    }\n+\n+    /**\n+     * Set the ReadOnlyModeEnabled status\n+     * \n+     * @param enabled enables read-only mode.\n+     * \n+     * @return ServerConfiguration \n+     */\n+    public ServerConfiguration setReadOnlyModeEnabled(boolean enabled) {\n+        setProperty(READ_ONLY_MODE_ENABLED, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Get ReadOnlyModeEnabled status\n+     * \n+     * @return boolean\n+     */\n+    public boolean isReadOnlyModeEnabled() {\n+        return getBoolean(READ_ONLY_MODE_ENABLED, false);\n+    }\n+\n+    /**\n+     * Set the Disk free space threshold as a fraction of the total\n+     * after which disk will be considered as full during disk check.\n+     * \n+     * @param threshold threshold to declare a disk full\n+     * \n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setDiskUsageThreshold(float threshold) {\n+        setProperty(DISK_USAGE_THRESHOLD, threshold);\n+        return this;\n+    }\n+\n+    /**\n+     * Returns disk free space threshold. By default it is 0.95.\n+     * \n+     * @return float\n+     */\n+    public float getDiskUsageThreshold() {\n+        return getFloat(DISK_USAGE_THRESHOLD, 0.95f);\n+    }\n+\n+    /**\n+     * Set the disk checker interval to monitor ledger disk space\n+     * \n+     * @param interval interval between disk checks for space.\n+     * \n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setDiskCheckInterval(int interval) {\n+        setProperty(DISK_CHECK_INTERVAL, interval);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the disk checker interval\n+     * \n+     * @return int\n+     */\n+    public int getDiskCheckInterval() {\n+        return getInt(DISK_CHECK_INTERVAL, 10 * 1000);\n+    }\n+\n+    /**\n+     * Set the regularity at which the auditor will run a check\n+     * of all ledgers. This should not be run very often, and at most,\n+     * once a day.\n+     *\n+     * @param interval The interval in seconds. e.g. 86400 = 1 day, 604800 = 1 week\n+     */\n+    public void setAuditorPeriodicCheckInterval(long interval) {\n+        setProperty(AUDITOR_PERIODIC_CHECK_INTERVAL, interval);\n+    }\n+\n+    /**\n+     * Get the regularity at which the auditor checks all ledgers.\n+     * @return The interval in seconds\n+     */\n+    public long getAuditorPeriodicCheckInterval() {\n+        return getLong(AUDITOR_PERIODIC_CHECK_INTERVAL, 86400);\n+    }\n+\n+    /**\n+     * Sets that whether the auto-recovery service can start along with Bookie\n+     * server itself or not\n+     *\n+     * @param enabled\n+     *            - true if need to start auto-recovery service. Otherwise\n+     *            false.\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setAutoRecoveryDaemonEnabled(boolean enabled) {\n+        setProperty(AUTO_RECOVERY_DAEMON_ENABLED, enabled);\n+        return this;\n+    }\n+\n+    /**\n+     * Get whether the Bookie itself can start auto-recovery service also or not\n+     *\n+     * @return true - if Bookie should start auto-recovery service along with\n+     *         it. false otherwise.\n+     */\n+    public boolean isAutoRecoveryDaemonEnabled() {\n+        return getBoolean(AUTO_RECOVERY_DAEMON_ENABLED, false);\n+    }\n }"},{"sha":"39889168ab0eb19af71c9edfbccef99e53467d99","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/jmx/BKMBeanRegistry.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/jmx/BKMBeanRegistry.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/jmx/BKMBeanRegistry.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/jmx/BKMBeanRegistry.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -21,7 +21,8 @@\n import javax.management.MalformedObjectNameException;\n import javax.management.ObjectName;\n \n-import org.apache.log4j.Logger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.apache.zookeeper.jmx.MBeanRegistry;\n import org.apache.zookeeper.jmx.ZKMBeanInfo;\n \n@@ -32,7 +33,7 @@\n  * will be stored in the zookeeper data tree instance as a virtual data tree.\n  */\n public class BKMBeanRegistry extends MBeanRegistry {\n-    static final Logger LOG = Logger.getLogger(BKMBeanRegistry.class);\n+    static final Logger LOG = LoggerFactory.getLogger(BKMBeanRegistry.class);\n     \n     static final String DOMAIN = \"org.apache.BookKeeperService\";\n "},{"sha":"78cb244222e9aacdf2278a68d433fd7e540e619d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":145,"deletions":127,"changes":272,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.meta;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,25 +15,34 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.Map;\n \n import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.util.ZkUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import org.apache.zookeeper.AsyncCallback;\n+import org.apache.zookeeper.AsyncCallback.DataCallback;\n+import org.apache.zookeeper.AsyncCallback.VoidCallback;\n+import org.apache.zookeeper.AsyncCallback.StatCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.data.Stat;\n \n /**\n  * Abstract ledger manager based on zookeeper, which provides common methods such as query zk nodes.\n@@ -44,11 +51,6 @@\n \n     static Logger LOG = LoggerFactory.getLogger(AbstractZkLedgerManager.class);\n \n-    // Ledger Node Prefix\n-    static public final String LEDGER_NODE_PREFIX = \"L\";\n-    static final String AVAILABLE_NODE = \"available\";\n-    static final String COOKIES_NODE = \"cookies\";\n-\n     protected final AbstractConfiguration conf;\n     protected final ZooKeeper zk;\n     protected final String ledgerRootPath;\n@@ -60,126 +62,133 @@\n      *          Configuration object\n      * @param zk\n      *          ZooKeeper Client Handle\n-     * @param ledgerRootPath\n-     *          ZooKeeper Path to store ledger metadata\n      */\n-    protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk,\n-                                      String ledgerRootPath) {\n+    protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         this.conf = conf;\n         this.zk = zk;\n-        this.ledgerRootPath = ledgerRootPath;\n+        this.ledgerRootPath = conf.getZkLedgersRootPath();\n     }\n \n     /**\n-     * Get all the ledgers in a single zk node\n+     * Get the znode path that is used to store ledger metadata\n      *\n-     * @param nodePath\n-     *          Zookeeper node path\n-     * @param getLedgersCallback\n-     *          callback function to process ledgers in a single node\n+     * @param ledgerId\n+     *          Ledger ID\n+     * @return ledger node path\n      */\n-    protected void asyncGetLedgersInSingleNode(final String nodePath, final GenericCallback<HashSet<Long>> getLedgersCallback) {\n-        // First sync ZK to make sure we're reading the latest active/available ledger nodes.\n-        zk.sync(nodePath, new AsyncCallback.VoidCallback() {\n+    protected abstract String getLedgerPath(long ledgerId);\n+\n+    /**\n+     * Get ledger id from its znode ledger path\n+     *\n+     * @param ledgerPath\n+     *          Ledger path to store metadata\n+     * @return ledger id\n+     * @throws IOException when the ledger path is invalid\n+     */\n+    protected abstract long getLedgerId(String ledgerPath) throws IOException;\n+\n+    /**\n+     * Removes ledger metadata from ZooKeeper if version matches.\n+     *\n+     * @param   ledgerId    ledger identifier\n+     * @param   version     local version of metadata znode\n+     * @param   cb          callback object\n+     */\n+    @Override\n+    public void removeLedgerMetadata(final long ledgerId, final Version version,\n+            final GenericCallback<Void> cb) {\n+        int znodeVersion = -1;\n+        if (Version.NEW == version) {\n+            LOG.error(\"Request to delete ledger {} metadata with version set to the initial one\", ledgerId);\n+            cb.operationComplete(BKException.Code.MetadataVersionException, (Void)null);\n+            return;\n+        } else if (Version.ANY != version) {\n+            if (!(version instanceof ZkVersion)) {\n+                LOG.info(\"Not an instance of ZKVersion: {}\", ledgerId);\n+                cb.operationComplete(BKException.Code.MetadataVersionException, (Void)null);\n+                return;\n+            } else {\n+                znodeVersion = ((ZkVersion)version).getZnodeVersion();\n+            }\n+        }\n+\n+        zk.delete(getLedgerPath(ledgerId), znodeVersion, new VoidCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Sync node path \" + path + \" return : \" + rc);\n+                int bkRc;\n+                if (rc == KeeperException.Code.NONODE.intValue()) {\n+                    LOG.warn(\"Ledger node does not exist in ZooKeeper: ledgerId={}\", ledgerId);\n+                    bkRc = BKException.Code.NoSuchLedgerExistsException;\n+                } else if (rc == KeeperException.Code.OK.intValue()) {\n+                    bkRc = BKException.Code.OK;\n+                } else {\n+                    bkRc = BKException.Code.ZKException;\n                 }\n-                if (rc != Code.OK.intValue()) {\n-                    LOG.error(\"ZK error syncing the ledgers node when getting children: \", KeeperException\n-                            .create(KeeperException.Code.get(rc), path));\n-                    getLedgersCallback.operationComplete(rc, null);\n-                    return;\n-                }\n-                // Sync has completed successfully so now we can poll ZK\n-                // and read in the latest set of active ledger nodes.\n-                doAsyncGetLedgersInSingleNode(nodePath, getLedgersCallback);\n+                cb.operationComplete(bkRc, (Void)null);\n             }\n         }, null);\n     }\n \n-    private void doAsyncGetLedgersInSingleNode(final String nodePath,\n-                                               final GenericCallback<HashSet<Long>> getLedgersCallback) {\n-        zk.getChildren(nodePath, false, new AsyncCallback.ChildrenCallback() {\n+    @Override\n+    public void readLedgerMetadata(final long ledgerId, final GenericCallback<LedgerMetadata> readCb) {\n+        zk.getData(getLedgerPath(ledgerId), false, new DataCallback() {\n             @Override\n-            public void processResult(int rc, String path, Object ctx, List<String> ledgerNodes) {\n-                if (rc != Code.OK.intValue()) {\n-                    LOG.error(\"Error polling ZK for the available ledger nodes: \", KeeperException\n-                            .create(KeeperException.Code.get(rc), path));\n-                    getLedgersCallback.operationComplete(rc, null);\n+            public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n+                if (rc == KeeperException.Code.NONODE.intValue()) {\n+                    if (LOG.isDebugEnabled()) {\n+                        LOG.debug(\"No such ledger: \" + ledgerId,\n+                                  KeeperException.create(KeeperException.Code.get(rc), path));\n+                    }\n+                    readCb.operationComplete(BKException.Code.NoSuchLedgerExistsException, null);\n                     return;\n                 }\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Retrieved current set of ledger nodes: \" + ledgerNodes);\n-                }\n-                // Convert the ZK retrieved ledger nodes to a HashSet for easier comparisons.\n-                HashSet<Long> allActiveLedgers = new HashSet<Long>(ledgerNodes.size(), 1.0f);\n-                for (String ledgerNode : ledgerNodes) {\n-                    if (isSpecialZnode(ledgerNode)) {\n-                        continue;\n-                    }\n-                    try {\n-                        // convert the node path to ledger id according to different ledger manager implementation\n-                        allActiveLedgers.add(getLedgerId(path + \"/\" + ledgerNode));\n-                    } catch (IOException ie) {\n-                        LOG.warn(\"Error extracting ledgerId from ZK ledger node: \" + ledgerNode);\n-                        // This is a pretty bad error as it indicates a ledger node in ZK\n-                        // has an incorrect format. For now just continue and consider\n-                        // this as a non-existent ledger.\n-                        continue;\n-                    }\n+                if (rc != KeeperException.Code.OK.intValue()) {\n+                    LOG.error(\"Could not read metadata for ledger: \" + ledgerId,\n+                              KeeperException.create(KeeperException.Code.get(rc), path));\n+                    readCb.operationComplete(BKException.Code.ZKException, null);\n+                    return;\n                 }\n \n-                getLedgersCallback.operationComplete(rc, allActiveLedgers);\n-\n+                LedgerMetadata metadata;\n+                try {\n+                    metadata = LedgerMetadata.parseConfig(data, new ZkVersion(stat.getVersion()));\n+                } catch (IOException e) {\n+                    LOG.error(\"Could not parse ledger metadata for ledger: \" + ledgerId, e);\n+                    readCb.operationComplete(BKException.Code.ZKException, null);\n+                    return;\n+                }\n+                readCb.operationComplete(BKException.Code.OK, metadata);\n             }\n         }, null);\n     }\n \n-    private static class GetLedgersCtx {\n-        int rc;\n-        boolean done = false;\n-        HashSet<Long> ledgers = null;\n-    }\n-\n-    /**\n-     * Get all the ledgers in a single zk node\n-     *\n-     * @param nodePath\n-     *          Zookeeper node path\n-     * @throws IOException\n-     * @throws InterruptedException\n-     */\n-    protected HashSet<Long> getLedgersInSingleNode(final String nodePath)\n-        throws IOException, InterruptedException {\n-        final GetLedgersCtx ctx = new GetLedgersCtx();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Try to get ledgers of node : \" + nodePath);\n+    @Override\n+    public void writeLedgerMetadata(final long ledgerId, final LedgerMetadata metadata,\n+                                    final GenericCallback<Void> cb) {\n+        Version v = metadata.getVersion();\n+        if (Version.NEW == v || !(v instanceof ZkVersion)) {\n+            cb.operationComplete(BKException.Code.MetadataVersionException, null);\n+            return;\n         }\n-        asyncGetLedgersInSingleNode(nodePath, new GenericCallback<HashSet<Long>>() {\n-                @Override\n-                public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n-                    synchronized (ctx) {\n-                        if (Code.OK.intValue() == rc) {\n-                            ctx.ledgers = zkActiveLedgers;\n-                        }\n-                        ctx.rc = rc;\n-                        ctx.done = true;\n-                        ctx.notifyAll();\n-                    }\n+        final ZkVersion zv = (ZkVersion) v;\n+        zk.setData(getLedgerPath(ledgerId),\n+                   metadata.serialize(), zv.getZnodeVersion(),\n+                   new StatCallback() {\n+            @Override\n+            public void processResult(int rc, String path, Object ctx, Stat stat) {\n+                if (KeeperException.Code.BadVersion == rc) {\n+                    cb.operationComplete(BKException.Code.MetadataVersionException, null);\n+                } else if (KeeperException.Code.OK.intValue() == rc) {\n+                    // update metadata version\n+                    metadata.setVersion(zv.setZnodeVersion(stat.getVersion()));\n+                    cb.operationComplete(BKException.Code.OK, null);\n+                } else {\n+                    LOG.warn(\"Conditional update ledger metadata failed: \", KeeperException.Code.get(rc));\n+                    cb.operationComplete(BKException.Code.ZKException, null);\n                 }\n-            });\n-\n-        synchronized (ctx) {\n-            while (ctx.done == false) {\n-                ctx.wait();\n             }\n-        }\n-        if (Code.OK.intValue() != ctx.rc) {\n-            throw new IOException(\"Error on getting ledgers from node \" + nodePath);\n-        }\n-        return ctx.ledgers;\n+        }, null);\n     }\n \n     /**\n@@ -212,17 +221,16 @@ protected void asyncProcessLedgersInSingleNode(\n             final String path, final Processor<Long> processor,\n             final AsyncCallback.VoidCallback finalCb, final Object ctx,\n             final int successRc, final int failureRc) {\n-        asyncGetLedgersInSingleNode(path, new GenericCallback<HashSet<Long>>() {\n+        ZkUtils.getChildrenInSingleNode(zk, path, new GenericCallback<List<String>>() {\n             @Override\n-            public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n+            public void operationComplete(int rc, List<String> ledgerNodes) {\n                 if (Code.OK.intValue() != rc) {\n                     finalCb.processResult(failureRc, null, ctx);\n                     return;\n                 }\n \n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Processing ledgers : \" + zkActiveLedgers);\n-                }\n+                Set<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, path);\n+                LOG.debug(\"Processing ledgers: {}\", zkActiveLedgers);\n \n                 // no ledgers found, return directly\n                 if (zkActiveLedgers.size() == 0) {\n@@ -248,36 +256,46 @@ public void operationComplete(int rc, HashSet<Long> zkActiveLedgers) {\n      * @return true  if the znode is a special znode otherwise false\n      */\n     protected boolean isSpecialZnode(String znode) {\n-        if (AVAILABLE_NODE.equals(znode)\n-            || COOKIES_NODE.equals(znode)\n-            || LedgerLayout.LAYOUT_ZNODE.equals(znode)) {\n+        if (BookKeeperConstants.AVAILABLE_NODE.equals(znode)\n+                || BookKeeperConstants.COOKIE_NODE.equals(znode)\n+                || BookKeeperConstants.LAYOUT_ZNODE.equals(znode)\n+                || BookKeeperConstants.INSTANCEID.equals(znode)\n+                || BookKeeperConstants.UNDER_REPLICATION_NODE.equals(znode)) {\n             return true;\n         }\n         return false;\n     }\n \n-    @Override\n-    public void close() {\n-    }\n-\n     /**\n-     * Do garbage collecting comparing hosted ledgers and zk ledgers\n+     * Convert the ZK retrieved ledger nodes to a HashSet for easier comparisons.\n      *\n-     * @param gc\n-     *          Garbage collector to do garbage collection when found inactive/deleted ledgers\n-     * @param bkActiveLedgers\n-     *          Active ledgers hosted in bookie server\n-     * @param zkAllLedgers\n-     *          All ledgers stored in zookeeper\n+     * @param ledgerNodes\n+     *          zk ledger nodes\n+     * @param path\n+     *          the prefix path of the ledger nodes\n+     * @return ledger id hash set\n      */\n-    void doGc(GarbageCollector gc, Map<Long, Boolean> bkActiveLedgers, Set<Long> zkAllLedgers) {\n-        // remove any active ledgers that doesn't exist in zk\n-        for (Long bkLid : bkActiveLedgers.keySet()) {\n-            if (!zkAllLedgers.contains(bkLid)) {\n-                // remove it from current active ledger\n-                bkActiveLedgers.remove(bkLid);\n-                gc.gc(bkLid);\n+    protected Set<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n+        Set<Long> zkActiveLedgers = new HashSet<Long>(ledgerNodes.size(), 1.0f);\n+        for (String ledgerNode : ledgerNodes) {\n+            if (isSpecialZnode(ledgerNode)) {\n+                continue;\n+            }\n+            try {\n+                // convert the node path to ledger id according to different ledger manager implementation\n+                zkActiveLedgers.add(getLedgerId(path + \"/\" + ledgerNode));\n+            } catch (IOException e) {\n+                LOG.warn(\"Error extracting ledgerId from ZK ledger node: \" + ledgerNode);\n+                // This is a pretty bad error as it indicates a ledger node in ZK\n+                // has an incorrect format. For now just continue and consider\n+                // this as a non-existent ledger.\n+                continue;\n             }\n         }\n+        return zkActiveLedgers;\n+    }\n+\n+    @Override\n+    public void close() {\n     }\n }"},{"sha":"6cd38ff08a62fd8d2333ecffa9b402efb1437f5c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":40,"deletions":62,"changes":102,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -19,10 +19,10 @@\n  */\n \n import java.io.IOException;\n-import java.util.HashSet;\n-import java.util.Map;\n+import java.util.NoSuchElementException;\n import java.util.Set;\n \n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -32,6 +32,7 @@\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.AsyncCallback.StringCallback;\n import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n@@ -45,29 +46,12 @@\n  * All ledgers' metadata are put in a single zk node, created using zk sequential node.\n  * Each ledger node is prefixed with 'L'.\n  * </p>\n- * <p>\n- * All actived ledgers found in bookie server side is managed in a hash map.\n- * </p>\n- * <p>\n- * Garbage collection in FlatLedgerManager is procssed as below:\n- * <ul>\n- * <li> fetch all existed ledgers from zookeeper, said <b>zkActiveLedgers</b>\n- * <li> fetch all active ledgers from bookie server, said <b>bkActiveLedgers</b>\n- * <li> loop over <b>bkActiveLedgers</b> to find those ledgers aren't existed in\n- * <b>zkActiveLedgers</b>, do garbage collection on them.\n- * </ul>\n- * </p>\n  */\n class FlatLedgerManager extends AbstractZkLedgerManager {\n \n     static final Logger LOG = LoggerFactory.getLogger(FlatLedgerManager.class);\n-    public static final String NAME = \"flat\";\n-    public static final int CUR_VERSION = 1;\n-\n     // path prefix to store ledger znodes\n     private final String ledgerPrefix;\n-    // hash map to store all active ledger ids\n-    private SnapshotMap<Long, Boolean> activeLedgers;\n \n     /**\n      * Constructor\n@@ -80,32 +64,32 @@\n      *          ZooKeeper Path to store ledger metadata\n      * @throws IOException when version is not compatible\n      */\n-    public FlatLedgerManager(AbstractConfiguration conf, ZooKeeper zk,\n-                             String ledgerRootPath, int layoutVersion)\n-        throws IOException {\n-        super(conf, zk, ledgerRootPath);\n-\n-        if (layoutVersion != CUR_VERSION) {\n-            throw new IOException(\"Incompatible layout version found : \" \n-                                  + layoutVersion);\n-        }\n+    public FlatLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n+        super(conf, zk);\n \n-        ledgerPrefix = ledgerRootPath + \"/\" + LEDGER_NODE_PREFIX;\n-        activeLedgers = new SnapshotMap<Long, Boolean>();\n+        ledgerPrefix = ledgerRootPath + \"/\" + StringUtils.LEDGER_NODE_PREFIX;\n     }\n \n     @Override\n-    public void newLedgerPath(final GenericCallback<String> cb, final LedgerMetadata metadata) {\n+    public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> cb) {\n         StringCallback scb = new StringCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx,\n                     String name) {\n                 if (Code.OK.intValue() != rc) {\n+                    LOG.error(\"Could not create node for ledger\",\n+                              KeeperException.create(KeeperException.Code.get(rc), path));\n                     cb.operationComplete(rc, null);\n                 } else {\n                     // update znode status\n-                    metadata.updateZnodeStatus(0);\n-                    cb.operationComplete(rc, name);\n+                    metadata.setVersion(new ZkVersion(0));\n+                    try {\n+                        long ledgerId = getLedgerId(name);\n+                        cb.operationComplete(rc, ledgerId);\n+                    } catch (IOException ie) {\n+                        LOG.error(\"Could not extract ledger-id from path:\" + name, ie);\n+                        cb.operationComplete(BKException.Code.ZKException, null);\n+                    }\n                 }\n             }\n         };\n@@ -141,35 +125,29 @@ public void asyncProcessLedgers(final Processor<Long> processor,\n     }\n \n     @Override\n-    public void addActiveLedger(long ledgerId, boolean active) {\n-        activeLedgers.put(ledgerId, active);\n-    }\n-\n-    @Override\n-    public void removeActiveLedger(long ledgerId) {\n-        activeLedgers.remove(ledgerId);\n-    }\n-\n-    @Override\n-    public boolean containsActiveLedger(long ledgerId) {\n-        return activeLedgers.containsKey(ledgerId);\n-    }\n-\n-    @Override\n-    public void garbageCollectLedgers(GarbageCollector gc) {\n-        try {\n-            // create a snapshot first\n-            Map<Long, Boolean> bkActiveLedgers = activeLedgers.snapshot();\n-            Set<Long> zkActiveLedgers = getLedgersInSingleNode(ledgerRootPath);\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"All active ledgers from ZK: \" + zkActiveLedgers);\n-                LOG.debug(\"Current active ledgers from Bookie: \" + bkActiveLedgers.keySet());\n+    public LedgerRangeIterator getLedgerRanges() {\n+        return new LedgerRangeIterator() {\n+            // single iterator, can visit only one time\n+            boolean hasMoreElement = true;\n+            @Override\n+            public boolean hasNext() {\n+                return hasMoreElement;\n             }\n-            doGc(gc, bkActiveLedgers, zkActiveLedgers);\n-        } catch (IOException ie) {\n-            LOG.warn(\"Error during garbage collecting ledgers from \" + ledgerRootPath, ie);\n-        } catch (InterruptedException inte) {\n-            LOG.warn(\"Interrupted during garbage collecting ledgers from \" + ledgerRootPath, inte);\n-        }\n+            @Override\n+            public LedgerRange next() throws IOException {\n+                if (!hasMoreElement) {\n+                    throw new NoSuchElementException();\n+                }\n+                hasMoreElement = false;\n+                Set<Long> zkActiveLedgers;\n+                try {\n+                    zkActiveLedgers = ledgerListToSet(\n+                            ZkUtils.getChildrenInSingleNode(zk, ledgerRootPath), ledgerRootPath);\n+                } catch (InterruptedException e) {\n+                    throw new IOException(\"Error when get child nodes from zk\", e);\n+                }\n+                return new LedgerRange(zkActiveLedgers);\n+            }\n+        };\n     }\n }"},{"sha":"658883724e726b4740422b4c8e2af26a4b75f010","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,92 @@\n+package org.apache.bookkeeper.meta;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZKUtil;\n+import org.apache.bookkeeper.replication.ReplicationException;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+/**\n+ * Flat Ledger Manager Factory\n+ */\n+class FlatLedgerManagerFactory extends LedgerManagerFactory {\n+\n+    public static final String NAME = \"flat\";\n+    public static final int CUR_VERSION = 1;\n+\n+    AbstractConfiguration conf;\n+    ZooKeeper zk;\n+\n+    @Override\n+    public int getCurrentVersion() {\n+        return CUR_VERSION;\n+    }\n+\n+    @Override\n+    public LedgerManagerFactory initialize(final AbstractConfiguration conf,\n+                                           final ZooKeeper zk,\n+                                           final int factoryVersion)\n+    throws IOException {\n+        if (CUR_VERSION != factoryVersion) {\n+            throw new IOException(\"Incompatible layout version found : \"\n+                                + factoryVersion);\n+        }\n+        this.conf = conf;\n+        this.zk = zk;\n+        return this;\n+    }\n+\n+    @Override\n+    public void uninitialize() throws IOException {\n+        // since zookeeper instance is passed from outside\n+        // we don't need to close it here\n+    }\n+\n+    @Override\n+    public LedgerManager newLedgerManager() {\n+        return new FlatLedgerManager(conf, zk);\n+    }\n+\n+    @Override\n+    public LedgerUnderreplicationManager newLedgerUnderreplicationManager()\n+            throws KeeperException, InterruptedException, ReplicationException.CompatibilityException {\n+        return new ZkLedgerUnderreplicationManager(conf, zk);\n+    }\n+\n+    @Override\n+    public void format(AbstractConfiguration conf, ZooKeeper zk)\n+            throws InterruptedException, KeeperException, IOException {\n+        FlatLedgerManager ledgerManager = (FlatLedgerManager) newLedgerManager();\n+        String ledgersRootPath = conf.getZkLedgersRootPath();\n+        List<String> children = zk.getChildren(ledgersRootPath, false);\n+        for (String child : children) {\n+            if (ledgerManager.isSpecialZnode(child)) {\n+                continue;\n+            }\n+            ZKUtil.deleteRecursive(zk, ledgersRootPath + \"/\" + child);\n+        }\n+        // Delete and recreate the LAYOUT information.\n+        super.format(conf, zk);\n+    }\n+}"},{"sha":"aee9795093059a302555b12d4288a22003f9f0bc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":114,"deletions":155,"changes":269,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -22,11 +22,10 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.Set;\n-import java.util.Map;\n-import java.util.NavigableMap;\n-import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n \n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n@@ -58,32 +57,11 @@\n  * <pre>(ledgersRootPath)/level1/level2/L(level3)</pre>\n  * E.g Ledger 0000000001 is split into 3 parts <i>00</i>, <i>0000</i>, <i>0001</i>, which is stored in\n  * <i>(ledgersRootPath)/00/0000/L0001</i>. So each znode could have at most 10000 ledgers, which avoids\n- * failed to get children list of a too big znode during garbage collection.\n- * <p>\n- * All actived ledgers found in bookie server is managed in a sorted map, which ease us to pick\n- * up all actived ledgers belongs to (level1, level2).\n- * </p>\n- * <p>\n- * Garbage collection in HierarchicalLedgerManager is processed node by node as below:\n- * <ul>\n- * fetching all level1 nodes, by calling zk#getChildren(ledgerRootPath).\n- * <ul>\n- * for each level1 node, fetching their level2 nodes, by calling zk#getChildren(ledgerRootPath + \"/\" + level1)\n- * <li> fetch all existed ledgers from zookeeper in level1/level2 node, said <b>zkActiveLedgers</b>\n- * <li> fetch all active ledgers from bookie server in level1/level2, said <b>bkActiveLedgers</b>\n- * <li> loop over <b>bkActiveLedgers</b> to find those ledgers aren't existed in <b>zkActiveLedgers</b>, do garbage collection on them.\n- * </ul>\n- * </ul>\n- * Since garbage collection is running in background, HierarchicalLedgerManager did gc on single hash\n- * node at a time to avoid consuming too much resources.\n- * </p>\n+ * errors during garbage collection due to lists of children that are too long.\n  */\n class HierarchicalLedgerManager extends AbstractZkLedgerManager {\n \n     static final Logger LOG = LoggerFactory.getLogger(HierarchicalLedgerManager.class);\n-    public static final String NAME = \"hierarchical\";\n-\n-    public static final int CUR_VERSION = 1;\n \n     static final String IDGEN_ZNODE = \"idgen\";\n     static final String IDGENERATION_PREFIX = \"/\" + IDGEN_ZNODE + \"/ID-\";\n@@ -92,8 +70,6 @@\n \n     // Path to generate global id\n     private final String idGenPath;\n-    // A sorted map to stored all active ledger ids\n-    private SnapshotMap<Long, Boolean> activeLedgers;\n \n     // we use this to prevent long stack chains from building up in callbacks\n     ScheduledExecutorService scheduler;\n@@ -105,27 +81,13 @@\n      *          Configuration object\n      * @param zk\n      *          ZooKeeper Client Handle\n-     * @param ledgerRootPath\n-     *          ZooKeeper Path to store ledger metadata\n-     * @throws IOException when version is not compatible\n      */\n-    public HierarchicalLedgerManager(AbstractConfiguration conf, ZooKeeper zk,\n-                                     String ledgerRootPath, int layoutVersion)\n-        throws IOException {\n-        super(conf, zk, ledgerRootPath);\n-\n-        if (layoutVersion != CUR_VERSION) {\n-            throw new IOException(\"Incompatible layout version found : \" \n-                                  + layoutVersion);\n-        }\n+    public HierarchicalLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n+        super(conf, zk);\n \n         this.idGenPath = ledgerRootPath + IDGENERATION_PREFIX;\n-        activeLedgers = new SnapshotMap<Long, Boolean>();\n-\n         this.scheduler = Executors.newSingleThreadScheduledExecutor();\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Using HierarchicalLedgerManager with root path : \" + ledgerRootPath);\n-        }\n+        LOG.debug(\"Using HierarchicalLedgerManager with root path : {}\", ledgerRootPath);\n     }\n \n     @Override\n@@ -139,7 +101,7 @@ public void close() {\n     }\n \n     @Override\n-    public void newLedgerPath(final GenericCallback<String> ledgerCb, final LedgerMetadata metadata) {\n+    public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n         ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n             CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n             @Override\n@@ -161,20 +123,23 @@ public void processResult(int rc, String path, Object ctx, final String idPathNa\n                     ledgerCb.operationComplete(KeeperException.Code.SYSTEMERROR.intValue(), null);\n                     return;\n                 }\n+                String ledgerPath = getLedgerPath(ledgerId);\n+                final long lid = ledgerId;\n                 StringCallback scb = new StringCallback() {\n                     @Override\n                     public void processResult(int rc, String path,\n                             Object ctx, String name) {\n                         if (rc != KeeperException.Code.OK.intValue()) {\n+                            LOG.error(\"Could not create node for ledger\",\n+                                      KeeperException.create(KeeperException.Code.get(rc), path));\n                             ledgerCb.operationComplete(rc, null);\n                         } else {\n-                            // update znode status\n-                            metadata.updateZnodeStatus(0);\n-                            ledgerCb.operationComplete(rc, name);\n+                            // update version\n+                            metadata.setVersion(new ZkVersion(0));\n+                            ledgerCb.operationComplete(rc, lid);\n                         }\n                     }\n                 };\n-                String ledgerPath = getLedgerPath(ledgerId);\n                 ZkUtils.createFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, scb, null);\n                 // delete the znode for id generation\n@@ -188,9 +153,7 @@ public void processResult(int rc, String path, Object ctx) {\n                                     LOG.warn(\"Exception during deleting znode for id generation : \",\n                                              KeeperException.create(KeeperException.Code.get(rc), path));\n                                 } else {\n-                                    if (LOG.isDebugEnabled()) {\n-                                        LOG.debug(\"Deleting znode for id generation : \" + idPathName);\n-                                    }\n+                                    LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n                                 }\n                             }\n                         }, null);\n@@ -214,14 +177,7 @@ private long getLedgerIdFromGenPath(String nodeName) throws IOException {\n \n     @Override\n     public String getLedgerPath(long ledgerId) {\n-        String ledgerIdStr = StringUtils.getZKStringId(ledgerId);\n-        // do 2-4-4 split\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(ledgerRootPath).append(\"/\")\n-          .append(ledgerIdStr.substring(0, 2)).append(\"/\")\n-          .append(ledgerIdStr.substring(2, 6)).append(\"/\")\n-          .append(LEDGER_NODE_PREFIX).append(ledgerIdStr.substring(6, 10));\n-        return sb.toString();\n+        return ledgerRootPath + StringUtils.getHierarchicalLedgerPath(ledgerId);\n     }\n \n     @Override\n@@ -230,26 +186,12 @@ public long getLedgerId(String pathName) throws IOException {\n             throw new IOException(\"it is not a valid hashed path name : \" + pathName);\n         }\n         String hierarchicalPath = pathName.substring(ledgerRootPath.length() + 1);\n-        String[] hierarchicalParts = hierarchicalPath.split(\"/\");\n-        if (hierarchicalParts.length != 3) {\n-            throw new IOException(\"it is not a valid hierarchical path name : \" + pathName);\n-        }\n-        hierarchicalParts[2] =\n-            hierarchicalParts[2].substring(LEDGER_NODE_PREFIX.length());\n-        return getLedgerId(hierarchicalParts);\n+        return StringUtils.stringToHierarchicalLedgerId(hierarchicalPath);\n     }\n \n     // get ledger from all level nodes\n     private long getLedgerId(String...levelNodes) throws IOException {\n-        try {\n-            StringBuilder sb = new StringBuilder();\n-            for (String node : levelNodes) {\n-                sb.append(node);\n-            }\n-            return Long.parseLong(sb.toString());\n-        } catch (NumberFormatException e) {\n-            throw new IOException(e);\n-        }\n+        return StringUtils.stringToHierarchicalLedgerId(levelNodes);\n     }\n \n     //\n@@ -350,84 +292,6 @@ public void processResult(int rc, String path, Object ctx,\n         }, null);\n     }\n \n-    @Override\n-    public void addActiveLedger(long ledgerId, boolean active) {\n-        activeLedgers.put(ledgerId, active);\n-    }\n-\n-    @Override\n-    public void removeActiveLedger(long ledgerId) {\n-        activeLedgers.remove(ledgerId);\n-    }\n-\n-    @Override\n-    public boolean containsActiveLedger(long ledgerId) {\n-        return activeLedgers.containsKey(ledgerId);\n-    }\n-\n-    @Override\n-    public void garbageCollectLedgers(GarbageCollector gc) {\n-        // create a snapshot before garbage collection\n-        NavigableMap<Long, Boolean> snapshot = activeLedgers.snapshot();\n-        try {\n-            List<String> l1Nodes = zk.getChildren(ledgerRootPath, null);\n-            for (String l1Node : l1Nodes) {\n-                if (isSpecialZnode(l1Node)) {\n-                    continue;\n-                }\n-                try {\n-                    List<String> l2Nodes = zk.getChildren(ledgerRootPath + \"/\" + l1Node, null);\n-                    for (String l2Node : l2Nodes) {\n-                        doGcByLevel(gc, l1Node, l2Node, snapshot);\n-                    }\n-                } catch (Exception e) {\n-                    LOG.warn(\"Exception during garbage collecting ledgers for \" + l1Node\n-                             + \" of \" + ledgerRootPath, e);\n-                }\n-            }\n-        } catch (Exception e) {\n-            LOG.warn(\"Exception during garbage collecting inactive/deleted ledgers\", e);\n-        }\n-    }\n-\n-    /**\n-     * Garbage collection a single node level1/level2\n-     *\n-     * @param gc\n-     *          Garbage collector\n-     * @param level1\n-     *          1st level node name\n-     * @param level2\n-     *          2nd level node name\n-     * @param snapshot\n-     *          Snapshot of the active ledgers map.\n-     * @throws IOException\n-     * @throws InterruptedException\n-     */\n-    void doGcByLevel(GarbageCollector gc, final String level1, final String level2,\n-                     NavigableMap snapshot)\n-        throws IOException, InterruptedException {\n-\n-        StringBuilder nodeBuilder = new StringBuilder();\n-        nodeBuilder.append(ledgerRootPath).append(\"/\")\n-                   .append(level1).append(\"/\").append(level2);\n-        String nodePath = nodeBuilder.toString();\n-\n-        Set<Long> zkActiveLedgers = getLedgersInSingleNode(nodePath);\n-        // get hosted ledgers in /level1/level2\n-        long startLedgerId = getStartLedgerIdByLevel(level1, level2);\n-        long endLedgerId = getEndLedgerIdByLevel(level1, level2);\n-        Map<Long, Boolean> bkActiveLedgers = snapshot.subMap(startLedgerId, true, endLedgerId, true);\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"All active ledgers from ZK for hash node \"\n-                      + level1 + \"/\" + level2 + \" : \" + zkActiveLedgers);\n-            LOG.debug(\"Current active ledgers from Bookie for hash node \"\n-                      + level1 + \"/\" + level2 + \" : \" + bkActiveLedgers);\n-        }\n-\n-        doGc(gc, bkActiveLedgers, zkActiveLedgers);\n-    }\n-\n     /**\n      * Process list one by one in asynchronize way. Process will be stopped immediately\n      * when error occurred.\n@@ -504,4 +368,99 @@ public final void run() {\n     protected boolean isSpecialZnode(String znode) {\n         return IDGEN_ZNODE.equals(znode) || super.isSpecialZnode(znode);\n     }\n+\n+    @Override\n+    public LedgerRangeIterator getLedgerRanges() {\n+        return new HierarchicalLedgerRangeIterator();\n+    }\n+\n+    /**\n+     * Iterator through each metadata bucket with hierarchical mode\n+     */\n+    private class HierarchicalLedgerRangeIterator implements LedgerRangeIterator {\n+        private Iterator<String> l1NodesIter = null;\n+        private Iterator<String> l2NodesIter = null;\n+        private String curL1Nodes = \"\";\n+        private boolean hasMoreElement = true;\n+\n+        /**\n+         * iterate next level1 znode\n+         *\n+         * @return false if have visited all level1 nodes\n+         * @throws InterruptedException/KeeperException if error occurs reading zookeeper children\n+         */\n+        private boolean nextL1Node() throws KeeperException, InterruptedException {\n+            l2NodesIter = null;\n+            while (l2NodesIter == null) {\n+                if (l1NodesIter.hasNext()) {\n+                    curL1Nodes = l1NodesIter.next();\n+                } else {\n+                    return false;\n+                }\n+                if (isSpecialZnode(curL1Nodes)) {\n+                    continue;\n+                }\n+                List<String> l2Nodes = zk.getChildren(ledgerRootPath + \"/\" + curL1Nodes, null);\n+                l2NodesIter = l2Nodes.iterator();\n+                if (!l2NodesIter.hasNext()) {\n+                    l2NodesIter = null;\n+                    continue;\n+                }\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public boolean hasNext() throws IOException {\n+            try {\n+                if (l1NodesIter == null) {\n+                    l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();\n+                    hasMoreElement = nextL1Node();\n+                } else if (!l2NodesIter.hasNext()) {\n+                    hasMoreElement = nextL1Node();\n+                }\n+            } catch (Exception e) {\n+                throw new IOException(\"Error when check more elements\", e);\n+            }\n+            return hasMoreElement;\n+        }\n+\n+        @Override\n+        public LedgerRange next() throws IOException {\n+            if (!hasMoreElement) {\n+                throw new NoSuchElementException();\n+            }\n+            return getLedgerRangeByLevel(curL1Nodes, l2NodesIter.next());\n+        }\n+\n+        /**\n+         * Get a single node level1/level2\n+         *\n+         * @param level1\n+         *          1st level node name\n+         * @param level2\n+         *          2nd level node name\n+         * @throws IOException\n+         */\n+        LedgerRange getLedgerRangeByLevel(final String level1, final String level2)\n+                throws IOException {\n+            StringBuilder nodeBuilder = new StringBuilder();\n+            nodeBuilder.append(ledgerRootPath).append(\"/\")\n+                       .append(level1).append(\"/\").append(level2);\n+            String nodePath = nodeBuilder.toString();\n+            List<String> ledgerNodes = null;\n+            try {\n+                ledgerNodes = ZkUtils.getChildrenInSingleNode(zk, nodePath);\n+            } catch (InterruptedException e) {\n+                throw new IOException(\"Error when get child nodes from zk\", e);\n+            }\n+            Set<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"All active ledgers from ZK for hash node \"\n+                          + level1 + \"/\" + level2 + \" : \" + zkActiveLedgers);\n+            }\n+            return new LedgerRange(zkActiveLedgers,\n+                    getStartLedgerIdByLevel(level1, level2), getEndLedgerIdByLevel(level1, level2));\n+        }\n+    }\n }"},{"sha":"974a3249d7937bc2a950a6f751cef33640fef23c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,93 @@\n+package org.apache.bookkeeper.meta;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZKUtil;\n+import org.apache.bookkeeper.replication.ReplicationException;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+/**\n+ * Hierarchical Ledger Manager Factory\n+ */\n+class HierarchicalLedgerManagerFactory extends LedgerManagerFactory {\n+\n+    public static final String NAME = \"hierarchical\";\n+    public static final int CUR_VERSION = 1;\n+\n+    AbstractConfiguration conf;\n+    ZooKeeper zk;\n+\n+    @Override\n+    public int getCurrentVersion() {\n+        return CUR_VERSION;\n+    }\n+\n+    @Override\n+    public LedgerManagerFactory initialize(final AbstractConfiguration conf,\n+                                           final ZooKeeper zk,\n+                                           final int factoryVersion)\n+    throws IOException {\n+        if (CUR_VERSION != factoryVersion) {\n+            throw new IOException(\"Incompatible layout version found : \"\n+                                + factoryVersion);\n+        }\n+        this.conf = conf;\n+        this.zk = zk;\n+        return this;\n+    }\n+\n+    @Override\n+    public void uninitialize() throws IOException {\n+        // since zookeeper instance is passed from outside\n+        // we don't need to close it here\n+    }\n+\n+    @Override\n+    public LedgerManager newLedgerManager() {\n+        return new HierarchicalLedgerManager(conf, zk);\n+    }\n+\n+    @Override\n+    public LedgerUnderreplicationManager newLedgerUnderreplicationManager()\n+            throws KeeperException, InterruptedException, ReplicationException.CompatibilityException{\n+        return new ZkLedgerUnderreplicationManager(conf, zk);\n+    }\n+\n+    @Override\n+    public void format(AbstractConfiguration conf, ZooKeeper zk)\n+            throws InterruptedException, KeeperException, IOException {\n+        HierarchicalLedgerManager ledgerManager = (HierarchicalLedgerManager) newLedgerManager();\n+        String ledgersRootPath = conf.getZkLedgersRootPath();\n+        List<String> children = zk.getChildren(ledgersRootPath, false);\n+        for (String child : children) {\n+            if (!HierarchicalLedgerManager.IDGEN_ZNODE.equals(child)\n+                    && ledgerManager.isSpecialZnode(child)) {\n+                continue;\n+            }\n+            ZKUtil.deleteRecursive(zk, ledgersRootPath + \"/\" + child);\n+        }\n+        // Delete and recreate the LAYOUT information.\n+        super.format(conf, zk);\n+    }\n+}"},{"sha":"d358ffbec2ecadef0e7becc4ff3f28d96ec4b982","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","status":"modified","additions":75,"deletions":40,"changes":115,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerLayout.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -20,20 +20,15 @@\n \n import java.io.IOException;\n \n+import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.zookeeper.CreateMode;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.ZooDefs.Ids;\n-import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.ZooKeeper;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.apache.commons.configuration.ConfigurationException;\n-\n-import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.bookkeeper.meta.FlatLedgerManager;\n-\n /**\n  * This class encapsulates ledger layout information that is persistently stored\n  * in zookeeper. It provides parsing and serialization methods of such information.\n@@ -42,10 +37,11 @@\n class LedgerLayout {\n     static final Logger LOG = LoggerFactory.getLogger(LedgerLayout.class);\n \n-    // Znode name to store layout information\n-    public static final String LAYOUT_ZNODE = \"LAYOUT\";\n+   \n+    // version of compability layout version\n+    public static final int LAYOUT_MIN_COMPAT_VERSION = 1;\n     // version of ledger layout metadata\n-    public static final int LAYOUT_FORMAT_VERSION = 1;\n+    public static final int LAYOUT_FORMAT_VERSION = 2;\n \n     /**\n      * Read ledger layout from zookeeper\n@@ -56,7 +52,7 @@\n      */\n     public static LedgerLayout readLayout(final ZooKeeper zk, final String ledgersRoot)\n             throws IOException, KeeperException {\n-        String ledgersLayout = ledgersRoot + \"/\" + LAYOUT_ZNODE;\n+        String ledgersLayout = ledgersRoot + \"/\" + BookKeeperConstants.LAYOUT_ZNODE;\n \n         try {\n             LedgerLayout layout;\n@@ -77,8 +73,8 @@ public static LedgerLayout readLayout(final ZooKeeper zk, final String ledgersRo\n     static final String splitter = \":\";\n     static final String lSplitter = \"\\n\";\n \n-    // ledger manager class\n-    private String managerType;\n+    // ledger manager factory class\n+    private String managerFactoryCls;\n     // ledger manager version\n     private int managerVersion;\n \n@@ -88,34 +84,77 @@ public static LedgerLayout readLayout(final ZooKeeper zk, final String ledgersRo\n     /**\n      * Ledger Layout Constructor\n      *\n-     * @param type\n-     *          Ledger Manager Type\n+     * @param managerFactoryCls\n+     *          Ledger Manager Factory Class\n      * @param managerVersion\n      *          Ledger Manager Version\n      * @param layoutFormatVersion\n      *          Ledger Layout Format Version\n      */\n-    public LedgerLayout(String managerType, int managerVersion) {\n-        this.managerType = managerType;\n+    public LedgerLayout(String managerFactoryCls, int managerVersion) {\n+        this(managerFactoryCls, managerVersion, LAYOUT_FORMAT_VERSION);\n+    }\n+\n+    LedgerLayout(String managerFactoryCls, int managerVersion,\n+                 int layoutVersion) {\n+        this.managerFactoryCls = managerFactoryCls;\n         this.managerVersion = managerVersion;\n+        this.layoutFormatVersion = layoutVersion;\n     }\n \n+    /**\n+     * Get Ledger Manager Type\n+     *\n+     * @return ledger manager type\n+     * @deprecated replaced by {@link #getManagerFactoryClass()}\n+     */\n+    @Deprecated\n     public String getManagerType() {\n-        return this.managerType;\n+        // pre V2 layout store as manager type\n+        return this.managerFactoryCls;\n+    }\n+\n+    /**\n+     * Get ledger manager factory class\n+     *\n+     * @return ledger manager factory class\n+     */\n+    public String getManagerFactoryClass() {\n+        return this.managerFactoryCls;\n     }\n \n     public int getManagerVersion() {\n         return this.managerVersion;\n     }\n \n+    /**\n+     * Return layout format version\n+     *\n+     * @return layout format version\n+     */\n+    public int getLayoutFormatVersion() {\n+        return this.layoutFormatVersion;\n+    }\n+\n     /**\n      * Store the ledger layout into zookeeper\n      */\n     public void store(final ZooKeeper zk, String ledgersRoot) \n             throws IOException, KeeperException, InterruptedException {\n-        String ledgersLayout = ledgersRoot + \"/\" + LAYOUT_ZNODE;\n-        zk.create(ledgersLayout, serialize(), \n-                  Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+        String ledgersLayout = ledgersRoot + \"/\"\n+                + BookKeeperConstants.LAYOUT_ZNODE;\n+        zk.create(ledgersLayout, serialize(), Ids.OPEN_ACL_UNSAFE,\n+                CreateMode.PERSISTENT);\n+    }\n+\n+    /**\n+     * Delete the LAYOUT from zookeeper\n+     */\n+    public void delete(final ZooKeeper zk, String ledgersRoot)\n+            throws KeeperException, InterruptedException {\n+        String ledgersLayout = ledgersRoot + \"/\"\n+                + BookKeeperConstants.LAYOUT_ZNODE;\n+        zk.delete(ledgersLayout, -1);\n     }\n \n     /**\n@@ -124,15 +163,12 @@ public void store(final ZooKeeper zk, String ledgersRoot)\n      * @return byte[]\n      */\n     private byte[] serialize() throws IOException {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(layoutFormatVersion).append(lSplitter)\n-            .append(managerType).append(splitter).append(managerVersion);\n+        String s =\n+          new StringBuilder().append(layoutFormatVersion).append(lSplitter)\n+              .append(managerFactoryCls).append(splitter).append(managerVersion).toString();\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Serialized layout info: \" + sb.toString());\n-        }\n-\n-        return sb.toString().getBytes(\"UTF-8\");\n+        LOG.debug(\"Serialized layout info: {}\", s);\n+        return s.getBytes(\"UTF-8\");\n     }\n \n     /**\n@@ -149,15 +185,14 @@ public void store(final ZooKeeper zk, String ledgersRoot)\n     private static LedgerLayout parseLayout(byte[] bytes) throws IOException {\n         String layout = new String(bytes, \"UTF-8\");\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Parsing Layout: \" + layout);\n-        }\n+        LOG.debug(\"Parsing Layout: {}\", layout);\n \n         String lines[] = layout.split(lSplitter);\n \n         try {\n             int layoutFormatVersion = new Integer(lines[0]);\n-            if (LAYOUT_FORMAT_VERSION != layoutFormatVersion) {\n+            if (LAYOUT_FORMAT_VERSION < layoutFormatVersion ||\n+                LAYOUT_MIN_COMPAT_VERSION > layoutFormatVersion) {\n                 throw new IOException(\"Metadata version not compatible. Expected \" \n                         + LAYOUT_FORMAT_VERSION + \", but got \" + layoutFormatVersion);\n             }\n@@ -170,13 +205,13 @@ private static LedgerLayout parseLayout(byte[] bytes) throws IOException {\n             if (parts.length != 2) {\n                 throw new IOException(\"Invalid Ledger Manager defined in layout : \" + layout);\n             }\n-            // ledger manager class\n-            String managerType = parts[0];\n+            // ledger manager factory class\n+            String managerFactoryCls = parts[0];\n             // ledger manager version\n             int managerVersion = new Integer(parts[1]);\n-            return new LedgerLayout(managerType, managerVersion);\n+            return new LedgerLayout(managerFactoryCls, managerVersion, layoutFormatVersion);\n         } catch (NumberFormatException e) {\n-            throw new IOException(e);\n+            throw new IOException(\"Could not parse layout '\" + layout + \"'\", e);\n         }\n     }\n \n@@ -189,20 +224,20 @@ public boolean equals(Object obj) {\n             return false;\n         }\n         LedgerLayout other = (LedgerLayout)obj;\n-        return managerType.equals(other.managerType) &&\n-            managerVersion == other.managerVersion;\n+        return managerFactoryCls.equals(other.managerFactoryCls)\n+            && managerVersion == other.managerVersion;\n     }\n \n     @Override\n     public int hashCode() {\n-        return (managerType + managerVersion).hashCode();\n+        return (managerFactoryCls + managerVersion).hashCode();\n     }\n \n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n         sb.append(\"LV\").append(layoutFormatVersion).append(\":\")\n-            .append(\",Type:\").append(managerType).append(\":\")\n+            .append(\",Type:\").append(managerFactoryCls).append(\":\")\n             .append(managerVersion);\n         return sb.toString();\n     }"},{"sha":"5c5ecf8725f0ec7439cf50a4380d9f1ded2133fd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","status":"modified","additions":106,"deletions":61,"changes":167,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -18,52 +18,78 @@\n  * limitations under the License.\n  */\n \n+import java.io.Closeable;\n import java.io.IOException;\n+import java.util.Set;\n \n import org.apache.zookeeper.AsyncCallback;\n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.versioning.Version;\n \n /**\n- * LedgerManager takes responsibility of ledger management\n+ * LedgerManager takes responsibility of ledger management in client side.\n  *\n  * <ul>\n  * <li>How to store ledger meta (e.g. in ZooKeeper or other key/value store)\n- * <li>How to manager active ledgers (so know how to do garbage collection)\n- * <li>How to garbage collect inactive/deleted ledgers\n  * </ul>\n  */\n-public interface LedgerManager {\n+public interface LedgerManager extends Closeable {\n \n     /**\n-     * Get the path that is used to store ledger metadata\n+     * Create a new ledger with provided metadata\n+     *\n+     * @param metadata\n+     *        Metadata provided when creating a new ledger\n+     * @param cb\n+     *        Callback when creating a new ledger.\n+     *        {@link BKException.Code.ZKException} return code when can't generate\n+     *        or extract new ledger id\n+     */\n+    public void createLedger(LedgerMetadata metadata, GenericCallback<Long> cb);\n+\n+    /**\n+     * Remove a specified ledger metadata by ledgerId and version.\n      *\n      * @param ledgerId\n-     *          Ledger ID\n-     * @return ledger node path\n+     *          Ledger Id\n+     * @param version\n+     *          Ledger metadata version\n+     * @param cb\n+     *          Callback when removed ledger metadata.\n+     *          {@link BKException.Code.MetadataVersionException} return code when version doesn't match,\n+     *          {@link BKException.Code.NoSuchLedgerExistsException} return code when ledger doesn't exist,\n+     *          {@link BKException.Code.ZKException} return code when other issues happen.\n      */\n-    public String getLedgerPath(long ledgerId);\n+    public void removeLedgerMetadata(long ledgerId, Version version, GenericCallback<Void> vb);\n \n     /**\n-     * Get ledger id from its ledger path\n+     * Read ledger metadata of a specified ledger.\n      *\n-     * @param ledgerPath\n-     *          Ledger path to store metadata\n-     * @return ledger id\n-     * @throws IOException when the ledger path is invalid\n+     * @param ledgerId\n+     *          Ledger Id\n+     * @param readCb\n+     *          Callback when read ledger metadata.\n+     *          {@link BKException.Code.NoSuchLedgerExistsException} return code when ledger doesn't exist,\n+     *          {@link BKException.Code.ZKException} return code when other issues happen.\n      */\n-    public long getLedgerId(String ledgerPath) throws IOException;\n+    public void readLedgerMetadata(long ledgerId, GenericCallback<LedgerMetadata> readCb);\n \n     /**\n-     * Create a new zk ledger path with provided metadata\n+     * Write ledger metadata.\n      *\n-     * @param cb\n-     *        Callback when getting new zk ledger path to create.\n+     * @param ledgerId\n+     *          Ledger Id\n      * @param metadata\n-     *        Metadata provided when creating a new ledger\n+     *          Ledger Metadata to write\n+     * @param cb\n+     *          Callback when finished writing ledger metadata.\n+     *          {@link BKException.Code.MetadataVersionException} return code when version doesn't match,\n+     *          {@link BKException.Code.ZKException} return code when other issues happen.\n      */\n-    public abstract void newLedgerPath(GenericCallback<String> cb, LedgerMetadata metadata);\n+    public void writeLedgerMetadata(long ledgerId, LedgerMetadata metadata, GenericCallback<Void> cb);\n \n     /**\n      * Loop to process all ledgers.\n@@ -90,58 +116,77 @@ public void asyncProcessLedgers(Processor<Long> processor, AsyncCallback.VoidCal\n                                     Object context, int successRc, int failureRc);\n \n     /**\n-     * Add active ledger\n+     * Loop to scan a range of metadata from metadata storage\n      *\n-     * @param ledgerId\n-     *          Ledger ID\n-     * @param active\n-     *          Status of ledger\n+     * @return will return a iterator of the Ranges\n      */\n-    public void addActiveLedger(long ledgerId, boolean active);\n+    public LedgerRangeIterator getLedgerRanges();\n \n-    /**\n-     * Remove active ledger\n-     *\n-     * @param ledgerId\n-     *          Ledger ID\n+    /*\n+     * Used to represent the Ledgers range returned from the\n+     * current scan.\n      */\n-    public void removeActiveLedger(long ledgerId);\n+    public static class LedgerRange {\n+        // ledger start and end ranges\n+        private final long start;\n+        private final long end;\n+        public final static long NOLIMIT = -1;\n \n-    /**\n-     * Is Ledger ledgerId in active ledgers set\n-     *\n-     * @param ledgerId\n-     *          Ledger ID\n-     * @return true if the ledger is in active ledgers set, otherwise return false\n-     */\n-    public boolean containsActiveLedger(long ledgerId);\n+        // returned ledgers\n+        private Set<Long> ledgers;\n+\n+        public LedgerRange(Set<Long> ledgers) {\n+            this(ledgers, NOLIMIT, NOLIMIT);\n+        }\n+\n+        public LedgerRange(Set<Long> ledgers, long start) {\n+            this(ledgers, start, NOLIMIT);\n+        }\n+\n+        public LedgerRange(Set<Long> ledgers, long start, long end) {\n+            this.ledgers = ledgers;\n+            this.start = start;\n+            this.end = end;\n+        }\n+\n+        public Long start() {\n+            return this.start;\n+        }\n+\n+        public Long end() {\n+            return this.end;\n+        }\n+\n+        public Set<Long> getLedgers() {\n+            return this.ledgers;\n+        }\n+    }\n \n     /**\n-     * Garbage Collector which handles ledger deletion in server side\n+     * Interface of the ledger meta range iterator from\n+     * storage (e.g. in ZooKeeper or other key/value store)\n      */\n-    public static interface GarbageCollector {\n+    interface LedgerRangeIterator {\n+\n+        /**\n+         * @return true if there are records in the ledger metadata store. false\n+         * only when there are indeed no records in ledger metadata store.\n+         * @throws IOException thrown when there is any problem accessing the ledger\n+         * metadata store. It is critical that it doesn't return false in the case\n+         * in the case it fails to access the ledger metadata store. Otherwise it\n+         * will end up deleting all ledgers by accident.\n+         */\n+        public boolean hasNext() throws IOException;\n+\n         /**\n-         * garbage collecting a specific ledger\n+         * Get the next element.\n          *\n-         * @param ledgerId\n-         *          Ledger ID to be garbage collected\n+         * @return the next element.\n+         * @throws IOException thrown when there is a problem accessing the ledger\n+         * metadata store. It is critical that it doesn't return false in the case\n+         * in the case it fails to access the ledger metadata store. Otherwise it\n+         * will end up deleting all ledgers by accident.\n          */\n-        public void gc(long ledgerId);\n+        public LedgerRange next() throws IOException;\n     }\n-\n-    /**\n-     * Garbage collecting all inactive/deleted ledgers\n-     * <p>\n-     * GarbageCollector#gc is triggered each time we found a ledger could be garbage collected.\n-     * After method finished, all those inactive ledgers should be garbage collected.\n-     * </p>\n-     *\n-     * @param gc garbage collector\n-     */\n-    public void garbageCollectLedgers(GarbageCollector gc);\n-\n-    /**\n-     * Close ledger manager\n-     */\n-    public void close();\n }"},{"sha":"70fdda044b4287ab6387351b637744ad92ae7775","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","status":"modified","additions":192,"deletions":40,"changes":232,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManagerFactory.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -20,79 +20,231 @@\n \n import java.io.IOException;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.zookeeper.ZooKeeper;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+import org.apache.commons.configuration.ConfigurationException;\n import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooKeeper;\n+\n+public abstract class LedgerManagerFactory {\n+\n+    static final Logger LOG = LoggerFactory.getLogger(LedgerManagerFactory.class);\n+    // v1 layout\n+    static final int V1 = 1;\n+\n+    /**\n+     * Return current factory version.\n+     *\n+     * @return current version used by factory.\n+     */\n+    public abstract int getCurrentVersion();\n \n-/**\n- * <code>LedgerManagerFactory</code> takes responsibility of creating new ledger manager.\n- */\n-public class LedgerManagerFactory {\n     /**\n-     * Create new Ledger Manager.\n+     * Initialize a factory.\n+     *\n+     * @param conf\n+     *          Configuration object used to initialize factory\n+     * @param zk\n+     *          Available zookeeper handle for ledger manager to use.\n+     * @param factoryVersion\n+     *          What version used to initialize factory.\n+     * @return ledger manager factory instance\n+     * @throws IOException when fail to initialize the factory.\n+     */\n+    public abstract LedgerManagerFactory initialize(final AbstractConfiguration conf,\n+                                                    final ZooKeeper zk,\n+                                                    final int factoryVersion)\n+    throws IOException;\n+\n+    /**\n+     * Uninitialize the factory.\n+     *\n+     * @throws IOException when fail to uninitialize the factory.\n+     */\n+    public abstract void uninitialize() throws IOException;\n+\n+    /**\n+     * return ledger manager for client-side to manage ledger metadata.\n+     *\n+     * @return ledger manager\n+     * @see LedgerManager\n+     */\n+    public abstract LedgerManager newLedgerManager();\n+\n+    /**\n+     * Return a ledger underreplication manager, which is used to\n+     * mark ledgers as unreplicated, and to retrieve a ledger which\n+     * is underreplicated so that it can be rereplicated.\n+     *\n+     * @return ledger underreplication manager\n+     * @see LedgerUnderreplicationManager\n+     */\n+    public abstract LedgerUnderreplicationManager newLedgerUnderreplicationManager()\n+            throws KeeperException, InterruptedException, ReplicationException.CompatibilityException;\n+\n+    /**\n+     * Create new Ledger Manager Factory.\n      *\n      * @param conf\n      *          Configuration Object.\n      * @param zk\n      *          ZooKeeper Client Handle, talk to zk to know which ledger manager is used.\n-     * @return new ledger manager\n+     * @return new ledger manager factory\n      * @throws IOException\n      */\n-    public static LedgerManager newLedgerManager(\n+    public static LedgerManagerFactory newLedgerManagerFactory(\n         final AbstractConfiguration conf, final ZooKeeper zk)\n             throws IOException, KeeperException, InterruptedException {\n-        String lmType = conf.getLedgerManagerType();\n+        Class<? extends LedgerManagerFactory> factoryClass;\n+        try {\n+            factoryClass = conf.getLedgerManagerFactoryClass();\n+        } catch (Exception e) {\n+            throw new IOException(\"Failed to get ledger manager factory class from configuration : \", e);\n+        }\n         String ledgerRootPath = conf.getZkLedgersRootPath();\n-            \n+\n         if (null == ledgerRootPath || ledgerRootPath.length() == 0) {\n             throw new IOException(\"Empty Ledger Root Path.\");\n         }\n-        \n+\n         // if zk is null, return the default ledger manager\n         if (zk == null) {\n-            return new FlatLedgerManager(conf, null,\n-                    ledgerRootPath, FlatLedgerManager.CUR_VERSION);\n+            return new FlatLedgerManagerFactory()\n+                   .initialize(conf, null, FlatLedgerManagerFactory.CUR_VERSION);\n         }\n \n+        LedgerManagerFactory lmFactory;\n+\n         // check that the configured ledger manager is\n         // compatible with the existing layout\n         LedgerLayout layout = LedgerLayout.readLayout(zk, ledgerRootPath);\n         if (layout == null) { // no existing layout\n-            if (lmType == null \n-                || lmType.equals(FlatLedgerManager.NAME)) {\n-                layout = new LedgerLayout(FlatLedgerManager.NAME, \n-                                          FlatLedgerManager.CUR_VERSION);\n-            } else if (lmType.equals(HierarchicalLedgerManager.NAME)) {\n-                layout = new LedgerLayout(HierarchicalLedgerManager.NAME, \n-                                          HierarchicalLedgerManager.CUR_VERSION);\n+            lmFactory = createNewLMFactory(conf, zk, factoryClass);\n+            return lmFactory\n+                    .initialize(conf, zk, lmFactory.getCurrentVersion());\n+        }\n+        LOG.debug(\"read ledger layout {}\", layout);\n+\n+        // there is existing layout, we need to look into the layout.\n+        // handle pre V2 layout\n+        if (layout.getLayoutFormatVersion() <= V1) {\n+            // pre V2 layout we use type of ledger manager\n+            String lmType = conf.getLedgerManagerType();\n+            if (lmType != null && !layout.getManagerType().equals(lmType)) {\n+                throw new IOException(\"Configured layout \" + lmType\n+                                    + \" does not match existing layout \"  + layout.getManagerType());\n+            }\n+\n+            // create the ledger manager\n+            if (FlatLedgerManagerFactory.NAME.equals(layout.getManagerType())) {\n+                lmFactory = new FlatLedgerManagerFactory();\n+            } else if (HierarchicalLedgerManagerFactory.NAME.equals(layout.getManagerType())) {\n+                lmFactory = new HierarchicalLedgerManagerFactory();\n             } else {\n-                throw new IOException(\"Unknown ledger manager type \" + lmType);\n+                throw new IOException(\"Unknown ledger manager type: \" + lmType);\n             }\n+            return lmFactory.initialize(conf, zk, layout.getManagerVersion());\n+        }\n+\n+        // handle V2 layout case\n+        if (factoryClass != null &&\n+            !layout.getManagerFactoryClass().equals(factoryClass.getName())) {\n+\n+            throw new IOException(\"Configured layout \" + factoryClass.getName()\n+                                + \" does not match existing layout \"  + layout.getManagerFactoryClass());\n+        }\n+        if (factoryClass == null) {\n+            // no factory specified in configuration\n             try {\n-                layout.store(zk, ledgerRootPath);\n-            } catch (KeeperException.NodeExistsException nee) {\n-                LedgerLayout layout2 = LedgerLayout.readLayout(zk, ledgerRootPath);\n-                if (!layout2.equals(layout)) {\n-                    throw new IOException(\"Contention writing to layout to zookeeper, \"\n-                            + \" other layout \" + layout2 + \" is incompatible with our \"\n-                            + \"layout \" + layout);\n+                Class<?> theCls = Class.forName(layout.getManagerFactoryClass());\n+                if (!LedgerManagerFactory.class.isAssignableFrom(theCls)) {\n+                    throw new IOException(\"Wrong ledger manager factory \" + layout.getManagerFactoryClass());\n                 }\n+                factoryClass = theCls.asSubclass(LedgerManagerFactory.class);\n+            } catch (ClassNotFoundException cnfe) {\n+                throw new IOException(\"Failed to instantiate ledger manager factory \" + layout.getManagerFactoryClass());\n             }\n-        } else if (lmType != null && !layout.getManagerType().equals(lmType)) {\n-            throw new IOException(\"Configured layout \" + lmType\n-                    + \" does not match existing layout \" + layout.getManagerType());\n         }\n+        // instantiate a factory\n+        lmFactory = ReflectionUtils.newInstance(factoryClass);\n+        return lmFactory.initialize(conf, zk, layout.getManagerVersion());\n+    }\n+\n+    /**\n+     * Creates the new layout and stores in zookeeper and returns the\n+     * LedgerManagerFactory instance.\n+     */\n+    private static LedgerManagerFactory createNewLMFactory(\n+            final AbstractConfiguration conf, final ZooKeeper zk,\n+            Class<? extends LedgerManagerFactory> factoryClass)\n+            throws IOException, KeeperException, InterruptedException {\n \n-        // create the ledger manager\n-        if (FlatLedgerManager.NAME.equals(layout.getManagerType())) {\n-            return new FlatLedgerManager(conf, zk, ledgerRootPath, \n-                                         layout.getManagerVersion());\n-        } else if (HierarchicalLedgerManager.NAME.equals(layout.getManagerType())) {\n-            return new HierarchicalLedgerManager(conf, zk, ledgerRootPath,\n-                                                 layout.getManagerVersion());\n-        } else {\n-            throw new IOException(\"Unknown ledger manager type: \" + lmType);\n+        String ledgerRootPath = conf.getZkLedgersRootPath();\n+        LedgerManagerFactory lmFactory;\n+        LedgerLayout layout;\n+        // use default ledger manager factory if no one provided\n+        if (factoryClass == null) {\n+            // for backward compatibility, check manager type\n+            String lmType = conf.getLedgerManagerType();\n+            if (lmType == null) {\n+                factoryClass = FlatLedgerManagerFactory.class;\n+            } else {\n+                if (FlatLedgerManagerFactory.NAME.equals(lmType)) {\n+                    factoryClass = FlatLedgerManagerFactory.class;\n+                } else if (HierarchicalLedgerManagerFactory.NAME.equals(lmType)) {\n+                    factoryClass = HierarchicalLedgerManagerFactory.class;\n+                } else {\n+                    throw new IOException(\"Unknown ledger manager type: \"\n+                            + lmType);\n+                }\n+            }\n+        }\n+\n+        lmFactory = ReflectionUtils.newInstance(factoryClass);\n+\n+        layout = new LedgerLayout(factoryClass.getName(),\n+                lmFactory.getCurrentVersion());\n+        try {\n+            layout.store(zk, ledgerRootPath);\n+        } catch (KeeperException.NodeExistsException nee) {\n+            LedgerLayout layout2 = LedgerLayout.readLayout(zk, ledgerRootPath);\n+            if (!layout2.equals(layout)) {\n+                throw new IOException(\n+                        \"Contention writing to layout to zookeeper, \"\n+                                + \" other layout \" + layout2\n+                                + \" is incompatible with our \" + \"layout \"\n+                                + layout);\n+            }\n         }\n+        return lmFactory;\n     }\n \n+    /**\n+     * Format the ledger metadata for LedgerManager\n+     * \n+     * @param conf\n+     *            Configuration instance\n+     * @param zk\n+     *            Zookeeper instance\n+     */\n+    public void format(final AbstractConfiguration conf, final ZooKeeper zk)\n+            throws InterruptedException, KeeperException, IOException {\n+        \n+        Class<? extends LedgerManagerFactory> factoryClass;\n+        try {\n+            factoryClass = conf.getLedgerManagerFactoryClass();\n+        } catch (ConfigurationException e) {\n+            throw new IOException(\"Failed to get ledger manager factory class from configuration : \", e);\n+        }\n+       \n+        LedgerLayout layout = LedgerLayout.readLayout(zk,\n+                conf.getZkLedgersRootPath());\n+        layout.delete(zk, conf.getZkLedgersRootPath());\n+        // Create new layout information again.        \n+        createNewLMFactory(conf, zk, factoryClass);\n+    }\n }"},{"sha":"b565e7fe340edc30e25002ef376ee742ad1be6a2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,109 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.replication.ReplicationException;\n+\n+/**\n+ * Interface for marking ledgers which need to be rereplicated\n+ */\n+public interface LedgerUnderreplicationManager {\n+    /**\n+     * Mark a ledger as underreplicated. The replication should\n+     * then check which fragments are underreplicated and rereplicate them\n+     */\n+    void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n+            throws ReplicationException.UnavailableException;\n+\n+    /**\n+     * Mark a ledger as fully replicated. If the ledger is not\n+     * already marked as underreplicated, this is a noop.\n+     */\n+    void markLedgerReplicated(long ledgerId)\n+            throws ReplicationException.UnavailableException;\n+\n+    /**\n+     * Acquire a underreplicated ledger for rereplication. The ledger\n+     * should be locked, so that no other agent will receive the ledger\n+     * from this call.\n+     * The ledger should remain locked until either #markLedgerComplete\n+     * or #releaseLedger are called.\n+     * This call is blocking, so will not return until a ledger is\n+     * available for rereplication.\n+     */\n+    long getLedgerToRereplicate()\n+            throws ReplicationException.UnavailableException;\n+\n+    /**\n+     * Poll for a underreplicated ledger to rereplicate.\n+     * @see #getLedgerToRereplicate\n+     * @return the ledgerId, or -1 if none are available\n+     */\n+    long pollLedgerToRereplicate()\n+            throws ReplicationException.UnavailableException;\n+\n+\n+    /**\n+     * Release a previously acquired ledger. This allows others to acquire\n+     * the ledger\n+     */\n+    void releaseUnderreplicatedLedger(long ledgerId)\n+            throws ReplicationException.UnavailableException;\n+\n+    /**\n+     * Release all resources held by the ledger underreplication manager\n+     */\n+    void close()\n+            throws ReplicationException.UnavailableException;\n+\n+    /**\n+     * Stop ledger replication. Currently running ledger rereplication tasks\n+     * will be continued and will be stopped from next task. This will block\n+     * ledger replication {@link #Auditor} and {@link #getLedgerToRereplicate()}\n+     * tasks\n+     */\n+    void disableLedgerReplication()\n+            throws ReplicationException.UnavailableException;\n+\n+    /**\n+     * Resuming ledger replication. This will allow ledger replication\n+     * {@link #Auditor} and {@link #getLedgerToRereplicate()} tasks to continue\n+     */\n+    void enableLedgerReplication()\n+            throws ReplicationException.UnavailableException;\n+\n+    /**\n+     * Check whether the ledger replication is enabled or not. This will return\n+     * true if the ledger replication is enabled, otherwise return false\n+     * \n+     * @return - return true if it is enabled otherwise return false\n+     */\n+    boolean isLedgerReplicationEnabled()\n+            throws ReplicationException.UnavailableException;\n+\n+    /**\n+     * Receive notification asynchronously when the ledger replication process\n+     * is enabled\n+     * \n+     * @param cb\n+     *            - callback implementation to receive the notification\n+     */\n+    void notifyLedgerReplicationEnabled(GenericCallback<Void> cb)\n+            throws ReplicationException.UnavailableException;\n+}"},{"sha":"106dac5a45c81e850e273fb004e7ca7aa1eed490","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"added","additions":601,"deletions":0,"changes":601,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,601 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import static org.apache.bookkeeper.metastore.MetastoreTable.ALL_FIELDS;\n+import static org.apache.bookkeeper.metastore.MetastoreTable.NON_FIELDS;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.bookkeeper.metastore.MSException;\n+import org.apache.bookkeeper.metastore.MetaStore;\n+import org.apache.bookkeeper.metastore.MetastoreCallback;\n+import org.apache.bookkeeper.metastore.MetastoreCursor;\n+import org.apache.bookkeeper.metastore.MetastoreCursor.ReadEntriesCallback;\n+import org.apache.bookkeeper.metastore.MetastoreException;\n+import org.apache.bookkeeper.metastore.MetastoreFactory;\n+import org.apache.bookkeeper.metastore.MetastoreScannableTable;\n+import org.apache.bookkeeper.metastore.MetastoreTableItem;\n+import org.apache.bookkeeper.metastore.Value;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.replication.ReplicationException;\n+import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n+import org.apache.zookeeper.AsyncCallback;\n+import org.apache.zookeeper.AsyncCallback.StringCallback;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * MetaStore Based Ledger Manager Factory\n+ */\n+public class MSLedgerManagerFactory extends LedgerManagerFactory {\n+\n+    static Logger LOG = LoggerFactory.getLogger(MSLedgerManagerFactory.class);\n+\n+    public static final int CUR_VERSION = 1;\n+\n+    public static final String TABLE_NAME = \"LEDGER\";\n+    public static final String META_FIELD = \".META\";\n+\n+    AbstractConfiguration conf;\n+    ZooKeeper zk;\n+    MetaStore metastore;\n+\n+    @Override\n+    public int getCurrentVersion() {\n+        return CUR_VERSION;\n+    }\n+\n+    @Override\n+    public LedgerManagerFactory initialize(final AbstractConfiguration conf, final ZooKeeper zk,\n+            final int factoryVersion) throws IOException {\n+        if (CUR_VERSION != factoryVersion) {\n+            throw new IOException(\"Incompatible layout version found : \" + factoryVersion);\n+        }\n+        this.conf = conf;\n+        this.zk = zk;\n+\n+        // load metadata store\n+        String msName = conf.getMetastoreImplClass();\n+        try {\n+            metastore = MetastoreFactory.createMetaStore(msName);\n+\n+            // TODO: should record version in somewhere. e.g. ZooKeeper\n+            int msVersion = metastore.getVersion();\n+            metastore.init(conf, msVersion);\n+        } catch (Throwable t) {\n+            throw new IOException(\"Failed to initialize metastore \" + msName + \" : \", t);\n+        }\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public void uninitialize() throws IOException {\n+        metastore.close();\n+    }\n+\n+    static Long key2LedgerId(String key) {\n+        return null == key ? null : Long.parseLong(key, 10);\n+    }\n+\n+    static String ledgerId2Key(Long lid) {\n+        return null == lid ? null : StringUtils.getZKStringId(lid);\n+    }\n+\n+    static String rangeToString(Long firstLedger, boolean firstInclusive, Long lastLedger, boolean lastInclusive) {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(firstInclusive ? \"[ \" : \"( \").append(firstLedger).append(\" ~ \").append(lastLedger)\n+                .append(lastInclusive ? \" ]\" : \" )\");\n+        return sb.toString();\n+    }\n+\n+    static SortedSet<Long> entries2Ledgers(Iterator<MetastoreTableItem> entries) {\n+        SortedSet<Long> ledgers = new TreeSet<Long>();\n+        while (entries.hasNext()) {\n+            MetastoreTableItem item = entries.next();\n+            try {\n+                ledgers.add(key2LedgerId(item.getKey()));\n+            } catch (NumberFormatException nfe) {\n+                LOG.warn(\"Found invalid ledger key {}\", item.getKey());\n+            }\n+        }\n+        return ledgers;\n+    }\n+\n+    static class SyncResult<T> {\n+        T value;\n+        int rc;\n+        boolean finished = false;\n+\n+        public synchronized void complete(int rc, T value) {\n+            this.rc = rc;\n+            this.value = value;\n+            finished = true;\n+\n+            notify();\n+        }\n+\n+        public synchronized void block() {\n+            try {\n+                while (!finished) {\n+                    wait();\n+                }\n+            } catch (InterruptedException ie) {\n+            }\n+        }\n+\n+        public synchronized int getRetCode() {\n+            return rc;\n+        }\n+\n+        public synchronized T getResult() {\n+            return value;\n+        }\n+    }\n+\n+    static class MsLedgerManager implements LedgerManager {\n+        final ZooKeeper zk;\n+        final AbstractConfiguration conf;\n+\n+        final MetaStore metastore;\n+        final MetastoreScannableTable ledgerTable;\n+        final int maxEntriesPerScan;\n+\n+        static final String IDGEN_ZNODE = \"ms-idgen\";\n+        static final String IDGENERATION_PREFIX = \"/\" + IDGEN_ZNODE + \"/ID-\";\n+\n+        // Path to generate global id\n+        private final String idGenPath;\n+\n+        // we use this to prevent long stack chains from building up in\n+        // callbacks\n+        ScheduledExecutorService scheduler;\n+\n+        MsLedgerManager(final AbstractConfiguration conf, final ZooKeeper zk, final MetaStore metastore) {\n+            this.conf = conf;\n+            this.zk = zk;\n+            this.metastore = metastore;\n+\n+            try {\n+                ledgerTable = metastore.createScannableTable(TABLE_NAME);\n+            } catch (MetastoreException mse) {\n+                LOG.error(\"Failed to instantiate table \" + TABLE_NAME + \" in metastore \" + metastore.getName());\n+                throw new RuntimeException(\"Failed to instantiate table \" + TABLE_NAME + \" in metastore \"\n+                        + metastore.getName());\n+            }\n+            // configuration settings\n+            maxEntriesPerScan = conf.getMetastoreMaxEntriesPerScan();\n+\n+            this.idGenPath = conf.getZkLedgersRootPath() + IDGENERATION_PREFIX;\n+            this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        }\n+\n+        @Override\n+        public void close() {\n+            try {\n+                scheduler.shutdown();\n+            } catch (Exception e) {\n+                LOG.warn(\"Error when closing MsLedgerManager : \", e);\n+            }\n+            ledgerTable.close();\n+        }\n+\n+        @Override\n+        public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n+            ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+                    CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n+                        @Override\n+                        public void processResult(int rc, String path, Object ctx, final String idPathName) {\n+                            if (rc != KeeperException.Code.OK.intValue()) {\n+                                LOG.error(\"Could not generate new ledger id\",\n+                                        KeeperException.create(KeeperException.Code.get(rc), path));\n+                                ledgerCb.operationComplete(BKException.Code.ZKException, null);\n+                                return;\n+                            }\n+                            /*\n+                             * Extract ledger id from gen path\n+                             */\n+                            long ledgerId;\n+                            try {\n+                                ledgerId = getLedgerIdFromGenPath(idPathName);\n+                            } catch (IOException e) {\n+                                LOG.error(\"Could not extract ledger-id from id gen path:\" + path, e);\n+                                ledgerCb.operationComplete(BKException.Code.ZKException, null);\n+                                return;\n+                            }\n+\n+                            final long lid = ledgerId;\n+                            MetastoreCallback<Version> msCallback = new MetastoreCallback<Version>() {\n+                                @Override\n+                                public void complete(int rc, Version version, Object ctx) {\n+                                    if (MSException.Code.BadVersion.getCode() == rc) {\n+                                        ledgerCb.operationComplete(BKException.Code.MetadataVersionException, null);\n+                                        return;\n+                                    }\n+                                    if (MSException.Code.OK.getCode() != rc) {\n+                                        ledgerCb.operationComplete(BKException.Code.MetaStoreException, null);\n+                                        return;\n+                                    }\n+                                    LOG.debug(\"Create ledger {} with version {} successfuly.\", new Object[] { lid,\n+                                            version });\n+                                    // update version\n+                                    metadata.setVersion(version);\n+                                    ledgerCb.operationComplete(BKException.Code.OK, lid);\n+                                }\n+                            };\n+\n+                            ledgerTable.put(ledgerId2Key(lid), new Value().setField(META_FIELD, metadata.serialize()),\n+                                    Version.NEW, msCallback, null);\n+                            zk.delete(idPathName, -1, new AsyncCallback.VoidCallback() {\n+                                @Override\n+                                public void processResult(int rc, String path, Object ctx) {\n+                                    if (rc != KeeperException.Code.OK.intValue()) {\n+                                        LOG.warn(\"Exception during deleting znode for id generation : \",\n+                                                KeeperException.create(KeeperException.Code.get(rc), path));\n+                                    } else {\n+                                        LOG.debug(\"Deleting znode for id generation : {}\", idPathName);\n+                                    }\n+                                }\n+                            }, null);\n+                        }\n+                    }, null);\n+        }\n+\n+        // get ledger id from generation path\n+        private long getLedgerIdFromGenPath(String nodeName) throws IOException {\n+            long ledgerId;\n+            try {\n+                String parts[] = nodeName.split(IDGENERATION_PREFIX);\n+                ledgerId = Long.parseLong(parts[parts.length - 1]);\n+            } catch (NumberFormatException e) {\n+                throw new IOException(e);\n+            }\n+            return ledgerId;\n+        }\n+\n+        @Override\n+        public void removeLedgerMetadata(final long ledgerId, final Version version,\n+                                         final GenericCallback<Void> cb) {\n+            MetastoreCallback<Void> msCallback = new MetastoreCallback<Void>() {\n+                @Override\n+                public void complete(int rc, Void value, Object ctx) {\n+                    int bkRc;\n+                    if (MSException.Code.NoKey.getCode() == rc) {\n+                        LOG.warn(\"Ledger entry does not exist in meta table: ledgerId={}\", ledgerId);\n+                        bkRc = BKException.Code.NoSuchLedgerExistsException;\n+                    } else if (MSException.Code.OK.getCode() == rc) {\n+                        bkRc = BKException.Code.OK;\n+                    } else {\n+                        bkRc = BKException.Code.MetaStoreException;\n+                    }\n+                    cb.operationComplete(bkRc, (Void) null);\n+                }\n+            };\n+            ledgerTable.remove(ledgerId2Key(ledgerId), version, msCallback, null);\n+        }\n+\n+        @Override\n+        public void readLedgerMetadata(final long ledgerId, final GenericCallback<LedgerMetadata> readCb) {\n+            final String key = ledgerId2Key(ledgerId);\n+            MetastoreCallback<Versioned<Value>> msCallback = new MetastoreCallback<Versioned<Value>>() {\n+                @Override\n+                public void complete(int rc, Versioned<Value> value, Object ctx) {\n+                    if (MSException.Code.NoKey.getCode() == rc) {\n+                        LOG.error(\"No ledger metadata found for ledger \" + ledgerId + \" : \",\n+                                MSException.create(MSException.Code.get(rc), \"No key \" + key + \" found.\"));\n+                        readCb.operationComplete(BKException.Code.NoSuchLedgerExistsException, null);\n+                        return;\n+                    }\n+                    if (MSException.Code.OK.getCode() != rc) {\n+                        LOG.error(\"Could not read metadata for ledger \" + ledgerId + \" : \",\n+                                MSException.create(MSException.Code.get(rc), \"Failed to get key \" + key));\n+                        readCb.operationComplete(BKException.Code.MetaStoreException, null);\n+                        return;\n+                    }\n+                    LedgerMetadata metadata;\n+                    try {\n+                        metadata = LedgerMetadata\n+                                .parseConfig(value.getValue().getField(META_FIELD), value.getVersion());\n+                    } catch (IOException e) {\n+                        LOG.error(\"Could not parse ledger metadata for ledger \" + ledgerId + \" : \", e);\n+                        readCb.operationComplete(BKException.Code.MetaStoreException, null);\n+                        return;\n+                    }\n+                    readCb.operationComplete(BKException.Code.OK, metadata);\n+                }\n+            };\n+            ledgerTable.get(key, msCallback, ALL_FIELDS);\n+        }\n+\n+        @Override\n+        public void writeLedgerMetadata(final long ledgerId, final LedgerMetadata metadata,\n+                final GenericCallback<Void> cb) {\n+            Value data = new Value().setField(META_FIELD, metadata.serialize());\n+\n+            LOG.debug(\"Writing ledger {} metadata, version {}\", new Object[] { ledgerId, metadata.getVersion() });\n+\n+            final String key = ledgerId2Key(ledgerId);\n+            MetastoreCallback<Version> msCallback = new MetastoreCallback<Version>() {\n+                @Override\n+                public void complete(int rc, Version version, Object ctx) {\n+                    int bkRc;\n+                    if (MSException.Code.BadVersion.getCode() == rc) {\n+                        LOG.info(\"Bad version provided to updat metadata for ledger {}\", ledgerId);\n+                        bkRc = BKException.Code.MetadataVersionException;\n+                    } else if (MSException.Code.NoKey.getCode() == rc) {\n+                        LOG.warn(\"Ledger {} doesn't exist when writing its ledger metadata.\", ledgerId);\n+                        bkRc = BKException.Code.NoSuchLedgerExistsException;\n+                    } else if (MSException.Code.OK.getCode() == rc) {\n+                        metadata.setVersion(version);\n+                        bkRc = BKException.Code.OK;\n+                    } else {\n+                        LOG.warn(\"Conditional update ledger metadata failed: \",\n+                                MSException.create(MSException.Code.get(rc), \"Failed to put key \" + key));\n+                        bkRc = BKException.Code.MetaStoreException;\n+                    }\n+\n+                    cb.operationComplete(bkRc, null);\n+                }\n+            };\n+            ledgerTable.put(key, data, metadata.getVersion(), msCallback, null);\n+        }\n+\n+        @Override\n+        public void asyncProcessLedgers(final Processor<Long> processor, final AsyncCallback.VoidCallback finalCb,\n+                final Object context, final int successRc, final int failureRc) {\n+            MetastoreCallback<MetastoreCursor> openCursorCb = new MetastoreCallback<MetastoreCursor>() {\n+                @Override\n+                public void complete(int rc, MetastoreCursor cursor, Object ctx) {\n+                    if (MSException.Code.OK.getCode() != rc) {\n+                        finalCb.processResult(failureRc, null, context);\n+                        return;\n+                    }\n+                    if (!cursor.hasMoreEntries()) {\n+                        finalCb.processResult(successRc, null, context);\n+                        return;\n+                    }\n+                    asyncProcessLedgers(cursor, processor, finalCb, context, successRc, failureRc);\n+                }\n+            };\n+            ledgerTable.openCursor(NON_FIELDS, openCursorCb, null);\n+        }\n+\n+        void asyncProcessLedgers(final MetastoreCursor cursor, final Processor<Long> processor,\n+                                 final AsyncCallback.VoidCallback finalCb, final Object context,\n+                                 final int successRc, final int failureRc) {\n+            scheduler.submit(new Runnable() {\n+                @Override\n+                public void run() {\n+                    doAsyncProcessLedgers(cursor, processor, finalCb, context, successRc, failureRc);\n+                }\n+            });\n+        }\n+\n+        void doAsyncProcessLedgers(final MetastoreCursor cursor, final Processor<Long> processor,\n+                                   final AsyncCallback.VoidCallback finalCb, final Object context,\n+                                   final int successRc, final int failureRc) {\n+            // no entries now\n+            if (!cursor.hasMoreEntries()) {\n+                finalCb.processResult(successRc, null, context);\n+                return;\n+            }\n+            ReadEntriesCallback msCallback = new ReadEntriesCallback() {\n+                @Override\n+                public void complete(int rc, Iterator<MetastoreTableItem> entries, Object ctx) {\n+                    if (MSException.Code.OK.getCode() != rc) {\n+                        finalCb.processResult(failureRc, null, context);\n+                        return;\n+                    }\n+\n+                    SortedSet<Long> ledgers = new TreeSet<Long>();\n+                    while (entries.hasNext()) {\n+                        MetastoreTableItem item = entries.next();\n+                        try {\n+                            ledgers.add(key2LedgerId(item.getKey()));\n+                        } catch (NumberFormatException nfe) {\n+                            LOG.warn(\"Found invalid ledger key {}\", item.getKey());\n+                        }\n+                    }\n+\n+                    if (0 == ledgers.size()) {\n+                        // process next batch of ledgers\n+                        asyncProcessLedgers(cursor, processor, finalCb, context, successRc, failureRc);\n+                        return;\n+                    }\n+\n+                    final long startLedger = ledgers.first();\n+                    final long endLedger = ledgers.last();\n+\n+                    AsyncSetProcessor<Long> setProcessor = new AsyncSetProcessor<Long>(scheduler);\n+                    // process set\n+                    setProcessor.process(ledgers, processor, new AsyncCallback.VoidCallback() {\n+                        @Override\n+                        public void processResult(int rc, String path, Object ctx) {\n+                            if (successRc != rc) {\n+                                LOG.error(\"Failed when processing range \"\n+                                        + rangeToString(startLedger, true, endLedger, true));\n+                                finalCb.processResult(failureRc, null, context);\n+                                return;\n+                            }\n+                            // process next batch of ledgers\n+                            asyncProcessLedgers(cursor, processor, finalCb, context, successRc, failureRc);\n+                        }\n+                    }, context, successRc, failureRc);\n+                }\n+            };\n+            cursor.asyncReadEntries(maxEntriesPerScan, msCallback, null);\n+        }\n+\n+        class MSLedgerRangeIterator implements LedgerRangeIterator {\n+            final CountDownLatch openCursorLatch = new CountDownLatch(1);\n+            MetastoreCursor cursor = null;\n+\n+            MSLedgerRangeIterator() {\n+                MetastoreCallback<MetastoreCursor> openCursorCb = new MetastoreCallback<MetastoreCursor>() {\n+                    @Override\n+                    public void complete(int rc, MetastoreCursor newCursor, Object ctx) {\n+                        if (MSException.Code.OK.getCode() != rc) {\n+                            LOG.error(\"Error opening cursor for ledger range iterator {}\", rc);\n+                        } else {\n+                            cursor = newCursor;\n+                        }\n+                        openCursorLatch.countDown();\n+                    }\n+                };\n+                ledgerTable.openCursor(NON_FIELDS, openCursorCb, null);\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+                try {\n+                    openCursorLatch.await();\n+                } catch (InterruptedException ie) {\n+                    LOG.error(\"Interrupted waiting for cursor to open\", ie);\n+                    Thread.currentThread().interrupt();\n+                    return false;\n+                }\n+                if (cursor == null) {\n+                    return false;\n+                }\n+                return cursor.hasMoreEntries();\n+            }\n+\n+            @Override\n+            public LedgerRange next() throws IOException {\n+                try {\n+                    Set<Long> ledgerIds = new TreeSet<Long>();\n+                    Iterator<MetastoreTableItem> iter = cursor.readEntries(maxEntriesPerScan);\n+                    while (iter.hasNext()) {\n+                        ledgerIds.add(key2LedgerId(iter.next().getKey()));\n+                    }\n+                    return new LedgerRange(ledgerIds);\n+                } catch (MSException mse) {\n+                    LOG.error(\"Exception occurred reading from metastore\", mse);\n+                    throw new IOException(\"Couldn't read from metastore\", mse);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public LedgerRangeIterator getLedgerRanges() {\n+            return new MSLedgerRangeIterator();\n+        }\n+    }\n+\n+    @Override\n+    public LedgerManager newLedgerManager() {\n+        return new MsLedgerManager(conf, zk, metastore);\n+    }\n+\n+    @Override\n+    public LedgerUnderreplicationManager newLedgerUnderreplicationManager() throws KeeperException,\n+            InterruptedException, ReplicationException.CompatibilityException {\n+        // TODO: currently just use zk ledger underreplication manager\n+        return new ZkLedgerUnderreplicationManager(conf, zk);\n+    }\n+\n+    /**\n+     * Process set one by one in asynchronize way. Process will be stopped\n+     * immediately when error occurred.\n+     */\n+    private static class AsyncSetProcessor<T> {\n+        // use this to prevent long stack chains from building up in callbacks\n+        ScheduledExecutorService scheduler;\n+\n+        /**\n+         * Constructor\n+         *\n+         * @param scheduler\n+         *            Executor used to prevent long stack chains\n+         */\n+        public AsyncSetProcessor(ScheduledExecutorService scheduler) {\n+            this.scheduler = scheduler;\n+        }\n+\n+        /**\n+         * Process set of items\n+         *\n+         * @param data\n+         *            Set of data to process\n+         * @param processor\n+         *            Callback to process element of list when success\n+         * @param finalCb\n+         *            Final callback to be called after all elements in the list\n+         *            are processed\n+         * @param contxt\n+         *            Context of final callback\n+         * @param successRc\n+         *            RC passed to final callback on success\n+         * @param failureRc\n+         *            RC passed to final callback on failure\n+         */\n+        public void process(final Set<T> data, final Processor<T> processor, final AsyncCallback.VoidCallback finalCb,\n+                final Object context, final int successRc, final int failureRc) {\n+            if (data == null || data.size() == 0) {\n+                finalCb.processResult(successRc, null, context);\n+                return;\n+            }\n+            final Iterator<T> iter = data.iterator();\n+            AsyncCallback.VoidCallback stubCallback = new AsyncCallback.VoidCallback() {\n+                @Override\n+                public void processResult(int rc, String path, Object ctx) {\n+                    if (rc != successRc) {\n+                        // terminal immediately\n+                        finalCb.processResult(failureRc, null, context);\n+                        return;\n+                    }\n+                    if (!iter.hasNext()) { // reach the end of list\n+                        finalCb.processResult(successRc, null, context);\n+                        return;\n+                    }\n+                    // process next element\n+                    final T dataToProcess = iter.next();\n+                    final AsyncCallback.VoidCallback stub = this;\n+                    scheduler.submit(new Runnable() {\n+                        @Override\n+                        public final void run() {\n+                            processor.process(dataToProcess, stub);\n+                        }\n+                    });\n+                }\n+            };\n+            T firstElement = iter.next();\n+            processor.process(firstElement, stubCallback);\n+        }\n+    }\n+\n+}"},{"sha":"bea8a1c6f9920421d68362c40e161ef099fea228","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"added","additions":565,"deletions":0,"changes":565,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,565 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.bookkeeper.meta;\n+\n+import org.apache.bookkeeper.replication.ReplicationEnableCb;\n+import org.apache.bookkeeper.replication.ReplicationException;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.util.BookKeeperConstants;\n+import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.DataFormats.LedgerRereplicationLayoutFormat;\n+import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n+import org.apache.bookkeeper.proto.DataFormats.LockDataFormat;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.zookeeper.ZooKeeper;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n+import org.apache.zookeeper.CreateMode;\n+import org.apache.zookeeper.KeeperException;\n+import org.apache.zookeeper.data.Stat;\n+import org.apache.zookeeper.ZooDefs.Ids;\n+\n+import com.google.protobuf.TextFormat;\n+import com.google.common.base.Joiner;\n+import static com.google.common.base.Charsets.UTF_8;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Map;\n+import java.util.List;\n+import java.util.Collections;\n+import java.util.Arrays;\n+\n+\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * ZooKeeper implementation of underreplication manager.\n+ * This is implemented in a heirarchical fashion, so it'll work with\n+ * FlatLedgerManagerFactory and HierarchicalLedgerManagerFactory.\n+ *\n+ * Layout is:\n+ * /root/underreplication/ LAYOUT\n+ *                         ledgers/(hierarchicalpath)/urL(ledgerId)\n+ *                         locks/(ledgerId)\n+ *\n+ * The hierarchical path is created by splitting the ledger into 4 2byte\n+ * segments which are represented in hexidecimal.\n+ * e.g. For ledger id 0xcafebeef0000feed, the path is\n+ *  cafe/beef/0000/feed/\n+ */\n+public class ZkLedgerUnderreplicationManager implements LedgerUnderreplicationManager {\n+    static final Logger LOG = LoggerFactory.getLogger(ZkLedgerUnderreplicationManager.class);\n+    static final String LAYOUT=\"BASIC\";\n+    static final int LAYOUT_VERSION=1;\n+\n+    private static class Lock {\n+        private final String lockZNode;\n+        private final int ledgerZNodeVersion;\n+\n+        Lock(String lockZNode, int ledgerZNodeVersion) {\n+            this.lockZNode = lockZNode;\n+            this.ledgerZNodeVersion = ledgerZNodeVersion;\n+        }\n+\n+        String getLockZNode() { return lockZNode; }\n+        int getLedgerZNodeVersion() { return ledgerZNodeVersion; }\n+    };\n+    private final Map<Long, Lock> heldLocks = new ConcurrentHashMap<Long, Lock>();\n+    private final Pattern idExtractionPattern;\n+\n+    private final String basePath;\n+    private final String urLedgerPath;\n+    private final String urLockPath;\n+    private final String layoutZNode;\n+    private final LockDataFormat lockData;\n+\n+    private final ZooKeeper zkc;\n+\n+    public ZkLedgerUnderreplicationManager(AbstractConfiguration conf, ZooKeeper zkc)\n+            throws KeeperException, InterruptedException, ReplicationException.CompatibilityException {\n+        basePath = conf.getZkLedgersRootPath() + '/'\n+                + BookKeeperConstants.UNDER_REPLICATION_NODE;\n+        layoutZNode = basePath + '/' + BookKeeperConstants.LAYOUT_ZNODE;\n+        urLedgerPath = basePath\n+                + BookKeeperConstants.DEFAULT_ZK_LEDGERS_ROOT_PATH;\n+        urLockPath = basePath + \"/locks\";\n+\n+        idExtractionPattern = Pattern.compile(\"urL(\\\\d+)$\");\n+        this.zkc = zkc;\n+\n+        LockDataFormat.Builder lockDataBuilder = LockDataFormat.newBuilder();\n+        try {\n+            lockDataBuilder.setBookieId(InetAddress.getLocalHost().getHostAddress().toString());\n+        } catch (UnknownHostException uhe) {\n+            // if we cant get the address, ignore. it's optional\n+            // in the data structure in any case\n+        }\n+        lockData = lockDataBuilder.build();\n+\n+        checkLayout();\n+    }\n+\n+    private void checkLayout()\n+            throws KeeperException, InterruptedException, ReplicationException.CompatibilityException {\n+        if (zkc.exists(basePath, false) == null) {\n+            try {\n+                zkc.create(basePath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            } catch (KeeperException.NodeExistsException nee) {\n+                // do nothing, someone each could have created it\n+            }\n+        }\n+        while (true) {\n+            if (zkc.exists(layoutZNode, false) == null) {\n+                LedgerRereplicationLayoutFormat.Builder builder\n+                    = LedgerRereplicationLayoutFormat.newBuilder();\n+                builder.setType(LAYOUT).setVersion(LAYOUT_VERSION);\n+                try {\n+                    zkc.create(layoutZNode, TextFormat.printToString(builder.build()).getBytes(UTF_8),\n+                               Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                } catch (KeeperException.NodeExistsException nne) {\n+                    // someone else managed to create it\n+                    continue;\n+                }\n+            } else {\n+                byte[] layoutData = zkc.getData(layoutZNode, false, null);\n+\n+                LedgerRereplicationLayoutFormat.Builder builder\n+                    = LedgerRereplicationLayoutFormat.newBuilder();\n+\n+                try {\n+                    TextFormat.merge(new String(layoutData, UTF_8), builder);\n+                    LedgerRereplicationLayoutFormat layout = builder.build();\n+                    if (!layout.getType().equals(LAYOUT)\n+                            || layout.getVersion() != LAYOUT_VERSION) {\n+                        throw new ReplicationException.CompatibilityException(\n+                                \"Incompatible layout found (\" + LAYOUT + \":\" + LAYOUT_VERSION + \")\");\n+                    }\n+                } catch (TextFormat.ParseException pe) {\n+                    throw new ReplicationException.CompatibilityException(\n+                            \"Invalid data found\", pe);\n+                }\n+                break;\n+            }\n+        }\n+        if (zkc.exists(urLedgerPath, false) == null) {\n+            try {\n+                zkc.create(urLedgerPath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            } catch (KeeperException.NodeExistsException nee) {\n+                // do nothing, someone each could have created it\n+            }\n+        }\n+        if (zkc.exists(urLockPath, false) == null) {\n+            try {\n+                zkc.create(urLockPath, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            } catch (KeeperException.NodeExistsException nee) {\n+                // do nothing, someone each could have created it\n+            }\n+        }\n+    }\n+\n+    private long getLedgerId(String path) throws NumberFormatException {\n+        Matcher m = idExtractionPattern.matcher(path);\n+        if (m.find()) {\n+            return Long.valueOf(m.group(1));\n+        } else {\n+            throw new NumberFormatException(\"Couldn't find ledgerid in path\");\n+        }\n+    }\n+\n+    public static String getParentZnodePath(String base, long ledgerId) {\n+        String subdir1 = String.format(\"%04x\", ledgerId >> 48 & 0xffff);\n+        String subdir2 = String.format(\"%04x\", ledgerId >> 32 & 0xffff);\n+        String subdir3 = String.format(\"%04x\", ledgerId >> 16 & 0xffff);\n+        String subdir4 = String.format(\"%04x\", ledgerId & 0xffff);\n+        \n+        return String.format(\"%s/%s/%s/%s/%s\",\n+                             base, subdir1, subdir2, subdir3, subdir4);\n+    }\n+\n+    public static String getUrLedgerZnode(String base, long ledgerId) {\n+        return String.format(\"%s/urL%010d\", getParentZnodePath(base, ledgerId), ledgerId);\n+    }\n+\n+    private String getUrLedgerZnode(long ledgerId) {\n+        return getUrLedgerZnode(urLedgerPath, ledgerId);\n+    }\n+\n+\n+    @Override\n+    public void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n+            throws ReplicationException.UnavailableException {\n+        LOG.debug(\"markLedgerUnderreplicated(ledgerId={}, missingReplica={})\", ledgerId, missingReplica);\n+        try {\n+            String znode = getUrLedgerZnode(ledgerId);\n+            while (true) {\n+                UnderreplicatedLedgerFormat.Builder builder = UnderreplicatedLedgerFormat.newBuilder();\n+                try {\n+                    builder.addReplica(missingReplica);\n+                    ZkUtils.createFullPathOptimistic(zkc, znode, TextFormat\n+                            .printToString(builder.build()).getBytes(UTF_8),\n+                            Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+                } catch (KeeperException.NodeExistsException nee) {\n+                    Stat s = zkc.exists(znode, false);\n+                    if (s == null) {\n+                        continue;\n+                    }\n+                    try {\n+                        byte[] bytes = zkc.getData(znode, false, s);\n+                        builder.clear();\n+                        TextFormat.merge(new String(bytes, UTF_8), builder);\n+                        UnderreplicatedLedgerFormat data = builder.build();\n+                        if (data.getReplicaList().contains(missingReplica)) {\n+                            return; // nothing to add\n+                        }\n+                        builder.addReplica(missingReplica);\n+                        zkc.setData(znode,\n+                                    TextFormat.printToString(builder.build()).getBytes(UTF_8),\n+                                    s.getVersion());\n+                    } catch (KeeperException.NoNodeException nne) {\n+                        continue;\n+                    } catch (KeeperException.BadVersionException bve) {\n+                        continue;\n+                    } catch (TextFormat.ParseException pe) {\n+                        throw new ReplicationException.UnavailableException(\n+                                \"Invalid data found\", pe);\n+                    }\n+                }\n+                break;\n+            }\n+        } catch (KeeperException ke) {\n+            throw new ReplicationException.UnavailableException(\"Error contacting zookeeper\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\"Interrupted while contacting zookeeper\", ie);\n+        }\n+    }\n+\n+    @Override\n+    public void markLedgerReplicated(long ledgerId) throws ReplicationException.UnavailableException {\n+        LOG.debug(\"markLedgerReplicated(ledgerId={})\", ledgerId);\n+        try {\n+            Lock l = heldLocks.get(ledgerId);\n+            if (l != null) {\n+                zkc.delete(getUrLedgerZnode(ledgerId), l.getLedgerZNodeVersion());\n+\n+                try {\n+                    // clean up the hierarchy\n+                    String parts[] = getUrLedgerZnode(ledgerId).split(\"/\");\n+                    for (int i = 1; i <= 4; i++) {\n+                        String p[] = Arrays.copyOf(parts, parts.length - i);\n+                        String path = Joiner.on(\"/\").join(p);\n+                        Stat s = zkc.exists(path, null);\n+                        if (s != null) {\n+                            zkc.delete(path, s.getVersion());\n+                        }\n+                    }\n+                } catch (KeeperException.NotEmptyException nee) {\n+                    // This can happen when cleaning up the hierarchy.\n+                    // It's safe to ignore, it simply means another\n+                    // ledger in the same hierarchy has been marked as\n+                    // underreplicated.\n+                }\n+            }\n+        } catch (KeeperException.NoNodeException nne) {\n+            // this is ok\n+        } catch (KeeperException.BadVersionException bve) {\n+            // if this is the case, some has marked the ledger\n+            // for rereplication again. Leave the underreplicated\n+            // znode in place, so the ledger is checked.\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Error deleting underreplicated ledger znode\", ke);\n+            throw new ReplicationException.UnavailableException(\"Error contacting zookeeper\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\"Interrupted while contacting zookeeper\", ie);\n+        } finally {\n+            releaseUnderreplicatedLedger(ledgerId);\n+        }\n+    }\n+\n+    private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watcher w)\n+            throws KeeperException, InterruptedException {\n+        if (depth == 4) {\n+            List<String> children;\n+            try {\n+                children = zkc.getChildren(parent, w);\n+            } catch (KeeperException.NoNodeException nne) {\n+                // can occur if another underreplicated ledger's\n+                // hierarchy is being cleaned up\n+                return -1;\n+            }\n+\n+            Collections.shuffle(children);\n+\n+            while (children.size() > 0) {\n+                String tryChild = children.get(0);\n+                try {\n+                    String lockPath = urLockPath + \"/\" + tryChild;\n+                    if (zkc.exists(lockPath, w) != null) {\n+                        children.remove(tryChild);\n+                        continue;\n+                    }\n+\n+                    Stat stat = zkc.exists(parent + \"/\" + tryChild, false);\n+                    if (stat == null) {\n+                        LOG.debug(\"{}/{} doesn't exist\", parent, tryChild);\n+                        children.remove(tryChild);\n+                        continue;\n+                    }\n+\n+                    long ledgerId = getLedgerId(tryChild);\n+                    zkc.create(lockPath, TextFormat.printToString(lockData).getBytes(UTF_8),\n+                               Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\n+                    heldLocks.put(ledgerId, new Lock(lockPath, stat.getVersion()));\n+                    return ledgerId;\n+                } catch (KeeperException.NodeExistsException nee) {\n+                    children.remove(tryChild);\n+                } catch (NumberFormatException nfe) {\n+                    children.remove(tryChild);\n+                }\n+            }\n+            return -1;\n+        }\n+\n+        List<String> children;\n+        try {\n+            children = zkc.getChildren(parent, w);\n+        } catch (KeeperException.NoNodeException nne) {\n+            // can occur if another underreplicated ledger's\n+            // hierarchy is being cleaned up\n+            return -1;\n+        }\n+\n+        Collections.shuffle(children);\n+\n+        while (children.size() > 0) {\n+            String tryChild = children.get(0);\n+            String tryPath = parent + \"/\" + tryChild;\n+            long ledger = getLedgerToRereplicateFromHierarchy(tryPath, depth + 1, w);\n+            if (ledger != -1) {\n+                return ledger;\n+            }\n+            children.remove(tryChild);\n+        }\n+        return -1;\n+    }\n+\n+\n+    @Override\n+    public long pollLedgerToRereplicate() throws ReplicationException.UnavailableException {\n+        LOG.debug(\"pollLedgerToRereplicate()\");\n+        try {\n+            Watcher w = new Watcher() {\n+                    public void process(WatchedEvent e) { // do nothing\n+                    }\n+                };\n+            return getLedgerToRereplicateFromHierarchy(urLedgerPath, 0, w);\n+        } catch (KeeperException ke) {\n+            throw new ReplicationException.UnavailableException(\"Error contacting zookeeper\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\"Interrupted while connecting zookeeper\", ie);\n+        }\n+    }\n+\n+    @Override\n+    public long getLedgerToRereplicate() throws ReplicationException.UnavailableException {\n+        LOG.debug(\"getLedgerToRereplicate()\");\n+        try {\n+            while (true) {\n+                waitIfLedgerReplicationDisabled();\n+                final CountDownLatch changedLatch = new CountDownLatch(1);\n+                Watcher w = new Watcher() {\n+                        public void process(WatchedEvent e) {\n+                            if (e.getType() == Watcher.Event.EventType.NodeChildrenChanged\n+                                || e.getType() == Watcher.Event.EventType.NodeDeleted\n+                                || e.getType() == Watcher.Event.EventType.NodeCreated\n+                                || e.getState() == Watcher.Event.KeeperState.Expired\n+                                || e.getState() == Watcher.Event.KeeperState.Disconnected) {\n+                                changedLatch.countDown();\n+                            }\n+                        }\n+                    };\n+                long ledger = getLedgerToRereplicateFromHierarchy(urLedgerPath, 0, w);\n+                if (ledger != -1) {\n+                    return ledger;\n+                }\n+                // nothing found, wait for a watcher to trigger\n+                changedLatch.await();\n+            }\n+        } catch (KeeperException ke) {\n+            throw new ReplicationException.UnavailableException(\"Error contacting zookeeper\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\"Interrupted while connecting zookeeper\", ie);\n+        }\n+    }\n+\n+    private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n+            InterruptedException {\n+        ReplicationEnableCb cb = new ReplicationEnableCb();\n+        if (!this.isLedgerReplicationEnabled()) {\n+            this.notifyLedgerReplicationEnabled(cb);\n+            cb.await();\n+        }\n+    }\n+    \n+    @Override\n+    public void releaseUnderreplicatedLedger(long ledgerId) throws ReplicationException.UnavailableException {\n+        LOG.debug(\"releaseLedger(ledgerId={})\", ledgerId);\n+        try {\n+            Lock l = heldLocks.remove(ledgerId);\n+            if (l != null) {\n+                zkc.delete(l.getLockZNode(), -1);\n+            }\n+        } catch (KeeperException.NoNodeException nne) {\n+            // this is ok\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Error deleting underreplicated ledger lock\", ke);\n+            throw new ReplicationException.UnavailableException(\"Error contacting zookeeper\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\"Interrupted while connecting zookeeper\", ie);\n+        }\n+    }\n+\n+    @Override\n+    public void close() throws ReplicationException.UnavailableException {\n+        LOG.debug(\"close()\");\n+        try {\n+            for (Map.Entry<Long, Lock> e : heldLocks.entrySet()) {\n+                zkc.delete(e.getValue().getLockZNode(), -1);\n+            }\n+        } catch (KeeperException.NoNodeException nne) {\n+            // this is ok\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Error deleting underreplicated ledger lock\", ke);\n+            throw new ReplicationException.UnavailableException(\"Error contacting zookeeper\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\"Interrupted while connecting zookeeper\", ie);\n+        }\n+    }\n+\n+    @Override\n+    public void disableLedgerReplication()\n+            throws ReplicationException.UnavailableException {\n+        LOG.debug(\"disableLedegerReplication()\");\n+        try {\n+            ZkUtils.createFullPathOptimistic(zkc, basePath + '/'\n+                    + BookKeeperConstants.DISABLE_NODE, \"\".getBytes(),\n+                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            LOG.info(\"Auto ledger re-replication is disabled!\");\n+        } catch (KeeperException.NodeExistsException ke) {\n+            LOG.warn(\"AutoRecovery is already disabled!\", ke);\n+            throw new ReplicationException.UnavailableException(\n+                    \"AutoRecovery is already disabled!\", ke);\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Exception while stopping auto ledger re-replication\", ke);\n+            throw new ReplicationException.UnavailableException(\n+                    \"Exception while stopping auto ledger re-replication\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\n+                    \"Interrupted while stopping auto ledger re-replication\", ie);\n+        }\n+    }\n+\n+    @Override\n+    public void enableLedgerReplication()\n+            throws ReplicationException.UnavailableException {\n+        LOG.debug(\"enableLedegerReplication()\");\n+        try {\n+            zkc.delete(basePath + '/' + BookKeeperConstants.DISABLE_NODE, -1);\n+            LOG.info(\"Resuming automatic ledger re-replication\");\n+        } catch (KeeperException.NoNodeException ke) {\n+            LOG.warn(\"AutoRecovery is already enabled!\", ke);\n+            throw new ReplicationException.UnavailableException(\n+                    \"AutoRecovery is already enabled!\", ke);\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Exception while resuming ledger replication\", ke);\n+            throw new ReplicationException.UnavailableException(\n+                    \"Exception while resuming auto ledger re-replication\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\n+                    \"Interrupted while resuming auto ledger re-replication\", ie);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isLedgerReplicationEnabled()\n+            throws ReplicationException.UnavailableException {\n+        LOG.debug(\"isLedgerReplicationEnabled()\");\n+        try {\n+            if (null != zkc.exists(basePath + '/'\n+                    + BookKeeperConstants.DISABLE_NODE, false)) {\n+                return false;\n+            }\n+            return true;\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Error while checking the state of \"\n+                    + \"ledger re-replication\", ke);\n+            throw new ReplicationException.UnavailableException(\n+                    \"Error contacting zookeeper\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\n+                    \"Interrupted while contacting zookeeper\", ie);\n+        }\n+    }\n+\n+    @Override\n+    public void notifyLedgerReplicationEnabled(final GenericCallback<Void> cb)\n+            throws ReplicationException.UnavailableException {\n+        LOG.debug(\"notifyLedgerReplicationEnabled()\");\n+        Watcher w = new Watcher() {\n+            public void process(WatchedEvent e) {\n+                if (e.getType() == Watcher.Event.EventType.NodeDeleted) {\n+                    cb.operationComplete(0, null);\n+                }\n+            }\n+        };\n+        try {\n+            if (null == zkc.exists(basePath + '/'\n+                    + BookKeeperConstants.DISABLE_NODE, w)) {\n+                cb.operationComplete(0, null);\n+                return;\n+            }\n+        } catch (KeeperException ke) {\n+            LOG.error(\"Error while checking the state of \"\n+                    + \"ledger re-replication\", ke);\n+            throw new ReplicationException.UnavailableException(\n+                    \"Error contacting zookeeper\", ke);\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            throw new ReplicationException.UnavailableException(\n+                    \"Interrupted while contacting zookeeper\", ie);\n+        }\n+    }\n+}"},{"sha":"7fdb8bdb22897eb4059534914505487d895a5f61","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkVersion.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,69 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.meta;\n+\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Version.Occurred;\n+\n+public class ZkVersion implements Version {\n+    int znodeVersion;\n+\n+    public ZkVersion(int version) {\n+        znodeVersion = version;\n+    }\n+\n+    @Override\n+    public Occurred compare(Version v) {\n+        if (null == v) {\n+            throw new NullPointerException(\"Version is not allowed to be null.\");\n+        }\n+        if (v == Version.NEW) {\n+            return Occurred.AFTER;\n+        } else if (v == Version.ANY) {\n+            return Occurred.CONCURRENTLY;\n+        } else if (!(v instanceof ZkVersion)) {\n+            throw new IllegalArgumentException(\"Invalid version type\");\n+        }\n+        ZkVersion zv = (ZkVersion)v;\n+        int res = znodeVersion - zv.znodeVersion;\n+        if (res == 0) {\n+            return Occurred.CONCURRENTLY;\n+        } else if (res < 0) {\n+            return Occurred.BEFORE;\n+        } else {\n+            return Occurred.AFTER;\n+        }\n+    }\n+\n+    public int getZnodeVersion() {\n+        return znodeVersion;\n+    }\n+\n+    public ZkVersion setZnodeVersion(int znodeVersion) {\n+        this.znodeVersion = znodeVersion;\n+        return this;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Integer.toString(znodeVersion, 10);\n+    }\n+}"},{"sha":"7358504f1abdb62c9e63c132b989fbce53043627","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetaStore.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetaStore.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetaStore.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetaStore.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,77 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+public class InMemoryMetaStore implements MetaStore {\n+\n+    static final int CUR_VERSION = 1;\n+\n+    static Map<String, InMemoryMetastoreTable> tables =\n+        new HashMap<String, InMemoryMetastoreTable>();\n+\n+    // for test\n+    public static void reset() {\n+        tables.clear();\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return getClass().getName();\n+    }\n+\n+    @Override\n+    public int getVersion() {\n+        return CUR_VERSION;\n+    }\n+\n+    @Override\n+    public void init(Configuration conf, int msVersion)\n+    throws MetastoreException {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public void close() {\n+        // do nothing\n+    }\n+\n+    @Override\n+    public MetastoreTable createTable(String name) {\n+        return createInMemoryTable(name);\n+    }\n+\n+    @Override\n+    public MetastoreScannableTable createScannableTable(String name) {\n+        return createInMemoryTable(name);\n+    }\n+\n+    private InMemoryMetastoreTable createInMemoryTable(String name) {\n+        InMemoryMetastoreTable t = tables.get(name);\n+        if (t == null) {\n+            t = new InMemoryMetastoreTable(this, name);\n+            tables.put(name, t);\n+        }\n+        return t;\n+    }\n+\n+}"},{"sha":"4e643d5262d0b2f45f6ffaee34f48abda4649efc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,94 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import static org.apache.bookkeeper.metastore.InMemoryMetastoreTable.cloneValue;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.apache.bookkeeper.metastore.MSException.Code;\n+import org.apache.bookkeeper.versioning.Versioned;\n+\n+class InMemoryMetastoreCursor implements MetastoreCursor {\n+\n+    private final ScheduledExecutorService scheduler;\n+    private final Iterator<Map.Entry<String, Versioned<Value>>> iter;\n+    private final Set<String> fields;\n+\n+    public InMemoryMetastoreCursor(NavigableMap<String, Versioned<Value>> map, Set<String> fields,\n+            ScheduledExecutorService scheduler) {\n+        this.iter = map.entrySet().iterator();\n+        this.fields = fields;\n+        this.scheduler = scheduler;\n+    }\n+\n+    @Override\n+    public boolean hasMoreEntries() {\n+        return iter.hasNext();\n+    }\n+\n+    @Override\n+    public Iterator<MetastoreTableItem> readEntries(int numEntries)\n+    throws MSException {\n+        if (numEntries < 0) {\n+            throw MSException.create(Code.IllegalOp);\n+        }\n+        return unsafeReadEntries(numEntries);\n+    }\n+\n+    @Override\n+    public void asyncReadEntries(final int numEntries, final ReadEntriesCallback cb, final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                if (numEntries < 0) {\n+                    cb.complete(Code.IllegalOp.getCode(), null, ctx);\n+                    return;\n+                }\n+                Iterator<MetastoreTableItem> result = unsafeReadEntries(numEntries);\n+                cb.complete(Code.OK.getCode(), result, ctx);\n+            }\n+        });\n+    }\n+\n+    private Iterator<MetastoreTableItem> unsafeReadEntries(int numEntries) {\n+        List<MetastoreTableItem> entries = new ArrayList<MetastoreTableItem>();\n+        int nCount = 0;\n+        while (iter.hasNext() && nCount < numEntries) {\n+            Map.Entry<String, Versioned<Value>> entry = iter.next();\n+            Versioned<Value> value = entry.getValue();\n+            Versioned<Value> vv = cloneValue(value.getValue(), value.getVersion(), fields);\n+            String key = entry.getKey();\n+            entries.add(new MetastoreTableItem(key, vv));\n+            ++nCount;\n+        }\n+        return entries.iterator();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        // do nothing\n+    }\n+}"},{"sha":"0173f64f64a5906972fe93fb3d9ad9eb85cc3f18","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","status":"added","additions":337,"deletions":0,"changes":337,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,337 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import java.util.NavigableMap;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.apache.bookkeeper.metastore.MSException.Code;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n+\n+public class InMemoryMetastoreTable implements MetastoreScannableTable {\n+\n+    public static class MetadataVersion implements Version {\n+        int version;\n+\n+        public MetadataVersion(int v) {\n+            this.version = v;\n+        }\n+\n+        public MetadataVersion(MetadataVersion v) {\n+            this.version = v.version;\n+        }\n+\n+        public synchronized MetadataVersion incrementVersion() {\n+            ++version;\n+            return this;\n+        }\n+\n+        @Override\n+        public Occurred compare(Version v) {\n+            if (null == v) {\n+                throw new NullPointerException(\"Version is not allowed to be null.\");\n+            }\n+            if (v == Version.NEW) {\n+                return Occurred.AFTER;\n+            } else if (v == Version.ANY) {\n+                return Occurred.CONCURRENTLY;\n+            } else if (!(v instanceof MetadataVersion)) {\n+                throw new IllegalArgumentException(\"Invalid version type\");\n+            }\n+            MetadataVersion mv = (MetadataVersion)v;\n+            int res = version - mv.version;\n+            if (res == 0) {\n+                return Occurred.CONCURRENTLY;\n+            } else if (res < 0) {\n+                return Occurred.BEFORE;\n+            } else {\n+                return Occurred.AFTER;\n+            }\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (null == obj ||\n+                !(obj instanceof MetadataVersion)) {\n+                return false;\n+            }\n+            MetadataVersion v = (MetadataVersion)obj;\n+            return 0 == (version - v.version);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"version=\" + version;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return version;\n+        }\n+    }\n+\n+    private String name;\n+    private TreeMap<String, Versioned<Value>> map = null;\n+    private ScheduledExecutorService scheduler;\n+\n+    public InMemoryMetastoreTable(InMemoryMetaStore metastore, String name) {\n+        this.map = new TreeMap<String, Versioned<Value>>();\n+        this.name = name;\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+    }\n+\n+    @Override\n+    public String getName () {\n+        return this.name;\n+    }\n+\n+    static Versioned<Value> cloneValue(Value value, Version version, Set<String> fields) {\n+        if (null != value) {\n+            Value newValue = new Value();\n+            if (ALL_FIELDS == fields) {\n+                fields = value.getFields();\n+            }\n+            for (String f : fields) {\n+                newValue.setField(f, value.getField(f));\n+            }\n+            value = newValue;\n+        }\n+\n+        if (null == version) {\n+            throw new NullPointerException(\"Version isn't allowed to be null.\");\n+        }\n+        if (Version.ANY != version && Version.NEW != version) {\n+            if (version instanceof MetadataVersion) {\n+                version = new MetadataVersion(((MetadataVersion)version).version);\n+            } else {\n+                throw new IllegalStateException(\"Wrong version type.\");\n+            }\n+        }\n+        return new Versioned<Value>(value, version);\n+    }\n+\n+    @Override\n+    public void get(final String key, final MetastoreCallback<Versioned<Value>> cb, final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                scheduleGet(key, ALL_FIELDS, cb, ctx);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void get(final String key, final Set<String> fields, final MetastoreCallback<Versioned<Value>> cb,\n+            final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                scheduleGet(key, fields, cb, ctx);\n+            }\n+        });\n+    }\n+\n+    public synchronized void scheduleGet(String key, Set<String> fields, MetastoreCallback<Versioned<Value>> cb,\n+            Object ctx) {\n+        if (null == key) {\n+            cb.complete(Code.IllegalOp.getCode(), null, ctx);\n+            return;\n+        }\n+        Versioned<Value> vv = get(key);\n+        int rc = null == vv ? Code.NoKey.getCode() : Code.OK.getCode();\n+        if (vv != null) {\n+            vv = cloneValue(vv.getValue(), vv.getVersion(), fields);\n+        }\n+        cb.complete(rc, vv, ctx);\n+    }\n+\n+    @Override\n+    public void put(final String key, final Value value, final Version version, final MetastoreCallback<Version> cb,\n+            final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                if (null == key || null == value || null == version) {\n+                    cb.complete(Code.IllegalOp.getCode(), null, ctx);\n+                    return;\n+                }\n+                Result<Version> result = put(key, value, version);\n+                cb.complete(result.code.getCode(), result.value, ctx);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void remove(final String key, final Version version, final MetastoreCallback<Void> cb, final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                if (null == key || null == version) {\n+                    cb.complete(Code.IllegalOp.getCode(), null, ctx);\n+                    return;\n+                }\n+                Code code = remove(key, version);\n+                cb.complete(code.getCode(), null, ctx);\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void openCursor(MetastoreCallback<MetastoreCursor> cb, Object ctx) {\n+        openCursor(EMPTY_START_KEY, true, EMPTY_END_KEY, true, Order.ASC,\n+                   ALL_FIELDS, cb, ctx);\n+    }\n+\n+    @Override\n+    public void openCursor(Set<String> fields,\n+                           MetastoreCallback<MetastoreCursor> cb, Object ctx) {\n+        openCursor(EMPTY_START_KEY, true, EMPTY_END_KEY, true, Order.ASC,\n+                   fields, cb, ctx);\n+    }\n+\n+    @Override\n+    public void openCursor(String firstKey, boolean firstInclusive,\n+                           String lastKey, boolean lastInclusive,\n+                           Order order, MetastoreCallback<MetastoreCursor> cb,\n+                           Object ctx) {\n+        openCursor(firstKey, firstInclusive, lastKey, lastInclusive,\n+                   order, ALL_FIELDS, cb, ctx);\n+    }\n+\n+    @Override\n+    public void openCursor(final String firstKey, final boolean firstInclusive,\n+                           final String lastKey, final boolean lastInclusive,\n+                           final Order order, final Set<String> fields,\n+                           final MetastoreCallback<MetastoreCursor> cb, final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                Result<MetastoreCursor> result = openCursor(firstKey, firstInclusive, lastKey, lastInclusive,\n+                        order, fields);\n+                cb.complete(result.code.getCode(), result.value, ctx);\n+            }\n+        });\n+    }\n+\n+    private synchronized Versioned<Value> get(String key) {\n+        return map.get(key);\n+    }\n+\n+    private synchronized Code remove(String key, Version version) {\n+        Versioned<Value> vv = map.get(key);\n+        if (null == vv) {\n+            return Code.NoKey;\n+        }\n+        if (Version.Occurred.CONCURRENTLY != vv.getVersion().compare(version)) {\n+            return Code.BadVersion;\n+        }\n+        map.remove(key);\n+        return Code.OK;\n+    }\n+\n+    static class Result<T> {\n+        Code code;\n+        T value;\n+\n+        public Result(Code code, T value) {\n+            this.code = code;\n+            this.value = value;\n+        }\n+    }\n+\n+    private synchronized Result<Version> put(String key, Value value, Version version) {\n+        Versioned<Value> vv = map.get(key);\n+        if (vv == null) {\n+            if (Version.NEW != version) {\n+                return new Result<Version>(Code.NoKey, null);\n+            }\n+            vv = cloneValue(value, version, ALL_FIELDS);\n+            vv.setVersion(new MetadataVersion(0));\n+            map.put(key, vv);\n+            return new Result<Version>(Code.OK, new MetadataVersion(0));\n+        }\n+        if (Version.NEW == version) {\n+            return new Result<Version>(Code.KeyExists, null);\n+        }\n+        if (Version.Occurred.CONCURRENTLY != vv.getVersion().compare(version)) {\n+            return new Result<Version>(Code.BadVersion, null);\n+        }\n+        vv.setVersion(((MetadataVersion)vv.getVersion()).incrementVersion());\n+        vv.setValue(vv.getValue().merge(value));\n+        return new Result<Version>(Code.OK, new MetadataVersion((MetadataVersion)vv.getVersion()));\n+    }\n+\n+    private synchronized Result<MetastoreCursor> openCursor(\n+            String firstKey, boolean firstInclusive,\n+            String lastKey, boolean lastInclusive,\n+            Order order, Set<String> fields) {\n+        if (0 == map.size()) {\n+            return new Result<MetastoreCursor>(Code.OK, MetastoreCursor.EMPTY_CURSOR);\n+        }\n+\n+        boolean isLegalCursor = false;\n+        NavigableMap<String, Versioned<Value>> myMap = null;\n+        if (Order.ASC == order) {\n+            myMap = map;\n+            if (EMPTY_END_KEY == lastKey ||\n+                lastKey.compareTo(myMap.lastKey()) > 0) {\n+                lastKey = myMap.lastKey();\n+                lastInclusive = true;\n+            }\n+            if (EMPTY_START_KEY == firstKey ||\n+                firstKey.compareTo(myMap.firstKey()) < 0) {\n+                firstKey = myMap.firstKey();\n+                firstInclusive = true;\n+            }\n+            if (firstKey.compareTo(lastKey) <= 0) {\n+                isLegalCursor = true;\n+            }\n+        } else if (Order.DESC == order) {\n+            myMap = map.descendingMap();\n+            if (EMPTY_START_KEY == lastKey ||\n+                lastKey.compareTo(myMap.lastKey()) < 0) {\n+                lastKey = myMap.lastKey();\n+                lastInclusive = true;\n+            }\n+            if (EMPTY_END_KEY == firstKey ||\n+                firstKey.compareTo(myMap.firstKey()) > 0) {\n+                firstKey = myMap.firstKey();\n+                firstInclusive = true;\n+            }\n+            if (firstKey.compareTo(lastKey) >= 0) {\n+                isLegalCursor = true;\n+            }\n+        }\n+\n+        if (!isLegalCursor || null == myMap) {\n+            return new Result<MetastoreCursor>(Code.IllegalOp, null);\n+        }\n+        MetastoreCursor cursor = new InMemoryMetastoreCursor(\n+                myMap.subMap(firstKey, firstInclusive, lastKey, lastInclusive), fields, scheduler);\n+        return new Result<MetastoreCursor>(Code.OK, cursor);\n+    }\n+\n+    @Override\n+    public void close() {\n+        // do nothing\n+    }\n+}"},{"sha":"a1350dc7d77b18efc32b6460cc1cae85ce9cbffa","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSException.java","status":"added","additions":214,"deletions":0,"changes":214,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSException.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSException.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,214 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+@SuppressWarnings(\"serial\")\n+public abstract class MSException extends Exception {\n+\n+    /**\n+     * return codes\n+     */\n+    public static enum Code {\n+        OK (0, \"OK\"),\n+        BadVersion (-1, \"Version conflict\"),\n+        NoKey (-2, \"Key does not exist\"),\n+        KeyExists (-3, \"Key exists\"),\n+        NoEntries (-4, \"No entries found\"),\n+\n+        InterruptedException (-100, \"Operation interrupted\"),\n+        IllegalOp (-101, \"Illegal operation\"),\n+        ServiceDown (-102, \"Metadata service is down\"),\n+        OperationFailure(-103, \"Operaion failed on metadata storage server side\");\n+\n+        private static final Map<Integer, Code> codes\n+            = new HashMap<Integer, Code>();\n+\n+        static {\n+            for (Code c : EnumSet.allOf(Code.class)) {\n+                codes.put(c.code, c);\n+            }\n+        }\n+\n+        private final int code;\n+        private final String description;\n+\n+        private Code(int code, String description) {\n+            this.code = code;\n+            this.description = description;\n+        }\n+\n+        /**\n+         * Get the int value for a particular Code.\n+         *\n+         * @return error code as integer\n+         */\n+        public int getCode() {\n+            return code;\n+        }\n+\n+        /**\n+         * Get the description for a particular Code.\n+         *\n+         * @return error description\n+         */\n+        public String getDescription() {\n+            return description;\n+        }\n+\n+        /**\n+         * Get the Code value for a particular integer error code.\n+         *\n+         * @param code int error code\n+         * @return Code value corresponding to specified int code, or null.\n+         */\n+        public static Code get(int code) {\n+            return codes.get(code);\n+        }\n+    }\n+\n+    private final Code code;\n+\n+    MSException(Code code, String errMsg) {\n+        super(code.getDescription() + \" : \" + errMsg);\n+        this.code = code;\n+    }\n+\n+    MSException(Code code, String errMsg, Throwable cause) {\n+        super(code.getDescription() + \" : \" + errMsg, cause);\n+        this.code = code;\n+    }\n+\n+    public Code getCode() {\n+        return this.code;\n+    }\n+\n+    public static MSException create(Code code) {\n+        return create(code, \"\", null);\n+    }\n+\n+    public static MSException create(Code code, String errMsg) {\n+        return create(code, errMsg, null);\n+    }\n+\n+    public static MSException create(Code code, String errMsg, Throwable cause) {\n+        switch (code) {\n+            case BadVersion:\n+                return new BadVersionException(errMsg, cause);\n+            case NoKey:\n+                return new NoKeyException(errMsg, cause);\n+            case KeyExists:\n+                return new KeyExistsException(errMsg, cause);\n+            case InterruptedException:\n+                return new MSInterruptedException(errMsg, cause);\n+            case IllegalOp:\n+                return new IllegalOpException(errMsg, cause);\n+            case ServiceDown:\n+                return new ServiceDownException(errMsg, cause);\n+            case OperationFailure:\n+                return new OperationFailureException(errMsg, cause);\n+            case OK:\n+            default:\n+                throw new IllegalArgumentException(\"Invalid exception code\");\n+        }\n+    }\n+\n+    public static class BadVersionException extends MSException {\n+        public BadVersionException(String errMsg) {\n+            super(Code.BadVersion, errMsg);\n+        }\n+\n+        public BadVersionException(String errMsg, Throwable cause) {\n+            super(Code.BadVersion, errMsg, cause);\n+        }\n+    }\n+\n+    public static class NoKeyException extends MSException {\n+        public NoKeyException(String errMsg) {\n+            super(Code.NoKey, errMsg);\n+        }\n+\n+        public NoKeyException(String errMsg, Throwable cause) {\n+            super(Code.NoKey, errMsg, cause);\n+        }\n+    }\n+\n+    // Exception would be thrown in a cursor if no entries found\n+    public static class NoEntriesException extends MSException {\n+        public NoEntriesException(String errMsg) {\n+            super(Code.NoEntries, errMsg);\n+        }\n+\n+        public NoEntriesException(String errMsg, Throwable cause) {\n+            super(Code.NoEntries, errMsg, cause);\n+        }\n+    }\n+\n+    public static class KeyExistsException extends MSException {\n+        public KeyExistsException(String errMsg) {\n+            super(Code.KeyExists, errMsg);\n+        }\n+\n+        public KeyExistsException(String errMsg, Throwable cause) {\n+            super(Code.KeyExists, errMsg, cause);\n+        }\n+    }\n+\n+    public static class MSInterruptedException extends MSException {\n+        public MSInterruptedException(String errMsg) {\n+            super(Code.InterruptedException, errMsg);\n+        }\n+\n+        public MSInterruptedException(String errMsg, Throwable cause) {\n+            super(Code.InterruptedException, errMsg, cause);\n+        }\n+    }\n+\n+    public static class IllegalOpException extends MSException {\n+        public IllegalOpException(String errMsg) {\n+            super(Code.IllegalOp, errMsg);\n+        }\n+\n+        public IllegalOpException(String errMsg, Throwable cause) {\n+            super(Code.IllegalOp, errMsg, cause);\n+        }\n+    }\n+\n+    public static class ServiceDownException extends MSException {\n+        public ServiceDownException(String errMsg) {\n+            super(Code.ServiceDown, errMsg);\n+        }\n+\n+        public ServiceDownException(String errMsg, Throwable cause) {\n+            super(Code.ServiceDown, errMsg, cause);\n+        }\n+    }\n+\n+    public static class OperationFailureException extends MSException {\n+        public OperationFailureException(String errMsg) {\n+            super(Code.OperationFailure, errMsg);\n+        }\n+\n+        public OperationFailureException(String errMsg, Throwable cause) {\n+            super(Code.OperationFailure, errMsg, cause);\n+        }\n+    }\n+}"},{"sha":"29fd3294468598d497e40b74768330a103468925","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetaStore.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetaStore.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetaStore.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetaStore.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,79 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import org.apache.commons.configuration.Configuration;\n+\n+/**\n+ * Metadata Store Interface.\n+ */\n+public interface MetaStore {\n+    /**\n+     * Return the name of the plugin.\n+     *\n+     * @return the plugin name.\n+     */\n+    public String getName();\n+\n+    /**\n+     * Get the plugin verison.\n+     *\n+     * @return the plugin version.\n+     */\n+    public int getVersion();\n+\n+    /**\n+     * Initialize the meta store.\n+     *\n+     * @param config\n+     *          Configuration object passed to metastore\n+     * @param msVersion\n+     *          Version to initialize the metastore\n+     * @throws MetastoreException when failed to initialize\n+     */\n+    public void init(Configuration config, int msVersion)\n+    throws MetastoreException;\n+\n+    /**\n+     * Close the meta store.\n+     */\n+    public void close();\n+\n+    /**\n+     * Create a metastore table.\n+     *\n+     * @param name\n+     *          Table name.\n+     * @return a metastore table\n+     * @throws MetastoreException when failed to create the metastore table.\n+     */\n+    public MetastoreTable createTable(String name)\n+    throws MetastoreException;\n+\n+    /**\n+     * Create a scannable metastore table.\n+     *\n+     * @param name\n+     *          Table name.\n+     * @return a metastore scannable table\n+     * @throws MetastoreException when failed to create the metastore table.\n+     */\n+    public MetastoreScannableTable createScannableTable(String name)\n+    throws MetastoreException;\n+\n+}"},{"sha":"78c709c15fe0c4cf158a695c98bf256fd7ce10ce","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreCallback.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreCallback.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+public interface MetastoreCallback<T> {\n+    /**\n+     * @see MSException.Code\n+     */\n+    public void complete(int rc, T value, Object ctx);\n+}"},{"sha":"f4f9d65a1292f517cd2d37ec850cb4a25cb851f9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreCursor.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreCursor.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreCursor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreCursor.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.Iterator;\n+\n+public interface MetastoreCursor extends Closeable {\n+\n+    public static MetastoreCursor EMPTY_CURSOR = new MetastoreCursor() {\n+        @Override\n+        public boolean hasMoreEntries() {\n+            return false;\n+        }\n+\n+        @Override\n+        public Iterator<MetastoreTableItem> readEntries(int numEntries)\n+        throws MSException {\n+            throw new MSException.NoEntriesException(\"No entries left in the cursor.\");\n+        }\n+\n+        @Override\n+        public void asyncReadEntries(int numEntries, ReadEntriesCallback callback, Object ctx) {\n+            callback.complete(MSException.Code.NoEntries.getCode(), null, ctx);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            // do nothing\n+        }\n+    };\n+\n+    public static interface ReadEntriesCallback extends\n+        MetastoreCallback<Iterator<MetastoreTableItem>> {\n+    }\n+\n+    /**\n+     * Is there any entries left in the cursor to read.\n+     *\n+     * @return true if there is entries left, false otherwise.\n+     */\n+    public boolean hasMoreEntries();\n+\n+    /**\n+     * Read entries from the cursor, up to the specified <code>numEntries</code>.\n+     * The returned list can be smaller.\n+     *\n+     * @param numEntries\n+     *            maximum number of entries to read\n+     * @return the iterator of returned entries.\n+     * @throws MSException when failed to read entries from the cursor.\n+     */\n+    public Iterator<MetastoreTableItem> readEntries(int numEntries)\n+    throws MSException;\n+\n+    /**\n+     * Asynchronously read entries from the cursor, up to the specified <code>numEntries</code>.\n+     *\n+     * @see #readEntries(int)\n+     * @param numEntries\n+     *            maximum number of entries to read\n+     * @param callback\n+     *            callback object\n+     * @param ctx\n+     *            opaque context\n+     */\n+    public void asyncReadEntries(int numEntries, ReadEntriesCallback callback, Object ctx);\n+}"},{"sha":"c85b36ad4704d9f42bbb555cc85033697f1ee95a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreException.java","status":"renamed","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreException.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreException.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -15,18 +15,20 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.hedwig.server.subscriptions;\n+package org.apache.bookkeeper.metastore;\n \n-import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+@SuppressWarnings(\"serial\")\n+public class MetastoreException extends Exception {\n \n-public class TrueFilter implements MessageFilter {\n-    protected final static TrueFilter instance = new TrueFilter();\n+    public MetastoreException(String message) {\n+        super(message);\n+    }\n \n-    public static TrueFilter instance() {\n-        return instance;\n+    public MetastoreException(String message, Throwable t) {\n+        super(message, t);\n     }\n \n-    public boolean testMessage(Message message) {\n-        return true;\n+    public MetastoreException(Throwable t) {\n+        super(t);\n     }\n }","previous_filename":"hedwig-server/src/main/java/org/apache/hedwig/server/subscriptions/TrueFilter.java"},{"sha":"bedbf8b082a5f801781b29c9d2fcd8a408362fe9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreFactory.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreFactory.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+\n+public class MetastoreFactory {\n+\n+    public static MetaStore createMetaStore(String name)\n+    throws MetastoreException {\n+        try {\n+            return ReflectionUtils.newInstance(name, MetaStore.class);\n+        } catch (Throwable t) {\n+            throw new MetastoreException(\"Failed to instantiate metastore : \" + name);\n+        }\n+    }\n+\n+}"},{"sha":"036cdb6299ad655bb511b149c0e7f08b5d355508","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreScannableTable.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreScannableTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreScannableTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreScannableTable.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,104 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import java.util.Set;\n+\n+public interface MetastoreScannableTable extends MetastoreTable {\n+\n+    // Used by cursor, etc when they want to start at the beginning of a table\n+    public static final String EMPTY_START_KEY = null;\n+    // Last row in a table.\n+    public static final String EMPTY_END_KEY = null;\n+    // the order to loop over a table\n+    public static enum Order {\n+        ASC,\n+        DESC\n+    }\n+\n+    /**\n+     * Open a cursor to loop over the entries belonging to a key range,\n+     * which returns all fields for each entry.\n+     *\n+     * <p>\n+     * Return Code:<br/>\n+     * {@link MSException.Code.OK}: an opened cursor<br/>\n+     * {@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}:\n+     * other issues\n+     * </p>\n+     *\n+     * @param firstKey\n+     *            Key to start scanning. If it is {@link EMPTY_START_KEY}, it starts\n+     *            from first key (inclusive).\n+     * @param firstInclusive\n+     *            true if firstKey is to be included in the returned view.\n+     * @param lastKey\n+     *            Key to stop scanning. If it is {@link EMPTY_END_KEY}, scan ends at\n+     *            the lastKey of the table (inclusive).\n+     * @param lastInclusive\n+     *            true if lastKey is to be included in the returned view.\n+     * @param order\n+     *            the order to loop over the entries\n+     * @param cb\n+     *            Callback to return an opened cursor.\n+     * @param ctx\n+     *            Callback context\n+     */\n+    public void openCursor(String firstKey, boolean firstInclusive,\n+                           String lastKey, boolean lastInclusive,\n+                           Order order,\n+                           MetastoreCallback<MetastoreCursor> cb,\n+                           Object ctx);\n+\n+    /**\n+     * Open a cursor to loop over the entries belonging to a key range,\n+     * which returns the specified <code>fields</code> for each entry.\n+     *\n+     * <p>\n+     * Return Code:<br/>\n+     * {@link MSException.Code.OK}: an opened cursor<br/>\n+     * {@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}:\n+     * other issues\n+     * </p>\n+     *\n+     * @param firstKey\n+     *            Key to start scanning. If it is {@link EMPTY_START_KEY}, it starts\n+     *            from first key (inclusive).\n+     * @param firstInclusive\n+     *            true if firstKey is to be included in the returned view.\n+     * @param lastKey\n+     *            Key to stop scanning. If it is {@link EMPTY_END_KEY}, scan ends at\n+     *            the lastKey of the table (inclusive).\n+     * @param lastInclusive\n+     *            true if lastKey is to be included in the returned view.\n+     * @param order\n+     *            the order to loop over the entries\n+     * @param fields\n+     *            Fields to select\n+     * @param cb\n+     *            Callback to return an opened cursor.\n+     * @param ctx\n+     *            Callback context\n+     */\n+    public void openCursor(String firstKey, boolean firstInclusive,\n+                           String lastKey, boolean lastInclusive,\n+                           Order order, Set<String> fields,\n+                           MetastoreCallback<MetastoreCursor> cb,\n+                           Object ctx);\n+\n+}"},{"sha":"a75bfdd2e299ffbe86c026557cd6feac700ecf5a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,172 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.apache.bookkeeper.versioning.Versioned;\n+\n+public interface MetastoreTable {\n+\n+    // select all fields when reading or scanning entries\n+    public static final Set<String> ALL_FIELDS = null;\n+    // select non fields to return when reading/scanning entries\n+    public static final Set<String> NON_FIELDS = new HashSet<String>();\n+\n+    /**\n+     * Get table name.\n+     *\n+     * @return table name\n+     */\n+    public String getName();\n+\n+    /**\n+     * Get all fields of a key.\n+     *\n+     * <p>\n+     * Return Code:<ul>\n+     * <li>{@link MSException.Code.OK}: success returning the key</li>\n+     * <li>{@link MSException.Code.NoKey}: no key found</li>\n+     * <li>{@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}: other issues</li>\n+     * </ul></p>\n+     *\n+     * @param key\n+     *          Key Name\n+     * @param cb\n+     *          Callback to return all fields of the key\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void get(String key, MetastoreCallback<Versioned<Value>> cb, Object ctx);\n+\n+    /**\n+     * Get specified fields of a key.\n+     *\n+     * <p>\n+     * Return Code:<ul>\n+     * <li>{@link MSException.Code.OK}: success returning the key</li>\n+     * <li>{@link MSException.Code.NoKey}: no key found</li>\n+     * <li>{@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}: other issues</li>\n+     * </ul></p>\n+     *\n+     * @param key\n+     *          Key Name\n+     * @param fields\n+     *          Fields to return\n+     * @param cb\n+     *          Callback to return specified fields of the key\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void get(String key, Set<String> fields,\n+                    MetastoreCallback<Versioned<Value>> cb, Object ctx);\n+\n+    /**\n+     * Update a key according to its version.\n+     *\n+     * <p>\n+     * Return Code:<ul>\n+     * <li>{@link MSException.Code.OK}: success updating the key</li>\n+     * <li>{@link MSException.Code.BadVersion}: failed to update the key due to bad version</li>\n+     * <li>{@link MSException.Code.NoKey}: no key found to update data, if not provided {@link Version.NEW}</li>\n+     * <li>{@link MSException.Code.KeyExists}: entry exists providing {@link Version.NEW}</li>\n+     * <li>{@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}: other issues</li>\n+     * </ul></p>\n+     *\n+     * The key is updated only when the version matches its current version.\n+     * In particular, if the provided version is:<ul>\n+     * <li>{@link Version.ANY}: update the data without comparing its version.\n+     *      <b>Note this usage is not encouraged since it may mess up data consistency.</b></li>\n+     * <li>{@link Version.NEW}: create the entry if it doesn't exist before;\n+     *      Otherwise return {@link MSException.Code.KeyExists}.</li>\n+     * </ul>\n+     *\n+     * @param key\n+     *          Key Name\n+     * @param value\n+     *          Value to update.\n+     * @param version\n+     *          Version specified to update.\n+     * @param cb\n+     *          Callback to return new version after updated.\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void put(String key, Value value, Version version, MetastoreCallback<Version> cb, Object ctx);\n+\n+    /**\n+     * Remove a key by its version.\n+     *\n+     * The key is removed only when the version matches its current version.\n+     * If <code>version</code> is {@link Version.ANY}, the key would be removed directly.\n+     *\n+     * <p>\n+     * Return Code:<ul>\n+     * <li>{@link MSException.Code.OK}: success updating the key</li>\n+     * <li>{@link MSException.Code.NoKey}: if the key doesn't exist.</li>\n+     * <li>{@link MSException.Code.BadVersion}: failed to delete the key due to bad version</li>\n+     * <li>{@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}: other issues</li>\n+     * </ul></p>\n+     *\n+     * @param key\n+     *          Key Name.\n+     * @param version\n+     *          Version specified to remove.\n+     * @param cb\n+     *          Callback to return all fields of the key\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void remove(String key, Version version,\n+                       MetastoreCallback<Void> cb, Object ctx);\n+\n+    /**\n+     * Open a cursor to loop over all the entries of the table,\n+     * which returns all fields for each entry.\n+     * The returned cursor doesn't need to guarantee any order,\n+     * since the underlying might be a hash table or an order table.\n+     *\n+     * @param cb\n+     *          Callback to return an opened cursor\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void openCursor(MetastoreCallback<MetastoreCursor> cb, Object ctx);\n+\n+    /**\n+     * Open a cursor to loop over all the entries of the table,\n+     * which returns the specified <code>fields</code> for each entry.\n+     * The returned cursor doesn't need to guarantee any order,\n+     * since the underlying might be a hash table or an order table.\n+     *\n+     * @param fields\n+     *          Fields to select\n+     * @param cb\n+     *          Callback to return an opened cursor\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void openCursor(Set<String> fields,\n+                           MetastoreCallback<MetastoreCursor> cb, Object ctx);\n+\n+    /**\n+     * Close the table.\n+     */\n+    public void close();\n+}"},{"sha":"c874b3f3deaa4e235305c3e74585014192d0a9ac","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTableItem.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTableItem.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTableItem.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTableItem.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,70 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import org.apache.bookkeeper.versioning.Versioned;\n+\n+/**\n+ * Identify an item in a metastore table.\n+ */\n+public class MetastoreTableItem {\n+\n+    private String key;\n+    private Versioned<Value> value;\n+\n+    public MetastoreTableItem(String key, Versioned<Value> value) {\n+        this.key = key;\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Get the key of the table item.\n+     *\n+     * @return key of table item.\n+     */\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Set the key of the item.\n+     *\n+     * @param key Key\n+     */\n+    public void setKey(String key) {\n+        this.key = key;\n+    }\n+\n+    /**\n+     * Get the value of the item.\n+     *\n+     * @return value of the item.\n+     */\n+    public Versioned<Value> getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Set the value of the item.\n+     *\n+     * @return value of the item.\n+     */\n+    public void setValue(Versioned<Value> value) {\n+        this.value = value;\n+    }\n+}"},{"sha":"ab577f1634dd5d320a1c9c581d40243189940b7d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreUtils.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,140 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.apache.bookkeeper.metastore.MSException.Code;\n+import org.apache.bookkeeper.versioning.Version;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Provides utilities for metastore.\n+ */\n+public class MetastoreUtils {\n+\n+    protected final static Logger logger = LoggerFactory.getLogger(MetastoreUtils.class);\n+\n+    static class MultiMetastoreCallback<T> implements MetastoreCallback<T> {\n+\n+        int rc = Code.OK.getCode();\n+        final int numOps;\n+        final AtomicInteger numFinished = new AtomicInteger(0);\n+        final CountDownLatch doneLatch = new CountDownLatch(1);\n+\n+        MultiMetastoreCallback(int numOps) {\n+            this.numOps = numOps;\n+        }\n+\n+        @Override\n+        public void complete(int rc, T value, Object ctx) {\n+            if (Code.OK.getCode() != rc) {\n+                this.rc = rc;\n+                doneLatch.countDown();\n+                return;\n+            }\n+            if (numFinished.incrementAndGet() == numOps) {\n+                doneLatch.countDown();\n+            }\n+        }\n+\n+        public void waitUntilAllFinished() throws MSException, InterruptedException {\n+            doneLatch.await();\n+            if (Code.OK.getCode() != rc) {\n+                throw MSException.create(Code.get(rc));\n+            }\n+        }\n+    }\n+\n+    static class SyncMetastoreCallback<T> implements MetastoreCallback<T> {\n+\n+        int rc;\n+        T result;\n+        final CountDownLatch doneLatch = new CountDownLatch(1);\n+\n+        @Override\n+        public void complete(int rc, T value, Object ctx) {\n+            this.rc = rc;\n+            result = value;\n+            doneLatch.countDown();\n+        }\n+\n+        public T getResult() throws MSException, InterruptedException {\n+            doneLatch.await();\n+\n+            if (Code.OK.getCode() != rc) {\n+                throw MSException.create(Code.get(rc));\n+            }\n+            return result;\n+        }\n+\n+    }\n+\n+    /**\n+     * Clean the given table.\n+     *\n+     * @param table\n+     *          Metastore Table.\n+     * @param numEntriesPerScan\n+     *          Num entries per scan.\n+     * @throws MSException\n+     * @throws InterruptedException\n+     */\n+    public static void cleanTable(MetastoreTable table, int numEntriesPerScan)\n+    throws MSException, InterruptedException {\n+        // open cursor\n+        SyncMetastoreCallback<MetastoreCursor> openCb = new SyncMetastoreCallback<MetastoreCursor>();\n+        table.openCursor(MetastoreTable.NON_FIELDS, openCb, null);\n+        MetastoreCursor cursor = openCb.getResult();\n+        logger.info(\"Open cursor for table {} to clean entries.\", table.getName());\n+\n+        List<String> keysToClean = new ArrayList<String>(numEntriesPerScan);\n+        int numEntriesRemoved = 0;\n+        while (cursor.hasMoreEntries()) {\n+            logger.info(\"Fetching next {} entries from table {} to clean.\",\n+                         numEntriesPerScan, table.getName());\n+            Iterator<MetastoreTableItem> iter = cursor.readEntries(numEntriesPerScan);\n+            keysToClean.clear();\n+            while (iter.hasNext()) {\n+                MetastoreTableItem item = iter.next();\n+                String key = item.getKey();\n+                keysToClean.add(key);\n+            }\n+            if (keysToClean.isEmpty()) {\n+                continue;\n+            }\n+\n+            logger.info(\"Issuing deletes to delete keys {}\", keysToClean);\n+            // issue deletes to delete batch of keys\n+            MultiMetastoreCallback<Void> mcb = new MultiMetastoreCallback<Void>(keysToClean.size());\n+            for (String key : keysToClean) {\n+                table.remove(key, Version.ANY, mcb, null);\n+            }\n+            mcb.waitUntilAllFinished();\n+            numEntriesRemoved += keysToClean.size();\n+            logger.info(\"Removed {} entries from table {}.\", numEntriesRemoved, table.getName());\n+        }\n+\n+        logger.info(\"Finished cleaning up table {}.\", table.getName());\n+    }\n+}"},{"sha":"b3e661d5276e9e17a9581a0904043d48bbd6ae02","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/Value.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -0,0 +1,154 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+import com.google.common.primitives.UnsignedBytes;\n+import com.google.common.hash.Hasher;\n+import com.google.common.hash.HashFunction;\n+import com.google.common.hash.Hashing;\n+\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.Collections;\n+\n+import static org.apache.bookkeeper.metastore.MetastoreTable.ALL_FIELDS;\n+\n+public class Value {\n+    static final Comparator<byte[]> comparator =\n+        UnsignedBytes.lexicographicalComparator();\n+\n+    protected Map<String, byte[]> fields;\n+\n+    public Value() {\n+        fields = new HashMap<String, byte[]>();\n+    }\n+\n+    public Value(Value v) {\n+        fields = new HashMap<String, byte[]>(v.fields);\n+    }\n+\n+    public byte[] getField(String field) {\n+        return fields.get(field);\n+    }\n+\n+    public Value setField(String field, byte[] data) {\n+        fields.put(field, data);\n+        return this;\n+    }\n+\n+    public Value clearFields() {\n+        fields.clear();\n+        return this;\n+    }\n+\n+    public Set<String> getFields() {\n+        return fields.keySet();\n+    }\n+\n+    public Map<String, byte[]> getFieldsMap() {\n+        return Collections.unmodifiableMap(fields);\n+    }\n+\n+    /**\n+     * Select parts of fields.\n+     *\n+     * @param fields\n+     *            Parts of fields\n+     * @return new value with specified fields\n+     */\n+    public Value project(Set<String> fields) {\n+        if (ALL_FIELDS == fields) {\n+            return new Value(this);\n+        }\n+        Value v = new Value();\n+        for (String f : fields) {\n+            byte[] data = this.fields.get(f);\n+            v.setField(f, data);\n+        }\n+        return v;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        HashFunction hf = Hashing.murmur3_32();\n+        Hasher hc = hf.newHasher();\n+        for (String key : fields.keySet()) {\n+            hc.putString(key);\n+        }\n+        return hc.hash().asInt();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (!(o instanceof Value)) {\n+            return false;\n+        }\n+        Value other = (Value) o;\n+        if (fields.size() != other.fields.size()) {\n+            return false;\n+        }\n+        for (String f : fields.keySet()) {\n+            byte[] v1 = fields.get(f);\n+            byte[] v2 = other.fields.get(f);\n+            if (0 != comparator.compare(v1, v2)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Merge other value.\n+     *\n+     * @param other\n+     *          Other Value\n+     */\n+    public Value merge(Value other) {\n+        for (Map.Entry<String, byte[]> entry : other.fields.entrySet()) {\n+            if (null == entry.getValue()) {\n+                fields.remove(entry.getKey());\n+            } else {\n+                fields.put(entry.getKey(), entry.getValue());\n+            }\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"[\");\n+        for (Map.Entry<String, byte[]> entry : fields.entrySet()) {\n+            String f = entry.getKey();\n+            if (null == f) {\n+                f = \"NULL\";\n+            }\n+            String value;\n+            if (null == entry.getValue()) {\n+                value = \"NONE\";\n+            } else {\n+                value = new String(entry.getValue());\n+            }\n+            sb.append(\"('\").append(f).append(\"'=\").append(value).append(\")\");\n+        }\n+        sb.append(\"]\");\n+        return sb.toString();\n+    }\n+}"},{"sha":"9aa80a06ae95d05db91f64efc9a5448f09c26ae0","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BKStats.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,4 +1,4 @@\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -23,10 +23,14 @@\n \n import java.beans.ConstructorProperties;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Bookie Server Stats\n  */\n public class BKStats {\n+    private static final Logger LOG = LoggerFactory.getLogger(BKStats.class);\n     private static BKStats instance = new BKStats();\n \n     public static BKStats getInstance() {\n@@ -105,6 +109,14 @@ synchronized public void incrementFailedOps() {\n          * Update Latency\n          */\n         synchronized public void updateLatency(long latency) {\n+            if (latency < 0) {\n+                // less than 0ms . Ideally this should not happen.\n+                // We have seen this latency negative in some cases due to the\n+                // behaviors of JVM. Ignoring the statistics updation for such\n+                // cases.\n+                LOG.warn(\"Latency time coming negative\");\n+                return;\n+            }\n             totalLatency += latency;\n             ++numSuccessOps;\n             if (latency < minLatency) {"},{"sha":"13a69c186915fb24ff4facb1681ccdc24c8c6217","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":62,"deletions":14,"changes":76,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -42,6 +42,7 @@\n import org.jboss.netty.buffer.ChannelBuffers;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n /**\n  * Implements the client-side part of the BookKeeper protocol.\n@@ -58,21 +59,33 @@\n     ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient> channels = new ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient>();\n \n     private final ClientConfiguration conf;\n+    private volatile boolean closed;\n+    private ReentrantReadWriteLock closeLock;\n \n     public BookieClient(ClientConfiguration conf, ClientSocketChannelFactory channelFactory, OrderedSafeExecutor executor) {\n         this.conf = conf;\n         this.channelFactory = channelFactory;\n         this.executor = executor;\n+        this.closed = false;\n+        this.closeLock = new ReentrantReadWriteLock();\n     }\n \n     public PerChannelBookieClient lookupClient(InetSocketAddress addr) {\n         PerChannelBookieClient channel = channels.get(addr);\n \n         if (channel == null) {\n-            channel = new PerChannelBookieClient(conf, executor, channelFactory, addr, totalBytesOutstanding);\n-            PerChannelBookieClient prevChannel = channels.putIfAbsent(addr, channel);\n-            if (prevChannel != null) {\n-                channel = prevChannel;\n+            closeLock.readLock().lock();\n+            try {\n+                if (closed) {\n+                    return null;\n+                }\n+                channel = new PerChannelBookieClient(conf, executor, channelFactory, addr, totalBytesOutstanding);\n+                PerChannelBookieClient prevChannel = channels.putIfAbsent(addr, channel);\n+                if (prevChannel != null) {\n+                    channel = prevChannel;\n+                }\n+            } finally {\n+                closeLock.readLock().unlock();\n             }\n         }\n \n@@ -95,7 +108,7 @@ public void closeClients(Set<InetSocketAddress> addrs) {\n                 @Override\n                 public void safeRun() {\n                     for (PerChannelBookieClient c : clients) {\n-                        c.close();\n+                        c.disconnect();\n                     }\n                 }\n             });\n@@ -104,12 +117,22 @@ public void safeRun() {\n     public void addEntry(final InetSocketAddress addr, final long ledgerId, final byte[] masterKey, final long entryId,\n             final ChannelBuffer toSend, final WriteCallback cb, final Object ctx, final int options) {\n         final PerChannelBookieClient client = lookupClient(addr);\n+        if (client == null) {\n+            cb.writeComplete(BKException.Code.BookieHandleNotAvailableException,\n+                             ledgerId, entryId, addr, ctx);\n+            return;\n+        }\n \n         client.connectIfNeededAndDoOp(new GenericCallback<Void>() {\n             @Override\n-            public void operationComplete(int rc, Void result) {\n+            public void operationComplete(final int rc, Void result) {\n                 if (rc != BKException.Code.OK) {\n-                    cb.writeComplete(rc, ledgerId, entryId, addr, ctx);\n+                    executor.submitOrdered(ledgerId, new SafeRunnable() {\n+                        @Override\n+                        public void safeRun() {\n+                            cb.writeComplete(rc, ledgerId, entryId, addr, ctx);\n+                        }\n+                    });\n                     return;\n                 }\n                 client.addEntry(ledgerId, masterKey, entryId, toSend, cb, ctx, options);\n@@ -124,12 +147,22 @@ public void readEntryAndFenceLedger(final InetSocketAddress addr,\n                                         final ReadEntryCallback cb,\n                                         final Object ctx) {\n         final PerChannelBookieClient client = lookupClient(addr);\n+        if (client == null) {\n+            cb.readEntryComplete(BKException.Code.BookieHandleNotAvailableException,\n+                                 ledgerId, entryId, null, ctx);\n+            return;\n+        }\n \n         client.connectIfNeededAndDoOp(new GenericCallback<Void>() {\n             @Override\n-            public void operationComplete(int rc, Void result) {\n+            public void operationComplete(final int rc, Void result) {\n                 if (rc != BKException.Code.OK) {\n-                    cb.readEntryComplete(rc, ledgerId, entryId, null, ctx);\n+                    executor.submitOrdered(ledgerId, new SafeRunnable() {\n+                        @Override\n+                        public void safeRun() {\n+                            cb.readEntryComplete(rc, ledgerId, entryId, null, ctx);\n+                        }\n+                    });\n                     return;\n                 }\n                 client.readEntryAndFenceLedger(ledgerId, masterKey, entryId, cb, ctx);\n@@ -140,13 +173,22 @@ public void operationComplete(int rc, Void result) {\n     public void readEntry(final InetSocketAddress addr, final long ledgerId, final long entryId,\n                           final ReadEntryCallback cb, final Object ctx) {\n         final PerChannelBookieClient client = lookupClient(addr);\n+        if (client == null) {\n+            cb.readEntryComplete(BKException.Code.BookieHandleNotAvailableException,\n+                                 ledgerId, entryId, null, ctx);\n+            return;\n+        }\n \n         client.connectIfNeededAndDoOp(new GenericCallback<Void>() {\n             @Override\n-            public void operationComplete(int rc, Void result) {\n-\n+            public void operationComplete(final int rc, Void result) {\n                 if (rc != BKException.Code.OK) {\n-                    cb.readEntryComplete(rc, ledgerId, entryId, null, ctx);\n+                    executor.submitOrdered(ledgerId, new SafeRunnable() {\n+                        @Override\n+                        public void safeRun() {\n+                            cb.readEntryComplete(rc, ledgerId, entryId, null, ctx);\n+                        }\n+                    });\n                     return;\n                 }\n                 client.readEntry(ledgerId, entryId, cb, ctx);\n@@ -155,8 +197,14 @@ public void operationComplete(int rc, Void result) {\n     }\n \n     public void close() {\n-        for (PerChannelBookieClient channel: channels.values()) {\n-            channel.close();\n+        closeLock.writeLock().lock();\n+        try {\n+            closed = true;\n+            for (PerChannelBookieClient channel: channels.values()) {\n+                channel.close();\n+            }\n+        } finally {\n+            closeLock.writeLock().unlock();\n         }\n     }\n "},{"sha":"338fd6e85f6a8eda0951abd079bf5ffd2f3373eb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieProtocol.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -165,6 +165,10 @@ short getFlags() {\n      */\n     public static final int EFENCED = 104;\n \n+    /**\n+     * The server is running as read-only mode\n+     */\n+    public static final int EREADONLY = 105;\n \n     public static final short FLAG_NONE = 0x0;\n     public static final short FLAG_DO_FENCING = 0x0001;"},{"sha":"da18b6c9100e0f3cfabd00c0960582334f69045b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":140,"deletions":23,"changes":163,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -1,6 +1,4 @@\n-package org.apache.bookkeeper.proto;\n-\n-/*\n+/**\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -20,16 +18,18 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.proto;\n \n import java.io.File;\n import java.io.IOException;\n-import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.MalformedURLException;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n-\n-import javax.management.JMException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n \n import org.apache.zookeeper.KeeperException;\n \n@@ -39,13 +39,21 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.NIOServerFactory.Cnxn;\n+import org.apache.bookkeeper.replication.AutoRecoveryMain;\n+import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n+import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n+import org.apache.bookkeeper.util.MathUtils;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+\n import static org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n import org.apache.commons.configuration.ConfigurationException;\n import org.apache.commons.cli.BasicParser;\n import org.apache.commons.cli.Options;\n import org.apache.commons.cli.CommandLine;\n import org.apache.commons.cli.HelpFormatter;\n import org.apache.commons.cli.ParseException;\n+import org.apache.commons.codec.binary.Hex;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -68,12 +76,18 @@\n     final BKStats bkStats = BKStats.getInstance();\n     final boolean isStatsEnabled;\n     protected BookieServerBean jmxBkServerBean;\n+    private AutoRecoveryMain autoRecoveryMain = null;\n+    private boolean isAutoRecoveryDaemonEnabled;\n \n-    public BookieServer(ServerConfiguration conf) \n-            throws IOException, KeeperException, InterruptedException, BookieException {\n+    public BookieServer(ServerConfiguration conf) throws IOException,\n+            KeeperException, InterruptedException, BookieException,\n+            UnavailableException, CompatibilityException {\n         this.conf = conf;\n         this.bookie = newBookie(conf);\n-\n+        isAutoRecoveryDaemonEnabled = conf.isAutoRecoveryDaemonEnabled();\n+        if (isAutoRecoveryDaemonEnabled) {\n+            this.autoRecoveryMain = new AutoRecoveryMain(conf);\n+        }\n         isStatsEnabled = conf.isStatisticsEnabled();\n     }\n \n@@ -82,10 +96,14 @@ protected Bookie newBookie(ServerConfiguration conf)\n         return new Bookie(conf);\n     }\n \n-    public void start() throws IOException {\n+    public void start() throws IOException, UnavailableException {\n+        nioServerFactory = new NIOServerFactory(conf, this);\n+\n         this.bookie.start();\n+        if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n+            this.autoRecoveryMain.start();\n+        }\n \n-        nioServerFactory = new NIOServerFactory(conf, this);\n         nioServerFactory.start();\n         running = true;\n         deathWatcher = new DeathWatcher(conf);\n@@ -97,18 +115,42 @@ public void start() throws IOException {\n \n     public InetSocketAddress getLocalAddress() {\n         try {\n-            return new InetSocketAddress(InetAddress.getLocalHost().getHostAddress(), conf.getBookiePort());\n+            return Bookie.getBookieAddress(conf);\n         } catch (UnknownHostException uhe) {\n             return nioServerFactory.getLocalAddress();\n         }\n     }\n \n+    @VisibleForTesting\n+    public Bookie getBookie() {\n+        return bookie;\n+    }\n+\n+    /**\n+     * Suspend processing of requests in the bookie (for testing)\n+     */\n+    @VisibleForTesting\n+    public void suspendProcessing() {\n+        nioServerFactory.suspendProcessing();\n+    }\n+\n+    /**\n+     * Resume processing requests in the bookie (for testing)\n+     */\n+    @VisibleForTesting\n+    public void resumeProcessing() {\n+        nioServerFactory.resumeProcessing();\n+    }\n+\n     public synchronized void shutdown() {\n         if (!running) {\n             return;\n         }\n         nioServerFactory.shutdown();\n         exitCode = bookie.shutdown();\n+        if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n+            this.autoRecoveryMain.shutdown();\n+        }\n         running = false;\n \n         // unregister JMX\n@@ -152,6 +194,16 @@ public boolean isBookieRunning() {\n         return bookie.isRunning();\n     }\n \n+    /**\n+     * Whether auto-recovery service running with Bookie?\n+     *\n+     * @return true if auto-recovery service is running, otherwise return false\n+     */\n+    public boolean isAutoRecoveryRunning() {\n+        return this.autoRecoveryMain != null\n+                && this.autoRecoveryMain.isAutoRecoveryRunning();\n+    }\n+\n     /**\n      * Whether nio server is running?\n      *\n@@ -177,6 +229,7 @@ public int getExitCode() {\n         final int watchInterval;\n \n         DeathWatcher(ServerConfiguration conf) {\n+            super(\"BookieDeathWatcher-\" + conf.getBookiePort());\n             watchInterval = conf.getDeathWatchInterval();\n         }\n \n@@ -188,7 +241,9 @@ public void run() {\n                 } catch (InterruptedException ie) {\n                     // do nothing\n                 }\n-                if (!isBookieRunning() || !isNioServerRunning()) {\n+                if (!isBookieRunning()\n+                        || !isNioServerRunning()\n+                        || (isAutoRecoveryDaemonEnabled && !isAutoRecoveryRunning())) {\n                     shutdown();\n                     break;\n                 }\n@@ -199,6 +254,8 @@ public void run() {\n     static final Options bkOpts = new Options();\n     static {\n         bkOpts.addOption(\"c\", \"conf\", true, \"Configuration for Bookie Server\");\n+        bkOpts.addOption(\"withAutoRecovery\", false,\n+                \"Start Autorecovery service Bookie server\");\n         bkOpts.addOption(\"h\", \"help\", false, \"Print help message\");\n     }\n \n@@ -247,6 +304,10 @@ private static ServerConfiguration parseArgs(String[] args)\n                 return conf;\n             }\n \n+            if (cmdLine.hasOption(\"withAutoRecovery\")) {\n+                conf.setAutoRecoveryDaemonEnabled(true);\n+            }\n+\n             if (leftArgs.length < 4) {\n                 throw new IllegalArgumentException();\n             }\n@@ -323,7 +384,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n         int statType = BKStats.STATS_UNKNOWN;\n         long startTime = 0;\n         if (isStatsEnabled) {\n-            startTime = System.currentTimeMillis();\n+            startTime = MathUtils.now();\n         }\n \n         // packet format is different between ADDENTRY and READENTRY\n@@ -359,9 +420,17 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n         switch (h.getOpCode()) {\n         case BookieProtocol.ADDENTRY:\n             statType = BKStats.STATS_ADD;\n+\n+            if (bookie.isReadOnly()) {\n+                LOG.warn(\"BookieServer is running as readonly mode,\"\n+                        + \" so rejecting the request from the client!\");\n+                src.sendResponse(buildResponse(BookieProtocol.EREADONLY,\n+                        h.getVersion(), h.getOpCode(), ledgerId, entryId));\n+                break;\n+            }\n+\n             try {\n                 TimedCnxn tsrc = new TimedCnxn(src, startTime);\n-                // LOG.debug(\"Master key: \" + new String(masterKey));\n                 if ((flags & BookieProtocol.FLAG_RECOVERY_ADD) == BookieProtocol.FLAG_RECOVERY_ADD) {\n                     bookie.recoveryAddEntry(packet.slice(), this, tsrc, masterKey);\n                 } else {\n@@ -382,25 +451,67 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n         case BookieProtocol.READENTRY:\n             statType = BKStats.STATS_READ;\n             ByteBuffer[] rsp = new ByteBuffer[2];\n-            LOG.debug(\"Received new read request: \" + ledgerId + \", \" + entryId);\n+            LOG.debug(\"Received new read request: {}, {}\", ledgerId, entryId);\n             int errorCode = BookieProtocol.EIO;\n             try {\n+                Future<Boolean> fenceResult = null;\n                 if ((flags & BookieProtocol.FLAG_DO_FENCING) == BookieProtocol.FLAG_DO_FENCING) {\n                     LOG.warn(\"Ledger \" + ledgerId + \" fenced by \" + src.getPeerName());\n                     if (h.getVersion() >= 2) {\n                         masterKey = new byte[BookieProtocol.MASTER_KEY_LENGTH];\n                         packet.get(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n \n-                        bookie.fenceLedger(ledgerId, masterKey);\n+                        fenceResult = bookie.fenceLedger(ledgerId, masterKey);\n                     } else {\n                         LOG.error(\"Password not provided, Not safe to fence {}\", ledgerId);\n                         throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n                     }\n                 }\n                 rsp[1] = bookie.readEntry(ledgerId, entryId);\n-                LOG.debug(\"##### Read entry ##### \" + rsp[1].remaining());\n-                errorCode = BookieProtocol.EOK;\n-                success = true;\n+                LOG.debug(\"##### Read entry ##### {}\", rsp[1].remaining());\n+                if (null != fenceResult) {\n+                    // TODO:\n+                    // currently we don't have readCallback to run in separated read\n+                    // threads. after BOOKKEEPER-429 is complete, we could improve\n+                    // following code to make it not wait here\n+                    //\n+                    // For now, since we only try to wait after read entry. so writing\n+                    // to journal and read entry are executed in different thread\n+                    // it would be fine.\n+                    try {\n+                        Boolean fenced = fenceResult.get(1000, TimeUnit.MILLISECONDS);\n+                        if (null == fenced || !fenced) {\n+                            // if failed to fence, fail the read request to make it retry.\n+                            errorCode = BookieProtocol.EIO;\n+                            success = false;\n+                            rsp[1] = null;\n+                        } else {\n+                            errorCode = BookieProtocol.EOK;\n+                            success = true;\n+                        }\n+                    } catch (InterruptedException ie) {\n+                        LOG.error(\"Interrupting fence read entry (lid:\" + ledgerId\n+                                  + \", eid:\" + entryId + \") :\", ie);\n+                        errorCode = BookieProtocol.EIO;\n+                        success = false;\n+                        rsp[1] = null;\n+                    } catch (ExecutionException ee) {\n+                        LOG.error(\"Failed to fence read entry (lid:\" + ledgerId\n+                                  + \", eid:\" + entryId + \") :\", ee);\n+                        errorCode = BookieProtocol.EIO;\n+                        success = false;\n+                        rsp[1] = null;\n+                    } catch (TimeoutException te) {\n+                        LOG.error(\"Timeout to fence read entry (lid:\" + ledgerId\n+                                  + \", eid:\" + entryId + \") :\", te);\n+                        errorCode = BookieProtocol.EIO;\n+                        success = false;\n+                        rsp[1] = null;\n+                    }\n+                } else {\n+                    errorCode = BookieProtocol.EOK;\n+                    success = true;\n+                }\n             } catch (Bookie.NoLedgerException e) {\n                 if (LOG.isTraceEnabled()) {\n                     LOG.error(\"Error reading \" + entryId + \"@\" + ledgerId, e);\n@@ -433,7 +544,13 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n                 rsp[1].putLong(entryId);\n                 rsp[1].flip();\n             }\n-            LOG.debug(\"Sending response for: \" + entryId + \", \" + new String(rsp[1].array()));\n+            if (LOG.isTraceEnabled()) {\n+                byte[] content = new byte[rsp[1].remaining()];\n+                rsp[1].duplicate().get(content);\n+                LOG.trace(\"Sending response for: {}, content: {}\", entryId, Hex.encodeHexString(content));\n+            } else {\n+                LOG.debug(\"Sending response for: {}, length: {}\", entryId, rsp[1].remaining());\n+            }\n             src.sendResponse(rsp);\n             break;\n         default:\n@@ -443,7 +560,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n             if (success) {\n                 // for add operations, we compute latency in writeComplete callbacks.\n                 if (statType != BKStats.STATS_ADD) {\n-                    long elapsedTime = System.currentTimeMillis() - startTime;\n+                    long elapsedTime = MathUtils.now() - startTime;\n                     bkStats.getOpStats(statType).updateLatency(elapsedTime);\n                 }\n             } else {\n@@ -483,7 +600,7 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n             // compute the latency\n             if (0 == rc) {\n                 // for add operations, we compute latency in writeComplete callbacks.\n-                long elapsedTime = System.currentTimeMillis() - startTime;\n+                long elapsedTime = MathUtils.now() - startTime;\n                 bkStats.getOpStats(BKStats.STATS_ADD).updateLatency(elapsedTime);\n             } else {\n                 bkStats.getOpStats(BKStats.STATS_ADD).incrementFailedOps();                "},{"sha":"fded415352f029e15d90fc4133fd948343f97b8e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -21,6 +21,8 @@\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n+import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.proto.BKStats;\n@@ -80,8 +82,7 @@ public String getServerState() {\n     @Override\n     public String getServerPort() {\n         try {\n-            return InetAddress.getLocalHost().getHostAddress() + \":\"\n-                    + conf.getBookiePort();\n+            return StringUtils.addrToString(Bookie.getBookieAddress(conf));\n         } catch (UnknownHostException e) {\n             return \"localhost:\" + conf.getBookiePort();\n         }"},{"sha":"3136997ce6087c54b656d6070394935e2452c19b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","patch":"@@ -106,7 +106,7 @@ private void tick() {\n         @Override\n         public void processResult(int rc, String path, Object ctx) {\n             if (rc != successRc) {\n-                LOG.error(\"Error in mutil callback : \" + rc);\n+                LOG.error(\"Error in multi callback : \" + rc);\n                 exceptions.add(rc);\n             }\n             tick();"},{"sha":"65d5444d10dfd2d372872137bdf8f01dcc6de05d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/DataFormats.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"8f205fe3c076ecd269b8e5b0077946044d020972","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"296401c3147547b01620459d1cde7edf7ff9db3a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"4a8b99c3dc6cc538b60cb64a43123c79c790260f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"5f616fc4f14376853d4b931b5b16566afc633118","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"fb82dab6152eb91156657b3c2b2bad9e5159309d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"a6222a0ae8777c56f8384d301d81299810f35943","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"f4bb2d09745ee8ee1c732f2ebb16be5b58f23e0b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"77625c30c2b45e64e884e5cf7d6f4e816f7e60f3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationEnableCb.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationEnableCb.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationEnableCb.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationEnableCb.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"236c6654a1c7bb52a91b82c9a3c6915c3902fbe8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"4a0bd229161749843a70bf54772f6649e31192a2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"cc86f07f5fc41d4a686d20c62abd97c6a5784479","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/BookKeeperConstants.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"bc50158187fa19737f3154aa50b193978261cc62","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/DiskChecker.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d8abcdf589f4cefce22b32937521bf8e540d8e7c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/EntryFormatter.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"03b4a6b21721928700551c6997cdf9b083f8fd0e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/IOUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d3b523c6f95f1a0ca98dcac9bd6d088a930dc48c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d72361eac6bd9be19dedc009a65021cec69f73cd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ffaced963d7d1ffccd5d0e5d4f6f3eb9cfd89b33","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/OrderedSafeExecutor.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"4f3bdb4d93171176947c29553bafdd4095f4ab59","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ReflectionUtils.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ReflectionUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ReflectionUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ReflectionUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"a665476b89ef74341c36892b02ad7eca5d4a6b65","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SnapshotMap.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SnapshotMap.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SnapshotMap.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/SnapshotMap.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","previous_filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/SnapshotMap.java"},{"sha":"43a5fc9a5d1dbf86d90e83867c4244bd5eba567d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringEntryFormatter.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","previous_filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieFailureTest.java"},{"sha":"b6ea86eb47eef847e808f81c307eccfa0dc274b9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/StringUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"22c56e998a52822e798ff680b2069949a498bac1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Tool.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Tool.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Tool.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/Tool.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"05b3d62f4b84965d8aa06e880fd0a0a8b9349eea","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"39ad3e5396df504d8038ddbadc18eae8afa0f5e7","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Version.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"7e8f1c96f4e8081d37c44508c577ed339be6a933","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Versioned.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Versioned.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Versioned.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/versioning/Versioned.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","previous_filename":"hedwig-client/src/main/cpp/test/pubsubdatatest.cpp"},{"sha":"dbe7f7aa24a2b3aca825d32c3658a541487e5a35","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/zookeeper/ZooKeeperWatcherBase.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"67623ac614880b11684afff624e8f5b0551f1854","filename":"bookkeeper-server/src/main/proto/DataFormats.proto","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/proto/DataFormats.proto","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/proto/DataFormats.proto","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/proto/DataFormats.proto?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"129943423fb222d7a9fa659efe3007f3692d0a3b","filename":"bookkeeper-server/src/main/resources/LICENSE.bin.txt","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/resources/LICENSE.bin.txt","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/resources/LICENSE.bin.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/resources/LICENSE.bin.txt?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"bc16cbd4132eb924599fa0fc09c5daf230a15447","filename":"bookkeeper-server/src/main/resources/NOTICE.bin.txt","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/resources/NOTICE.bin.txt","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/resources/NOTICE.bin.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/resources/NOTICE.bin.txt?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"8404e3f7ff03ce5cd2fda4384fe28000f05af96b","filename":"bookkeeper-server/src/main/resources/findbugsExclude.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/resources/findbugsExclude.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/main/resources/findbugsExclude.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/resources/findbugsExclude.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"8f09707db29fc05753930a49b13fff35d0da20da","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieAccessor.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","previous_filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieRecoveryTest.java"},{"sha":"14517e3451d80ccac83e75f745485dd1daa42979","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"965b95568ab368e74fb0e5bff22868adb172f3a1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"bc2b0837a468c26fb2317055c94453b9855e6fff","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ea961fe54374f2c9d1dd88951fcf64adc3cc41d5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"6ec48e5c7ebfbcf743ccc701c63473adab6d6904","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"5d9eeb55b7999eb2031e7d17bbcb388095d7575d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"cd222df13eb9a7f8cbbdccfe13d167cd1bd232f1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/IndexCorruptionTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","previous_filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/IndexCorruptionTest.java"},{"sha":"16a6bf152da480cb7690e2b5a33bdc3803823ce2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"294295fdb48389d5381d51b56c81475cacb3cd1b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"6825e8fb71b7357c36cb6bbd0ccdc0fac88209c0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"c66abd37d32a1275226eeb084b8aeabdba5df240","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"95a00f300ff8740d470210bcb24a272067c07d75","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3d03cd38dea1e919cc6732de55418d9727ad60db","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/687de61ce5077451957307a37c2feecdfb1ed8b5/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/687de61ce5077451957307a37c2feecdfb1ed8b5/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieThrottleTest.java?ref=687de61ce5077451957307a37c2feecdfb1ed8b5"},{"sha":"50242fb8fc493f248259b59eb4073ae2df3ec44c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"93ce472a60a99a5dbf4cddd9bfc0a95a4737d2a3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ClientUtil.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"9af527a36408d3af93e3a16bb12f861c8ea70295","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerHandleAdapter.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerHandleAdapter.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerHandleAdapter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerHandleAdapter.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"de0d319ad846d9b710ee6faa5987c15e0d513326","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"8f173ef2c9ad3b7c814a29b7a384339125afd814","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/RoundRobinDistributionScheduleTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"071b5e4e086963f37925917db1eab2bc1e17d483","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d175fec8ebe35ce560bb9ec028b284c8b2e8ff48","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"f5733b279684c2132822dc4f8c44736f9ff3f80a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"b250777827c6a0988e3590d65d7469cbde2495fa","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerFragmentReplication.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"9b48aa1038d084802133c93cb764263abd23568a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"64cd5dc1ab02ad85ca943e38d24ccdd3d2bad322","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"bc3c8995248900648354ffb2f16b704167780bd9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"7d97fd4f753f00508710fa05dda24e2af216b9fb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieReadWriteTest.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/687de61ce5077451957307a37c2feecdfb1ed8b5/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/687de61ce5077451957307a37c2feecdfb1ed8b5/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalBookieReadWriteTest.java?ref=687de61ce5077451957307a37c2feecdfb1ed8b5"},{"sha":"fcc6d90524e7a2a9f02487f2dc78f375af72df8f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerLayoutTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"f8fa5f010c05e2ac17ac79e2d0dc72f6bf12c538","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d6af24c911b84cafe172eba2af2bbd8b5a61afcf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestLedgerManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"366735652729cc096ad1d7121cc1ce8c5aed7f90","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/TestZkVersion.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"51201e999ee05328861c1d8245c805bd7f6c96cf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/MetastoreScannableTableAsyncToSyncConverter.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/MetastoreScannableTableAsyncToSyncConverter.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/MetastoreScannableTableAsyncToSyncConverter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/MetastoreScannableTableAsyncToSyncConverter.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"4c061abd485038537298318cff85126ea9dee64e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/MetastoreTableAsyncToSyncConverter.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/MetastoreTableAsyncToSyncConverter.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/MetastoreTableAsyncToSyncConverter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/MetastoreTableAsyncToSyncConverter.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"2752bcf85311f67841b16b88667a48d58340a43d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/metastore/TestMetaStore.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3aed8cb0c1b838b5580d80c28c6d8c0dcc52d9f4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestBKStats.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","previous_filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/HierarchicalAsyncLedgerOpsTest.java"},{"sha":"7fd5a9f87231f4d09f5e1a98ad4954954eec9acb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d8afee89fe3e13ac736f5dc8a0121e807166c375","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestProtoVersions.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"60041360192efdbc739c523f257a73a88e121ed5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"8e35d6ce0d8652b93c994b47617526e78c767be2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3e46c8ba72cd848462876026f5a9658e36f2736d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"069a171a079f7eb3b87ef033cadaf4146f07952d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"c902b35b30c2de9050a47b978849875b9bff5123","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"a9b99678e79edb8c4198a0608c16c2937c337556","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieLedgerIndexTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"f8dc1c801af4f462653eae052c2d6badbb6d5af3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/ReplicationTestUtil.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ba04c306c2f1b80aa516827a4571da47920d67fb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestAutoRecoveryAlongWithBookieServers.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"df552ad024e1c8d9c7f2477c95b680fe83729ea2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"a9010268816a3f202ce0f2c92fa35c899ae762b1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"1e07348e497f8215f9b539c0e2a175e16ee181ea","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/AsyncLedgerOpsTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"deb97414b66ca03a1e4bea13dde2e85510777c05","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"34c14ab484905e59f8d41b35435a73a19c617b28","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d3149eb1aa96f67153af36c43ad3d85dfaab34eb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"5e0a92c1adaf0cb994caa6416237473d1edd5f8b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d6d78107a6dd63ad4479746e6eca65790cec553e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieReadWriteTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ad2391a97dd875de58f37e7c06678a85efe893fc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieZKExpireTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"e21dc7b10dd58e3d33fad2bff9e544f053f36e6a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/CloseTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"1ddabe79cb1d97f245dd17348241843ab95af5d2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ac1b69b76cc87cc454d1f05c821e77d528e8e9f2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConditionalSetTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"377bf9b7c42cf43c6cd98e60ba8f30a49a6f0d05","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConfigurationTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"9af6cb6ea6d4b21890f1d790470bc53d08aa39a1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"2279d3ee1a255d4c02881b44b83f1d9ba2703a6b","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerDeleteTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"22e494e40acb6e8c628cdfcb4773e62bcfbff3b7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/687de61ce5077451957307a37c2feecdfb1ed8b5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/687de61ce5077451957307a37c2feecdfb1ed8b5/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerRecoveryTest.java?ref=687de61ce5077451957307a37c2feecdfb1ed8b5"},{"sha":"b4026b40d44b6668d5161b82fe7c9bab20402af4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerMultiDigestTestCase.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"cba8be4cccde1ec461fd19231179e9ef5f3bf76c","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/MultiLedgerManagerTestCase.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"b68d0554eed0f0d273438b54cffde1106a79aa67","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"fe68e29ae582be31fcafbed92eec66a397a50e0e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/PortManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"969f35fa8f01ef728366ba06c07f32c278f5c751","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"0a5274ee76c3073b56ca3fc94e98d95fefacf9ea","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"f81adb433a29e0bc9067989347dfae318c05c0b7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"7ab1b90dedf5f9d827e5824a8be20437d57428c9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestDiskChecker.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"1c569d70c53b711b86f781800980b3d19014c2b9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestUtils.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/util/TestUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"096c20daa83eea6cf47c0a64f83a1d8a3d8ff872","filename":"bookkeeper-server/src/test/resources/log4j.properties","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/resources/log4j.properties","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/bookkeeper-server/src/test/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/resources/log4j.properties?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"5b4bba94e94b896a51f416ef286b9d1569ecc36d","filename":"compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d11d10f6dc53e41fa96b21ea2fecd848c7918aa3","filename":"compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"42f34be6b460a72b59e43dd9b6b641d060b68402","filename":"compat-deps/hedwig-server-compat-4.0.0/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/hedwig-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/hedwig-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.0.0/pom.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"00ab04c824b54323a3f9dc5cb3e16b8dce279c79","filename":"compat-deps/hedwig-server-compat-4.1.0/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/hedwig-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/hedwig-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.1.0/pom.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"efefdbf9418cb479d0b0ffb6ec33400f9e142c65","filename":"compat-deps/pom.xml","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/compat-deps/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/pom.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"63e0dbd871124621520090ad43f812a7d1ac54e0","filename":"doc/bookieConfigParams.textile","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookieConfigParams.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookieConfigParams.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookieConfigParams.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"59adbb2cff67e042192c5b16381e43c7ce0b6d36","filename":"doc/bookieRecovery.textile","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookieRecovery.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookieRecovery.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookieRecovery.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"46b02ca83e01b07840a03c4cb5bd602116957b01","filename":"doc/bookkeeperConfig.textile","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookkeeperConfig.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookkeeperConfig.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperConfig.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3d82506da3680dad513abed400ad67344511ae19","filename":"doc/bookkeeperMetadata.textile","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookkeeperMetadata.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookkeeperMetadata.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperMetadata.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"4fe9d9f1d0ffeb0c76952fe922a3fb86ad580000","filename":"doc/bookkeeperStarted.textile","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookkeeperStarted.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/bookkeeperStarted.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/bookkeeperStarted.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d5ca21ff210ae1768da8066d1a24c0b64202dd68","filename":"doc/hedwigMessageFilter.textile","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/hedwigMessageFilter.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/hedwigMessageFilter.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/hedwigMessageFilter.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"1add816dea118cbd6cbc6d1fbbb603893394b8b0","filename":"doc/hedwigMetadata.textile","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/hedwigMetadata.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/hedwigMetadata.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/hedwigMetadata.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ea01be671a7481532b1a49a49820b38b16f81119","filename":"doc/hedwigParams.textile","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/hedwigParams.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/hedwigParams.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/hedwigParams.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ae5e08fa8d3275fd6c8908d4bb144c46c560ac7e","filename":"doc/index.textile","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/index.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/index.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/index.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"aa9d508e79e09fb42786943db41b4ee4ecb9e91a","filename":"doc/metastore.textile","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/doc/metastore.textile","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/doc/metastore.textile","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/doc/metastore.textile?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"0e64648136ab9b1b3cf69081b000b61c3e62aea3","filename":"hedwig-client/pom.xml","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/pom.xml?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"308407cf611e970d9160b3137214d0388872f81a","filename":"hedwig-client/src/main/cpp/Makefile.am","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/Makefile.am","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/Makefile.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/Makefile.am?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"f6fd377f8d847ea6234b229074ae02e5b6c00083","filename":"hedwig-client/src/main/cpp/README","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/README","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/README","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/README?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"efc6e05c96107f4fd10c20103edc1e36935b4aee","filename":"hedwig-client/src/main/cpp/configure.ac","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/configure.ac","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/configure.ac","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/configure.ac?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"80e961b077d373a13d31c8acda00f5aa694e8cfb","filename":"hedwig-client/src/main/cpp/inc/hedwig/callback.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/callback.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/callback.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/callback.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"7b914bcfa8de97f6075cfb1b7ed94cd3ba48735b","filename":"hedwig-client/src/main/cpp/inc/hedwig/client.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/client.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/client.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/client.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"b44fed96eed9bdd3265fadc4bbba063cae683bf1","filename":"hedwig-client/src/main/cpp/inc/hedwig/exceptions.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/exceptions.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/exceptions.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/exceptions.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ea08838df9130d648be5984a38ca6991287cc8cc","filename":"hedwig-client/src/main/cpp/inc/hedwig/publish.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/publish.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/publish.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/publish.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"4bc718c2a1652fae51c9f1d655a165daa970235e","filename":"hedwig-client/src/main/cpp/inc/hedwig/subscribe.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/subscribe.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/inc/hedwig/subscribe.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/inc/hedwig/subscribe.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"f19a3da8339280f1f88095b7471b74151c81a1d5","filename":"hedwig-client/src/main/cpp/lib/Makefile.am","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/Makefile.am","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/Makefile.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/Makefile.am?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3f573cbfbbb2490c9e2b694ddea2e47b6d240da7","filename":"hedwig-client/src/main/cpp/lib/channel.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/channel.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/channel.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/channel.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"c9ef2892aed586edeb6d963c9074e3473cdb4a5f","filename":"hedwig-client/src/main/cpp/lib/channel.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/channel.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/channel.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/channel.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"e98c45293fa6030c5a2494fbbc7b1aaa8ea89f17","filename":"hedwig-client/src/main/cpp/lib/client.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/client.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/client.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/client.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"40114d6e8ec47e0f6ebabe9105173e8ad5b07dc9","filename":"hedwig-client/src/main/cpp/lib/clientimpl.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/clientimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/clientimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"fd7915ccd53bec12dc5f03e38f61f5f9d6e03bb0","filename":"hedwig-client/src/main/cpp/lib/clientimpl.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/clientimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/clientimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/clientimpl.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"4cd74ceb0cfe8777096d2c1b9090550429faeb4d","filename":"hedwig-client/src/main/cpp/lib/data.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/data.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/data.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"0639f4a80fda82e09b8be1a855385089daf49bc7","filename":"hedwig-client/src/main/cpp/lib/data.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/data.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/data.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"af3560c5d3dc3c91dddceb2e68a86d4238c2a180","filename":"hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/eventdispatcher.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"b6a75040a4fea40ba4e05adc02f43439b7f6d824","filename":"hedwig-client/src/main/cpp/lib/eventdispatcher.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/eventdispatcher.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/eventdispatcher.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/eventdispatcher.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"07d884c2ce43ad8f3781dc2f76eb009319fa8558","filename":"hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/filterablemessagehandler.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"2d24bd5c9763e02e324df3ec76fa86f81a16e74d","filename":"hedwig-client/src/main/cpp/lib/filterablemessagehandler.h","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/filterablemessagehandler.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/filterablemessagehandler.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/filterablemessagehandler.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"8c8767a8be5170f0922fbe481690af68f2a4d00f","filename":"hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"8e9711e794f403a9b449594f8e5a7fe8a5944a33","filename":"hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/multiplexsubscriberimpl.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"033f17c4e61ea1157ab8aaa724d7e6960fe9f6ee","filename":"hedwig-client/src/main/cpp/lib/publisherimpl.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/publisherimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/publisherimpl.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"335a219226d7880c83fb8d9d59945d23a158f0c8","filename":"hedwig-client/src/main/cpp/lib/publisherimpl.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/publisherimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/publisherimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/publisherimpl.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3f59e1b1c01726e275070f1de06a702ae1bd2274","filename":"hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"b73fa81ea703018e9996c200231aec0038658661","filename":"hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/simplesubscriberimpl.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"dd71b66e475d8ff70012a86cd392569259be7306","filename":"hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"0cdf5f17c295276f698b67734804c97f8e1b80ab","filename":"hedwig-client/src/main/cpp/lib/subscriberimpl.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/subscriberimpl.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/subscriberimpl.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/subscriberimpl.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"b5a7cc081b47b5c552e2ac21cf4282079efb6962","filename":"hedwig-client/src/main/cpp/lib/util.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/util.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/util.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/util.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"a7741e2afc03a9d49c1da971c148841c672293a2","filename":"hedwig-client/src/main/cpp/lib/util.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/lib/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/util.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"648f43c4abcbf55e901c677013237bc54067f932","filename":"hedwig-client/src/main/cpp/m4/gtest.m4","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/m4/gtest.m4","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/m4/gtest.m4","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/m4/gtest.m4?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"2e094399eae8ed74be01c4b84e99c43a84b1ebb9","filename":"hedwig-client/src/main/cpp/scripts/log4cxx.conf","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/scripts/log4cxx.conf","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/scripts/log4cxx.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/log4cxx.conf?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"e4a67700d958f2a1bbd92ef4c46ad73d5f1d6d50","filename":"hedwig-client/src/main/cpp/scripts/server-control.sh","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/scripts/server-control.sh","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/scripts/server-control.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/server-control.sh?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"85e1f747fbd498e458a4186da1a3fceb67e6e665","filename":"hedwig-client/src/main/cpp/scripts/tester.sh","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/scripts/tester.sh","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/scripts/tester.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/tester.sh?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"d55100cc584e7752daa19330fc9e79a1405beb60","filename":"hedwig-client/src/main/cpp/test/Makefile.am","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/Makefile.am","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/Makefile.am","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/Makefile.am?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"7c08c9765b4058e53bb79e7cc9a763e070f07fa4","filename":"hedwig-client/src/main/cpp/test/main.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/main.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/main.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/main.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"9315e72a2fae3f6ec3f8bbe9983a487ced383223","filename":"hedwig-client/src/main/cpp/test/messageboundtest.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/messageboundtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/messageboundtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/messageboundtest.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"907d95da72386364160b455dfae5079db3a738c9","filename":"hedwig-client/src/main/cpp/test/messagefiltertest.cpp","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/messagefiltertest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/messagefiltertest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/messagefiltertest.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"534d9ef49470d25d142d7b106c416f1cb78ee34c","filename":"hedwig-client/src/main/cpp/test/multiplextest.cpp","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/multiplextest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/multiplextest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/multiplextest.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"46b146ab8950fd80675d9d2224a4fbefa5545cfc","filename":"hedwig-client/src/main/cpp/test/publishtest.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/publishtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/publishtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/publishtest.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"9baba1d8ed2ba82e9e44ed76ba08cc411c25faf2","filename":"hedwig-client/src/main/cpp/test/pubsubtest.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/pubsubtest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/pubsubtest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/pubsubtest.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3ee736a1a4cd0e1c9a1aecc29e78eb1e76b2a5f4","filename":"hedwig-client/src/main/cpp/test/subscribetest.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/subscribetest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/subscribetest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/subscribetest.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"9dd0d9ff91b6b8d88dc7d5eeb16aef5655e421a6","filename":"hedwig-client/src/main/cpp/test/throttledeliverytest.cpp","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/throttledeliverytest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/throttledeliverytest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/throttledeliverytest.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"dd5b5bfa7bef7c7d3ccbcb85006343946e886b2f","filename":"hedwig-client/src/main/cpp/test/util.h","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/util.h","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/util.h","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/util.h?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"e5b6d75afb37288a9d338bd193b2a1ac1cfb34c5","filename":"hedwig-client/src/main/cpp/test/utiltest.cpp","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/utiltest.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/cpp/test/utiltest.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/test/utiltest.cpp?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"a4fdb043bfa28dfea541a7719f22221dd0008acf","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/api/Publisher.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"7e05c0e69997e4a3f3d843dfc7aceabccfeadcd8","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/api/Subscriber.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"b61e3c19bdc7f35dedd85cc47536a348f99f2408","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkPublisher.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"9138861b19d574fda19827e8855b807f89d10df0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkSubscriber.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3efe22da20938a875dee575044d9c5e4e9d234b0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/benchmark/BenchmarkUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"21ce9d3b34c9bec19eee58fba6001bedb63c2f46","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/conf/ClientConfiguration.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"346d74b34b1a728f38b0a74e036fc88b1c0e8474","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/data/MessageConsumeData.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"63547a0fdafff58646fe83f713c16d9741aa0abd","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/data/PubSubData.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"22b44b16f649b0efd93b9530164ae9aad9b962e5","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/NoResponseHandlerException.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"c9aeb385307340e75c03e24195d333ef0fbc5933","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ResubscribeException.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ResubscribeException.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ResubscribeException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/exceptions/ResubscribeException.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"bb2c0bb658b8bdef6f7b535df671a857a0b0df06","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/AbstractResponseHandler.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/AbstractResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/AbstractResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/AbstractResponseHandler.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"102dfb509a450fef90116e97982960b1f7dda258","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/CloseSubscriptionResponseHandler.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"436c14f85b5e65be42196f14d5160ecc4db652ee","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/MessageConsumeCallback.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"dacaa7aa715e6099810d58d3831a2a9376d588b0","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PubSubCallback.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"fc6a0251074488ef169090531dd8c7336e12681d","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/PublishResponseHandler.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"6c79feebd80db01efe365cac9c736dc256299ecb","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/687de61ce5077451957307a37c2feecdfb1ed8b5/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/687de61ce5077451957307a37c2feecdfb1ed8b5/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeReconnectCallback.java?ref=687de61ce5077451957307a37c2feecdfb1ed8b5"},{"sha":"e2c685f91d687e8b709653af50b6fe3dcefa0231","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/SubscribeResponseHandler.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"3ddd5390553150162e9482d6e2125998cb12fde2","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/handlers/UnsubscribeResponseHandler.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"0c676a13c909580f1aa85105fa54d1eb6469e273","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/CleanupChannelMap.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"db38fa06705052e4e87dc16befeea0ee7a983ef2","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/687de61ce5077451957307a37c2feecdfb1ed8b5/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/687de61ce5077451957307a37c2feecdfb1ed8b5/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ConnectCallback.java?ref=687de61ce5077451957307a37c2feecdfb1ed8b5"},{"sha":"94e0a808e7858020c4d0f3692126b7590bc169bb","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/FilterableMessageHandler.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"340cec57553513c96524c12f7f2826648107581e","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannel.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannel.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"6fae6bb2588d6d6b666df72793c3628c16fba38e","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannelManager.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannelManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannelManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HChannelManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"e4e3912fb3e4e0b12262ed7cb8e04098fdcd198b","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigClientImpl.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"5611bdd0c6e5f6871ec1fd6c751f6b16761aa2e6","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigPublisher.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"1f78897da66a668e3b32ee0ceb3f13b54ee03976","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/HedwigSubscriber.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"a6762c4d753b9d5103468368e9b8f9a9cdb92c36","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/NetUtils.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"c4affafa12bf0e334a4a2fba4b0df5c31ccacb79","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","status":"removed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/687de61ce5077451957307a37c2feecdfb1ed8b5/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/687de61ce5077451957307a37c2feecdfb1ed8b5/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/ResponseHandler.java?ref=687de61ce5077451957307a37c2feecdfb1ed8b5"},{"sha":"ffe866108ec54a3fbf082d91e198bf53ecaabf18","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/SubscriptionEventEmitter.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/SubscriptionEventEmitter.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/SubscriptionEventEmitter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/SubscriptionEventEmitter.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"dc2cf8bc2007377fe4d57c39bf407a481c00bf39","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/VoidCallbackAdapter.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"6fb89784bd34c894fee74a2804d5e26de5f823d4","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractHChannelManager.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractHChannelManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractHChannelManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractHChannelManager.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ad5c2cd8f745800098faa3e564916bf34f27bcba","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/AbstractSubscribeResponseHandler.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"aac132101af4ce3be8e0226ddd238cbf4804b6af","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a"},{"sha":"ab86f236091e4a2db5364bd392cc2ad537e3cedb","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ClientChannelPipelineFactory.java","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/apache/bookkeeper/blob/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ClientChannelPipelineFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/5ef2f7e21497e73ae26811dd483097599926a93a/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ClientChannelPipelineFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ClientChannelPipelineFactory.java?ref=5ef2f7e21497e73ae26811dd483097599926a93a","previous_filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/ClientChannelPipelineFactory.java"}]}

