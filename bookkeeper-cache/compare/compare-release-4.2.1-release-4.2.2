{"url":"https://api.github.com/repos/apache/bookkeeper/compare/release-4.2.1...release-4.2.2","html_url":"https://github.com/apache/bookkeeper/compare/release-4.2.1...release-4.2.2","permalink_url":"https://github.com/apache/bookkeeper/compare/apache:6af8f6e...apache:16c7a1c","diff_url":"https://github.com/apache/bookkeeper/compare/release-4.2.1...release-4.2.2.diff","patch_url":"https://github.com/apache/bookkeeper/compare/release-4.2.1...release-4.2.2.patch","base_commit":{"sha":"6af8f6e4824aacc01b218882fdd0360b0884b6e7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2YWY4ZjZlNDgyNGFhY2MwMWIyMTg4ODJmZGQwMzYwYjA4ODRiNmU3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T18:41:29Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T18:41:29Z"},"message":"BookKeeper 4.2.1 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.2.1@1447864 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"651216690c663ed743b5130c992a579c61652e6f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/651216690c663ed743b5130c992a579c61652e6f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6af8f6e4824aacc01b218882fdd0360b0884b6e7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6af8f6e4824aacc01b218882fdd0360b0884b6e7","html_url":"https://github.com/apache/bookkeeper/commit/6af8f6e4824aacc01b218882fdd0360b0884b6e7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6af8f6e4824aacc01b218882fdd0360b0884b6e7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"8d8faf846d0aa210622bed700dcc4bb05765aadd","url":"https://api.github.com/repos/apache/bookkeeper/commits/8d8faf846d0aa210622bed700dcc4bb05765aadd","html_url":"https://github.com/apache/bookkeeper/commit/8d8faf846d0aa210622bed700dcc4bb05765aadd"}]},"merge_base_commit":{"sha":"8d8faf846d0aa210622bed700dcc4bb05765aadd","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4ZDhmYWY4NDZkMGFhMjEwNjIyYmVkNzAwZGNjNGJiMDU3NjVhYWRk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T18:21:15Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-02-19T18:21:15Z"},"message":"Prep for 4.2.1 Release; Update version in pom.xml, CHANGES.txt\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1447857 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"651216690c663ed743b5130c992a579c61652e6f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/651216690c663ed743b5130c992a579c61652e6f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8d8faf846d0aa210622bed700dcc4bb05765aadd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8d8faf846d0aa210622bed700dcc4bb05765aadd","html_url":"https://github.com/apache/bookkeeper/commit/8d8faf846d0aa210622bed700dcc4bb05765aadd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8d8faf846d0aa210622bed700dcc4bb05765aadd/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2f739ab5282300ba40b5dee2e55c253e71209021","url":"https://api.github.com/repos/apache/bookkeeper/commits/2f739ab5282300ba40b5dee2e55c253e71209021","html_url":"https://github.com/apache/bookkeeper/commit/2f739ab5282300ba40b5dee2e55c253e71209021"}]},"status":"diverged","ahead_by":56,"behind_by":1,"total_commits":56,"commits":[{"sha":"2fc1582bec4d072ac80ba99f6413225f24eb47bc","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZmMxNTgyYmVjNGQwNzJhYzgwYmE5OWY2NDEzMjI1ZjI0ZWI0N2Jj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-25T06:05:53Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-03-25T06:05:53Z"},"message":"BOOKKEEPER-583: Read from a ReadOnlyBookie fails if index fileinfo is not in ledger cache (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1460527 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"59492e486c017ce200fc97bc9b871ab9892c5e27","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/59492e486c017ce200fc97bc9b871ab9892c5e27"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2fc1582bec4d072ac80ba99f6413225f24eb47bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2fc1582bec4d072ac80ba99f6413225f24eb47bc","html_url":"https://github.com/apache/bookkeeper/commit/2fc1582bec4d072ac80ba99f6413225f24eb47bc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2fc1582bec4d072ac80ba99f6413225f24eb47bc/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"8d8faf846d0aa210622bed700dcc4bb05765aadd","url":"https://api.github.com/repos/apache/bookkeeper/commits/8d8faf846d0aa210622bed700dcc4bb05765aadd","html_url":"https://github.com/apache/bookkeeper/commit/8d8faf846d0aa210622bed700dcc4bb05765aadd"}]},{"sha":"342146a2c5f88b12506a50af93dfa52343ddd4bf","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNDIxNDZhMmM1Zjg4YjEyNTA2YTUwYWY5M2RmYTUyMzQzZGRkNGJm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-06T17:28:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-06T17:28:49Z"},"message":"Update version numbers to 4.2.2-SNAPSHOT\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490368 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2c40fc058b13480d52ed51026fe4849a92dd0b0a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/2c40fc058b13480d52ed51026fe4849a92dd0b0a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/342146a2c5f88b12506a50af93dfa52343ddd4bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/342146a2c5f88b12506a50af93dfa52343ddd4bf","html_url":"https://github.com/apache/bookkeeper/commit/342146a2c5f88b12506a50af93dfa52343ddd4bf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/342146a2c5f88b12506a50af93dfa52343ddd4bf/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2fc1582bec4d072ac80ba99f6413225f24eb47bc","url":"https://api.github.com/repos/apache/bookkeeper/commits/2fc1582bec4d072ac80ba99f6413225f24eb47bc","html_url":"https://github.com/apache/bookkeeper/commit/2fc1582bec4d072ac80ba99f6413225f24eb47bc"}]},{"sha":"9e7a9e3fa310f16646d54fbd254dd8bf1b3285d4","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZTdhOWUzZmEzMTBmMTY2NDZkNTRmYmQyNTRkZDhiZjFiMzI4NWQ0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-06T17:42:42Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-06T17:42:42Z"},"message":"BOOKKEEPER-556: BookieServerMXBean#getServerState makes no sense (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490376 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1becc34d9ed57bab49b913ba6a76f536ffbbaecc","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1becc34d9ed57bab49b913ba6a76f536ffbbaecc"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9e7a9e3fa310f16646d54fbd254dd8bf1b3285d4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9e7a9e3fa310f16646d54fbd254dd8bf1b3285d4","html_url":"https://github.com/apache/bookkeeper/commit/9e7a9e3fa310f16646d54fbd254dd8bf1b3285d4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9e7a9e3fa310f16646d54fbd254dd8bf1b3285d4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"342146a2c5f88b12506a50af93dfa52343ddd4bf","url":"https://api.github.com/repos/apache/bookkeeper/commits/342146a2c5f88b12506a50af93dfa52343ddd4bf","html_url":"https://github.com/apache/bookkeeper/commit/342146a2c5f88b12506a50af93dfa52343ddd4bf"}]},{"sha":"2f47e80bb34f6e60db4a0b22d37f4280eac8e869","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyZjQ3ZTgwYmIzNGY2ZTYwZGI0YTBiMjJkMzdmNDI4MGVhYzhlODY5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T08:48:55Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T08:48:55Z"},"message":"BOOKKEEPER-559: Fix occasional failure in AuditorBookieTest (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490544 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"86072a45301c9a6535ce49c2064fe44f5b66b102","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/86072a45301c9a6535ce49c2064fe44f5b66b102"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2f47e80bb34f6e60db4a0b22d37f4280eac8e869","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2f47e80bb34f6e60db4a0b22d37f4280eac8e869","html_url":"https://github.com/apache/bookkeeper/commit/2f47e80bb34f6e60db4a0b22d37f4280eac8e869","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2f47e80bb34f6e60db4a0b22d37f4280eac8e869/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9e7a9e3fa310f16646d54fbd254dd8bf1b3285d4","url":"https://api.github.com/repos/apache/bookkeeper/commits/9e7a9e3fa310f16646d54fbd254dd8bf1b3285d4","html_url":"https://github.com/apache/bookkeeper/commit/9e7a9e3fa310f16646d54fbd254dd8bf1b3285d4"}]},{"sha":"69899c2e51ab6ae505e73bc1939f1eba7fa4ab18","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2OTg5OWMyZTUxYWI2YWU1MDVlNzNiYzE5MzlmMWViYTdmYTRhYjE4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T08:55:50Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T08:55:50Z"},"message":"BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490548 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8fdf9bb4ba84beadbb9b050a2a678f84b5134eb4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/8fdf9bb4ba84beadbb9b050a2a678f84b5134eb4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/69899c2e51ab6ae505e73bc1939f1eba7fa4ab18","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/69899c2e51ab6ae505e73bc1939f1eba7fa4ab18","html_url":"https://github.com/apache/bookkeeper/commit/69899c2e51ab6ae505e73bc1939f1eba7fa4ab18","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/69899c2e51ab6ae505e73bc1939f1eba7fa4ab18/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2f47e80bb34f6e60db4a0b22d37f4280eac8e869","url":"https://api.github.com/repos/apache/bookkeeper/commits/2f47e80bb34f6e60db4a0b22d37f4280eac8e869","html_url":"https://github.com/apache/bookkeeper/commit/2f47e80bb34f6e60db4a0b22d37f4280eac8e869"}]},{"sha":"30452d072bbf919fb1a602556fbcc7078a74bd36","node_id":"MDY6Q29tbWl0MTU3NTk1NjozMDQ1MmQwNzJiYmY5MTlmYjFhNjAyNTU2ZmJjYzcwNzhhNzRiZDM2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T09:46:15Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T09:46:15Z"},"message":"BOOKKEEPER-585: Auditor logs noisily when a ledger has been deleted (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490557 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"87f2b3e3d5c8c934b8b99aaa8fbf907318ad91ea","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/87f2b3e3d5c8c934b8b99aaa8fbf907318ad91ea"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/30452d072bbf919fb1a602556fbcc7078a74bd36","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/30452d072bbf919fb1a602556fbcc7078a74bd36","html_url":"https://github.com/apache/bookkeeper/commit/30452d072bbf919fb1a602556fbcc7078a74bd36","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/30452d072bbf919fb1a602556fbcc7078a74bd36/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"69899c2e51ab6ae505e73bc1939f1eba7fa4ab18","url":"https://api.github.com/repos/apache/bookkeeper/commits/69899c2e51ab6ae505e73bc1939f1eba7fa4ab18","html_url":"https://github.com/apache/bookkeeper/commit/69899c2e51ab6ae505e73bc1939f1eba7fa4ab18"}]},{"sha":"678143fc4a03563dbb75af173f8029e4eff07c63","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NzgxNDNmYzRhMDM1NjNkYmI3NWFmMTczZjgwMjllNGVmZjA3YzYz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T10:44:24Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T10:44:24Z"},"message":"BOOKKEEPER-581: Ledger recovery doesn't work correctly when recovery adds force changing ensembles. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490578 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a01abe4a95c960562ecd11cdb10e5c778cce648c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a01abe4a95c960562ecd11cdb10e5c778cce648c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/678143fc4a03563dbb75af173f8029e4eff07c63","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/678143fc4a03563dbb75af173f8029e4eff07c63","html_url":"https://github.com/apache/bookkeeper/commit/678143fc4a03563dbb75af173f8029e4eff07c63","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/678143fc4a03563dbb75af173f8029e4eff07c63/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"30452d072bbf919fb1a602556fbcc7078a74bd36","url":"https://api.github.com/repos/apache/bookkeeper/commits/30452d072bbf919fb1a602556fbcc7078a74bd36","html_url":"https://github.com/apache/bookkeeper/commit/30452d072bbf919fb1a602556fbcc7078a74bd36"}]},{"sha":"9c68211959b7bcaa72a8c53db0ea06eba063e859","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5YzY4MjExOTU5YjdiY2FhNzJhOGM1M2RiMGVhMDZlYmEwNjNlODU5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T12:13:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T12:13:38Z"},"message":"BOOKKEEPER-595: Crash of inprocess autorecovery daemon should not take down the bookie (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490605 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fcf49ec2216ce74bc43f49349e49cac72b9fc469","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fcf49ec2216ce74bc43f49349e49cac72b9fc469"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9c68211959b7bcaa72a8c53db0ea06eba063e859","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9c68211959b7bcaa72a8c53db0ea06eba063e859","html_url":"https://github.com/apache/bookkeeper/commit/9c68211959b7bcaa72a8c53db0ea06eba063e859","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9c68211959b7bcaa72a8c53db0ea06eba063e859/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"678143fc4a03563dbb75af173f8029e4eff07c63","url":"https://api.github.com/repos/apache/bookkeeper/commits/678143fc4a03563dbb75af173f8029e4eff07c63","html_url":"https://github.com/apache/bookkeeper/commit/678143fc4a03563dbb75af173f8029e4eff07c63"}]},{"sha":"161a3d7f527c0a075fad627aa71d7a4640de5bf2","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxNjFhM2Q3ZjUyN2MwYTA3NWZhZDYyN2FhNzFkN2E0NjQwZGU1YmYy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T16:46:10Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T16:46:10Z"},"message":"BOOKKEEPER-596: Ledgers are gc'ed by mistake in MSLedgerManagerFactory. (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490718 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"df074c69017f065f762cd8c009a7841307b02a7b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/df074c69017f065f762cd8c009a7841307b02a7b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/161a3d7f527c0a075fad627aa71d7a4640de5bf2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/161a3d7f527c0a075fad627aa71d7a4640de5bf2","html_url":"https://github.com/apache/bookkeeper/commit/161a3d7f527c0a075fad627aa71d7a4640de5bf2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/161a3d7f527c0a075fad627aa71d7a4640de5bf2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9c68211959b7bcaa72a8c53db0ea06eba063e859","url":"https://api.github.com/repos/apache/bookkeeper/commits/9c68211959b7bcaa72a8c53db0ea06eba063e859","html_url":"https://github.com/apache/bookkeeper/commit/9c68211959b7bcaa72a8c53db0ea06eba063e859"}]},{"sha":"66cc63d138206bf5d76e57a0c59db3b260aee667","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2NmNjNjNkMTM4MjA2YmY1ZDc2ZTU3YTBjNTlkYjNiMjYwYWVlNjY3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T16:56:31Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T16:56:31Z"},"message":"BOOKKEEPER-598: Fails to compile - RESUBSCRIBE_EXCEPTION conflict (Matthew Farrellee via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490725 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"52ba16ac503dba1bd0936c7ac78daac5177ce5ac","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/52ba16ac503dba1bd0936c7ac78daac5177ce5ac"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/66cc63d138206bf5d76e57a0c59db3b260aee667","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/66cc63d138206bf5d76e57a0c59db3b260aee667","html_url":"https://github.com/apache/bookkeeper/commit/66cc63d138206bf5d76e57a0c59db3b260aee667","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/66cc63d138206bf5d76e57a0c59db3b260aee667/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"161a3d7f527c0a075fad627aa71d7a4640de5bf2","url":"https://api.github.com/repos/apache/bookkeeper/commits/161a3d7f527c0a075fad627aa71d7a4640de5bf2","html_url":"https://github.com/apache/bookkeeper/commit/161a3d7f527c0a075fad627aa71d7a4640de5bf2"}]},{"sha":"2aef72b65f06e823be04f862b4fa45b35ca8f5ec","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyYWVmNzJiNjVmMDZlODIzYmUwNGY4NjJiNGZhNDViMzVjYThmNWVj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T17:00:27Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T17:00:27Z"},"message":"BOOKKEEPER-603: Support Boost 1.53 for Hedwig Cpp Client (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490727 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97c6286aab9a777f252c55c1450b9acbaaf5ba6c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/97c6286aab9a777f252c55c1450b9acbaaf5ba6c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2aef72b65f06e823be04f862b4fa45b35ca8f5ec","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2aef72b65f06e823be04f862b4fa45b35ca8f5ec","html_url":"https://github.com/apache/bookkeeper/commit/2aef72b65f06e823be04f862b4fa45b35ca8f5ec","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2aef72b65f06e823be04f862b4fa45b35ca8f5ec/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"66cc63d138206bf5d76e57a0c59db3b260aee667","url":"https://api.github.com/repos/apache/bookkeeper/commits/66cc63d138206bf5d76e57a0c59db3b260aee667","html_url":"https://github.com/apache/bookkeeper/commit/66cc63d138206bf5d76e57a0c59db3b260aee667"}]},{"sha":"af6d28bf0ddfc6414297c3d162db65d516a087f8","node_id":"MDY6Q29tbWl0MTU3NTk1NjphZjZkMjhiZjBkZGZjNjQxNDI5N2MzZDE2MmRiNjVkNTE2YTA4N2Y4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T19:42:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-07T19:42:49Z"},"message":"BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1490797 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"a4cddfe0b7826621b472e02986432e0e5004e47c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/a4cddfe0b7826621b472e02986432e0e5004e47c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/af6d28bf0ddfc6414297c3d162db65d516a087f8","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/af6d28bf0ddfc6414297c3d162db65d516a087f8","html_url":"https://github.com/apache/bookkeeper/commit/af6d28bf0ddfc6414297c3d162db65d516a087f8","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/af6d28bf0ddfc6414297c3d162db65d516a087f8/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2aef72b65f06e823be04f862b4fa45b35ca8f5ec","url":"https://api.github.com/repos/apache/bookkeeper/commits/2aef72b65f06e823be04f862b4fa45b35ca8f5ec","html_url":"https://github.com/apache/bookkeeper/commit/2aef72b65f06e823be04f862b4fa45b35ca8f5ec"}]},{"sha":"3c62b4884b581fb1aaf148e914b41062479f4927","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYzYyYjQ4ODRiNTgxZmIxYWFmMTQ4ZTkxNGI0MTA2MjQ3OWY0OTI3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-10T08:29:33Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-10T08:29:33Z"},"message":"BOOKKEEPER-577: BookieFailureTest uses sync/wait()/notify() incorrectly (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1491372 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ba4142b9b050da738a62b270c490d3d0101c2b7b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ba4142b9b050da738a62b270c490d3d0101c2b7b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3c62b4884b581fb1aaf148e914b41062479f4927","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3c62b4884b581fb1aaf148e914b41062479f4927","html_url":"https://github.com/apache/bookkeeper/commit/3c62b4884b581fb1aaf148e914b41062479f4927","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3c62b4884b581fb1aaf148e914b41062479f4927/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"af6d28bf0ddfc6414297c3d162db65d516a087f8","url":"https://api.github.com/repos/apache/bookkeeper/commits/af6d28bf0ddfc6414297c3d162db65d516a087f8","html_url":"https://github.com/apache/bookkeeper/commit/af6d28bf0ddfc6414297c3d162db65d516a087f8"}]},{"sha":"d4d850c81373782ec4591d3065773ce270282048","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNGQ4NTBjODEzNzM3ODJlYzQ1OTFkMzA2NTc3M2NlMjcwMjgyMDQ4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-12T18:19:15Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-12T18:19:15Z"},"message":"BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1492321 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"435253f1616be4892af5372eb35c893b4e450158","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/435253f1616be4892af5372eb35c893b4e450158"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d4d850c81373782ec4591d3065773ce270282048","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d4d850c81373782ec4591d3065773ce270282048","html_url":"https://github.com/apache/bookkeeper/commit/d4d850c81373782ec4591d3065773ce270282048","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d4d850c81373782ec4591d3065773ce270282048/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"3c62b4884b581fb1aaf148e914b41062479f4927","url":"https://api.github.com/repos/apache/bookkeeper/commits/3c62b4884b581fb1aaf148e914b41062479f4927","html_url":"https://github.com/apache/bookkeeper/commit/3c62b4884b581fb1aaf148e914b41062479f4927"}]},{"sha":"0c214c9a223193dabe65550703b9be02886a332b","node_id":"MDY6Q29tbWl0MTU3NTk1NjowYzIxNGM5YTIyMzE5M2RhYmU2NTU1MDcwM2I5YmUwMjg4NmEzMzJi","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-06-15T14:56:57Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-06-15T14:56:57Z"},"message":"BOOKKEEPER-626: BOOKIE_EXTRA_OPTS are added twice (vinay via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1493375 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"16dd5fe3e462a9ec6e9e6fbd0657e1897bdde560","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/16dd5fe3e462a9ec6e9e6fbd0657e1897bdde560"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0c214c9a223193dabe65550703b9be02886a332b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0c214c9a223193dabe65550703b9be02886a332b","html_url":"https://github.com/apache/bookkeeper/commit/0c214c9a223193dabe65550703b9be02886a332b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0c214c9a223193dabe65550703b9be02886a332b/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"d4d850c81373782ec4591d3065773ce270282048","url":"https://api.github.com/repos/apache/bookkeeper/commits/d4d850c81373782ec4591d3065773ce270282048","html_url":"https://github.com/apache/bookkeeper/commit/d4d850c81373782ec4591d3065773ce270282048"}]},{"sha":"760d151bbeb5b9f0f44a5e0ced3b1dc9e92c98b7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3NjBkMTUxYmJlYjViOWYwZjQ0YTVlMGNlZDNiMWRjOWU5MmM5OGI3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T16:55:01Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T16:55:01Z"},"message":"BOOKKEEPER-619: Bookie should not create local cookie files if zookeeper is uninitialized (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1495510 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed4f680277b9621546974e32077a6f5c89e6c7be","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ed4f680277b9621546974e32077a6f5c89e6c7be"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/760d151bbeb5b9f0f44a5e0ced3b1dc9e92c98b7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/760d151bbeb5b9f0f44a5e0ced3b1dc9e92c98b7","html_url":"https://github.com/apache/bookkeeper/commit/760d151bbeb5b9f0f44a5e0ced3b1dc9e92c98b7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/760d151bbeb5b9f0f44a5e0ced3b1dc9e92c98b7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0c214c9a223193dabe65550703b9be02886a332b","url":"https://api.github.com/repos/apache/bookkeeper/commits/0c214c9a223193dabe65550703b9be02886a332b","html_url":"https://github.com/apache/bookkeeper/commit/0c214c9a223193dabe65550703b9be02886a332b"}]},{"sha":"b1feb95cd481305201eaad28536eccbdfdea894e","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiMWZlYjk1Y2Q0ODEzMDUyMDFlYWFkMjg1MzZlY2NiZGZkZWE4OTRl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:34:09Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:34:09Z"},"message":"BOOKKEEPER-313: Bookkeeper shutdown call from Bookie thread is not shutting down server (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1495514 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"900158f5d3866dd76af0b5af40ae35185fc09d03","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/900158f5d3866dd76af0b5af40ae35185fc09d03"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b1feb95cd481305201eaad28536eccbdfdea894e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b1feb95cd481305201eaad28536eccbdfdea894e","html_url":"https://github.com/apache/bookkeeper/commit/b1feb95cd481305201eaad28536eccbdfdea894e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b1feb95cd481305201eaad28536eccbdfdea894e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"760d151bbeb5b9f0f44a5e0ced3b1dc9e92c98b7","url":"https://api.github.com/repos/apache/bookkeeper/commits/760d151bbeb5b9f0f44a5e0ced3b1dc9e92c98b7","html_url":"https://github.com/apache/bookkeeper/commit/760d151bbeb5b9f0f44a5e0ced3b1dc9e92c98b7"}]},{"sha":"805408a86e8ceb87643d8a19b6a11403b0534422","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MDU0MDhhODZlOGNlYjg3NjQzZDhhMTliNmExMTQwM2IwNTM0NDIy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:42:14Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:42:14Z"},"message":"BOOKKEEPER-595: Crash of inprocess autorecovery daemon should not take down the bookie (ivank) [missing files]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1495516 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4e06c1176aa323dd5158fc28faff7fdc6f5c7402","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4e06c1176aa323dd5158fc28faff7fdc6f5c7402"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/805408a86e8ceb87643d8a19b6a11403b0534422","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/805408a86e8ceb87643d8a19b6a11403b0534422","html_url":"https://github.com/apache/bookkeeper/commit/805408a86e8ceb87643d8a19b6a11403b0534422","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/805408a86e8ceb87643d8a19b6a11403b0534422/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b1feb95cd481305201eaad28536eccbdfdea894e","url":"https://api.github.com/repos/apache/bookkeeper/commits/b1feb95cd481305201eaad28536eccbdfdea894e","html_url":"https://github.com/apache/bookkeeper/commit/b1feb95cd481305201eaad28536eccbdfdea894e"}]},{"sha":"4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YmY2Y2M4ZmY3ZTlkNzk4YjM5ZjQ1YWZjZDk2ZjA1NWMzNTE2YmE3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:42:57Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-21T17:42:57Z"},"message":"BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank) [missing files]\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1495517 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ed052621ebe0f6e8ec2bdc05625676423c165289","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ed052621ebe0f6e8ec2bdc05625676423c165289"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","html_url":"https://github.com/apache/bookkeeper/commit/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"805408a86e8ceb87643d8a19b6a11403b0534422","url":"https://api.github.com/repos/apache/bookkeeper/commits/805408a86e8ceb87643d8a19b6a11403b0534422","html_url":"https://github.com/apache/bookkeeper/commit/805408a86e8ceb87643d8a19b6a11403b0534422"}]},{"sha":"323fa42313a3b889070725b6ff89fe02c4ddefa1","node_id":"MDY6Q29tbWl0MTU3NTk1NjozMjNmYTQyMzEzYTNiODg5MDcwNzI1YjZmZjg5ZmUwMmM0ZGRlZmEx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:45:58Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-06-26T01:45:58Z"},"message":"BOOKKEEPER-623: LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry. (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1496708 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"320b4df9e93663321e880e88de5f657f46736256","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/320b4df9e93663321e880e88de5f657f46736256"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/323fa42313a3b889070725b6ff89fe02c4ddefa1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/323fa42313a3b889070725b6ff89fe02c4ddefa1","html_url":"https://github.com/apache/bookkeeper/commit/323fa42313a3b889070725b6ff89fe02c4ddefa1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/323fa42313a3b889070725b6ff89fe02c4ddefa1/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","url":"https://api.github.com/repos/apache/bookkeeper/commits/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7","html_url":"https://github.com/apache/bookkeeper/commit/4bf6cc8ff7e9d798b39f45afcd96f055c3516ba7"}]},{"sha":"e8a34269cdeb42cbb979159c505b88f709ef4213","node_id":"MDY6Q29tbWl0MTU3NTk1NjplOGEzNDI2OWNkZWI0MmNiYjk3OTE1OWM1MDViODhmNzA5ZWY0MjEz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-28T15:59:22Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-06-28T15:59:22Z"},"message":"BOOKKEEPER-620: PerChannelBookieClient race during channel disconnect (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1497824 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fbf148576163ce98b39c0047b7ebf221754730db","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fbf148576163ce98b39c0047b7ebf221754730db"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e8a34269cdeb42cbb979159c505b88f709ef4213","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e8a34269cdeb42cbb979159c505b88f709ef4213","html_url":"https://github.com/apache/bookkeeper/commit/e8a34269cdeb42cbb979159c505b88f709ef4213","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e8a34269cdeb42cbb979159c505b88f709ef4213/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"323fa42313a3b889070725b6ff89fe02c4ddefa1","url":"https://api.github.com/repos/apache/bookkeeper/commits/323fa42313a3b889070725b6ff89fe02c4ddefa1","html_url":"https://github.com/apache/bookkeeper/commit/323fa42313a3b889070725b6ff89fe02c4ddefa1"}]},{"sha":"49e3e6345759894f756e26be0e3ddab47f10a438","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0OWUzZTYzNDU3NTk4OTRmNzU2ZTI2YmUwZTNkZGFiNDdmMTBhNDM4","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-02T17:47:06Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-02T17:47:06Z"},"message":"BOOKKEEPER-637: NoSuchEntry exception when reading an entry from a bookie should not print ERROR level message (mmerli via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1499037 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"13b69c4376fcdf8fba03dbf5c0114bf1ef841e5a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/13b69c4376fcdf8fba03dbf5c0114bf1ef841e5a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/49e3e6345759894f756e26be0e3ddab47f10a438","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/49e3e6345759894f756e26be0e3ddab47f10a438","html_url":"https://github.com/apache/bookkeeper/commit/49e3e6345759894f756e26be0e3ddab47f10a438","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/49e3e6345759894f756e26be0e3ddab47f10a438/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e8a34269cdeb42cbb979159c505b88f709ef4213","url":"https://api.github.com/repos/apache/bookkeeper/commits/e8a34269cdeb42cbb979159c505b88f709ef4213","html_url":"https://github.com/apache/bookkeeper/commit/e8a34269cdeb42cbb979159c505b88f709ef4213"}]},{"sha":"d67426abef02903a196c9e846ad8a082cc424d80","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkNjc0MjZhYmVmMDI5MDNhMTk2YzllODQ2YWQ4YTA4MmNjNDI0ZDgw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-03T14:52:46Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-03T14:52:46Z"},"message":"BOOKKEEPER-257: Ability to list all ledgers (fpj via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1499429 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"45ae2f6e1ab261b03442d768647bbbcb8a7a3285","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/45ae2f6e1ab261b03442d768647bbbcb8a7a3285"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d67426abef02903a196c9e846ad8a082cc424d80","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d67426abef02903a196c9e846ad8a082cc424d80","html_url":"https://github.com/apache/bookkeeper/commit/d67426abef02903a196c9e846ad8a082cc424d80","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d67426abef02903a196c9e846ad8a082cc424d80/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"49e3e6345759894f756e26be0e3ddab47f10a438","url":"https://api.github.com/repos/apache/bookkeeper/commits/49e3e6345759894f756e26be0e3ddab47f10a438","html_url":"https://github.com/apache/bookkeeper/commit/49e3e6345759894f756e26be0e3ddab47f10a438"}]},{"sha":"b046f0cd3f6b4c246db5041a2726e80fead1af77","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiMDQ2ZjBjZDNmNmI0YzI0NmRiNTA0MWEyNzI2ZTgwZmVhZDFhZjc3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-04T14:50:30Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-04T14:50:30Z"},"message":"BOOKKEEPER-636: Latest txn logs might be deleted in a race condition which is not recoverable if BK goes down before next txn log created. (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1499776 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"37223b561246d4dc8ea41137af2109a032f45db6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/37223b561246d4dc8ea41137af2109a032f45db6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b046f0cd3f6b4c246db5041a2726e80fead1af77","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b046f0cd3f6b4c246db5041a2726e80fead1af77","html_url":"https://github.com/apache/bookkeeper/commit/b046f0cd3f6b4c246db5041a2726e80fead1af77","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b046f0cd3f6b4c246db5041a2726e80fead1af77/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"d67426abef02903a196c9e846ad8a082cc424d80","url":"https://api.github.com/repos/apache/bookkeeper/commits/d67426abef02903a196c9e846ad8a082cc424d80","html_url":"https://github.com/apache/bookkeeper/commit/d67426abef02903a196c9e846ad8a082cc424d80"}]},{"sha":"69af0463e916456c5610415b9a60b710d14d1132","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2OWFmMDQ2M2U5MTY0NTZjNTYxMDQxNWI5YTYwYjcxMGQxNGQxMTMy","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-13T00:02:24Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-13T00:02:24Z"},"message":"BOOKKEEPER-618: Better resolution of bookie address (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1502728 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"01353e887819826e624fa8da894f40eba205ec35","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/01353e887819826e624fa8da894f40eba205ec35"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/69af0463e916456c5610415b9a60b710d14d1132","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/69af0463e916456c5610415b9a60b710d14d1132","html_url":"https://github.com/apache/bookkeeper/commit/69af0463e916456c5610415b9a60b710d14d1132","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/69af0463e916456c5610415b9a60b710d14d1132/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"b046f0cd3f6b4c246db5041a2726e80fead1af77","url":"https://api.github.com/repos/apache/bookkeeper/commits/b046f0cd3f6b4c246db5041a2726e80fead1af77","html_url":"https://github.com/apache/bookkeeper/commit/b046f0cd3f6b4c246db5041a2726e80fead1af77"}]},{"sha":"ab6a6bab9b191b9d1d3c53be12e0490ad4f2f9bc","node_id":"MDY6Q29tbWl0MTU3NTk1NjphYjZhNmJhYjliMTkxYjlkMWQzYzUzYmUxMmUwNDkwYWQ0ZjJmOWJj","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-13T15:52:29Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-13T15:52:29Z"},"message":"BOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1502806 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"627763e1c94d17e774c012a7e931461e10fb7295","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/627763e1c94d17e774c012a7e931461e10fb7295"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ab6a6bab9b191b9d1d3c53be12e0490ad4f2f9bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ab6a6bab9b191b9d1d3c53be12e0490ad4f2f9bc","html_url":"https://github.com/apache/bookkeeper/commit/ab6a6bab9b191b9d1d3c53be12e0490ad4f2f9bc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ab6a6bab9b191b9d1d3c53be12e0490ad4f2f9bc/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"69af0463e916456c5610415b9a60b710d14d1132","url":"https://api.github.com/repos/apache/bookkeeper/commits/69af0463e916456c5610415b9a60b710d14d1132","html_url":"https://github.com/apache/bookkeeper/commit/69af0463e916456c5610415b9a60b710d14d1132"}]},{"sha":"ce6a212ce15635229acc0aa9ce52aa691ec457bf","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZTZhMjEyY2UxNTYzNTIyOWFjYzBhYTljZTUyYWE2OTFlYzQ1N2Jm","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-14T23:02:59Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-07-14T23:02:59Z"},"message":"BOOKKEEPER-600: shouldClaim flag isn't cleared for hedwig multiplex java client (sijie via fpj)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1503077 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3dc3e5543a87583194d4991c22a91cd555a9510e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3dc3e5543a87583194d4991c22a91cd555a9510e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ce6a212ce15635229acc0aa9ce52aa691ec457bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ce6a212ce15635229acc0aa9ce52aa691ec457bf","html_url":"https://github.com/apache/bookkeeper/commit/ce6a212ce15635229acc0aa9ce52aa691ec457bf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ce6a212ce15635229acc0aa9ce52aa691ec457bf/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"ab6a6bab9b191b9d1d3c53be12e0490ad4f2f9bc","url":"https://api.github.com/repos/apache/bookkeeper/commits/ab6a6bab9b191b9d1d3c53be12e0490ad4f2f9bc","html_url":"https://github.com/apache/bookkeeper/commit/ab6a6bab9b191b9d1d3c53be12e0490ad4f2f9bc"}]},{"sha":"4a7dcc330cd769b151ce449f10bc5b58ddc2675c","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YTdkY2MzMzBjZDc2OWIxNTFjZTQ0OWYxMGJjNWI1OGRkYzI2NzVj","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:13:09Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:13:09Z"},"message":"BOOKKEEPER-621: NPE in FileInfo.moveToNewLocation (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1505176 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1f79676c8299d06facd4e87f10a1ae383fd68ed7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1f79676c8299d06facd4e87f10a1ae383fd68ed7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4a7dcc330cd769b151ce449f10bc5b58ddc2675c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4a7dcc330cd769b151ce449f10bc5b58ddc2675c","html_url":"https://github.com/apache/bookkeeper/commit/4a7dcc330cd769b151ce449f10bc5b58ddc2675c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4a7dcc330cd769b151ce449f10bc5b58ddc2675c/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"ce6a212ce15635229acc0aa9ce52aa691ec457bf","url":"https://api.github.com/repos/apache/bookkeeper/commits/ce6a212ce15635229acc0aa9ce52aa691ec457bf","html_url":"https://github.com/apache/bookkeeper/commit/ce6a212ce15635229acc0aa9ce52aa691ec457bf"}]},{"sha":"1aa998fb23c816caf6dc052f0e98e09e80e85210","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxYWE5OThmYjIzYzgxNmNhZjZkYzA1MmYwZTk4ZTA5ZTgwZTg1MjEw","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:18:55Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:18:55Z"},"message":"BOOKKEEPER-635: jenkins build should highlight which lines of the patch cause raw analysis errors (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1505180 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e89500e406d9bb5580fb70a858fa5d6e79c09cfe","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/e89500e406d9bb5580fb70a858fa5d6e79c09cfe"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1aa998fb23c816caf6dc052f0e98e09e80e85210","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1aa998fb23c816caf6dc052f0e98e09e80e85210","html_url":"https://github.com/apache/bookkeeper/commit/1aa998fb23c816caf6dc052f0e98e09e80e85210","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1aa998fb23c816caf6dc052f0e98e09e80e85210/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4a7dcc330cd769b151ce449f10bc5b58ddc2675c","url":"https://api.github.com/repos/apache/bookkeeper/commits/4a7dcc330cd769b151ce449f10bc5b58ddc2675c","html_url":"https://github.com/apache/bookkeeper/commit/4a7dcc330cd769b151ce449f10bc5b58ddc2675c"}]},{"sha":"471dfdfe5f9f7bcd5912e0454bef8bcc2364205f","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NzFkZmRmZTVmOWY3YmNkNTkxMmUwNDU0YmVmOGJjYzIzNjQyMDVm","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:27:37Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:27:37Z"},"message":"BOOKKEEPER-646: BookieShell readjournal command is throwing BufferUnderflowException (Rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1505183 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ce4bb6494106c1100fe9b627c80569358004e389","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ce4bb6494106c1100fe9b627c80569358004e389"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/471dfdfe5f9f7bcd5912e0454bef8bcc2364205f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/471dfdfe5f9f7bcd5912e0454bef8bcc2364205f","html_url":"https://github.com/apache/bookkeeper/commit/471dfdfe5f9f7bcd5912e0454bef8bcc2364205f","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/471dfdfe5f9f7bcd5912e0454bef8bcc2364205f/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"1aa998fb23c816caf6dc052f0e98e09e80e85210","url":"https://api.github.com/repos/apache/bookkeeper/commits/1aa998fb23c816caf6dc052f0e98e09e80e85210","html_url":"https://github.com/apache/bookkeeper/commit/1aa998fb23c816caf6dc052f0e98e09e80e85210"}]},{"sha":"0139c8c8917e76e2d9b5e5e37450bae80b4c6884","node_id":"MDY6Q29tbWl0MTU3NTk1NjowMTM5YzhjODkxN2U3NmUyZDliNWU1ZTM3NDUwYmFlODBiNGM2ODg0","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:31:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-07-20T18:31:19Z"},"message":"BOOKKEEPER-652: Logger class name is wrong in LedgerCacheImpl.java (Rakesh via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1505188 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ca37d15463c006ebddcd047afc16a6d1f70b69ae","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ca37d15463c006ebddcd047afc16a6d1f70b69ae"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0139c8c8917e76e2d9b5e5e37450bae80b4c6884","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0139c8c8917e76e2d9b5e5e37450bae80b4c6884","html_url":"https://github.com/apache/bookkeeper/commit/0139c8c8917e76e2d9b5e5e37450bae80b4c6884","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0139c8c8917e76e2d9b5e5e37450bae80b4c6884/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"471dfdfe5f9f7bcd5912e0454bef8bcc2364205f","url":"https://api.github.com/repos/apache/bookkeeper/commits/471dfdfe5f9f7bcd5912e0454bef8bcc2364205f","html_url":"https://github.com/apache/bookkeeper/commit/471dfdfe5f9f7bcd5912e0454bef8bcc2364205f"}]},{"sha":"b2285270150c3bbd25af4ab915a6f648feaeac4a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiMjI4NTI3MDE1MGMzYmJkMjVhZjRhYjkxNWE2ZjY0OGZlYWVhYzRh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-22T17:18:01Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-22T17:18:01Z"},"message":"BOOKKEEPER-607: Filtered Messages Require ACK from Client Causes User Being Throttled Incorrectly Forever (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1505735 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"197ba5e8e59d3d88b4c77665201536341c0ff73c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/197ba5e8e59d3d88b4c77665201536341c0ff73c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/b2285270150c3bbd25af4ab915a6f648feaeac4a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/b2285270150c3bbd25af4ab915a6f648feaeac4a","html_url":"https://github.com/apache/bookkeeper/commit/b2285270150c3bbd25af4ab915a6f648feaeac4a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/b2285270150c3bbd25af4ab915a6f648feaeac4a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0139c8c8917e76e2d9b5e5e37450bae80b4c6884","url":"https://api.github.com/repos/apache/bookkeeper/commits/0139c8c8917e76e2d9b5e5e37450bae80b4c6884","html_url":"https://github.com/apache/bookkeeper/commit/0139c8c8917e76e2d9b5e5e37450bae80b4c6884"}]},{"sha":"8923f774c55687439303e4f4c1e98823e2ba8af4","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4OTIzZjc3NGM1NTY4NzQzOTMwM2U0ZjRjMWU5ODgyM2UyYmE4YWY0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-24T12:16:10Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-24T12:16:10Z"},"message":"BOOKKEEPER-625: On OutOfMemoryError in NIOServerFactory thread bookie should shutdown (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1506513 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ea38298b64fbf36540bf8cdbed0b7cf420b9b7d9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/ea38298b64fbf36540bf8cdbed0b7cf420b9b7d9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8923f774c55687439303e4f4c1e98823e2ba8af4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8923f774c55687439303e4f4c1e98823e2ba8af4","html_url":"https://github.com/apache/bookkeeper/commit/8923f774c55687439303e4f4c1e98823e2ba8af4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8923f774c55687439303e4f4c1e98823e2ba8af4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"b2285270150c3bbd25af4ab915a6f648feaeac4a","url":"https://api.github.com/repos/apache/bookkeeper/commits/b2285270150c3bbd25af4ab915a6f648feaeac4a","html_url":"https://github.com/apache/bookkeeper/commit/b2285270150c3bbd25af4ab915a6f648feaeac4a"}]},{"sha":"868687b9cae73c0e3bd12a59e5d275dbdfed0e24","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4Njg2ODdiOWNhZTczYzBlM2JkMTJhNTllNWQyNzVkYmRmZWQwZTI0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-24T14:56:01Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-24T14:56:01Z"},"message":"BOOKKEEPER-642: Bookie returns incorrect exitcode, ExitCode.ZK_REG_FAIL is getting overridden (Rakesh via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1506584 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1a16790ed044497d351111f099dc2fef418221e4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1a16790ed044497d351111f099dc2fef418221e4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/868687b9cae73c0e3bd12a59e5d275dbdfed0e24","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/868687b9cae73c0e3bd12a59e5d275dbdfed0e24","html_url":"https://github.com/apache/bookkeeper/commit/868687b9cae73c0e3bd12a59e5d275dbdfed0e24","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/868687b9cae73c0e3bd12a59e5d275dbdfed0e24/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"8923f774c55687439303e4f4c1e98823e2ba8af4","url":"https://api.github.com/repos/apache/bookkeeper/commits/8923f774c55687439303e4f4c1e98823e2ba8af4","html_url":"https://github.com/apache/bookkeeper/commit/8923f774c55687439303e4f4c1e98823e2ba8af4"}]},{"sha":"081960730bb540b43f3319134b3ca00ddb4cc85a","node_id":"MDY6Q29tbWl0MTU3NTk1NjowODE5NjA3MzBiYjU0MGI0M2YzMzE5MTM0YjNjYTAwZGRiNGNjODVh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-29T12:22:48Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-07-29T12:22:48Z"},"message":"BOOKKEEPER-663: HierarchicalLedgerManager iterator is missing some ranges and the last ledger in the range (mmerli via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1508005 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"883a3a629f41a801f15533bb70a7f14d06c4ea24","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/883a3a629f41a801f15533bb70a7f14d06c4ea24"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/081960730bb540b43f3319134b3ca00ddb4cc85a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/081960730bb540b43f3319134b3ca00ddb4cc85a","html_url":"https://github.com/apache/bookkeeper/commit/081960730bb540b43f3319134b3ca00ddb4cc85a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/081960730bb540b43f3319134b3ca00ddb4cc85a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"868687b9cae73c0e3bd12a59e5d275dbdfed0e24","url":"https://api.github.com/repos/apache/bookkeeper/commits/868687b9cae73c0e3bd12a59e5d275dbdfed0e24","html_url":"https://github.com/apache/bookkeeper/commit/868687b9cae73c0e3bd12a59e5d275dbdfed0e24"}]},{"sha":"50a56bcb0b155f261118f931f30328c4a0cd3fd4","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1MGE1NmJjYjBiMTU1ZjI2MTExOGY5MzFmMzAzMjhjNGEwY2QzZmQ0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-12T17:26:27Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-12T17:26:27Z"},"message":"BOOKKEEPER-604: Ledger storage can log an exception if GC happens concurrently. (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1513206 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cc27d69c54cad8db3281077b056e0902c15e8cf1","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cc27d69c54cad8db3281077b056e0902c15e8cf1"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/50a56bcb0b155f261118f931f30328c4a0cd3fd4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/50a56bcb0b155f261118f931f30328c4a0cd3fd4","html_url":"https://github.com/apache/bookkeeper/commit/50a56bcb0b155f261118f931f30328c4a0cd3fd4","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/50a56bcb0b155f261118f931f30328c4a0cd3fd4/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"081960730bb540b43f3319134b3ca00ddb4cc85a","url":"https://api.github.com/repos/apache/bookkeeper/commits/081960730bb540b43f3319134b3ca00ddb4cc85a","html_url":"https://github.com/apache/bookkeeper/commit/081960730bb540b43f3319134b3ca00ddb4cc85a"}]},{"sha":"f28beba4006b903d027308d631203afd4f46fca7","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmMjhiZWJhNDAwNmI5MDNkMDI3MzA4ZDYzMTIwM2FmZDRmNDZmY2E3","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-13T13:01:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-13T13:01:59Z"},"message":"BOOKKEEPER-667: Client write will fail with BadMetadataVersion in case of multiple Bookie failures with AutoRecovery enabled (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1513467 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"632c7a35166c68fab0f03db997d1a1fff5692930","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/632c7a35166c68fab0f03db997d1a1fff5692930"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f28beba4006b903d027308d631203afd4f46fca7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f28beba4006b903d027308d631203afd4f46fca7","html_url":"https://github.com/apache/bookkeeper/commit/f28beba4006b903d027308d631203afd4f46fca7","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f28beba4006b903d027308d631203afd4f46fca7/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"50a56bcb0b155f261118f931f30328c4a0cd3fd4","url":"https://api.github.com/repos/apache/bookkeeper/commits/50a56bcb0b155f261118f931f30328c4a0cd3fd4","html_url":"https://github.com/apache/bookkeeper/commit/50a56bcb0b155f261118f931f30328c4a0cd3fd4"}]},{"sha":"9f7456897c4971d434ec952b3e8570dce67928e5","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5Zjc0NTY4OTdjNDk3MWQ0MzRlYzk1MmIzZTg1NzBkY2U2NzkyOGU1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T10:50:35Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T10:50:35Z"},"message":"BOOKKEEPER-668: Race between PerChannelBookieClient#channelDisconnected() and disconnect() calls can make clients hang while add/reading entries in case of multiple bookie failures (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1515768 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f680042189cc9e2b04098c640da63b29b6f86dd9","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f680042189cc9e2b04098c640da63b29b6f86dd9"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9f7456897c4971d434ec952b3e8570dce67928e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9f7456897c4971d434ec952b3e8570dce67928e5","html_url":"https://github.com/apache/bookkeeper/commit/9f7456897c4971d434ec952b3e8570dce67928e5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9f7456897c4971d434ec952b3e8570dce67928e5/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"f28beba4006b903d027308d631203afd4f46fca7","url":"https://api.github.com/repos/apache/bookkeeper/commits/f28beba4006b903d027308d631203afd4f46fca7","html_url":"https://github.com/apache/bookkeeper/commit/f28beba4006b903d027308d631203afd4f46fca7"}]},{"sha":"3cab269101da2b6988a855fc4a51e328ca17f3d1","node_id":"MDY6Q29tbWl0MTU3NTk1NjozY2FiMjY5MTAxZGEyYjY5ODhhODU1ZmM0YTUxZTMyOGNhMTdmM2Qx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T11:02:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T11:02:43Z"},"message":"BOOKKEEPER-624: Reduce logs generated by ReplicationWorker (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1515773 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"15e0cd7817f8a111ec48641deb0ae4a7f521199d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/15e0cd7817f8a111ec48641deb0ae4a7f521199d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3cab269101da2b6988a855fc4a51e328ca17f3d1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3cab269101da2b6988a855fc4a51e328ca17f3d1","html_url":"https://github.com/apache/bookkeeper/commit/3cab269101da2b6988a855fc4a51e328ca17f3d1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3cab269101da2b6988a855fc4a51e328ca17f3d1/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9f7456897c4971d434ec952b3e8570dce67928e5","url":"https://api.github.com/repos/apache/bookkeeper/commits/9f7456897c4971d434ec952b3e8570dce67928e5","html_url":"https://github.com/apache/bookkeeper/commit/9f7456897c4971d434ec952b3e8570dce67928e5"}]},{"sha":"7f2f583a2c288187a0b6249a4a0e04262b185c94","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3ZjJmNTgzYTJjMjg4MTg3YTBiNjI0OWE0YTBlMDQyNjJiMTg1Yzk0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T12:07:23Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-20T12:07:23Z"},"message":"BOOKKEEPER-660: Logs too noisy on NIOServerFactory when client drops a connection (mmerli via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1515791 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"230b25c425233063aca2828a49d0b45672231b88","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/230b25c425233063aca2828a49d0b45672231b88"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7f2f583a2c288187a0b6249a4a0e04262b185c94","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7f2f583a2c288187a0b6249a4a0e04262b185c94","html_url":"https://github.com/apache/bookkeeper/commit/7f2f583a2c288187a0b6249a4a0e04262b185c94","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7f2f583a2c288187a0b6249a4a0e04262b185c94/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"3cab269101da2b6988a855fc4a51e328ca17f3d1","url":"https://api.github.com/repos/apache/bookkeeper/commits/3cab269101da2b6988a855fc4a51e328ca17f3d1","html_url":"https://github.com/apache/bookkeeper/commit/3cab269101da2b6988a855fc4a51e328ca17f3d1"}]},{"sha":"09d831847120bc316fadfaaf4b881670b6445e64","node_id":"MDY6Q29tbWl0MTU3NTk1NjowOWQ4MzE4NDcxMjBiYzMxNmZhZGZhYWY0Yjg4MTY3MGI2NDQ1ZTY0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-21T13:54:44Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-21T13:54:44Z"},"message":"BOOKKEEPER-632: AutoRecovery should consider read only bookies (vinay via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1516162 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0cabae669cfd7a6713886349423e53f3ffeaf310","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0cabae669cfd7a6713886349423e53f3ffeaf310"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/09d831847120bc316fadfaaf4b881670b6445e64","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/09d831847120bc316fadfaaf4b881670b6445e64","html_url":"https://github.com/apache/bookkeeper/commit/09d831847120bc316fadfaaf4b881670b6445e64","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/09d831847120bc316fadfaaf4b881670b6445e64/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7f2f583a2c288187a0b6249a4a0e04262b185c94","url":"https://api.github.com/repos/apache/bookkeeper/commits/7f2f583a2c288187a0b6249a4a0e04262b185c94","html_url":"https://github.com/apache/bookkeeper/commit/7f2f583a2c288187a0b6249a4a0e04262b185c94"}]},{"sha":"373325ee5631d20fad06c735fc1c7248ba12301b","node_id":"MDY6Q29tbWl0MTU3NTk1NjozNzMzMjVlZTU2MzFkMjBmYWQwNmM3MzVmYzFjNzI0OGJhMTIzMDFi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-22T15:15:09Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-22T15:15:09Z"},"message":"BOOKKEEPER-649: Race condition in sync ZKUtils.createFullPathOptimistic() (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1516482 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cf5af84a61d4bb28d026650c53ddab97bee9fd8c","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cf5af84a61d4bb28d026650c53ddab97bee9fd8c"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/373325ee5631d20fad06c735fc1c7248ba12301b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/373325ee5631d20fad06c735fc1c7248ba12301b","html_url":"https://github.com/apache/bookkeeper/commit/373325ee5631d20fad06c735fc1c7248ba12301b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/373325ee5631d20fad06c735fc1c7248ba12301b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"09d831847120bc316fadfaaf4b881670b6445e64","url":"https://api.github.com/repos/apache/bookkeeper/commits/09d831847120bc316fadfaaf4b881670b6445e64","html_url":"https://github.com/apache/bookkeeper/commit/09d831847120bc316fadfaaf4b881670b6445e64"}]},{"sha":"6ef7015e2f078a3a37bc4ddb75cca30f2fa2e575","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ZWY3MDE1ZTJmMDc4YTNhMzdiYzRkZGI3NWNjYTMwZjJmYTJlNTc1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-23T17:20:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-08-23T17:20:13Z"},"message":"BOOKKEEPER-580: improve close logic (sijie & ivank via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1516938 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cc567d06c2381404e7aa8d8645ad66fe5b0db3d3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cc567d06c2381404e7aa8d8645ad66fe5b0db3d3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/6ef7015e2f078a3a37bc4ddb75cca30f2fa2e575","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/6ef7015e2f078a3a37bc4ddb75cca30f2fa2e575","html_url":"https://github.com/apache/bookkeeper/commit/6ef7015e2f078a3a37bc4ddb75cca30f2fa2e575","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/6ef7015e2f078a3a37bc4ddb75cca30f2fa2e575/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"373325ee5631d20fad06c735fc1c7248ba12301b","url":"https://api.github.com/repos/apache/bookkeeper/commits/373325ee5631d20fad06c735fc1c7248ba12301b","html_url":"https://github.com/apache/bookkeeper/commit/373325ee5631d20fad06c735fc1c7248ba12301b"}]},{"sha":"07d53822b1781aa64d99009276fda3995aab8759","node_id":"MDY6Q29tbWl0MTU3NTk1NjowN2Q1MzgyMmIxNzgxYWE2NGQ5OTAwOTI3NmZkYTM5OTVhYWI4NzU5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-09T09:54:28Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-09T09:54:28Z"},"message":"BOOKKEEPER-664: Compaction increases latency on journal writes (ivank & sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1521021 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"68d234fc39d1e7e9cc05962c3bf623591d31a4f3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/68d234fc39d1e7e9cc05962c3bf623591d31a4f3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/07d53822b1781aa64d99009276fda3995aab8759","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/07d53822b1781aa64d99009276fda3995aab8759","html_url":"https://github.com/apache/bookkeeper/commit/07d53822b1781aa64d99009276fda3995aab8759","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/07d53822b1781aa64d99009276fda3995aab8759/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"6ef7015e2f078a3a37bc4ddb75cca30f2fa2e575","url":"https://api.github.com/repos/apache/bookkeeper/commits/6ef7015e2f078a3a37bc4ddb75cca30f2fa2e575","html_url":"https://github.com/apache/bookkeeper/commit/6ef7015e2f078a3a37bc4ddb75cca30f2fa2e575"}]},{"sha":"26913eb63e74a23785bb7f2583e3bb15b1031ecf","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNjkxM2ViNjNlNzRhMjM3ODViYjdmMjU4M2UzYmIxNWIxMDMxZWNm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-09T10:29:09Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-09T10:29:09Z"},"message":"BOOKKEEPER-679: Bookie should exit with non-zero if NIOServer crashes with Error (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1521028 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fdca928cf2621ac7bbf0be070a6b044b08d0a950","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fdca928cf2621ac7bbf0be070a6b044b08d0a950"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/26913eb63e74a23785bb7f2583e3bb15b1031ecf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/26913eb63e74a23785bb7f2583e3bb15b1031ecf","html_url":"https://github.com/apache/bookkeeper/commit/26913eb63e74a23785bb7f2583e3bb15b1031ecf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/26913eb63e74a23785bb7f2583e3bb15b1031ecf/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"07d53822b1781aa64d99009276fda3995aab8759","url":"https://api.github.com/repos/apache/bookkeeper/commits/07d53822b1781aa64d99009276fda3995aab8759","html_url":"https://github.com/apache/bookkeeper/commit/07d53822b1781aa64d99009276fda3995aab8759"}]},{"sha":"63345f59c91f121af99902f501acc3c96fbc5ce5","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2MzM0NWY1OWM5MWYxMjFhZjk5OTAyZjUwMWFjYzNjOTZmYmM1Y2U1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-09T16:00:56Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-09T16:00:56Z"},"message":"BOOKKEEPER-669: Race condition in ledger deletion and eviction from cache (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1521170 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"41a79a5c43b5213b79b6137f082116c7d3f720f6","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/41a79a5c43b5213b79b6137f082116c7d3f720f6"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/63345f59c91f121af99902f501acc3c96fbc5ce5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/63345f59c91f121af99902f501acc3c96fbc5ce5","html_url":"https://github.com/apache/bookkeeper/commit/63345f59c91f121af99902f501acc3c96fbc5ce5","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/63345f59c91f121af99902f501acc3c96fbc5ce5/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"26913eb63e74a23785bb7f2583e3bb15b1031ecf","url":"https://api.github.com/repos/apache/bookkeeper/commits/26913eb63e74a23785bb7f2583e3bb15b1031ecf","html_url":"https://github.com/apache/bookkeeper/commit/26913eb63e74a23785bb7f2583e3bb15b1031ecf"}]},{"sha":"e41c41102a509ed84a116e7789fc4a5c2f3c8609","node_id":"MDY6Q29tbWl0MTU3NTk1NjplNDFjNDExMDJhNTA5ZWQ4NGExMTZlNzc4OWZjNGE1YzJmM2M4NjA5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T13:13:52Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T13:13:52Z"},"message":"BOOKKEEPER-446: BookKeeper.createLedger(..) should not mask the error with ZKException (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1521471 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"781ea762c2596c8302b6c95e7a7a7c3f201f69e4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/781ea762c2596c8302b6c95e7a7a7c3f201f69e4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e41c41102a509ed84a116e7789fc4a5c2f3c8609","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e41c41102a509ed84a116e7789fc4a5c2f3c8609","html_url":"https://github.com/apache/bookkeeper/commit/e41c41102a509ed84a116e7789fc4a5c2f3c8609","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e41c41102a509ed84a116e7789fc4a5c2f3c8609/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"63345f59c91f121af99902f501acc3c96fbc5ce5","url":"https://api.github.com/repos/apache/bookkeeper/commits/63345f59c91f121af99902f501acc3c96fbc5ce5","html_url":"https://github.com/apache/bookkeeper/commit/63345f59c91f121af99902f501acc3c96fbc5ce5"}]},{"sha":"4bb59f526340ba8efa82a36b72fa7414bc9d02a2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0YmI1OWY1MjYzNDBiYThlZmE4MmEzNmI3MmZhNzQxNGJjOWQwMmEy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T20:13:14Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T20:13:14Z"},"message":"BOOKKEEPER-675: Log noise fixup before cutting 4.2.2 (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1521624 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"582114bfe161b06be85a80504b7bc48a6be554ed","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/582114bfe161b06be85a80504b7bc48a6be554ed"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4bb59f526340ba8efa82a36b72fa7414bc9d02a2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4bb59f526340ba8efa82a36b72fa7414bc9d02a2","html_url":"https://github.com/apache/bookkeeper/commit/4bb59f526340ba8efa82a36b72fa7414bc9d02a2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4bb59f526340ba8efa82a36b72fa7414bc9d02a2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e41c41102a509ed84a116e7789fc4a5c2f3c8609","url":"https://api.github.com/repos/apache/bookkeeper/commits/e41c41102a509ed84a116e7789fc4a5c2f3c8609","html_url":"https://github.com/apache/bookkeeper/commit/e41c41102a509ed84a116e7789fc4a5c2f3c8609"}]},{"sha":"ef9f2055ecc52397d1163df6a789cbea7d92376e","node_id":"MDY6Q29tbWl0MTU3NTk1NjplZjlmMjA1NWVjYzUyMzk3ZDExNjNkZjZhNzg5Y2JlYTdkOTIzNzZl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T21:35:00Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T21:35:00Z"},"message":"BOOKKEEPER-627: LedgerDirsMonitor is missing thread name (rakeshr via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1521657 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"451c471b4e9954a7c54d8bf0dd021758acba8962","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/451c471b4e9954a7c54d8bf0dd021758acba8962"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ef9f2055ecc52397d1163df6a789cbea7d92376e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ef9f2055ecc52397d1163df6a789cbea7d92376e","html_url":"https://github.com/apache/bookkeeper/commit/ef9f2055ecc52397d1163df6a789cbea7d92376e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ef9f2055ecc52397d1163df6a789cbea7d92376e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4bb59f526340ba8efa82a36b72fa7414bc9d02a2","url":"https://api.github.com/repos/apache/bookkeeper/commits/4bb59f526340ba8efa82a36b72fa7414bc9d02a2","html_url":"https://github.com/apache/bookkeeper/commit/4bb59f526340ba8efa82a36b72fa7414bc9d02a2"}]},{"sha":"c5accf527dbca1d6a7c6f4683f6223a616f40c42","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjNWFjY2Y1MjdkYmNhMWQ2YTdjNmY0NjgzZjYyMjNhNjE2ZjQwYzQy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T21:36:46Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T21:36:46Z"},"message":"Updating version numbers for 4.2.2 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1521660 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa112454a27967a219595bfcf523103df6f0ffde","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/aa112454a27967a219595bfcf523103df6f0ffde"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c5accf527dbca1d6a7c6f4683f6223a616f40c42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c5accf527dbca1d6a7c6f4683f6223a616f40c42","html_url":"https://github.com/apache/bookkeeper/commit/c5accf527dbca1d6a7c6f4683f6223a616f40c42","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c5accf527dbca1d6a7c6f4683f6223a616f40c42/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ef9f2055ecc52397d1163df6a789cbea7d92376e","url":"https://api.github.com/repos/apache/bookkeeper/commits/ef9f2055ecc52397d1163df6a789cbea7d92376e","html_url":"https://github.com/apache/bookkeeper/commit/ef9f2055ecc52397d1163df6a789cbea7d92376e"}]},{"sha":"44c9b1db6eb4142ef91dac22bc43499bc83b863d","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0NGM5YjFkYjZlYjQxNDJlZjkxZGFjMjJiYzQzNDk5YmM4M2I4NjNk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T22:41:13Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-10T22:41:13Z"},"message":"BookKeeper 4.2.2 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.2.2@1521668 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aa112454a27967a219595bfcf523103df6f0ffde","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/aa112454a27967a219595bfcf523103df6f0ffde"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/44c9b1db6eb4142ef91dac22bc43499bc83b863d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/44c9b1db6eb4142ef91dac22bc43499bc83b863d","html_url":"https://github.com/apache/bookkeeper/commit/44c9b1db6eb4142ef91dac22bc43499bc83b863d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/44c9b1db6eb4142ef91dac22bc43499bc83b863d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c5accf527dbca1d6a7c6f4683f6223a616f40c42","url":"https://api.github.com/repos/apache/bookkeeper/commits/c5accf527dbca1d6a7c6f4683f6223a616f40c42","html_url":"https://github.com/apache/bookkeeper/commit/c5accf527dbca1d6a7c6f4683f6223a616f40c42"}]},{"sha":"c35f64d29f7f0a07e23892f8062c78f1f54e71bf","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjMzVmNjRkMjlmN2YwYTA3ZTIzODkyZjgwNjJjNzhmMWY1NGU3MWJm","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-09-19T21:16:55Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2013-09-19T21:16:55Z"},"message":"BOOKKEEPER-684. ZK logging is oververbose, can cause oom in tests (ivank via fpj)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1524846 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7fb99c80b0fa11c9d09c182891fd9fc91b41b464","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/7fb99c80b0fa11c9d09c182891fd9fc91b41b464"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c35f64d29f7f0a07e23892f8062c78f1f54e71bf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c35f64d29f7f0a07e23892f8062c78f1f54e71bf","html_url":"https://github.com/apache/bookkeeper/commit/c35f64d29f7f0a07e23892f8062c78f1f54e71bf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c35f64d29f7f0a07e23892f8062c78f1f54e71bf/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"c5accf527dbca1d6a7c6f4683f6223a616f40c42","url":"https://api.github.com/repos/apache/bookkeeper/commits/c5accf527dbca1d6a7c6f4683f6223a616f40c42","html_url":"https://github.com/apache/bookkeeper/commit/c5accf527dbca1d6a7c6f4683f6223a616f40c42"}]},{"sha":"3a2de1ebb707386dd1d6bc2f2ba5043effb1bf44","node_id":"MDY6Q29tbWl0MTU3NTk1NjozYTJkZTFlYmI3MDczODZkZDFkNmJjMmYyYmE1MDQzZWZmYjFiZjQ0","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-27T09:20:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-09-27T09:20:49Z"},"message":"BOOKKEEPER-683: TestSubAfterCloseSub fails on 4.2 (jiannan via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1526839 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"211c92d85c84abce1dceb8d5811bfdae5328acac","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/211c92d85c84abce1dceb8d5811bfdae5328acac"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/3a2de1ebb707386dd1d6bc2f2ba5043effb1bf44","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/3a2de1ebb707386dd1d6bc2f2ba5043effb1bf44","html_url":"https://github.com/apache/bookkeeper/commit/3a2de1ebb707386dd1d6bc2f2ba5043effb1bf44","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/3a2de1ebb707386dd1d6bc2f2ba5043effb1bf44/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c35f64d29f7f0a07e23892f8062c78f1f54e71bf","url":"https://api.github.com/repos/apache/bookkeeper/commits/c35f64d29f7f0a07e23892f8062c78f1f54e71bf","html_url":"https://github.com/apache/bookkeeper/commit/c35f64d29f7f0a07e23892f8062c78f1f54e71bf"}]},{"sha":"7c72f2f336342f6542ecec6c9c31cf707ed4b6bc","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3YzcyZjJmMzM2MzQyZjY1NDJlY2VjNmM5YzMxY2Y3MDdlZDRiNmJj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T09:52:26Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T09:52:26Z"},"message":"BOOKKEEPER-685: Race in compaction algorithm from BOOKKEEPER-664 (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1528399 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f049e4740c2a2618639c3d0c1d8f4c68c8e281be","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f049e4740c2a2618639c3d0c1d8f4c68c8e281be"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/7c72f2f336342f6542ecec6c9c31cf707ed4b6bc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/7c72f2f336342f6542ecec6c9c31cf707ed4b6bc","html_url":"https://github.com/apache/bookkeeper/commit/7c72f2f336342f6542ecec6c9c31cf707ed4b6bc","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/7c72f2f336342f6542ecec6c9c31cf707ed4b6bc/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"3a2de1ebb707386dd1d6bc2f2ba5043effb1bf44","url":"https://api.github.com/repos/apache/bookkeeper/commits/3a2de1ebb707386dd1d6bc2f2ba5043effb1bf44","html_url":"https://github.com/apache/bookkeeper/commit/3a2de1ebb707386dd1d6bc2f2ba5043effb1bf44"}]},{"sha":"aecf2d23887c437c445958ed626d571d502b165c","node_id":"MDY6Q29tbWl0MTU3NTk1NjphZWNmMmQyMzg4N2M0MzdjNDQ1OTU4ZWQ2MjZkNTcxZDUwMmIxNjVj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T13:34:52Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T13:34:52Z"},"message":"Update release date in CHANGES.txt\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1528468 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"44df4f9b9ae3ac4f43b7c9f3d967bb4b02678f68","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/44df4f9b9ae3ac4f43b7c9f3d967bb4b02678f68"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/aecf2d23887c437c445958ed626d571d502b165c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/aecf2d23887c437c445958ed626d571d502b165c","html_url":"https://github.com/apache/bookkeeper/commit/aecf2d23887c437c445958ed626d571d502b165c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/aecf2d23887c437c445958ed626d571d502b165c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7c72f2f336342f6542ecec6c9c31cf707ed4b6bc","url":"https://api.github.com/repos/apache/bookkeeper/commits/7c72f2f336342f6542ecec6c9c31cf707ed4b6bc","html_url":"https://github.com/apache/bookkeeper/commit/7c72f2f336342f6542ecec6c9c31cf707ed4b6bc"}]},{"sha":"16c7a1c3da07952a329f75fea95f43563d6173f0","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxNmM3YTFjM2RhMDc5NTJhMzI5Zjc1ZmVhOTVmNDM1NjNkNjE3M2Yw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T13:37:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T13:37:05Z"},"message":"BookKeeper 4.2.2 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.2.2@1528470 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"44df4f9b9ae3ac4f43b7c9f3d967bb4b02678f68","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/44df4f9b9ae3ac4f43b7c9f3d967bb4b02678f68"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/16c7a1c3da07952a329f75fea95f43563d6173f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/16c7a1c3da07952a329f75fea95f43563d6173f0","html_url":"https://github.com/apache/bookkeeper/commit/16c7a1c3da07952a329f75fea95f43563d6173f0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/16c7a1c3da07952a329f75fea95f43563d6173f0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"44c9b1db6eb4142ef91dac22bc43499bc83b863d","url":"https://api.github.com/repos/apache/bookkeeper/commits/44c9b1db6eb4142ef91dac22bc43499bc83b863d","html_url":"https://github.com/apache/bookkeeper/commit/44c9b1db6eb4142ef91dac22bc43499bc83b863d"},{"sha":"aecf2d23887c437c445958ed626d571d502b165c","url":"https://api.github.com/repos/apache/bookkeeper/commits/aecf2d23887c437c445958ed626d571d502b165c","html_url":"https://github.com/apache/bookkeeper/commit/aecf2d23887c437c445958ed626d571d502b165c"}]}],"files":[{"sha":"83c5f044990fb6afe9b7f13a48b0d368ec3cde35","filename":"CHANGES.txt","status":"modified","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -1,3 +1,117 @@\n+Release 4.2.2 - 2013-10-02\n+\n+  Backward compatible changes:\n+\n+    BUGFIXES:\n+\n+      BOOKKEEPER-635: jenkins build should highlight which lines of the patch cause raw analysis errors (ivank via sijie)\n+\n+      BOOKKEEPER-684: ZK logging is oververbose, can cause oom in tests (ivank via fpj)\n+\n+      bookkeeper-server:\n+\n+        BOOKKEEPER-559: Fix occasional failure in AuditorBookieTest (ivank)\n+\n+        BOOKKEEPER-556: BookieServerMXBean#getServerState makes no sense (ivank)\n+\n+        BOOKKEEPER-583: Read from a ReadOnlyBookie fails if index fileinfo is not in ledger cache (vinay via sijie)\n+\n+        BOOKKEEPER-585: Auditor logs noisily when a ledger has been deleted (ivank)\n+\n+        BOOKKEEPER-581: Ledger recovery doesn't work correctly when recovery adds force changing ensembles. (sijie via ivank)\n+\n+        BOOKKEEPER-595: Crash of inprocess autorecovery daemon should not take down the bookie (ivank)\n+\n+        BOOKKEEPER-596: Ledgers are gc'ed by mistake in MSLedgerManagerFactory. (sijie via ivank)\n+\n+        BOOKKEEPER-584: Data loss when ledger metadata is overwritten (sijie via ivank)\n+\n+        BOOKKEEPER-577: BookieFailureTest uses sync/wait()/notify() incorrectly (ivank)\n+\n+\tBOOKKEEPER-626: BOOKIE_EXTRA_OPTS are added twice (vinay via fpj)\n+\n+        BOOKKEEPER-619: Bookie should not create local cookie files if zookeeper is uninitialized (ivank)\n+\n+        BOOKKEEPER-313: Bookkeeper shutdown call from Bookie thread is not shutting down server (vinay via ivank)\n+\n+        BOOKKEEPER-623: LedgerChecker should avoid segments of closed ledger with higher start entryId than closed entry. (vinay via sijie)\n+\n+        BOOKKEEPER-620: PerChannelBookieClient race during channel disconnect (ivank)\n+\n+        BOOKKEEPER-637: NoSuchEntry exception when reading an entry from a bookie should not print ERROR level message (mmerli via ivank)\n+\n+        BOOKKEEPER-257: Ability to list all ledgers (fpj via ivank)\n+\n+        BOOKKEEPER-636: Latest txn logs might be deleted in a race condition which is not recoverable if BK goes down before next txn log created. (vinay via ivank)\n+\n+        BOOKKEEPER-621: NPE in FileInfo.moveToNewLocation (ivank via sijie)\n+\n+        BOOKKEEPER-646: BookieShell readjournal command is throwing BufferUnderflowException (Rakesh via sijie)\n+\n+        BOOKKEEPER-652: Logger class name is wrong in LedgerCacheImpl.java (Rakesh via sijie)\n+\n+        BOOKKEEPER-625: On OutOfMemoryError in NIOServerFactory thread bookie should shutdown (vinay via ivank)\n+\n+        BOOKKEEPER-642: Bookie returns incorrect exitcode, ExitCode.ZK_REG_FAIL is getting overridden (Rakesh via ivank)\n+\n+        BOOKKEEPER-663: HierarchicalLedgerManager iterator is missing some ranges and the last ledger in the range (mmerli via ivank)\n+\n+        BOOKKEEPER-604: Ledger storage can log an exception if GC happens concurrently. (sijie & ivank via ivank)\n+\n+        BOOKKEEPER-667: Client write will fail with BadMetadataVersion in case of multiple Bookie failures with AutoRecovery enabled (sijie via ivank)\n+\n+        BOOKKEEPER-668: Race between PerChannelBookieClient#channelDisconnected() and disconnect() calls can make clients hang while add/reading entries in case of multiple bookie failures (sijie & ivank via ivank)\n+\n+        BOOKKEEPER-624: Reduce logs generated by ReplicationWorker (vinay via ivank)\n+\n+        BOOKKEEPER-660: Logs too noisy on NIOServerFactory when client drops a connection (mmerli via ivank)\n+\n+        BOOKKEEPER-632: AutoRecovery should consider read only bookies (vinay via ivank)\n+\n+        BOOKKEEPER-649: Race condition in sync ZKUtils.createFullPathOptimistic() (ivank)\n+\n+        BOOKKEEPER-580: improve close logic (sijie & ivank via ivank)\n+\n+        BOOKKEEPER-664: Compaction increases latency on journal writes (ivank & sijie via ivank)\n+\n+        BOOKKEEPER-679: Bookie should exit with non-zero if NIOServer crashes with Error (ivank)\n+\n+        BOOKKEEPER-669: Race condition in ledger deletion and eviction from cache (rakeshr via ivank)\n+\n+        BOOKKEEPER-446: BookKeeper.createLedger(..) should not mask the error with ZKException (sijie via ivank)\n+\n+        BOOKKEEPER-675: Log noise fixup before cutting 4.2.2 (ivank)\n+\n+        BOOKKEEPER-627: LedgerDirsMonitor is missing thread name (rakeshr via ivank)\n+\n+        BOOKKEEPER-685: Race in compaction algorithm from BOOKKEEPER-664 (ivank)\n+\n+      hedwig-server:\n+\n+        BOOKKEEPER-579: TestSubAfterCloseSub was put in a wrong package (sijie via ivank)\n+\n+\tBOOKKEEPER-601: readahead cache size isn't updated correctly (sijie via fpj)\n+\n+        BOOKKEEPER-607: Filtered Messages Require ACK from Client Causes User Being Throttled Incorrectly Forever (sijie via ivank)\n+\n+        BOOKKEEPER-683: TestSubAfterCloseSub fails on 4.2 (jiannan via ivank)\n+\n+      hedwig-client:\n+\n+        BOOKKEEPER-598: Fails to compile - RESUBSCRIBE_EXCEPTION conflict (Matthew Farrellee via ivank)\n+\n+        BOOKKEEPER-603: Support Boost 1.53 for Hedwig Cpp Client (jiannan via ivank)\n+\n+\tBOOKKEEPER-600: shouldClaim flag isn't cleared for hedwig multiplex java client (sijie via fpj)\n+\n+    NEW FEATURE:\n+\n+      BOOKKEEPER-562: Ability to tell if a ledger is closed or not (fpj via ivank)\n+\n+\t\n+    IMPROVEMENT:\n+      BOOKKEEPER-618: Better resolution of bookie address (ivank via fpj)\n+\n Release 4.2.1 - 2013-02-19\n \n   Backward compatible changes:"},{"sha":"b3bfd01af87e735b2aa6abdfe5c490160f4ea8be","filename":"bin/raw-check-patch","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bin/raw-check-patch","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bin/raw-check-patch","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/raw-check-patch?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -0,0 +1,47 @@\n+#!/usr/bin/env bash\n+#\n+#   Licensed under the Apache License, Version 2.0 (the \"License\");\n+#   you may not use this file except in compliance with the License.\n+#   You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#   Unless required by applicable law or agreed to in writing, software\n+#   distributed under the License is distributed on an \"AS IS\" BASIS,\n+#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#   See the License for the specific language governing permissions and\n+#   limitations under the License.\n+\n+printTrailingSpaces() {\n+    PATCH=$1\n+    cat $PATCH | awk '/^+/ { if (/ $/) { print \"\\tL\" NR \":\" $0} }'\n+}\n+\n+printTabs() {\n+    PATCH=$1\n+    cat $PATCH | awk '/^+/ { if (/\\t/) { print \"\\tL\" NR \":\" $0 } }'\n+}\n+\n+printAuthors() {\n+    PATCH=$1\n+    cat $PATCH | awk '/^+/ { L=tolower($0); if (L ~ /.*\\*.* @author/) { print \"\\tL\" NR \":\" $0 } }'\n+}\n+\n+printLongLines() {\n+    PATCH=$1\n+    cat $PATCH | awk '/^+/ { if ( length > 121 ) { print \"\\tL\" NR \":\" $0 } }'\n+}\n+\n+if [[ \"X$(basename -- \"$0\")\" = \"Xraw-check-patch\" ]]; then\n+    echo Trailing spaces\n+    printTrailingSpaces $1\n+    echo\n+    echo Tabs\n+    printTabs $1\n+    echo\n+    echo Authors\n+    printAuthors $1\n+    echo\n+    echo Long lines\n+    printLongLines $1\n+fi"},{"sha":"52c0b2f50006fb0e016172502ad84fd668d9c16b","filename":"bin/test-patch-05-patch-raw-analysis","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bin/test-patch-05-patch-raw-analysis","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bin/test-patch-05-patch-raw-analysis","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-05-patch-raw-analysis?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -11,6 +11,7 @@\n #   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n #   See the License for the specific language governing permissions and\n #   limitations under the License.\n+source $(dirname \"$0\")/raw-check-patch\n \n if [ \"${TESTPATCHDEBUG}\" == \"true\" ] ; then\n     set -x\n@@ -74,37 +75,48 @@ parseArgs() {\n }\n ###############################################################################\n checkNoAuthors() {\n-    authorTags=`grep \"^+ \" ${PATCHFILE} | grep -c -i -e \".*\\*.* @author\"`\n+    TMPFILE=$TEMPDIR/$TASKNAME-authors.txt\n+    printAuthors $PATCHFILE > $TMPFILE\n+    authorTags=$(wc -l $TMPFILE | awk '{print $1}')\n     if [[ ${authorTags} != 0 ]] ; then\n         REPORT+=(\"{color:red}-1{color} the patch seems to contain ${authorTags} line(s) with @author tags\")\n+        REPORT+=(\"$(cat $TMPFILE)\")\n     else\n         REPORT+=(\"{color:green}+1{color} the patch does not introduce any @author tags\")\n     fi\n }\n ###############################################################################\n checkNoTabs() {\n-    tabs=`grep \"^+ \" ${PATCHFILE} | grep -c -P \"\\t\"`\n+    TMPFILE=$TEMPDIR/$TASKNAME-tabs.txt\n+    printTabs $PATCHFILE > $TMPFILE\n+    tabs=$(wc -l $TMPFILE | awk '{print $1}')\n     if [[ ${tabs} != 0 ]] ; then\n         REPORT+=(\"{color:red}-1{color} the patch contains ${tabs} line(s) with tabs\")\n+        REPORT+=(\"$(cat $TMPFILE)\")\n     else\n         REPORT+=(\"{color:green}+1{color} the patch does not introduce any tabs\")\n     fi\n }\n ###############################################################################\n checkNoTrailingSpaces() {\n-    trailingSpaces=`grep \"^+ \" ${PATCHFILE} | grep -c -e \" $\"`\n+    TMPFILE=$TEMPDIR/$TASKNAME-trailingspaces.txt\n+    printTrailingSpaces $PATCHFILE > $TMPFILE\n+    trailingSpaces=$(wc -l $TMPFILE | awk '{print $1}')\n     if [[ ${trailingSpaces} != 0 ]] ; then\n         REPORT+=(\"{color:red}-1{color} the patch contains ${trailingSpaces} line(s) with trailing spaces\")\n+        REPORT+=(\"$(cat $TMPFILE)\")\n     else\n         REPORT+=(\"{color:green}+1{color} the patch does not introduce any trailing spaces\")\n     fi\n }\n ###############################################################################\n checkLinesLength() {\n-  # We check for > 120 to account for the \"+\" sign\n-    longLines=`grep \"^+ \" ${PATCHFILE} | awk 'BEGIN{count=0}{if ( length > 121 ) { count=count+1} }END{ print count}'`\n+    TMPFILE=$TEMPDIR/$TASKNAME-trailingspaces.txt\n+    printLongLines $PATCHFILE > $TMPFILE\n+    longLines=$(wc -l $TMPFILE | awk '{print $1}')\n     if [[ ${longLines} != 0 ]] ; then\n         REPORT+=(\"{color:red}-1{color} the patch contains ${longLines} line(s) longer than 120 characters\")\n+        REPORT+=(\"$(cat $TMPFILE)\")\n     else\n         REPORT+=(\"{color:green}+1{color} the patch does not introduce any line longer than 120\")\n     fi"},{"sha":"891f6ef275f4ac2ebd8c2c566f1f6160cbe7a28e","filename":"bookkeeper-benchmark/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-benchmark/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-benchmark/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-benchmark</artifactId>"},{"sha":"f7870fb52ec95579feb9d4b57c1feee7cb9c47ac","filename":"bookkeeper-benchmark/src/test/resources/log4j.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-benchmark/src/test/resources/log4j.properties","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-benchmark/src/test/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/test/resources/log4j.properties?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -33,6 +33,7 @@ log4j.rootLogger=INFO, CONSOLE\n \n # Example with rolling log file and tracing\n #log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n+log4j.logger.org.apache.zookeeper=ERROR\n \n #\n # Log INFO level and above messages to the console"},{"sha":"1cb08daf141e40e6c8c196655fb0bd7d7aabce1b","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -148,7 +148,7 @@ BOOKIE_CLASSPATH=\"$BOOKIE_JAR:$BOOKIE_CLASSPATH:$BOOKIE_EXTRA_CLASSPATH\"\n BOOKIE_CLASSPATH=\"`dirname $BOOKIE_LOG_CONF`:$BOOKIE_CLASSPATH\"\n OPTS=\"$OPTS -Dlog4j.configuration=`basename $BOOKIE_LOG_CONF`\"\n \n-OPTS=\"-cp $BOOKIE_CLASSPATH $OPTS $BOOKIE_EXTRA_OPTS\"\n+OPTS=\"-cp $BOOKIE_CLASSPATH $OPTS\"\n \n OPTS=\"$OPTS $BOOKIE_EXTRA_OPTS\"\n "},{"sha":"fd3ebd66a520736df1b4540f9ccd7c0c222618a6","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/conf/bk_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/conf/bk_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bk_server.conf?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -25,6 +25,23 @@\n # Port that bookie server listen on\n bookiePort=3181\n \n+# Set the network interface that the bookie should listen on.\n+# If not set, the bookie will listen on all interfaces.\n+#listeningInterface=eth0\n+\n+# Whether the bookie allowed to use a loopback interface as its primary\n+# interface(i.e. the interface it uses to establish its identity)?\n+# By default, loopback interfaces are not allowed as the primary\n+# interface.\n+# Using a loopback interface as the primary interface usually indicates\n+# a configuration error. For example, its fairly common in some VPS setups\n+# to not configure a hostname, or to have the hostname resolve to\n+# 127.0.0.1. If this is the case, then all bookies in the cluster will\n+# establish their identities as 127.0.0.1:3181, and only one will be able\n+# to join the cluster. For VPSs configured like this, you should explicitly\n+# set the listening interface.\n+#allowLoopback=false\n+\n # Directory Bookkeeper outputs its write ahead log\n journalDirectory=/tmp/bk-txn\n \n@@ -74,6 +91,19 @@ ledgerDirectories=/tmp/bk-data\n # If it is set to less than zero, the major compaction is disabled. \n # majorCompactionInterval=86400 \n \n+# Set the maximum number of entries which can be compacted without flushing.\n+# When compacting, the entries are written to the entrylog and the new offsets\n+# are cached in memory. Once the entrylog is flushed the index is updated with\n+# the new offsets. This parameter controls the number of entries added to the\n+# entrylog before a flush is forced. A higher value for this parameter means\n+# more memory will be used for offsets. Each offset consists of 3 longs.\n+# This parameter should _not_ be modified unless you know what you're doing.\n+# The default is 100,000.\n+#compactionMaxOutstandingRequests=100000\n+\n+# Set the rate at which compaction will readd entries. The unit is adds per second.\n+#compactionRate=1000\n+\n # Max file size of journal file, in mega bytes\n # A new journal file will be created when the old one reaches the file size limitation\n #"},{"sha":"86434e3842264e0b9d0c8e9f6e7db438fcb055ab","filename":"bookkeeper-server/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-server</artifactId>"},{"sha":"53c2db03466c7cb61fb34fb220b2a3cd5f64a72b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","status":"modified","additions":57,"deletions":57,"changes":114,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Bookie.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -25,7 +25,6 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.FilenameFilter;\n-import java.net.InetAddress;\n import java.net.InetSocketAddress;\n import java.net.UnknownHostException;\n import java.nio.ByteBuffer;\n@@ -42,20 +41,19 @@\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.bookie.BookieException;\n-import org.apache.bookkeeper.bookie.GarbageCollectorThread.SafeEntryAdder;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.LedgerDirsListener;\n import org.apache.bookkeeper.bookie.LedgerDirsManager.NoWritableLedgerDirException;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.jmx.BKMBeanInfo;\n import org.apache.bookkeeper.jmx.BKMBeanRegistry;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.IOUtils;\n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.net.DNS;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.commons.io.FileUtils;\n import org.slf4j.Logger;\n@@ -479,19 +477,37 @@ private void checkEnvironment(ZooKeeper zk) throws BookieException, IOException\n      */\n     public static InetSocketAddress getBookieAddress(ServerConfiguration conf)\n             throws UnknownHostException {\n-        return new InetSocketAddress(InetAddress.getLocalHost()\n-                .getHostAddress(), conf.getBookiePort());\n+        String iface = conf.getListeningInterface();\n+        if (iface == null) {\n+            iface = \"default\";\n+        }\n+        InetSocketAddress addr = new InetSocketAddress(\n+                DNS.getDefaultHost(iface),\n+                conf.getBookiePort());\n+        if (addr.getAddress().isLoopbackAddress()\n+            && !conf.getAllowLoopback()) {\n+            throw new UnknownHostException(\"Trying to listen on loopback address, \"\n+                    + addr + \" but this is forbidden by default \"\n+                    + \"(see ServerConfiguration#getAllowLoopback())\");\n+        }\n+        return addr;\n     }\n \n     private String getInstanceId(ZooKeeper zk) throws KeeperException,\n             InterruptedException {\n         String instanceId = null;\n+        if (zk.exists(conf.getZkLedgersRootPath(), null) == null) {\n+            LOG.error(\"BookKeeper metadata doesn't exist in zookeeper. \"\n+                      + \"Has the cluster been initialized? \"\n+                      + \"Try running bin/bookkeeper shell metaformat\");\n+            throw new KeeperException.NoNodeException(\"BookKeeper metadata\");\n+        }\n         try {\n             byte[] data = zk.getData(conf.getZkLedgersRootPath() + \"/\"\n                     + BookKeeperConstants.INSTANCEID, false, null);\n             instanceId = new String(data);\n         } catch (KeeperException.NoNodeException e) {\n-            LOG.warn(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n+            LOG.info(\"INSTANCEID not exists in zookeeper. Not considering it for data verification\");\n         }\n         return instanceId;\n     }\n@@ -528,8 +544,7 @@ public Bookie(ServerConfiguration conf)\n         ledgerManager = ledgerManagerFactory.newLedgerManager();\n         syncThread = new SyncThread(conf);\n         ledgerStorage = new InterleavedLedgerStorage(conf, ledgerManager,\n-                                                     ledgerDirsManager,\n-                                                     new BookieSafeEntryAdder());\n+                                                     ledgerDirsManager);\n         handles = new HandleFactoryImpl(ledgerStorage);\n         // instantiate the journal\n         journal = new Journal(conf, ledgerDirsManager);\n@@ -539,8 +554,7 @@ public Bookie(ServerConfiguration conf)\n     }\n \n     private String getMyId() throws UnknownHostException {\n-        return InetAddress.getLocalHost().getHostAddress() + \":\"\n-                + conf.getBookiePort();\n+        return StringUtils.addrToString(Bookie.getBookieAddress(conf));\n     }\n \n     void readJournal() throws IOException, BookieException {\n@@ -610,6 +624,7 @@ synchronized public void start() {\n             shutdown(ExitCode.BOOKIE_EXCEPTION);\n             return;\n         }\n+        LOG.info(\"Finished reading journal, starting bookie\");\n         // start bookie thread\n         super.start();\n \n@@ -785,6 +800,10 @@ public void process(WatchedEvent event) {\n      */\n     @VisibleForTesting\n     public void transitionToReadOnlyMode() {\n+        if (shuttingdown == true) {\n+            return;\n+        }\n+\n         if (!readOnly.compareAndSet(false, true)) {\n             return;\n         }\n@@ -904,19 +923,18 @@ public void run() {\n     // Triggering the Bookie shutdown in its own thread,\n     // because shutdown can be called from sync thread which would be\n     // interrupted by shutdown call.\n+    AtomicBoolean shutdownTriggered = new AtomicBoolean(false);\n     void triggerBookieShutdown(final int exitCode) {\n-        Thread shutdownThread = new Thread() {\n+        if (!shutdownTriggered.compareAndSet(false, true)) {\n+            return;\n+        }\n+        LOG.info(\"Triggering shutdown of Bookie-{} with exitCode {}\",\n+                 conf.getBookiePort(), exitCode);\n+        new Thread(\"BookieShutdownTrigger\") {\n             public void run() {\n                 Bookie.this.shutdown(exitCode);\n             }\n-        };\n-        shutdownThread.start();\n-        try {\n-            shutdownThread.join();\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n-            LOG.debug(\"InterruptedException while waiting for shutdown. Not a problem!!\");\n-        }\n+        }.start();\n     }\n \n     // provided a public shutdown method for other caller\n@@ -931,16 +949,12 @@ synchronized int shutdown(int exitCode) {\n         try {\n             if (running) { // avoid shutdown twice\n                 // the exitCode only set when first shutdown usually due to exception found\n+                LOG.info(\"Shutting down Bookie-{} with exitCode {}\",\n+                         conf.getBookiePort(), exitCode);\n                 this.exitCode = exitCode;\n                 // mark bookie as in shutting down progress\n                 shuttingdown = true;\n \n-                // Shutdown the ZK client\n-                if(zk != null) zk.close();\n-\n-                //Shutdown disk checker\n-                ledgerDirsManager.shutdown();\n-\n                 // Shutdown journal\n                 journal.shutdown();\n                 this.join();\n@@ -956,7 +970,15 @@ synchronized int shutdown(int exitCode) {\n                 } catch (IOException ie) {\n                     LOG.error(\"Failed to close active ledger manager : \", ie);\n                 }\n-                // setting running to false here, so watch thread in bookie server know it only after bookie shut down\n+\n+                //Shutdown disk checker\n+                ledgerDirsManager.shutdown();\n+\n+                // Shutdown the ZK client\n+                if(zk != null) zk.close();\n+\n+                // setting running to false here, so watch thread\n+                // in bookie server know it only after bookie shut down\n                 running = false;\n             }\n         } catch (InterruptedException ie) {\n@@ -1185,37 +1207,6 @@ private static boolean cleanDir(File dir) {\n         return true;\n     }\n \n-    private class BookieSafeEntryAdder implements SafeEntryAdder {\n-        @Override\n-        public void safeAddEntry(final long ledgerId, final ByteBuffer buffer,\n-                                 final GenericCallback<Void> cb) {\n-            journal.logAddEntry(buffer, new WriteCallback() {\n-                    @Override\n-                    public void writeComplete(int rc, long ledgerId2, long entryId,\n-                                              InetSocketAddress addr, Object ctx) {\n-                        if (rc != BookieException.Code.OK) {\n-                            LOG.error(\"Error rewriting to journal (ledger {}, entry {})\", ledgerId2, entryId);\n-                            cb.operationComplete(rc, null);\n-                            return;\n-                        }\n-                        try {\n-                            addEntryByLedgerId(ledgerId, buffer);\n-                            cb.operationComplete(rc, null);\n-                        } catch (IOException ioe) {\n-                            LOG.error(\"Error adding to ledger storage (ledger \" + ledgerId2\n-                                      + \", entry \" + entryId + \")\", ioe);\n-                            // couldn't add to ledger storage\n-                            cb.operationComplete(BookieException.Code.IllegalOpException, null);\n-                        } catch (BookieException bke) {\n-                            LOG.error(\"Bookie error adding to ledger storage (ledger \" + ledgerId2\n-                                      + \", entry \" + entryId + \")\", bke);\n-                            // couldn't add to ledger storage\n-                            cb.operationComplete(bke.getCode(), null);\n-                        }\n-                    }\n-                }, null);\n-        }\n-    }\n     /**\n      * @param args\n      * @throws IOException\n@@ -1240,4 +1231,13 @@ public static void main(String[] args)\n         long end = MathUtils.now();\n         System.out.println(\"Took \" + (end-start) + \"ms\");\n     }\n+\n+    /**\n+     * Returns exit code - cause of failure\n+     *\n+     * @return {@link ExitCode}\n+     */\n+    public int getExitCode() {\n+        return exitCode;\n+    }\n }"},{"sha":"25983a6343f371391bf8ba2fcf715b9644f7e9f6","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -895,6 +895,12 @@ private void formatEntry(long pos, ByteBuffer recBuff, boolean printMsg) {\n             System.out.println();\n             return;\n         }\n+        if (entryId == Bookie.METAENTRY_ID_FENCE_KEY) {\n+            System.out.println(\"Type:           META\");\n+            System.out.println(\"Fenced\");\n+            System.out.println();\n+            return;\n+        }\n         // process a data entry\n         long lastAddConfirmed = recBuff.getLong();\n         System.out.println(\"Type:           DATA\");"},{"sha":"af8b34d148ebd2a16083ff72d9ffceffbb3dabba","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/EntryLogger.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -40,6 +40,7 @@\n import java.util.Map.Entry;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.CopyOnWriteArrayList;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -69,6 +70,11 @@\n      */\n     final long logSizeLimit;\n     private volatile BufferedChannel logChannel;\n+    private final CopyOnWriteArrayList<EntryLogListener> listeners\n+        = new CopyOnWriteArrayList<EntryLogListener>();\n+    // this indicates that a write has happened since the last flush\n+    private volatile boolean somethingWritten = false;\n+\n     /**\n      * The 1K block at the head of the entry logger file\n      * that contains the fingerprint and (future) meta-data\n@@ -107,6 +113,16 @@\n         public void process(long ledgerId, long offset, ByteBuffer entry) throws IOException;\n     }\n \n+    /**\n+     * Entry Log Listener\n+     */\n+    static interface EntryLogListener {\n+        /**\n+         * Callback when entry log is flushed.\n+         */\n+        public void onEntryLogFlushed();\n+    }\n+\n     /**\n      * Create an EntryLogger that stores it's log files in the given\n      * directories\n@@ -140,6 +156,12 @@ public EntryLogger(ServerConfiguration conf,\n         initialize();\n     }\n \n+    void addListener(EntryLogListener listener) {\n+        if (null != listener) {\n+            listeners.add(listener);\n+        }\n+    }\n+\n     /**\n      * Maps entry log files to open channels.\n      */\n@@ -326,7 +348,16 @@ synchronized void flush() throws IOException {\n         if (logChannel != null) {\n             logChannel.flush(true);\n         }\n+        somethingWritten = false;\n+        for (EntryLogListener listener: listeners) {\n+            listener.onEntryLogFlushed();\n+        }\n     }\n+\n+    boolean isFlushRequired() {\n+        return somethingWritten;\n+    }\n+\n     synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n         // Create new log if logSizeLimit reached or current disk is full\n         boolean createNewLog = shouldCreateNewEntryLog.get();\n@@ -347,6 +378,8 @@ synchronized long addEntry(long ledger, ByteBuffer entry) throws IOException {\n         logChannel.write(entry);\n         //logChannel.flush(false);\n \n+        somethingWritten = true;\n+\n         return (logId << 32L) | pos;\n     }\n "},{"sha":"1a0e8eb9c3dce677f0ec3237ec00c001909f7a97","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","status":"modified","additions":39,"deletions":34,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/FileInfo.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -224,6 +224,9 @@ synchronized public int read(ByteBuffer bb, long position) throws IOException {\n \n     private int readAbsolute(ByteBuffer bb, long start) throws IOException {\n         checkOpen(false);\n+        if (fc == null) {\n+            return 0;\n+        }\n         int total = 0;\n         while(bb.remaining() > 0) {\n             int rc = fc.read(bb, start);\n@@ -282,47 +285,49 @@ synchronized public long write(ByteBuffer[] buffs, long position) throws IOExcep\n      */\n     public synchronized void moveToNewLocation(File newFile, long size) throws IOException {\n         checkOpen(false);\n-        if (size > fc.size()) {\n-            size = fc.size();\n-        }\n-        File rlocFile = new File(newFile.getParentFile(), newFile.getName() + LedgerCacheImpl.RLOC);\n-        if (!rlocFile.exists()) {\n-            checkParents(rlocFile);\n-            if (!rlocFile.createNewFile()) {\n-                throw new IOException(\"Creating new cache index file \" + rlocFile + \" failed \");\n+        if (fc != null) {\n+            if (size > fc.size()) {\n+                size = fc.size();\n             }\n-        }\n-        // copy contents from old.idx to new.idx.rloc\n-        FileChannel newFc = new RandomAccessFile(rlocFile, \"rw\").getChannel();\n-        try {\n-            long written = 0;\n-            while (written < size) {\n-                long count = fc.transferTo(written, size, newFc);\n-                if (count <= 0) {\n+            File rlocFile = new File(newFile.getParentFile(), newFile.getName() + LedgerCacheImpl.RLOC);\n+            if (!rlocFile.exists()) {\n+                checkParents(rlocFile);\n+                if (!rlocFile.createNewFile()) {\n+                    throw new IOException(\"Creating new cache index file \" + rlocFile + \" failed \");\n+                }\n+            }\n+            // copy contents from old.idx to new.idx.rloc\n+            FileChannel newFc = new RandomAccessFile(rlocFile, \"rw\").getChannel();\n+            try {\n+                long written = 0;\n+                while (written < size) {\n+                    long count = fc.transferTo(written, size, newFc);\n+                    if (count <= 0) {\n+                        throw new IOException(\"Copying to new location \" + rlocFile + \" failed\");\n+                    }\n+                    written += count;\n+                }\n+                if (written <= 0 && size > 0) {\n                     throw new IOException(\"Copying to new location \" + rlocFile + \" failed\");\n                 }\n-                written += count;\n+            } finally {\n+                newFc.force(true);\n+                newFc.close();\n             }\n-            if (written <= 0 && size > 0) {\n-                throw new IOException(\"Copying to new location \" + rlocFile + \" failed\");\n+            // delete old.idx\n+            fc.close();\n+            if (!delete()) {\n+                LOG.error(\"Failed to delete the previous index file \" + lf);\n+                throw new IOException(\"Failed to delete the previous index file \" + lf);\n             }\n-        } finally {\n-            newFc.force(true);\n-            newFc.close();\n-        }\n-        // delete old.idx\n-        fc.close();\n-        if (!delete()) {\n-            LOG.error(\"Failed to delete the previous index file \" + lf);\n-            throw new IOException(\"Failed to delete the previous index file \" + lf);\n-        }\n \n-        // rename new.idx.rloc to new.idx\n-        if (!rlocFile.renameTo(newFile)) {\n-            LOG.error(\"Failed to rename \" + rlocFile + \" to \" + newFile);\n-            throw new IOException(\"Failed to rename \" + rlocFile + \" to \" + newFile);\n+            // rename new.idx.rloc to new.idx\n+            if (!rlocFile.renameTo(newFile)) {\n+                LOG.error(\"Failed to rename \" + rlocFile + \" to \" + newFile);\n+                throw new IOException(\"Failed to rename \" + rlocFile + \" to \" + newFile);\n+            }\n+            fc = new RandomAccessFile(newFile, mode).getChannel();\n         }\n-        fc = new RandomAccessFile(newFile, mode).getChannel();\n         lf = newFile;\n     }\n "},{"sha":"953fcea946b6d088e8194cd45ca0a5f54a59324d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","status":"modified","additions":113,"deletions":81,"changes":194,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/GarbageCollectorThread.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -30,9 +30,9 @@\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicBoolean;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import com.google.common.util.concurrent.RateLimiter;\n+\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.GarbageCollector.GarbageCleaner;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -48,7 +48,6 @@\n  */\n public class GarbageCollectorThread extends Thread {\n     private static final Logger LOG = LoggerFactory.getLogger(GarbageCollectorThread.class);\n-    private static final int COMPACTION_MAX_OUTSTANDING_REQUESTS = 1000;\n     private static final int SECOND = 1000;\n \n     // Maps entry log files to the set of ledgers that comprise the file and the size usage per ledger\n@@ -69,9 +68,12 @@\n     long lastMinorCompactionTime;\n     long lastMajorCompactionTime;\n \n+    final int maxOutstandingRequests;\n+    final int compactionRate;\n+    final CompactionScannerFactory scannerFactory;\n+\n     // Entry Logger Handle\n     final EntryLogger entryLogger;\n-    final SafeEntryAdder safeEntryAdder;\n \n     // Ledger Cache Handle\n     final LedgerCache ledgerCache;\n@@ -89,77 +91,92 @@\n     final GarbageCollector garbageCollector;\n     final GarbageCleaner garbageCleaner;\n \n+    private static class Offset {\n+        final long ledger;\n+        final long entry;\n+        final long offset;\n \n-    /**\n-     * Interface for adding entries. When the write callback is triggered, the\n-     * entry must be guaranteed to be presisted.\n-     */\n-    interface SafeEntryAdder {\n-        public void safeAddEntry(long ledgerId, ByteBuffer buffer, GenericCallback<Void> cb);\n+        Offset(long ledger, long entry, long offset) {\n+            this.ledger = ledger;\n+            this.entry = entry;\n+            this.offset = offset;\n+        }\n     }\n \n     /**\n      * A scanner wrapper to check whether a ledger is alive in an entry log file\n      */\n-    class CompactionScanner implements EntryLogScanner {\n-        EntryLogMetadata meta;\n-        Object completionLock = new Object();\n-        AtomicInteger outstandingRequests = new AtomicInteger(0);\n-        AtomicBoolean allSuccessful = new AtomicBoolean(true);\n+    class CompactionScannerFactory implements EntryLogger.EntryLogListener {\n+        List<Offset> offsets = new ArrayList<Offset>();\n+\n+        EntryLogScanner newScanner(final EntryLogMetadata meta) {\n+            final RateLimiter rateLimiter = RateLimiter.create(compactionRate);\n+            return new EntryLogScanner() {\n+                @Override\n+                public boolean accept(long ledgerId) {\n+                    return meta.containsLedger(ledgerId);\n+                }\n \n-        public CompactionScanner(EntryLogMetadata meta) {\n-            this.meta = meta;\n-        }\n+                @Override\n+                public void process(final long ledgerId, long offset, ByteBuffer entry)\n+                        throws IOException {\n+                    rateLimiter.acquire();\n+                    synchronized (CompactionScannerFactory.this) {\n+                        if (offsets.size() > maxOutstandingRequests) {\n+                            waitEntrylogFlushed();\n+                        }\n+                        entry.getLong(); // discard ledger id, we already have it\n+                        long entryId = entry.getLong();\n+                        entry.rewind();\n \n-        @Override\n-        public boolean accept(long ledgerId) {\n-            return meta.containsLedger(ledgerId);\n+                        long newoffset = entryLogger.addEntry(ledgerId, entry);\n+                        flushed.set(false);\n+                        offsets.add(new Offset(ledgerId, entryId, newoffset));\n+                    }\n+                }\n+            };\n         }\n \n+        AtomicBoolean flushed = new AtomicBoolean(false);\n+        Object flushLock = new Object();\n+\n         @Override\n-        public void process(final long ledgerId, long offset, ByteBuffer entry)\n-            throws IOException {\n-            if (!allSuccessful.get()) {\n-                return;\n+        public void onEntryLogFlushed() {\n+            synchronized (flushLock) {\n+                flushed.set(true);\n+                flushLock.notifyAll();\n             }\n+        }\n \n-            outstandingRequests.incrementAndGet();\n-            synchronized (completionLock) {\n-                while (outstandingRequests.get() >= COMPACTION_MAX_OUTSTANDING_REQUESTS) {\n-                    try {\n-                        completionLock.wait();\n-                    } catch (InterruptedException ie) {\n-                        LOG.error(\"Interrupted while waiting to re-add entry\", ie);\n-                        Thread.currentThread().interrupt();\n-                        throw new IOException(\"Interrupted while waiting to re-add entry\", ie);\n+        synchronized private void waitEntrylogFlushed() throws IOException {\n+            try {\n+                synchronized (flushLock) {\n+                    while (!flushed.get()\n+                           && entryLogger.isFlushRequired()\n+                           && running) {\n+                        flushLock.wait(1000);\n+                    }\n+                    if (!flushed.get()\n+                        && entryLogger.isFlushRequired()\n+                        && !running) {\n+                        throw new IOException(\"Shutdown before flushed\");\n                     }\n                 }\n+            } catch (InterruptedException ie) {\n+                Thread.currentThread().interrupt();\n+                throw new IOException(\"Interrupted waiting for flush\", ie);\n             }\n-            safeEntryAdder.safeAddEntry(ledgerId, entry, new GenericCallback<Void>() {\n-                    @Override\n-                    public void operationComplete(int rc, Void result) {\n-                        if (rc != BookieException.Code.OK) {\n-                            LOG.error(\"Error {} re-adding entry for ledger {})\",\n-                                      rc, ledgerId);\n-                            allSuccessful.set(false);\n-                        }\n-                        synchronized(completionLock) {\n-                            outstandingRequests.decrementAndGet();\n-                            completionLock.notifyAll();\n-                        }\n-                    }\n-                });\n-        }\n \n-        void awaitComplete() throws InterruptedException, IOException {\n-            synchronized(completionLock) {\n-                while (outstandingRequests.get() > 0) {\n-                    completionLock.wait();\n-                }\n-                if (allSuccessful.get() == false) {\n-                    throw new IOException(\"Couldn't re-add all entries\");\n-                }\n+            for (Offset o : offsets) {\n+                ledgerCache.putEntryOffset(o.ledger, o.entry, o.offset);\n             }\n+            offsets.clear();\n+        }\n+\n+        synchronized void flush() throws IOException {\n+            waitEntrylogFlushed();\n+\n+            ledgerCache.flushLedger(true);\n         }\n     }\n \n@@ -175,17 +192,19 @@ public GarbageCollectorThread(ServerConfiguration conf,\n                                   final LedgerCache ledgerCache,\n                                   EntryLogger entryLogger,\n                                   SnapshotMap<Long, Boolean> activeLedgers,\n-                                  SafeEntryAdder safeEntryAdder,\n                                   LedgerManager ledgerManager)\n         throws IOException {\n         super(\"GarbageCollectorThread\");\n \n         this.ledgerCache = ledgerCache;\n         this.entryLogger = entryLogger;\n         this.activeLedgers = activeLedgers;\n-        this.safeEntryAdder = safeEntryAdder;\n \n         this.gcWaitTime = conf.getGcWaitTime();\n+        this.maxOutstandingRequests = conf.getCompactionMaxOutstandingRequests();\n+        this.compactionRate = conf.getCompactionRate();\n+        this.scannerFactory = new CompactionScannerFactory();\n+        entryLogger.addListener(this.scannerFactory);\n \n         this.garbageCleaner = new GarbageCollector.GarbageCleaner() {\n             @Override\n@@ -353,16 +372,42 @@ public int compare(EntryLogMetadata m1, EntryLogMetadata m2) {\n         List<EntryLogMetadata> logsToCompact = new ArrayList<EntryLogMetadata>();\n         logsToCompact.addAll(entryLogMetaMap.values());\n         Collections.sort(logsToCompact, sizeComparator);\n+        List<Long> toRemove = new ArrayList<Long>();\n+\n         for (EntryLogMetadata meta : logsToCompact) {\n             if (meta.getUsage() >= threshold) {\n                 break;\n             }\n             LOG.debug(\"Compacting entry log {} below threshold {}.\", meta.entryLogId, threshold);\n-            compactEntryLog(meta.entryLogId);\n+            try {\n+                compactEntryLog(scannerFactory, meta);\n+                toRemove.add(meta.entryLogId);\n+            } catch (LedgerDirsManager.NoWritableLedgerDirException nwlde) {\n+                LOG.warn(\"No writable ledger directory available, aborting compaction\", nwlde);\n+                break;\n+            } catch (IOException ioe) {\n+                // if compact entry log throws IOException, we don't want to remove that\n+                // entry log. however, if some entries from that log have been readded\n+                // to the entry log, and the offset updated, it's ok to flush that\n+                LOG.error(\"Error compacting entry log. Log won't be deleted\", ioe);\n+            }\n+\n             if (!running) { // if gc thread is not running, stop compaction\n                 return;\n             }\n         }\n+        try {\n+            // compaction finished, flush any outstanding offsets\n+            scannerFactory.flush();\n+        } catch (IOException ioe) {\n+            LOG.error(\"Cannot flush compacted entries, skip removal\", ioe);\n+            return;\n+        }\n+\n+        // offsets have been flushed, its now safe to remove the old entrylogs\n+        for (Long l : toRemove) {\n+            removeEntryLog(l);\n+        }\n     }\n \n     /**\n@@ -399,13 +444,8 @@ private void removeEntryLog(long entryLogId) {\n      * @param entryLogId\n      *          Entry Log File Id\n      */\n-    protected void compactEntryLog(long entryLogId) {\n-        EntryLogMetadata entryLogMeta = entryLogMetaMap.get(entryLogId);\n-        if (null == entryLogMeta) {\n-            LOG.warn(\"Can't get entry log meta when compacting entry log \" + entryLogId + \".\");\n-            return;\n-        }\n-\n+    protected void compactEntryLog(CompactionScannerFactory scannerFactory,\n+                                   EntryLogMetadata entryLogMeta) throws IOException {\n         // Similar with Sync Thread\n         // try to mark compacting flag to make sure it would not be interrupted\n         // by shutdown during compaction. otherwise it will receive\n@@ -417,19 +457,11 @@ protected void compactEntryLog(long entryLogId) {\n             return;\n         }\n \n-        LOG.info(\"Compacting entry log : \" + entryLogId);\n+        LOG.info(\"Compacting entry log : {}\", entryLogMeta.entryLogId);\n \n         try {\n-            CompactionScanner scanner = new CompactionScanner(entryLogMeta);\n-            entryLogger.scanEntryLog(entryLogId, scanner);\n-            scanner.awaitComplete();\n-            // after moving entries to new entry log, remove this old one\n-            removeEntryLog(entryLogId);\n-        } catch (IOException e) {\n-            LOG.info(\"Premature exception when compacting \" + entryLogId, e);\n-        } catch (InterruptedException ie) {\n-            Thread.currentThread().interrupt();\n-            LOG.warn(\"Interrupted while compacting\", ie);\n+            entryLogger.scanEntryLog(entryLogMeta.entryLogId,\n+                                     scannerFactory.newScanner(entryLogMeta));\n         } finally {\n             // clear compacting flag\n             compacting.set(false);\n@@ -542,7 +574,7 @@ public void process(long ledgerId, long offset, ByteBuffer entry) {\n                 continue;\n             }\n \n-            LOG.info(\"Extracting entry log meta from entryLogId: \" + entryLogId);\n+            LOG.info(\"Extracting entry log meta from entryLogId: {}\", entryLogId);\n \n             try {\n                 // Read through the entry log file and extract the entry log meta\n@@ -570,8 +602,8 @@ static EntryLogMetadata extractMetaFromEntryLog(EntryLogger entryLogger, long en\n         ExtractionScanner scanner = new ExtractionScanner(entryLogMeta);\n         // Read through the entry log file and extract the entry log meta\n         entryLogger.scanEntryLog(entryLogId, scanner);\n-        LOG.info(\"Retrieved entry log meta data entryLogId: \"\n-                 + entryLogId + \", meta: \" + entryLogMeta);\n+        LOG.debug(\"Retrieved entry log meta data entryLogId: {}, meta: {}\",\n+                  entryLogId, entryLogMeta);\n         return entryLogMeta;\n     }\n }"},{"sha":"800e6bb90c78eff85a3194ccbc31cec9381964e4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","status":"modified","additions":5,"deletions":13,"changes":18,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/InterleavedLedgerStorage.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -53,18 +53,14 @@\n     // has lower remaining percentage to reclaim disk space.\n     final GarbageCollectorThread gcThread;\n \n-    // this indicates that a write has happened since the last flush\n-    private volatile boolean somethingWritten = false;\n-\n     InterleavedLedgerStorage(ServerConfiguration conf,\n-                             LedgerManager ledgerManager, LedgerDirsManager ledgerDirsManager,\n-                             GarbageCollectorThread.SafeEntryAdder safeEntryAdder)\n+                             LedgerManager ledgerManager, LedgerDirsManager ledgerDirsManager)\n \t\t\tthrows IOException {\n         activeLedgers = new SnapshotMap<Long, Boolean>();\n         entryLogger = new EntryLogger(conf, ledgerDirsManager);\n         ledgerCache = new LedgerCacheImpl(conf, activeLedgers, ledgerDirsManager);\n         gcThread = new GarbageCollectorThread(conf, ledgerCache, entryLogger,\n-                activeLedgers, safeEntryAdder, ledgerManager);\n+                activeLedgers, ledgerManager);\n     }\n \n     @Override\n@@ -127,8 +123,6 @@ synchronized public long addEntry(ByteBuffer entry) throws IOException {\n          */\n         ledgerCache.putEntryOffset(ledgerId, entryId, pos);\n \n-        somethingWritten = true;\n-\n         return entryId;\n     }\n \n@@ -151,16 +145,14 @@ public ByteBuffer getEntry(long ledgerId, long entryId) throws IOException {\n \n     @Override\n     public boolean isFlushRequired() {\n-        return somethingWritten;\n-    };\n+        return entryLogger.isFlushRequired();\n+    }\n \n     @Override\n     public void flush() throws IOException {\n-\n-        if (!somethingWritten) {\n+        if (!isFlushRequired()) {\n             return;\n         }\n-        somethingWritten = false;\n         boolean flushFailed = false;\n \n         try {"},{"sha":"72f337020c9087dde506a4a658c36f4c9b75588e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/Journal.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -433,6 +433,7 @@ public boolean accept(long journalId) {\n             if(id == markedLogId) {\n                 logPosition = lastLogMark.getTxnLogPosition();\n             }\n+            LOG.info(\"Replaying journal {} from position {}\", id, logPosition);\n             scanJournal(id, logPosition, scanner);\n         }\n     }\n@@ -477,15 +478,19 @@ public void run() {\n         ByteBuffer lenBuff = ByteBuffer.allocate(4);\n         JournalChannel logFile = null;\n         try {\n-            long logId = 0;\n+            List<Long> journalIds = listJournalIds(journalDirectory, null);\n+            // Should not use MathUtils.now(), which use System.nanoTime() and\n+            // could only be used to measure elapsed time.\n+            // http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#nanoTime%28%29\n+            long logId = journalIds.isEmpty() ? System.currentTimeMillis() : journalIds.get(journalIds.size() - 1);\n             BufferedChannel bc = null;\n             long lastFlushPosition = 0;\n \n             QueueEntry qe = null;\n             while (true) {\n                 // new journal file to write\n                 if (null == logFile) {\n-                    logId = MathUtils.now();\n+                    logId = logId + 1;\n                     logFile = new JournalChannel(journalDirectory, logId);\n                     bc = logFile.getBufferedChannel();\n "},{"sha":"e55ba7b417985e77f0371ce9cd0804a510b6a0cc","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/JournalChannel.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -65,6 +65,12 @@\n \n         LOG.info(\"Opening journal {}\", fn);\n         if (!fn.exists()) { // new file, write version\n+            if (!fn.createNewFile()) {\n+                LOG.error(\"Journal file {}, that shouldn't exist, already exists. \"\n+                          + \" is there another bookie process running?\", fn);\n+                throw new IOException(\"File \" + fn\n+                        + \" suddenly appeared, is another bookie process running?\");\n+            }\n             fc = new RandomAccessFile(fn, \"rw\").getChannel();\n             formatVersion = CURRENT_JOURNAL_FORMAT_VERSION;\n "},{"sha":"8e316e64e63d2582fa920f7447ff5d4a3ce5cef9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","status":"modified","additions":24,"deletions":21,"changes":45,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerCacheImpl.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -49,7 +49,7 @@\n  * This class serves two purposes.\n  */\n public class LedgerCacheImpl implements LedgerCache {\n-    private final static Logger LOG = LoggerFactory.getLogger(LedgerDescriptor.class);\n+    private final static Logger LOG = LoggerFactory.getLogger(LedgerCacheImpl.class);\n     private static final String IDX = \".idx\";\n     static final String RLOC = \".rloc\";\n \n@@ -266,9 +266,6 @@ FileInfo getFileInfo(Long ledger, byte masterKey[]) throws IOException {\n                 }\n                 evictFileInfoIfNecessary();\n                 fi = new FileInfo(lf, masterKey);\n-                if (ledgerDirsManager.isDirFull(getLedgerDirForLedger(fi))) {\n-                    moveLedgerIndexFile(ledger, fi);\n-                }\n                 fileInfoCache.put(ledger, fi);\n                 openLedgers.add(ledger);\n             }\n@@ -422,19 +419,25 @@ private void moveLedgerIndexFile(Long l, FileInfo fi) throws NoWritableLedgerDir\n      * @throws IOException\n      */\n     private void flushLedger(long l) throws IOException {\n+        FileInfo fi = null;\n+        try {\n+            fi = getFileInfo(l, null);\n+            flushLedger(l, fi);\n+        } catch (Bookie.NoLedgerException nle) {\n+            // ledger has been deleted\n+        } finally {\n+            if (null != fi) {\n+                fi.release();\n+            }\n+        }\n+    }\n+\n+    private void flushLedger(long l, FileInfo fi) throws IOException {\n         LinkedList<Long> firstEntryList;\n         synchronized(this) {\n             HashMap<Long, LedgerEntryPage> pageMap = pages.get(l);\n             if (pageMap == null || pageMap.isEmpty()) {\n-                FileInfo fi = null;\n-                try {\n-                    fi = getFileInfo(l, null);\n-                    fi.flushHeader();\n-                } finally {\n-                    if (null != fi) {\n-                        fi.release();\n-                    }\n-                }\n+                fi.flushHeader();\n                 return;\n             }\n             firstEntryList = new LinkedList<Long>();\n@@ -456,7 +459,6 @@ private void flushLedger(long l) throws IOException {\n \n         // Now flush all the pages of a ledger\n         List<LedgerEntryPage> entries = new ArrayList<LedgerEntryPage>(firstEntryList.size());\n-        FileInfo fi = null;\n         try {\n             for(Long firstEntry: firstEntryList) {\n                 LedgerEntryPage lep = getLedgerEntryPage(l, firstEntry, true);\n@@ -471,7 +473,6 @@ public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n                     }\n                     });\n             ArrayList<Integer> versions = new ArrayList<Integer>(entries.size());\n-            fi = getFileInfo(l, null);\n             // flush the header if necessary\n             fi.flushHeader();\n             int start = 0;\n@@ -503,9 +504,6 @@ public int compare(LedgerEntryPage o1, LedgerEntryPage o2) {\n             for(LedgerEntryPage lep: entries) {\n                 lep.releasePage();\n             }\n-            if (fi != null) {\n-                fi.release();\n-            }\n         }\n     }\n \n@@ -805,9 +803,14 @@ private void evictFileInfoIfNecessary() throws IOException {\n         synchronized (fileInfoCache) {\n             if (openLedgers.size() > openFileLimit) {\n                 long ledgerToRemove = openLedgers.removeFirst();\n-                LOG.info(\"Ledger {} is evicted from file info cache.\",\n-                         ledgerToRemove);\n-                fileInfoCache.remove(ledgerToRemove).close(true);\n+                // TODO Add a statistic here, we don't care really which\n+                // ledger is evicted, but the rate at which they get evicted\n+                LOG.debug(\"Ledger {} is evicted from file info cache.\",\n+                          ledgerToRemove);\n+                FileInfo fi = fileInfoCache.remove(ledgerToRemove);\n+                if (fi != null) {\n+                    fi.close(true);\n+                }\n             }\n         }\n     }"},{"sha":"a7519f2418904778b879ce045b8e9a1919f178d5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/LedgerDirsManager.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -173,9 +173,10 @@ public void shutdown() {\n      * Thread to monitor the disk space periodically.\n      */\n     private class LedgerDirsMonitor extends Thread {\n-        int interval;\n+        private final int interval;\n \n         public LedgerDirsMonitor(int interval) {\n+            super(\"LedgerDirsMonitorThread\");\n             this.interval = interval;\n         }\n \n@@ -220,6 +221,7 @@ public void run() {\n                     listener.fatalError();\n                 }\n             }\n+            LOG.info(\"LedgerDirsMonitorThread exited!\");\n         }\n     }\n "},{"sha":"d8a87e4b31ac44676599d9227f0e096ec3bdac51","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/ScanAndCompareGarbageCollector.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -72,31 +72,31 @@ public void gc(GarbageCleaner garbageCleaner) {\n                     garbageCleaner.clean(bkLid);\n                 }\n             }\n+            long lastEnd = -1;\n+\n             while(ledgerRangeIterator.hasNext()) {\n                 LedgerRange lRange = ledgerRangeIterator.next();\n                 Map<Long, Boolean> subBkActiveLedgers = null;\n-                Long start = lRange.start();\n+\n+                Long start = lastEnd + 1;\n                 Long end = lRange.end();\n-                if (end != LedgerRange.NOLIMIT) {\n-                    subBkActiveLedgers = bkActiveLedgersSnapshot.subMap(start,\n-                            true, end, true);\n-                } else {\n-                    if (start != LedgerRange.NOLIMIT) {\n-                        subBkActiveLedgers = bkActiveLedgersSnapshot.tailMap(start);\n-                    } else {\n-                        subBkActiveLedgers = bkActiveLedgersSnapshot;\n-                    }\n+                if (!ledgerRangeIterator.hasNext()) {\n+                    end = Long.MAX_VALUE;\n                 }\n-                Set<Long> globalActiveLedgers = lRange.getLedgers();\n-                LOG.debug(\"All active ledgers for hash node {}, Current active ledgers from Bookie for hash node {}\",\n-                        globalActiveLedgers, subBkActiveLedgers.keySet());\n+                subBkActiveLedgers = bkActiveLedgersSnapshot.subMap(\n+                        start, true, end, true);\n+\n+                Set<Long> ledgersInMetadata = lRange.getLedgers();\n+                LOG.debug(\"Active in metadata {}, Active in bookie {}\",\n+                          ledgersInMetadata, subBkActiveLedgers.keySet());\n                 for (Long bkLid : subBkActiveLedgers.keySet()) {\n-                    if (!globalActiveLedgers.contains(bkLid)) {\n+                    if (!ledgersInMetadata.contains(bkLid)) {\n                         // remove it from current active ledger\n                         subBkActiveLedgers.remove(bkLid);\n                         garbageCleaner.clean(bkLid);\n                     }\n                 }\n+                lastEnd = end;\n             }\n         } catch (Exception e) {\n             // ignore exception, collecting garbage next time"},{"sha":"d3f17284bc8efd4b188ef3b5c6c41fbcc6e87192","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/AsyncCallback.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -136,4 +136,16 @@ void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n          */\n         void recoverComplete(int rc, Object ctx);\n     }\n+    \n+    public interface IsClosedCallback {\n+        /**\n+         * Callback definition for isClosed operation\n+         *\n+         * @param rc\n+         *          return code\n+         * @param isClosed\n+         *          true if ledger is closed\n+         */\n+        void isClosedComplete(int rc, boolean isClosed, Object ctx);\n+    }\n }"},{"sha":"ace1409018ee6af17d288a43b325a25b0a1271b1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BKException.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -88,8 +88,12 @@ public static BKException create(int code) {\n             return new BKUnclosedFragmentException();\n         case Code.WriteOnReadOnlyBookieException:\n             return new BKWriteOnReadOnlyBookieException();\n-        default:\n+        case Code.ReplicationException:\n+            return new BKReplicationException();\n+        case Code.IllegalOpException:\n             return new BKIllegalOpException();\n+        default:\n+            return new BKUnexpectedConditionException();\n         }\n     }\n \n@@ -123,6 +127,12 @@ public static BKException create(int code) {\n         int UnauthorizedAccessException = -102;\n         int UnclosedFragmentException = -103;\n         int WriteOnReadOnlyBookieException = -104;\n+\n+        // generic exception code used to propagate in replication pipeline\n+        int ReplicationException = -200;\n+\n+        // For all unexpected error conditions\n+        int UnexpectedConditionException = -999;\n     }\n \n     public void setCode(int code) {\n@@ -181,8 +191,12 @@ public static String getMessage(int code) {\n             return \"Attempting to use an unclosed fragment; This is not safe\";\n         case Code.WriteOnReadOnlyBookieException:\n             return \"Attempting to write on ReadOnly bookie\";\n-        default:\n+        case Code.ReplicationException:\n+            return \"Errors in replication pipeline\";\n+        case Code.IllegalOpException:\n             return \"Invalid operation\";\n+        default:\n+            return \"Unexpected condition\";\n         }\n     }\n \n@@ -228,6 +242,12 @@ public BKIllegalOpException() {\n         }\n     }\n \n+    public static class BKUnexpectedConditionException extends BKException {\n+        public BKUnexpectedConditionException() {\n+            super(Code.UnexpectedConditionException);\n+        }\n+    }\n+\n     public static class BKNotEnoughBookiesException extends BKException {\n         public BKNotEnoughBookiesException() {\n             super(Code.NotEnoughBookiesException);\n@@ -323,4 +343,10 @@ public BKWriteOnReadOnlyBookieException() {\n             super(Code.WriteOnReadOnlyBookieException);\n         }\n     }\n+\n+    public static class BKReplicationException extends BKException {\n+        public BKReplicationException() {\n+            super(Code.ReplicationException);\n+        }\n+    }\n }"},{"sha":"642f8774ef5751b68b2d92499df709546a3f3540","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","status":"modified","additions":70,"deletions":3,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeper.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -29,11 +29,13 @@\n import org.apache.bookkeeper.client.AsyncCallback.CreateCallback;\n import org.apache.bookkeeper.client.AsyncCallback.DeleteCallback;\n import org.apache.bookkeeper.client.AsyncCallback.OpenCallback;\n+import org.apache.bookkeeper.client.AsyncCallback.IsClosedCallback;\n import org.apache.bookkeeper.client.BKException.Code;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.meta.LedgerManager;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.proto.BookieClient;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.ZkUtils;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n@@ -375,9 +377,12 @@ public LedgerHandle createLedger(int ensSize, int writeQuorumSize, int ackQuorum\n          * Wait\n          */\n         counter.block(0);\n-        if (counter.getLh() == null) {\n-            LOG.error(\"ZooKeeper error: \" + counter.getrc());\n-            throw BKException.create(Code.ZKException);\n+        if (counter.getrc() != BKException.Code.OK) {\n+            LOG.error(\"Error while creating ledger : {}\", counter.getrc());\n+            throw BKException.create(counter.getrc());\n+        } else if (counter.getLh() == null) {\n+            LOG.error(\"Unexpected condition : no ledger handle returned for a success ledger creation\");\n+            throw BKException.create(BKException.Code.UnexpectedConditionException);\n         }\n \n         return counter.getLh();\n@@ -555,6 +560,68 @@ public void deleteLedger(long lId) throws InterruptedException, BKException {\n             throw BKException.create(counter.getrc());\n         }\n     }\n+    \n+    /**\n+     * Check asynchronously whether the ledger with identifier <i>lId</i>\n+     * has been closed.\n+     * \n+     * @param lId   ledger identifier\n+     * @param cb    callback method\n+     */\n+    public void asyncIsClosed(long lId, final IsClosedCallback cb, final Object ctx){\n+        ledgerManager.readLedgerMetadata(lId, new GenericCallback<LedgerMetadata>(){\n+            public void operationComplete(int rc, LedgerMetadata lm){\n+                if (rc == BKException.Code.OK) {\n+                    cb.isClosedComplete(rc, lm.isClosed(), ctx);\n+                } else {\n+                    cb.isClosedComplete(rc, false, ctx);\n+                }\n+            }\n+        });\n+    }\n+    \n+    /**\n+     * Check whether the ledger with identifier <i>lId</i>\n+     * has been closed.\n+     * \n+     * @param lId\n+     * @return boolean true if ledger has been closed\n+     * @throws BKException\n+     */\n+    public boolean isClosed(long lId)\n+    throws BKException, InterruptedException {\n+        final class Result {\n+            int rc;\n+            boolean isClosed;\n+            final CountDownLatch notifier = new CountDownLatch(1);\n+        }\n+\n+        final Result result = new Result();\n+\n+        final IsClosedCallback cb = new IsClosedCallback(){\n+            public void isClosedComplete(int rc, boolean isClosed, Object ctx){\n+                    result.isClosed = isClosed;\n+                    result.rc = rc;\n+                    result.notifier.countDown();\n+            }\n+        };\n+\n+        /*\n+         * Call asynchronous version of isClosed\n+         */\n+        asyncIsClosed(lId, cb, null);\n+        \n+        /*\n+         * Wait for callback\n+         */\n+        result.notifier.await();\n+        \n+        if (result.rc != BKException.Code.OK) {\n+            throw BKException.create(result.rc);\n+        }\n+        \n+        return result.isClosed;\n+    }\n \n     /**\n      * Shuts down client."},{"sha":"b971658e9a591b82e39017caddf5fc68d9a34ff2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":99,"deletions":1,"changes":100,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -22,11 +22,15 @@\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n+import java.util.Collection;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n+import java.util.NoSuchElementException;\n import java.util.Random;\n import java.util.UUID;\n \n@@ -35,6 +39,8 @@\n import org.apache.bookkeeper.client.BookKeeper.SyncOpenCallback;\n import org.apache.bookkeeper.client.LedgerFragmentReplicator.SingleFragmentCallback;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n@@ -151,6 +157,37 @@ public void close() throws InterruptedException, BKException {\n         zk.close();\n     }\n \n+    /**\n+     * Get a list of the available bookies.\n+     *\n+     * @return a collection of bookie addresses\n+     */\n+    public Collection<InetSocketAddress> getAvailableBookies()\n+            throws BKException {\n+        return bkc.bookieWatcher.getBookies();\n+    }\n+\n+    /**\n+     * Get a list of readonly bookies\n+     *\n+     * @return a collection of bookie addresses\n+     */\n+    public Collection<InetSocketAddress> getReadOnlyBookies() {\n+        return bkc.bookieWatcher.getReadOnlyBookies();\n+    }\n+\n+    /**\n+     * Notify when the available list of bookies changes.\n+     * This is a one-shot notification. To receive subsequent notifications\n+     * the listener must be registered again.\n+     *\n+     * @param listener the listener to notify\n+     */\n+    public void notifyBookiesChanged(final BookiesListener listener)\n+            throws BKException {\n+        bkc.bookieWatcher.notifyBookiesChanged(listener);\n+    }\n+\n     /**\n      * Open a ledger as an administrator. This means that no digest password\n      * checks are done. Otherwise, the call is identical to BookKeeper#asyncOpenLedger\n@@ -731,7 +768,9 @@ public static boolean format(ClientConfiguration conf,\n                 } else {\n                     // Confirm with the admin.\n                     confirm = IOUtils\n-                            .confirmPrompt(\"Are you sure to format bookkeeper metadata ?\");\n+                            .confirmPrompt(\"Ledger root already exists. \"\n+                                    +\"Are you sure to format bookkeeper metadata? \"\n+                                    +\"This may cause data loss.\");\n                 }\n                 if (!confirm) {\n                     LOG.error(\"BookKeeper metadata Format aborted!!\");\n@@ -775,4 +814,63 @@ public static boolean format(ClientConfiguration conf,\n         }\n         return true;\n     }\n+\n+    /**\n+     * This method returns an iterable object for the list of ledger identifiers of\n+     * the ledgers currently available.\n+     *\n+     * @return an iterable object for the list of ledger identifiers\n+     * @throws IOException  if the list of ledger identifiers cannot be read from the\n+     *  metadata store\n+     */\n+    public Iterable<Long> listLedgers()\n+    throws IOException {\n+        final LedgerRangeIterator iterator = bkc.getLedgerManager().getLedgerRanges();\n+        return new Iterable<Long>() {\n+            public Iterator<Long> iterator() {\n+                return new Iterator<Long>() {\n+                    Iterator<Long> currentRange = null;\n+\n+                    @Override\n+                    public boolean hasNext() {\n+                        try {\n+                            if (iterator.hasNext()) {\n+                                LOG.info(\"I'm in this part of\");\n+                                return true;\n+                            } else if (currentRange != null) {\n+                                if (currentRange.hasNext()) {\n+                                    return true;\n+                                }\n+                            }\n+                        } catch (IOException e) {\n+                            LOG.error(\"Error while checking if there is a next element\", e);\n+                        }\n+\n+                        return false;\n+                    }\n+\n+                    @Override\n+                    public Long next()\n+                    throws NoSuchElementException {\n+                        try{\n+                            if (currentRange == null) {\n+                                currentRange = iterator.next().getLedgers().iterator();\n+                            }\n+                        } catch (IOException e) {\n+                            LOG.error(\"Error while reading the next element\", e);\n+                            throw new NoSuchElementException(e.getMessage());\n+                        }\n+\n+                        return currentRange.next();\n+                    }\n+\n+                    @Override\n+                    public void remove()\n+                    throws UnsupportedOperationException {\n+                        throw new UnsupportedOperationException();\n+                    }\n+                };\n+            }\n+        };\n+    }\n }"},{"sha":"2477fe86c22ed5078b14d1e677847cf8a251958c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","status":"modified","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookieWatcher.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -22,6 +22,7 @@\n import java.net.InetSocketAddress;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -44,6 +45,7 @@\n import org.apache.zookeeper.AsyncCallback.ChildrenCallback;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.KeeperException.NodeExistsException;\n+import org.apache.zookeeper.Watcher.Event.EventType;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n /**\n@@ -84,6 +86,46 @@ public BookieWatcher(ClientConfiguration conf,\n         readOnlyBookieWatcher = new ReadOnlyBookieWatcher(conf, bk);\n     }\n \n+    void notifyBookiesChanged(final BookiesListener listener) throws BKException {\n+        try {\n+            bk.getZkHandle().getChildren(this.bookieRegistrationPath,\n+                    new Watcher() {\n+                        public void process(WatchedEvent event) {\n+                            // listen children changed event from ZooKeeper\n+                            if (event.getType() == EventType.NodeChildrenChanged) {\n+                                listener.availableBookiesChanged();\n+                            }\n+                        }\n+                    });\n+        } catch (KeeperException ke) {\n+            logger.error(\"Error registering watcher with zookeeper\", ke);\n+            throw new BKException.ZKException();\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            logger.error(\"Interrupted registering watcher with zookeeper\", ie);\n+            throw new BKException.BKInterruptedException();\n+        }\n+    }\n+\n+    public Collection<InetSocketAddress> getBookies() throws BKException {\n+        try {\n+            List<String> children = bk.getZkHandle().getChildren(this.bookieRegistrationPath, false);\n+            children.remove(BookKeeperConstants.READONLY);\n+            return convertToBookieAddresses(children);\n+        } catch (KeeperException ke) {\n+            logger.error(\"Failed to get bookie list : \", ke);\n+            throw new BKException.ZKException();\n+        } catch (InterruptedException ie) {\n+            Thread.currentThread().interrupt();\n+            logger.error(\"Interrupted reading bookie list\", ie);\n+            throw new BKException.BKInterruptedException();\n+        }\n+    }\n+\n+    Collection<InetSocketAddress> getReadOnlyBookies() {\n+        return new HashSet<InetSocketAddress>(readOnlyBookieWatcher.getReadOnlyBookies());\n+    }\n+\n     public void readBookies() {\n         readBookies(this);\n     }"},{"sha":"2f125fb166cae2717c404a90f16d12842e2b7138","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookiesListener.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -0,0 +1,27 @@\n+package org.apache.bookkeeper.client;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+\n+/**\n+ * Listener for the the available bookies changes.\n+ */\n+public interface BookiesListener {\n+    void availableBookiesChanged();\n+}"},{"sha":"368eac1c279ee66cc6abe23caed76bcfd200fc32","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerChecker.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -204,9 +204,7 @@ public void checkLedger(LedgerHandle lh,\n          * NoSuchEntry we can assume it was never written. If they respond with anything\n          * else, we must assume the entry has been written, so we run the check.\n          */\n-        if (curEntryId != null\n-            && !(lh.getLastAddConfirmed() == LedgerHandle.INVALID_ENTRY_ID\n-                 && lh.getLedgerMetadata().isClosed())) {\n+        if (curEntryId != null && !(lh.getLedgerMetadata().isClosed() && lh.getLastAddConfirmed() < curEntryId)) {\n             long lastEntry = lh.getLastAddConfirmed();\n \n             if (lastEntry < curEntryId) {"},{"sha":"c0cfdb736ab0b9a8db51178716d6151c5d7791e4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":74,"deletions":22,"changes":96,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,7 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import java.net.InetSocketAddress;\n import java.security.GeneralSecurityException;\n@@ -253,6 +252,12 @@ public void safeRun() {\n                 final State prevState;\n \n                 synchronized(LedgerHandle.this) {\n+                    // if the metadata is already closed, we don't need to proceed the process\n+                    // otherwise, it might end up encountering bad version error log messages when updating metadata\n+                    if (metadata.isClosed()) {\n+                        cb.closeComplete(BKException.Code.OK, LedgerHandle.this, ctx);\n+                        return;\n+                    }\n                     prevState = metadata.getState();\n                     prevLastEntryId = metadata.getLastEntryId();\n                     prevLength = metadata.getLength();\n@@ -262,8 +267,6 @@ public void safeRun() {\n                     // is closed. \n                     metadata.setLength(length);\n \n-                    // Close operation is idempotent, so no need to check if we are\n-                    // already closed\n                     metadata.close(lastAddConfirmed);\n                     errorOutPendingAdds(rc);\n                     lastAddPushed = lastAddConfirmed;\n@@ -297,7 +300,12 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n                                         }\n \n                                         metadata.setLength(prevLength);\n-                                        if (metadata.resolveConflict(newMeta)) {\n+                                        if (!metadata.isNewerThan(newMeta)\n+                                                && !metadata.isConflictWith(newMeta)) {\n+                                            // use the new metadata's ensemble, in case re-replication already\n+                                            // replaced some bookies in the ensemble.\n+                                            metadata.setEnsembles(newMeta.getEnsembles());\n+                                            metadata.setVersion(newMeta.version);\n                                             metadata.setLength(length);\n                                             metadata.close(lastAddConfirmed);\n                                             writeLedgerConfig(new CloseCb());\n@@ -485,7 +493,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n         final long currentLength;\n         synchronized(this) {\n             // synchronized on this to ensure that\n-            // the ledger isn't closed between checking and \n+            // the ledger isn't closed between checking and\n             // updating lastAddPushed\n             if (metadata.isClosed()) {\n                 LOG.warn(\"Attempt to add to closed ledger: \" + ledgerId);\n@@ -532,6 +540,7 @@ public void safeRun() {\n \n     public void asyncReadLastConfirmed(final ReadLastConfirmedCallback cb, final Object ctx) {\n         ReadLastConfirmedOp.LastConfirmedDataCallback innercb = new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n+                @Override\n                 public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {\n                     if (rc == BKException.Code.OK) {\n                         lastAddConfirmed = Math.max(lastAddConfirmed, data.lastAddConfirmed);\n@@ -619,6 +628,7 @@ void handleUnrecoverableErrorDuringAdd(int rc) {\n             errorOutPendingAdds(rc);\n             return;\n         }\n+        LOG.error(\"Closing ledger {} due to error {}\", ledgerId, rc);\n         asyncCloseInternal(NoopCloseCallback.instance, null, rc);\n     }\n \n@@ -781,6 +791,8 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n         }\n \n         /**\n+         * Specific resolve conflicts happened when multiple bookies failures in same ensemble.\n+         * <p>\n          * Resolving the version conflicts between local ledgerMetadata and zk\n          * ledgerMetadata. This will do the following:\n          * <ul>\n@@ -790,31 +802,44 @@ public void safeOperationComplete(int newrc, LedgerMetadata newMeta) {\n          * if the zk ledgerMetadata still contains the failed bookie, then\n          * update zookeeper with the newBookie otherwise send write request</li>\n          * </ul>\n+         * </p>\n          */\n         private boolean resolveConflict(LedgerMetadata newMeta) {\n-            // close have changed, another client has opened\n-            // the ledger, can't resolve this conflict.\n+            // make sure the ledger isn't closed by other ones.\n             if (metadata.getState() != newMeta.getState()) {\n                 return false;\n             }\n-            // update znode version\n-            metadata.setVersion(newMeta.getVersion());\n-            // Resolve the conflicts if zk metadata still contains failed\n-            // bookie.\n+\n+            // We should check number of ensembles since there are two kinds of metadata conflicts:\n+            // - Case 1: Multiple bookies involved in ensemble change.\n+            //           Number of ensembles should be same in this case.\n+            // - Case 2: Recovery (Auto/Manually) replaced ensemble and ensemble changed.\n+            //           The metadata changed due to ensemble change would have one more ensemble\n+            //           than the metadata changed by recovery.\n+            int diff = newMeta.getEnsembles().size() - metadata.getEnsembles().size();\n+            if (0 != diff) {\n+                if (-1 == diff) {\n+                    // Case 1: metadata is changed by other ones (e.g. Recovery)\n+                    return updateMetadataIfPossible(newMeta);\n+                }\n+                return false;\n+            }\n+\n+            //\n+            // Case 2:\n+            //\n+            // If the failed the bookie is still existed in the metadata (in zookeeper), it means that\n+            // the ensemble change of the failed bookie is failed due to metadata conflicts. so try to\n+            // update the ensemble change metadata again. Otherwise, it means that the ensemble change\n+            // is already succeed, unset the success and re-adding entries.\n             if (newMeta.currentEnsemble.get(ensembleInfo.bookieIndex).equals(\n                     ensembleInfo.addr)) {\n-                // Update ledger metadata in zk, if in-memory metadata doesn't\n-                // contains the failed bookie.\n+                // If the in-memory data doesn't contains the failed bookie, it means the ensemble change\n+                // didn't finish, so try to resolve conflicts with the metadata read from zookeeper and\n+                // update ensemble changed metadata again.\n                 if (!metadata.currentEnsemble.get(ensembleInfo.bookieIndex)\n                         .equals(ensembleInfo.addr)) {\n-                    LOG.info(\"Resolve ledger metadata conflict \"\n-                            + \"while changing ensemble to: \"\n-                            + ensembleInfo.newEnsemble\n-                            + \", old meta data is \\n\"\n-                            + new String(metadata.serialize())\n-                            + \"\\n, new meta data is \\n\"\n-                            + new String(newMeta.serialize()));\n-                    writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n+                    return updateMetadataIfPossible(newMeta);\n                 }\n             } else {\n                 // the failed bookie has been replaced\n@@ -824,6 +849,29 @@ private boolean resolveConflict(LedgerMetadata newMeta) {\n             return true;\n         }\n \n+        private boolean updateMetadataIfPossible(LedgerMetadata newMeta) {\n+            // if the local metadata is newer than zookeeper metadata, it means that metadata is updated\n+            // again when it was trying re-reading the metatada, re-kick the reread again\n+            if (metadata.isNewerThan(newMeta)) {\n+                rereadMetadata(this);\n+                return true;\n+            }\n+            // make sure the metadata doesn't changed by other ones.\n+            if (metadata.isConflictWith(newMeta)) {\n+                return false;\n+            }\n+            LOG.info(\"Resolve ledger metadata conflict while changing ensemble to: {},\"\n+                    + \" old meta data is \\n {} \\n, new meta data is \\n {}.\", new Object[] {\n+                    ensembleInfo.newEnsemble, metadata, newMeta });\n+            // update znode version\n+            metadata.setVersion(newMeta.getVersion());\n+            // merge ensemble infos from new meta except last ensemble\n+            // since they might be modified by recovery tool.\n+            metadata.mergeEnsembles(newMeta.getEnsembles());\n+            writeLedgerConfig(new ChangeEnsembleCb(ensembleInfo));\n+            return true;\n+        }\n+\n     };\n \n     void unsetSuccessAndSendWriteRequest(final int bookieIndex) {\n@@ -906,6 +954,7 @@ public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n          * @param ctx\n          *          control object\n          */\n+        @Override\n         public void readComplete(int rc, LedgerHandle lh,\n                                  Enumeration<LedgerEntry> seq, Object ctx) {\n             \n@@ -934,6 +983,7 @@ public void readComplete(int rc, LedgerHandle lh,\n          * @param ctx\n          *          control object\n          */\n+        @Override\n         public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n \n@@ -947,6 +997,7 @@ public void addComplete(int rc, LedgerHandle lh, long entry, Object ctx) {\n         /**\n          * Implementation of  callback interface for synchronous read last confirmed method.\n          */\n+        @Override\n         public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n             LastConfirmedCtx lcCtx = (LastConfirmedCtx) ctx;\n             \n@@ -966,6 +1017,7 @@ public void readLastConfirmedComplete(int rc, long lastConfirmed, Object ctx) {\n          * @param lh\n          * @param ctx\n          */\n+        @Override\n         public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n             SyncCounter counter = (SyncCounter) ctx;\n             counter.setrc(rc);"},{"sha":"1a8167d9b96c667073358bff45907555a5d7273f","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","status":"modified","additions":87,"deletions":25,"changes":112,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerMetadata.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,6 +15,9 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.client;\n+\n+import static com.google.common.base.Charsets.UTF_8;\n \n import java.io.BufferedReader;\n import java.io.StringReader;\n@@ -25,6 +26,7 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.SortedMap;\n import java.util.TreeMap;\n import java.util.Arrays;\n@@ -96,6 +98,30 @@ public LedgerMetadata(int ensembleSize, int writeQuorumSize, int ackQuorumSize,\n         this.hasPassword = true;\n     }\n \n+    /**\n+     * Copy Constructor.\n+     */\n+    LedgerMetadata(LedgerMetadata other) {\n+        this.ensembleSize = other.ensembleSize;\n+        this.writeQuorumSize = other.writeQuorumSize;\n+        this.ackQuorumSize = other.ackQuorumSize;\n+        this.length = other.length;\n+        this.lastEntryId = other.lastEntryId;\n+        this.metadataFormatVersion = other.metadataFormatVersion;\n+        this.state = other.state;\n+        this.version = other.version;\n+        this.hasPassword = other.hasPassword;\n+        this.digestType = other.digestType;\n+        this.password = new byte[other.password.length];\n+        System.arraycopy(other.password, 0, this.password, 0, other.password.length);\n+        // copy the ensembles\n+        for (Entry<Long, ArrayList<InetSocketAddress>> entry : other.ensembles.entrySet()) {\n+            long startEntryId = entry.getKey();\n+            ArrayList<InetSocketAddress> newEnsemble = new ArrayList<InetSocketAddress>(entry.getValue());\n+            this.addEnsemble(startEntryId, newEnsemble);\n+        }\n+    }\n+\n     private LedgerMetadata() {\n         this(0, 0, 0, BookKeeper.DigestType.MAC, new byte[] {});\n         this.hasPassword = false;\n@@ -112,6 +138,10 @@ private LedgerMetadata() {\n         return ensembles;\n     }\n \n+    void setEnsembles(SortedMap<Long, ArrayList<InetSocketAddress>> ensembles) {\n+        this.ensembles = ensembles;\n+    }\n+\n     public int getEnsembleSize() {\n         return ensembleSize;\n     }\n@@ -235,7 +265,7 @@ long getNextEnsembleChange(long entryId) {\n             LedgerMetadataFormat.Segment.Builder segmentBuilder = LedgerMetadataFormat.Segment.newBuilder();\n             segmentBuilder.setFirstEntryId(entry.getKey());\n             for (InetSocketAddress addr : entry.getValue()) {\n-                segmentBuilder.addEnsembleMember(addr.getAddress().getHostAddress() + \":\" + addr.getPort());\n+                segmentBuilder.addEnsembleMember(StringUtils.addrToString(addr));\n             }\n             builder.addSegment(segmentBuilder.build());\n         }\n@@ -406,13 +436,26 @@ public Version getVersion() {\n     }\n \n     /**\n-     * Resolve conflict with new updated metadata.\n+     * Is the metadata newer that given <i>newMeta</i>.\n+     *\n+     * @param newMeta\n+     * @return\n+     */\n+    boolean isNewerThan(LedgerMetadata newMeta) {\n+        if (null == version) {\n+            return false;\n+        }\n+        return Version.Occurred.AFTER == version.compare(newMeta.version);\n+    }\n+\n+    /**\n+     * Is the metadata conflict with new updated metadata.\n      *\n      * @param newMeta\n      *          Re-read metadata\n-     * @return true if the conflict has been resolved, otherwise false.\n+     * @return true if the metadata is conflict.\n      */\n-    boolean resolveConflict(LedgerMetadata newMeta) {\n+    boolean isConflictWith(LedgerMetadata newMeta) {\n         /*\n          *  if length & close have changed, then another client has\n          *  opened the ledger, can't resolve this conflict.\n@@ -426,42 +469,61 @@ boolean resolveConflict(LedgerMetadata newMeta) {\n             state != newMeta.state ||\n             !digestType.equals(newMeta.digestType) ||\n             !Arrays.equals(password, newMeta.password)) {\n-            return false;\n+            return true;\n         }\n         if (state == LedgerMetadataFormat.State.CLOSED\n             && lastEntryId != newMeta.lastEntryId) {\n-            return false;\n-        }\n-        // new meta znode version should be larger than old one\n-        if (null != version &&\n-            Version.Occurred.AFTER == version.compare(newMeta.version)) {\n-            return false;\n+            return true;\n         }\n         // if ledger is closed, we can just take the new ensembles\n         if (newMeta.state != LedgerMetadataFormat.State.CLOSED) {\n-            // ensemble size should be same\n-            if (ensembles.size() != newMeta.ensembles.size()) {\n-                return false;\n+            // allow new metadata to be one ensemble less than current metadata\n+            // since ensemble change might kick in when recovery changed metadata\n+            int diff = ensembles.size() - newMeta.ensembles.size();\n+            if (0 != diff && 1 != diff) {\n+                return true;\n             }\n             // ensemble distribution should be same\n             // we don't check the detail ensemble, since new bookie will be set\n             // using recovery tool.\n             Iterator<Long> keyIter = ensembles.keySet().iterator();\n             Iterator<Long> newMetaKeyIter = newMeta.ensembles.keySet().iterator();\n-            for (int i=0; i<ensembles.size(); i++) {\n+            for (int i=0; i<newMeta.ensembles.size(); i++) {\n                 Long curKey = keyIter.next();\n                 Long newMetaKey = newMetaKeyIter.next();\n                 if (!curKey.equals(newMetaKey)) {\n-                    return false;\n+                    return true;\n                 }\n             }\n         }\n-        /*\n-         *  if the conflict has been resolved, then update\n-         *  ensemble and znode version\n-         */\n-        ensembles = newMeta.ensembles;\n-        version = newMeta.version;\n-        return true;\n+        return false;\n     }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"(meta:\").append(new String(serialize(), UTF_8)).append(\", version:\").append(version).append(\")\");\n+        return sb.toString();\n+    }\n+\n+    void mergeEnsembles(SortedMap<Long, ArrayList<InetSocketAddress>> newEnsembles) {\n+        // allow new metadata to be one ensemble less than current metadata\n+        // since ensemble change might kick in when recovery changed metadata\n+        int diff = ensembles.size() - newEnsembles.size();\n+        if (0 != diff && 1 != diff) {\n+            return;\n+        }\n+        int i = 0;\n+        for (Entry<Long, ArrayList<InetSocketAddress>> entry : newEnsembles.entrySet()) {\n+            ++i;\n+            if (ensembles.size() != i) {\n+                // we should use last ensemble from current metadata\n+                // not the new metadata read from zookeeper\n+                long key = entry.getKey();\n+                ArrayList<InetSocketAddress> ensemble = entry.getValue();\n+                ensembles.put(key, ensemble);\n+            }\n+        }\n+    }\n+\n }"},{"sha":"8861c1a3b283fcca2697c1e788ea7f8a8cfb5b52","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","status":"modified","additions":38,"deletions":24,"changes":62,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerRecoveryOp.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -19,21 +19,16 @@\n  */\n \n import java.util.Enumeration;\n+import java.util.concurrent.ScheduledExecutorService;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n-import org.apache.bookkeeper.client.AsyncCallback.ReadLastConfirmedCallback;\n-import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n-import org.apache.bookkeeper.client.LedgerHandle.NoopCloseCallback;\n import org.apache.bookkeeper.client.DigestManager.RecoveryData;\n-import org.apache.bookkeeper.proto.BookieProtocol;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n-\n import org.apache.zookeeper.KeeperException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n  * This class encapsulated the ledger recovery operation. It first does a read\n@@ -51,9 +46,25 @@\n     long maxAddPushed = LedgerHandle.INVALID_ENTRY_ID;\n     long maxAddConfirmed = LedgerHandle.INVALID_ENTRY_ID;\n     long maxLength = 0;\n+    // keep a copy of metadata for recovery.\n+    LedgerMetadata metadataForRecovery;\n \n     GenericCallback<Void> cb;\n \n+    class RecoveryReadOp extends PendingReadOp {\n+\n+        RecoveryReadOp(LedgerHandle lh, ScheduledExecutorService scheduler, long startEntryId,\n+                long endEntryId, ReadCallback cb, Object ctx) {\n+            super(lh, scheduler, startEntryId, endEntryId, cb, ctx);\n+        }\n+\n+        @Override\n+        protected LedgerMetadata getLedgerMetadata() {\n+            return metadataForRecovery;\n+        }\n+\n+    }\n+\n     public LedgerRecoveryOp(LedgerHandle lh, GenericCallback<Void> cb) {\n         this.cb = cb;\n         this.lh = lh;\n@@ -63,17 +74,20 @@ public LedgerRecoveryOp(LedgerHandle lh, GenericCallback<Void> cb) {\n     public void initiate() {\n         ReadLastConfirmedOp rlcop = new ReadLastConfirmedOp(lh,\n                 new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n-                public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n-                    if (rc == BKException.Code.OK) {\n-                        lh.lastAddPushed = lh.lastAddConfirmed = data.lastAddConfirmed;\n-                        lh.length = data.length;\n-                        doRecoveryRead();\n-                    } else if (rc == BKException.Code.UnauthorizedAccessException) {\n-                        cb.operationComplete(rc, null);\n-                    } else {\n-                        cb.operationComplete(BKException.Code.ReadException, null);\n+                    public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n+                        if (rc == BKException.Code.OK) {\n+                            lh.lastAddPushed = lh.lastAddConfirmed = data.lastAddConfirmed;\n+                            lh.length = data.length;\n+                            // keep a copy of ledger metadata before proceeding\n+                            // ledger recovery\n+                            metadataForRecovery = new LedgerMetadata(lh.getLedgerMetadata());\n+                            doRecoveryRead();\n+                        } else if (rc == BKException.Code.UnauthorizedAccessException) {\n+                            cb.operationComplete(rc, null);\n+                        } else {\n+                            cb.operationComplete(BKException.Code.ReadException, null);\n+                        }\n                     }\n-                }\n                 });\n \n         /**\n@@ -88,14 +102,16 @@ public void readLastConfirmedDataComplete(int rc, RecoveryData data) {\n      * Try to read past the last confirmed.\n      */\n     private void doRecoveryRead() {\n-        lh.lastAddConfirmed++;\n-        lh.asyncReadEntries(lh.lastAddConfirmed, lh.lastAddConfirmed, this, null);\n+        long nextEntry = lh.lastAddConfirmed + 1;\n+        try {\n+            new RecoveryReadOp(lh, lh.bk.scheduler, nextEntry, nextEntry, this, null).initiate();\n+        } catch (InterruptedException e) {\n+            readComplete(BKException.Code.InterruptedException, lh, null, null);\n+        }\n     }\n \n     @Override\n     public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq, Object ctx) {\n-        // get back to prev value\n-        lh.lastAddConfirmed--;\n         if (rc == BKException.Code.OK) {\n             LedgerEntry entry = seq.nextElement();\n             byte[] data = entry.getEntry();\n@@ -116,9 +132,9 @@ public void readComplete(int rc, LedgerHandle lh, Enumeration<LedgerEntry> seq,\n             lh.asyncCloseInternal(new CloseCallback() {\n                 @Override\n                 public void closeComplete(int rc, LedgerHandle lh, Object ctx) {\n-                    if (rc != KeeperException.Code.OK.intValue()) {\n+                    if (rc != BKException.Code.OK) {\n                         LOG.warn(\"Close failed: \" + BKException.getMessage(rc));\n-                        cb.operationComplete(BKException.Code.ZKException, null);\n+                        cb.operationComplete(rc, null);\n                     } else {\n                         cb.operationComplete(BKException.Code.OK, null);\n                         LOG.debug(\"After closing length is: {}\", lh.getLength());\n@@ -145,9 +161,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n             cb.operationComplete(rc, null);\n             return;\n         }\n-\n         doRecoveryRead();\n-\n     }\n \n }"},{"sha":"3bc488564839744669aae3cc5f8b1ebd385525b3","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":18,"deletions":5,"changes":23,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,11 +21,11 @@\n import java.util.Set;\n import java.net.InetSocketAddress;\n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.proto.BookieProtocol;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.jboss.netty.buffer.ChannelBuffer;\n \n /**\n  * This represents a pending add operation. When it has got success from all\n@@ -132,21 +132,29 @@ void initiate(ChannelBuffer toSend) {\n     public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx) {\n         int bookieIndex = (Integer) ctx;\n \n+        if (completed) {\n+            // I am already finished, ignore incoming responses.\n+            // otherwise, we might hit the following error handling logic, which might cause bad things.\n+            return;\n+        }\n \n         switch (rc) {\n         case BKException.Code.OK:\n             // continue\n             break;\n         case BKException.Code.LedgerFencedException:\n-            LOG.warn(\"Fencing exception on write: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Fencing exception on write: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleUnrecoverableErrorDuringAdd(rc);\n             return;\n         case BKException.Code.UnauthorizedAccessException:\n-            LOG.warn(\"Unauthorized access exception on write: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Unauthorized access exception on write: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleUnrecoverableErrorDuringAdd(rc);\n             return;\n         default:\n-            LOG.warn(\"Write did not succeed: \" + ledgerId + \", \" + entryId);\n+            LOG.warn(\"Write did not succeed: L{} E{} on {}\",\n+                     new Object[] { ledgerId, entryId, addr });\n             lh.handleBookieFailure(addr, bookieIndex);\n             return;\n         }\n@@ -167,6 +175,11 @@ public void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress\n     }\n \n     void submitCallback(final int rc) {\n+        if (rc != BKException.Code.OK) {\n+            LOG.error(\"Write of ledger entry to quorum failed: L{} E{}\",\n+                      lh.getId(), entryId);\n+        }\n+\n         cb.addComplete(rc, lh, entryId, ctx);\n     }\n "},{"sha":"0f6ef3fc8ed0eaafe8448af43e3e83e933f18b1d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","status":"modified","additions":38,"deletions":22,"changes":60,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingReadOp.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,27 +21,27 @@\n  *\n  */\n import java.net.InetSocketAddress;\n-import java.util.concurrent.ArrayBlockingQueue;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.ScheduledFuture;\n import java.util.ArrayList;\n+import java.util.BitSet;\n import java.util.Enumeration;\n+import java.util.HashSet;\n+import java.util.List;\n import java.util.NoSuchElementException;\n import java.util.Queue;\n-import java.util.BitSet;\n import java.util.Set;\n-import java.util.HashSet;\n-import java.util.List;\n-\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicBoolean;\n+\n import org.apache.bookkeeper.client.AsyncCallback.ReadCallback;\n import org.apache.bookkeeper.client.BKException.BKDigestMatchException;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBufferInputStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Sequence of entries of a ledger that represents a pending read operation.\n@@ -128,7 +128,7 @@ private boolean readsOutstanding() {\n          * @return host we sent to if we sent. null otherwise.\n          */\n         synchronized InetSocketAddress maybeSendSpeculativeRead(Set<InetSocketAddress> heardFromHosts) {\n-            if (nextReplicaIndexToReadFrom >= lh.getLedgerMetadata().getWriteQuorumSize()) {\n+            if (nextReplicaIndexToReadFrom >= getLedgerMetadata().getWriteQuorumSize()) {\n                 return null;\n             }\n \n@@ -146,7 +146,7 @@ synchronized InetSocketAddress maybeSendSpeculativeRead(Set<InetSocketAddress> h\n         }\n \n         synchronized InetSocketAddress sendNextRead() {\n-            if (nextReplicaIndexToReadFrom >= lh.metadata.getWriteQuorumSize()) {\n+            if (nextReplicaIndexToReadFrom >= getLedgerMetadata().getWriteQuorumSize()) {\n                 // we are done, the read has failed from all replicas, just fail the\n                 // read\n \n@@ -190,11 +190,13 @@ synchronized void logErrorAndReattemptRead(InetSocketAddress host, String errMsg\n             }\n             if (BKException.Code.NoSuchEntryException == rc) {\n                 ++numMissedEntryReads;\n+                LOG.debug(\"No such entry found on bookie.  L{} E{} bookie: {}\",\n+                        new Object[] { lh.ledgerId, entryId, host });\n+            } else {\n+                LOG.debug(errMsg + \" while reading L{} E{} from bookie: {}\",\n+                          new Object[] { lh.ledgerId, entryId, host });\n             }\n \n-            LOG.error(errMsg + \" while reading entry: \" + entryId + \" ledgerId: \" + lh.ledgerId + \" from bookie: \"\n-                      + host);\n-\n             int replica = getReplicaIndex(host);\n             if (replica == NOT_FOUND) {\n                 LOG.error(\"Received error from a host which is not in the ensemble {} {}.\", host, ensemble);\n@@ -251,11 +253,16 @@ public String toString() {\n         this.endEntryId = endEntryId;\n         this.scheduler = scheduler;\n         numPendingEntries = endEntryId - startEntryId + 1;\n-        maxMissedReadsAllowed = lh.metadata.getWriteQuorumSize() - lh.metadata.getAckQuorumSize();\n+        maxMissedReadsAllowed = getLedgerMetadata().getWriteQuorumSize()\n+                - getLedgerMetadata().getAckQuorumSize();\n         speculativeReadTimeout = lh.bk.getConf().getSpeculativeReadTimeout();\n         heardFromHosts = new HashSet<InetSocketAddress>();\n     }\n \n+    protected LedgerMetadata getLedgerMetadata() {\n+        return lh.metadata;\n+    }\n+\n     public void initiate() throws InterruptedException {\n         long nextEnsembleChange = startEntryId, i = startEntryId;\n \n@@ -275,19 +282,17 @@ public void run() {\n                             }\n                         }\n                         if (x > 0) {\n-                            LOG.info(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n-                                     new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n+                            LOG.debug(\"Send {} speculative reads for ledger {} ({}, {}). Hosts heard are {}.\",\n+                                      new Object[] { x, lh.getId(), startEntryId, endEntryId, heardFromHosts });\n                         }\n                     }\n                 }, speculativeReadTimeout, speculativeReadTimeout, TimeUnit.MILLISECONDS);\n         }\n \n         do {\n-            LOG.debug(\"Acquiring lock: {}\", i);\n-\n             if (i == nextEnsembleChange) {\n-                ensemble = lh.metadata.getEnsemble(i);\n-                nextEnsembleChange = lh.metadata.getNextEnsembleChange(i);\n+                ensemble = getLedgerMetadata().getEnsemble(i);\n+                nextEnsembleChange = getLedgerMetadata().getNextEnsembleChange(i);\n             }\n             LedgerEntryRequest entry = new LedgerEntryRequest(ensemble, lh.ledgerId, i);\n             seq.add(entry);\n@@ -342,6 +347,17 @@ private void submitCallback(int code) {\n             speculativeTask.cancel(true);\n             speculativeTask = null;\n         }\n+        if (code != BKException.Code.OK) {\n+            long firstUnread = LedgerHandle.INVALID_ENTRY_ID;\n+            for (LedgerEntryRequest req : seq) {\n+                if (!req.isComplete()) {\n+                    firstUnread = req.getEntryId();\n+                    break;\n+                }\n+            }\n+            LOG.error(\"Read of ledger entry failed: L{} E{}-E{}, Heard from {}. First unread entry is {}\",\n+                    new Object[] { lh.getId(), startEntryId, endEntryId, heardFromHosts, firstUnread });\n+        }\n         cb.readComplete(code, lh, PendingReadOp.this, PendingReadOp.this.ctx);\n     }\n     public boolean hasMoreElements() {"},{"sha":"cc1cf1506c8917ad65d1e83f611d9c06aeb67d4e","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -84,8 +84,8 @@ void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n             try {\n                 if (!metadata.currentEnsemble.get(bookieIndex).equals(addr)) {\n                     // ensemble has already changed, failure of this addr is immaterial\n-                    LOG.warn(\"Write did not succeed to {}, bookieIndex {}, but we have already fixed it.\",\n-                             addr, bookieIndex);\n+                    LOG.debug(\"Write did not succeed to {}, bookieIndex {},\"\n+                              +\" but we have already fixed it.\", addr, bookieIndex);\n                     blockAddCompletions.decrementAndGet();\n                     return;\n                 }"},{"sha":"d9363f81991626cb95ce197f9ed9c09c1760f46d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -32,6 +32,9 @@\n     protected final static String MINOR_COMPACTION_THRESHOLD = \"minorCompactionThreshold\";\n     protected final static String MAJOR_COMPACTION_INTERVAL = \"majorCompactionInterval\";\n     protected final static String MAJOR_COMPACTION_THRESHOLD = \"majorCompactionThreshold\";\n+    protected final static String COMPACTION_MAX_OUTSTANDING_REQUESTS\n+        = \"compactionMaxOutstandingRequests\";\n+    protected final static String COMPACTION_RATE = \"compactionRate\";\n \n     // Gc Parameters\n     protected final static String GC_WAIT_TIME = \"gcWaitTime\";\n@@ -48,6 +51,9 @@\n     protected final static String MAX_BACKUP_JOURNALS = \"journalMaxBackups\";\n     // Bookie Parameters\n     protected final static String BOOKIE_PORT = \"bookiePort\";\n+    protected final static String LISTENING_INTERFACE = \"listeningInterface\";\n+    protected final static String ALLOW_LOOPBACK = \"allowLoopback\";\n+\n     protected final static String JOURNAL_DIR = \"journalDirectory\";\n     protected final static String LEDGER_DIRS = \"ledgerDirectories\";\n     // NIO Parameters\n@@ -283,6 +289,64 @@ public ServerConfiguration setBookiePort(int port) {\n         return this;\n     }\n \n+    /**\n+     * Get the network interface that the bookie should\n+     * listen for connections on. If this is null, then the bookie\n+     * will listen for connections on all interfaces.\n+     *\n+     * @return the network interface to listen on, e.g. eth0, or\n+     *         null if none is specified\n+     */\n+    public String getListeningInterface() {\n+        return this.getString(LISTENING_INTERFACE);\n+    }\n+\n+    /**\n+     * Set the network interface that the bookie should listen on.\n+     * If not set, the bookie will listen on all interfaces.\n+     *\n+     * @param iface the interface to listen on\n+     */\n+    public ServerConfiguration setListeningInterface(String iface) {\n+        this.setProperty(LISTENING_INTERFACE, iface);\n+        return this;\n+    }\n+\n+    /**\n+     * Is the bookie allowed to use a loopback interface as its primary\n+     * interface(i.e. the interface it uses to establish its identity)?\n+     *\n+     * By default, loopback interfaces are not allowed as the primary\n+     * interface.\n+     *\n+     * Using a loopback interface as the primary interface usually indicates\n+     * a configuration error. For example, its fairly common in some VPS setups\n+     * to not configure a hostname, or to have the hostname resolve to\n+     * 127.0.0.1. If this is the case, then all bookies in the cluster will\n+     * establish their identities as 127.0.0.1:3181, and only one will be able\n+     * to join the cluster. For VPSs configured like this, you should explicitly\n+     * set the listening interface.\n+     *\n+     * @see #setListeningInterface(String)\n+     * @return whether a loopback interface can be used as the primary interface\n+     */\n+    public boolean getAllowLoopback() {\n+        return this.getBoolean(ALLOW_LOOPBACK, false);\n+    }\n+\n+    /**\n+     * Configure the bookie to allow loopback interfaces to be used\n+     * as the primary bookie interface.\n+     *\n+     * @see #getAllowLoopback\n+     * @param allow whether to allow loopback interfaces\n+     * @return server configuration\n+     */\n+    public ServerConfiguration setAllowLoopback(boolean allow) {\n+        this.setProperty(ALLOW_LOOPBACK, allow);\n+        return this;\n+    }\n+\n     /**\n      * Get dir name to store journal files\n      *\n@@ -694,4 +758,56 @@ public ServerConfiguration setAutoRecoveryDaemonEnabled(boolean enabled) {\n     public boolean isAutoRecoveryDaemonEnabled() {\n         return getBoolean(AUTO_RECOVERY_DAEMON_ENABLED, false);\n     }\n+\n+    /**\n+     * Get the maximum number of entries which can be compacted without flushing.\n+     * Default is 100,000.\n+     *\n+     * @return the maximum number of unflushed entries\n+     */\n+    public int getCompactionMaxOutstandingRequests() {\n+        return getInt(COMPACTION_MAX_OUTSTANDING_REQUESTS, 100000);\n+    }\n+\n+    /**\n+     * Set the maximum number of entries which can be compacted without flushing.\n+     *\n+     * When compacting, the entries are written to the entrylog and the new offsets\n+     * are cached in memory. Once the entrylog is flushed the index is updated with\n+     * the new offsets. This parameter controls the number of entries added to the\n+     * entrylog before a flush is forced. A higher value for this parameter means\n+     * more memory will be used for offsets. Each offset consists of 3 longs.\n+     *\n+     * This parameter should _not_ be modified unless you know what you're doing.\n+     * The default is 100,000.\n+     *\n+     * @param maxOutstandingRequests number of entries to compact before flushing\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setCompactionMaxOutstandingRequests(int maxOutstandingRequests) {\n+        setProperty(COMPACTION_MAX_OUTSTANDING_REQUESTS, maxOutstandingRequests);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the rate of compaction adds. Default is 1,000.\n+     *\n+     * @return rate of compaction (adds per second)\n+     */\n+    public int getCompactionRate() {\n+        return getInt(COMPACTION_RATE, 1000);\n+    }\n+\n+    /**\n+     * Set the rate of compaction adds.\n+     *\n+     * @param rate rate of compaction adds (adds per second)\n+     *\n+     * @return ServerConfiguration\n+     */\n+    public ServerConfiguration setCompactionRate(int rate) {\n+        setProperty(COMPACTION_RATE, rate);\n+        return this;\n+    }\n }"},{"sha":"48fa47aeb7b83a7178754eadac4c78c060397bee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":10,"deletions":11,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -18,31 +18,30 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n-import java.util.HashSet;\n import java.util.List;\n+import java.util.NavigableSet;\n import java.util.Set;\n+import java.util.TreeSet;\n \n-import org.apache.bookkeeper.conf.AbstractConfiguration;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n-import org.apache.bookkeeper.versioning.Version;\n import org.apache.bookkeeper.util.ZkUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n+import org.apache.bookkeeper.versioning.Version;\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.zookeeper.AsyncCallback.DataCallback;\n-import org.apache.zookeeper.AsyncCallback.VoidCallback;\n import org.apache.zookeeper.AsyncCallback.StatCallback;\n+import org.apache.zookeeper.AsyncCallback.VoidCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Abstract ledger manager based on zookeeper, which provides common methods such as query zk nodes.\n@@ -275,8 +274,8 @@ protected boolean isSpecialZnode(String znode) {\n      *          the prefix path of the ledger nodes\n      * @return ledger id hash set\n      */\n-    protected Set<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n-        Set<Long> zkActiveLedgers = new HashSet<Long>(ledgerNodes.size(), 1.0f);\n+    protected NavigableSet<Long> ledgerListToSet(List<String> ledgerNodes, String path) {\n+        NavigableSet<Long> zkActiveLedgers = new TreeSet<Long>();\n         for (String ledgerNode : ledgerNodes) {\n             if (isSpecialZnode(ledgerNode)) {\n                 continue;"},{"sha":"2bc42580f4ae87784f44910009821c5c77553e9c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","status":"modified","additions":30,"deletions":17,"changes":47,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManager.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -79,21 +79,21 @@ public void processResult(int rc, String path, Object ctx,\n                 if (Code.OK.intValue() != rc) {\n                     LOG.error(\"Could not create node for ledger\",\n                               KeeperException.create(KeeperException.Code.get(rc), path));\n-                    cb.operationComplete(rc, null);\n+                    cb.operationComplete(BKException.Code.ZKException, null);\n                 } else {\n                     // update znode status\n                     metadata.setVersion(new ZkVersion(0));\n                     try {\n                         long ledgerId = getLedgerId(name);\n-                        cb.operationComplete(rc, ledgerId);\n+                        cb.operationComplete(BKException.Code.OK, ledgerId);\n                     } catch (IOException ie) {\n                         LOG.error(\"Could not extract ledger-id from path:\" + name, ie);\n                         cb.operationComplete(BKException.Code.ZKException, null);\n                     }\n                 }\n             }\n         };\n-        ZkUtils.createFullPathOptimistic(zk, ledgerPrefix, metadata.serialize(),\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPrefix, metadata.serialize(),\n             Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL, scb, null);\n     }\n \n@@ -128,25 +128,38 @@ public void asyncProcessLedgers(final Processor<Long> processor,\n     public LedgerRangeIterator getLedgerRanges() {\n         return new LedgerRangeIterator() {\n             // single iterator, can visit only one time\n-            boolean hasMoreElement = true;\n-            @Override\n-            public boolean hasNext() {\n-                return hasMoreElement;\n-            }\n-            @Override\n-            public LedgerRange next() throws IOException {\n-                if (!hasMoreElement) {\n-                    throw new NoSuchElementException();\n+            boolean nextCalled = false;\n+            LedgerRange nextRange = null;\n+\n+            synchronized private void preload() throws IOException {\n+                if (nextRange != null) {\n+                    return;\n                 }\n-                hasMoreElement = false;\n-                Set<Long> zkActiveLedgers;\n+                Set<Long> zkActiveLedgers = null;\n+\n                 try {\n                     zkActiveLedgers = ledgerListToSet(\n                             ZkUtils.getChildrenInSingleNode(zk, ledgerRootPath), ledgerRootPath);\n-                } catch (InterruptedException e) {\n-                    throw new IOException(\"Error when get child nodes from zk\", e);\n+                    nextRange = new LedgerRange(zkActiveLedgers);\n+                } catch (InterruptedException ie) {\n+                    Thread.currentThread().interrupt();\n+                    throw new IOException(\"Error when get child nodes from zk\", ie);\n+                }\n+            }\n+\n+            @Override\n+            synchronized public boolean hasNext() throws IOException {\n+                preload();\n+                return nextRange != null && nextRange.size() > 0 && !nextCalled;\n+            }\n+\n+            @Override\n+            synchronized public LedgerRange next() throws IOException {\n+                if (!hasNext()) {\n+                    throw new NoSuchElementException();\n                 }\n-                return new LedgerRange(zkActiveLedgers);\n+                nextCalled = true;\n+                return nextRange;\n             }\n         };\n     }"},{"sha":"171fd3adb895c714f08ea2df18b6ffd14f9241e9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":55,"deletions":29,"changes":84,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -19,14 +19,16 @@\n  */\n \n import java.io.IOException;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.ScheduledExecutorService;\n-import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.NavigableSet;\n import java.util.NoSuchElementException;\n-import java.util.Set;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n@@ -40,7 +42,6 @@\n import org.apache.zookeeper.KeeperException.Code;\n import org.apache.zookeeper.ZooDefs.Ids;\n import org.apache.zookeeper.ZooKeeper;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -102,14 +103,14 @@ public void close() {\n \n     @Override\n     public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n-        ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+        ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n             CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx, final String idPathName) {\n                 if (rc != KeeperException.Code.OK.intValue()) {\n                     LOG.error(\"Could not generate new ledger id\",\n                               KeeperException.create(KeeperException.Code.get(rc), path));\n-                    ledgerCb.operationComplete(rc, null);\n+                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                     return;\n                 }\n                 /*\n@@ -120,7 +121,7 @@ public void processResult(int rc, String path, Object ctx, final String idPathNa\n                     ledgerId = getLedgerIdFromGenPath(idPathName);\n                 } catch (IOException e) {\n                     LOG.error(\"Could not extract ledger-id from id gen path:\" + path, e);\n-                    ledgerCb.operationComplete(KeeperException.Code.SYSTEMERROR.intValue(), null);\n+                    ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                     return;\n                 }\n                 String ledgerPath = getLedgerPath(ledgerId);\n@@ -132,15 +133,15 @@ public void processResult(int rc, String path,\n                         if (rc != KeeperException.Code.OK.intValue()) {\n                             LOG.error(\"Could not create node for ledger\",\n                                       KeeperException.create(KeeperException.Code.get(rc), path));\n-                            ledgerCb.operationComplete(rc, null);\n+                            ledgerCb.operationComplete(BKException.Code.ZKException, null);\n                         } else {\n                             // update version\n                             metadata.setVersion(new ZkVersion(0));\n-                            ledgerCb.operationComplete(rc, lid);\n+                            ledgerCb.operationComplete(BKException.Code.OK, lid);\n                         }\n                     }\n                 };\n-                ZkUtils.createFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n+                ZkUtils.asyncCreateFullPathOptimistic(zk, ledgerPath, metadata.serialize(),\n                     Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT, scb, null);\n                 // delete the znode for id generation\n                 scheduler.submit(new Runnable() {\n@@ -381,7 +382,8 @@ public LedgerRangeIterator getLedgerRanges() {\n         private Iterator<String> l1NodesIter = null;\n         private Iterator<String> l2NodesIter = null;\n         private String curL1Nodes = \"\";\n-        private boolean hasMoreElement = true;\n+        private boolean iteratorDone = false;\n+        private LedgerRange nextRange = null;\n \n         /**\n          * iterate next level1 znode\n@@ -401,6 +403,7 @@ private boolean nextL1Node() throws KeeperException, InterruptedException {\n                     continue;\n                 }\n                 List<String> l2Nodes = zk.getChildren(ledgerRootPath + \"/\" + curL1Nodes, null);\n+                Collections.sort(l2Nodes);\n                 l2NodesIter = l2Nodes.iterator();\n                 if (!l2NodesIter.hasNext()) {\n                     l2NodesIter = null;\n@@ -410,27 +413,49 @@ private boolean nextL1Node() throws KeeperException, InterruptedException {\n             return true;\n         }\n \n-        @Override\n-        public boolean hasNext() throws IOException {\n-            try {\n-                if (l1NodesIter == null) {\n-                    l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();\n-                    hasMoreElement = nextL1Node();\n-                } else if (l2NodesIter == null || !l2NodesIter.hasNext()) {\n-                    hasMoreElement = nextL1Node();\n+        synchronized private void preload() throws IOException {\n+            while (nextRange == null && !iteratorDone) {\n+                boolean hasMoreElements = false;\n+                try {\n+                    if (l1NodesIter == null) {\n+                        l1NodesIter = zk.getChildren(ledgerRootPath, null).iterator();\n+                        hasMoreElements = nextL1Node();\n+                    } else if (l2NodesIter == null || !l2NodesIter.hasNext()) {\n+                        hasMoreElements = nextL1Node();\n+                    } else {\n+                        hasMoreElements = true;\n+                    }\n+                } catch (KeeperException ke) {\n+                    throw new IOException(\"Error preloading next range\", ke);\n+                } catch (InterruptedException ie) {\n+                    Thread.currentThread().interrupt();\n+                    throw new IOException(\"Interrupted while preloading\", ie);\n+                }\n+                if (hasMoreElements) {\n+                    nextRange = getLedgerRangeByLevel(curL1Nodes, l2NodesIter.next());\n+                    if (nextRange.size() == 0) {\n+                        nextRange = null;\n+                    }\n+                } else {\n+                    iteratorDone = true;\n                 }\n-            } catch (Exception e) {\n-                throw new IOException(\"Error when check more elements\", e);\n             }\n-            return hasMoreElement;\n         }\n \n         @Override\n-        public LedgerRange next() throws IOException {\n-            if (!hasMoreElement) {\n+        synchronized public boolean hasNext() throws IOException {\n+            preload();\n+            return nextRange != null && !iteratorDone;\n+        }\n+\n+        @Override\n+        synchronized public LedgerRange next() throws IOException {\n+            if (!hasNext()) {\n                 throw new NoSuchElementException();\n             }\n-            return getLedgerRangeByLevel(curL1Nodes, l2NodesIter.next());\n+            LedgerRange r = nextRange;\n+            nextRange = null;\n+            return r;\n         }\n \n         /**\n@@ -454,13 +479,14 @@ LedgerRange getLedgerRangeByLevel(final String level1, final String level2)\n             } catch (InterruptedException e) {\n                 throw new IOException(\"Error when get child nodes from zk\", e);\n             }\n-            Set<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n+            NavigableSet<Long> zkActiveLedgers = ledgerListToSet(ledgerNodes, nodePath);\n             if (LOG.isDebugEnabled()) {\n                 LOG.debug(\"All active ledgers from ZK for hash node \"\n                           + level1 + \"/\" + level2 + \" : \" + zkActiveLedgers);\n             }\n-            return new LedgerRange(zkActiveLedgers,\n-                    getStartLedgerIdByLevel(level1, level2), getEndLedgerIdByLevel(level1, level2));\n+\n+            return new LedgerRange(zkActiveLedgers.subSet(getStartLedgerIdByLevel(level1, level2), true,\n+                                                          getEndLedgerIdByLevel(level1, level2), true));\n         }\n     }\n }"},{"sha":"4e552a519b73f6d7c7f37583082d9e264e112458","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","status":"modified","additions":8,"deletions":17,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,6 +21,8 @@\n import java.io.Closeable;\n import java.io.IOException;\n import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n \n import org.apache.zookeeper.AsyncCallback;\n import org.apache.bookkeeper.client.BKException;\n@@ -127,34 +129,23 @@ public void asyncProcessLedgers(Processor<Long> processor, AsyncCallback.VoidCal\n      * current scan.\n      */\n     public static class LedgerRange {\n-        // ledger start and end ranges\n-        private final long start;\n-        private final long end;\n-        public final static long NOLIMIT = -1;\n-\n         // returned ledgers\n-        private Set<Long> ledgers;\n+        private final SortedSet<Long> ledgers;\n \n         public LedgerRange(Set<Long> ledgers) {\n-            this(ledgers, NOLIMIT, NOLIMIT);\n-        }\n-\n-        public LedgerRange(Set<Long> ledgers, long start) {\n-            this(ledgers, start, NOLIMIT);\n+            this.ledgers = new TreeSet<Long>(ledgers);\n         }\n \n-        public LedgerRange(Set<Long> ledgers, long start, long end) {\n-            this.ledgers = ledgers;\n-            this.start = start;\n-            this.end = end;\n+        public int size() {\n+            return this.ledgers.size();\n         }\n \n         public Long start() {\n-            return this.start;\n+            return ledgers.first();\n         }\n \n         public Long end() {\n-            return this.end;\n+            return ledgers.last();\n         }\n \n         public Set<Long> getLedgers() {"},{"sha":"a5f54d51a544e0ff553aecb71edb4223d4b351ed","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -216,7 +216,7 @@ public void close() {\n \n         @Override\n         public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n-            ZkUtils.createFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n+            ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,\n                     CreateMode.EPHEMERAL_SEQUENTIAL, new StringCallback() {\n                         @Override\n                         public void processResult(int rc, String path, Object ctx, final String idPathName) {\n@@ -463,6 +463,7 @@ public void processResult(int rc, String path, Object ctx) {\n         class MSLedgerRangeIterator implements LedgerRangeIterator {\n             final CountDownLatch openCursorLatch = new CountDownLatch(1);\n             MetastoreCursor cursor = null;\n+            // last ledger id in previous range\n \n             MSLedgerRangeIterator() {\n                 MetastoreCallback<MetastoreCursor> openCursorCb = new MetastoreCallback<MetastoreCursor>() {\n@@ -480,24 +481,24 @@ public void complete(int rc, MetastoreCursor newCursor, Object ctx) {\n             }\n \n             @Override\n-            public boolean hasNext() {\n+            public boolean hasNext() throws IOException {\n                 try {\n                     openCursorLatch.await();\n                 } catch (InterruptedException ie) {\n                     LOG.error(\"Interrupted waiting for cursor to open\", ie);\n                     Thread.currentThread().interrupt();\n-                    return false;\n+                    throw new IOException(\"Interrupted waiting to read range\", ie);\n                 }\n                 if (cursor == null) {\n-                    return false;\n+                    throw new IOException(\"Failed to open ledger range cursor, check logs\");\n                 }\n                 return cursor.hasMoreEntries();\n             }\n \n             @Override\n             public LedgerRange next() throws IOException {\n                 try {\n-                    Set<Long> ledgerIds = new TreeSet<Long>();\n+                    SortedSet<Long> ledgerIds = new TreeSet<Long>();\n                     Iterator<MetastoreTableItem> iter = cursor.readEntries(maxEntriesPerScan);\n                     while (iter.hasNext()) {\n                         ledgerIds.add(key2LedgerId(iter.next().getKey()));"},{"sha":"951989c2f364e6574fbab5b8087e8fb4dea04fee","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -23,6 +23,8 @@\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n+import org.apache.bookkeeper.net.DNS;\n+\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.DataFormats.LedgerRereplicationLayoutFormat;\n import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n@@ -40,7 +42,6 @@\n import com.google.common.base.Joiner;\n import static com.google.common.base.Charsets.UTF_8;\n \n-import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n import java.util.concurrent.CountDownLatch;\n@@ -114,7 +115,7 @@ public ZkLedgerUnderreplicationManager(AbstractConfiguration conf, ZooKeeper zkc\n \n         LockDataFormat.Builder lockDataBuilder = LockDataFormat.newBuilder();\n         try {\n-            lockDataBuilder.setBookieId(InetAddress.getLocalHost().getHostAddress().toString());\n+            lockDataBuilder.setBookieId(DNS.getDefaultHost(\"default\"));\n         } catch (UnknownHostException uhe) {\n             // if we cant get the address, ignore. it's optional\n             // in the data structure in any case\n@@ -196,7 +197,7 @@ public static String getParentZnodePath(String base, long ledgerId) {\n         String subdir2 = String.format(\"%04x\", ledgerId >> 32 & 0xffff);\n         String subdir3 = String.format(\"%04x\", ledgerId >> 16 & 0xffff);\n         String subdir4 = String.format(\"%04x\", ledgerId & 0xffff);\n-        \n+\n         return String.format(\"%s/%s/%s/%s/%s\",\n                              base, subdir1, subdir2, subdir3, subdir4);\n     }\n@@ -428,7 +429,7 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n             cb.await();\n         }\n     }\n-    \n+\n     @Override\n     public void releaseUnderreplicatedLedger(long ledgerId) throws ReplicationException.UnavailableException {\n         LOG.debug(\"releaseLedger(ledgerId={})\", ledgerId);\n@@ -471,9 +472,8 @@ public void disableLedgerReplication()\n             throws ReplicationException.UnavailableException {\n         LOG.debug(\"disableLedegerReplication()\");\n         try {\n-            ZkUtils.createFullPathOptimistic(zkc, basePath + '/'\n-                    + BookKeeperConstants.DISABLE_NODE, \"\".getBytes(),\n-                    Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n+            String znode = basePath + '/' + BookKeeperConstants.DISABLE_NODE;\n+            zkc.create(znode, \"\".getBytes(UTF_8), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n             LOG.info(\"Auto ledger re-replication is disabled!\");\n         } catch (KeeperException.NodeExistsException ke) {\n             LOG.warn(\"AutoRecovery is already disabled!\", ke);"},{"sha":"a7cc953a33c59dc946af2786c1399d9787463103","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreCursor.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -24,22 +24,25 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n-import java.util.NavigableMap;\n import java.util.Set;\n+import java.util.SortedMap;\n import java.util.concurrent.ScheduledExecutorService;\n \n import org.apache.bookkeeper.metastore.MSException.Code;\n import org.apache.bookkeeper.versioning.Versioned;\n \n+import com.google.common.collect.ImmutableSortedMap;\n+\n class InMemoryMetastoreCursor implements MetastoreCursor {\n \n     private final ScheduledExecutorService scheduler;\n     private final Iterator<Map.Entry<String, Versioned<Value>>> iter;\n     private final Set<String> fields;\n \n-    public InMemoryMetastoreCursor(NavigableMap<String, Versioned<Value>> map, Set<String> fields,\n+    public InMemoryMetastoreCursor(SortedMap<String, Versioned<Value>> map, Set<String> fields,\n             ScheduledExecutorService scheduler) {\n-        this.iter = map.entrySet().iterator();\n+        // copy an map for iterator to avoid concurrent modification problem.\n+        this.iter = ImmutableSortedMap.copyOfSorted(map).entrySet().iterator();\n         this.fields = fields;\n         this.scheduler = scheduler;\n     }"},{"sha":"e6846e737e58237d75299f5bdc15a5fcd6a34a85","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java","status":"added","additions":356,"deletions":0,"changes":356,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/net/DNS.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -0,0 +1,356 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+// This code has been copied from hadoop-common 2.0.4-alpha\n+package org.apache.bookkeeper.net;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetAddress;\n+import java.net.NetworkInterface;\n+import java.net.SocketException;\n+import java.net.UnknownHostException;\n+import java.util.Collections;\n+import java.util.Enumeration;\n+import java.util.LinkedHashSet;\n+import java.util.Vector;\n+\n+import javax.naming.NamingException;\n+import javax.naming.directory.Attributes;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.InitialDirContext;\n+\n+/**\n+ *\n+ * A class that provides direct and reverse lookup functionalities, allowing\n+ * the querying of specific network interfaces or nameservers.\n+ *\n+ *\n+ */\n+public class DNS {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(DNS.class);\n+\n+    /**\n+     * The cached hostname -initially null.\n+     */\n+\n+    private static final String cachedHostname = resolveLocalHostname();\n+    private static final String cachedHostAddress = resolveLocalHostIPAddress();\n+    private static final String LOCALHOST = \"localhost\";\n+\n+    /**\n+     * Returns the hostname associated with the specified IP address by the\n+     * provided nameserver.\n+     *\n+     * Loopback addresses\n+     * @param hostIp The address to reverse lookup\n+     * @param ns The host name of a reachable DNS server\n+     * @return The host name associated with the provided IP\n+     * @throws NamingException If a NamingException is encountered\n+     */\n+    public static String reverseDns(InetAddress hostIp, String ns)\n+            throws NamingException {\n+        //\n+        // Builds the reverse IP lookup form\n+        // This is formed by reversing the IP numbers and appending in-addr.arpa\n+        //\n+        String[] parts = hostIp.getHostAddress().split(\"\\\\.\");\n+        String reverseIP = parts[3] + \".\" + parts[2] + \".\" + parts[1] + \".\"\n+            + parts[0] + \".in-addr.arpa\";\n+\n+        DirContext ictx = new InitialDirContext();\n+        Attributes attribute;\n+        try {\n+            attribute = ictx.getAttributes(\"dns://\"               // Use \"dns:///\" if the default\n+                                           + ((ns == null) ? \"\" : ns) +\n+                                           // nameserver is to be used\n+                                           \"/\" + reverseIP, new String[] { \"PTR\" });\n+        } finally {\n+            ictx.close();\n+        }\n+\n+        return attribute.get(\"PTR\").get().toString();\n+    }\n+\n+    /**\n+     * @return NetworkInterface for the given subinterface name (eg eth0:0)\n+     *    or null if no interface with the given name can be found\n+     */\n+    private static NetworkInterface getSubinterface(String strInterface)\n+            throws SocketException {\n+        Enumeration<NetworkInterface> nifs =\n+            NetworkInterface.getNetworkInterfaces();\n+\n+        while (nifs.hasMoreElements()) {\n+            Enumeration<NetworkInterface> subNifs =\n+                nifs.nextElement().getSubInterfaces();\n+\n+            while (subNifs.hasMoreElements()) {\n+                NetworkInterface nif = subNifs.nextElement();\n+                if (nif.getName().equals(strInterface)) {\n+                    return nif;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * @param nif network interface to get addresses for\n+     * @return set containing addresses for each subinterface of nif,\n+     *    see below for the rationale for using an ordered set\n+     */\n+    private static LinkedHashSet<InetAddress> getSubinterfaceInetAddrs(\n+                                                                       NetworkInterface nif) {\n+        LinkedHashSet<InetAddress> addrs = new LinkedHashSet<InetAddress>();\n+        Enumeration<NetworkInterface> subNifs = nif.getSubInterfaces();\n+        while (subNifs.hasMoreElements()) {\n+            NetworkInterface subNif = subNifs.nextElement();\n+            addrs.addAll(Collections.list(subNif.getInetAddresses()));\n+        }\n+        return addrs;\n+    }\n+\n+    /**\n+     * Like {@link DNS#getIPs(String, boolean), but returns all\n+     * IPs associated with the given interface and its subinterfaces.\n+     */\n+    public static String[] getIPs(String strInterface)\n+            throws UnknownHostException {\n+        return getIPs(strInterface, true);\n+    }\n+\n+    /**\n+     * Returns all the IPs associated with the provided interface, if any, in\n+     * textual form.\n+     *\n+     * @param strInterface\n+     *            The name of the network interface or sub-interface to query\n+     *            (eg eth0 or eth0:0) or the string \"default\"\n+     * @param returnSubinterfaces\n+     *            Whether to return IPs associated with subinterfaces of\n+     *            the given interface\n+     * @return A string vector of all the IPs associated with the provided\n+     *         interface. The local host IP is returned if the interface\n+     *         name \"default\" is specified or there is an I/O error looking\n+     *         for the given interface.\n+     * @throws UnknownHostException\n+     *             If the given interface is invalid\n+     *\n+     */\n+    public static String[] getIPs(String strInterface,\n+                                  boolean returnSubinterfaces) throws UnknownHostException {\n+        if (\"default\".equals(strInterface)) {\n+            return new String[] { cachedHostAddress };\n+        }\n+        NetworkInterface netIf;\n+        try {\n+            netIf = NetworkInterface.getByName(strInterface);\n+            if (netIf == null) {\n+                netIf = getSubinterface(strInterface);\n+            }\n+        } catch (SocketException e) {\n+            LOG.warn(\"I/O error finding interface \" + strInterface +\n+                     \": \" + e.getMessage());\n+            return new String[] { cachedHostAddress };\n+        }\n+        if (netIf == null) {\n+            throw new UnknownHostException(\"No such interface \" + strInterface);\n+        }\n+\n+        // NB: Using a LinkedHashSet to preserve the order for callers\n+        // that depend on a particular element being 1st in the array.\n+        // For example, getDefaultIP always returns the first element.\n+        LinkedHashSet<InetAddress> allAddrs = new LinkedHashSet<InetAddress>();\n+        allAddrs.addAll(Collections.list(netIf.getInetAddresses()));\n+        if (!returnSubinterfaces) {\n+            allAddrs.removeAll(getSubinterfaceInetAddrs(netIf));\n+        }\n+\n+        String ips[] = new String[allAddrs.size()];\n+        int i = 0;\n+        for (InetAddress addr : allAddrs) {\n+            ips[i++] = addr.getHostAddress();\n+        }\n+        return ips;\n+    }\n+\n+\n+    /**\n+     * Returns the first available IP address associated with the provided\n+     * network interface or the local host IP if \"default\" is given.\n+     *\n+     * @param strInterface\n+     *            The name of the network interface or subinterface to query\n+     *             (e.g. eth0 or eth0:0) or the string \"default\"\n+     * @return The IP address in text form, the local host IP is returned\n+     *         if the interface name \"default\" is specified\n+     * @throws UnknownHostException\n+     *             If the given interface is invalid\n+     */\n+    public static String getDefaultIP(String strInterface)\n+            throws UnknownHostException {\n+        String[] ips = getIPs(strInterface);\n+        return ips[0];\n+    }\n+\n+    /**\n+     * Returns all the host names associated by the provided nameserver with the\n+     * address bound to the specified network interface\n+     *\n+     * @param strInterface\n+     *            The name of the network interface or subinterface to query\n+     *            (e.g. eth0 or eth0:0)\n+     * @param nameserver\n+     *            The DNS host name\n+     * @return A string vector of all host names associated with the IPs tied to\n+     *         the specified interface\n+     * @throws UnknownHostException if the given interface is invalid\n+     */\n+    public static String[] getHosts(String strInterface, String nameserver)\n+            throws UnknownHostException {\n+        String[] ips = getIPs(strInterface);\n+        Vector<String> hosts = new Vector<String>();\n+        for (int ctr = 0; ctr < ips.length; ctr++) {\n+            try {\n+                hosts.add(reverseDns(InetAddress.getByName(ips[ctr]),\n+                                     nameserver));\n+            } catch (UnknownHostException ignored) {\n+            } catch (NamingException ignored) {\n+            }\n+        }\n+        if (hosts.isEmpty()) {\n+            LOG.warn(\"Unable to determine hostname for interface \" + strInterface);\n+            return new String[] { cachedHostname };\n+        } else {\n+            return hosts.toArray(new String[hosts.size()]);\n+        }\n+    }\n+\n+\n+    /**\n+     * Determine the local hostname; retrieving it from cache if it is known\n+     * If we cannot determine our host name, return \"localhost\"\n+     * @return the local hostname or \"localhost\"\n+     */\n+    private static String resolveLocalHostname() {\n+        String localhost;\n+        try {\n+            localhost = InetAddress.getLocalHost().getCanonicalHostName();\n+        } catch (UnknownHostException e) {\n+            LOG.warn(\"Unable to determine local hostname \"\n+                     + \"-falling back to \\\"\" + LOCALHOST + \"\\\"\", e);\n+            localhost = LOCALHOST;\n+        }\n+        return localhost;\n+    }\n+\n+\n+    /**\n+     * Get the IPAddress of the local host as a string.\n+     * This will be a loop back value if the local host address cannot be\n+     * determined.\n+     * If the loopback address of \"localhost\" does not resolve, then the system's\n+     * network is in such a state that nothing is going to work. A message is\n+     * logged at the error level and a null pointer returned, a pointer\n+     * which will trigger failures later on the application\n+     * @return the IPAddress of the local host or null for a serious problem.\n+     */\n+    private static String resolveLocalHostIPAddress() {\n+        String address;\n+        try {\n+            address = InetAddress.getLocalHost().getHostAddress();\n+        } catch (UnknownHostException e) {\n+            LOG.warn(\"Unable to determine address of the host\"\n+                     + \"-falling back to \\\"\" + LOCALHOST + \"\\\" address\", e);\n+            try {\n+                address = InetAddress.getByName(LOCALHOST).getHostAddress();\n+            } catch (UnknownHostException noLocalHostAddressException) {\n+                //at this point, deep trouble\n+                LOG.error(\"Unable to determine local loopback address \"\n+                          + \"of \\\"\" + LOCALHOST + \"\\\" \" +\n+                          \"-this system's network configuration is unsupported\", e);\n+                address = null;\n+            }\n+        }\n+        return address;\n+    }\n+\n+    /**\n+     * Returns all the host names associated by the default nameserver with the\n+     * address bound to the specified network interface\n+     *\n+     * @param strInterface\n+     *            The name of the network interface to query (e.g. eth0)\n+     * @return The list of host names associated with IPs bound to the network\n+     *         interface\n+     * @throws UnknownHostException\n+     *             If one is encountered while querying the default interface\n+     *\n+     */\n+    public static String[] getHosts(String strInterface)\n+            throws UnknownHostException {\n+        return getHosts(strInterface, null);\n+    }\n+\n+    /**\n+     * Returns the default (first) host name associated by the provided\n+     * nameserver with the address bound to the specified network interface\n+     *\n+     * @param strInterface\n+     *            The name of the network interface to query (e.g. eth0)\n+     * @param nameserver\n+     *            The DNS host name\n+     * @return The default host names associated with IPs bound to the network\n+     *         interface\n+     * @throws UnknownHostException\n+     *             If one is encountered while querying the default interface\n+     */\n+    public static String getDefaultHost(String strInterface, String nameserver)\n+            throws UnknownHostException {\n+        if (\"default\".equals(strInterface)) {\n+            return cachedHostname;\n+        }\n+\n+        if (\"default\".equals(nameserver)) {\n+            return getDefaultHost(strInterface);\n+        }\n+\n+        String[] hosts = getHosts(strInterface, nameserver);\n+        return hosts[0];\n+    }\n+\n+    /**\n+     * Returns the default (first) host name associated by the default\n+     * nameserver with the address bound to the specified network interface\n+     *\n+     * @param strInterface\n+     *            The name of the network interface to query (e.g. eth0).\n+     *            Must not be null.\n+     * @return The default host name associated with IPs bound to the network\n+     *         interface\n+     * @throws UnknownHostException\n+     *             If one is encountered while querying the default interface\n+     */\n+    public static String getDefaultHost(String strInterface)\n+            throws UnknownHostException {\n+        return getDefaultHost(strInterface, null);\n+    }\n+\n+}"},{"sha":"e97b06ac139839d2c4c120ca92f57679117c018c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -203,6 +203,7 @@ public void close() {\n             for (PerChannelBookieClient channel: channels.values()) {\n                 channel.close();\n             }\n+            channels.clear();\n         } finally {\n             closeLock.writeLock().unlock();\n         }"},{"sha":"846cfefb9e68836bb582473dce1e9cb30527d8b2","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","status":"modified","additions":19,"deletions":6,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServer.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -70,13 +70,11 @@\n     DeathWatcher deathWatcher;\n     static Logger LOG = LoggerFactory.getLogger(BookieServer.class);\n \n-    int exitCode = ExitCode.OK;\n-\n     // operation stats\n     final BKStats bkStats = BKStats.getInstance();\n     final boolean isStatsEnabled;\n     protected BookieServerBean jmxBkServerBean;\n-    private AutoRecoveryMain autoRecoveryMain = null;\n+    AutoRecoveryMain autoRecoveryMain = null;\n     private boolean isAutoRecoveryDaemonEnabled;\n \n     public BookieServer(ServerConfiguration conf) throws IOException,\n@@ -100,6 +98,10 @@ public void start() throws IOException, UnavailableException {\n         nioServerFactory = new NIOServerFactory(conf, this);\n \n         this.bookie.start();\n+        // fail fast, when bookie startup is not successful\n+        if (!this.bookie.isRunning()) {\n+            return;\n+        }\n         if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n             this.autoRecoveryMain.start();\n         }\n@@ -113,6 +115,7 @@ public void start() throws IOException, UnavailableException {\n         registerJMX();\n     }\n \n+    @VisibleForTesting\n     public InetSocketAddress getLocalAddress() {\n         try {\n             return Bookie.getBookieAddress(conf);\n@@ -147,7 +150,8 @@ public synchronized void shutdown() {\n             return;\n         }\n         nioServerFactory.shutdown();\n-        exitCode = bookie.shutdown();\n+        bookie.shutdown();\n+\n         if (isAutoRecoveryDaemonEnabled && this.autoRecoveryMain != null) {\n             this.autoRecoveryMain.shutdown();\n         }\n@@ -218,6 +222,12 @@ public void join() throws InterruptedException {\n     }\n \n     public int getExitCode() {\n+        int exitCode = bookie.getExitCode();\n+        if (exitCode == ExitCode.OK) {\n+            if (nioServerFactory.hasCrashed()) {\n+                return ExitCode.SERVER_EXCEPTION;\n+            }\n+        }\n         return exitCode;\n     }\n \n@@ -242,11 +252,14 @@ public void run() {\n                     // do nothing\n                 }\n                 if (!isBookieRunning()\n-                        || !isNioServerRunning()\n-                        || (isAutoRecoveryDaemonEnabled && !isAutoRecoveryRunning())) {\n+                    || !isNioServerRunning()) {\n                     shutdown();\n                     break;\n                 }\n+                if (isAutoRecoveryDaemonEnabled && !isAutoRecoveryRunning()) {\n+                    LOG.error(\"Autorecovery daemon has stopped. Please check the logs\");\n+                    isAutoRecoveryDaemonEnabled = false; // to avoid spamming the logs\n+                }\n             }\n         }\n     }"},{"sha":"1119af43c3426121ea231e610830379a636e9013","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerBean.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -74,11 +74,6 @@ public OpStatData getReadStats() {\n         return bks.bkStats.getOpStats(BKStats.STATS_READ).toOpStatData();\n     }\n \n-    @Override\n-    public String getServerState() {\n-        return bks.nioServerFactory.stats.getServerState();\n-    }\n-\n     @Override\n     public String getServerPort() {\n         try {"},{"sha":"054309fc5ed33861bbb2a7f220d65ae258ea622c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieServerMXBean.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -45,11 +45,6 @@\n      */\n     public OpStatData getReadStats();\n \n-    /**\n-     * @return server state\n-     */\n-    public String getServerState();\n-\n     /**\n      * @return server port\n      */"},{"sha":"1dd719163ba0a7cbf09a0d6b691d280c32827c1b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":22,"deletions":3,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -33,7 +33,9 @@\n import java.util.Iterator;\n import java.util.Set;\n import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n+import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n \n import org.slf4j.Logger;\n@@ -76,6 +78,7 @@\n \n     ServerConfiguration conf;\n \n+    private AtomicBoolean crashed = new AtomicBoolean(false);\n     private Object suspensionLock = new Object();\n     private boolean suspended = false;\n \n@@ -85,7 +88,13 @@ public NIOServerFactory(ServerConfiguration conf, PacketProcessor processor) thr\n         this.processor = processor;\n         this.conf = conf;\n         this.ss = ServerSocketChannel.open();\n-        ss.socket().bind(new InetSocketAddress(conf.getBookiePort()));\n+        if (conf.getListeningInterface() == null) {\n+            // listen on all interfaces\n+            ss.socket().bind(new InetSocketAddress(conf.getBookiePort()));\n+        } else {\n+            ss.socket().bind(Bookie.getBookieAddress(conf));\n+        }\n+        \n         ss.configureBlocking(false);\n         ss.register(selector, SelectionKey.OP_ACCEPT);\n     }\n@@ -101,7 +110,11 @@ private void addCnxn(Cnxn cnxn) {\n     }\n \n     public boolean isRunning() {\n-        return !ss.socket().isClosed();\n+        return !ss.socket().isClosed() && isAlive();\n+    }\n+\n+    boolean hasCrashed() {\n+        return crashed.get();\n     }\n \n     /**\n@@ -157,6 +170,10 @@ public void run() {\n                 selected.clear();\n             } catch (Exception e) {\n                 LOG.warn(\"Exception in server socket loop: \" + ss.socket().getInetAddress(), e);\n+            } catch (Throwable e) {\n+                LOG.error(\"Error in server socket loop: \" + ss.socket().getInetAddress(), e);\n+                crashed.set(true);\n+                break;\n             }\n         }\n         LOG.info(\"NIOServerCnxn factory exitedloop.\");\n@@ -226,7 +243,9 @@ void doIO(SelectionKey k) throws InterruptedException {\n                 if (k.isReadable()) {\n                     int rc = sock.read(incomingBuffer);\n                     if (rc < 0) {\n-                        throw new IOException(\"Read error\");\n+                        LOG.info(\"Peer closed connection. rc={} {}\", rc, sock);\n+                        close();\n+                        return;\n                     }\n                     if (incomingBuffer.remaining() == 0) {\n                         incomingBuffer.flip();"},{"sha":"0de47f1f493fbb50fba77cc951cbd4ab101ef3a5","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":78,"deletions":47,"changes":125,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -20,11 +20,14 @@\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.util.ArrayDeque;\n+import java.util.Set;\n+import java.util.Collections;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.Semaphore;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import com.google.common.collect.ImmutableSet;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n@@ -78,7 +81,6 @@\n     AtomicLong totalBytesOutstanding;\n     ClientSocketChannelFactory channelFactory;\n     OrderedSafeExecutor executor;\n-    private Timer readTimeoutTimer;\n \n     ConcurrentHashMap<CompletionKey, AddCompletion> addCompletions = new ConcurrentHashMap<CompletionKey, AddCompletion>();\n     ConcurrentHashMap<CompletionKey, ReadCompletion> readCompletions = new ConcurrentHashMap<CompletionKey, ReadCompletion>();\n@@ -90,11 +92,11 @@\n     Queue<GenericCallback<Void>> pendingOps = new ArrayDeque<GenericCallback<Void>>();\n     volatile Channel channel = null;\n \n-    private enum ConnectionState {\n+    enum ConnectionState {\n         DISCONNECTED, CONNECTING, CONNECTED, CLOSED\n             };\n \n-    private volatile ConnectionState state;\n+    volatile ConnectionState state;\n     private final ClientConfiguration conf;\n \n     public PerChannelBookieClient(OrderedSafeExecutor executor, ClientSocketChannelFactory channelFactory,\n@@ -110,7 +112,6 @@ public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor exec\n         this.totalBytesOutstanding = totalBytesOutstanding;\n         this.channelFactory = channelFactory;\n         this.state = ConnectionState.DISCONNECTED;\n-        this.readTimeoutTimer = null;\n     }\n \n     private void connect() {\n@@ -124,29 +125,36 @@ private void connect() {\n         bootstrap.setOption(\"keepAlive\", true);\n \n         ChannelFuture future = bootstrap.connect(addr);\n-\n         future.addListener(new ChannelFutureListener() {\n             @Override\n             public void operationComplete(ChannelFuture future) throws Exception {\n+                LOG.debug(\"Channel connected ({}) {}\", future.isSuccess(), future.getChannel());\n                 int rc;\n                 Queue<GenericCallback<Void>> oldPendingOps;\n \n                 synchronized (PerChannelBookieClient.this) {\n-\n                     if (future.isSuccess() && state == ConnectionState.CONNECTING) {\n-                        LOG.info(\"Successfully connected to bookie: \" + addr);\n+                        LOG.info(\"Successfully connected to bookie: {}\", future.getChannel());\n                         rc = BKException.Code.OK;\n                         channel = future.getChannel();\n                         state = ConnectionState.CONNECTED;\n                     } else if (future.isSuccess() && (state == ConnectionState.CLOSED\n                                                       || state == ConnectionState.DISCONNECTED)) {\n-                        LOG.error(\"Closed before connection completed, clean up: \" + addr);\n-                        future.getChannel().close();\n+                        LOG.warn(\"Closed before connection completed, clean up: {}, current state {}\",\n+                                 future.getChannel(), state);\n+                        closeChannel(future.getChannel());\n                         rc = BKException.Code.BookieHandleNotAvailableException;\n                         channel = null;\n+                    } else if (future.isSuccess() && state == ConnectionState.CONNECTED) {\n+                        LOG.debug(\"Already connected with another channel({}), so close the new channel({})\",\n+                                  channel, future.getChannel());\n+                        closeChannel(future.getChannel());\n+                        return; // pendingOps should have been completed when other channel connected\n                     } else {\n-                        LOG.error(\"Could not connect to bookie: \" + addr);\n+                        LOG.error(\"Could not connect to bookie: {}, current state {}\",\n+                                  future.getChannel(), state);\n                         rc = BKException.Code.BookieHandleNotAvailableException;\n+                        closeChannel(future.getChannel());\n                         channel = null;\n                         if (state != ConnectionState.CLOSED) {\n                             state = ConnectionState.DISCONNECTED;\n@@ -359,20 +367,28 @@ public void close() {\n     }\n \n     private void closeInternal(boolean permanent) {\n+        Channel toClose = null;\n         synchronized (this) {\n             if (permanent) {\n                 state = ConnectionState.CLOSED;\n             } else if (state != ConnectionState.CLOSED) {\n                 state = ConnectionState.DISCONNECTED;\n             }\n+            toClose = channel;\n+            channel = null;\n         }\n-        if (channel != null) {\n-            channel.close().awaitUninterruptibly();\n+        if (toClose != null) {\n+            closeChannel(toClose).awaitUninterruptibly();\n         }\n-        if (readTimeoutTimer != null) {\n-            readTimeoutTimer.stop();\n-            readTimeoutTimer = null;\n+    }\n+\n+    private ChannelFuture closeChannel(Channel c) {\n+        LOG.debug(\"Closing channel {}\", c);\n+        ReadTimeoutHandler timeout = c.getPipeline().get(ReadTimeoutHandler.class);\n+        if (timeout != null) {\n+            timeout.releaseExternalResources();\n         }\n+        return c.close();\n     }\n \n     void errorOutReadKey(final CompletionKey key) {\n@@ -381,10 +397,16 @@ void errorOutReadKey(final CompletionKey key) {\n             public void safeRun() {\n \n                 ReadCompletion readCompletion = readCompletions.remove(key);\n+                String bAddress = \"null\";\n+                Channel c = channel;\n+                if(c != null) {\n+                    bAddress = c.getRemoteAddress().toString();\n+                }\n \n                 if (readCompletion != null) {\n-                    LOG.error(\"Could not write  request for reading entry: \" + key.entryId + \" ledger-id: \"\n-                              + key.ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+                    LOG.debug(\"Could not write request for reading entry: {}\"\n+                              + \" ledger-id: {} bookie: {}\",\n+                              new Object[] { key.entryId, key.ledgerId, bAddress });\n \n                     readCompletion.cb.readEntryComplete(BKException.Code.BookieHandleNotAvailableException,\n                                                         key.ledgerId, key.entryId, null, readCompletion.ctx);\n@@ -403,14 +425,16 @@ public void safeRun() {\n \n                 if (addCompletion != null) {\n                     String bAddress = \"null\";\n-                    if(channel != null)\n-                        bAddress = channel.getRemoteAddress().toString();\n-                    LOG.error(\"Could not write request for adding entry: \" + key.entryId + \" ledger-id: \"\n-                              + key.ledgerId + \" bookie: \" + bAddress);\n+                    Channel c = channel;\n+                    if(c != null) {\n+                        bAddress = c.getRemoteAddress().toString();\n+                    }\n+                    LOG.debug(\"Could not write request for adding entry: {} ledger-id: {} bookie: {}\",\n+                              new Object[] { key.entryId, key.ledgerId, bAddress });\n \n                     addCompletion.cb.writeComplete(BKException.Code.BookieHandleNotAvailableException, key.ledgerId,\n                                                    key.entryId, addr, addCompletion.ctx);\n-                    LOG.error(\"Invoked callback method: \" + key.entryId);\n+                    LOG.debug(\"Invoked callback method: {}\", key.entryId);\n                 }\n             }\n \n@@ -453,11 +477,7 @@ void errorOutOutstandingEntries() {\n     public ChannelPipeline getPipeline() throws Exception {\n         ChannelPipeline pipeline = Channels.pipeline();\n \n-        if (readTimeoutTimer == null) {\n-            readTimeoutTimer = new HashedWheelTimer();\n-        }\n-\n-        pipeline.addLast(\"readTimeout\", new ReadTimeoutHandler(readTimeoutTimer, \n+        pipeline.addLast(\"readTimeout\", new ReadTimeoutHandler(new HashedWheelTimer(),\n                                                                conf.getReadTimeout()));\n         pipeline.addLast(\"lengthbasedframedecoder\", new LengthFieldBasedFrameDecoder(MAX_FRAME_LENGTH, 0, 4, 0, 4));\n         pipeline.addLast(\"mainhandler\", this);\n@@ -469,14 +489,17 @@ public ChannelPipeline getPipeline() throws Exception {\n      */\n     @Override\n     public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {\n-        LOG.info(\"Disconnected from bookie: \" + addr);\n-        errorOutOutstandingEntries();\n-        Channel c = this.channel;\n+        Channel c = ctx.getChannel();\n+        LOG.info(\"Disconnected from bookie channel {}\", c);\n         if (c != null) {\n-            c.close();\n+            closeChannel(c);\n         }\n+\n+        errorOutOutstandingEntries();\n+\n         synchronized (this) {\n-            if (state != ConnectionState.CLOSED) {\n+            if (this.channel == c\n+                && state != ConnectionState.CLOSED) {\n                 state = ConnectionState.DISCONNECTED;\n             }\n         }\n@@ -493,8 +516,8 @@ public void channelDisconnected(ChannelHandlerContext ctx, ChannelStateEvent e)\n     public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {\n         Throwable t = e.getCause();\n         if (t instanceof CorruptedFrameException || t instanceof TooLongFrameException) {\n-            LOG.error(\"Corrupted fram received from bookie: \"\n-                      + e.getChannel().getRemoteAddress());\n+            LOG.error(\"Corrupted frame received from bookie: {}\",\n+                      e.getChannel().getRemoteAddress());\n             return;\n         }\n         if (t instanceof ReadTimeoutException) {\n@@ -518,7 +541,14 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws\n             return;\n         }\n \n-        LOG.error(\"Unexpected exception caught by bookie client channel handler\", t);\n+        synchronized (this) {\n+            if (state == ConnectionState.CLOSED) {\n+                LOG.debug(\"Unexpected exception caught by bookie client channel handler, \"\n+                          + \"but the client is closed, so it isn't important\", t);\n+            } else {\n+                LOG.error(\"Unexpected exception caught by bookie client channel handler\", t);\n+            }\n+        }\n         // Since we are a library, cant terminate App here, can we?\n     }\n \n@@ -567,8 +597,8 @@ public void safeRun() {\n \n     void handleAddResponse(long ledgerId, long entryId, int rc) {\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Got response for add request from bookie: \" + addr + \" for ledger: \" + ledgerId + \" entry: \"\n-                      + entryId + \" rc: \" + rc);\n+            LOG.debug(\"Got response for add request from bookie: {} for ledger: {} entry: {}\"\n+                      + \" rc: {}\", new Object[] { addr, ledgerId, entryId, rc });\n         }\n \n         // convert to BKException code because thats what the uppper\n@@ -591,17 +621,17 @@ void handleAddResponse(long ledgerId, long entryId, int rc) {\n             rc = BKException.Code.WriteOnReadOnlyBookieException;\n             break;\n         default:\n-            LOG.error(\"Add for ledger: \" + ledgerId + \", entry: \" + entryId + \" failed on bookie: \" + addr\n-                      + \" with code: \" + rc);\n+            LOG.warn(\"Add for ledger: {}, entry: {} failed on bookie: {}\"\n+                    + \" with unknown code: {}\", new Object[] { ledgerId, entryId, addr, rc });\n             rc = BKException.Code.WriteException;\n             break;\n         }\n \n         AddCompletion ac;\n         ac = addCompletions.remove(new CompletionKey(ledgerId, entryId));\n         if (ac == null) {\n-            LOG.error(\"Unexpected add response received from bookie: \" + addr + \" for ledger: \" + ledgerId\n-                      + \", entry: \" + entryId + \" , ignoring\");\n+            LOG.debug(\"Unexpected add response received from bookie: {} for ledger: {}\"\n+                    + \", entry: {}, ignoring\", new Object[] { addr,  ledgerId, entryId });\n             return;\n         }\n \n@@ -613,8 +643,9 @@ void handleAddResponse(long ledgerId, long entryId, int rc) {\n \n     void handleReadResponse(long ledgerId, long entryId, int rc, ChannelBuffer buffer) {\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Got response for read request from bookie: \" + addr + \" for ledger: \" + ledgerId + \" entry: \"\n-                      + entryId + \" rc: \" + rc + \" entry length: \" + buffer.readableBytes());\n+            LOG.debug(\"Got response for read request from bookie: {} for ledger: {} entry: {}\"\n+                    + \" rc: {} entry length: {}\",\n+                    new Object[] { addr, ledgerId, entryId, rc, buffer.readableBytes() });\n         }\n \n         // convert to BKException code because thats what the uppper\n@@ -629,8 +660,8 @@ void handleReadResponse(long ledgerId, long entryId, int rc, ChannelBuffer buffe\n         } else if (rc == BookieProtocol.EUA) {\n             rc = BKException.Code.UnauthorizedAccessException;\n         } else {\n-            LOG.error(\"Read for ledger: \" + ledgerId + \", entry: \" + entryId + \" failed on bookie: \" + addr\n-                      + \" with code: \" + rc);\n+            LOG.warn(\"Read for ledger: {}, entry: {} failed on bookie: {}\"\n+                    + \" with unknown code: {}\", new Object[] { ledgerId, entryId, addr, rc });\n             rc = BKException.Code.ReadException;\n         }\n \n@@ -648,8 +679,8 @@ void handleReadResponse(long ledgerId, long entryId, int rc, ChannelBuffer buffe\n         }\n \n         if (readCompletion == null) {\n-            LOG.error(\"Unexpected read response received from bookie: \" + addr + \" for ledger: \" + ledgerId\n-                      + \", entry: \" + entryId + \" , ignoring\");\n+            LOG.debug(\"Unexpected read response received from bookie: {} for ledger: {}\"\n+                    + \", entry: {} , ignoring\", new Object[] { addr, ledgerId, entryId });\n             return;\n         }\n "},{"sha":"4920bb9dcddda46db9abf625219c7661740ae890","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","status":"modified","additions":0,"deletions":49,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/ServerStats.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -25,32 +25,10 @@\n     private long totalLatency = 0;\n     private long count = 0;\n \n-    public interface Provider {\n-        public long getOutstandingRequests();\n-\n-        public long getLastProcessedZxid();\n-    }\n-\n-    private Provider provider = null;\n-    private Object mutex = new Object();\n-\n     static public ServerStats getInstance() {\n         return instance;\n     }\n \n-    static public void registerAsConcrete() {\n-        setInstance(new ServerStats());\n-    }\n-\n-    static synchronized public void unregister() {\n-        instance = null;\n-    }\n-\n-    static synchronized protected void setInstance(ServerStats newInstance) {\n-        assert instance == null;\n-        instance = newInstance;\n-    }\n-\n     protected ServerStats() {\n     }\n \n@@ -69,17 +47,6 @@ synchronized public long getMaxLatency() {\n         return maxLatency;\n     }\n \n-    public long getOutstandingRequests() {\n-        synchronized (mutex) {\n-            return (provider != null) ? provider.getOutstandingRequests() : -1;\n-        }\n-    }\n-\n-    public long getLastProcessedZxid() {\n-        synchronized (mutex) {\n-            return (provider != null) ? provider.getLastProcessedZxid() : -1;\n-        }\n-    }\n \n     synchronized public long getPacketsReceived() {\n         return packetsReceived;\n@@ -89,31 +56,15 @@ synchronized public long getPacketsSent() {\n         return packetsSent;\n     }\n \n-    public String getServerState() {\n-        return \"standalone\";\n-    }\n-\n     @Override\n     public String toString() {\n         StringBuilder sb = new StringBuilder();\n         sb.append(\"Latency min/avg/max: \" + getMinLatency() + \"/\" + getAvgLatency() + \"/\" + getMaxLatency() + \"\\n\");\n         sb.append(\"Received: \" + getPacketsReceived() + \"\\n\");\n         sb.append(\"Sent: \" + getPacketsSent() + \"\\n\");\n-        if (provider != null) {\n-            sb.append(\"Outstanding: \" + getOutstandingRequests() + \"\\n\");\n-            sb.append(\"Zxid: 0x\" + Long.toHexString(getLastProcessedZxid()) + \"\\n\");\n-        }\n-        sb.append(\"Mode: \" + getServerState() + \"\\n\");\n         return sb.toString();\n     }\n \n-    // mutators\n-    public void setStatsProvider(Provider zk) {\n-        synchronized (mutex) {\n-            provider = zk;\n-        }\n-    }\n-\n     synchronized void updateLatency(long requestCreateTime) {\n         long latency = MathUtils.now() - requestCreateTime;\n         totalLatency += latency;"},{"sha":"86c0d894ee67e4b61f0cf0247c0bcdaababf4417","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":43,"deletions":31,"changes":74,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -44,6 +44,7 @@\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerChecker;\n import org.apache.bookkeeper.client.LedgerFragment;\n+import org.apache.bookkeeper.client.BookiesListener;\n import org.apache.bookkeeper.util.StringUtils;\n \n import org.apache.bookkeeper.util.ZkUtils;\n@@ -63,11 +64,8 @@\n import com.google.common.collect.Sets;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n-import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.AsyncCallback;\n-import org.apache.zookeeper.Watcher.Event.EventType;\n-import org.apache.zookeeper.Watcher.Event.KeeperState;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -78,10 +76,11 @@\n  * re-replication activities by keeping all the corresponding ledgers of the\n  * failed bookie as underreplicated znode in zk.\n  */\n-public class Auditor implements Watcher {\n+public class Auditor implements BookiesListener {\n     private static final Logger LOG = LoggerFactory.getLogger(Auditor.class);\n     private final ServerConfiguration conf;\n-    private final ZooKeeper zkc;\n+    private BookKeeper bkc;\n+    private BookKeeperAdmin admin;\n     private BookieLedgerIndexer bookieLedgerIndexer;\n     private LedgerManager ledgerManager;\n     private LedgerUnderreplicationManager ledgerUnderreplicationManager;\n@@ -91,7 +90,6 @@\n     public Auditor(final String bookieIdentifier, ServerConfiguration conf,\n                    ZooKeeper zkc) throws UnavailableException {\n         this.conf = conf;\n-        this.zkc = zkc;\n         initialize(conf, zkc);\n \n         executor = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n@@ -115,6 +113,9 @@ private void initialize(ServerConfiguration conf, ZooKeeper zkc)\n             this.ledgerUnderreplicationManager = ledgerManagerFactory\n                     .newLedgerUnderreplicationManager();\n \n+            this.bkc = new BookKeeper(new ClientConfiguration(conf), zkc);\n+            this.admin = new BookKeeperAdmin(bkc);\n+\n         } catch (CompatibilityException ce) {\n             throw new UnavailableException(\n                     \"CompatibilityException while initializing Auditor\", ce);\n@@ -173,8 +174,8 @@ public void run() {\n                                 Map<String, Set<Long>> ledgerDetails = generateBookie2LedgersIndex();\n                                 handleLostBookies(lostBookies, ledgerDetails);\n                             }\n-                        } catch (KeeperException ke) {\n-                            LOG.error(\"Exception while watching available bookies\", ke);\n+                        } catch (BKException bke) {\n+                            LOG.error(\"Exception getting bookie list\", bke);\n                         } catch (InterruptedException ie) {\n                             Thread.currentThread().interrupt();\n                             LOG.error(\"Interrupted while watching available bookies \", ie);\n@@ -237,6 +238,9 @@ public void run() {\n                         try {\n                             knownBookies = getAvailableBookies();\n                             auditingBookies(knownBookies);\n+                        } catch (BKException bke) {\n+                            LOG.error(\"Exception getting bookie list\", bke);\n+                            submitShutdownTask();\n                         } catch (KeeperException ke) {\n                             LOG.error(\"Exception while watching available bookies\", ke);\n                             submitShutdownTask();\n@@ -261,10 +265,21 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n             cb.await();\n         }\n     }\n-    \n-    private List<String> getAvailableBookies() throws KeeperException,\n-            InterruptedException {\n-        return zkc.getChildren(conf.getZkAvailableBookiesPath(), this);\n+\n+    private List<String> getAvailableBookies() throws BKException {\n+        // Get the available bookies, also watch for further changes\n+        // Watching on only available bookies is sufficient, as changes in readonly bookies also changes in available\n+        // bookies\n+        admin.notifyBookiesChanged(this);\n+        Collection<InetSocketAddress> availableBkAddresses = admin.getAvailableBookies();\n+        Collection<InetSocketAddress> readOnlyBkAddresses = admin.getReadOnlyBookies();\n+        availableBkAddresses.addAll(readOnlyBkAddresses);\n+\n+        List<String> availableBookies = new ArrayList<String>();\n+        for (InetSocketAddress addr : availableBkAddresses) {\n+            availableBookies.add(StringUtils.addrToString(addr));\n+        }\n+        return availableBookies;\n     }\n \n     private void auditingBookies(List<String> availableBookies)\n@@ -287,8 +302,7 @@ private void auditingBookies(List<String> availableBookies)\n     }\n \n     private void handleLostBookies(Collection<String> lostBookies,\n-            Map<String, Set<Long>> ledgerDetails) throws BKAuditException,\n-            KeeperException, InterruptedException {\n+            Map<String, Set<Long>> ledgerDetails) throws BKAuditException {\n         LOG.info(\"Following are the failed bookies: \" + lostBookies\n                 + \" and searching its ledgers for re-replication\");\n \n@@ -300,7 +314,7 @@ private void handleLostBookies(Collection<String> lostBookies,\n     }\n \n     private void publishSuspectedLedgers(String bookieIP, Set<Long> ledgers)\n-            throws KeeperException, InterruptedException, BKAuditException {\n+            throws BKAuditException {\n         if (null == ledgers || ledgers.size() == 0) {\n             // there is no ledgers available for this bookie and just\n             // ignoring the bookie failures\n@@ -349,12 +363,7 @@ public void operationComplete(int rc, Set<LedgerFragment> fragments) {\n             } catch (BKException bke) {\n                 LOG.error(\"Error closing lh\", bke);\n                 if (rc == BKException.Code.OK) {\n-                    rc = BKException.Code.ZKException;\n-                }\n-            } catch (KeeperException ke) {\n-                LOG.error(\"Couldn't publish suspected ledger\", ke);\n-                if (rc == BKException.Code.OK) {\n-                    rc = BKException.Code.ZKException;\n+                    rc = BKException.Code.ReplicationException;\n                 }\n             } catch (InterruptedException ie) {\n                 LOG.error(\"Interrupted publishing suspected ledger\", ie);\n@@ -365,7 +374,7 @@ public void operationComplete(int rc, Set<LedgerFragment> fragments) {\n             } catch (BKAuditException bkae) {\n                 LOG.error(\"Auditor exception publishing suspected ledger\", bkae);\n                 if (rc == BKException.Code.OK) {\n-                    rc = BKException.Code.ZKException;\n+                    rc = BKException.Code.ReplicationException;\n                 }\n             }\n \n@@ -377,7 +386,7 @@ public void operationComplete(int rc, Set<LedgerFragment> fragments) {\n      * List all the ledgers and check them individually. This should not\n      * be run very often.\n      */\n-    private void checkAllLedgers() throws BKAuditException, BKException,\n+    void checkAllLedgers() throws BKAuditException, BKException,\n             IOException, InterruptedException, KeeperException {\n         ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(conf.getZkTimeout());\n         ZooKeeper newzk = ZkUtils.createConnectedZookeeperClient(conf.getZkServers(), w);\n@@ -413,6 +422,11 @@ public void process(final Long ledgerId,\n                     try {\n                         lh = admin.openLedgerNoRecovery(ledgerId);\n                         checker.checkLedger(lh, new ProcessLostFragmentsCb(lh, callback));\n+                    } catch (BKException.BKNoSuchLedgerExistsException bknsle) {\n+                        LOG.debug(\"Ledger was deleted before we could check it\", bknsle);\n+                        callback.processResult(BKException.Code.OK,\n+                                               null, null);\n+                        return;\n                     } catch (BKException bke) {\n                         LOG.error(\"Couldn't open ledger \" + ledgerId, bke);\n                         callback.processResult(BKException.Code.BookieHandleNotAvailableException,\n@@ -464,14 +478,8 @@ public void processResult(int rc, String s, Object obj) {\n     }\n \n     @Override\n-    public void process(WatchedEvent event) {\n-        // listen children changed event from ZooKeeper\n-        if (event.getState() == KeeperState.Disconnected\n-                || event.getState() == KeeperState.Expired) {\n-            submitShutdownTask();\n-        } else if (event.getType() == EventType.NodeChildrenChanged) {\n-            submitAuditTask();\n-        }\n+    public void availableBookiesChanged() {\n+        submitAuditTask();\n     }\n \n     /**\n@@ -486,9 +494,13 @@ public void shutdown() {\n                 LOG.warn(\"Executor not shutting down, interrupting\");\n                 executor.shutdownNow();\n             }\n+            admin.close();\n+            bkc.close();\n         } catch (InterruptedException ie) {\n             Thread.currentThread().interrupt();\n             LOG.warn(\"Interrupted while shutting down auditor bookie\", ie);\n+        } catch (BKException bke) {\n+            LOG.warn(\"Exception while shutting down auditor bookie\", bke);\n         }\n     }\n "},{"sha":"55c57af95c1cb671a88a5383acaee4a0d2b55062","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -163,8 +163,7 @@ private void createElectorPath() throws UnavailableException {\n     private class ElectionWatcher implements Watcher {\n         @Override\n         public void process(WatchedEvent event) {\n-            if (event.getState() == KeeperState.Disconnected\n-                || event.getState() == KeeperState.Expired) {\n+            if (event.getState() == KeeperState.Expired) {\n                 LOG.error(\"Lost ZK connection, shutting down\");\n                 submitShutdownTask();\n             } else if (event.getType() == EventType.NodeDeleted) {\n@@ -212,6 +211,9 @@ void submitElectionTask() {\n \n         Runnable r = new Runnable() {\n                 public void run() {\n+                    if (!running.get()) {\n+                        return;\n+                    }\n                     try {\n                         // creating my vote in zk. Vote format is 'V_numeric'\n                         createMyVote();"},{"sha":"43b4f6358d8ea474018d19e2f4f4eb7d327678c8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -53,7 +53,7 @@\n             .getLogger(AutoRecoveryMain.class);\n \n     private ServerConfiguration conf;\n-    private ZooKeeper zk;\n+    ZooKeeper zk;\n     AuditorElector auditorElector;\n     ReplicationWorker replicationWorker;\n     private AutoRecoveryDeathWatcher deathWatcher;"},{"sha":"1ac4be8e28c6130d1a69c250078dc52639a74503","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -138,8 +138,7 @@ private void rereplicate() throws InterruptedException, BKException,\n             UnavailableException {\n         long ledgerIdToReplicate = underreplicationManager\n                 .getLedgerToRereplicate();\n-        LOG.info(\"Going to replicate the fragments of the ledger: \"\n-                + ledgerIdToReplicate);\n+        LOG.debug(\"Going to replicate the fragments of the ledger: {}\", ledgerIdToReplicate);\n         LedgerHandle lh;\n         try {\n             lh = admin.openLedgerNoRecovery(ledgerIdToReplicate);\n@@ -169,8 +168,7 @@ private void rereplicate() throws InterruptedException, BKException,\n             return;\n         }\n         Set<LedgerFragment> fragments = getUnderreplicatedFragments(lh);\n-        LOG.info(\"Founds fragments \" + fragments\n-                + \" for replication from ledger: \" + ledgerIdToReplicate);\n+        LOG.debug(\"Founds fragments {} for replication from ledger: {}\", fragments, ledgerIdToReplicate);\n \n         boolean foundOpenFragments = false;\n         for (LedgerFragment ledgerFragment : fragments) {\n@@ -179,9 +177,8 @@ private void rereplicate() throws InterruptedException, BKException,\n                 continue;\n             } else if (isTargetBookieExistsInFragmentEnsemble(lh,\n                     ledgerFragment)) {\n-                LOG.info(\"Target Bookie[\" + targetBookie\n-                        + \"] found in the fragment ensemble:\"\n-                        + ledgerFragment.getEnsemble());\n+                LOG.debug(\"Target Bookie[{}] found in the fragment ensemble: {}\", targetBookie,\n+                        ledgerFragment.getEnsemble());\n                 continue;\n             }\n             try {\n@@ -192,6 +189,9 @@ private void rereplicate() throws InterruptedException, BKException,\n             } catch (BKException.BKLedgerRecoveryException e) {\n                 LOG.warn(\"BKLedgerRecoveryException \"\n                         + \"while replicating the fragment\", e);\n+                if (admin.getReadOnlyBookies().contains(targetBookie)) {\n+                    throw new BKException.BKWriteOnReadOnlyBookieException();\n+                }\n             }\n         }\n \n@@ -246,6 +246,8 @@ public void run() {\n                     Thread.currentThread().interrupt();\n                     LOG.info(\"InterruptedException \"\n                             + \"while replicating fragments\", e);\n+                } catch (BKNoSuchLedgerExistsException bknsle) {\n+                    LOG.debug(\"Ledger was deleted, safe to continue\", bknsle);\n                 } catch (BKException e) {\n                     LOG.error(\"BKException while fencing the ledger\"\n                             + \" for rereplication of postponed ledgers\", e);"},{"sha":"76d89ad83bb765e29140e4a57e5f27185bc0230d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/LocalBookKeeper.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -147,6 +147,7 @@ private void runBookies(ServerConfiguration baseConf) throws IOException,\n                                   + ZooKeeperDefaultPort);\n             bsConfs[i].setJournalDirName(tmpDirs[i].getPath());\n             bsConfs[i].setLedgerDirNames(new String[] { tmpDirs[i].getPath() });\n+            bsConfs[i].setAllowLoopback(true);\n \n             bs[i] = new BookieServer(bsConfs[i]);\n             bs[i].start();"},{"sha":"de0c32841e3af6e3e0622ac93f44ac1539f66dbd","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -32,13 +32,16 @@ public static int signSafeMod(long dividend, int divisor) {\n         return mod;\n \n     }\n-    \n+\n     /**\n      * Current time from some arbitrary time base in the past, counting in\n      * milliseconds, and not affected by settimeofday or similar system clock\n      * changes. This is appropriate to use when computing how much longer to\n      * wait for an interval to expire.\n-     * \n+     *\n+     * NOTE: only use it for measuring.\n+     * http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#nanoTime%28%29\n+     *\n      * @return current time in milliseconds.\n      */\n     public static long now() {"},{"sha":"9608240c70c01ac7ab1805f7aa1ee999cbc76a4c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","status":"modified","additions":53,"deletions":39,"changes":92,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/ZkUtils.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -25,6 +25,9 @@\n import java.io.IOException;\n import java.util.List;\n \n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n import org.apache.zookeeper.CreateMode;\n@@ -42,8 +45,11 @@\n  */\n public class ZkUtils {\n     private static final Logger LOG = LoggerFactory.getLogger(ZkUtils.class);\n+\n     /**\n-     * Create zookeeper path recursively\n+     * Asynchronously create zookeeper path recursively and optimistically.\n+     *\n+     * @see #createFullPathOptimistic(ZooKeeper,String,byte[],List<ACL>,CreateMode)\n      *\n      * @param zk\n      *          Zookeeper client\n@@ -60,7 +66,7 @@\n      * @param ctx\n      *          Context object\n      */\n-    public static void createFullPathOptimistic(\n+    public static void asyncCreateFullPathOptimistic(\n         final ZooKeeper zk, final String originalPath, final byte[] data,\n         final List<ACL> acl, final CreateMode createMode,\n         final AsyncCallback.StringCallback callback, final Object ctx) {\n@@ -77,24 +83,66 @@ public void processResult(int rc, String path, Object ctx, String name) {\n                 // Since I got a nonode, it means that my parents don't exist\n                 // create mode is persistent since ephemeral nodes can't be\n                 // parents\n-                createFullPathOptimistic(zk, new File(originalPath).getParent().replace(\"\\\\\", \"/\"), new byte[0], acl,\n+                String parent = new File(originalPath).getParent().replace(\"\\\\\", \"/\");\n+                asyncCreateFullPathOptimistic(zk, parent, new byte[0], acl,\n                         CreateMode.PERSISTENT, new StringCallback() {\n \n                             @Override\n                             public void processResult(int rc, String path, Object ctx, String name) {\n                                 if (rc == Code.OK.intValue() || rc == Code.NODEEXISTS.intValue()) {\n                                     // succeeded in creating the parent, now\n                                     // create the original path\n-                                    createFullPathOptimistic(zk, originalPath, data, acl, createMode, callback,\n-                                            ctx);\n+                                    asyncCreateFullPathOptimistic(zk, originalPath, data,\n+                                            acl, createMode, callback, ctx);\n                                 } else {\n                                     callback.processResult(rc, path, ctx, name);\n                                 }\n                             }\n                         }, ctx);\n             }\n         }, ctx);\n+    }\n \n+    /**\n+     * Create zookeeper path recursively and optimistically. This method can throw\n+     * any of the KeeperExceptions which can be thrown by ZooKeeper#create.\n+     * KeeperException.NodeExistsException will only be thrown if the full path specified\n+     * by _path_ already exists. The existence of any parent znodes is not an error\n+     * condition.\n+     *\n+     * @param zkc\n+     *            - ZK instance\n+     * @param path\n+     *            - znode path\n+     * @param data\n+     *            - znode data\n+     * @param acl\n+     *            - Acl of the zk path\n+     * @param createMode\n+     *            - Create mode of zk path\n+     * @throws KeeperException\n+     *             if the server returns a non-zero error code, or invalid ACL\n+     * @throws InterruptedException\n+     *             if the transaction is interrupted\n+     */\n+    public static void createFullPathOptimistic(ZooKeeper zkc, String path,\n+            byte[] data, final List<ACL> acl, final CreateMode createMode)\n+            throws KeeperException, InterruptedException {\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicInteger rc = new AtomicInteger(Code.OK.intValue());\n+        asyncCreateFullPathOptimistic(zkc, path, data, acl, createMode,\n+                                      new StringCallback() {\n+                                          @Override\n+                                          public void processResult(int rc2, String path,\n+                                                                    Object ctx, String name) {\n+                                              rc.set(rc2);\n+                                              latch.countDown();\n+                                          }\n+                                      }, null);\n+        latch.await();\n+        if (rc.get() != Code.OK.intValue()) {\n+            throw KeeperException.create(Code.get(rc.get()));\n+        }\n     }\n \n     private static class GetChildrenCtx {\n@@ -206,38 +254,4 @@ public static ZooKeeper createConnectedZookeeperClient(String servers,\n         }\n         return newZk;\n     }\n-\n-    /**\n-     * Utility to create the complete znode path synchronously\n-     * \n-     * @param zkc\n-     *            - ZK instance\n-     * @param path\n-     *            - znode path\n-     * @param data\n-     *            - znode data\n-     * @param acl\n-     *            - Acl of the zk path\n-     * @param createMode\n-     *            - Create mode of zk path\n-     * @throws KeeperException\n-     *             if the server returns a non-zero error code, or invalid ACL\n-     * @throws InterruptedException\n-     *             if the transaction is interrupted\n-     */\n-    public static void createFullPathOptimistic(ZooKeeper zkc, String path,\n-            byte[] data, final List<ACL> acl, final CreateMode createMode)\n-            throws KeeperException, InterruptedException {\n-        try {\n-            zkc.create(path, data, acl, createMode);\n-        } catch (KeeperException.NoNodeException nne) {\n-            int lastSlash = path.lastIndexOf('/');\n-            if (lastSlash <= 0) {\n-                throw nne;\n-            }\n-            String parent = path.substring(0, lastSlash);\n-            createFullPathOptimistic(zkc, parent, new byte[0], acl, createMode);\n-            zkc.create(path, data, acl, createMode);\n-        }\n-    }\n }"},{"sha":"bdc54cd1ceb91b4f820c5066daf54c6e55276863","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -33,7 +33,9 @@\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.client.BookKeeperAdmin;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.test.ZooKeeperUtil;\n import org.apache.commons.io.FileUtils;\n@@ -84,6 +86,38 @@ void testRegisterBookie(ServerConfiguration conf) throws IOException {\n         }\n     }\n \n+    /**\n+     * Verify the bookie server exit code. On ZooKeeper exception, should return\n+     * exit code ZK_REG_FAIL = 4\n+     */\n+    @Test(timeout = 20000)\n+    public void testExitCodeZK_REG_FAIL() throws Exception {\n+        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+\n+        final ServerConfiguration conf = new ServerConfiguration()\n+                .setZkServers(null).setJournalDirName(tmpDir.getPath())\n+                .setLedgerDirNames(new String[] { tmpDir.getPath() });\n+\n+        // simulating ZooKeeper exception by assigning a closed zk client to bk\n+        BookieServer bkServer = new BookieServer(conf) {\n+            protected Bookie newBookie(ServerConfiguration conf)\n+                    throws IOException, KeeperException, InterruptedException,\n+                    BookieException {\n+                MockBookie bookie = new MockBookie(conf);\n+                bookie.zk = zkc;\n+                zkc.close();\n+                return bookie;\n+            };\n+        };\n+\n+        bkServer.start();\n+        bkServer.join();\n+        Assert.assertEquals(\"Failed to return ExitCode.ZK_REG_FAIL\",\n+                ExitCode.ZK_REG_FAIL, bkServer.getExitCode());\n+    }\n+\n     /**\n      * Verify the bookie reg. Restarting bookie server will wait for the session\n      * timeout when previous reg node exists in zk. On zNode delete event,\n@@ -260,6 +294,41 @@ public void testStartBookieWithoutZKServer() throws Exception {\n         }\n     }\n \n+    /**\n+     * Verify that if I try to start a bookie without zk initialized, it won't\n+     * prevent me from starting the bookie when zk is initialized\n+     */\n+    @Test(timeout = 20000)\n+    public void testStartBookieWithoutZKInitialized() throws Exception {\n+        File tmpDir = File.createTempFile(\"bookie\", \"test\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+        final String ZK_ROOT = \"/ledgers2\";\n+\n+        final ServerConfiguration conf = new ServerConfiguration()\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n+            .setLedgerDirNames(new String[] { tmpDir.getPath() });\n+        conf.setZkLedgersRootPath(ZK_ROOT);\n+        try {\n+            try {\n+                new Bookie(conf);\n+                fail(\"Should throw NoNodeException\");\n+            } catch (Exception e) {\n+                // shouldn't be able to start\n+            }\n+            ClientConfiguration clientConf = new ClientConfiguration();\n+            clientConf.setZkServers(zkutil.getZooKeeperConnectString());\n+            clientConf.setZkLedgersRootPath(ZK_ROOT);\n+            BookKeeperAdmin.format(clientConf, false, false);\n+\n+            Bookie b = new Bookie(conf);\n+            b.shutdown();\n+        } finally {\n+            FileUtils.deleteDirectory(tmpDir);\n+        }\n+    }\n+\n     private void createNewZKClient() throws Exception {\n         // create a zookeeper client\n         LOG.debug(\"Instantiate ZK Client\");"},{"sha":"6f641b6872a197191bef339f503195c0c5b216c2","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieShutdownTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -0,0 +1,122 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.bookie;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+\n+import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+\n+import java.io.IOException;\n+import org.apache.zookeeper.KeeperException;\n+\n+import java.nio.ByteBuffer;\n+import org.junit.Test;\n+import org.junit.Assert;\n+\n+public class BookieShutdownTest extends BookKeeperClusterTestCase {\n+\n+    public BookieShutdownTest() {\n+        super(1);\n+    }\n+\n+    /**\n+     * Test whether Bookie can be shutdown when the call comes inside bookie thread.\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testBookieShutdownFromBookieThread() throws Exception {\n+        ServerConfiguration conf = bsConfs.get(0);\n+        killBookie(0);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final CountDownLatch shutdownComplete = new CountDownLatch(1);\n+        Bookie bookie = new Bookie(conf) {\n+            @Override\n+            public void run() {\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException e) {\n+                    // Ignore\n+                }\n+                triggerBookieShutdown(ExitCode.BOOKIE_EXCEPTION);\n+            }\n+\n+            @Override\n+            synchronized int shutdown(int exitCode) {\n+                super.shutdown(exitCode);\n+                shutdownComplete.countDown();\n+                return exitCode;\n+            }\n+        };\n+        bookie.start();\n+        // after 1 sec stop .\n+        Thread.sleep(1000);\n+        latch.countDown();\n+        shutdownComplete.await(5000, TimeUnit.MILLISECONDS);\n+    }\n+\n+    /**\n+     * Test whether bookieserver returns the correct error code when it crashes.\n+     */\n+    @Test(timeout=60000)\n+    public void testBookieServerThreadError() throws Exception {\n+        ServerConfiguration conf = bsConfs.get(0);\n+        killBookie(0);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final CountDownLatch shutdownComplete = new CountDownLatch(1);\n+        // simulating ZooKeeper exception by assigning a closed zk client to bk\n+        BookieServer bkServer = new BookieServer(conf) {\n+            protected Bookie newBookie(ServerConfiguration conf)\n+                    throws IOException, KeeperException, InterruptedException,\n+                    BookieException {\n+                return new Bookie(conf) {\n+                    @Override\n+                    public void addEntry(ByteBuffer entry, WriteCallback cb,\n+                                         Object ctx, byte[] masterKey)\n+                            throws IOException, BookieException {\n+                        throw new OutOfMemoryError();\n+                    }\n+                };\n+            }\n+        };\n+        bkServer.start();\n+\n+        LedgerHandle lh = bkc.createLedger(1, 1, BookKeeper.DigestType.CRC32, \"passwd\".getBytes());\n+        lh.asyncAddEntry(\"test\".getBytes(), new AddCallback() {\n+                @Override\n+                public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                    // dont care, only trying to trigger OOM\n+                }\n+            }, null);\n+        bkServer.join();\n+        Assert.assertFalse(\"Should have died\", bkServer.isRunning());\n+        Assert.assertEquals(\"Should have died with server exception code\",\n+                            ExitCode.SERVER_EXCEPTION, bkServer.getExitCode());\n+    }\n+}"},{"sha":"e9e07ad64425f4b2c17652591bf3ed160d21e43a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":143,"deletions":1,"changes":144,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,15 +21,29 @@\n  *\n  */\n import java.io.File;\n-import java.util.Arrays;\n+import java.io.IOException;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Collections;\n import java.util.Enumeration;\n \n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.client.LedgerEntry;\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.util.TestUtils;\n \n+import org.apache.zookeeper.AsyncCallback;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n+import org.apache.bookkeeper.versioning.Version;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -292,4 +306,132 @@ public void testCompactionSmallEntryLogs() throws Exception {\n         // since those entries has been compacted to new entry log\n         verifyLedger(lhs[0].getId(), 0, lhs[0].getLastAddConfirmed());\n     }\n+\n+    /**\n+     * Test that compaction doesnt add to index without having persisted\n+     * entrylog first. This is needed because compaction doesn't go through the journal.\n+     * {@see https://issues.apache.org/jira/browse/BOOKKEEPER-530}\n+     * {@see https://issues.apache.org/jira/browse/BOOKKEEPER-664}\n+     */\n+    @Test(timeout=60000)\n+    public void testCompactionSafety() throws Exception {\n+        tearDown(); // I dont want the test infrastructure\n+        ServerConfiguration conf = new ServerConfiguration();\n+        final Set<Long> ledgers = Collections.newSetFromMap(new ConcurrentHashMap<Long, Boolean>());\n+        LedgerManager manager = new LedgerManager() {\n+                @Override\n+                public void createLedger(LedgerMetadata metadata, GenericCallback<Long> cb) {\n+                    unsupported();\n+                }\n+                @Override\n+                public void removeLedgerMetadata(long ledgerId, Version version,\n+                                                 GenericCallback<Void> vb) {\n+                    unsupported();\n+                }\n+                @Override\n+                public void readLedgerMetadata(long ledgerId, GenericCallback<LedgerMetadata> readCb) {\n+                    unsupported();\n+                }\n+                @Override\n+                public void writeLedgerMetadata(long ledgerId, LedgerMetadata metadata,\n+                        GenericCallback<Void> cb) {\n+                    unsupported();\n+                }\n+                @Override\n+                public void asyncProcessLedgers(Processor<Long> processor,\n+                                                AsyncCallback.VoidCallback finalCb,\n+                        Object context, int successRc, int failureRc) {\n+                    unsupported();\n+                }\n+                @Override\n+                public void close() throws IOException {}\n+\n+                void unsupported() {\n+                    LOG.error(\"Unsupported operation called\", new Exception());\n+                    throw new RuntimeException(\"Unsupported op\");\n+                }\n+                @Override\n+                public LedgerRangeIterator getLedgerRanges() {\n+                    final AtomicBoolean hasnext = new AtomicBoolean(true);\n+                    return new LedgerManager.LedgerRangeIterator() {\n+                        @Override\n+                        public boolean hasNext() throws IOException {\n+                            return hasnext.get();\n+                        }\n+                        @Override\n+                        public LedgerManager.LedgerRange next() throws IOException {\n+                            hasnext.set(false);\n+                            return new LedgerManager.LedgerRange(ledgers);\n+                        }\n+                    };\n+                 }\n+            };\n+\n+        File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+        File curDir = Bookie.getCurrentDirectory(tmpDir);\n+        Bookie.checkDirectoryStructure(curDir);\n+        conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n+\n+        conf.setEntryLogSizeLimit(EntryLogger.LOGFILE_HEADER_SIZE + 3 * (4+ENTRY_SIZE));\n+        conf.setGcWaitTime(100);\n+        conf.setMinorCompactionThreshold(0.7f);\n+        conf.setMajorCompactionThreshold(0.0f);\n+        conf.setMinorCompactionInterval(1);\n+        conf.setMajorCompactionInterval(10);\n+        conf.setPageLimit(1);\n+\n+        final byte[] KEY = \"foobar\".getBytes();\n+        File log0 = new File(curDir, \"0.log\");\n+        LedgerDirsManager dirs = new LedgerDirsManager(conf);\n+        assertFalse(\"Log shouldnt exist\", log0.exists());\n+        InterleavedLedgerStorage storage = new InterleavedLedgerStorage(conf, manager, dirs);\n+        ledgers.add(1l);\n+        ledgers.add(2l);\n+        ledgers.add(3l);\n+        storage.setMasterKey(1, KEY);\n+        storage.setMasterKey(2, KEY);\n+        storage.setMasterKey(3, KEY);\n+        storage.addEntry(genEntry(1, 1, ENTRY_SIZE));\n+        storage.addEntry(genEntry(2, 1, ENTRY_SIZE));\n+        storage.addEntry(genEntry(2, 2, ENTRY_SIZE));\n+        storage.addEntry(genEntry(3, 2, ENTRY_SIZE));\n+        storage.flush();\n+        storage.shutdown();\n+\n+        assertTrue(\"Log should exist\", log0.exists());\n+        ledgers.remove(2l);\n+        ledgers.remove(3l);\n+\n+        storage = new InterleavedLedgerStorage(conf, manager, dirs);\n+        storage.start();\n+        for (int i = 0; i < 10; i++) {\n+            if (!log0.exists()) {\n+                break;\n+            }\n+            Thread.sleep(1000);\n+            storage.entryLogger.flush(); // simulate sync thread\n+        }\n+        assertFalse(\"Log shouldnt exist\", log0.exists());\n+\n+        ledgers.add(4l);\n+        storage.setMasterKey(4, KEY);\n+        storage.addEntry(genEntry(4, 1, ENTRY_SIZE)); // force ledger 1 page to flush\n+\n+        storage = new InterleavedLedgerStorage(conf, manager, dirs);\n+        storage.getEntry(1, 1); // entry should exist\n+    }\n+\n+    private ByteBuffer genEntry(long ledger, long entry, int size) {\n+        byte[] data = new byte[size];\n+        ByteBuffer bb = ByteBuffer.wrap(new byte[size]);\n+        bb.putLong(ledger);\n+        bb.putLong(entry);\n+        while (bb.hasRemaining()) {\n+            bb.put((byte)0xFF);\n+        }\n+        bb.flip();\n+        return bb;\n+    }\n }"},{"sha":"716018133f1c485781bcd96e9eef7d051c5fd92a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -30,6 +30,9 @@\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.SnapshotMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.LinkedBlockingQueue;\n+\n import org.apache.commons.io.FileUtils;\n import org.junit.After;\n import org.junit.Assert;\n@@ -197,6 +200,55 @@ public void testDeleteLedger() throws Exception {\n         }\n     }\n \n+    /**\n+     * Test simulating race condition between when a ledger is deleting and an\n+     * eviction from LedgerCache simultaneously\n+     */\n+    @Test(timeout = 60000)\n+    public void testPageEvictionWhileDeleteLedgerInProgress() throws Exception {\n+        File ledgerDir1 = File.createTempFile(\"bkTest\", \".dir\");\n+        ledgerDir1.delete();\n+        File ledgerDir2 = File.createTempFile(\"bkTest\", \".dir\");\n+        ledgerDir2.delete();\n+        ServerConfiguration conf = new ServerConfiguration();\n+        conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(),\n+                ledgerDir2.getAbsolutePath() });\n+        conf.setOpenFileLimit(1);\n+        Bookie bookie = new Bookie(conf);\n+        InterleavedLedgerStorage ledgerStorage = ((InterleavedLedgerStorage) bookie.ledgerStorage);\n+        final LedgerCacheImpl ledgerCache = (LedgerCacheImpl) ledgerStorage.ledgerCache;\n+        // Create ledger index\n+        final int ledgerCount = 2;\n+        putLedger(ledgerCache, ledgerCount);\n+        for (int id = 0; id < ledgerCount; id++) {\n+            LOG.info(\"Deleting ledger id {}\", id);\n+            ledgerCache.deleteLedger(id);\n+        }\n+        // Adding ledgers back to the openLedgers data structure. This is done\n+        // to simulate the case - during ledger eviction it would be deleted\n+        // from fileInfoCache and exists only in openLedgers list, as these two\n+        // are not atomic operations\n+        ledgerCache.openLedgers.add(Long.valueOf(0));\n+        ledgerCache.openLedgers.add(Long.valueOf(1));\n+        for (int id = 0; id < ledgerCount; id++) {\n+            try {\n+                LOG.info(\"Reading ledger id {}\", id);\n+                ledgerCache.getFileInfo(Long.valueOf(id), \"key\".getBytes());\n+            } catch (Exception e) {\n+                LOG.info(\"Exception occured while getting the ledger info!\", e);\n+                Assert.fail(\"Exception occured while getting the ledger id \"\n+                        + id);\n+            }\n+        }\n+    }\n+\n+    private void putLedger(LedgerCacheImpl ledgerCache, int count)\n+            throws IOException {\n+        for (int id = 0; id < count; id++) {\n+            ledgerCache.getFileInfo(Long.valueOf(id), \"key\".getBytes());\n+        }\n+    }\n+\n     @Test(timeout=30000)\n     public void testPageEviction() throws Exception {\n         int numLedgers = 10;\n@@ -368,6 +420,79 @@ public void testSyncThreadNPE() throws IOException {\n         }\n     }\n \n+    /**\n+     * Race where a flush would fail because a garbage collection occurred at\n+     * the wrong time.\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-604}\n+     */\n+    @Test(timeout=60000)\n+    public void testFlushDeleteRace() throws Exception {\n+        newLedgerCache();\n+        final AtomicInteger rc = new AtomicInteger(0);\n+        final LinkedBlockingQueue<Long> ledgerQ = new LinkedBlockingQueue<Long>(1);\n+        final byte[] masterKey = \"masterKey\".getBytes();\n+        Thread newLedgerThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        for (int i = 0; i < 1000 && rc.get() == 0; i++) {\n+                            ledgerCache.setMasterKey(i, masterKey);\n+                            ledgerQ.put((long)i);\n+                        }\n+                    } catch (Exception e) {\n+                        rc.set(-1);\n+                        LOG.error(\"Exception in new ledger thread\", e);\n+                    }\n+                }\n+            };\n+        newLedgerThread.start();\n+\n+        Thread flushThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        while (true) {\n+                            Long id = ledgerQ.peek();\n+                            if (id == null) {\n+                                continue;\n+                            }\n+                            LOG.info(\"Put entry for {}\", id);\n+                            try {\n+                                ledgerCache.putEntryOffset((long)id, 1, 0);\n+                            } catch (Bookie.NoLedgerException nle) {\n+                                //ignore\n+                            }\n+                            ledgerCache.flushLedger(true);\n+                        }\n+                    } catch (Exception e) {\n+                        rc.set(-1);\n+                        LOG.error(\"Exception in flush thread\", e);\n+                    }\n+                }\n+            };\n+        flushThread.start();\n+\n+        Thread deleteThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        while (true) {\n+                            long id = ledgerQ.take();\n+                            LOG.info(\"Deleting {}\", id);\n+                            ledgerCache.deleteLedger(id);\n+                        }\n+                    } catch (Exception e) {\n+                        rc.set(-1);\n+                        LOG.error(\"Exception in delete thread\", e);\n+                    }\n+                }\n+            };\n+        deleteThread.start();\n+\n+        newLedgerThread.join();\n+        assertEquals(\"Should have been no errors\", rc.get(), 0);\n+\n+        deleteThread.interrupt();\n+        flushThread.interrupt();\n+    }\n+\n     private ByteBuffer generateEntry(long ledger, long entry) {\n         byte[] data = (\"ledger-\" + ledger + \"-\" + entry).getBytes();\n         ByteBuffer bb = ByteBuffer.wrap(new byte[8 + 8 + data.length]);"},{"sha":"917134e253dd81fafb5fb209736b7c858aad9cfe","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookKeeperTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -218,4 +218,24 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n             assertTrue(\"Close was not successful\", success.get());\n         }\n     }\n+    \n+    @Test(timeout=60000)\n+    public void testIsClosed() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+        .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        LedgerHandle lh = bkc.createLedger(digestType, \"testPasswd\".getBytes());\n+        Long lId = lh.getId();\n+\n+        lh.addEntry(\"000\".getBytes());\n+        boolean result = bkc.isClosed(lId);\n+        Assert.assertTrue(\"Ledger shouldn't be flagged as closed!\",!result);\n+\n+        lh.close();\n+        result = bkc.isClosed(lId);\n+        Assert.assertTrue(\"Ledger should be flagged as closed!\",result);\n+\n+        bkc.close();\n+    }\n }"},{"sha":"f0432c18d43307f9075f69d0c2f11cafb1081100","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieRecoveryTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -227,6 +227,45 @@ private void verifyRecoveredLedgers(List<LedgerHandle> oldLhs, long startEntryId\n \n     }\n \n+    /**\n+     * This tests the bookie recovery functionality with ensemble changes.\n+     * We'll verify that:\n+     * - bookie recovery should not affect ensemble change.\n+     * - ensemble change should not erase changes made by recovery.\n+     *\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-667}\n+     */\n+    @Test(timeout = 60000)\n+    public void testMetadataConflictWithRecovery() throws Exception {\n+        int numEntries = 10;\n+        byte[] data = \"testMetadataConflictWithRecovery\".getBytes();\n+\n+        LedgerHandle lh = bkc.createLedger(2, 2, digestType, baseClientConf.getBookieRecoveryPasswd());\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry(data);\n+        }\n+        InetSocketAddress bookieToKill = lh.getLedgerMetadata().getEnsemble(numEntries - 1).get(1);\n+        killBookie(bookieToKill);\n+        startNewBookie();\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry(data);\n+        }\n+        bkAdmin.recoverBookieData(bookieToKill, null);\n+        // fail another bookie to cause ensemble change again\n+        bookieToKill = lh.getLedgerMetadata().getEnsemble(2 * numEntries - 1).get(1);\n+        ServerConfiguration confOfKilledBookie = killBookie(bookieToKill);\n+        startNewBookie();\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry(data);\n+        }\n+        // start the killed bookie again\n+        bsConfs.add(confOfKilledBookie);\n+        bs.add(startBookie(confOfKilledBookie));\n+        // all ensembles should be fully replicated since it is recovered\n+        assertTrue(\"Not fully replicated\", verifyFullyReplicated(lh, 3 * numEntries));\n+        lh.close();\n+    }\n+\n     /**\n      * This tests the asynchronous bookie recovery functionality by writing\n      * entries into 3 bookies, killing one bookie, starting up a new one to"},{"sha":"c129e07584133d6e8736c1de70797f210de7e0c3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/BookieWriteLedgerTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -58,6 +58,7 @@\n \n     private static class SyncObj {\n         volatile int counter;\n+        volatile int rc;\n \n         public SyncObj() {\n             counter = 0;\n@@ -182,13 +183,15 @@ public void testAsyncWritesWithMultipleFailuresInLastEnsemble()\n                 LOG.debug(\"Entries counter = \" + syncObj1.counter);\n                 syncObj1.wait();\n             }\n+            assertEquals(BKException.Code.OK, syncObj1.rc);\n         }\n         // wait for all entries to be acknowledged for the second ledger\n         synchronized (syncObj2) {\n             while (syncObj2.counter < 1) {\n                 LOG.debug(\"Entries counter = \" + syncObj2.counter);\n                 syncObj2.wait();\n             }\n+            assertEquals(BKException.Code.OK, syncObj2.rc);\n         }\n \n         // reading ledger till the last entry\n@@ -217,12 +220,9 @@ private void readEntries(LedgerHandle lh, ArrayList<byte[]> entries)\n \n     @Override\n     public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n-        if (rc != BKException.Code.OK)\n-            fail(\"Return code is not OK: \" + rc);\n-\n         SyncObj x = (SyncObj) ctx;\n-\n         synchronized (x) {\n+            x.rc = rc;\n             x.counter++;\n             x.notify();\n         }"},{"sha":"45ac0e4847f783c41d846aace0ac82e5516bd89d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.Set;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.bookie.BookieException;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This class tests the ledger close logic.\n+ */\n+public class LedgerCloseTest extends BookKeeperClusterTestCase {\n+\n+    static Logger LOG = LoggerFactory.getLogger(LedgerCloseTest.class);\n+\n+    static final int READ_TIMEOUT = 1;\n+\n+    final DigestType digestType;\n+\n+    public LedgerCloseTest() {\n+        super(6);\n+        this.digestType = DigestType.CRC32;\n+        // set timeout to a large value which disable it.\n+        baseClientConf.setReadTimeout(99999);\n+        baseConf.setGcWaitTime(999999);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testLedgerCloseDuringUnrecoverableErrors() throws Exception {\n+        int numEntries = 3;\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n+        verifyMetadataConsistency(numEntries, lh);\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testLedgerCheckerShouldnotSelectInvalidLastFragments() throws Exception {\n+        int numEntries = 10;\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n+        // Add some entries before bookie failures\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.addEntry(\"data\".getBytes());\n+        }\n+        numEntries = 4; // add n*ensemleSize+1 entries async after bookies\n+                        // failed.\n+        verifyMetadataConsistency(numEntries, lh);\n+\n+        LedgerChecker checker = new LedgerChecker(bkc);\n+        CheckerCallback cb = new CheckerCallback();\n+        checker.checkLedger(lh, cb);\n+        Set<LedgerFragment> result = cb.waitAndGetResult();\n+        assertEquals(\"No fragments should be selected\", 0, result.size());\n+    }\n+\n+    class CheckerCallback implements GenericCallback<Set<LedgerFragment>> {\n+        private Set<LedgerFragment> result = null;\n+        private CountDownLatch latch = new CountDownLatch(1);\n+\n+        public void operationComplete(int rc, Set<LedgerFragment> result) {\n+            this.result = result;\n+            latch.countDown();\n+        }\n+\n+        Set<LedgerFragment> waitAndGetResult() throws InterruptedException {\n+            latch.await();\n+            return result;\n+        }\n+    }\n+\n+    private void verifyMetadataConsistency(int numEntries, LedgerHandle lh)\n+            throws Exception {\n+        final CountDownLatch addDoneLatch = new CountDownLatch(1);\n+        final CountDownLatch deadIOLatch = new CountDownLatch(1);\n+        final CountDownLatch recoverDoneLatch = new CountDownLatch(1);\n+        final CountDownLatch failedLatch = new CountDownLatch(1);\n+        // kill first bookie to replace with a unauthorize bookie\n+        InetSocketAddress bookie = lh.getLedgerMetadata().currentEnsemble.get(0);\n+        ServerConfiguration conf = killBookie(bookie);\n+        // replace a unauthorize bookie\n+        startUnauthorizedBookie(conf, addDoneLatch);\n+        // kill second bookie to replace with a dead bookie\n+        bookie = lh.getLedgerMetadata().currentEnsemble.get(1);\n+        conf = killBookie(bookie);\n+        // replace a slow dead bookie\n+        startDeadBookie(conf, deadIOLatch);\n+\n+        // tried to add entries\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.asyncAddEntry(\"data\".getBytes(), new AddCallback() {\n+                @Override\n+                public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                    if (BKException.Code.OK != rc) {\n+                        failedLatch.countDown();\n+                        deadIOLatch.countDown();\n+                    }\n+                    if (0 == entryId) {\n+                        try {\n+                            recoverDoneLatch.await();\n+                        } catch (InterruptedException ie) {\n+                        }\n+                    }\n+                }\n+            }, null);\n+        }\n+        // add finished\n+        addDoneLatch.countDown();\n+        // wait until entries failed due to UnauthorizedAccessException\n+        failedLatch.await();\n+        // simulate the ownership of this ledger is transfer to another host (which is actually\n+        // what we did in Hedwig).\n+        LOG.info(\"Recover ledger {}.\", lh.getId());\n+        ClientConfiguration newConf = new ClientConfiguration();\n+        newConf.addConfiguration(baseClientConf);\n+        BookKeeper newBkc = new BookKeeperTestClient(newConf.setReadTimeout(1));\n+        LedgerHandle recoveredLh = newBkc.openLedger(lh.getId(), digestType, \"\".getBytes());\n+        LOG.info(\"Recover ledger {} done.\", lh.getId());\n+        recoverDoneLatch.countDown();\n+        // wait a bit until add operations failed from second bookie due to IOException\n+        TimeUnit.SECONDS.sleep(5);\n+        // open the ledger again to make sure we ge the right last confirmed.\n+        LedgerHandle newLh = newBkc.openLedger(lh.getId(), digestType, \"\".getBytes());\n+        assertEquals(\"Metadata should be consistent across different opened ledgers\",\n+                recoveredLh.getLastAddConfirmed(), newLh.getLastAddConfirmed());\n+    }\n+\n+    private void startUnauthorizedBookie(ServerConfiguration conf, final CountDownLatch latch)\n+            throws Exception {\n+        Bookie sBookie = new Bookie(conf) {\n+            @Override\n+            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException e) {\n+                }\n+                throw BookieException.create(BookieException.Code.UnauthorizedAccessException);\n+            }\n+\n+            @Override\n+            public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                throw new IOException(\"Dead bookie for recovery adds.\");\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, sBookie));\n+    }\n+\n+    // simulate slow adds, then become normal when recover,\n+    // so no ensemble change when recovering ledger on this bookie.\n+    private void startDeadBookie(ServerConfiguration conf, final CountDownLatch latch) throws Exception {\n+        Bookie dBookie = new Bookie(conf) {\n+            @Override\n+            public void addEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                try {\n+                    latch.await();\n+                } catch (InterruptedException e) {\n+                }\n+                // simulate slow adds.\n+                throw new IOException(\"Dead bookie\");\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, dBookie));\n+    }\n+}"},{"sha":"cb92a0aac75fc2d87c396ceb2542e9af531474bc","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","status":"modified","additions":65,"deletions":4,"changes":69,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerRecoveryTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -24,20 +24,18 @@\n import java.io.IOException;\n import java.net.InetSocketAddress;\n import java.nio.ByteBuffer;\n-import java.util.List;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n-import org.junit.*;\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n-import org.apache.bookkeeper.client.LedgerHandle;\n-import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.test.BaseTestCase;\n+import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -356,4 +354,67 @@ public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byt\n         assertEquals(\"Fenced ledger should have correct lastAddConfirmed\",\n                      lhbefore.getLastAddConfirmed(), lhafter.getLastAddConfirmed());\n     }\n+\n+    /**\n+     * Verify that it doesn't break the recovery when changing ensemble in\n+     * recovery add.\n+     */\n+    @Test(timeout = 60000)\n+    public void testEnsembleChangeDuringRecovery() throws Exception {\n+        LedgerHandle lh = bkc.createLedger(numBookies, 2, 2, digestType, \"\".getBytes());\n+        int numEntries = (numBookies * 3) + 1;\n+        final AtomicInteger numPendingAdds = new AtomicInteger(numEntries);\n+        final CountDownLatch addDone = new CountDownLatch(1);\n+        for (int i = 0; i < numEntries; i++) {\n+            lh.asyncAddEntry(\"data\".getBytes(), new AddCallback() {\n+\n+                @Override\n+                public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                    if (BKException.Code.OK != rc) {\n+                        addDone.countDown();\n+                        return;\n+                    }\n+                    if (numPendingAdds.decrementAndGet() == 0) {\n+                        addDone.countDown();\n+                    }\n+                }\n+\n+            }, null);\n+        }\n+        addDone.await(10, TimeUnit.SECONDS);\n+        if (numPendingAdds.get() > 0) {\n+            fail(\"Failed to add \" + numEntries + \" to ledger handle \" + lh.getId());\n+        }\n+        // kill first 2 bookies to replace bookies\n+        InetSocketAddress bookie1 = lh.getLedgerMetadata().currentEnsemble.get(0);\n+        ServerConfiguration conf1 = killBookie(bookie1);\n+        InetSocketAddress bookie2 = lh.getLedgerMetadata().currentEnsemble.get(1);\n+        ServerConfiguration conf2 = killBookie(bookie2);\n+\n+        // replace these two bookies\n+        startDeadBookie(conf1);\n+        startDeadBookie(conf2);\n+        // kick in two brand new bookies\n+        startNewBookie();\n+        startNewBookie();\n+\n+        // two dead bookies are put in the ensemble which would cause ensemble\n+        // change\n+        LedgerHandle recoveredLh = bkc.openLedger(lh.getId(), digestType, \"\".getBytes());\n+        assertEquals(\"Fenced ledger should have correct lastAddConfirmed\", lh.getLastAddConfirmed(),\n+                recoveredLh.getLastAddConfirmed());\n+    }\n+\n+    private void startDeadBookie(ServerConfiguration conf) throws Exception {\n+        Bookie rBookie = new Bookie(conf) {\n+            @Override\n+            public void recoveryAddEntry(ByteBuffer entry, WriteCallback cb, Object ctx, byte[] masterKey)\n+                    throws IOException, BookieException {\n+                // drop request to simulate a dead bookie\n+                throw new IOException(\"Couldn't write entries for some reason\");\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, rBookie));\n+    }\n }"},{"sha":"b37a044147aa3fe09fe36c05b633032c589c07f7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/ListLedgersTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -0,0 +1,112 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with this\n+ * work for additional information regarding copyright ownership. The ASF\n+ * licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.bookkeeper.client;\n+\n+import java.util.Iterator;\n+\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n+import org.apache.bookkeeper.test.BaseTestCase;\n+\n+import org.apache.zookeeper.KeeperException;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ListLedgersTest extends BaseTestCase {\n+    static Logger LOG = LoggerFactory.getLogger(ListLedgersTest.class);\n+\n+    DigestType digestType;\n+\n+    public ListLedgersTest (DigestType digestType) {\n+        super(4);\n+        this.digestType = digestType;\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testListLedgers()\n+    throws Exception {\n+        int numOfLedgers = 10;\n+\n+        ClientConfiguration conf = new ClientConfiguration()\n+        .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        for (int i = 0; i < numOfLedgers ; i++) {\n+            bkc.createLedger(digestType, \"testPasswd\".\n+                    getBytes()).close();\n+        }\n+\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.\n+                getZooKeeperConnectString());\n+        Iterable<Long> iterable = admin.listLedgers();\n+\n+        int counter = 0;\n+        for (Long lId: iterable) {\n+            counter++;\n+        }\n+\n+        Assert.assertTrue(\"Wrong number of ledgers: \" + numOfLedgers,\n+                counter == numOfLedgers);\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testEmptyList()\n+    throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration()\n+        .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.\n+                getZooKeeperConnectString());\n+        Iterable<Long> iterable = admin.listLedgers();\n+\n+        LOG.info(\"Empty list assertion\");\n+        Assert.assertFalse(\"There should be no ledger\", iterable.iterator().hasNext());\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testRemoveNotSupported()\n+    throws Exception {\n+        int numOfLedgers = 1;\n+\n+        ClientConfiguration conf = new ClientConfiguration()\n+        .setZkServers(zkUtil.getZooKeeperConnectString());\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        for (int i = 0; i < numOfLedgers ; i++) {\n+            bkc.createLedger(digestType, \"testPasswd\".\n+                    getBytes()).close();\n+        }\n+\n+        BookKeeperAdmin admin = new BookKeeperAdmin(zkUtil.\n+                getZooKeeperConnectString());\n+        Iterator<Long> iterator = admin.listLedgers().iterator();\n+        iterator.next();\n+        try{\n+            iterator.remove();\n+        } catch (UnsupportedOperationException e) {\n+            // This exception is expected\n+            return;\n+        }\n+\n+        Assert.fail(\"Remove is not supported, we shouln't have reached this point\");\n+\n+    }\n+}"},{"sha":"9ba95c58d16d9bd076d39cbbe6d3262f205a75b3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","status":"modified","additions":2,"deletions":13,"changes":15,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestFencing.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -292,12 +292,7 @@ public void testFencingInteractionWithBookieRecovery() throws Exception {\n         }\n \n         readlh.close();\n-        try {\n-            writelh.close();\n-            fail(\"Should fail trying to update metadata\");\n-        } catch (BKException.BKMetadataVersionException e) {\n-            // correct behaviour\n-        }\n+        writelh.close();\n     }\n \n     /**\n@@ -338,13 +333,7 @@ public void testFencingInteractionWithBookieRecovery2() throws Exception {\n         }\n \n         readlh.close();\n-\n-        try {\n-            writelh.close();\n-            fail(\"Should fail trying to update metadata\");\n-        } catch (BKException.BKMetadataVersionException e) {\n-            // correct behaviour\n-        }\n+        writelh.close();\n     }\n \n     /**"},{"sha":"a1592ac660d1aeebd8dec59014a0f013f2c87f37","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestLedgerChecker.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -454,7 +454,7 @@ public void testClosedSingleEntryLedger() throws Exception {\n     }\n \n     private void killBookie(ArrayList<InetSocketAddress> firstEnsemble,\n-            InetSocketAddress ensemble) throws InterruptedException {\n+            InetSocketAddress ensemble) throws Exception {\n         LOG.info(\"Killing \" + ensemble + \" from ensemble=\" + firstEnsemble);\n         killBookie(ensemble);\n     }"},{"sha":"125452d8ae87076fedf6895bd71eef8ea8175d90","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","status":"modified","additions":99,"deletions":5,"changes":104,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/GcLedgersTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -23,25 +23,31 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.List;\n import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n import java.util.Random;\n import java.util.Set;\n+import java.util.SortedSet;\n+import java.util.TreeSet;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.bookie.GarbageCollector;\n import org.apache.bookkeeper.bookie.ScanAndCompareGarbageCollector;\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.versioning.Version;\n+import org.junit.Test;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import org.junit.Test;\n-\n /**\n  * Test garbage collection ledgers in ledger manager\n  */\n@@ -85,6 +91,21 @@ public void operationComplete(int rc, Long ledgerId) {\n         }\n     }\n \n+    private void removeLedger(long ledgerId) throws Exception {\n+        final AtomicInteger rc = new AtomicInteger(0);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        getLedgerManager().removeLedgerMetadata(ledgerId, Version.ANY,\n+                new GenericCallback<Void>() {\n+                    @Override\n+                    public void operationComplete(int rc2, Void result) {\n+                        rc.set(rc2);\n+                        latch.countDown();\n+                    }\n+                   });\n+        assertTrue(latch.await(10, TimeUnit.SECONDS));\n+        assertEquals(\"Remove should have succeeded\", 0, rc.get());\n+    }\n+\n     @Test(timeout=60000)\n     public void testGarbageCollectLedgers() throws Exception {\n         int numLedgers = 100;\n@@ -112,7 +133,7 @@ public void operationComplete(int rc, Void result) {\n                                 removedLedgers.notify();\n                             }\n                         }\n-                    });\n+                   });\n                 removedLedgers.wait();\n             }\n             removedLedgers.add(ledgerId);\n@@ -175,4 +196,77 @@ public void run() {\n             assertTrue(activeLedgers.containsKey(ledger));\n         }\n     }\n+\n+    @Test(timeout=60000)\n+    public void testGcLedgersOutsideRange() throws Exception {\n+        final SortedSet<Long> createdLedgers = Collections.synchronizedSortedSet(new TreeSet<Long>());\n+        final Queue<Long> cleaned = new LinkedList<Long>();\n+        int numLedgers = 100;\n+\n+        createLedgers(numLedgers, createdLedgers);\n+\n+        final GarbageCollector garbageCollector =\n+                new ScanAndCompareGarbageCollector(getLedgerManager(), activeLedgers);\n+        GarbageCollector.GarbageCleaner cleaner = new GarbageCollector.GarbageCleaner() {\n+                @Override\n+                public void clean(long ledgerId) {\n+                    LOG.info(\"Cleaned {}\", ledgerId);\n+                    cleaned.add(ledgerId);\n+                }\n+            };\n+\n+        garbageCollector.gc(cleaner);\n+        assertNull(\"Should have cleaned nothing\", cleaned.poll());\n+\n+        long last = createdLedgers.last();\n+        removeLedger(last);\n+        garbageCollector.gc(cleaner);\n+        assertNotNull(\"Should have cleaned something\", cleaned.peek());\n+        assertEquals(\"Should have cleaned last ledger\" + last, (long)last, (long)cleaned.poll());\n+\n+        long first = createdLedgers.first();\n+        removeLedger(first);\n+        garbageCollector.gc(cleaner);\n+        assertNotNull(\"Should have cleaned something\", cleaned.peek());\n+        assertEquals(\"Should have cleaned first ledger\" + first, (long)first, (long)cleaned.poll());\n+    }\n+\n+    @Test(timeout=60000)\n+    public void testGcLedgersNotLast() throws Exception {\n+        final SortedSet<Long> createdLedgers = Collections.synchronizedSortedSet(new TreeSet<Long>());\n+        final List<Long> cleaned = new ArrayList<Long>();\n+\n+        // Create enough ledgers to span over 4 ranges in the hierarchical ledger manager implementation\n+        final int numLedgers = 30001;\n+\n+        createLedgers(numLedgers, createdLedgers);\n+\n+        final GarbageCollector garbageCollector =\n+                new ScanAndCompareGarbageCollector(getLedgerManager(), activeLedgers);\n+        GarbageCollector.GarbageCleaner cleaner = new GarbageCollector.GarbageCleaner() {\n+                @Override\n+                public void clean(long ledgerId) {\n+                    LOG.info(\"Cleaned {}\", ledgerId);\n+                    cleaned.add(ledgerId);\n+                }\n+            };\n+\n+        SortedSet<Long> scannedLedgers = new TreeSet<Long>();\n+        LedgerRangeIterator iterator = getLedgerManager().getLedgerRanges();\n+        while (iterator.hasNext()) {\n+            LedgerRange ledgerRange = iterator.next();\n+            scannedLedgers.addAll(ledgerRange.getLedgers());\n+        }\n+\n+        assertEquals(createdLedgers, scannedLedgers);\n+\n+        garbageCollector.gc(cleaner);\n+        assertTrue(\"Should have cleaned nothing\", cleaned.isEmpty());\n+\n+        long first = createdLedgers.first();\n+        removeLedger(first);\n+        garbageCollector.gc(cleaner);\n+        assertEquals(\"Should have cleaned something\", 1, cleaned.size());\n+        assertEquals(\"Should have cleaned first ledger\" + first, (long)first, (long)cleaned.get(0));\n+    }\n }"},{"sha":"b95d2db4574c5c1a7f6c60907b7e6f12c511e84f","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/meta/LedgerManagerTestCase.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -64,7 +64,8 @@ public LedgerManager getLedgerManager() {\n     public static Collection<Object[]> configs() {\n         return Arrays.asList(new Object[][] {\n             { FlatLedgerManagerFactory.class },\n-            { HierarchicalLedgerManagerFactory.class }\n+            { HierarchicalLedgerManagerFactory.class },\n+            { MSLedgerManagerFactory.class }\n         });\n     }\n "},{"sha":"539eea41ab3443cb7cf21b2a9985503bf0f64ba9","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestDeathwatcher.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -0,0 +1,60 @@\n+package org.apache.bookkeeper.proto;\n+\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+\n+import org.junit.*;\n+\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests for the BookieServer death watcher\n+ */\n+public class TestDeathwatcher extends BookKeeperClusterTestCase {\n+    static Logger LOG = LoggerFactory.getLogger(TestDeathwatcher.class);\n+\n+    public TestDeathwatcher() {\n+        super(1);\n+    }\n+\n+    /**\n+     * Ensure that if the autorecovery daemon is running inside the bookie\n+     * then a failure/crash in the autorecovery daemon will not take down the\n+     * bookie also.\n+     */\n+    @Test(timeout=30000)\n+    public void testAutorecoveryFailureDoesntKillBookie() throws Exception {\n+        ServerConfiguration conf = newServerConfiguration().setAutoRecoveryDaemonEnabled(true);\n+        BookieServer bs = startBookie(conf);\n+\n+        assertNotNull(\"Autorecovery daemon should exist\", bs.autoRecoveryMain);\n+        assertTrue(\"Bookie should be running\", bs.isBookieRunning());\n+        bs.autoRecoveryMain.shutdown();\n+        Thread.sleep(conf.getDeathWatchInterval()*2); // give deathwatcher time to run\n+        assertTrue(\"Bookie should be running\", bs.isBookieRunning());\n+        bs.shutdown();\n+    }\n+}\n+"},{"sha":"fbd281b738eaf457421044e46d904b2122e852eb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","status":"modified","additions":175,"deletions":4,"changes":179,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/proto/TestPerChannelBookieClient.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -24,12 +24,25 @@\n import org.junit.*;\n import java.net.InetSocketAddress;\n import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n+import java.nio.ByteBuffer;\n+import java.io.IOException;\n+\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.bookie.Bookie;\n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n+import org.apache.bookkeeper.proto.PerChannelBookieClient.ConnectionState;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n-\n+import org.jboss.netty.channel.Channel;\n+import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n \n@@ -55,7 +68,7 @@ public TestPerChannelBookieClient() {\n      * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-485}.\n      */\n     @Test(timeout=60000)\n-    public void testConnectCloseRace() {\n+    public void testConnectCloseRace() throws Exception {\n         ClientSocketChannelFactory channelFactory\n             = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n                                                 Executors.newCachedThreadPool());\n@@ -85,7 +98,7 @@ public void operationComplete(int rc, Void result) {\n      * correctly, this causes the netty channel to get orphaned.\n      */\n     @Test(timeout=60000)\n-    public void testConnectRace() {\n+    public void testConnectRace() throws Exception {\n         GenericCallback<Void> nullop = new GenericCallback<Void>() {\n             @Override\n             public void operationComplete(int rc, Void result) {\n@@ -111,4 +124,162 @@ public void operationComplete(int rc, Void result) {\n         channelFactory.releaseExternalResources();\n         executor.shutdown();\n     }\n-}\n\\ No newline at end of file\n+\n+    /**\n+     * Test that all resources are freed if connections and disconnections\n+     * are interleaved randomly.\n+     *\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-620}\n+     */\n+    @Test(timeout=60000)\n+    public void testDisconnectRace() throws Exception {\n+        final GenericCallback<Void> nullop = new GenericCallback<Void>() {\n+            @Override\n+            public void operationComplete(int rc, Void result) {\n+                // do nothing, we don't care about doing anything with the connection,\n+                // we just want to trigger it connecting.\n+            }\n+        };\n+        final int ITERATIONS = 100000;\n+        ClientSocketChannelFactory channelFactory\n+            = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n+                                                Executors.newCachedThreadPool());\n+        OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        InetSocketAddress addr = getBookie(0);\n+\n+        AtomicLong bytesOutstanding = new AtomicLong(0);\n+        final PerChannelBookieClient client = new PerChannelBookieClient(executor,\n+                channelFactory, addr, bytesOutstanding);\n+        final AtomicBoolean shouldFail = new AtomicBoolean(false);\n+        final AtomicBoolean running = new AtomicBoolean(true);\n+        final CountDownLatch disconnectRunning = new CountDownLatch(1);\n+        Thread connectThread = new Thread() {\n+                public void run() {\n+                    try {\n+                        if (!disconnectRunning.await(10, TimeUnit.SECONDS)) {\n+                            LOG.error(\"Disconnect thread never started\");\n+                            shouldFail.set(true);\n+                        }\n+                    } catch (InterruptedException ie) {\n+                        LOG.error(\"Connect thread interrupted\", ie);\n+                        Thread.currentThread().interrupt();\n+                        running.set(false);\n+                    }\n+                    for (int i = 0; i < ITERATIONS && running.get(); i++) {\n+                        client.connectIfNeededAndDoOp(nullop);\n+                    }\n+                    running.set(false);\n+                }\n+            };\n+        Thread disconnectThread = new Thread() {\n+                public void run() {\n+                    disconnectRunning.countDown();\n+                    while (running.get()) {\n+                        client.disconnect();\n+                    }\n+                }\n+            };\n+        Thread checkThread = new Thread() {\n+                public void run() {\n+                    ConnectionState state;\n+                    Channel channel;\n+                    while (running.get()) {\n+                        synchronized (client) {\n+                            state = client.state;\n+                            channel = client.channel;\n+\n+                            if ((state == ConnectionState.CONNECTED\n+                                 && (channel == null\n+                                     || !channel.isConnected()))\n+                                || (state != ConnectionState.CONNECTED\n+                                    && channel != null\n+                                    && channel.isConnected())) {\n+                                LOG.error(\"State({}) and channel({}) inconsistent \" + channel,\n+                                          state, channel == null ? null : channel.isConnected());\n+                                shouldFail.set(true);\n+                                running.set(false);\n+                            }\n+                        }\n+                    }\n+                }\n+            };\n+        connectThread.start();\n+        disconnectThread.start();\n+        checkThread.start();\n+\n+        connectThread.join();\n+        disconnectThread.join();\n+        checkThread.join();\n+        assertFalse(\"Failure in threads, check logs\", shouldFail.get());\n+        client.close();\n+        channelFactory.releaseExternalResources();\n+        executor.shutdown();\n+    }\n+\n+    /**\n+     * Test that requests are completed even if the channel is disconnected\n+     * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-668}\n+     */\n+    @Test(timeout=60000)\n+    public void testRequestCompletesAfterDisconnectRace() throws Exception {\n+        ServerConfiguration conf = killBookie(0);\n+\n+        Bookie delayBookie = new Bookie(conf) {\n+            @Override\n+            public ByteBuffer readEntry(long ledgerId, long entryId)\n+                    throws IOException, NoLedgerException {\n+                try {\n+                    Thread.sleep(3000);\n+                } catch (InterruptedException ie) {\n+                    throw new IOException(\"Interrupted waiting\", ie);\n+                }\n+                return super.readEntry(ledgerId, entryId);\n+            }\n+        };\n+        bsConfs.add(conf);\n+        bs.add(startBookie(conf, delayBookie));\n+\n+        ClientSocketChannelFactory channelFactory\n+            = new NioClientSocketChannelFactory(Executors.newCachedThreadPool(),\n+                                                Executors.newCachedThreadPool());\n+        final OrderedSafeExecutor executor = new OrderedSafeExecutor(1);\n+        InetSocketAddress addr = getBookie(0);\n+        AtomicLong bytesOutstanding = new AtomicLong(0);\n+\n+        final PerChannelBookieClient client = new PerChannelBookieClient(executor, channelFactory,\n+                                                                         addr, bytesOutstanding);\n+        final CountDownLatch completion = new CountDownLatch(1);\n+        final ReadEntryCallback cb = new ReadEntryCallback() {\n+                @Override\n+                public void readEntryComplete(int rc, long ledgerId, long entryId,\n+                                              ChannelBuffer buffer, Object ctx) {\n+                    completion.countDown();\n+                }\n+            };\n+\n+        client.connectIfNeededAndDoOp(new GenericCallback<Void>() {\n+            @Override\n+            public void operationComplete(final int rc, Void result) {\n+                if (rc != BKException.Code.OK) {\n+                    executor.submitOrdered(1, new SafeRunnable() {\n+                        @Override\n+                        public void safeRun() {\n+                            cb.readEntryComplete(rc, 1, 1, null, null);\n+                        }\n+                    });\n+                    return;\n+                }\n+\n+                client.readEntryAndFenceLedger(1, \"00000111112222233333\".getBytes(), 1, cb, null);\n+            }\n+        });\n+\n+        Thread.sleep(1000);\n+        client.disconnect();\n+        client.close();\n+        channelFactory.releaseExternalResources();\n+        executor.shutdown();\n+\n+        assertTrue(\"Request should have completed\", completion.await(5, TimeUnit.SECONDS));\n+    }\n+}"},{"sha":"89294bd40a6db7ba02c667895bdd1ef9a3866d57","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","status":"modified","additions":3,"deletions":24,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorBookieTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -207,25 +207,6 @@ public void testRestartAuditorBookieAfterCrashing() throws Exception {\n                 .getPort());\n     }\n \n-    /**\n-     * Test that, if an auditor looses its ZK connection/session\n-     * it will shutdown.\n-     */\n-    @Test(timeout=60000)\n-    public void testAuditorZKSessionLoss() throws Exception {\n-        stopZKCluster();\n-        for (AuditorElector e : auditorElectors.values()) {\n-            for (int i = 0; i < 10; i++) { // give it 10 seconds to shutdown\n-                if (!e.isRunning()) {\n-                    break;\n-                }\n-\n-                Thread.sleep(1000);\n-            }\n-            assertFalse(\"AuditorElector should have shutdown\", e.isRunning());\n-        }\n-    }\n-\n     private void startAuditorElector(String addr) throws Exception {\n         ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n         ZooKeeper zk = ZkUtils.createConnectedZookeeperClient(\n@@ -253,17 +234,15 @@ private void stopAuditorElectors() throws Exception {\n         }\n     }\n \n-    private BookieServer verifyAuditor() throws KeeperException,\n-            InterruptedException {\n+    private BookieServer verifyAuditor() throws Exception {\n         List<BookieServer> auditors = getAuditorBookie();\n         Assert.assertEquals(\"Multiple Bookies acting as Auditor!\", 1, auditors\n                 .size());\n         LOG.debug(\"Bookie running as Auditor:\" + auditors.get(0));\n         return auditors.get(0);\n     }\n \n-    private List<BookieServer> getAuditorBookie() throws KeeperException,\n-            InterruptedException {\n+    private List<BookieServer> getAuditorBookie() throws Exception {\n         List<BookieServer> auditors = new LinkedList<BookieServer>();\n         byte[] data = zkc.getData(electionPath, false, null);\n         Assert.assertNotNull(\"Auditor election failed\", data);\n@@ -286,7 +265,7 @@ private void shutdownBookie(BookieServer bkServer) throws Exception {\n     }\n \n     private BookieServer waitForNewAuditor(BookieServer auditor)\n-            throws InterruptedException, KeeperException {\n+            throws Exception {\n         BookieServer newAuditor = null;\n         int retryCount = 8;\n         while (retryCount > 0) {"},{"sha":"c15759cd5d25d5956b8d772b2504a8686ef8ab8d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":24,"deletions":2,"changes":26,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -300,6 +300,29 @@ public void testDuplicateEnDisableAutoRecovery() throws Exception {\n         }\n     }\n \n+    /**\n+     * Test Auditor should consider Readonly bookie as available bookie. Should not publish ur ledgers for\n+     * readonly bookies.\n+     */\n+    @Test(timeout = 20000)\n+    public void testReadOnlyBookieExclusionFromURLedgersCheck() throws Exception {\n+        LedgerHandle lh = createAndAddEntriesToLedger();\n+        ledgerList.add(lh.getId());\n+        LOG.debug(\"Created following ledgers : \" + ledgerList);\n+\n+        int count = ledgerList.size();\n+        final CountDownLatch underReplicaLatch = registerUrLedgerWatcher(count);\n+\n+        ServerConfiguration bookieConf = bsConfs.get(2);\n+        BookieServer bk = bs.get(2);\n+        bookieConf.setReadOnlyModeEnabled(true);\n+        bk.getBookie().transitionToReadOnlyMode();\n+\n+        // grace period for publishing the bk-ledger\n+        LOG.debug(\"Waiting for Auditor to finish ledger check.\");\n+        assertFalse(\"latch should not have completed\", underReplicaLatch.await(5, TimeUnit.SECONDS));\n+    }\n+\n     private CountDownLatch registerUrLedgerWatcher(int count)\n             throws KeeperException, InterruptedException {\n         final CountDownLatch underReplicaLatch = new CountDownLatch(count);\n@@ -322,8 +345,7 @@ private void doLedgerRereplication(Long... ledgerIds)\n         }\n     }\n \n-    private String shutdownBookie(int bkShutdownIndex) throws IOException,\n-            InterruptedException {\n+    private String shutdownBookie(int bkShutdownIndex) throws Exception {\n         BookieServer bkServer = bs.get(bkShutdownIndex);\n         String bookieAddr = StringUtils.addrToString(bkServer.getLocalAddress());\n         LOG.debug(\"Shutting down bookie:\" + bookieAddr);"},{"sha":"0a2bad2ec1f5561799dd2b5ef7dbbf3ae4d1743e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -23,6 +23,8 @@\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n \n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.CountDownLatch;\n import java.util.HashMap;\n import java.util.List;\n import java.util.LinkedList;\n@@ -270,4 +272,50 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n         assertTrue(\"All should be underreplicated\",\n                 numUnderreplicated <= numLedgers && numUnderreplicated > 0);\n     }\n+\n+    /**\n+     * Test that the period check will succeed if a ledger is deleted midway\n+     */\n+    @Test(timeout=60000)\n+    public void testPeriodicCheckWhenLedgerDeleted() throws Exception {\n+        for (AuditorElector e : auditorElectors.values()) {\n+            e.shutdown();\n+        }\n+\n+        final int numLedgers = 100;\n+        List<Long> ids = new LinkedList<Long>();\n+        for (int i = 0; i < numLedgers; i++) {\n+            LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"passwd\".getBytes());\n+            ids.add(lh.getId());\n+            for (int j = 0; j < 10; j++) {\n+                lh.addEntry(\"testdata\".getBytes());\n+            }\n+            lh.close();\n+        }\n+        final Auditor auditor = new Auditor(\n+                StringUtils.addrToString(Bookie.getBookieAddress(bsConfs.get(0))),\n+                bsConfs.get(0), zkc);\n+        final AtomicBoolean exceptionCaught = new AtomicBoolean(false);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        Thread t = new Thread() {\n+                public void run() {\n+                    try {\n+                        latch.countDown();\n+                        for (int i = 0; i < numLedgers; i++) {\n+                            auditor.checkAllLedgers();\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"Caught exception while checking all ledgers\", e);\n+                        exceptionCaught.set(true);\n+                    }\n+                }\n+            };\n+        t.start();\n+        latch.await();\n+        for (Long id : ids) {\n+            bkc.deleteLedger(id);\n+        }\n+        t.join();\n+        assertFalse(\"Shouldn't have thrown exception\", exceptionCaught.get());\n+    }\n }"},{"sha":"d71e49571ac045a2f8aea09115c9ca2ebeaddf56","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","status":"modified","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AutoRecoveryMainTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -20,8 +20,11 @@\n  */\n package org.apache.bookkeeper.replication;\n \n+import java.util.concurrent.CountDownLatch;\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n \n+import org.junit.Test;\n+\n /*\n  * Test the AuditorPeer\n  */\n@@ -34,6 +37,7 @@ public AutoRecoveryMainTest() {\n     /*\n      * test the startup of the auditorElector and RW.\n      */\n+    @Test(timeout=60000)\n     public void testStartup() throws Exception {\n         AutoRecoveryMain main = new AutoRecoveryMain(bsConfs.get(0));\n         try {\n@@ -51,6 +55,7 @@ public void testStartup() throws Exception {\n     /*\n      * Test the shutdown of all daemons\n      */\n+    @Test(timeout=60000)\n     public void testShutdown() throws Exception {\n         AutoRecoveryMain main = new AutoRecoveryMain(bsConfs.get(0));\n         main.start();\n@@ -66,4 +71,38 @@ public void testShutdown() throws Exception {\n         assertFalse(\"Replication worker should not be running\",\n                 main.replicationWorker.isRunning());\n     }\n+\n+    /**\n+     * Test that, if an autorecovery looses its ZK connection/session\n+     * it will shutdown.\n+     */\n+    @Test(timeout=60000)\n+    public void testAutoRecoverySessionLoss() throws Exception {\n+        AutoRecoveryMain main1 = new AutoRecoveryMain(bsConfs.get(0));\n+        AutoRecoveryMain main2 = new AutoRecoveryMain(bsConfs.get(1));\n+        main1.start();\n+        main2.start();\n+        Thread.sleep(500);\n+        assertTrue(\"AuditorElectors should be running\",\n+                main1.auditorElector.isRunning() && main2.auditorElector.isRunning());\n+        assertTrue(\"Replication workers should be running\",\n+                main1.replicationWorker.isRunning() && main2.replicationWorker.isRunning());\n+\n+        zkUtil.expireSession(main1.zk);\n+        zkUtil.expireSession(main2.zk);\n+\n+        for (int i = 0; i < 10; i++) { // give it 10 seconds to shutdown\n+            if (!main1.auditorElector.isRunning()\n+                && !main2.auditorElector.isRunning()\n+                && !main1.replicationWorker.isRunning()\n+                && !main2.replicationWorker.isRunning()) {\n+                break;\n+            }\n+            Thread.sleep(1000);\n+        }\n+        assertFalse(\"Elector1 should have shutdown\", main1.auditorElector.isRunning());\n+        assertFalse(\"Elector2 should have shutdown\", main2.auditorElector.isRunning());\n+        assertFalse(\"RW1 should have shutdown\", main1.replicationWorker.isRunning());\n+        assertFalse(\"RW2 should have shutdown\", main2.replicationWorker.isRunning());\n+    }\n }"},{"sha":"d2e21200d136496b9bbafdaf738642fc5fd3d510","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -358,7 +358,7 @@ private int getReplicaIndexInLedger(LedgerHandle lh,\n \n     private void verifyLedgerEnsembleMetadataAfterReplication(\n             BookieServer newBookieServer, LedgerHandle lh,\n-            int ledgerReplicaIndex) throws BKException, InterruptedException {\n+            int ledgerReplicaIndex) throws Exception {\n         LedgerHandle openLedger = bkc\n                 .openLedger(lh.getId(), digestType, PASSWD);\n "},{"sha":"450f871fe8173123295e40b116d523d8b850d2b0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","status":"modified","additions":42,"deletions":1,"changes":43,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestReplicationWorker.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -35,6 +35,7 @@\n import org.apache.bookkeeper.conf.ServerConfiguration;\n import org.apache.bookkeeper.meta.LedgerManagerFactory;\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n import org.apache.bookkeeper.util.ZkUtils;\n@@ -493,6 +494,46 @@ public void testRWShouldReplicateTheLedgersAfterTimeoutIfLastFragmentIsNotUR()\n \n     }\n \n+    /**\n+     * Test that if the local bookie turns out to be readonly, then no point in running RW. So RW should shutdown.\n+     */\n+    @Test(timeout = 20000)\n+    public void testRWShutdownOnLocalBookieReadonlyTransition() throws Exception {\n+        LedgerHandle lh = bkc.createLedger(3, 3, BookKeeper.DigestType.CRC32, TESTPASSWD);\n+\n+        for (int i = 0; i < 10; i++) {\n+            lh.addEntry(data);\n+        }\n+        InetSocketAddress replicaToKill = LedgerHandleAdapter.getLedgerMetadata(lh).getEnsembles().get(0L).get(0);\n+\n+        LOG.info(\"Killing Bookie\", replicaToKill);\n+        killBookie(replicaToKill);\n+\n+        int newBkPort = startNewBookie();\n+        for (int i = 0; i < 10; i++) {\n+            lh.addEntry(data);\n+        }\n+\n+        InetSocketAddress newBkAddr = new InetSocketAddress(InetAddress.getLocalHost().getHostAddress(), newBkPort);\n+        LOG.info(\"New Bookie addr :\" + newBkAddr);\n+\n+        ReplicationWorker rw = new ReplicationWorker(zkc, baseConf, newBkAddr);\n+\n+        rw.start();\n+        try {\n+            BookieServer newBk = bs.get(bs.size() - 1);\n+            bsConfs.get(bsConfs.size() - 1).setReadOnlyModeEnabled(true);\n+            newBk.getBookie().transitionToReadOnlyMode();\n+            underReplicationManager.markLedgerUnderreplicated(lh.getId(), replicaToKill.toString());\n+            while (ReplicationTestUtil.isLedgerInUnderReplication(zkc, lh.getId(), basePath) && rw.isRunning()) {\n+                Thread.sleep(100);\n+            }\n+            assertFalse(\"RW should shutdown if the bookie is readonly\", rw.isRunning());\n+        } finally {\n+            rw.shutdown();\n+        }\n+    }\n+\n     /**\n      * Test that the replication worker will shutdown if it lose its zookeeper session\n      */\n@@ -527,7 +568,7 @@ public void testRWZKSessionLost() throws Exception {\n     }\n \n     private void killAllBookies(LedgerHandle lh, InetSocketAddress excludeBK)\n-            throws InterruptedException {\n+            throws Exception {\n         // Killing all bookies except newly replicated bookie\n         Set<Entry<Long, ArrayList<InetSocketAddress>>> entrySet = LedgerHandleAdapter\n                 .getLedgerMetadata(lh).getEnsembles().entrySet();"},{"sha":"cec07d71b0d72df986f673b89689b8ad5402d8b1","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":16,"deletions":35,"changes":51,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -175,7 +175,7 @@ protected void stopBKCluster() throws Exception {\n         }\n     }\n \n-    protected ServerConfiguration newServerConfiguration() throws IOException {\n+    protected ServerConfiguration newServerConfiguration() throws Exception {\n         File f = File.createTempFile(\"bookie\", \"test\");\n         tmpDirs.add(f);\n         f.delete();\n@@ -191,6 +191,7 @@ protected ServerConfiguration newServerConfiguration(int port, String zkServers,\n         conf.setBookiePort(port);\n         conf.setZkServers(zkServers);\n         conf.setJournalDirName(journalDir.getPath());\n+        conf.setAllowLoopback(true);\n         String[] ledgerDirNames = new String[ledgerDirs.length];\n         for (int i=0; i<ledgerDirs.length; i++) {\n             ledgerDirNames[i] = ledgerDirs[i].getPath();\n@@ -202,7 +203,7 @@ protected ServerConfiguration newServerConfiguration(int port, String zkServers,\n     /**\n      * Get bookie address for bookie at index\n      */\n-    public InetSocketAddress getBookie(int index) throws IllegalArgumentException {\n+    public InetSocketAddress getBookie(int index) throws Exception {\n         if (bs.size() <= index || index < 0) {\n             throw new IllegalArgumentException(\"Invalid index, there are only \" + bs.size()\n                                                + \" bookies. Asked for \" + index);\n@@ -219,7 +220,7 @@ public InetSocketAddress getBookie(int index) throws IllegalArgumentException {\n      * @return the configuration of killed bookie\n      * @throws InterruptedException\n      */\n-    public ServerConfiguration killBookie(InetSocketAddress addr) throws InterruptedException {\n+    public ServerConfiguration killBookie(InetSocketAddress addr) throws Exception {\n         BookieServer toRemove = null;\n         int toRemoveIndex = 0;\n         for (BookieServer server : bs) {\n@@ -248,7 +249,7 @@ public ServerConfiguration killBookie(InetSocketAddress addr) throws Interrupted\n      * @throws InterruptedException\n      * @throws IOException\n      */\n-    public ServerConfiguration killBookie(int index) throws InterruptedException, IOException {\n+    public ServerConfiguration killBookie(int index) throws Exception {\n         if (index >= bs.size()) {\n             throw new IOException(\"Bookie does not exist\");\n         }\n@@ -271,7 +272,7 @@ public ServerConfiguration killBookie(int index) throws InterruptedException, IO\n      * @throws IOException\n      */\n     public CountDownLatch sleepBookie(InetSocketAddress addr, final int seconds)\n-            throws InterruptedException, IOException {\n+            throws Exception {\n         for (final BookieServer bookie : bs) {\n             if (bookie.getLocalAddress().equals(addr)) {\n                 final CountDownLatch l = new CountDownLatch(1);\n@@ -306,7 +307,7 @@ public void run() {\n      * @throws IOException\n      */\n     public void sleepBookie(InetSocketAddress addr, final CountDownLatch l)\n-            throws InterruptedException, IOException {\n+            throws Exception {\n         for (final BookieServer bookie : bs) {\n             if (bookie.getLocalAddress().equals(addr)) {\n                 Thread sleeper = new Thread() {\n@@ -337,8 +338,7 @@ public void run() {\n      * @throws BookieException\n      */\n     public void restartBookies()\n-            throws InterruptedException, IOException, KeeperException,\n-            BookieException, UnavailableException, CompatibilityException {\n+            throws Exception {\n         restartBookies(null);\n     }\n \n@@ -354,8 +354,7 @@ public void restartBookies()\n      * @throws BookieException\n      */\n     public void restartBookies(ServerConfiguration newConf)\n-            throws InterruptedException, IOException, KeeperException,\n-            BookieException, UnavailableException, CompatibilityException {\n+            throws Exception {\n         // shut down bookie server\n         for (BookieServer server : bs) {\n             server.shutdown();\n@@ -384,8 +383,7 @@ public void restartBookies(ServerConfiguration newConf)\n      * @throws IOException\n      */\n     public int startNewBookie()\n-            throws IOException, InterruptedException, KeeperException,\n-            BookieException, UnavailableException, CompatibilityException {\n+            throws Exception {\n         ServerConfiguration conf = newServerConfiguration();\n         bsConfs.add(conf);\n         bs.add(startBookie(conf));\n@@ -402,8 +400,7 @@ public int startNewBookie()\n      *\n      */\n     protected BookieServer startBookie(ServerConfiguration conf)\n-            throws IOException, InterruptedException, KeeperException,\n-            BookieException, UnavailableException, CompatibilityException {\n+            throws Exception {\n         BookieServer server = new BookieServer(conf);\n         server.start();\n \n@@ -430,8 +427,7 @@ protected BookieServer startBookie(ServerConfiguration conf)\n      * recovery for this bookie, if isAutoRecoveryEnabled is true.\n      */\n     protected BookieServer startBookie(ServerConfiguration conf, final Bookie b)\n-            throws IOException, InterruptedException, KeeperException,\n-            BookieException, UnavailableException, CompatibilityException {\n+            throws Exception {\n         BookieServer server = new BookieServer(conf) {\n             @Override\n             protected Bookie newBookie(ServerConfiguration conf) {\n@@ -486,9 +482,7 @@ public boolean isAutoRecoveryEnabled() {\n     }\n \n     private void startAutoRecovery(BookieServer bserver,\n-            ServerConfiguration conf) throws CompatibilityException,\n-            KeeperException, InterruptedException, IOException,\n-            UnavailableException {\n+                                   ServerConfiguration conf) throws Exception {\n         if (isAutoRecoveryEnabled()) {\n             AutoRecoveryMain autoRecoveryProcess = new AutoRecoveryMain(conf);\n             autoRecoveryProcess.start();\n@@ -498,7 +492,7 @@ private void startAutoRecovery(BookieServer bserver,\n         }\n     }\n \n-    private void stopAutoRecoveryService(BookieServer toRemove) {\n+    private void stopAutoRecoveryService(BookieServer toRemove) throws Exception {\n         AutoRecoveryMain autoRecoveryMain = autoRecoveryProcesses\n                 .remove(toRemove);\n         if (null != autoRecoveryMain && isAutoRecoveryEnabled()) {\n@@ -512,21 +506,8 @@ private void stopAutoRecoveryService(BookieServer toRemove) {\n      * Will starts the auto recovery process for the bookie servers. One auto\n      * recovery process per each bookie server, if isAutoRecoveryEnabled is\n      * enabled.\n-     *\n-     * @throws CompatibilityException\n-     *             - Compatibility error\n-     * @throws KeeperException\n-     *             - ZK exception\n-     * @throws InterruptedException\n-     *             - interrupted exception\n-     * @throws IOException\n-     *             - IOException\n-     * @throws UnavailableException\n-     *             - replication service has become unavailable\n      */\n-    public void startReplicationService() throws CompatibilityException,\n-            KeeperException, InterruptedException, IOException,\n-            UnavailableException {\n+    public void startReplicationService() throws Exception {\n         int index = -1;\n         for (BookieServer bserver : bs) {\n             startAutoRecovery(bserver, bsConfs.get(++index));\n@@ -537,7 +518,7 @@ public void startReplicationService() throws CompatibilityException,\n      * Will stops all the auto recovery processes for the bookie cluster, if\n      * isAutoRecoveryEnabled is true.\n      */\n-    public void stopReplicationService() {\n+    public void stopReplicationService() throws Exception {\n         if(false == isAutoRecoveryEnabled()){\n             return;\n         }"},{"sha":"ae51c05125f89af752a92ca2831e0c311881e5e6","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieFailureTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -168,7 +168,6 @@ void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n                 entries.add(entry.array());\n                 entriesSize.add(entry.array().length);\n                 lh.asyncAddEntry(entry.array(), this, sync);\n-\n             }\n \n             LOG.info(\"Wrote \" + numEntriesToWrite + \" and now going to fail bookie.\");\n@@ -202,11 +201,10 @@ void auxTestReadWriteAsyncSingleClient(BookieServer bs) throws IOException {\n             lh.asyncReadEntries(0, numEntriesToWrite - 1, this, sync);\n \n             synchronized (sync) {\n-                while (sync.value == false) {\n-                    sync.wait(10000);\n-                    assertTrue(\"Haven't received entries\", sync.value);\n-                    assertFalse(\"Failure occurred during read\", sync.failureOccurred);\n-                }\n+                int i = 0;\n+                sync.wait(10000);\n+                assertFalse(\"Failure occurred during read\", sync.failureOccurred);\n+                assertTrue(\"Haven't received entries\", sync.value);\n             }\n \n             LOG.debug(\"*** READ COMPLETE ***\");"},{"sha":"e3107c31b778c51c9e1d6a44368df8ed1996d203","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/LedgerCreateDeleteTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,9 +21,12 @@\n  *\n  */\n \n+import static org.junit.Assert.fail;\n+\n import java.util.ArrayList;\n \n import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n \n import org.junit.Before;\n@@ -71,4 +74,26 @@ public void testCreateDeleteLedgers() throws Exception {\n             lh.close();\n         }\n     }\n+\n+    @Test(timeout = 60000)\n+    public void testCreateLedgerWithBKNotEnoughBookiesException() throws Exception {\n+        try {\n+            bkc.createLedger(2, 2, DigestType.CRC32, \"bk is cool\".getBytes());\n+            fail(\"Should be able to throw BKNotEnoughBookiesException\");\n+        } catch (BKException.BKNotEnoughBookiesException bkn) {\n+            // expected\n+        }\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testCreateLedgerWithZKException() throws Exception {\n+        stopZKCluster();\n+        try {\n+            bkc.createLedger(1, 1, DigestType.CRC32, \"bk is cool\".getBytes());\n+            fail(\"Should be able to throw ZKException\");\n+        } catch (BKException.ZKException zke) {\n+            // expected\n+        }\n+    }\n+\n }"},{"sha":"47633a24bfbb85ba066539cb9c7672b1ae25eccb","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ReadOnlyBookieTest.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -184,4 +184,40 @@ public void testLedgerCreationShouldFailWithReadonlyBookie() throws Exception {\n             // Expected\n         }\n     }\n+\n+    /**\n+     * Try to read closed ledger from restarted ReadOnlyBookie.\n+     */\n+    public void testReadFromReadOnlyBookieShouldBeSuccess() throws Exception {\n+        LedgerHandle ledger = bkc.createLedger(2, 2, DigestType.MAC, \"\".getBytes());\n+        for (int i = 0; i < 10; i++) {\n+            ledger.addEntry(\"data\".getBytes());\n+        }\n+        ledger.close();\n+        bsConfs.get(1).setReadOnlyModeEnabled(true);\n+        bsConfs.get(1).setDiskCheckInterval(500);\n+        restartBookies();\n+\n+        // Check new bookie with readonly mode enabled.\n+        File[] ledgerDirs = bsConfs.get(1).getLedgerDirs();\n+        assertEquals(\"Only one ledger dir should be present\", 1, ledgerDirs.length);\n+        Bookie bookie = bs.get(1).getBookie();\n+        LedgerDirsManager ledgerDirsManager = bookie.getLedgerDirsManager();\n+\n+        // Now add the current ledger dir to filled dirs list\n+        ledgerDirsManager.addToFilledDirs(new File(ledgerDirs[0], \"current\"));\n+\n+        // Wait till Bookie converts to ReadOnly mode.\n+        Thread.sleep(1000);\n+        assertTrue(\"Bookie should be converted to readonly mode\", bookie.isRunning() && bookie.isReadOnly());\n+\n+        // Now kill the other bookie and read entries from the readonly bookie\n+        killBookie(0);\n+\n+        Enumeration<LedgerEntry> readEntries = ledger.readEntries(0, 9);\n+        while (readEntries.hasMoreElements()) {\n+            LedgerEntry entry = readEntries.nextElement();\n+            assertEquals(\"Entry should contain correct data\", \"data\", new String(entry.getEntry()));\n+        }\n+    }\n }"},{"sha":"3bd931203672132739ff9fb5bdc1cd9b216da315","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ZooKeeperUtil.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -126,6 +126,16 @@ public void run() {\n         throw new IOException(\"ZooKeeper thread not found\");\n     }\n \n+    public void expireSession(ZooKeeper zk) throws Exception {\n+        long id = zk.getSessionId();\n+        byte[] password = zk.getSessionPasswd();\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n+        ZooKeeper zk2 = new ZooKeeper(getZooKeeperConnectString(),\n+                zk.getSessionTimeout(), w, id, password);\n+        w.waitForConnection();\n+        zk2.close();\n+    }\n+\n     public void killServer() throws Exception {\n         if (zkc != null) {\n             zkc.close();"},{"sha":"36d0f81df54281ba892def581767a113deda1934","filename":"bookkeeper-server/src/test/resources/log4j.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/resources/log4j.properties","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/bookkeeper-server/src/test/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/resources/log4j.properties?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -33,6 +33,7 @@ log4j.rootLogger=INFO, CONSOLE\n \n # Example with rolling log file and tracing\n #log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n+log4j.logger.org.apache.zookeeper=ERROR\n \n #\n # Log INFO level and above messages to the console"},{"sha":"5c8260bc63471d622153aaf9f713414a19a4abd9","filename":"compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>compat-deps</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-server-compat400</artifactId>"},{"sha":"b3209c750b4d633fe6c6443faa8e9ce1360676cc","filename":"compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>compat-deps</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-server-compat410</artifactId>"},{"sha":"e147158e7c4cac1727b2fdfb108a93d41eb98e67","filename":"compat-deps/hedwig-server-compat-4.0.0/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/hedwig-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/hedwig-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.0.0/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>compat-deps</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>hedwig-server-compat400</artifactId>"},{"sha":"7ebd697e57cdbfbf5e32ee2748d0d4038275f359","filename":"compat-deps/hedwig-server-compat-4.1.0/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/hedwig-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/hedwig-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.1.0/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>compat-deps</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>hedwig-server-compat410</artifactId>"},{"sha":"bacdf7c4ba06b5f4424f6df4cc42a5b45b473beb","filename":"compat-deps/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/compat-deps/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -22,11 +22,11 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>org.apache.bookkeeper</groupId>\n-  <version>4.2.1</version>\n+  <version>4.2.2</version>\n   <artifactId>compat-deps</artifactId>\n   <packaging>pom</packaging>\n   <name>compability dependencies</name>"},{"sha":"e982f0f7f84797a4490453214a22e2e6e9f79924","filename":"hedwig-client/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <groupId>org.apache.bookkeeper</groupId>\n     <artifactId>bookkeeper</artifactId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <properties>\n       <mainclass>org.apache.hedwig.client.App</mainclass>"},{"sha":"b980e53bf0a57532c521547a80bd60230245a6cb","filename":"hedwig-client/src/main/cpp/lib/channel.cpp","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/lib/channel.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/lib/channel.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/channel.cpp?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -702,7 +702,7 @@ void AsioSSLDuplexChannel::sslChannelConnected(const OperationCallbackPtr& callb\n void AsioSSLDuplexChannel::startHandShake(const OperationCallbackPtr& callback) {\n   ssl_socket->async_handshake(boost::asio::ssl::stream_base::client,\n                               boost::bind(&AsioSSLDuplexChannel::handleHandshake,\n-                                          boost::shared_dynamic_cast<AsioSSLDuplexChannel>(shared_from_this()),\n+                                          boost::dynamic_pointer_cast<AsioSSLDuplexChannel>(shared_from_this()),\n                                           callback, boost::asio::placeholders::error));\n }\n "},{"sha":"24d458e06d871729e7b3a573da0ba82cd207386c","filename":"hedwig-client/src/main/cpp/lib/data.cpp","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/lib/data.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/lib/data.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/data.cpp?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -24,6 +24,7 @@\n \n #include <log4cxx/logger.h>\n #include <iostream>\n+#include <boost/thread/locks.hpp>\n \n #define stringify( name ) #name\n "},{"sha":"8573ceabc87c16f5b52da9d04c80eeb675893a50","filename":"hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/lib/subscriberimpl.cpp?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -39,7 +39,7 @@ const int DEFAULT_RECONNECT_SUBSCRIBE_RETRY_WAIT_TIME = 5000;\n const bool DEFAULT_SUBSCRIBER_AUTOCONSUME = true;\n const int DEFAULT_SUBSCRIPTION_MESSAGE_BOUND = 0;\n \n-static const std::type_info& RESUBSCRIBE_EXCEPTION = typeid(ResubscribeException());\n+static const std::type_info& RESUBSCRIBE_EXCEPTION_TYPEID = typeid(ResubscribeException());\n \n ConsumeWriteCallback::ConsumeWriteCallback(const ActiveSubscriberPtr& activeSubscriber,\n                                            const PubSubDataPtr& data,\n@@ -147,7 +147,7 @@ void ResubscribeCallback::operationComplete(const ResponseBody & resp) {\n }\n \n void ResubscribeCallback::operationFailed(const std::exception& exception) {\n-  if (RESUBSCRIBE_EXCEPTION == typeid(exception)) {\n+  if (RESUBSCRIBE_EXCEPTION_TYPEID == typeid(exception)) {\n     // it might be caused by closesub when resubscribing.\n     // so we don't need to retry resubscribe again\n     LOG4CXX_WARN(logger, \"Failed to resubscribe \" << *activeSubscriber"},{"sha":"1917d7e9fa6707e2501b63aff4bb9b92a991e179","filename":"hedwig-client/src/main/cpp/scripts/log4cxx.conf","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/scripts/log4cxx.conf","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/scripts/log4cxx.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/log4cxx.conf?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -28,9 +28,9 @@ log4j.appender.hedwig.fileName=./testLog.log\n log4j.appender.hedwig.layout=org.apache.log4j.PatternLayout\n log4j.appender.hedwig.layout.ConversionPattern=[%d{%H:%M:%S.%l}] %t %p %c - %m%n\n \n-log4j.appender.hedwig=org.apache.log4j.RollingFileAppender\n+log4j.appender.hedwigtest=org.apache.log4j.RollingFileAppender\n #log4j.appender.hedwigtest=org.apache.log4j.ConsoleAppender\n-log4j.appender.hedwig.fileName=./testLog.log\n+log4j.appender.hedwigtest.fileName=./testLog.log\n log4j.appender.hedwigtest.layout=org.apache.log4j.PatternLayout\n log4j.appender.hedwigtest.layout.ConversionPattern=[%d{%H:%M:%S.%l}] %t %p %c - %m%n\n "},{"sha":"cd8563a620b27007d33b54df1ee3c582e2b287fe","filename":"hedwig-client/src/main/cpp/scripts/server-control.sh","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/scripts/server-control.sh","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/cpp/scripts/server-control.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/cpp/scripts/server-control.sh?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -107,8 +107,6 @@ log4j.appender.ROLLINGFILE.Threshold=DEBUG\n log4j.appender.ROLLINGFILE.File=/tmp/hedwig-server-$COUNT.log\n log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout\n log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d{ISO8601} - %-5p - [%t:%C{1}@%L] - %m%n\n-# Max log file size of 10MB\n-log4j.appender.ROLLINGFILE.MaxFileSize=10MB\n # uncomment the next line to limit number of backup files\n #log4j.appender.ROLLINGFILE.MaxBackupIndex=10\n log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout"},{"sha":"10506d821af6e15a71ec4ab531dc54ccf319e425","filename":"hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/src/main/java/org/apache/hedwig/client/netty/impl/ActiveSubscriber.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -17,26 +17,20 @@\n  */\n package org.apache.hedwig.client.netty.impl;\n \n+import static org.apache.hedwig.util.VarArgs.va;\n+\n import java.util.LinkedList;\n import java.util.Queue;\n \n-import com.google.protobuf.ByteString;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.jboss.netty.channel.Channel;\n-import org.jboss.netty.channel.ChannelFuture;\n-import org.jboss.netty.channel.ChannelFutureListener;\n-\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.conf.ClientConfiguration;\n import org.apache.hedwig.client.data.MessageConsumeData;\n import org.apache.hedwig.client.data.PubSubData;\n import org.apache.hedwig.client.data.TopicSubscriber;\n import org.apache.hedwig.client.exceptions.AlreadyStartDeliveryException;\n+import org.apache.hedwig.client.netty.FilterableMessageHandler;\n import org.apache.hedwig.client.netty.HChannel;\n import org.apache.hedwig.client.netty.NetUtils;\n-import org.apache.hedwig.client.netty.FilterableMessageHandler;\n import org.apache.hedwig.exceptions.PubSubException.ClientNotSubscribedException;\n import org.apache.hedwig.filter.ClientMessageFilter;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n@@ -46,7 +40,11 @@\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n import org.apache.hedwig.protoextensions.MessageIdUtils;\n import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n-import static org.apache.hedwig.util.VarArgs.va;\n+import org.jboss.netty.channel.Channel;\n+import org.jboss.netty.channel.ChannelFuture;\n+import org.jboss.netty.channel.ChannelFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * an active subscriber handles subscription actions in a channel.\n@@ -371,6 +369,7 @@ public void resubscribeIfNecessary(SubscriptionEvent event) {\n             new ResubscribeCallback(topicSubscriber, op,\n                                     channelManager, retryWaitTime);\n         op.setCallback(resubscribeCb);\n+        op.shouldClaim = false;\n         op.context = null;\n         op.setOriginalChannelForResubscribe(hChannel);\n         if (logger.isDebugEnabled()) {"},{"sha":"9c4af2879debc8db237e0a1a7147cbb268f08b6b","filename":"hedwig-protocol/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-protocol/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-protocol/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <groupId>org.apache.bookkeeper</groupId>\n     <artifactId>bookkeeper</artifactId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <artifactId>hedwig-protocol</artifactId>\n   <packaging>jar</packaging>"},{"sha":"0da6d7637042c7186164ab368b0f5a93ecb39d03","filename":"hedwig-server/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <groupId>org.apache.bookkeeper</groupId>\n     <artifactId>bookkeeper</artifactId>\n-    <version>4.2.1</version>\n+    <version>4.2.2</version>\n   </parent>\n   <properties>\n       <mainclass>org.apache.hedwig.server.netty.PubSubServer</mainclass>"},{"sha":"28b044d4b12a1744a7c7a49f020cab3aeb045ffe","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","status":"modified","additions":26,"deletions":4,"changes":30,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/delivery/FIFODeliveryManager.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -139,6 +139,7 @@ public FIFODeliveryManager(PersistenceManager persistenceMgr, ServerConfiguratio\n         this.cfg = cfg;\n     }\n \n+    @Override\n     public void start() {\n         workerThread.start();\n     }\n@@ -205,7 +206,7 @@ public void startServingSubscription(ByteString topic, ByteString subscriberId,\n                                          MessageSeqId seqIdToStartFrom,\n                                          DeliveryEndPoint endPoint, ServerMessageFilter filter,\n                                          Callback<Void> callback, Object ctx) {\n-        ActiveSubscriberState subscriber = \n+        ActiveSubscriberState subscriber =\n             new ActiveSubscriberState(topic, subscriberId,\n                                       preferences,\n                                       seqIdToStartFrom.getLocalComponent() - 1,\n@@ -262,7 +263,7 @@ public void messageConsumed(ByteString topic, ByteString subscriberId,\n         if (null == subState) {\n             return;\n         }\n-        subState.messageConsumed(consumedSeqId.getLocalComponent()); \n+        subState.messageConsumed(consumedSeqId.getLocalComponent());\n     }\n \n     /**\n@@ -313,6 +314,7 @@ public void run() {\n     /**\n      * Stop method which will enqueue a ShutdownDeliveryManagerRequest.\n      */\n+    @Override\n     public void stop() {\n         enqueueWithoutFailure(new ShutdownDeliveryManagerRequest());\n     }\n@@ -528,8 +530,8 @@ protected synchronized void messageConsumed(long newSeqIdConsumed) {\n                 enqueueWithoutFailure(new DeliveryManagerRequest() {\n                     @Override\n                     public void performRequest() {\n-                        // enqueue \n-                        clearRetryDelayForSubscriber(ActiveSubscriberState.this);            \n+                        // enqueue\n+                        clearRetryDelayForSubscriber(ActiveSubscriberState.this);\n                     }\n                 });\n             }\n@@ -621,6 +623,19 @@ public void messageScanned(Object ctx, Message message) {\n             }\n \n             if (!filter.testMessage(message)) {\n+                // for filtered out messages, we don't deliver the message to client, so we would not\n+                // receive its consume request which moves the <i>lastSeqIdConsumedUtil</i> pointer.\n+                // we move the <i>lastSeqIdConsumedUtil</i> here for filtered out messages, which would\n+                // avoid a subscriber being throttled due to the message gap introduced by filtering.\n+                //\n+                // it is OK to move <i>lastSeqIdConsumedUtil</i> here, since this pointer is subscriber's\n+                // delivery state which to trottling deliver. changing <i>lastSeqIdConsumedUtil</i> would\n+                // not affect the subscriber's consume pointer in zookeeper which is managed in subscription\n+                // manager.\n+                //\n+                // And marking message consumed before calling sending finished, would avoid the subscriber\n+                // being throttled first and released from throttled state laster.\n+                messageConsumed(message.getMsgId().getLocalComponent());\n                 sendingFinished();\n                 return;\n             }\n@@ -641,6 +656,7 @@ public void messageScanned(Object ctx, Message message) {\n \n         }\n \n+        @Override\n         public void scanFailed(Object ctx, Exception exception) {\n             if (!checkConnected()) {\n                 return;\n@@ -650,6 +666,7 @@ public void scanFailed(Object ctx, Exception exception) {\n             retryErroredSubscriberAfterDelay(this);\n         }\n \n+        @Override\n         public void scanFinished(Object ctx, ReasonForFinish reason) {\n             checkConnected();\n         }\n@@ -658,6 +675,7 @@ public void scanFinished(Object ctx, ReasonForFinish reason) {\n          * ===============================================================\n          * {@link DeliveryCallback} methods\n          */\n+        @Override\n         public void sendingFinished() {\n             if (!isConnected()) {\n                 return;\n@@ -687,6 +705,7 @@ public synchronized long getLastSeqIdCommunicatedExternally() {\n         }\n \n \n+        @Override\n         public void permanentErrorOnSend() {\n             // the underlying channel is broken, the channel will\n             // be closed in UmbrellaHandler when exception happened.\n@@ -695,6 +714,7 @@ public void permanentErrorOnSend() {\n                                   NOP_CALLBACK, null);\n         }\n \n+        @Override\n         public void transientErrorOnSend() {\n             retryErroredSubscriberAfterDelay(this);\n         }\n@@ -703,6 +723,7 @@ public void transientErrorOnSend() {\n          * ===============================================================\n          * {@link DeliveryManagerRequest} methods\n          */\n+        @Override\n         public void performRequest() {\n             // Put this subscriber in the channel to subscriber mapping\n             ActiveSubscriberState prevSubscriber =\n@@ -847,6 +868,7 @@ public void performRequest() {\n         // This is a simple type of Request we will enqueue when the\n         // PubSubServer is shut down and we want to stop the DeliveryManager\n         // thread.\n+        @Override\n         public void performRequest() {\n             keepRunning = false;\n         }"},{"sha":"ba57aa06e3283c33a2c31c53b0241a1cbac03483","filename":"hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","status":"modified","additions":35,"deletions":19,"changes":54,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/java/org/apache/hedwig/server/persistence/ReadAheadCache.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -17,11 +17,9 @@\n  */\n package org.apache.hedwig.server.persistence;\n \n-import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.LinkedList;\n-import java.util.Map;\n import java.util.Queue;\n import java.util.Set;\n import java.util.SortedMap;\n@@ -30,33 +28,28 @@\n import java.util.TreeSet;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n-import java.util.concurrent.BlockingQueue;\n-import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.RejectedExecutionException;\n-import java.util.concurrent.atomic.AtomicLong;\n import java.util.concurrent.atomic.AtomicInteger;\n-\n-import org.apache.hedwig.protocol.PubSubProtocol;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.google.protobuf.ByteString;\n+import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.bookkeeper.util.MathUtils;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.SafeRunnable;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.exceptions.PubSubException.ServerNotResponsibleForTopicException;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protoextensions.MessageIdUtils;\n import org.apache.hedwig.server.common.ServerConfiguration;\n-import org.apache.hedwig.server.common.UnexpectedError;\n import org.apache.hedwig.server.jmx.HedwigJMXService;\n import org.apache.hedwig.server.jmx.HedwigMBeanInfo;\n import org.apache.hedwig.server.jmx.HedwigMBeanRegistry;\n-import org.apache.hedwig.server.persistence.ReadAheadCacheBean;\n import org.apache.hedwig.util.Callback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.protobuf.ByteString;\n \n public class ReadAheadCache implements PersistenceManager, HedwigJMXService {\n \n@@ -186,10 +179,12 @@ public ReadAheadCache start() {\n      * the real persistence manager.\n      */\n \n+    @Override\n     public long getSeqIdAfterSkipping(ByteString topic, long seqId, int skipAmount) {\n         return realPersistenceManager.getSeqIdAfterSkipping(topic, seqId, skipAmount);\n     }\n \n+    @Override\n     public MessageSeqId getCurrentSeqIdForTopic(ByteString topic) throws ServerNotResponsibleForTopicException {\n         return realPersistenceManager.getCurrentSeqIdForTopic(topic);\n     }\n@@ -203,6 +198,7 @@ public MessageSeqId getCurrentSeqIdForTopic(ByteString topic) throws ServerNotRe\n      * our callback on the return path\n      *\n      */\n+    @Override\n     public void persistMessage(PersistRequest request) {\n         // make a new PersistRequest object so that we can insert our own\n         // callback in the middle. Assign the original request as the context\n@@ -225,6 +221,7 @@ public void persistMessage(PersistRequest request) {\n          * In case there is a failure in persisting, just pass it to the\n          * original callback\n          */\n+        @Override\n         public void operationFailed(Object ctx, PubSubException exception) {\n             PersistRequest originalRequest = (PersistRequest) ctx;\n             Callback<PubSubProtocol.MessageSeqId> originalCallback = originalRequest.getCallback();\n@@ -237,6 +234,7 @@ public void operationFailed(Object ctx, PubSubException exception) {\n          * success, and then opportunistically treat the message as if it just\n          * came in through a scan\n          */\n+        @Override\n         public void operationFinished(Object ctx, PubSubProtocol.MessageSeqId resultOfOperation) {\n             PersistRequest originalRequest = (PersistRequest) ctx;\n \n@@ -283,6 +281,7 @@ public void safeRun() {\n      * 2. Scan - Since the scan needs to touch the cache, we will just enqueue\n      * the scan request and let the cache maintainer thread handle it.\n      */\n+    @Override\n     public void scanSingleMessage(ScanRequest request) {\n         // Let the scan requests be serialized through the queue\n         enqueueWithoutFailureByTopic(request.getTopic(),\n@@ -295,6 +294,7 @@ public void scanSingleMessage(ScanRequest request) {\n      * 3. Enqueue the request so that the cache maintainer thread can delete all\n      * message-ids older than the one specified\n      */\n+    @Override\n     public void deliveredUntil(ByteString topic, Long seqId) {\n         enqueueWithoutFailureByTopic(topic, new DeliveredUntil(topic, seqId));\n     }\n@@ -308,25 +308,30 @@ public void deliveredUntil(ByteString topic, Long seqId) {\n      * get aged out of the cache eventually. For now, there is no need to\n      * proactively remove those entries from the cache.\n      */\n+    @Override\n     public void consumedUntil(ByteString topic, Long seqId) {\n         realPersistenceManager.consumedUntil(topic, seqId);\n     }\n \n+    @Override\n     public void setMessageBound(ByteString topic, Integer bound) {\n         realPersistenceManager.setMessageBound(topic, bound);\n     }\n \n+    @Override\n     public void clearMessageBound(ByteString topic) {\n         realPersistenceManager.clearMessageBound(topic);\n     }\n \n+    @Override\n     public void consumeToBound(ByteString topic) {\n         realPersistenceManager.consumeToBound(topic);\n     }\n \n     /**\n      * Stop the readahead cache.\n      */\n+    @Override\n     public void stop() {\n         try {\n             keepRunning = false;\n@@ -439,6 +444,7 @@ public ReadAheadScanCallback(Queue<CacheKey> installedStubs, ByteString topic) {\n             this.topic = topic;\n         }\n \n+        @Override\n         public void messageScanned(Object ctx, Message message) {\n \n             // Any message we read is potentially useful for us, so lets first\n@@ -473,10 +479,12 @@ public void messageScanned(Object ctx, Message message) {\n \n         }\n \n+        @Override\n         public void scanFailed(Object ctx, Exception exception) {\n             enqueueDeleteOfRemainingStubs(exception);\n         }\n \n+        @Override\n         public void scanFinished(Object ctx, ReasonForFinish reason) {\n             // If the scan finished because no more messages are present, its ok\n             // to leave the stubs in place because they will get filled in as\n@@ -501,6 +509,7 @@ private void enqueueDeleteOfRemainingStubs(Exception reason) {\n     protected static class HashSetCacheKeyFactory implements Factory<Set<CacheKey>> {\n         protected final static HashSetCacheKeyFactory instance = new HashSetCacheKeyFactory();\n \n+        @Override\n         public Set<CacheKey> newInstance() {\n             return new HashSet<CacheKey>();\n         }\n@@ -509,6 +518,7 @@ private void enqueueDeleteOfRemainingStubs(Exception reason) {\n     protected static class TreeSetLongFactory implements Factory<SortedSet<Long>> {\n         protected final static TreeSetLongFactory instance = new TreeSetLongFactory();\n \n+        @Override\n         public SortedSet<Long> newInstance() {\n             return new TreeSet<Long>();\n         }\n@@ -527,7 +537,6 @@ protected void addMessageToCache(final CacheKey cacheKey,\n         logger.debug(\"Adding msg {} to readahead cache\", cacheKey);\n \n         CacheValue cacheValue;\n-\n         if ((cacheValue = cache.get(cacheKey)) == null) {\n             cacheValue = new CacheValue();\n             CacheValue oldValue = cache.putIfAbsent(cacheKey, cacheValue);\n@@ -539,11 +548,13 @@ protected void addMessageToCache(final CacheKey cacheKey,\n         }\n \n         CacheSegment segment = cacheSegment.get();\n-        int size = message.getBody().size();\n+        if (cacheValue.isStub()) { // update cache size only when cache value is a stub\n+            int size = message.getBody().size();\n \n-        // update the cache size\n-        segment.presentSegmentSize.addAndGet(size);\n-        presentCacheSize.addAndGet(size);\n+            // update the cache size\n+            segment.presentSegmentSize.addAndGet(size);\n+            presentCacheSize.addAndGet(size);\n+        }\n \n         synchronized (cacheValue) {\n             // finally add the message to the cache\n@@ -663,6 +674,7 @@ public ExceptionOnCacheKey(CacheKey cacheKey, Exception exception) {\n          * on the callbacks registered for that stub, and delete the entry from\n          * the cache\n          */\n+        @Override\n         public void performRequest() {\n             removeMessageFromCache(cacheKey, exception,\n                                    // maintainTimeIndex=\n@@ -696,6 +708,7 @@ public CancelScanRequestOp(CancelScanRequest request) {\n             this.request = request;\n         }\n \n+        @Override\n         public void performRequest() {\n             // cancel scan request\n             cancelScanRequest(request.getScanRequest());\n@@ -732,6 +745,7 @@ public ScanResponse(CacheKey cacheKey, Message message) {\n             this.message = message;\n         }\n \n+        @Override\n         public void performRequest() {\n             addMessageToCache(cacheKey, message, MathUtils.now());\n         }\n@@ -747,6 +761,7 @@ public DeliveredUntil(ByteString topic, Long seqId) {\n             this.seqId = seqId;\n         }\n \n+        @Override\n         public void performRequest() {\n             SortedSet<Long> orderedSeqIds = orderedIndexOnSeqId.get(topic);\n             if (orderedSeqIds == null) {\n@@ -795,6 +810,7 @@ public ScanRequestWrapper(ScanRequest request) {\n          * underlying persistence manager.\n          */\n \n+        @Override\n         public void performRequest() {\n \n             RangeScanRequest readAheadRequest = doReadAhead(request);\n@@ -805,7 +821,7 @@ public void performRequest() {\n             CacheValue cacheValue = cache.get(cacheKey);\n             if (null == cacheValue) {\n                 logger.error(\"Cache key {} is removed after installing stub when scanning.\", cacheKey);\n-                // reissue the request \n+                // reissue the request\n                 scanSingleMessage(request);\n                 return;\n             }"},{"sha":"bc0900cc04c352d2db81be71157036348d12a1c1","filename":"hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/client/TestSubAfterCloseSub.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -15,30 +15,26 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-package org.apache.hedwig.server.integration;\n+package org.apache.hedwig.client;\n \n import java.io.IOException;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-\n-import com.google.protobuf.ByteString;\n import org.apache.hedwig.client.api.MessageHandler;\n-import org.apache.hedwig.client.api.Subscriber;\n-import org.apache.hedwig.client.HedwigClient;\n-import org.apache.hedwig.client.api.Client;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.api.Subscriber;\n import org.apache.hedwig.exceptions.PubSubException;\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.server.HedwigHubTestBase;\n-import org.apache.hedwig.server.netty.PubSubServer;\n import org.apache.hedwig.server.delivery.DeliveryManager;\n import org.apache.hedwig.server.delivery.FIFODeliveryManager;\n+import org.apache.hedwig.server.netty.PubSubServer;\n import org.apache.hedwig.util.Callback;\n+import org.junit.Test;\n+\n+import com.google.protobuf.ByteString;\n \n public class TestSubAfterCloseSub extends HedwigHubTestBase {\n \n@@ -83,10 +79,12 @@ public void run() {\n     /**\n      * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-507}\n      */\n+    /* TODO: Add this test case back after BOOKKEEPER-37 is fixed\n     @Test(timeout=15000)\n     public void testSubAfterCloseSubForSimpleClient() throws Exception {\n         runSubAfterCloseSubTest(false);\n     }\n+    */\n \n     /**\n      * {@link https://issues.apache.org/jira/browse/BOOKKEEPER-507}"},{"sha":"e284ace554c987eb9ff1e23490f316bf8793f95a","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","status":"modified","additions":145,"deletions":7,"changes":152,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/delivery/TestThrottlingDelivery.java?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -17,14 +17,18 @@\n  */\n package org.apache.hedwig.server.delivery;\n \n+import java.io.IOException;\n+\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.commons.configuration.Configuration;\n+import org.apache.commons.configuration.ConfigurationException;\n+ \n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -40,11 +44,19 @@\n import org.apache.hedwig.client.api.MessageHandler;\n import org.apache.hedwig.client.api.Publisher;\n import org.apache.hedwig.client.api.Subscriber;\n-import org.apache.hedwig.client.conf.ClientConfiguration;\n+import org.apache.hedwig.filter.ClientMessageFilter;\n+import org.apache.hedwig.filter.MessageFilterBase;\n+import org.apache.hedwig.filter.ServerMessageFilter;\n+import org.apache.hedwig.protocol.PubSubProtocol;\n+\n import org.apache.hedwig.protocol.PubSubProtocol.Message;\n+import org.apache.hedwig.protocol.PubSubProtocol.MessageHeader;\n import org.apache.hedwig.protocol.PubSubProtocol.MessageSeqId;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscribeRequest.CreateOrAttach;\n import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionOptions;\n+import org.apache.hedwig.protocol.PubSubProtocol.SubscriptionPreferences;\n+import org.apache.hedwig.protoextensions.SubscriptionStateUtils;\n+\n import org.apache.hedwig.server.HedwigHubTestBase;\n import org.apache.hedwig.server.common.ServerConfiguration;\n import org.apache.hedwig.util.Callback;\n@@ -53,6 +65,43 @@\n public class TestThrottlingDelivery extends HedwigHubTestBase {\n \n     private static final int DEFAULT_MESSAGE_WINDOW_SIZE = 10;\n+    private static final String OPT_MOD = \"MOD\";\n+\n+    static class ModMessageFilter implements ServerMessageFilter, ClientMessageFilter {\n+\n+        int mod;\n+\n+        @Override\n+        public MessageFilterBase setSubscriptionPreferences(ByteString topic, ByteString subscriberId,\n+                SubscriptionPreferences preferences) {\n+            Map<String, ByteString> userOptions = SubscriptionStateUtils.buildUserOptions(preferences);\n+            ByteString modValue = userOptions.get(OPT_MOD);\n+            if (null == modValue) {\n+                mod = 0;\n+            } else {\n+                mod = Integer.valueOf(modValue.toStringUtf8());\n+            }\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean testMessage(Message message) {\n+            int value = Integer.valueOf(message.getBody().toStringUtf8());\n+            return 0 == value % mod;\n+        }\n+\n+        @Override\n+        public ServerMessageFilter initialize(Configuration conf) throws ConfigurationException, IOException {\n+            // do nothing\n+            return this;\n+        }\n+\n+        @Override\n+        public void uninitialize() {\n+            // do nothing\n+        }\n+\n+    }\n \n     protected class ThrottleDeliveryServerConfiguration extends HubServerConfiguration {\n \n@@ -62,7 +111,7 @@\n \n         @Override\n         public int getDefaultMessageWindowSize() {\n-            return TestThrottlingDelivery.this.DEFAULT_MESSAGE_WINDOW_SIZE;\n+            return TestThrottlingDelivery.DEFAULT_MESSAGE_WINDOW_SIZE;\n         }\n     }\n \n@@ -71,7 +120,7 @@ public int getDefaultMessageWindowSize() {\n         int messageWindowSize;\n \n         ThrottleDeliveryClientConfiguration() {\n-            this(TestThrottlingDelivery.this.DEFAULT_MESSAGE_WINDOW_SIZE);\n+            this(TestThrottlingDelivery.DEFAULT_MESSAGE_WINDOW_SIZE);\n         }\n \n         ThrottleDeliveryClientConfiguration(int messageWindowSize) {\n@@ -98,6 +147,73 @@ public boolean isSubscriptionChannelSharingEnabled() {\n         }\n     }\n \n+    private void publishNums(Publisher pub, ByteString topic, int start, int num, int M) throws Exception {\n+        for (int i = 1; i <= num; i++) {\n+            PubSubProtocol.Map.Builder propsBuilder = PubSubProtocol.Map.newBuilder().addEntries(\n+                    PubSubProtocol.Map.Entry.newBuilder().setKey(OPT_MOD)\n+                            .setValue(ByteString.copyFromUtf8(String.valueOf((start + i) % M))));\n+            MessageHeader.Builder headerBuilder = MessageHeader.newBuilder().setProperties(propsBuilder);\n+            Message msg = Message.newBuilder().setBody(ByteString.copyFromUtf8(String.valueOf(start + i)))\n+                    .setHeader(headerBuilder).build();\n+            pub.publish(topic, msg);\n+        }\n+    }\n+\n+    private void throttleWithFilter(Publisher pub, final Subscriber sub,\n+                           ByteString topic, ByteString subid,\n+                           final int X) throws Exception {\n+        // publish numbers with header (so only 3 messages would be delivered)\n+        publishNums(pub, topic, 0, 3 * X, X);\n+\n+        // subscribe the topic with filter\n+        PubSubProtocol.Map userOptions = PubSubProtocol.Map\n+                .newBuilder()\n+                .addEntries(\n+                        PubSubProtocol.Map.Entry.newBuilder().setKey(OPT_MOD)\n+                                .setValue(ByteString.copyFromUtf8(String.valueOf(X)))).build();\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder().setCreateOrAttach(CreateOrAttach.ATTACH)\n+                .setOptions(userOptions).setMessageFilter(ModMessageFilter.class.getName()).build();\n+        sub.subscribe(topic, subid, opts);\n+\n+        final AtomicInteger expected = new AtomicInteger(X);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        sub.startDelivery(topic, subid, new MessageHandler() {\n+            @Override\n+            public synchronized void deliver(ByteString topic, ByteString subscriberId,\n+                                             Message msg,\n+                                             Callback<Void> callback, Object context) {\n+                try {\n+                    int value = Integer.valueOf(msg.getBody().toStringUtf8());\n+                    logger.debug(\"Received message {},\", value);\n+\n+                    if (value == expected.get()) {\n+                        expected.addAndGet(X);\n+                    } else {\n+                        // error condition\n+                        logger.error(\"Did not receive expected value, expected {}, got {}\",\n+                                     expected.get(), value);\n+                        expected.set(0);\n+                        latch.countDown();\n+                    }\n+                    if (value == 3 * X) {\n+                        latch.countDown();\n+                    }\n+                    callback.operationFinished(context, null);\n+                    sub.consume(topic, subscriberId, msg.getMsgId());\n+                } catch (Exception e) {\n+                    logger.error(\"Received bad message\", e);\n+                    latch.countDown();\n+                }\n+            }\n+        });\n+\n+        assertTrue(\"Timed out waiting for messages \" + 3 * X, latch.await(10, TimeUnit.SECONDS));\n+        assertEquals(\"Should be expected message with \" + 4 * X, 4 * X, expected.get());\n+\n+        sub.stopDelivery(topic, subid);\n+        sub.closeSubscription(topic, subid);\n+    }\n+\n     private void throttleX(Publisher pub, final Subscriber sub,\n                            ByteString topic, ByteString subid,\n                            final int X) throws Exception {\n@@ -138,7 +254,7 @@ public synchronized void deliver(ByteString topic, ByteString subscriberId,\n                     callback.operationFinished(context, null);\n                     if (expected.get() > X + 1) {\n                         sub.consume(topic, subscriberId, msg.getMsgId());\n-                    }      \n+                    }\n                 } catch (Exception e) {\n                     logger.error(\"Received bad message\", e);\n                     throttleLatch.countDown();\n@@ -197,7 +313,7 @@ public void testServerSideThrottle() throws Exception {\n         Publisher pub = client.getPublisher();\n         Subscriber sub = client.getSubscriber();\n \n-        ByteString topic = ByteString.copyFromUtf8(\"testServerSideThrottle\"); \n+        ByteString topic = ByteString.copyFromUtf8(\"testServerSideThrottle\");\n         ByteString subid = ByteString.copyFromUtf8(\"serverThrottleSub\");\n         sub.subscribe(topic, subid, CreateOrAttach.CREATE);\n         sub.closeSubscription(topic, subid);\n@@ -228,4 +344,26 @@ public void testServerSideThrottle() throws Exception {\n         client.close();\n     }\n \n+    @Test(timeout = 60000)\n+    public void testThrottleWithServerSideFilter() throws Exception {\n+        int messageWindowSize = DEFAULT_MESSAGE_WINDOW_SIZE;\n+        ThrottleDeliveryClientConfiguration conf = new ThrottleDeliveryClientConfiguration();\n+        HedwigClient client = new HedwigClient(conf);\n+        Publisher pub = client.getPublisher();\n+        Subscriber sub = client.getSubscriber();\n+\n+        ByteString topic = ByteString.copyFromUtf8(\"testThrottleWithServerSideFilter\");\n+        ByteString subid = ByteString.copyFromUtf8(\"mysub\");\n+        SubscriptionOptions opts = SubscriptionOptions.newBuilder().setCreateOrAttach(CreateOrAttach.CREATE).build();\n+        sub.subscribe(topic, subid, opts);\n+        sub.closeSubscription(topic, subid);\n+\n+        // message gap: half of the throttle threshold\n+        throttleWithFilter(pub, sub, topic, subid, messageWindowSize / 2);\n+        // message gap: equals to the throttle threshold\n+        throttleWithFilter(pub, sub, topic, subid, messageWindowSize);\n+        // message gap: larger than the throttle threshold\n+        throttleWithFilter(pub, sub, topic, subid, messageWindowSize + messageWindowSize / 2);\n+    }\n+\n }"},{"sha":"93ef931af6eaf4fe1f74e42bd4935f6fdbf4e242","filename":"hedwig-server/src/test/resources/log4j.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/test/resources/log4j.properties","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/hedwig-server/src/test/resources/log4j.properties","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/resources/log4j.properties?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -33,6 +33,7 @@ log4j.rootLogger=INFO, CONSOLE\n \n # Example with rolling log file and tracing\n #log4j.rootLogger=TRACE, CONSOLE, ROLLINGFILE, TRACEFILE\n+log4j.logger.org.apache.zookeeper=ERROR\n \n #\n # Log INFO level and above messages to the console"},{"sha":"e08184bff44e013d9fce7b38edec5c7349dbda90","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/16c7a1c3da07952a329f75fea95f43563d6173f0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/16c7a1c3da07952a329f75fea95f43563d6173f0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=16c7a1c3da07952a329f75fea95f43563d6173f0","patch":"@@ -26,7 +26,7 @@\n   </parent>\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>org.apache.bookkeeper</groupId>\n-  <version>4.2.1</version>\n+  <version>4.2.2</version>\n   <artifactId>bookkeeper</artifactId>\n   <packaging>pom</packaging>\n   <name>bookkeeper</name>"}]}

