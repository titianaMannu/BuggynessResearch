{"url":"https://api.github.com/repos/apache/bookkeeper/compare/release-4.2.2...release-4.2.3","html_url":"https://github.com/apache/bookkeeper/compare/release-4.2.2...release-4.2.3","permalink_url":"https://github.com/apache/bookkeeper/compare/apache:16c7a1c...apache:9cccf3d","diff_url":"https://github.com/apache/bookkeeper/compare/release-4.2.2...release-4.2.3.diff","patch_url":"https://github.com/apache/bookkeeper/compare/release-4.2.2...release-4.2.3.patch","base_commit":{"sha":"16c7a1c3da07952a329f75fea95f43563d6173f0","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxNmM3YTFjM2RhMDc5NTJhMzI5Zjc1ZmVhOTVmNDM1NjNkNjE3M2Yw","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T13:37:05Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T13:37:05Z"},"message":"BookKeeper 4.2.2 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.2.2@1528470 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"44df4f9b9ae3ac4f43b7c9f3d967bb4b02678f68","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/44df4f9b9ae3ac4f43b7c9f3d967bb4b02678f68"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/16c7a1c3da07952a329f75fea95f43563d6173f0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/16c7a1c3da07952a329f75fea95f43563d6173f0","html_url":"https://github.com/apache/bookkeeper/commit/16c7a1c3da07952a329f75fea95f43563d6173f0","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/16c7a1c3da07952a329f75fea95f43563d6173f0/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"44c9b1db6eb4142ef91dac22bc43499bc83b863d","url":"https://api.github.com/repos/apache/bookkeeper/commits/44c9b1db6eb4142ef91dac22bc43499bc83b863d","html_url":"https://github.com/apache/bookkeeper/commit/44c9b1db6eb4142ef91dac22bc43499bc83b863d"},{"sha":"aecf2d23887c437c445958ed626d571d502b165c","url":"https://api.github.com/repos/apache/bookkeeper/commits/aecf2d23887c437c445958ed626d571d502b165c","html_url":"https://github.com/apache/bookkeeper/commit/aecf2d23887c437c445958ed626d571d502b165c"}]},"merge_base_commit":{"sha":"aecf2d23887c437c445958ed626d571d502b165c","node_id":"MDY6Q29tbWl0MTU3NTk1NjphZWNmMmQyMzg4N2M0MzdjNDQ1OTU4ZWQ2MjZkNTcxZDUwMmIxNjVj","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T13:34:52Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2013-10-02T13:34:52Z"},"message":"Update release date in CHANGES.txt\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1528468 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"44df4f9b9ae3ac4f43b7c9f3d967bb4b02678f68","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/44df4f9b9ae3ac4f43b7c9f3d967bb4b02678f68"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/aecf2d23887c437c445958ed626d571d502b165c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/aecf2d23887c437c445958ed626d571d502b165c","html_url":"https://github.com/apache/bookkeeper/commit/aecf2d23887c437c445958ed626d571d502b165c","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/aecf2d23887c437c445958ed626d571d502b165c/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"7c72f2f336342f6542ecec6c9c31cf707ed4b6bc","url":"https://api.github.com/repos/apache/bookkeeper/commits/7c72f2f336342f6542ecec6c9c31cf707ed4b6bc","html_url":"https://github.com/apache/bookkeeper/commit/7c72f2f336342f6542ecec6c9c31cf707ed4b6bc"}]},"status":"diverged","ahead_by":30,"behind_by":2,"total_commits":30,"commits":[{"sha":"e103e4e344b59fbcadc7da46f7dedc04d151c7fb","node_id":"MDY6Q29tbWl0MTU3NTk1NjplMTAzZTRlMzQ0YjU5ZmJjYWRjN2RhNDZmN2RlZGMwNGQxNTFjN2Zi","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-05T06:41:27Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-05T06:41:27Z"},"message":"BOOKKEEPER-711: bookkeeper-daemon.sh will not remove the pid file one successful stop (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1548025 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"42000d5b05f7ae50dc47287eb2eede9da501e7d3","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/42000d5b05f7ae50dc47287eb2eede9da501e7d3"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e103e4e344b59fbcadc7da46f7dedc04d151c7fb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e103e4e344b59fbcadc7da46f7dedc04d151c7fb","html_url":"https://github.com/apache/bookkeeper/commit/e103e4e344b59fbcadc7da46f7dedc04d151c7fb","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e103e4e344b59fbcadc7da46f7dedc04d151c7fb/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"aecf2d23887c437c445958ed626d571d502b165c","url":"https://api.github.com/repos/apache/bookkeeper/commits/aecf2d23887c437c445958ed626d571d502b165c","html_url":"https://github.com/apache/bookkeeper/commit/aecf2d23887c437c445958ed626d571d502b165c"}]},{"sha":"4d19b92a2d537d20b11267c6711d81644155e3f2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZDE5YjkyYTJkNTM3ZDIwYjExMjY3YzY3MTFkODE2NDQxNTVlM2Yy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-05T06:43:36Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2013-12-05T06:43:36Z"},"message":"BOOKKEEPER-712: bookkeeper script should use java from JAVA_HOME (vinay via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1548026 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c6cbe95db7532cbee504b40e6edbadc104e4590e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c6cbe95db7532cbee504b40e6edbadc104e4590e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4d19b92a2d537d20b11267c6711d81644155e3f2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4d19b92a2d537d20b11267c6711d81644155e3f2","html_url":"https://github.com/apache/bookkeeper/commit/4d19b92a2d537d20b11267c6711d81644155e3f2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4d19b92a2d537d20b11267c6711d81644155e3f2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"e103e4e344b59fbcadc7da46f7dedc04d151c7fb","url":"https://api.github.com/repos/apache/bookkeeper/commits/e103e4e344b59fbcadc7da46f7dedc04d151c7fb","html_url":"https://github.com/apache/bookkeeper/commit/e103e4e344b59fbcadc7da46f7dedc04d151c7fb"}]},{"sha":"48097fdb4726ffdf03187868d5a6fadc6368b705","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ODA5N2ZkYjQ3MjZmZmRmMDMxODc4NjhkNWE2ZmFkYzYzNjhiNzA1","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-04T08:20:31Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-04T08:20:31Z"},"message":"BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1573930 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b89b1f66fa8220081ea9e2819656a0bc817381a0","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b89b1f66fa8220081ea9e2819656a0bc817381a0"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/48097fdb4726ffdf03187868d5a6fadc6368b705","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/48097fdb4726ffdf03187868d5a6fadc6368b705","html_url":"https://github.com/apache/bookkeeper/commit/48097fdb4726ffdf03187868d5a6fadc6368b705","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/48097fdb4726ffdf03187868d5a6fadc6368b705/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"4d19b92a2d537d20b11267c6711d81644155e3f2","url":"https://api.github.com/repos/apache/bookkeeper/commits/4d19b92a2d537d20b11267c6711d81644155e3f2","html_url":"https://github.com/apache/bookkeeper/commit/4d19b92a2d537d20b11267c6711d81644155e3f2"}]},{"sha":"e9845591d45071eeb4ececc7e600c143f3c3c703","node_id":"MDY6Q29tbWl0MTU3NTk1NjplOTg0NTU5MWQ0NTA3MWVlYjRlY2VjYzdlNjAwYzE0M2YzYzNjNzAz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T17:54:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T17:54:49Z"},"message":"BOOKKEEPER-708: Shade protobuf library to avoid incompatible versions (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1575343 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f5133b300b2337da16e2739b0fd9aa2b1d2e6d3d","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/f5133b300b2337da16e2739b0fd9aa2b1d2e6d3d"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/e9845591d45071eeb4ececc7e600c143f3c3c703","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/e9845591d45071eeb4ececc7e600c143f3c3c703","html_url":"https://github.com/apache/bookkeeper/commit/e9845591d45071eeb4ececc7e600c143f3c3c703","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/e9845591d45071eeb4ececc7e600c143f3c3c703/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"48097fdb4726ffdf03187868d5a6fadc6368b705","url":"https://api.github.com/repos/apache/bookkeeper/commits/48097fdb4726ffdf03187868d5a6fadc6368b705","html_url":"https://github.com/apache/bookkeeper/commit/48097fdb4726ffdf03187868d5a6fadc6368b705"}]},{"sha":"1fe8e6723c79f82609bb7f71ff8a298f249b30e9","node_id":"MDY6Q29tbWl0MTU3NTk1NjoxZmU4ZTY3MjNjNzlmODI2MDliYjdmNzFmZjhhMjk4ZjI0OWIzMGU5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T18:05:59Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-03-07T18:05:59Z"},"message":"BOOKKEEPER-730: Shade pom file missing apache license header (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1575347 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6a140736e5e1705b2351d0d3ad6af0bf26f80b55","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6a140736e5e1705b2351d0d3ad6af0bf26f80b55"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/1fe8e6723c79f82609bb7f71ff8a298f249b30e9","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/1fe8e6723c79f82609bb7f71ff8a298f249b30e9","html_url":"https://github.com/apache/bookkeeper/commit/1fe8e6723c79f82609bb7f71ff8a298f249b30e9","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/1fe8e6723c79f82609bb7f71ff8a298f249b30e9/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"e9845591d45071eeb4ececc7e600c143f3c3c703","url":"https://api.github.com/repos/apache/bookkeeper/commits/e9845591d45071eeb4ececc7e600c143f3c3c703","html_url":"https://github.com/apache/bookkeeper/commit/e9845591d45071eeb4ececc7e600c143f3c3c703"}]},{"sha":"728a82387596c823fa30fe7b391d289590b7eae1","node_id":"MDY6Q29tbWl0MTU3NTk1Njo3MjhhODIzODc1OTZjODIzZmEzMGZlN2IzOTFkMjg5NTkwYjdlYWUx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-10T01:58:19Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-10T01:58:19Z"},"message":"BOOKKEEPER-602: we should have request timeouts rather than channel timeout in PerChannelBookieClient (Aniruddha via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1575792 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35369cdd03666d5bdb74abe87557ae025b6b7291","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/35369cdd03666d5bdb74abe87557ae025b6b7291"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/728a82387596c823fa30fe7b391d289590b7eae1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/728a82387596c823fa30fe7b391d289590b7eae1","html_url":"https://github.com/apache/bookkeeper/commit/728a82387596c823fa30fe7b391d289590b7eae1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/728a82387596c823fa30fe7b391d289590b7eae1/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"1fe8e6723c79f82609bb7f71ff8a298f249b30e9","url":"https://api.github.com/repos/apache/bookkeeper/commits/1fe8e6723c79f82609bb7f71ff8a298f249b30e9","html_url":"https://github.com/apache/bookkeeper/commit/1fe8e6723c79f82609bb7f71ff8a298f249b30e9"}]},{"sha":"27421024f8899d4bbed706a82462140c124628a1","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyNzQyMTAyNGY4ODk5ZDRiYmVkNzA2YTgyNDYyMTQwYzEyNDYyOGEx","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-10T02:07:03Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-10T02:07:03Z"},"message":"BOOKKEEPER-714: Logging channel exceptions in PerChannelBookieClient (sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1575793 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c5009dcd569b77d372cbd62dbd7ded67cd9f6f50","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/c5009dcd569b77d372cbd62dbd7ded67cd9f6f50"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/27421024f8899d4bbed706a82462140c124628a1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/27421024f8899d4bbed706a82462140c124628a1","html_url":"https://github.com/apache/bookkeeper/commit/27421024f8899d4bbed706a82462140c124628a1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/27421024f8899d4bbed706a82462140c124628a1/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"728a82387596c823fa30fe7b391d289590b7eae1","url":"https://api.github.com/repos/apache/bookkeeper/commits/728a82387596c823fa30fe7b391d289590b7eae1","html_url":"https://github.com/apache/bookkeeper/commit/728a82387596c823fa30fe7b391d289590b7eae1"}]},{"sha":"ca8ea972b2094a0055bbca995eeec2cc269f2a3a","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjYThlYTk3MmIyMDk0YTAwNTViYmNhOTk1ZWVlYzJjYzI2OWYyYTNh","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-10T02:10:33Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-03-10T02:10:33Z"},"message":"BOOKKEEPER-726: PerChannelBookieClient should print address that it failed to connect to when it fails to correct (ivank via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1575794 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bbe92584abd943b54637c1ab5568342f62cd6c0e","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bbe92584abd943b54637c1ab5568342f62cd6c0e"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ca8ea972b2094a0055bbca995eeec2cc269f2a3a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ca8ea972b2094a0055bbca995eeec2cc269f2a3a","html_url":"https://github.com/apache/bookkeeper/commit/ca8ea972b2094a0055bbca995eeec2cc269f2a3a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ca8ea972b2094a0055bbca995eeec2cc269f2a3a/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"27421024f8899d4bbed706a82462140c124628a1","url":"https://api.github.com/repos/apache/bookkeeper/commits/27421024f8899d4bbed706a82462140c124628a1","html_url":"https://github.com/apache/bookkeeper/commit/27421024f8899d4bbed706a82462140c124628a1"}]},{"sha":"68925561dee3e83d5ea76691c3ad196c02d82e06","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2ODkyNTU2MWRlZTNlODNkNWVhNzY2OTFjM2FkMTk2YzAyZDgyZTA2","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org =  fpj = Flavio Paiva Junqueira fpj@apache.org@apache.org","date":"2014-04-11T23:34:52Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org =  fpj = Flavio Paiva Junqueira fpj@apache.org@apache.org","date":"2014-04-11T23:34:52Z"},"message":"BOOKKEEPER-710. OpenLedgerNoRecovery should watch ensemble change. (sijie, ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1586799 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b8ed0deb271e0d40bceb2d47b113191e354a41d7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/b8ed0deb271e0d40bceb2d47b113191e354a41d7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/68925561dee3e83d5ea76691c3ad196c02d82e06","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/68925561dee3e83d5ea76691c3ad196c02d82e06","html_url":"https://github.com/apache/bookkeeper/commit/68925561dee3e83d5ea76691c3ad196c02d82e06","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/68925561dee3e83d5ea76691c3ad196c02d82e06/comments","author":null,"committer":null,"parents":[{"sha":"ca8ea972b2094a0055bbca995eeec2cc269f2a3a","url":"https://api.github.com/repos/apache/bookkeeper/commits/ca8ea972b2094a0055bbca995eeec2cc269f2a3a","html_url":"https://github.com/apache/bookkeeper/commit/ca8ea972b2094a0055bbca995eeec2cc269f2a3a"}]},{"sha":"8352661299d6e4538600a1c251ab304825c4b4dd","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MzUyNjYxMjk5ZDZlNDUzODYwMGExYzI1MWFiMzA0ODI1YzRiNGRk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T11:40:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T11:40:47Z"},"message":"BOOKKEEPER-742: Fix for empty ledgers losing quorum. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1589675 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d39fd842b4641d813b63d26dbea3bdb96cf6eb82","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d39fd842b4641d813b63d26dbea3bdb96cf6eb82"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8352661299d6e4538600a1c251ab304825c4b4dd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8352661299d6e4538600a1c251ab304825c4b4dd","html_url":"https://github.com/apache/bookkeeper/commit/8352661299d6e4538600a1c251ab304825c4b4dd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8352661299d6e4538600a1c251ab304825c4b4dd/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"68925561dee3e83d5ea76691c3ad196c02d82e06","url":"https://api.github.com/repos/apache/bookkeeper/commits/68925561dee3e83d5ea76691c3ad196c02d82e06","html_url":"https://github.com/apache/bookkeeper/commit/68925561dee3e83d5ea76691c3ad196c02d82e06"}]},{"sha":"2990e397896f16d4720da46fdd6cddb046bd12c6","node_id":"MDY6Q29tbWl0MTU3NTk1NjoyOTkwZTM5Nzg5NmYxNmQ0NzIwZGE0NmZkZDZjZGRiMDQ2YmQxMmM2","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T12:44:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-04-24T12:44:49Z"},"message":"BOOKKEEPER-743: Periodic ledger check running too often as doc doesn't match implementation. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1589695 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5573562227b3fd5a74f12d05e46d74265ab9bfbd","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/5573562227b3fd5a74f12d05e46d74265ab9bfbd"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/2990e397896f16d4720da46fdd6cddb046bd12c6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/2990e397896f16d4720da46fdd6cddb046bd12c6","html_url":"https://github.com/apache/bookkeeper/commit/2990e397896f16d4720da46fdd6cddb046bd12c6","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/2990e397896f16d4720da46fdd6cddb046bd12c6/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"8352661299d6e4538600a1c251ab304825c4b4dd","url":"https://api.github.com/repos/apache/bookkeeper/commits/8352661299d6e4538600a1c251ab304825c4b4dd","html_url":"https://github.com/apache/bookkeeper/commit/8352661299d6e4538600a1c251ab304825c4b4dd"}]},{"sha":"03a90ca3303f62f9dce202abb803563ba8d2d66b","node_id":"MDY6Q29tbWl0MTU3NTk1NjowM2E5MGNhMzMwM2Y2MmY5ZGNlMjAyYWJiODAzNTYzYmE4ZDJkNjZi","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-06T13:13:16Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-06T13:13:16Z"},"message":"BOOKKEEPER-744: Run the auditor bookie check periodically (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1592739 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"aab47b53ffca8ea1a6b7162cdbe2d01854aaf6ea","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/aab47b53ffca8ea1a6b7162cdbe2d01854aaf6ea"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/03a90ca3303f62f9dce202abb803563ba8d2d66b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/03a90ca3303f62f9dce202abb803563ba8d2d66b","html_url":"https://github.com/apache/bookkeeper/commit/03a90ca3303f62f9dce202abb803563ba8d2d66b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/03a90ca3303f62f9dce202abb803563ba8d2d66b/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"2990e397896f16d4720da46fdd6cddb046bd12c6","url":"https://api.github.com/repos/apache/bookkeeper/commits/2990e397896f16d4720da46fdd6cddb046bd12c6","html_url":"https://github.com/apache/bookkeeper/commit/2990e397896f16d4720da46fdd6cddb046bd12c6"}]},{"sha":"f62ccaf6020c01d723722fabc11a7b5d734425e2","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmNjJjY2FmNjAyMGMwMWQ3MjM3MjJmYWJjMTFhN2I1ZDczNDQyNWUy","commit":{"author":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-05-12T06:35:56Z"},"committer":{"name":"Sijie Guo","email":"sijie@apache.org","date":"2014-05-12T06:35:56Z"},"message":"BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1593896 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"28d095928bb8ab88587c96bf6b4272e99470d21a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/28d095928bb8ab88587c96bf6b4272e99470d21a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/f62ccaf6020c01d723722fabc11a7b5d734425e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/f62ccaf6020c01d723722fabc11a7b5d734425e2","html_url":"https://github.com/apache/bookkeeper/commit/f62ccaf6020c01d723722fabc11a7b5d734425e2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/f62ccaf6020c01d723722fabc11a7b5d734425e2/comments","author":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"committer":{"login":"sijie","id":1217863,"node_id":"MDQ6VXNlcjEyMTc4NjM=","avatar_url":"https://avatars.githubusercontent.com/u/1217863?v=4","gravatar_id":"","url":"https://api.github.com/users/sijie","html_url":"https://github.com/sijie","followers_url":"https://api.github.com/users/sijie/followers","following_url":"https://api.github.com/users/sijie/following{/other_user}","gists_url":"https://api.github.com/users/sijie/gists{/gist_id}","starred_url":"https://api.github.com/users/sijie/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/sijie/subscriptions","organizations_url":"https://api.github.com/users/sijie/orgs","repos_url":"https://api.github.com/users/sijie/repos","events_url":"https://api.github.com/users/sijie/events{/privacy}","received_events_url":"https://api.github.com/users/sijie/received_events","type":"User","site_admin":false},"parents":[{"sha":"03a90ca3303f62f9dce202abb803563ba8d2d66b","url":"https://api.github.com/repos/apache/bookkeeper/commits/03a90ca3303f62f9dce202abb803563ba8d2d66b","html_url":"https://github.com/apache/bookkeeper/commit/03a90ca3303f62f9dce202abb803563ba8d2d66b"}]},{"sha":"4e337aee19b1f63024df95a7569b74ba22bf9370","node_id":"MDY6Q29tbWl0MTU3NTk1Njo0ZTMzN2FlZTE5YjFmNjMwMjRkZjk1YTc1NjliNzRiYTIyYmY5Mzcw","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-14T22:43:33Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-05-14T22:43:33Z"},"message":"BOOKKEEPER-755: Incorrect number of seconds specified in a day (Joseph Redfern via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1594745 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3b39505f21b46bd1d3917569597d9f47f8a58d45","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3b39505f21b46bd1d3917569597d9f47f8a58d45"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/4e337aee19b1f63024df95a7569b74ba22bf9370","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/4e337aee19b1f63024df95a7569b74ba22bf9370","html_url":"https://github.com/apache/bookkeeper/commit/4e337aee19b1f63024df95a7569b74ba22bf9370","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/4e337aee19b1f63024df95a7569b74ba22bf9370/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"f62ccaf6020c01d723722fabc11a7b5d734425e2","url":"https://api.github.com/repos/apache/bookkeeper/commits/f62ccaf6020c01d723722fabc11a7b5d734425e2","html_url":"https://github.com/apache/bookkeeper/commit/f62ccaf6020c01d723722fabc11a7b5d734425e2"}]},{"sha":"0a925975e9a09839e4501479cade955eb1963695","node_id":"MDY6Q29tbWl0MTU3NTk1NjowYTkyNTk3NWU5YTA5ODM5ZTQ1MDE0NzljYWRlOTU1ZWIxOTYzNjk1","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-27T10:52:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-27T10:52:49Z"},"message":"BOOKKEEPER-752: Deadlock on NIOServer shutdown (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1597744 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"3138441632673a2fc1441ecccdcf1ebe7fcdd474","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/3138441632673a2fc1441ecccdcf1ebe7fcdd474"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/0a925975e9a09839e4501479cade955eb1963695","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/0a925975e9a09839e4501479cade955eb1963695","html_url":"https://github.com/apache/bookkeeper/commit/0a925975e9a09839e4501479cade955eb1963695","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/0a925975e9a09839e4501479cade955eb1963695/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"4e337aee19b1f63024df95a7569b74ba22bf9370","url":"https://api.github.com/repos/apache/bookkeeper/commits/4e337aee19b1f63024df95a7569b74ba22bf9370","html_url":"https://github.com/apache/bookkeeper/commit/4e337aee19b1f63024df95a7569b74ba22bf9370"}]},{"sha":"c7a0c1c43e7beea9969b149cd796a712a0c6330d","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjN2EwYzFjNDNlN2JlZWE5OTY5YjE0OWNkNzk2YTcxMmEwYzYzMzBk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T14:32:47Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T14:32:47Z"},"message":"BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1598614 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6402692290d0429bcc736b7fadce55336eeac739","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6402692290d0429bcc736b7fadce55336eeac739"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/c7a0c1c43e7beea9969b149cd796a712a0c6330d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/c7a0c1c43e7beea9969b149cd796a712a0c6330d","html_url":"https://github.com/apache/bookkeeper/commit/c7a0c1c43e7beea9969b149cd796a712a0c6330d","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/c7a0c1c43e7beea9969b149cd796a712a0c6330d/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"0a925975e9a09839e4501479cade955eb1963695","url":"https://api.github.com/repos/apache/bookkeeper/commits/0a925975e9a09839e4501479cade955eb1963695","html_url":"https://github.com/apache/bookkeeper/commit/0a925975e9a09839e4501479cade955eb1963695"}]},{"sha":"55ec48dd14b7c97adb9b1bb7aa4b7a276aded962","node_id":"MDY6Q29tbWl0MTU3NTk1Njo1NWVjNDhkZDE0YjdjOTdhZGI5YjFiYjdhYTRiN2EyNzZhZGVkOTYy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T15:41:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-05-30T15:41:38Z"},"message":"BOOKKEEPER-751: Ensure all the bookkeeper callbacks not run under ledger handle lock (sijie via ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1598644 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"4b59927270fe939c01088a16c283c16b64e178f4","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/4b59927270fe939c01088a16c283c16b64e178f4"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/55ec48dd14b7c97adb9b1bb7aa4b7a276aded962","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/55ec48dd14b7c97adb9b1bb7aa4b7a276aded962","html_url":"https://github.com/apache/bookkeeper/commit/55ec48dd14b7c97adb9b1bb7aa4b7a276aded962","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/55ec48dd14b7c97adb9b1bb7aa4b7a276aded962/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"c7a0c1c43e7beea9969b149cd796a712a0c6330d","url":"https://api.github.com/repos/apache/bookkeeper/commits/c7a0c1c43e7beea9969b149cd796a712a0c6330d","html_url":"https://github.com/apache/bookkeeper/commit/c7a0c1c43e7beea9969b149cd796a712a0c6330d"}]},{"sha":"9d63795db30a3d75f7ec9b8c42d2030f357eedf2","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5ZDYzNzk1ZGIzMGEzZDc1ZjdlYzliOGM0MmQyMDMwZjM1N2VlZGYy","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-02T15:54:33Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-02T15:54:33Z"},"message":"BOOKKEEPER-745: Fix for false reports of ledger unreplication during rolling restarts. (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1599251 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"df68d577fa9f21edec0cbc080271bb841c44974a","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/df68d577fa9f21edec0cbc080271bb841c44974a"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9d63795db30a3d75f7ec9b8c42d2030f357eedf2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9d63795db30a3d75f7ec9b8c42d2030f357eedf2","html_url":"https://github.com/apache/bookkeeper/commit/9d63795db30a3d75f7ec9b8c42d2030f357eedf2","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9d63795db30a3d75f7ec9b8c42d2030f357eedf2/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"55ec48dd14b7c97adb9b1bb7aa4b7a276aded962","url":"https://api.github.com/repos/apache/bookkeeper/commits/55ec48dd14b7c97adb9b1bb7aa4b7a276aded962","html_url":"https://github.com/apache/bookkeeper/commit/55ec48dd14b7c97adb9b1bb7aa4b7a276aded962"}]},{"sha":"8bd2636fb701c4327d7daeaa8ee876489039edaf","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4YmQyNjM2ZmI3MDFjNDMyN2Q3ZGFlYWE4ZWU4NzY0ODkwMzllZGFm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T11:56:25Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T11:56:25Z"},"message":"BOOKKEEPER-746: 5 new shell commands. List ledgers, list metadata, list underreplicated, show auditor and simpletest (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1599492 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0617435fef94cb5d2ffbd71d0001ad7674f58e7f","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0617435fef94cb5d2ffbd71d0001ad7674f58e7f"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/8bd2636fb701c4327d7daeaa8ee876489039edaf","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/8bd2636fb701c4327d7daeaa8ee876489039edaf","html_url":"https://github.com/apache/bookkeeper/commit/8bd2636fb701c4327d7daeaa8ee876489039edaf","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/8bd2636fb701c4327d7daeaa8ee876489039edaf/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9d63795db30a3d75f7ec9b8c42d2030f357eedf2","url":"https://api.github.com/repos/apache/bookkeeper/commits/9d63795db30a3d75f7ec9b8c42d2030f357eedf2","html_url":"https://github.com/apache/bookkeeper/commit/9d63795db30a3d75f7ec9b8c42d2030f357eedf2"}]},{"sha":"69862e21d5aa1099cf4f806bce6c0a967bd03229","node_id":"MDY6Q29tbWl0MTU3NTk1Njo2OTg2MmUyMWQ1YWExMDk5Y2Y0ZjgwNmJjZTZjMGE5NjdiZDAzMjI5","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T13:39:49Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T13:39:49Z"},"message":"Fix for some jiras in wrong section in CHANGES.txt\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1599541 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0c228a47d6c7fbefd10bf8f1446536b7f7cb080b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/0c228a47d6c7fbefd10bf8f1446536b7f7cb080b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/69862e21d5aa1099cf4f806bce6c0a967bd03229","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/69862e21d5aa1099cf4f806bce6c0a967bd03229","html_url":"https://github.com/apache/bookkeeper/commit/69862e21d5aa1099cf4f806bce6c0a967bd03229","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/69862e21d5aa1099cf4f806bce6c0a967bd03229/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"8bd2636fb701c4327d7daeaa8ee876489039edaf","url":"https://api.github.com/repos/apache/bookkeeper/commits/8bd2636fb701c4327d7daeaa8ee876489039edaf","html_url":"https://github.com/apache/bookkeeper/commit/8bd2636fb701c4327d7daeaa8ee876489039edaf"}]},{"sha":"832ef2d033a6504e083d365bd73c7ba3c3d79a1e","node_id":"MDY6Q29tbWl0MTU3NTk1Njo4MzJlZjJkMDMzYTY1MDRlMDgzZDM2NWJkNzNjN2JhM2MzZDc5YTFl","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T13:50:12Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T13:50:12Z"},"message":"BOOKKEEPER-725: AutoRecoveryMain should exit with error code if deathwatcher finds dead thread (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1599546 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"fc3660254d091d9498260d4449e213af13020770","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/fc3660254d091d9498260d4449e213af13020770"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/832ef2d033a6504e083d365bd73c7ba3c3d79a1e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/832ef2d033a6504e083d365bd73c7ba3c3d79a1e","html_url":"https://github.com/apache/bookkeeper/commit/832ef2d033a6504e083d365bd73c7ba3c3d79a1e","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/832ef2d033a6504e083d365bd73c7ba3c3d79a1e/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"69862e21d5aa1099cf4f806bce6c0a967bd03229","url":"https://api.github.com/repos/apache/bookkeeper/commits/69862e21d5aa1099cf4f806bce6c0a967bd03229","html_url":"https://github.com/apache/bookkeeper/commit/69862e21d5aa1099cf4f806bce6c0a967bd03229"}]},{"sha":"92ba8245cd7f4915c75cb0cf2e5b2a1f5afea26a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5MmJhODI0NWNkN2Y0OTE1Yzc1Y2IwY2YyZTViMmExZjVhZmVhMjZh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T14:48:51Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T14:48:51Z"},"message":"BOOKKEEPER-750: Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1599591 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"6e641a205736149a49b7aee167b6d3a78fbb5a87","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/6e641a205736149a49b7aee167b6d3a78fbb5a87"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/92ba8245cd7f4915c75cb0cf2e5b2a1f5afea26a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/92ba8245cd7f4915c75cb0cf2e5b2a1f5afea26a","html_url":"https://github.com/apache/bookkeeper/commit/92ba8245cd7f4915c75cb0cf2e5b2a1f5afea26a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/92ba8245cd7f4915c75cb0cf2e5b2a1f5afea26a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"832ef2d033a6504e083d365bd73c7ba3c3d79a1e","url":"https://api.github.com/repos/apache/bookkeeper/commits/832ef2d033a6504e083d365bd73c7ba3c3d79a1e","html_url":"https://github.com/apache/bookkeeper/commit/832ef2d033a6504e083d365bd73c7ba3c3d79a1e"}]},{"sha":"cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1","node_id":"MDY6Q29tbWl0MTU3NTk1NjpjZGY2YjY3NGQzMWFlNDUwZDRkNDdiZjJhODZlMzc3YjlkN2ZlNmIx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T15:20:10Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T15:20:10Z"},"message":"Updating version numbers for 4.2.3 release\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1599600 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bab0b4853e82f3050c61a05213833b43b187982b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bab0b4853e82f3050c61a05213833b43b187982b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1","html_url":"https://github.com/apache/bookkeeper/commit/cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"92ba8245cd7f4915c75cb0cf2e5b2a1f5afea26a","url":"https://api.github.com/repos/apache/bookkeeper/commits/92ba8245cd7f4915c75cb0cf2e5b2a1f5afea26a","html_url":"https://github.com/apache/bookkeeper/commit/92ba8245cd7f4915c75cb0cf2e5b2a1f5afea26a"}]},{"sha":"05d988637c3260f97b005b9707e6e971203eedd3","node_id":"MDY6Q29tbWl0MTU3NTk1NjowNWQ5ODg2MzdjMzI2MGY5N2IwMDViOTcwN2U2ZTk3MTIwM2VlZGQz","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T15:55:43Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-03T15:55:43Z"},"message":"BookKeeper 4.2.3 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.2.3@1599634 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"bab0b4853e82f3050c61a05213833b43b187982b","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/bab0b4853e82f3050c61a05213833b43b187982b"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/05d988637c3260f97b005b9707e6e971203eedd3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/05d988637c3260f97b005b9707e6e971203eedd3","html_url":"https://github.com/apache/bookkeeper/commit/05d988637c3260f97b005b9707e6e971203eedd3","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/05d988637c3260f97b005b9707e6e971203eedd3/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1","url":"https://api.github.com/repos/apache/bookkeeper/commits/cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1","html_url":"https://github.com/apache/bookkeeper/commit/cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1"}]},{"sha":"ffb35ae75b921a9c54e6eacf35d926c5aa6abcba","node_id":"MDY6Q29tbWl0MTU3NTk1NjpmZmIzNWFlNzViOTIxYTljNTRlNmVhY2YzNWQ5MjZjNWFhNmFiY2Jh","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-05T10:53:22Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-05T10:53:22Z"},"message":"BOOKKEEPER-766: Update notice.txt files to include 2014 (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1600592 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"beadec09bb5c3b3894fd6580511b4768cca36e04","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/beadec09bb5c3b3894fd6580511b4768cca36e04"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ffb35ae75b921a9c54e6eacf35d926c5aa6abcba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ffb35ae75b921a9c54e6eacf35d926c5aa6abcba","html_url":"https://github.com/apache/bookkeeper/commit/ffb35ae75b921a9c54e6eacf35d926c5aa6abcba","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ffb35ae75b921a9c54e6eacf35d926c5aa6abcba/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1","url":"https://api.github.com/repos/apache/bookkeeper/commits/cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1","html_url":"https://github.com/apache/bookkeeper/commit/cdf6b674d31ae450d4d47bf2a86e377b9d7fe6b1"}]},{"sha":"98ff2f98e1e33bac391def8d651b451af7fb1e2b","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5OGZmMmY5OGUxZTMzYmFjMzkxZGVmOGQ2NTFiNDUxYWY3ZmIxZTJi","commit":{"author":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-06T13:32:15Z"},"committer":{"name":"Flavio Paiva Junqueira","email":"fpj@apache.org","date":"2014-06-06T13:32:15Z"},"message":"BOOKKEEPER-767: Allow loopback in tests (ivank via fpj)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1600884 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d0ac18050d1d0bb70bd2e7586b616b1217d779d7","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/d0ac18050d1d0bb70bd2e7586b616b1217d779d7"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/98ff2f98e1e33bac391def8d651b451af7fb1e2b","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/98ff2f98e1e33bac391def8d651b451af7fb1e2b","html_url":"https://github.com/apache/bookkeeper/commit/98ff2f98e1e33bac391def8d651b451af7fb1e2b","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/98ff2f98e1e33bac391def8d651b451af7fb1e2b/comments","author":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"committer":{"login":"fpj","id":572920,"node_id":"MDQ6VXNlcjU3MjkyMA==","avatar_url":"https://avatars.githubusercontent.com/u/572920?v=4","gravatar_id":"","url":"https://api.github.com/users/fpj","html_url":"https://github.com/fpj","followers_url":"https://api.github.com/users/fpj/followers","following_url":"https://api.github.com/users/fpj/following{/other_user}","gists_url":"https://api.github.com/users/fpj/gists{/gist_id}","starred_url":"https://api.github.com/users/fpj/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fpj/subscriptions","organizations_url":"https://api.github.com/users/fpj/orgs","repos_url":"https://api.github.com/users/fpj/repos","events_url":"https://api.github.com/users/fpj/events{/privacy}","received_events_url":"https://api.github.com/users/fpj/received_events","type":"User","site_admin":false},"parents":[{"sha":"ffb35ae75b921a9c54e6eacf35d926c5aa6abcba","url":"https://api.github.com/repos/apache/bookkeeper/commits/ffb35ae75b921a9c54e6eacf35d926c5aa6abcba","html_url":"https://github.com/apache/bookkeeper/commit/ffb35ae75b921a9c54e6eacf35d926c5aa6abcba"}]},{"sha":"ba80818c36236bae147a45c3ea0587e81837a3ef","node_id":"MDY6Q29tbWl0MTU3NTk1NjpiYTgwODE4YzM2MjM2YmFlMTQ3YTQ1YzNlYTA1ODdlODE4MzdhM2Vm","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-10T10:04:00Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-10T10:04:00Z"},"message":"BOOKKEEPER-765: bookkeeper script should fall back to java in path if JAVA_HOME is not set (ivank)\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1601593 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb1aebdb310ab79939380bd1caf9dbee1ec772ef","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cb1aebdb310ab79939380bd1caf9dbee1ec772ef"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/ba80818c36236bae147a45c3ea0587e81837a3ef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/ba80818c36236bae147a45c3ea0587e81837a3ef","html_url":"https://github.com/apache/bookkeeper/commit/ba80818c36236bae147a45c3ea0587e81837a3ef","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/ba80818c36236bae147a45c3ea0587e81837a3ef/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"98ff2f98e1e33bac391def8d651b451af7fb1e2b","url":"https://api.github.com/repos/apache/bookkeeper/commits/98ff2f98e1e33bac391def8d651b451af7fb1e2b","html_url":"https://github.com/apache/bookkeeper/commit/98ff2f98e1e33bac391def8d651b451af7fb1e2b"}]},{"sha":"9ce71edb0f826ef3628b94b739576eae2b8e01cd","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5Y2U3MWVkYjBmODI2ZWYzNjI4Yjk0YjczOTU3NmVhZTJiOGUwMWNk","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-10T10:04:57Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-10T10:04:57Z"},"message":"BookKeeper 4.2.3 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.2.3@1601594 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cb1aebdb310ab79939380bd1caf9dbee1ec772ef","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/cb1aebdb310ab79939380bd1caf9dbee1ec772ef"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9ce71edb0f826ef3628b94b739576eae2b8e01cd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9ce71edb0f826ef3628b94b739576eae2b8e01cd","html_url":"https://github.com/apache/bookkeeper/commit/9ce71edb0f826ef3628b94b739576eae2b8e01cd","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9ce71edb0f826ef3628b94b739576eae2b8e01cd/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"05d988637c3260f97b005b9707e6e971203eedd3","url":"https://api.github.com/repos/apache/bookkeeper/commits/05d988637c3260f97b005b9707e6e971203eedd3","html_url":"https://github.com/apache/bookkeeper/commit/05d988637c3260f97b005b9707e6e971203eedd3"},{"sha":"ba80818c36236bae147a45c3ea0587e81837a3ef","url":"https://api.github.com/repos/apache/bookkeeper/commits/ba80818c36236bae147a45c3ea0587e81837a3ef","html_url":"https://github.com/apache/bookkeeper/commit/ba80818c36236bae147a45c3ea0587e81837a3ef"}]},{"sha":"d3fff6381ecb4aa7f1ca47876c5bf5be51281801","node_id":"MDY6Q29tbWl0MTU3NTk1NjpkM2ZmZjYzODFlY2I0YWE3ZjFjYTQ3ODc2YzViZjViZTUxMjgxODAx","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-23T15:37:38Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-23T15:37:38Z"},"message":"Update release date in CHANGES.txt\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/branches/branch-4.2@1604840 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1ef62477baca6dd9c8ef1aa01c7821fd71559c87","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1ef62477baca6dd9c8ef1aa01c7821fd71559c87"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/d3fff6381ecb4aa7f1ca47876c5bf5be51281801","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/d3fff6381ecb4aa7f1ca47876c5bf5be51281801","html_url":"https://github.com/apache/bookkeeper/commit/d3fff6381ecb4aa7f1ca47876c5bf5be51281801","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/d3fff6381ecb4aa7f1ca47876c5bf5be51281801/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"ba80818c36236bae147a45c3ea0587e81837a3ef","url":"https://api.github.com/repos/apache/bookkeeper/commits/ba80818c36236bae147a45c3ea0587e81837a3ef","html_url":"https://github.com/apache/bookkeeper/commit/ba80818c36236bae147a45c3ea0587e81837a3ef"}]},{"sha":"9cccf3dee85874f28573dfa99c076e445091c21a","node_id":"MDY6Q29tbWl0MTU3NTk1Njo5Y2NjZjNkZWU4NTg3NGYyODU3M2RmYTk5YzA3NmU0NDUwOTFjMjFh","commit":{"author":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-23T15:40:42Z"},"committer":{"name":"Ivan Brendan Kelly","email":"ivank@apache.org","date":"2014-06-23T15:40:42Z"},"message":"BookKeeper 4.2.3 release.\n\ngit-svn-id: https://svn.apache.org/repos/asf/zookeeper/bookkeeper/tags/release-4.2.3@1604842 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"1ef62477baca6dd9c8ef1aa01c7821fd71559c87","url":"https://api.github.com/repos/apache/bookkeeper/git/trees/1ef62477baca6dd9c8ef1aa01c7821fd71559c87"},"url":"https://api.github.com/repos/apache/bookkeeper/git/commits/9cccf3dee85874f28573dfa99c076e445091c21a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/apache/bookkeeper/commits/9cccf3dee85874f28573dfa99c076e445091c21a","html_url":"https://github.com/apache/bookkeeper/commit/9cccf3dee85874f28573dfa99c076e445091c21a","comments_url":"https://api.github.com/repos/apache/bookkeeper/commits/9cccf3dee85874f28573dfa99c076e445091c21a/comments","author":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"committer":{"login":"ivankelly","id":54955,"node_id":"MDQ6VXNlcjU0OTU1","avatar_url":"https://avatars.githubusercontent.com/u/54955?v=4","gravatar_id":"","url":"https://api.github.com/users/ivankelly","html_url":"https://github.com/ivankelly","followers_url":"https://api.github.com/users/ivankelly/followers","following_url":"https://api.github.com/users/ivankelly/following{/other_user}","gists_url":"https://api.github.com/users/ivankelly/gists{/gist_id}","starred_url":"https://api.github.com/users/ivankelly/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ivankelly/subscriptions","organizations_url":"https://api.github.com/users/ivankelly/orgs","repos_url":"https://api.github.com/users/ivankelly/repos","events_url":"https://api.github.com/users/ivankelly/events{/privacy}","received_events_url":"https://api.github.com/users/ivankelly/received_events","type":"User","site_admin":false},"parents":[{"sha":"9ce71edb0f826ef3628b94b739576eae2b8e01cd","url":"https://api.github.com/repos/apache/bookkeeper/commits/9ce71edb0f826ef3628b94b739576eae2b8e01cd","html_url":"https://github.com/apache/bookkeeper/commit/9ce71edb0f826ef3628b94b739576eae2b8e01cd"},{"sha":"d3fff6381ecb4aa7f1ca47876c5bf5be51281801","url":"https://api.github.com/repos/apache/bookkeeper/commits/d3fff6381ecb4aa7f1ca47876c5bf5be51281801","html_url":"https://github.com/apache/bookkeeper/commit/d3fff6381ecb4aa7f1ca47876c5bf5be51281801"}]}],"files":[{"sha":"9bbe2b6e10e7af60c6fc7d6dd6ab177829525361","filename":"CHANGES.txt","status":"modified","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/CHANGES.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/CHANGES.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/CHANGES.txt?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -1,3 +1,61 @@\n+Release 4.2.3 - 2014-06-27\n+\n+  Backward compatible changes:\n+\n+    BUGFIXES:\n+\n+     BOOKKEEPER-766: Update notice.txt files to include 2014 (ivank via fpj)\n+\n+     BOOKKEEPER-767: Allow loopback in tests (ivank via fpj)\n+\n+     BOOKKEEPER-765: bookkeeper script should fall back to java in path if JAVA_HOME is not set (ivank)\n+\n+      bookkeeper-server:\n+\n+        BOOKKEEPER-711: bookkeeper-daemon.sh will not remove the pid file one successful stop (vinay via sijie)\n+\n+        BOOKKEEPER-712: bookkeeper script should use 'java' from JAVA_HOME (vinay via sijie)\n+\n+        BOOKKEEPER-688: NPE exception in PerChannelBookieClient (ivank via sijie)\n+\n+        BOOKKEEPER-602: we should have request timeouts rather than channel timeout in PerChannelBookieClient (Aniruddha via sijie)\n+\n+        BOOKKEEPER-714: Logging channel exceptions in PerChannelBookieClient (sijie)\n+\n+        BOOKKEEPER-726: PerChannelBookieClient should print address that it failed to connect to when it fails to correct (ivank via sijie)\n+       \n+        BOOKKEEPER-710: OpenLedgerNoRecovery should watch ensemble change. (sijie, ivank via fpj)\n+\n+        BOOKKEEPER-742: Fix for empty ledgers losing quorum. (ivank)\n+\n+        BOOKKEEPER-743: Periodic ledger check running too often as doc doesn't match implementation. (ivank)\n+\n+        BOOKKEEPER-744: Run the auditor bookie check periodically (ivank)\n+\n+\tBOOKKEEPER-755: Incorrect number of seconds specified in a day (Joseph Redfern via fpj)\n+\n+        BOOKKEEPER-752: Deadlock on NIOServer shutdown (sijie via ivank)\n+\n+        BOOKKEEPER-673: Ledger length can be inaccurate in failure case (sijie via ivank)\n+\n+        BOOKKEEPER-751: Ensure all the bookkeeper callbacks not run under ledger handle lock (sijie via ivank)\n+\n+        BOOKKEEPER-745: Fix for false reports of ledger unreplication during rolling restarts. (ivank)\n+\n+        BOOKKEEPER-708: Shade protobuf library to avoid incompatible versions (ivank)\n+\n+        BOOKKEEPER-730: Shade pom file missing apache license header (ivank)\n+\n+        BOOKKEEPER-725: AutoRecoveryMain should exit with error code if deathwatcher finds dead thread (ivank)\n+\n+        BOOKKEEPER-750: Flake in BookieAutoRecoveryTest#testEmptyLedgerLosesQuorumEventually (ivank)\n+\n+    IMPROVEMENT:\n+\n+        BOOKKEEPER-747: Implement register/unregister LedgerMetadataListener in MSLedgerManagerFactory (fpj via sijie)\n+\n+        BOOKKEEPER-746: 5 new shell commands. List ledgers, list metadata, list underreplicated, show auditor and simpletest (ivank)\n+\n Release 4.2.2 - 2013-10-02\n \n   Backward compatible changes:"},{"sha":"5a6871a22146047413d2620d53e2578aa49b8aa3","filename":"NOTICE","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/NOTICE","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/NOTICE","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/NOTICE?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -1,5 +1,5 @@\n Apache BookKeeper\n-Copyright 2011-2013 The Apache Software Foundation\n+Copyright 2011-2014 The Apache Software Foundation\n \n This product includes software developed at\n The Apache Software Foundation (http://www.apache.org/)."},{"sha":"d266bbeb2b880a94cbf99271992784d9469746f7","filename":"bin/test-patch-00-clean","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bin/test-patch-00-clean","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bin/test-patch-00-clean","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bin/test-patch-00-clean?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -89,6 +89,8 @@ pre)\n     exit $EXITCODE\n     ;;\n post)\n+    mvn clean ${MVNPASSTHRU} >> ${TEMPDIR}/${TASKNAME}.txt\n+    EXITCODE=$?\n     ;;\n report)\n     echo \"{color:green}+1 ${TASKNAME}{color}\" >> $SUMMARYFILE"},{"sha":"9a2e617567a702004cf2cef363b83c2e59fd82c9","filename":"bookkeeper-benchmark/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-benchmark/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-benchmark/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-benchmark</artifactId>"},{"sha":"18fb5248e2dc3ccd8077ee06299798d6df6c2437","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchReadThroughputLatency.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -149,6 +149,7 @@ private static void usage(Options options) {\n         formatter.printHelp(\"BenchReadThroughputLatency <options>\", options);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public static void main(String[] args) throws Exception {\n         Options options = new Options();\n         options.addOption(\"ledger\", true, \"Ledger to read. If empty, read all ledgers which come available. \" "},{"sha":"a08f84a294e13919fae280056869f279dce3c08d","filename":"bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-benchmark/src/main/java/org/apache/bookkeeper/benchmark/BenchThroughputLatency.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -228,6 +228,7 @@ public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public static void main(String[] args)\n             throws KeeperException, IOException, InterruptedException, ParseException, BKException {\n         Options options = new Options();"},{"sha":"7ce92ea6eb39075f349232b10d9aac9837538747","filename":"bookkeeper-server/bin/bookkeeper","status":"modified","additions":19,"deletions":6,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/bin/bookkeeper","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/bin/bookkeeper","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -57,6 +57,19 @@ DEFAULT_LOG_CONF=$BK_HOME/conf/log4j.properties\n \n source $BK_HOME/conf/bkenv.sh\n \n+# Check for the java to use\n+if [[ -z $JAVA_HOME ]]; then\n+    JAVA=$(which java)\n+    if [ $? = 0 ]; then\n+        echo \"JAVA_HOME not set, using java from PATH. ($JAVA)\"\n+    else\n+        echo \"Error: JAVA_HOME not set, and no java executable found in $PATH.\" 1>&2\n+        exit 1\n+    fi\n+else\n+    JAVA=$JAVA_HOME/bin/java\n+fi\n+\n # exclude tests jar\n RELEASE_JAR=`ls $BK_HOME/bookkeeper-server-*.jar 2> /dev/null | grep -v tests | tail -1` \n if [ $? == 0 ]; then\n@@ -168,21 +181,21 @@ OPTS=\"$OPTS -Dbookkeeper.log.file=$BOOKIE_LOG_FILE\"\n #Change to BK_HOME to support relative paths\n cd \"$BK_HOME\"\n if [ $COMMAND == \"bookie\" ]; then\n-    exec java $OPTS $JMX_ARGS org.apache.bookkeeper.proto.BookieServer --conf $BOOKIE_CONF $@\n+    exec $JAVA $OPTS $JMX_ARGS org.apache.bookkeeper.proto.BookieServer --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"autorecovery\" ]; then\n-    exec java $OPTS $JMX_ARGS org.apache.bookkeeper.replication.AutoRecoveryMain --conf $BOOKIE_CONF $@\n+    exec $JAVA $OPTS $JMX_ARGS org.apache.bookkeeper.replication.AutoRecoveryMain --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"localbookie\" ]; then\n     NUMBER=$1\n     shift\n-    exec java $OPTS $JMX_ARGS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $BOOKIE_CONF $@\n+    exec $JAVA $OPTS $JMX_ARGS org.apache.bookkeeper.util.LocalBookKeeper $NUMBER $BOOKIE_CONF $@\n elif [ $COMMAND == \"upgrade\" ]; then\n-    exec java $OPTS org.apache.bookkeeper.bookie.FileSystemUpgrade --conf $BOOKIE_CONF $@\n+    exec $JAVA $OPTS org.apache.bookkeeper.bookie.FileSystemUpgrade --conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"shell\" ]; then\n     ENTRY_FORMATTER_ARG=\"-DentryFormatterClass=${ENTRY_FORMATTER_CLASS:-org.apache.bookkeeper.util.StringEntryFormatter}\"\n-    exec java $OPTS $ENTRY_FORMATTER_ARG org.apache.bookkeeper.bookie.BookieShell -conf $BOOKIE_CONF $@\n+    exec $JAVA $OPTS $ENTRY_FORMATTER_ARG org.apache.bookkeeper.bookie.BookieShell -conf $BOOKIE_CONF $@\n elif [ $COMMAND == \"help\" ]; then\n     bookkeeper_help;\n else\n-    exec java $OPTS $COMMAND $@\n+    exec $JAVA $OPTS $COMMAND $@\n fi\n "},{"sha":"766f528dd0db29250ae73529b810724d584cec6b","filename":"bookkeeper-server/bin/bookkeeper-daemon.sh","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/bin/bookkeeper-daemon.sh","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/bin/bookkeeper-daemon.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/bin/bookkeeper-daemon.sh?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -140,8 +140,7 @@ case $startStop in\n          done\n         \n         if [ \"$count\" != \"$BOOKIE_STOP_TIMEOUT\" ]; then\n-                 echo \"Shutdown completed.\"\n-                exit 0\n+            echo \"Shutdown completed.\"\n         fi\n                  \n         if kill -0 $TARGET_PID > /dev/null 2>&1; then"},{"sha":"77e42bc4829823030f1c541052ce165367f3e0ae","filename":"bookkeeper-server/conf/bk_server.conf","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/conf/bk_server.conf","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/conf/bk_server.conf","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bk_server.conf?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -213,3 +213,12 @@ zkTimeout=10000\n # Note that periodic checking will put extra load on the cluster, so it should\n # not be run more frequently than once a day.\n #auditorPeriodicCheckInterval=604800\n+\n+# The interval between auditor bookie checks.\n+# The auditor bookie check, checks ledger metadata to see which bookies should\n+# contain entries for each ledger. If a bookie which should contain entries is\n+# unavailable, then the ledger containing that entry is marked for recovery.\n+# Setting this to 0 disabled the periodic check. Bookie checks will still\n+# run when a bookie fails.\n+# The interval is specified in seconds.\n+#auditorPeriodicBookieCheckInterval=86400"},{"sha":"1fed8dce3d6beb69e3731efd057b21c0580ff9bc","filename":"bookkeeper-server/conf/bkenv.sh","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/conf/bkenv.sh","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/conf/bkenv.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/conf/bkenv.sh?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -20,6 +20,9 @@\n # * limitations under the License.\n # */\n \n+# Set JAVA_HOME here to override the environment setting\n+# JAVA_HOME=\n+\n # default settings for starting bookkeeper\n \n # Configuration file of settings used in bookie server\n@@ -41,4 +44,4 @@\n #BOOKIE_PID_DIR=\n \n #Wait time before forcefully kill the Bookie server instance, if the stop is not successful\n-#BOOKIE_STOP_TIMEOUT=\n\\ No newline at end of file\n+#BOOKIE_STOP_TIMEOUT="},{"sha":"567dbc7f98bb9fbadc97cfd67ad5a4a1f357922c","filename":"bookkeeper-server/pom.xml","status":"modified","additions":66,"deletions":4,"changes":70,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-server</artifactId>\n@@ -35,13 +35,13 @@\n     <dependency>\n       <groupId>com.google.protobuf</groupId>\n       <artifactId>protobuf-java</artifactId>\n-      <version>2.4.1</version>\n+      <version>${protobuf.version}</version>\n       <scope>compile</scope>\n     </dependency>\n     <dependency>\n       <groupId>com.google.guava</groupId>\n       <artifactId>guava</artifactId>\n-      <version>13.0.1</version>\n+      <version>${guava.version}</version>\n     </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n@@ -154,6 +154,62 @@\n   </dependencies>\n   <build>\n     <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-shade-plugin</artifactId>\n+        <version>2.1</version>\n+        <configuration>\n+          <!-- put your configurations here -->\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <phase>package</phase>\n+            <goals>\n+              <goal>shade</goal>\n+            </goals>\n+            <configuration>\n+              <createDependencyReducedPom>true</createDependencyReducedPom>\n+              <artifactSet>\n+                <includes>\n+                  <include>com.google.protobuf:protobuf-java</include>\n+                  <include>com.google.guava:guava</include>\n+                </includes>\n+              </artifactSet>\n+              <minimizeJar>true</minimizeJar>\n+              <relocations>\n+                <relocation>\n+                  <pattern>com.google</pattern>\n+                  <shadedPattern>bk-shade.com.google</shadedPattern>\n+                </relocation>\n+              </relocations>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.codehaus.mojo</groupId>\n+        <artifactId>license-maven-plugin</artifactId>\n+        <version>1.6</version>\n+        <configuration>\n+          <canUpdateCopyright>false</canUpdateCopyright>\n+          <roots><root>${project.basedir}</root></roots>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>update-pom-license</id>\n+            <goals>\n+              <goal>update-file-header</goal>\n+            </goals>\n+            <phase>package</phase>\n+            <configuration>\n+              <licenseName>apache_v2</licenseName>\n+              <includes>\n+                <include>dependency-reduced-pom.xml</include>\n+              </includes>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-jar-plugin</artifactId>\n@@ -217,7 +273,13 @@\n               <directory>${project.libdir}</directory>\n               <followSymlinks>false</followSymlinks>\n             </fileset>\n-\t  </filesets>\n+            <fileset>\n+              <directory>${project.basedir}</directory>\n+              <includes>\n+                <include>dependency-reduced-pom.xml</include>\n+              </includes>\n+            </fileset>\n+          </filesets>\n \t</configuration>\n       </plugin>\n     </plugins>"},{"sha":"e09cbb82c230d482c8ad61ebcbb6ed6c209c8645","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","status":"modified","additions":427,"deletions":29,"changes":456,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/bookie/BookieShell.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -22,6 +22,7 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.net.InetSocketAddress;\n+\n import java.nio.ByteBuffer;\n import java.util.Formatter;\n import java.util.HashMap;\n@@ -32,17 +33,35 @@\n import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n \n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.Collections;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.bookkeeper.replication.AuditorElector;\n import org.apache.bookkeeper.bookie.EntryLogger.EntryLogScanner;\n import org.apache.bookkeeper.bookie.Journal.JournalScanner;\n import org.apache.bookkeeper.bookie.Journal.LastLogMark;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeperAdmin;\n+import org.apache.bookkeeper.client.BookKeeper;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRangeIterator;\n+import org.apache.bookkeeper.meta.LedgerManager.LedgerRange;\n import org.apache.bookkeeper.util.EntryFormatter;\n import org.apache.bookkeeper.util.Tool;\n import org.apache.bookkeeper.util.ZkUtils;\n \n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+\n+import com.google.common.util.concurrent.AbstractFuture;\n+import static com.google.common.base.Charsets.UTF_8;\n+\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.CompositeConfiguration;\n import org.apache.commons.configuration.PropertiesConfiguration;\n@@ -69,6 +88,11 @@\n     static final String CMD_BOOKIEFORMAT = \"bookieformat\";\n     static final String CMD_RECOVER = \"recover\";\n     static final String CMD_LEDGER = \"ledger\";\n+    static final String CMD_LISTLEDGERS = \"listledgers\";\n+    static final String CMD_LEDGERMETADATA = \"ledgermetadata\";\n+    static final String CMD_LISTUNDERREPLICATED = \"listunderreplicated\";\n+    static final String CMD_WHOISAUDITOR = \"whoisauditor\";\n+    static final String CMD_SIMPLETEST = \"simpletest\";\n     static final String CMD_READLOG = \"readlog\";\n     static final String CMD_READJOURNAL = \"readjournal\";\n     static final String CMD_LASTMARK = \"lastmark\";\n@@ -151,7 +175,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"metaformat [-nonInteractive] [-force]\";\n+            return \"metaformat   [-nonInteractive] [-force]\";\n         }\n \n         @Override\n@@ -229,7 +253,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"recover <bookieSrc> [bookieDest]\";\n+            return \"recover      <bookieSrc> [bookieDest]\";\n         }\n \n         @Override\n@@ -326,7 +350,272 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"ledger [-m] <ledger_id>\";\n+            return \"ledger       [-m] <ledger_id>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    /**\n+     * Command for listing underreplicated ledgers\n+     */\n+    class ListUnderreplicatedCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public ListUnderreplicatedCmd() {\n+            super(CMD_LISTUNDERREPLICATED);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"List ledgers marked as underreplicated\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"listunderreplicated\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerUnderreplicationManager underreplicationManager = mFactory.newLedgerUnderreplicationManager();\n+                Iterator<Long> iter = underreplicationManager.listLedgersToRereplicate();\n+                while (iter.hasNext()) {\n+                    System.out.println(iter.next());\n+                }\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n+\n+    final static int LIST_BATCH_SIZE = 1000;\n+    /**\n+     * Command to list all ledgers in the cluster\n+     */\n+    class ListLedgersCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        ListLedgersCmd() {\n+            super(CMD_LISTLEDGERS);\n+            lOpts.addOption(\"m\", \"meta\", false, \"Print metadata\");\n+\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerManager m = mFactory.newLedgerManager();\n+                LedgerRangeIterator iter = m.getLedgerRanges();\n+                if (cmdLine.hasOption(\"m\")) {\n+                    List<ReadMetadataCallback> futures\n+                        = new ArrayList<ReadMetadataCallback>(LIST_BATCH_SIZE);\n+                    while (iter.hasNext()) {\n+                        LedgerRange r = iter.next();\n+                        for (Long lid : r.getLedgers()) {\n+                            ReadMetadataCallback cb = new ReadMetadataCallback(lid);\n+                            m.readLedgerMetadata(lid, cb);\n+                            futures.add(cb);\n+                        }\n+                        if (futures.size() >= LIST_BATCH_SIZE) {\n+                            while (futures.size() > 0) {\n+                                ReadMetadataCallback cb = futures.remove(0);\n+                                printLedgerMetadata(cb);\n+                            }\n+                        }\n+                    }\n+                    while (futures.size() > 0) {\n+                        ReadMetadataCallback cb = futures.remove(0);\n+                        printLedgerMetadata(cb);\n+                    }\n+                } else {\n+                    while (iter.hasNext()) {\n+                        LedgerRange r = iter.next();\n+                        for (Long lid : r.getLedgers()) {\n+                            System.out.println(Long.toString(lid));\n+                        }\n+                    }\n+                }\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"List all ledgers on the cluster (this may take a long time)\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"listledgers  [-meta]\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    static void printLedgerMetadata(ReadMetadataCallback cb) throws Exception {\n+        LedgerMetadata md = cb.get();\n+        System.out.println(\"ledgerID: \" + cb.getLedgerId());\n+        System.out.println(new String(md.serialize(), UTF_8));\n+    }\n+\n+    static class ReadMetadataCallback extends AbstractFuture<LedgerMetadata>\n+        implements GenericCallback<LedgerMetadata> {\n+        final long ledgerId;\n+\n+        ReadMetadataCallback(long ledgerId) {\n+            this.ledgerId = ledgerId;\n+        }\n+\n+        long getLedgerId() {\n+            return ledgerId;\n+        }\n+\n+        public void operationComplete(int rc, LedgerMetadata result) {\n+            if (rc != 0) {\n+                setException(BKException.create(rc));\n+            } else {\n+                set(result);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Print the metadata for a ledger\n+     */\n+    class LedgerMetadataCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        LedgerMetadataCmd() {\n+            super(CMD_LEDGERMETADATA);\n+            lOpts.addOption(\"l\", \"ledgerid\", true, \"Ledger ID\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            final long lid = getOptionLongValue(cmdLine, \"ledgerid\", -1);\n+            if (lid == -1) {\n+                System.err.println(\"Must specify a ledger id\");\n+                return -1;\n+            }\n+\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bkConf, zk);\n+                LedgerManager m = mFactory.newLedgerManager();\n+                ReadMetadataCallback cb = new ReadMetadataCallback(lid);\n+                m.readLedgerMetadata(lid, cb);\n+                printLedgerMetadata(cb);\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Print the metadata for a ledger\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"ledgermetadata -ledgerid <ledgerid>\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return lOpts;\n+        }\n+    }\n+\n+    /**\n+     * Simple test to create a ledger and write to it\n+     */\n+    class SimpleTestCmd extends MyCommand {\n+        Options lOpts = new Options();\n+\n+        SimpleTestCmd() {\n+            super(CMD_SIMPLETEST);\n+            lOpts.addOption(\"e\", \"ensemble\", true, \"Ensemble size (default 3)\");\n+            lOpts.addOption(\"w\", \"writeQuorum\", true, \"Write quorum size (default 2)\");\n+            lOpts.addOption(\"a\", \"ackQuorum\", true, \"Ack quorum size (default 2)\");\n+            lOpts.addOption(\"n\", \"numEntries\", true, \"Entries to write (default 1000)\");\n+        }\n+\n+        @Override\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            byte[] data = new byte[100]; // test data\n+\n+            int ensemble = getOptionIntValue(cmdLine, \"ensemble\", 3);\n+            int writeQuorum = getOptionIntValue(cmdLine, \"writeQuorum\", 2);\n+            int ackQuorum = getOptionIntValue(cmdLine, \"ackQuorum\", 2);\n+            int numEntries = getOptionIntValue(cmdLine, \"numEntries\", 1000);\n+\n+            ClientConfiguration conf = new ClientConfiguration();\n+            conf.addConfiguration(bkConf);\n+            BookKeeper bk = new BookKeeper(conf);\n+            LedgerHandle lh = bk.createLedger(ensemble, writeQuorum, ackQuorum,\n+                                              BookKeeper.DigestType.MAC, new byte[0]);\n+            System.out.println(\"Ledger ID: \" + lh.getId());\n+            long lastReport = System.nanoTime();\n+            for (int i = 0; i < numEntries; i++) {\n+                lh.addEntry(data);\n+                if (TimeUnit.SECONDS.convert(System.nanoTime() - lastReport,\n+                                             TimeUnit.NANOSECONDS) > 1) {\n+                    System.out.println(i + \" entries written\");\n+                    lastReport = System.nanoTime();\n+                }\n+            }\n+\n+            lh.close();\n+            bk.close();\n+            System.out.println(numEntries + \" entries written to ledger \" + lh.getId());\n+\n+            return 0;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Simple test to create a ledger and write entries to it\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"simpletest   [-ensemble N] [-writeQuorum N] [-ackQuorum N] [-numEntries N]\";\n         }\n \n         @Override\n@@ -387,7 +676,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"readlog [-m] <entry_log_id | entry_log_file_name>\";\n+            return \"readlog      [-msg] <entry_log_id | entry_log_file_name>\";\n         }\n \n         @Override\n@@ -448,7 +737,7 @@ String getDescription() {\n \n         @Override\n         String getUsage() {\n-            return \"readjournal [-m] <journal_id | journal_file_name>\";\n+            return \"readjournal  [-msg] <journal_id | journal_file_name>\";\n         }\n \n         @Override\n@@ -460,25 +749,44 @@ Options getOptions() {\n     /**\n      * Command to print last log mark\n      */\n-    class LastMarkCmd implements Command {\n+    class LastMarkCmd extends MyCommand {\n+        LastMarkCmd() {\n+            super(CMD_LASTMARK);\n+        }\n+\n         @Override\n-        public int runCmd(String[] args) throws Exception {\n+        public int runCmd(CommandLine c) throws Exception {\n             printLastLogMark();\n             return 0;\n         }\n \n         @Override\n-        public void printUsage() {\n-            System.err.println(\"lastmark: Print last log marker.\");\n+        String getDescription() {\n+            return \"Print last log marker.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"lastmark\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return new Options();\n         }\n     }\n \n     /**\n      * Command to print help message\n      */\n-    class HelpCmd implements Command {\n+    class HelpCmd extends MyCommand {\n+        HelpCmd() {\n+            super(CMD_HELP);\n+        }\n+\n         @Override\n-        public int runCmd(String[] args) throws Exception {\n+        public int runCmd(CommandLine cmdLine) throws Exception {\n+            String[] args = cmdLine.getArgs();\n             if (args.length == 0) {\n                 printShellUsage();\n                 return 0;\n@@ -495,9 +803,18 @@ public int runCmd(String[] args) throws Exception {\n         }\n \n         @Override\n-        public void printUsage() {\n-            System.err.println(\"help: Describe the usage of this program or its subcommands.\");\n-            System.err.println(\"usage: help [COMMAND]\");\n+        String getDescription() {\n+            return \"Describe the usage of this program or its subcommands.\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"help         [COMMAND]\";\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return new Options();\n         }\n     }\n \n@@ -572,13 +889,68 @@ int runCmd(CommandLine cmdLine) throws Exception {\n         }\n     }\n \n-    final Map<String, Command> commands;\n+    /**\n+     * Print which node has the auditor lock\n+     */\n+    class WhoIsAuditorCmd extends MyCommand {\n+        Options opts = new Options();\n+\n+        public WhoIsAuditorCmd() {\n+            super(CMD_WHOISAUDITOR);\n+        }\n+\n+        @Override\n+        Options getOptions() {\n+            return opts;\n+        }\n+\n+        @Override\n+        String getDescription() {\n+            return \"Print the node which holds the auditor lock\";\n+        }\n+\n+        @Override\n+        String getUsage() {\n+            return \"whoisauditor\";\n+        }\n+\n+        @Override\n+        int runCmd(CommandLine cmdLine) throws Exception {\n+            ZooKeeper zk = null;\n+            try {\n+                ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(bkConf.getZkTimeout());\n+                zk = ZkUtils.createConnectedZookeeperClient(bkConf.getZkServers(), w);\n+                InetSocketAddress bookieId = AuditorElector.getCurrentAuditor(bkConf, zk);\n+                if (bookieId == null) {\n+                    LOG.info(\"No auditor elected\");\n+                    return -1;\n+                }\n+                LOG.info(\"Auditor: {}/{}:{}\",\n+                         new Object[] {\n+                             bookieId.getAddress().getCanonicalHostName(),\n+                             bookieId.getAddress().getHostAddress(),\n+                             bookieId.getPort() });\n+            } finally {\n+                if (zk != null) {\n+                    zk.close();\n+                }\n+            }\n+\n+            return 0;\n+        }\n+    }\n+\n+    final Map<String, MyCommand> commands = new HashMap<String, MyCommand>();\n     {\n-        commands = new HashMap<String, Command>();\n         commands.put(CMD_METAFORMAT, new MetaFormatCmd());\n         commands.put(CMD_BOOKIEFORMAT, new BookieFormatCmd());\n         commands.put(CMD_RECOVER, new RecoverCmd());\n         commands.put(CMD_LEDGER, new LedgerCmd());\n+        commands.put(CMD_LISTLEDGERS, new ListLedgersCmd());\n+        commands.put(CMD_LISTUNDERREPLICATED, new ListUnderreplicatedCmd());\n+        commands.put(CMD_WHOISAUDITOR, new WhoIsAuditorCmd());\n+        commands.put(CMD_LEDGERMETADATA, new LedgerMetadataCmd());\n+        commands.put(CMD_SIMPLETEST, new SimpleTestCmd());\n         commands.put(CMD_READLOG, new ReadLogCmd());\n         commands.put(CMD_READJOURNAL, new ReadJournalCmd());\n         commands.put(CMD_LASTMARK, new LastMarkCmd());\n@@ -597,18 +969,17 @@ public void setConf(Configuration conf) throws Exception {\n         entriesPerPage = pageSize / 8;\n     }\n \n-    private static void printShellUsage() {\n+    private void printShellUsage() {\n         System.err.println(\"Usage: BookieShell [-conf configuration] <command>\");\n         System.err.println();\n-        System.err.println(\"       metaformat   [-nonInteractive] [-force]\");\n-        System.err.println(\"       bookieformat [-nonInteractive] [-force]\");\n-        System.err.println(\"       recover      <bookieSrc> [bookieDest]\");\n-        System.err.println(\"       ledger       [-meta] <ledger_id>\");\n-        System.err.println(\"       readlog      [-msg] <entry_log_id|entry_log_file_name>\");\n-        System.err.println(\"       readjournal  [-msg] <journal_id|journal_file_name>\");\n-        System.err.println(\"       autorecovery [-enable|-disable]\");\n-        System.err.println(\"       lastmark\");\n-        System.err.println(\"       help\");\n+        List<String> commandNames = new ArrayList<String>();\n+        for (MyCommand c : commands.values()) {\n+            commandNames.add(\"       \" + c.getUsage());\n+        }\n+        Collections.sort(commandNames);\n+        for (String s : commandNames) {\n+            System.err.println(s);\n+        }\n     }\n \n     @Override\n@@ -631,16 +1002,17 @@ public int run(String[] args) throws Exception {\n     }\n \n     public static void main(String argv[]) throws Exception {\n+        BookieShell shell = new BookieShell();\n         if (argv.length <= 0) {\n-            printShellUsage();\n+            shell.printShellUsage();\n             System.exit(-1);\n         }\n \n         CompositeConfiguration conf = new CompositeConfiguration();\n         // load configuration\n         if (\"-conf\".equals(argv[0])) {\n             if (argv.length <= 1) {\n-                printShellUsage();\n+                shell.printShellUsage();\n                 System.exit(-1);\n             }\n             conf.addConfiguration(new PropertiesConfiguration(\n@@ -651,7 +1023,7 @@ public static void main(String argv[]) throws Exception {\n             argv = newArgv;\n         }\n \n-        BookieShell shell = new BookieShell();\n+\n         shell.setConf(conf);\n         int res = shell.run(argv);\n         System.exit(res);\n@@ -931,4 +1303,30 @@ static String bytes2Hex(byte[] data) {\n         }\n         return sb.toString();\n     }\n+\n+    private static int getOptionIntValue(CommandLine cmdLine, String option, int defaultVal) {\n+        if (cmdLine.hasOption(option)) {\n+            String val = cmdLine.getOptionValue(option);\n+            try {\n+                return Integer.parseInt(val);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid value for option \" + option + \" : \" + val);\n+                return defaultVal;\n+            }\n+        }\n+        return defaultVal;\n+    }\n+\n+    private static long getOptionLongValue(CommandLine cmdLine, String option, long defaultVal) {\n+        if (cmdLine.hasOption(option)) {\n+            String val = cmdLine.getOptionValue(option);\n+            try {\n+                return Long.parseLong(val);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"ERROR: invalid value for option \" + option + \" : \" + val);\n+                return defaultVal;\n+            }\n+        }\n+        return defaultVal;\n+    }\n }"},{"sha":"fea01c6af301b881556a7b1e50ff97e8d7b5e494","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/BookKeeperAdmin.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -873,4 +873,11 @@ public void remove()\n             }\n         };\n     }\n+\n+    /**\n+     * @return the metadata for the passed ledger handle\n+     */\n+    public LedgerMetadata getLedgerMetadata(LedgerHandle lh) {\n+        return lh.getLedgerMetadata();\n+    }\n }"},{"sha":"5a9c75217ab8aed5c65ad2173bc6ff95e23e564d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","status":"modified","additions":72,"deletions":21,"changes":93,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerHandle.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -26,6 +26,7 @@\n import java.util.Arrays;\n import java.util.ArrayList;\n import java.util.Enumeration;\n+import java.util.List;\n import java.util.Queue;\n import java.util.concurrent.atomic.AtomicInteger;\n \n@@ -250,6 +251,7 @@ public void safeRun() {\n                 final long prevLastEntryId;\n                 final long prevLength;\n                 final State prevState;\n+                List<PendingAddOp> pendingAdds;\n \n                 synchronized(LedgerHandle.this) {\n                     // if the metadata is already closed, we don't need to proceed the process\n@@ -262,16 +264,21 @@ public void safeRun() {\n                     prevLastEntryId = metadata.getLastEntryId();\n                     prevLength = metadata.getLength();\n \n+                    // drain pending adds first\n+                    pendingAdds = drainPendingAddsToErrorOut();\n+\n                     // synchronized on LedgerHandle.this to ensure that \n                     // lastAddPushed can not be updated after the metadata \n                     // is closed. \n                     metadata.setLength(length);\n-\n                     metadata.close(lastAddConfirmed);\n-                    errorOutPendingAdds(rc);\n                     lastAddPushed = lastAddConfirmed;\n                 }\n \n+                // error out all pending adds during closing, the callbacks shouldn't be\n+                // running under any bk locks.\n+                errorOutPendingAdds(rc, pendingAdds);\n+\n                 if (LOG.isDebugEnabled()) {\n                     LOG.debug(\"Closing ledger: \" + ledgerId + \" at entryId: \"\n                               + metadata.getLastEntryId() + \" with this many bytes: \" + metadata.getLength());\n@@ -491,21 +498,28 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n \n         final long entryId;\n         final long currentLength;\n+        boolean wasClosed = false;\n         synchronized(this) {\n             // synchronized on this to ensure that\n             // the ledger isn't closed between checking and\n             // updating lastAddPushed\n             if (metadata.isClosed()) {\n-                LOG.warn(\"Attempt to add to closed ledger: \" + ledgerId);\n-                cb.addComplete(BKException.Code.LedgerClosedException,\n-                               LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n-                return;\n+                wasClosed = true;\n+                entryId = -1;\n+                currentLength = 0;\n+            } else {\n+                entryId = ++lastAddPushed;\n+                currentLength = addToLength(length);\n+                op.setEntryId(entryId);\n+                pendingAddOps.add(op);\n             }\n+        }\n \n-            entryId = ++lastAddPushed;\n-            currentLength = addToLength(length);\n-            op.setEntryId(entryId);\n-            pendingAddOps.add(op);\n+        if (wasClosed) {\n+            LOG.warn(\"Attempt to add to closed ledger: {}\", ledgerId);\n+            cb.addComplete(BKException.Code.LedgerClosedException,\n+                           LedgerHandle.this, INVALID_ENTRY_ID, ctx);\n+            return;\n         }\n \n         try {\n@@ -514,7 +528,7 @@ private void doAsyncAddEntry(final PendingAddOp op, final byte[] data, final int\n                 public void safeRun() {\n                     ChannelBuffer toSend = macManager.computeDigestAndPackageForSending(\n                                                entryId, lastAddConfirmed, currentLength, data, offset, length);\n-                    op.initiate(toSend);\n+                    op.initiate(toSend, length);\n                 }\n             });\n         } catch (RuntimeException e) {\n@@ -539,6 +553,16 @@ public void safeRun() {\n      */\n \n     public void asyncReadLastConfirmed(final ReadLastConfirmedCallback cb, final Object ctx) {\n+        boolean isClosed;\n+        long lastEntryId;\n+        synchronized (this) {\n+            isClosed = metadata.isClosed();\n+            lastEntryId = metadata.getLastEntryId();\n+        }\n+        if (isClosed) {\n+            cb.readLastConfirmedComplete(BKException.Code.OK, lastEntryId, ctx);\n+            return;\n+        }\n         ReadLastConfirmedOp.LastConfirmedDataCallback innercb = new ReadLastConfirmedOp.LastConfirmedDataCallback() {\n                 @Override\n                 public void readLastConfirmedDataComplete(int rc, DigestManager.RecoveryData data) {\n@@ -633,9 +657,22 @@ void handleUnrecoverableErrorDuringAdd(int rc) {\n     }\n \n     void errorOutPendingAdds(int rc) {\n+        errorOutPendingAdds(rc, drainPendingAddsToErrorOut());\n+    }\n+\n+    synchronized List<PendingAddOp> drainPendingAddsToErrorOut() {\n         PendingAddOp pendingAddOp;\n+        List<PendingAddOp> opsDrained = new ArrayList<PendingAddOp>(pendingAddOps.size());\n         while ((pendingAddOp = pendingAddOps.poll()) != null) {\n-            pendingAddOp.submitCallback(rc);\n+            addToLength(-pendingAddOp.entryLength);\n+            opsDrained.add(pendingAddOp);\n+        }\n+        return opsDrained;\n+    }\n+\n+    void errorOutPendingAdds(int rc, List<PendingAddOp> ops) {\n+        for (PendingAddOp op : ops) {\n+            op.submitCallback(rc);\n         }\n     }\n \n@@ -884,25 +921,39 @@ void rereadMetadata(final GenericCallback<LedgerMetadata> cb) {\n         bk.getLedgerManager().readLedgerMetadata(ledgerId, cb);\n     }\n \n-    synchronized void recover(final GenericCallback<Void> cb) {\n-        if (metadata.isClosed()) {\n-            lastAddConfirmed = lastAddPushed = metadata.getLastEntryId();\n-            length = metadata.getLength();\n+    void recover(final GenericCallback<Void> cb) {\n+        boolean wasClosed = false;\n+        boolean wasInRecovery = false;\n \n+        synchronized (this) {\n+            if (metadata.isClosed()) {\n+                lastAddConfirmed = lastAddPushed = metadata.getLastEntryId();\n+                length = metadata.getLength();\n+                wasClosed = true;\n+            } else {\n+                wasClosed = false;\n+                if (metadata.isInRecovery()) {\n+                    wasInRecovery = true;\n+                } else {\n+                    wasInRecovery = false;\n+                    metadata.markLedgerInRecovery();\n+                }\n+            }\n+        }\n+\n+        if (wasClosed) {\n             // We are already closed, nothing to do\n             cb.operationComplete(BKException.Code.OK, null);\n             return;\n         }\n \n-        // if metadata is already in recover, dont try to write again,\n-        // just do the recovery from the starting point\n-        if (metadata.isInRecovery()) {\n+        if (wasInRecovery) {\n+            // if metadata is already in recover, dont try to write again,\n+            // just do the recovery from the starting point\n             new LedgerRecoveryOp(LedgerHandle.this, cb).initiate();\n             return;\n         }\n \n-        metadata.markLedgerInRecovery();\n-\n         writeLedgerConfig(new OrderedSafeGenericCallback<Void>(bk.mainWorkerPool, ledgerId) {\n             @Override\n             public void safeOperationComplete(final int rc, Void result) {"},{"sha":"322560bc310eb45d5685d77fb2aae9fe0b1d4725","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/LedgerOpenOp.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -138,7 +138,7 @@ public void operationComplete(int rc, LedgerMetadata metadata) {\n \n         // get the ledger metadata back\n         try {\n-            lh = new ReadOnlyLedgerHandle(bk, ledgerId, metadata, digestType, passwd);\n+            lh = new ReadOnlyLedgerHandle(bk, ledgerId, metadata, digestType, passwd, !doRecovery);\n         } catch (GeneralSecurityException e) {\n             LOG.error(\"Security exception while opening ledger: \" + ledgerId, e);\n             cb.openComplete(BKException.Code.DigestNotInitializedException, null, this.ctx);"},{"sha":"de4452499a9a15830eb10e903d07d095ef3e3d7c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/PendingAddOp.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -43,6 +43,7 @@\n     AddCallback cb;\n     Object ctx;\n     long entryId;\n+    int entryLength;\n     Set<Integer> writeSet;\n \n     DistributionSchedule.AckSet ackSet;\n@@ -121,8 +122,9 @@ void unsetSuccessAndSendWriteRequest(int bookieIndex) {\n         sendWriteRequest(bookieIndex);\n     }\n \n-    void initiate(ChannelBuffer toSend) {\n+    void initiate(ChannelBuffer toSend, int entryLength) {\n         this.toSend = toSend;\n+        this.entryLength = entryLength;\n         for (int bookieIndex : writeSet) {\n             sendWriteRequest(bookieIndex);\n         }"},{"sha":"b34de583e4d4e0c1957ea0f08646d915b2d7e689","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","status":"modified","additions":72,"deletions":11,"changes":83,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/client/ReadOnlyLedgerHandle.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.client;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,46 +18,76 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.client;\n \n import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n import org.apache.bookkeeper.client.AsyncCallback.CloseCallback;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n+import org.apache.bookkeeper.util.SafeRunnable;\n+import org.apache.bookkeeper.versioning.Version;\n+\n import java.security.GeneralSecurityException;\n import java.net.InetSocketAddress;\n+import java.util.concurrent.RejectedExecutionException;\n \n /**\n- * Read only ledger handle. This ledger handle allows you to \n- * read from a ledger but not to write to it. It overrides all \n+ * Read only ledger handle. This ledger handle allows you to\n+ * read from a ledger but not to write to it. It overrides all\n  * the public write operations from LedgerHandle.\n  * It should be returned for BookKeeper#openLedger operations.\n  */\n-class ReadOnlyLedgerHandle extends LedgerHandle {\n+class ReadOnlyLedgerHandle extends LedgerHandle implements LedgerMetadataListener {\n+\n+    class MetadataUpdater extends SafeRunnable {\n+\n+        final LedgerMetadata m;\n+\n+        MetadataUpdater(LedgerMetadata metadata) {\n+            this.m = metadata;\n+        }\n+\n+        @Override\n+        public void safeRun() {\n+            Version.Occurred occurred =\n+                    ReadOnlyLedgerHandle.this.metadata.getVersion().compare(this.m.getVersion());\n+            if (Version.Occurred.BEFORE == occurred) {\n+                LOG.info(\"Updated ledger metadata for ledger {} to {}.\", ledgerId, this.m);\n+                ReadOnlyLedgerHandle.this.metadata = this.m;\n+            }\n+        }\n+    }\n+\n     ReadOnlyLedgerHandle(BookKeeper bk, long ledgerId, LedgerMetadata metadata,\n-                         DigestType digestType, byte[] password)\n+                         DigestType digestType, byte[] password, boolean watch)\n             throws GeneralSecurityException, NumberFormatException {\n         super(bk, ledgerId, metadata, digestType, password);\n+        if (watch) {\n+            bk.getLedgerManager().registerLedgerMetadataListener(ledgerId, this);\n+        }\n     }\n \n     @Override\n-    public void close() \n+    public void close()\n             throws InterruptedException, BKException {\n-        // noop\n+        bk.getLedgerManager().unregisterLedgerMetadataListener(ledgerId, this);\n     }\n \n     @Override\n     public void asyncClose(CloseCallback cb, Object ctx) {\n+        bk.getLedgerManager().unregisterLedgerMetadataListener(ledgerId, this);\n         cb.closeComplete(BKException.Code.OK, this, ctx);\n     }\n-    \n+\n     @Override\n     public long addEntry(byte[] data) throws InterruptedException, BKException {\n         return addEntry(data, 0, data.length);\n     }\n-    \n+\n     @Override\n     public long addEntry(byte[] data, int offset, int length)\n             throws InterruptedException, BKException {\n-        LOG.error(\"Tried to add entry on a Read-Only ledger handle, ledgerid=\" + ledgerId);        \n+        LOG.error(\"Tried to add entry on a Read-Only ledger handle, ledgerid=\" + ledgerId);\n         throw BKException.create(BKException.Code.IllegalOpException);\n     }\n \n@@ -103,4 +131,37 @@ void handleBookieFailure(final InetSocketAddress addr, final int bookieIndex) {\n             }\n         }\n     }\n+\n+    @Override\n+    public void onChanged(long lid, LedgerMetadata newMetadata) {\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Received ledger metadata update on {} : {}\", lid, newMetadata);\n+        }\n+        if (this.ledgerId != lid) {\n+            return;\n+        }\n+        if (null == newMetadata) {\n+            return;\n+        }\n+        Version.Occurred occurred =\n+                this.metadata.getVersion().compare(newMetadata.getVersion());\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Try to update metadata from {} to {} : {}\",\n+                    new Object[] { this.metadata, newMetadata, occurred });\n+        }\n+        if (Version.Occurred.BEFORE == occurred) { // the metadata is updated\n+            try {\n+                bk.mainWorkerPool.submitOrdered(ledgerId, new MetadataUpdater(newMetadata));\n+            } catch (RejectedExecutionException ree) {\n+                LOG.error(\"Failed on submitting updater to update ledger metadata on ledger {} : {}\",\n+                        ledgerId, newMetadata);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"ReadOnlyLedgerHandle(lid = %d, id = %d)\", ledgerId, super.hashCode());\n+    }\n+\n }"},{"sha":"d39acfab232d1ab4ca730af2c884272eabb3e0c8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","status":"modified","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ClientConfiguration.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -17,7 +17,10 @@\n  */\n package org.apache.bookkeeper.conf;\n \n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n \n@@ -44,6 +47,10 @@\n     protected final static String CLIENT_TCP_NODELAY = \"clientTcpNoDelay\";\n     protected final static String READ_TIMEOUT = \"readTimeout\";\n     protected final static String SPECULATIVE_READ_TIMEOUT = \"speculativeReadTimeout\";\n+    // Timeout Setting\n+    protected final static String ADD_ENTRY_TIMEOUT_SEC = \"addEntryTimeoutSec\";\n+    protected final static String READ_ENTRY_TIMEOUT_SEC = \"readEntryTimeoutSec\";\n+    protected final static String TIMEOUT_TASK_INTERVAL_MILLIS = \"timeoutTaskIntervalMillis\";\n \n     // Number Woker Threads\n     protected final static String NUM_WORKER_THREADS = \"numWorkerThreads\";\n@@ -234,7 +241,9 @@ public ClientConfiguration setZkTimeout(int zkTimeout) {\n      * The default is 5 seconds.\n      *\n      * @return the current read timeout in seconds\n+     * @deprecated use {@link getReadEntryTimeout()} or {@link getAddEntryTimeout()} instead\n      */\n+    @Deprecated\n     public int getReadTimeout() {\n         return getInt(READ_TIMEOUT, 5);\n     }\n@@ -244,12 +253,83 @@ public int getReadTimeout() {\n      * @see #getReadTimeout()\n      * @param timeout The new read timeout in seconds\n      * @return client configuration\n+     * @deprecated use {@link setReadEntryTimeout(int)} or {@link setAddEntryTimeout(int)} instead\n      */\n+    @Deprecated\n     public ClientConfiguration setReadTimeout(int timeout) {\n         setProperty(READ_TIMEOUT, Integer.toString(timeout));\n         return this;\n     }\n \n+    /**\n+     * Get the timeout for add request. This is the number of seconds we wait without hearing\n+     * a response for add request from a bookie before we consider it failed.\n+     *\n+     * The default value is 5 second for backwards compatibility.\n+     *\n+     * @return add entry timeout.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public int getAddEntryTimeout() {\n+        return getInt(ADD_ENTRY_TIMEOUT_SEC, getReadTimeout());\n+    }\n+\n+    /**\n+     * Set timeout for add entry request.\n+     * @see #getAddEntryTimeout()\n+     *\n+     * @param timeout\n+     *          The new add entry timeout in seconds.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setAddEntryTimeout(int timeout) {\n+        setProperty(ADD_ENTRY_TIMEOUT_SEC, timeout);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the timeout for read entry. This is the number of seconds we wait without hearing\n+     * a response for read entry request from a bookie before we consider it failed. By default,\n+     * we use socket timeout specified at {@link #getReadTimeout()}.\n+     *\n+     * @return read entry timeout.\n+     */\n+    @SuppressWarnings(\"deprecation\")\n+    public int getReadEntryTimeout() {\n+        return getInt(READ_ENTRY_TIMEOUT_SEC, getReadTimeout());\n+    }\n+\n+    /**\n+     * Set the timeout for read entry request.\n+     * @see #getReadEntryTimeout()\n+     *\n+     * @param timeout\n+     *          The new read entry timeout in seconds.\n+     * @return client configuration.\n+     */\n+    public ClientConfiguration setReadEntryTimeout(int timeout) {\n+        setProperty(READ_ENTRY_TIMEOUT_SEC, timeout);\n+        return this;\n+    }\n+\n+    /**\n+     * Get the interval between successive executions of the PerChannelBookieClient's\n+     * TimeoutTask. This value is in milliseconds. Every X milliseconds, the timeout task\n+     * will be executed and it will error out entries that have timed out.\n+     *\n+     * We do it more aggressive to not accumulate pending requests due to slow responses.\n+     * @return\n+     */\n+    public long getTimeoutTaskIntervalMillis() {\n+        return getLong(TIMEOUT_TASK_INTERVAL_MILLIS,\n+                TimeUnit.SECONDS.toMillis(Math.min(getAddEntryTimeout(), getReadEntryTimeout())));\n+    }\n+\n+    public ClientConfiguration setTimeoutTaskIntervalMillis(long timeoutMillis) {\n+        setProperty(TIMEOUT_TASK_INTERVAL_MILLIS, Long.toString(timeoutMillis));\n+        return this;\n+    }\n+\n     /**\n      * Get the number of worker threads. This is the number of\n      * worker threads used by bookkeeper client to submit operations."},{"sha":"3af3c35387c40710dc4d063a4c9b1713c81da452","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/conf/ServerConfiguration.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -70,6 +70,7 @@\n     protected final static String DISK_USAGE_THRESHOLD = \"diskUsageThreshold\";\n     protected final static String DISK_CHECK_INTERVAL = \"diskCheckInterval\";\n     protected final static String AUDITOR_PERIODIC_CHECK_INTERVAL = \"auditorPeriodicCheckInterval\";\n+    protected final static String AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL = \"auditorPeriodicBookieCheckInterval\";\n     protected final static String AUTO_RECOVERY_DAEMON_ENABLED = \"autoRecoveryDaemonEnabled\";\n \n     /**\n@@ -735,6 +736,29 @@ public long getAuditorPeriodicCheckInterval() {\n         return getLong(AUDITOR_PERIODIC_CHECK_INTERVAL, 604800);\n     }\n \n+    /**\n+     * Set the interval between auditor bookie checks.\n+     * The auditor bookie check, checks ledger metadata to see which bookies\n+     * contain entries for each ledger. If a bookie which should contain entries\n+     * is unavailable, then the ledger containing that entry is marked for recovery.\n+     * Setting this to 0 disabled the periodic check. Bookie checks will still\n+     * run when a bookie fails.\n+     *\n+     * @param interval The period in seconds.\n+     */\n+    public void setAuditorPeriodicBookieCheckInterval(long interval) {\n+        setProperty(AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL, interval);\n+    }\n+\n+    /**\n+     * Get the interval between auditor bookie check runs.\n+     * @see #setAuditorPeriodicBookieCheckInterval(long)\n+     * @return the interval between bookie check runs, in seconds. Default is 86400 (= 1 day)\n+     */\n+    public long getAuditorPeriodicBookieCheckInterval() {\n+        return getLong(AUDITOR_PERIODIC_BOOKIE_CHECK_INTERVAL, 86400);\n+    }\n+\n     /**\n      * Sets that whether the auto-recovery service can start along with Bookie\n      * server itself or not"},{"sha":"ab11a85f9829fbcf49b67fb3b8d6946ee736f530","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","status":"modified","additions":185,"deletions":2,"changes":187,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/AbstractZkLedgerManager.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -18,15 +18,22 @@\n package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.NavigableSet;\n import java.util.Set;\n import java.util.TreeSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.MultiCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.util.BookKeeperConstants;\n@@ -38,22 +45,84 @@\n import org.apache.zookeeper.AsyncCallback.VoidCallback;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.KeeperException.Code;\n+import org.apache.zookeeper.WatchedEvent;\n+import org.apache.zookeeper.Watcher;\n import org.apache.zookeeper.ZooKeeper;\n import org.apache.zookeeper.data.Stat;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n /**\n  * Abstract ledger manager based on zookeeper, which provides common methods such as query zk nodes.\n  */\n-abstract class AbstractZkLedgerManager implements LedgerManager {\n+abstract class AbstractZkLedgerManager implements LedgerManager, Watcher {\n \n     static Logger LOG = LoggerFactory.getLogger(AbstractZkLedgerManager.class);\n \n+    static int ZK_CONNECT_BACKOFF_MS = 200;\n+\n     protected final AbstractConfiguration conf;\n     protected final ZooKeeper zk;\n     protected final String ledgerRootPath;\n \n+    // ledger metadata listeners\n+    protected final ConcurrentMap<Long, Set<LedgerMetadataListener>> listeners =\n+            new ConcurrentHashMap<Long, Set<LedgerMetadataListener>>();\n+    // we use this to prevent long stack chains from building up in callbacks\n+    protected ScheduledExecutorService scheduler;\n+\n+    protected class ReadLedgerMetadataTask implements Runnable, GenericCallback<LedgerMetadata> {\n+\n+        final long ledgerId;\n+\n+        ReadLedgerMetadataTask(long ledgerId) {\n+            this.ledgerId = ledgerId;\n+        }\n+\n+        @Override\n+        public void run() {\n+            if (null != listeners.get(ledgerId)) {\n+                LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                readLedgerMetadata(ledgerId, this, AbstractZkLedgerManager.this);\n+            } else {\n+                LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+            }\n+        }\n+\n+        @Override\n+        public void operationComplete(int rc, final LedgerMetadata result) {\n+            if (BKException.Code.OK == rc) {\n+                final Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (null != listenerSet) {\n+                    LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                    scheduler.submit(new Runnable() {\n+                        @Override\n+                        public void run() {\n+                            synchronized(listenerSet) {\n+                                for (LedgerMetadataListener listener : listenerSet) {\n+                                    listener.onChanged(ledgerId, result);\n+                                }\n+                            }\n+                        }\n+                    });\n+                }\n+            } else if (BKException.Code.NoSuchLedgerExistsException == rc) {\n+                // the ledger is removed, do nothing\n+                Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                if (null != listenerSet) {\n+                    LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n+                            ledgerId, listenerSet.size());\n+                }\n+            } else {\n+                LOG.warn(\"Failed on read ledger metadata of ledger {} : {}\", ledgerId, rc);\n+                scheduler.schedule(this, ZK_CONNECT_BACKOFF_MS, TimeUnit.MILLISECONDS);\n+            }\n+        }\n+    }\n+\n+\n     /**\n      * ZooKeeper-based Ledger Manager Constructor\n      *\n@@ -66,6 +135,12 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         this.conf = conf;\n         this.zk = zk;\n         this.ledgerRootPath = conf.getZkLedgersRootPath();\n+        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n+        ThreadFactoryBuilder tfb = new ThreadFactoryBuilder().setNameFormat(\n+                \"ZkLedgerManagerScheduler-%d\");\n+        this.scheduler = Executors\n+                .newSingleThreadScheduledExecutor(tfb.build());\n+        LOG.debug(\"Using AbstractZkLedgerManager with root path : {}\", ledgerRootPath);\n     }\n \n     /**\n@@ -87,6 +162,59 @@ protected AbstractZkLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n      */\n     protected abstract long getLedgerId(String ledgerPath) throws IOException;\n \n+    @Override\n+    public void process(WatchedEvent event) {\n+        LOG.info(\"Received watched event {} from zookeeper based ledger manager.\", event);\n+        if (Event.EventType.None == event.getType()) {\n+            /** TODO: BOOKKEEPER-537 to handle expire events.\n+            if (Event.KeeperState.Expired == event.getState()) {\n+                LOG.info(\"ZooKeeper client expired on ledger manager.\");\n+                Set<Long> keySet = new HashSet<Long>(listeners.keySet());\n+                for (Long lid : keySet) {\n+                    scheduler.submit(new ReadLedgerMetadataTask(lid));\n+                    LOG.info(\"Re-read ledger metadata for {} after zookeeper session expired.\", lid);\n+                }\n+            }\n+            **/\n+            return;\n+        }\n+        String path = event.getPath();\n+        if (null == path) {\n+            return;\n+        }\n+        final long ledgerId;\n+        try {\n+            ledgerId = getLedgerId(event.getPath());\n+        } catch (IOException ioe) {\n+            LOG.info(\"Received invalid ledger path {} : \", event.getPath(), ioe);\n+            return;\n+        }\n+        switch (event.getType()) {\n+        case NodeDeleted:\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+            if (null != listenerSet) {\n+                synchronized(listenerSet) {\n+                    LOG.debug(\"Removed ledger metadata listeners on ledger {} : {}\",\n+                            ledgerId, listenerSet);\n+                    for(LedgerMetadataListener l : listenerSet) {\n+                        unregisterLedgerMetadataListener(ledgerId, l);\n+                        l.onChanged( ledgerId, null );\n+                    }\n+                }\n+            } else {\n+                LOG.debug(\"No ledger metadata listeners to remove from ledger {} after it's deleted.\",\n+                        ledgerId);\n+            }\n+            break;\n+        case NodeDataChanged:\n+            new ReadLedgerMetadataTask(ledgerId).run();\n+            break;\n+        default:\n+            LOG.debug(\"Received event {} on {}.\", event.getType(), event.getPath());\n+            break;\n+        }\n+    }\n+\n     /**\n      * Removes ledger metadata from ZooKeeper if version matches.\n      *\n@@ -120,6 +248,15 @@ public void processResult(int rc, String path, Object ctx) {\n                     LOG.warn(\"Ledger node does not exist in ZooKeeper: ledgerId={}\", ledgerId);\n                     bkRc = BKException.Code.NoSuchLedgerExistsException;\n                 } else if (rc == KeeperException.Code.OK.intValue()) {\n+                    // removed listener on ledgerId\n+                    Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Remove registered ledger metadata listeners on ledger {} after ledger is deleted.\",\n+                                ledgerId, listenerSet);\n+                    } else {\n+                        LOG.debug(\"No ledger metadata listeners to remove from ledger {} when it's being deleted.\",\n+                                ledgerId);\n+                    }\n                     bkRc = BKException.Code.OK;\n                 } else {\n                     bkRc = BKException.Code.ZKException;\n@@ -129,9 +266,50 @@ public void processResult(int rc, String path, Object ctx) {\n         }, null);\n     }\n \n+    @Override\n+    public void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+        if (null != listener) {\n+            LOG.info(\"Registered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+            if (listenerSet == null) {\n+                Set<LedgerMetadataListener> newListenerSet = new HashSet<LedgerMetadataListener>();\n+                Set<LedgerMetadataListener> oldListenerSet = listeners.putIfAbsent(ledgerId, newListenerSet);\n+                if (null != oldListenerSet) {\n+                    listenerSet = oldListenerSet;\n+                } else {\n+                    listenerSet = newListenerSet;\n+                }\n+            }\n+            synchronized (listenerSet) {\n+                listenerSet.add(listener);\n+            }\n+            new ReadLedgerMetadataTask(ledgerId).run();\n+        }\n+    }\n+\n+    @Override\n+    public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+        Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+        if (listenerSet != null) {\n+            synchronized (listenerSet) {\n+                if (listenerSet.remove(listener)) {\n+                    LOG.info(\"Unregistered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                }\n+                if (listenerSet.isEmpty()) {\n+                    listeners.remove(ledgerId, listenerSet);\n+                }\n+            }\n+        }\n+    }\n+\n     @Override\n     public void readLedgerMetadata(final long ledgerId, final GenericCallback<LedgerMetadata> readCb) {\n-        zk.getData(getLedgerPath(ledgerId), false, new DataCallback() {\n+        readLedgerMetadata(ledgerId, readCb, null);\n+    }\n+\n+    protected void readLedgerMetadata(final long ledgerId, final GenericCallback<LedgerMetadata> readCb,\n+                                      Watcher watcher) {\n+        zk.getData(getLedgerPath(ledgerId), watcher, new DataCallback() {\n             @Override\n             public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {\n                 if (rc == KeeperException.Code.NONODE.intValue()) {\n@@ -296,5 +474,10 @@ protected boolean isSpecialZnode(String znode) {\n \n     @Override\n     public void close() {\n+        try {\n+            scheduler.shutdown();\n+        } catch (Exception e) {\n+            LOG.warn(\"Error when closing zookeeper based ledger manager: \", e);\n+        }\n     }\n }"},{"sha":"db16d26b1672ce4f549d9d4010307e7924475db8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/FlatLedgerManagerFactory.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -30,7 +30,7 @@\n /**\n  * Flat Ledger Manager Factory\n  */\n-class FlatLedgerManagerFactory extends LedgerManagerFactory {\n+public class FlatLedgerManagerFactory extends LedgerManagerFactory {\n \n     public static final String NAME = \"flat\";\n     public static final int CUR_VERSION = 1;"},{"sha":"2c3c4cd17825f7fc6a20334d24ff8500cf1844ba","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","status":"modified","additions":1,"deletions":16,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManager.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.meta;\n-\n /**\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n@@ -17,6 +15,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+package org.apache.bookkeeper.meta;\n \n import java.io.IOException;\n import java.util.Collections;\n@@ -72,9 +71,6 @@\n     // Path to generate global id\n     private final String idGenPath;\n \n-    // we use this to prevent long stack chains from building up in callbacks\n-    ScheduledExecutorService scheduler;\n-\n     /**\n      * Constructor\n      *\n@@ -87,20 +83,9 @@ public HierarchicalLedgerManager(AbstractConfiguration conf, ZooKeeper zk) {\n         super(conf, zk);\n \n         this.idGenPath = ledgerRootPath + IDGENERATION_PREFIX;\n-        this.scheduler = Executors.newSingleThreadScheduledExecutor();\n         LOG.debug(\"Using HierarchicalLedgerManager with root path : {}\", ledgerRootPath);\n     }\n \n-    @Override\n-    public void close() {\n-        try {\n-            scheduler.shutdown();\n-        } catch (Exception e) {\n-            LOG.warn(\"Error when closing HierarchicalLedgerManager : \", e);\n-        }\n-        super.close();\n-    }\n-\n     @Override\n     public void createLedger(final LedgerMetadata metadata, final GenericCallback<Long> ledgerCb) {\n         ZkUtils.asyncCreateFullPathOptimistic(zk, idGenPath, new byte[0], Ids.OPEN_ACL_UNSAFE,"},{"sha":"b843e994af49da314d17204110a191968e685220","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/HierarchicalLedgerManagerFactory.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -30,7 +30,7 @@\n /**\n  * Hierarchical Ledger Manager Factory\n  */\n-class HierarchicalLedgerManagerFactory extends LedgerManagerFactory {\n+public class HierarchicalLedgerManagerFactory extends LedgerManagerFactory {\n \n     public static final String NAME = \"hierarchical\";\n     public static final int CUR_VERSION = 1;"},{"sha":"72290286e1b0227db0b712393411b34a34db0731","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerManager.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -27,6 +27,7 @@\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.versioning.Version;\n@@ -93,6 +94,26 @@\n      */\n     public void writeLedgerMetadata(long ledgerId, LedgerMetadata metadata, GenericCallback<Void> cb);\n \n+    /**\n+     * Register the ledger metadata <i>listener</i> on <i>ledgerId</i>.\n+     *\n+     * @param ledgerId\n+     *          ledger id.\n+     * @param listener\n+     *          listener.\n+     */\n+    public abstract void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener);\n+\n+    /**\n+     * Unregister the ledger metadata <i>listener</i> on <i>ledgerId</i>.\n+     *\n+     * @param ledgerId\n+     *          ledger id.\n+     * @param listener\n+     *          ledger metadata listener.\n+     */\n+    public abstract void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener);\n+\n     /**\n      * Loop to process all ledgers.\n      * <p>"},{"sha":"d006895e9e4eb7b7afb4fded35e7325d47e18783","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/LedgerUnderreplicationManager.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -20,6 +20,8 @@\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n import org.apache.bookkeeper.replication.ReplicationException;\n \n+import java.util.Iterator;\n+\n /**\n  * Interface for marking ledgers which need to be rereplicated\n  */\n@@ -38,6 +40,14 @@ void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n     void markLedgerReplicated(long ledgerId)\n             throws ReplicationException.UnavailableException;\n \n+    /**\n+     * Get a list of all the ledgers which have been\n+     * marked for rereplication.\n+     *\n+     * @return an iterator which returns ledger ids\n+     */\n+    Iterator<Long> listLedgersToRereplicate();\n+\n     /**\n      * Acquire a underreplicated ledger for rereplication. The ledger\n      * should be locked, so that no other agent will receive the ledger"},{"sha":"5863619a976ed9014755f313eec55aff060803a9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","status":"modified","additions":129,"deletions":2,"changes":131,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/MSLedgerManagerFactory.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -21,18 +21,24 @@\n import static org.apache.bookkeeper.metastore.MetastoreTable.NON_FIELDS;\n \n import java.io.IOException;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n import java.util.SortedSet;\n import java.util.TreeSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.conf.AbstractConfiguration;\n+import org.apache.bookkeeper.meta.AbstractZkLedgerManager.ReadLedgerMetadataTask;\n import org.apache.bookkeeper.metastore.MSException;\n+import org.apache.bookkeeper.metastore.MSWatchedEvent;\n import org.apache.bookkeeper.metastore.MetaStore;\n import org.apache.bookkeeper.metastore.MetastoreCallback;\n import org.apache.bookkeeper.metastore.MetastoreCursor;\n@@ -41,8 +47,11 @@\n import org.apache.bookkeeper.metastore.MetastoreFactory;\n import org.apache.bookkeeper.metastore.MetastoreScannableTable;\n import org.apache.bookkeeper.metastore.MetastoreTableItem;\n+import org.apache.bookkeeper.metastore.MetastoreWatcher;\n+import org.apache.bookkeeper.metastore.MSWatchedEvent.EventType;\n import org.apache.bookkeeper.metastore.Value;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.replication.ReplicationException;\n import org.apache.bookkeeper.util.StringUtils;\n@@ -65,6 +74,8 @@\n \n     static Logger LOG = LoggerFactory.getLogger(MSLedgerManagerFactory.class);\n \n+    static int MS_CONNECT_BACKOFF_MS = 200;\n+\n     public static final int CUR_VERSION = 1;\n \n     public static final String TABLE_NAME = \"LEDGER\";\n@@ -167,7 +178,7 @@ public synchronized T getResult() {\n         }\n     }\n \n-    static class MsLedgerManager implements LedgerManager {\n+    static class MsLedgerManager implements LedgerManager, MetastoreWatcher {\n         final ZooKeeper zk;\n         final AbstractConfiguration conf;\n \n@@ -178,13 +189,66 @@ public synchronized T getResult() {\n         static final String IDGEN_ZNODE = \"ms-idgen\";\n         static final String IDGENERATION_PREFIX = \"/\" + IDGEN_ZNODE + \"/ID-\";\n \n+        // ledger metadata listeners\n+        protected final ConcurrentMap<Long, Set<LedgerMetadataListener>> listeners =\n+                new ConcurrentHashMap<Long, Set<LedgerMetadataListener>>();\n+\n         // Path to generate global id\n         private final String idGenPath;\n \n         // we use this to prevent long stack chains from building up in\n         // callbacks\n         ScheduledExecutorService scheduler;\n \n+        protected class ReadLedgerMetadataTask implements Runnable, GenericCallback<LedgerMetadata> {\n+\n+            final long ledgerId;\n+\n+            ReadLedgerMetadataTask(long ledgerId) {\n+                this.ledgerId = ledgerId;\n+            }\n+\n+            @Override\n+            public void run() {\n+                if (null != listeners.get(ledgerId)) {\n+                    LOG.debug(\"Re-read ledger metadata for {}.\", ledgerId);\n+                    readLedgerMetadata(ledgerId, ReadLedgerMetadataTask.this);\n+                } else {\n+                    LOG.debug(\"Ledger metadata listener for ledger {} is already removed.\", ledgerId);\n+                }\n+            }\n+\n+            @Override\n+            public void operationComplete(int rc, final LedgerMetadata result) {\n+                if (BKException.Code.OK == rc) {\n+                    final Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Ledger metadata is changed for {} : {}.\", ledgerId, result);\n+                        scheduler.submit(new Runnable() {\n+                            @Override\n+                            public void run() {\n+                                synchronized(listenerSet){\n+                                    for (LedgerMetadataListener listener : listenerSet) {\n+                                        listener.onChanged(ledgerId, result);\n+                                    }\n+                                }\n+                            }\n+                        });\n+                    }\n+                } else if (BKException.Code.NoSuchLedgerExistsException == rc) {\n+                    // the ledger is removed, do nothing\n+                    Set<LedgerMetadataListener> listenerSet = listeners.remove(ledgerId);\n+                    if (null != listenerSet) {\n+                        LOG.debug(\"Removed ledger metadata listener set on ledger {} as its ledger is deleted : {}\",\n+                                ledgerId, listenerSet.size());\n+                    }\n+                } else {\n+                    LOG.warn(\"Failed on read ledger metadata of ledger {} : {}\", ledgerId, rc);\n+                    scheduler.schedule(this, MS_CONNECT_BACKOFF_MS, TimeUnit.MILLISECONDS);\n+                }\n+            }\n+        }\n+\n         MsLedgerManager(final AbstractConfiguration conf, final ZooKeeper zk, final MetaStore metastore) {\n             this.conf = conf;\n             this.zk = zk;\n@@ -204,6 +268,69 @@ public synchronized T getResult() {\n             this.scheduler = Executors.newSingleThreadScheduledExecutor();\n         }\n \n+        @Override\n+        public void process(MSWatchedEvent e){\n+            long ledgerId = key2LedgerId(e.getKey());\n+            \n+            switch(e.getType()) {\n+            case CHANGED:\n+                new ReadLedgerMetadataTask(key2LedgerId(e.getKey())).run();\n+\n+                break;\n+            case REMOVED:\n+                Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (listenerSet != null) {\n+                    synchronized (listenerSet) {\n+                        for(LedgerMetadataListener l : listenerSet){\n+                            unregisterLedgerMetadataListener(ledgerId, l);\n+                            l.onChanged( ledgerId, null );\n+                        }\n+                    }\n+                }\n+\n+                break;\n+            default:\n+                LOG.warn(\"Unknown type: {}\", e.getType());\n+                break;\n+            }\n+        }\n+        \n+        @Override\n+        public void registerLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+            if (null != listener) {\n+                LOG.info(\"Registered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+                if (listenerSet == null) {\n+                    Set<LedgerMetadataListener> newListenerSet = new HashSet<LedgerMetadataListener>();\n+                    Set<LedgerMetadataListener> oldListenerSet = listeners.putIfAbsent(ledgerId, newListenerSet);\n+                    if (null != oldListenerSet) {\n+                        listenerSet = oldListenerSet;\n+                    } else {\n+                        listenerSet = newListenerSet;\n+                    }\n+                }\n+                synchronized (listenerSet) {\n+                    listenerSet.add(listener);\n+                }\n+                new ReadLedgerMetadataTask(ledgerId).run();\n+            }\n+        }\n+\n+        @Override\n+        public void unregisterLedgerMetadataListener(long ledgerId, LedgerMetadataListener listener) {\n+            Set<LedgerMetadataListener> listenerSet = listeners.get(ledgerId);\n+            if (listenerSet != null) {\n+                synchronized (listenerSet) {\n+                    if (listenerSet.remove(listener)) {\n+                        LOG.info(\"Unregistered ledger metadata listener {} on ledger {}.\", listener, ledgerId);\n+                    }\n+                    if (listenerSet.isEmpty()) {\n+                        listeners.remove(ledgerId, listenerSet);\n+                    }\n+                }\n+            }\n+        }\n+\n         @Override\n         public void close() {\n             try {\n@@ -338,7 +465,7 @@ public void complete(int rc, Versioned<Value> value, Object ctx) {\n                     readCb.operationComplete(BKException.Code.OK, metadata);\n                 }\n             };\n-            ledgerTable.get(key, msCallback, ALL_FIELDS);\n+            ledgerTable.get(key, this, msCallback, ALL_FIELDS);\n         }\n \n         @Override"},{"sha":"f0d78d9ca7e2067e424d36b2b63f704c7e1763bb","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","status":"modified","additions":66,"deletions":1,"changes":67,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/meta/ZkLedgerUnderreplicationManager.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -38,6 +38,7 @@\n import org.apache.zookeeper.data.Stat;\n import org.apache.zookeeper.ZooDefs.Ids;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.protobuf.TextFormat;\n import com.google.common.base.Joiner;\n import static com.google.common.base.Charsets.UTF_8;\n@@ -50,7 +51,12 @@\n import java.util.List;\n import java.util.Collections;\n import java.util.Arrays;\n-\n+import java.util.Deque;\n+import java.util.ArrayDeque;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.ArrayList;\n \n import java.util.regex.Pattern;\n import java.util.regex.Matcher;\n@@ -210,6 +216,15 @@ private String getUrLedgerZnode(long ledgerId) {\n         return getUrLedgerZnode(urLedgerPath, ledgerId);\n     }\n \n+    @VisibleForTesting\n+    public UnderreplicatedLedgerFormat getLedgerUnreplicationInfo(long ledgerId)\n+            throws KeeperException, TextFormat.ParseException, InterruptedException {\n+        String znode = getUrLedgerZnode(ledgerId);\n+        UnderreplicatedLedgerFormat.Builder builder = UnderreplicatedLedgerFormat.newBuilder();\n+        byte[] data = zkc.getData(znode, false, null);\n+        TextFormat.merge(new String(data, UTF_8), builder);\n+        return builder.build();\n+    }\n \n     @Override\n     public void markLedgerUnderreplicated(long ledgerId, String missingReplica)\n@@ -303,6 +318,56 @@ public void markLedgerReplicated(long ledgerId) throws ReplicationException.Unav\n         }\n     }\n \n+    @Override\n+    public Iterator<Long> listLedgersToRereplicate() {\n+        final Queue<String> queue = new LinkedList<String>();\n+        queue.add(urLedgerPath);\n+\n+        return new Iterator<Long>() {\n+            final Queue<Long> curBatch = new LinkedList<Long>();\n+\n+            @Override\n+            public void remove() {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public boolean hasNext() {\n+                if (curBatch.size() > 0) {\n+                    return true;\n+                }\n+\n+                while (queue.size() > 0 && curBatch.size() == 0) {\n+                    String parent = queue.remove();\n+                    try {\n+                        for (String c : zkc.getChildren(parent,false)) {\n+                            String child = parent + \"/\" + c;\n+                            if (c.startsWith(\"urL\")) {\n+                                curBatch.add(getLedgerId(child));\n+                            } else {\n+                                queue.add(child);\n+                            }\n+                        }\n+                    } catch (InterruptedException ie) {\n+                        Thread.currentThread().interrupt();\n+                        return false;\n+                    } catch (KeeperException.NoNodeException nne) {\n+                        // ignore\n+                    } catch (Exception e) {\n+                        throw new RuntimeException(\"Error reading list\", e);\n+                    }\n+                }\n+                return curBatch.size() > 0;\n+            }\n+\n+            @Override\n+            public Long next() {\n+                assert curBatch.size() > 0;\n+                return curBatch.remove();\n+            }\n+        };\n+    }\n+\n     private long getLedgerToRereplicateFromHierarchy(String parent, long depth, Watcher w)\n             throws KeeperException, InterruptedException {\n         if (depth == 4) {"},{"sha":"008ec2372b78829d40a9a2cad0357c20d3734129","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","status":"modified","additions":38,"deletions":1,"changes":39,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/InMemoryMetastoreTable.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -91,10 +91,12 @@ public int hashCode() {\n \n     private String name;\n     private TreeMap<String, Versioned<Value>> map = null;\n+    private TreeMap<String, MetastoreWatcher> watcherMap = null;\n     private ScheduledExecutorService scheduler;\n \n     public InMemoryMetastoreTable(InMemoryMetaStore metastore, String name) {\n         this.map = new TreeMap<String, Versioned<Value>>();\n+        this.watcherMap = new TreeMap<String,MetastoreWatcher>();\n         this.name = name;\n         this.scheduler = Executors.newSingleThreadScheduledExecutor();\n     }\n@@ -138,6 +140,19 @@ public void run() {\n             }\n         });\n     }\n+    \n+    @Override\n+    public void get(final String key, final MetastoreWatcher watcher, final MetastoreCallback<Versioned<Value>> cb, final Object ctx) {\n+        scheduler.submit(new Runnable() {\n+            @Override\n+            public void run() {\n+                scheduleGet(key, ALL_FIELDS, cb, ctx);\n+                synchronized(watcherMap) {\n+                    watcherMap.put( key, watcher );\n+                }\n+            }\n+        });\n+    }\n \n     @Override\n     public void get(final String key, final Set<String> fields, final MetastoreCallback<Versioned<Value>> cb,\n@@ -176,10 +191,18 @@ public void run() {\n                 }\n                 Result<Version> result = put(key, value, version);\n                 cb.complete(result.code.getCode(), result.value, ctx);\n+                \n+                /*\n+                 * If there is a watcher set for this key, we need\n+                 * to trigger it.\n+                 */\n+                if(result.code == MSException.Code.OK){\n+                    triggerWatch(key, MSWatchedEvent.EventType.CHANGED);\n+                }\n             }\n         });\n     }\n-\n+    \n     @Override\n     public void remove(final String key, final Version version, final MetastoreCallback<Void> cb, final Object ctx) {\n         scheduler.submit(new Runnable() {\n@@ -191,6 +214,10 @@ public void run() {\n                 }\n                 Code code = remove(key, version);\n                 cb.complete(code.getCode(), null, ctx);\n+                \n+                if(code == MSException.Code.OK){\n+                    triggerWatch(key, MSWatchedEvent.EventType.REMOVED);\n+                }\n             }\n         });\n     }\n@@ -232,6 +259,16 @@ public void run() {\n         });\n     }\n \n+    private void triggerWatch(String key, MSWatchedEvent.EventType type) {\n+        synchronized(watcherMap){\n+            if(watcherMap.containsKey( key )) {\n+                MSWatchedEvent event = new MSWatchedEvent(key, type);\n+                watcherMap.get( key ).process( event );\n+                watcherMap.remove( key );\n+            }\n+        }\n+    }\n+    \n     private synchronized Versioned<Value> get(String key) {\n         return map.get(key);\n     }"},{"sha":"182387877f5ed058e018f9127a5d60364010b95a","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MSWatchedEvent.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -0,0 +1,38 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+public class MSWatchedEvent {\n+    public enum EventType {CHANGED, REMOVED};\n+    \n+    String key;\n+    EventType type;\n+    \n+    public MSWatchedEvent(String key, EventType type) {\n+        this.key = key;\n+        this.type = type;\n+    }\n+    \n+    public EventType getType() {\n+        return type;\n+    }\n+    \n+    public String getKey(){\n+        return key;\n+    }\n+}"},{"sha":"735931e92fc3a7a6884a393b442d5a7d0cfdc2ed","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreTable.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -55,6 +55,27 @@\n      */\n     public void get(String key, MetastoreCallback<Versioned<Value>> cb, Object ctx);\n \n+    /**\n+     * Get all fields of a key.\n+     *\n+     * <p>\n+     * Return Code:<ul>\n+     * <li>{@link MSException.Code.OK}: success returning the key</li>\n+     * <li>{@link MSException.Code.NoKey}: no key found</li>\n+     * <li>{@link MSException.Code.IllegalOp}/{@link MSException.Code.ServiceDown}: other issues</li>\n+     * </ul></p>\n+     *\n+     * @param key\n+     *          Key Name\n+     * @param watcher\n+     *          Watcher object to receive notifications\n+     * @param cb\n+     *          Callback to return all fields of the key\n+     * @param ctx\n+     *          Callback context\n+     */\n+    public void get(String key, MetastoreWatcher watcher, MetastoreCallback<Versioned<Value>> cb, Object ctx);\n+    \n     /**\n      * Get specified fields of a key.\n      *"},{"sha":"4c6ebc9bcee6e05b1e44978dde051cb2b84f21f8","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","status":"added","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/metastore/MetastoreWatcher.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -0,0 +1,22 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.bookkeeper.metastore;\n+\n+public interface MetastoreWatcher {\n+    public void process(MSWatchedEvent e);\n+}"},{"sha":"1c3458600ab25309456408c5ee81f7c078d3bd3c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","status":"modified","additions":21,"deletions":14,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookieClient.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -21,29 +21,34 @@\n  *\n  */\n \n-import java.util.Set;\n-import java.util.HashSet;\n+import static com.google.common.base.Charsets.UTF_8;\n+\n import java.io.IOException;\n import java.net.InetSocketAddress;\n+import java.util.HashSet;\n+import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.atomic.AtomicLong;\n-import org.apache.bookkeeper.conf.ClientConfiguration;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n import org.apache.bookkeeper.client.BKException;\n-import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n+import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.ReadEntryCallback;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.WriteCallback;\n import org.apache.bookkeeper.util.OrderedSafeExecutor;\n import org.apache.bookkeeper.util.SafeRunnable;\n-\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.jboss.netty.buffer.ChannelBuffers;\n import org.jboss.netty.channel.socket.ClientSocketChannelFactory;\n import org.jboss.netty.channel.socket.nio.NioClientSocketChannelFactory;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n /**\n  * Implements the client-side part of the BookKeeper protocol.\n  *\n@@ -52,15 +57,16 @@\n     static final Logger LOG = LoggerFactory.getLogger(BookieClient.class);\n \n     // This is global state that should be across all BookieClients\n-    AtomicLong totalBytesOutstanding = new AtomicLong();\n-\n-    OrderedSafeExecutor executor;\n-    ClientSocketChannelFactory channelFactory;\n-    ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient> channels = new ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient>();\n+    final AtomicLong totalBytesOutstanding = new AtomicLong();\n \n+    final OrderedSafeExecutor executor;\n+    final ClientSocketChannelFactory channelFactory;\n+    final ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient> channels =\n+        new ConcurrentHashMap<InetSocketAddress, PerChannelBookieClient>();\n+    final ScheduledExecutorService timeoutExecutor = Executors.newSingleThreadScheduledExecutor();\n     private final ClientConfiguration conf;\n     private volatile boolean closed;\n-    private ReentrantReadWriteLock closeLock;\n+    private final ReentrantReadWriteLock closeLock;\n \n     public BookieClient(ClientConfiguration conf, ClientSocketChannelFactory channelFactory, OrderedSafeExecutor executor) {\n         this.conf = conf;\n@@ -79,7 +85,8 @@ public PerChannelBookieClient lookupClient(InetSocketAddress addr) {\n                 if (closed) {\n                     return null;\n                 }\n-                channel = new PerChannelBookieClient(conf, executor, channelFactory, addr, totalBytesOutstanding);\n+                channel = new PerChannelBookieClient(conf, executor, channelFactory, addr, totalBytesOutstanding,\n+                        timeoutExecutor);\n                 PerChannelBookieClient prevChannel = channels.putIfAbsent(addr, channel);\n                 if (prevChannel != null) {\n                     channel = prevChannel;"},{"sha":"09f2eccb1b99f09d0ed7f7587608ac1d62802db4","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/BookkeeperInternalCallbacks.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -25,6 +25,7 @@\n import java.util.concurrent.LinkedBlockingQueue;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.zookeeper.AsyncCallback;\n import org.jboss.netty.buffer.ChannelBuffer;\n import org.slf4j.Logger;\n@@ -45,6 +46,21 @@\n      *\n      */\n \n+    /**\n+     * Listener on ledger metadata changes.\n+     */\n+    public interface LedgerMetadataListener {\n+        /**\n+         * Triggered each time ledger metadata changed.\n+         *\n+         * @param ledgerId\n+         *          ledger id.\n+         * @param metadata\n+         *          new ledger metadata.\n+         */\n+        void onChanged(long ledgerId, LedgerMetadata metadata);\n+    }\n+\n     public interface WriteCallback {\n         void writeComplete(int rc, long ledgerId, long entryId, InetSocketAddress addr, Object ctx);\n     }"},{"sha":"99658df26d5f7d794984bb756cb1e136df89a894","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","status":"modified","additions":15,"deletions":9,"changes":24,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/NIOServerFactory.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -513,17 +513,23 @@ private void sendBuffers(ByteBuffer bb[]) {\n             makeWritable(sk);\n         }\n \n-        synchronized public void sendResponse(ByteBuffer... bb) {\n-            if (closed) {\n-                return;\n+        public void sendResponse(ByteBuffer... bb) {\n+            synchronized (this) {\n+                if (closed) {\n+                    return;\n+                }\n+                sendBuffers(bb);\n+                outstandingRequests--;\n             }\n-            sendBuffers(bb);\n+            // acquire these monitors in order to avoid deadlock during shutdown\n+            // it doesn't matter much whether we do this synchronusly with sendBuffers, as long as it happens\n             synchronized (NIOServerFactory.this) {\n-                outstandingRequests--;\n-                // check throttling\n-                if (outstandingRequests < outstandingLimit) {\n-                    sk.selector().wakeup();\n-                    enableRecv();\n+                synchronized (this) {\n+                    // check throttling\n+                    if (outstandingRequests < outstandingLimit) {\n+                        sk.selector().wakeup();\n+                        enableRecv();\n+                    }\n                 }\n             }\n         }"},{"sha":"df48c9758dac4c7830cf2a104fae655d9ecb4959","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","status":"modified","additions":108,"deletions":43,"changes":151,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/proto/PerChannelBookieClient.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -19,15 +19,14 @@\n \n import java.io.IOException;\n import java.net.InetSocketAddress;\n+import java.nio.channels.ClosedChannelException;\n import java.util.ArrayDeque;\n-import java.util.Set;\n-import java.util.Collections;\n import java.util.Queue;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.Semaphore;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n \n-import com.google.common.collect.ImmutableSet;\n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n import org.apache.bookkeeper.proto.BookieProtocol.PacketHeader;\n@@ -56,10 +55,7 @@\n import org.jboss.netty.handler.codec.frame.CorruptedFrameException;\n import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;\n import org.jboss.netty.handler.codec.frame.TooLongFrameException;\n-import org.jboss.netty.handler.timeout.ReadTimeoutException;\n import org.jboss.netty.handler.timeout.ReadTimeoutHandler;\n-import org.jboss.netty.util.HashedWheelTimer;\n-import org.jboss.netty.util.Timer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -81,6 +77,7 @@\n     AtomicLong totalBytesOutstanding;\n     ClientSocketChannelFactory channelFactory;\n     OrderedSafeExecutor executor;\n+    ScheduledExecutorService timeoutExecutor;\n \n     ConcurrentHashMap<CompletionKey, AddCompletion> addCompletions = new ConcurrentHashMap<CompletionKey, AddCompletion>();\n     ConcurrentHashMap<CompletionKey, ReadCompletion> readCompletions = new ConcurrentHashMap<CompletionKey, ReadCompletion>();\n@@ -92,26 +89,77 @@\n     Queue<GenericCallback<Void>> pendingOps = new ArrayDeque<GenericCallback<Void>>();\n     volatile Channel channel = null;\n \n+    private class TimeoutTask implements Runnable {\n+        @Override\n+        public void run() {\n+            errorOutTimedOutEntries();\n+        }\n+    }\n+\n     enum ConnectionState {\n         DISCONNECTED, CONNECTING, CONNECTED, CLOSED\n-            };\n+    };\n \n     volatile ConnectionState state;\n     private final ClientConfiguration conf;\n \n+    /**\n+     * Error out any entries that have timed out.\n+     */\n+    private void errorOutTimedOutEntries() {\n+        int numAdd = 0, numRead = 0;\n+        int total = 0;\n+        try {\n+            for (CompletionKey key : addCompletions.keySet()) {\n+                total++;\n+                if (key.shouldTimeout(conf.getAddEntryTimeout() * 1000)) {\n+                    errorOutAddKey(key);\n+                    numAdd++;\n+                }\n+            }\n+            for (CompletionKey key : readCompletions.keySet()) {\n+                total++;\n+                if (key.shouldTimeout(conf.getReadEntryTimeout() * 1000)) {\n+                    errorOutReadKey(key);\n+                    numRead++;\n+                }\n+            }\n+        } catch (Throwable t) {\n+            LOG.error(\"Caught RuntimeException while erroring out timed out entries : \", t);\n+        }\n+        if (numAdd + numRead > 0) {\n+            LOG.info(\"Timeout task iterated through a total of {} keys.\", total);\n+            LOG.info(\"Timeout Task errored out {} add entry requests.\", numAdd);\n+            LOG.info(\"Timeout Task errored out {} read entry requests.\", numRead);\n+        }\n+    }\n+\n     public PerChannelBookieClient(OrderedSafeExecutor executor, ClientSocketChannelFactory channelFactory,\n-                                  InetSocketAddress addr, AtomicLong totalBytesOutstanding) {\n-        this(new ClientConfiguration(), executor, channelFactory, addr, totalBytesOutstanding);\n+                                  InetSocketAddress addr, AtomicLong totalBytesOutstanding,\n+                                  ScheduledExecutorService timeoutExecutor) {\n+        this(new ClientConfiguration(), executor, channelFactory, addr, totalBytesOutstanding, timeoutExecutor);\n     }\n-            \n-    public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor executor, ClientSocketChannelFactory channelFactory,\n+\n+    public PerChannelBookieClient(OrderedSafeExecutor executor, ClientSocketChannelFactory channelFactory,\n                                   InetSocketAddress addr, AtomicLong totalBytesOutstanding) {\n+        this(new ClientConfiguration(), executor, channelFactory, addr, totalBytesOutstanding, null);\n+    }\n+\n+    public PerChannelBookieClient(ClientConfiguration conf, OrderedSafeExecutor executor,\n+                                  ClientSocketChannelFactory channelFactory, InetSocketAddress addr,\n+                                  AtomicLong totalBytesOutstanding, ScheduledExecutorService timeoutExecutor) {\n         this.conf = conf;\n         this.addr = addr;\n         this.executor = executor;\n         this.totalBytesOutstanding = totalBytesOutstanding;\n         this.channelFactory = channelFactory;\n         this.state = ConnectionState.DISCONNECTED;\n+        this.timeoutExecutor = timeoutExecutor;\n+        // scheudle the timeout task\n+        if (null != this.timeoutExecutor) {\n+            this.timeoutExecutor.scheduleWithFixedDelay(new TimeoutTask(), conf.getTimeoutTaskIntervalMillis(),\n+                    conf.getTimeoutTaskIntervalMillis(), TimeUnit.MILLISECONDS);\n+        }\n     }\n \n     private void connect() {\n@@ -151,8 +199,9 @@ public void operationComplete(ChannelFuture future) throws Exception {\n                         closeChannel(future.getChannel());\n                         return; // pendingOps should have been completed when other channel connected\n                     } else {\n-                        LOG.error(\"Could not connect to bookie: {}, current state {}\",\n-                                  future.getChannel(), state);\n+                        LOG.error(\"Could not connect to bookie: {}/{}, current state {} : \",\n+                                  new Object[] { future.getChannel(), addr,\n+                                                 state, future.getCause() });\n                         rc = BKException.Code.BookieHandleNotAvailableException;\n                         closeChannel(future.getChannel());\n                         channel = null;\n@@ -227,11 +276,10 @@ void connectIfNeededAndDoOp(GenericCallback<Void> op) {\n      * @param ledgerId\n      * @param masterKey\n      * @param entryId\n-     * @param lastConfirmed\n-     * @param macCode\n-     * @param data\n+     * @param toSend\n      * @param cb\n      * @param ctx\n+     * @param options\n      */\n     void addEntry(final long ledgerId, byte[] masterKey, final long entryId, ChannelBuffer toSend, WriteCallback cb,\n                   Object ctx, final int options) {\n@@ -255,17 +303,26 @@ void addEntry(final long ledgerId, byte[] masterKey, final long entryId, Channel\n \n             ChannelBuffer wrappedBuffer = ChannelBuffers.wrappedBuffer(header, toSend);\n \n-            ChannelFuture future = channel.write(wrappedBuffer);\n+            final Channel c = channel;\n+            if (c == null) {\n+                errorOutReadKey(completionKey);\n+                return;\n+            }\n+            ChannelFuture future = c.write(wrappedBuffer);\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"Successfully wrote request for adding entry: \" + entryId + \" ledger-id: \" + ledgerId\n-                                                            + \" bookie: \" + channel.getRemoteAddress() + \" entry length: \" + entrySize);\n+                                                            + \" bookie: \" + c.getRemoteAddress() + \" entry length: \" + entrySize);\n                         }\n                         // totalBytesOutstanding.addAndGet(entrySize);\n                     } else {\n+                        if (!(future.getCause() instanceof ClosedChannelException)) {\n+                            LOG.warn(\"Writing addEntry(lid={}, eid={}) to channel {} failed : \",\n+                                    new Object[] { ledgerId, entryId, c, future.getCause() });\n+                        }\n                         errorOutAddKey(completionKey);\n                     }\n                 }\n@@ -298,16 +355,25 @@ public void readEntryAndFenceLedger(final long ledgerId, byte[] masterKey,\n         tmpEntry.writeLong(entryId);\n         tmpEntry.writeBytes(masterKey, 0, BookieProtocol.MASTER_KEY_LENGTH);\n \n-        ChannelFuture future = channel.write(tmpEntry);\n+        final Channel c = channel;\n+        if (c == null) {\n+            errorOutReadKey(key);\n+            return;\n+        }\n+        ChannelFuture future = c.write(tmpEntry);\n         future.addListener(new ChannelFutureListener() {\n             @Override\n             public void operationComplete(ChannelFuture future) throws Exception {\n                 if (future.isSuccess()) {\n                     if (LOG.isDebugEnabled()) {\n                         LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n-                                  + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+                                  + ledgerId + \" bookie: \" + c.getRemoteAddress());\n                     }\n                 } else {\n+                    if (!(future.getCause() instanceof ClosedChannelException)) {\n+                        LOG.warn(\"Writing readEntryAndFenceLedger(lid={}, eid={}) to channel {} failed : \",\n+                                new Object[] { ledgerId, entryId, c, future.getCause() });\n+                    }\n                     errorOutReadKey(key);\n                 }\n             }\n@@ -332,16 +398,25 @@ public void readEntry(final long ledgerId, final long entryId, ReadEntryCallback\n             tmpEntry.writeLong(ledgerId);\n             tmpEntry.writeLong(entryId);\n \n-            ChannelFuture future = channel.write(tmpEntry);\n+            final Channel c = channel;\n+            if (c == null) {\n+                errorOutReadKey(key);\n+                return;\n+            }\n+            ChannelFuture future = c.write(tmpEntry);\n             future.addListener(new ChannelFutureListener() {\n                 @Override\n                 public void operationComplete(ChannelFuture future) throws Exception {\n                     if (future.isSuccess()) {\n                         if (LOG.isDebugEnabled()) {\n                             LOG.debug(\"Successfully wrote request for reading entry: \" + entryId + \" ledger-id: \"\n-                                                            + ledgerId + \" bookie: \" + channel.getRemoteAddress());\n+                                                            + ledgerId + \" bookie: \" + c.getRemoteAddress());\n                         }\n                     } else {\n+                        if (!(future.getCause() instanceof ClosedChannelException)) {\n+                            LOG.warn(\"Writing readEntry(lid={}, eid={}) to channel {} failed : \",\n+                                    new Object[] { ledgerId, entryId, c, future.getCause() });\n+                        }\n                         errorOutReadKey(key);\n                     }\n                 }\n@@ -477,8 +552,6 @@ void errorOutOutstandingEntries() {\n     public ChannelPipeline getPipeline() throws Exception {\n         ChannelPipeline pipeline = Channels.pipeline();\n \n-        pipeline.addLast(\"readTimeout\", new ReadTimeoutHandler(new HashedWheelTimer(),\n-                                                               conf.getReadTimeout()));\n         pipeline.addLast(\"lengthbasedframedecoder\", new LengthFieldBasedFrameDecoder(MAX_FRAME_LENGTH, 0, 4, 0, 4));\n         pipeline.addLast(\"mainhandler\", this);\n         return pipeline;\n@@ -520,19 +593,6 @@ public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws\n                       e.getChannel().getRemoteAddress());\n             return;\n         }\n-        if (t instanceof ReadTimeoutException) {\n-            for (CompletionKey key : addCompletions.keySet()) {\n-                if (key.shouldTimeout()) {\n-                    errorOutAddKey(key);\n-                }\n-            }\n-            for (CompletionKey key : readCompletions.keySet()) {\n-                if (key.shouldTimeout()) {\n-                    errorOutReadKey(key);\n-                }\n-            }\n-            return;\n-        }\n \n         if (t instanceof IOException) {\n             // these are thrown when a bookie fails, logging them just pollutes\n@@ -721,15 +781,15 @@ CompletionKey newCompletionKey(long ledgerId, long entryId) {\n     }\n \n     // visable for testing\n-    class CompletionKey {\n+    static class CompletionKey {\n         long ledgerId;\n         long entryId;\n-        final long timeoutAt;\n+        final long requestAt;\n \n         CompletionKey(long ledgerId, long entryId) {\n             this.ledgerId = ledgerId;\n             this.entryId = entryId;\n-            this.timeoutAt = MathUtils.now() + (conf.getReadTimeout()*1000);\n+            this.requestAt = MathUtils.nowInNano();\n         }\n \n         @Override\n@@ -746,12 +806,17 @@ public int hashCode() {\n             return ((int) ledgerId << 16) ^ ((int) entryId);\n         }\n \n+        @Override\n         public String toString() {\n             return String.format(\"LedgerEntry(%d, %d)\", ledgerId, entryId);\n         }\n \n-        public boolean shouldTimeout() {\n-            return this.timeoutAt <= MathUtils.now();\n+        public boolean shouldTimeout(long timeout) {\n+            return elapsedTime() >= timeout;\n+        }\n+\n+        public long elapsedTime() {\n+            return MathUtils.elapsedMSec(requestAt);\n         }\n     }\n "},{"sha":"2c62996d37fff8c2673b5354438ede62e3e3693d","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","status":"modified","additions":115,"deletions":65,"changes":180,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/Auditor.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -27,6 +27,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledExecutorService;\n@@ -62,6 +63,8 @@\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.commons.collections.CollectionUtils;\n import com.google.common.collect.Sets;\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.util.concurrent.SettableFuture;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.ZooKeeper;\n@@ -86,10 +89,13 @@\n     private LedgerUnderreplicationManager ledgerUnderreplicationManager;\n     private final ScheduledExecutorService executor;\n     private List<String> knownBookies = new ArrayList<String>();\n+    private final String bookieIdentifier;\n \n     public Auditor(final String bookieIdentifier, ServerConfiguration conf,\n                    ZooKeeper zkc) throws UnavailableException {\n         this.conf = conf;\n+        this.bookieIdentifier = bookieIdentifier;\n+\n         initialize(conf, zkc);\n \n         executor = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n@@ -146,51 +152,54 @@ public void run() {\n         }\n     }\n \n-    private synchronized void submitAuditTask() {\n-        synchronized (this) {\n-            if (executor.isShutdown()) {\n-                return;\n-            }\n-            executor.submit(new Runnable() {\n-                    public void run() {\n-                        try {\n-                            waitIfLedgerReplicationDisabled();\n-\n-                            List<String> availableBookies = getAvailableBookies();\n-\n-                            // casting to String, as knownBookies and availableBookies\n-                            // contains only String values\n-                            // find new bookies(if any) and update the known bookie list\n-                            Collection<String> newBookies = CollectionUtils.subtract(\n-                                    availableBookies, knownBookies);\n-                            knownBookies.addAll(newBookies);\n-\n-                            // find lost bookies(if any)\n-                            Collection<String> lostBookies = CollectionUtils.subtract(\n-                                    knownBookies, availableBookies);\n-\n-                            if (lostBookies.size() > 0) {\n-                                knownBookies.removeAll(lostBookies);\n-                                Map<String, Set<Long>> ledgerDetails = generateBookie2LedgersIndex();\n-                                handleLostBookies(lostBookies, ledgerDetails);\n-                            }\n-                        } catch (BKException bke) {\n-                            LOG.error(\"Exception getting bookie list\", bke);\n-                        } catch (InterruptedException ie) {\n-                            Thread.currentThread().interrupt();\n-                            LOG.error(\"Interrupted while watching available bookies \", ie);\n-                        } catch (BKAuditException bke) {\n-                            LOG.error(\"Exception while watching available bookies\", bke);\n-                        } catch (UnavailableException ue) {\n-                            LOG.error(\"Exception while watching available bookies\", ue);\n+    @VisibleForTesting\n+    synchronized Future<?> submitAuditTask() {\n+        if (executor.isShutdown()) {\n+            SettableFuture<Void> f = SettableFuture.<Void>create();\n+            f.setException(new BKAuditException(\"Auditor shutting down\"));\n+            return f;\n+        }\n+        return executor.submit(new Runnable() {\n+                public void run() {\n+                    try {\n+                        waitIfLedgerReplicationDisabled();\n+\n+                        List<String> availableBookies = getAvailableBookies();\n+\n+                        // casting to String, as knownBookies and availableBookies\n+                        // contains only String values\n+                        // find new bookies(if any) and update the known bookie list\n+                        Collection<String> newBookies = CollectionUtils.subtract(\n+                                availableBookies, knownBookies);\n+                        knownBookies.addAll(newBookies);\n+\n+                        // find lost bookies(if any)\n+                        Collection<String> lostBookies = CollectionUtils.subtract(\n+                                knownBookies, availableBookies);\n+\n+                        if (lostBookies.size() > 0) {\n+                            knownBookies.removeAll(lostBookies);\n+\n+                            auditBookies();\n                         }\n+                    } catch (BKException bke) {\n+                        LOG.error(\"Exception getting bookie list\", bke);\n+                    } catch (InterruptedException ie) {\n+                        Thread.currentThread().interrupt();\n+                        LOG.error(\"Interrupted while watching available bookies \", ie);\n+                    } catch (BKAuditException bke) {\n+                        LOG.error(\"Exception while watching available bookies\", bke);\n+                    } catch (UnavailableException ue) {\n+                        LOG.error(\"Exception while watching available bookies\", ue);\n+                    } catch (KeeperException ke) {\n+                        LOG.error(\"Exception reading bookie list\", ke);\n                     }\n-                });\n-        }\n+                }\n+            });\n     }\n \n     public void start() {\n-        LOG.info(\"I'm starting as Auditor Bookie\");\n+        LOG.info(\"I'm starting as Auditor Bookie. ID: {}\", bookieIdentifier);\n         // on startup watching available bookie and based on the\n         // available bookies determining the bookie failures.\n         synchronized (this) {\n@@ -199,8 +208,10 @@ public void start() {\n             }\n \n             long interval = conf.getAuditorPeriodicCheckInterval();\n+\n             if (interval > 0) {\n-                LOG.info(\"Periodic checking enabled\");\n+                LOG.info(\"Auditor periodic ledger checking enabled\"\n+                         + \" 'auditorPeriodicCheckInterval' {} seconds\", interval);\n                 executor.scheduleAtFixedRate(new Runnable() {\n                         public void run() {\n                             LOG.info(\"Running periodic check\");\n@@ -228,32 +239,26 @@ public void run() {\n                                           +\"running periodic check\", ue);\n                             }\n                         }\n-                    }, interval, interval, TimeUnit.MILLISECONDS);\n+                    }, interval, interval, TimeUnit.SECONDS);\n             } else {\n                 LOG.info(\"Periodic checking disabled\");\n             }\n+            try {\n+                knownBookies = getAvailableBookies();\n+            } catch (BKException bke) {\n+                LOG.error(\"Couldn't get bookie list, exiting\", bke);\n+                submitShutdownTask();\n+            }\n \n-            executor.submit(new Runnable() {\n-                    public void run() {\n-                        try {\n-                            knownBookies = getAvailableBookies();\n-                            auditingBookies(knownBookies);\n-                        } catch (BKException bke) {\n-                            LOG.error(\"Exception getting bookie list\", bke);\n-                            submitShutdownTask();\n-                        } catch (KeeperException ke) {\n-                            LOG.error(\"Exception while watching available bookies\", ke);\n-                            submitShutdownTask();\n-                        } catch (InterruptedException ie) {\n-                            Thread.currentThread().interrupt();\n-                            LOG.error(\"Interrupted while watching available bookies \", ie);\n-                            submitShutdownTask();\n-                        } catch (BKAuditException bke) {\n-                            LOG.error(\"Exception while watching available bookies\", bke);\n-                            submitShutdownTask();\n-                        }\n-                    }\n-                });\n+            long bookieCheckInterval = conf.getAuditorPeriodicBookieCheckInterval();\n+            if (bookieCheckInterval == 0) {\n+                LOG.info(\"Auditor periodic bookie checking disabled, running once check now anyhow\");\n+                executor.submit(BOOKIE_CHECK);\n+            } else {\n+                LOG.info(\"Auditor periodic bookie checking enabled\"\n+                         + \" 'auditorPeriodicBookieCheckInterval' {} seconds\", bookieCheckInterval);\n+                executor.scheduleAtFixedRate(BOOKIE_CHECK, 0, bookieCheckInterval, TimeUnit.SECONDS);\n+            }\n         }\n     }\n \n@@ -282,11 +287,34 @@ private void waitIfLedgerReplicationDisabled() throws UnavailableException,\n         return availableBookies;\n     }\n \n-    private void auditingBookies(List<String> availableBookies)\n-            throws BKAuditException, KeeperException, InterruptedException {\n+    @SuppressWarnings(\"unchecked\")\n+    private void auditBookies()\n+            throws BKAuditException, KeeperException,\n+            InterruptedException, BKException {\n+        try {\n+            waitIfLedgerReplicationDisabled();\n+        } catch (UnavailableException ue) {\n+            LOG.error(\"Underreplication unavailable, skipping audit.\"\n+                      + \"Will retry after a period\");\n+            return;\n+        }\n \n+        // put exit cases here\n         Map<String, Set<Long>> ledgerDetails = generateBookie2LedgersIndex();\n+        try {\n+            if (!ledgerUnderreplicationManager.isLedgerReplicationEnabled()) {\n+                // has been disabled while we were generating the index\n+                // discard this run, and schedule a new one\n+                executor.submit(BOOKIE_CHECK);\n+                return;\n+            }\n+        } catch (UnavailableException ue) {\n+            LOG.error(\"Underreplication unavailable, skipping audit.\"\n+                      + \"Will retry after a period\");\n+            return;\n+        }\n \n+        List<String> availableBookies = getAvailableBookies();\n         // find lost bookies\n         Set<String> knownBookies = ledgerDetails.keySet();\n         Collection<String> lostBookies = CollectionUtils.subtract(knownBookies,\n@@ -512,4 +540,26 @@ public void shutdown() {\n     public boolean isRunning() {\n         return !executor.isShutdown();\n     }\n+\n+    private final Runnable BOOKIE_CHECK = new Runnable() {\n+            public void run() {\n+                try {\n+                    auditBookies();\n+                } catch (BKException bke) {\n+                    LOG.error(\"Couldn't get bookie list, exiting\", bke);\n+                    submitShutdownTask();\n+                } catch (KeeperException ke) {\n+                    LOG.error(\"Exception while watching available bookies\", ke);\n+                    submitShutdownTask();\n+                } catch (InterruptedException ie) {\n+                    Thread.currentThread().interrupt();\n+                    LOG.error(\"Interrupted while watching available bookies \", ie);\n+                    submitShutdownTask();\n+                } catch (BKAuditException bke) {\n+                    LOG.error(\"Exception while watching available bookies\", bke);\n+                    submitShutdownTask();\n+                }\n+            }\n+        };\n+\n }"},{"sha":"3f5e16431d8a6a2281293aaa53ec64985169408b","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","status":"modified","additions":34,"deletions":1,"changes":35,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AuditorElector.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -24,6 +24,8 @@\n import java.util.Comparator;\n import java.util.List;\n import java.io.Serializable;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n \n import org.apache.bookkeeper.proto.DataFormats.AuditorVoteFormat;\n import com.google.common.annotations.VisibleForTesting;\n@@ -68,6 +70,7 @@\n     private static final String VOTE_PREFIX = \"V_\";\n     // Represents path Separator\n     private static final String PATH_SEPARATOR = \"/\";\n+    private static final String ELECTION_ZNODE = \"auditorelection\";\n     // Represents urLedger path in zk\n     private final String basePath;\n     // Represents auditor election path in zk\n@@ -102,7 +105,7 @@ public AuditorElector(final String bookieId, ServerConfiguration conf,\n         this.zkc = zkc;\n         basePath = conf.getZkLedgersRootPath() + '/'\n                 + BookKeeperConstants.UNDER_REPLICATION_NODE;\n-        electionPath = basePath + \"/auditorelection\";\n+        electionPath = basePath + '/' + ELECTION_ZNODE;\n         createElectorPath();\n         executor = Executors.newSingleThreadExecutor(new ThreadFactory() {\n                 @Override\n@@ -269,6 +272,36 @@ public void run() {\n         executor.submit(r);\n     }\n \n+    @VisibleForTesting\n+    Auditor getAuditor() {\n+        return auditor;\n+    }\n+\n+    /**\n+     * Query zookeeper for the currently elected auditor\n+     * @return the bookie id of the current auditor\n+     */\n+    public static InetSocketAddress getCurrentAuditor(ServerConfiguration conf, ZooKeeper zk)\n+            throws KeeperException, InterruptedException, IOException {\n+        String electionRoot = conf.getZkLedgersRootPath() + '/'\n+            + BookKeeperConstants.UNDER_REPLICATION_NODE + '/' + ELECTION_ZNODE;\n+\n+        List<String> children = zk.getChildren(electionRoot, false);\n+        Collections.sort(children, new AuditorElector.ElectionComparator());\n+        if (children.size() < 1) {\n+            return null;\n+        }\n+        String ledger = electionRoot + \"/\" + children.get(AUDITOR_INDEX);\n+        byte[] data = zk.getData(ledger, false, null);\n+\n+        AuditorVoteFormat.Builder builder = AuditorVoteFormat.newBuilder();\n+        TextFormat.merge(new String(data, UTF_8), builder);\n+        AuditorVoteFormat v = builder.build();\n+        String[] parts = v.getBookieId().split(\":\");\n+        return new InetSocketAddress(parts[0],\n+                                       Integer.valueOf(parts[1]));\n+    }\n+\n     /**\n      * Shutting down AuditorElector\n      */"},{"sha":"e9596fec2da9bf81b2d05a5199f193b4bc355d01","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/AutoRecoveryMain.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -24,6 +24,8 @@\n import java.io.IOException;\n import java.net.MalformedURLException;\n \n+import com.google.common.annotations.VisibleForTesting;\n+\n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.ExitCode;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n@@ -140,6 +142,11 @@ private int getExitCode() {\n         return exitCode;\n     }\n \n+    @VisibleForTesting\n+    public Auditor getAuditor() {\n+        return auditorElector.getAuditor();\n+    }\n+\n     /** Is auto-recovery service running? */\n     public boolean isAutoRecoveryRunning() {\n         return running;\n@@ -170,7 +177,7 @@ public void run() {\n                 // If any one service not running, then shutdown peer.\n                 if (!autoRecoveryMain.auditorElector.isRunning()\n                     || !autoRecoveryMain.replicationWorker.isRunning()) {\n-                    autoRecoveryMain.shutdown();\n+                    autoRecoveryMain.shutdown(ExitCode.SERVER_EXCEPTION);\n                     break;\n                 }\n             }"},{"sha":"a6524f069bbfa84c1c111241d07d5a53eeb34dd1","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/BookieLedgerIndexer.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -54,7 +54,7 @@ public BookieLedgerIndexer(LedgerManager ledgerManager) {\n     /**\n      * Generating bookie vs its ledgers map by reading all the ledgers in each\n      * bookie and parsing its metadata.\n-     * \n+     *\n      * @return bookie2ledgersMap map of bookie vs ledgers\n      * @throws BKAuditException\n      *             exception while getting bookie-ledgers"},{"sha":"32a03e224e78c44f4d69e3c18e4f1b96b2c21374","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationException.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -70,5 +70,9 @@ public CompatibilityException(String message) {\n         BKAuditException(String message, Throwable cause) {\n             super(message, cause);\n         }\n+\n+        BKAuditException(String message) {\n+            super(message);\n+        }\n     }\n }"},{"sha":"6584e2a5cfe6f9fa9491c36c708ea184007b63f9","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","status":"modified","additions":48,"deletions":1,"changes":49,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/replication/ReplicationWorker.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -25,6 +25,9 @@\n import java.util.Set;\n import java.util.Timer;\n import java.util.TimerTask;\n+import java.util.SortedMap;\n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.concurrent.CountDownLatch;\n \n import org.apache.bookkeeper.client.BKException;\n@@ -33,6 +36,7 @@\n import org.apache.bookkeeper.client.LedgerChecker;\n import org.apache.bookkeeper.client.LedgerFragment;\n import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.client.BKException.BKBookieHandleNotAvailableException;\n import org.apache.bookkeeper.client.BKException.BKNoSuchLedgerExistsException;\n import org.apache.bookkeeper.client.BKException.BKReadException;\n@@ -195,7 +199,7 @@ private void rereplicate() throws InterruptedException, BKException,\n             }\n         }\n \n-        if (foundOpenFragments) {\n+        if (foundOpenFragments || isLastSegmentOpenAndMissingBookies(lh)) {\n             deferLedgerLockRelease(ledgerIdToReplicate);\n             return;\n         }\n@@ -213,6 +217,45 @@ private void rereplicate() throws InterruptedException, BKException,\n         }\n     }\n \n+    /**\n+     * When checking the fragments of a ledger, there is a corner case\n+     * where if the last segment/ensemble is open, but nothing has been written to\n+     * some of the quorums in the ensemble, bookies can fail without any action being\n+     * taken. This is fine, until enough bookies fail to cause a quorum to become\n+     * unavailable, by which time the ledger is unrecoverable.\n+     *\n+     * For example, if in a E3Q2, only 1 entry is written and the last bookie\n+     * in the ensemble fails, nothing has been written to it, so nothing needs to be\n+     * recovered. But if the second to last bookie fails, we've now lost quorum for\n+     * the second entry, so it's impossible to see if the second has been written or\n+     * not.\n+     *\n+     * To avoid this situation, we need to check if bookies in the final open ensemble\n+     * are unavailable, and take action if so. The action to take is to close the ledger,\n+     * after a grace period as the writting client may replace the faulty bookie on its\n+     * own.\n+     *\n+     * Missing bookies in closed ledgers are fine, as we know the last confirmed add, so\n+     * we can tell which entries are supposed to exist and rereplicate them if necessary.\n+     */\n+    private boolean isLastSegmentOpenAndMissingBookies(LedgerHandle lh) throws BKException {\n+        LedgerMetadata md = admin.getLedgerMetadata(lh);\n+        if (md.isClosed()) {\n+            return false;\n+        }\n+\n+        SortedMap<Long, ArrayList<InetSocketAddress>> ensembles\n+            = admin.getLedgerMetadata(lh).getEnsembles();\n+        ArrayList<InetSocketAddress> finalEnsemble = ensembles.get(ensembles.lastKey());\n+        Collection<InetSocketAddress> available = admin.getAvailableBookies();\n+        for (InetSocketAddress b : finalEnsemble) {\n+            if (!available.contains(b)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n     /** Gets the under replicated fragments */\n     private Set<LedgerFragment> getUnderreplicatedFragments(LedgerHandle lh)\n             throws InterruptedException {\n@@ -235,6 +278,10 @@ public void run() {\n                 LedgerHandle lh = null;\n                 try {\n                     lh = admin.openLedgerNoRecovery(ledgerId);\n+                    if (isLastSegmentOpenAndMissingBookies(lh)) {\n+                        lh = admin.openLedger(ledgerId);\n+                    }\n+\n                     Set<LedgerFragment> fragments = getUnderreplicatedFragments(lh);\n                     for (LedgerFragment fragment : fragments) {\n                         if (!fragment.isClosed()) {"},{"sha":"32571fa59f8d7c7715d6b2bc8459c8a45b33a99c","filename":"bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/java/org/apache/bookkeeper/util/MathUtils.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -48,4 +48,29 @@ public static long now() {\n         return System.nanoTime() / NANOSECONDS_PER_MILLISECOND;\n     }\n \n+    /**\n+     * Current time from some arbitrary time base in the past, counting in\n+     * nanoseconds, and not affected by settimeofday or similar system clock\n+     * changes. This is appropriate to use when computing how much longer to\n+     * wait for an interval to expire.\n+     *\n+     * NOTE: only use it for measuring.\n+     * http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/System.html#nanoTime%28%29\n+     *\n+     * @return current time in nanoseconds.\n+     */\n+    public static long nowInNano() {\n+        return System.nanoTime();\n+    }\n+\n+    /**\n+     * Milliseconds elapsed since the time specified, the input is nanoTime\n+     * the only conversion happens when computing the elapsed time\n+     *\n+     * @param startNanoTime the start of the interval that we are measuring\n+     * @return elapsed time in milliseconds.\n+     */\n+    public static long elapsedMSec (long startNanoTime) {\n+       return (System.nanoTime() - startNanoTime)/ NANOSECONDS_PER_MILLISECOND;\n+    }\n }"},{"sha":"7e15b27c439827ecd2a6a965e60be087b150976f","filename":"bookkeeper-server/src/main/resources/NOTICE.bin.txt","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/resources/NOTICE.bin.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/main/resources/NOTICE.bin.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/main/resources/NOTICE.bin.txt?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -1,5 +1,5 @@\n Apache BookKeeper\n-Copyright 2011-2013 The Apache Software Foundation\n+Copyright 2011-2014 The Apache Software Foundation\n \n Licensed under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance"},{"sha":"d05bf49b6e0fd0da958afda23cab2ec081bd8caf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","status":"modified","additions":15,"deletions":12,"changes":27,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieInitializationTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -97,8 +97,8 @@ public void testExitCodeZK_REG_FAIL() throws Exception {\n         tmpDir.mkdir();\n \n         final ServerConfiguration conf = new ServerConfiguration()\n-                .setZkServers(null).setJournalDirName(tmpDir.getPath())\n-                .setLedgerDirNames(new String[] { tmpDir.getPath() });\n+            .setZkServers(null).setJournalDirName(tmpDir.getPath())\n+            .setAllowLoopback(true).setLedgerDirNames(new String[] { tmpDir.getPath() });\n \n         // simulating ZooKeeper exception by assigning a closed zk client to bk\n         BookieServer bkServer = new BookieServer(conf) {\n@@ -130,8 +130,8 @@ public void testBookieRegistration() throws Exception {\n         tmpDir.mkdir();\n \n         final ServerConfiguration conf = new ServerConfiguration()\n-                .setZkServers(null).setJournalDirName(tmpDir.getPath())\n-                .setLedgerDirNames(new String[] { tmpDir.getPath() });\n+            .setZkServers(null).setJournalDirName(tmpDir.getPath())\n+            .setAllowLoopback(true).setLedgerDirNames(new String[] { tmpDir.getPath() });\n \n         final String bkRegPath = conf.getZkAvailableBookiesPath() + \"/\"\n                 + InetAddress.getLocalHost().getHostAddress() + \":\"\n@@ -196,8 +196,9 @@ public void testRegNodeExistsAfterSessionTimeOut() throws Exception {\n         tmpDir.mkdir();\n \n         ServerConfiguration conf = new ServerConfiguration().setZkServers(null)\n-                .setJournalDirName(tmpDir.getPath()).setLedgerDirNames(\n-                        new String[] { tmpDir.getPath() });\n+            .setAllowLoopback(true)\n+            .setJournalDirName(tmpDir.getPath())\n+            .setLedgerDirNames(new String[] { tmpDir.getPath() });\n \n         String bkRegPath = conf.getZkAvailableBookiesPath() + \"/\"\n                 + InetAddress.getLocalHost().getHostAddress() + \":\"\n@@ -252,9 +253,10 @@ public void testDuplicateBookieServerStartup() throws Exception {\n \n         ServerConfiguration conf = new ServerConfiguration();\n         int port = 12555;\n-        conf.setZkServers(null).setBookiePort(port).setJournalDirName(\n-                tmpDir.getPath()).setLedgerDirNames(\n-                new String[] { tmpDir.getPath() });\n+        conf.setZkServers(null).setBookiePort(port)\n+            .setAllowLoopback(true)\n+            .setJournalDirName(tmpDir.getPath())\n+            .setLedgerDirNames(new String[] { tmpDir.getPath() });\n         BookieServer bs1 = new BookieServer(conf);\n         bs1.start();\n \n@@ -281,9 +283,9 @@ public void testStartBookieWithoutZKServer() throws Exception {\n         tmpDir.mkdir();\n \n         final ServerConfiguration conf = new ServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n-                .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n-                .setLedgerDirNames(new String[] { tmpDir.getPath() });\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n+            .setAllowLoopback(true).setLedgerDirNames(new String[] { tmpDir.getPath() });\n         try {\n             new Bookie(conf);\n             fail(\"Should throw ConnectionLossException as ZKServer is not running!\");\n@@ -308,6 +310,7 @@ public void testStartBookieWithoutZKInitialized() throws Exception {\n         final ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setZkTimeout(5000).setJournalDirName(tmpDir.getPath())\n+            .setAllowLoopback(true)\n             .setLedgerDirNames(new String[] { tmpDir.getPath() });\n         conf.setZkLedgersRootPath(ZK_ROOT);\n         try {"},{"sha":"71482bc337888c8493f87347f290a52697215397","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/BookieJournalTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -216,6 +216,7 @@ public void testPreV2Journal() throws Exception {\n         writeIndexFileForLedger(Bookie.getCurrentDirectory(ledgerDir), 1, \"testPasswd\".getBytes());\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -254,6 +255,7 @@ public void testAllJunkJournal() throws Exception {\n         writeJunkJournal(Bookie.getCurrentDirectory(journalDir));\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -292,6 +294,7 @@ public void testEmptyJournal() throws Exception {\n         writePreV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -318,6 +321,7 @@ public void testHeaderOnlyJournal() throws Exception {\n         writePostV2Journal(Bookie.getCurrentDirectory(journalDir), 0);\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -348,6 +352,7 @@ public void testJunkEndedJournal() throws Exception {\n         writeIndexFileForLedger(ledgerDir, 1, \"testPasswd\".getBytes());\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -392,6 +397,7 @@ public void testTruncatedInLenJournal() throws Exception {\n                                 1, \"testPasswd\".getBytes());\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -440,6 +446,7 @@ public void testTruncatedInEntryJournal() throws Exception {\n                                 1, \"testPasswd\".getBytes());\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -506,6 +513,7 @@ private void testPartialFileInfoPreV3Journal(boolean truncateMasterKey)\n                                        1, \"testPasswd\".getBytes(), truncateMasterKey);\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -568,6 +576,7 @@ private void testPartialFileInfoPostV3Journal(boolean truncateMasterKey)\n                                        truncateMasterKey);\n \n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });"},{"sha":"e84183c06bf6fe8cf06a7859d3c4f8822536d602","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CompactionTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -1,5 +1,3 @@\n-package org.apache.bookkeeper.bookie;\n-\n /*\n  *\n  * Licensed to the Apache Software Foundation (ASF) under one\n@@ -20,6 +18,8 @@\n  * under the License.\n  *\n  */\n+package org.apache.bookkeeper.bookie;\n+\n import java.io.File;\n import java.io.IOException;\n import java.io.IOException;\n@@ -41,6 +41,7 @@\n import org.apache.zookeeper.AsyncCallback;\n import org.apache.bookkeeper.client.LedgerMetadata;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.Processor;\n import org.apache.bookkeeper.versioning.Version;\n \n@@ -316,7 +317,7 @@ public void testCompactionSmallEntryLogs() throws Exception {\n     @Test(timeout=60000)\n     public void testCompactionSafety() throws Exception {\n         tearDown(); // I dont want the test infrastructure\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = new ServerConfiguration().setAllowLoopback(true);\n         final Set<Long> ledgers = Collections.newSetFromMap(new ConcurrentHashMap<Long, Boolean>());\n         LedgerManager manager = new LedgerManager() {\n                 @Override\n@@ -344,6 +345,16 @@ public void asyncProcessLedgers(Processor<Long> processor,\n                     unsupported();\n                 }\n                 @Override\n+                public void registerLedgerMetadataListener(long ledgerId,\n+                        LedgerMetadataListener listener) {\n+                    unsupported();\n+                }\n+                @Override\n+                public void unregisterLedgerMetadataListener(long ledgerId,\n+                        LedgerMetadataListener listener) {\n+                    unsupported();\n+                }\n+                @Override\n                 public void close() throws IOException {}\n \n                 void unsupported() {"},{"sha":"5cdb57638385e8428f56730926aaf3f272d5eddf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","status":"modified","additions":16,"deletions":4,"changes":20,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CookieTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -78,6 +78,7 @@ public void testCleanStart() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory(false))\n+            .setAllowLoopback(true)\n             .setLedgerDirNames(new String[] { newDirectory(false) })\n             .setBookiePort(bookiePort);\n         try {\n@@ -95,6 +96,7 @@ public void testCleanStart() throws Exception {\n     @Test(timeout=60000)\n     public void testBadJournalCookie() throws Exception {\n         ServerConfiguration conf1 = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() })\n             .setBookiePort(bookiePort);\n@@ -104,6 +106,7 @@ public void testBadJournalCookie() throws Exception {\n         String journalDir = newDirectory();\n         String ledgerDir = newDirectory();\n         ServerConfiguration conf2 = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n@@ -131,6 +134,7 @@ public void testDirectoryMissing() throws Exception {\n             newDirectory(), newDirectory(), newDirectory() };\n         String journalDir = newDirectory();\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(ledgerDirs)\n@@ -172,6 +176,7 @@ public void testDirectoryAdded() throws Exception {\n         String ledgerDir0 = newDirectory();\n         String journalDir = newDirectory();\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir0 })\n@@ -204,6 +209,7 @@ public void testDirectoryCleared() throws Exception {\n         String ledgerDir0 = newDirectory();\n         String journalDir = newDirectory();\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir0 , newDirectory() })\n@@ -229,6 +235,7 @@ public void testDirectoryCleared() throws Exception {\n     @Test(timeout=60000)\n     public void testBookiePortChanged() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n@@ -255,6 +262,7 @@ public void testBookiePortChanged() throws Exception {\n     @Test(timeout=60000)\n     public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n@@ -264,6 +272,7 @@ public void testNewBookieStartingWithAnotherBookiesPort() throws Exception {\n         b.shutdown();\n \n         conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newDirectory())\n             .setLedgerDirNames(new String[] { newDirectory() , newDirectory() })\n@@ -289,10 +298,11 @@ public void testVerifyCookieWithFormat() throws Exception {\n         BookKeeperAdmin.format(adminConf, false, true);\n \n         ServerConfiguration bookieConf = new ServerConfiguration()\n-                .setZkServers(zkutil.getZooKeeperConnectString())\n-                .setJournalDirName(newDirectory(false))\n-                .setLedgerDirNames(new String[] { newDirectory(false) })\n-                .setBookiePort(bookiePort);\n+            .setAllowLoopback(true)\n+            .setZkServers(zkutil.getZooKeeperConnectString())\n+            .setJournalDirName(newDirectory(false))\n+            .setLedgerDirNames(new String[] { newDirectory(false) })\n+            .setBookiePort(bookiePort);\n         // Bookie should start successfully for fresh env.\n         new Bookie(bookieConf);\n \n@@ -320,6 +330,7 @@ public void testVerifyCookieWithFormat() throws Exception {\n     @Test(timeout=60000)\n     public void testV2data() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newV2JournalDirectory())\n             .setLedgerDirNames(new String[] { newV2LedgerDirectory() })\n@@ -340,6 +351,7 @@ public void testV2data() throws Exception {\n     @Test(timeout=60000)\n     public void testV1data() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(newV1JournalDirectory())\n             .setLedgerDirNames(new String[] { newV1LedgerDirectory() })"},{"sha":"33686f10517cdf90a3728c31e6e6dff0b6bd20a4","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/CreateNewLogTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -82,6 +82,7 @@ public void testCreateNewLog() throws Exception {\n         // Creating a new configuration with a number of \n         // ledger directories.\n         conf.setLedgerDirNames(ledgerDirs);\n+        conf.setAllowLoopback(true);\n         LedgerDirsManager ledgerDirsManager = new LedgerDirsManager(conf);\n         EntryLogger el = new EntryLogger(conf, ledgerDirsManager);\n         \n@@ -99,4 +100,4 @@ public void testCreateNewLog() throws Exception {\n         Assert.assertTrue(\"Wrong log id\", el.getCurrentLogId() > 1);\n     }\n \n-}\n\\ No newline at end of file\n+}"},{"sha":"35f57a69c7ec4d362132273169dc46b4c19d9329","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/EntryLogTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -56,6 +56,7 @@ public void testCorruptEntryLog() throws Exception {\n \n         int gcWaitTime = 1000;\n         ServerConfiguration conf = new ServerConfiguration();\n+        conf.setAllowLoopback(true);\n         conf.setGcWaitTime(gcWaitTime);\n         conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n         Bookie bookie = new Bookie(conf);\n@@ -107,6 +108,7 @@ public void testMissingLogId() throws Exception {\n         Bookie.checkDirectoryStructure(curDir);\n \n         ServerConfiguration conf = new ServerConfiguration();\n+        conf.setAllowLoopback(true);\n         conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n         Bookie bookie = new Bookie(conf);\n         // create some entries\n@@ -168,6 +170,7 @@ public void testEntryLoggerShouldThrowFNFEIfDirectoriesDoesNotExist()\n         File tmpDir = File.createTempFile(\"bkTest\", \".dir\");\n         tmpDir.delete();\n         ServerConfiguration conf = new ServerConfiguration();\n+        conf.setAllowLoopback(true);\n         conf.setLedgerDirNames(new String[] { tmpDir.toString() });\n         EntryLogger entryLogger = null;\n         try {\n@@ -193,6 +196,7 @@ public void testAddEntryFailureOnDiskFull() throws Exception {\n         File ledgerDir2 = File.createTempFile(\"bkTest\", \".dir\");\n         ledgerDir2.delete();\n         ServerConfiguration conf = new ServerConfiguration();\n+        conf.setAllowLoopback(true);\n         conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(),\n                 ledgerDir2.getAbsolutePath() });\n         Bookie bookie = new Bookie(conf);"},{"sha":"0ed1af75bb0792d843019876a67d3013953dbb61","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/LedgerCacheTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -73,6 +73,7 @@ public void setUp() throws Exception {\n \n         conf = new ServerConfiguration();\n         conf.setZkServers(null);\n+        conf.setAllowLoopback(true);\n         conf.setJournalDirName(txnDir.getPath());\n         conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n         bookie = new Bookie(conf);\n@@ -214,6 +215,8 @@ public void testPageEvictionWhileDeleteLedgerInProgress() throws Exception {\n         conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(),\n                 ledgerDir2.getAbsolutePath() });\n         conf.setOpenFileLimit(1);\n+        conf.setAllowLoopback(true);\n+\n         Bookie bookie = new Bookie(conf);\n         InterleavedLedgerStorage ledgerStorage = ((InterleavedLedgerStorage) bookie.ledgerStorage);\n         final LedgerCacheImpl ledgerCache = (LedgerCacheImpl) ledgerStorage.ledgerCache;\n@@ -306,7 +309,7 @@ public void testLedgerCacheFlushFailureOnDiskFull() throws Exception {\n         ledgerDir1.delete();\n         File ledgerDir2 = File.createTempFile(\"bkTest\", \".dir\");\n         ledgerDir2.delete();\n-        ServerConfiguration conf = new ServerConfiguration();\n+        ServerConfiguration conf = new ServerConfiguration().setAllowLoopback(true);\n         conf.setLedgerDirNames(new String[] { ledgerDir1.getAbsolutePath(), ledgerDir2.getAbsolutePath() });\n \n         Bookie bookie = new Bookie(conf);\n@@ -364,6 +367,7 @@ public void testIndexPageEvictionWriteOrder() throws Exception {\n \n         ServerConfiguration conf = new ServerConfiguration()\n             .setZkServers(null)\n+            .setAllowLoopback(true)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() })\n             .setFlushInterval(1000)\n@@ -377,6 +381,7 @@ public void testIndexPageEvictionWriteOrder() throws Exception {\n         }\n \n         conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(null)\n             .setJournalDirName(journalDir.getPath())\n             .setLedgerDirNames(new String[] { ledgerDir.getPath() });"},{"sha":"d4327c251cd1dbe106ef34877f2ec02daf9ae6ff","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/TestLedgerDirsManager.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -35,7 +35,7 @@\n public class TestLedgerDirsManager extends TestCase {\n     static Logger LOG = LoggerFactory.getLogger(TestLedgerDirsManager.class);\n \n-    ServerConfiguration conf = new ServerConfiguration();\n+    ServerConfiguration conf;\n     File curDir;\n     LedgerDirsManager dirsManager;\n \n@@ -48,6 +48,7 @@ public void setUp() throws Exception {\n         Bookie.checkDirectoryStructure(curDir);\n \n         ServerConfiguration conf = new ServerConfiguration();\n+        conf.setAllowLoopback(true);\n         conf.setLedgerDirNames(new String[] {tmpDir.toString()});\n \n         dirsManager = new LedgerDirsManager(conf);"},{"sha":"f58d5ea97248a9d5025e10101697bfa87935a0f3","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/bookie/UpgradeTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -165,6 +165,7 @@ static String newV2LedgerDirectory() throws Exception {\n \n     private static void testUpgradeProceedure(String zkServers, String journalDir, String ledgerDir) throws Exception {\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkServers)\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })\n@@ -222,6 +223,7 @@ public void testUpgradeCurrent() throws Exception {\n         testUpgradeProceedure(zkutil.getZooKeeperConnectString(), journalDir, ledgerDir);\n         // Upgrade again\n         ServerConfiguration conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n             .setZkServers(zkutil.getZooKeeperConnectString())\n             .setJournalDirName(journalDir)\n             .setLedgerDirNames(new String[] { ledgerDir })"},{"sha":"85cd27169e98d933d7f392c3c803a689937eba28","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/LedgerCloseTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -23,6 +23,7 @@\n import java.util.Set;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.bookkeeper.bookie.Bookie;\n import org.apache.bookkeeper.bookie.BookieException;\n@@ -40,6 +41,7 @@\n /**\n  * This class tests the ledger close logic.\n  */\n+@SuppressWarnings(\"deprecation\")\n public class LedgerCloseTest extends BookKeeperClusterTestCase {\n \n     static Logger LOG = LoggerFactory.getLogger(LedgerCloseTest.class);\n@@ -56,6 +58,33 @@ public LedgerCloseTest() {\n         baseConf.setGcWaitTime(999999);\n     }\n \n+    @Test(timeout = 60000)\n+    public void testLedgerCloseWithConsistentLength() throws Exception {\n+        ClientConfiguration conf = new ClientConfiguration();\n+        conf.setZkServers(zkUtil.getZooKeeperConnectString()).setReadTimeout(1);\n+\n+        BookKeeper bkc = new BookKeeper(conf);\n+        LedgerHandle lh = bkc.createLedger(6, 3, DigestType.CRC32, new byte[] {});\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        stopBKCluster();\n+        final AtomicInteger i = new AtomicInteger(0xdeadbeef);\n+        AsyncCallback.AddCallback cb = new AsyncCallback.AddCallback() {\n+            @Override\n+            public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+                i.set(rc);\n+                latch.countDown();\n+            }\n+        };\n+        lh.asyncAddEntry(\"Test Entry\".getBytes(), cb, null);\n+        latch.await();\n+        assertEquals(i.get(), BKException.Code.NotEnoughBookiesException);\n+        assertEquals(0, lh.getLength());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, lh.getLastAddConfirmed());\n+        LedgerHandle newLh = bkc.openLedger(lh.getId(), DigestType.CRC32, new byte[] {});\n+        assertEquals(0, newLh.getLength());\n+        assertEquals(LedgerHandle.INVALID_ENTRY_ID, newLh.getLastAddConfirmed());\n+    }\n+\n     @Test(timeout = 60000)\n     public void testLedgerCloseDuringUnrecoverableErrors() throws Exception {\n         int numEntries = 3;"},{"sha":"0e2f2711b1541808c6eaa15ac4ecbda2346c87ea","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/SlowBookieTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -39,6 +39,7 @@\n import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.bookkeeper.conf.ClientConfiguration;\n \n+@SuppressWarnings(\"deprecation\")\n public class SlowBookieTest extends BookKeeperClusterTestCase {\n     static Logger LOG = LoggerFactory.getLogger(SlowBookieTest.class);\n "},{"sha":"ef03c2767a59358c2f0f7f39bb0a3d75a5482033","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestReadTimeout.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -57,6 +57,7 @@ public TestReadTimeout() {\n         this.digestType = DigestType.CRC32;\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     @Test(timeout=60000)\n     public void testReadTimeout() throws Exception {\n         final AtomicBoolean completed = new AtomicBoolean(false);"},{"sha":"bf20b21d37c91cf8076b878a3220b5b13665e33d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestSpeculativeRead.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -67,6 +67,7 @@ long getLedgerToRead(int ensemble, int quorum) throws Exception {\n         return l.getId();\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     BookKeeper createClient(int specTimeout) throws Exception {\n         ClientConfiguration conf = new ClientConfiguration()\n             .setSpeculativeReadTimeout(specTimeout)"},{"sha":"227647b17f9197bd3f820fde9ff437e686595aaf","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/client/TestWatchEnsembleChange.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -0,0 +1,147 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.client;\n+\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.meta.FlatLedgerManagerFactory;\n+import org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.MSLedgerManagerFactory;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.LedgerMetadataListener;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.util.ReflectionUtils;\n+import org.apache.bookkeeper.versioning.Version;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+@RunWith(Parameterized.class)\n+public class TestWatchEnsembleChange extends BookKeeperClusterTestCase {\n+\n+    static Logger LOG = LoggerFactory.getLogger(TestWatchEnsembleChange.class);\n+\n+    final DigestType digestType;\n+    final Class<? extends LedgerManagerFactory> lmFactoryCls;\n+\n+    public TestWatchEnsembleChange(Class<? extends LedgerManagerFactory> lmFactoryCls) {\n+        super(7);\n+        this.digestType = DigestType.CRC32;\n+        this.lmFactoryCls = lmFactoryCls;\n+        baseClientConf.setLedgerManagerFactoryClass(lmFactoryCls);\n+        baseConf.setLedgerManagerFactoryClass(lmFactoryCls);\n+    }\n+    \n+    @Parameters\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][] {\n+            { FlatLedgerManagerFactory.class },\n+            { HierarchicalLedgerManagerFactory.class },\n+            { MSLedgerManagerFactory.class }\n+        });\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testWatchEnsembleChange() throws Exception {\n+        int numEntries = 10;\n+        LedgerHandle lh = bkc.createLedger(3, 3, 3, digestType, \"\".getBytes());\n+        for (int i=0; i<numEntries; i++) {\n+            lh.addEntry((\"data\" + i).getBytes());\n+            LOG.info(\"Added entry {}.\", i);\n+        }\n+        LedgerHandle readLh = bkc.openLedgerNoRecovery(lh.getId(), digestType, \"\".getBytes());\n+        long lastLAC = readLh.getLastAddConfirmed();\n+        assertEquals(numEntries - 2, lastLAC);\n+        ArrayList<InetSocketAddress> ensemble =\n+                lh.getLedgerMetadata().currentEnsemble;\n+        for (InetSocketAddress addr : ensemble) {\n+            killBookie(addr);\n+        }\n+        // write another batch of entries, which will trigger ensemble change\n+        for (int i=0; i<numEntries; i++) {\n+            lh.addEntry((\"data\" + (numEntries + i)).getBytes());\n+            LOG.info(\"Added entry {}.\", (numEntries + i));\n+        }\n+        TimeUnit.SECONDS.sleep(5);\n+        readLh.readLastConfirmed();\n+        assertEquals(2 * numEntries - 2, readLh.getLastAddConfirmed());\n+        readLh.close();\n+        lh.close();\n+    }\n+\n+    @Test(timeout = 60000)\n+    public void testWatchMetadataRemoval() throws Exception {\n+       LedgerManagerFactory factory = ReflectionUtils.newInstance(lmFactoryCls);\n+       factory.initialize(baseConf, super.zkc, factory.getCurrentVersion());\n+       LedgerManager manager = factory.newLedgerManager();\n+       final ByteBuffer bbLedgerId = ByteBuffer.allocate(8);\n+       final CountDownLatch createLatch = new CountDownLatch(1);\n+       final CountDownLatch removeLatch = new CountDownLatch(1);\n+       \n+       manager.createLedger( new LedgerMetadata(4, 2, 2, digestType, \"fpj was here\".getBytes()), \n+                new BookkeeperInternalCallbacks.GenericCallback<Long>(){\n+          \n+           @Override\n+           public void operationComplete(int rc, Long result) {\n+               bbLedgerId.putLong(result);\n+               bbLedgerId.flip();\n+               createLatch.countDown();\n+           }\n+       }); \n+       assertTrue(createLatch.await(2000, TimeUnit.MILLISECONDS));\n+       final long createdLid = bbLedgerId.getLong();\n+       \n+       manager.registerLedgerMetadataListener( createdLid, \n+               new LedgerMetadataListener() {\n+\n+           @Override\n+           public void onChanged( long ledgerId, LedgerMetadata metadata ) {\n+               assertEquals(ledgerId, createdLid);\n+               assertEquals(metadata, null);\n+               removeLatch.countDown();\n+           }   \n+       });\n+       \n+       manager.removeLedgerMetadata( createdLid, Version.ANY,\n+               new BookkeeperInternalCallbacks.GenericCallback<Void>() {\n+           \n+           @Override\n+           public void operationComplete(int rc, Void result) {\n+               assertEquals(rc, BKException.Code.OK);\n+           }\n+       });\n+       assertTrue(removeLatch.await(2000, TimeUnit.MILLISECONDS));   \n+    }\n+}"},{"sha":"75f84326b431b60e652fb65f6148b345c9f9800a","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","status":"modified","additions":34,"deletions":58,"changes":92,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorLedgerCheckerTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -37,9 +37,10 @@\n import org.apache.bookkeeper.client.LedgerHandle;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n import org.apache.bookkeeper.conf.ServerConfiguration;\n-import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+\n import org.apache.bookkeeper.meta.ZkLedgerUnderreplicationManager;\n import org.apache.bookkeeper.proto.BookieServer;\n+import org.apache.bookkeeper.proto.DataFormats.UnderreplicatedLedgerFormat;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n@@ -73,7 +74,7 @@\n             .getZkLedgersRootPath()\n             + \"/underreplication/ledgers\";\n     private HashMap<String, AuditorElector> auditorElectors = new HashMap<String, AuditorElector>();\n-    private LedgerUnderreplicationManager urLedgerMgr;\n+    private ZkLedgerUnderreplicationManager urLedgerMgr;\n     private Set<Long> urLedgerList;\n \n     private List<Long> ledgerList;\n@@ -169,46 +170,19 @@ public void testSimpleLedger() throws Exception {\n     @Test(timeout=60000)\n     public void testRestartBookie() throws Exception {\n         LedgerHandle lh1 = createAndAddEntriesToLedger();\n-        ledgerList.add(lh1.getId());\n         LedgerHandle lh2 = createAndAddEntriesToLedger();\n-        ledgerList.add(lh2.getId());\n-        LOG.debug(\"Created following ledgers : \" + ledgerList);\n \n-        // 2 is added to the latch, since after the ledger reformation, again\n-        // the reformed bookie is stopped. So auditor will modify the zk\n-        // underreplicated metadata\n-        int count = ledgerList.size() + 2;\n-        final CountDownLatch underReplicaLatch = registerUrLedgerWatcher(count);\n+        LOG.debug(\"Created following ledgers : {}, {}\", lh1, lh2);\n \n         int bkShutdownIndex = bs.size() - 1;\n         ServerConfiguration bookieConf1 = bsConfs.get(bkShutdownIndex);\n         String shutdownBookie = shutdownBookie(bkShutdownIndex);\n \n-        // restart the failed bookie and simulate previously listed ledgers are\n-        // rereplicated\n+        // restart the failed bookie\n         bs.add(startBookie(bookieConf1));\n \n-        // grace period for publishing the bk-ledger\n-        LOG.debug(\"Waiting for ledgers to be marked as under replicated\");\n-        underReplicaLatch.await(5, TimeUnit.SECONDS);\n-        Map<Long, String> urLedgerData = getUrLedgerData(urLedgerList);\n-\n-        assertEquals(\"Missed identifying under replicated ledgers\", 2,\n-                urLedgerList.size());\n-\n-        /*\n-         * Sample data format present in the under replicated ledger path\n-         * \n-         * {4=replica: \"10.18.89.153:5002\", 5=replica: \"10.18.89.153:5003\"}\n-         */\n-        for (Long ledgerId : ledgerList) {\n-            assertTrue(\"Ledger is not marked as underreplicated:\" + ledgerId,\n-                    urLedgerList.contains(ledgerId));\n-            String data = urLedgerData.get(ledgerId);\n-            assertTrue(\"Bookie \" + shutdownBookie\n-                    + \" is not listed in the ledger as missing \" + data, data\n-                    .contains(shutdownBookie));\n-        }\n+        waitForLedgerMissingReplicas(lh1.getId(), 10, shutdownBookie);\n+        waitForLedgerMissingReplicas(lh2.getId(), 10, shutdownBookie);\n     }\n \n     /**\n@@ -218,41 +192,20 @@ public void testRestartBookie() throws Exception {\n     @Test(timeout=60000)\n     public void testMultipleBookieFailures() throws Exception {\n         LedgerHandle lh1 = createAndAddEntriesToLedger();\n-        ledgerList.add(lh1.getId());\n-        LedgerHandle lh2 = createAndAddEntriesToLedger();\n-        ledgerList.add(lh2.getId());\n-        LOG.debug(\"Created following ledgers : \" + ledgerList);\n \n         // failing first bookie\n         shutdownBookie(bs.size() - 1);\n+\n         // simulate re-replication\n-        doLedgerRereplication(lh1.getId(), lh2.getId());\n+        doLedgerRereplication(lh1.getId());\n \n         // failing another bookie\n-        CountDownLatch underReplicaLatch = registerUrLedgerWatcher(ledgerList\n-                .size());\n         String shutdownBookie = shutdownBookie(bs.size() - 1);\n \n         // grace period for publishing the bk-ledger\n         LOG.debug(\"Waiting for ledgers to be marked as under replicated\");\n-        underReplicaLatch.await(5, TimeUnit.SECONDS);\n-        Map<Long, String> urLedgerData = getUrLedgerData(urLedgerList);\n-\n-        assertEquals(\"Missed identifying under replicated ledgers\", 2,\n-                urLedgerList.size());\n-\n-        /*\n-         * Sample data format present in the under replicated ledger path\n-         * {4=replica: \"10.18.89.153:5002\", 5=replica: \"10.18.89.153:5003\"}\n-         */\n-        for (Long ledgerId : ledgerList) {\n-            assertTrue(\"Ledger is not marked as underreplicated:\" + ledgerId,\n-                    urLedgerList.contains(ledgerId));\n-            String data = urLedgerData.get(ledgerId);\n-            assertTrue(\"Bookie \" + shutdownBookie\n-                    + \" is not listed in the ledger as missing \" + data, data\n-                    .contains(shutdownBookie));\n-        }\n+        assertTrue(\"Ledger should be missing second replica\",\n+                   waitForLedgerMissingReplicas(lh1.getId(), 10, shutdownBookie));\n     }\n \n     @Test(timeout = 30000)\n@@ -323,6 +276,29 @@ public void testReadOnlyBookieExclusionFromURLedgersCheck() throws Exception {\n         assertFalse(\"latch should not have completed\", underReplicaLatch.await(5, TimeUnit.SECONDS));\n     }\n \n+    /**\n+     * Wait for ledger to be underreplicated, and to be missing all replicas specified\n+     */\n+    private boolean waitForLedgerMissingReplicas(Long ledgerId, long secondsToWait, String... replicas)\n+            throws Exception {\n+        for (int i = 0; i < secondsToWait; i++) {\n+            try {\n+                UnderreplicatedLedgerFormat data = urLedgerMgr.getLedgerUnreplicationInfo(ledgerId);\n+                boolean all = true;\n+                for (String r : replicas) {\n+                    all = all && data.getReplicaList().contains(r);\n+                }\n+                if (all) {\n+                    return true;\n+                }\n+            } catch (Exception e) {\n+                // may not find node\n+            }\n+            Thread.sleep(1000);\n+        }\n+        return false;\n+    }\n+\n     private CountDownLatch registerUrLedgerWatcher(int count)\n             throws KeeperException, InterruptedException {\n         final CountDownLatch underReplicaLatch = new CountDownLatch(count);"},{"sha":"27e65c306e0a9f3583285e02a6d7013cb8e5f97d","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","status":"added","additions":128,"deletions":0,"changes":128,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicBookieCheckTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -0,0 +1,128 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.test.TestCallbacks;\n+\n+import java.util.List;\n+import java.net.InetSocketAddress;\n+\n+import org.apache.bookkeeper.util.StringUtils;\n+import org.apache.bookkeeper.zookeeper.ZooKeeperWatcherBase;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.client.LedgerHandleAdapter;\n+import org.apache.bookkeeper.client.LedgerMetadata;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManager;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+\n+import org.apache.bookkeeper.util.ZkUtils;\n+\n+import org.apache.zookeeper.ZooKeeper;\n+import org.junit.Before;\n+import org.junit.After;\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This test verifies that the period check on the auditor\n+ * will pick up on missing data in the client\n+ */\n+public class AuditorPeriodicBookieCheckTest extends BookKeeperClusterTestCase {\n+    private final static Logger LOG = LoggerFactory\n+            .getLogger(AuditorPeriodicBookieCheckTest.class);\n+\n+    private AuditorElector auditorElector = null;\n+    private ZooKeeper auditorZookeeper = null;\n+\n+    private final static int CHECK_INTERVAL = 1; // run every second\n+\n+    public AuditorPeriodicBookieCheckTest() {\n+        super(3);\n+        baseConf.setPageLimit(1); // to make it easy to push ledger out of cache\n+        baseConf.setAllowLoopback(true);\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+\n+        ServerConfiguration conf = new ServerConfiguration(bsConfs.get(0));\n+        conf.setAllowLoopback(true);\n+        conf.setAuditorPeriodicBookieCheckInterval(CHECK_INTERVAL);\n+        String addr = StringUtils.addrToString(bs.get(0).getLocalAddress());\n+\n+        ZooKeeperWatcherBase w = new ZooKeeperWatcherBase(10000);\n+        auditorZookeeper = ZkUtils.createConnectedZookeeperClient(\n+                zkUtil.getZooKeeperConnectString(), w);\n+\n+        auditorElector = new AuditorElector(addr, conf,\n+                auditorZookeeper);\n+        auditorElector.start();\n+    }\n+\n+    @After\n+    @Override\n+    public void tearDown() throws Exception {\n+        auditorElector.shutdown();\n+        auditorZookeeper.close();\n+\n+        super.tearDown();\n+    }\n+\n+    /**\n+     * Test that the periodic bookie checker works\n+     */\n+    @Test(timeout=30000)\n+    public void testPeriodicBookieCheckInterval() throws Exception {\n+        LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bsConfs.get(0), zkc);\n+        LedgerManager ledgerManager = mFactory.newLedgerManager();\n+        final LedgerUnderreplicationManager underReplicationManager = mFactory.newLedgerUnderreplicationManager();\n+        final int numLedgers = 1;\n+\n+        LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"passwd\".getBytes());\n+        LedgerMetadata md = LedgerHandleAdapter.getLedgerMetadata(lh);\n+\n+        List<InetSocketAddress> ensemble = md.getEnsembles().get(0L);\n+        ensemble.set(0, new InetSocketAddress(\"1.1.1.1\", 1000));\n+\n+        TestCallbacks.GenericCallbackFuture<Void> cb = new TestCallbacks.GenericCallbackFuture<Void>();\n+        ledgerManager.writeLedgerMetadata(lh.getId(), md, cb);\n+        cb.get();\n+\n+        long underReplicatedLedger = -1;\n+        for (int i = 0; i < 10; i++) {\n+            underReplicatedLedger = underReplicationManager.pollLedgerToRereplicate();\n+            if (underReplicatedLedger != -1) {\n+                break;\n+            }\n+            Thread.sleep(CHECK_INTERVAL*1000);\n+        }\n+        assertEquals(\"Ledger should be under replicated\", lh.getId(), underReplicatedLedger);\n+    }\n+}"},{"sha":"7bd03d96fc456eddb7395755376977c75b2e5627","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorPeriodicCheckTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -66,7 +66,7 @@\n     private HashMap<String, AuditorElector> auditorElectors = new HashMap<String, AuditorElector>();\n     private List<ZooKeeper> zkClients = new LinkedList<ZooKeeper>();\n \n-    private final static int CHECK_INTERVAL = 1000; // run every second\n+    private final static int CHECK_INTERVAL = 1; // run every second\n \n     public AuditorPeriodicCheckTest() {\n         super(3);\n@@ -153,7 +153,7 @@ public boolean accept(File dir, String name) {\n             if (underReplicatedLedger != -1) {\n                 break;\n             }\n-            Thread.sleep(CHECK_INTERVAL);\n+            Thread.sleep(CHECK_INTERVAL * 1000);\n         }\n         assertEquals(\"Ledger should be under replicated\", ledgerId, underReplicatedLedger);\n         underReplicationManager.close();\n@@ -201,7 +201,7 @@ public void testIndexCorruption() throws Exception {\n             if (underReplicatedLedger != -1) {\n                 break;\n             }\n-            Thread.sleep(CHECK_INTERVAL);\n+            Thread.sleep(CHECK_INTERVAL * 1000);\n         }\n         assertEquals(\"Ledger should be under replicated\", ledgerToCorrupt, underReplicatedLedger);\n         underReplicationManager.close();\n@@ -241,14 +241,14 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n         bsConfs.add(conf);\n         bs.add(startBookie(conf, deadBookie));\n \n-        Thread.sleep(CHECK_INTERVAL * 2);\n+        Thread.sleep(CHECK_INTERVAL * 2000);\n         assertEquals(\"Nothing should have tried to read\", 0, numReads.get());\n         underReplicationManager.enableLedgerReplication();\n-        Thread.sleep(CHECK_INTERVAL * 2); // give it time to run\n+        Thread.sleep(CHECK_INTERVAL * 2000); // give it time to run\n \n         underReplicationManager.disableLedgerReplication();\n         // give it time to stop, from this point nothing new should be marked\n-        Thread.sleep(CHECK_INTERVAL * 2);\n+        Thread.sleep(CHECK_INTERVAL * 2000);\n \n         int numUnderreplicated = 0;\n         long underReplicatedLedger = -1;\n@@ -262,7 +262,7 @@ public ByteBuffer readEntry(long ledgerId, long entryId)\n             underReplicationManager.markLedgerReplicated(underReplicatedLedger);\n         } while (underReplicatedLedger != -1);\n \n-        Thread.sleep(CHECK_INTERVAL * 2); // give a chance to run again (it shouldn't, it's disabled)\n+        Thread.sleep(CHECK_INTERVAL * 2000); // give a chance to run again (it shouldn't, it's disabled)\n \n         // ensure that nothing is marked as underreplicated\n         underReplicatedLedger = underReplicationManager.pollLedgerToRereplicate();"},{"sha":"a34283ef3b24a0a06204b46179fb858dfe7c3c80","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/AuditorRollingRestartTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -0,0 +1,73 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.replication;\n+\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n+import org.apache.bookkeeper.test.TestCallbacks;\n+\n+import java.net.InetSocketAddress;\n+import org.apache.bookkeeper.client.BookKeeper.DigestType;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.conf.ServerConfiguration;\n+import org.apache.bookkeeper.meta.LedgerManagerFactory;\n+import org.apache.bookkeeper.meta.LedgerUnderreplicationManager;\n+\n+import org.junit.Test;\n+\n+/**\n+ * Test auditor behaviours during a rolling restart\n+ */\n+public class AuditorRollingRestartTest extends BookKeeperClusterTestCase {\n+\n+    public AuditorRollingRestartTest() {\n+        super(3);\n+        // run the daemon within the bookie\n+        baseConf.setAutoRecoveryDaemonEnabled(true);\n+    }\n+\n+    /**\n+     * Test no auditing during restart if disabled\n+     */\n+    @Test(timeout=600000) // 10 minutes\n+    public void testAuditingDuringRollingRestart() throws Exception {\n+        LedgerManagerFactory mFactory = LedgerManagerFactory.newLedgerManagerFactory(bsConfs.get(0), zkc);\n+        final LedgerUnderreplicationManager underReplicationManager = mFactory.newLedgerUnderreplicationManager();\n+\n+        LedgerHandle lh = bkc.createLedger(3, 3, DigestType.CRC32, \"passwd\".getBytes());\n+        for (int i = 0; i < 10; i++) {\n+            lh.asyncAddEntry(\"foobar\".getBytes(), new TestCallbacks.AddCallbackFuture(), null);\n+        }\n+        lh.addEntry(\"foobar\".getBytes());\n+        lh.close();\n+\n+        assertEquals(\"shouldn't be anything under replicated\",\n+                     underReplicationManager.pollLedgerToRereplicate(), -1);\n+        underReplicationManager.disableLedgerReplication();\n+\n+        InetSocketAddress auditor = AuditorElector.getCurrentAuditor(baseConf, zkc);\n+        ServerConfiguration conf = killBookie(auditor);\n+        Thread.sleep(2000);\n+        startBookie(conf);\n+        Thread.sleep(2000); // give it time to run\n+        assertEquals(\"shouldn't be anything under replicated\", -1,\n+                underReplicationManager.pollLedgerToRereplicate());\n+    }\n+}"},{"sha":"4c34c53af3d64f05e7dba5aee3b80243c5909f34","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","status":"modified","additions":54,"deletions":9,"changes":63,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/BookieAutoRecoveryTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.SortedMap;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import org.apache.bookkeeper.client.BKException;\n import org.apache.bookkeeper.client.BookKeeper.DigestType;\n@@ -37,7 +38,7 @@\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n-import org.apache.bookkeeper.test.MultiLedgerManagerTestCase;\n+import org.apache.bookkeeper.test.BookKeeperClusterTestCase;\n import org.apache.zookeeper.KeeperException;\n import org.apache.zookeeper.WatchedEvent;\n import org.apache.zookeeper.Watcher;\n@@ -52,8 +53,7 @@\n  * Auditor-rereplication process: Auditor will publish the bookie failures,\n  * consequently ReplicationWorker will get the notifications and act on it.\n  */\n-public class BookieAutoRecoveryTest extends\n-        MultiLedgerManagerTestCase {\n+public class BookieAutoRecoveryTest extends BookKeeperClusterTestCase {\n     private static final Logger LOG = LoggerFactory\n             .getLogger(BookieAutoRecoveryTest.class);\n     private static final byte[] PASSWD = \"admin\".getBytes();\n@@ -68,15 +68,15 @@\n     private final String UNDERREPLICATED_PATH = baseClientConf\n             .getZkLedgersRootPath() + \"/underreplication/ledgers\";\n \n-    public BookieAutoRecoveryTest(String ledgerManagerFactory) throws IOException, KeeperException,\n+    public BookieAutoRecoveryTest() throws IOException, KeeperException,\n             InterruptedException, UnavailableException, CompatibilityException {\n         super(3);\n-        LOG.info(\"Running test case using ledger manager : \"\n-                + ledgerManagerFactory);\n-        // set ledger manager name\n-        baseConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n+\n+        baseConf.setLedgerManagerFactoryClassName(\n+                \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\");\n         baseConf.setOpenLedgerRereplicationGracePeriod(openLedgerRereplicationGracePeriod);\n-        baseClientConf.setLedgerManagerFactoryClassName(ledgerManagerFactory);\n+        baseClientConf.setLedgerManagerFactoryClassName(\n+                \"org.apache.bookkeeper.meta.HierarchicalLedgerManagerFactory\");\n         this.digestType = DigestType.MAC;\n         setAutoRecoveryEnabled(true);\n     }\n@@ -342,6 +342,51 @@ public void testNoSuchLedgerExists() throws Exception {\n         }\n     }\n \n+    /**\n+     * Test that if a empty ledger loses the bookie not in the quorum for entry 0, it will\n+     * still be openable when it loses enough bookies to lose a whole quorum.\n+     */\n+    @Test(timeout=10000)\n+    public void testEmptyLedgerLosesQuorumEventually() throws Exception {\n+        LedgerHandle lh = bkc.createLedger(3, 2, 2, DigestType.CRC32, PASSWD);\n+        CountDownLatch latch = new CountDownLatch(1);\n+        String urZNode = getUrLedgerZNode(lh);\n+        watchUrLedgerNode(urZNode, latch);\n+\n+        InetSocketAddress replicaToKill = LedgerHandleAdapter\n+            .getLedgerMetadata(lh).getEnsembles().get(0L).get(2);\n+        LOG.info(\"Killing last bookie, {}, in ensemble {}\", replicaToKill,\n+                 LedgerHandleAdapter.getLedgerMetadata(lh).getEnsembles().get(0L));\n+        killBookie(replicaToKill);\n+\n+        getAuditor(10, TimeUnit.SECONDS).submitAuditTask().get(); // ensure auditor runs\n+\n+        assertTrue(\"Should be marked as underreplicated\", latch.await(5, TimeUnit.SECONDS));\n+        latch = new CountDownLatch(1);\n+        Stat s = watchUrLedgerNode(urZNode, latch); // should be marked as replicated\n+        if (s != null) {\n+            assertTrue(\"Should be marked as replicated\", latch.await(10, TimeUnit.SECONDS));\n+        }\n+\n+        replicaToKill = LedgerHandleAdapter\n+            .getLedgerMetadata(lh).getEnsembles().get(0L).get(1);\n+        LOG.info(\"Killing second bookie, {}, in ensemble {}\", replicaToKill,\n+                 LedgerHandleAdapter.getLedgerMetadata(lh).getEnsembles().get(0L));\n+        killBookie(replicaToKill);\n+\n+        getAuditor(10, TimeUnit.SECONDS).submitAuditTask().get(); // ensure auditor runs\n+\n+        assertTrue(\"Should be marked as underreplicated\", latch.await(5, TimeUnit.SECONDS));\n+        latch = new CountDownLatch(1);\n+        s = watchUrLedgerNode(urZNode, latch); // should be marked as replicated\n+        if (s != null) {\n+            assertTrue(\"Should be marked as replicated\", latch.await(5, TimeUnit.SECONDS));\n+        }\n+\n+        // should be able to open ledger without issue\n+        bkc.openLedger(lh.getId(), DigestType.CRC32, PASSWD);\n+    }\n+\n     private int getReplicaIndexInLedger(LedgerHandle lh,\n             InetSocketAddress replicaToKill) {\n         SortedMap<Long, ArrayList<InetSocketAddress>> ensembles = LedgerHandleAdapter"},{"sha":"62548c6756b394bdd19da8c127a43f3aa3237cc0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/replication/TestLedgerUnderreplicationManager.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -92,7 +92,9 @@ public void setupZooKeeper() throws Exception {\n         zkUtil = new ZooKeeperUtil();\n         zkUtil.startServer();\n \n-        conf = new ServerConfiguration().setZkServers(zkUtil.getZooKeeperConnectString());\n+        conf = new ServerConfiguration()\n+            .setAllowLoopback(true)\n+            .setZkServers(zkUtil.getZooKeeperConnectString());\n \n         executor = Executors.newCachedThreadPool();\n "},{"sha":"a6c3307f49daff62357d35f665a2de96c0cf91d7","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookKeeperClusterTestCase.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -31,6 +31,7 @@\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n \n import junit.framework.TestCase;\n \n@@ -43,6 +44,7 @@\n import org.apache.bookkeeper.metastore.InMemoryMetaStore;\n import org.apache.bookkeeper.proto.BookieServer;\n import org.apache.bookkeeper.replication.AutoRecoveryMain;\n+import org.apache.bookkeeper.replication.Auditor;\n import org.apache.bookkeeper.replication.ReplicationException.CompatibilityException;\n import org.apache.bookkeeper.replication.ReplicationException.UnavailableException;\n import org.apache.commons.io.FileUtils;\n@@ -529,4 +531,18 @@ public void stopReplicationService() throws Exception {\n                     + autoRecoveryProcess.getKey().getLocalAddress());\n         }\n     }\n+\n+    public Auditor getAuditor(int timeout, TimeUnit unit) throws Exception {\n+        final long timeoutAt = System.nanoTime() + TimeUnit.NANOSECONDS.convert(timeout, unit);\n+        while (System.nanoTime() < timeoutAt) {\n+            for (AutoRecoveryMain p : autoRecoveryProcesses.values()) {\n+                Auditor a = p.getAuditor();\n+                if (a != null) {\n+                    return a;\n+                }\n+            }\n+            Thread.sleep(100);\n+        }\n+        throw new Exception(\"No auditor found\");\n+    }\n }"},{"sha":"670d42c96f5a3c11474f39143d049bc2ed3374b5","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieClientTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -53,7 +53,7 @@\n     public int port = 13645;\n     public ClientSocketChannelFactory channelFactory;\n     public OrderedSafeExecutor executor;\n-    ServerConfiguration conf = new ServerConfiguration();\n+    ServerConfiguration conf;\n \n     @Override\n     public void setUp() throws Exception {\n@@ -67,6 +67,7 @@ public void setUp() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n         conf.setZkServers(null).setBookiePort(port)\n             .setJournalDirName(tmpDir.getPath())\n+            .setAllowLoopback(true)\n             .setLedgerDirNames(new String[] { tmpDir.getPath() });\n         bs = new BookieServer(conf);\n         bs.start();"},{"sha":"54a85bcb8e6a37293f4710f15249b35c5f305267","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/BookieJournalRollingTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -201,6 +201,7 @@ public void testJournalRollingWithoutSyncup() throws Exception {\n \n         // set flush interval to a large value\n         ServerConfiguration newConf = new ServerConfiguration();\n+        newConf.setAllowLoopback(true);\n         newConf.setFlushInterval(999999999);\n         // restart bookies\n         restartBookies(newConf);\n@@ -239,6 +240,7 @@ public void testReplayDeletedLedgerJournalEntries() throws Exception {\n         // restart bookies with flush interval set to a large value\n         ServerConfiguration newConf = new ServerConfiguration();\n         newConf.setFlushInterval(999999999);\n+        newConf.setAllowLoopback(true);\n         // restart bookies\n         restartBookies(newConf);\n "},{"sha":"7db8e76d6a188a511d7f9cb2dde98557f708e767","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/ConcurrentLedgerTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -50,7 +50,7 @@\n     File txnDir, ledgerDir;\n     int recvTimeout = 10000;\n     Semaphore throttle;\n-    ServerConfiguration conf = new ServerConfiguration();\n+    ServerConfiguration conf;\n \n     @Override\n     @Before\n@@ -71,6 +71,8 @@ public void setUp() throws Exception {\n         ledgerDir = new File(tmpFile.getParent(), tmpFile.getName()+\".dir\");\n         ledgerDir.mkdirs();\n \n+        conf = new ServerConfiguration();\n+        conf.setAllowLoopback(true);\n         conf.setBookiePort(5000);\n         conf.setZkServers(null);\n         conf.setJournalDirName(txnDir.getPath());"},{"sha":"dc2240f241343abb15cbb2eeebfc6c71cfbeb15e","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/NIOServerFactoryTest.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -47,6 +47,7 @@ public void processPacket(ByteBuffer packet, Cnxn src) {\n     @Test(timeout=60000)\n     public void testProblemProcessor() throws Exception {\n         ServerConfiguration conf = new ServerConfiguration();\n+        conf.setAllowLoopback(true);\n         int port = PortManager.nextFreePort();\n         conf.setBookiePort(port);\n         NIOServerFactory factory = new NIOServerFactory(conf, problemProcessor);"},{"sha":"18a4265f4a4be8d7c6c743eed369705b495515c0","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestBackwardCompat.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -267,6 +267,7 @@ void close() throws Exception {\n         ServerCurrent(File journalDir, File ledgerDir, int port) throws Exception {\n             conf = new org.apache.bookkeeper.conf.ServerConfiguration();\n             conf.setBookiePort(port);\n+            conf.setAllowLoopback(true);\n             conf.setZkServers(zkUtil.getZooKeeperConnectString());\n             conf.setJournalDirName(journalDir.getPath());\n             conf.setLedgerDirNames(new String[] { ledgerDir.getPath() });\n@@ -614,4 +615,4 @@ public void testCompat410() throws Exception {\n \n         scur.stop();\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"61217f0d973869d027a6d9de6cf3df0b6b175641","filename":"bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/bookkeeper-server/src/test/java/org/apache/bookkeeper/test/TestCallbacks.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -0,0 +1,57 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ */\n+package org.apache.bookkeeper.test;\n+\n+import org.apache.bookkeeper.client.AsyncCallback.AddCallback;\n+import org.apache.bookkeeper.client.BKException;\n+import org.apache.bookkeeper.client.LedgerHandle;\n+import org.apache.bookkeeper.proto.BookkeeperInternalCallbacks.GenericCallback;\n+import com.google.common.util.concurrent.AbstractFuture;\n+\n+/**\n+ * Callbacks implemented with SettableFuture, to be used in tests\n+ */\n+public class TestCallbacks {\n+    public static class GenericCallbackFuture<T>\n+        extends AbstractFuture<T> implements GenericCallback<T> {\n+        @Override\n+        public void operationComplete(int rc, T value) {\n+            if (rc != BKException.Code.OK) {\n+                setException(BKException.create(rc));\n+            } else {\n+                set(value);\n+            }\n+        }\n+    }\n+\n+    public static class AddCallbackFuture\n+        extends AbstractFuture<Long> implements AddCallback {\n+        @Override\n+        public void addComplete(int rc, LedgerHandle lh, long entryId, Object ctx) {\n+            if (rc != BKException.Code.OK) {\n+                setException(BKException.create(rc));\n+            } else {\n+                set(entryId);\n+            }\n+        }\n+    }\n+}\n+"},{"sha":"c44945d1dc34e7f081d9e8514eaa06cbb79f8df0","filename":"compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.0.0/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>compat-deps</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-server-compat400</artifactId>"},{"sha":"803dc9484bf0cd4c148464a98296af40f78d6084","filename":"compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/bookkeeper-server-compat-4.1.0/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>compat-deps</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>bookkeeper-server-compat410</artifactId>"},{"sha":"0e6ef837df2208de6e04b145e40563ef9f365451","filename":"compat-deps/hedwig-server-compat-4.0.0/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/hedwig-server-compat-4.0.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/hedwig-server-compat-4.0.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.0.0/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>compat-deps</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>hedwig-server-compat400</artifactId>"},{"sha":"8c832f8cf94509417c996c9f24fdc6832c4f10d3","filename":"compat-deps/hedwig-server-compat-4.1.0/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/hedwig-server-compat-4.1.0/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/hedwig-server-compat-4.1.0/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/hedwig-server-compat-4.1.0/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -21,7 +21,7 @@\n   <parent>\n     <artifactId>compat-deps</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <groupId>org.apache.bookkeeper</groupId>\n   <artifactId>hedwig-server-compat410</artifactId>"},{"sha":"d05e406e2110e35ecd6687b1ce0258ddcf12eb27","filename":"compat-deps/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/compat-deps/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/compat-deps/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -22,11 +22,11 @@\n   <parent>\n     <artifactId>bookkeeper</artifactId>\n     <groupId>org.apache.bookkeeper</groupId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>org.apache.bookkeeper</groupId>\n-  <version>4.2.2</version>\n+  <version>4.2.3</version>\n   <artifactId>compat-deps</artifactId>\n   <packaging>pom</packaging>\n   <name>compability dependencies</name>"},{"sha":"90a5115f08538a59bd58f71438bf419855ca74d3","filename":"hedwig-client/pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-client/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-client/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-client/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <groupId>org.apache.bookkeeper</groupId>\n     <artifactId>bookkeeper</artifactId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <properties>\n       <mainclass>org.apache.hedwig.client.App</mainclass>\n@@ -32,6 +32,11 @@\n   <name>hedwig-client</name>\n   <url>http://maven.apache.org</url>\n   <dependencies>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+      <version>${guava.version}</version>\n+    </dependency>\n     <dependency>\n       <groupId>junit</groupId>\n       <artifactId>junit</artifactId>"},{"sha":"175dadb6fd6149de35115d9ed297eaa5e939be46","filename":"hedwig-protocol/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-protocol/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-protocol/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-protocol/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <groupId>org.apache.bookkeeper</groupId>\n     <artifactId>bookkeeper</artifactId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <artifactId>hedwig-protocol</artifactId>\n   <packaging>jar</packaging>\n@@ -32,7 +32,7 @@\n     <dependency>\n       <groupId>com.google.protobuf</groupId>\n       <artifactId>protobuf-java</artifactId>\n-      <version>2.4.1</version>\n+      <version>${protobuf.version}</version>\n       <scope>compile</scope>\n     </dependency>\n     <dependency>"},{"sha":"bdbbfba8684c3aec8864e829181abc7d943c8f11","filename":"hedwig-server/bin/hedwig","status":"modified","additions":16,"deletions":3,"changes":19,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/bin/hedwig","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/bin/hedwig","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/bin/hedwig?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -58,6 +58,19 @@ DEFAULT_LOG_CONF=$HW_HOME/conf/log4j.properties\n \n . $HW_HOME/conf/hwenv.sh\n \n+# Check for the java to use\n+if [[ -z $JAVA_HOME ]]; then\n+    JAVA=$(which java)\n+    if [ $? = 0 ]; then\n+        echo \"JAVA_HOME not set, using java from PATH. ($JAVA)\"\n+    else\n+        echo \"Error: JAVA_HOME not set, and no java executable found in $PATH.\" 1>&2\n+        exit 1\n+    fi\n+else\n+    JAVA=$JAVA_HOME/bin/java\n+fi\n+\n RELEASE_JAR=`ls $HW_HOME/hedwig-server-*.jar 2> /dev/null | tail -1`\n if [ $? == 0 ]; then\n     HEDWIG_JAR=$RELEASE_JAR\n@@ -171,7 +184,7 @@ OPTS=\"$OPTS -Dhedwig.log.file=$HEDWIG_LOG_FILE\"\n # Change to HW_HOME to support relative paths\n cd \"$BK_HOME\"\n if [ $COMMAND == \"server\" ]; then\n-    exec java $OPTS $JMX_ARGS org.apache.hedwig.server.netty.PubSubServer $HEDWIG_SERVER_CONF $HEDWIG_REGION_CLIENT_CONF $@\n+    exec $JAVA $OPTS $JMX_ARGS org.apache.hedwig.server.netty.PubSubServer $HEDWIG_SERVER_CONF $HEDWIG_REGION_CLIENT_CONF $@\n elif [ $COMMAND == \"console\" ]; then\n     # hedwig console configuration server part\n     if [ -z \"$HEDWIG_CONSOLE_SERVER_CONF\" ]; then\n@@ -181,11 +194,11 @@ elif [ $COMMAND == \"console\" ]; then\n     if [ -n \"$HEDWIG_CONSOLE_CLIENT_CONF\" ]; then\n         HEDWIG_CONSOLE_CLIENT_OPTIONS=\"-client-cfg $HEDWIG_CONSOLE_CLIENT_CONF\"\n     fi\n-    exec java $OPTS org.apache.hedwig.admin.console.HedwigConsole -server-cfg $HEDWIG_CONSOLE_SERVER_CONF $HEDWIG_CONSOLE_CLIENT_OPTIONS $@\n+    exec $JAVA $OPTS org.apache.hedwig.admin.console.HedwigConsole -server-cfg $HEDWIG_CONSOLE_SERVER_CONF $HEDWIG_CONSOLE_CLIENT_OPTIONS $@\n elif [ $COMMAND == \"help\" ]; then\n     hedwig_help;\n else\n-    exec java $OPTS $COMMAND $@\n+    exec $JAVA $OPTS $COMMAND $@\n fi\n \n "},{"sha":"8d379b6a11d5ba580f21e7a73fa7d0c54ae5d36a","filename":"hedwig-server/conf/hwenv.sh","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/conf/hwenv.sh","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/conf/hwenv.sh","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/conf/hwenv.sh?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -20,6 +20,9 @@\n # * limitations under the License.\n # */\n \n+# Set JAVA_HOME here to override the environment setting\n+# JAVA_HOME=\n+\n # default settings for starting hedwig\n # HEDWIG_SERVER_CONF=\n "},{"sha":"0c1aeae90a3bfc6f5fecb808b48d0a71482ea15a","filename":"hedwig-server/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -22,7 +22,7 @@\n   <parent>\n     <groupId>org.apache.bookkeeper</groupId>\n     <artifactId>bookkeeper</artifactId>\n-    <version>4.2.2</version>\n+    <version>4.2.3</version>\n   </parent>\n   <properties>\n       <mainclass>org.apache.hedwig.server.netty.PubSubServer</mainclass>"},{"sha":"28d670dca3a8fd30e33c825bdc923deeb6e0b631","filename":"hedwig-server/src/main/resources/NOTICE.bin.txt","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/main/resources/NOTICE.bin.txt","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/main/resources/NOTICE.bin.txt","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/main/resources/NOTICE.bin.txt?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -1,5 +1,5 @@\n Apache BookKeeper\n-Copyright 2011-2013 The Apache Software Foundation\n+Copyright 2011-2014 The Apache Software Foundation\n \n Licensed under the Apache License, Version 2.0 (the\n \"License\"); you may not use this file except in compliance"},{"sha":"fc1ed9efec2b3e717730d6665b3e19e226f7dce9","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/TestBackwardCompat.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -502,6 +502,7 @@ protected void startBookieServer() throws Exception {\n                 getClass().getName() + port, \"test\");\n             org.apache.bookkeeper.conf.ServerConfiguration conf = newServerConfiguration(\n                 port, zkUtil.getZooKeeperConnectString(), tmpDir, new File[] { tmpDir });\n+            conf.setAllowLoopback(true);\n             bks.add(startBookie(conf));\n             bkConfs.add(conf);\n         }\n@@ -510,6 +511,7 @@ protected void startBookieServer() throws Exception {\n             int port, String zkServers, File journalDir, File[] ledgerDirs) {\n             org.apache.bookkeeper.conf.ServerConfiguration conf =\n                 new org.apache.bookkeeper.conf.ServerConfiguration();\n+            conf.setAllowLoopback(true);\n             conf.setBookiePort(port);\n             conf.setZkServers(zkServers);\n             conf.setJournalDirName(journalDir.getPath());"},{"sha":"7ba01742d526cea9699ecd2d77ffd7516b99bc99","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/BookKeeperTestBase.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -244,6 +244,7 @@ private BookieServer startBookie(ServerConfiguration conf) throws Exception {\n \n     protected ServerConfiguration newServerConfiguration(int port, String zkServers, File journalDir, File[] ledgerDirs) {\n         ServerConfiguration conf = new ServerConfiguration(baseConf);\n+        conf.setAllowLoopback(true);\n         conf.setBookiePort(port);\n         conf.setZkServers(zkServers);\n         conf.setJournalDirName(journalDir.getPath());"},{"sha":"c69da18bb98d194154467821fd7b67b8979bd2fc","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestBookKeeperPersistenceManager.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -255,6 +255,7 @@ public TestBookKeeperPersistenceManager(boolean removeStartSeqId) {\n         });\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     private void startCluster(long delay) throws Exception {\n         bktb = new BookKeeperTestBase(numBookies, 0L);\n         bktb.setUp();"},{"sha":"b46ffb464d4f133c7eff395c6ef6ee9b1dc901ce","filename":"hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/hedwig-server/src/test/java/org/apache/hedwig/server/persistence/TestDeadlock.java?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -195,6 +195,7 @@ public long getMaximumCacheSize() {\n         }\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     @Override\n     protected ServerConfiguration getServerConfiguration(int serverPort, int sslServerPort) {\n         ServerConfiguration serverConf = new TestServerConfiguration(serverPort, sslServerPort);"},{"sha":"f2dee2ae6cd6a1ec6db3993f4d81508e292d4233","filename":"pom.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/apache/bookkeeper/blob/9cccf3dee85874f28573dfa99c076e445091c21a/pom.xml","raw_url":"https://github.com/apache/bookkeeper/raw/9cccf3dee85874f28573dfa99c076e445091c21a/pom.xml","contents_url":"https://api.github.com/repos/apache/bookkeeper/contents/pom.xml?ref=9cccf3dee85874f28573dfa99c076e445091c21a","patch":"@@ -26,10 +26,11 @@\n   </parent>\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>org.apache.bookkeeper</groupId>\n-  <version>4.2.2</version>\n+  <version>4.2.3</version>\n   <artifactId>bookkeeper</artifactId>\n   <packaging>pom</packaging>\n   <name>bookkeeper</name>\n+  <inceptionYear>2011</inceptionYear>\n   <modules>\n     <module>compat-deps</module>\n     <module>hedwig-client</module>\n@@ -41,6 +42,10 @@\n   <properties>\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>\n+    <!-- ProtocolBuffer version -->\n+    <protobuf.version>2.4.1</protobuf.version>\n+    <!-- Guava version -->\n+    <guava.version>13.0.1</guava.version>\n   </properties>\n   <url>http://zookeeper.apache.org/bookkeeper</url>\n   <build>"}]}

